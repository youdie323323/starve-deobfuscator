(function (Z, Mb, Jd, Vd) {
    var ne = 51;
    if (ne >= 4) {
        ne = 131;
    }
    const Gf = window;
    Math.floor(171[171 .ⲆΔΔⵠΔⲆᐃ]);
    let m = 5;
    const u = function (a) {
        let b = "";
        for (let c = 0; c < a.length; c++) {
            b += Gf.String.fromCharCode(a[c] ^ m++ % 255);
        }
        return b;
    };
    var n = 244;
    if (n > 5) {
        n = 88;
    }
    const Yg = 256;
    const a = 16;
    const r = 8;
    const s = 11;
    const h = 255;
    const l = 18;
    const g = -8;
    const b = 12;
    const d = 3;
    function v(a) {
        const b = Math.random;
        const c = [];
        Math.random = function () {
            for (let a = 0; a < 2319; a++) {
                c.push(a);
            }
            return b();
        };
    }
    const c = 100;
    const Gi = undefined;
    const p = 20;
    const C = 10;
    const f = -4;
    const z = false;
    const y = true;
    const w = 0;
    const P = 19;
    const A = 14;
    const k = 17;
    const x = 13;
    const J = 255;
    const M = 1;
    const B = 2;
    var D = Gf.console;
    D.log = D.info = D.error = D.warn = D.debug = D.ⵠΔΔⲆⵠⵠᐃⲆΔ = D.trace = D.time = D.timeEnd = function () { };
    const I = 18;
    const E = 2;
    const S = 15;
    const Q = 6;
    const T = 4;
    const F = 15;
    const R = 9;
    const j = 2048;
    const G = 3;
    const L = 5;
    const W = 1 << 12;
    const O = 6;
    const N = 7;
    const H = 10;
    const q = 16;
    const U = 4;
    const Y = 12;
    function K(a) {
        if (a > 0) {
            return a * a;
        } else {
            return a;
        }
    }
    function V(a) {
        return Gf.String.fromCharCode(a);
    }
    const X = 4;
    function _(a) {
        if (a > 0) {
            return a * a;
        } else {
            return a;
        }
    }
    function ee(a) {
        return Gf.String.fromCharCode(a);
    }
    const ie = z;
    const oe = 13;
    const ae = 100;
    const re = y;
    const se = 256;
    let he = Gi;
    const te = 8;
    let ge;
    let aj;
    const bj = 11;
    let de = Gi;
    const cj = 19;
    const ce = 13;
    let me;
    let dj = Gi;
    let ej = Gi;
    let fj = Gi;
    const gj = ie;
    let ze = [];
    const ye = 8;
    const we = 100;
    let Pe = "_";
    const hj = y;
    let ke = Gi;
    const ij = 7;
    function Je(a) {
        return Gf.String.fromCharCode(a);
    }
    const Me = 255;
    const Be = 3;
    const De = 16;
    const Ie = 9;
    let Ee = Gi;
    const jj = 14;
    const Qe = 5;
    let _e;
    let kj = Gi;
    const lj = Gi;
    let je;
    let mj;
    let nj;
    const oj = re;
    let Oe;
    let pj = Gi;
    const qj = 4;
    const qe = 18;
    const Ue = 12;
    let Ye;
    let rj;
    const sj = oj;
    const Xe = 20;
    let Ze;
    const tj = 19;
    const ei = 6;
    let ii;
    const uj = 5;
    let ni;
    let vj;
    let wj = lj;
    const xj = 0;
    let si;
    const yj = 6;
    let li = Gi;
    const zj = gj;
    let ui;
    let Aj;
    let Bj;
    let Cj = lj;
    const Dj = 16;
    const mi = 255;
    let pi;
    let Ej = Gi;
    let Fj = lj;
    const Gj = 255;
    let zi;
    const Hj = y;
    let wi;
    let Ij = Gi;
    const Jj = 17;
    const ki = 7;
    const xi = 100;
    let Ji;
    let Kj;
    const Lj = 5;
    const Di = 19;
    const Ii = 11;
    let Ei;
    const Mj = 5;
    let Qi;
    let Nj;
    function Oj(a) {
        if (a > 0) {
            return a * a;
        } else {
            return a;
        }
    }
    function Ri(a) {
        return Gf.String.fromCharCode(a);
    }
    let ji;
    const Pj = hj;
    let Wi;
    let Qj = lj;
    const Rj = 4;
    const Hi = 1;
    const qi = 15;
    const Ui = 8;
    const Yi = 0;
    let Ki = Gi;
    let Sj = lj;
    const Tj = 4;
    let Zi = Gi;
    const Uj = 14;
    let Vj = Gi;
    let Wj = Gi;
    const Xj = 10;
    let Yj = lj;
    let Zj = lj;
    const $j = 18;
    let _j = 0;
    if (!Gf.WebAssembly || !Gf.WebAssembly.instantiate) {
        ΔᐃⵠⲆⲆᐃⵠⲆⵠ();
    }
    const ak = 13;
    const bk = {
        Date: Date
    };
    const ck = 0;
    const dk = 2;
    Gf.WebAssembly.instantiate(Uint8Array.from(Gf.atob(""), function (a) {
        return a.charCodeAt(0);
    }), bk).then(async function (a) {
        he = a.instance;
        ge = he.exports;
        aj = ge.memory;
        de = aj.buffer;
        fj = ge.__pin;
        ej = ge.__unpin;
        dj = ge.__new;
        me = ge.__collect;
        Pe = "_";
        for (let b = 0; b < 31; b++) {
            ze[b] = ge[Pe + b];
        }
        ke = ge.__rtti_base;
        Ee = new Float32Array(de);
        kj = new Float64Array(de);
        _e = new BigUint64Array(de);
        je = new Uint32Array(de);
        mj = new Uint16Array(de);
        nj = new Uint8Array(de);
        pj = new BigInt64Array(de);
        Oe = new Int32Array(de);
        Ye = new Int16Array(de);
        rj = new Int8Array(de);
        wi = ze[2];
        pi = ze[15];
        ni = ze[25];
        Qi = ze[22];
        Zi = ze[12];
        Kj = ze[3];
        vj = ze[8];
        Bj = ze[5];
        wj = ze[0];
        ui = ze[1];
        Ej = ze[18];
        Ki = ze[23];
        Cj = ze[11];
        Vj = ze[19];
        Ij = ze[30];
        Ze = ze[16];
        Ji = ze[10];
        Ei = ze[26];
        zi = ze[9];
        Qj = ze[21];
        Wi = ze[28];
        Nj = ze[6];
        ii = ze[13];
        Sj = ze[7];
        Fj = ze[14];
        li = ze[29];
        ji = ze[17];
        si = ze[20];
        Yj = ze[4];
        Wj = ze[24];
        Aj = ze[27];
        _j = 1;
        if (Zj) {
            await Zj();
        }
    });
    const ek = ie;
    const fk = lj;
    const gk = function (a) {
        return je[(ke + 4 >>> 2) + (a << 1)];
    };
    function hk(a, b, c) {
        if (c) {
            switch (a) {
                case 2:
                    return Ee;
                case 3:
                    return kj;
            }
        } else {
            switch (a) {
                case 0:
                    if (b) {
                        return rj;
                    } else {
                        return nj;
                    }
                case 1:
                    if (b) {
                        return Ye;
                    } else {
                        return mj;
                    }
                case 2:
                    if (b) {
                        return Oe;
                    } else {
                        return je;
                    }
                case 3:
                    if (b) {
                        return pj;
                    } else {
                        return _e;
                    }
            }
        }
    }
    function ik(a) {
        return 31 - Math.clz32(a >>> 6 & 31);
    }
    const jk = 3;
    function kk(b) {
        const c = je[b + g >>> 2];
        const d = gk(c);
        const e = ik(d);
        let h = d & 4 ? b : je[b + 4 >>> 2];
        const i = d & 2 ? je[b + 12 >>> 2] : je[h + f >>> 2] >>> e;
        return hk(e, d & 2048, d & W).subarray(h >>>= e, h + i);
    }
    const lk = 9;
    const mk = 20;
    function nk(b, c, d, e) {
        const f = (16 << (b & 255)) + (8 << (b >> 16 & 255)) + (24 << (b >> 8 & 255)) + (0 << (b >> 24 & 255));
        const g = ~(c & 13167) & c | ~(c & 13167) & 13167;
        const a = d ^ 26391;
        const i = ~(e & 38825) & (e | 38825);
        return ((29443 + (function (b, c, d) {
            const e = (16 << (b >> 24 & 255)) + (0 << (b >> 16 & 255)) + (8 << (b & 255)) + (24 << (b >> 8 & 255));
            const f = c ^ 60466;
            const g = ~(d & 13202) & 13202 | ~(d & 13202) & d;
            const a = rt(e, f, g);
            (function (b, c, d, e, f, g) {
                const a = ~(d & 29171) & (d | 29171);
                const i = (12345 + (20386 + e) * 1103515245) % 2147483648;
                const j = function (a, b) {
                    const c = (8 << (a >> 8 & 255)) + (16 << (a & 255)) + (0 << (a >> 16 & 255)) + (24 << (a >> 24 & 255));
                    const d = ~(b & 32253) & (b | 32253);
                    const e = function (b, c, d, e, f) {
                        const i = (24 << (b >> 8 & 255)) + (16 << (b >> 16 & 255)) + (8 << (b & 255)) + (0 << (b >> 24 & 255));
                        const a = (c | 10774) & ~(c & 10774);
                        const j = ((d + 55131) * 2147483629 + 2147483587) % 2147483647;
                        const k = (0 << (e & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 16 & 255)) + (24 << (e >> 24 & 255));
                        const h = (8 << (f >> 8 & 255)) + (24 << (f >> 16 & 255)) + (0 << (f & 255)) + (16 << (f >> 24 & 255));
                        const l = function (b, c, d) {
                            const e = b ^ 54893;
                            const f = (c + 28091) % 65394;
                            const g = (0 << (d >> 8 & 255)) + (16 << (d & 255)) + (8 << (d >> 24 & 255)) + (24 << (d >> 16 & 255));
                            const a = function (a, b) {
                                const c = (2531011 + (23035 + a) * 214013) % 4294967296;
                                const d = (2147483587 + (56571 + b) * 2147483629) % 2147483647;
                                const e = function (b, c, d, e, f) {
                                    const i = (b | 12858) & ~(b & 12858);
                                    const a = (c | 21276) & ~(c & 21276);
                                    const j = ((1109 + d) * 1664525 + 1013904223) % 4294967296;
                                    const k = (e | 47043) & ~(e & 47043);
                                    const h = ((33511 + f) * 22695477 + 1) % 4294967296;
                                    const l = eo(i, a, j, k, h, i);
                                    const g = function (b, c, d, e) {
                                        const f = (24 << (b >> 16 & 255)) + (0 << (b & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 24 & 255));
                                        const g = (c | 8372) & ~(c & 8372);
                                        const a = ~(d & 30093) & (d | 30093);
                                        const i = ix(f, g, a, (12345 + (e + 34121) * 1103515245) % 2147483648, f);
                                        const j = lt(g, a);
                                        return ((46034 + (i ^ j)) * 1664525 + 1013904223) % 4294967296;
                                    }(a, j, k, h);
                                    return (2531011 + (51487 + (l ^ g)) * 214013) % 4294967296;
                                }(c, d, c, d, c);
                                Pw(d, c, d, c, d);
                                return ~(e & 10964) & e | ~(e & 10964) & 10964;
                            }(e, f);
                            ix(g, e, f, g, e);
                            return a ^ 59070;
                        }(i, a, j);
                        xr(k, h, i, a, j);
                        return (l | 53616) & ~(l & 53616);
                    }(c, d, c, d, c);
                    eo(d, c, d, c, d, c);
                    return ~(e & 11879) & 11879 | ~(e & 11879) & e;
                }(~(b & 64964) & b | ~(b & 64964) & 64964, c ^ 36367);
                Nr(a, i);
            })(e, f, g, e);
            return ~(a & 54865) & 54865 | ~(a & 54865) & a;
        }(f, g, a) ^ gf(i, f, g, a))) * 22695477 + 1) % 4294967296;
    }
    const ok = 10;
    const pk = 255;
    function qk(a, b) {
        const c = ~(a & 7863) & (a | 7863);
        const d = ~(b & 57306) & 57306 | ~(b & 57306) & b;
        const e = rt(c, d, c);
        rt(d, c, d);
        return ~(e & 26441) & 26441 | ~(e & 26441) & e;
    }
    const rk = 17;
    const sk = 5;
    const tk = 17;
    const uk = 16;
    const vk = "development";
    const wk = 14;
    const xk = "production";
    function yk(a) {
        this.ⲆⲆᐃᐃ = 2147483648;
        this.a = 1103515245;
        this.c = 12345;
        this.state = a || Math.floor(Math.random() * (this.ⲆⲆᐃᐃ - 1));
    }
    const zk = 16;
    const Ak = 12;
    yk.prototype.random = function () {
        this.state = (this.a * this.state + this.c) % this.ⲆⲆᐃᐃ;
        return this.state / this.ⲆⲆᐃᐃ;
    };
    yk.prototype.ⵠΔᐃⵠΔⵠⵠ = function (a) {
        this.state = a;
    };
    ⵠⲆᐃⵠᐃⲆⵠ = 10000;
    ⵠΔΔⵠⵠⵠⲆ = [];
    const Bk = 6;
    var Ck = new yk();
    Ck.ⵠΔᐃⵠΔⵠⵠ(new Date().getTime());
    const Dk = sj;
    for (var Ek = 0; ⵠⲆᐃⵠᐃⲆⵠ > Ek; Ek++) {
        ⵠΔΔⵠⵠⵠⲆ.push(Ck.random());
    }
    function Fk(b, c, d, e, f, i) {
        const a = ((43318 + d) * 214013 + 2531011) % 4294967296;
        const j = (e | 11848) & ~(e & 11848);
        const h = (16 << (f >> 8 & 255)) + (24 << (f & 255)) + (0 << (f >> 16 & 255)) + (8 << (f >> 24 & 255));
        const k = (i | 63990) & ~(i & 63990);
        const g = hx((0 << (b & 255)) + (16 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)), c ^ 21854);
        gf(a, j, h, k);
        return (g | 5351) & ~(g & 5351);
    }
    const Gk = 16;
    function Hk(b, c, d, e) {
        const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
        const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
        const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
        const j = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
        const h = function (c, e, f, i, j, k) {
            const a = c ^ 10715;
            const m = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
            const n = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
            const h = i ^ 40782;
            const l = j ^ 41301;
            const g = ~(k & 12091) & (k | 12091);
            const o = bn(a, m, n, h, l, g);
            bn(a, m, n, h, l, g);
            Fn(a, m, n, h, l);
            const b = (o | 3006) & ~(o & 3006);
            return ~(b & 24460) & (b | 24460);
        }(f, i, a, j, f, i);
        const k = Kn(a, j, f, i, a);
        bn(j, f, i, a, j, f);
        const g = (1013904223 + (26191 + (h ^ k)) * 1664525) % 4294967296;
        return (g | 38630) & ~(g & 38630);
    }
    const Ik = 256;
    const Jk = 100;
    function Kk(c, e, f, i, j) {
        const k = ((c + 14772) * 2147483629 + 2147483587) % 2147483647;
        const a = e ^ 63080;
        const l = ((f + 60304) * 22695477 + 1) % 4294967296;
        const m = ~(i & 5467) & 5467 | ~(i & 5467) & i;
        const h = (j | 40165) & ~(j & 40165);
        const g = function (b, c, d, e) {
            const f = (b | 57611) & ~(b & 57611);
            const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
            const a = d ^ 62842;
            const j = ~(e & 1179) & e | ~(e & 1179) & 1179;
            const k = Sk(f, i, a, j);
            const h = Mn(f, i, a, j);
            Hk(f, i, a, j);
            const l = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> 8 & 255));
            return ~(l & 63304) & (l | 63304);
        }(k, a, l, m);
        const n = Kn(h, k, a, l, m);
        const b = Xn(h, k, a, l, m, h);
        return ((28765 + ((16 << ((g ^ n) >> 24 & 255)) + (8 << ((g ^ n) >> 16 & 255)) + (24 << ((g ^ n) >> 32 & 255)) + (32 << ((g ^ n) >> 8 & 255)) ^ b)) * 1664525 + 1013904223) % 4294967296;
    }
    function Lk(c, e, f, i, j, k) {
        const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
        const m = ~(e & 49976) & e | ~(e & 49976) & 49976;
        const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
        const h = i ^ 52219;
        const l = (j + 3575) % 65503;
        const g = ~(k & 6932) & k | ~(k & 6932) & 6932;
        const o = Jn(a, m, n, h, l);
        const b = function (c, d, e, f, i, j) {
            const a = c ^ 30142;
            const k = (d + 63025) % 65493;
            const m = e ^ 30777;
            const h = ((45939 + f) * 22695477 + 1) % 4294967296;
            const l = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
            const g = (j | 45652) & ~(j & 45652);
            const n = Jn(a, k, m, h, l);
            Kk(g, a, k, m, h);
            tn(l, g, a, k, m, h);
            return n ^ 60048;
        }(g, a, m, n, h, l);
        rn(g, a, m, n, h, l);
        const d = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
        return ~(d & 42138) & d | ~(d & 42138) & 42138;
    }
    const Mk = 20;
    const Nk = 15;
    function Ok(c, d, e, f, i) {
        const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
        const a = d ^ 58614;
        const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
        const m = f ^ 40810;
        const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
        const l = On(j, a);
        const g = Hk(k, m, h, j);
        (function (b, c, d, e) {
            const f = (b + 34282) % 65336;
            const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
            const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
            const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
            const k = function (a, b) {
                const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
                const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
                const e = Vn(c, d, c);
                on(d, c, d, c);
                return ((42346 + (e ^ 18573 ^ Wk(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
            }(f, i);
            const h = Ln(a, j, f, i, a);
            On(j, f);
            const l = (58498 + (k ^ h)) % 65531;
        })(a, k, m, h);
        const n = (24 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 32 & 255)) + (16 << ((l ^ g) >> 8 & 255));
        return ~(n & 13644) & n | ~(n & 13644) & 13644;
    }
    const Pk = 100;
    const Qk = 19;
    const Rk = 14;
    function Sk(b, c, d, e) {
        const f = b ^ 11762;
        const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
        return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
    }
    const Tk = 2;
    function Uk(b, c, d, e, f) {
        const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
        const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
        const j = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
        const k = (1 + (e + 41324) * 22695477) % 4294967296;
        const h = (f | 19607) & ~(f & 19607);
        const l = qn(i, a);
        Ln(j, k, h, i, a);
        tn(j, k, h, i, a, j);
        const g = ~(l & 49323) & 49323 | ~(l & 49323) & l;
        return ~(g & 46567) & (g | 46567);
    }
    function Vk(a) {
        return Gf.String.fromCharCode(a);
    }
    function Wk(b, c, d, e, f) {
        const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
        const a = (c + 39144) % 65406;
        const j = d ^ 34575;
        const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
        const h = (f | 25975) & ~(f & 25975);
        const l = Sk(i, a, j, k);
        Ln(h, i, a, j, k);
        rn(h, i, a, j, k, h);
        return (l | 19326) & ~(l & 19326) ^ 36297;
    }
    function Xk(a) {
        const b = Gf.setTimeout;
        const c = b;
        const d = function () {
            b(d, 3281);
            c(d, 6126);
        };
        d();
    }
    const Yk = ek;
    const Zk = 2;
    const $k = 12;
    const _k = 11;
    const Rl = 0;
    function an(c, e, f, i, j, k) {
        const a = (1013904223 + (c + 28824) * 1664525) % 4294967296;
        const l = (1013904223 + (13210 + e) * 1664525) % 4294967296;
        const m = ~(f & 32165) & 32165 | ~(f & 32165) & f;
        const h = (24 << (i >> 24 & 255)) + (16 << (i >> 8 & 255)) + (8 << (i >> 16 & 255)) + (32 << (i >> 32 & 255));
        const g = (1 + (39199 + j) * 22695477) % 4294967296;
        const n = k ^ 33037;
        const b = function (b, c, d) {
            const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
            const f = (c | 44117) & ~(c & 44117);
            const i = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
            const a = sn(e, f, i, e, f);
            const j = Xn(i, e, f, i, e, f);
            const k = function (a, b) {
                const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
                const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
                const e = tn(c, d, c, d, c, d);
                (function (b, c, d, e, f) {
                    const i = b ^ 64570;
                    const a = (2531011 + (c + 41768) * 214013) % 4294967296;
                    const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
                    const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
                    const h = (f | 21896) & ~(f & 21896);
                    const l = function (a, b) {
                        const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
                        const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
                        const e = function (b, c, d) {
                            const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
                            const f = (c | 55665) & ~(c & 55665);
                            const g = (d + 54633) % 65404;
                            const a = Kk(e, f, g, e, f);
                            (function (c, e, f, i, j, k) {
                                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                                const n = (f | 14774) & ~(f & 14774);
                                const h = (i | 48802) & ~(i & 48802);
                                const l = ~(j & 24998) & (j | 24998);
                                const g = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                                const o = dn(a, m, n, h);
                                const b = Ln(l, g, a, m, n);
                                const d = dn(h, l, g, a);
                            })(g, e, f, g, e, f);
                            Mn(g, e, f, g);
                            return ~(a & 43875) & (a | 43875) ^ 15116;
                        }(c, d, c);
                        Fn(d, c, d, c, d);
                        Sk(c, d, c, d);
                        return (e | 17943) & ~(e & 17943) ^ 21791;
                    }(i, a);
                    on(j, k, h, i);
                    const g = Uk(a, j, k, h, i);
                })(c, d, c, d, c);
                qn(d, c);
                return (e | 58283) & ~(e & 58283) ^ 8337;
            }(i, e);
            const h = (16 << ((a ^ j) >> 32 & 255)) + (24 << ((a ^ j) >> 24 & 255)) + (32 << ((a ^ j) >> 8 & 255)) + (8 << ((a ^ j) >> 16 & 255));
            return (8 << ((h ^ k) >> 32 & 255)) + (16 << ((h ^ k) >> 8 & 255)) + (32 << ((h ^ k) >> 16 & 255)) + (24 << ((h ^ k) >> 24 & 255));
        }(a, l, m);
        Mn(h, g, n, a);
        return ((34159 + (b ^ 2959 ^ dn(l, m, h, g))) * 1103515245 + 12345) % 2147483648;
    }
    const en = 0;
    function bn(b, c, d, e, f, i) {
        const a = ~(b & 36133) & (b | 36133);
        const j = (c | 13670) & ~(c & 13670);
        const k = (d | 31390) & ~(d & 31390);
        const h = e ^ 64081;
        const l = f ^ 7550;
        const g = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
        return (12345 + (36760 + (((62552 + (In(a, j, k, h, l) ^ Mn(g, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ Fn(h, l, g, a, j))) * 1103515245) % 2147483648;
    }
    function dn(b, c, d, e) {
        const f = ~(b & 33107) & (b | 33107);
        const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
        const a = ~(d & 32053) & (d | 32053);
        const i = e ^ 12240;
        const j = function (b, c, d, e) {
            const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
            const i = (1 + (50595 + c) * 22695477) % 4294967296;
            const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
            const j = e ^ 18768;
            const k = Jn(f, i, a, j, f);
            const h = Ok(i, a, j, f, i);
            const l = kn(a, j);
            return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ l)) * 1664525 + 1013904223) % 4294967296;
        }(f, g, a, i);
        Mn(f, g, a, i);
        return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ Jn(f, g, a, i, f))) * 214013) % 4294967296;
    }
    const gn = 15;
    const cn = 1;
    const hn = 8;
    const ln = 14;
    const mn = fk;
    const nn = 255;
    const fn = 15;
    function on(b, c, d, e) {
        const f = (b | 15432) & ~(b & 15432);
        const g = c ^ 12315;
        const a = d ^ 38714;
        const i = e ^ 58084;
        const j = Lk(f, g, a, i, f, g);
        Mn(a, i, f, g);
        return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ rn(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
    }
    const pn = 7;
    function rn(b, c, d, e, f, g) {
        const a = b ^ 23409;
        const i = c ^ 26380;
        const j = ((f + 33017) * 1103515245 + 12345) % 2147483648;
        const h = g ^ 42490;
        return ((19056 + (Sk(a, i, d ^ 53590, e ^ 36633) ^ Sk(j, h, a, i))) * 22695477 + 1) % 4294967296;
    }
    function sn(b, c, d, e, f) {
        const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
        const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
        const j = (d | 31275) & ~(d & 31275);
        const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
        const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
        const l = rn(i, a, j, k, h, i);
        const g = Sk(a, j, k, h);
        Vn(i, a, j);
        return (24 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 32 & 255)) ^ 31710;
    }
    function tn(f, e, i, j, k, l) {
        const a = (24 << (f >> 24 & 255)) + (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255));
        const m = (e | 41551) & ~(e & 41551);
        const h = (24 << (i >> 24 & 255)) + (16 << (i >> 32 & 255)) + (8 << (i >> 16 & 255)) + (32 << (i >> 8 & 255));
        const g = ~(j & 32641) & (j | 32641);
        const n = ((k + 35582) * 214013 + 2531011) % 4294967296;
        const b = ~(l & 1090) & (l | 1090);
        const d = Xn(a, m, h, g, n, b);
        Wk(a, m, h, g, n);
        Sk(b, a, m, h);
        const o = ~(d & 8077) & 8077 | ~(d & 8077) & d;
        return ~(o & 3708) & (o | 3708);
    }
    function kn(b, c) {
        const d = (2531011 + (b + 62874) * 214013) % 4294967296;
        const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
        const f = rn(d, e, d, e, d, e);
        const g = rn(d, e, d, e, d, e);
        Sk(d, e, d, e);
        const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
        return ~(a & 55949) & 55949 | ~(a & 55949) & a;
    }
    const un = 18;
    const vn = z;
    const wn = 13;
    const xn = 1;
    const yn = 4;
    const zn = 18;
    const An = 10;
    const Bn = 3;
    const Cn = 7;
    const Dn = 255;
    const En = 18;
    function Fn(b, c, d, e, f) {
        const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
        const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
        const j = (2531011 + (22845 + d) * 214013) % 4294967296;
        const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
        const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
        const l = rn(i, a, j, k, h, i);
        const g = tn(a, j, k, h, i, a);
        Sk(j, k, h, i);
        return (8 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 32 & 255)) ^ 35444;
    }
    const jn = 16;
    const Gn = 8;
    function In(c, e, f, i, j) {
        const k = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
        const a = e ^ 55978;
        const l = ((f + 2934) * 1664525 + 1013904223) % 4294967296;
        const m = ~(i & 30642) & (i | 30642);
        const h = (8 << (j >> 8 & 255)) + (24 << (j >> 32 & 255)) + (16 << (j >> 24 & 255)) + (32 << (j >> 16 & 255));
        const g = Ln(k, a, l, m, h);
        const n = Fn(k, a, l, m, h);
        Sk(k, a, l, m);
        const b = (16 << ((g ^ n) >> 32 & 255)) + (24 << ((g ^ n) >> 8 & 255)) + (8 << ((g ^ n) >> 24 & 255)) + (32 << ((g ^ n) >> 16 & 255));
        return ~(b & 23686) & (b | 23686);
    }
    function Jn(b, c, d, e, f) {
        const i = b ^ 62008;
        const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
        const j = ((d + 46531) * 22695477 + 1) % 4294967296;
        const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
        const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
        const l = Kk(i, a, j, k, h);
        Xn(i, a, j, k, h, i);
        return ((3037 + (l ^ 57467 ^ Kn(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
    }
    function Ln(b, c, d, e, f) {
        const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
        const a = c ^ 50118;
        const j = d ^ 41620;
        const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
        const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
        const l = Xn(i, a, j, k, h, i);
        Xn(a, j, k, h, i, a);
        return (2531011 + (53616 + ((l | 43477) & ~(l & 43477) ^ Sk(j, k, h, i))) * 214013) % 4294967296;
    }
    function Mn(b, c, d, e) {
        const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
        const g = c ^ 57623;
        const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
        const i = ~(e & 24601) & e | ~(e & 24601) & 24601;
        const j = qn(f, g);
        qn(a, i);
        Kn(f, g, a, i, f);
        const h = ~(j & 43902) & 43902 | ~(j & 43902) & j;
        return (h | 8862) & ~(h & 8862);
    }
    function Hn(a) {
        const b = Math.random;
        const c = [];
        Math.random = function () {
            for (let a = 0; a < 4473; a++) {
                c.push(a);
            }
            return b();
        };
    }
    function qn(a, b) {
        const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
        const d = b ^ 53080;
        return (1 + (57525 + ((17769 + (In(c, d, c, d, c) ^ Ln(d, c, d, c, d))) % 65357 ^ Sk(c, d, c, d))) * 22695477) % 4294967296;
    }
    const Nn = 6;
    function Kn(c, d, e, f, i) {
        const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
        const a = (d + 52922) % 65337;
        const k = e ^ 25250;
        const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
        const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
        const l = Wk(j, a, k, m, h);
        const g = On(j, a);
        Wk(k, m, h, j, a);
        const n = (1 + (19675 + (l ^ g)) * 22695477) % 4294967296;
        return ~(n & 7922) & n | ~(n & 7922) & 7922;
    }
    function On(b, c) {
        const d = b ^ 24508;
        const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
        const f = Uk(d, e, d, e, d);
        const g = In(e, d, e, d, e);
        sn(d, e, d, e, d);
        const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
        return ~(a & 40927) & 40927 | ~(a & 40927) & a;
    }
    const Pn = 17;
    const Qn = 255;
    const Rn = 9;
    const Sn = 0;
    const Tn = oj;
    const Un = 255;
    function Vn(b, c, d) {
        const e = b ^ 23323;
        const f = (2531011 + (61713 + c) * 214013) % 4294967296;
        const g = (d | 24198) & ~(d & 24198);
        const a = Uk(e, f, g, e, f);
        const h = Uk(g, e, f, g, e);
        Uk(f, g, e, f, g);
        return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
    }
    const Wn = 10;
    function Xn(b, c, d, e, f, i) {
        const a = d ^ 8102;
        const j = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
        const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
        const h = (1 + (62237 + i) * 22695477) % 4294967296;
        const l = kn((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
        const g = kn(a, j);
        kn(k, h);
        return (45290 + (l ^ g)) % 65334 ^ 55575;
    }
    const Yn = z;
    Z = {
        ᐃΔⵠΔⵠⲆⲆ: () => new Promise((a, b) => {
            Gf.grecaptcha.ready(function () {
                Gf.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
                    action: "validate_recaptcha"
                }).then(function (b) {
                    a(b);
                }).catch(c => {
                    if (Cf) {
                        a(0);
                    } else {
                        console.log(fk);
                        b(c);
                    }
                });
            });
        }),
        ⲆⲆⵠΔⵠᐃᐃⵠⲆ: function (a) {
            Gf.open(a, "_blank").focus();
        },
        ᐃᐃΔⵠⵠΔⵠ: function (a) {
            Gf.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
        },
        ᐃᐃΔⲆᐃΔΔ: function (a, b) {
            for (var c in a) {
                if (a[c] != b[c]) {
                    return false;
                }
            }
            return true;
        },
        ⲆⲆᐃΔᐃᐃⵠⵠΔ: function (a, b) {
            if (a.length != b.length) {
                return Yn;
            }
            for (var c = 0; c < a.length; c++) {
                if (typeof a == "object") {
                    if (!this.ᐃᐃΔⲆᐃΔΔ(a[c], b[c])) {
                        return false;
                    }
                } else if (a[c] != b[c]) {
                    return ie;
                }
            }
            return true;
        },
        ⲆⵠⵠΔᐃⵠⲆ: function (a, b) {
            b.x = a.x;
            b.y = a.y;
        },
        ΔⵠΔⵠⲆⵠⵠ: function (a, b) {
            return {
                x: a.x - b.x,
                y: a.y - b.y
            };
        },
        ⵠⵠⵠᐃΔΔⵠᐃⵠ: function (a, b) {
            a.x *= b;
            a.y *= b;
        },
        ⲆΔΔΔⵠΔⵠ: function (a, b) {
            return a.x * b.x + a.y * b.y;
        },
        ⲆⵠⵠⵠᐃⵠΔ: function (a) {
            return Math.sqrt(a.x * a.x + a.y * a.y);
        },
        sign: function (a) {
            if (a < 0) {
                return -1;
            } else {
                return 1;
            }
        },
        ⵠⵠᐃΔⲆⵠΔ: function (a, b) {
            return a.x * b.y - a.y * b.x;
        },
        ⲆⵠⲆΔΔⵠⲆ: function (b, c, d, e) {
            var f = e - c;
            var g = d - b;
            return Math.atan2(f, g);
        },
        ΔΔⲆⲆΔΔΔ: function (a, b) {
            return Math.asin(this.ⲆΔΔΔⵠΔⵠ(a, b) / (this.ⲆⵠⵠⵠᐃⵠΔ(a) * this.ⲆⵠⵠⵠᐃⵠΔ(b))) * this.sign(this.ⵠⵠᐃΔⲆⵠΔ(a, b));
        },
        ᐃΔᐃⵠΔΔⲆ: function (a) {
            ᐃⲆⵠⵠᐃΔᐃ = location.href;
            a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ᐃⲆⵠⵠᐃΔᐃ);
            if (b === null) {
                return null;
            } else {
                return b[1];
            }
        },
        ⵠΔⵠⲆⵠⲆᐃ: function (a, b) {
            var c = Math.PI * 2;
            b = (b % c + c) % c;
            if (Math.abs(a - b) > Math.PI) {
                if (a > b) {
                    return b + c;
                } else {
                    return b - c;
                }
            } else {
                return b;
            }
        },
        ΔᐃΔᐃᐃΔⵠ: function (a, b) {
            return this.ΔΔⲆⲆΔΔΔ({
                x: 1,
                y: 0
            }, this.ΔⵠΔⵠⲆⵠⵠ(a, b));
        },
        ᐃⵠᐃᐃ: function (a, b) {
            return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
        },
        ᐃⵠΔⵠᐃᐃⵠ: function (a, b) {
            return {
                x: Math.sin(b) * a,
                y: Math.cos(b) * a
            };
        },
        ᐃΔⲆΔⵠⵠⲆ: function (a, b) {
            a.x += b.x;
            a.y += b.y;
        },
        ΔᐃⲆⵠΔⵠⲆ: function (a, b) {
            a.x -= b.x;
            a.y -= b.y;
        },
        ᐃⲆⵠⲆΔΔⲆⲆⲆ: function (a, b, c) {
            a.x += b;
            a.y += c;
        },
        ⵠⵠᐃΔⵠΔⵠΔⵠ: function (a, b, c) {
            return {
                x: a.x + b,
                y: a.y + c
            };
        },
        ⵠⲆΔᐃᐃ: function (a, b, c) {
            a.x += Math.sin(c) * b;
            a.y += Math.cos(c) * b;
        },
        ⲆⲆⵠΔΔⵠᐃ: function (a, b) {
            return Math.floor((a - b) / 2);
        },
        ᐃᐃΔᐃΔⵠⲆ: function (a, b) {
            return {
                x: (a.x + b.x) / 2,
                y: (a.y + b.y) / 2
            };
        },
        ⲆᐃⲆⵠᐃⲆⲆ: function () {
            if (Math.random() > 0.5) {
                return 1;
            } else {
                return -1;
            }
        },
        ⲆⵠᐃⲆⲆⵠⲆⵠΔ: function (b, c, d) {
            var e = this.ⲆᐃⲆⵠᐃⲆⲆ();
            var f = this.ⲆᐃⲆⵠᐃⲆⲆ();
            var g = Math.random() * Math.PI / 2;
            return {
                x: Math.floor(b + Math.sin(g) * e * d),
                y: Math.floor(c + Math.cos(g) * f * d)
            };
        },
        ⵠⵠⵠᐃΔⲆᐃⵠΔ: function (a, b, c, d) {
            this.x = a;
            this.y = b;
            this.w = c;
            this.ᐃⲆᐃ = d;
        },
        ΔΔΔⵠᐃᐃⵠΔⲆ: function (a) {
            ΔΔᐃ = [];
            ΔΔᐃ.push.apply(ΔΔᐃ, a);
            var b = [];
            while (ΔΔᐃ.length > 0) {
                var c = Math.floor(Math.random() * ΔΔᐃ.length);
                b.push(ΔΔᐃ[c]);
                ΔΔᐃ.splice(c, 1);
            }
            return b;
        },
        ᐃⵠⵠΔⲆⵠΔ: function (a) {
            if (a >= 20000) {
                a = (a - 20000) * 1000;
            } else if (a >= 10000) {
                a = (a - 10000) * 100;
            }
            return a;
        },
        ΔΔⲆᐃⵠⵠᐃ: function (b) {
            if (typeof b !== "number") {
                return "0";
            }
            if (b >= 10000) {
                var c = Math.floor(Math.log10(b)) - 2;
                var d = Math.max(0, 3 - c);
                var e = Math.floor(b / 1000).toString();
                if (d) {
                    for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
                        g++;
                    }
                    if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
                        e = e.substring(0, e.length - 1);
                    }
                }
                return e += "k";
            }
            return b.toString();
        },
        ⵠᐃⵠⵠᐃᐃⵠ: function (a) {
            return a * (2 - a);
        },
        ᐃΔᐃᐃⵠᐃᐃ: function (a) {
            return --a * a * a + 1;
        },
        ᐃⵠΔᐃΔ: function (a) {
            if (a < 0.5) {
                return a * 2 * a;
            } else {
                return (4 - a * 2) * a - 1;
            }
        },
        ΔΔⵠᐃΔⲆⲆ: function (a) {
            if (a < 0.5) {
                return a * 4 * a * a;
            } else {
                return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
            }
        },
        ⵠΔⵠᐃⲆⵠΔⲆⲆ: function (a) {
            if (a < 0.5) {
                return a * 8 * a * a * a;
            } else {
                return 1 - --a * 8 * a * a * a;
            }
        },
        ⵠΔΔⵠⵠΔΔ: function (a) {
            return 1 - --a * a * a * a;
        },
        ᐃΔⵠΔⵠⵠⲆ: function (a) {
            return 1 + --a * a * a * a * a;
        },
        ΔⲆⲆᐃ: function (b, c, d, e, f, g) {
            this.ᐃⵠΔ = b;
            this.ΔⲆᐃ = c;
            this.max = d;
            this.min = e;
            this.ᐃᐃᐃᐃΔⵠⲆ = f;
            this.ΔⲆⲆᐃⲆⲆᐃ = g;
            this.ΔⵠᐃᐃⵠⲆⵠ = 0;
            this.ᐃⵠⲆ = function () {
                if (this.ᐃⵠΔ) {
                    if ((a = this.ΔⲆᐃ + tx * this.ᐃᐃᐃᐃΔⵠⲆ) > this.max) {
                        this.ΔⲆᐃ = this.max;
                        this.ᐃⵠΔ = gj;
                        return true;
                    }
                    this.ΔⲆᐃ = a;
                } else {
                    var a;
                    if ((a = this.ΔⲆᐃ - tx * this.ΔⲆⲆᐃⲆⲆᐃ) < this.min) {
                        this.ΔⲆᐃ = this.min;
                        this.ᐃⵠΔ = y;
                    } else {
                        this.ΔⲆᐃ = a;
                    }
                }
            };
            return ek;
        },
        ⵠΔᐃΔⲆ: function (b, c, d, e, f, g) {
            this.Δᐃᐃⵠᐃ = b;
            this.ᐃⵠΔⲆΔ = c;
            this.ⲆᐃⲆΔⲆ = d;
            this.ΔⲆⲆᐃΔ = e;
            this.x = f;
            this.ⲆⵠⲆⲆⲆ = g;
            this.ΔΔⵠᐃΔᐃΔ = function () {
                this.x = this.ᐃᐃᐃⲆⵠΔⵠⵠΔ;
                this.ᐃⵠΔⲆΔ = 0;
            };
            this.ⲆⲆᐃⵠᐃⲆⲆ = function (a) {
                if (a !== this.ⲆⵠⲆⲆⲆ) {
                    this.ⲆⵠⲆⲆⲆ = a;
                    this.ΔⲆⲆᐃΔ = this.x;
                    this.ᐃⵠΔⲆΔ = 0;
                }
                if (this.ⲆⵠⲆⲆⲆ !== this.x) {
                    this.ᐃⵠΔⲆΔ += tx;
                    if (this.ᐃⵠΔⲆΔ > this.ⲆᐃⲆΔⲆ) {
                        this.x = this.ⲆⵠⲆⲆⲆ;
                    } else {
                        var b = this.Δᐃᐃⵠᐃ(this.ᐃⵠΔⲆΔ / this.ⲆᐃⲆΔⲆ);
                        this.x = this.ΔⲆⲆᐃΔ + (this.ⲆⵠⲆⲆⲆ - this.ΔⲆⲆᐃΔ) * b;
                    }
                }
            };
        },
        ΔᐃΔⵠᐃⵠⲆ: function (b, c, d, e, f, g, a, i, j) {
            this.Δᐃᐃⵠᐃ = b;
            this.ᐃⵠΔⲆΔ = c;
            this.ⲆᐃⲆΔⲆ = d;
            this.ΔⲆⲆᐃΔ = e;
            this.ᐃⲆᐃΔΔ = f;
            this.x = g;
            this.y = a;
            this.ⲆⵠⲆⲆⲆ = i;
            this.ⵠΔⵠΔⵠⲆⲆ = j;
            this.ⲆⲆᐃⵠᐃⲆⲆ = function (a) {
                if (a.x != this.ⲆⵠⲆⲆⲆ || a.y != this.ⵠΔⵠΔⵠⲆⲆ) {
                    this.ⲆⵠⲆⲆⲆ = a.x;
                    this.ⵠΔⵠΔⵠⲆⲆ = a.y;
                    this.ΔⲆⲆᐃΔ = this.x;
                    this.ᐃⲆᐃΔΔ = this.y;
                    this.ᐃⵠΔⲆΔ = 0;
                }
                if (this.ⲆⵠⲆⲆⲆ != this.x || this.ⵠΔⵠΔⵠⲆⲆ != this.y) {
                    this.ᐃⵠΔⲆΔ += tx;
                    if (this.ᐃⵠΔⲆΔ > this.ⲆᐃⲆΔⲆ) {
                        this.x = this.ⲆⵠⲆⲆⲆ;
                        this.y = this.ⵠΔⵠΔⵠⲆⲆ;
                    } else {
                        var b = this.Δᐃᐃⵠᐃ(this.ᐃⵠΔⲆΔ / this.ⲆᐃⲆΔⲆ);
                        this.x = this.ΔⲆⲆᐃΔ + (this.ⲆⵠⲆⲆⲆ - this.ΔⲆⲆᐃΔ) * b;
                        this.y = this.ᐃⲆᐃΔΔ + (this.ⵠΔⵠΔⵠⲆⲆ - this.ᐃⲆᐃΔΔ) * b;
                    }
                }
            };
        },
        ⵠⵠⵠᐃᐃΔⲆ: function (a) {
            var b = "";
            for (var c = 0; c < a; c++) {
                b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
            }
            return b;
        },
        ⵠᐃⲆᐃᐃΔⵠ: function (a, b) {
            b ||= location.href;
            a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
            if (c == null) {
                return null;
            } else {
                return c[1];
            }
        },
        ᐃⵠᐃⲆⵠ: function (a) {
            let b = "";
            const c = a.length;
            for (let d = 0; d < c; d++) {
                b += String.fromCharCode(a[d]);
            }
            return b;
        },
        ᐃⲆΔⵠⵠᐃⲆ: function (a, b) {
            return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ᐃⲆᐃ && Dk;
        },
        ᐃᐃⵠⲆΔΔⲆ: function (b, c, d, e, f, g, a, h) {
            if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
                return 1;
            } else {
                return 0;
            }
        },
        ΔⵠⵠΔⵠⲆⲆ: function (a, b, c) {
            return (1 - c) * a + c * b;
        },
        ⲆᐃⵠⲆⲆᐃⵠ: function (a) {
            return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
        }
    };
    Math.sign = Math.sign || function (a) {
        if (a === 0) {
            return 0;
        } else if (a > 0) {
            return 1;
        } else {
            return -1;
        }
    };
    Math.log10 = Math.log10 || function (a) {
        return Math.log(a) / Math.ΔᐃⲆⲆΔᐃᐃᐃⵠ;
    };
    const Zn = 19;
    const $n = 4;
    function _n(b, c, d, e, f, g) {
        ui(cx, b, c, d, e, f, g);
        return ((197 + (((145 + (((38 + ((8 << ((dx[0] ^ dx[1]) & 255)) + (24 << ((dx[0] ^ dx[1]) >> 8 & 255)) + (0 << ((dx[0] ^ dx[1]) >> 24 & 255)) + (16 << ((dx[0] ^ dx[1]) >> 16 & 255)) ^ dx[2])) * 8121 + 28411) % 134456 ^ dx[3])) * 16807 + 0) % 2147483647 ^ 4177 ^ dx[5])) * 16807 + 0) % 2147483647;
    }
    (function (a) {
        var b = ek;
        if (typeof ⲆΔⵠᐃⲆⵠⲆ === "function" && ⲆΔⵠᐃⲆⵠⲆ.ᐃⲆᐃⵠΔᐃᐃ) {
            ⲆΔⵠᐃⲆⵠⲆ(a);
            b = Pj;
        }
        if (typeof ᐃᐃΔᐃΔⲆⵠ === "object") {
            ⲆⵠⲆⲆⵠᐃⵠⵠⲆ.exports = a();
            b = re;
        }
        if (!b) {
            var c = Gf.ⲆⵠΔⵠ;
            var d = Gf.ⲆⵠΔⵠ = a();
            d.ΔΔⵠΔⲆⵠⲆΔᐃ = function () {
                Gf.ⲆⵠΔⵠ = c;
                return d;
            };
        }
    })(function () {
        function b() {
            for (var a = 0, b = {}; arguments.length > a; a++) {
                var c = arguments[a];
                for (var d in c) {
                    b[d] = c[d];
                }
            }
            return b;
        }
        return function a(c) {
            function d(e, f, j) {
                var k;
                if (typeof document !== "undefined") {
                    if (arguments.length > 1) {
                        j = b({
                            path: "/"
                        }, d.ⲆⵠⲆⵠᐃᐃⵠ, j);
                        if (typeof j.expires === "number") {
                            var m = new Date();
                            m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
                            j.expires = m;
                        }
                        try {
                            k = JSON.stringify(f);
                            if (/^[\{\[]/.test(k)) {
                                f = k;
                            }
                        } catch (a) { }
                        f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
                        e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
                        return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ΔⲆⲆΔⵠΔⲆΔⲆ ? "; secure" : ""].join("");
                    }
                    if (!e) {
                        k = {};
                    }
                    for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, l = 0; n.length > l; l++) {
                        var p = n[l].split("=");
                        var q = p.slice(1).join("=");
                        if (q.charAt(0) === "\"") {
                            q = q.slice(1, -1);
                        }
                        try {
                            var s = p[0].replace(h, decodeURIComponent);
                            q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
                            if (this.json) {
                                try {
                                    q = JSON.parse(q);
                                } catch (a) { }
                            }
                            if (e === s) {
                                k = q;
                                break;
                            }
                            if (!e) {
                                k[s] = q;
                            }
                        } catch (a) { }
                    }
                    return k;
                }
            }
            d.set = d;
            d.get = function (a) {
                return d.call(d, a);
            };
            d.ΔⵠⵠᐃⲆΔⲆΔᐃ = function () {
                return d.apply({
                    json: true
                }, [].slice.call(arguments));
            };
            d.ⲆⵠⲆⵠᐃᐃⵠ = {};
            d.remove = function (a, c) {
                d(a, "", b(c, {
                    expires: -1
                }));
            };
            d.ΔⵠⲆᐃΔᐃΔΔᐃ = a;
            return d;
        }(function () { });
    });
    ;
    function ao(b, c, d, e, f) {
        const i = b ^ 40006;
        const a = c ^ 50545;
        const j = (2147483587 + (39755 + d) * 2147483629) % 2147483647;
        const k = ((e + 53065) * 2147483629 + 2147483587) % 2147483647;
        const h = f ^ 1988;
        const l = Jw(i, a, j, k, h, i);
        Jw(a, j, k, h, i, a);
        return (l | 5060) & ~(l & 5060);
    }
    function bo(a, b) {
        Wi(cx, a, b);
        const c = function (b, c, d, e, f, g) {
            Ij(cx, b, c, d, e, f, g);
            const a = Fb(dx[0], dx[1]);
            const h = function (a, b) {
                wj(cx, a, b);
                const c = gr(dx[0], dx[1], dx[0], dx[1], dx[0], dx[1]);
                const d = function (a, b, c) {
                    ni(cx, a, b, c);
                    const d = mt(dx[0], dx[1], dx[2]);
                    _n(dx[0], dx[1], dx[2], dx[0], dx[1], dx[2]);
                    return ~(d & 28691) & 28691 | ~(d & 28691) & d;
                }(dx[0], dx[1], dx[0]);
                return ((29 + (c ^ d)) * 8121 + 28411) % 134456;
            }(dx[2], dx[3]);
            return ((133 + (a ^ h)) * 48271 + 0) % 2147483647;
        }(dx[0], dx[1], dx[0], dx[1], dx[0], dx[1]);
        qt(dx[0], dx[1], dx[0], dx[1], dx[0], dx[1]);
        return ~(c & 64282) & 64282 | ~(c & 64282) & c;
    }
    function eo(b, c, d, e, f, g) {
        const a = ~(d & 18893) & d | ~(d & 18893) & 18893;
        const h = (8 << (e >> 16 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e & 255)) + (0 << (e >> 24 & 255));
        return ((51553 + (function (a, b) {
            const c = (24 << (a >> 8 & 255)) + (16 << (a >> 16 & 255)) + (8 << (a >> 24 & 255)) + (0 << (a >> 0 & 255));
            const d = (55217 + b) % 65392;
            const e = sb(c, d, c, d, c, d);
            (function (b, c, d, e, f, g) {
                const a = b ^ 62044;
                const i = c ^ 19868;
                const j = (8 << (d >> 8 & 255)) + (16 << (d >> 16 & 255)) + (24 << (d & 255)) + (0 << (d >> 24 & 255));
                const h = Cb(a, i, j, e ^ 62536, (1013904223 + (51458 + f) * 1664525) % 4294967296, (g + 18589) % 65388);
                (function (b, c, d) {
                    const e = (0 << (b & 255)) + (24 << (b >> 24 & 255)) + (16 << (b >> 16 & 255)) + (8 << (b >> nt & 255));
                    const f = ~(c & 21609) & c | ~(c & 21609) & 21609;
                    const g = function (b, c, d) {
                        const e = ~(b & 20969) & 20969 | ~(b & 20969) & b;
                        const f = ~(c & 29621) & c | ~(c & 29621) & 29621;
                        const g = ((d + 8612) * 214013 + 2531011) % 4294967296;
                        const a = tb(e, f, g, e);
                        const h = Cb(f, g, e, f, g, e);
                        return (2531011 + (51373 + (a ^ h)) * 214013) % 4294967296;
                    }(e, f, ~(d & 26067) & (d | 26067));
                    const a = hx(e, f);
                })(a, i, j);
            })(c, d, c, d, c, d);
            return e ^ 11910;
        }((1 + (b + 64754) * 22695477) % 4294967296, (16 << (c >> 8 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 16 & 255)) + (0 << (c & 255))) ^ Cr(a, h))) * 214013 + 2531011) % 4294967296;
    }
    const co = 100;
    const go = 5;
    const ho = sj;
    const io = 7;
    const lo = 255;
    var fo = document.getElementById("game_canvas");
    var mo = fo.getContext("2d");
    var no = fo.width;
    var oo = fo.height;
    const po = 20;
    var ro = fo.width / 2;
    const so = 0;
    const to = 11;
    ;
    const uo = 14;
    var vo = fo.height / 2;
    var xo = {
        x: ro,
        y: vo
    };
    var yo = 1;
    const zo = 12;
    const Ao = 19;
    var Bo = 1;
    var Co = -1;
    const Jo = 8;
    const Mo = sj;
    const jo = 4;
    const Go = fk;
    var Lo = "J" + Na;
    var Qo = "S" + rq;
    var Ro = Gf.Math.acos;
    Gf.Math.acos = Gf.Math.asin;
    Gf.Math.asin = Ro;
    var No = Gf.Math.cos;
    Gf.Math.cos = Gf.Math.sin;
    Gf.Math.sin = No;
    const Ho = Hj;
    var qo = Gf;
    const So = 6;
    const To = 2;
    var Ko;
    var Uo = (aq = "O") + "N";
    const Yo = 18;
    const Zo = 13;
    const $o = 15;
    var ea;
    var hp = qo;
    const ta = 100;
    var na;
    Qo = "N";
    const Kp = 1;
    const aa = 9;
    var ra = "J";
    var aq = "O" + Na;
    const bq = 18;
    const la = 2;
    const ua = 14;
    const ba = 16;
    var da = hp;
    const va = 17;
    const ca = vn;
    const ma = 100;
    const pa = 3;
    const Ca = re;
    var Ta;
    const cq = 3;
    const za = 1;
    const ya = 256;
    const wa = 100;
    var Pa = da;
    Uo = "N" + undefined;
    const Aa = 18;
    const ka = 9;
    var xa = Pa;
    const Ja = 15;
    var Ma;
    const dq = 10;
    const Da = 17;
    const Ia = 20;
    const Ea = 20;
    const Sa = 12;
    const Qa = 5;
    const _a = fk;
    var Fa;
    var eq = xa;
    const ja = 6;
    const Ga = 255;
    var La;
    const fq = 12;
    const Oa = 6;
    var Na;
    const gq = Ca;
    const qa = 17;
    const Ua = 18;
    var Ya = eq;
    const Ka = 7;
    const Va = 6;
    var Xa;
    const hq = 11;
    var $a;
    var iq = Ya;
    ra = "O";
    var jq = iq = Ya;
    const kq = 2;
    var lq;
    const mq = 20;
    const nq = zj;
    const oq = 19;
    var pq = jq;
    const qq = 10;
    var rq = "J" + ($a = "S");
    function sq(a) {
        var b = new Image();
        b.src = a.toDataURL("image/png");
        b.width = a.width;
        b.height = a.height;
        b.ⲆⲆⲆⲆⲆⲆⲆ = 1;
        return b;
    }
    fo.oncontextmenu = function () {
        return false;
    };
    Lo = "J";
    const tq = 3;
    const uq = 256;
    const vq = 5;
    const wq = 7;
    const xq = 8;
    const yq = 1;
    const zq = gq;
    ra += Lo = Qo;
    const Aq = sj;
    const Bq = 14;
    aq = Uo;
    const Cq = 13;
    const Dq = 0;
    const Eq = 4;
    na = Ko = ea = rq + ra;
    Uo = Na;
    const Fq = 18;
    const Gq = 5872841;
    const Hq = 5872841 .ⵠΔΔᐃⲆⵠΔΔⲆ;
    const Iq = `const ⵠᐃᐃΔⲆᐃⵠ = (typeof ⵠᐃᐃⵠⲆᐃⵠ === "${Hq}") ? 1 : 0; return ⵠᐃᐃΔⲆᐃⵠ;`;
    const Jq = 7;
    Na = rq;
    Ma = rq + ra;
    const Kq = 12;
    const Lq = 15;
    const Mq = 10;
    Na = rq;
    aq = rq;
    function Nq(a) {
        const b = function () {
            Gf.addEventListener("mousemove", function () {
                b();
            });
        };
        b();
    }
    const Oq = 16;
    const Pq = 11;
    Ta = Ma;
    Qo = ra + Lo;
    Fa = Ko;
    aq = rq + ra;
    La = ea;
    const Qq = 6;
    const Rq = 100;
    Uo = rq + ra;
    const Sq = mn;
    const Tq = 7;
    const Uq = 255;
    const Vq = 5;
    Xa = na;
    const Wq = 18;
    ra = Na;
    $a = ea;
    lq = Ko;
    const Xq = 1;
    Lo = aq;
    var Yq = Gf.devicePixelRatio || 1;
    var Zq = mo.ⲆΔⵠΔΔⲆΔΔⲆ || mo.ΔⵠᐃⲆⵠΔⵠⵠᐃ || mo.ⲆΔᐃⵠⵠⵠⵠΔΔ || mo.ΔΔⲆΔᐃⲆⵠᐃΔ || mo.ⵠⵠⵠᐃⲆΔⲆⲆᐃ || 1;
    function $q() {
        if (fo.width != Gf.innerWidth) {
            fo.width = Gf.innerWidth;
            no = fo.width;
            ro = fo.width / 2;
        }
        if (Gf.innerHeight != fo.height) {
            fo.height = Gf.innerHeight;
            oo = fo.height;
            vo = fo.height / 2;
        }
        xo = {
            x: ro,
            y: vo
        };
        var a = fo.width;
        var b = fo.height;
        Bo = Co === -1 ? Yq / Zq : Co;
        fo.width = a * Bo;
        fo.height = Bo * b;
        fo.style.width = a + "px";
        fo.style.height = b + "px";
        mo.scale(Bo, Bo);
        if (nx) {
            nx.ᐃΔΔ.ⵠᐃⵠᐃᐃᐃΔ = a;
            nx.ᐃΔΔ.ΔΔⲆᐃⵠΔⵠ = b;
        }
        if (vx.ⲆΔΔⲆⵠ) {
            vx.ᐃⵠⲆ();
        } else if (jx.ⲆΔΔⲆⵠ) {
            jx.ᐃⵠⲆ();
        } else if (px.ⲆΔΔⲆⵠ) {
            px.ᐃⵠⲆ();
        } else if (ox.ⲆΔΔⲆⵠ) {
            ox.ᐃⵠⲆ();
        }
    }
    const _q = 20;
    var ar = document.getElementById("game_body");
    const br = 5;
    const cr = 9;
    ar.ondragstart = function () {
        return false;
    };
    ar.ondrop = function () {
        return ek;
    };
    ar.onresize = $q;
    const dr = Ho;
    const fr = 19;
    function gr(b, c, d, e, f, g) {
        Qi(cx, b, c, d, e, f, g);
        return ((48 + (_n(dx[0], dx[1], dx[2], dx[3], dx[4], dx[5]) ^ jr(dx[0], dx[1]))) * 16807 + 0) % 2147483647;
    }
    (function () {
        var b = 0;
        for (var a = ["ms", "moz", "webkit", "o"], c = 0; a.length > c && !Gf.requestAnimationFrame; ++c) {
            Gf.requestAnimationFrame = Gf[a[c] + "RequestAnimationFrame"];
            Gf.cancelAnimationFrame = Gf[a[c] + "CancelAnimationFrame"] || Gf[a[c] + "CancelRequestAnimationFrame"];
        }
        Gf.requestAnimationFrame ||= function (c, d) {
            var e = new Date().getTime();
            var f = Math.max(0, 16 - (e - b));
            var a = Gf.setTimeout(function () {
                c(e + f);
            }, f);
            b = e + f;
            return a;
        };
        if (!Gf.cancelAnimationFrame) {
            Gf.cancelAnimationFrame = function (a) {
                clearTimeout(a);
            };
        }
    })();
    const hr = 1;
    function jr(a, b) {
        ii(cx, a, b);
        const c = bx(dx[0], dx[1], dx[0], dx[1]);
        Fb(dx[0], dx[1]);
        return ~(c & 22596) & (c | 22596);
    }
    const kr = Yk;
    const lr = 11;
    function mr(b, c, d) {
        const e = (b | 7473) & ~(b & 7473);
        const f = (8 << (c >> 24 & 255)) + (0 << (c >> 16 & 255)) + (16 << (c & 255)) + (24 << (c >> 8 & 255));
        const g = ((5773 + d) * 2147483629 + 2147483587) % 2147483647;
        return ((36230 + (Jw(e, f, g, e, f, g) ^ Fk(e, f, g, e, f, g))) * 214013 + 2531011) % 4294967296;
    }
    const nr = 100;
    function pr(a, b) {
        Ej(cx, a, b);
        const c = qt(dx[0], dx[1], dx[0], dx[1], dx[0], dx[1]);
        (function (b, c, d, e, f, g) {
            Nj(cx, b, c, d, e, f, g);
            const a = mt(dx[0], dx[1], dx[2]);
            const h = function (b, c, d, e, f, g) {
                Qj(cx, b, c, d, e, f, g);
                const a = bo(dx[0], dx[1]);
                jr(dx[2], dx[3]);
                return (a | 47069) & ~(a & 47069);
            }(dx[3], dx[4], dx[5], dx[0], dx[1], dx[2]);
        })(dx[0], dx[1], dx[0], dx[1], dx[0], dx[1]);
        return (c | 7389) & ~(c & 7389);
    }
    const qr = 3;
    const rr = 17;
    const sr = 10;
    const tr = 4;
    const vr = Dk;
    const wr = 255;
    function xr(b, c, d, e, f) {
        const i = ((b + 64625) * 1664525 + 1013904223) % 4294967296;
        const a = ~(c & 47473) & (c | 47473);
        const j = (12345 + (16077 + d) * 1103515245) % 2147483648;
        const k = (2147483587 + (56006 + e) * 2147483629) % 2147483647;
        const h = (f | 64701) & ~(f & 64701);
        const l = gf(i, a, j, k);
        const g = sb(h, i, a, j, k, h);
        return (1 + (45335 + (l ^ g)) * 22695477) % 4294967296;
    }
    const zr = 10;
    const Ar = 16;
    const Br = Yk;
    function Cr(b, c) {
        const d = (24 << (b >> 16 & 255)) + (8 << (b >> 24 & 255)) + (16 << (b & 255)) + (0 << (b >> 8 & 255));
        const e = (c + 16671) % 65352;
        const f = Qw(d, e, d, e, d);
        const g = Fk(e, d, e, d, e, d);
        return (0 << ((f ^ g) >> 16 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (16 << ((f ^ g) >> 0 & 255));
    }
    var Dr = navigator.language || navigator.userLanguage;
    var Er = -new Date().getTimezoneOffset() / 60;
    var Fr = "Europe";
    const Gr = ho;
    var Hr = "South America";
    const Ir = 16;
    var Jr = Fr;
    const Kr = 2;
    if (Er >= -2 && Er <= 2) {
        Jr = Fr;
    } else if (Er > 2 && Er <= 5) {
        Jr = "Russia";
    } else if (Er > 5 && Er <= 9) {
        Jr = "Asia";
    } else if (Er > 9) {
        Jr = "Australia";
    } else if (Er >= -5 && Er < -2) {
        Jr = Dr === "pt-BR" || Dr === "pt-br" || Dr === "pt" || Dr === "pt-pt" ? Hr : "North America";
    } else if (Er < -5) {
        Jr = Dr === "pt-BR" || Dr === "pt-br" || Dr === "pt" || Dr === "pt-pt" ? Hr : "West America";
    }
    const Lr = 2;
    var yk = {
        ΔⲆⲆⲆⲆⵠᐃ: function (a) {
            var b = 2147483648;
            var c = a || Math.floor((b - 1) * Math.random());
            this.ⲆⵠᐃⲆⲆ = function (a) {
                c = a || Math.floor(Math.random() * (b - 1));
            };
            this.get = function () {
                return (c = (c * 1103515245 + 12345) % b) / b;
            };
        }
    };
    const Mr = Br;
    function Nr(a, b) {
        const c = (a | 47593) & ~(a & 47593);
        const d = ((b + 34888) * 1103515245 + 12345) % 2147483648;
        return (21139 + (vf(c, d, c, d, c) ^ Fk(d, c, d, c, d, c))) % 65335;
    }
    var Or = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
    const Pr = 20;
    const Qr = 4;
    const Rr = 256;
    const Sr = 17;
    const Tr = 13;
    const Ur = mn;
    const Vr = 8;
    var Wr = 0;
    const Xr = 16;
    const Yr = 6;
    const Zr = Ca;
    const $r = 12;
    var _r = {
        ΔⲆⲆΔΔ: ["#133A2B", "#042b30"],
        ΔⵠᐃᐃᐃⵠⵠΔΔ: ["#EBF2F0", "#136167"],
        ⲆΔⵠΔⵠΔΔ: ["#4EB687", "#187484"],
        ΔⲆⵠᐃⵠΔⵠ: ["#664516", "#13474C"],
        ⲆᐃⵠⲆᐃᐃⲆ: ["#FCEFBB", "#0F4D48"],
        ᐃⲆⲆᐃᐃⵠⵠ: ["#C1AA7E", "#0F423D"],
        ⲆⲆⵠⲆⲆⲆΔ: ["#594837", "#163A3A"],
        ᐃⲆΔⵠΔⲆᐃ: ["#A5D6D6", "#539CA0"],
        ⲆᐃΔⵠΔ: ["#0B6A84", "#09373F"],
        ⵠⲆᐃᐃΔΔⵠ: ["#2A8B9B", "#0F464C"],
        ⵠⲆᐃᐃⲆⲆⵠ: ["#A9D6D3", "#115E60"],
        ΔᐃⲆΔΔΔᐃ: ["#ECF7F9", "#539CA0"],
        ᐃⲆⲆᐃⵠᐃΔ: ["#FFF", "#FFF"],
        ⲆᐃⲆᐃⵠⲆᐃ: ["#FFF", "#FFF"],
        ⵠⵠᐃΔⲆⲆⲆ: ["#1C9BA4", "#00272F"],
        Δⵠⵠⵠᐃ: ["#2D2017", "#031C1E"],
        ΔΔⵠ: 0,
        ΔⵠΔ: 1,
        ᐃⲆⵠΔⵠΔⵠⵠⲆ: 2300,
        ⲆΔΔΔⲆⵠΔⲆⵠ: 2290,
        ⲆᐃⵠᐃⵠΔⵠ: 34,
        ⲆⵠⵠⲆⵠⵠᐃ: 5,
        ΔⲆᐃⵠⵠΔⲆ: 68,
        ᐃⵠⲆⵠΔᐃᐃ: 34,
        ⵠⵠⵠⲆᐃⲆⲆ: 5,
        ᐃΔⲆᐃⲆᐃⵠ: 1,
        ⲆⵠⲆᐃⲆⵠⵠ: 0.6,
        ᐃΔᐃⲆⵠⲆⵠ: 0.25,
        ᐃΔΔⲆⲆΔⲆ: 50,
        ΔⵠⵠⲆⲆΔⲆ: 10,
        ΔΔΔᐃᐃΔⵠ: 75,
        ᐃⲆⵠᐃᐃⵠⵠ: 20,
        ΔⲆΔΔΔⵠΔ: 5,
        ⲆΔⲆⵠⲆ: 0,
        ΔᐃⲆΔᐃ: 1,
        ⲆⲆᐃⲆᐃ: 2,
        ΔⲆⵠⲆΔ: 3,
        ΔΔΔⲆⲆ: 4,
        ΔⲆᐃᐃΔ: 5,
        ⲆΔⵠⵠΔ: 6,
        ⲆⲆⲆⲆᐃ: 7,
        ⵠΔⵠΔΔ: 8,
        ⲆⲆᐃⵠⲆ: 9,
        ΔᐃΔⵠΔ: 10,
        ⵠᐃⵠⵠⲆ: 11,
        ⲆΔᐃΔⲆ: 12,
        ⵠⲆⵠⲆᐃ: 13,
        ⵠⵠΔⲆᐃ: 14,
        ᐃⵠⲆᐃⲆ: 15,
        ⵠᐃΔⲆⵠ: 16,
        ⲆᐃΔⵠⵠ: 17,
        ΔᐃⵠΔΔ: 18,
        ΔΔⲆⵠᐃ: 19,
        ᐃΔᐃΔⵠ: 20,
        ⵠΔᐃⲆⲆ: 21,
        ⲆᐃⵠΔᐃ: 22,
        ᐃΔᐃⵠⵠ: 23,
        ᐃⵠⲆⲆⲆ: 24,
        ΔᐃⲆⵠᐃ: 25,
        ⵠᐃⲆⵠⵠ: 26,
        ᐃΔⲆⵠΔ: 27,
        ΔᐃᐃᐃⲆ: 28,
        ᐃΔΔᐃ: 29,
        ⲆᐃᐃΔⲆ: 30,
        ΔΔΔⵠΔ: 31,
        ⲆⲆⵠᐃᐃ: 32,
        ⲆⲆᐃΔⲆ: 33,
        ⵠΔᐃⵠⲆ: 34,
        ΔΔⲆᐃⵠ: 35,
        ᐃⵠΔⲆⵠ: 36,
        ⲆⵠⵠⵠΔ: 37,
        ᐃΔⵠᐃᐃ: 38,
        ΔⵠⵠΔᐃ: 39,
        ΔⲆⲆⲆⲆ: 40,
        ⵠⵠⵠᐃⲆ: 41,
        ⵠᐃᐃΔⲆ: 42,
        ᐃΔⵠⵠᐃ: 43,
        ΔⵠⵠⲆⲆ: 44,
        ΔΔΔᐃⲆ: 45,
        ᐃⵠΔΔᐃ: 46,
        ⵠⵠΔⵠΔ: 47,
        ᐃⵠⲆⲆᐃ: 48,
        ⲆⲆᐃᐃΔ: 49,
        ΔΔΔᐃⵠ: 50,
        ⵠⵠᐃⲆⲆ: 51,
        ⲆⲆᐃⵠᐃ: 52,
        ⲆⲆᐃⲆⲆ: 53,
        ΔΔⲆΔΔ: 54,
        ᐃⵠᐃΔⵠ: 55,
        ΔΔⵠᐃⵠ: 56,
        ᐃᐃⲆᐃⵠ: 57,
        ⲆⲆⲆⲆΔ: 58,
        ᐃⲆᐃⵠᐃ: 59,
        ᐃⲆⵠⵠⵠ: 60,
        ⲆⲆᐃⲆΔ: 61,
        ΔΔⲆΔⲆ: 62,
        ⵠⵠⵠᐃΔ: 63,
        ⲆⵠᐃΔᐃ: 64,
        ⲆΔᐃⲆⲆ: 65,
        ⲆⵠⲆⲆⵠ: 66,
        ⵠⲆⲆⲆⵠ: 67,
        ⵠⲆⲆⵠᐃ: 68,
        ᐃⲆᐃⲆᐃ: 69,
        ⵠᐃⲆᐃΔ: 70,
        ⲆⲆᐃⵠⵠ: 71,
        ⲆⵠⲆᐃⵠ: 72,
        ⵠΔΔⵠᐃ: 73,
        ᐃⵠⲆⵠⵠ: 74,
        ᐃⲆⵠΔⵠ: 75,
        ᐃⲆΔᐃⲆ: 76,
        ⲆΔΔΔⵠ: 77,
        ᐃᐃⲆⵠⵠ: 78,
        ΔⲆⵠΔΔ: 79,
        ⵠⵠⵠΔⲆ: 80,
        ΔⵠᐃᐃΔ: 81,
        ΔᐃⵠⲆΔ: 82,
        ΔⲆⵠᐃΔ: 83,
        ⲆⲆᐃΔᐃ: 84,
        ΔⲆΔΔΔ: 85,
        ⵠⲆⲆᐃⵠ: 86,
        ⲆᐃᐃⲆΔ: 87,
        ⲆΔⵠΔⵠ: 88,
        ⵠⲆⲆΔΔ: 89,
        ΔⲆⵠᐃⵠ: 90,
        ⵠᐃⲆΔⲆ: 91,
        ᐃΔⲆⲆΔ: 92,
        ᐃⲆⵠΔⲆ: 93,
        ΔⵠΔⲆᐃ: 94,
        ⲆᐃⵠⵠⲆ: 95,
        ⵠᐃⲆᐃᐃ: 96,
        ⲆΔⲆⵠⵠ: 97,
        ⵠⵠⵠⲆΔ: 98,
        ᐃΔⲆΔⲆ: 99,
        ⲆⵠⲆᐃΔΔⲆΔⲆ: 100,
        ⲆⲆΔᐃⲆ: 101,
        ᐃⲆⲆᐃᐃ: 102,
        ⲆᐃᐃΔᐃ: 103,
        ΔⲆⵠⲆᐃ: 104,
        ⲆⲆⲆⵠΔ: 105,
        ⲆⵠⲆΔΔ: 106,
        ᐃᐃⲆⵠᐃ: 107,
        ᐃᐃΔⵠⵠ: 108,
        ⲆⵠⲆⲆ: 109,
        ΔⵠⲆⲆⵠ: 110,
        ᐃⵠⲆᐃ: 111,
        ⵠⲆΔⲆ: 112,
        ⲆⵠᐃⲆᐃᐃⵠ: 113,
        ⲆᐃⲆⵠⲆ: 114,
        ᐃⲆⵠᐃⵠⲆΔ: 115,
        ⲆΔⵠⲆⵠ: 116,
        ⵠΔΔΔⵠ: 117,
        ΔⲆⲆⲆⵠⵠⵠ: 118,
        ⵠΔⲆᐃΔᐃᐃ: 119,
        ΔᐃⲆⵠΔ: 120,
        ⵠⵠⲆⵠ: 121,
        ΔᐃΔᐃᐃ: 122,
        ⲆᐃΔⵠᐃ: 123,
        ΔⵠⵠⲆΔⲆΔ: 124,
        Δⵠⵠᐃᐃ: 125,
        Ⲇᐃⵠⵠⵠ: 126,
        ΔⵠΔΔΔ: 127,
        ΔΔⵠΔⲆ: 128,
        ⵠⵠΔⵠⵠ: 129,
        ⲆᐃᐃⵠⲆ: 130,
        ΔᐃᐃⲆⲆ: 131,
        ΔⵠᐃΔⵠ: 132,
        ᐃⲆⲆΔᐃ: 133,
        ⲆⵠⲆᐃΔ: 134,
        ⵠⲆⲆᐃᐃ: 135,
        ΔΔᐃⲆⲆ: 136,
        ⲆⲆΔᐃΔ: 137,
        ᐃⲆⵠⲆΔ: 138,
        Ⲇᐃⵠᐃᐃ: 139,
        ⵠⲆΔΔⵠⵠⵠ: 140,
        ⲆᐃΔⲆⲆ: 141,
        ⵠⵠⲆΔΔⲆⲆ: 142,
        ⲆⵠᐃⵠᐃⲆᐃ: 143,
        ⲆΔⲆⲆΔΔᐃ: 144,
        ⲆᐃⲆΔΔⲆᐃ: 145,
        ⵠΔᐃᐃᐃ: 146,
        ⵠᐃⵠΔᐃ: 147,
        ΔⵠΔΔⲆ: 148,
        ⵠⲆᐃΔΔ: 149,
        ᐃᐃᐃΔΔ: 150,
        ⲆⲆⲆᐃⵠ: 151,
        ᐃΔΔⵠΔ: 152,
        ⲆΔᐃᐃΔ: 153,
        ⲆⵠⵠΔⲆ: 154,
        ⲆᐃΔⲆΔ: 155,
        ΔΔᐃⵠΔ: 156,
        ⵠⲆΔⲆΔ: 157,
        ⵠΔΔΔᐃ: 158,
        ᐃᐃⵠⵠᐃ: 159,
        ⵠᐃᐃⵠⲆ: 160,
        ⵠᐃᐃΔᐃ: 161,
        ΔΔᐃᐃᐃ: 162,
        ΔᐃⲆᐃΔ: 163,
        ᐃᐃⵠΔⵠ: 164,
        Ⲇⵠⵠᐃᐃ: 165,
        ⵠⵠⵠᐃΔⲆᐃ: 166,
        ᐃⲆⲆΔⲆ: 167,
        ⵠⲆⵠᐃᐃ: 168,
        ⵠⲆΔⵠⵠ: 169,
        Δⵠᐃᐃⵠ: 170,
        ⲆⵠⵠⲆᐃᐃΔ: 171,
        ⲆᐃᐃⲆⲆᐃᐃ: 172,
        ⲆΔⵠᐃⲆⲆΔ: 173,
        ⵠⲆΔΔᐃ: 174,
        ⲆⵠᐃⲆⵠⲆⲆ: 175,
        ⵠⵠΔᐃΔΔΔ: 176,
        ⲆⲆᐃⵠⲆⲆᐃ: 177,
        ΔΔⵠᐃⲆᐃᐃ: 178,
        ΔᐃⵠⲆⲆⵠⵠ: 179,
        ⵠⲆᐃΔⲆⵠⲆ: 180,
        ⲆⵠⲆⵠⲆΔᐃ: 181,
        ⲆⲆⲆΔⲆΔⵠ: 182,
        ⵠⵠΔⲆⲆ: 183,
        ⵠⵠⲆⵠⵠ: 184,
        ⵠⵠΔΔⵠ: 185,
        ⲆΔⲆⲆⲆ: 186,
        ΔᐃᐃⵠⲆ: 187,
        ⲆΔΔⲆᐃΔᐃ: 188,
        ⲆⲆⵠⵠᐃ: 189,
        ᐃΔΔᐃᐃ: 190,
        ⲆⵠⵠⲆᐃᐃⲆ: 191,
        ⲆᐃⵠΔΔ: 192,
        ⵠⵠΔⲆⲆⵠΔ: 193,
        ᐃᐃᐃⲆⲆ: 194,
        ⵠΔⲆⵠⵠ: 195,
        ⲆⵠⵠⲆΔⵠⵠ: 196,
        ⲆᐃⲆΔᐃᐃΔ: 197,
        ᐃⵠⲆΔⵠ: 198,
        ⵠⲆΔΔⲆ: 199,
        ⲆᐃⲆᐃᐃᐃΔ: 200,
        ⲆᐃΔΔΔ: 201,
        ᐃⵠᐃΔ: 202,
        ΔⵠᐃΔⲆ: 203,
        ᐃⲆΔⲆⵠᐃᐃ: 204,
        ᐃⲆⲆⵠⵠ: 205,
        ᐃᐃᐃᐃᐃⲆⲆ: 206,
        ΔᐃΔⲆⲆ: 207,
        ΔΔⲆⵠⵠΔⵠ: 208,
        ⵠⲆⲆⲆⲆ: 209,
        ΔⵠⲆᐃΔⲆᐃ: 210,
        ᐃΔᐃᐃΔᐃⵠ: 211,
        ⵠⲆⵠⵠᐃ: 212,
        ⲆΔΔⲆᐃ: 213,
        ⵠᐃᐃⲆⵠ: 214,
        ΔᐃⲆᐃⵠ: 215,
        ᐃΔⵠⲆⵠ: 216,
        ΔΔⲆⲆΔ: 217,
        ᐃᐃⲆⲆⵠ: 218,
        ⲆΔⵠⲆᐃ: 219,
        ⲆⵠΔΔᐃ: 220,
        ΔΔΔΔᐃ: 221,
        ᐃⵠᐃⵠΔ: 222,
        ΔⵠᐃΔΔ: 223,
        ⵠⲆΔⵠΔ: 224,
        ⲆΔᐃⲆⲆⵠⵠ: 225,
        ᐃⲆᐃⲆᐃΔⲆ: 226,
        ⲆⵠΔΔΔ: 227,
        ᐃⵠⲆΔΔⵠⵠ: 228,
        ⲆᐃⲆⲆᐃ: 229,
        ⵠⵠⵠⵠⵠ: 230,
        ⲆⵠⲆΔⵠ: 231,
        ⲆⲆΔΔⵠ: 232,
        ᐃⵠΔⲆᐃ: 233,
        ⲆⲆΔΔΔΔⵠ: 234,
        ⵠⲆᐃᐃᐃ: 235,
        ᐃⵠⵠᐃΔ: 236,
        ᐃⲆⲆⵠⲆ: 237,
        ΔⲆⲆⵠⵠ: 238,
        ΔⲆⲆᐃⵠ: 239,
        ⵠᐃΔΔᐃ: 240,
        ⵠⵠⲆᐃΔ: 241,
        ⵠⲆⵠΔᐃ: 242,
        ⲆᐃΔΔΔᐃᐃ: 243,
        ΔⵠⲆΔᐃ: 244,
        Ⲇⵠⵠⵠᐃ: 245,
        ΔⵠΔⲆⵠⵠΔ: 246,
        ΔⲆΔΔᐃ: 247,
        ⲆᐃⵠΔⲆ: 248,
        ΔᐃⵠΔⵠΔΔ: 249,
        ⵠⵠΔᐃⵠ: 250,
        ⲆⵠⵠΔΔ: 251,
        ⵠΔΔΔⵠΔⲆ: 252,
        ᐃᐃⵠΔⲆⵠΔ: 253,
        ᐃⵠⲆᐃⲆΔᐃ: 254,
        ⲆⵠⲆᐃⵠⵠΔ: 255,
        ᐃᐃΔᐃⲆⲆΔ: 256,
        ᐃⲆᐃᐃⲆⵠᐃ: 257,
        ᐃⲆⲆⵠᐃⵠᐃ: 258,
        ⲆΔⲆΔⵠⲆⲆ: 259,
        ⵠⲆⵠΔΔ: 260,
        ⲆⵠⵠΔⵠᐃΔ: 261,
        ⲆⲆᐃᐃΔⵠⵠ: 262,
        ⲆⵠΔᐃΔΔᐃ: 263,
        ⲆᐃⲆⲆⵠ: 264,
        ΔⵠⵠⵠΔⵠΔ: 265,
        ᐃΔΔⵠⲆⵠⲆ: 266,
        ΔᐃΔᐃᐃⵠⲆ: 267,
        ᐃᐃᐃᐃΔᐃⵠ: 268,
        ⵠΔⵠⵠᐃⵠⲆ: 269,
        ⵠΔΔΔᐃⵠⲆ: 270,
        ᐃⵠⵠⵠⵠⲆΔ: 271,
        ⲆⲆΔΔΔⲆⵠ: 272,
        ᐃⵠⵠⲆⵠᐃΔ: 273,
        ΔΔᐃᐃⵠᐃΔ: 274,
        ⲆΔⵠΔΔᐃᐃ: 275,
        ΔⲆⲆⵠΔᐃⲆ: 276,
        ᐃⲆΔᐃⵠᐃᐃ: 277,
        ⵠᐃⲆⵠⲆⲆΔ: 278,
        ᐃᐃΔΔ: 279,
        ΔⲆⲆⵠᐃ: 280,
        ΔᐃⵠⲆΔΔⲆ: 281,
        ⵠⵠᐃⲆⲆⵠⲆ: 282,
        ᐃΔ: 283,
        ⲆᐃⲆΔⲆⲆΔ: 284,
        ⵠⵠΔᐃᐃ: 285,
        ᐃⲆⲆᐃⲆ: 286,
        ᐃⲆⵠⵠⲆⵠᐃ: 287,
        ᐃⲆᐃⲆⵠ: 288,
        ΔⵠⲆⲆⵠⲆⵠ: 289,
        ΔᐃⲆᐃⲆⵠᐃ: 290,
        ᐃⲆΔΔΔⲆᐃ: 291,
        ΔⵠᐃⲆⵠΔΔ: 292,
        ᐃⲆᐃΔⲆᐃΔ: 293,
        ᐃⵠⵠᐃᐃ: 294,
        ΔⲆΔΔᐃⵠΔ: 295,
        ΔⵠᐃΔΔᐃⵠ: 296,
        ⲆΔΔΔᐃⲆⲆ: 297,
        ⲆⲆΔⵠⵠΔⵠ: 298,
        ΔᐃⵠⲆⲆ: 299,
        ΔᐃⵠⲆⲆΔⲆ: 300,
        ⵠⵠΔⵠⵠΔⲆ: 301,
        ΔⵠᐃᐃⲆⲆΔ: 302,
        ⵠΔᐃΔⲆᐃᐃ: 303,
        ΔᐃⵠⵠⵠΔΔ: 304,
        ⲆΔΔⲆⵠᐃⵠ: 305,
        ᐃⵠⵠᐃⲆΔⵠ: 306,
        ᐃΔᐃⲆᐃ: 307,
        ⵠΔⵠᐃⲆᐃⵠ: 308,
        ᐃᐃᐃⵠⵠᐃᐃ: 309,
        ⵠⲆⲆⵠⵠΔⲆ: 310,
        ΔⲆⲆⵠΔΔᐃ: 311,
        ᐃΔⵠᐃΔᐃᐃ: 312,
        ⵠᐃᐃⵠⵠⵠⲆ: 313,
        ⲆΔΔΔⵠΔΔ: 314,
        ⵠⵠΔⲆᐃΔⲆ: 315,
        ΔⵠⵠⵠⲆᐃⵠ: 316,
        ΔⵠⵠⵠⲆⵠᐃ: 317,
        ᐃΔᐃᐃⲆⵠⲆ: 318,
        ΔⵠⲆᐃⲆᐃⲆ: 319,
        ⵠⲆⲆⲆⵠΔⵠ: 320,
        ⵠⵠΔΔᐃ: 321,
        ᐃⲆᐃⲆⵠⲆΔ: 322,
        ⵠⲆⲆᐃⵠᐃⵠ: 323,
        ᐃⲆΔⵠᐃΔⲆ: 324,
        ᐃⵠⵠⲆᐃᐃΔ: 325,
        ΔΔⲆΔⲆⲆΔ: 326,
        ⵠΔΔⲆⲆⲆⵠ: 327,
        ΔΔⲆᐃⲆᐃⲆ: 328,
        ΔΔⲆΔⵠⲆⲆ: 329,
        ⵠᐃⵠᐃᐃⲆⲆ: 330,
        ΔⵠⲆᐃᐃΔᐃ: 331,
        ᐃᐃΔΔⵠᐃⵠ: 332,
        ⵠΔΔⲆᐃᐃⵠ: 333,
        ΔⵠᐃᐃᐃⲆⵠ: 334,
        ᐃΔᐃΔⲆⵠΔ: 335,
        ⵠⲆᐃⲆⲆⲆᐃ: 336,
        ΔᐃᐃᐃᐃⲆⵠ: 337,
        ΔᐃΔⲆⲆⲆΔ: 338,
        ⵠΔᐃᐃⵠΔⲆ: 339,
        ΔᐃⵠⲆᐃᐃᐃ: 340,
        ΔᐃΔΔᐃⲆⲆ: 341,
        ⵠⵠⲆⵠᐃΔⲆ: 342,
        ⲆΔⵠΔΔⵠⵠ: 343,
        ΔᐃᐃᐃᐃⲆᐃ: 344,
        ΔᐃⵠⲆⲆⲆᐃ: 345,
        ΔΔᐃⲆΔⵠⲆ: 346,
        ⵠⲆⲆᐃⲆⲆⲆⵠⵠ: 347,
        ΔⲆⲆΔⲆⲆΔ: 348,
        ᐃⲆⵠΔΔᐃΔ: 349,
        ⵠⵠΔᐃΔⲆⵠ: 350,
        ΔΔᐃⲆΔⲆⵠ: 351,
        ᐃⵠᐃⲆΔⲆⵠ: 352,
        ΔⵠᐃΔⵠΔᐃ: 353,
        ΔᐃΔⵠᐃΔΔ: 354,
        ⲆⵠᐃⲆⲆΔⵠ: 355,
        ΔΔᐃⲆⲆⲆⵠ: 356,
        ⵠΔΔΔⵠⲆⵠ: 357,
        Δⵠⵠᐃᐃᐃᐃ: 358,
        ⵠᐃⲆᐃⲆᐃⵠ: 359,
        ⲆⲆᐃⲆⵠⲆⵠ: 360,
        ΔΔⲆΔΔΔΔ: 361,
        ⲆᐃⵠⵠⵠΔⵠ: 362,
        ⵠΔⲆΔⵠΔⲆ: 363,
        ᐃΔⵠⲆⵠᐃⵠ: 364,
        ᐃΔⵠⲆⵠⲆᐃ: 365,
        ⵠⵠⲆΔᐃⲆᐃ: 366,
        ⵠᐃᐃⵠⲆⲆᐃ: 367,
        ΔⲆⲆΔⵠⵠᐃ: 368,
        ᐃᐃⲆΔⵠᐃΔ: 369,
        ΔⲆⵠⲆⵠᐃΔ: 370,
        ΔΔᐃⲆΔΔΔ: 371,
        ⵠᐃΔΔΔΔΔ: 372,
        ᐃⵠΔᐃΔΔΔ: 373,
        ⲆⵠΔⲆΔⵠΔ: 374,
        ᐃⲆⲆΔΔⲆΔ: 375,
        ⵠⵠⲆᐃΔⲆᐃ: 376,
        ⲆⵠᐃΔΔΔⵠ: 377,
        ΔⵠᐃⵠᐃΔⲆ: 378,
        ⲆΔᐃⵠᐃⲆⲆ: 379,
        ⵠΔⲆⲆΔΔⲆ: 380,
        ⵠⵠᐃⲆⲆᐃΔ: 381,
        ᐃⵠΔⲆᐃᐃᐃ: 382,
        ⵠΔΔΔⵠⲆΔ: 383,
        ⲆⵠⲆⲆΔΔⵠ: 384,
        ⲆΔⲆⲆᐃΔⲆ: 385,
        ⵠᐃᐃⵠⲆⵠⵠ: 386,
        ᐃⲆᐃⵠΔⵠΔ: 387,
        ⵠΔΔᐃⲆⲆΔ: 388,
        ᐃⲆᐃⵠⵠⵠΔ: 389,
        ⲆⵠΔΔᐃⲆᐃ: 390,
        ⲆⲆΔⵠᐃᐃΔ: 391,
        ᐃΔᐃⵠⵠΔΔ: 392,
        ᐃΔᐃⲆⵠⵠⲆ: 393,
        ⲆΔⵠⲆΔⵠΔ: 394,
        ⵠᐃΔⲆⲆᐃΔ: 395,
        ⵠΔΔᐃⲆⲆⵠ: 396,
        ⵠⲆΔᐃⵠᐃᐃ: 397,
        ᐃᐃⵠΔⵠⵠᐃ: 398,
        ᐃΔⵠⲆⵠⵠᐃ: 399,
        ⵠΔΔⲆⲆᐃΔ: 400,
        ΔⵠᐃⵠⲆᐃⲆ: 401,
        ⲆᐃᐃΔᐃΔⲆ: 402,
        ⲆⲆⲆⵠⵠⵠⵠ: 403,
        ᐃⲆⲆⲆⵠΔⲆ: 404,
        ⵠⲆΔΔΔΔⲆ: 405,
        ⵠⵠΔⲆΔΔΔ: 406,
        ΔᐃΔⲆⵠᐃΔ: 407,
        ⲆⲆⵠΔⲆⵠⵠ: 408,
        ⵠⵠⵠᐃⲆⵠΔ: 409,
        ΔᐃᐃΔᐃΔⵠ: 410,
        ΔⲆᐃΔΔᐃⵠ: 411,
        ⲆΔⵠΔⲆⲆⲆ: 412,
        ΔⵠᐃⲆⵠ: 413,
        ⲆⲆⲆⵠⵠⲆⵠⵠⵠ: 414,
        ΔΔᐃΔΔ: 415,
        ⲆΔⵠⲆⲆ: 416,
        ΔᐃⵠΔⲆΔⵠᐃⵠ: 417,
        ⲆΔⵠⲆΔⲆⵠ: 418,
        ⲆΔⲆᐃⲆ: 419,
        ΔⲆΔⲆⵠΔΔ: 420,
        ΔᐃⲆΔΔⲆΔ: 421,
        ⵠⲆⲆᐃᐃΔΔ: 422,
        ΔΔⲆⲆⲆᐃⵠ: 423,
        ΔⲆⲆⲆⲆΔᐃ: 424,
        ΔᐃΔⵠΔⵠᐃ: 425,
        ⲆΔᐃᐃⲆⲆΔ: 426,
        ΔⵠᐃΔᐃⵠᐃ: 427,
        ᐃⵠⲆΔⵠΔⲆ: 428,
        ΔᐃΔⲆᐃᐃⵠ: 429,
        ⲆΔᐃⲆᐃⲆⵠ: 430,
        ᐃⵠΔⵠⵠΔΔ: 431,
        ⲆⵠᐃⲆⵠⵠⵠ: 432,
        ᐃΔⲆΔΔⲆΔ: 433,
        ⲆᐃΔᐃΔⵠⵠ: 434,
        ᐃΔΔⲆΔᐃᐃ: 435,
        ⵠⲆⲆΔⲆⵠᐃ: 436,
        ᐃΔΔⵠΔᐃⵠ: 437,
        ⲆⲆⵠᐃΔΔⵠ: 438,
        ΔⲆⵠⵠⲆΔⵠ: 439,
        ᐃⵠᐃⲆⵠⵠΔ: 440,
        ⵠᐃⲆⲆᐃᐃᐃ: 441,
        ⲆᐃⲆⲆΔΔⲆ: 442,
        ᐃᐃΔΔΔᐃⲆ: 443,
        ᐃΔᐃⵠⵠᐃⲆΔⲆ: 444,
        Ⲇᐃⵠᐃⵠ: 445,
        ᐃⲆᐃⵠⲆᐃⵠ: 446,
        ᐃᐃΔⲆΔⵠⵠ: 447,
        ᐃⲆᐃⵠᐃᐃΔᐃⲆ: 448,
        ⵠΔΔⲆΔ: 449,
        ᐃᐃⵠΔᐃ: 450,
        ⵠΔᐃⵠᐃΔⲆ: 451,
        ⵠΔᐃⵠⵠΔⲆ: 452,
        ⲆⵠᐃᐃⵠⲆᐃ: 453,
        ⵠΔΔΔⲆⲆᐃ: 454,
        ⲆⲆⵠᐃᐃΔⵠ: 455,
        ⲆᐃΔⲆᐃΔΔ: 456,
        ΔⲆΔⵠⲆᐃⲆ: 457,
        ΔⲆⵠΔΔΔΔ: 458,
        ⲆᐃᐃⲆΔΔΔ: 459,
        ΔⲆᐃⵠⲆⲆᐃ: 460,
        ΔΔΔΔⵠΔᐃ: 461,
        ⲆΔΔⵠᐃⵠᐃ: 462,
        ⵠⲆᐃΔⵠᐃⵠ: 463,
        ⲆⲆⵠΔⵠΔᐃ: 464,
        ΔᐃⵠⵠΔⵠⵠ: 465,
        ⵠⲆⵠⵠⵠⲆΔ: 466,
        ⲆⵠⲆΔΔΔΔ: 467,
        ⲆⲆⵠΔΔⲆᐃ: 468,
        ᐃⲆΔᐃᐃΔⵠ: 469,
        ΔΔⲆΔᐃⲆΔ: 470,
        ⲆΔⲆΔⲆΔᐃ: 471,
        ᐃⲆⵠᐃΔΔⲆ: 472,
        ⵠᐃⵠⵠΔΔΔ: 473,
        ΔⵠⲆⲆⵠⵠⵠ: 474,
        ᐃⲆⵠΔᐃⲆᐃ: 475,
        ΔΔⵠⲆᐃⵠΔ: 476,
        ⵠΔⵠⵠⵠⵠΔ: 477,
        ᐃᐃⲆᐃⲆΔⵠ: 478,
        ΔΔⵠᐃΔⵠⲆ: 479,
        ⵠΔᐃΔᐃⲆΔ: 480,
        ⵠΔⲆᐃⵠⵠⵠ: 481,
        ⵠⲆⲆᐃⵠᐃΔ: 482,
        ⲆⵠⵠΔⵠᐃᐃ: 483,
        ΔᐃⵠⲆⲆᐃⲆ: 484,
        ΔⲆⲆᐃⵠⲆⲆ: 485,
        ⵠᐃᐃⲆⲆᐃᐃ: 486,
        ᐃΔⵠⵠᐃΔⲆ: 487,
        ⵠΔᐃᐃⲆᐃᐃ: 488,
        ⲆⵠΔΔΔⲆᐃ: 489,
        ᐃⵠᐃⵠᐃⵠΔ: 490,
        ⵠᐃΔⲆᐃΔⲆ: 491,
        ⲆᐃⵠᐃⲆⵠⵠ: 492,
        ⵠΔᐃᐃⲆᐃⵠ: 493,
        ΔΔⲆᐃⵠⵠⲆ: 494,
        ⵠΔⲆⲆⵠᐃᐃ: 495,
        ΔⲆᐃⵠⵠΔΔ: 496,
        ⲆΔⵠⵠΔΔⵠ: 497,
        ⵠᐃⲆΔⲆΔᐃ: 498,
        ⵠⵠⲆⵠΔⲆΔ: 499,
        ⲆᐃᐃⲆⲆⲆΔ: 500,
        ᐃᐃⵠⵠᐃΔᐃ: 501,
        ᐃⲆⲆⵠⲆⵠⵠ: 502,
        ⵠⲆΔⵠⵠᐃⵠ: 503,
        ᐃⲆⲆΔⵠᐃΔ: 504,
        ⲆⲆΔΔⵠΔⲆ: 505,
        ⲆΔᐃᐃⲆᐃΔ: 506,
        ΔᐃⵠⵠΔⵠⵠ: 507,
        ⵠⲆᐃⲆΔⲆΔ: 508,
        ΔⵠⲆⲆᐃΔᐃ: 509,
        ᐃⲆΔᐃᐃΔᐃ: 510,
        ⵠΔⵠⵠⲆᐃΔ: 511,
        ⵠᐃᐃΔⵠⲆᐃ: 512,
        ⵠⵠᐃⵠΔⵠΔ: 513,
        ᐃᐃᐃⲆᐃⵠⵠ: 514,
        ΔⵠΔⲆΔᐃΔ: 515,
        ⲆⵠⲆΔⲆΔⲆ: 516,
        ⲆⲆΔⲆⲆᐃⵠ: 517,
        ⵠᐃᐃⲆΔᐃⲆ: 518,
        ⵠᐃΔΔΔᐃⲆ: 519,
        ΔΔᐃⲆⵠⲆⲆ: 520,
        ⲆⵠⲆⲆⲆⲆΔ: 521,
        ΔΔⲆΔⵠⵠΔ: 522,
        ⵠᐃⵠΔᐃⲆⲆ: 523,
        ΔᐃᐃⲆⲆΔⲆ: 524,
        ⲆⵠⲆⲆⵠⲆⲆ: 525,
        ᐃΔⵠΔⵠⵠΔ: 526,
        ⲆⵠⲆⲆⵠⵠΔ: 527,
        ᐃᐃΔᐃⲆⲆⵠ: 528,
        ⲆΔᐃᐃⲆⵠⵠ: 529,
        ⲆΔⲆΔᐃᐃⲆ: 530,
        ⲆⲆᐃΔⲆⵠⵠ: 531,
        ΔⲆⲆᐃΔΔⵠ: 532,
        ⵠⵠⲆⲆⵠΔᐃ: 533,
        ΔⵠᐃⲆᐃⲆⵠ: 534,
        ᐃᐃⲆⵠΔΔᐃ: 535,
        ⵠⵠΔᐃᐃᐃΔ: 536,
        ⵠⵠⵠΔᐃⲆⲆ: 537,
        ᐃⲆΔΔⵠΔⲆ: 538,
        ⵠΔⵠΔΔΔⵠⵠΔ: 539,
        ΔΔΔᐃΔᐃᐃ: 540,
        ᐃⲆⲆΔᐃᐃⵠ: 541,
        ⵠⲆⲆⵠⲆⲆᐃ: 542,
        ᐃΔⵠΔΔᐃⲆ: 543,
        ⲆᐃⲆⵠᐃΔᐃⲆᐃ: 544,
        POINTS: 545,
        ΔⲆⲆⲆΔⲆⵠ: 546,
        ΔⲆⲆⲆΔⵠⵠ: 547,
        ⵠᐃⵠΔΔΔⵠ: 548,
        ΔⲆⵠⵠΔΔᐃ: 549,
        ΔΔⲆᐃΔᐃᐃ: 550,
        ⲆᐃᐃᐃⲆΔⵠ: 551,
        ⲆⲆⲆᐃⲆᐃⲆ: 552,
        ⲆⵠΔⵠⲆⵠⵠ: 553,
        ΔΔⲆΔⵠΔⵠ: 554,
        ⵠᐃΔᐃᐃⵠᐃ: 555,
        ΔⲆⲆⲆⲆᐃΔ: 556,
        ᐃⵠⵠΔᐃᐃⵠ: 557,
        ⲆᐃᐃᐃΔⵠⵠ: 558,
        ᐃⲆⵠΔⵠⲆⲆ: 559,
        ΔᐃᐃⲆⲆᐃΔ: 560,
        ᐃᐃⵠⲆⵠⵠⲆ: 561,
        ᐃⵠᐃᐃⲆⲆⲆ: 562,
        ⵠᐃⵠΔⲆⵠᐃ: 563,
        ⲆᐃⵠⵠⵠⲆΔ: 564,
        ⵠΔΔΔᐃΔΔ: 565,
        ⵠⲆΔᐃΔⲆΔ: 566,
        ⵠᐃⲆⵠⵠΔⲆ: 567,
        ⵠⲆⵠⲆᐃΔΔ: 568,
        ⲆΔᐃᐃᐃⲆᐃ: 569,
        ᐃⵠⵠⲆⵠⲆⲆ: 570,
        ΔⲆΔⲆΔⵠⲆ: 571,
        ⲆⵠⵠᐃⲆⲆᐃ: 572,
        ⵠⵠᐃⲆᐃⲆⲆ: 573,
        ⲆⲆⲆⲆⲆⵠᐃ: 574,
        ᐃΔⵠⵠᐃᐃΔ: 575,
        ⵠᐃⵠᐃΔΔⵠ: 576,
        ⲆⵠⲆΔⲆⵠΔ: 577,
        ᐃⵠᐃΔᐃⲆΔ: 578,
        ⵠⵠⵠᐃΔΔΔ: 579,
        ⵠᐃΔᐃᐃᐃⲆ: 580,
        ⵠΔⲆⵠⲆⲆᐃ: 581,
        ΔΔᐃⲆᐃⵠᐃ: 582,
        ᐃⵠᐃᐃΔⵠΔ: 583,
        ⲆⲆⵠΔⲆⲆⵠ: 584,
        ⲆⵠⲆⲆⲆⵠᐃ: 585,
        ⵠᐃΔⵠᐃⵠⲆ: 586,
        ΔⵠⵠⵠⲆΔⵠ: 587,
        ΔⲆᐃᐃⵠᐃΔ: 588,
        ΔⵠⲆⲆᐃⵠⲆ: 589,
        ⲆⵠⵠⲆΔᐃᐃ: 590,
        ᐃΔⵠΔⲆΔⲆ: 591,
        ⵠᐃᐃᐃᐃᐃΔ: 592,
        ⲆⲆⵠⲆⵠⲆⵠΔⲆ: 593,
        ΔΔⲆⲆⵠⲆΔ: 594,
        ⲆΔᐃⲆᐃΔⲆᐃⲆ: 595,
        ΔᐃᐃΔⲆΔΔ: 596,
        ᐃⲆⲆⲆⲆⲆᐃΔΔ: 597,
        ᐃⵠⵠᐃⲆⵠⲆᐃⵠ: 598,
        ⵠΔⲆᐃⲆⵠⲆⲆΔ: 599,
        ⵠΔᐃⵠⲆᐃⵠΔⲆ: 600,
        ⵠⲆΔⲆΔⵠΔΔΔ: 601,
        ⲆΔⵠⲆᐃΔᐃ: 602,
        ⵠⵠᐃⵠⵠ: 603,
        ⵠⲆⲆᐃΔᐃⵠ: 604,
        ⲆΔⲆΔΔΔΔ: 605,
        ΔⵠΔⲆⲆΔⲆ: 606,
        ⲆᐃⵠᐃΔᐃⲆᐃⵠ: 607,
        ᐃᐃᐃⲆᐃⵠᐃ: 608,
        ΔⲆⲆⲆⲆᐃᐃ: 609,
        ⵠᐃⵠΔⵠᐃᐃ: 610,
        ⲆΔⵠⵠⲆⲆΔ: 611,
        ᐃⵠΔΔΔΔΔ: 612,
        ⵠⲆΔⲆⵠᐃⲆ: 613,
        ⵠⲆΔΔᐃΔΔ: 614,
        ᐃⵠⵠⲆⵠⲆⵠ: 615,
        ⲆⲆΔΔᐃⵠⵠ: 616,
        ᐃᐃⲆΔⵠΔⵠ: 617,
        ⲆⲆᐃⵠⲆⲆⲆ: 618,
        ⲆᐃⲆⲆⲆ: 619,
        ᐃⵠⵠⲆΔ: 620,
        ⲆΔⲆᐃΔ: 621,
        ᐃⲆᐃΔΔΔⲆΔΔ: 622,
        ⵠⵠⲆΔⲆⲆⲆ: 623,
        ⵠⲆᐃᐃᐃΔⵠ: 624,
        ⲆᐃⲆᐃΔⲆΔ: 625,
        ⵠᐃⲆⲆⵠᐃΔ: 626,
        ΔⵠᐃΔᐃⵠⲆ: 627,
        ᐃᐃΔⲆⲆᐃᐃ: 628,
        ⵠⵠⲆᐃⵠⲆΔ: 629,
        ΔΔⲆΔΔⲆΔ: 630,
        ⲆᐃΔΔⵠⲆⵠ: 631,
        ΔᐃᐃⵠⲆⲆᐃ: 632,
        ⲆᐃᐃΔΔΔᐃ: 633,
        ΔⲆⲆⲆᐃᐃΔ: 634,
        ⵠⵠᐃⲆⲆΔⲆ: 635,
        ⵠᐃⵠⲆΔᐃⲆ: 636,
        ΔΔᐃΔᐃ: 637,
        ⲆᐃⲆⵠⵠⵠⲆ: 638,
        ᐃᐃΔⲆᐃᐃᐃ: 639,
        ⲆⵠᐃⲆⲆⲆⵠ: 640,
        ᐃⲆⵠᐃΔᐃⵠ: 641,
        ⵠᐃᐃⲆΔⵠⲆ: 642,
        ΔⲆᐃⲆⲆᐃᐃ: 643,
        ⲆⵠⵠΔΔⲆⲆ: 644,
        ⵠΔⲆᐃⲆⵠΔ: 645,
        ⲆΔⵠⲆⲆᐃΔ: 646,
        ΔⵠⲆⲆⵠᐃⵠ: 647,
        ⲆⵠᐃᐃⲆⲆΔ: 648,
        ᐃΔⵠΔΔΔⲆ: 649,
        ᐃⲆⲆᐃⲆᐃⲆ: 650,
        ΔΔΔΔᐃⲆⵠ: 651,
        ΔᐃΔᐃⲆΔΔ: 652,
        ⵠΔⵠΔΔⲆᐃ: 653,
        ⲆΔⲆⲆᐃᐃΔ: 654,
        ⵠᐃⵠΔᐃΔΔ: 655,
        ⵠᐃⵠⵠΔⲆΔ: 656,
        ᐃᐃΔⵠᐃᐃⲆ: 657,
        ⵠⲆΔᐃⵠⲆⵠ: 658,
        Ⲇⵠⵠᐃⵠᐃⵠ: 659,
        ⵠᐃΔⲆⵠᐃΔ: 660,
        ΔᐃⵠᐃⲆⵠᐃ: 661,
        ΔΔⲆⵠⲆⲆΔ: 662,
        ⲆΔᐃᐃⵠᐃⲆ: 663,
        ⵠⵠⵠⵠⵠⵠⲆ: 664,
        ⵠᐃⵠᐃⲆᐃᐃ: 665,
        ⵠⵠΔᐃΔⵠⵠ: 666,
        ⵠΔᐃᐃᐃⲆⲆ: 667,
        ΔᐃⲆᐃⵠⲆΔ: 668,
        ᐃⵠΔⲆⵠΔΔ: 669,
        ΔᐃⵠΔⲆⵠᐃ: 670,
        ᐃΔΔᐃⲆᐃⲆ: 671,
        ⲆⲆⵠΔⵠᐃᐃ: 672,
        ᐃΔᐃΔᐃ: 673,
        ΔⲆᐃΔΔᐃΔ: 674,
        ᐃⵠⵠⵠΔᐃᐃ: 675,
        ⵠᐃⲆΔᐃ: 676,
        ΔⲆΔⵠΔⵠᐃΔⵠ: 677,
        ⵠᐃᐃⵠⵠᐃⲆ: 678,
        ΔⲆᐃⲆⲆ: 679,
        ⵠⲆΔΔᐃᐃⲆ: 680,
        ⲆⵠΔⲆⵠΔᐃ: 681,
        ⲆᐃΔⵠᐃⵠᐃ: 682,
        ΔΔΔΔⲆⲆⵠ: 683,
        ΔΔⲆᐃᐃⵠⲆ: 684,
        ⵠᐃⲆⲆⵠᐃⲆ: 685,
        ΔΔⲆᐃⵠᐃⲆ: 686,
        ⵠᐃΔⵠΔⲆΔ: 687,
        ⲆⵠᐃⲆᐃⵠᐃ: 688,
        ᐃⵠΔΔᐃᐃⵠ: 689,
        ΔⵠⲆᐃᐃⲆⲆ: 690,
        ⵠⲆⲆⵠⵠ: 691,
        ΔⲆⵠᐃⲆ: 692,
        ⲆᐃᐃⲆⵠ: 693,
        ⵠⵠⲆⵠᐃ: 694,
        ΔⲆᐃⲆᐃ: 695,
        ΔⵠⵠᐃⵠⲆᐃ: 696,
        ΔⲆᐃΔⲆΔⵠ: 697,
        ⵠΔⵠⵠᐃⲆᐃ: 698,
        ᐃⵠⲆⲆⲆᐃΔ: 699,
        ⵠⲆⵠⲆᐃⵠᐃ: 700,
        ᐃⲆⲆⲆᐃᐃΔ: 701,
        ⵠᐃᐃⲆⵠΔᐃ: 702,
        ⵠⵠⵠᐃⲆⲆⵠ: 703,
        ⲆⲆⲆⲆᐃⵠⵠ: 704,
        ⵠΔᐃⵠᐃⵠΔ: 705,
        ⲆΔⵠⵠⲆᐃⵠ: 706,
        ⵠⵠᐃⲆᐃⵠᐃ: 707,
        ⵠⵠᐃᐃⵠΔⵠ: 708,
        ⲆᐃⵠᐃⵠᐃΔ: 709,
        ⲆⲆΔⲆᐃⲆΔ: 710,
        ᐃΔΔΔⵠᐃⲆ: 711,
        ᐃⵠΔⵠᐃΔⲆ: 712,
        ᐃΔᐃᐃⲆᐃⲆ: 713,
        ⵠΔᐃⲆⲆᐃⲆ: 714,
        ᐃⵠⵠⲆⵠΔΔ: 715,
        ⵠᐃⲆⵠⲆΔΔ: 716,
        ᐃΔᐃᐃⵠⲆⵠ: 717,
        ᐃⵠⵠᐃⲆⵠᐃ: 718,
        ⲆΔΔΔⲆᐃᐃ: 719,
        ᐃⲆⵠᐃⵠⵠᐃ: 720,
        ΔⲆᐃⲆⵠⲆⵠⲆᐃ: 721,
        ᐃⲆᐃᐃⵠᐃⵠ: 722,
        ⲆᐃⵠⵠⲆᐃⵠ: 723,
        ⵠΔᐃΔΔΔᐃ: 724,
        ΔΔᐃΔⵠᐃᐃ: 725,
        ᐃⲆᐃⲆⵠᐃΔ: 726,
        ⵠⲆⵠⲆΔⲆᐃ: 727,
        ⲆⵠΔΔⵠΔΔ: 728,
        ΔⲆⲆⲆⵠⲆᐃ: 729,
        ⲆⲆⵠᐃΔΔⲆ: 730,
        ᐃⲆᐃΔⲆⲆⲆ: 731,
        ⵠⵠⲆᐃⵠⵠᐃ: 732,
        ΔᐃⵠⲆᐃᐃⲆ: 733,
        ᐃⲆᐃᐃⲆⵠⵠ: 734,
        ⲆⵠⵠⵠΔᐃΔ: 735,
        ΔⲆⵠᐃΔᐃⲆ: 736,
        ᐃⵠⲆⲆⲆⲆⵠ: 737,
        ⵠⵠΔΔᐃⵠⲆ: 738,
        ⲆⲆᐃⲆⲆΔⲆ: 739,
        ⵠᐃⲆᐃᐃⲆΔ: 740,
        ΔᐃᐃⲆⵠΔΔ: 741,
        ⵠⲆⵠⲆⵠΔⲆ: 742,
        ⲆΔᐃᐃⲆΔΔ: 743,
        ΔᐃΔⲆⵠᐃⲆ: 744,
        ΔΔⵠⵠᐃΔⵠ: 745,
        ⵠⲆΔⲆⵠΔᐃ: 746,
        ᐃΔᐃⵠⲆᐃⲆ: 747,
        ⲆᐃᐃⲆΔΔⲆ: 748,
        ⲆᐃⲆⲆⲆⲆⵠ: 749,
        ᐃΔⵠΔΔⲆⲆ: 750,
        ⲆⵠᐃⲆⲆⵠΔ: 751,
        ⵠᐃΔⲆΔᐃⵠ: 752,
        ᐃᐃΔⵠᐃⲆΔ: 753,
        ⲆᐃⵠⲆΔΔΔ: 754,
        ᐃᐃᐃⵠⲆⵠΔ: 755,
        ⲆᐃΔᐃΔΔΔ: 756,
        ΔΔⵠⵠⵠⲆᐃ: 757,
        ΔᐃΔᐃᐃΔⲆ: 758,
        ΔⵠⵠⵠᐃⲆⲆ: 759,
        ⲆΔⲆⵠⲆⲆᐃ: 760,
        ⲆᐃᐃⲆᐃΔᐃ: 761,
        ΔᐃᐃΔⲆᐃⲆ: 762,
        ⲆᐃⲆΔⲆⵠⲆ: 763,
        ΔᐃᐃⲆᐃⲆⵠ: 764,
        ΔⲆⲆΔⵠᐃⵠ: 765,
        ΔⵠΔⵠᐃΔⵠ: 766,
        ⲆⲆⲆⵠᐃΔⵠ: 767,
        ⵠᐃⲆⵠᐃᐃΔ: 768,
        ⲆⵠᐃⲆᐃΔΔ: 769,
        ᐃᐃⵠᐃΔᐃΔ: 770,
        ⲆⵠᐃᐃⲆΔΔ: 771,
        ᐃᐃⲆΔⲆⲆᐃ: 772,
        ᐃⲆⵠΔΔᐃⲆ: 773,
        ⵠᐃⵠⲆⲆᐃⵠ: 774,
        ⵠⲆΔⵠΔⲆᐃ: 775,
        ⵠⵠⵠⵠᐃⲆⲆ: 776,
        ΔⵠᐃΔᐃᐃⲆ: 777,
        ᐃⲆᐃᐃⵠⵠⲆ: 778,
        ⵠⲆⲆᐃⵠⵠΔ: 779,
        ⵠΔᐃⵠᐃⲆⲆ: 780,
        ⲆⲆⵠᐃⲆⲆⲆ: 781,
        ⵠᐃⵠⵠⵠⵠⵠ: 782,
        ΔⲆΔΔᐃᐃⵠ: 783,
        ΔᐃⵠᐃᐃⲆΔ: 784,
        ᐃΔⵠᐃⲆΔΔ: 785,
        ⵠᐃᐃⵠΔΔΔ: 786,
        ᐃΔⲆᐃⲆⵠΔ: 787,
        ΔⵠⲆᐃᐃΔⲆ: 788,
        Ⲇⵠᐃᐃⵠⵠᐃ: 789,
        ⲆΔΔᐃⲆⲆⲆ: 790,
        ⵠⵠᐃᐃⲆΔⲆ: 791,
        ⵠⲆᐃᐃⵠⵠⲆ: 792,
        ΔⲆⲆⵠⲆ: 793,
        ⲆⵠΔⵠⲆⲆⲆ: 794,
        ᐃⵠΔΔⵠⵠᐃ: 795,
        ⵠΔⵠΔⲆ: 796,
        ΔⵠΔⲆΔΔⵠ: 797,
        ΔⵠⲆᐃΔΔⲆ: 798,
        ⵠⲆᐃⵠᐃⲆᐃ: 799,
        ⲆΔᐃΔⵠΔᐃ: 800,
        ΔⵠΔᐃⵠⵠⲆ: 801,
        ⵠⲆᐃⵠⵠ: 802,
        Ⲇⵠⵠⵠᐃᐃⵠ: 803,
        ΔⵠⲆᐃⵠΔΔΔᐃ: 804,
        ΔᐃⲆᐃΔΔᐃⵠΔ: 805,
        ᐃⲆᐃΔΔⵠΔⲆΔ: 806,
        ⵠⵠΔᐃⲆⵠᐃᐃⲆ: 807,
        ΔΔⲆᐃⲆΔᐃ: 808,
        ΔΔⵠΔⵠⵠⲆ: 809,
        ΔᐃᐃⲆΔⵠⵠ: 810,
        ΔⵠᐃᐃᐃΔⲆ: 811,
        ⲆⲆⲆⲆΔⲆᐃ: 812,
        ⲆΔᐃΔⲆⵠⲆ: 813,
        ΔᐃⲆᐃΔᐃᐃ: 814,
        ᐃⲆⵠⵠⵠⵠΔ: 815,
        ΔⲆⲆⵠᐃᐃⵠ: 816,
        ⵠⲆᐃⲆⲆΔΔ: 817,
        ⲆΔᐃᐃⲆ: 818,
        ᐃⵠΔΔⲆ: 819,
        ΔⵠᐃⵠΔᐃⵠ: 820,
        ᐃΔⲆⲆᐃᐃⲆ: 821,
        ⲆⵠⲆᐃΔᐃⲆ: 822,
        ⵠⵠⵠᐃⵠⲆⵠ: 823,
        ᐃΔᐃᐃΔⵠⵠ: 824,
        Ⲇⵠⵠᐃᐃᐃⵠ: 825,
        ΔⲆⵠⲆⵠᐃᐃ: 826,
        ⵠᐃΔᐃⲆᐃⵠ: 827,
        ⲆΔⲆⵠΔⵠⵠ: 828,
        ᐃⵠⲆΔⵠⲆᐃ: 829,
        ⲆᐃΔⲆΔΔⲆ: 830,
        ᐃⲆⵠⲆᐃΔⵠ: 831,
        ⲆᐃⵠⲆⵠⲆΔⲆΔ: 832,
        ⵠⵠΔⵠΔΔⲆⲆⲆ: 833,
        ΔΔΔⵠΔⵠᐃ: 834,
        ⵠΔᐃⵠΔⵠⲆ: 835,
        ᐃⵠⵠΔⵠΔΔ: 836,
        ⵠⲆΔᐃⵠΔᐃ: 837,
        ⵠⲆᐃΔⲆᐃⲆ: 838,
        ⵠⵠΔⲆᐃⲆⲆ: 839,
        ΔⵠⲆⲆᐃⲆⵠ: 840,
        ⵠⲆΔⵠⵠΔΔ: 841,
        ᐃⲆΔᐃΔⲆⵠ: 842,
        ΔⲆⲆⲆⵠⲆⲆ: 843,
        ΔⵠΔΔⲆⵠᐃ: 844,
        ⲆⲆΔΔⵠⵠⲆ: 845,
        ⲆΔⲆⲆΔⲆⲆ: 846,
        ⵠΔᐃΔΔΔⵠ: 847,
        ᐃⵠᐃΔⲆⲆᐃ: 848,
        ⵠΔⲆΔΔᐃΔ: 849,
        ⵠΔⲆⲆⵠᐃΔ: 850,
        ⲆⵠⲆⵠⲆΔΔ: 851,
        ᐃᐃᐃⲆⲆΔⵠⲆⵠ: 852,
        ΔΔⵠⲆⲆⲆⵠ: 853,
        ⵠⵠⲆⲆᐃ: 854,
        ᐃΔⲆΔⲆᐃᐃⲆΔ: 855,
        ΔᐃⵠᐃΔΔⵠΔⵠ: 856,
        ᐃᐃⲆⲆΔⵠⲆΔⵠ: 857,
        ⲆⵠⵠΔᐃⵠⵠΔⵠ: 858,
        ΔⲆⵠⵠᐃΔⲆ: 859,
        ᐃⲆⵠᐃⵠΔΔ: 860,
        ΔΔΔᐃᐃΔΔ: 861,
        ΔⵠᐃⵠᐃΔᐃ: 862,
        ᐃΔⲆΔⲆⵠⲆ: 863,
        ⵠⲆⲆⵠᐃΔᐃⵠⲆ: 864,
        ⲆΔᐃΔⵠᐃᐃ: 865,
        ΔᐃⵠⵠΔⵠΔ: 866,
        ⲆᐃΔᐃⲆⲆⵠ: 867,
        ΔᐃΔΔᐃⲆΔ: 868,
        ⵠᐃΔΔⲆᐃⵠ: 869,
        ⲆΔᐃⲆⲆΔⵠ: 870,
        ⵠⲆⵠᐃᐃᐃΔ: 871,
        ᐃⲆⲆᐃΔ: 872,
        ᐃⵠⵠΔΔᐃⵠᐃΔ: 873,
        ΔᐃⲆᐃΔᐃΔ: 874,
        ᐃⵠⵠᐃΔᐃⲆ: 875,
        ⵠΔⵠᐃⵠⵠⲆ: 876,
        ⵠⵠᐃᐃⵠᐃⵠ: 877,
        ᐃⲆⲆᐃⲆΔⵠ: 878,
        ᐃⲆⲆΔΔᐃΔ: 879,
        ⲆᐃᐃⵠΔᐃⵠ: 880,
        ⵠⲆⵠΔᐃΔᐃ: 881,
        ⵠᐃᐃⲆΔⲆⲆ: 882,
        ΔΔΔᐃΔⵠⲆ: 883,
        ᐃⲆⵠᐃᐃΔⲆ: 884,
        ᐃᐃⲆⲆⵠΔᐃ: 885,
        ⵠⲆΔⵠⵠΔᐃ: 886,
        ΔΔⵠⲆᐃ: 887,
        ⲆⵠⵠᐃΔΔΔ: 888,
        ΔⲆⵠⵠΔⲆᐃ: 889,
        ⵠᐃᐃⵠᐃΔⵠ: 890,
        ᐃⵠΔⵠΔⵠⵠ: 891,
        ᐃΔⲆⵠΔⵠⵠ: 892,
        ⵠΔⵠᐃⵠΔⵠ: 893,
        ⲆᐃᐃⵠⵠΔᐃ: 894,
        ΔΔⵠΔⵠΔⲆ: 895,
        ᐃⲆᐃᐃΔΔΔ: 896,
        ⲆᐃⲆⵠⲆΔᐃ: 897,
        ⵠᐃⲆΔⵠⲆⵠ: 898,
        ⵠΔⲆΔΔⲆⵠ: 899,
        ΔΔⵠᐃⲆΔΔ: 900,
        ᐃΔⲆΔᐃΔᐃ: 901,
        ⵠΔⲆⲆⵠΔᐃ: 902,
        ⵠⵠⵠⲆⵠⵠΔ: 903,
        ᐃᐃⲆⲆΔᐃⲆ: 904,
        ⲆΔⵠⲆᐃᐃⵠ: 905,
        ⲆⵠᐃⲆΔⲆΔ: 906,
        ⲆΔᐃΔΔΔⲆ: 907,
        ⲆᐃⲆⲆⵠⲆⲆ: 908,
        ΔΔⲆΔΔⵠⲆ: 909,
        ΔⵠⵠⵠΔⲆⲆ: 910,
        ᐃⲆΔΔΔᐃⲆ: 911,
        ΔΔⲆΔⵠᐃΔ: 912,
        ΔᐃΔⲆⲆⵠⲆ: 913,
        ⵠⵠⵠᐃⵠᐃⲆⵠⲆ: 914,
        ΔⵠⵠᐃⲆⵠᐃΔⲆ: 915,
        ⲆⵠᐃΔⲆⵠΔᐃᐃ: 916,
        ᐃⲆⲆⲆΔΔⲆΔᐃ: 917,
        ⲆⵠⲆⲆⵠⵠⲆ: 918,
        ⲆᐃᐃⵠΔⵠⲆ: 919,
        ⵠⵠᐃⲆΔ: 920,
        ⲆᐃΔΔⲆⵠⵠ: 921,
        ⲆⲆᐃΔᐃΔⲆ: 922,
        ⵠⵠᐃᐃΔⲆⵠ: 923,
        ⲆⵠΔⲆΔΔᐃ: 924,
        ⲆᐃⵠⵠᐃⵠⲆ: 925,
        ⵠΔⵠΔⵠⵠⵠ: 926,
        ᐃᐃⵠⵠⵠⲆΔ: 927,
        ΔᐃⲆᐃᐃᐃⵠ: 928,
        ᐃⵠᐃⵠΔᐃΔ: 929,
        ⲆΔᐃᐃΔᐃᐃ: 930,
        ᐃΔⲆᐃΔⲆᐃ: 931,
        ᐃΔⵠᐃⲆᐃΔ: 932,
        ⵠⲆᐃΔᐃᐃᐃ: 933,
        ⵠΔᐃᐃᐃᐃⲆ: 934,
        ΔⵠᐃⲆⲆⲆⲆ: 935,
        ᐃⲆΔᐃᐃⲆᐃ: 936,
        ⲆᐃⵠⲆΔΔⵠ: 937,
        ΔΔⲆΔⲆᐃⲆ: 938,
        ΔᐃᐃΔᐃᐃᐃ: 939,
        ⵠᐃΔᐃⵠⲆⲆᐃΔ: 940,
        ⵠΔⲆΔᐃ: 941,
        ⲆⲆᐃⲆᐃᐃⲆ: 942,
        ⲆΔⲆⵠᐃⵠΔ: 943,
        ᐃᐃΔΔΔΔⲆ: 944,
        ΔΔⲆⲆⲆΔΔ: 945,
        ᐃΔΔⵠᐃⲆᐃ: 946,
        ΔⵠᐃⵠΔΔΔ: 947,
        ⲆᐃⲆⵠΔᐃⵠ: 948,
        ᐃΔⲆᐃⲆⲆⲆ: 949,
        ᐃᐃᐃⵠⵠⲆⵠ: 950,
        ᐃΔᐃⵠⵠⵠᐃ: 951,
        ⵠΔᐃᐃΔⲆΔ: 952,
        ΔⲆⵠⵠⲆΔᐃ: 953,
        ⲆⵠᐃΔᐃⵠⲆ: 954,
        ᐃᐃⵠᐃΔⵠⵠ: 955,
        ᐃΔⲆⲆⲆΔΔ: 956,
        ΔⵠΔΔᐃⲆⲆ: 957,
        ᐃΔΔⵠⲆΔᐃ: 958,
        ᐃⲆⵠᐃΔᐃⲆ: 959,
        ⵠⲆΔⵠᐃⵠΔ: 960,
        ⲆⲆⵠΔΔΔᐃ: 961,
        ΔⲆᐃⲆΔΔΔ: 962,
        ΔⲆⵠⲆⵠΔⵠ: 963,
        ΔᐃⵠⵠᐃΔᐃΔⲆ: 964,
        ΔⲆᐃᐃⲆᐃΔ: 965,
        ᐃᐃᐃᐃⲆⲆᐃ: 966,
        ΔⲆᐃⲆⲆⲆΔ: 967,
        ⵠᐃΔⵠᐃⲆΔ: 968,
        ΔⲆⵠⲆⵠⲆⲆ: 969,
        ⵠΔᐃΔᐃΔⵠ: 970,
        ⲆΔᐃⲆᐃΔΔ: 971,
        ᐃⵠⲆᐃᐃⵠⲆ: 972,
        ᐃᐃⲆΔᐃⲆⵠ: 973,
        ᐃⵠⲆᐃΔⲆⵠ: 974,
        ⵠΔⵠᐃⲆⲆᐃ: 975,
        ⲆᐃⲆᐃⲆⲆⲆ: 976,
        ᐃᐃᐃᐃⲆⵠΔ: 977,
        ᐃⲆⵠⲆΔᐃΔ: 978,
        ⵠⵠᐃᐃΔⲆᐃ: 979,
        ⲆⵠⵠΔΔᐃΔ: 980,
        ᐃⵠᐃΔᐃⵠⲆ: 981,
        ᐃⵠⵠΔⵠᐃⵠ: 982,
        ⲆΔⵠᐃⲆΔᐃ: 983,
        ᐃᐃⲆΔⲆᐃᐃ: 984,
        ΔⵠⵠⲆⵠᐃΔ: 985,
        ᐃⵠΔⵠΔΔΔ: 986,
        ΔΔⲆⵠᐃΔᐃ: 987,
        ΔⵠᐃⲆΔΔᐃ: 988,
        ᐃᐃᐃΔⲆ: 989,
        ⲆΔⲆᐃΔⵠΔ: 990,
        ᐃΔⲆΔⲆΔΔ: 991,
        ᐃᐃⲆΔⵠⲆⲆ: 992,
        ⲆⲆΔΔⵠΔⵠ: 993,
        ⵠᐃⵠΔᐃⵠΔ: 994,
        ⲆⲆᐃⲆⲆⲆΔ: 995,
        ⵠΔᐃⵠΔᐃΔ: 996,
        ᐃᐃΔᐃⵠᐃᐃ: 997,
        ΔΔΔΔⵠⲆⵠ: 998,
        ΔⵠΔⵠⲆᐃᐃ: 999,
        ⲆⲆⵠⲆⲆⵠᐃ: 1000,
        ᐃᐃⲆⲆⲆΔᐃ: 1001,
        ⲆⵠᐃᐃΔΔⵠ: 1002,
        ᐃⵠⵠᐃⲆᐃⲆ: 1003,
        ΔΔΔΔⵠᐃⵠ: 1004,
        ᐃⲆΔⲆⵠΔΔ: 1005,
        ᐃⵠⲆΔⲆΔᐃ: 1006,
        ᐃⲆⲆΔΔΔᐃ: 1007,
        ⲆⵠⲆⵠᐃⲆⲆ: 1008,
        ᐃⵠΔᐃⵠᐃⲆ: 1009,
        ⲆᐃᐃΔΔⵠᐃ: 1010,
        ⲆⵠⲆΔᐃⲆᐃ: 1011,
        ⲆᐃⵠⲆⵠᐃⲆ: 1012,
        ⵠᐃⲆᐃⲆᐃⲆ: 1013,
        ⲆᐃΔᐃⲆᐃⵠ: 1014,
        ΔⲆⲆΔΔⵠᐃ: 1015,
        ⲆᐃⵠⵠΔΔᐃ: 1016,
        ΔⵠⲆⲆⲆᐃⵠ: 1017,
        ⲆⲆΔⲆⲆⲆΔ: 1018,
        ⵠΔᐃᐃⲆΔΔ: 1019,
        ΔⲆⵠⲆΔⲆⵠ: 1020,
        ΔΔᐃⲆΔᐃⲆ: 1021,
        ⲆΔⲆⵠⵠⲆⲆ: 1022,
        ᐃⵠΔⵠⵠⵠᐃ: 1023,
        ⲆΔΔΔ: 1024,
        Δᐃᐃⵠ: 1025,
        ⲆⲆⵠⲆᐃΔΔ: 1026,
        ᐃΔᐃΔⲆΔᐃ: 1027,
        ⵠᐃⲆⲆⵠⲆⲆ: 1028,
        ⲆⵠΔⵠᐃⵠⲆ: 1029,
        ᐃⲆⲆΔⵠΔᐃ: 1030,
        ΔⲆΔᐃⵠΔᐃ: 1031,
        ⲆⲆⵠᐃⵠΔΔ: 1032,
        ⵠⵠΔᐃΔ: 1033,
        ΔᐃΔᐃᐃⲆΔ: 1034,
        ΔⲆᐃᐃᐃ: 1035,
        ΔⵠᐃᐃⵠΔⵠ: 1036,
        Ⲇᐃᐃᐃᐃ: 1037,
        ⵠⲆⵠⵠᐃᐃΔ: 1038,
        ᐃⲆΔⵠⲆ: 1039,
        ⵠᐃᐃⵠᐃΔᐃ: 1040,
        ᐃⲆᐃΔⲆ: 1041,
        ᐃⲆΔᐃᐃ: 1042,
        ⵠⵠⵠⵠᐃⲆΔ: 1043,
        ⲆⵠⲆⵠΔⲆⲆ: 1044,
        ⵠⵠᐃΔⵠⲆⲆ: 1045,
        ⵠᐃᐃΔᐃΔⲆ: 1046,
        ⲆΔΔΔⲆᐃⵠ: 1047,
        ⵠᐃΔⲆⲆⲆΔ: 1048,
        ⵠᐃⲆᐃᐃᐃᐃ: 1049,
        ⵠΔᐃΔΔⲆⲆ: 1050,
        ΔⵠᐃⲆⲆⲆᐃ: 1051,
        ᐃᐃΔΔᐃ: 1052,
        ⵠⲆⵠᐃⵠΔᐃ: 1053,
        ⲆⵠⲆΔⵠ: 1054,
        ⲆᐃⲆⲆⵠΔⲆ: 1055,
        ⲆⲆᐃΔⵠⵠⲆ: 1056,
        ⵠΔⵠⲆΔⵠᐃ: 1057,
        ΔᐃΔᐃᐃⵠᐃ: 1058,
        ⲆΔⵠΔⵠⵠⵠ: 1059,
        ⵠΔⵠⲆⵠⵠᐃ: 1060,
        ᐃᐃⲆⲆⲆⵠⵠᐃⵠ: 1061,
        ⲆΔᐃⲆᐃᐃⲆ: 1062,
        ⵠᐃᐃΔⲆΔΔ: 1063,
        ΔΔᐃᐃⲆᐃΔᐃΔ: 1064,
        ⵠⲆΔᐃΔᐃᐃ: 1065,
        ΔⵠⵠⲆᐃⵠⵠ: 1066,
        ΔΔΔⲆⵠᐃΔ: 1067,
        ᐃΔᐃᐃⵠᐃΔ: 1068,
        ⲆⲆΔΔⵠ: 1069,
        ᐃΔᐃΔᐃⲆΔ: 1070,
        ⲆΔΔⲆΔⵠΔ: 1071,
        ⲆᐃᐃΔΔⲆΔ: 1072,
        ⵠΔⲆᐃΔⲆΔ: 1073,
        ⵠᐃⵠⲆΔᐃΔ: 1074,
        ᐃᐃⵠⲆⵠΔⵠ: 1075,
        ΔⵠᐃⵠⲆⵠⲆ: 1076,
        ⵠΔⲆᐃⵠⲆⲆ: 1077,
        ᐃᐃⵠΔⵠᐃⲆ: 1078,
        ⵠᐃⲆⲆΔᐃΔ: 1079,
        ⵠⲆⵠΔⵠᐃⵠ: 1080,
        ⵠΔΔⲆΔΔⵠ: 1081,
        ΔⵠΔⵠⵠᐃᐃ: 1082,
        ΔⵠⲆᐃⲆᐃᐃ: 1083,
        ᐃⵠΔⲆᐃ: 1084,
        ΔⵠⵠᐃⲆΔⲆ: 1085,
        ΔΔⵠᐃⲆⲆΔ: 1086,
        ΔΔΔᐃᐃⲆⲆ: 1087,
        ⵠΔᐃⲆⲆᐃⵠ: 1088,
        ᐃᐃⵠᐃΔΔⲆ: 1089,
        ⵠⵠΔⲆⲆⵠⵠ: 1090,
        ᐃΔⲆΔⲆᐃⵠ: 1091,
        ᐃᐃⲆⵠᐃᐃΔ: 1092,
        ΔΔᐃⵠⲆⵠⵠ: 1093,
        ᐃⲆᐃᐃⲆᐃⵠ: 1094,
        ᐃⵠⵠᐃᐃᐃΔ: 1095,
        ⵠⵠⲆⲆⵠⵠⲆ: 1096,
        ΔⵠⲆᐃⲆⵠΔ: 1097,
        ΔⵠΔⵠᐃΔᐃ: 1098,
        ⵠⲆᐃᐃᐃ: 1099,
        ⲆᐃΔⲆΔⵠⵠ: 1100,
        ᐃᐃⵠΔΔΔⵠ: 1101,
        ΔΔΔᐃΔᐃⵠ: 1102,
        ⵠᐃⲆⵠⵠⲆⲆ: 1103,
        ⲆⲆᐃⲆⲆΔⵠ: 1104,
        ΔⵠᐃⲆᐃⵠΔ: 1105,
        ⵠⵠΔⲆⵠΔΔ: 1106,
        ᐃΔΔΔᐃΔᐃ: 1107,
        ⲆⵠᐃΔΔⲆⲆ: 1108,
        ΔⵠᐃΔⲆⵠᐃ: 1109,
        ⵠⲆⲆΔᐃⵠΔ: 1110,
        ᐃⵠᐃΔᐃΔⲆ: 1111,
        ⵠⲆⵠⲆΔᐃᐃ: 1112,
        ⵠⲆΔⲆⲆⲆⲆ: 1113,
        ⵠΔⲆⵠⲆⲆⵠ: 1114,
        ᐃΔⵠⵠᐃⲆⵠ: 1115,
        ΔΔⵠΔᐃⲆᐃ: 1116,
        ᐃⵠⵠⵠᐃΔᐃ: 1117,
        ᐃΔⲆⲆΔⲆⵠ: 1118,
        ᐃⲆⲆΔᐃᐃⲆ: 1119,
        ΔⲆⲆⵠⵠ: 1120,
        ᐃᐃΔΔⲆⲆⵠ: 1121,
        ΔΔΔᐃΔΔΔ: 1122,
        ⵠΔⵠⲆⲆⲆᐃ: 1123,
        ⵠⲆⵠⵠⲆᐃΔ: 1124,
        ⵠᐃΔΔⲆᐃΔ: 1125,
        ⲆⵠⲆⲆᐃᐃⲆ: 1126,
        ⵠⵠⵠⵠΔⵠⵠ: 1127,
        ⲆⵠΔᐃⲆⵠᐃ: 1128,
        ⵠᐃⲆΔᐃⲆᐃ: 1129,
        ⲆᐃᐃᐃΔⵠΔ: 1130,
        ⲆⵠᐃᐃⵠᐃⲆ: 1131,
        ᐃΔⵠᐃⲆⲆᐃ: 1132,
        ΔᐃᐃᐃᐃᐃΔ: 1133,
        ⲆᐃⲆⲆΔΔⵠ: 1134,
        ᐃΔᐃΔᐃᐃΔ: 1135,
        ⲆΔⲆⵠⵠⵠᐃ: 1136,
        ⵠⲆⲆⲆΔⲆⲆ: 1137,
        ΔΔᐃᐃᐃΔΔ: 1138,
        ΔⲆⵠⵠⲆᐃⵠ: 1139,
        ΔⵠⵠΔⲆⲆⵠ: 1140,
        ⲆⵠⵠⲆᐃΔᐃ: 1141,
        ΔⲆΔⵠⵠᐃΔ: 1142,
        ᐃᐃⵠⲆΔⵠⲆ: 1143,
        ᐃΔᐃᐃⲆΔⲆ: 1144,
        ⲆΔⲆⲆᐃⲆⲆ: 1145,
        ⵠⲆⲆⲆⵠᐃⵠ: 1146,
        ΔΔⲆΔⵠⲆᐃ: 1147,
        ⵠⵠⲆⲆᐃᐃᐃ: 1148,
        ΔⲆⵠᐃⵠΔᐃ: ["#E9CF96", "#144940"],
        ⵠΔΔⲆⵠⲆΔ: 1149,
        ΔⲆᐃⵠᐃᐃⵠ: 1150,
        ⲆⵠⲆⵠᐃⵠⲆ: 1151,
        ΔⵠΔᐃᐃᐃⲆ: 1152,
        ΔⲆⲆⵠΔⵠⲆ: 1153,
        ᐃΔᐃⲆⲆⲆⲆ: 1154,
        ᐃⲆΔΔⵠᐃⲆ: 1155,
        ΔᐃⵠⲆᐃ: 1156,
        ΔᐃΔⵠΔⵠⲆ: 1157,
        ΔᐃᐃᐃⵠᐃⲆ: 1158,
        ᐃⵠΔⲆⲆᐃⲆ: 1159,
        ⵠᐃΔᐃΔᐃΔ: 1160,
        ᐃⵠⲆⲆᐃⵠⲆ: 1161,
        ΔᐃⲆⵠⵠⲆⵠ: 1162,
        ᐃᐃᐃⵠⲆᐃⲆ: 1163,
        ⲆᐃⵠⵠⵠⵠΔ: 1164,
        ᐃⵠⲆⲆᐃᐃᐃ: 1165,
        ΔΔⲆᐃᐃⲆⵠ: 1166,
        ΔⲆⲆⵠΔⵠΔ: 1167,
        ⵠⲆⲆΔᐃᐃᐃ: 1168,
        ⵠⲆⲆⵠⵠΔⵠ: 1169,
        ᐃΔΔⲆⵠⵠⲆ: 1170,
        ᐃΔⲆⵠⲆΔⵠ: 1171,
        ⵠΔᐃⵠⵠⲆΔ: 1172,
        ᐃΔΔᐃⵠⵠΔ: 1173,
        ⲆᐃΔⲆΔΔⵠ: 1174,
        ⵠⵠⲆⵠΔⵠΔ: 1175,
        ΔΔⲆᐃⵠⵠΔ: 1176,
        ᐃᐃᐃⵠᐃⵠΔ: 1177,
        ⵠⵠⵠⵠΔΔⵠ: 1178,
        ⲆⵠᐃⵠⵠΔⵠ: 1179,
        ΔⵠⲆⲆΔᐃⵠ: 1180,
        ΔⵠΔⲆΔⲆᐃ: 1181,
        ᐃΔΔⲆⵠΔΔ: 1182,
        ᐃΔⵠᐃᐃⵠᐃ: 1183,
        ᐃⲆᐃᐃⵠΔⲆ: 1184,
        ΔⲆᐃᐃⵠΔᐃ: 1185,
        ⲆⲆᐃΔᐃⵠⵠ: 1186,
        ⲆⲆΔᐃⲆᐃⲆ: 1187,
        ᐃⵠⲆΔᐃⵠⲆ: 1188,
        ⵠⲆⲆⵠⵠΔᐃ: 1189,
        ΔⲆⵠᐃΔⵠΔ: 1190,
        ⵠⲆⵠⵠⵠΔΔ: 1191,
        ⲆⲆⵠⲆΔᐃᐃ: 1192,
        ᐃᐃⵠᐃᐃᐃⵠ: 1193,
        ᐃⲆⵠⵠⵠΔᐃ: 1194,
        ΔᐃⲆⲆⵠⵠᐃ: 1195,
        ⲆⵠΔᐃᐃⵠᐃ: 1196,
        ⵠⵠᐃⵠᐃΔⲆ: 1197,
        ⲆⲆⲆⲆⵠⲆⵠ: 1198,
        ΔⲆΔⵠᐃⵠᐃ: 1199,
        ⲆᐃⲆᐃⲆⵠⵠ: 1200,
        ᐃⲆⲆΔᐃᐃᐃ: 1201,
        ΔⲆΔⵠⵠΔⵠ: 1202,
        ⲆᐃΔⵠΔᐃΔ: 1203,
        ᐃⲆᐃⲆⲆⲆⵠ: 1204,
        ⵠᐃⲆΔⵠⵠᐃ: 1205,
        ᐃⲆⵠΔΔΔⵠ: 1206,
        ⵠⵠΔⲆⵠΔⵠ: 1207,
        ΔᐃⵠⲆΔᐃΔ: 1208,
        ᐃΔⵠΔⵠΔⵠ: 1209,
        ⲆⵠⲆⵠⲆⲆⵠ: 1210,
        ᐃᐃΔΔΔⵠⲆ: 1211,
        ᐃᐃᐃⲆΔᐃⲆ: 1212,
        ⵠⲆᐃⲆⲆᐃΔ: 1213,
        ᐃⵠΔⲆᐃᐃⲆ: 1214,
        ⲆⵠᐃⲆⵠᐃΔ: 1215,
        ⵠᐃⲆⵠΔΔⵠ: 1216,
        ᐃΔⲆΔⵠᐃΔ: 1217,
        ᐃⵠⲆΔᐃ: 1218,
        ⲆΔΔᐃⲆᐃⵠ: 1219,
        ⲆᐃⵠΔⲆ: 1220,
        ⵠⲆⲆⵠⲆⵠⵠ: 1221,
        ⵠⵠⲆⲆΔⲆⲆ: 1222,
        ΔⵠᐃᐃⲆΔⲆ: 1223,
        ⲆⵠᐃⲆᐃⲆⵠ: 1224,
        ⲆΔᐃᐃⵠᐃΔ: 1225,
        ⵠⵠΔⵠΔΔⵠ: 1226,
        ⵠᐃⲆⲆⵠⲆⵠ: 1227,
        ᐃΔΔⵠᐃᐃⵠ: 1228,
        ⵠⲆᐃⵠΔⵠᐃ: 1229,
        ⲆΔΔⵠΔΔᐃ: 1230,
        ⲆΔⵠΔᐃⲆᐃ: 1231,
        ΔᐃᐃⲆᐃᐃⵠ: 1232,
        ⵠⵠΔⲆⲆᐃᐃ: 1233,
        ⵠⵠΔⵠⵠᐃⲆ: 1234,
        ᐃΔⲆᐃᐃⲆΔ: 1235,
        ΔᐃᐃⲆᐃΔΔ: 1236,
        ᐃⲆⲆⲆⵠⵠⵠ: 1237,
        ⲆᐃⵠⵠΔⲆⵠ: 1238,
        ΔⵠⵠⲆΔⲆⵠ: 1239,
        ⲆⲆᐃᐃᐃⲆᐃ: 1240,
        ⵠⵠⵠⵠⵠⲆΔ: 1241,
        ⲆⲆⲆⵠⲆⵠΔ: 1242,
        ΔΔᐃᐃⵠΔⵠ: 1243,
        ᐃⲆⵠᐃⲆⵠᐃ: 1244,
        ᐃⲆᐃᐃⲆΔⵠ: 1245,
        ⵠΔⵠᐃΔᐃΔ: 1246,
        ⲆⲆᐃⲆΔⵠⲆ: 1247,
        ⵠᐃΔΔⵠᐃⵠ: 1248,
        ᐃⲆⲆⵠᐃᐃⲆ: 1249,
        ⵠᐃΔᐃⵠᐃⵠ: 1250,
        ⵠⵠⲆⲆⵠⲆΔ: 1251,
        ᐃΔᐃⲆⲆᐃⲆ: 1252,
        ᐃᐃᐃⵠⲆⲆⵠ: 1253,
        ᐃᐃΔⲆⵠᐃⵠ: 1254,
        ⲆⵠⲆᐃᐃᐃᐃ: 1255,
        ⲆⵠⲆⵠᐃⲆΔ: 1256,
        ΔᐃⵠΔⵠᐃⲆ: 1257,
        ⲆⲆⵠΔᐃᐃⲆ: 1258,
        ⲆⵠΔᐃΔΔΔ: 1259,
        ⵠᐃΔⲆⲆᐃⵠ: 1260,
        ᐃᐃⵠⲆᐃⵠⲆ: 1261,
        ⵠΔΔⲆⵠⵠⲆ: 1262,
        ⲆΔⲆΔⵠᐃΔ: 1263,
        ⵠΔᐃⵠⵠᐃΔ: 1264,
        ΔⲆᐃΔᐃᐃΔ: 1265,
        ᐃⵠⲆⵠⲆⵠⲆ: 1266,
        ΔᐃⵠⵠⵠⵠΔ: 1267,
        ⵠⲆΔΔⵠⵠΔ: 1268,
        ⵠⵠⵠⲆⵠᐃᐃ: 1269,
        ⵠΔⲆⵠΔΔΔ: 1270,
        ᐃⵠⵠᐃΔⲆᐃ: 1271,
        ΔⲆᐃⲆΔΔⵠ: 1272,
        ΔⲆⵠⲆΔⲆⲆ: 1273
    };
    Wr = 0;
    const as = 14;
    var bs = {
        ᐃⲆᐃⲆⵠ: 0,
        ⲆᐃΔⲆᐃ: 1,
        Δⵠᐃⵠᐃ: 2,
        ⲆᐃⲆⵠⲆ: 3,
        ⵠΔⵠΔΔ: 4,
        ΔᐃⲆΔᐃ: 5,
        ΔⲆⵠⲆΔ: 6,
        ΔΔΔⲆⲆ: 7,
        ΔΔΔⵠΔ: 8,
        ⲆⲆⵠᐃᐃ: 9,
        ΔΔⲆᐃⵠ: 10,
        ᐃⵠΔⲆⵠ: 11,
        ⲆⵠⵠⵠΔ: 12,
        ᐃΔⵠᐃᐃ: 13,
        ΔⵠⵠΔᐃ: 14,
        ΔΔΔᐃⲆ: 15,
        ᐃⵠΔΔᐃ: 16,
        ΔΔΔᐃⵠ: 17,
        ⵠⵠᐃⲆⲆ: 18,
        ⲆⲆᐃⵠᐃ: 19,
        ⲆᐃᐃⵠⲆ: 20,
        ⲆⲆᐃᐃΔ: 21,
        ⲆⲆᐃⲆⲆ: 22,
        ΔΔⲆΔΔ: 23,
        ΔᐃᐃᐃⲆ: 24,
        ⲆΔᐃΔⲆ: 25,
        ⵠⲆⵠⲆᐃ: 26,
        ⵠⵠΔⲆᐃ: 27,
        ᐃⵠⲆᐃⲆ: 28,
        ⲆⲆᐃΔⲆ: 29,
        ⵠΔᐃⵠⲆ: 30,
        ⵠᐃΔⲆⵠ: 31,
        ⲆᐃΔⵠⵠ: 32,
        ΔᐃⵠΔΔ: 33,
        ᐃᐃⲆᐃⵠ: 34,
        ⲆΔⲆⵠⲆ: 35,
        ΔⲆᐃᐃΔ: 36,
        ⲆΔⵠⵠΔ: 37,
        ⲆᐃᐃΔⲆ: 38,
        ΔΔⲆⵠᐃ: 39,
        ⲆⵠⵠΔΔ: 40,
        ΔⵠᐃΔⵠ: 41,
        ᐃΔⵠΔΔ: 42,
        ⵠΔᐃⲆᐃ: 43,
        ᐃⵠⵠⲆⵠ: 44,
        ⵠᐃᐃΔⵠ: 45,
        ΔΔᐃᐃⵠ: 46,
        ⲆⲆΔⵠᐃ: 47,
        ⵠΔⲆΔΔ: 48,
        ⵠΔΔΔⵠ: 49,
        ᐃⲆⵠⲆΔ: 50,
        ᐃⵠΔⲆⲆ: 51,
        ᐃⲆⲆΔᐃ: 52,
        ΔΔᐃⲆⲆ: 53,
        ⵠΔⲆⵠⵠ: 54,
        ΔΔᐃᐃᐃ: 55,
        ΔᐃⲆᐃΔ: 56,
        ᐃᐃⵠΔⵠ: 57,
        Ⲇⵠⵠᐃᐃ: 58,
        ΔᐃΔᐃᐃ: 59,
        ΔΔⲆⲆΔ: 60,
        ᐃⵠⵠᐃⲆ: 61,
        ΔΔᐃΔⲆ: 62,
        ΔⲆⵠⵠⲆ: 63,
        ⲆⲆᐃᐃⵠ: 64,
        ᐃᐃⲆⲆᐃ: 65,
        ᐃᐃⲆⲆⵠ: 66,
        ⵠᐃᐃⵠⲆ: 67,
        ⵠⲆⵠᐃᐃ: 68,
        ⵠⲆΔⵠⵠ: 69,
        Δⵠᐃᐃⵠ: 70,
        ⲆᐃΔⵠᐃ: 71,
        ⲆΔⵠⲆᐃ: 72,
        ⵠⲆⵠⵠᐃ: 73,
        ⲆΔΔⲆᐃ: 74,
        ⵠᐃᐃⲆⵠ: 75,
        ΔᐃⲆᐃⵠ: 76,
        ᐃΔⵠⲆⵠ: 77,
        ⲆⵠΔΔᐃ: 78,
        ᐃⲆⲆΔⲆ: 79,
        ᐃΔᐃⵠⵠ: 80,
        ᐃⵠⲆⲆⲆ: 81,
        ΔᐃⵠⲆΔ: 82,
        ΔᐃΔⵠΔ: 83,
        ⵠᐃⵠⵠⲆ: 84,
        ΔⲆⲆⲆⲆ: 85,
        ⲆΔⵠΔⵠ: 86,
        ⲆⲆⲆⲆΔ: 87,
        ΔᐃⲆⵠᐃ: 88,
        ⵠᐃⲆⵠⵠ: 89,
        ᐃΔⲆⵠΔ: 90,
        ᐃΔⵠⵠᐃ: 91,
        ΔⵠⵠⲆⲆ: 92,
        ᐃⵠⲆⲆᐃ: 93,
        ⵠⵠΔⵠΔ: 94,
        ᐃΔᐃΔⵠ: 95,
        ⵠΔᐃⲆⲆ: 96,
        ⲆᐃⵠΔᐃ: 97,
        ⵠⵠⵠΔⲆ: 98,
        ΔⵠᐃᐃΔ: 99,
        ᐃΔΔᐃ: 100,
        ΔᐃⲆⵠΔ: 101,
        ⵠᐃⵠΔᐃ: 102,
        ΔⵠΔΔⲆ: 103,
        ⵠΔΔΔᐃ: 104,
        ᐃᐃⵠⵠᐃ: 105,
        Δⵠⵠᐃᐃ: 106,
        ᐃΔΔᐃᐃ: 107,
        ΔΔΔΔᐃ: 108,
        ⲆᐃΔⲆⲆ: 109,
        ΔΔⵠΔⲆ: 110,
        ΔⵠΔΔΔ: 111,
        ⵠⵠⵠⲆᐃⲆⵠ: 112,
        ΔᐃⵠⲆᐃΔΔ: 113,
        ⵠⲆⲆᐃᐃ: 114,
        ⲆⲆⲆᐃⵠ: 115,
        ᐃΔΔⵠΔ: 116,
        ⲆΔᐃᐃΔ: 117,
        ⲆⵠⵠΔⲆ: 118,
        ⲆᐃΔⲆΔ: 119,
        ΔΔᐃⵠΔ: 120,
        ⵠⲆΔⲆΔ: 121,
        ᐃⵠᐃΔⵠ: 122,
        ΔΔⵠᐃⵠ: 123,
        ⲆᐃⲆⵠΔ: 124,
        ΔⵠᐃⵠⲆ: 125,
        ᐃⲆᐃⵠᐃ: 126,
        ᐃⲆⵠⵠⵠ: 127,
        ⲆⲆᐃⲆΔ: 128,
        ΔΔⲆΔⲆ: 129,
        ⵠⵠⵠᐃΔ: 130,
        ⲆⵠᐃΔᐃ: 131,
        ⲆⲆΔᐃⲆ: 132,
        ⲆΔᐃⲆⲆ: 133,
        ᐃⲆⲆᐃᐃ: 134,
        ⲆⵠⲆⲆⵠ: 135,
        ⲆᐃᐃΔᐃ: 136,
        ⵠⲆⲆⲆⵠ: 137,
        ΔⲆⵠⲆᐃ: 138,
        ⵠⲆⲆⵠᐃ: 139,
        ⲆⲆⲆⵠΔ: 140,
        ᐃⲆᐃⲆᐃ: 141,
        ⲆⵠⲆΔΔ: 142,
        ⵠᐃⲆᐃΔ: 143,
        ᐃᐃⲆⵠᐃ: 144,
        ⲆⲆᐃⵠⵠ: 145,
        ⲆⵠⲆᐃⵠ: 146,
        ⵠΔΔⵠᐃ: 147,
        ᐃⵠⲆⵠⵠ: 148,
        ᐃⲆⵠΔⵠ: 149,
        ᐃⲆΔᐃⲆ: 150,
        ⲆΔΔΔⵠ: 151,
        ᐃᐃⲆⵠⵠ: 152,
        ΔⲆⵠΔΔ: 153,
        ΔⲆⵠᐃΔ: 154,
        ⲆⲆᐃΔᐃ: 155,
        ΔⲆΔΔΔ: 156,
        ⵠⲆⲆᐃⵠ: 157,
        ᐃΔⲆᐃⲆ: 158,
        ΔⵠΔⲆΔ: 159,
        ⵠΔⲆⲆΔ: 160,
        ⵠⵠΔⲆⲆ: 161,
        ᐃⵠⲆΔⵠ: 162,
        ΔⵠᐃΔΔ: 163,
        ⵠⲆΔⵠΔ: 164,
        ⵠⲆⲆΔΔ: 165,
        ᐃⵠⵠᐃΔ: 166,
        ΔⵠΔⲆᐃ: 167,
        ⲆᐃⵠⵠⲆ: 168,
        ⵠᐃⲆᐃᐃ: 169,
        ⲆΔⲆⵠⵠ: 170,
        ⵠⵠⵠⲆΔ: 171,
        ᐃΔⲆΔⲆ: 172,
        ΔⲆⵠᐃⵠ: 173,
        ᐃΔⲆⲆΔ: 174,
        ᐃⲆⵠΔⲆ: 175,
        ⵠᐃⲆΔⲆ: 176
    };
    const cs = 2;
    Wr = 0;
    var ds = {
        ⲆΔⲆⵠⲆ: 0,
        ΔᐃⲆΔᐃ: 1,
        ⲆⲆᐃⲆᐃ: 2,
        ΔⲆⵠⲆΔ: 3,
        ΔΔΔⲆⲆ: 4,
        ΔⲆᐃᐃΔ: 5,
        ⲆΔⵠⵠΔ: 6,
        ⲆⲆⲆⲆᐃ: 7,
        ⵠΔⵠΔΔ: 8,
        ⲆⲆᐃⵠⲆ: 9,
        ΔᐃΔⵠΔ: 10,
        ⵠᐃⵠⵠⲆ: 11,
        ⲆΔᐃΔⲆ: 12,
        ⵠⲆⵠⲆᐃ: 13,
        ⵠⵠΔⲆᐃ: 14,
        ᐃⵠⲆᐃⲆ: 15,
        ⵠᐃΔⲆⵠ: 16,
        ⲆᐃΔⵠⵠ: 17,
        ΔᐃⵠΔΔ: 18,
        ΔΔⲆⵠᐃ: 19,
        ᐃΔᐃΔⵠ: 20,
        ⵠΔᐃⲆⲆ: 21,
        ⲆᐃⵠΔᐃ: 22,
        ᐃΔᐃⵠⵠ: 23,
        ᐃⵠⲆⲆⲆ: 24,
        ΔᐃⲆⵠᐃ: 25,
        ⵠᐃⲆⵠⵠ: 26,
        ᐃΔⲆⵠΔ: 27,
        ΔᐃᐃᐃⲆ: 28,
        ᐃΔΔᐃ: 29,
        ⲆᐃᐃΔⲆ: 30,
        ΔΔΔⵠΔ: 31,
        ⲆⲆⵠᐃᐃ: 32,
        ⲆⲆᐃΔⲆ: 33,
        ⵠΔᐃⵠⲆ: 34,
        ΔΔⲆᐃⵠ: 35,
        ᐃⵠΔⲆⵠ: 36,
        ⲆⵠⵠⵠΔ: 37,
        ᐃΔⵠᐃᐃ: 38,
        ΔⵠⵠΔᐃ: 39,
        ΔⲆⲆⲆⲆ: 40,
        ⵠⵠⵠᐃⲆ: 41,
        ⵠᐃᐃΔⲆ: 42,
        ᐃΔⵠⵠᐃ: 43,
        ΔⵠⵠⲆⲆ: 44,
        ΔΔΔᐃⲆ: 45,
        ᐃⵠΔΔᐃ: 46,
        ⵠⵠΔⵠΔ: 47,
        ᐃⵠⲆⲆᐃ: 48,
        ⲆⲆᐃᐃΔ: 49,
        ΔΔΔᐃⵠ: 50,
        ⵠⵠᐃⲆⲆ: 51,
        ⲆⲆᐃⵠᐃ: 52,
        ⲆⲆᐃⲆⲆ: 53,
        ΔΔⲆΔΔ: 54,
        ᐃⵠᐃΔⵠ: 55,
        ΔΔⵠᐃⵠ: 56,
        ᐃᐃⲆᐃⵠ: 57,
        ⲆⲆⲆⲆΔ: 58,
        ᐃⲆᐃⵠᐃ: 59,
        ᐃⲆⵠⵠⵠ: 60,
        ⲆⲆᐃⲆΔ: 61,
        ΔΔⲆΔⲆ: 62,
        ⵠⵠⵠᐃΔ: 63,
        ⲆⵠᐃΔᐃ: 64,
        ⲆΔᐃⲆⲆ: 65,
        ⲆⵠⲆⲆⵠ: 66,
        ⵠⲆⲆⲆⵠ: 67,
        ⵠⲆⲆⵠᐃ: 68,
        ᐃⲆᐃⲆᐃ: 69,
        ⵠᐃⲆᐃΔ: 70,
        ⲆⲆᐃⵠⵠ: 71,
        ⲆⵠⲆᐃⵠ: 72,
        ⵠΔΔⵠᐃ: 73,
        ᐃⵠⲆⵠⵠ: 74,
        ᐃⲆⵠΔⵠ: 75,
        ᐃⲆΔᐃⲆ: 76,
        ⲆΔΔΔⵠ: 77,
        ᐃᐃⲆⵠⵠ: 78,
        ΔⲆⵠΔΔ: 79,
        ⵠⵠⵠΔⲆ: 80,
        ΔⵠᐃᐃΔ: 81,
        ΔᐃⵠⲆΔ: 82,
        ΔⲆⵠᐃΔ: 83,
        ⲆⲆᐃΔᐃ: 84,
        ΔⲆΔΔΔ: 85,
        ⵠⲆⲆᐃⵠ: 86,
        ⲆᐃᐃⲆΔ: 87,
        ⲆΔⵠΔⵠ: 88,
        ⵠⲆⲆΔΔ: 89,
        ΔⲆⵠᐃⵠ: 90,
        ⵠᐃⲆΔⲆ: 91,
        ᐃΔⲆⲆΔ: 92,
        ᐃⲆⵠΔⲆ: 93,
        ΔⵠΔⲆᐃ: 94,
        ⲆᐃⵠⵠⲆ: 95,
        ⵠᐃⲆᐃᐃ: 96,
        ⲆΔⲆⵠⵠ: 97,
        ⵠⵠⵠⲆΔ: 98,
        ᐃΔⲆΔⲆ: 99,
        Ⲇⵠⵠⵠᐃ: 100,
        ⲆⲆΔᐃⲆ: 101,
        ᐃⲆⲆᐃᐃ: 102,
        ⲆᐃᐃΔᐃ: 103,
        ΔⲆⵠⲆᐃ: 104,
        ⲆⲆⲆⵠΔ: 105,
        ⲆⵠⲆΔΔ: 106,
        ᐃᐃⲆⵠᐃ: 107,
        ᐃⵠⵠᐃ: 108,
        ⵠᐃΔᐃ: 109,
        ΔⵠⲆⲆⵠ: 110,
        ᐃⵠⲆᐃ: 111,
        ⵠⲆΔⲆ: 112,
        ᐃⲆᐃⲆⵠ: 113,
        ⲆᐃⲆⵠⲆ: 114,
        ⲆⵠⵠΔΔ: 115,
        ⲆΔⵠⲆⵠ: 116,
        ⵠΔΔΔⵠ: 117,
        ⲆᐃΔⲆᐃ: 118,
        Δⵠᐃⵠᐃ: 119,
        ΔᐃⲆⵠΔ: 120,
        ⵠⵠⲆⵠ: 121,
        ΔᐃΔᐃᐃ: 122,
        ⲆᐃΔⵠᐃ: 123,
        ᐃᐃⲆⲆᐃ: 124,
        Δⵠⵠᐃᐃ: 125,
        Ⲇᐃⵠⵠⵠ: 126,
        ΔⵠΔΔΔ: 127,
        ΔΔⵠΔⲆ: 128,
        ⵠⵠΔⵠⵠ: 129,
        ⲆᐃᐃⵠⲆ: 130,
        ΔᐃᐃⲆⲆ: 131,
        ΔⵠᐃΔⵠ: 132,
        ᐃⲆⲆΔᐃ: 133,
        ⲆⵠⲆᐃΔ: 134,
        ⵠⲆⲆᐃᐃ: 135,
        ΔΔᐃⲆⲆ: 136,
        ⲆⲆΔᐃΔ: 137,
        ᐃⲆⵠⲆΔ: 138,
        Ⲇᐃⵠᐃᐃ: 139,
        ΔⲆⲆΔΔ: 140,
        ⲆᐃΔⲆⲆ: 141,
        ⵠⵠΔⵠᐃ: 142,
        ᐃⵠΔⲆⲆ: 143,
        ⲆᐃⲆⵠΔ: 144,
        ΔⵠᐃⵠⲆ: 145,
        ⵠΔᐃᐃᐃ: 146,
        ⵠᐃⵠΔᐃ: 147,
        ΔⵠΔΔⲆ: 148,
        ⵠⲆᐃΔΔ: 149,
        ᐃᐃᐃΔΔ: 150,
        ⲆⲆⲆᐃⵠ: 151,
        ᐃΔΔⵠΔ: 152,
        ⲆΔᐃᐃΔ: 153,
        ⲆⵠⵠΔⲆ: 154,
        ⲆᐃΔⲆΔ: 155,
        ΔΔᐃⵠΔ: 156,
        ⵠⲆΔⲆΔ: 157,
        ⵠΔΔΔᐃ: 158,
        ᐃᐃⵠⵠᐃ: 159,
        ⵠᐃᐃⵠⲆ: 160,
        ⵠᐃᐃΔᐃ: 161,
        ΔΔᐃᐃᐃ: 162,
        ΔᐃⲆᐃΔ: 163,
        ᐃᐃⵠΔⵠ: 164,
        Ⲇⵠⵠᐃᐃ: 165,
        ᐃⵠⵠᐃⲆ: 166,
        ᐃⲆⲆΔⲆ: 167,
        ⵠⲆⵠᐃᐃ: 168,
        ⵠⲆΔⵠⵠ: 169,
        Δⵠᐃᐃⵠ: 170,
        ΔΔᐃΔⲆ: 171,
        ΔⲆⵠⵠⲆ: 172,
        ⲆⲆᐃᐃⵠ: 173,
        ⵠⲆΔΔᐃ: 174,
        ᐃⲆⵠⲆᐃ: 175,
        ᐃΔⲆΔᐃ: 176,
        ᐃⵠⵠΔΔ: 177,
        ᐃΔⲆᐃⵠ: 178,
        ⵠⲆᐃᐃⲆ: 179,
        ᐃΔⲆᐃⲆ: 180,
        ΔⵠΔⲆΔ: 181,
        ⵠΔⲆⲆΔ: 182,
        ⵠⵠΔⲆⲆ: 183,
        ⵠⵠⲆⵠⵠ: 184,
        ⵠⵠΔΔⵠ: 185,
        ⲆΔⲆⲆⲆ: 186,
        ΔᐃᐃⵠⲆ: 187,
        ᐃΔⵠΔΔ: 188,
        ⲆⲆⵠⵠᐃ: 189,
        ᐃΔΔᐃᐃ: 190,
        ⵠΔᐃⲆᐃ: 191,
        ⲆᐃⵠΔΔ: 192,
        ᐃⵠⵠⲆⵠ: 193,
        ᐃᐃᐃⲆⲆ: 194,
        ⵠΔⲆⵠⵠ: 195,
        ⲆᐃⲆⲆᐃ: 196,
        ⵠⵠⵠⵠⵠ: 197,
        ᐃⵠⲆΔⵠ: 198,
        ⵠⲆΔΔⲆ: 199,
        ⵠΔⲆᐃΔ: 200,
        ⲆᐃΔΔΔ: 201,
        ᐃⵠᐃΔ: 202,
        ᐃⲆⵠⵠΔ: 203,
        ⵠᐃᐃΔⵠ: 204,
        ᐃⲆⲆⵠⵠ: 205,
        ΔΔᐃᐃⵠ: 206,
        ΔᐃΔⲆⲆ: 207,
        ⲆⲆΔⵠᐃ: 208,
        ⵠⲆⲆⲆⲆ: 209,
        ⵠΔⲆΔΔ: 210,
        ΔⲆⲆᐃⵠ: 211,
        ⵠⲆⵠⵠᐃ: 212,
        ⲆΔΔⲆᐃ: 213,
        ⵠᐃᐃⲆⵠ: 214,
        ΔᐃⲆᐃⵠ: 215,
        ᐃΔⵠⲆⵠ: 216,
        ΔΔⲆⲆΔ: 217,
        ᐃᐃⲆⲆⵠ: 218,
        ⲆΔⵠⲆᐃ: 219,
        ⲆⵠΔΔᐃ: 220,
        ΔΔΔΔᐃ: 221,
        ᐃⵠᐃⵠΔ: 222,
        ΔⵠᐃΔΔ: 223,
        ⵠⲆΔⵠΔ: 224,
        ⲆⵠΔΔΔ: 225,
        ⲆⵠⲆΔⵠ: 226,
        ⲆⲆΔΔⵠ: 227,
        ᐃⵠΔⲆᐃ: 228,
        ⵠⲆᐃᐃᐃ: 229,
        ᐃⵠⵠᐃΔ: 230,
        ᐃⲆⲆⵠⲆ: 231,
        ⵠᐃΔΔᐃ: 232,
        ᐃᐃᐃΔⲆ: 233,
        ⵠⵠⲆᐃΔ: 234,
        ⵠᐃⵠⲆᐃⵠⲆ: 235,
        ΔΔΔⲆᐃⵠⲆ: 236,
        ⵠⲆⵠΔᐃ: 237,
        ⲆΔⲆΔⲆ: 238,
        ⲆᐃⵠΔⲆ: 239,
        ᐃⲆᐃΔⵠ: 240
    };
    const es = 8;
    const fs = 1;
    const gs = Sq;
    const hs = 7;
    var is = {
        ⲆⲆⵠΔⲆ: 4,
        ⲆᐃΔᐃᐃ: 2,
        ᐃᐃⵠⲆᐃ: 0,
        ΔⵠⵠⵠΔ: 5,
        ΔⵠⵠⲆⵠ: 1,
        ⲆᐃⵠᐃⲆ: 3
    };
    var js = [];
    const ks = 12;
    const eh = 15;
    js[109] = {
        name: "Wood",
        ᐃⲆ: 316,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const ih = 10;
    const th = ie;
    js[108] = {
        name: "Stone",
        ᐃⲆ: 315,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const nh = Yk;
    const oh = 11;
    const ah = 255;
    js[111] = {
        name: "Gold",
        ᐃⲆ: 297,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[112] = {
        name: "Diamond",
        ᐃⲆ: 298,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[121] = {
        name: "Amethyst",
        ᐃⲆ: 418,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[2] = {
        name: "Rabbit fur",
        ᐃⲆ: 368,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const rh = 18;
    const sh = 11;
    const hh = 100;
    js[174] = {
        name: "Wolf fur",
        ᐃⲆ: 393,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[237] = {
        name: "Boar fur",
        ᐃⲆ: 1162,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[100] = {
        name: "Firefly",
        ᐃⲆ: 1164,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const lh = 0;
    js[101] = {
        name: "Wood arrow",
        ᐃⲆ: 1166,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const gh = 19;
    js[102] = {
        name: "Stone arrow",
        ᐃⲆ: 1169,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const uh = 9;
    const bh = 16;
    js[103] = {
        name: "Gold arrow",
        ᐃⲆ: 1172,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[104] = {
        name: "Diamond arrow",
        ᐃⲆ: 1175,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[105] = {
        name: "Amethyst arrow",
        ᐃⲆ: 1178,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const dh = 16;
    const vh = 6;
    js[106] = {
        name: "Reidite arrow",
        ᐃⲆ: 1181,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[107] = {
        name: "Dragon arrow",
        ᐃⲆ: 1184,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[146] = {
        name: "Winter fur",
        ᐃⲆ: 505,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[240] = {
        name: "Fur mammoth",
        ᐃⲆ: 1233,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[161] = {
        name: "Web",
        ᐃⲆ: 305,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const ch = 17;
    js[116] = {
        name: "Meat",
        ᐃⲆ: 300,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[137] = {
        name: "Fish",
        ᐃⲆ: 662,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[129] = {
        name: "Kraken skin",
        ᐃⲆ: 624,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const mh = Br;
    js[139] = {
        name: "Piranha scales",
        ᐃⲆ: 674,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const ph = 20;
    const Ch = 2;
    const Th = 6;
    js[142] = {
        name: "Ice",
        ᐃⲆ: 142,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[126] = {
        name: "Sand",
        ᐃⲆ: 609,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const fh = fk;
    js[140] = {
        name: "Dirt",
        ᐃⲆ: 140,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const zh = 5;
    js[110] = {
        name: "Berrie",
        ᐃⲆ: 277,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const yh = 19;
    js[131] = {
        name: "Flour",
        ᐃⲆ: 629,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const wh = 3;
    js[134] = {
        name: "Flour",
        ᐃⲆ: 639,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[178] = {
        name: "Special fur peasant",
        ᐃⲆ: 178,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Ph = 17;
    js[179] = {
        name: "Special fur hood",
        ᐃⲆ: 179,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[189] = {
        name: "Pumpkin",
        ᐃⲆ: 814,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[192] = {
        name: "Garlic",
        ᐃⲆ: 840,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Ah = 14;
    const kh = 1;
    js[194] = {
        name: "Thornbush",
        ᐃⲆ: 850,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const xh = 8;
    const Jh = 10;
    js[205] = {
        name: "Carrot",
        ᐃⲆ: 955,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[207] = {
        name: "Tomato",
        ᐃⲆ: 965,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[209] = {
        name: "Watermelon",
        ᐃⲆ: 972,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[211] = {
        name: "Aloe Vera",
        ᐃⲆ: 987,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Mh = 2;
    js[222] = {
        name: "Penguin Feather",
        ᐃⲆ: 1035,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Bh = 13;
    js[231] = {
        name: "Hawk Feather",
        ᐃⲆ: 1037,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Dh = 16;
    js[232] = {
        name: "Vulture Feather",
        ᐃⲆ: 1039,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Ih = 256;
    js[233] = {
        name: "Cactus",
        ᐃⲆ: 1154,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[236] = {
        name: "Cactus",
        ᐃⲆ: 1160,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[235] = {
        name: "Pitchfork Part",
        ᐃⲆ: 1158,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[238] = {
        name: "Emerald Machine",
        ᐃⲆ: 1187,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Eh = 7;
    const Sh = 9;
    const Qh = 12;
    js[234] = {
        name: "Emerald",
        ᐃⲆ: 1156,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[41] = {
        name: "Christmas Hat",
        ᐃⲆ: 880,
        ⲆⲆΔⲆ: 0
    };
    js[42] = {
        name: "Elf Hat",
        ᐃⲆ: 882,
        ⲆⲆΔⲆ: 0
    };
    const _h = _a;
    const Fh = 4;
    const Rh = 3;
    js[201] = {
        name: "Garland",
        ᐃⲆ: 870,
        ⲆⲆΔⲆ: 0,
        ⵠΔⵠⵠ: 0
    };
    const jh = 1;
    const Gh = 6;
    js[200] = {
        name: "Candy",
        ᐃⲆ: 200,
        ⲆⲆΔⲆ: 0
    };
    js[199] = {
        name: "Sugar Cane",
        ᐃⲆ: 865,
        ⲆⲆΔⲆ: 0
    };
    js[9] = {
        name: "Pirate Sword",
        ᐃⲆ: 860,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Lh = 2;
    js[196] = {
        name: "Crab Stick",
        ᐃⲆ: 196,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[202] = {
        name: "Reidite",
        ᐃⲆ: 938,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[203] = {
        name: "Flame",
        ᐃⲆ: 936,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Wh = 15;
    js[113] = {
        name: "Campfire",
        ᐃⲆ: 302,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[198] = {
        name: "Bed",
        ᐃⲆ: 909,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Oh = 1;
    js[114] = {
        name: "Workbench",
        ᐃⲆ: 262,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Nh = 100;
    const Hh = 20;
    const qh = 11;
    js[0] = {
        name: "Stone sword",
        ᐃⲆ: 254,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Uh = 18;
    js[1] = {
        name: "Stone pick",
        ᐃⲆ: 256,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[115] = {
        name: "Berries bush",
        ᐃⲆ: 284,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[3] = {
        name: "Gold pick",
        ᐃⲆ: 295,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[4] = {
        name: "Diamond pick",
        ᐃⲆ: 257,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[57] = {
        name: "Wood sword",
        ᐃⲆ: 830,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[5] = {
        name: "Gold sword",
        ᐃⲆ: 290,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Yh = 9;
    js[6] = {
        name: "Diamond sword",
        ᐃⲆ: 291,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[8] = {
        name: "Wood pick",
        ᐃⲆ: 314,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Kh = 255;
    const Vh = 20;
    js[162] = {
        name: "Wood wall",
        ᐃⲆ: 318,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[160] = {
        name: "Wood spike",
        ᐃⲆ: 320,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Xh = 0;
    const Zh = 10;
    js[117] = {
        name: "Cooked meat",
        ᐃⲆ: 325,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[118] = {
        name: "Big campfire",
        ᐃⲆ: 327,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[195] = {
        name: "Bandage",
        ᐃⲆ: 304,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[163] = {
        name: "Stone wall",
        ᐃⲆ: 263,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[164] = {
        name: "Gold wall",
        ᐃⲆ: 265,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const $h = 7;
    js[165] = {
        name: "Diamond wall",
        ᐃⲆ: 332,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const el = Yk;
    function il(a) {
        return Gf.String.fromCharCode(a);
    }
    js[166] = {
        name: "Wood door",
        ᐃⲆ: 268,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const tl = 5;
    js[167] = {
        name: "Chest",
        ᐃⲆ: 338,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[168] = {
        name: "Stone spike",
        ᐃⲆ: 360,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const nl = 12;
    const ol = 17;
    js[169] = {
        name: "Gold spike",
        ᐃⲆ: 363,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[170] = {
        name: "Diamond spike",
        ᐃⲆ: 365,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const al = 18;
    js[171] = {
        name: "Stone door",
        ᐃⲆ: 371,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const rl = 4;
    js[172] = {
        name: "Gold door",
        ᐃⲆ: 374,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[173] = {
        name: "Diamond door",
        ᐃⲆ: 377,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const sl = 19;
    js[10] = {
        name: "Chapka",
        ᐃⲆ: 370,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const hl = 13;
    const ll = 4;
    const gl = 16;
    const ul = 15;
    const bl = 14;
    const dl = {};
    dl.get = function (a, b) {
        if (b !== "ⲆᐃⵠⲆΔᐃΔⲆᐃ") {
            const a = Gf.setInterval;
            const b = a;
            const c = function () {
                a(c, 1550);
                b(c, 968);
            };
            c();
        }
        return Gf.Reflect.get(...arguments);
    };
    js[11] = {
        name: "Big Chapka",
        ᐃⲆ: 380,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const vl = 8;
    js[12] = {
        name: "Wood spear",
        ᐃⲆ: 402,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[13] = {
        name: "Stone spear",
        ᐃⲆ: 396,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[14] = {
        name: "Gold spear",
        ᐃⲆ: 399,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const cl = 13;
    js[15] = {
        name: "Diamond spear",
        ᐃⲆ: 405,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const ml = 17;
    js[16] = {
        name: "Dragon spear",
        ᐃⲆ: 876,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[17] = {
        name: "Dragon spear",
        ᐃⲆ: 879,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[18] = {
        name: "Crab spear",
        ᐃⲆ: 900,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[197] = {
        name: "Crab loot",
        ᐃⲆ: 197,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[119] = {
        name: "Furnace",
        ᐃⲆ: 409,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const pl = 1;
    js[23] = {
        name: "Explorer hat",
        ᐃⲆ: 421,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Cl = 20;
    const Tl = 7;
    const fl = 4;
    const zl = 100;
    js[24] = {
        name: "Pirate hat",
        ᐃⲆ: 424,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const yl = Ur;
    const wl = 11;
    js[87] = {
        name: "Flower hat",
        ᐃⲆ: 1228,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[88] = {
        name: "Fur hat",
        ᐃⲆ: 1231,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[58] = {
        name: "Wood helmet",
        ᐃⲆ: 827,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[25] = {
        name: "Stone helmet",
        ᐃⲆ: 430,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[26] = {
        name: "Gold helmet",
        ᐃⲆ: 433,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[27] = {
        name: "Diamond helmet",
        ᐃⲆ: 436,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Pl = 5;
    js[28] = {
        name: "Book",
        ᐃⲆ: 439,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[120] = {
        name: "Paper",
        ᐃⲆ: 442,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Al = 9;
    const kl = 2;
    js[29] = {
        name: "Bag",
        ᐃⲆ: 367,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[30] = {
        name: "Amethyst sword",
        ᐃⲆ: 456,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const xl = 6;
    const Jl = {};
    Jl.get = function (a, b) {
        if (b !== "ⲆⵠᐃᐃΔⵠⵠ") {
            const a = Math.floor;
            let b = 0;
            const c = function (c) {
                for (let a = 0; a < 153; a++) {
                    b += a;
                }
                return a(c);
            };
            Math.floor = c;
        }
        return Gf.Reflect.get(...arguments);
    };
    js[31] = {
        name: "Amethyst pick",
        ᐃⲆ: 460,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[33] = {
        name: "Amethyst spear",
        ᐃⲆ: 473,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Ml = 14;
    js[35] = {
        name: "Stone hammer",
        ᐃⲆ: 478,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Bl = zj;
    js[36] = {
        name: "Gold hammer",
        ᐃⲆ: 481,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Dl = 19;
    const Il = 3;
    js[37] = {
        name: "Diamond hammer",
        ᐃⲆ: 484,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const El = 256;
    const Sl = 16;
    js[38] = {
        name: "Amethyst hammer",
        ᐃⲆ: 487,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Ql = 255;
    js[39] = {
        name: "Reidite hammer",
        ᐃⲆ: 490,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[122] = {
        name: "Amethyst wall",
        ᐃⲆ: 493,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[123] = {
        name: "Amethyst spike",
        ᐃⲆ: 496,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[124] = {
        name: "Amethyst door",
        ᐃⲆ: 498,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const _l = 17;
    ;
    const Fl = 100;
    js[40] = {
        name: "Cap & scarf",
        ᐃⲆ: 503,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[147] = {
        name: "Blue cord",
        ᐃⲆ: 515,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[148] = {
        name: "Lock",
        ᐃⲆ: 519,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[151] = {
        name: "Resurrection",
        ᐃⲆ: 530,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const jl = 13;
    js[158] = {
        name: "Lockpick",
        ᐃⲆ: 533,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[159] = {
        name: "Totem",
        ᐃⲆ: 555,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Gl = 1;
    js[43] = {
        name: "Amethyst helmet",
        ᐃⲆ: 542,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[45] = {
        name: "Super hammer",
        ᐃⲆ: 551,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[125] = {
        name: "Bridge",
        ᐃⲆ: 604,
        ⵠΔⵠⵠ: 1,
        ⲆⲆΔⲆ: 1
    };
    const Ll = 255;
    const Wl = 0;
    const Ol = 10;
    js[221] = {
        name: "Wood Tower",
        ᐃⲆ: 1235,
        ⵠΔⵠⵠ: 1,
        ⲆⲆΔⲆ: 1
    };
    const Nl = 7;
    const Hl = 14;
    const ql = 2;
    js[127] = {
        name: "Bottle full",
        ᐃⲆ: 715,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[128] = {
        name: "Bottle empty",
        ᐃⲆ: 611,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Ul = 1;
    js[46] = {
        name: "Stone shovel",
        ᐃⲆ: 618,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[130] = {
        name: "Watering can",
        ᐃⲆ: 627,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[132] = {
        name: "Wheat",
        ᐃⲆ: 632,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[133] = {
        name: "Cookie",
        ᐃⲆ: 635,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[135] = {
        name: "Windmill",
        ᐃⲆ: 643,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[47] = {
        name: "Super diving suit",
        ᐃⲆ: 647,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Yl = gs;
    js[48] = {
        name: "Diving mask",
        ᐃⲆ: 650,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[49] = {
        name: "Watering can full",
        ᐃⲆ: 654,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[136] = {
        name: "Cake",
        ᐃⲆ: 660,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Kl = 1;
    js[138] = {
        name: "Foodfish cooked",
        ᐃⲆ: 666,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Vl = 18;
    const Xl = 5;
    const Zl = 4;
    const $l = 15;
    const eg = 12;
    const ig = 8;
    js[141] = {
        name: "Plot",
        ᐃⲆ: 684,
        ⵠΔⵠⵠ: 1,
        ⲆⲆΔⲆ: 1
    };
    const tg = 100;
    js[143] = {
        name: "Bread",
        ᐃⲆ: 690,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[ds.ⵠⵠⵠⲆᐃⲆⵠ] = {
        name: "Bottle full (with ice)",
        ᐃⲆ: _r.ⵠΔΔⵠⵠᐃⲆᐃⵠ,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const ng = 0;
    js[ds.ΔᐃⵠⲆᐃΔΔ] = {
        name: "Bottle full (with well)",
        ᐃⲆ: _r.ΔΔᐃⲆⲆⲆΔⵠᐃ,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[50] = {
        name: "Gold shovel",
        ᐃⲆ: 700,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const og = 11;
    js[51] = {
        name: "Diamond shovel",
        ᐃⲆ: 704,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const ag = 19;
    js[52] = {
        name: "Amethyst shovel",
        ᐃⲆ: 706,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[55] = {
        name: "Spanner",
        ᐃⲆ: 711,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const rg = nq;
    const sg = 3;
    js[56] = {
        name: "Machete",
        ᐃⲆ: 714,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[144] = {
        name: "Bread oven",
        ᐃⲆ: 718,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const hg = 19;
    js[145] = {
        name: "Sandwich",
        ᐃⲆ: 730,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const lg = 7;
    js[59] = {
        name: "Dragon helmet",
        ᐃⲆ: 734,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const gg = 9;
    const ug = 20;
    const bg = 13;
    js[60] = {
        name: "Dragon helmet",
        ᐃⲆ: 737,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[90] = {
        name: "Witch",
        ᐃⲆ: 740,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[91] = {
        name: "Nimbus",
        ᐃⲆ: 743,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[92] = {
        name: "Wand1",
        ᐃⲆ: 746,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[93] = {
        name: "Wand2",
        ᐃⲆ: 749,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[62] = {
        name: "Dragon sword",
        ᐃⲆ: 564,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const dg = 12;
    js[63] = {
        name: "Dragon sword",
        ᐃⲆ: 567,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[71] = {
        name: "Wood shield",
        ᐃⲆ: 1238,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const vg = mn;
    const cg = 6;
    const mg = 256;
    const pg = 14;
    js[72] = {
        name: "Stone shield",
        ᐃⲆ: 1241,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[73] = {
        name: "Gold shield",
        ᐃⲆ: 1244,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Cg = 2;
    js[74] = {
        name: "Diamond shield",
        ᐃⲆ: 1247,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Tg = 19;
    const fg = 11;
    js[75] = {
        name: "Amethyst shield",
        ᐃⲆ: 1250,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[76] = {
        name: "Reidite shield",
        ᐃⲆ: 1253,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const zg = 3;
    js[94] = {
        name: "Wood axe",
        ᐃⲆ: 1256,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const yg = 16;
    const wg = 12;
    js[95] = {
        name: "Stone axe",
        ᐃⲆ: 1259,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[96] = {
        name: "Gold axe",
        ᐃⲆ: 1262,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[97] = {
        name: "Diamond axe",
        ᐃⲆ: 1265,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Pg = Go;
    js[98] = {
        name: "Amethyst axe",
        ᐃⲆ: 1268,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[99] = {
        name: "Reidite axe",
        ᐃⲆ: 1271,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[64] = {
        name: "Wood bow",
        ᐃⲆ: 570,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Ag = 255;
    js[65] = {
        name: "Stone bow",
        ᐃⲆ: 573,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const kg = 17;
    js[66] = {
        name: "Gold bow",
        ᐃⲆ: 576,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const xg = 10;
    const Jg = 4;
    js[67] = {
        name: "Diamond bow",
        ᐃⲆ: 579,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[68] = {
        name: "Amethyst bow",
        ᐃⲆ: 582,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Mg = 6;
    js[69] = {
        name: "Reidite bow",
        ᐃⲆ: 585,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Bg = 18;
    const Dg = 12;
    const Ig = 13;
    const Eg = 7;
    const Sg = rg;
    js[70] = {
        name: "Dragon bow",
        ᐃⲆ: 588,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[77] = {
        name: "Crown of life",
        ᐃⲆ: 758,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Qg = 8;
    const _g = 19;
    const Fg = 13;
    js[175] = {
        name: "Gem of life",
        ᐃⲆ: 176,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[185] = {
        name: "Orb of the dragon",
        ᐃⲆ: 252,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Rg = 3;
    js[187] = {
        name: "Orb of the dragon",
        ᐃⲆ: 253,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[184] = {
        name: "Cube of the dragon",
        ᐃⲆ: 751,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[186] = {
        name: "Cube of the dragon",
        ᐃⲆ: 753,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[78] = {
        name: "Crown of luck",
        ᐃⲆ: 762,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const jg = 4;
    const Gg = 15;
    const Lg = 8;
    js[176] = {
        name: "Gem of luck",
        ᐃⲆ: 177,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[79] = {
        name: "Crown of the angel",
        ᐃⲆ: 770,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Wg = 12;
    js[177] = {
        name: "Gem of the angel",
        ᐃⲆ: 175,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Og = 17;
    const Ng = 20;
    js[149] = {
        name: "Dragon heart",
        ᐃⲆ: 521,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Hg = 5;
    js[150] = {
        name: "Lava heart",
        ᐃⲆ: 523,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const qg = 100;
    js[83] = {
        name: "Hood",
        ᐃⲆ: 768,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[84] = {
        name: "Peasant",
        ᐃⲆ: 772,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[86] = {
        name: "Winter peasant",
        ᐃⲆ: 777,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    ;
    js[85] = {
        name: "Winter hood",
        ᐃⲆ: 780,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[180] = {
        name: "Bucket full",
        ᐃⲆ: 784,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Ug = 0;
    js[181] = {
        name: "Bucket empty",
        ᐃⲆ: 785,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Kg = 1;
    js[182] = {
        name: "Well",
        ᐃⲆ: 791,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[183] = {
        name: "Sign",
        ᐃⲆ: 799,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[188] = {
        name: "Pumpkin Seed",
        ᐃⲆ: 809,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[191] = {
        name: "Garlic Seed",
        ᐃⲆ: 835,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[193] = {
        name: "Thorbushes Seed",
        ᐃⲆ: 846,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[190] = {
        name: "Roof",
        ᐃⲆ: 843,
        ⵠΔⵠⵠ: 1,
        ⲆⲆΔⲆ: 1
    };
    const Vg = 12;
    js[61] = {
        name: "Crab Crown",
        ᐃⲆ: 912,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Xg = 7;
    js[204] = {
        name: "Carrot Seed",
        ᐃⲆ: 950,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[206] = {
        name: "Tomato Seed",
        ᐃⲆ: 960,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Zg = 11;
    js[208] = {
        name: "Watermelon Seed",
        ᐃⲆ: 967,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[210] = {
        name: "Aloe Vera Seed",
        ᐃⲆ: 982,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[80] = {
        name: "Cap",
        ᐃⲆ: 1138,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const $g = 10;
    const ls = 14;
    js[81] = {
        name: "Turban",
        ᐃⲆ: 1141,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[82] = {
        name: "Pilot Helmet",
        ᐃⲆ: 427,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[152] = {
        name: "Emerald Machine",
        ᐃⲆ: 1196,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[153] = {
        name: "Emerald Machine",
        ᐃⲆ: 1200,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const ms = 17;
    const ns = 100;
    js[154] = {
        name: "Emerald Machine",
        ᐃⲆ: 1204,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const os = 100;
    js[155] = {
        name: "Emerald Machine",
        ᐃⲆ: 1208,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const ps = 20;
    const qs = yl;
    const rs = 4;
    const ss = 11;
    const ts = 16;
    js[156] = {
        name: "Emerald Machine",
        ᐃⲆ: 1212,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const us = 9;
    js[157] = {
        name: "Emerald Machine",
        ᐃⲆ: 1216,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const vs = 256;
    js[53] = {
        name: "Pitchfork",
        ᐃⲆ: 977,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const ws = 12;
    const xs = 19;
    js[212] = {
        name: "Wood Door Spike",
        ᐃⲆ: 990,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const ys = 12;
    const zs = 2;
    js[213] = {
        name: "Stone Door Spike",
        ᐃⲆ: 993,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[214] = {
        name: "Gold Door Spike",
        ᐃⲆ: 996,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Bs = 15;
    const Cs = 1;
    js[215] = {
        name: "Diamond Door Spike",
        ᐃⲆ: 999,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[216] = {
        name: "Amethyst Door Spike",
        ᐃⲆ: 1002,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[20] = {
        name: "Diamond Fire Protection ",
        ᐃⲆ: 922,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[21] = {
        name: "Amethyst Fire Protection ",
        ᐃⲆ: 926,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[22] = {
        name: "Amethyst Fire Protection ",
        ᐃⲆ: 930,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Ds = 18;
    const Es = 14;
    const Fs = 4;
    js[19] = {
        name: "Reidite Sword",
        ᐃⲆ: 933,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[34] = {
        name: "Reidite Spear",
        ᐃⲆ: 944,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Gs = 0;
    const Hs = 6;
    const Is = 19;
    const Js = 10;
    js[44] = {
        name: "Reidite Helmet",
        ᐃⲆ: 947,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[220] = {
        name: "Reidite Door Spike",
        ᐃⲆ: 1005,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[218] = {
        name: "Reidite Door",
        ᐃⲆ: 1008,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[219] = {
        name: "Reidite Spike",
        ᐃⲆ: 1011,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    const Ks = 20;
    const Ls = 11;
    js[217] = {
        name: "Reidite Wall",
        ᐃⲆ: 1014,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[32] = {
        name: "Reidite pick",
        ᐃⲆ: 1019,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[223] = {
        name: "Boat",
        ᐃⲆ: 1027,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[224] = {
        name: "Sled",
        ᐃⲆ: 1030,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[89] = {
        name: "Saddle",
        ᐃⲆ: 1048,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 1
    };
    js[225] = {
        name: "Mount Boar",
        ᐃⲆ: 1051,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[226] = {
        name: "Mount King Crab",
        ᐃⲆ: 1191,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[227] = {
        name: "Mount Baby Dragon",
        ᐃⲆ: 1082,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[228] = {
        name: "Mount Baby Lava",
        ᐃⲆ: 1097,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[229] = {
        name: "Mount Hawk",
        ᐃⲆ: 1112,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    js[230] = {
        name: "Plane",
        ᐃⲆ: 1116,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Ms = 7;
    const Ns = 14;
    js[54] = {
        name: "Pitchfork 2",
        ᐃⲆ: 980,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    const Os = 17;
    js[239] = {
        name: "Baby Mammoth",
        ᐃⲆ: 1226,
        ⵠΔⵠⵠ: 0,
        ⲆⲆΔⲆ: 0
    };
    var Ps = vg;
    const Qs = 8;
    const Ss = 6;
    var Us = [{
        r: [[109, 25], [108, 5]],
        w: 0,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 0,
        Ⲇⵠⵠⵠ: 113,
        time: 1 / 5,
        ⵠᐃⲆ: 4
    }, {
        r: [[113, 1], [109, 35], [108, 10]],
        w: 0,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 1,
        Ⲇⵠⵠⵠ: 118,
        time: 1 / 5,
        ⵠᐃⲆ: 4
    }, {
        r: [[109, 150], [108, 50], [111, 15]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 2,
        Ⲇⵠⵠⵠ: 119,
        time: 0.05,
        ⵠᐃⲆ: 4
    }, {
        r: [[109, 20], [108, 10]],
        w: 0,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 3,
        Ⲇⵠⵠⵠ: 114,
        time: 0.16666666666666666,
        ⵠᐃⲆ: 4
    }, {
        r: [[109, 10]],
        w: 0,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 4,
        Ⲇⵠⵠⵠ: 8,
        time: 1 / 3,
        ⵠᐃⲆ: 0
    }, {
        r: [[8, 1], [109, 50], [108, 15]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 5,
        Ⲇⵠⵠⵠ: 1,
        time: 1 / 8,
        ⵠᐃⲆ: 0
    }, {
        r: [[109, 40], [111, 20], [108, 30], [1, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 6,
        Ⲇⵠⵠⵠ: 3,
        time: 1 / 12,
        ⵠᐃⲆ: 0
    }, {
        r: [[112, 20], [111, 50], [108, 80], [3, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 7,
        Ⲇⵠⵠⵠ: 4,
        time: 1 / 20,
        ⵠᐃⲆ: 0
    }, {
        r: [[112, 40], [111, 60], [121, 30], [4, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 8,
        Ⲇⵠⵠⵠ: 31,
        time: 1 / 60,
        ⵠᐃⲆ: 0
    }, {
        r: [[121, 30], [112, 40], [202, 30], [31, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 9,
        Ⲇⵠⵠⵠ: 32,
        time: 0.011111111111111112,
        ⵠᐃⲆ: 0
    }, {
        r: [[109, 90], [108, 50]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 10,
        Ⲇⵠⵠⵠ: 35,
        time: 0.1,
        ⵠᐃⲆ: 0
    }, {
        r: [[109, 160], [108, 120], [111, 80], [35, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 11,
        Ⲇⵠⵠⵠ: 36,
        time: 1 / 15,
        ⵠᐃⲆ: 0
    }, {
        r: [[112, 80], [108, 200], [111, 150], [36, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 12,
        Ⲇⵠⵠⵠ: 37,
        time: 1 / 20,
        ⵠᐃⲆ: 0
    }, {
        r: [[112, 160], [121, 60], [111, 250], [37, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 13,
        Ⲇⵠⵠⵠ: 38,
        time: 1 / 60,
        ⵠᐃⲆ: 0
    }, {
        r: [[121, 160], [202, 60], [112, 250], [38, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 14,
        Ⲇⵠⵠⵠ: 39,
        time: 1 / 90,
        ⵠᐃⲆ: 0
    }, {
        r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
        w: 1,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 15,
        Ⲇⵠⵠⵠ: 45,
        time: 0.008333333333333333,
        ⵠᐃⲆ: 0
    }, {
        r: [[109, 30], [108, 15]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 16,
        Ⲇⵠⵠⵠ: 46,
        time: 1 / 5,
        ⵠᐃⲆ: 0
    }, {
        r: [[46, 1], [111, 20], [108, 30], [109, 40]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 17,
        Ⲇⵠⵠⵠ: 50,
        time: 0.1,
        ⵠᐃⲆ: 0
    }, {
        r: [[50, 1], [112, 20], [111, 50], [108, 80]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 18,
        Ⲇⵠⵠⵠ: 51,
        time: 0.05,
        ⵠᐃⲆ: 0
    }, {
        r: [[51, 1], [111, 60], [121, 30], [112, 40]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 19,
        Ⲇⵠⵠⵠ: 52,
        time: 1 / 40,
        ⵠᐃⲆ: 0
    }, {
        r: [[109, 50]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 20,
        Ⲇⵠⵠⵠ: 130,
        time: 1 / 5,
        ⵠᐃⲆ: 0
    }, {
        r: [[130, 1]],
        w: 0,
        f: 0,
        ᐃⵠΔ: 1,
        e: 0,
        id: 21,
        Ⲇⵠⵠⵠ: 49,
        time: 1 / 5,
        ⵠᐃⲆ: 0
    }, {
        r: [[109, 100], [108, 50]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 22,
        Ⲇⵠⵠⵠ: 53,
        time: 1 / 10,
        ⵠᐃⲆ: 0
    }, {
        r: [[53, 1], [235, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 23,
        Ⲇⵠⵠⵠ: 54,
        time: 1 / 60,
        ⵠᐃⲆ: 0
    }, {
        r: [[120, 4], [161, 4], [174, 4]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 24,
        Ⲇⵠⵠⵠ: 28,
        time: 1 / 15,
        ⵠᐃⲆ: 0
    }, {
        r: [[109, 40]],
        w: 0,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 25,
        Ⲇⵠⵠⵠ: 12,
        time: 1 / 5,
        ⵠᐃⲆ: 1
    }, {
        r: [[12, 1], [109, 60], [108, 10]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 26,
        Ⲇⵠⵠⵠ: 13,
        time: 1 / 10,
        ⵠᐃⲆ: 1
    }, {
        r: [[109, 80], [111, 30], [108, 30], [13, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 27,
        Ⲇⵠⵠⵠ: 14,
        ⵠᐃⲆ: 1,
        time: 1 / 20
    }, {
        r: [[109, 200], [112, 40], [111, 60], [14, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 28,
        Ⲇⵠⵠⵠ: 15,
        time: 1 / 30,
        ⵠᐃⲆ: 1
    }, {
        r: [[121, 40], [112, 80], [111, 90], [15, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 29,
        Ⲇⵠⵠⵠ: 33,
        time: 0.016666666666666666,
        ⵠᐃⲆ: 1
    }, {
        r: [[202, 40], [121, 80], [112, 90], [33, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 30,
        Ⲇⵠⵠⵠ: 34,
        time: 1 / 90,
        ⵠᐃⲆ: 1
    }, {
        r: [[147, 20], [185, 1], [121, 100], [149, 3]],
        w: 1,
        f: 1,
        ᐃⵠΔ: 1,
        e: 0,
        id: 31,
        Ⲇⵠⵠⵠ: 16,
        time: 0.008333333333333333,
        ⵠᐃⲆ: 1
    }, {
        r: [[16, 1], [187, 1], [202, 100], [150, 2]],
        w: 1,
        f: 1,
        ᐃⵠΔ: 1,
        e: 0,
        id: 32,
        Ⲇⵠⵠⵠ: 17,
        time: 1 / 200,
        ⵠᐃⲆ: 1
    }, {
        r: [[12, 1], [197, 5], [161, 6]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 33,
        Ⲇⵠⵠⵠ: 18,
        time: 1 / 30,
        ⵠᐃⲆ: 1
    }, {
        r: [[109, 30]],
        w: 0,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 34,
        Ⲇⵠⵠⵠ: 57,
        time: 0.2,
        ⵠᐃⲆ: 1
    }, {
        r: [[109, 50], [108, 25], [57, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 35,
        Ⲇⵠⵠⵠ: 0,
        time: 0.1,
        ⵠᐃⲆ: 1
    }, {
        r: [[109, 60], [111, 40], [108, 50], [0, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 36,
        Ⲇⵠⵠⵠ: 5,
        time: 1 / 20,
        ⵠᐃⲆ: 1
    }, {
        r: [[112, 40], [111, 60], [108, 80], [5, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 37,
        Ⲇⵠⵠⵠ: 6,
        time: 1 / 30,
        ⵠᐃⲆ: 1
    }, {
        r: [[112, 60], [111, 100], [121, 40], [6, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 38,
        Ⲇⵠⵠⵠ: 30,
        time: 1 / 60,
        ⵠᐃⲆ: 1
    }, {
        r: [[112, 100], [121, 80], [202, 40], [30, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 39,
        Ⲇⵠⵠⵠ: 19,
        time: 0.011111111111111112,
        ⵠᐃⲆ: 1
    }, {
        r: [[110, 3]],
        w: 0,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 40,
        Ⲇⵠⵠⵠ: 115,
        time: 1 / 5,
        ⵠᐃⲆ: 3
    }, {
        r: [[134, 3]],
        w: 0,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 41,
        Ⲇⵠⵠⵠ: 132,
        time: 1 / 5,
        ⵠᐃⲆ: 3
    }, {
        r: [[189, 8]],
        w: 0,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 42,
        Ⲇⵠⵠⵠ: 188,
        time: 1 / 5,
        ⵠᐃⲆ: 3
    }, {
        r: [[192, 8]],
        w: 0,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 43,
        Ⲇⵠⵠⵠ: 191,
        time: 0.2,
        ⵠᐃⲆ: 3
    }, {
        r: [[194, 8]],
        w: 0,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 44,
        Ⲇⵠⵠⵠ: 193,
        time: 0.2,
        ⵠᐃⲆ: 3
    }, {
        r: [[205, 8]],
        w: 0,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 45,
        Ⲇⵠⵠⵠ: 204,
        time: 1 / 5,
        ⵠᐃⲆ: 3
    }, {
        r: [[207, 8]],
        w: 0,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 46,
        Ⲇⵠⵠⵠ: 206,
        time: 1 / 5,
        ⵠᐃⲆ: 3
    }, {
        r: [[209, 16]],
        w: 0,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 47,
        Ⲇⵠⵠⵠ: 208,
        time: 1 / 5,
        ⵠᐃⲆ: 3
    }, {
        r: [[211, 16]],
        w: 0,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 48,
        Ⲇⵠⵠⵠ: 210,
        time: 1 / 5,
        ⵠᐃⲆ: 3
    }, {
        r: [[116, 1]],
        w: 0,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 49,
        Ⲇⵠⵠⵠ: 117,
        time: 1 / 5,
        ⵠᐃⲆ: 3
    }, {
        r: [[137, 1]],
        w: 0,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 50,
        Ⲇⵠⵠⵠ: 138,
        time: 1 / 3,
        ⵠᐃⲆ: 3
    }, {
        r: [[131, 3]],
        w: 0,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 51,
        Ⲇⵠⵠⵠ: 143,
        time: 1 / 3,
        ⵠᐃⲆ: 3
    }, {
        r: [[131, 3], [110, 1]],
        w: 0,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 52,
        Ⲇⵠⵠⵠ: 133,
        time: 1 / 3,
        ⵠᐃⲆ: 3
    }, {
        r: [[131, 5], [110, 2], [142, 2]],
        w: 0,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 53,
        Ⲇⵠⵠⵠ: 136,
        time: 0.2,
        ⵠᐃⲆ: 3
    }, {
        r: [[161, 2]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 54,
        Ⲇⵠⵠⵠ: 195,
        time: 1 / 5,
        ⵠᐃⲆ: 4
    }, {
        r: [[109, 20]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 55,
        Ⲇⵠⵠⵠ: 162,
        time: 1 / 5,
        ⵠᐃⲆ: 5
    }, {
        r: [[162, 1], [108, 17]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 56,
        Ⲇⵠⵠⵠ: 163,
        time: 1 / 5,
        ⵠᐃⲆ: 5
    }, {
        r: [[163, 1], [111, 14]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 57,
        Ⲇⵠⵠⵠ: 164,
        time: 1 / 5,
        ⵠᐃⲆ: 5
    }, {
        r: [[164, 1], [112, 11]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 58,
        Ⲇⵠⵠⵠ: 165,
        time: 1 / 5,
        ⵠᐃⲆ: 5
    }, {
        r: [[165, 1], [121, 8]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 59,
        Ⲇⵠⵠⵠ: 122,
        time: 1 / 5,
        ⵠᐃⲆ: 5
    }, {
        r: [[122, 1], [202, 5]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 60,
        Ⲇⵠⵠⵠ: 217,
        time: 0.2,
        ⵠᐃⲆ: 5
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 61,
        Ⲇⵠⵠⵠ: 166,
        time: 1 / 8,
        ⵠᐃⲆ: 5
    }, {
        r: [[166, 1], [108, 27]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 62,
        Ⲇⵠⵠⵠ: 171,
        time: 1 / 8,
        ⵠᐃⲆ: 5
    }, {
        r: [[171, 1], [111, 24]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 63,
        Ⲇⵠⵠⵠ: 172,
        time: 0.125,
        ⵠᐃⲆ: 5
    }, {
        r: [[172, 1], [112, 21]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 64,
        Ⲇⵠⵠⵠ: 173,
        time: 1 / 8,
        ⵠᐃⲆ: 5
    }, {
        r: [[173, 1], [121, 18]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 65,
        Ⲇⵠⵠⵠ: 124,
        time: 1 / 8,
        ⵠᐃⲆ: 5
    }, {
        r: [[124, 1], [202, 15]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 66,
        Ⲇⵠⵠⵠ: 218,
        time: 1 / 8,
        ⵠᐃⲆ: 5
    }, {
        r: [[162, 1], [109, 40], [108, 30]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 67,
        Ⲇⵠⵠⵠ: 160,
        time: 1 / 20,
        ⵠᐃⲆ: 5
    }, {
        r: [[163, 1], [108, 70]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 68,
        Ⲇⵠⵠⵠ: 168,
        time: 1 / 20,
        ⵠᐃⲆ: 5
    }, {
        r: [[164, 1], [111, 40], [108, 30]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 69,
        Ⲇⵠⵠⵠ: 169,
        time: 0.05,
        ⵠᐃⲆ: 5
    }, {
        r: [[165, 1], [112, 40], [108, 30]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 70,
        Ⲇⵠⵠⵠ: 170,
        time: 1 / 20,
        ⵠᐃⲆ: 5
    }, {
        r: [[122, 1], [121, 40], [108, 30]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 71,
        Ⲇⵠⵠⵠ: 123,
        time: 1 / 20,
        ⵠᐃⲆ: 5
    }, {
        r: [[217, 1], [202, 40], [111, 30]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 72,
        Ⲇⵠⵠⵠ: 219,
        time: 0.05,
        ⵠᐃⲆ: 5
    }, {
        r: [[166, 1], [109, 80], [108, 60]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 73,
        Ⲇⵠⵠⵠ: 212,
        time: 1 / 20,
        ⵠᐃⲆ: 5
    }, {
        r: [[171, 1], [108, 140]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 74,
        Ⲇⵠⵠⵠ: 213,
        time: 1 / 20,
        ⵠᐃⲆ: 5
    }, {
        r: [[172, 1], [111, 80], [108, 60]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 75,
        Ⲇⵠⵠⵠ: 214,
        time: 0.05,
        ⵠᐃⲆ: 5
    }, {
        r: [[173, 1], [112, 80], [108, 60]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 76,
        Ⲇⵠⵠⵠ: 215,
        time: 1 / 20,
        ⵠᐃⲆ: 5
    }, {
        r: [[124, 1], [121, 80], [108, 60]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 77,
        Ⲇⵠⵠⵠ: 216,
        time: 1 / 20,
        ⵠᐃⲆ: 5
    }, {
        r: [[218, 1], [202, 80], [111, 60]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 78,
        Ⲇⵠⵠⵠ: 220,
        time: 1 / 20,
        ⵠᐃⲆ: 5
    }, {
        r: [[109, 25], [111, 2]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 79,
        Ⲇⵠⵠⵠ: 167,
        time: 1 / 5,
        ⵠᐃⲆ: 4
    }, {
        r: [[120, 1], [2, 1], [161, 2]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 80,
        Ⲇⵠⵠⵠ: 23,
        time: 0.2,
        ⵠᐃⲆ: 2
    }, {
        r: [[120, 5], [222, 20], [147, 5], [2, 5]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 81,
        Ⲇⵠⵠⵠ: 24,
        time: 0.03333333333333333,
        ⵠᐃⲆ: 2
    }, {
        r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 82,
        Ⲇⵠⵠⵠ: 82,
        time: 1 / 60,
        ⵠᐃⲆ: 2
    }, {
        r: [[2, 1], [161, 2]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 83,
        Ⲇⵠⵠⵠ: 10,
        time: 1 / 5,
        ⵠᐃⲆ: 2
    }, {
        r: [[10, 1], [174, 5], [161, 4]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 84,
        Ⲇⵠⵠⵠ: 11,
        time: 1 / 12,
        ⵠᐃⲆ: 2
    }, {
        r: [[11, 1], [146, 5], [147, 4]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 85,
        Ⲇⵠⵠⵠ: 40,
        time: 0.03333333333333333,
        ⵠᐃⲆ: 2
    }, {
        r: [[40, 1], [146, 5], [240, 10], [147, 4]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 86,
        Ⲇⵠⵠⵠ: 88,
        time: 1 / 50,
        ⵠᐃⲆ: 2
    }, {
        r: [[109, 50]],
        w: 0,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 87,
        Ⲇⵠⵠⵠ: 58,
        time: 1 / 5,
        ⵠᐃⲆ: 2
    }, {
        r: [[108, 75], [109, 75], [58, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 88,
        Ⲇⵠⵠⵠ: 25,
        time: 1 / 10,
        ⵠᐃⲆ: 2
    }, {
        r: [[108, 90], [109, 90], [111, 90], [25, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 89,
        Ⲇⵠⵠⵠ: 26,
        time: 1 / 20,
        ⵠᐃⲆ: 2
    }, {
        r: [[108, 100], [111, 100], [112, 100], [26, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 90,
        Ⲇⵠⵠⵠ: 27,
        time: 0.03333333333333333,
        ⵠᐃⲆ: 2
    }, {
        r: [[121, 80], [111, 150], [112, 120], [27, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 91,
        Ⲇⵠⵠⵠ: 43,
        time: 0.016666666666666666,
        ⵠᐃⲆ: 2
    }, {
        r: [[202, 80], [112, 150], [121, 120], [43, 1]],
        w: 1,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 92,
        Ⲇⵠⵠⵠ: 44,
        time: 0.011111111111111112,
        ⵠᐃⲆ: 2
    }, {
        r: [[139, 2], [112, 40], [161, 4]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 93,
        Ⲇⵠⵠⵠ: 48,
        time: 1 / 20,
        ⵠᐃⲆ: 2
    }, {
        r: [[48, 1], [111, 80], [129, 1], [121, 20]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 94,
        Ⲇⵠⵠⵠ: 47,
        time: 0.011111111111111112,
        ⵠᐃⲆ: 2
    }, {
        r: [[203, 5], [112, 50], [147, 5]],
        w: 1,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 95,
        Ⲇⵠⵠⵠ: 20,
        time: 0.05,
        ⵠᐃⲆ: 2
    }, {
        r: [[20, 1], [203, 10], [121, 50]],
        w: 1,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 96,
        Ⲇⵠⵠⵠ: 21,
        time: 0.016666666666666666,
        ⵠᐃⲆ: 2
    }, {
        r: [[21, 1], [203, 15], [121, 50], [202, 50]],
        w: 1,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 97,
        Ⲇⵠⵠⵠ: 22,
        time: 0.011111111111111112,
        ⵠᐃⲆ: 2
    }, {
        r: [[161, 4], [237, 2]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 98,
        Ⲇⵠⵠⵠ: 80,
        time: 1 / 15,
        ⵠᐃⲆ: 2
    }, {
        r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 99,
        Ⲇⵠⵠⵠ: 81,
        time: 1 / 150,
        ⵠᐃⲆ: 2
    }, {
        r: [[161, 6], [174, 5]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 100,
        Ⲇⵠⵠⵠ: 29,
        time: 1 / 15,
        ⵠᐃⲆ: 2
    }, {
        r: [[109, 20]],
        w: 0,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 101,
        Ⲇⵠⵠⵠ: 120,
        time: 1 / 3,
        ⵠᐃⲆ: 4
    }, {
        r: [[112, 1], [161, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 102,
        Ⲇⵠⵠⵠ: 147,
        time: 0.3333333333333333,
        ⵠᐃⲆ: 4
    }, {
        r: [[111, 10]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 103,
        Ⲇⵠⵠⵠ: 148,
        time: 1 / 5,
        ⵠᐃⲆ: 4
    }, {
        r: [[111, 250]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 104,
        Ⲇⵠⵠⵠ: 158,
        time: 1 / 60,
        ⵠᐃⲆ: 4
    }, {
        r: [[109, 50]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 105,
        Ⲇⵠⵠⵠ: 159,
        time: 0.1,
        ⵠᐃⲆ: 4
    }, {
        r: [[109, 15]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 106,
        Ⲇⵠⵠⵠ: 125,
        time: 1 / 5,
        ⵠᐃⲆ: 4
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 107,
        Ⲇⵠⵠⵠ: 190,
        time: 1 / 5,
        ⵠᐃⲆ: 4
    }, {
        r: [[109, 120]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 108,
        Ⲇⵠⵠⵠ: 221,
        time: 1 / 15,
        ⵠᐃⲆ: 4
    }, {
        r: [[109, 20], [140, 15]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 109,
        Ⲇⵠⵠⵠ: 141,
        time: 1 / 5,
        ⵠᐃⲆ: 4
    }, {
        r: [[126, 25]],
        w: 1,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 110,
        Ⲇⵠⵠⵠ: 128,
        time: 1 / 5,
        ⵠᐃⲆ: 3
    }, {
        r: [[128, 1]],
        w: 0,
        f: 0,
        ᐃⵠΔ: 1,
        e: 0,
        id: 111,
        Ⲇⵠⵠⵠ: 127,
        time: 1 / 5,
        ⵠᐃⲆ: 3
    }, {
        r: [[142, 20], [128, 1]],
        w: 0,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 112,
        Ⲇⵠⵠⵠ: 127,
        time: 1 / 10,
        ⵠᐃⲆ: 3
    }, {
        r: [[128, 1]],
        w: 0,
        f: 0,
        ᐃⵠΔ: 0,
        e: 1,
        id: 113,
        Ⲇⵠⵠⵠ: 127,
        time: 0.3333333333333333,
        ⵠᐃⲆ: 3
    }, {
        r: [[109, 60], [108, 20], [161, 2]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 114,
        Ⲇⵠⵠⵠ: 135,
        time: 1 / 10,
        ⵠᐃⲆ: 4
    }, {
        r: [[112, 40], [108, 45]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 115,
        Ⲇⵠⵠⵠ: 151,
        time: 0.05,
        ⵠᐃⲆ: 4
    }, {
        r: [[151, 1], [234, 40], [238, 1]],
        w: 1,
        f: 1,
        ᐃⵠΔ: 1,
        e: 0,
        id: 116,
        Ⲇⵠⵠⵠ: 152,
        time: 1 / 200,
        ⵠᐃⲆ: 4
    }, {
        r: [[109, 50], [108, 100]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 117,
        Ⲇⵠⵠⵠ: 153,
        time: 1 / 90,
        ⵠᐃⲆ: 4
    }, {
        r: [[108, 60], [111, 120]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 118,
        Ⲇⵠⵠⵠ: 154,
        time: 0.011111111111111112,
        ⵠᐃⲆ: 4
    }, {
        r: [[111, 70], [112, 140]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 119,
        Ⲇⵠⵠⵠ: 155,
        time: 1 / 90,
        ⵠᐃⲆ: 4
    }, {
        r: [[112, 80], [121, 160]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 120,
        Ⲇⵠⵠⵠ: 156,
        time: 1 / 90,
        ⵠᐃⲆ: 4
    }, {
        r: [[121, 90], [202, 180]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 121,
        Ⲇⵠⵠⵠ: 157,
        time: 1 / 90,
        ⵠᐃⲆ: 4
    }, {
        r: [[108, 70]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 122,
        Ⲇⵠⵠⵠ: 55,
        time: 1 / 10,
        ⵠᐃⲆ: 0
    }, {
        r: [[108, 70], [109, 50]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 123,
        Ⲇⵠⵠⵠ: 56,
        time: 0.1,
        ⵠᐃⲆ: 0
    }, {
        r: [[109, 40], [108, 40]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 124,
        Ⲇⵠⵠⵠ: 144,
        time: 1 / 10,
        ⵠᐃⲆ: 4
    }, {
        r: [[143, 1], [117, 1]],
        w: 0,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 125,
        Ⲇⵠⵠⵠ: 145,
        time: 0.3333333333333333,
        ⵠᐃⲆ: 3
    }, {
        r: [[147, 30], [184, 1], [121, 150], [149, 3]],
        w: 1,
        f: 1,
        ᐃⵠΔ: 1,
        e: 0,
        id: 126,
        Ⲇⵠⵠⵠ: 59,
        time: 0.008333333333333333,
        ⵠᐃⲆ: 2
    }, {
        r: [[59, 1], [186, 1], [202, 150], [150, 2]],
        w: 1,
        f: 1,
        ᐃⵠΔ: 1,
        e: 0,
        id: 127,
        Ⲇⵠⵠⵠ: 60,
        time: 1 / 180,
        ⵠᐃⲆ: 2
    }, {
        r: [[26, 1], [197, 10], [196, 10], [161, 10]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 128,
        Ⲇⵠⵠⵠ: 61,
        time: 0.016666666666666666,
        ⵠᐃⲆ: 2
    }, {
        r: [[147, 20], [185, 1], [121, 150], [149, 3]],
        w: 1,
        f: 1,
        ᐃⵠΔ: 1,
        e: 0,
        id: 129,
        Ⲇⵠⵠⵠ: 62,
        time: 0.008333333333333333,
        ⵠᐃⲆ: 1
    }, {
        r: [[62, 1], [187, 1], [202, 150], [150, 2]],
        w: 1,
        f: 1,
        ᐃⵠΔ: 1,
        e: 0,
        id: 130,
        Ⲇⵠⵠⵠ: 63,
        time: 1 / 180,
        ⵠᐃⲆ: 1
    }, {
        r: [[109, 100], [161, 4]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 131,
        Ⲇⵠⵠⵠ: 64,
        time: 0.05,
        ⵠᐃⲆ: 1
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 132,
        Ⲇⵠⵠⵠ: 101,
        time: 1 / 5,
        ⵠᐃⲆ: 1
    }, {
        r: [[108, 200], [161, 8], [222, 4], [64, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 133,
        Ⲇⵠⵠⵠ: 65,
        time: 1 / 25,
        ⵠᐃⲆ: 1
    }, {
        r: [[108, 20], [231, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 134,
        Ⲇⵠⵠⵠ: 102,
        time: 1 / 5,
        ⵠᐃⲆ: 1
    }, {
        r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 135,
        Ⲇⵠⵠⵠ: 66,
        time: 1 / 30,
        ⵠᐃⲆ: 1
    }, {
        r: [[111, 20], [222, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 136,
        Ⲇⵠⵠⵠ: 103,
        time: 1 / 10,
        ⵠᐃⲆ: 1
    }, {
        r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 137,
        Ⲇⵠⵠⵠ: 67,
        time: 1 / 35,
        ⵠᐃⲆ: 1
    }, {
        r: [[112, 10], [222, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 138,
        Ⲇⵠⵠⵠ: 104,
        time: 1 / 10,
        ⵠᐃⲆ: 1
    }, {
        r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 139,
        Ⲇⵠⵠⵠ: 68,
        time: 1 / 40,
        ⵠᐃⲆ: 1
    }, {
        r: [[121, 10], [232, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 140,
        Ⲇⵠⵠⵠ: 105,
        time: 1 / 15,
        ⵠᐃⲆ: 1
    }, {
        r: [[202, 200], [147, 10], [129, 1], [68, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 141,
        Ⲇⵠⵠⵠ: 69,
        time: 0.022222222222222223,
        ⵠᐃⲆ: 1
    }, {
        r: [[202, 10], [232, 1], [203, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 142,
        Ⲇⵠⵠⵠ: 106,
        time: 1 / 15,
        ⵠᐃⲆ: 1
    }, {
        r: [[234, 200], [147, 10], [185, 1], [69, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 143,
        Ⲇⵠⵠⵠ: 70,
        time: 1 / 50,
        ⵠᐃⲆ: 1
    }, {
        r: [[234, 10], [238, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 144,
        Ⲇⵠⵠⵠ: 107,
        time: 1 / 20,
        ⵠᐃⲆ: 1
    }, {
        r: [[109, 100]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 145,
        Ⲇⵠⵠⵠ: 71,
        time: 1 / 25,
        ⵠᐃⲆ: 1
    }, {
        r: [[71, 1], [108, 100], [109, 50]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 146,
        Ⲇⵠⵠⵠ: 72,
        time: 1 / 40,
        ⵠᐃⲆ: 1
    }, {
        r: [[72, 1], [111, 50], [108, 50], [109, 50]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 147,
        Ⲇⵠⵠⵠ: 73,
        time: 1 / 50,
        ⵠᐃⲆ: 1
    }, {
        r: [[73, 1], [112, 50], [111, 50], [108, 50]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 148,
        Ⲇⵠⵠⵠ: 74,
        time: 1 / 70,
        ⵠᐃⲆ: 1
    }, {
        r: [[74, 1], [121, 50], [112, 50], [111, 50]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 149,
        Ⲇⵠⵠⵠ: 75,
        time: 1 / 90,
        ⵠᐃⲆ: 1
    }, {
        r: [[75, 1], [202, 50], [121, 50], [112, 50]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 150,
        Ⲇⵠⵠⵠ: 76,
        time: 0.008333333333333333,
        ⵠᐃⲆ: 1
    }, {
        r: [[175, 1], [111, 200]],
        w: 1,
        f: 1,
        ᐃⵠΔ: 1,
        e: 0,
        id: 151,
        Ⲇⵠⵠⵠ: 77,
        time: 1 / 60,
        ⵠᐃⲆ: 2
    }, {
        r: [[176, 1], [111, 200]],
        w: 1,
        f: 1,
        ᐃⵠΔ: 1,
        e: 0,
        id: 152,
        Ⲇⵠⵠⵠ: 78,
        time: 0.016666666666666666,
        ⵠᐃⲆ: 2
    }, {
        r: [[177, 1], [111, 200], [149, 1]],
        w: 1,
        f: 1,
        ᐃⵠΔ: 1,
        e: 0,
        id: 153,
        Ⲇⵠⵠⵠ: 79,
        time: 1 / 60,
        ⵠᐃⲆ: 2
    }, {
        r: [[174, 10], [2, 5], [161, 6]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 154,
        Ⲇⵠⵠⵠ: 83,
        time: 1 / 10,
        ⵠᐃⲆ: 2
    }, {
        r: [[2, 3], [161, 2]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 155,
        Ⲇⵠⵠⵠ: 84,
        time: 1 / 10,
        ⵠᐃⲆ: 2
    }, {
        r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 156,
        Ⲇⵠⵠⵠ: 85,
        time: 1 / 60,
        ⵠᐃⲆ: 2
    }, {
        r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 157,
        Ⲇⵠⵠⵠ: 86,
        time: 1 / 60,
        ⵠᐃⲆ: 2
    }, {
        r: [[181, 1]],
        w: 0,
        f: 0,
        ᐃⵠΔ: 1,
        e: 0,
        id: 158,
        Ⲇⵠⵠⵠ: 180,
        time: 1 / 5,
        ⵠᐃⲆ: 0
    }, {
        r: [[109, 20], [161, 1]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 159,
        Ⲇⵠⵠⵠ: 181,
        time: 1 / 5,
        ⵠᐃⲆ: 0
    }, {
        r: [[108, 100], [140, 30]],
        w: 1,
        f: 1,
        ᐃⵠΔ: 0,
        e: 0,
        id: 160,
        Ⲇⵠⵠⵠ: 182,
        time: 1 / 10,
        ⵠᐃⲆ: 4
    }, {
        r: [[109, 20]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 161,
        Ⲇⵠⵠⵠ: 183,
        time: 1 / 5,
        ⵠᐃⲆ: 4
    }, {
        r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 162,
        Ⲇⵠⵠⵠ: 198,
        time: 0.05,
        ⵠᐃⲆ: 4
    }, {
        r: [[109, 250], [147, 10], [146, 2], [139, 2]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 163,
        Ⲇⵠⵠⵠ: 223,
        time: 1 / 50,
        ⵠᐃⲆ: 4
    }, {
        r: [[109, 250], [161, 10], [146, 2], [222, 8]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 164,
        Ⲇⵠⵠⵠ: 224,
        time: 0.02,
        ⵠᐃⲆ: 4
    }, {
        r: [[161, 10], [174, 6], [2, 4], [126, 50]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 165,
        Ⲇⵠⵠⵠ: 89,
        time: 1 / 20,
        ⵠᐃⲆ: 4
    }, {
        r: [[109, 250], [161, 10], [120, 10], [231, 8]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 166,
        Ⲇⵠⵠⵠ: 230,
        time: 0.02,
        ⵠᐃⲆ: 4
    }, {
        r: [[109, 40]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 167,
        Ⲇⵠⵠⵠ: 94,
        time: 1 / 5,
        ⵠᐃⲆ: 1
    }, {
        r: [[94, 1], [108, 40], [109, 50]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 168,
        Ⲇⵠⵠⵠ: 95,
        time: 0.1,
        ⵠᐃⲆ: 1
    }, {
        r: [[95, 1], [111, 40], [108, 50], [109, 60]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 169,
        Ⲇⵠⵠⵠ: 96,
        time: 1 / 20,
        ⵠᐃⲆ: 1
    }, {
        r: [[96, 1], [112, 40], [111, 70], [108, 80]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 170,
        Ⲇⵠⵠⵠ: 97,
        time: 1 / 30,
        ⵠᐃⲆ: 1
    }, {
        r: [[97, 1], [121, 40], [112, 70], [111, 110]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 171,
        Ⲇⵠⵠⵠ: 98,
        time: 1 / 60,
        ⵠᐃⲆ: 1
    }, {
        r: [[98, 1], [202, 50], [121, 80], [112, 110]],
        w: 1,
        f: 0,
        ᐃⵠΔ: 0,
        e: 0,
        id: 172,
        Ⲇⵠⵠⵠ: 99,
        time: 1 / 90,
        ⵠᐃⲆ: 1
    }];
    const Vs = Yl;
    Wr = 300;
    var Ws;
    Ws = {
        ΔⵠⲆΔΔⵠΔ: 300,
        ΔⲆⵠᐃⲆΔⲆ: 301,
        ⵠⲆⵠΔⲆⲆᐃ: 302,
        ᐃⵠⲆΔⲆⵠⲆ: 303,
        ΔΔⵠΔⲆᐃᐃ: 304,
        ⲆⵠᐃᐃᐃΔᐃ: 305,
        ΔᐃΔⲆᐃΔⲆ: 306,
        ⲆⲆⲆΔⲆⲆⲆ: 307,
        ΔⵠⲆΔΔⲆⵠ: 308,
        ⵠⵠΔⵠⵠⲆΔ: 309,
        ⲆⵠⲆᐃⵠΔΔ: 310,
        ⵠᐃⲆⲆᐃⵠⲆ: 311,
        EMPTY: 312,
        ⲆᐃΔⵠⵠⵠⲆ: 313,
        ΔⵠⵠᐃΔⲆΔ: 314,
        ΔᐃⵠᐃᐃᐃⲆ: 315,
        ⵠⵠΔᐃⲆⲆᐃ: 316,
        ᐃΔⲆⵠᐃᐃⲆ: 317,
        ⵠⲆⲆⲆⵠⲆΔ: 318,
        ΔΔΔⵠᐃᐃⲆ: 319,
        ⲆⲆⵠΔΔᐃΔ: 320,
        ᐃΔⵠΔⲆΔⵠ: 321,
        ⵠⵠΔⵠⲆ: 322,
        ΔⲆⲆᐃΔⵠΔ: 323,
        ⲆⲆΔⵠⵠ: 324,
        ⲆⵠⲆᐃΔⵠᐃ: 325,
        ᐃⲆⲆΔⵠⲆΔ: 326,
        ⲆⲆⲆᐃⲆΔΔ: 327,
        ΔᐃΔⵠⵠΔΔ: 328,
        ΔⲆⵠᐃⲆΔΔ: 329,
        ᐃⵠΔᐃΔⲆⲆ: 330,
        ΔⲆⵠᐃᐃᐃΔ: 331,
        POINTS: 332,
        ΔⵠΔᐃⵠΔΔ: 333,
        ⲆⵠᐃᐃⵠⲆⲆ: 334,
        ⵠⵠᐃΔⲆᐃⵠ: 335,
        ⲆⲆΔⵠⲆᐃⵠ: 336,
        ⲆⲆⲆᐃⵠᐃⲆ: 337,
        ⲆⲆⲆⲆⲆΔᐃ: 338,
        ⵠΔᐃⲆᐃᐃᐃ: 339,
        ΔΔᐃΔΔⵠΔ: 340,
        ΔᐃⵠΔⲆᐃⵠ: 341,
        ⵠⵠΔΔΔⵠⵠ: 342,
        ⲆⲆΔⲆⵠΔᐃ: 343
    };
    const Xs = 3;
    function Ys(b, c, d, e, f, g) {
        si(cx, b, c, d, e, f, g);
        const a = gt(dx[0], dx[1], dx[2], dx[3], dx[4], dx[5]);
        gt(dx[0], dx[1], dx[2], dx[3], dx[4], dx[5]);
        return (a | 62507) & ~(a & 62507);
    }
    const Zs = 15;
    function $s(b, c, d, e) {
        const f = b ^ 20028;
        const g = (c | 62429) & ~(c & 62429);
        const a = ~(d & 35588) & 35588 | ~(d & 35588) & d;
        const i = ~(e & 46642) & 46642 | ~(e & 46642) & e;
        const j = gf(f, g, a, i);
        (function (b, c, d, e, f) {
            const g = (2147483587 + (29803 + e) * 2147483629) % 2147483647;
            const a = ~(f & 50813) & 50813 | ~(f & 50813) & f;
            const h = mr(((b + 61875) * 214013 + 2531011) % 4294967296, (0 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 24 & 255)) + (24 << (c & 255)), (1013904223 + (d + 13058) * 1664525) % 4294967296);
            hx(g, a);
        })(f, g, a, i, f);
        return j ^ 62490;
    }
    const _s = 2;
    const bt = 256;
    const ct = 3;
    const dt = 5;
    const et = 6;
    function ft(b, c, d, e, f) {
        const g = ~(b & 29859) & b | ~(b & 29859) & 29859;
        const a = (3814 + c) % 65365;
        const h = (8 << (d >> 16 & 255)) + (24 << (d >> 24 & 255)) + (0 << (d >> 8 & 255)) + (16 << (d & 255));
        return (12345 + (24327 + (ao(g, a, h, (2147483587 + (e + 18654) * 2147483629) % 2147483647, ~(f & 62200) & 62200 | ~(f & 62200) & f) ^ rt(g, a, h))) * 1103515245) % 2147483648;
    }
    function gt(b, c, d, e, f, g) {
        Ze(cx, b, c, d, e, f, g);
        const a = _n(dx[0], dx[1], dx[2], dx[3], dx[4], dx[5]);
        const h = _n(dx[0], dx[1], dx[2], dx[3], dx[4], dx[5]);
        return (16 << ((a ^ h) & 255)) + (0 << ((a ^ h) >> 24 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 16 & 255));
    }
    function ht(a) {
        return function (b, c, d, e) {
            const f = ~(b & 7111) & (b | 7111);
            const g = ~(c & 45237) & 45237 | ~(c & 45237) & c;
            const a = (16 << (d >> 16 & 255)) + (24 << (d & 255)) + (8 << (d >> 8 & 255)) + (0 << (d >> 24 & 255));
            const h = (16 << (e >> 16 & 255)) + (0 << (e >> 24 & 255)) + (8 << (e & 255)) + (24 << (e >> 8 & 255));
            return (10496 + (nk(f, g, a, h) ^ vf(f, g, a, h, f))) % 65501;
        }(a, 37918, 15559, 64454);
    }
    function jt(a) {
        return function (a, b) {
            li(cx, a, b);
            const c = bx(dx[0], dx[1], dx[0], dx[1]);
            const d = function (b, c, d, e, f, g) {
                Kj(cx, b, c, d, e, f, g);
                const a = mt(dx[0], dx[1], dx[2]);
                pr(dx[3], dx[4]);
                return ~(a & 35046) & a | ~(a & 35046) & 35046;
            }(dx[0], dx[1], dx[0], dx[1], dx[0], dx[1]);
            return ((82 + (c ^ d)) * 8121 + 28411) % 134456;
        }(a, 6844);
    }
    function kt() {
        zb[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
        zb[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
        zb[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
        zb[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
        zb[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
        zb[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
        zb[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
        zb[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
        zb[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
        zb[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
        zb[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
        zb[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
        zb[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
        zb[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
        zb[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
        zb[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
        zb[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
        zb[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
        zb[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
        zb[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
        zb[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
        zb[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
        zb[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
        zb[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
        zb[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
        zb[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
        zb[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
        zb[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
        zb[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
        zb[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
        zb[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
        zb[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
        zb[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
        zb[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
        zb[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
        zb[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
        zb[232] = ["Vulture Feather", "From a deadly vulture"];
        zb[234] = ["Emerald", "How many golden breads can you get from it?"];
        zb[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
        zb[80] = ["Turban", "Useful to survive in the desert."];
        zb[81] = ["Ninja outfit", "Essential to survive in the desert"];
        zb[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
        zb[236] = ["Pilot Glasses"];
        zb[225] = ["Tamed Boar", "Fast on lands and slow on water."];
        zb[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
        zb[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
        zb[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
        zb[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
        zb[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
        zb[89] = ["Saddle", "Hit a boar with it to tame it."];
        zb[90] = ["Witch Hat", "You're a wizard Starvy!"];
        zb[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
        zb[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
        zb[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
        zb[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
        zb[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
        zb[224] = ["Sled", "You are faster with it in the snow"];
        zb[223] = ["Boat", "You are faster with it in the water"];
        zb[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
        zb[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
        zb[222] = ["Penguin Feather", "From a deadly cute penguin."];
        zb[231] = ["Hawk Feather", "From a deadly hawk."];
        zb[233] = ["Cactus", "Food : 20", "Water : 10"];
        zb[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
        zb[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
        zb[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
        zb[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
        zb[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
        zb[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
        zb[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
        zb[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
        zb[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
        zb[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
        zb[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
        zb[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
        zb[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
        zb[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
        zb[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
        zb[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
        zb[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        zb[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        zb[53] = ["Pitchfork", "Perfect for gathering"];
        zb[54] = ["Golden Pitchfork", "Essential for a real farmer."];
        zb[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
        zb[ds.ⲆᐃΔᐃⲆΔΔ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
        zb[ds.ᐃⲆⵠᐃⲆⲆⵠ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
        zb[ds.ΔⵠΔⵠⲆⲆⵠ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
        zb[ds.ⵠΔⲆⲆⲆⲆᐃ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
        zb[ds.ΔⵠⵠΔⵠᐃᐃ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
        zb[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
        zb[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
        zb[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
        zb[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
        zb[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
        zb[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
        zb[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
        zb[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
        zb[203] = ["Flame", "It's hot!"];
        zb[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
        zb[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
        zb[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
        zb[202] = ["Reidite", "The ultimate ore"];
        zb[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
        ut[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        ut[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
        ut[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
        ut[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
        ut[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
        ut[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
        ut[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
        ut[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
        ut[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
        ut[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
        ut[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
        ut[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
        ut[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
        ut[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
        ut[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
        ut[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
        ut[38] = ["You died crushed by an angry baby mammoth."];
        ut[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
        ut[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
        zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        zb[341] = "A sandstorm is approaching in a few seconds.";
        zb[340] = "The sandstorm will soon stop.";
        zb[343] = "A blizzard is approaching in a few seconds.";
        zb[342] = "The blizzard will soon stop.";
        zb[328] = " BACK TO THE GAME";
        zb[329] = " Share on Twitter";
        zb[330] = " Share on Facebook";
        zb[331] = "You can buy items on the shop in the next game with your points";
        zb[332] = "points";
        zb[333] = "Score";
        zb[334] = "Kill";
        zb[335] = "Days survived";
        zb[336] = "Building method: Free. Press G to change";
        zb[337] = "Building method: Grid. Press G to change";
        zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
        zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
        zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        zb[7] = ["Hand"];
        zb[140] = ["Dirt", "Dirty!"];
        zb[126] = ["Sand", "I got it in my eyes!"];
        zb[109] = ["Wood", "You can't get enough of it!"];
        zb[108] = ["Stone", "Also called a rock"];
        zb[111] = ["Gold", "Be generous, give it to others"];
        zb[112] = ["Diamond", "What will you make with it?"];
        zb[121] = ["Amethyst", "It's Mauve like Lapa"];
        zb[131] = ["Flour", "Used in cooking"];
        zb[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
        zb[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
        zb[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
        zb[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
        zb[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
        zb[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
        zb[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
        zb[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
        zb[200] = ["Candies", "Only for children!", "Food: 20"];
        zb[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
        zb[201] = ["Garland", "Perfect decoration for roofs"];
        zb[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
        zb[110] = ["Berry", "Berry tasty!", "Food: 10"];
        zb[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        zb[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
        zb[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        zb[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
        zb[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        zb[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
        zb[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
        zb[194] = ["Thorn bush", "It stings!"];
        zb[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
        zb[142] = ["Ice", "Useful for making cakes and water"];
        zb[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
        zb[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
        zb[2] = ["Rabbit Fur", "That rabbit was so cute..."];
        zb[178] = ["Pure Fur", "You're a bread factory"];
        zb[179] = ["Dark Fur", "You get ready to do something wrong"];
        zb[146] = ["Winter Fur", "These animals just wanted a hug..."];
        zb[139] = ["Scales", "It smells like fish!"];
        zb[129] = ["Kraken Skin", "Weren't you too scared?"];
        zb[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
        zb[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
        zb[114] = ["Workbench", "Very useful to craft all kinds of objects"];
        zb[161] = ["Cord", "Used in crafting Hats and Bag"];
        zb[147] = ["Diamond Cord", "Used in crafting Special Hats"];
        zb[167] = ["Chest", "Allows you to store items", "Durability: 500"];
        zb[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
        zb[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
        zb[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
        zb[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
        zb[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
        zb[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
        zb[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
        zb[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
        zb[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
        zb[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
        zb[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
        zb[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
        zb[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
        zb[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
        zb[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
        zb[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
        zb[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
        zb[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
        zb[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
        zb[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
        zb[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
        zb[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
        zb[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
        zb[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
        zb[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
        zb[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
        zb[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
        zb[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
        zb[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
        zb[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
        zb[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
        zb[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
        zb[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
        zb[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
        zb[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
        zb[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
        zb[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
        zb[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
        zb[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
        zb[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
        zb[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
        zb[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
        zb[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        zb[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
        zb[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        zb[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
        zb[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
        zb[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
        zb[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
        zb[175] = ["Green Gemstone", "You didn't cheat, promise?"];
        zb[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
        zb[177] = ["Blue Gemstone", "For too kind people"];
        zb[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
        zb[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
        zb[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
        zb[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
        zb[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
        zb[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
        zb[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
        zb[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
        zb[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
        zb[29] = ["Bag", "More space for your items!"];
        zb[120] = ["Paper", "Used in book-crafting"];
        zb[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
        zb[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
        zb[148] = ["Lock", "Allow you to lock your chest"];
        zb[158] = ["Lock-pick", "Allows you to unlock one chest"];
        zb[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
        zb[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
        zb[183] = ["Sign", "Leave a message to others", "Durability: 200"];
        zb[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
        zb[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
        zb[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
        zb[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
        zb[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
        zb[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
        zb[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
        zb[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
        zb[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
        zb[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
        zb[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
        zb[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
        zb[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
        zb[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
        zb[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
        zb[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
        zb[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
        zb[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
        zb[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
        zb[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
        zb[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
        zb[300] = "You cannot join this server";
        zb[301] = "Kicked: ";
        zb[302] = "Your key is already used by someone else";
        zb[303] = "Your key is wrong";
        zb[304] = "You have an old version, you need to clear your cache";
        zb[338] = "Your client version is too recent for this server. The server is being updated";
        zb[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
        zb[305] = "There are no more new resources";
        zb[306] = "You survived 1 day";
        zb[307] = "You survived ";
        zb[308] = " days";
        zb[309] = "You are dead ;-;";
        zb[310] = "Server cannot find spawn location! Spam the play button!";
        zb[311] = "Server is full! Spam the play button!";
        zb[312] = "Resource is empty";
        zb[313] = "Inventory is full (right-click to empty items)";
        zb[314] = " is dead";
        zb[315] = "This is not the right tool";
        zb[316] = "You joined a team";
        zb[317] = "You are dead";
        zb[318] = " joined the team";
        zb[319] = "Your team was destroyed";
        zb[320] = "You left the team";
        zb[321] = " left the team";
        zb[322] = "Someone stole your token :>";
        zb[323] = "Choose a server";
        zb[324] = "players";
        zb[325] = "total players";
        zb[326] = "players on this mode";
        zb[327] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Nickname";
        ut[0] = ["You were killed for no reason"];
        ut[1] = ["You starved to death, as the name of the game implies"];
        ut[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
        ut[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
        ut[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
        ut[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
        ut[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
        ut[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
        ut[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
        ut[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
        ut[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
        ut[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
        ut[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
        ut[13] = ["You died of thirst. Better drink your own piss."];
        ut[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
        ut[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
        ut[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
        ut[17] = ["Your skin's falling apart, the sun killed you."];
        ut[18] = ["Garlic stored in your pockets boiled your brain."];
        ut[19] = ["As a vampire, don't stand near the garlic cloves."];
        ut[20] = ["You ate garlic as a vampire, what did you expect?"];
        ut[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
        ᐃᐃⲆΔΔ = "Uuunnnggg";
        ᐃⲆⵠᐃΔᐃΔ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
    }
    function lt(a, b) {
        const c = (0 << (a >> 8 & 255)) + (8 << (a >> 0 & 255)) + (16 << (a >> 16 & 255)) + (24 << (a >> 24 & 255));
        const d = (36875 + b) % 65311;
        const e = qk(c, d);
        qk(c, d);
        return (e | 44326) & ~(e & 44326);
    }
    function mt(a, b, c) {
        wi(cx, a, b, c);
        const d = function (a, b, c) {
            Vj(cx, a, b, c);
            const d = db(dx[0], dx[1], dx[2], dx[0]);
            db(dx[1], dx[2], dx[0], dx[1]);
            return ~(d & 50440) & (d | 50440);
        }(dx[0], dx[1], dx[2]);
        const e = gt(dx[0], dx[1], dx[2], dx[0], dx[1], dx[2]);
        return (24 << ((d ^ e) & 255)) + (0 << ((d ^ e) >> 24 & 255)) + (16 << ((d ^ e) >> 16 & 255)) + (8 << ((d ^ e) >> 8 & 255));
    }
    const nt = 8;
    function pt() {
        zb[184] = ["You feel a great power emanating from this orb"];
        ut[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        zb[328] = " BACK TO THE GAME";
        zb[329] = " Share on Twitter";
        zb[330] = " Share on Facebook";
        zb[331] = "You can buy items on the shop in the next game with your points";
        zb[332] = "points";
        zb[333] = "Score";
        zb[334] = "Kill";
        zb[335] = "Days survived";
        zb[336] = "Building method: Free. Press G to change";
        zb[337] = "Building method: Grid. Press G to change";
        zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        zb[7] = ["Рука"];
        zb[140] = ["Земля", "Грязно!"];
        zb[126] = ["Песок", "Он в моих глазах!"];
        zb[109] = ["Дерево", "Постоянно нужно больше!"];
        zb[108] = ["Камень", "Твердый"];
        zb[111] = ["Золото", "Будьте щедры, давайте его другим"];
        zb[112] = ["Алмаз", "Что вы создадите с помощью него?"];
        zb[121] = ["Аметист", "Он сиреневый, как Lapa"];
        zb[131] = ["Мука", "Используется в готовке"];
        zb[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
        zb[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
        zb[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
        zb[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
        zb[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
        zb[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
        zb[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
        zb[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
        zb[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
        zb[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
        zb[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
        zb[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
        zb[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
        zb[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        zb[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
        zb[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        zb[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
        zb[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
        zb[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
        zb[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
        zb[194] = ["Колючий Куст", "Это больно!"];
        zb[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
        zb[142] = ["Лёд", "Используется для изготовления тортов и воды"];
        zb[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
        zb[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
        zb[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
        zb[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
        zb[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
        zb[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
        zb[139] = ["Чешуя", "Она пахнет рыбой!"];
        zb[129] = ["Шкура Кракена", "Вы не испугались?"];
        zb[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
        zb[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
        zb[114] = ["Верстак", "Необходим для создания многих предметов"];
        zb[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
        zb[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
        zb[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
        zb[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
        zb[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
        zb[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
        zb[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
        zb[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
        zb[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
        zb[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
        zb[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
        zb[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
        zb[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
        zb[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
        zb[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
        zb[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
        zb[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
        zb[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
        zb[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
        zb[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
        zb[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
        zb[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
        zb[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
        zb[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
        zb[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
        zb[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
        zb[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
        zb[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
        zb[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
        zb[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
        zb[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
        zb[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
        zb[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
        zb[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
        zb[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
        zb[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
        zb[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
        zb[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
        zb[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
        zb[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        zb[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
        zb[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
        zb[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
        zb[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        zb[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        zb[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        zb[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
        zb[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
        zb[185] = ["Шар Дракона", "Даётся за квест"];
        zb[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
        zb[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
        zb[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
        zb[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
        zb[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
        zb[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
        zb[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
        zb[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
        zb[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
        zb[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
        zb[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
        zb[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
        zb[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
        zb[29] = ["Рюкзак", "Больше места для ваших предметов!"];
        zb[120] = ["Бумага", "Используется при создании книги"];
        zb[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
        zb[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
        zb[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
        zb[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
        zb[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
        zb[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
        zb[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
        zb[190] = ["Крыша", "Немного скрывает вас и согревает!"];
        zb[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
        zb[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
        zb[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
        zb[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
        zb[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
        zb[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
        zb[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
        zb[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
        zb[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
        zb[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
        zb[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
        zb[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
        zb[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
        zb[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
        zb[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
        zb[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
        zb[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
        zb[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
        zb[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
        zb[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
        zb[300] = "Вы не можете зайти на этот сервер";
        zb[301] = "Выгнаны: ";
        zb[302] = "Ваш ключ уже используется кем-то";
        zb[303] = "Ваш ключ неправильный";
        zb[304] = "У вас старая версия, вам нужно очистить кеш";
        zb[305] = "Ресурсов больше нет";
        zb[306] = "Вы выжили 1 день";
        zb[307] = "Вы выжили ";
        zb[308] = " дней";
        zb[309] = "Вы умерли ;-;";
        zb[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
        zb[311] = "Сервер заполнен! Спамьте кнопку играть!";
        zb[312] = "Ресурсы закончились";
        zb[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
        zb[314] = " умер";
        zb[315] = "Это не тот инструмент";
        zb[316] = "Вы вошли в команду";
        zb[317] = "Вы умерли";
        zb[318] = " вошёл в команду";
        zb[319] = "Ваша команда была разрушена";
        zb[320] = "Вы покинули команду";
        zb[321] = " покинул команду";
        zb[322] = "Кто-то использует ваш токен :>";
        zb[323] = "Выберите сервер";
        zb[324] = "игроков";
        zb[325] = "игроков всего";
        zb[326] = "игроков в этом режиме";
        zb[327] = "Скоро...";
        document.getElementById("nickname_input").placeholder = "Имя";
        ut[0] = ["Вы были убиты без причины"];
        ut[1] = ["Вы умерли от голода, как название игры подразумевает это"];
        ut[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
        ut[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
        ut[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
        ut[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
        ut[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
        ut[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
        ut[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
        ut[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
        ut[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
        ut[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
        ut[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
        ut[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
        ut[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
        ut[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
        ut[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
        ut[17] = ["Твоя кожа разваливается, солнце убило тебя"];
        ut[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
        ut[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
        ut[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
        ut[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
        ᐃᐃⲆΔΔ = "Uuunnnggg";
        ᐃⲆⵠᐃΔᐃΔ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
    }
    function qt(b, c, d, e, f, g) {
        Bj(cx, b, c, d, e, f, g);
        const a = gt(dx[0], dx[1], dx[2], dx[3], dx[4], dx[5]);
        bx(dx[0], dx[1], dx[2], dx[3]);
        return ~(a & 30626) & (a | 30626);
    }
    function rt(a, b, c) {
        const d = (a | 36583) & ~(a & 36583);
        const e = ~(d & 27498) & 27498 | ~(d & 27498) & d;
        return (e | 36410) & ~(e & 36410);
    }
    function eb() {
        zb[184] = ["You feel a great power emanating from this orb"];
        ut[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        zb[328] = " BACK TO THE GAME";
        zb[329] = " Share on Twitter";
        zb[330] = " Share on Facebook";
        zb[331] = "You can buy items on the shop in the next game with your points";
        zb[332] = "points";
        zb[333] = "Score";
        zb[334] = "Kill";
        zb[335] = "Days survived";
        zb[336] = "Building method: Free. Press G to change";
        zb[337] = "Building method: Grid. Press G to change";
        zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        zb[7] = ["mão"];
        zb[140] = ["terra", "está sujo!"];
        zb[126] = ["areia", "entrou nos meus olhos!"];
        zb[109] = ["madeira", "você não pode pegar o suficiente disso!"];
        zb[108] = ["pedra", "também chamado rocha"];
        zb[111] = ["ouro", "seja generoso, dê para outros"];
        zb[112] = ["diamante", "o que você irá fazer com isso?"];
        zb[121] = ["ametista", "é mauve como lapa"];
        zb[131] = ["farinha", "usada na cozinha"];
        zb[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
        zb[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
        zb[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
        zb[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
        zb[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
        zb[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
        zb[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
        zb[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
        zb[200] = ["doces", "apenas para crianças!", "comida: 100"];
        zb[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
        zb[201] = ["pisca-pisca", "decoração perfeita de telhado"];
        zb[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
        zb[110] = ["berry", "Berry saborosa!", "comida: 10"];
        zb[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
        zb[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
        zb[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
        zb[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
        zb[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
        zb[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
        zb[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
        zb[194] = ["mato de espinhos", "pica!"];
        zb[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
        zb[142] = ["gelo", "útil para fazer bolo e água"];
        zb[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
        zb[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
        zb[2] = ["pele de coelho", "o coelho era tão fofo..."];
        zb[178] = ["pele pura", "você é uma fábrica de pão"];
        zb[179] = ["pele negra", "você está pronto para fazer algo errado"];
        zb[146] = ["pele de inverno", "ele só queria um abraço"];
        zb[139] = ["escala", "é pequeno como peixe!"];
        zb[129] = ["pele do kraken", "você não está com medo?"];
        zb[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
        zb[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
        zb[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
        zb[161] = ["linha", "usada para fazer chapéus e mochila"];
        zb[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
        zb[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
        zb[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
        zb[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
        zb[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
        zb[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
        zb[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
        zb[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
        zb[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
        zb[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
        zb[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
        zb[ds.ᐃΔΔᐃΔᐃΔᐃᐃ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
        zb[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
        zb[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
        zb[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
        zb[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
        zb[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
        zb[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
        zb[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
        zb[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
        zb[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
        zb[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
        zb[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
        zb[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
        zb[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
        zb[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
        zb[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
        zb[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
        zb[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
        zb[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
        zb[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
        zb[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
        zb[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
        zb[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
        zb[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
        zb[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
        zb[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
        zb[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
        zb[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
        zb[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
        zb[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
        zb[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
        zb[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
        zb[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
        zb[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
        zb[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
        zb[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
        zb[185] = ["esfera do dragão", "dado na questt"];
        zb[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
        zb[175] = ["pedra verde", "você não vai trapacear, promete?"];
        zb[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
        zb[177] = ["pedra azul", "para pessoas muito gentis"];
        zb[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
        zb[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
        zb[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
        zb[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
        zb[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
        zb[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
        zb[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
        zb[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
        zb[49] = ["regador", "permite regar as plantas", "dano: 1"];
        zb[29] = ["mochila", "mais espaço para seus itens!"];
        zb[120] = ["papel", "usado para fazer o livro"];
        zb[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
        zb[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
        zb[148] = ["fechadura", "permite você trancar seu baú"];
        zb[158] = ["chave", "permite destrancar um baú"];
        zb[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
        zb[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
        zb[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
        zb[190] = ["telhado", "esconde você um pouco e te esquenta!"];
        zb[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
        zb[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
        zb[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
        zb[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
        zb[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
        zb[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
        zb[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
        zb[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
        zb[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
        zb[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
        zb[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
        zb[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
        zb[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
        zb[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
        zb[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
        zb[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
        zb[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
        zb[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
        zb[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
        zb[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
        zb[300] = "você não pode entrar no servidor";
        zb[301] = "kickado: ";
        zb[302] = "sua chave está em uso por outra pessoa";
        zb[303] = "sua chave está errada";
        zb[304] = "você tem uma versão velha, limpe seu cache";
        zb[305] = "não tem mais recursos";
        zb[306] = "você sobreviveu 1 dia";
        zb[307] = "você sobreviveu ";
        zb[308] = " dias";
        zb[309] = "você está morto ;-;";
        zb[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
        zb[311] = "servidor está cheio! spam o botão de play!";
        zb[312] = "não tem recursos";
        zb[313] = "inventário está cheio (botão direito para deletar itens)";
        zb[314] = " está morto";
        zb[315] = "essa não é a ferramenta certa";
        zb[316] = "você entrou no time";
        zb[317] = "você está morto";
        zb[318] = "entrou no time";
        zb[319] = "seu time foi destruido";
        zb[320] = "você saiu do time";
        zb[321] = " saiu do time";
        zb[322] = "alguém roubou sua ficha :>";
        zb[323] = "escolha um servidor";
        zb[324] = "jogadores";
        zb[325] = "jogadores totais";
        zb[326] = "jogadores nesse modo";
        zb[327] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Apelido";
        ut[0] = ["você morreu sem motivo"];
        ut[1] = ["você morreu de fome, como o jogo diz"];
        ut[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
        ut[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
        ut[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
        ut[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
        ut[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
        ut[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
        ut[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
        ut[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
        ut[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
        ut[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
        ut[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
        ut[13] = ["você morreu de sede. melhor beber sua própria urina."];
        ut[14] = ["você sabia que você morre afogado? agora você sabe."];
        ut[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
        ut[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
        ut[17] = ["sua pele caindo aos pedaços, o sol te matou."];
        ut[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
        ut[19] = ["como vampiro, não chegue perto do alho."];
        ut[20] = ["você comeu alho como vampiro, o que você esperava?"];
        ut[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
        ᐃᐃⲆΔΔ = "Uuunnnggg";
        ᐃⲆⵠᐃΔᐃΔ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
    }
    const ib = 0;
    function tb(b, c, d, e) {
        const f = (12345 + (b + 1664) * 1103515245) % 2147483648;
        const g = c ^ 16080;
        const a = ~(d & 51241) & 51241 | ~(d & 51241) & d;
        const i = ~(e & 43074) & 43074 | ~(e & 43074) & e;
        const j = Pw(f, g, a, i, f);
        const h = rt(g);
        return (8 << ((j ^ h) & 255)) + (0 << ((j ^ h) >> 8 & 255)) + (16 << ((j ^ h) >> 16 & 255)) + (24 << ((j ^ h) >> 24 & 255));
    }
    const nb = 9;
    const ob = 10;
    const ab = 7;
    const rb = 20;
    function sb(b, c, d, e, f, i) {
        const a = ~(b & 42930) & b | ~(b & 42930) & 42930;
        const j = ((e + 12967) * 1103515245 + 12345) % 2147483648;
        const k = f ^ 3240;
        const h = (24 << (i >> 16 & 255)) + (8 << (i >> 8 & 255)) + (0 << (i >> 24 & 255)) + (16 << (i & 255));
        const l = mr(a, ~(c & 8421) & (c | 8421), (12345 + (d + 3650) * 1103515245) % 2147483648);
        const g = $s(j, k, h, a);
        return (0 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (16 << ((l ^ g) >> 24 & 255)) + (24 << ((l ^ g) & 255));
    }
    const hb = 19;
    const lb = 1;
    const gb = 8;
    const ub = 13;
    function bb() {
        zb[184] = ["You feel a great power emanating from this orb"];
        ut[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        zb[328] = " BACK TO THE GAME";
        zb[329] = " Share on Twitter";
        zb[330] = " Share on Facebook";
        zb[331] = "You can buy items on the shop in the next game with your points";
        zb[332] = "points";
        zb[333] = "Score";
        zb[334] = "Kill";
        zb[335] = "Days survived";
        zb[336] = "Building method: Free. Press G to change";
        zb[337] = "Building method: Grid. Press G to change";
        zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        zb[7] = ["Mano"];
        zb[140] = ["Tierra", "¡Tan limpia como mis manos!"];
        zb[126] = ["Arena", "¡Tengo arena en mis ojos!"];
        zb[109] = ["Madera", "¡Nunca hay suficiente!"];
        zb[108] = ["Piedra", "También llamada roca."];
        zb[111] = ["Oro", "Sé generoso, compártelo con los otros"];
        zb[112] = ["Diamante", "¿Que vas a hacer con él?"];
        zb[121] = ["Amatista", "Es Mauve como Lapa"];
        zb[131] = ["Harina", "Usada para cocinar."];
        zb[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
        zb[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
        zb[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
        zb[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
        zb[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
        zb[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
        zb[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
        zb[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
        zb[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
        zb[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
        zb[201] = ["Guirnalda", "Perfecta para decorar el techo"];
        zb[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        zb[110] = ["Baya", "No es venenosa.", "Comida: 10"];
        zb[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        zb[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
        zb[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        zb[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
        zb[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
        zb[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
        zb[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
        zb[194] = ["Planta de Espinas", "¡Te daña!"];
        zb[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
        zb[142] = ["Hielo", "Bueno para hacer tartas y agua"];
        zb[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
        zb[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
        zb[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
        zb[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
        zb[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
        zb[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
        zb[139] = ["Escamas", "¡Huele a pescado!"];
        zb[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
        zb[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
        zb[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
        zb[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
        zb[161] = ["Hilo", "Usado para craftear ropa y mochila"];
        zb[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
        zb[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
        zb[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
        zb[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
        zb[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
        zb[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
        zb[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
        zb[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
        zb[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
        zb[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
        zb[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
        zb[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
        zb[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
        zb[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
        zb[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
        zb[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
        zb[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
        zb[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
        zb[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
        zb[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
        zb[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
        zb[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
        zb[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
        zb[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
        zb[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
        zb[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
        zb[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
        zb[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
        zb[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
        zb[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
        zb[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
        zb[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
        zb[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
        zb[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
        zb[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
        zb[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
        zb[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
        zb[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
        zb[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
        zb[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
        zb[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
        zb[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
        zb[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
        zb[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
        zb[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
        zb[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
        zb[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
        zb[185] = ["Esfera del Dragón", "Dada en la misión"];
        zb[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
        zb[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
        zb[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
        zb[177] = ["Gema Azul", "Para gente muy amable"];
        zb[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
        zb[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
        zb[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
        zb[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
        zb[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
        zb[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
        zb[128] = ["Botella Vacia", "La puedes llenar de agua"];
        zb[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
        zb[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
        zb[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
        zb[120] = ["Hoja", "Usada para hacer un libro"];
        zb[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
        zb[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
        zb[148] = ["Cerradura", "Te permite cerrar tu cofre"];
        zb[158] = ["Llave", "Te permite abrir un cofre cerrado"];
        zb[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
        zb[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
        zb[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
        zb[190] = ["Techo", "Te esconde un poco y te protege del frío"];
        zb[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
        zb[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
        zb[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
        zb[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
        zb[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
        zb[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
        zb[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
        zb[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
        zb[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
        zb[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
        zb[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
        zb[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
        zb[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
        zb[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
        zb[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
        zb[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
        zb[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
        zb[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        zb[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        zb[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
        zb[300] = "No puedes unirte a este servidor";
        zb[301] = "Expulsado: ";
        zb[302] = "Tu llave ya está usada";
        zb[303] = "Tu llave está mal";
        zb[304] = "Tienes una versión antigua, limpia tu cache";
        zb[305] = "No hay mas recursos";
        zb[306] = "Has sobrevivido 1 día";
        zb[307] = "Has sobrevivido ";
        zb[308] = " días";
        zb[309] = "Estás muerto ;-;";
        zb[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
        zb[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
        zb[312] = "Recurso vacio";
        zb[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
        zb[314] = " está muerto";
        zb[315] = "Esta no es la herramienta correcta";
        zb[316] = "Te has unido a un equipo";
        zb[317] = "Estás muerto";
        zb[318] = " se unió al equipo";
        zb[319] = "Tu equipo ha sido destruido";
        zb[320] = "Has dejado el equipo";
        zb[321] = " dejo el equipo ";
        zb[322] = "Alguien te robó tu token :>";
        zb[323] = "Elige un servidor";
        zb[324] = "jugadores";
        zb[325] = "total de jugadores";
        zb[326] = "Jugadores en este modo de juego";
        zb[327] = "Próximamente...";
        document.getElementById("nickname_input").placeholder = "Apodo";
        ut[0] = ["Has muerto por ninguna razón"];
        ut[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
        ut[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
        ut[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
        ut[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
        ut[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
        ut[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
        ut[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
        ut[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
        ut[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
        ut[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
        ut[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
        ut[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
        ut[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
        ut[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
        ut[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
        ut[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
        ut[17] = ["Tu piel se cayó, el sol te quemó."];
        ut[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
        ut[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
        ut[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
        ut[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
        ᐃᐃⲆΔΔ = "Uuunnnggg";
        ᐃⲆⵠᐃΔᐃΔ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
    }
    function db(a, b, c, d) {
        Fj(cx, a, b, c, d);
        const e = Ys(dx[0], dx[1], dx[2], dx[3], dx[0], dx[1]);
        (function (b, c, d, e, f) {
            Yj(cx, b, c, d, e, f);
            const g = qt(dx[0], dx[1], dx[2], dx[3], dx[4], dx[0]);
            const a = gr(dx[1], dx[2], dx[3], dx[4], dx[0], dx[1]);
        })(dx[2], dx[3], dx[0], dx[1], dx[2]);
        return ~(e & 39544) & e | ~(e & 39544) & 39544;
    }
    function vb() {
        zb[184] = ["You feel a great power emanating from this orb"];
        ut[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        zb[328] = " BACK TO THE GAME";
        zb[329] = " Share on Twitter";
        zb[330] = " Share on Facebook";
        zb[331] = "You can buy items on the shop in the next game with your points";
        zb[332] = "points";
        zb[333] = "Score";
        zb[334] = "Kill";
        zb[335] = "Days survived";
        zb[336] = "Building method: Free. Press G to change";
        zb[337] = "Building method: Grid. Press G to change";
        zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        zb[7] = ["Hand"];
        zb[140] = ["Boden", "Dreckig!"];
        zb[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
        zb[109] = ["Holz", "Du kannst niemals zu viel haben!"];
        zb[108] = ["Stein", "Auch Fels gennant"];
        zb[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
        zb[112] = ["Diamant", "Was wirst du daraus machen?"];
        zb[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
        zb[131] = ["Mehl", "wird fürs Backen gebraucht"];
        zb[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
        zb[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
        zb[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
        zb[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
        zb[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
        zb[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
        zb[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
        zb[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
        zb[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
        zb[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
        zb[201] = ["Girlande", "perfekter Schmuck für Dächer"];
        zb[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        zb[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
        zb[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        zb[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
        zb[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        zb[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
        zb[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        zb[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
        zb[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
        zb[194] = ["Dornenbusch", "Es sticht!"];
        zb[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
        zb[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
        zb[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
        zb[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
        zb[2] = ["Hasenfell", "Der Hase war so süß..."];
        zb[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
        zb[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
        zb[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
        zb[139] = ["Schuppen", "Es riecht wie Fisch!"];
        zb[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
        zb[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
        zb[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
        zb[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
        zb[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
        zb[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
        zb[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
        zb[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
        zb[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
        zb[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
        zb[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
        zb[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
        zb[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
        zb[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
        zb[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
        zb[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
        zb[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
        zb[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        zb[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        zb[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
        zb[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
        zb[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
        zb[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
        zb[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
        zb[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
        zb[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
        zb[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
        zb[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
        zb[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
        zb[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
        zb[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
        zb[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        zb[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        zb[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
        zb[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
        zb[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
        zb[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
        zb[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
        zb[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
        zb[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
        zb[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
        zb[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
        zb[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        zb[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
        zb[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
        zb[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
        zb[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
        zb[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
        zb[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        zb[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        zb[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        zb[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
        zb[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
        zb[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
        zb[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
        zb[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
        zb[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
        zb[29] = ["Rucksack", "Mehr Platz im Inventar!"];
        zb[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
        zb[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
        zb[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
        zb[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
        zb[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
        zb[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
        zb[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
        zb[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
        zb[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
        zb[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
        zb[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
        zb[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
        zb[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
        zb[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
        zb[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
        zb[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
        zb[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
        zb[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
        zb[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
        zb[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
        zb[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
        zb[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
        zb[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
        zb[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
        zb[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
        zb[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
        zb[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        zb[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        zb[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
        zb[300] = "Du kannst diesem Server nicht beitreten";
        zb[301] = "Gekickt: ";
        zb[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
        zb[303] = "Dein Schlüssel ist falsch";
        zb[304] = "Deine Version ist veraltet, säubere dein Cache";
        zb[305] = "Es gibt keine neuen Ressourcen";
        zb[306] = "Du hast einen Tag überlebt";
        zb[307] = "Du hast überlebt ";
        zb[308] = " Tage";
        zb[309] = "Du bist gestorben ;-;";
        zb[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
        zb[311] = "Server ist voll! Drücke immer wieder auf spielen!";
        zb[312] = "Ressource ist leer";
        zb[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
        zb[314] = " ist gestorben";
        zb[315] = "Das ist nicht das richtige Werkzeug";
        zb[316] = "Du bist einem Team beigetreten";
        zb[317] = "Du bist gestorben";
        zb[318] = " ist dem Team beigetreten";
        zb[319] = "Dein Team wurde zerstört";
        zb[320] = "Du hast das Team verlassen";
        zb[321] = " hat das Team verlassen";
        zb[322] = "Jemand hat dein Token gestohlen :>";
        zb[323] = "Suche dir ein Server aus";
        zb[324] = "Spieler";
        zb[325] = "alle Spieler";
        zb[326] = "Spieler in diesem Modus";
        zb[327] = "Bald verfügbar...";
        document.getElementById("nickname_input").placeholder = "Spitzname";
        ut[0] = ["Du wurdest ohne Grund getötet"];
        ut[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
        ut[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
        ut[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
        ut[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
        ut[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
        ut[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
        ut[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
        ut[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
        ut[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
        ut[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
        ut[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
        ut[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
        ut[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
        ut[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
        ut[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
        ut[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
        ut[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
        ut[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
        ut[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
        ut[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
        ut[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
        ᐃᐃⲆΔΔ = "Uuunnnggg";
        ᐃⲆⵠᐃΔᐃΔ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
    }
    const cb = 18;
    const mb = 14;
    const pb = 3;
    function Cb(b, c, d, e, f, g) {
        const a = (1013904223 + (47707 + f) * 1664525) % 4294967296;
        const h = (16 << (g >> 8 & 255)) + (0 << (g & 255)) + (24 << (g >> 24 & 255)) + (8 << (g >> 16 & 255));
        return (12345 + (27234 + (tb((24 << (b >> 8 & 255)) + (0 << (b >> 24 & 255)) + (16 << (b >> 16 & 255)) + (8 << (b & 255)), c ^ 30897, (0 << (d & 255)) + (16 << (d >> 8 & 255)) + (24 << (d >> 16 & 255)) + (8 << (d >> 24 & 255)), e ^ 45677) ^ Cr(a, h))) * 1103515245) % 2147483648;
    }
    function Tb() {
        zb[184] = ["You feel a great power emanating from this orb"];
        ut[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        zb[328] = " BACK TO THE GAME";
        zb[329] = " Share on Twitter";
        zb[330] = " Share on Facebook";
        zb[331] = "You can buy items on the shop in the next game with your points";
        zb[332] = "points";
        zb[333] = "Score";
        zb[334] = "Kill";
        zb[335] = "Days survived";
        zb[336] = "Building method: Free. Press G to change";
        zb[337] = "Building method: Grid. Press G to change";
        zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        zb[7] = ["Ręka"];
        zb[140] = ["Ziemia", "Brudna!"];
        zb[126] = ["Piasek", "Mam go w oczach!"];
        zb[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
        zb[108] = ["Kamień", "Także nazywany skałą"];
        zb[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
        zb[112] = ["Diament", "Co z nim zrobisz?"];
        zb[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
        zb[131] = ["Mąka", "Używana w gotowaniu"];
        zb[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
        zb[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
        zb[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
        zb[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
        zb[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
        zb[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
        zb[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
        zb[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
        zb[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
        zb[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
        zb[201] = ["Girlanda", "Idealna do dekorowania dachów"];
        zb[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        zb[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
        zb[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        zb[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
        zb[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        zb[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
        zb[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        zb[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
        zb[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
        zb[194] = ["Kolczasty krzew", "Kłuje!"];
        zb[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
        zb[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
        zb[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
        zb[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
        zb[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
        zb[178] = ["Skóra", "Jesteś fabryką chleba"];
        zb[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
        zb[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
        zb[139] = ["Łuski", "Pachnie jak ryba!"];
        zb[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
        zb[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
        zb[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
        zb[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
        zb[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
        zb[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
        zb[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
        zb[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
        zb[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
        zb[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
        zb[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        zb[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        zb[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
        zb[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
        zb[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
        zb[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
        zb[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
        zb[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        zb[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        zb[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        zb[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
        zb[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
        zb[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
        zb[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
        zb[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
        zb[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
        zb[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
        zb[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
        zb[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
        zb[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
        zb[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
        zb[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        zb[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        zb[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        zb[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
        zb[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
        zb[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
        zb[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
        zb[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
        zb[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
        zb[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
        zb[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
        zb[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
        zb[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
        zb[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
        zb[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
        zb[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
        zb[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
        zb[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
        zb[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
        zb[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
        zb[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        zb[185] = ["Smocza kula", "Zdobyta podczas zadania"];
        zb[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
        zb[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
        zb[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
        zb[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
        zb[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        zb[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        zb[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        zb[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
        zb[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
        zb[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
        zb[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
        zb[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
        zb[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
        zb[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
        zb[120] = ["Papier", "Używany w tworzeniu książki"];
        zb[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
        zb[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
        zb[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
        zb[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
        zb[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
        zb[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
        zb[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
        zb[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
        zb[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
        zb[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
        zb[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
        zb[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
        zb[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
        zb[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
        zb[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
        zb[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
        zb[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
        zb[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
        zb[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
        zb[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
        zb[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
        zb[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
        zb[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
        zb[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
        zb[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
        zb[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        zb[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        zb[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
        zb[300] = "Nie możesz dołączyć do tego serwera";
        zb[301] = "Wyrzucony: ";
        zb[302] = "Twój klucz jest aktualnie używany przez innego gracza";
        zb[303] = "Twój klucz jest nieprawidłowy";
        zb[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
        zb[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
        zb[306] = "Przeżyłeś 1 dzień";
        zb[307] = "Przeżyłeś ";
        zb[308] = " dni";
        zb[309] = "Jesteś martwy ;-;";
        zb[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
        zb[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
        zb[312] = "Źródło jest puste";
        zb[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
        zb[314] = " jest martwy";
        zb[315] = "To nie jest właściwe narzędzie";
        zb[316] = "Dołączyłeś do drużyny";
        zb[317] = "Jesteś martwy";
        zb[318] = " dołączył do drużyny";
        zb[319] = "Twoja drużyna została zniszczona";
        zb[320] = " Opuściłeś drużynę";
        zb[321] = " opuścił drużynę";
        zb[322] = "Ktoś ukradł twój żeton :>";
        zb[323] = "Wybierz serwer";
        zb[324] = "graczy";
        zb[325] = "wszystkich graczy";
        zb[326] = "graczy w tym trybie";
        zb[327] = "Już wkrótce...";
        document.getElementById("nickname_input").placeholder = "Przydomek";
        ut[0] = ["Zostałeś zabity bez powodu"];
        ut[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
        ut[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
        ut[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
        ut[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
        ut[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
        ut[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
        ut[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
        ut[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
        ut[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
        ut[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
        ut[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
        ut[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
        ut[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
        ut[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
        ut[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
        ut[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
        ut[17] = ["Twoja skóra odpada, słońce cię zabija."];
        ut[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
        ut[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
        ut[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
        ut[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
        ᐃᐃⲆΔΔ = "Uuunnnggg";
        ᐃⲆⵠᐃΔᐃΔ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
    }
    function fb() {
        zb[184] = ["You feel a great power emanating from this orb"];
        ut[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        zb[328] = " RETOUR AU JEU";
        zb[329] = " Partage sur Twitter";
        zb[330] = " Partage sur Facebook";
        zb[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
        zb[332] = "points";
        zb[333] = "Score";
        zb[334] = "Tués";
        zb[335] = "Jours survécus";
        zb[336] = "Mode de construction: Libre. Appuie sur G pour changer";
        zb[337] = "Mode de construction: Grille. Appuie sur G pour changer";
        zb[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
        zb[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
        zb[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
        zb[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quêtes";
        document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
        document.getElementById("constraintquest").innerHTML = " Contraintes";
        document.getElementById("claim_rewards").innerHTML = " Résultat";
        document.getElementById("rewardquest").innerHTML = " Récompenses";
        document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
        document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
        document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
        document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
        document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
        document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
        document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
        zb[7] = ["Main"];
        zb[140] = ["Terre", "C'est sale!"];
        zb[126] = ["Sable", "J'en ai dans les yeux"];
        zb[109] = ["Bois", "Tu n'en auras jamais trop!"];
        zb[108] = ["Pierre", "Aussi appelée roche"];
        zb[111] = ["Or", "Sois généreux, donne en aux autres"];
        zb[112] = ["Diamant", "Comme tes yeux! wesh"];
        zb[121] = ["Améthyste", "C'est Mauve comme Lapa"];
        zb[131] = ["Farine", "Utile pour la cuisine"];
        zb[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
        zb[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
        zb[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
        zb[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
        zb[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
        zb[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
        zb[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
        zb[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
        zb[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
        zb[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
        zb[201] = ["Guirlandes", "Utilisable sur les toits"];
        zb[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
        zb[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
        zb[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        zb[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
        zb[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        zb[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
        zb[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
        zb[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
        zb[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
        zb[194] = ["Ronces", "Ça pique!"];
        zb[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
        zb[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
        zb[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
        zb[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
        zb[2] = ["Peau de lapin", "Vous êtes un monstre"];
        zb[178] = ["Fourrure blanche", "Tu es une usine à pain"];
        zb[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
        zb[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
        zb[139] = ["Écailles", "Ça sent le poisson!"];
        zb[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
        zb[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
        zb[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
        zb[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
        zb[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
        zb[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
        zb[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
        zb[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
        zb[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
        zb[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
        zb[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
        zb[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
        zb[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
        zb[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
        zb[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
        zb[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
        zb[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
        zb[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
        zb[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
        zb[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
        zb[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
        zb[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
        zb[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
        zb[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
        zb[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
        zb[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
        zb[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
        zb[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
        zb[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
        zb[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
        zb[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
        zb[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
        zb[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
        zb[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
        zb[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
        zb[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
        zb[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
        zb[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
        zb[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
        zb[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
        zb[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
        zb[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
        zb[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
        zb[185] = ["Orbe du Dragon", "Donné en Quête"];
        zb[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
        zb[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
        zb[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
        zb[177] = ["Gemme bleue", "Pour les gens trop gentils"];
        zb[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
        zb[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
        zb[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
        zb[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
        zb[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
        zb[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
        zb[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
        zb[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
        zb[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
        zb[29] = ["Sac", "Plus de place dans ton inventaire!"];
        zb[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
        zb[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
        zb[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
        zb[148] = ["Cadenas", "Pour verrouiller un coffre"];
        zb[158] = ["Clé", "Pour déverrouiller un coffre"];
        zb[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
        zb[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
        zb[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
        zb[190] = ["Toit", "Te cache un peu et te réchauffe"];
        zb[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
        zb[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
        zb[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
        zb[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
        zb[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
        zb[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
        zb[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
        zb[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
        zb[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
        zb[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
        zb[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
        zb[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
        zb[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
        zb[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
        zb[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
        zb[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
        zb[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
        zb[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        zb[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        zb[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
        zb[300] = "Tu ne peux pas rejoindre le serveur";
        zb[301] = "Expulsé: ";
        zb[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
        zb[303] = "Ta clé est fausse";
        zb[304] = "Tu as une vieille version, rafraichis tes caches";
        zb[305] = "Il n'y a plus de nouvelles ressources";
        zb[306] = "Tu as survécu 1 jour";
        zb[307] = "Tu as survécu ";
        zb[308] = " jours";
        zb[309] = "Tu es mort ;-;";
        zb[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
        zb[311] = "Le serveur est complet! Spam le bouton jouer";
        zb[312] = "Cette ressource est vide";
        zb[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
        zb[314] = " est mort";
        zb[315] = "Ce n'est pas le bon outil";
        zb[316] = "Tu as rejoins une équipe";
        zb[317] = "Tu es mort";
        zb[318] = " a rejoint l'équipe";
        zb[319] = "Ton équipe a été détruite";
        zb[320] = "Tu as quitté l'équipe";
        zb[321] = " a quitté l'équipe";
        zb[322] = "Quelqu'un a volé ton token :>";
        zb[323] = "Choisis un serveur";
        zb[324] = "joueurs";
        zb[325] = "joueurs";
        zb[326] = "joueurs dans ce mode";
        zb[327] = "Bientôt...";
        document.getElementById("nickname_input").placeholder = "Surnom";
        ut[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
        ut[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
        ut[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
        ut[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
        ut[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
        ut[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
        ut[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
        ut[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
        ut[8] = ["Cet ours voulait juste un câlin."];
        ut[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
        ut[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
        ut[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
        ut[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
        ut[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
        ut[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
        ut[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
        ut[16] = ["Un kraken a 'kraké' tes os."];
        ut[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
        ut[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
        ut[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
        ut[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
        ut[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
        ᐃᐃⲆΔΔ = "Uuunnnggg";
        ᐃⲆⵠᐃΔᐃΔ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
    }
    var zb = [];
    const yb = 256;
    for (var wb = 0; wb < 344; wb++) {
        zb[wb] = "";
    }
    var ut = [];
    const Ab = gs;
    $(".md-languages").on("click", function () {
        $(this).toggleClass("active");
    });
    const kb = 9;
    function xb(a) {
        const b = Math.random;
        const c = [];
        Math.random = function () {
            for (let a = 0; a < 2679; a++) {
                c.push(a);
            }
            return b();
        };
    }
    $(".md-languages ul li").on("click", function () {
        var a = $(this).text();
        if (a === "English") {
            kt();
        } else if (a === "Français") {
            fb();
        } else if (a === "Deutsch") {
            vb();
        } else if (a === "Español") {
            bb();
        } else if (a === "Português") {
            eb();
        } else if (a === "Русский") {
            pt();
        } else if (a === "Polski") {
            Tb();
        }
        ⲆⵠⲆⵠⵠ = [];
        nx.ⵠᐃΔⵠ.label = [];
        $(".md-languages ul li").removeClass("active");
        $(this).addClass("active");
        $(".md-languages label button").text(a);
    });
    const Jb = 4;
    const Bb = 14;
    Dr = "EN";
    var Db = navigator.language || navigator.userLanguage;
    const Ib = 2;
    switch (Db) {
        case "ru":
            Dr = "RU";
            break;
        case "en":
            Dr = "EN";
            break;
        case "es":
            Dr = "SP";
            break;
        case "fr":
            Dr = "FR";
            break;
        case "pl":
            Dr = "PL";
            break;
        case "de":
            Dr = "DE";
            break;
        case "pt":
            Dr = "PT";
    }
    var Eb;
    if (Dr === "FR") {
        $(".md-languages label button").text("Français");
        Eb = fb;
    } else if (Dr === "PL") {
        $(".md-languages label button").text("Polski");
        Eb = Tb;
    } else if (Dr === "PT") {
        $(".md-languages label button").text("Português");
        Eb = eb;
    } else if (Dr === "SP") {
        $(".md-languages label button").text("Español");
        Eb = bb;
    } else if (Dr === "RU") {
        $(".md-languages label button").text("Русский");
        Eb = pt;
    } else if (Dr === "DE") {
        $(".md-languages label button").text("Deutsch");
        Eb = vb;
    } else {
        $(".md-languages label button").text("English");
        Eb = kt;
    }
    const vt = 17;
    const Qb = 0;
    const _b = 11;
    function Fb(a, b) {
        Zi(cx, a, b);
        const c = qt(dx[0], dx[1], dx[0], dx[1], dx[0], dx[1]);
        const d = gt(dx[0], dx[1], dx[0], dx[1], dx[0], dx[1]);
        return (16 << ((c ^ d) >> 16 & 255)) + (24 << ((c ^ d) & 255)) + (0 << ((c ^ d) >> 24 & 255)) + (8 << ((c ^ d) >> 8 & 255));
    }
    const Rb = 10;
    var jb;
    jb = {
        ᐃⲆᐃⲆⵠᐃᐃᐃΔ: "img/logo.png",
        ⵠΔⲆⵠᐃⲆΔ: "img/mapday.png",
        ΔΔᐃΔΔⲆⲆ: "img/mapnight.png",
        ᐃᐃᐃⵠΔΔⵠⵠⲆ: "img/bigzday.png",
        ΔⲆⲆᐃⲆΔⲆᐃⵠ: "img/bigznight.png",
        ΔΔᐃΔⲆΔⲆ: "img/bigday-river1.png",
        ⲆΔⵠΔΔᐃΔΔΔ: "img/bigday-lake.png",
        ΔⲆⲆᐃⲆⵠΔ: "img/bigday-berry.png",
        ⵠΔᐃⲆΔⲆΔ: "img/bigday-stone1.png",
        ᐃⲆᐃᐃⵠΔᐃ: "img/bigday-stone2.png",
        ⵠΔⲆⲆᐃᐃΔ: "img/bigday-gold1.png",
        ᐃΔᐃⲆⲆᐃΔ: "img/bigday-gold2.png",
        ᐃᐃⵠΔᐃΔΔ: "img/bigday-emerald1.png",
        ⵠΔⲆᐃⵠⵠᐃ: "img/bigday-emerald2.png",
        ⵠΔⵠΔᐃΔⵠ: "img/bigday-amethyst.png",
        ΔΔⲆⵠⵠΔⲆ: "img/bigday-bear.png",
        ⲆⵠⵠⵠΔⲆⵠ: "img/bigday-cave.png",
        ᐃΔΔⵠⵠᐃⵠ: "img/bigday-diamond.png",
        ΔⵠΔⵠᐃᐃⲆ: "img/bigday-island.png",
        ⲆᐃΔⲆΔᐃⲆ: "img/bigday-reidite.png",
        ⵠΔⲆᐃⲆΔᐃ: "img/bigday-spider.png",
        ᐃᐃΔΔⵠⵠΔ: "img/bigday-wolf.png",
        ⲆⲆᐃⲆⵠᐃᐃ: "img/bigday-fir-tree.png",
        ΔΔΔⲆΔΔΔ: "img/bigday-fox.png",
        ⵠⵠⲆᐃⲆᐃᐃ: "img/bigday-kraken.png",
        ⵠⵠⵠᐃΔⵠᐃ: "img/bigday-piranha.png",
        ⲆᐃᐃᐃΔᐃᐃ: "img/bigday-cactus.png",
        ⵠⲆᐃᐃⲆⵠⵠ: "img/bigday-magma.png",
        ⵠⲆⵠⲆⲆΔⵠ: "img/bigday-river1.png",
        ⲆᐃᐃᐃⵠⵠⵠⵠΔ: "img/bignight-lake.png",
        ⲆⲆⵠⵠⲆΔⲆᐃⲆ: "img/bignight-berry.png",
        ΔΔⲆᐃΔᐃⲆ: "img/bignight-stone1.png",
        ⵠⵠΔΔⲆⵠᐃ: "img/bignight-stone2.png",
        ⲆⲆΔᐃⵠⵠΔ: "img/bignight-gold1.png",
        ΔΔⵠⲆᐃᐃⵠ: "img/bignight-gold2.png",
        ⲆᐃᐃᐃⲆⲆᐃ: "img/bignight-emerald1.png",
        ΔⵠⵠⲆⲆΔΔ: "img/bignight-emerald2.png",
        ⵠⵠᐃΔⲆⲆΔ: "img/bignight-amethyst.png",
        ⵠΔΔΔⵠⲆᐃ: "img/bignight-bear.png",
        ᐃⵠΔΔΔΔⲆ: "img/bignight-cave.png",
        ΔⵠⲆΔⵠᐃΔ: "img/bignight-diamond.png",
        ⲆΔⲆᐃⲆⵠⵠ: "img/bignight-island.png",
        ΔⲆⲆΔⵠⲆΔ: "img/bignight-reidite.png",
        ⵠᐃⵠⲆᐃᐃΔ: "img/bignight-spider.png",
        ⲆΔΔⲆⵠΔᐃ: "img/bignight-wolf.png",
        ⲆⲆᐃᐃⵠΔⲆ: "img/bignight-fir-tree.png",
        ⵠᐃⵠᐃⲆⵠᐃ: "img/bignight-fox.png",
        ᐃΔᐃⲆⲆᐃⵠ: "img/bignight-kraken.png",
        ⵠᐃᐃᐃⲆΔⲆ: "img/bignight-piranha.png",
        ᐃΔⲆⲆΔᐃΔ: "img/bignight-cactus.png",
        ΔᐃᐃΔⵠᐃΔ: "img/bignight-magma.png",
        ⲆᐃΔⲆⲆΔⵠ: "img/bigday-desert.png",
        Ⲇᐃⵠⵠⵠⵠᐃ: "img/bigday-winter.png",
        ᐃΔⵠⵠⲆΔⲆ: "img/bigday-lava.png",
        ⵠᐃΔⵠᐃᐃᐃ: "img/bigday-forest.png",
        ⵠᐃΔⲆᐃⵠⵠ: "img/bignight-desert.png",
        ᐃΔᐃⵠⵠⲆⲆ: "img/bignight-winter.png",
        ᐃⲆⵠΔⵠⲆΔ: "img/bignight-lava.png",
        ᐃᐃⵠⵠᐃⲆⵠ: "img/bignight-forest.png",
        ΔΔΔⵠⵠⵠⲆ: "img/day-river-wave.png",
        ΔⵠⲆᐃⵠΔΔ: "img/night-river-wave.png",
        ᐃᐃᐃⲆⲆⵠⵠ: "img/day-fog0.png",
        ⵠⲆᐃᐃΔⵠᐃ: "img/day-fog1.png",
        ᐃⵠⵠᐃⵠΔΔ: "img/day-fog2.png",
        ⲆⲆΔᐃᐃⵠΔ: "img/night-fog0.png",
        ΔΔΔⲆⲆⵠⲆ: "img/night-fog1.png",
        ᐃⲆᐃᐃᐃᐃⲆ: "img/night-fog2.png",
        ⵠΔΔⲆᐃⵠⲆ: "img/day-fogdesert0.png",
        ᐃᐃⲆⵠᐃΔᐃ: "img/day-fogdesert1.png",
        ⵠⲆᐃⲆΔⵠΔ: "img/day-fogdesert2.png",
        ⵠΔⲆΔΔⲆⲆ: "img/night-fogdesert0.png",
        ⲆᐃⲆᐃᐃΔΔ: "img/night-fogdesert1.png",
        Δᐃᐃᐃⵠⵠⵠ: "img/night-fogdesert2.png",
        ᐃΔΔᐃᐃⲆⵠ: "img/day-cross-server.png",
        ⵠⲆΔᐃᐃⵠᐃ: "img/day-here-server.png",
        ᐃⵠΔⲆⵠⲆᐃ: "img/day-finish-server.png",
        ⵠΔⲆΔⲆⵠᐃ: "img/day-item-server.png",
        ΔⵠⵠΔΔΔⲆ: "img/day-skull-server.png",
        ⲆⲆΔⵠⵠⲆΔ: "img/night-cross-server.png",
        ᐃΔΔΔᐃⲆⲆ: "img/night-here-server.png",
        ⵠⲆⲆᐃΔⲆΔ: "img/night-finish-server.png",
        ⲆᐃΔᐃᐃᐃᐃ: "img/night-item-server.png",
        ΔⵠᐃᐃⵠⲆΔ: "img/night-skull-server.png",
        ⵠΔⲆΔᐃⵠⵠ: "img/day-reidite0.png",
        ⲆⲆΔⵠⵠⵠⵠ: "img/night-reidite0.png",
        ⲆⵠⲆΔⲆᐃΔ: "img/day-reidite1.png",
        ΔᐃᐃᐃΔΔⵠ: "img/night-reidite1.png",
        ᐃΔⲆⵠᐃⲆᐃ: "img/day-reidite2.png",
        ᐃⲆⵠⵠⲆⲆⵠ: "img/night-reidite2.png",
        ⲆᐃⲆᐃᐃᐃᐃ: "img/day-lava1.png",
        ᐃⵠᐃᐃᐃⲆᐃ: "img/night-lava1.png",
        ᐃᐃⲆᐃⵠⵠⲆ: "img/day-lava2.png",
        ᐃΔᐃⲆΔⵠᐃ: "img/night-lava2.png",
        ⲆᐃⵠΔⵠΔⲆ: "img/day-lava3.png",
        ⲆᐃⵠᐃΔΔΔ: "img/night-lava3.png",
        ΔΔΔⵠᐃⵠⲆ: "img/day-lava4.png",
        ΔⲆⵠⵠΔᐃᐃ: "img/night-lava4.png",
        ᐃΔᐃⲆΔᐃᐃ: "img/day-lava5.png",
        ᐃΔⵠᐃᐃⵠⲆ: "img/night-lava5.png",
        ⲆΔᐃᐃⲆᐃⵠ: "img/day-lava6.png",
        ⵠΔⲆⵠΔⵠⵠ: "img/night-lava6.png",
        ⲆΔΔΔΔᐃᐃ: "img/day-lava-ground1.png",
        ΔᐃΔᐃⲆᐃⵠ: "img/night-lava-ground1.png",
        ᐃᐃⲆⲆⲆⵠⵠ: "img/day-lava-ground2.png",
        ⵠⲆⵠᐃΔⲆᐃ: "img/night-lava-ground2.png",
        ΔⵠⲆⲆⵠᐃⲆ: "img/day-lava-ground3.png",
        ᐃΔⵠΔᐃΔᐃ: "img/night-lava-ground3.png",
        ⲆᐃⵠΔⲆΔⵠ: "img/day-lava-ground4.png",
        ⵠⲆⵠⵠⲆⲆⲆ: "img/night-lava-ground4.png",
        ⲆΔᐃⵠᐃΔⲆ: "img/day-lava-ground5.png",
        ⲆⵠⵠᐃⵠᐃΔ: "img/night-lava-ground5.png",
        ⵠⵠᐃᐃᐃⵠΔ: "img/day-lava-ground6.png",
        ᐃΔⵠᐃⵠᐃΔ: "img/night-lava-ground6.png",
        ΔⵠⲆⲆΔᐃⲆ: "img/day-fire-mob.png",
        ⵠΔⲆᐃᐃⲆⵠ: "img/night-fire-mob.png",
        ᐃⵠΔΔΔᐃⵠ: "img/hurt-fire-mob.png",
        ⵠΔⵠⵠⲆᐃⲆ: "img/day-diamond-protection.png",
        ΔΔⲆⲆΔΔⵠ: "img/night-diamond-protection.png",
        ⲆᐃⵠΔⲆΔⲆ: "img/day-hand-diamond-protection.png",
        ⵠⵠⵠᐃⵠⲆᐃ: "img/night-hand-diamond-protection.png",
        ⲆⵠΔⵠⵠᐃⲆ: "img/inv-diamond-protection-out.png",
        ΔⲆⲆΔⵠⵠΔ: "img/inv-diamond-protection-in.png",
        ΔᐃᐃΔⲆⵠⵠ: "img/inv-diamond-protection-click.png",
        ⲆⵠⵠⵠⲆⲆⲆ: "img/day-amethyst-protection.png",
        ΔΔⲆⲆⵠΔⵠ: "img/night-amethyst-protection.png",
        ⲆⲆⲆΔⵠⲆⵠⵠⵠ: "img/day-hand-amethyst-protection.png",
        ΔⲆⵠᐃΔⲆⲆⵠⲆ: "img/night-hand-amethyst-protection.png",
        ⵠᐃΔΔᐃⵠⵠ: "img/inv-amethyst-protection-out.png",
        ⲆᐃⵠⲆᐃⲆⵠ: "img/inv-amethyst-protection-in.png",
        ⵠᐃΔⵠᐃᐃΔ: "img/inv-amethyst-protection-click.png",
        ⵠⵠΔⵠⵠⵠⲆ: "img/day-reidite-sword.png",
        ΔⵠᐃⲆⵠΔᐃ: "img/night-reidite-sword.png",
        ᐃⲆᐃⵠΔⲆⵠ: "img/inv-reidite-sword-out.png",
        ΔΔⵠⲆⵠⲆⵠ: "img/inv-reidite-sword-in.png",
        ⲆⵠᐃⲆᐃᐃΔ: "img/inv-reidite-sword-click.png",
        ΔⵠⲆⲆⵠᐃΔ: "img/inv-reidite-out.png",
        ᐃⲆΔΔⲆⲆⵠ: "img/inv-reidite-in.png",
        ᐃΔᐃΔⵠⵠᐃ: "img/inv-reidite-click.png",
        ᐃⵠΔⵠΔⵠᐃ: "img/inv-flame-out.png",
        ⲆᐃΔΔᐃΔⲆ: "img/inv-flame-in.png",
        ΔΔΔΔⵠᐃⲆ: "img/inv-flame-click.png",
        ⵠⵠⲆᐃⵠΔᐃ: "img/day-magma-buble0.png",
        ⵠᐃⲆⵠᐃΔⲆ: "img/night-magma-buble0.png",
        ⵠΔⵠΔΔⲆⲆ: "img/day-magma-buble1.png",
        ⲆΔⵠΔΔᐃⵠ: "img/night-magma-buble1.png",
        ⲆⲆⵠΔⲆⲆⲆ: "img/day-magma-buble2.png",
        ⲆᐃᐃᐃⵠΔᐃ: "img/night-magma-buble2.png",
        ΔⲆⲆⵠΔᐃⵠ: "img/day-lava-dragon.png",
        ΔᐃΔᐃΔΔΔ: "img/night-lava-dragon.png",
        ΔᐃᐃⲆᐃⲆⲆⵠᐃ: "img/day-fire-dragon.png",
        ΔⲆⵠⵠΔΔⲆⵠΔ: "img/night-fire-dragon.png",
        ⲆⲆⵠΔⵠΔᐃ: "img/hurt-lava-dragon.png",
        ⵠΔΔΔⵠΔΔ: "img/day-lava-wing-left.png",
        ⵠᐃΔᐃΔⲆⲆ: "img/night-lava-wing-left.png",
        ΔⲆΔⲆᐃⵠⵠ: "img/day-lava-wing-right.png",
        ᐃΔⵠⵠⵠⲆᐃ: "img/night-lava-wing-right.png",
        ⲆⲆⵠΔΔⲆᐃ: "img/hurt-lava-wing-left.png",
        ᐃⲆΔᐃᐃΔⵠ: "img/hurt-lava-wing-right.png",
        ΔΔᐃᐃⵠᐃᐃ: "img/day-reidite-spear.png",
        ᐃⵠⲆⲆᐃᐃΔ: "img/night-reidite-spear.png",
        ⵠΔⲆΔⲆⵠΔ: "img/inv-reidite-spear-out.png",
        ⲆⵠΔΔΔΔⲆ: "img/inv-reidite-spear-in.png",
        ⵠᐃΔᐃᐃⲆΔ: "img/inv-reidite-spear-click.png",
        ⲆⲆⵠⵠⵠⲆⵠ: "img/day-reidite-helmet.png",
        ⵠᐃⵠⵠⲆᐃⲆ: "img/night-reidite-helmet.png",
        ᐃⵠᐃⵠⵠⲆᐃ: "img/inv-reidite-helmet-out.png",
        ⵠᐃΔⲆΔⲆⲆ: "img/inv-reidite-helmet-in.png",
        ᐃⲆⲆᐃᐃᐃΔ: "img/inv-reidite-helmet-click.png",
        ⲆΔΔᐃᐃⲆᐃ: "img/day-hand-reidite-protection.png",
        ⵠᐃⲆⵠⲆⵠⲆ: "img/night-hand-reidite-protection.png",
        ᐃΔⵠᐃⵠᐃⲆ: "img/day-reidite-protection.png",
        ⲆΔΔⵠⲆⵠⵠ: "img/night-reidite-protection.png",
        ᐃⵠᐃΔⲆⵠⵠ: "img/inv-reidite-protection-out.png",
        ᐃⵠΔⲆⲆⵠⵠ: "img/inv-reidite-protection-in.png",
        ᐃⵠΔΔᐃⵠⵠ: "img/inv-reidite-protection-click.png",
        ΔⲆᐃᐃⵠⵠⵠ: "img/day-lava-dragon-sword.png",
        ΔΔΔⵠⵠΔᐃ: "img/night-lava-dragon-sword.png",
        ⲆΔᐃᐃⵠΔⲆ: "img/inv-lava-dragon-sword-out.png",
        ᐃⲆᐃⵠᐃⲆⲆ: "img/inv-lava-dragon-sword-in.png",
        ΔᐃᐃΔᐃᐃⲆ: "img/inv-lava-dragon-sword-click.png",
        ᐃΔⵠᐃΔⵠᐃ: "img/day-lava-spear.png",
        ΔⲆⵠⲆⲆᐃⲆ: "img/night-lava-spear.png",
        ᐃᐃᐃΔᐃⲆⵠ: "img/inv-lava-spear-out.png",
        ⵠⲆΔⲆⵠⵠᐃ: "img/inv-lava-spear-in.png",
        ΔⲆⲆⵠΔⲆΔ: "img/inv-lava-spear-click.png",
        ΔⲆⲆΔⲆⵠⵠ: "img/day-lava-helmet.png",
        ᐃᐃⵠⲆⲆⲆⲆ: "img/night-lava-helmet.png",
        ⵠⵠΔΔⵠᐃⵠ: "img/inv-lava-helmet-out.png",
        ᐃⲆⵠΔᐃⵠⵠ: "img/inv-lava-helmet-in.png",
        ⲆⲆⲆᐃⵠᐃⵠ: "img/inv-lava-helmet-click.png",
        ⵠⲆⵠᐃⵠⲆᐃ: "img/day-witch-hat.png",
        ⲆΔⵠⵠⵠⲆⲆ: "img/night-witch-hat.png",
        ΔⲆⲆᐃΔⲆⵠ: "img/inv-witch-hat-out.png",
        ΔⵠΔᐃⵠⵠᐃ: "img/inv-witch-hat-in.png",
        ⲆᐃⲆᐃⲆᐃⲆ: "img/inv-witch-hat-click.png",
        ⵠᐃᐃⵠⵠΔᐃ: "img/day-nimbus2000.png",
        ᐃⲆⲆⵠⲆⵠΔ: "img/night-nimbus2000.png",
        ΔΔⵠⵠΔⲆᐃ: "img/inv-nimbus2000-out.png",
        ΔᐃⵠⲆᐃᐃⵠ: "img/inv-nimbus2000-in.png",
        ΔⲆⲆⵠᐃⵠᐃ: "img/inv-nimbus2000-click.png",
        ᐃⵠΔⵠᐃⲆⵠ: "img/day-accessory1-pacques.png",
        ᐃᐃΔⵠΔΔⵠ: "img/night-accessory1-pacques.png",
        ⲆΔⲆⵠⲆΔΔ: "img/day-accessory2-pacques.png",
        ⲆⲆⲆⲆⵠᐃⲆ: "img/night-accessory2-pacques.png",
        ⵠΔᐃᐃⲆⵠⲆ: "img/day-accessory3-pacques.png",
        ΔΔᐃΔΔᐃⵠ: "img/night-accessory3-pacques.png",
        ᐃⲆⵠⵠⲆⵠⵠ: "img/day-accessory5-pacques.png",
        ⲆᐃᐃᐃᐃΔⵠ: "img/night-accessory5-pacques.png",
        ⵠΔᐃᐃΔᐃΔ: "img/day-accessory6-pacques.png",
        ᐃΔⵠᐃⵠⲆⲆ: "img/night-accessory6-pacques.png",
        ΔΔⵠⲆΔΔⲆ: "img/day-accessory7-pacques.png",
        ΔⲆΔᐃΔⵠⵠ: "img/night-accessory7-pacques.png",
        ᐃⵠⲆΔⲆᐃᐃ: "img/day-accessory8-pacques.png",
        ⵠⲆⵠⵠⲆⲆⵠ: "img/night-accessory8-pacques.png",
        ⵠⵠΔⲆⲆⲆΔ: "img/day-bag-pacques.png",
        ⵠⵠⵠΔΔΔᐃ: "img/night-bag-pacques.png",
        ⲆⲆⲆⲆᐃⲆⲆ: "img/day-carrot.png",
        ⲆⵠⵠⲆⵠᐃⲆ: "img/night-carrot.png",
        ⵠⵠΔⵠⲆΔΔ: "img/day-carrot-dried.png",
        ᐃᐃΔⲆΔΔᐃ: "img/night-carrot-dried.png",
        ΔᐃⵠⲆᐃⵠⲆ: "img/day-tomato-herb.png",
        ΔᐃΔΔΔᐃᐃ: "img/night-tomato-herb.png",
        ⵠⲆᐃΔⲆᐃΔ: "img/day-tomato-herb-dried.png",
        ΔᐃⲆⵠⲆⲆᐃ: "img/night-tomato-herb-dried.png",
        ⵠⵠᐃⲆΔΔⵠ: "img/day-tomato.png",
        ⵠⵠΔᐃⵠⵠᐃ: "img/night-tomato.png",
        ΔⲆΔΔⵠΔⲆ: "img/inv-carrot-out.png",
        ⵠⵠⲆⲆⲆΔⲆ: "img/inv-carrot-in.png",
        ᐃΔΔᐃⲆΔⵠ: "img/inv-carrot-click.png",
        ΔᐃᐃᐃⵠⲆⵠ: "img/inv-tomato-out.png",
        ΔⲆΔΔΔᐃΔ: "img/inv-tomato-in.png",
        ΔⵠΔᐃΔⲆⵠ: "img/inv-tomato-click.png",
        ᐃΔⵠᐃⲆⲆΔ: "img/day-player0.png",
        ᐃⵠⵠⵠΔᐃⲆ: "img/night-player0.png",
        ⲆᐃᐃⲆᐃᐃΔ: "img/day-player1.png",
        ΔⲆᐃΔᐃᐃⲆ: "img/night-player1.png",
        ᐃⲆⲆᐃⵠⵠᐃ: "img/day-player2.png",
        ΔΔΔΔᐃⵠΔ: "img/night-player22.png",
        ΔⲆΔⵠΔΔⲆ: "img/day-player3.png",
        ᐃΔⲆΔⲆⲆⵠ: "img/night-player33.png",
        ⲆⲆⵠⲆⲆⵠⲆ: "img/day-player4.png",
        ᐃⵠⲆᐃΔⲆᐃ: "img/night-player4.png",
        ⲆⲆΔⲆΔᐃⵠ: "img/day-player5.png",
        ΔᐃᐃⲆΔΔΔ: "img/night-player5.png",
        ⲆᐃⲆΔⲆΔᐃ: "img/day-player6.png",
        ᐃᐃⵠΔΔᐃⵠ: "img/night-player6.png",
        ᐃΔⲆⵠⵠⵠᐃ: "img/day-player7.png",
        ⵠΔΔᐃΔⲆⵠ: "img/night-player7.png",
        ⲆⵠΔⵠⵠⵠⵠ: "img/day-player8.png",
        ⲆⵠⵠΔᐃⵠᐃ: "img/night-player8.png",
        ᐃΔΔΔΔⵠΔ: "img/day-player9.png",
        Ⲇᐃⵠⵠᐃⵠᐃ: "img/night-player9.png",
        ⲆⵠⲆⵠᐃΔⲆ: "img/day-player10.png",
        ΔⵠΔⲆᐃⵠᐃ: "img/night-player10.png",
        ⲆⵠⵠΔᐃⵠⵠ: "img/day-player11.png",
        ⵠΔᐃⵠⲆΔΔ: "img/night-player11.png",
        ⲆᐃⲆᐃⵠⲆⵠ: "img/day-player12.png",
        ΔⵠⲆⵠⵠΔΔ: "img/night-player12.png",
        ᐃᐃⲆᐃΔⵠᐃ: "img/day-player13.png",
        ΔᐃΔⲆⵠᐃᐃ: "img/night-player13.png",
        ᐃΔᐃⲆᐃᐃⲆ: "img/day-player14.png",
        ᐃⵠΔⵠΔᐃⲆ: "img/night-player14.png",
        ⲆⲆΔⵠΔⵠᐃ: "img/day-player15.png",
        ᐃᐃⲆᐃΔⲆⵠ: "img/night-player15.png",
        ΔᐃΔⵠΔᐃⲆ: "img/day-player16.png",
        ⲆⵠⵠΔᐃᐃᐃ: "img/night-player16.png",
        ⵠΔᐃᐃΔΔᐃ: "img/day-player17.png",
        ⵠᐃⵠⵠᐃⲆⵠ: "img/night-player17.png",
        ⵠⲆⵠⵠⵠⵠᐃ: "img/day-player18.png",
        ⵠᐃΔⵠⲆᐃΔ: "img/night-player18.png",
        ᐃⵠⵠⵠΔⲆᐃ: "img/day-player19.png",
        ᐃⲆⲆᐃΔΔΔ: "img/night-player19.png",
        ⲆΔΔΔⵠⵠΔ: "img/day-hand-player0.png",
        ⲆⲆⲆΔᐃΔⲆ: "img/night-hand-player0.png",
        ⵠⲆΔⵠΔᐃΔ: "img/day-hand-player1.png",
        ⲆⵠᐃⲆᐃΔⵠ: "img/night-hand-player1.png",
        ⲆᐃⵠΔⵠΔΔ: "img/day-hand-player2.png",
        ᐃⵠⲆⵠⲆⵠΔ: "img/night-hand-player22.png",
        ⲆⵠᐃΔᐃᐃⵠ: "img/day-hand-player3.png",
        ΔⵠᐃᐃⲆΔᐃ: "img/night-hand-player33.png",
        ⵠⲆᐃⲆⲆⵠᐃ: "img/day-hand-player4.png",
        ⵠᐃⲆΔⵠΔⲆ: "img/night-hand-player4.png",
        ⵠᐃᐃⲆⲆᐃⵠ: "img/day-hand-player5.png",
        ⲆⲆⲆᐃᐃᐃΔ: "img/night-hand-player5.png",
        ᐃᐃⵠⵠᐃⲆⲆ: "img/day-hand-player6.png",
        ⵠⲆᐃᐃᐃⵠⲆ: "img/night-hand-player6.png",
        Ⲇᐃᐃᐃᐃᐃᐃ: "img/day-hand-player7.png",
        ⲆⲆⵠⲆᐃᐃᐃ: "img/night-hand-player7.png",
        ᐃⲆⵠᐃⵠⵠΔ: "img/day-hand-player8.png",
        ᐃΔΔⲆᐃΔᐃ: "img/night-hand-player8.png",
        ⵠⲆⵠⵠΔⲆⲆ: "img/day-hand-player9.png",
        ΔᐃⲆΔᐃⵠΔ: "img/night-hand-player9.png",
        ΔⵠⲆΔᐃΔᐃ: "img/day-hand-player10.png",
        ᐃⵠᐃⲆⵠᐃⲆ: "img/night-hand-player10.png",
        ⲆᐃⵠΔⲆᐃΔ: "img/day-hand-player11.png",
        ⲆᐃⵠΔⵠᐃΔ: "img/night-hand-player11.png",
        ⵠⵠᐃⲆⵠⲆⵠ: "img/day-hand-player12.png",
        ⲆᐃⲆΔⵠⵠⵠ: "img/night-hand-player12.png",
        ᐃᐃᐃⲆᐃⵠΔ: "img/day-hand-player13.png",
        ᐃⲆⲆΔⵠᐃᐃ: "img/night-hand-player13.png",
        ᐃⲆᐃⲆΔΔⵠ: "img/day-hand-player14.png",
        ⵠΔᐃΔᐃⲆᐃ: "img/night-hand-player14.png",
        ΔⲆΔᐃⵠΔⲆ: "img/day-hand-player15.png",
        ⵠΔΔⲆⲆⵠᐃ: "img/night-hand-player15.png",
        ᐃⵠᐃⲆⲆᐃⵠ: "img/day-hand-player16.png",
        ᐃΔΔᐃⵠᐃⲆ: "img/night-hand-player16.png",
        ⲆⵠⵠΔΔⵠⵠ: "img/day-hand-player17.png",
        ⲆⵠⵠⲆⵠⲆⲆ: "img/night-hand-player17.png",
        ᐃᐃⵠⲆᐃⵠⵠ: "img/day-hand-player18.png",
        ⲆᐃΔⵠᐃⲆⵠ: "img/night-hand-player18.png",
        ᐃⲆᐃⵠⵠⲆⲆ: "img/day-hand-player19.png",
        ᐃΔΔΔⵠΔⵠ: "img/night-hand-player19.png",
        ᐃⲆⲆᐃⵠⵠⲆ: "img/day-accessory4.png",
        ⲆᐃΔᐃΔᐃᐃ: "img/night-accessory4.png",
        ΔᐃⲆⲆΔΔΔ: "img/day-accessory9.png",
        ⲆⲆⵠᐃΔΔᐃ: "img/night-accessory9.png",
        ⵠᐃᐃᐃΔΔⲆ: "img/day-accessory10.png",
        ⲆᐃⵠΔΔᐃⵠ: "img/night-accessory10.png",
        ⵠⲆⲆⲆᐃᐃᐃ: "img/day-accessory11.png",
        ⲆⵠⲆⵠⲆⵠΔ: "img/night-accessory11.png",
        ᐃᐃⵠⲆⵠⲆΔ: "img/day-accessory12.png",
        ⵠⲆⲆᐃᐃⵠΔ: "img/night-accessory12.png",
        ⵠⲆᐃⵠⲆΔᐃ: "img/day-bag.png",
        ΔΔⲆᐃΔΔᐃ: "img/night-bag.png",
        ᐃΔᐃⲆᐃᐃⵠ: "img/inv-bag-out.png",
        ΔⲆⲆᐃΔΔΔ: "img/inv-bag-in.png",
        ⲆΔⵠⲆⲆⲆⵠ: "img/inv-bag-click.png",
        ⲆⵠΔⵠⵠⵠΔ: "img/day-pitchfork.png",
        ⲆⲆⲆᐃⵠⵠᐃ: "img/night-pitchfork.png",
        ⵠΔⲆⲆⵠⲆΔ: "img/inv-pitchfork-out.png",
        ΔΔᐃΔⵠⵠⲆ: "img/inv-pitchfork-in.png",
        ⵠΔᐃⲆᐃᐃⵠ: "img/inv-pitchfork-click.png",
        ⵠΔⵠⲆⵠⲆⲆ: "img/inv-wood-spike-door-out.png",
        ⲆΔΔⲆΔΔⵠ: "img/inv-wood-spike-door-in.png",
        ΔᐃⲆᐃⲆᐃⲆ: "img/inv-wood-spike-door-click.png",
        ᐃᐃⵠⵠΔᐃΔ: "img/inv-stone-spike-door-out.png",
        ⵠᐃΔᐃΔⵠⲆ: "img/inv-stone-spike-door-in.png",
        ⲆⲆΔΔⵠⵠΔ: "img/inv-stone-spike-door-click.png",
        ⵠⲆᐃⵠⵠᐃᐃ: "img/inv-gold-spike-door-out.png",
        ᐃⲆᐃⵠⵠᐃΔ: "img/inv-gold-spike-door-in.png",
        ⵠⲆΔᐃⵠⵠⵠ: "img/inv-gold-spike-door-click.png",
        ΔΔΔⵠᐃΔΔ: "img/inv-diamond-spike-door-out.png",
        ΔΔᐃⵠᐃᐃⵠ: "img/inv-diamond-spike-door-in.png",
        ᐃⵠⲆⵠᐃⵠⲆ: "img/inv-diamond-spike-door-click.png",
        ⲆⲆΔΔⵠΔᐃ: "img/inv-amethyst-spike-door-out.png",
        ΔΔΔⵠΔⲆⵠ: "img/inv-amethyst-spike-door-in.png",
        ⲆⵠΔⲆⲆⲆᐃ: "img/inv-amethyst-spike-door-click.png",
        ⵠⲆⲆΔᐃᐃΔ: "img/day-wood-spike-door.png",
        ⵠⵠⵠΔⲆⲆⵠ: "img/night-wood-spike-door.png",
        ᐃⲆᐃᐃᐃⲆⲆ: "img/day-stone-spike-door.png",
        ΔΔⵠᐃⲆᐃⲆ: "img/night-stone-spike-door.png",
        ⵠⲆⵠⵠᐃⵠΔ: "img/day-gold-spike-door.png",
        ΔⵠᐃΔΔΔΔ: "img/night-gold-spike-door.png",
        ᐃΔᐃΔΔⵠᐃ: "img/day-diamond-spike-door.png",
        ΔΔΔΔⲆΔⲆ: "img/night-diamond-spike-door.png",
        ⲆΔⲆⲆᐃΔΔ: "img/day-amethyst-spike-door.png",
        ᐃⲆᐃᐃΔᐃᐃ: "img/night-amethyst-spike-door.png",
        ⲆⵠᐃΔⵠᐃΔ: "img/inv-reidite-spike-door-out.png",
        ᐃⵠⲆⵠΔΔⲆ: "img/inv-reidite-spike-door-in.png",
        ⲆᐃⲆᐃⲆΔⲆ: "img/inv-reidite-spike-door-click.png",
        ᐃᐃⵠⲆⲆΔᐃ: "img/inv-reidite-door-out.png",
        ΔⲆΔΔⲆⲆᐃ: "img/inv-reidite-door-in.png",
        ΔΔⵠⲆⵠᐃⲆ: "img/inv-reidite-door-click.png",
        ΔᐃᐃⵠⵠⲆⲆ: "img/inv-reidite-spike-out.png",
        ⲆᐃⵠΔⵠⲆⵠ: "img/inv-reidite-spike-in.png",
        ΔᐃⲆⵠⲆⵠΔ: "img/inv-reidite-spike-click.png",
        ΔⲆΔⲆΔⵠᐃ: "img/inv-reidite-wall-out.png",
        ᐃⲆⲆⵠΔΔΔ: "img/inv-reidite-wall-in.png",
        ⲆᐃⲆΔᐃⵠΔ: "img/inv-reidite-wall-click.png",
        ⵠⲆⲆΔΔᐃⵠ: "img/day-reidite-wall.png",
        ΔⲆΔᐃᐃⲆᐃ: "img/night-reidite-wall.png",
        ᐃΔⲆⵠᐃᐃΔ: "img/day-reidite-door.png",
        ΔᐃᐃΔⲆᐃᐃ: "img/night-reidite-door.png",
        ⲆⵠⲆⲆⵠΔΔ: "img/day-reidite-spike.png",
        ⵠΔⲆⲆⵠΔⲆ: "img/night-reidite-spike.png",
        ⵠᐃⲆⲆΔΔⲆ: "img/day-reidite-spike-door.png",
        ⲆΔⵠΔⵠᐃⲆ: "img/night-reidite-spike-door.png",
        ΔⲆⵠⲆᐃΔᐃ: "img/inv-reidite-pickaxe-out.png",
        ⲆΔΔΔᐃΔΔ: "img/inv-reidite-pickaxe-in.png",
        ⲆⲆᐃⵠΔⵠᐃ: "img/inv-reidite-pickaxe-click.png",
        ΔΔⵠΔᐃΔΔ: "img/day-reidite-pickaxe.png",
        ᐃⲆⵠⲆⲆᐃⲆ: "img/night-reidite-pickaxe.png",
        ᐃᐃⲆⲆΔΔᐃ: "img/inv-reidite-hammer-out.png",
        ΔⵠᐃⵠⲆΔⲆ: "img/inv-reidite-hammer-in.png",
        ᐃᐃᐃⵠⵠΔⲆ: "img/inv-reidite-hammer-click.png",
        ΔⵠΔⵠⲆⲆᐃ: "img/day-reidite-hammer.png",
        ⲆΔⵠⲆᐃⵠᐃ: "img/night-reidite-hammer.png",
        ᐃⵠΔᐃᐃⵠΔ: "img/day-watermelon1.png",
        ⵠⲆⵠᐃⲆⲆᐃ: "img/night-watermelon1.png",
        ⵠⲆⲆⵠⲆⵠΔ: "img/day-watermelon-dried1.png",
        ᐃᐃᐃᐃΔᐃᐃ: "img/night-watermelon-dried1.png",
        ᐃΔΔΔⲆᐃΔ: "img/inv-watermelon-out.png",
        ᐃⲆΔΔᐃⵠⲆ: "img/inv-watermelon-in.png",
        ᐃᐃⵠⲆⵠΔΔ: "img/inv-watermelon-click.png",
        ⲆⵠᐃΔⵠΔⲆ: "img/day-boat.png",
        ᐃⲆΔⵠᐃΔⵠ: "img/night-boat.png",
        ᐃⵠⲆᐃΔΔⲆ: "img/day-boat-wave.png",
        ⲆΔⲆⵠⵠᐃⲆ: "img/night-boat-wave.png",
        ⵠΔⵠᐃⵠⲆⵠ: "img/inv-boat-out.png",
        ᐃⵠΔⵠⵠΔⲆ: "img/inv-boat-in.png",
        ⲆⵠⲆᐃⵠⲆⵠ: "img/inv-boat-click.png",
        ᐃⲆⵠᐃⲆΔΔ: "img/day-plane.png",
        ΔⵠᐃⲆᐃΔΔ: "img/night-plane.png",
        ΔⲆⲆΔΔⲆᐃ: "img/inv-plane-out.png",
        ⲆⲆΔᐃⵠᐃⵠ: "img/inv-plane-in.png",
        ⲆΔⵠⵠⲆⵠⵠ: "img/inv-plane-click.png",
        ΔᐃᐃᐃⲆᐃⵠ: "img/day-sled.png",
        ΔΔᐃⲆᐃΔΔ: "img/night-sled.png",
        ⲆⲆⵠⵠⲆᐃⲆ: "img/day-sled-wave.png",
        ⲆⲆΔⵠⲆⲆⵠ: "img/night-sled-wave.png",
        ⵠⲆᐃⵠⲆⵠⵠ: "img/inv-sled-out.png",
        ⲆⵠΔΔⲆΔⲆ: "img/inv-sled-in.png",
        ᐃⵠⵠᐃᐃⲆᐃ: "img/inv-sled-click.png",
        ᐃⲆΔⵠΔΔΔ: "img/day-pirate-hat.png",
        ᐃⵠᐃΔᐃⲆᐃ: "img/night-pirate-hat.png",
        ᐃⵠⲆᐃᐃⲆᐃ: "img/inv-pirate-hat-out.png",
        ⵠⲆⲆⵠⵠᐃΔ: "img/inv-pirate-hat-in.png",
        ΔΔᐃΔᐃⲆΔ: "img/inv-pirate-hat-click.png",
        ᐃⵠΔⲆΔΔᐃ: "img/day-penguin.png",
        ΔⵠⲆΔᐃᐃΔ: "img/night-penguin.png",
        ΔᐃΔᐃᐃⲆΔ: "img/hurt-penguin.png",
        ΔⲆᐃᐃᐃ: "img/inv-penguin-feather-click.png",
        Ⲇᐃᐃᐃᐃ: "img/inv-hawk-feather-click.png",
        ⲆᐃⲆⲆΔⲆΔ: "img/day-boar1.png",
        ⵠⵠⵠΔⲆⵠΔ: "img/day-boar1-tamed.png",
        ΔΔⵠⲆⲆᐃᐃ: "img/day-boar1-angry.png",
        ᐃΔⲆⵠⲆᐃΔ: "img/night-boar1.png",
        ΔᐃⲆᐃᐃⲆᐃ: "img/night-boar1-tamed.png",
        ᐃⲆᐃΔⵠᐃⲆ: "img/night-boar1-angry.png",
        ΔΔᐃⲆᐃᐃΔ: "img/inv-mount-boar-out.png",
        ⲆΔᐃᐃⲆⵠᐃ: "img/inv-mount-boar-in.png",
        ⲆⵠⵠⲆⲆⵠᐃ: "img/inv-mount-boar-click.png",
        ⵠⵠᐃΔⵠⲆⲆ: "img/day-hurt-boar1.png",
        ᐃⵠⲆΔΔⵠⵠ: "img/boar1-step.png",
        ᐃⵠⵠⲆⵠⲆΔ: "img/day-saddle1.png",
        ⵠᐃᐃᐃΔᐃᐃ: "img/night-saddle1.png",
        ᐃⵠᐃⲆΔⲆΔ: "img/inv-saddle-out.png",
        ᐃΔΔⵠⵠᐃΔ: "img/inv-saddle-in.png",
        ⵠΔⵠⲆΔⵠⲆ: "img/inv-saddle-click.png",
        ⵠⵠⵠᐃⵠΔᐃ: "img/day-magic-wand0.png",
        ⲆΔⵠΔΔΔΔ: "img/night-magic-wand0.png",
        ⵠΔᐃΔΔⵠΔ: "img/day-light-wand1.png",
        ᐃΔΔⲆⲆⲆΔ: "img/night-light-wand1.png",
        ᐃᐃΔⵠⲆⲆⲆ: "img/inv-magic-wand0-out.png",
        ⵠᐃⵠᐃⵠΔΔ: "img/inv-magic-wand0-in.png",
        ⵠⵠⲆΔⲆΔΔ: "img/inv-magic-wand0-click.png",
        ΔᐃⲆΔΔⲆᐃ: "img/day-magic-wand1.png",
        ⲆᐃⵠᐃⲆᐃΔ: "img/night-magic-wand1.png",
        ⵠⵠⵠⵠᐃⵠⲆ: "img/day-light-wand0.png",
        ⵠⲆᐃΔⵠⲆⵠ: "img/night-light-wand0.png",
        ⲆⵠΔⲆⵠᐃⲆ: "img/inv-magic-wand1-out.png",
        ΔⵠⲆⲆᐃⵠⵠ: "img/inv-magic-wand1-in.png",
        ΔⲆΔᐃΔᐃⲆ: "img/inv-magic-wand1-click.png",
        ⲆⲆᐃΔᐃⲆⲆ: "img/day-firefly.png",
        ⵠᐃⲆⲆⵠⵠⲆ: "img/night-firefly.png",
        ΔⵠΔⲆⵠⵠΔ: "img/hurt-firefly.png",
        ⵠⵠΔΔᐃⵠΔ: "img/inv-firefly-out.png",
        ⲆⲆΔᐃΔⵠΔ: "img/inv-firefly-in.png",
        ⲆⵠᐃΔᐃⵠᐃ: "img/inv-firefly-click.png",
        ⵠⲆⵠΔⲆΔⲆ: "img/day-baby-dragon.png",
        ᐃΔⵠⲆⲆᐃᐃ: "img/night-baby-dragon.png",
        ⲆⲆⵠⵠΔΔⲆ: "img/day-baby-dragon-angry.png",
        ᐃⵠᐃᐃⲆΔⲆ: "img/night-baby-dragon-angry.png",
        ᐃⲆᐃⲆΔⵠᐃ: "img/day-baby-dragon-tamed.png",
        ⲆᐃᐃⵠΔⲆⵠ: "img/night-baby-dragon-tamed.png",
        ΔⲆⵠΔΔⵠⵠ: "img/day-wing-dragon-left-angry.png",
        ΔᐃⵠᐃⵠⲆⲆ: "img/night-dragon-wing-left-angry.png",
        ⲆⲆⲆΔΔⲆⵠ: "img/day-wing-dragon-right-angry.png",
        ⲆΔⲆᐃⲆᐃΔ: "img/night-dragon-wing-right-angry.png",
        ᐃᐃⵠⲆⵠⵠⵠ: "img/day-wing-dragon-left-tamed.png",
        ᐃⲆᐃⲆⲆᐃⲆ: "img/night-dragon-wing-left-tamed.png",
        ᐃⲆΔΔΔⲆⵠ: "img/day-wing-dragon-right-tamed.png",
        ᐃΔⲆⵠⲆⵠᐃ: "img/night-wing-dragon-right-tamed.png",
        ⵠⵠᐃⲆⵠΔΔ: "img/day-wing-dragon-left.png",
        ⵠΔᐃᐃΔⲆⲆ: "img/night-dragon-wing-left.png",
        ⵠᐃⲆⲆΔⵠΔ: "img/day-wing-dragon-right.png",
        ΔⵠⵠᐃⲆΔΔ: "img/night-wing-dragon-right.png",
        ⵠΔⲆᐃⵠⲆⲆ: "img/hurt-baby-dragon.png",
        ᐃᐃⵠΔⵠᐃⲆ: "img/hurt-baby-dragon-wing-left.png",
        ⵠᐃⲆⲆΔᐃΔ: "img/hurt-baby-dragon-wing-right.png",
        ΔᐃΔᐃᐃⲆⵠ: "img/inv-baby-dragon-out.png",
        ⲆΔΔⲆⵠΔⲆ: "img/inv-baby-dragon-in.png",
        ⲆⲆΔⵠⲆⲆᐃ: "img/inv-baby-dragon-click.png",
        ΔΔΔⵠⵠⲆᐃ: "img/day-baby-lava.png",
        ⲆᐃⵠⵠᐃⲆᐃ: "img/night-baby-lava.png",
        ᐃΔⲆⵠΔΔΔ: "img/day-baby-lava-angry.png",
        ΔΔΔⵠⲆⲆΔ: "img/night-baby-lava-angry.png",
        ⲆΔⲆⲆⵠⲆΔ: "img/day-baby-lava-tamed.png",
        ΔΔⵠⵠΔⲆⵠ: "img/night-baby-lava-tamed.png",
        ⲆΔⲆⵠⲆⲆⵠ: "img/day-wing-lava-left-angry.png",
        ᐃΔⲆᐃⵠⵠᐃ: "img/night-wing-lava-left-angry.png",
        ΔΔⵠΔⲆⵠⲆ: "img/day-wing-lava-right-angry.png",
        ΔⵠᐃⵠⲆⲆⲆ: "img/night-wing-lava-right-angry.png",
        ΔᐃᐃᐃΔⲆᐃ: "img/day-wing-lava-left-tamed.png",
        ΔΔⵠⲆⵠᐃᐃ: "img/night-wing-lava-left-tamed.png",
        ⵠΔΔᐃⵠⲆⵠ: "img/day-wing-lava-right-tamed.png",
        ᐃΔⲆⵠΔⲆΔ: "img/night-wing-lava-right-tamed.png",
        ⲆᐃΔⲆⲆᐃᐃ: "img/day-wing-lava-left.png",
        ⲆᐃⵠΔΔⵠΔ: "img/night-wing-lava-left.png",
        ΔⲆΔΔΔΔⵠ: "img/day-wing-lava-right.png",
        ΔⵠⲆⲆⵠⵠᐃ: "img/night-wing-lava-right.png",
        ᐃᐃⲆⵠᐃᐃΔ: "img/hurt-baby-lava.png",
        ΔΔᐃⵠⲆⵠⵠ: "img/hurt-baby-lava-wing-left.png",
        ᐃⲆᐃᐃⲆᐃⵠ: "img/hurt-baby-lava-wing-right.png",
        ⲆΔⵠᐃᐃⵠᐃ: "img/inv-baby-lava-out.png",
        ᐃⲆⲆⵠⲆᐃᐃ: "img/inv-baby-lava-in.png",
        ΔⵠΔᐃⵠⵠⵠ: "img/inv-baby-lava-click.png",
        ᐃⲆᐃᐃΔᐃⵠ: "img/day-falcon.png",
        ⲆᐃᐃⵠⵠΔΔ: "img/night-falcon.png",
        ⲆⵠⵠΔᐃΔⵠ: "img/day-falcon-angry.png",
        ΔᐃᐃΔᐃⲆΔ: "img/night-falcon-angry.png",
        ⵠⲆⵠⵠᐃᐃⵠ: "img/day-falcon-ground.png",
        ΔᐃⲆᐃⲆᐃΔ: "img/night-falcon-ground.png",
        ΔᐃⲆᐃⵠⲆᐃ: "img/day-falcon-ground-angry.png",
        ᐃᐃⲆⲆΔⵠᐃ: "img/night-falcon-ground-angry.png",
        ᐃⵠⲆᐃⲆⵠⲆ: "img/day-falcon-wings-left.png",
        ᐃⲆᐃⲆⵠⲆⲆ: "img/night-falcon-wings-left.png",
        ᐃⲆⲆᐃᐃᐃⲆ: "img/day-falcon-wings-right.png",
        ⵠᐃᐃⵠᐃᐃΔ: "img/night-falcon-wings-right.png",
        ΔΔⲆⲆᐃⵠΔ: "img/day-falcon-angry-wings-left.png",
        ⵠΔΔΔⲆⲆⲆ: "img/night-falcon-angry-wings-left.png",
        ⲆⲆⵠⵠⵠΔΔ: "img/day-falcon-angry-wings-right.png",
        ⲆⲆⵠⲆⵠΔⵠ: "img/night-falcon-angry-wings-right.png",
        ⲆΔΔⲆⵠⵠⵠ: "img/day-falcon-wings-left-tamed.png",
        ΔΔΔⵠΔⵠΔ: "img/night-falcon-wings-left-tamed.png",
        ⲆΔΔⵠΔⵠΔ: "img/day-falcon-wings-right-tamed.png",
        ΔⵠΔⵠΔⲆⲆ: "img/night-falcon-wings-right-tamed.png",
        ⲆΔⲆᐃᐃⵠⵠ: "img/day-falcon-tamed.png",
        ΔⲆΔⵠⵠⲆΔ: "img/night-falcon-tamed.png",
        ᐃΔⵠⵠᐃⲆⵠ: "img/hurt-falcon-ground.png",
        ᐃΔΔΔᐃΔᐃ: "img/hurt-falcon.png",
        ⲆⵠᐃΔΔⲆⲆ: "img/hurt-falcon-wings-left.png",
        ΔⵠᐃΔⲆⵠᐃ: "img/hurt-falcon-wings-right.png",
        ⵠᐃᐃⲆᐃΔⵠ: "img/inv-falcon-out.png",
        ⵠᐃⵠᐃⲆⲆⵠ: "img/inv-falcon-in.png",
        ⵠΔᐃᐃᐃΔᐃ: "img/inv-falcon-click.png",
        ⲆΔᐃⲆⲆΔΔ: "img/day-crab-boss.png",
        ΔᐃⵠⲆⲆΔⵠ: "img/night-crab-boss.png",
        ⵠⲆⵠⲆⵠⲆΔ: "img/day-crab-boss-angry.png",
        ΔᐃⲆΔⲆⵠᐃ: "img/night-crab-boss-angry.png",
        ᐃᐃⲆⲆⵠⲆⲆ: "img/day-crab-boss-tamed.png",
        ⵠⵠᐃⵠⲆⲆΔ: "img/night-crab-boss-tamed.png",
        ᐃⵠⵠᐃΔⵠⲆ: "img/day-crab-boss-claw-left-attack.png",
        ΔⲆⲆⲆⲆΔⲆ: "img/night-crab-boss-claw-left-attack.png",
        ⲆᐃⲆⵠΔⲆⲆ: "img/day-crab-boss-claw-right-attack.png",
        ⲆᐃⲆΔⵠᐃⲆ: "img/night-crab-boss-claw-right-attack.png",
        ⲆΔᐃᐃΔⲆⲆⵠᐃ: "img/day-crab-boss-claw-left-tamed.png",
        ΔᐃΔΔΔⵠⵠᐃⵠ: "img/night-crab-boss-claw-left-tamed.png",
        ⲆΔⵠⵠΔΔⵠᐃᐃ: "img/day-crab-boss-claw-right-tamed.png",
        ΔⵠᐃΔⲆΔⵠᐃᐃ: "img/night-crab-boss-claw-right-tamed.png",
        ⵠᐃᐃⲆΔΔⲆ: "img/day-crab-boss-claw-left.png",
        ⲆⵠⲆΔΔᐃⵠ: "img/night-crab-boss-claw-left.png",
        ⲆⵠᐃⲆⲆΔⲆ: "img/day-crab-boss-claw-right.png",
        ⲆΔΔⵠᐃᐃΔ: "img/night-crab-boss-claw-right.png",
        ⲆⲆᐃΔⵠⵠⲆ: "img/hurt-crab-boss.png",
        ⵠΔⵠⲆΔⵠᐃ: "img/hurt-crab-boss-claw-left.png",
        ΔᐃΔᐃᐃⵠᐃ: "img/hurt-crab-boss-claw-right.png",
        ⵠⲆΔᐃΔᐃᐃ: "img/heal-crab-boss.png",
        ΔⵠⵠⲆᐃⵠⵠ: "img/heal-crab-boss-claw-left.png",
        ΔΔΔⲆⵠᐃΔ: "img/heal-crab-boss-claw-right.png",
        ⲆⲆΔΔΔΔⵠ: "img/crab-step.png",
        ⲆⲆⲆᐃⵠⲆⲆ: "img/inv-crab-boss-out.png",
        ΔⵠⲆⵠⵠⲆΔ: "img/inv-crab-boss-in.png",
        ⲆᐃⲆⲆᐃⵠΔ: "img/inv-crab-boss-click.png",
        ΔᐃΔᐃⵠⵠⲆ: "img/day-cactus10.png",
        ⲆᐃⲆⵠⵠⲆⵠ: "img/night-cactus10.png",
        ⵠⵠΔⲆᐃⲆⵠ: "img/inv-cactus-out.png",
        ⵠᐃⵠⲆⵠᐃΔ: "img/inv-cactus-in.png",
        ⲆᐃⵠⵠⲆᐃⲆ: "img/inv-cactus-click.png",
        ᐃΔⵠᐃⵠⵠᐃ: "img/day-scorpion.png",
        ⵠΔⲆᐃΔᐃⲆ: "img/night-scorpion.png",
        ᐃⵠⲆᐃᐃΔΔ: "img/day-scorpion-hand-left.png",
        ΔᐃⲆΔᐃⲆΔ: "img/night-scorpion-hand-left.png",
        ⵠᐃⲆΔⲆΔⵠ: "img/day-scorpion-hand-right.png",
        ⲆΔΔⵠⵠΔᐃ: "img/night-scorpion-hand-right.png",
        ᐃΔᐃᐃⲆΔⲆ: "img/hurt-scorpion.png",
        ΔΔⲆΔⵠⲆᐃ: "img/hurt-scorpion-hand-left.png",
        ⵠⵠⲆⲆᐃᐃᐃ: "img/hurt-scorpion-hand-right.png",
        ⵠⲆΔⲆⲆⲆᐃ: "img/day-vulture.png",
        ΔᐃΔⵠΔⲆⵠ: "img/night-vulture.png",
        ⵠΔⵠΔⵠⵠᐃ: "img/day-vulture-angry.png",
        ᐃⵠⵠⵠⵠⲆᐃ: "img/night-vulture-angry.png",
        ᐃᐃΔᐃⵠⵠⲆ: "img/day-vulture-ground.png",
        ⵠⲆᐃⵠⵠⵠⲆ: "img/night-vulture-ground.png",
        ⲆⲆΔⲆᐃᐃⲆ: "img/day-vulture-ground-angry.png",
        ⲆⲆⵠᐃⵠᐃⵠ: "img/night-vulture-ground-angry.png",
        ᐃⲆᐃΔⲆΔΔ: "img/day-vulture-wings-left.png",
        ΔᐃⲆΔᐃⲆⲆ: "img/night-vulture-wings-left.png",
        ᐃⵠⲆⵠⵠΔΔ: "img/day-vulture-wings-right.png",
        ᐃᐃⲆⵠΔⲆᐃ: "img/night-vulture-wings-right.png",
        ⵠⲆⵠⲆΔᐃΔ: "img/day-vulture-angry-wings-left.png",
        ΔⵠᐃⵠᐃⵠⲆ: "img/night-vulture-angry-wings-left.png",
        ⲆⲆⲆⵠⵠⲆᐃ: "img/day-vulture-angry-wings-right.png",
        ⵠᐃᐃΔⲆⲆΔ: "img/night-vulture-angry-wings-right.png",
        ⲆΔᐃⲆᐃΔⵠ: "img/day-vulture-wings-left-tamed.png",
        ⲆΔⲆᐃᐃᐃΔ: "img/night-vulture-wings-left-tamed.png",
        ΔⲆᐃⲆᐃⵠᐃ: "img/day-vulture-wings-right-tamed.png",
        ⵠⲆᐃΔᐃⲆⲆ: "img/night-vulture-wings-right-tamed.png",
        ΔᐃⵠᐃⵠΔΔ: "img/day-vulture-tamed.png",
        ΔⵠΔⵠᐃⵠΔ: "img/night-vulture-tamed.png",
        ⲆΔⲆⵠⵠⵠᐃ: "img/hurt-vulture-ground.png",
        ⲆⵠΔᐃⲆⵠᐃ: "img/hurt-vulture.png",
        ⵠᐃⲆΔᐃⲆᐃ: "img/hurt-vulture-wings-left.png",
        ⲆᐃᐃᐃΔⵠΔ: "img/hurt-vulture-wings-right.png",
        ⵠΔⵠΔⲆⲆᐃ: "img/day-aloe-vera.png",
        ΔⵠΔⲆΔᐃᐃ: "img/night-aloe-vera.png",
        ᐃⵠⲆᐃⲆΔⵠ: "img/inv-aloe-vera-out.png",
        ᐃΔⲆⵠΔΔⵠ: "img/inv-aloe-vera-in.png",
        ΔᐃⲆⲆⵠⲆΔ: "img/inv-aloe-vera-click.png",
        ΔⲆᐃΔᐃⵠΔ: "img/day-aloe-vera-grown.png",
        ᐃⲆΔⲆⵠΔⵠ: "img/night-aloe-vera-grown.png",
        ⵠⵠᐃⲆΔᐃⵠ: "img/day-aloe-vera-dried.png",
        ⲆᐃⲆΔⲆΔΔ: "img/night-aloe-vera-dried.png",
        ⵠⲆⵠⲆᐃᐃΔ: "img/day-turban1.png",
        ⲆᐃΔᐃⲆΔⵠ: "img/night-turban1.png",
        ⵠⲆⵠᐃΔⲆⵠ: "img/day-turban2.png",
        ⵠⲆᐃⵠΔΔΔ: "img/night-turban2.png",
        ΔⵠⵠⵠᐃⵠΔ: "img/inv-turban2-out.png",
        ΔᐃΔⵠⲆΔⲆ: "img/inv-turban2-in.png",
        ⲆᐃⲆⵠⲆΔⵠ: "img/inv-turban2-click.png",
        ⲆᐃⵠΔⵠⵠⲆ: "img/inv-turban1-out.png",
        ΔⵠⲆⲆΔΔᐃ: "img/inv-turban1-in.png",
        ᐃᐃΔᐃⲆᐃⲆ: "img/inv-turban1-click.png",
        ᐃⲆᐃⲆᐃⵠᐃ: "img/day-pitchfork2.png",
        ⵠⵠΔᐃⲆΔⲆ: "img/night-pitchfork2.png",
        ᐃⲆᐃᐃⲆⲆⲆ: "img/inv-pitchfork2-out.png",
        ᐃⲆΔⵠΔᐃᐃ: "img/inv-pitchfork2-in.png",
        ⲆⲆⵠΔⲆΔⵠ: "img/inv-pitchfork2-click.png",
        ΔⵠΔⵠⲆᐃΔ: "img/inv-gold-fork-click.png",
        ΔⵠᐃᐃⲆᐃΔ: "img/inv-pilot-glasses-click.png",
        ⵠΔⲆⵠᐃⵠᐃ: "img/day-pilot-helmet.png",
        ΔⲆΔⵠⵠⲆⵠ: "img/night-pilot-helmet.png",
        ⲆⵠⵠᐃᐃΔΔ: "img/inv-pilot-helmet-out.png",
        ᐃᐃⵠᐃⵠΔⵠ: "img/inv-pilot-helmet-in.png",
        ⲆⵠΔⵠΔⲆᐃ: "img/inv-pilot-helmet-click.png",
        ⵠⲆⵠΔⲆΔⵠⲆᐃ: "img/day-sandworm0.png",
        ᐃⲆⲆⵠⲆΔΔ: "img/day-sandworm1.png",
        ᐃⵠΔⲆⵠΔᐃ: "img/day-sandworm2.png",
        ᐃⲆⲆⲆⲆᐃⲆⲆΔ: "img/night-sandworm0.png",
        ⲆⲆᐃᐃⲆⲆⲆ: "img/night-sandworm1.png",
        ⵠᐃⵠΔᐃΔⵠ: "img/night-sandworm2.png",
        ⵠΔΔⲆⵠⲆΔ: "img/hurt-sandworm0.png",
        ⲆⵠⲆⵠᐃⵠⲆ: "img/hurt-sandworm1.png",
        ΔⲆⲆⵠΔⵠⲆ: "img/hurt-sandworm2.png",
        ᐃⲆΔⵠⲆ: "img/inv-vulture-feather-click.png",
        ⵠΔⵠⵠⵠΔᐃ: "img/day-emerald0.png",
        ΔⵠⵠⵠⲆⵠΔ: "img/night-emerald0.png",
        ⲆᐃᐃᐃⲆᐃⲆ: "img/day-emerald1.png",
        ΔᐃᐃᐃⵠΔᐃ: "img/night-emerald1.png",
        ⵠᐃⲆⲆⲆⵠⲆ: "img/day-emerald2.png",
        ᐃⲆⵠⲆⲆⲆⵠ: "img/night-emerald2.png",
        ΔᐃⵠⲆᐃ: "img/inv-emerald-click.png",
        ⵠⵠᐃᐃⵠⵠΔ: "img/inv-sworm-juice-out.png",
        ᐃⵠΔⵠΔΔⲆ: "img/inv-sworm-juice-in.png",
        ΔⲆⲆⲆᐃⲆⲆ: "img/inv-sworm-juice-click.png",
        ⵠΔᐃⵠⲆⲆΔ: "img/day-point-machine.png",
        ⲆᐃⲆⲆⵠᐃⲆ: "img/night-point-machine.png",
        ᐃⲆᐃⲆⵠᐃᐃ: "img/day-point-machine-hole.png",
        ⵠⵠᐃⲆⵠᐃⵠ: "img/night-point-machine-hole.png",
        ΔΔⲆΔᐃⲆⲆ: "img/day-point-machine-ground.png",
        ⲆΔᐃⵠᐃᐃⵠ: "img/night-point-machine-ground.png",
        ΔΔⲆΔⲆᐃΔ: "img/day-point-machine-rotate.png",
        ΔᐃⲆΔΔⵠᐃ: "img/night-point-machine-rotate.png",
        ⵠⲆᐃᐃᐃⵠᐃ: "img/inv-point-machine-out.png",
        ΔⵠⲆΔⵠⲆᐃ: "img/inv-point-machine-in.png",
        ⵠᐃⲆΔⲆⲆⵠ: "img/inv-point-machine-click.png",
        ⵠⲆΔⵠᐃΔᐃ: "img/day-extractor-machine0-stone.png",
        ⲆΔⲆⲆⵠΔᐃ: "img/night-extractor-machine0-stone.png",
        ⵠΔⲆᐃⵠᐃⲆ: "img/day-extractor-machine-stone.png",
        ᐃⵠΔᐃᐃΔⵠ: "img/night-extractor-machine-stone.png",
        ⵠᐃⵠᐃⵠΔⵠ: "img/inv-extractor-machine-stone-out.png",
        ᐃᐃᐃⲆⵠⵠᐃ: "img/inv-extractor-machine-stone-in.png",
        ⲆⵠᐃᐃΔⵠᐃ: "img/inv-extractor-machine-stone-click.png",
        ᐃΔᐃᐃⲆᐃⵠ: "img/day-extractor-machine0-gold.png",
        ᐃⵠⲆⵠΔΔΔ: "img/night-extractor-machine0-gold.png",
        ΔⵠᐃⵠⵠⵠⲆ: "img/day-extractor-machine-gold.png",
        ᐃⵠᐃᐃⵠⵠⲆ: "img/night-extractor-machine-gold.png",
        ⲆᐃⵠΔⵠΔⵠ: "img/inv-extractor-machine-gold-out.png",
        ᐃⲆΔᐃΔΔᐃ: "img/inv-extractor-machine-gold-in.png",
        ΔΔⵠⲆΔⲆⵠ: "img/inv-extractor-machine-gold-click.png",
        ⲆⲆΔᐃᐃΔⵠ: "img/day-extractor-machine0-diamond.png",
        ᐃᐃΔⵠⵠΔⲆ: "img/night-extractor-machine0-diamond.png",
        ΔⵠΔᐃⲆᐃᐃ: "img/day-extractor-machine-diamond.png",
        ΔⵠⵠΔⲆⵠⲆ: "img/night-extractor-machine-diamond.png",
        ⲆⵠⵠⲆᐃⲆΔ: "img/inv-extractor-machine-diamond-out.png",
        ᐃᐃⵠᐃᐃΔΔ: "img/inv-extractor-machine-diamond-in.png",
        ⵠΔᐃᐃᐃⵠⲆ: "img/inv-extractor-machine-diamond-click.png",
        ⵠΔΔΔΔΔⲆ: "img/day-extractor-machine0-amethyst.png",
        ΔⵠⵠⲆⵠᐃⵠ: "img/night-extractor-machine0-amethyst.png",
        ⲆᐃΔᐃᐃⵠⲆ: "img/day-extractor-machine-amethyst.png",
        ⲆⵠᐃⲆΔⵠⵠ: "img/night-extractor-machine-amethyst.png",
        ᐃᐃᐃⵠΔΔΔ: "img/inv-extractor-machine-amethyst-out.png",
        ΔⲆⵠⲆΔⵠⲆ: "img/inv-extractor-machine-amethyst-in.png",
        ΔⲆΔⵠⲆⲆᐃ: "img/inv-extractor-machine-amethyst-click.png",
        ᐃⲆᐃΔⵠⲆΔ: "img/day-extractor-machine0-reidite.png",
        ⵠᐃΔⵠⲆⵠᐃ: "img/night-extractor-machine0-reidite.png",
        ΔⲆᐃΔΔⵠᐃ: "img/day-extractor-machine-reidite.png",
        ΔⵠⲆᐃⵠⵠⲆ: "img/night-extractor-machine-reidite.png",
        ⲆᐃⲆΔᐃⲆⵠ: "img/inv-extractor-machine-reidite-out.png",
        ΔⲆΔᐃΔⲆᐃ: "img/inv-extractor-machine-reidite-in.png",
        ΔⲆⵠⵠⵠⲆᐃ: "img/inv-extractor-machine-reidite-click.png",
        ⵠᐃⵠⵠΔⲆΔ: "img/extractor-cases.png",
        ᐃⲆⵠⵠᐃΔⵠ: "img/day-golden-hen.png",
        ΔΔⲆΔΔᐃᐃ: "img/night-golden-hen.png",
        ⲆΔᐃⲆⲆᐃᐃ: "img/day-golden-chicken.png",
        ᐃⵠⵠΔᐃⵠΔ: "img/night-golden-chicken.png",
        ⲆΔⲆⵠⵠⲆⲆ: "img/hurt-golden-hen.png",
        ᐃⵠΔⵠⵠⵠᐃ: "img/hurt-golden-chicken.png",
        ⵠⲆⲆΔΔⵠⵠ: "img/logo-interface.png",
        ΔᐃⵠᐃΔⲆΔ: "img/forest-mode-hover.png",
        ΔᐃⲆΔⲆⲆⵠ: "img/normal-mode-hover.png",
        ⲆⲆⵠΔⲆΔⲆ: "img/vampire-mode-hover.png",
        ᐃⲆᐃᐃᐃΔⲆ: "img/zombie-mode-hover.png",
        ⲆᐃⵠᐃⲆᐃⲆ: "img/community-mode-hover2.png",
        ⵠᐃⵠᐃΔΔᐃ: "img/experimental-mode-hover.png",
        ΔⲆΔΔⵠⵠᐃ: "img/zombie-mode-out.png",
        ᐃⲆᐃⵠΔΔⵠ: "img/zombie-mode-in.png",
        ΔΔᐃᐃⲆᐃⵠ: "img/zombie-mode-click.png",
        ΔⲆΔΔⵠⵠⵠ: "img/vampire-mode-out.png",
        ΔⲆⲆΔⵠΔⵠ: "img/vampire-mode-in.png",
        ᐃⵠⵠᐃⲆᐃⵠ: "img/vampire-mode-click.png",
        ΔΔᐃⲆⲆΔⲆ: "img/normal-mode-out.png",
        ΔⲆⲆⵠⲆⵠⲆ: "img/normal-mode-in.png",
        ΔⲆⵠⲆΔⲆᐃ: "img/normal-mode-click.png",
        ⵠⲆΔⲆᐃⲆⲆ: "img/forest-mode-out.png",
        ⵠⲆᐃᐃΔⲆΔ: "img/forest-mode-in.png",
        ΔΔⲆᐃΔⵠⵠ: "img/forest-mode-click.png",
        ᐃⵠⲆⵠᐃΔᐃ: "img/community-mode-out.png",
        Δᐃᐃᐃᐃⵠⵠ: "img/community-mode-in.png",
        ⵠⲆⵠᐃⲆΔᐃ: "img/community-mode-click.png",
        ⵠⵠⵠⲆⲆΔⵠ: "img/experimental-modes-out.png",
        ΔⲆΔⲆⵠΔⵠ: "img/experimental-modes-in.png",
        ᐃΔᐃᐃᐃⵠᐃ: "img/experimental-modes-click.png",
        ⵠᐃΔᐃᐃΔΔ: "img/youtube-button-out.png",
        ᐃᐃΔⲆⵠΔᐃ: "img/youtube-button-in.png",
        ⵠⵠⲆᐃⲆⵠⲆ: "img/youtube-button-click.png",
        ⲆⲆⵠⵠⵠⲆᐃ: "img/wiki-button-out.png",
        ᐃⲆⵠⲆΔⵠᐃ: "img/wiki-button-in.png",
        ΔⵠΔⵠⵠⵠⵠ: "img/wiki-button-click.png",
        ᐃᐃⲆⲆⵠⲆⵠ: "img/twitter-button-out.png",
        ᐃΔΔⵠΔⵠΔ: "img/twitter-button-in.png",
        ⵠⵠⵠⲆⵠΔᐃ: "img/twitter-button-click.png",
        ⵠⲆΔⵠᐃΔⲆ: "img/facebook-button-out.png",
        ⵠᐃΔΔᐃⵠΔ: "img/facebook-button-in.png",
        ⵠⵠᐃΔᐃⲆⵠ: "img/facebook-button-click.png",
        ᐃΔΔᐃⵠᐃᐃ: "img/reddit-button-out.png",
        ΔⲆⲆⵠᐃᐃᐃ: "img/reddit-button-in.png",
        ⵠⵠⵠⲆΔⵠΔ: "img/reddit-button-click.png",
        ⲆⲆΔⲆᐃⵠΔ: "img/discord-button-out.png",
        ᐃᐃⲆⵠᐃΔΔ: "img/discord-button-in.png",
        ΔⲆᐃⵠⵠᐃⲆ: "img/discord-button-click.png",
        ΔΔⵠᐃΔⵠᐃ: "img/merch-button-out.png",
        ⲆⲆⵠΔⲆᐃᐃ: "img/merch-button-in.png",
        ΔᐃΔΔΔⲆⲆ: "img/merch-button-click.png",
        ⵠⵠⲆⵠΔⵠΔᐃⲆ: "img/terminal-button-out.png",
        ᐃΔⵠᐃᐃⲆΔⲆⲆ: "img/terminal-button-in.png",
        ⲆΔΔᐃΔⲆⵠⵠᐃ: "img/terminal-button-click.png",
        ΔⲆⵠΔⵠⵠᐃ: "img/restart-out.png",
        ΔΔⲆΔⵠⵠⲆ: "img/restart-in.png",
        ⲆᐃᐃⵠΔΔΔ: "img/restart-click.png",
        ΔᐃᐃΔΔⵠᐃ: "img/guide-out.png",
        ⲆᐃⲆⲆᐃⵠⵠ: "img/guide-in.png",
        ΔᐃⲆΔΔΔΔ: "img/guide-click.png",
        ᐃᐃⲆⲆⲆᐃᐃ: "img/copy-paste-out.png",
        ΔᐃᐃΔΔⵠⲆ: "img/copy-paste-in.png",
        ⵠΔⲆⲆⲆⲆⵠ: "img/copy-paste-click.png",
        ΔΔΔΔΔᐃⵠ: "img/link-buttons-bg.png",
        ⵠⲆᐃΔΔΔⲆ: "img/changelog-box2.png",
        ⲆᐃᐃΔΔᐃᐃ: "img/changelog_31.png",
        ᐃΔⵠᐃⵠΔᐃ: "img/banner-taming.png",
        ⲆⵠᐃᐃᐃΔⲆ: "img/profile-button-out.png",
        ΔᐃΔΔΔΔⵠ: "img/profile-button-in.png",
        ΔΔᐃⲆⲆΔⵠ: "img/profile-button-click.png",
        ᐃⵠⲆⲆⵠΔᐃ: "img/login-button-out.png",
        ⵠⵠⲆᐃᐃⵠΔ: "img/login-button-in.png",
        ΔⵠⲆⲆΔⲆᐃ: "img/login-button-click.png",
        ⲆΔΔⲆⲆⲆᐃ: "img/login-google-out.png",
        ᐃⲆΔΔᐃᐃᐃ: "img/login-google-in.png",
        ᐃⵠⲆⵠⲆᐃΔ: "img/login-google-click.png",
        ⲆᐃⵠⵠⲆⵠⲆ: "img/login-facebook-out.png",
        ΔΔⲆⵠΔᐃⲆ: "img/login-facebook-in.png",
        ⵠᐃᐃᐃⵠⲆᐃ: "img/login-facebook-click.png",
        ⲆⲆᐃᐃⵠⲆᐃ: "img/account-box.png",
        ΔΔΔⲆΔⵠᐃⲆⲆ: "img/account-under-maintenance.png",
        ᐃΔⲆᐃⲆⲆΔ: "img/close-button-account-out.png",
        ⵠⵠⵠΔⵠⲆⵠ: "img/close-button-account-in.png",
        ⲆⲆⲆⲆΔᐃⵠ: "img/close-button-account-click.png",
        ⵠᐃΔΔⵠᐃᐃ: "img/play-button-out.png",
        ᐃⲆⲆΔᐃᐃΔ: "img/play-button-in.png",
        ᐃⵠΔΔΔⲆⵠ: "img/play-button-click.png",
        ᐃΔᐃⵠⵠⵠⲆΔᐃ: "img/app-store-badge.png",
        ΔᐃⲆⲆⵠΔᐃᐃᐃ: "img/play-store-badge.png",
        ΔⲆᐃΔΔΔⵠⲆⲆ: "img/mobile-boxad.png",
        ⵠⵠΔΔⲆᐃⵠ: "img/modify-name-out.png",
        Ⲇᐃᐃᐃⵠⵠⵠ: "img/modify-name-in.png",
        ΔⲆⲆⲆⵠΔΔ: "img/modify-name-click.png",
        ⲆⲆⵠᐃⲆⵠⲆ: "img/copy-id-button-out.png",
        ⵠΔⲆᐃΔⵠⵠ: "img/copy-id-button-hover.png",
        ΔⲆᐃΔᐃΔⵠ: "img/copy-id-button-active.png",
        ᐃⵠⵠΔᐃᐃᐃ: "img/yes-button-out.png",
        ⲆΔⲆΔΔΔⲆ: "img/yes-button-in.png",
        ⵠⵠⲆΔⲆΔⲆ: "img/yes-button-click.png",
        ᐃⵠⵠⲆΔΔⵠ: "img/yes-300-button-out.png",
        ⵠⵠⵠΔⲆΔⵠ: "img/yes-300-button-in.png",
        ΔΔⵠⵠⵠᐃΔ: "img/yes-300-button-click.png",
        ᐃᐃⵠᐃΔⲆᐃ: "img/no-button-out.png",
        ᐃⵠⲆΔΔⲆᐃ: "img/no-button-in.png",
        ΔᐃⵠⵠΔᐃⲆ: "img/no-button-click.png",
        ᐃⲆⵠⵠᐃⵠⲆ: "img/no-thanks-button-out.png",
        ⵠⵠⲆΔⵠⵠⲆ: "img/no-thanks-button-in.png",
        ᐃᐃⲆᐃᐃⵠⲆ: "img/no-thanks-button-click.png",
        ⵠᐃΔᐃⵠᐃᐃ: "img/shop-button-out.png",
        ᐃΔᐃⲆⵠᐃⵠ: "img/shop-button-in.png",
        ⲆⵠⲆΔΔΔⲆ: "img/shop-button-click.png",
        ⵠⵠⵠΔᐃⵠΔ: "img/logout-out.png",
        ᐃᐃⲆᐃⲆⲆΔ: "img/logout-in.png",
        ⵠⵠΔΔᐃⵠⵠ: "img/logout-click.png",
        ⵠⵠᐃⲆᐃΔⲆ: "img/terms-button-out.png",
        ᐃⲆⲆΔΔⲆⵠ: "img/terms-button-in.png",
        ΔᐃᐃᐃⵠⵠΔ: "img/terms-button-click.png",
        ⵠΔᐃΔᐃⵠⵠ: "img/tutorial-icon.png",
        ᐃᐃᐃⲆⲆΔΔ: "img/skins-icon.png",
        ⲆᐃᐃⵠⵠΔⲆ: "img/shop-icon.png",
        ⲆⲆⲆⲆⵠⲆᐃⵠⲆ: "img/paint-icon.png",
        ⵠᐃΔⵠⵠΔⲆ: "img/leaderboard-icon.png",
        ⵠⲆΔΔΔⲆⵠ: "img/start-icon.png",
        ⲆⵠⲆⲆⲆⵠⲆ: "img/profile-icon.png",
        ΔⲆᐃⵠⲆΔⵠ: "img/server-access-icon2.png",
        Δⵠⵠⵠᐃⵠᐃ: "img/button-homepage-bg-out.png",
        ΔᐃⲆᐃᐃⵠⲆ: "img/button-homepage-bg-in.png",
        ⲆⲆΔⵠᐃⲆⵠ: "img/button-homepage-bg-click.png",
        ⵠΔΔΔᐃⲆⵠ: "img/button-bottom-homepage-bg-out.png",
        ΔⲆΔᐃΔᐃⵠ: "img/button-bottom-homepage-bg-in.png",
        ᐃⲆⲆⲆⲆΔᐃ: "img/button-bottom-homepage-bg-click.png",
        ΔⲆᐃⲆⲆⲆⲆ: "img/lvl-player.png",
        ⲆⵠⲆⵠⵠⲆⵠ: "img/avatar-player.png",
        ⲆⲆⲆΔᐃⲆⵠ: "img/avatar-player1.png",
        ⲆⵠΔᐃⵠⵠΔ: "img/avatar-player2.png",
        ΔᐃΔⲆΔⵠⲆ: "img/avatar-player3.png",
        ⵠⲆⵠΔⵠᐃΔ: "img/avatar-player4.png",
        ΔⵠᐃΔᐃΔᐃ: "img/avatar-player5.png",
        ⵠⵠⵠⲆᐃⲆᐃ: "img/avatar-player6.png",
        ΔⲆⲆΔⲆⵠᐃ: "img/avatar-player7.png",
        ⲆⵠΔⵠᐃⵠⵠ: "img/avatar-player8.png",
        ΔᐃΔΔⲆΔⵠ: "img/avatar-player9.png",
        ᐃΔᐃⲆⲆⵠⲆ: "img/avatar-player10.png",
        ΔᐃΔᐃΔᐃⵠ: "img/avatar-player11.png",
        ᐃᐃᐃⵠⲆᐃⵠ: "img/avatar-player12.png",
        ΔΔΔΔⵠⲆⲆ: "img/avatar-player13.png",
        ⲆⲆᐃⲆᐃΔΔ: "img/avatar-player14.png",
        ᐃⲆΔᐃⲆⲆΔ: "img/avatar-player14.png",
        ΔΔⲆⵠⲆΔⵠ: "img/avatar-player14.png",
        ⵠⲆⲆⵠⵠⵠΔ: "img/avatar-player14.png",
        ΔΔᐃΔΔⵠⲆⲆᐃ: "img/golden-bread.png",
        ⵠᐃⲆΔΔᐃⲆ: "img/buy-bread-out.png",
        ⵠⲆⵠⲆᐃΔᐃ: "img/buy-bread-in.png",
        ΔᐃⵠⵠⵠᐃΔ: "img/buy-bread-click.png",
        ΔⲆᐃᐃⵠᐃⲆ: "img/gauge.png",
        ⲆΔⲆⲆΔⲆⵠⵠΔ: "img/season-4-out.png",
        ⵠᐃⲆⵠᐃᐃⵠⵠᐃ: "img/season-4-in.png",
        ⲆΔⵠᐃⵠᐃΔⵠⵠ: "img/season-4-click.png",
        ΔⵠⲆᐃᐃΔⲆᐃⲆ: "img/season4-box.png",
        ⵠΔΔⵠΔⵠᐃⵠⵠ: "img/season-5-out.png",
        ᐃⵠⲆⲆᐃΔΔⲆᐃ: "img/season-5-in.png",
        ΔⵠΔⲆᐃⵠⵠⵠΔ: "img/season-5-click.png",
        ΔᐃᐃᐃΔᐃⵠⲆΔ: "img/season5-box.png",
        ᐃⲆΔⲆᐃⵠᐃ: "img/season-6-out.png",
        ΔⲆⵠⵠᐃⵠⲆ: "img/season-6-in.png",
        ⲆⲆⲆΔⵠⲆⲆ: "img/season-6-click.png",
        ⲆᐃⵠⵠⵠⲆⲆ: "img/season6-box.png",
        ⲆⲆⲆⵠΔᐃⲆ: "img/profile3-box.png",
        ⲆⵠⲆᐃΔΔᐃ: "img/skins-box.png",
        ⵠΔⵠᐃᐃⵠⵠ: "img/shop-box.png",
        ᐃΔᐃⵠⵠⲆⲆᐃⵠ: "img/private-server-box.png",
        ⵠᐃᐃᐃⲆᐃΔ: "img/location-box.png",
        ΔⵠᐃⲆⵠΔⲆ: "img/server-duration-box.png",
        ⵠᐃᐃᐃⵠᐃⵠ: "img/tutorial-box.png",
        ᐃΔⲆⲆᐃΔᐃ: "img/leaderboard2-box.png",
        ⲆⵠⲆᐃⵠΔⲆ: "img/buy-breads-box.png",
        ΔⵠⵠΔᐃⲆΔ: "img/bag-box.png",
        ⵠⵠᐃΔⵠᐃΔ: "img/deadbox-box.png",
        ᐃⵠⲆⵠΔⵠᐃ: "img/book-box.png",
        ᐃⵠᐃⲆΔᐃΔ: "img/accessories-box.png",
        ⵠⵠⵠᐃⵠᐃΔ: "img/customskin-box.png",
        ΔⲆΔΔΔⲆⲆ: "img/bag-lasts.png",
        ᐃⵠᐃⲆΔⲆᐃ: "img/server-lasts.png",
        ΔᐃΔᐃⵠⲆⵠ: "img/server-access-box3.png",
        ⲆⵠⲆΔᐃΔⵠ: "img/lootbox-box.png",
        ᐃⲆⲆⵠΔⲆΔ: "img/change-nickname0.png",
        ⵠⵠⵠΔⲆΔⲆ: "img/change-nickname1.png",
        ⲆΔⲆΔΔⵠⲆ: "img/cheating-box.png",
        ⲆⵠᐃΔⵠⵠⲆᐃᐃ: "img/daily-quest-box.png",
        ⵠᐃⲆⵠⲆΔⵠⲆΔ: "img/daily-5-bread.png",
        ᐃⵠⵠⲆᐃⵠΔᐃⲆ: "img/daily-10-bread.png",
        ΔᐃⲆᐃΔⵠᐃΔⵠ: "img/daily-valid.png",
        ᐃⲆⲆᐃⲆΔⲆ: "img/normal-profile-out.png",
        ᐃΔⵠⵠΔΔⲆ: "img/normal-profile-in.png",
        ⲆΔᐃΔΔᐃⵠ: "img/normal-profile-click.png",
        ΔⲆⲆΔᐃΔᐃ: "img/forest-profile-out.png",
        ⲆΔⲆⵠΔⲆⲆ: "img/forest-profile-in.png",
        ⵠⲆⵠⵠᐃΔΔ: "img/forest-profile-click.png",
        ΔⵠⲆⵠⲆᐃⵠ: "img/zombie-profile-out.png",
        ᐃⲆΔᐃⲆΔΔ: "img/zombie-profile-in.png",
        ⲆⵠⲆᐃⲆⲆⵠ: "img/zombie-profile-click.png",
        ᐃⵠᐃᐃᐃⵠⲆ: "img/vampire-profile-out.png",
        ⵠⲆᐃⲆᐃⵠᐃ: "img/vampire-profile-in.png",
        ΔⲆᐃΔⲆᐃⲆ: "img/vampire-profile-click.png",
        ΔᐃΔΔⲆΔΔ: "img/total-profile-out.png",
        ΔⲆΔⲆΔᐃⲆ: "img/total-profile-in.png",
        ⵠⲆⵠⲆᐃΔⵠ: "img/total-profile-click.png",
        ⵠⲆᐃᐃᐃⲆⵠ: "img/season1-out.png",
        ⲆⵠⲆⲆⲆⲆⵠ: "img/season1-in.png",
        ΔᐃⲆⵠⵠΔⵠ: "img/season1-click.png",
        ⲆⵠⵠΔⵠⲆⲆ: "img/season2-out.png",
        ⲆⵠⲆΔΔⲆⲆ: "img/season2-in.png",
        ⲆᐃⵠⵠⲆΔⲆ: "img/season2-click.png",
        ⲆⲆᐃΔⲆᐃΔ: "img/season3-out.png",
        ⵠΔⵠᐃᐃᐃⵠ: "img/season3-in.png",
        ⵠΔⲆⵠⲆⵠᐃ: "img/season3-click.png",
        ᐃⲆⲆᐃⵠⵠΔ: "img/season4-out.png",
        ⵠⲆΔΔᐃⲆⵠ: "img/season4-in.png",
        ⲆΔⲆⲆᐃᐃᐃ: "img/season4-click.png",
        ⵠΔⲆᐃⵠⵠⲆ: "img/season5-out.png",
        ΔⲆⲆΔⲆΔⵠ: "img/season5-in.png",
        ⲆⵠΔⵠⲆΔΔ: "img/season5-click.png",
        ⵠⲆᐃⲆᐃᐃΔ: "img/season6-out.png",
        ⵠⲆΔⲆᐃᐃᐃ: "img/season6-in.png",
        ⵠᐃᐃᐃΔΔᐃ: "img/season6-click.png",
        ΔΔⵠᐃΔⲆΔ: "img/locked-skin-alert.png",
        ⲆⲆᐃⵠΔᐃᐃ: "img/locked-custom-alert.png",
        ΔΔᐃᐃᐃⲆΔ: "img/bg-red-locked.png",
        ⲆⲆᐃΔᐃⵠⲆ: "img/skin-button-out.png",
        ᐃⲆᐃⵠᐃⲆᐃ: "img/skin-button-in.png",
        ᐃⵠⲆⲆΔⲆⲆ: "img/skin-button-click.png",
        ⲆⵠΔᐃⲆᐃΔ: "img/accessory-button-out.png",
        ᐃⲆᐃⵠⲆΔⲆ: "img/accessory-button-in.png",
        ⲆⵠΔⵠᐃΔⲆ: "img/accessory-button-click.png",
        ⲆᐃΔΔᐃᐃᐃ: "img/bag-button-out.png",
        ⲆᐃⵠᐃⲆⲆⲆ: "img/bag-button-in.png",
        ⵠᐃⵠⲆᐃΔΔ: "img/bag-button-click.png",
        ⵠⵠᐃⵠⲆΔⵠ: "img/book-button-out.png",
        ⲆΔᐃᐃⵠⲆΔ: "img/book-button-in.png",
        ΔΔᐃⲆⵠⵠΔ: "img/book-button-click.png",
        ᐃⵠΔᐃⵠⲆΔ: "img/deadbox-button-out.png",
        ΔⲆⵠⵠⲆΔⲆ: "img/deadbox-button-in.png",
        ᐃᐃⲆⵠⵠⵠⲆ: "img/deadbox-button-click.png",
        ⲆΔⵠⵠᐃⲆⲆ: "img/loot-button-out.png",
        ⵠΔΔⲆⵠΔⵠ: "img/loot-button-in.png",
        ⵠⲆⵠΔⵠᐃᐃ: "img/loot-button-click.png",
        ᐃⵠΔᐃⵠΔⵠ: "img/free-item-out.png",
        ΔΔᐃΔⲆⵠⵠ: "img/free-item-in.png",
        ᐃⲆΔⵠΔⲆⲆ: "img/free-item-click.png",
        ⵠΔΔⵠ: "img/wood-item-out.png",
        ⵠⵠⲆΔ: "img/wood-item-in.png",
        ᐃⲆⲆⲆ: "img/wood-item-click.png",
        ᐃⵠΔΔⲆΔᐃ: "img/stone-item.png",
        ⵠᐃΔΔᐃⲆΔ: "img/stone-item-in.png",
        ΔⲆΔΔᐃᐃΔ: "img/stone-item-click.png",
        ᐃΔᐃᐃᐃᐃᐃ: "img/gold-item.png",
        ΔⲆⲆᐃⵠⲆᐃ: "img/gold-item-in.png",
        ⲆᐃᐃΔⲆΔᐃ: "img/gold-item-click.png",
        ⲆⲆᐃᐃⵠⲆΔ: "img/diamond-item.png",
        ⵠⲆΔΔΔΔⵠ: "img/diamond-item-in.png",
        ᐃᐃⵠᐃⲆᐃⲆ: "img/diamond-item-click.png",
        ⲆⵠⲆⲆΔᐃΔ: "img/amethyst-item.png",
        ᐃᐃⲆⵠⲆⵠⵠ: "img/amethyst-item-in.png",
        ⲆⲆΔᐃⲆΔⵠ: "img/amethyst-item-click.png",
        ⵠᐃᐃᐃⵠⵠᐃ: "img/reidite-item.png",
        ᐃᐃᐃⲆⵠⲆΔ: "img/reidite-item-in.png",
        ⵠⵠᐃᐃΔⵠⲆ: "img/reidite-item-click.png",
        ⲆᐃⲆⵠᐃⵠΔ: "img/special-item-out.png",
        ⵠᐃΔⵠᐃⵠⵠ: "img/special-item-in.png",
        ΔΔⵠⵠⲆⵠΔ: "img/special-item-click.png",
        ΔⵠΔⲆⵠⲆΔ: "img/level-item-out.png",
        ᐃᐃⵠⲆⲆΔΔ: "img/level-item-in.png",
        ᐃᐃⲆⲆⵠⵠΔ: "img/level-item-click.png",
        ⵠᐃΔΔΔⵠᐃ: "img/skin-previous-out.png",
        ⲆΔᐃⵠⲆΔΔ: "img/skin-previous-in.png",
        ΔⵠᐃᐃᐃᐃⲆ: "img/skin-previous-click.png",
        ΔⵠⵠⲆᐃⲆᐃ: "img/skin-next-out.png",
        ⵠⵠⵠᐃᐃⲆⲆ: "img/skin-next-in.png",
        ᐃΔⲆΔᐃΔⵠ: "img/skin-next-click.png",
        ⵠᐃⲆⵠᐃ: "img/back-button-out.png",
        ⵠΔΔᐃⲆ: "img/back-button-in.png",
        ⲆⵠᐃᐃΔ: "img/back-button-click.png",
        ΔᐃⲆΔⲆⵠⵠ: "img/get-more-button-out.png",
        ⵠⵠΔᐃΔΔⵠ: "img/get-more-button-in.png",
        ᐃⵠⵠⲆΔⵠΔ: "img/get-more-button-click.png",
        ⲆᐃᐃΔΔⵠΔ: "img/currency1-out.png",
        ΔΔΔⲆΔΔⲆ: "img/currency1-in.png",
        ᐃᐃⵠⵠⵠⵠΔ: "img/currency1-click.png",
        ⵠⲆᐃⲆⵠⵠⲆ: "img/currency2-out.png",
        ⲆΔΔⵠΔΔⵠ: "img/currency2-in.png",
        ⲆᐃΔᐃⵠⲆⲆ: "img/currency2-click.png",
        ΔⵠΔⵠΔΔΔ: "img/currency3-out.png",
        ⲆΔΔⲆᐃΔΔ: "img/currency3-in.png",
        ΔⵠΔⲆⵠⲆⲆ: "img/currency3-click.png",
        ᐃΔᐃⲆⲆΔⵠ: "img/currency4-out.png",
        ⵠᐃⵠⵠᐃΔΔ: "img/currency4-in.png",
        ΔⵠⲆⲆᐃᐃΔ: "img/currency4-click.png",
        ⵠⵠΔᐃⵠᐃⲆ: "img/currency5-out.png",
        ΔᐃⵠΔᐃⵠΔ: "img/currency5-in.png",
        ᐃΔⵠⵠᐃⵠⲆ: "img/currency5-click.png",
        ⲆᐃΔⲆᐃΔⲆ: "img/price1-out.png",
        ⵠⲆⵠΔΔⵠⵠ: "img/price1-in.png",
        ⵠΔᐃᐃᐃΔⲆ: "img/price1-click.png",
        ⵠⲆⵠⵠᐃᐃᐃ: "img/price2-out.png",
        ΔᐃΔⲆⵠⵠⵠ: "img/price2-in.png",
        ΔΔⵠⲆᐃⲆⵠ: "img/price2-click.png",
        ⵠⵠⵠⵠⲆⲆΔ: "img/price3-out.png",
        ⲆΔⵠᐃᐃⲆΔ: "img/price3-in.png",
        ΔⲆΔΔᐃᐃⲆ: "img/price3-click.png",
        ΔⲆᐃΔᐃᐃⵠ: "img/price4-out.png",
        ΔᐃⵠΔⵠⲆᐃ: "img/price4-in.png",
        ⵠⲆΔⵠⲆⲆⲆ: "img/price4-click.png",
        ⵠΔΔⵠΔᐃⲆ: "img/price5-out.png",
        ΔⲆⲆⲆᐃᐃⵠ: "img/price5-in.png",
        ᐃⵠΔᐃⲆⵠΔ: "img/price5-click.png",
        ΔΔΔᐃᐃⵠⵠⵠⵠ: "img/buy-private-server-out.png",
        ⵠᐃⵠⲆᐃⵠᐃⵠᐃ: "img/buy-private-server-in.png",
        ⲆⵠⲆⲆΔⲆⲆΔᐃ: "img/buy-private-server-click.png",
        ⵠⲆⲆⵠᐃⵠΔ: "img/atlanta-button-out.png",
        ᐃΔⵠⵠⵠΔᐃ: "img/atlanta-button-in.png",
        ⲆΔⵠΔⵠΔᐃ: "img/atlanta-button-click.png",
        ΔⵠΔⵠⵠᐃΔ: "img/los-angeles-button-out.png",
        ⵠᐃⲆΔΔᐃΔ: "img/los-angeles-button-in.png",
        ΔΔᐃⲆᐃΔᐃ: "img/los-angeles-button-click.png",
        ⵠᐃⵠᐃⲆΔΔ: "img/sydney-button-out.png",
        ⵠΔᐃΔΔΔⲆ: "img/sydney-button-in.png",
        ⲆΔⵠⲆⲆΔΔ: "img/sydney-button-click.png",
        ⲆΔⲆᐃᐃᐃᐃ: "img/frankfurt-button-out.png",
        ᐃΔⵠⵠⵠᐃᐃ: "img/frankfurt-button-in.png",
        ΔΔΔᐃⲆⲆᐃ: "img/frankfurt-button-click.png",
        ΔⵠⵠⲆⵠⲆⲆ: "img/osaka-button-out.png",
        ⵠΔΔΔⲆΔᐃ: "img/osaka-button-in.png",
        ⲆΔⲆᐃΔᐃΔ: "img/osaka-button-click.png",
        ⵠⵠⵠⲆΔⲆⵠⲆⲆ: "img/yes-location-out.png",
        ⵠᐃⵠⵠⵠΔⵠⵠⵠ: "img/yes-location-in.png",
        ᐃⵠⲆⵠⵠⵠⲆⵠΔ: "img/yes-location-click.png",
        ⲆⲆⵠⵠᐃⵠΔ: "img/3days-button-out.png",
        ΔΔΔΔΔⲆⲆ: "img/3days-button-in.png",
        ⲆΔⵠᐃⵠᐃⲆ: "img/3days-button-click.png",
        ΔⵠᐃⲆⵠⲆᐃ: "img/7days-button-out.png",
        ⲆΔⲆΔⲆᐃⲆ: "img/7days-button-in.png",
        ⲆⲆᐃΔⵠⵠᐃ: "img/7days-button-click.png",
        ᐃΔᐃⵠⵠᐃⵠ: "img/30days-button-out.png",
        ⵠⵠΔᐃⵠΔᐃ: "img/30days-button-in.png",
        ᐃⲆⵠⲆⵠᐃᐃ: "img/30days-button-click.png",
        ΔⲆⵠⲆⲆᐃᐃ: "img/90days-button-out.png",
        ⲆⲆⲆⵠΔᐃᐃ: "img/90days-button-in.png",
        ⲆⵠⵠⵠⲆⵠⵠ: "img/90days-button-click.png",
        ⲆΔᐃᐃⵠΔᐃ: "img/spin1.png",
        ⵠᐃⵠᐃⵠⲆⵠ: "img/spin2.png",
        ⲆⲆⲆⲆⲆⵠΔ: "img/spin3.png",
        ⵠᐃᐃᐃᐃΔΔ: "img/spin4.png",
        ΔᐃᐃΔⵠΔⵠ: "img/spin5.png",
        ΔᐃᐃⲆᐃⵠᐃ: "img/spin6.png",
        ᐃⵠᐃⵠⲆᐃᐃ: "img/arrow-spin.png",
        ⲆΔΔΔΔΔⵠ: "img/spin-button-1-out.png",
        ᐃⲆⵠⵠⵠᐃΔ: "img/spin-button-1-in.png",
        ⲆⲆᐃᐃⵠΔᐃ: "img/spin-button-1-click.png",
        ᐃᐃⲆⵠⲆᐃΔ: "img/spin-button-2-out.png",
        ⲆᐃⲆΔᐃⵠⵠ: "img/spin-button-2-in.png",
        ᐃⲆⵠⵠⲆᐃΔ: "img/spin-button-2-click.png",
        ᐃΔⵠⵠᐃⵠᐃ: "img/spin-button-3-out.png",
        ᐃⵠᐃⵠΔⲆⲆ: "img/spin-button-3-in.png",
        ΔⵠⲆⵠⵠΔᐃ: "img/spin-button-3-click.png",
        ΔⲆΔΔⵠᐃⵠ: "img/spin-button-4-out.png",
        ΔΔΔᐃⵠᐃᐃ: "img/spin-button-4-in.png",
        ⲆⵠⵠⲆⵠᐃᐃ: "img/spin-button-4-click.png",
        ⲆᐃⲆⲆⲆⲆᐃ: "img/spin-button-5-out.png",
        ΔΔⵠΔⲆⲆⲆ: "img/spin-button-5-in.png",
        ᐃⲆⲆⲆΔⵠⵠ: "img/spin-button-5-click.png",
        ⲆΔⵠΔΔⵠⲆ: "img/spin-light.png",
        ΔⵠΔᐃΔⲆⲆ: "img/tuto-wiki-out.png",
        ⲆΔᐃᐃⵠᐃⵠ: "img/tuto-wiki-in.png",
        ⵠΔⲆⲆΔᐃⵠ: "img/tuto-wiki-click.png",
        ΔᐃΔⲆⵠΔΔ: "img/tuto-previous-out.png",
        ⲆⵠⵠⲆⲆᐃⲆ: "img/tuto-previous-in.png",
        ⵠΔΔⵠΔᐃΔ: "img/tuto-previous-click.png",
        ᐃⲆⵠⲆⵠᐃⵠ: "img/tuto-next-out.png",
        ΔΔⲆⲆⵠᐃᐃ: "img/tuto-next-in.png",
        ᐃⵠⵠⲆⲆΔⵠ: "img/tuto-next-click.png",
        ⵠΔᐃᐃⲆΔⵠ: "img/time-leaderboard-out.png",
        ⲆᐃᐃΔᐃΔΔ: "img/time-leaderboard-in.png",
        ᐃᐃΔⵠⵠᐃᐃ: "img/time-leaderboard-click.png",
        ᐃⲆⵠΔᐃᐃᐃ: "img/score-leaderboard-out.png",
        ᐃᐃⲆⲆᐃᐃᐃ: "img/score-leaderboard-in.png",
        ΔⲆᐃⲆΔⲆᐃ: "img/score-leaderboard-click.png",
        ⵠⲆⲆΔⵠΔᐃ: "img/lvl-leaderboard-out.png",
        ⲆᐃΔⵠᐃΔΔ: "img/lvl-leaderboard-in.png",
        ᐃⵠⵠⲆⲆⲆΔ: "img/lvl-leaderboard-click.png",
        ⲆⲆΔⲆᐃΔⲆ: "img/kill-leaderboard-out.png",
        ΔΔⲆᐃⲆΔⵠ: "img/kill-leaderboard-in.png",
        ᐃᐃᐃⲆⵠᐃᐃ: "img/kill-leaderboard-click.png",
        ᐃⲆⲆⵠΔᐃᐃ: "img/all-leaderboard-out.png",
        ᐃⲆΔΔΔⲆΔ: "img/all-leaderboard-in.png",
        ᐃⵠⵠⲆΔⲆⵠ: "img/all-leaderboard-click.png",
        ΔⵠΔⲆⵠⵠⵠ: "img/today-leaderboard-out.png",
        ⲆᐃⵠΔⵠᐃⲆ: "img/today-leaderboard-in.png",
        ΔΔⲆⲆⵠᐃΔ: "img/today-leaderboard-click.png",
        ⵠⵠΔᐃᐃⵠⲆ: "img/week-leaderboard-out.png",
        ⵠⵠᐃⲆⵠΔⲆ: "img/week-leaderboard-in.png",
        ᐃᐃΔΔⲆᐃΔ: "img/week-leaderboard-click.png",
        ΔΔⲆⵠⵠⲆⵠ: "img/season1-out.png",
        ⵠᐃⲆΔⵠⵠⲆ: "img/season1-in.png",
        ⵠⵠⵠᐃⵠᐃⲆ: "img/season1-click.png",
        ⲆᐃΔᐃⵠᐃᐃ: "img/season2-out.png",
        ⲆᐃⲆᐃⲆΔⵠ: "img/season2-in.png",
        ⵠⲆⲆⵠⲆⲆⵠ: "img/season2-click.png",
        ⵠΔᐃΔⵠⲆᐃ: "img/season3-out.png",
        ᐃᐃᐃⵠⲆⵠⵠ: "img/season3-in.png",
        ᐃⵠⵠΔⲆⲆᐃ: "img/season3-click.png",
        ⲆⵠⲆⵠⵠΔⲆ: "img/season4-out.png",
        ⵠΔΔΔΔⵠⲆ: "img/season4-in.png",
        ⵠΔΔΔΔⲆⵠ: "img/season4-click.png",
        ⲆⵠΔⲆⵠⲆⲆ: "img/season5-out.png",
        ⲆⲆΔⲆⵠᐃⲆ: "img/season5-in.png",
        ⲆⲆᐃΔⲆᐃⵠ: "img/season5-click.png",
        ᐃΔΔᐃⲆΔΔ: "img/season6-out.png",
        ᐃⲆⵠᐃⵠᐃᐃ: "img/season6-in.png",
        ΔⵠⵠⵠΔΔⵠ: "img/season6-click.png",
        ᐃΔⲆΔᐃⵠⵠ: "img/total-lead-out.png",
        ΔᐃⵠⵠⲆΔⲆ: "img/total-lead-in.png",
        ΔΔᐃⲆⲆᐃⲆ: "img/total-lead-click.png",
        ⲆΔⵠⲆⲆΔⲆ: "img/normal-lead-out.png",
        ᐃⵠΔΔΔⲆⲆ: "img/normal-lead-in.png",
        ⵠᐃᐃⵠⵠΔⵠ: "img/normal-lead-click.png",
        ⲆᐃΔΔⲆᐃΔ: "img/forest-lead-out.png",
        ⵠᐃⲆᐃΔⲆΔ: "img/forest-lead-in.png",
        ⲆΔⲆⲆΔⵠⲆ: "img/forest-lead-click.png",
        ⵠⲆᐃⵠᐃⵠⵠ: "img/vampire-lead-out.png",
        ⵠⵠᐃⲆᐃⲆᐃ: "img/vampire-lead-in.png",
        ⵠⵠⵠⲆⵠⲆᐃ: "img/vampire-lead-click.png",
        ⵠΔⵠᐃⵠⲆᐃ: "img/zombie-lead-out.png",
        ΔⵠⵠᐃΔⲆᐃ: "img/zombie-lead-in.png",
        ΔΔΔⵠᐃⲆΔ: "img/zombie-lead-click.png",
        ᐃⲆⵠᐃᐃΔΔ: "img/day-level5.png",
        ΔᐃᐃᐃᐃⲆΔ: "img/night-level5.png",
        ᐃⵠⲆΔⲆᐃΔ: "img/day-level10.png",
        ⵠⵠⲆΔΔⲆⵠ: "img/night-level10.png",
        ⲆΔⲆᐃⲆⵠᐃ: "img/day-level15.png",
        ΔⲆΔΔⲆΔⲆ: "img/night-level15.png",
        ΔⲆⲆᐃⲆⲆⲆ: "img/day-level20.png",
        ΔᐃⵠΔⲆΔᐃ: "img/night-level20.png",
        ⵠⵠⵠⲆΔⵠⵠ: "img/day-level25.png",
        ⵠⵠᐃᐃᐃⵠⲆ: "img/night-level25.png",
        ᐃΔⲆᐃⵠᐃⲆ: "img/day-level30.png",
        ⵠΔΔⵠⵠⵠⵠ: "img/night-level30.png",
        ⲆᐃⲆΔΔⲆⲆ: "img/day-level35.png",
        ᐃⲆⲆᐃⵠⲆᐃ: "img/night-level35.png",
        ΔΔᐃΔΔᐃΔ: "img/day-level40.png",
        ᐃᐃⵠᐃⲆⲆⵠ: "img/night-level40.png",
        ᐃΔᐃⲆⵠⲆⲆ: "img/day-level45.png",
        ⲆΔᐃᐃⵠⵠᐃ: "img/night-level45.png",
        ⵠΔⲆⲆⲆΔᐃ: "img/day-level50.png",
        ᐃⲆΔΔΔΔᐃ: "img/night-level50.png",
        ⵠᐃⲆᐃⲆΔⲆ: "img/day-level55.png",
        ⲆᐃᐃⲆⲆᐃⵠ: "img/night-level55.png",
        ᐃᐃΔᐃᐃΔⵠ: "img/day-level60.png",
        ᐃΔⲆⵠΔᐃΔ: "img/night-level60.png",
        ΔΔᐃΔⵠⲆᐃ: "img/day-skin-devast0.png",
        ⲆᐃΔᐃᐃᐃⲆ: "img/night-skin-devast0.png",
        ⵠΔΔΔⵠⵠⵠ: "img/day-hand-devaster.png",
        ⵠᐃⵠᐃᐃⵠⵠ: "img/night-hand-devaster.png",
        ΔⲆⵠᐃᐃΔᐃ: "img/day-skin-star0.png",
        ⲆⲆᐃⵠⵠⵠⲆ: "img/night-skin-star0.png",
        ΔᐃⲆᐃⲆΔᐃ: "img/day-hand-star0.png",
        ΔⵠⵠΔⲆᐃᐃ: "img/night-hand-star0.png",
        ᐃⵠᐃⵠⵠΔᐃ: "img/day-vampire.png",
        ⵠⵠᐃⵠΔⵠⵠ: "img/night-vampire.png",
        ᐃⵠΔⲆⲆⵠΔ: "img/day-hand-vampire.png",
        ⲆᐃⵠⲆΔᐃΔ: "img/night-hand-vampire.png",
        ⲆⲆᐃᐃΔᐃⲆ: "img/day-zombie.png",
        ΔⲆΔΔⲆⵠᐃ: "img/night-zombie.png",
        ΔⲆᐃⲆⵠⲆⵠ: "img/day-hand-zombie.png",
        ⲆᐃΔΔᐃᐃⲆ: "img/night-hand-zombie.png",
        ⲆΔᐃⵠᐃᐃΔ: "img/day-skin113.png",
        ᐃⵠⲆᐃΔⵠⵠ: "img/night-skin113.png",
        ⵠΔⲆΔΔΔᐃ: "img/day-hand-skin113.png",
        ⲆⲆⲆᐃⵠΔΔ: "img/night-hand-skin113.png",
        ⵠⲆΔᐃΔⲆᐃ: "img/day-skin0.png",
        ⲆᐃᐃΔⵠΔⲆ: "img/night-skin0.png",
        ΔΔᐃⵠΔⲆᐃ: "img/day-skin1.png",
        ⵠᐃᐃᐃⲆΔᐃ: "img/night-skin1.png",
        ⲆᐃΔⲆⵠⲆⵠ: "img/day-skin2.png",
        ⲆᐃΔΔΔⲆⲆ: "img/night-skin2.png",
        ⲆⵠⵠᐃΔⵠΔ: "img/day-skin3.png",
        ⵠⵠⵠΔᐃⲆΔ: "img/night-skin3.png",
        ⲆᐃⲆⵠⵠΔⵠ: "img/day-skin4.png",
        ᐃΔΔⵠΔⵠᐃ: "img/night-skin4.png",
        ⵠᐃΔᐃⵠⵠΔ: "img/day-skin5.png",
        ⲆΔᐃⵠᐃⲆΔ: "img/night-skin5.png",
        ⲆᐃⲆΔΔⵠᐃ: "img/day-skin6.png",
        ⵠⵠⵠⲆⲆΔᐃ: "img/night-skin6.png",
        ⵠⵠᐃⵠΔⲆⵠ: "img/day-skin7.png",
        ᐃΔᐃΔᐃⲆⵠ: "img/night-skin7.png",
        ⲆΔΔΔⲆⲆⵠ: "img/day-skin8.png",
        ΔⵠᐃΔΔΔⲆ: "img/night-skin8.png",
        ᐃⵠΔᐃᐃⲆᐃ: "img/day-skin9.png",
        ⵠⲆⵠΔᐃᐃⲆ: "img/night-skin9.png",
        ⲆⵠⵠⵠⲆΔⲆ: "img/day-skin10.png",
        ᐃⲆⵠᐃΔⵠⲆ: "img/night-skin10.png",
        ⲆⲆΔΔⵠⲆᐃ: "img/day-skin11.png",
        ΔⲆᐃⵠⲆᐃΔ: "img/night-skin11.png",
        ⲆⵠⲆᐃⲆⲆΔ: "img/day-skin12.png",
        ᐃΔΔⵠⲆⲆⵠ: "img/night-skin12.png",
        ⵠᐃⲆⵠΔⵠᐃ: "img/day-skin13.png",
        ΔⵠΔⲆᐃⵠⵠ: "img/night-skin13.png",
        ΔⵠᐃΔⲆΔⵠ: "img/day-skin14.png",
        ⲆⲆⵠⵠᐃⲆⲆ: "img/night-skin14.png",
        ⵠⵠᐃⲆⵠᐃⲆ: "img/day-skin15.png",
        ᐃΔⲆᐃⲆⵠⲆ: "img/night-skin15.png",
        ᐃⵠᐃΔⲆᐃΔ: "img/day-skin16.png",
        ᐃⵠⵠⵠⵠⵠⵠ: "img/night-skin16.png",
        ΔᐃΔΔⵠⵠⲆ: "img/day-skin17.png",
        ΔⵠΔΔᐃΔⲆ: "img/night-skin17.png",
        ⵠⵠⲆᐃⲆΔⲆ: "img/day-skin18.png",
        ᐃᐃᐃᐃⲆⲆⵠ: "img/night-skin18.png",
        ΔΔΔⵠᐃΔⵠ: "img/day-skin19.png",
        ⵠᐃⲆᐃⲆⲆΔ: "img/night-skin19.png",
        ᐃΔⵠⲆᐃⲆᐃ: "img/day-skin20.png",
        ⵠΔᐃΔⲆΔΔ: "img/night-skin20.png",
        ⲆⲆⲆⲆᐃΔⵠ: "img/day-skin21.png",
        ᐃⵠⲆᐃⵠⲆⲆ: "img/night-skin21.png",
        ᐃᐃⲆᐃⵠⲆⲆ: "img/day-skin22.png",
        ⲆΔⵠᐃⵠΔΔ: "img/night-skin22.png",
        ΔᐃᐃΔⵠⵠᐃ: "img/day-skin23.png",
        ᐃⵠΔᐃⵠⲆⲆ: "img/night-skin23.png",
        ⵠᐃⵠΔⵠⲆᐃ: "img/day-skin24.png",
        ⵠⵠⲆⵠᐃΔⵠ: "img/night-skin24.png",
        ᐃⲆⵠᐃⵠΔᐃ: "img/day-skin25.png",
        ⵠⵠⲆⲆⲆⵠᐃ: "img/night-skin25.png",
        ΔᐃⵠΔΔⲆⲆ: "img/day-skin26.png",
        ΔⲆᐃᐃΔⵠⵠ: "img/night-skin26.png",
        ⵠᐃΔᐃΔⵠⵠ: "img/day-skin27.png",
        ⲆⵠⵠⲆⵠΔⵠ: "img/night-skin27.png",
        ΔⲆⵠⲆΔᐃⲆ: "img/day-skin28.png",
        ⵠᐃᐃⵠᐃΔΔ: "img/night-skin28.png",
        ⲆⵠⵠⵠΔᐃⲆ: "img/day-skin29.png",
        ΔⵠᐃⲆⵠⲆⵠ: "img/night-skin29.png",
        ᐃⲆⲆΔΔⵠΔ: "img/day-skin30.png",
        ⲆⲆᐃⲆᐃⵠᐃ: "img/night-skin30.png",
        ⵠⲆⵠᐃⵠΔⲆ: "img/day-skin31.png",
        ⲆⲆΔⲆΔⵠⵠ: "img/night-skin31.png",
        ⲆΔᐃⵠΔⵠΔ: "img/day-skin32.png",
        ⵠⲆⲆⲆⵠⲆᐃ: "img/night-skin32.png",
        ⲆⵠΔⲆⲆⵠᐃ: "img/day-skin33.png",
        ΔⲆᐃⲆⵠΔⵠ: "img/night-skin33.png",
        ⵠΔΔⵠᐃⵠΔ: "img/day-skin34.png",
        ⲆᐃⵠⲆΔΔᐃ: "img/night-skin34.png",
        ᐃΔⲆⲆᐃΔⲆ: "img/day-skin35.png",
        ⵠΔᐃᐃᐃᐃⵠ: "img/night-skin35.png",
        ΔⵠᐃᐃΔᐃⵠ: "img/day-skin36.png",
        ⵠΔⵠᐃⲆⵠⵠ: "img/night-skin36.png",
        ΔΔΔᐃⵠⵠΔ: "img/day-skin37.png",
        ⵠⵠⲆⵠΔΔⵠ: "img/night-skin37.png",
        ᐃΔⲆⵠᐃΔᐃ: "img/day-skin38.png",
        ⵠⲆΔⵠⵠⵠΔ: "img/night-skin38.png",
        ᐃᐃⲆΔⵠⲆᐃ: "img/day-skin39.png",
        ΔⲆᐃⵠᐃⵠΔ: "img/night-skin39.png",
        ⲆⲆⵠⲆᐃⵠΔ: "img/day-skin40.png",
        ⲆΔΔᐃΔⲆΔ: "img/night-skin40.png",
        ᐃⵠᐃᐃΔⵠᐃ: "img/day-skin41.png",
        ΔΔᐃᐃΔΔᐃ: "img/night-skin41.png",
        ᐃⲆⲆⲆᐃᐃⲆ: "img/day-skin42.png",
        ⵠⲆΔᐃΔⲆⵠ: "img/night-skin42.png",
        ΔⵠΔᐃΔᐃΔ: "img/day-skin43.png",
        ⲆⵠⲆⵠⲆⲆⲆ: "img/night-skin43.png",
        ⲆΔΔⵠⲆⲆⲆ: "img/day-skin44.png",
        ⵠⲆⲆᐃᐃⲆⵠ: "img/night-skin44.png",
        ᐃᐃⲆⵠⵠⲆⵠ: "img/day-skin45.png",
        ΔⲆⲆᐃⵠᐃⲆ: "img/night-skin45.png",
        ᐃᐃⵠΔⲆΔΔ: "img/day-skin46.png",
        ⵠⵠⵠⲆᐃⵠᐃ: "img/night-skin46.png",
        ⲆⵠᐃΔΔΔΔ: "img/day-skin47.png",
        ᐃᐃⲆᐃⵠⵠⵠ: "img/night-skin47.png",
        ΔⵠΔᐃΔᐃⵠ: "img/day-skin48.png",
        Ⲇᐃᐃᐃⵠᐃⵠ: "img/night-skin48.png",
        ᐃΔᐃⲆᐃᐃΔ: "img/day-skin49.png",
        ⲆⲆⵠᐃᐃⵠⲆ: "img/night-skin49.png",
        ⵠᐃⵠᐃⵠᐃⲆ: "img/day-skin50.png",
        ⲆᐃΔⵠᐃΔⲆ: "img/night-skin50.png",
        ⵠⵠⲆⲆⵠΔΔ: "img/day-skin51.png",
        ⵠⵠⲆⲆΔΔⲆ: "img/night-skin51.png",
        ⲆⲆⵠᐃⲆΔⲆ: "img/day-skin52.png",
        ⲆⲆΔⵠⵠⵠΔ: "img/night-skin52.png",
        ᐃΔΔᐃᐃᐃⲆ: "img/day-skin53.png",
        ᐃᐃⵠⲆⵠⲆⲆ: "img/night-skin53.png",
        ΔⵠⵠⲆᐃᐃⵠ: "img/day-skin54.png",
        ⲆⵠᐃⵠⵠᐃⲆ: "img/night-skin54.png",
        ΔΔⵠΔᐃᐃⲆ: "img/day-skin55.png",
        ⲆⲆΔΔᐃⲆⵠ: "img/night-skin55.png",
        ᐃⵠⵠⲆΔᐃⵠ: "img/day-skin56.png",
        ΔⵠΔⲆⲆⵠΔ: "img/night-skin56.png",
        ΔΔΔⲆⲆΔⲆ: "img/day-skin57.png",
        ⲆᐃᐃᐃᐃᐃⲆ: "img/night-skin57.png",
        ⲆΔΔΔΔⵠⵠ: "img/day-skin58.png",
        ᐃⵠᐃⲆΔᐃᐃ: "img/night-skin58.png",
        ᐃΔΔⲆⵠⵠⵠ: "img/day-skin59.png",
        ⵠᐃΔⲆᐃᐃⵠ: "img/night-skin59.png",
        ᐃⲆᐃᐃⵠⲆⵠ: "img/day-skin60.png",
        ΔⵠⵠᐃⲆⵠⵠ: "img/night-skin60.png",
        ΔⲆⲆΔΔⲆΔ: "img/day-skin61.png",
        ⲆⲆᐃᐃⲆΔⵠ: "img/night-skin61.png",
        ΔⵠΔᐃⲆⵠᐃ: "img/day-skin62.png",
        ⵠⲆⲆⵠⵠⲆⲆ: "img/night-skin62.png",
        ⵠᐃⲆᐃᐃᐃⲆ: "img/day-skin63.png",
        ⲆᐃᐃⵠⲆΔⵠ: "img/night-skin63.png",
        ᐃᐃΔΔⲆΔᐃ: "img/day-skin64.png",
        ΔⲆΔΔⲆⲆΔ: "img/night-skin64.png",
        ⵠⵠΔᐃΔⵠΔ: "img/day-skin65.png",
        ⲆΔΔⲆⵠⵠⲆ: "img/night-skin65.png",
        ⲆⲆᐃᐃⲆⵠⵠ: "img/day-skin66.png",
        ⲆⲆⲆᐃΔᐃⵠ: "img/night-skin66.png",
        ⲆⵠⲆΔᐃᐃⵠ: "img/day-skin67.png",
        ᐃᐃᐃⵠⵠⵠᐃ: "img/night-skin67.png",
        ⵠᐃⵠⲆᐃⲆⲆ: "img/day-skin68.png",
        ⵠΔΔᐃⲆᐃᐃ: "img/night-skin68.png",
        ⲆⲆΔⲆⵠⲆΔ: "img/day-skin69.png",
        ᐃᐃΔᐃΔᐃⲆ: "img/night-skin69.png",
        ᐃⲆᐃΔⵠⲆⲆ: "img/day-skin70.png",
        ⵠΔⲆΔⲆΔⲆ: "img/night-skin70.png",
        ⵠⵠᐃᐃΔⲆⲆ: "img/day-skin71.png",
        ΔᐃⲆⲆⲆⵠΔ: "img/night-skin71.png",
        ⵠⵠⵠⵠΔⲆᐃ: "img/day-skin72.png",
        ⵠΔⲆⵠᐃⲆⲆ: "img/night-skin72.png",
        ⲆΔⲆᐃⵠΔⲆ: "img/day-skin73.png",
        ΔⵠΔⵠᐃⲆⲆ: "img/night-skin73.png",
        ΔΔᐃᐃᐃⵠⵠ: "img/day-skin74.png",
        ΔΔᐃⵠⵠⵠᐃ: "img/night-skin74.png",
        ⵠⵠΔΔⲆⲆⲆ: "img/day-skin75.png",
        ⵠΔⵠᐃⵠⵠΔ: "img/night-skin75.png",
        Δⵠᐃⵠᐃⵠⵠ: "img/day-skin76.png",
        ⵠⵠΔⲆⵠⵠⲆ: "img/night-skin76.png",
        ⲆⵠⲆⵠⵠⵠⵠ: "img/day-skin77.png",
        ᐃᐃᐃⵠΔΔⵠ: "img/night-skin77.png",
        ᐃⵠⲆⲆⲆΔΔ: "img/day-skin78.png",
        ⵠᐃΔⵠΔᐃⲆ: "img/night-skin78.png",
        ⵠᐃⲆᐃᐃΔΔ: "img/day-skin79.png",
        ΔᐃⵠⲆΔⵠⵠ: "img/night-skin79.png",
        ᐃⲆᐃᐃⵠⵠΔ: "img/day-skin80.png",
        ᐃⲆⲆⲆⲆⲆⵠ: "img/night-skin80.png",
        ᐃΔᐃΔⵠᐃⵠ: "img/day-skin81.png",
        ΔⲆⵠⲆⲆⵠⲆ: "img/night-skin81.png",
        ᐃᐃⲆΔⲆⵠⵠ: "img/day-skin82.png",
        ΔᐃⲆⵠᐃⵠⲆ: "img/night-skin82.png",
        ΔⲆΔⲆᐃΔᐃ: "img/day-skin83.png",
        ⵠᐃΔΔⲆⵠΔ: "img/night-skin83.png",
        ⵠᐃⲆΔⲆᐃⲆ: "img/day-skin84.png",
        ⵠⵠⲆΔΔΔᐃ: "img/night-skin84.png",
        ⵠⵠΔΔᐃΔᐃ: "img/day-skin85.png",
        ⵠⲆⲆΔⲆᐃⲆ: "img/night-skin85.png",
        ⵠΔⵠᐃΔⵠΔ: "img/day-skin86.png",
        ⲆᐃᐃⵠⵠⲆΔ: "img/night-skin86.png",
        ᐃⲆⲆᐃⵠΔⲆ: "img/day-skin87.png",
        ΔΔⵠⲆΔᐃⲆ: "img/night-skin87.png",
        ᐃᐃΔⲆⲆᐃⵠ: "img/day-skin88.png",
        ⵠⵠⲆᐃΔᐃΔ: "img/night-skin88.png",
        ⲆᐃᐃⲆⵠΔⵠ: "img/day-skin89.png",
        ᐃⵠⲆᐃⵠᐃⲆ: "img/night-skin89.png",
        ΔᐃΔⲆⵠⵠⲆ: "img/day-skin90.png",
        ⲆᐃΔⲆΔⲆⲆ: "img/night-skin90.png",
        ΔᐃⲆⵠⲆⵠⵠ: "img/day-skin91.png",
        ΔⵠⲆⲆΔⲆⲆ: "img/night-skin91.png",
        ⵠᐃΔⲆⵠᐃᐃ: "img/day-skin92.png",
        ᐃΔⲆⵠⲆΔΔ: "img/night-skin92.png",
        ⲆⵠⵠⵠΔⵠᐃ: "img/day-skin93.png",
        ⵠⵠᐃⲆᐃⵠⲆ: "img/night-skin93.png",
        ⲆΔⲆΔΔⵠⵠ: "img/day-skin94.png",
        ⵠΔⵠⲆᐃⵠΔ: "img/night-skin94.png",
        ᐃΔⲆⲆᐃᐃΔ: "img/day-skin95.png",
        ΔᐃΔⵠᐃⲆΔ: "img/night-skin95.png",
        ⲆⵠΔᐃΔΔⲆ: "img/day-skin96.png",
        ⲆⲆᐃⲆᐃᐃⵠ: "img/night-skin96.png",
        ⵠⵠᐃΔᐃⵠⵠ: "img/day-skin97.png",
        ΔᐃᐃⵠᐃⵠⲆ: "img/night-skin97.png",
        ⵠΔΔⵠⲆⵠⵠ: "img/day-skin98.png",
        ⲆⲆⲆⵠΔᐃΔ: "img/night-skin98.png",
        ᐃΔⵠᐃᐃᐃΔ: "img/day-skin99.png",
        ᐃΔⲆᐃΔⵠΔ: "img/night-skin99.png",
        ᐃⵠⲆᐃⵠⲆᐃ: "img/day-skin100.png",
        ⲆᐃΔᐃᐃⲆᐃ: "img/night-skin100.png",
        ΔΔᐃΔⲆⵠΔ: "img/day-skin101.png",
        ΔᐃΔΔΔⵠⵠ: "img/night-skin101.png",
        ⵠΔⵠᐃᐃⵠΔ: "img/day-skin102.png",
        ΔⲆᐃⵠⲆⲆⲆ: "img/night-skin102.png",
        ᐃⲆⲆⵠⵠᐃᐃ: "img/day-skin103.png",
        ⲆⵠⵠⲆⵠⲆⵠ: "img/night-skin103.png",
        ⲆⵠΔᐃᐃᐃⵠ: "img/day-skin104.png",
        ⲆΔᐃⲆⵠΔᐃ: "img/night-skin104.png",
        ⲆⲆᐃⲆΔᐃⲆ: "img/day-skin105.png",
        ⲆⲆᐃΔⲆⲆⲆ: "img/night-skin105.png",
        ᐃⲆΔⵠΔΔⵠ: "img/day-skin106.png",
        ᐃΔⵠⵠⲆⵠΔ: "img/night-skin106.png",
        ᐃΔΔⲆΔⲆΔ: "img/day-skin107.png",
        ᐃⲆⲆΔΔᐃⵠ: "img/night-skin107.png",
        ΔⵠΔⵠᐃΔⲆ: "img/day-skin108.png",
        ⲆᐃⲆΔᐃᐃᐃ: "img/night-skin108.png",
        ⲆΔⲆⵠⲆᐃΔ: "img/day-skin109.png",
        ᐃⵠⲆᐃⲆᐃΔ: "img/night-skin109.png",
        ᐃⵠΔΔⲆᐃΔ: "img/day-skin110.png",
        ⵠΔΔᐃⲆΔΔ: "img/night-skin110.png",
        ᐃⲆⵠΔⵠᐃⲆ: "img/day-skin111.png",
        ΔΔΔᐃⵠᐃΔ: "img/night-skin111.png",
        ᐃΔⵠⵠΔΔᐃ: "img/day-skin112.png",
        ΔᐃⲆΔⵠⲆⵠ: "img/night-skin112.png",
        ᐃⵠΔⲆⵠᐃⲆⲆⲆ: "img/day-skin113.png",
        ΔᐃΔΔⲆΔᐃΔᐃ: "img/night-skin113.png",
        ΔᐃΔⲆΔⲆⵠ: "img/day-skin114.png",
        ⲆᐃΔⵠΔΔⵠ: "img/night-skin114.png",
        ⲆⲆΔᐃΔⲆⵠ: "img/day-skin115.png",
        ⲆⲆΔᐃⲆΔᐃ: "img/night-skin115.png",
        ᐃⲆΔⲆⵠᐃΔ: "img/day-skin116.png",
        ΔᐃⲆⵠⲆΔⲆ: "img/night-skin116.png",
        ᐃⲆΔΔΔᐃΔ: "img/day-skin117.png",
        ⲆⲆᐃⵠⵠⲆᐃ: "img/night-skin117.png",
        ⵠᐃⲆⵠⲆΔⲆ: "img/day-skin118.png",
        ΔᐃᐃᐃⲆᐃΔ: "img/night-skin118.png",
        ⲆⲆⲆⵠᐃⲆᐃ: "img/day-skin119.png",
        ᐃⲆΔᐃⵠⲆᐃ: "img/night-skin119.png",
        ΔⵠΔⲆᐃⵠΔ: "img/day-skin120.png",
        ⲆΔΔΔⵠᐃⵠ: "img/night-skin120.png",
        ⲆⵠⲆᐃⵠⵠⵠ: "img/day-skin121.png",
        ΔⵠⲆᐃⲆΔΔ: "img/night-skin121.png",
        ᐃΔΔⵠⲆⲆΔ: "img/day-skin122.png",
        ⲆᐃⵠᐃⵠⲆᐃ: "img/night-skin122.png",
        ΔⵠⲆΔⲆᐃᐃ: "img/day-skin123.png",
        ⵠΔᐃⵠᐃΔᐃ: "img/night-skin123.png",
        ⲆⵠΔⲆᐃⲆⵠ: "img/day-skin124.png",
        ⵠⵠⵠⵠΔΔᐃ: "img/night-skin124.png",
        ⵠΔⲆⵠⵠⵠⵠ: "img/day-skin125.png",
        ΔⲆⲆᐃᐃⲆⲆ: "img/night-skin125.png",
        ΔⵠⵠⵠⵠⲆᐃ: "img/day-skin126.png",
        ΔⵠⵠⲆⲆⲆΔ: "img/night-skin126.png",
        ᐃⵠᐃⵠⲆΔᐃ: "img/day-skin127.png",
        ⵠⲆⵠⵠᐃΔⲆ: "img/night-skin127.png",
        ⵠΔᐃᐃΔᐃⵠ: "img/day-skin128.png",
        ⵠⲆᐃΔᐃⲆᐃ: "img/night-skin128.png",
        ΔᐃᐃΔᐃΔΔ: "img/day-skin129.png",
        ⲆⵠΔᐃⲆΔΔ: "img/night-skin129.png",
        ⵠΔⲆⵠⵠⵠⲆ: "img/day-skin130-1.png",
        ⲆᐃⲆⲆᐃⲆᐃ: "img/night-skin130-1.png",
        ⵠᐃᐃⲆⲆᐃⲆ: "img/day-skin131.png",
        ᐃⲆⲆⲆΔΔⲆ: "img/night-skin131.png",
        ⵠΔⲆᐃⲆⵠⲆ: "img/day-skin132.png",
        ⲆᐃⵠᐃⵠΔΔ: "img/night-skin132.png",
        ᐃΔᐃΔᐃᐃᐃ: "img/day-skin133.png",
        ⵠΔᐃᐃⲆᐃΔ: "img/night-skin133.png",
        ᐃΔᐃᐃⲆⵠᐃ: "img/day-skin134.png",
        ΔⲆⲆⵠⵠⲆΔ: "img/night-skin134.png",
        ΔⵠⵠᐃⵠΔΔ: "img/day-skin135.png",
        ⲆᐃᐃⲆΔᐃⵠ: "img/night-skin135.png",
        ⵠⲆⲆΔⵠⵠⲆ: "img/day-skin136.png",
        ⵠΔⲆΔⲆⲆⲆ: "img/night-skin136.png",
        ΔⵠⲆᐃΔᐃΔ: "img/day-skin137.png",
        ΔΔᐃⲆΔᐃⵠ: "img/night-skin137.png",
        ᐃΔᐃⲆⲆⲆᐃ: "img/day-skin138.png",
        ⲆΔⵠΔᐃⲆΔ: "img/night-skin138.png",
        ⲆΔᐃΔΔⲆⵠ: "img/day-skin139.png",
        ΔⲆΔΔᐃⲆᐃ: "img/night-skin139.png",
        ⲆΔΔⲆⲆⲆⲆ: "img/day-skin140.png",
        ΔⵠΔⵠᐃⲆᐃ: "img/night-skin140.png",
        ⲆΔⲆⵠᐃⲆᐃ: "img/day-skin141.png",
        ⲆⲆⲆⵠⲆᐃⵠ: "img/night-skin141.png",
        ⲆⲆⲆΔⵠᐃΔ: "img/day-skin142.png",
        ⲆⲆᐃⲆᐃⲆΔ: "img/night-skin142.png",
        ⵠΔⵠΔⵠΔⲆ: "img/day-skin143.png",
        ᐃᐃᐃⲆΔΔⲆ: "img/night-skin143.png",
        ᐃᐃⲆΔᐃⵠⲆ: "img/day-skin144.png",
        ΔᐃᐃⵠⵠΔⵠ: "img/night-skin144.png",
        ΔⵠᐃᐃᐃⲆᐃ: "img/day-skin145.png",
        ⵠⵠⲆⲆⲆⲆᐃ: "img/night-skin145.png",
        ᐃᐃⲆᐃᐃᐃⲆ: "img/day-skin146.png",
        ⵠᐃⵠⵠΔⵠⵠ: "img/night-skin146.png",
        ⲆᐃⵠⵠⲆᐃΔ: "img/day-skin147.png",
        ⵠᐃᐃᐃΔΔΔ: "img/night-skin147.png",
        ΔⵠΔΔⲆᐃⲆ: "img/day-skin148.png",
        ᐃⵠⲆΔⵠⵠⲆ: "img/night-skin148.png",
        ΔΔⵠᐃⲆⵠΔ: "img/day-skin149.png",
        ⵠⵠⲆⲆΔⲆᐃ: "img/night-skin149.png",
        ᐃⵠᐃΔⵠᐃᐃ: "img/day-skin150.png",
        ΔⲆⵠΔⵠⲆᐃ: "img/night-skin150.png",
        ᐃΔΔΔⲆⲆΔ: "img/day-skin151.png",
        ᐃⵠⵠⵠⲆⵠⲆ: "img/night-skin151.png",
        ᐃⲆⵠⲆᐃⵠⵠ: "img/day-skin152.png",
        ᐃᐃᐃΔΔⲆⵠ: "img/night-skin152.png",
        ⲆΔΔᐃⵠⲆΔ: "img/day-skin153.png",
        ᐃⵠⵠᐃⲆⵠⵠ: "img/night-skin153.png",
        ⵠⲆΔΔⵠⲆⲆ: "img/day-skin154.png",
        ⲆⵠⲆᐃᐃΔΔ: "img/night-skin154.png",
        ⵠᐃⲆΔᐃⵠΔ: "img/day-skin155.png",
        ΔⲆᐃᐃⵠⲆⵠ: "img/night-skin155.png",
        ⲆᐃⲆⲆᐃⲆⵠ: "img/day-skin156.png",
        ⲆᐃΔᐃⲆⵠᐃ: "img/night-skin156.png",
        ⵠᐃⲆᐃⲆΔΔ: "img/day-skin157.png",
        ⵠⲆΔⲆΔΔⲆ: "img/night-skin157.png",
        ⵠⲆΔⵠⲆᐃΔ: "img/day-skin158.png",
        ⵠΔⲆΔΔᐃⵠ: "img/night-skin158.png",
        ΔⵠⲆⲆᐃⲆᐃ: "img/day-skin159.png",
        ⵠᐃΔΔΔⲆⵠ: "img/night-skin159.png",
        ⲆⲆᐃᐃⵠⵠⲆ: "img/day-skin160.png",
        ᐃᐃΔᐃⵠⲆⵠ: "img/night-skin160.png",
        ⲆⵠΔⵠⲆⲆⵠ: "img/day-skin161.png",
        ΔⲆᐃⲆᐃⲆⵠ: "img/night-skin161.png",
        ΔᐃⲆᐃᐃⵠᐃ: "img/day-skin162.png",
        ⲆⵠΔΔΔΔᐃ: "img/night-skin162.png",
        ⵠᐃᐃᐃⲆΔⵠ: "img/day-skin163.png",
        ΔΔⵠⲆⵠΔΔ: "img/night-skin163.png",
        ΔΔⵠⲆᐃΔⲆ: "img/day-skin164.png",
        ⵠⲆΔⲆⵠⲆΔ: "img/night-skin164.png",
        ⵠⵠⵠⵠᐃΔⵠ: "img/day-skin165.png",
        ΔΔᐃⵠᐃᐃᐃ: "img/night-skin165.png",
        ΔᐃΔᐃⵠΔΔ: "img/day-skin166.png",
        ⵠⲆᐃⲆⵠⲆⵠ: "img/night-skin166.png",
        ⲆⵠᐃΔΔᐃⲆ: "img/day-skin167.png",
        ⵠⵠⲆⵠᐃⵠΔ: "img/night-skin167.png",
        ᐃⲆᐃᐃᐃⲆᐃ: "img/day-skin168.png",
        ⲆΔⵠⵠᐃⲆᐃ: "img/night-skin168.png",
        ΔΔΔᐃⵠΔᐃ: "img/day-skin169.png",
        Ⲇⵠᐃᐃⵠᐃᐃ: "img/night-skin169.png",
        ⲆⲆᐃᐃᐃᐃⲆ: "img/day-skin170.png",
        ΔⵠⵠⲆⲆᐃⲆ: "img/night-skin170.png",
        ᐃⵠⵠΔⵠⲆⵠ: "img/day-skin171.png",
        ᐃᐃⵠⵠΔΔᐃ: "img/night-skin171.png",
        ΔⵠⵠⲆᐃΔᐃ: "img/day-skin172.png",
        ⵠΔⲆΔⵠᐃⵠ: "img/night-skin172.png",
        ᐃⲆᐃⵠⵠΔⵠ: "img/day-skin173.png",
        ⲆΔⲆᐃⲆΔᐃ: "img/night-skin173.png",
        ᐃⲆᐃΔᐃΔᐃ: "img/day-skin174.png",
        ⵠⲆΔⲆⵠᐃⵠ: "img/night-skin174.png",
        ⵠΔⵠⲆᐃᐃᐃ: "img/day-skin175.png",
        ΔᐃⲆⵠⲆⲆΔ: "img/night-skin175.png",
        ⵠᐃΔⲆΔⲆᐃ: "img/day-skin176.png",
        ⲆⵠⲆⵠⲆⲆᐃ: "img/night-skin176.png",
        ⵠⲆⵠᐃⲆⵠᐃ: "img/day-skin177.png",
        ⵠᐃⵠⲆΔⲆⵠ: "img/night-skin177.png",
        ᐃⲆⵠΔⵠⵠⵠ: "img/day-skin178.png",
        ᐃⵠⲆⲆⵠⲆᐃ: "img/night-skin178.png",
        ⲆⲆΔⵠΔⵠΔ: "img/day-skin179.png",
        ΔΔⲆⵠᐃⵠᐃ: "img/night-skin179.png",
        ⵠᐃⲆᐃⵠⲆᐃ: "img/day-skin180.png",
        ⵠⵠΔⲆᐃᐃΔ: "img/night-skin180.png",
        ΔᐃΔᐃΔⲆⲆ: "img/day-skin181.png",
        ᐃᐃᐃΔⲆⵠΔ: "img/night-skin181.png",
        ⲆΔΔᐃⵠⵠΔ: "img/day-skin182.png",
        ᐃᐃΔⵠⵠⲆΔ: "img/night-skin182.png",
        ΔΔᐃΔⵠᐃⲆ: "img/day-skin183.png",
        ᐃᐃⲆᐃᐃⵠΔ: "img/night-skin183.png",
        ⵠᐃΔΔⵠᐃⲆ: "img/day-skin184.png",
        ᐃᐃᐃΔⵠᐃᐃ: "img/night-skin184.png",
        ᐃⵠΔᐃΔΔⲆ: "img/day-skin185.png",
        ΔΔᐃΔᐃⲆⲆ: "img/night-skin185.png",
        ΔⲆΔⵠΔⲆⵠ: "img/day-skin186.png",
        ⲆΔᐃⵠⲆΔⵠ: "img/night-skin186.png",
        ᐃᐃⲆΔᐃΔⲆ: "img/day-skin187.png",
        ⲆᐃΔⵠⵠⲆᐃ: "img/night-skin187.png",
        ⲆᐃⵠⵠⵠⲆⵠ: "img/day-skin188.png",
        ΔⵠΔΔᐃⵠⵠ: "img/night-skin188.png",
        ⲆΔΔⲆᐃΔⵠ: "img/day-skin189.png",
        ⵠᐃᐃΔΔⵠΔ: "img/night-skin189.png",
        ⵠⲆΔⲆΔⵠΔ: "img/day-skin190.png",
        ⲆΔΔⵠΔᐃᐃ: "img/night-skin190.png",
        ⵠᐃⲆᐃⲆΔⵠ: "img/day-skin191.png",
        ᐃΔⵠΔⵠⲆᐃ: "img/night-skin191.png",
        ΔⲆⵠΔⲆⲆΔ: "img/day-skin192.png",
        ⲆᐃᐃⲆΔⵠΔ: "img/night-skin192.png",
        ΔⲆⵠΔⵠᐃⵠ: "img/day-skin193.png",
        ᐃΔΔΔⲆⲆⲆ: "img/night-skin193.png",
        ΔⲆᐃΔⵠᐃΔ: "img/day-skin194.png",
        ⲆⲆΔΔᐃⵠᐃ: "img/night-skin194.png",
        ΔⵠᐃΔⲆⵠⵠ: "img/day-skin195.png",
        ᐃⲆⵠⵠᐃⲆⵠ: "img/night-skin195.png",
        ᐃⲆᐃⲆᐃⵠⵠ: "img/day-skin196.png",
        ᐃΔⲆΔⵠΔᐃ: "img/night-skin196.png",
        ⵠⵠⲆᐃᐃΔᐃ: "img/day-skin197.png",
        ⵠᐃΔⵠⵠⲆⵠ: "img/night-skin197.png",
        ⲆⲆΔⵠⵠⵠⲆ: "img/day-skin198.png",
        ⲆⲆⲆΔΔⲆⲆ: "img/night-skin198.png",
        ⵠΔⵠⲆᐃⵠⵠ: "img/day-skin199.png",
        ᐃᐃΔⵠΔΔΔ: "img/night-skin199.png",
        ΔΔᐃΔⲆΔᐃ: "img/day-skin200.png",
        ⵠΔⵠⲆΔΔⵠ: "img/night-skin200.png",
        ⵠΔⲆⲆΔⲆⵠ: "img/day-skin201.png",
        ⲆΔΔᐃⲆᐃᐃ: "img/night-skin201.png",
        ᐃΔⵠⵠΔⲆᐃ: "img/day-skin202.png",
        ⲆΔⲆᐃⵠⲆⵠ: "img/night-skin202.png",
        ᐃᐃⲆΔⵠΔᐃ: "img/day-skin203.png",
        ᐃⵠⵠⲆⵠᐃⵠ: "img/night-skin203.png",
        ᐃⵠᐃᐃⵠⲆΔ: "img/day-skin204.png",
        ᐃΔᐃⲆⵠΔⲆ: "img/night-skin204.png",
        ᐃΔΔᐃⲆⲆᐃ: "img/day-skin205.png",
        ⲆᐃᐃᐃⲆⵠⵠ: "img/night-skin205.png",
        ⵠΔᐃⲆΔⲆᐃ: "img/day-skin206.png",
        ⲆΔᐃᐃΔⵠⲆ: "img/night-skin206.png",
        ⲆⲆⵠΔⲆᐃⲆ: "img/day-skin207.png",
        ᐃⵠᐃᐃΔΔᐃ: "img/night-skin207.png",
        ⵠΔΔⲆⲆΔⲆ: "img/day-skin208.png",
        ᐃᐃⵠᐃⵠⲆᐃ: "img/night-skin208.png",
        ⲆᐃΔⲆΔⲆΔ: "img/day-skin209.png",
        ΔⲆⲆⵠᐃⲆΔ: "img/night-skin209.png",
        ⲆⵠΔΔⵠⵠⵠ: "img/day-skin210.png",
        ᐃⲆᐃⵠᐃⵠΔ: "img/night-skin210.png",
        ᐃᐃⵠⲆⲆⲆΔ: "img/day-skin211.png",
        ⲆⲆⵠⵠᐃⵠᐃ: "img/night-skin211.png",
        ΔΔⵠΔⵠⲆⵠ: "img/day-skin212.png",
        ᐃΔⲆΔⵠᐃⵠ: "img/night-skin212.png",
        ᐃΔᐃᐃΔΔΔ: "img/day-hand-skin0.png",
        ⵠᐃΔⵠⲆΔᐃ: "img/night-hand-skin0.png",
        ⵠⵠΔⲆΔⵠΔ: "img/day-hand-skin1.png",
        ᐃⲆΔᐃⲆⵠⵠ: "img/night-hand-skin1.png",
        ᐃΔⲆⵠΔΔⲆ: "img/day-hand-skin2.png",
        ΔⵠⲆᐃⵠⵠΔ: "img/night-hand-skin2.png",
        ⵠᐃⲆᐃⲆⵠΔ: "img/day-hand-skin3.png",
        ᐃⲆⲆᐃⵠᐃⵠ: "img/night-hand-skin3.png",
        ᐃᐃΔⲆⵠⲆᐃ: "img/day-hand-skin4.png",
        ᐃᐃᐃΔᐃⲆΔ: "img/night-hand-skin4.png",
        ⲆⵠⲆⲆⵠⲆΔ: "img/day-hand-skin5.png",
        ⵠⵠΔⵠΔⲆΔ: "img/night-hand-skin5.png",
        ΔᐃᐃⵠᐃΔΔ: "img/day-hand-skin6.png",
        ⲆΔⲆΔⵠΔⲆⲆΔ: "img/night-hand-skin6.png",
        ᐃⵠⲆⲆΔⲆⵠ: "img/day-hand-skin6.png",
        ⲆᐃᐃⲆⵠⲆⵠ: "img/night-hand-skin6.png",
        ΔΔΔⲆΔⵠⵠ: "img/day-hand-skin8.png",
        ⲆᐃΔⵠⵠᐃΔ: "img/night-hand-skin8.png",
        ΔΔᐃᐃᐃΔⲆ: "img/day-hand-skin9.png",
        ⲆⵠⵠᐃⲆΔⵠ: "img/night-hand-skin9.png",
        ⵠⲆⵠⲆⲆⵠⲆ: "img/day-hand-skin10.png",
        ⵠⲆⲆᐃᐃⲆΔ: "img/night-hand-skin10.png",
        ΔᐃΔΔⲆⲆⲆ: "img/day-hand-skin11.png",
        ⵠⲆⵠⵠΔⵠᐃ: "img/night-hand-skin11.png",
        ᐃᐃⵠΔⵠΔᐃ: "img/day-hand-skin12.png",
        ΔⲆⲆⲆᐃⵠⲆ: "img/night-hand-skin12.png",
        ᐃᐃΔⲆᐃᐃⵠ: "img/day-hand-skin13.png",
        ⵠⵠⲆⵠⵠⲆΔ: "img/night-hand-skin13.png",
        ⵠΔΔⵠᐃⵠᐃ: "img/day-hand-skin14.png",
        ΔΔΔⲆΔΔⵠ: "img/night-hand-skin14.png",
        ⲆⲆᐃᐃᐃΔⵠ: "img/day-hand-skin15.png",
        ⲆᐃΔⲆⲆΔΔ: "img/night-hand-skin15.png",
        ΔⲆΔⲆᐃΔΔ: "img/day-hand-skin16.png",
        ⵠⲆⵠⵠᐃⵠᐃ: "img/night-hand-skin16.png",
        ᐃᐃⵠⲆΔⵠⵠ: "img/day-hand-skin17.png",
        ΔᐃⲆⵠᐃΔΔ: "img/night-hand-skin17.png",
        ⵠᐃⵠᐃΔⲆⵠ: "img/day-hand-skin18.png",
        ᐃΔᐃⵠⲆᐃΔ: "img/night-hand-skin18.png",
        ⵠⵠᐃⲆⵠⵠⲆ: "img/day-hand-skin19.png",
        ⲆⲆⵠⲆΔⵠᐃ: "img/night-hand-skin19.png",
        ΔⲆⲆᐃΔΔⲆ: "img/day-hand-skin20.png",
        ᐃⵠⲆΔᐃⲆⵠ: "img/night-hand-skin20.png",
        ⵠᐃΔⵠⲆⲆⲆ: "img/day-hand-skin21.png",
        ΔⵠΔⵠΔΔⵠ: "img/night-hand-skin21.png",
        ⵠᐃⵠⲆᐃⲆΔ: "img/day-hand-skin22.png",
        ΔⵠⲆΔΔΔΔ: "img/night-hand-skin22.png",
        ᐃΔΔᐃΔⲆΔ: "img/day-hand-skin23.png",
        ΔᐃᐃΔⵠΔΔ: "img/night-hand-skin23.png",
        ΔΔⵠⲆᐃⵠⵠ: "img/day-hand-skin24.png",
        ᐃⲆⵠΔᐃΔⵠ: "img/night-hand-skin24.png",
        ᐃⲆⵠⵠΔΔⲆ: "img/day-hand-skin25.png",
        ⵠⵠⵠⲆⲆⲆⲆ: "img/night-hand-skin25.png",
        ΔᐃΔⵠⵠⵠⵠ: "img/day-hand-skin26.png",
        ⵠⲆⲆᐃΔⲆᐃ: "img/night-hand-skin26.png",
        ᐃⵠᐃᐃⵠⲆⵠ: "img/day-hand-skin27.png",
        ΔΔⵠⵠᐃᐃΔ: "img/night-hand-skin27.png",
        ⲆᐃᐃᐃⵠⲆⵠ: "img/day-hand-skin28.png",
        ᐃⲆᐃᐃΔΔᐃ: "img/night-hand-skin28.png",
        ⲆΔΔⵠᐃΔᐃ: "img/day-hand-skin29.png",
        ΔⲆΔᐃⲆᐃⲆ: "img/night-hand-skin29.png",
        ΔⲆⵠΔᐃᐃⲆ: "img/day-hand-skin30.png",
        Δⵠᐃᐃᐃⵠⵠ: "img/night-hand-skin30.png",
        ⲆᐃᐃᐃᐃⲆΔ: "img/day-hand-skin31.png",
        ⵠⲆᐃᐃⵠⲆⵠ: "img/night-hand-skin31.png",
        ᐃΔⲆᐃⵠΔΔ: "img/day-hand-skin32.png",
        ΔⵠΔΔⵠΔᐃ: "img/night-hand-skin32.png",
        ⲆᐃⲆΔᐃⵠᐃ: "img/day-hand-skin33.png",
        ⲆⲆⲆΔⲆᐃᐃ: "img/night-hand-skin33.png",
        ΔΔΔᐃⲆΔΔ: "img/day-hand-skin34.png",
        ΔⵠᐃᐃΔⵠⲆ: "img/night-hand-skin34.png",
        ΔᐃⲆᐃΔⵠⵠ: "img/day-hand-skin35.png",
        ΔΔⵠᐃⵠᐃᐃ: "img/night-hand-skin35.png",
        ΔⵠⲆⲆⲆⵠᐃ: "img/day-hand-skin36.png",
        ⲆΔⲆⲆⲆⲆⲆ: "img/night-hand-skin36.png",
        ᐃⵠᐃᐃⲆΔᐃ: "img/day-hand-skin37.png",
        ⲆⵠΔⲆΔᐃΔ: "img/night-hand-skin37.png",
        ᐃⵠⲆⵠΔⲆΔ: "img/day-hand-skin38.png",
        ΔⲆᐃⵠⵠⲆⲆ: "img/night-hand-skin38.png",
        ΔΔⲆⵠⲆⲆⲆ: "img/day-hand-skin39.png",
        ⵠΔⵠⵠᐃᐃⲆ: "img/night-hand-skin39.png",
        ΔⵠⲆᐃᐃⵠΔ: "img/day-hand-skin40.png",
        ᐃΔⲆΔΔᐃⲆ: "img/night-hand-skin40.png",
        ⲆΔΔⲆΔᐃⲆ: "img/day-hand-skin41.png",
        ⲆⲆᐃⵠΔⲆⵠ: "img/night-hand-skin41.png",
        ⲆⲆΔᐃᐃᐃᐃ: "img/day-hand-skin42.png",
        ⲆⵠⲆⵠᐃᐃΔ: "img/night-hand-skin42.png",
        ΔⵠⲆⲆⲆⲆⲆ: "img/day-hand-skin43.png",
        ᐃⲆⵠⲆⵠΔᐃ: "img/night-hand-skin43.png",
        ᐃᐃᐃⵠⲆᐃΔ: "img/day-hand-skin16.png",
        ΔᐃᐃᐃⲆΔⵠ: "img/night-hand-skin16.png",
        ᐃⵠᐃⵠΔᐃⲆ: "img/day-hand-skin45.png",
        ⲆⵠⲆⲆⵠΔⲆ: "img/night-hand-skin45.png",
        ΔΔᐃΔᐃⵠⲆ: "img/day-hand-skin46.png",
        ⲆᐃᐃⵠᐃΔⲆ: "img/night-hand-skin46.png",
        ᐃⲆΔᐃΔⵠᐃ: "img/day-hand-skin47.png",
        ΔⲆⲆΔⵠⵠⲆ: "img/night-hand-skin47.png",
        ⲆΔⵠⲆⲆᐃⲆ: "img/day-hand-skin48.png",
        ⵠⲆⵠⵠΔⵠⵠ: "img/night-hand-skin48.png",
        ⵠᐃⵠᐃⲆⲆᐃ: "img/day-hand-skin49.png",
        ᐃᐃⲆⵠΔΔⲆ: "img/night-hand-skin49.png",
        ᐃΔᐃΔⵠⲆⵠ: "img/day-hand-skin49.png",
        ΔⵠⵠᐃⵠⲆⵠ: "img/night-hand-skin49.png",
        ⵠⵠᐃᐃⵠⲆⵠ: "img/day-hand-skin51.png",
        ΔΔⲆΔⲆⲆᐃ: "img/night-hand-skin51.png",
        ⲆᐃᐃⲆⲆⵠⲆ: "img/day-hand-skin52.png",
        ⲆΔᐃⵠⵠᐃⵠ: "img/night-hand-skin52.png",
        ⲆΔⵠᐃΔΔⵠ: "img/day-hand-skin53.png",
        ᐃᐃᐃΔᐃⵠⲆ: "img/night-hand-skin53.png",
        ⵠⲆΔⵠⲆΔᐃ: "img/day-hand-skin53.png",
        ΔⵠⲆⵠᐃᐃⲆ: "img/night-hand-skin53.png",
        ⲆᐃⵠⵠⵠᐃΔ: "img/day-hand-skin55.png",
        ⲆΔⵠΔⵠⲆⲆ: "img/night-hand-skin55.png",
        ᐃⵠⵠΔΔᐃΔ: "img/day-hand-skin56.png",
        ΔᐃᐃᐃΔᐃΔ: "img/night-hand-skin56.png",
        ⵠᐃᐃⲆᐃⲆΔ: "img/day-hand-skin57.png",
        ᐃᐃⵠⲆⲆᐃᐃ: "img/night-hand-skin57.png",
        ⵠⲆⵠΔΔΔⲆ: "img/day-hand-skin58.png",
        ᐃⵠΔⵠᐃⲆΔ: "img/night-hand-skin58.png",
        ΔΔΔᐃᐃⵠⲆ: "img/day-hand-skin59.png",
        ᐃⵠᐃᐃᐃΔⲆ: "img/night-hand-skin59.png",
        ⵠⵠΔΔΔⲆΔ: "img/day-hand-skin61.png",
        ⵠⵠⵠΔΔⵠΔ: "img/night-hand-skin61.png",
        ⵠᐃⵠΔΔᐃⲆ: "img/day-hand-skin61.png",
        ⵠⲆᐃΔᐃⵠⵠ: "img/night-hand-skin61.png",
        ᐃᐃΔΔᐃⲆⵠ: "img/day-hand-skin62.png",
        ΔⵠⵠⲆᐃⵠⲆ: "img/night-hand-skin62.png",
        ⲆⵠᐃⵠΔⵠⵠ: "img/day-hand-skin63.png",
        ⵠΔⵠΔᐃᐃΔ: "img/night-hand-skin63.png",
        ᐃⲆΔⵠⲆᐃΔ: "img/day-hand-skin64.png",
        ᐃⲆΔΔΔⲆⲆ: "img/night-hand-skin64.png",
        ⲆⵠⲆⲆᐃΔΔ: "img/day-hand-skin65.png",
        ᐃⵠⵠΔΔΔᐃ: "img/night-hand-skin65.png",
        ⲆⵠᐃⵠⵠⲆⲆ: "img/day-hand-skin66.png",
        ⲆⲆΔΔⲆⵠⵠ: "img/night-hand-skin66.png",
        ΔⲆᐃΔⲆᐃⵠ: "img/day-hand-skin67.png",
        ⲆᐃⲆⵠᐃⲆΔ: "img/night-hand-skin67.png",
        ΔⵠⲆⵠⵠⲆⲆ: "img/day-hand-skin68.png",
        ΔⵠᐃⲆᐃᐃᐃ: "img/night-hand-skin68.png",
        ⲆΔᐃⲆⵠΔⲆ: "img/day-hand-skin69.png",
        ᐃⵠΔⲆⲆΔᐃ: "img/night-hand-skin69.png",
        ᐃⵠᐃⵠⲆⲆⵠ: "img/day-hand-skin70.png",
        ⲆⵠᐃᐃⵠⵠⲆ: "img/night-hand-skin70.png",
        ⲆⵠᐃᐃⲆΔⲆ: "img/day-hand-skin71.png",
        ΔΔⵠⵠΔⵠⲆ: "img/night-hand-skin71.png",
        ⵠⵠᐃΔⵠⲆΔ: "img/day-hand-skin72.png",
        ⲆᐃⵠᐃⵠΔⲆ: "img/night-hand-skin72.png",
        ⵠⲆⵠᐃΔᐃⵠ: "img/day-hand-skin73.png",
        ᐃᐃⵠᐃᐃⵠᐃ: "img/night-hand-skin73.png",
        ⲆᐃⲆΔⲆᐃⲆ: "img/day-hand-skin74.png",
        ⲆⵠⵠⲆᐃⲆᐃ: "img/night-hand-skin74.png",
        ΔΔⲆᐃΔΔⲆ: "img/day-hand-skin75.png",
        ΔΔⲆⵠⵠⲆⲆ: "img/night-hand-skin75.png",
        ⲆⵠⲆᐃⵠᐃΔ: "img/day-hand-skin76.png",
        ᐃᐃⵠⵠⲆⵠⲆ: "img/night-hand-skin76.png",
        ⲆΔⲆΔΔⲆⵠ: "img/day-hand-skin77.png",
        ⵠⵠⲆⵠΔⵠⵠ: "img/night-hand-skin77.png",
        ᐃⵠᐃΔΔᐃᐃ: "img/day-hand-skin78.png",
        ⲆⲆⲆⲆΔΔΔ: "img/night-hand-skin78.png",
        ⲆΔⵠⲆᐃⲆᐃ: "img/day-hand-skin79.png",
        ⲆⵠⵠΔⵠΔⲆ: "img/night-hand-skin79.png",
        ΔⲆⲆΔᐃᐃⵠ: "img/day-hand-skin80.png",
        ΔᐃⵠⵠᐃΔⵠ: "img/night-hand-skin80.png",
        ΔΔⲆᐃᐃᐃΔ: "img/day-hand-skin81.png",
        ΔᐃᐃⲆᐃᐃΔ: "img/night-hand-skin81.png",
        ΔⵠΔΔⵠⲆⵠ: "img/day-hand-skin82.png",
        ⵠⵠⵠΔⵠⲆΔ: "img/night-hand-skin82.png",
        ⲆⵠΔΔᐃΔⵠ: "img/day-hand-skin83.png",
        ᐃⵠⲆⵠⵠⲆᐃ: "img/night-hand-skin83.png",
        ⵠⲆⵠΔᐃⲆᐃ: "img/day-hand-skin84.png",
        ᐃⲆᐃΔⵠⵠΔ: "img/night-hand-skin84.png",
        ΔⲆⵠⵠⵠⲆⵠ: "img/day-hand-skin85.png",
        ΔᐃⵠᐃⵠⲆᐃ: "img/night-hand-skin85.png",
        ᐃⲆⵠⵠᐃⵠΔ: "img/day-hand-skin86.png",
        ᐃΔⲆⲆⵠΔⵠ: "img/night-hand-skin86.png",
        ᐃΔᐃⲆⲆΔᐃ: "img/day-hand-skin87.png",
        ΔΔⵠⲆⲆⵠⵠ: "img/night-hand-skin87.png",
        ⵠᐃⲆⲆΔᐃⲆ: "img/day-hand-skin88.png",
        ᐃᐃᐃΔⵠΔΔ: "img/night-hand-skin88.png",
        ⵠⵠᐃΔᐃᐃΔ: "img/day-hand-skin89.png",
        ⵠΔⵠᐃⲆΔᐃ: "img/night-hand-skin89.png",
        ⵠᐃΔⲆⲆⵠᐃ: "img/day-hand-skin90.png",
        ΔⲆᐃᐃⲆΔⲆ: "img/night-hand-skin90.png",
        ᐃⵠⵠᐃΔΔΔ: "img/day-hand-skin91.png",
        ⵠⲆⲆᐃⵠⲆᐃ: "img/night-hand-skin91.png",
        ΔΔᐃⲆⵠᐃᐃ: "img/day-hand-skin92.png",
        ⲆⲆⵠⲆᐃⲆⲆ: "img/night-hand-skin92.png",
        ΔΔᐃᐃΔⲆᐃ: "img/day-hand-skin93.png",
        ᐃⲆΔⵠⲆᐃᐃ: "img/night-hand-skin93.png",
        ⲆⲆᐃᐃⲆΔⲆ: "img/day-hand-skin94.png",
        ΔⵠⵠⲆⵠΔᐃ: "img/night-hand-skin94.png",
        ⲆⵠⲆⲆᐃⲆᐃ: "img/day-hand-skin95.png",
        ᐃᐃᐃᐃΔⲆΔ: "img/night-hand-skin95.png",
        ΔᐃⲆᐃᐃᐃᐃ: "img/day-hand-skin96.png",
        ΔΔΔⵠΔⵠⵠ: "img/night-hand-skin96.png",
        ⲆᐃⲆⲆᐃⲆⲆ: "img/day-hand-skin97.png",
        ⲆⵠᐃΔᐃⲆᐃ: "img/night-hand-skin97.png",
        ᐃᐃᐃΔᐃⵠΔ: "img/day-hand-skin98.png",
        ⵠᐃΔΔⵠⵠΔ: "img/night-hand-skin98.png",
        ⲆᐃⵠΔⵠⲆΔ: "img/day-hand-skin99.png",
        ᐃⲆⵠᐃⲆΔⲆ: "img/night-hand-skin99.png",
        ⵠⲆⵠⲆΔΔᐃ: "img/day-hand-skin100.png",
        ⲆΔᐃⲆⲆΔᐃ: "img/night-hand-skin100.png",
        ΔᐃΔᐃᐃΔΔ: "img/day-hand-skin101.png",
        ᐃᐃΔΔᐃⲆᐃ: "img/night-hand-skin101.png",
        ⵠⲆⲆΔΔΔⵠ: "img/day-hand-skin102.png",
        ᐃΔⵠⲆᐃΔⲆ: "img/night-hand-skin102.png",
        ΔⲆⲆᐃⲆⲆΔ: "img/day-hand-skin103.png",
        ᐃⲆⵠΔⲆᐃΔ: "img/night-hand-skin103.png",
        ΔⵠⵠⵠᐃⲆΔ: "img/day-hand-skin104.png",
        ᐃⲆᐃⵠᐃΔᐃ: "img/night-hand-skin104.png",
        ΔΔᐃⲆΔᐃᐃ: "img/day-hand-skin105.png",
        ΔΔⲆᐃΔᐃⵠ: "img/night-hand-skin105.png",
        ⵠᐃΔⲆⵠᐃⲆ: "img/day-hand-skin106.png",
        ⵠⵠⵠⵠᐃΔᐃ: "img/night-hand-skin106.png",
        ᐃⲆΔΔⲆΔᐃ: "img/day-hand-skin107.png",
        ⵠΔⲆⵠΔΔⵠ: "img/night-hand-skin107.png",
        ΔⲆⲆⵠⲆΔⵠ: "img/day-hand-skin108.png",
        ⲆⲆⵠΔⵠᐃⵠ: "img/night-hand-skin108.png",
        ᐃⵠⵠⲆⵠᐃᐃ: "img/day-hand-skin109.png",
        ⵠⵠᐃᐃⲆᐃᐃ: "img/night-hand-skin109.png",
        ᐃⲆΔⲆΔⲆᐃ: "img/day-hand-skin110.png",
        ᐃⵠΔᐃᐃⲆⲆ: "img/night-hand-skin110.png",
        ⵠⲆⵠΔᐃΔⲆ: "img/day-hand-skin111.png",
        ᐃᐃⵠΔᐃΔⵠ: "img/night-hand-skin111.png",
        ΔⲆΔᐃΔⵠⲆ: "img/day-hand-skin112.png",
        ⵠⲆΔΔⵠⵠᐃ: "img/night-hand-skin112.png",
        ΔΔⲆⲆΔⵠΔᐃⵠ: "img/day-hand-skin113.png",
        ᐃΔⵠΔᐃΔⲆⵠᐃ: "img/night-hand-skin113.png",
        ⲆⵠⲆⲆΔΔΔ: "img/day-hand-skin114.png",
        ΔΔⲆⵠⵠΔΔ: "img/night-hand-skin114.png",
        ΔΔΔⲆΔᐃΔ: "img/day-hand-skin115.png",
        ⲆⲆᐃΔᐃⵠΔ: "img/night-hand-skin115.png",
        ⲆΔΔⵠᐃⲆᐃ: "img/day-hand-skin116.png",
        ΔᐃᐃΔΔⵠⵠ: "img/night-hand-skin116.png",
        ⲆⲆⵠᐃⵠⲆᐃ: "img/day-hand-skin117.png",
        ⲆⲆⲆᐃⲆΔⵠ: "img/night-hand-skin117.png",
        ΔⵠⲆᐃⲆΔᐃ: "img/day-hand-skin118.png",
        ΔⵠⲆΔΔᐃⲆ: "img/night-hand-skin118.png",
        ᐃⲆⲆⲆⲆⲆΔ: "img/day-hand-skin119.png",
        ᐃᐃΔΔᐃᐃΔ: "img/night-hand-skin119.png",
        ⵠⵠⲆΔⲆⲆᐃ: "img/day-hand-skin120.png",
        ⵠᐃΔⵠⲆΔⵠ: "img/night-hand-skin120.png",
        ᐃⵠᐃᐃᐃⲆΔ: "img/day-hand-skin122.png",
        ⲆⵠΔⲆⵠⲆᐃ: "img/night-hand-skin122.png",
        ΔΔΔⲆⵠⵠΔ: "img/day-hand-skin122.png",
        ΔᐃΔⲆⵠⲆⲆ: "img/night-hand-skin122.png",
        ⵠᐃΔⲆⵠⲆΔ: "img/day-hand-skin122.png",
        ᐃⵠⲆⵠⲆⲆⲆ: "img/night-hand-skin122.png",
        ⵠΔΔⲆΔᐃⵠ: "img/day-hand-skin124.png",
        ⲆᐃΔΔᐃⵠΔ: "img/night-hand-skin124.png",
        ⲆⵠᐃΔᐃⲆⲆ: "img/day-hand-skin125.png",
        ⲆᐃΔⵠⲆⵠᐃ: "img/night-hand-skin125.png",
        ΔⲆᐃᐃΔⵠⲆ: "img/day-hand-skin126.png",
        ᐃᐃⵠⵠⵠΔᐃ: "img/night-hand-skin126.png",
        ⵠᐃⵠᐃⵠᐃⵠ: "img/day-hand-skin127.png",
        ⲆⵠᐃⲆⵠⲆⵠ: "img/night-hand-skin127.png",
        Δⵠⵠⵠᐃᐃᐃ: "img/day-hand-skin128.png",
        ⵠⵠⵠΔᐃⵠᐃ: "img/night-hand-skin128.png",
        ⵠⲆⲆⵠᐃΔⵠ: "img/day-hand-skin129.png",
        ᐃⲆⵠⵠᐃᐃΔ: "img/night-hand-skin129.png",
        ⵠΔᐃᐃⵠΔᐃ: "img/day-hand-skin130.png",
        ᐃᐃⵠΔⵠⲆᐃ: "img/night-hand-skin130.png",
        ΔⵠⲆⵠⲆⲆᐃ: "img/day-hand-skin131.png",
        ⲆⲆⵠⵠⲆᐃΔ: "img/night-hand-skin131.png",
        ⵠⵠᐃⵠΔΔⵠ: "img/day-hand-skin130.png",
        ᐃΔⵠΔⲆⵠⵠ: "img/night-hand-skin130.png",
        ⵠⲆⵠΔⲆⵠⲆ: "img/day-hand-skin133.png",
        ᐃⵠΔᐃᐃⲆΔ: "img/night-hand-skin133.png",
        ΔᐃΔⵠᐃⵠᐃ: "img/day-hand-skin134.png",
        ΔΔⲆⵠΔⵠᐃ: "img/night-hand-skin134.png",
        ⲆⵠᐃⵠⵠⲆᐃ: "img/day-hand-skin135.png",
        ⲆⲆΔⲆΔΔⲆ: "img/night-hand-skin135.png",
        ΔⲆⵠⲆⵠΔΔ: "img/day-hand-skin136.png",
        ΔΔΔΔⲆⵠⵠ: "img/night-hand-skin136.png",
        ᐃᐃᐃⵠᐃⲆⵠ: "img/day-hand-skin137.png",
        ⲆⲆΔΔΔΔᐃ: "img/night-hand-skin137.png",
        ᐃᐃΔⵠⲆΔⵠ: "img/day-hand-skin138.png",
        ⲆΔⵠⵠᐃⲆⵠ: "img/night-hand-skin138.png",
        ⵠᐃΔᐃⲆΔΔ: "img/day-hand-skin139.png",
        ᐃⲆᐃᐃᐃⵠᐃ: "img/night-hand-skin139.png",
        ⲆΔⲆⵠᐃᐃᐃ: "img/day-hand-skin140.png",
        ⲆⲆΔᐃⲆᐃᐃ: "img/night-hand-skin140.png",
        ᐃΔⵠᐃᐃΔΔ: "img/day-hand-skin141.png",
        ΔⲆⵠⵠΔⵠⵠ: "img/night-hand-skin141.png",
        ⲆΔⲆΔⲆᐃᐃ: "img/day-hand-skin142.png",
        ᐃᐃⲆⲆⵠΔⵠ: "img/night-hand-skin142.png",
        ΔΔΔᐃⲆⵠⵠ: "img/day-hand-skin143.png",
        ⵠΔᐃᐃⵠⵠΔ: "img/night-hand-skin143.png",
        ᐃⵠΔⵠⵠⲆⵠ: "img/day-hand-skin144.png",
        ⲆⵠⵠΔᐃΔᐃ: "img/night-hand-skin144.png",
        ⵠᐃⵠΔⵠᐃⵠ: "img/day-hand-skin145.png",
        ⵠⵠⲆᐃΔΔΔ: "img/night-hand-skin145.png",
        ⵠⲆⲆⲆᐃⵠⲆ: "img/day-hand-skin146.png",
        ⲆΔⵠΔΔⵠΔ: "img/night-hand-skin146.png",
        ΔΔⵠᐃΔᐃⲆ: "img/day-hand-skin147.png",
        ᐃⲆⲆⵠⵠΔᐃ: "img/night-hand-skin147.png",
        ⲆᐃⲆⵠⲆᐃⵠ: "img/day-hand-skin148.png",
        ⲆΔⲆⵠⲆᐃⲆ: "img/night-hand-skin148.png",
        ᐃᐃΔⵠΔᐃᐃ: "img/day-hand-skin149.png",
        ⵠⲆᐃᐃⵠⲆᐃ: "img/night-hand-skin149.png",
        ⲆⲆⵠⲆⵠⲆᐃ: "img/day-hand-skin150.png",
        ⲆᐃᐃⵠΔᐃΔ: "img/night-hand-skin150.png",
        ⵠΔΔⲆⲆⵠΔ: "img/day-hand-skin151.png",
        ΔⵠⲆⲆⵠΔᐃ: "img/night-hand-skin151.png",
        ⲆⲆⲆΔⵠΔᐃ: "img/day-hand-skin152.png",
        ΔⲆⵠⵠΔⲆⵠ: "img/night-hand-skin152.png",
        ΔⵠΔᐃⲆⵠⵠ: "img/day-hand-skin153.png",
        ⵠⲆᐃΔⵠΔⵠ: "img/night-hand-skin153.png",
        ᐃΔⵠΔΔⵠⵠ: "img/day-hand-skin154.png",
        ΔⵠⵠⵠⵠⵠΔ: "img/night-hand-skin154.png",
        ⲆΔᐃΔⵠΔⲆ: "img/day-hand-skin155.png",
        ΔⲆⲆᐃⵠⲆⵠ: "img/night-hand-skin155.png",
        ᐃᐃᐃⵠΔᐃᐃ: "img/day-hand-skin156.png",
        ᐃⵠᐃⲆΔⵠⲆ: "img/night-hand-skin156.png",
        ΔᐃΔΔΔᐃΔ: "img/day-hand-skin157.png",
        ⵠⲆᐃⵠᐃⵠΔ: "img/night-hand-skin157.png",
        ⲆⵠⵠᐃᐃⵠΔ: "img/day-hand-skin158.png",
        ΔⵠⲆΔᐃⲆᐃ: "img/night-hand-skin158.png",
        ⵠᐃᐃⵠⵠᐃⵠ: "img/day-hand-skin159.png",
        ⲆᐃⵠΔᐃⵠⵠ: "img/night-hand-skin159.png",
        ⵠᐃΔᐃⵠⵠᐃ: "img/day-hand-skin160.png",
        ᐃΔΔᐃΔΔᐃ: "img/night-hand-skin160.png",
        ⵠᐃⵠⵠΔⵠᐃ: "img/day-hand-skin161.png",
        ΔⲆᐃᐃⵠⵠᐃ: "img/night-hand-skin161.png",
        ᐃΔⲆᐃᐃᐃⵠ: "img/day-hand-skin162.png",
        ΔⵠΔⲆᐃᐃᐃ: "img/night-hand-skin162.png",
        ᐃΔⵠⵠᐃΔΔ: "img/day-hand-skin163.png",
        ΔⲆΔⵠᐃⵠⲆ: "img/night-hand-skin163.png",
        ⲆᐃⲆᐃⵠⲆⲆ: "img/day-hand-skin164.png",
        ΔⲆᐃᐃΔΔⲆ: "img/night-hand-skin164.png",
        ⲆⲆⲆⵠΔⲆᐃ: "img/day-hand-skin165.png",
        ⲆⲆᐃⲆᐃⵠΔ: "img/night-hand-skin165.png",
        ΔⵠⵠⵠⵠΔΔ: "img/day-hand-skin166.png",
        ⲆᐃⲆⵠᐃᐃⵠ: "img/night-hand-skin166.png",
        ᐃΔΔᐃⵠⲆΔ: "img/day-hand-skin167.png",
        ⵠΔΔᐃⵠᐃᐃ: "img/night-hand-skin167.png",
        ΔΔⲆⲆⲆⵠᐃ: "img/day-hand-skin168.png",
        ΔⲆⵠΔᐃᐃⵠ: "img/night-hand-skin168.png",
        ⲆⵠΔᐃᐃⵠΔ: "img/day-hand-skin169.png",
        ΔⵠⵠΔⲆᐃΔ: "img/night-hand-skin169.png",
        ᐃΔᐃᐃⲆⲆᐃ: "img/day-hand-skin170.png",
        ᐃⲆΔⵠⵠⲆⵠ: "img/night-hand-skin170.png",
        ᐃⲆᐃⲆΔⵠⵠ: "img/day-hand-skin171.png",
        ⵠⲆⲆⲆΔΔᐃ: "img/night-hand-skin171.png",
        ΔⵠᐃⵠⲆⲆΔ: "img/day-hand-skin172.png",
        ᐃⵠΔᐃⲆᐃⲆ: "img/night-hand-skin172.png",
        ᐃᐃᐃᐃⲆᐃⲆ: "img/day-hand-skin173.png",
        ⵠⲆⲆⵠΔⲆᐃ: "img/night-hand-skin173.png",
        ΔΔⵠⵠⲆᐃᐃ: "img/day-hand-skin174.png",
        ⲆΔⲆΔᐃΔᐃ: "img/night-hand-skin174.png",
        ⲆᐃⵠⲆⵠΔⲆ: "img/day-hand-skin175.png",
        ⲆᐃⲆᐃⵠⲆΔ: "img/night-hand-skin175.png",
        ⵠⲆⲆᐃΔⵠⲆ: "img/day-hand-skin176.png",
        ⵠᐃⵠΔⵠⵠⵠ: "img/night-hand-skin176.png",
        ⲆᐃⵠᐃΔΔⵠ: "img/day-hand-skin177.png",
        ⲆΔᐃⵠⵠⲆΔ: "img/night-hand-skin177.png",
        ⲆᐃᐃⲆᐃΔΔ: "img/day-hand-skin178.png",
        ΔᐃⲆᐃᐃⲆⵠ: "img/night-hand-skin178.png",
        ᐃΔⲆΔⵠⵠⵠ: "img/day-hand-skin179.png",
        ⵠΔⵠΔᐃᐃⲆ: "img/night-hand-skin179.png",
        ⵠⲆΔⲆΔΔΔ: "img/day-hand-skin180.png",
        ⵠⵠΔᐃΔⵠⲆ: "img/night-hand-skin180.png",
        ⲆᐃᐃⲆⵠⲆᐃ: "img/day-hand-skin181.png",
        ᐃΔⲆⲆΔⵠΔ: "img/night-hand-skin181.png",
        ⲆⵠᐃᐃⵠⲆΔ: "img/day-hand-skin182.png",
        ᐃΔⲆΔΔⲆⵠ: "img/night-hand-skin182.png",
        ⵠⵠⵠⲆᐃᐃΔ: "img/day-hand-skin183.png",
        ⲆᐃΔⵠⲆᐃᐃ: "img/night-hand-skin183.png",
        ⵠⵠⵠⲆΔᐃⲆ: "img/day-hand-skin184.png",
        ⲆⲆΔᐃΔⲆᐃ: "img/night-hand-skin184.png",
        ᐃⲆⵠᐃᐃᐃᐃ: "img/day-hand-skin185.png",
        ᐃⵠΔⲆΔᐃΔ: "img/night-hand-skin185.png",
        ⲆΔⵠⲆⵠⵠΔ: "img/day-hand-skin186.png",
        ⲆᐃΔⲆⲆⲆΔ: "img/night-hand-skin186.png",
        ΔⵠΔᐃⲆᐃΔ: "img/day-hand-skin187.png",
        ⵠᐃⲆⵠΔⵠⲆ: "img/night-hand-skin187.png",
        ΔⵠⵠᐃᐃⲆⵠ: "img/day-hand-skin188.png",
        ⲆⲆⲆΔΔΔΔ: "img/night-hand-skin188.png",
        ⵠΔⵠⵠⵠᐃᐃ: "img/day-hand-skin189.png",
        ⲆᐃⲆⵠⲆⲆⲆ: "img/night-hand-skin189.png",
        ΔΔⵠⲆⵠⵠⲆ: "img/day-hand-skin190.png",
        ΔⲆⲆᐃᐃᐃⵠ: "img/night-hand-skin190.png",
        ⲆᐃⲆᐃᐃⲆⵠ: "img/day-hand-skin191.png",
        ΔᐃⵠΔᐃᐃⵠ: "img/night-hand-skin191.png",
        ⲆⵠⲆⲆΔⲆΔ: "img/day-hand-skin192.png",
        ⲆᐃΔⲆⵠⵠⵠ: "img/night-hand-skin192.png",
        ⲆᐃⲆⵠⲆⵠᐃ: "img/day-hand-skin193.png",
        ΔⵠⵠᐃⵠᐃⲆ: "img/night-hand-skin193.png",
        ⵠⵠᐃⲆΔⵠⵠ: "img/day-hand-skin194.png",
        ᐃΔΔΔΔⲆᐃ: "img/night-hand-skin194.png",
        ⲆⵠᐃΔᐃᐃⲆ: "img/day-hand-skin195.png",
        ⲆⲆᐃΔᐃⵠᐃ: "img/night-hand-skin195.png",
        ⵠⲆΔᐃⲆΔⵠ: "img/day-hand-skin196.png",
        ᐃⲆΔⵠⵠᐃⵠ: "img/night-hand-skin196.png",
        ⲆΔᐃᐃΔᐃⵠ: "img/day-hand-skin197.png",
        ⲆⵠΔⵠᐃᐃⲆ: "img/night-hand-skin197.png",
        ΔⵠᐃⲆⲆⵠⵠ: "img/day-hand-skin198.png",
        ⵠⲆᐃⲆᐃΔⲆ: "img/night-hand-skin198.png",
        ⲆⲆⲆⵠᐃᐃⵠ: "img/day-hand-skin199.png",
        ⵠⵠⵠᐃⲆⵠᐃ: "img/night-hand-skin199.png",
        ᐃᐃⲆΔΔⵠⵠ: "img/day-hand-skin200.png",
        ⵠᐃΔⵠΔⵠⵠ: "img/night-hand-skin200.png",
        ᐃᐃᐃᐃᐃᐃᐃ: "img/day-hand-skin201.png",
        ⵠᐃΔⵠΔᐃΔ: "img/night-hand-skin201.png",
        ΔᐃᐃᐃⲆⲆΔ: "img/day-hand-skin202.png",
        ⵠⵠⲆΔᐃⵠΔ: "img/night-hand-skin202.png",
        ᐃΔⵠⲆᐃᐃⲆ: "img/day-hand-skin203.png",
        ᐃⵠᐃᐃΔⲆΔ: "img/night-hand-skin203.png",
        ⵠⲆⲆⲆΔⵠⲆ: "img/day-hand-skin204.png",
        ⲆⲆⲆᐃΔΔΔ: "img/night-hand-skin204.png",
        ⲆΔΔΔΔΔᐃ: "img/day-hand-skin205.png",
        ⲆΔᐃΔΔΔⵠ: "img/night-hand-skin205.png",
        ΔⵠⲆᐃᐃᐃΔ: "img/day-hand-skin206.png",
        ⵠⲆΔⵠᐃᐃᐃ: "img/night-hand-skin206.png",
        ⲆΔᐃΔⲆⵠᐃ: "img/day-hand-skin207.png",
        ⵠΔᐃᐃΔΔⲆ: "img/night-hand-skin207.png",
        ᐃⲆⲆⵠᐃⲆⵠ: "img/day-hand-skin208.png",
        ᐃⵠΔΔᐃⲆⲆ: "img/night-hand-skin208.png",
        ⲆΔᐃⲆᐃΔᐃ: "img/day-hand-skin209.png",
        ᐃΔᐃⵠⵠⵠΔ: "img/night-hand-skin209.png",
        ᐃΔⲆⵠⵠΔΔ: "img/day-hand-skin210.png",
        ᐃΔⲆΔΔⵠΔ: "img/night-hand-skin210.png",
        ΔⲆⲆⵠⵠᐃⲆ: "img/day-hand-skin211.png",
        ⵠⵠⵠΔⲆᐃⵠ: "img/night-hand-skin211.png",
        ΔᐃⲆⲆΔᐃⲆ: "img/day-hand-skin212.png",
        ⵠⲆΔⲆⵠΔⵠ: "img/night-hand-skin212.png",
        ⵠΔΔⵠⵠⲆᐃ: "img/day-bag-star0.png",
        ⲆᐃⲆⵠΔⲆᐃ: "img/night-bag-star0.png",
        ⵠⵠᐃᐃᐃⲆᐃ: "img/day-bag0.png",
        ᐃΔⵠᐃⲆⵠΔ: "img/night-bag0.png",
        ⲆⲆᐃⵠⲆⲆΔ: "img/day-bag1.png",
        ⵠⵠⲆΔⵠΔⵠ: "img/night-bag1.png",
        ΔᐃⵠⲆΔΔΔ: "img/day-bag2.png",
        ᐃᐃΔⲆΔᐃⲆ: "img/night-bag2.png",
        ΔΔⲆⵠᐃⵠΔ: "img/day-bag3.png",
        ΔⵠᐃΔΔⵠΔ: "img/night-bag3.png",
        ΔⲆⲆⲆⵠΔⵠ: "img/day-bag4.png",
        ⵠⵠᐃⲆΔΔⲆ: "img/night-bag4.png",
        ⲆⵠΔᐃⲆᐃᐃ: "img/day-bag5.png",
        ᐃⲆⲆⲆΔᐃᐃ: "img/night-bag5.png",
        ⵠΔΔⲆᐃⲆᐃ: "img/day-bag6.png",
        ΔΔᐃⲆⵠΔⵠ: "img/night-bag6.png",
        ΔᐃΔᐃΔᐃⲆ: "img/day-bag7.png",
        ⲆⲆᐃΔᐃᐃᐃ: "img/night-bag7.png",
        ⵠⲆΔΔΔⵠᐃ: "img/day-bag8.png",
        ΔΔᐃᐃⲆⵠⵠ: "img/night-bag8.png",
        ΔⲆΔᐃⵠΔⵠ: "img/day-bag9.png",
        ΔΔΔⲆⲆᐃⲆ: "img/night-bag9.png",
        ΔᐃⵠΔⵠᐃᐃ: "img/day-bag10.png",
        ⲆⲆᐃΔΔⵠΔ: "img/night-bag10.png",
        ΔΔⲆⲆΔᐃᐃ: "img/day-bag11.png",
        ᐃᐃⵠⲆⲆᐃΔ: "img/night-bag11.png",
        ⵠᐃᐃΔⲆᐃⲆ: "img/day-bag13.png",
        ΔᐃΔⲆⲆⵠᐃ: "img/night-bag13.png",
        ᐃΔⲆΔΔΔᐃ: "img/day-bag14.png",
        ⵠΔⵠⲆΔᐃᐃ: "img/night-bag14.png",
        ΔᐃΔΔΔⲆᐃ: "img/day-bag16.png",
        ΔᐃⲆⲆΔᐃΔ: "img/night-bag16.png",
        ⵠⵠᐃⵠᐃᐃᐃ: "img/day-bag17.png",
        ⵠⵠⲆᐃΔᐃⵠ: "img/night-bag17.png",
        ⲆⲆⲆΔᐃᐃⵠ: "img/day-bag18.png",
        ⲆⵠᐃⵠⲆᐃᐃ: "img/night-bag18.png",
        ⵠᐃΔⵠᐃⵠΔ: "img/day-bag19.png",
        ΔⵠΔᐃΔΔⵠ: "img/night-bag19.png",
        ᐃΔᐃⲆΔⲆΔ: "img/day-bag20.png",
        ⵠᐃᐃⲆᐃᐃΔ: "img/night-bag20.png",
        ΔⲆΔΔⲆᐃⲆ: "img/day-bag21.png",
        ⵠⲆⵠΔⵠⵠⲆ: "img/night-bag21.png",
        ⲆⵠΔΔⲆΔᐃ: "img/day-bag22.png",
        ᐃⵠᐃⲆⵠⵠⵠ: "img/night-bag22.png",
        ΔⲆΔᐃᐃᐃΔ: "img/day-bag23.png",
        ⲆⵠⵠⲆⵠⵠΔ: "img/night-bag23.png",
        ΔⲆᐃΔᐃⵠⲆ: "img/day-bag24.png",
        ⵠΔΔⵠΔⲆⲆ: "img/night-bag24.png",
        ᐃᐃⵠⲆⵠⲆᐃ: "img/day-bag25.png",
        ᐃⵠⲆΔΔᐃᐃ: "img/night-bag25.png",
        ᐃᐃᐃⵠᐃΔΔ: "img/day-bag26.png",
        ⵠⲆⵠⵠᐃⲆᐃ: "img/night-bag26.png",
        ΔᐃΔΔᐃᐃΔ: "img/day-bag27.png",
        ᐃⵠⲆΔΔᐃⵠ: "img/night-bag27.png",
        ⲆΔᐃᐃΔⵠΔ: "img/day-bag28.png",
        ᐃᐃⵠΔΔⵠⲆ: "img/night-bag28.png",
        ᐃⵠⲆⲆⵠⵠⲆ: "img/day-bag29.png",
        ᐃΔᐃⲆⵠⵠⵠ: "img/night-bag29.png",
        ΔⲆΔⵠᐃⵠΔ: "img/day-bag30.png",
        ⲆⲆᐃᐃⵠΔⵠ: "img/night-bag30.png",
        ⵠᐃⲆⵠⲆᐃΔ: "img/day-bag31.png",
        ⵠΔᐃⲆΔⵠΔ: "img/night-bag31.png",
        ΔᐃⵠⵠΔⲆⵠ: "img/day-bag32.png",
        ΔⲆⵠⵠᐃᐃΔ: "img/night-bag32.png",
        ⲆᐃᐃᐃⵠⵠΔ: "img/day-bag33.png",
        ⲆΔΔⲆΔⵠⵠ: "img/night-bag33.png",
        ⲆⲆⵠᐃⲆΔᐃ: "img/day-bag34.png",
        ΔᐃᐃΔᐃᐃΔ: "img/night-bag34.png",
        ⲆⵠΔⲆᐃΔᐃ: "img/day-bag35.png",
        ΔⲆⲆᐃⲆΔⲆ: "img/night-bag35.png",
        ΔΔⵠⲆⲆᐃⵠ: "img/day-bag36.png",
        ᐃⲆΔⲆⵠⲆΔ: "img/night-bag36.png",
        ⵠⲆᐃᐃᐃᐃᐃ: "img/day-bag37.png",
        ΔᐃΔΔᐃΔⲆ: "img/night-bag37.png",
        ΔⲆΔΔΔᐃⵠ: "img/day-bag38.png",
        ΔᐃᐃⵠⲆⲆⵠ: "img/night-bag38.png",
        ⵠΔⲆΔᐃᐃⲆ: "img/day-bag39.png",
        ΔⲆΔΔⲆΔΔ: "img/night-bag39.png",
        ΔⲆᐃᐃⵠⲆᐃ: "img/day-bag40.png",
        ΔⵠⲆⵠᐃⲆⲆ: "img/night-bag40.png",
        ⲆⵠᐃΔΔⲆⵠ: "img/day-bag41.png",
        ᐃⵠᐃⵠⵠᐃⵠ: "img/night-bag41.png",
        ⵠΔⵠΔⵠⲆᐃ: "img/day-bag42.png",
        ΔⲆᐃᐃⲆⵠᐃ: "img/night-bag42.png",
        ΔΔΔⵠᐃⲆⵠ: "img/day-bag43.png",
        ΔΔᐃⲆⲆᐃΔ: "img/night-bag43.png",
        ⲆᐃⲆᐃᐃⲆᐃ: "img/day-bag44.png",
        ⲆⵠⲆⵠᐃΔᐃ: "img/night-bag44.png",
        ⵠⲆⵠⵠⲆΔᐃ: "img/day-bag45.png",
        ⵠⵠⵠᐃΔⵠⵠ: "img/night-bag45.png",
        ⵠΔⲆᐃᐃⵠᐃ: "img/day-bag46.png",
        ⵠΔⲆⵠⲆⵠⲆ: "img/night-bag46.png",
        ⵠⵠᐃⲆⵠΔᐃ: "img/day-bag47.png",
        ΔⵠΔⲆⵠⲆᐃ: "img/night-bag47.png",
        ᐃΔⲆⲆⵠΔᐃ: "img/day-bag48.png",
        ⵠⵠⲆⲆⵠⵠᐃ: "img/night-bag48.png",
        ᐃⲆΔⵠᐃⵠΔ: "img/day-bag49.png",
        ΔΔᐃΔΔⲆΔ: "img/night-bag49.png",
        ⵠⲆΔⵠᐃᐃⲆ: "img/day-bag50.png",
        ΔⲆΔᐃⲆⵠΔ: "img/night-bag50.png",
        ᐃⲆᐃⵠⵠΔⲆ: "img/day-bag51.png",
        ᐃⵠΔⵠΔᐃⵠ: "img/night-bag51.png",
        ⵠⵠᐃΔⵠⵠⵠ: "img/day-bag52.png",
        ΔⲆᐃⵠⵠᐃᐃ: "img/night-bag52.png",
        ⵠⵠᐃΔⵠᐃⲆ: "img/day-bag53.png",
        ⲆᐃᐃⲆᐃΔⵠ: "img/night-bag53.png",
        ⲆᐃΔΔᐃⵠⲆ: "img/day-bag54.png",
        ⲆⵠᐃⲆᐃⲆΔ: "img/night-bag54.png",
        ⲆΔᐃΔΔⵠΔ: "img/day-bag55.png",
        ᐃⵠΔⲆᐃⲆᐃ: "img/night-bag55.png",
        ᐃⲆⲆⲆⲆΔⵠ: "img/day-bag56.png",
        ΔΔΔᐃⵠⵠⲆ: "img/night-bag56.png",
        ⲆΔⲆⵠⵠᐃΔ: "img/day-bag57.png",
        ⲆΔⵠⵠⲆⵠⲆ: "img/night-bag57.png",
        ⲆⲆΔⲆΔⵠᐃ: "img/day-bag58.png",
        ᐃⵠⲆⲆΔᐃΔ: "img/night-bag58.png",
        ⵠⲆⲆΔᐃⲆᐃ: "img/day-bag59.png",
        ⵠΔΔⲆΔⵠⲆ: "img/night-bag59.png",
        ⵠⲆᐃΔΔⲆⵠ: "img/day-bag60.png",
        ⲆΔᐃⲆⵠⲆⵠ: "img/night-bag60.png",
        ⵠΔⲆᐃⵠᐃⵠ: "img/day-bag61.png",
        ΔⵠⵠⵠⲆⲆⵠ: "img/night-bag61.png",
        ⵠΔΔⲆΔΔΔ: "img/day-bag62.png",
        ᐃⲆⵠΔΔΔᐃ: "img/night-bag62.png",
        ⵠΔΔΔⵠᐃⲆ: "img/day-bag63.png",
        ᐃⵠᐃᐃᐃⵠᐃ: "img/night-bag63.png",
        ⲆᐃᐃΔⲆⵠΔ: "img/day-bag64.png",
        ⵠΔⵠᐃᐃⲆⵠ: "img/night-bag64.png",
        ⵠⵠⵠⵠⵠᐃΔ: "img/day-bag65.png",
        ΔΔⵠⵠᐃⵠᐃ: "img/night-bag65.png",
        ᐃΔᐃᐃᐃᐃΔ: "img/day-bag66.png",
        ⵠⵠⲆᐃΔⲆΔ: "img/night-bag66.png",
        ᐃⵠⲆᐃΔΔⵠ: "img/day-bag67.png",
        ᐃᐃᐃⵠⲆⲆΔ: "img/night-bag67.png",
        ⵠⵠᐃⵠⵠᐃⲆ: "img/day-bag68.png",
        ᐃⵠⲆΔⲆⲆⵠ: "img/night-bag68.png",
        ᐃⵠᐃⲆⲆⵠⵠ: "img/day-bag69.png",
        ΔⵠᐃᐃⲆⵠⵠ: "img/night-bag69.png",
        ⲆⵠⲆΔΔⲆΔ: "img/day-bag70.png",
        ΔΔⲆΔⵠΔΔ: "img/night-bag70.png",
        ⵠᐃⵠⲆᐃΔⲆ: "img/day-bag71.png",
        ⲆᐃⲆᐃⲆᐃᐃ: "img/night-bag71.png",
        ⵠᐃⵠΔᐃⲆⵠ: "img/day-bag72.png",
        ⵠⵠᐃᐃⵠⵠᐃ: "img/night-bag72.png",
        ᐃΔΔⵠⲆⵠᐃ: "img/day-bag73.png",
        ⵠⲆⵠΔᐃΔⵠ: "img/night-bag73.png",
        ΔᐃⵠⵠⵠⲆⲆ: "img/day-bag74.png",
        ΔⲆᐃⲆᐃⲆⲆ: "img/night-bag74.png",
        ᐃⵠΔᐃΔⵠᐃ: "img/day-bag75.png",
        ΔᐃΔᐃⵠΔⲆ: "img/night-bag75.png",
        ⵠⵠⵠⲆⲆⵠΔ: "img/day-bag76.png",
        ΔⵠΔΔⲆⵠⵠ: "img/night-bag76.png",
        ᐃⲆᐃⲆΔⲆᐃ: "img/day-bag77.png",
        ⲆⵠᐃⲆᐃⵠⵠ: "img/night-bag77.png",
        ΔⵠᐃΔⵠⲆᐃ: "img/day-bag78.png",
        ⵠᐃᐃΔᐃⵠΔ: "img/night-bag78.png",
        ⲆΔᐃⵠⵠⵠΔ: "img/day-bag79.png",
        ΔⵠᐃⲆⲆᐃΔ: "img/night-bag79.png",
        ⲆⵠΔⵠⵠᐃΔ: "img/day-bag80.png",
        ⵠᐃΔⵠⵠΔⵠ: "img/night-bag80.png",
        ΔᐃⲆⲆⲆᐃⲆ: "img/day-accessory0.png",
        ΔᐃⲆⲆΔᐃᐃ: "img/day-accessory0-pacques.png",
        ᐃᐃᐃΔᐃᐃⲆ: "img/night-accessory0-pacques.png",
        ⵠⲆⵠⵠⲆᐃⲆ: "img/day-accessory13.png",
        ⲆⵠⲆΔᐃᐃΔ: "img/night-accessory13.png",
        ⲆΔⲆΔⲆⲆᐃ: "img/day-accessory14.png",
        ΔΔΔⵠᐃΔᐃ: "img/night-accessory14.png",
        ΔⲆᐃΔⵠⵠⲆ: "img/day-accessory15.png",
        ⵠⲆⵠᐃΔⵠⵠ: "img/night-accessory15.png",
        ᐃⵠΔᐃᐃᐃᐃ: "img/day-accessory16.png",
        Δᐃⵠᐃⵠᐃᐃ: "img/night-accessory16.png",
        ⲆᐃⲆⲆⲆᐃΔ: "img/day-accessory17.png",
        ᐃⵠⵠⵠⲆᐃᐃ: "img/day-accessory17.png",
        ΔΔⲆΔᐃⵠⵠ: "img/day-accessory19.png",
        ⲆⵠⲆⵠⵠᐃⲆ: "img/night-accessory19.png",
        ⲆⲆᐃⲆⵠⵠⵠ: "img/day-accessory20.png",
        ΔΔᐃⲆΔⲆᐃ: "img/night-accessory20.png",
        ⲆᐃⲆⲆⲆΔᐃ: "img/day-accessory21.png",
        Δⵠⵠᐃᐃᐃⵠ: "img/night-accessory21.png",
        ᐃⵠⲆⵠⵠᐃΔ: "img/day-accessory22.png",
        ⲆⲆⲆⵠⲆΔⵠ: "img/night-accessory22.png",
        ⵠⲆΔΔⵠⲆⵠ: "img/day-accessory23.png",
        ⲆⲆⵠΔⲆᐃΔ: "img/night-accessory23.png",
        ΔΔᐃⵠΔⵠⲆ: "img/day-accessory24.png",
        Δⵠⵠᐃⵠⵠⵠ: "img/night-accessory24.png",
        ⵠⵠⲆΔⵠⲆⲆ: "img/day-accessory25.png",
        ᐃⲆⵠⲆΔᐃⵠ: "img/night-accessory25.png",
        ⲆⵠᐃᐃⲆⲆⵠ: "img/day-accessory26.png",
        ⵠⲆΔᐃᐃΔⲆ: "img/night-accessory26.png",
        ᐃΔΔΔᐃⲆⵠ: "img/day-accessory27.png",
        ⲆⵠⲆⵠⵠⲆΔ: "img/night-accessory27.png",
        ᐃᐃΔΔⵠΔⲆ: "img/day-accessory18.png",
        ⲆᐃⵠᐃᐃΔⵠ: "img/night-accessory18.png",
        ΔΔⲆⵠⲆΔⲆ: "img/day-accessory29.png",
        ⵠᐃⲆⵠᐃⲆᐃ: "img/night-accessory29.png",
        ᐃΔᐃⵠᐃⵠⵠ: "img/day-accessory30.png",
        ⲆⲆΔⵠⵠᐃⵠ: "img/night-accessory30.png",
        ΔⵠⵠⲆⵠΔⵠ: "img/day-accessory31.png",
        ΔΔⲆⲆᐃⲆⵠ: "img/night-accessory31.png",
        ᐃΔⵠᐃᐃᐃⲆ: "img/day-accessory32.png",
        ΔᐃΔⵠᐃⲆⲆ: "img/night-accessory32.png",
        ⵠᐃᐃⲆⲆⵠΔ: "img/day-accessory33.png",
        ΔⲆΔⵠⲆⵠⲆ: "img/night-accessory33.png",
        ΔΔᐃΔᐃΔᐃ: "img/day-accessory34.png",
        ⵠᐃΔΔⵠΔⵠ: "img/night-accessory34.png",
        ⲆᐃⲆⵠᐃⵠⵠ: "img/day-accessory35.png",
        ⵠᐃⲆⲆⲆⵠⵠ: "img/night-accessory35.png",
        ⵠΔⵠⵠⲆⲆΔ: "img/day-accessory28.png",
        ΔⲆᐃⲆΔᐃⲆ: "img/night-accessory28.png",
        ⲆᐃⲆΔΔᐃΔ: "img/day-accessory36.png",
        ⲆᐃΔⵠⵠΔΔ: "img/night-accessory36.png",
        ᐃᐃⲆΔᐃⵠᐃ: "img/day-accessory37.png",
        ⵠⲆᐃΔⵠΔᐃ: "img/night-accessory37.png",
        ⲆᐃΔⵠⲆᐃⵠ: "img/day-accessory39.png",
        ᐃⲆⵠⲆΔⲆΔ: "img/night-accessory39.png",
        ⲆⲆΔⵠᐃⲆⲆ: "img/day-accessory40.png",
        ᐃⵠΔᐃⲆΔᐃ: "img/night-accessory40.png",
        ⵠᐃⵠⵠⲆᐃᐃ: "img/day-accessory41.png",
        ΔⲆⵠΔⲆᐃᐃ: "img/night-accessory41.png",
        ⵠΔᐃⲆᐃⵠΔ: "img/day-accessory42.png",
        ΔⵠᐃⵠᐃΔⵠ: "img/night-accessory42.png",
        ᐃΔⲆⵠΔⲆᐃ: "img/day-accessory43.png",
        ⵠⵠⲆᐃᐃᐃⲆ: "img/night-accessory43.png",
        ⲆⵠΔⲆᐃᐃⲆ: "img/day-accessory44.png",
        ⵠᐃᐃᐃⵠⲆⲆ: "img/night-accessory44.png",
        ᐃⵠⲆⲆᐃⵠᐃ: "img/day-accessory38.png",
        ᐃⵠⵠΔⵠⵠⵠ: "img/night-accessory38.png",
        ⲆⲆⲆⲆⵠᐃΔ: "img/day-accessory46.png",
        ᐃⵠᐃΔΔⲆΔ: "img/night-accessory46.png",
        ΔⵠⲆᐃⲆⲆⵠ: "img/day-accessory47.png",
        ⲆᐃⲆⲆⲆΔΔ: "img/night-accessory47.png",
        ΔⵠⲆⲆⲆⲆΔ: "img/day-accessory48.png",
        ΔᐃⵠΔⵠⵠᐃ: "img/night-accessory48.png",
        ⵠⲆΔᐃΔΔⵠ: "img/day-accessory49.png",
        ⲆΔⵠⵠΔⵠⵠ: "img/night-accessory49.png",
        ᐃⵠΔⵠⲆⵠⲆ: "img/day-accessory45.png",
        ᐃᐃᐃⵠⵠⲆΔ: "img/night-accessory45.png",
        ᐃᐃⵠᐃᐃᐃΔ: "img/day-accessory50.png",
        ⲆⵠᐃⵠᐃᐃΔ: "img/night-accessory50.png",
        ᐃⵠΔⲆΔᐃⵠ: "img/day-accessory51.png",
        ⲆᐃⵠᐃⲆᐃᐃ: "img/night-accessory51.png",
        ⲆⲆᐃᐃⲆⲆⵠ: "img/day-accessory52.png",
        ⲆⵠᐃΔⵠᐃⲆ: "img/night-accessory52.png",
        ⲆΔⲆⵠⲆΔᐃ: "img/day-accessory53.png",
        ΔⵠΔᐃᐃΔⲆ: "img/night-accessory53.png",
        ΔⲆᐃᐃⲆΔⵠ: "img/day-accessory54.png",
        ⵠⲆΔⲆΔⵠⵠ: "img/night-accessory54.png",
        ᐃΔⲆΔᐃΔⲆ: "img/day-accessory55.png",
        ⲆΔΔⲆᐃⵠΔ: "img/night-accessory55.png",
        ΔᐃᐃⵠⲆⲆΔ: "img/day-accessory56.png",
        ⵠⵠⵠⲆΔⲆⵠ: "img/night-accessory56.png",
        ⲆⲆΔΔᐃᐃΔ: "img/day-accessory57.png",
        ⲆⲆΔⲆⵠᐃᐃ: "img/night-accessory57.png",
        ᐃⲆⲆΔⵠᐃⲆ: "img/day-accessory58.png",
        ⲆⲆΔΔⲆΔⲆ: "img/night-accessory58.png",
        ᐃⲆΔᐃΔⲆⲆ: "img/day-accessory59.png",
        ⵠⵠΔΔⵠᐃⲆ: "img/night-accessory59.png",
        ᐃⵠⵠΔⲆᐃΔ: "img/day-accessory60.png",
        ⲆⵠⲆⵠΔᐃΔ: "img/night-accessory60.png",
        ᐃⲆΔⲆⵠᐃⲆ: "img/day-accessory61.png",
        ⵠⲆᐃΔⵠᐃΔ: "img/night-accessory61.png",
        ᐃⲆΔⲆⲆⲆⵠ: "img/day-accessory62.png",
        ΔΔⵠᐃᐃᐃⵠ: "img/night-accessory62.png",
        ⵠᐃⲆΔΔⲆΔ: "img/day-accessory63.png",
        ΔⵠᐃⲆΔᐃⲆ: "img/night-accessory63.png",
        ⵠᐃΔᐃᐃᐃⵠ: "img/day-accessory64.png",
        ⵠᐃⲆᐃΔᐃⵠ: "img/night-accessory64.png",
        ΔΔⵠⲆⵠΔᐃ: "img/day-accessory65.png",
        ⲆΔΔΔΔⵠᐃ: "img/night-accessory65.png",
        ΔⵠΔⵠᐃⵠⲆ: "img/day-accessory66.png",
        ⵠⲆⲆΔⵠⲆⵠ: "img/night-accessory66.png",
        ᐃᐃᐃΔⲆⵠⲆ: "img/day-accessory67.png",
        ⲆᐃⵠⵠⵠΔΔ: "img/night-accessory67.png",
        ΔΔᐃⵠⵠᐃⲆ: "img/day-accessory68.png",
        ⵠⲆΔⲆⲆⲆⵠ: "img/night-accessory68.png",
        ΔᐃΔⲆΔᐃΔ: "img/day-accessory69.png",
        ⲆⵠⲆⲆΔᐃⵠ: "img/night-accessory69.png",
        ᐃΔΔΔᐃⲆᐃ: "img/day-accessory70.png",
        ⵠᐃⲆᐃΔⲆᐃ: "img/night-accessory70.png",
        ΔΔΔΔΔᐃᐃ: "img/day-accessory71.png",
        ᐃⲆⵠⵠⲆⲆⲆ: "img/night-accessory71.png",
        ᐃᐃΔⵠⲆΔⲆ: "img/day-accessory72.png",
        ⵠⵠⲆⵠᐃⲆⲆ: "img/night-accessory72.png",
        ⵠⲆᐃⵠⲆΔΔ: "img/day-accessory73.png",
        ⲆᐃⲆⵠⲆΔΔ: "img/night-accessory73.png",
        ⵠⲆⲆΔⵠⲆᐃ: "img/day-accessory74.png",
        ᐃΔⵠⲆΔⲆᐃ: "img/night-accessory74.png",
        ᐃᐃⲆⵠⲆΔᐃ: "img/day-accessory75.png",
        ⲆⲆΔⲆᐃⵠⲆ: "img/night-accessory75.png",
        ΔᐃⲆᐃⲆΔⵠ: "img/day-accessory76.png",
        ᐃⲆᐃᐃᐃⲆΔ: "img/night-accessory76.png",
        ⵠⵠΔⵠⲆᐃᐃ: "img/day-accessory77.png",
        ᐃΔΔⲆΔⵠΔ: "img/night-accessory77.png",
        ⵠᐃᐃΔᐃᐃΔ: "img/day-accessory78.png",
        ⵠⵠΔⵠᐃᐃⲆ: "img/night-accessory78.png",
        ⲆΔⵠⵠᐃΔⲆ: "img/day-accessory79.png",
        ΔⲆⲆⲆᐃⲆⵠ: "img/night-accessory79.png",
        ᐃⵠⵠⲆⲆΔⲆ: "img/day-accessory80.png",
        ⲆⵠΔⵠⲆⲆΔ: "img/night-accessory80.png",
        ΔⵠⲆᐃⵠⵠⵠ: "img/day-accessory81.png",
        ΔⵠⵠⵠᐃΔΔ: "img/night-accessory81.png",
        ⵠⲆΔΔΔᐃᐃ: "img/day-accessory83.png",
        ⵠⲆΔΔⵠΔⲆ: "img/night-accessory83.png",
        ΔᐃⲆᐃΔⲆⵠ: "img/day-accessory84.png",
        ᐃᐃᐃⲆⲆⵠⲆ: "img/night-accessory84.png",
        ΔⵠᐃᐃⲆⵠⲆ: "img/day-accessory85.png",
        ⲆⵠΔᐃᐃΔΔ: "img/night-accessory85.png",
        ⲆᐃⵠΔⲆᐃⲆ: "img/day-accessory86.png",
        ⲆⲆⵠⵠⲆᐃᐃ: "img/night-accessory86.png",
        ⲆⵠᐃᐃᐃᐃⲆ: "img/day-accessory87.png",
        ⲆⲆⵠⲆⲆᐃΔ: "img/night-accessory87.png",
        ΔⲆΔⵠⵠⵠΔ: "img/day-accessory88.png",
        ᐃⵠⲆⵠⵠΔⵠ: "img/night-accessory88.png",
        ⲆΔᐃᐃᐃᐃⵠ: "img/day-accessory89.png",
        ⲆⵠΔⲆΔⲆⵠ: "img/night-accessory89.png",
        ΔᐃⵠΔᐃⵠᐃ: "img/day-accessory90.png",
        ⵠᐃᐃᐃᐃⲆΔ: "img/night-accessory90.png",
        ⲆᐃΔᐃⵠⵠᐃ: "img/day-accessory91.png",
        ᐃᐃΔⵠⲆⵠΔ: "img/night-accessory91.png",
        ⵠⲆⲆⲆⲆⲆᐃ: "img/day-accessory92.png",
        ᐃⲆΔᐃⲆᐃᐃ: "img/night-accessory92.png",
        ⲆⲆⵠⲆΔΔⲆ: "img/day-accessory93.png",
        ⲆⲆⲆΔΔⲆᐃ: "img/night-accessory93.png",
        ΔΔᐃⲆⵠΔᐃ: "img/day-accessory94.png",
        ⵠΔⵠⵠⵠᐃΔ: "img/night-accessory94.png",
        ΔᐃΔⲆΔⵠⵠ: "img/day-accessory95.png",
        ⵠΔⲆⵠⲆΔᐃ: "img/night-accessory95.png",
        ΔΔᐃΔⵠⵠΔ: "img/day-accessory96.png",
        ᐃᐃⲆⲆΔᐃΔ: "img/night-accessory96.png",
        ⲆⲆᐃⵠΔⲆᐃ: "img/day-accessory97.png",
        ΔᐃΔⵠΔΔᐃ: "img/night-accessory97.png",
        ⵠⲆⵠᐃΔΔⲆ: "img/day-accessory98.png",
        ⲆⲆᐃΔⵠΔⵠ: "img/night-accessory98.png",
        ᐃΔⵠⵠⵠⵠᐃ: "img/day-accessory99.png",
        ᐃⲆⲆⵠⲆᐃⵠ: "img/night-accessory99.png",
        ᐃⵠᐃΔΔΔᐃ: "img/day-accessory100.png",
        ᐃⵠΔⲆⲆⲆᐃ: "img/night-accessory100.png",
        ΔΔᐃⲆᐃⵠⲆ: "img/day-accessory101.png",
        ᐃⵠᐃⲆⲆᐃᐃ: "img/night-accessory101.png",
        ᐃⵠΔᐃⲆᐃᐃ: "img/day-accessory102.png",
        ⲆⵠΔᐃᐃΔⲆ: "img/night-accessory102.png",
        ⵠΔΔᐃᐃΔΔ: "img/day-accessory103.png",
        ΔⵠᐃᐃᐃⲆⲆ: "img/night-accessory103.png",
        ΔΔᐃⲆⲆⲆⲆ: "img/day-accessory104.png",
        ΔᐃⵠⲆᐃΔⲆ: "img/night-accessory104.png",
        ⲆᐃⵠⲆᐃΔΔ: "img/day-accessory105.png",
        ⲆᐃⲆⵠΔᐃⲆ: "img/night-accessory105.png",
        ΔΔⵠΔⲆⲆⵠᐃⵠ: "img/day-accessory106.png",
        ᐃΔᐃᐃΔⵠⲆΔΔ: "img/night-accessory106.png",
        ⵠⵠⵠⲆΔⵠΔᐃⲆ: "img/day-accessory107.png",
        ⵠⵠᐃᐃᐃΔΔⲆΔ: "img/night-accessory107.png",
        ΔΔᐃⵠᐃΔΔ: "img/day-accessory82.png",
        ⲆⲆⵠΔΔⵠⲆ: "img/night-accessory82.png",
        ΔⵠⲆΔΔᐃΔ: "img/day-book0.png",
        ⵠⲆΔⲆᐃᐃⲆ: "img/night-book0.png",
        ⲆΔᐃⵠⵠᐃΔ: "img/day-book1.png",
        ⲆⲆΔⵠᐃΔᐃ: "img/night-book1.png",
        ΔⲆⵠᐃΔᐃᐃ: "img/day-book2.png",
        ᐃᐃⵠᐃᐃΔᐃ: "img/night-book2.png",
        ⵠⲆⲆΔⲆᐃᐃ: "img/day-book3.png",
        ΔⲆᐃΔᐃⵠⵠ: "img/night-book3.png",
        ⵠⵠⲆⲆᐃⵠΔ: "img/day-book4.png",
        ΔΔⲆΔᐃᐃᐃ: "img/night-book4.png",
        ⵠΔΔⵠⵠΔᐃ: "img/day-book5.png",
        ᐃⲆⵠᐃΔⲆᐃ: "img/night-book5.png",
        ᐃΔⲆⲆⲆⲆΔ: "img/day-book6.png",
        ᐃΔΔⵠⵠⵠⲆ: "img/night-book6.png",
        ⲆᐃᐃⲆⲆᐃⲆ: "img/day-book7.png",
        ⵠⲆⵠᐃΔᐃⲆ: "img/night-book7.png",
        ⵠΔᐃⵠⲆᐃⲆ: "img/day-book8.png",
        ΔΔⵠΔΔⵠᐃ: "img/night-book8.png",
        ΔΔⲆⵠⲆⵠⵠ: "img/day-book9.png",
        ⵠᐃⵠⵠᐃΔᐃ: "img/night-book9.png",
        ᐃⵠᐃᐃᐃⵠⵠ: "img/day-book10.png",
        ⵠⵠΔⲆⵠⵠᐃ: "img/night-book10.png",
        ⵠᐃⵠⵠⲆΔⲆ: "img/day-book11.png",
        ⵠⲆᐃᐃΔΔΔ: "img/night-book11.png",
        ⲆᐃⲆⲆⵠΔΔ: "img/day-book12.png",
        ᐃΔⲆⵠⲆᐃⵠ: "img/night-book12.png",
        ᐃᐃⵠᐃⵠⵠΔ: "img/day-book13.png",
        ᐃΔΔᐃᐃΔⲆ: "img/night-book13.png",
        ⵠⲆΔᐃΔⵠᐃ: "img/day-book14.png",
        ᐃⵠᐃⵠⵠⵠⲆ: "img/night-book14.png",
        ⵠⲆΔΔΔᐃΔ: "img/day-book15.png",
        ⲆⵠΔΔⵠᐃΔ: "img/night-book15.png",
        ⲆⵠΔΔⵠⲆⲆ: "img/day-book16.png",
        ΔᐃΔᐃᐃⵠΔ: "img/night-book16.png",
        ⲆⵠᐃᐃΔⲆΔ: "img/day-book17.png",
        ⵠⲆⵠⲆᐃⵠⲆ: "img/night-book17.png",
        ⵠᐃⵠⵠᐃⵠⲆ: "img/day-book18.png",
        ΔⵠΔⲆΔΔΔ: "img/night-book18.png",
        ⵠⵠᐃᐃⵠᐃΔ: "img/day-book19.png",
        ᐃⵠᐃΔΔᐃΔ: "img/night-book19.png",
        ⲆⵠΔᐃⵠᐃΔ: "img/day-book20.png",
        ΔⲆⲆΔⵠⵠⵠ: "img/night-book20.png",
        ᐃᐃΔΔⵠᐃΔ: "img/day-book21.png",
        ΔⲆⲆⲆⲆⵠΔ: "img/night-book21.png",
        ᐃⵠⲆΔⵠⲆΔ: "img/day-book22.png",
        ⲆΔΔⵠⲆΔΔ: "img/night-book22.png",
        ᐃⲆᐃᐃΔⵠⲆ: "img/day-book23.png",
        ⵠᐃΔΔΔΔⵠ: "img/night-book23.png",
        ⵠⲆᐃᐃⵠΔΔ: "img/day-book24.png",
        ΔⵠⲆᐃⵠⲆⲆ: "img/night-book24.png",
        ⲆⲆΔᐃᐃᐃⵠ: "img/day-book25.png",
        ΔᐃᐃΔⲆΔⲆ: "img/night-book25.png",
        ᐃⵠⲆᐃⵠⲆΔ: "img/day-book26.png",
        ⵠΔᐃⲆⵠΔΔ: "img/night-book26.png",
        ⵠⵠᐃⲆᐃΔΔ: "img/day-book27.png",
        ⵠⲆᐃⵠⵠⵠᐃ: "img/night-book27.png",
        ⵠⵠΔⲆΔᐃᐃ: "img/day-book28.png",
        ΔⲆᐃΔⵠΔᐃ: "img/night-book28.png",
        ᐃᐃⲆΔᐃⵠΔ: "img/day-book29.png",
        ⵠᐃⲆΔⵠⵠⵠ: "img/night-book29.png",
        ⲆᐃΔⲆⲆⵠⵠ: "img/day-book30.png",
        ⵠᐃΔⵠΔⵠᐃ: "img/night-book30.png",
        ΔⵠⲆⵠⵠⵠⲆ: "img/day-book31.png",
        ΔⲆΔΔᐃⵠⵠ: "img/night-book31.png",
        ⲆΔΔᐃⲆᐃⲆ: "img/day-book32.png",
        ᐃΔᐃⲆΔⵠⲆ: "img/night-book32.png",
        ⵠᐃⵠⵠᐃⲆᐃ: "img/day-book33.png",
        ΔᐃΔᐃⲆΔⵠ: "img/night-book33.png",
        ⲆⵠΔⲆΔⵠⲆ: "img/day-book34.png",
        ᐃᐃΔⲆⵠⵠᐃ: "img/night-book34.png",
        ΔᐃⲆᐃⲆⵠΔ: "img/day-book35.png",
        ᐃΔΔᐃᐃᐃᐃ: "img/night-book35.png",
        ⵠᐃⵠᐃⵠⲆᐃ: "img/day-book36.png",
        ⲆⲆᐃΔⲆⲆᐃ: "img/night-book36.png",
        ⵠⲆᐃⲆⵠΔⲆⲆⵠ: "img/day-book37.png",
        ΔᐃⲆΔⲆΔⲆΔΔ: "img/night-book37.png",
        ⲆΔⵠⵠⵠΔⲆ: "img/day-book38.png",
        ᐃᐃᐃΔᐃᐃΔ: "img/night-book38.png",
        ⲆⲆⲆⲆᐃΔⲆ: "img/day-book39.png",
        ᐃⵠΔⲆⵠᐃΔ: "img/night-book39.png",
        ᐃᐃⵠᐃΔⵠⲆ: "img/day-book40.png",
        ⵠⲆΔⵠⲆⵠᐃ: "img/night-book40.png",
        ᐃᐃᐃᐃⵠⲆⵠ: "img/day-book41.png",
        ΔⵠᐃⲆᐃⵠⲆ: "img/night-book41.png",
        ᐃΔᐃᐃⲆⲆⲆ: "img/day-book42.png",
        ΔΔᐃⲆΔⲆΔ: "img/night-book42.png",
        ⲆⲆΔⲆⵠⵠΔ: "img/day-book43.png",
        ⵠΔⲆⵠᐃΔᐃ: "img/night-book43.png",
        ΔᐃⲆΔΔⵠⵠ: "img/day-book44.png",
        ΔΔᐃᐃΔᐃᐃ: "img/night-book44.png",
        ᐃᐃⵠⵠⲆᐃᐃ: "img/day-book45.png",
        ᐃⲆⵠⵠΔⲆⵠ: "img/night-book45.png",
        ⵠᐃⵠᐃⲆΔⲆ: "img/day-book46.png",
        ⲆΔⲆΔⲆΔΔ: "img/night-book46.png",
        ᐃⲆⵠΔΔᐃⵠ: "img/day-book47.png",
        ⲆΔⲆⵠΔᐃⵠ: "img/night-book47.png",
        ΔⲆⲆⲆⲆⵠⵠ: "img/day-book48.png",
        ⵠΔⵠⵠⵠⵠᐃ: "img/night-book48.png",
        ⲆΔⲆᐃⲆⲆΔ: "img/day-book49.png",
        ᐃⵠᐃᐃᐃⲆⲆ: "img/night-book49.png",
        ⵠᐃⵠⲆⲆᐃⲆ: "img/day-book50.png",
        ⵠⲆᐃⲆⵠΔⲆ: "img/night-book50.png",
        ΔΔⵠΔΔΔⲆ: "img/day-crate1.png",
        ⵠᐃΔⵠⵠΔᐃ: "img/night-crate1.png",
        ⵠΔᐃᐃΔᐃᐃ: "img/day-crate2.png",
        ΔᐃⲆΔⵠᐃΔ: "img/night-crate2.png",
        ⵠⲆⲆᐃΔⲆⲆ: "img/day-crate3.png",
        ᐃᐃᐃᐃⵠⲆᐃ: "img/night-crate3.png",
        ⲆⲆΔᐃΔⵠⲆ: "img/day-crate4.png",
        ⲆᐃⵠᐃⲆᐃⵠ: "img/night-crate4.png",
        ΔⲆᐃⵠΔⲆΔ: "img/day-crate5.png",
        ᐃⲆᐃᐃΔⵠⵠ: "img/night-crate5.png",
        ΔΔⲆᐃΔΔΔ: "img/day-crate6.png",
        ᐃΔᐃΔᐃⲆᐃ: "img/night-crate6.png",
        ⵠᐃΔⵠⵠΔΔ: "img/day-crate7.png",
        ΔⵠᐃⲆᐃⵠᐃ: "img/night-crate7.png",
        ⵠᐃⵠⲆΔΔⵠ: "img/day-crate8.png",
        ⲆⵠⵠⲆⵠᐃΔ: "img/night-crate8.png",
        ΔΔⵠΔΔΔΔ: "img/day-crate9.png",
        ⵠᐃΔΔⵠΔⲆ: "img/night-crate9.png",
        ΔⲆⲆΔᐃⵠⵠ: "img/day-crate10.png",
        ᐃⵠⵠᐃᐃᐃⵠ: "img/night-crate10.png",
        ⵠᐃⵠⵠⲆΔΔ: "img/day-crate11.png",
        ⵠⵠᐃⵠⲆⵠⵠ: "img/night-crate11.png",
        ᐃⲆⵠⲆΔΔⵠ: "img/day-crate12.png",
        ᐃᐃⲆᐃΔⵠΔ: "img/night-crate12.png",
        ⵠΔΔᐃΔᐃᐃ: "img/day-crate13.png",
        ΔΔΔⵠΔΔⵠ: "img/night-crate13.png",
        ⲆΔᐃΔⲆΔⲆ: "img/day-crate14.png",
        ⵠᐃᐃⵠΔⵠᐃ: "img/night-crate14.png",
        ᐃⵠΔΔΔⵠΔ: "img/day-crate15.png",
        ⲆΔⵠᐃᐃⵠⵠ: "img/night-crate15.png",
        ⵠΔΔⲆⲆⵠⵠ: "img/day-crate16.png",
        ⲆᐃⲆⲆΔⲆᐃ: "img/night-crate16.png",
        ΔⲆⲆⵠΔΔⲆ: "img/day-crate17.png",
        ΔⲆᐃΔⲆⲆⲆ: "img/night-crate17.png",
        ᐃⲆⲆΔΔⵠⲆ: "img/day-crate18.png",
        ⵠⵠᐃⲆⵠⵠⵠ: "img/night-crate18.png",
        ⲆΔᐃΔⲆΔΔ: "img/day-crate19.png",
        ΔⵠᐃⵠΔⵠⵠ: "img/night-crate19.png",
        ΔⲆⲆⲆⵠᐃΔ: "img/day-crate20.png",
        ⲆΔⲆⵠⵠⵠⵠ: "img/night-crate20.png",
        ᐃⲆΔᐃⵠⲆⵠ: "img/day-crate21.png",
        ⲆΔᐃΔⵠⵠΔ: "img/night-crate21.png",
        ⲆΔⵠᐃᐃᐃⲆ: "img/day-crate22.png",
        ⲆⵠⵠⵠᐃⲆᐃ: "img/night-crate22.png",
        ΔᐃⵠᐃΔΔΔ: "img/day-crate23.png",
        ⲆΔᐃΔⵠᐃⲆ: "img/night-crate23.png",
        ΔΔⵠᐃΔΔⲆ: "img/day-crate24.png",
        ΔⵠᐃⲆᐃΔⵠ: "img/night-crate24.png",
        ⲆᐃᐃⲆΔᐃᐃ: "img/day-crate25.png",
        ⵠΔⲆⲆΔⵠᐃ: "img/night-crate25.png",
        ΔⵠᐃᐃΔⲆⲆ: "img/day-crate26.png",
        ᐃⵠⵠΔΔΔⵠ: "img/night-crate26.png",
        ⵠΔⲆΔᐃⵠΔ: "img/day-crate27.png",
        ΔⵠᐃⵠᐃⲆⲆ: "img/night-crate27.png",
        ᐃⵠΔⲆᐃΔΔ: "img/day-crate28.png",
        ΔⲆᐃⲆᐃᐃⵠ: "img/night-crate28.png",
        ⲆⵠᐃⵠⲆᐃΔ: "img/day-crate29.png",
        ⵠⵠᐃᐃᐃᐃᐃ: "img/night-crate29.png",
        ᐃΔᐃⲆᐃⲆⲆ: "img/day-crate30.png",
        ΔⲆΔⵠΔⲆᐃ: "img/night-crate30.png",
        ⲆΔΔⵠΔⵠⲆ: "img/day-crate31.png",
        ᐃᐃΔⲆᐃⲆΔ: "img/night-crate31.png",
        ΔᐃΔⲆᐃⲆΔ: "img/day-crate32.png",
        ᐃΔⲆⵠⵠᐃΔ: "img/night-crate32.png",
        ⲆⲆΔΔⲆΔᐃ: "img/day-crate33.png",
        ᐃⵠᐃⲆᐃΔᐃ: "img/night-crate33.png",
        ΔᐃⵠⲆⲆⵠⲆ: "img/day-crate34.png",
        ΔⲆΔⵠᐃᐃⲆ: "img/night-crate34.png",
        ⵠⲆⲆᐃᐃⲆⲆ: "img/day-crate35.png",
        ⵠⵠΔΔᐃΔⵠ: "img/night-crate35.png",
        ΔᐃΔᐃⵠᐃᐃ: "img/day-crate36.png",
        ΔⲆᐃᐃΔᐃΔ: "img/night-crate36.png",
        ᐃΔᐃⵠᐃⲆΔ: "img/day-crate37.png",
        ΔᐃⵠΔⵠⲆΔ: "img/night-crate37.png",
        ⲆᐃⲆⵠⲆᐃΔ: "img/day-crate38.png",
        ⲆⵠΔⲆΔΔⲆ: "img/night-crate38.png",
        ⵠΔᐃⲆΔΔⵠ: "img/day-crate39.png",
        ᐃᐃⵠΔΔⵠⵠ: "img/night-crate39.png",
        ⵠⵠⵠⵠⲆΔⲆ: "img/day-crate40.png",
        ᐃⵠΔΔⲆᐃⵠ: "img/night-crate40.png",
        ⵠΔᐃᐃᐃⵠΔ: "img/day-crate41.png",
        ᐃΔⲆᐃⲆΔⵠ: "img/night-crate41.png",
        ΔⵠⵠΔᐃⵠᐃ: "img/day-crate42.png",
        ⲆΔⵠⲆⲆⲆΔ: "img/night-crate42.png",
        ⲆΔⵠⵠⲆΔᐃ: "img/day-crate43.png",
        ΔᐃᐃᐃΔᐃᐃ: "img/night-crate43.png",
        ⲆᐃⲆⵠᐃᐃᐃ: "img/day-crate44.png",
        ⲆᐃⲆΔΔⲆⵠ: "img/night-crate44.png",
        ΔⲆᐃⲆⲆⵠⵠ: "img/day-crate45.png",
        ⵠᐃⵠᐃᐃΔⵠ: "img/night-crate45.png",
        ΔⵠᐃⲆⵠᐃⵠ: "img/day-crate46.png",
        ⲆΔⲆⵠⵠᐃⵠ: "img/night-crate46.png",
        ᐃΔΔΔΔᐃⲆ: "img/day-crate47.png",
        ᐃⵠΔΔⲆᐃⲆ: "img/night-crate47.png",
        ΔΔⵠΔⵠᐃⵠ: "img/day-crate48.png",
        ⵠΔⲆⵠᐃⵠⲆ: "img/night-crate48.png",
        ⲆⵠⲆΔⵠⲆΔ: "img/day-crate49.png",
        ⵠᐃⲆΔⲆᐃⵠ: "img/night-crate49.png",
        ⲆⵠⲆⲆΔⲆᐃ: "img/day-crate50.png",
        ⵠΔⲆⵠⵠⲆᐃ: "img/night-crate50.png",
        ⵠΔᐃⲆΔⵠⲆ: "img/day-crate51.png",
        ᐃΔᐃΔᐃΔΔ: "img/night-crate51.png",
        ⵠΔᐃⲆⵠⵠⵠ: "img/day-crate52.png",
        ⲆᐃᐃⲆⲆⵠᐃ: "img/night-crate52.png",
        ᐃᐃᐃᐃⲆⵠⲆ: "img/day-crate53.png",
        ⵠΔⵠⲆᐃΔⲆ: "img/night-crate53.png",
        ⵠᐃⲆᐃⵠᐃΔ: "img/day-crate54.png",
        ⲆᐃⵠⲆⵠⵠⲆ: "img/night-crate54.png",
        ᐃⵠⵠΔⵠΔⲆ: "img/day-crate55.png",
        ΔΔΔΔⵠⲆΔ: "img/night-crate55.png",
        ⲆΔⲆⵠⲆⲆΔ: "img/day-crate56.png",
        ΔⵠᐃΔⲆⲆΔ: "img/night-crate56.png",
        ᐃⲆᐃΔᐃⲆⵠ: "img/day-crate57.png",
        ⲆΔΔⵠⲆΔⲆ: "img/night-crate57.png",
        ⵠᐃⲆⲆⲆᐃⵠ: "img/day-crate58.png",
        ⲆᐃΔⵠᐃⲆΔ: "img/night-crate58.png",
        ΔⲆᐃᐃⲆᐃⲆ: "img/day-crate59.png",
        ᐃⲆΔΔⵠᐃᐃ: "img/night-crate59.png",
        ΔⵠⵠΔΔΔΔ: "img/day-crate60.png",
        ⵠⲆΔⵠⲆⵠⵠ: "img/night-crate60.png",
        ⵠⲆΔⲆᐃΔⲆ: "img/day-crate61.png",
        ⵠⲆᐃᐃΔᐃⲆ: "img/night-crate61.png",
        ᐃⲆΔΔΔⵠΔ: "img/day-crate62.png",
        ⵠⲆᐃΔΔᐃᐃ: "img/night-crate62.png",
        ⵠΔⵠᐃᐃΔΔ: "img/day-crate63.png",
        ᐃⵠᐃᐃᐃᐃΔ: "img/night-crate63.png",
        ⲆⵠᐃⲆⵠⲆᐃ: "img/day-crate64.png",
        ᐃᐃᐃⲆᐃⲆᐃ: "img/night-crate64.png",
        ᐃᐃⲆΔᐃΔΔ: "img/day-crate65.png",
        ⲆΔⵠΔᐃΔΔ: "img/night-crate65.png",
        ᐃᐃᐃⵠⵠⵠΔ: "img/day-crate66.png",
        ΔⵠⵠᐃⲆⵠΔ: "img/night-crate66.png",
        ΔᐃⵠⲆⲆⵠᐃ: "img/day-crate67.png",
        ΔⲆⲆⵠⵠᐃᐃ: "img/night-crate67.png",
        ΔⲆΔΔΔΔᐃ: "img/day-crate68.png",
        ᐃⲆⵠⵠΔⲆΔ: "img/night-crate68.png",
        ᐃᐃΔⲆΔⲆᐃ: "img/day-crate69.png",
        ⲆⲆᐃΔΔⵠⲆ: "img/night-crate69.png",
        ⲆᐃΔᐃΔᐃⲆ: "img/day-crate70.png",
        ΔⵠΔⲆⲆⲆⵠ: "img/night-crate70.png",
        ⵠⵠⲆᐃⲆⲆᐃ: "img/day-crate71.png",
        ΔⵠᐃΔⵠⵠΔ: "img/night-crate71.png",
        ΔⵠΔⵠᐃΔΔ: "img/day-crate72.png",
        ⵠΔΔΔⲆΔⵠ: "img/night-crate72.png",
        ᐃⲆⲆᐃⵠΔᐃ: "img/day-crate73.png",
        ᐃΔⵠΔᐃⵠᐃ: "img/night-crate73.png",
        ΔⲆⵠΔᐃⵠΔ: "img/day-crate74.png",
        ⲆΔⲆⲆΔΔⲆ: "img/night-crate74.png",
        ⲆⲆⲆⵠΔⲆⲆ: "img/day-crate75.png",
        ⲆⵠΔᐃΔⲆΔ: "img/night-crate75.png",
        ⲆᐃΔΔΔⵠᐃ: "img/day-crate76.png",
        ΔᐃᐃⲆⵠᐃⵠ: "img/night-crate76.png",
        ΔⵠⲆᐃᐃᐃⵠ: "img/day-crate77.png",
        ⵠᐃΔⲆⲆᐃᐃ: "img/night-crate77.png",
        ᐃⵠⲆⲆΔᐃⲆ: "img/day-crate78.png",
        ⵠΔᐃⲆΔᐃᐃ: "img/night-crate78.png",
        ⵠⵠΔⵠΔᐃⲆ: "img/day-crate79.png",
        ⵠⵠᐃⲆΔⵠΔ: "img/night-crate79.png",
        ΔⵠⲆᐃⵠⲆΔ: "img/day-herb0.png",
        ᐃⵠⲆΔⵠⲆⲆ: "img/day-herb1.png",
        ⲆΔⲆΔᐃⵠᐃ: "img/day-herb2.png",
        ᐃⲆΔᐃⲆⲆⵠ: "img/day-herb3.png",
        ᐃΔΔᐃᐃⵠΔ: "img/day-herb4.png",
        ΔΔΔⲆⵠΔⲆ: "img/day-herb5.png",
        ⲆᐃⲆᐃⲆⵠᐃ: "img/day-herb6.png",
        ᐃᐃⲆᐃΔⲆΔ: "img/day-herb7.png",
        ⲆΔΔⲆⵠᐃⲆ: "img/day-herb8.png",
        ᐃᐃⲆⲆΔⲆΔ: "img/day-herb9.png",
        ᐃΔⲆⲆⲆⲆⲆ: "img/day-herb10.png",
        ⲆⲆⲆᐃⲆⵠⲆ: "img/day-herb11.png",
        ΔⲆⵠⲆⵠⲆᐃ: "img/day-herb12.png",
        ΔΔⵠᐃᐃΔΔ: "img/day-herb13.png",
        ᐃᐃᐃᐃⵠⵠᐃ: "img/day-herb14.png",
        ΔⵠΔⲆᐃⲆⲆ: "img/day-herb15.png",
        ⵠΔᐃⲆⲆⲆⲆ: "img/day-shell0.png",
        ⵠᐃⲆᐃⵠⵠᐃ: "img/day-shell1.png",
        ⵠᐃΔⵠᐃΔΔ: "img/day-shell2.png",
        ᐃⵠⵠᐃᐃᐃⲆ: "img/day-leaf1.png",
        ⲆⲆⵠⵠⵠᐃᐃ: "img/day-leaf2.png",
        ⵠⲆⲆⵠⲆⵠᐃ: "img/day-leaf3.png",
        ⲆΔᐃⲆⵠⵠⵠ: "img/day-leaf4.png",
        ΔⲆᐃⲆᐃΔᐃ: "img/day-leaf5.png",
        ⵠⲆΔΔᐃΔᐃ: "img/day-leaf6.png",
        ᐃΔⲆᐃᐃⵠⵠ: "img/day-leaf7.png",
        ⵠⲆΔⵠᐃⲆⲆ: "img/day-leaf8.png",
        ⲆΔΔΔᐃᐃⵠ: "img/day-rock0.png",
        ᐃⵠⵠⵠΔᐃΔ: "img/day-rock1.png",
        ᐃⲆⵠⵠⲆⵠΔ: "img/day-rock2.png",
        ⲆᐃᐃᐃⲆⵠᐃ: "img/day-rock3.png",
        ᐃΔΔⵠΔᐃᐃ: "img/day-rock4.png",
        ⲆⲆⵠΔΔΔΔ: "img/day-rock5.png",
        ⵠⵠⲆΔⵠΔᐃ: "img/day-rock6.png",
        ⵠΔΔⲆᐃΔᐃ: "img/day-rock7.png",
        ⵠⵠⵠΔᐃΔⲆ: "img/day-rock8.png",
        ⲆΔⲆΔⲆⵠⵠ: "img/day-rock9.png",
        ⵠⲆⵠⵠΔΔᐃ: "img/day-rock10.png",
        ᐃⲆⵠⵠᐃᐃᐃ: "img/day-rock11.png",
        ΔⵠΔΔᐃⵠⲆ: "img/day-rock12.png",
        ᐃΔΔⲆᐃᐃⵠ: "img/day-rock13.png",
        ⵠΔⵠΔᐃΔᐃ: "img/day-flower1.png",
        ΔᐃᐃΔᐃΔᐃ: "img/day-flower2.png",
        ΔΔΔΔᐃⲆᐃ: "img/day-flower3.png",
        ᐃᐃⵠⵠΔⲆΔ: "img/day-flower4.png",
        ᐃⲆⲆΔⵠⲆᐃ: "img/day-flower5.png",
        ΔᐃⲆΔⵠᐃᐃ: "img/day-flower6.png",
        ᐃΔᐃᐃⵠΔᐃ: "img/day-flower7.png",
        ΔⵠᐃⵠΔⲆᐃ: "img/day-flower8.png",
        ⵠᐃⲆΔⲆⲆΔ: "img/day-flower9.png",
        ⲆΔⵠΔⲆⵠΔ: "img/day-herb16.png",
        ᐃⵠⲆᐃⲆⲆⲆ: "img/day-herb17.png",
        ⵠⵠⲆⵠⲆᐃⵠ: "img/day-herb18.png",
        ΔⲆⲆⲆᐃΔΔ: "img/day-herb19.png",
        ⵠᐃᐃᐃᐃⲆⲆ: "img/day-herb20.png",
        ⲆΔⲆΔⵠᐃᐃ: "img/day-herb21.png",
        ⲆΔⵠᐃΔⲆⵠ: "img/night-herb0.png",
        ΔⵠⲆⵠᐃᐃΔ: "img/night-herb1.png",
        ΔΔⲆⲆΔⲆΔ: "img/night-herb2.png",
        ⵠⵠⵠΔΔΔⵠ: "img/night-herb3.png",
        ⵠⲆⲆᐃⲆⲆΔ: "img/night-herb4.png",
        ᐃΔΔⵠᐃΔⲆ: "img/night-herb5.png",
        ᐃⵠⵠΔⵠⲆΔ: "img/night-herb6.png",
        ⵠᐃᐃⲆΔᐃᐃ: "img/night-herb7.png",
        ΔⵠⵠΔⵠⲆᐃ: "img/night-herb8.png",
        ⲆⲆᐃⵠⵠΔᐃ: "img/night-herb9.png",
        ΔΔᐃⵠⵠⵠΔ: "img/night-herb10.png",
        ⵠᐃΔᐃᐃⵠⲆ: "img/night-herb11.png",
        ⵠᐃⲆⲆΔΔᐃ: "img/night-herb12.png",
        ⵠⵠΔᐃΔᐃⵠ: "img/night-herb13.png",
        ᐃⵠᐃᐃΔᐃⵠ: "img/night-herb14.png",
        ⵠᐃᐃᐃⲆᐃᐃ: "img/night-herb15.png",
        ⲆⲆᐃⵠⵠΔⲆ: "img/night-shell0.png",
        ⵠΔⵠⲆⵠΔⵠ: "img/night-shell1.png",
        ⵠⵠⲆⲆΔΔⵠ: "img/night-shell2.png",
        ⲆΔⲆᐃⲆⲆⵠ: "img/night-leaf1.png",
        ⲆⲆⵠΔⵠΔΔ: "img/night-leaf2.png",
        ⲆᐃᐃᐃⲆⲆⵠ: "img/night-leaf3.png",
        ⲆⵠᐃᐃΔⵠⲆ: "img/night-leaf4.png",
        ᐃⵠⵠⲆᐃΔⵠ: "img/night-leaf5.png",
        ⲆⲆⲆⲆⵠΔⵠ: "img/night-leaf6.png",
        ⲆⵠⵠⵠⲆⲆΔ: "img/night-leaf7.png",
        ⵠᐃᐃⵠⲆΔΔ: "img/night-leaf8.png",
        ⲆⲆΔⵠᐃⲆᐃ: "img/night-rock0.png",
        ⲆΔⲆᐃⵠⲆᐃ: "img/night-rock1.png",
        ⲆᐃΔᐃⵠΔⵠ: "img/night-rock2.png",
        ᐃⲆⲆⲆᐃᐃᐃ: "img/night-rock3.png",
        ⲆⲆᐃⲆⲆⵠⲆ: "img/night-rock4.png",
        ⵠΔⵠΔⵠΔᐃ: "img/night-rock5.png",
        ΔⵠⵠⲆⲆⵠᐃ: "img/night-rock6.png",
        ⵠᐃⲆⵠⵠᐃΔ: "img/night-rock7.png",
        ⵠⲆⲆΔΔⵠΔ: "img/night-rock8.png",
        ΔᐃⵠⵠⵠᐃⲆ: "img/night-rock9.png",
        ΔᐃⵠΔᐃⲆⲆ: "img/night-rock10.png",
        ⲆⵠᐃⲆΔⲆᐃ: "img/night-rock11.png",
        ⵠΔᐃᐃⲆⵠΔ: "img/night-rock12.png",
        ΔⵠⵠⲆᐃⵠΔ: "img/night-rock13.png",
        ΔΔⵠᐃⲆⵠᐃ: "img/night-flower1.png",
        ᐃⲆⵠⲆᐃΔᐃ: "img/night-flower2.png",
        ᐃⲆⲆⲆΔᐃⵠ: "img/night-flower3.png",
        ᐃⵠᐃⲆⲆΔⵠ: "img/night-flower4.png",
        ᐃⵠⵠᐃⵠⲆΔ: "img/night-flower5.png",
        ᐃᐃΔⲆᐃⵠΔ: "img/night-flower6.png",
        ΔⵠΔΔᐃⲆᐃ: "img/night-flower7.png",
        ᐃᐃΔᐃᐃⵠⵠ: "img/night-flower8.png",
        ⲆΔⲆΔⲆⵠΔ: "img/night-flower9.png",
        ⵠⵠΔΔᐃⵠᐃ: "img/night-herb16.png",
        ⵠᐃΔᐃⲆⵠⵠ: "img/night-herb17.png",
        ΔⲆΔⲆⲆⵠᐃ: "img/night-herb18.png",
        ΔᐃᐃᐃΔΔΔ: "img/night-herb19.png",
        ⵠⵠⵠΔⵠⵠᐃ: "img/night-herb20.png",
        ᐃΔⲆᐃΔⲆⲆ: "img/night-herb21.png",
        ⵠⲆⵠⵠⲆⲆΔ: "img/day-river000-010-000.png",
        ⵠΔᐃⲆⲆⲆΔ: "img/day-river000-010-010.png",
        ⲆΔⵠΔⵠⵠⲆ: "img/day-river000-011-000.png",
        ΔᐃᐃᐃΔⲆⲆ: "img/day-river000-011-010.png",
        ΔⵠᐃⵠⲆΔᐃ: "img/day-river000-011-011.png",
        ᐃⵠⵠᐃᐃⵠΔ: "img/day-river000-110-000.png",
        ⲆΔⵠⵠΔᐃⵠ: "img/day-river000-110-010.png",
        ⲆⲆⵠⵠⲆΔⵠ: "img/day-river000-110-110.png",
        ᐃᐃⲆΔᐃΔⵠ: "img/day-river000-111-000.png",
        ΔⵠᐃΔᐃⲆⵠ: "img/day-river000-111-010.png",
        ᐃΔⲆⵠⵠᐃⵠ: "img/day-river000-111-011.png",
        ⲆᐃΔⵠΔΔΔ: "img/day-river000-111-110.png",
        ΔΔᐃⵠᐃᐃⲆ: "img/day-river000-111-111.png",
        ⵠΔΔⲆᐃⲆⵠ: "img/day-river010-010-000.png",
        ⲆᐃⲆᐃΔᐃᐃ: "img/day-river010-010-010.png",
        ᐃⲆⵠⲆΔᐃⲆ: "img/day-river010-011-000.png",
        ΔΔⲆΔΔΔⲆ: "img/day-river010-011-010.png",
        ΔⵠⵠⵠᐃⵠⲆ: "img/day-river010-011-011.png",
        ᐃᐃΔᐃΔΔⵠ: "img/day-river010-110-000.png",
        ⲆⵠΔᐃⲆⵠⲆ: "img/day-river010-110-010.png",
        ΔᐃⲆⲆᐃⲆᐃ: "img/day-river010-110-110.png",
        ⲆⲆᐃΔᐃⲆⵠ: "img/day-river010-111-000.png",
        ⲆⵠΔΔᐃᐃⲆ: "img/day-river010-111-010.png",
        ⵠⲆΔᐃⲆᐃΔ: "img/day-river010-111-011.png",
        ⲆΔⲆⲆⲆᐃⲆ: "img/day-river010-111-110.png",
        ⲆⲆᐃᐃⲆΔΔ: "img/day-river010-111-111.png",
        ᐃⲆᐃⵠᐃᐃⲆ: "img/day-river011-011-000.png",
        ⲆⲆⲆᐃΔⵠⲆ: "img/day-river011-011-010.png",
        ΔᐃⲆΔⵠⲆⲆ: "img/day-river011-011-011.png",
        ΔᐃⲆⲆⵠΔⵠ: "img/day-river011-111-000.png",
        ⲆΔⵠⵠᐃΔⵠ: "img/day-river011-111-010.png",
        ΔⵠᐃᐃΔⲆΔ: "img/day-river011-111-011.png",
        ⲆⲆᐃⲆΔⲆⲆ: "img/day-river011-111-110.png",
        ᐃⲆⵠᐃⵠΔⵠ: "img/day-river011-111-111.png",
        ΔΔᐃⵠⲆⵠᐃ: "img/day-river110-110-000.png",
        ⲆᐃⲆᐃⵠⵠᐃ: "img/day-river110-110-010.png",
        ΔΔΔⵠⵠᐃⲆ: "img/day-river110-110-110.png",
        ⲆⲆⵠⵠᐃᐃᐃ: "img/day-river110-111-000.png",
        ⵠⵠⵠⵠⵠΔΔ: "img/day-river110-111-010.png",
        ΔⵠⵠΔΔᐃⲆ: "img/day-river110-111-011.png",
        ΔᐃᐃΔᐃⵠⵠ: "img/day-river110-111-110.png",
        ⲆᐃΔⲆᐃⵠᐃ: "img/day-river110-111-111.png",
        ⲆⵠᐃⵠᐃⲆⲆ: "img/day-river111-111-011.png",
        ⵠᐃΔΔⲆⵠᐃ: "img/day-river111-111-110.png",
        ⲆⵠᐃⵠᐃⲆⲆ: "img/day-river111-111-011.png",
        ᐃⵠᐃᐃⵠᐃⲆ: "img/day-river111-111-000.png",
        ΔⲆⲆᐃⲆⵠⵠ: "img/day-river111-111-111.png",
        ᐃΔⵠᐃⵠⲆᐃ: "img/day-river111-111-010.png",
        ⲆᐃΔΔⲆᐃⵠ: "img/night-river000-010-000.png",
        ΔᐃΔᐃᐃᐃΔ: "img/night-river000-010-010.png",
        ᐃⵠⵠⵠᐃⵠⲆ: "img/night-river000-011-000.png",
        ⵠⵠᐃⵠⵠᐃⵠ: "img/night-river000-011-010.png",
        ᐃᐃᐃΔⵠⵠⲆ: "img/night-river000-011-011.png",
        ⲆⲆᐃᐃⵠΔΔ: "img/night-river000-110-000.png",
        ⵠⵠΔⵠⵠΔᐃ: "img/night-river000-110-010.png",
        ᐃΔΔⵠⵠⵠᐃ: "img/night-river000-110-110.png",
        ⵠⵠⲆⵠⵠᐃⲆ: "img/night-river000-111-000.png",
        ⲆᐃⵠᐃΔⵠΔ: "img/night-river000-111-010.png",
        ᐃⵠᐃΔⲆⲆⲆ: "img/night-river000-111-011.png",
        Ⲇᐃⵠᐃᐃⵠᐃ: "img/night-river000-111-110.png",
        ΔⵠⲆⲆⲆᐃΔ: "img/night-river000-111-111.png",
        ΔᐃᐃΔΔᐃΔ: "img/night-river010-010-000.png",
        ΔᐃΔΔⵠΔⲆ: "img/night-river010-010-010.png",
        ⲆⵠⵠᐃΔᐃⵠ: "img/night-river010-011-000.png",
        ΔΔⲆᐃᐃΔΔ: "img/night-river010-011-010.png",
        ⵠⵠⵠⵠⲆΔⵠ: "img/night-river010-011-011.png",
        ⵠᐃⲆⲆⵠΔⵠ: "img/night-river010-110-000.png",
        ⲆΔⵠⲆᐃⵠⲆ: "img/night-river010-110-010.png",
        ⲆⲆⲆⵠᐃⲆⵠ: "img/night-river010-110-110.png",
        ⲆΔΔΔⵠᐃΔ: "img/night-river010-111-000.png",
        ΔᐃⲆⲆⵠᐃΔ: "img/night-river010-111-010.png",
        ᐃⵠΔⲆⵠᐃᐃ: "img/night-river010-111-011.png",
        ⵠΔⵠⲆⲆᐃᐃ: "img/night-river010-111-110.png",
        ⲆᐃⲆⵠΔᐃᐃ: "img/night-river010-111-111.png",
        ΔⲆᐃⵠΔΔΔ: "img/night-river011-011-000.png",
        ⵠⲆⲆⲆΔᐃⵠ: "img/night-river011-011-010.png",
        ΔᐃᐃⵠΔⲆᐃ: "img/night-river011-011-011.png",
        ΔⵠΔᐃⵠᐃΔ: "img/night-river011-111-000.png",
        ᐃᐃΔΔᐃⵠⲆ: "img/night-river011-111-010.png",
        ⵠⵠᐃⵠⲆᐃᐃ: "img/night-river011-111-011.png",
        ΔⵠⲆⵠΔⲆΔ: "img/night-river011-111-110.png",
        ᐃΔΔⲆⲆᐃᐃ: "img/night-river011-111-111.png",
        ⲆΔᐃⲆⵠΔⵠ: "img/night-river110-110-000.png",
        ⵠᐃⲆΔᐃΔⲆ: "img/night-river110-110-010.png",
        ⲆⲆⵠⲆⲆⲆⲆ: "img/night-river110-110-110.png",
        ⲆΔⲆⵠⵠᐃᐃ: "img/night-river110-111-000.png",
        ΔΔⵠᐃⵠⵠⲆ: "img/night-river110-111-010.png",
        ΔᐃΔⲆᐃⲆⲆ: "img/night-river110-111-011.png",
        ⲆⵠΔΔᐃᐃⵠ: "img/night-river110-111-110.png",
        ᐃΔⵠⲆⲆⵠΔ: "img/night-river110-111-111.png",
        ᐃⲆⵠΔᐃΔΔ: "img/night-river111-111-011.png",
        ⵠⲆⵠⵠⵠⵠⵠ: "img/night-river111-111-110.png",
        ᐃⲆⵠΔᐃΔΔ: "img/night-river111-111-011.png",
        ⲆᐃΔΔⵠᐃⲆ: "img/night-river111-111-000.png",
        ΔᐃⲆⵠᐃⵠⵠ: "img/night-river111-111-111.png",
        ᐃⵠⲆᐃᐃᐃⲆᐃⲆ: "img/night-river111-111-010.png",
        ⲆⲆΔΔΔⵠⲆ: "img/day-pebblecompo1.png",
        ⲆⲆᐃΔⵠ: "img/day-pebblecompo2.png",
        ⵠΔⵠᐃⵠ: "img/day-pebblecompo3.png",
        ΔᐃΔⵠΔⵠΔ: "img/day-pebblecompo4.png",
        ᐃⵠΔⵠⵠ: "img/day-pebblecompo5.png",
        ᐃΔΔΔⵠ: "img/day-pebblecompo6.png",
        ⵠⲆⲆᐃΔ: "img/day-pebblecompo7.png",
        ⲆᐃⵠⲆΔⵠΔⲆᐃ: "img/day-pebblecompo8.png",
        ᐃᐃⵠΔᐃᐃᐃ: "img/day-pebblecompo9.png",
        ᐃⵠᐃⲆᐃᐃⲆ: "img/day-pebblecompo10.png",
        ⲆⲆⲆΔᐃ: "img/day-pebblecompo11.png",
        ⲆⵠΔⲆⲆⲆΔ: "img/day-pebblecompo12.png",
        ⵠΔΔᐃΔⵠΔ: "img/day-pebblecompo13.png",
        ⵠⲆⵠΔᐃᐃΔ: "img/day-pebblecompo14.png",
        ᐃⵠᐃΔⵠΔΔ: "img/day-pebblecompo15.png",
        ᐃΔⵠΔΔΔᐃ: "img/day-pebblecompo16.png",
        ᐃⵠΔΔΔ: "img/day-pebblecompo17.png",
        ΔᐃⵠⵠΔΔᐃ: "img/day-pebblecompo18.png",
        ᐃⵠⵠⵠΔⵠⲆ: "img/day-pebblecompo19.png",
        ᐃᐃΔⲆΔ: "img/day-pebblecompo20.png",
        ⵠⲆᐃᐃΔ: "img/day-pebblecompo21.png",
        ᐃΔⵠⵠΔⵠⵠ: "img/day-pebblecompo22.png",
        ⲆⲆΔᐃⲆⲆⵠ: "img/day-pebblecompo23.png",
        ᐃⵠᐃⲆΔⵠⵠ: "img/day-pebblecompo24.png",
        ⲆⲆΔⵠⲆ: "img/day-pebblecompo25.png",
        ⲆᐃΔΔᐃ: "img/day-pebblecompo26.png",
        ΔⲆΔΔᐃΔᐃ: "img/day-pebblecompo27.png",
        ᐃΔⵠᐃΔ: "img/day-pebblecompo28.png",
        ⵠⲆᐃⲆΔⲆⵠ: "img/night-pebblecompo1.png",
        ᐃⵠⲆⵠᐃ: "img/night-pebblecompo2.png",
        ΔⲆᐃΔᐃ: "img/night-pebblecompo3.png",
        ⲆᐃⲆⵠⵠᐃⲆ: "img/night-pebblecompo4.png",
        ᐃᐃΔΔⲆ: "img/night-pebblecompo5.png",
        ⲆΔᐃⵠΔ: "img/night-pebblecompo6.png",
        ᐃⲆΔΔⲆ: "img/night-pebblecompo7.png",
        ΔᐃΔⵠⵠᐃΔⵠᐃ: "img/night-pebblecompo8.png",
        Ⲇⵠⵠᐃⵠⵠᐃ: "img/night-pebblecompo9.png",
        ⲆΔΔⵠΔΔⲆ: "img/night-pebblecompo10.png",
        ⵠⵠᐃᐃⵠ: "img/night-pebblecompo11.png",
        Δᐃᐃᐃᐃᐃⵠ: "img/night-pebblecompo12.png",
        ᐃᐃⵠⲆᐃΔⵠ: "img/night-pebblecompo13.png",
        ⲆᐃᐃΔᐃⵠⵠ: "img/night-pebblecompo14.png",
        ⲆⵠⵠⲆᐃΔⵠ: "img/night-pebblecompo15.png",
        ⲆⵠΔⲆᐃΔΔ: "img/night-pebblecompo16.png",
        ᐃⲆᐃᐃⵠ: "img/night-pebblecompo17.png",
        ⲆΔΔᐃΔΔⵠ: "img/night-pebblecompo18.png",
        ⵠⲆᐃⲆⵠⲆᐃ: "img/night-pebblecompo19.png",
        ΔⵠΔⲆⲆ: "img/night-pebblecompo20.png",
        ΔΔⲆᐃᐃ: "img/night-pebblecompo21.png",
        ᐃⲆⲆΔᐃΔΔ: "img/night-pebblecompo22.png",
        ⲆᐃΔΔᐃⲆᐃ: "img/night-pebblecompo23.png",
        ΔᐃᐃⲆⲆⵠΔ: "img/night-pebblecompo24.png",
        ⵠᐃΔⲆᐃ: "img/night-pebblecompo25.png",
        ᐃⲆΔⲆⲆ: "img/night-pebblecompo26.png",
        ΔᐃⲆⲆⲆⲆⵠ: "img/night-pebblecompo27.png",
        ᐃΔΔⲆⵠ: "img/night-pebblecompo28.png",
        ⵠΔΔΔΔᐃⲆᐃᐃ: "img/day-baby-mammoth.png",
        ᐃⲆΔⵠᐃⵠⲆᐃⲆ: "img/day-baby-mammoth-tamed.png",
        ⲆΔⵠΔⲆⵠⲆΔᐃ: "img/day-baby-mammoth-angry.png",
        ⲆᐃΔᐃΔΔΔⵠΔ: "img/night-baby-mammoth.png",
        ᐃᐃⲆΔΔⲆΔⲆᐃ: "img/night-baby-mammoth-tamed.png",
        ⵠΔΔᐃⲆᐃⲆΔΔ: "img/night-baby-mammoth-angry.png",
        ᐃᐃⲆᐃᐃΔⵠᐃᐃ: "img/inv-mammoth-out.png",
        ΔᐃⵠⵠⵠΔᐃᐃⲆ: "img/inv-mammoth-in.png",
        ΔⲆⲆΔⵠΔⲆΔᐃ: "img/inv-mammoth-click.png",
        ΔⵠᐃᐃⲆΔⲆ: "img/hurt-baby-mammoth.png",
        ΔᐃⵠΔⵠΔΔ: "img/baby-mammoth-step.png",
        ᐃᐃΔⲆᐃⲆⲆΔⵠ: "img/day-flower-hat.png",
        ᐃⲆⵠΔⵠⲆⲆΔⲆ: "img/night-flower-hat.png",
        ⲆΔΔᐃΔΔⵠᐃⲆ: "img/inv-flower-hat-out.png",
        ⵠⵠΔⵠⲆⲆᐃΔⲆ: "img/inv-flower-hat-in.png",
        ᐃⵠᐃᐃΔⲆⵠᐃⲆ: "img/inv-flower-hat-click.png",
        ΔⵠⵠΔⲆΔⵠⲆⵠ: "img/day-fur-hat.png",
        ⵠⵠΔⵠⲆⵠⲆⵠⲆ: "img/night-fur-hat.png",
        ΔΔᐃΔⵠⲆΔᐃⵠ: "img/inv-fur-hat-out.png",
        ⲆⵠⵠⲆΔᐃΔⲆᐃ: "img/inv-fur-hat-in.png",
        ᐃᐃΔᐃⲆΔⲆᐃⵠ: "img/inv-fur-hat-click.png",
        ⵠᐃⲆΔᐃⵠⵠᐃΔ: "img/day-mammoth.png",
        ⵠⵠΔΔⵠΔΔⵠⲆ: "img/night-mammoth.png",
        ⲆΔΔᐃⲆᐃⵠ: "img/hurt-mammoth.png",
        ⵠΔⲆᐃⲆⵠᐃΔⵠ: "img/inv-mammoth-fur-out.png",
        ⵠⵠⵠⲆⲆⲆⲆᐃᐃ: "img/inv-mammoth-fur-in.png",
        ⲆᐃⵠⲆΔᐃⲆⲆᐃ: "img/inv-mammoth-fur-click.png",
        ᐃⵠΔⵠⲆᐃᐃⲆΔ: "img/inv-wood-bow-out.png",
        ⵠⲆΔⵠⲆⲆⲆⲆⲆ: "img/inv-wood-bow-in.png",
        ⲆⵠⲆⵠᐃΔⲆⵠᐃ: "img/inv-wood-bow-click.png",
        ⲆⲆᐃᐃΔⵠΔⲆΔ: "img/inv-wood-arrow-out.png",
        ⵠᐃΔⵠΔΔᐃΔⵠ: "img/inv-wood-arrow-in.png",
        ⵠⲆᐃΔⵠᐃᐃⵠⲆ: "img/inv-wood-arrow-click.png",
        ᐃΔⲆᐃΔⲆΔᐃΔ: "img/day-wood-bow2.png",
        ᐃᐃΔΔΔΔᐃΔⵠ: "img/night-wood-bow2.png",
        ⵠⵠᐃΔΔΔⵠ: "img/day-wood-arrow.png",
        ᐃΔⵠΔⲆᐃⵠ: "img/night-wood-arrow.png",
        ⲆΔⵠΔⵠⲆⵠᐃⲆ: "img/inv-stone-bow-out.png",
        Ⲇⵠⵠᐃⵠᐃᐃⵠⵠ: "img/inv-stone-bow-in.png",
        ᐃΔⵠΔⲆΔΔᐃᐃ: "img/inv-stone-bow-click.png",
        ⲆᐃⵠⵠᐃΔⲆΔⵠ: "img/inv-stone-arrow-out.png",
        ᐃΔΔᐃⲆᐃⲆΔΔ: "img/inv-stone-arrow-in.png",
        ᐃΔΔΔΔⲆⲆᐃΔ: "img/inv-stone-arrow-click.png",
        ⵠᐃⵠⲆⵠᐃᐃᐃⵠ: "img/day-stone-bow.png",
        ⵠᐃᐃⲆᐃⲆⵠᐃⲆ: "img/night-stone-bow.png",
        ΔⵠⵠΔΔⲆᐃ: "img/day-stone-arrow.png",
        ᐃΔᐃⵠⲆᐃᐃ: "img/night-stone-arrow.png",
        ⵠᐃⲆⵠᐃᐃΔΔⲆ: "img/inv-gold-bow-out.png",
        ᐃⲆΔΔᐃⲆⲆΔΔ: "img/inv-gold-bow-in.png",
        ᐃᐃᐃᐃⵠᐃⲆⲆⵠ: "img/inv-gold-bow-click.png",
        ΔⵠⲆⵠⵠᐃΔᐃⲆ: "img/inv-gold-arrow-out.png",
        ⵠΔⲆᐃᐃⲆⲆΔᐃ: "img/inv-gold-arrow-in.png",
        ⲆⵠΔⵠⵠΔⵠΔΔ: "img/inv-gold-arrow-click.png",
        ᐃⲆᐃⵠᐃΔΔⲆΔ: "img/day-gold-bow.png",
        ⲆⲆΔⲆΔᐃᐃⲆΔ: "img/night-gold-bow.png",
        ⲆⵠⵠⲆⲆᐃΔ: "img/day-gold-arrow.png",
        ⵠΔⲆⵠᐃΔⲆ: "img/night-gold-arrow.png",
        ᐃⲆⵠⵠⲆᐃᐃⵠⲆ: "img/inv-diamond-bow-out.png",
        ᐃᐃᐃᐃⵠΔᐃⵠΔ: "img/inv-diamond-bow-in.png",
        ⲆⵠᐃΔⵠᐃΔⲆᐃ: "img/inv-diamond-bow-click.png",
        ⵠⲆᐃΔΔⵠⵠᐃⲆ: "img/inv-diamond-arrow-out.png",
        ᐃⵠΔᐃⵠⵠᐃΔⵠ: "img/inv-diamond-arrow-in.png",
        ΔΔᐃⵠᐃⵠⲆⵠΔ: "img/inv-diamond-arrow-click.png",
        ⲆᐃΔΔⲆΔᐃΔΔ: "img/day-diamond-bow.png",
        ΔᐃⵠΔᐃⵠᐃᐃⲆ: "img/night-diamond-bow.png",
        ΔⵠⲆⵠᐃⵠᐃ: "img/day-diamond-arrow.png",
        ΔⲆⵠⲆᐃᐃⵠ: "img/night-diamond-arrow.png",
        ⵠΔΔᐃᐃᐃⵠⲆⵠ: "img/inv-amethyst-bow-out.png",
        ᐃⲆᐃᐃᐃᐃΔⲆⲆ: "img/inv-amethyst-bow-in.png",
        ΔⲆᐃᐃΔⵠⲆⲆΔ: "img/inv-amethyst-bow-click.png",
        ΔⲆⲆⵠᐃΔΔᐃᐃ: "img/inv-amethyst-arrow-out.png",
        ΔⵠⵠΔⵠΔⵠΔᐃ: "img/inv-amethyst-arrow-in.png",
        ΔⲆⵠⲆΔⲆⲆΔᐃ: "img/inv-amethyst-arrow-click.png",
        ΔΔⵠᐃⲆⵠᐃᐃΔ: "img/day-amethyst-bow.png",
        ᐃⲆⲆⵠⵠᐃᐃΔᐃ: "img/night-amethyst-bow.png",
        ⲆΔᐃΔⵠⲆⵠ: "img/day-amethyst-arrow.png",
        ΔⲆᐃⲆΔⵠΔ: "img/night-amethyst-arrow.png",
        ΔⲆΔⲆⵠᐃⲆⵠᐃ: "img/inv-dragon-bow-out.png",
        ᐃᐃⲆΔⵠⵠⲆⵠⲆ: "img/inv-dragon-bow-in.png",
        ⵠΔⵠᐃᐃⲆΔⵠⲆ: "img/inv-dragon-bow-click.png",
        ⲆⲆⲆⵠΔᐃΔΔᐃ: "img/inv-dragon-arrow-out.png",
        ⵠⲆΔΔΔᐃⵠΔΔ: "img/inv-dragon-arrow-in.png",
        ⲆⵠΔᐃⲆΔᐃⲆᐃ: "img/inv-dragon-arrow-click.png",
        ⵠᐃᐃᐃΔᐃⲆᐃⵠ: "img/day-dragon-bow.png",
        ⲆΔⵠᐃⵠⲆᐃΔΔ: "img/night-dragon-bow.png",
        ⵠⵠᐃᐃⵠᐃⲆ: "img/day-dragon-arrow.png",
        ᐃⵠᐃⲆⵠⲆⲆ: "img/night-dragon-arrow.png",
        ᐃΔᐃⵠⵠΔᐃⲆΔ: "img/inv-reidite-bow-out.png",
        ⲆⲆᐃΔⲆᐃⲆᐃⲆ: "img/inv-reidite-bow-in.png",
        ⲆⲆⵠⵠΔᐃⲆⵠΔ: "img/inv-reidite-bow-click.png",
        ᐃⲆⲆⵠΔⲆⲆΔⵠ: "img/inv-reidite-arrow-out.png",
        ⵠⵠⵠⲆΔⲆΔᐃⵠ: "img/inv-reidite-arrow-in.png",
        ⵠⵠΔⲆⵠⵠΔΔⵠ: "img/inv-reidite-arrow-click.png",
        ΔⵠᐃΔΔⵠΔᐃΔ: "img/day-reidite-bow.png",
        ⲆΔⲆΔⵠⲆᐃΔΔ: "img/night-reidite-bow.png",
        ΔⵠᐃΔⵠⲆΔ: "img/day-reidite-arrow.png",
        ᐃᐃᐃⵠΔⵠⵠⵠⵠ: "img/night-reidite-arrow.png",
        ⵠⲆᐃΔⲆⵠⲆᐃⵠ: "img/inv-wooden-axe-out.png",
        ΔᐃΔⵠΔᐃᐃΔⵠ: "img/inv-wooden-axe-in.png",
        ⵠΔΔⵠⲆⲆΔΔΔ: "img/inv-wooden-axe-click.png",
        ᐃΔⵠⵠⲆⲆᐃΔΔ: "img/day-wooden-axe.png",
        ᐃⵠΔΔⵠⵠⵠᐃΔ: "img/night-wooden-axe.png",
        ⵠΔⵠⲆⵠᐃⲆⲆΔ: "img/inv-stone-axe-out.png",
        ΔᐃⵠⵠᐃᐃⲆᐃᐃ: "img/inv-stone-axe-in.png",
        ᐃⵠΔⲆⲆⲆⲆΔⲆ: "img/inv-stone-axe-click.png",
        ΔⵠⵠⲆⲆⲆΔΔᐃ: "img/day-stone-axe.png",
        ᐃⲆⲆⲆⵠΔΔⲆⵠ: "img/night-stone-axe.png",
        ᐃⲆⵠⵠᐃⵠᐃⲆⵠ: "img/inv-golden-axe-out.png",
        ⵠⵠΔⵠⲆⵠᐃⲆⵠ: "img/inv-golden-axe-in.png",
        ⵠⲆᐃⵠΔΔΔΔᐃ: "img/inv-golden-axe-click.png",
        ΔᐃᐃᐃᐃᐃⵠᐃΔ: "img/day-golden-axe.png",
        ⵠᐃΔᐃⵠΔⲆⵠⵠ: "img/night-golden-axe.png",
        ⲆⵠⵠᐃΔⵠⵠΔᐃ: "img/inv-diamond-axe-out.png",
        ⲆᐃⵠᐃⵠⲆᐃⵠΔ: "img/inv-diamond-axe-in.png",
        ΔΔᐃⵠⵠⲆΔⵠⵠ: "img/inv-diamond-axe-click.png",
        ⲆⵠⵠΔᐃⲆⵠⵠⵠ: "img/day-diamond-axe.png",
        ⲆᐃᐃⲆⲆⲆᐃⵠⲆ: "img/night-diamond-axe.png",
        ΔⲆΔᐃⲆΔⲆⵠⲆ: "img/inv-amethyst-axe-out.png",
        ΔᐃⵠⲆᐃⵠΔᐃⵠ: "img/inv-amethyst-axe-in.png",
        ΔⲆⵠⵠⵠΔᐃⲆⲆ: "img/inv-amethyst-axe-click.png",
        ⵠⵠᐃΔⵠⵠᐃᐃⵠ: "img/day-amethyst-axe.png",
        ᐃᐃⵠᐃⲆⵠⲆᐃⵠ: "img/night-amethyst-axe.png",
        ᐃᐃᐃΔⵠⵠΔΔΔ: "img/inv-reidite-axe-out.png",
        ⲆⲆⲆⵠⲆⵠᐃⲆⵠ: "img/inv-reidite-axe-in.png",
        ᐃⲆΔΔⵠⲆᐃⲆⵠ: "img/inv-reidite-axe-click.png",
        ⲆⵠⵠᐃⲆΔⲆⲆⲆ: "img/day-reidite-axe.png",
        ΔⲆΔⲆΔᐃΔⵠⵠ: "img/night-reidite-axe.png",
        ΔⲆⲆⲆΔⵠⵠ: "img/bandage-activated.png",
        ΔⲆⲆⲆΔⲆⵠ: "img/auto-feed.png",
        ΔⲆⵠⵠΔΔᐃ: "img/stop-regeneration.png",
        ⵠᐃⵠΔΔΔⵠ: "img/stop-regeneration2.png",
        Δⵠᐃᐃᐃᐃᐃⵠⵠ: "img/day-wood-platform.png",
        ᐃΔⲆⵠⵠⵠΔᐃΔ: "img/night-wood-platform.png",
        ⵠⲆⵠᐃⲆⵠⲆⲆᐃ: "img/inv-wood-platform-in.png",
        ᐃᐃᐃⵠⲆⵠΔΔΔ: "img/inv-wood-platform-out.png",
        ᐃⲆⲆΔΔⲆΔΔΔ: "img/inv-wood-platform-click.png",
        ᐃⲆⲆΔΔΔⵠⲆᐃ: "img/day-wood-shield.png",
        ⵠⵠⵠⵠⲆⲆⵠⲆⵠ: "img/night-wood-shield.png",
        ΔᐃΔᐃᐃⵠⲆᐃᐃ: "img/day-stone-shield.png",
        ⲆᐃᐃΔⲆΔΔΔᐃ: "img/night-stone-shield.png",
        ᐃⲆⵠⲆᐃΔΔΔⲆ: "img/day-gold-shield.png",
        ⲆΔΔⲆΔⲆᐃᐃΔ: "img/night-gold-shield.png",
        ΔΔᐃⵠⲆⵠᐃⲆΔ: "img/day-diamond-shield.png",
        ⵠⵠᐃᐃΔΔΔΔΔ: "img/night-diamond-shield.png",
        ⲆᐃᐃΔᐃΔⵠⵠⲆ: "img/day-amethyst-shield.png",
        ᐃⲆΔⲆⵠᐃΔⵠΔ: "img/night-amethyst-shield.png",
        ΔⵠᐃⵠⲆⵠᐃⲆΔ: "img/day-reidite-shield.png",
        ᐃⵠⲆΔΔⵠⲆⵠⲆ: "img/night-reidite-shield.png",
        ⵠᐃΔⵠⵠⲆᐃⵠΔ: "img/inv-wood-shield-in.png",
        ᐃΔΔⲆⵠΔⵠᐃΔ: "img/inv-wood-shield-out.png",
        ᐃⵠΔⵠΔⲆⵠΔⵠ: "img/inv-wood-shield-click.png",
        ⵠΔᐃΔΔⲆⵠⲆᐃ: "img/inv-stone-shield-in.png",
        ⲆᐃⵠⵠⵠⵠⵠΔΔ: "img/inv-stone-shield-out.png",
        ΔᐃⵠᐃⲆⲆⲆⵠⵠ: "img/inv-stone-shield-click.png",
        ⲆΔⵠⵠⲆΔΔⲆⵠ: "img/inv-gold-shield-in.png",
        ⵠᐃⲆΔΔⵠⲆΔᐃ: "img/inv-gold-shield-out.png",
        ᐃⲆⲆⵠⲆᐃⵠⲆᐃ: "img/inv-gold-shield-click.png",
        ᐃᐃⵠⲆΔΔⲆᐃᐃ: "img/inv-diamond-shield-in.png",
        ΔᐃⵠⵠΔᐃᐃⲆⲆ: "img/inv-diamond-shield-out.png",
        ⵠᐃⲆⵠᐃΔⵠⵠⲆ: "img/inv-diamond-shield-click.png",
        ΔᐃᐃⵠΔΔⵠᐃᐃ: "img/inv-amethyst-shield-in.png",
        ⲆᐃΔⵠΔΔⲆⵠᐃ: "img/inv-amethyst-shield-out.png",
        ⲆⵠΔⵠⲆᐃⲆⲆᐃ: "img/inv-amethyst-shield-click.png",
        ΔⵠⲆⵠⵠΔΔⲆᐃ: "img/inv-reidite-shield-in.png",
        ⵠⲆΔᐃΔⵠⲆⲆⵠ: "img/inv-reidite-shield-out.png",
        ⲆⲆΔᐃⲆᐃⵠⲆᐃ: "img/inv-reidite-shield-click.png",
        ᐃᐃᐃⲆⲆⲆᐃᐃⲆ: "img/day-machete.png",
        ⵠΔᐃⵠᐃⵠΔΔⲆ: "img/night-machete.png",
        ΔⵠᐃⲆⵠⵠⲆⵠⵠ: "img/inv-machete-in.png",
        ᐃΔⲆᐃⵠᐃⲆᐃᐃ: "img/inv-machete-out.png",
        ⵠⲆⵠⵠⵠⲆΔᐃⲆ: "img/inv-machete-click.png"
    };
    ᐃⵠΔᐃⲆⲆⵠ = [{}];
    ᐃⵠΔᐃⲆⲆⵠ[0].stringify = function (a) {
        var b = new Uint8Array(new ArrayBuffer(a.length));
        for (var c = 0; a.length > c; c++) {
            b[c] = a[c];
        }
        return b;
    };
    var wt;
    wt = {};
    var xt;
    xt = {};
    for (var wb in jb) {
        wt[wb] = jb[wb];
    }
    ΔⲆ = [];
    const yt = 8;
    const Gb = 0;
    Mb = {};
    Mb.ⲆΔⲆᐃᐃ = 0;
    Mb.ⵠᐃΔᐃ = 1;
    Mb.ᐃⵠⵠᐃ = 2;
    Mb.ᐃⵠⲆᐃ = 3;
    Mb.ⵠⲆΔⲆ = 4;
    Mb.ⵠⵠⲆⵠ = 5;
    Mb.ᐃⵠᐃΔ = 6;
    Mb.ᐃΔⲆⵠᐃᐃⵠ = 7;
    Mb.ΔⲆᐃᐃⵠ = 8;
    Jd = {};
    ΔᐃⵠⲆ = [];
    ᐃⲆⲆΔⲆⵠΔ = function (a, b) {
        for (var c = 0; a.length > c; c++) {
            if (a[c].id === b) {
                return c;
            }
        }
        return -1;
    };
    var Lb = [];
    const zt = 15;
    const Ob = 0;
    function Nb(a, b) {
        for (var c = 0; Lb.length > c; c += b) {
            var d = Lb[c];
            if (d[0] === a) {
                Kb(d[0], d[1], d[2], d[3]);
            }
        }
    }
    const Hb = 3;
    const qb = 2;
    const Ub = 13;
    const Yb = 5;
    function Kb(b, c, d, e) {
        var f = ΔᐃⵠⲆ[b];
        if (f !== _a) {
            for (var i = 0; i < 2; i++) {
                var j = f[c][i];
                var k = e * 193 / mx.ΔΔΔⲆᐃ;
                var m = d * 193 / mx.ΔᐃⵠⵠΔ;
                var n = j.width / 3.5;
                var o = j.height / 3.5;
                ΔⲆ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
                k = e * 600 / mx.ΔΔΔⲆᐃ;
                m = d * 600 / mx.ΔᐃⵠⵠΔ;
                n = j.width / 1.5;
                o = j.height / 1.5;
                ΔⲆ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
            }
        }
    }
    const Vb = 20;
    function Xb(a, b, c, d) {
        if (b) {
            a.fillStyle = b;
            a.fill();
        }
        if (c) {
            a.lineWidth = d;
            a.strokeStyle = c;
            a.stroke();
        }
    }
    function Zb(b, c, d, e, f, g) {
        if (e < g * 2) {
            g = e / 2;
        }
        if (f < g * 2) {
            g = f / 2;
        }
        if (g < 0) {
            g = 0;
        }
        b.beginPath();
        b.moveTo(c + g, d);
        b.arcTo(c + e, d, c + e, d + f, g);
        b.arcTo(c + e, d + f, c, d + f, g);
        b.arcTo(c, d + f, c, d, g);
        b.arcTo(c, d, c + e, d, g);
        b.closePath();
    }
    ᐃᐃⵠΔⵠᐃⲆᐃⵠ = function () {
        for (var b = 0; b < 2; b++) {
            ΔⲆ[818][b].clearRect(0, 0, 193, 193);
            ΔⲆ[818][b].drawImage(ΔᐃⵠⲆ.MAP[b], 0, 0, 193, 193);
            ΔⲆ[819][b].clearRect(0, 0, 600, 600);
            ΔⲆ[819][b].drawImage(ΔᐃⵠⲆ.MAP[b], 0, 0, 600, 600);
            for (var c = mx.ⵠⲆΔᐃⵠ.length - 1; c >= 0; c--) {
                var d = mx.ⵠⲆΔᐃⵠ[c];
                var f = d.x1 * 193 / (mx.ΔΔΔⲆᐃ * 100);
                var j = d.y1 * 193 / (mx.ΔᐃⵠⵠΔ * 100);
                var k = d.w * 193 / (mx.ΔΔΔⲆᐃ * 100);
                var m = d.ᐃⲆᐃ * 193 / (mx.ΔᐃⵠⵠΔ * 100);
                var p = d.x1 * 600 / (mx.ΔΔΔⲆᐃ * 100);
                var q = d.y1 * 600 / (mx.ΔᐃⵠⵠΔ * 100);
                var u = d.w * 600 / (mx.ΔΔΔⲆᐃ * 100);
                var v = d.ᐃⲆᐃ * 600 / (mx.ΔᐃⵠⵠΔ * 100);
                if (mx.ΔΔᐃⵠᐃ === d.ⵠᐃⲆ) {
                    ΔⲆ[818][b].drawImage(ΔᐃⵠⲆ.FOREST[b], f, j, k, m);
                    ΔⲆ[819][b].drawImage(ΔᐃⵠⲆ.FOREST[b], p, q, u, v);
                }
                if (d.ⵠᐃⲆ === mx.ᐃⵠⲆᐃΔΔᐃ) {
                    ΔⲆ[818][b].drawImage(ΔᐃⵠⲆ.WINTER[b], f, j, k, m);
                    ΔⲆ[819][b].drawImage(ΔᐃⵠⲆ.WINTER[b], p, q, u, v);
                }
                if (d.ⵠᐃⲆ === mx.ⲆⵠⵠΔⲆᐃⲆ) {
                    ΔⲆ[818][b].drawImage(ΔᐃⵠⲆ.LAVA[b], f, j, k, m);
                    ΔⲆ[819][b].drawImage(ΔᐃⵠⲆ.LAVA[b], p, q, u, v);
                }
                if (mx.ⵠⵠᐃΔⲆᐃΔ === d.ⵠᐃⲆ) {
                    ΔⲆ[818][b].drawImage(ΔᐃⵠⲆ.CAVE[b], f, j, k, m);
                    ΔⲆ[819][b].drawImage(ΔᐃⵠⲆ.CAVE[b], p, q, u, v);
                }
                if (d.ⵠᐃⲆ === mx.ΔΔⵠⵠΔⵠⵠ) {
                    ΔⲆ[818][b].drawImage(ΔᐃⵠⲆ.DESERT[b], f, j, k, m);
                    ΔⲆ[819][b].drawImage(ΔᐃⵠⲆ.DESERT[b], p, q, u, v);
                }
            }
        }
    };
    ᐃΔΔΔᐃΔᐃᐃΔ = function () {
        Jd = {
            ⲆⵠⵠΔⵠ: [{
                id: 0,
                ΔᐃⲆ: jb.ᐃΔⵠᐃⲆⲆΔ,
                ⵠΔΔ: jb.ᐃⵠⵠⵠΔᐃⲆ,
                ΔΔΔⵠ: jb.ⲆΔΔΔⵠⵠΔ,
                Δⵠᐃᐃ: jb.ⲆⲆⲆΔᐃΔⲆ,
                ᐃⵠⵠ: Mb.ⲆΔⲆᐃᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Starver"
            }, {
                id: 3,
                ΔᐃⲆ: jb.ΔⲆΔⵠΔΔⲆ,
                ⵠΔΔ: jb.ᐃΔⲆΔⲆⲆⵠ,
                ΔΔΔⵠ: jb.ⲆⵠᐃΔᐃᐃⵠ,
                Δⵠᐃᐃ: jb.ΔⵠᐃᐃⲆΔᐃ,
                ᐃⵠⵠ: Mb.ⲆΔⲆᐃᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Angry"
            }, {
                id: 2,
                ΔᐃⲆ: jb.ᐃⲆⲆᐃⵠⵠᐃ,
                ⵠΔΔ: jb.ΔΔΔΔᐃⵠΔ,
                ΔΔΔⵠ: jb.ⲆᐃⵠΔⵠΔΔ,
                Δⵠᐃᐃ: jb.ᐃⵠⲆⵠⲆⵠΔ,
                ᐃⵠⵠ: Mb.ⲆΔⲆᐃᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Sad"
            }, {
                id: 9,
                ΔᐃⲆ: jb.ᐃΔΔΔΔⵠΔ,
                ⵠΔΔ: jb.Ⲇᐃⵠⵠᐃⵠᐃ,
                ΔΔΔⵠ: jb.ⵠⲆⵠⵠΔⲆⲆ,
                Δⵠᐃᐃ: jb.ΔᐃⲆΔᐃⵠΔ,
                ᐃⵠⵠ: Mb.ⲆΔⲆᐃᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Happy 1"
            }, {
                id: 1,
                ΔᐃⲆ: jb.ⲆᐃᐃⲆᐃᐃΔ,
                ⵠΔΔ: jb.ΔⲆᐃΔᐃᐃⲆ,
                ΔΔΔⵠ: jb.ⵠⲆΔⵠΔᐃΔ,
                Δⵠᐃᐃ: jb.ⲆⵠᐃⲆᐃΔⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "What?"
            }, {
                id: 4,
                ΔᐃⲆ: jb.ⲆⲆⵠⲆⲆⵠⲆ,
                ⵠΔΔ: jb.ᐃⵠⲆᐃΔⲆᐃ,
                ΔΔΔⵠ: jb.ⵠⲆᐃⲆⲆⵠᐃ,
                Δⵠᐃᐃ: jb.ⵠᐃⲆΔⵠΔⲆ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Suspicious"
            }, {
                id: 5,
                ΔᐃⲆ: jb.ⲆⲆΔⲆΔᐃⵠ,
                ⵠΔΔ: jb.ΔᐃᐃⲆΔΔΔ,
                ΔΔΔⵠ: jb.ⵠᐃᐃⲆⲆᐃⵠ,
                Δⵠᐃᐃ: jb.ⲆⲆⲆᐃᐃᐃΔ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Scar"
            }, {
                id: 6,
                ΔᐃⲆ: jb.ⲆᐃⲆΔⲆΔᐃ,
                ⵠΔΔ: jb.ᐃᐃⵠΔΔᐃⵠ,
                ΔΔΔⵠ: jb.ᐃᐃⵠⵠᐃⲆⲆ,
                Δⵠᐃᐃ: jb.ⵠⲆᐃᐃᐃⵠⲆ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "In Trouble"
            }, {
                id: 7,
                ΔᐃⲆ: jb.ᐃΔⲆⵠⵠⵠᐃ,
                ⵠΔΔ: jb.ⵠΔΔᐃΔⲆⵠ,
                ΔΔΔⵠ: jb.Ⲇᐃᐃᐃᐃᐃᐃ,
                Δⵠᐃᐃ: jb.ⲆⲆⵠⲆᐃᐃᐃ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Cute"
            }, {
                id: 8,
                ΔᐃⲆ: jb.ⲆⵠΔⵠⵠⵠⵠ,
                ⵠΔΔ: jb.ⲆⵠⵠΔᐃⵠᐃ,
                ΔΔΔⵠ: jb.ᐃⲆⵠᐃⵠⵠΔ,
                Δⵠᐃᐃ: jb.ᐃΔΔⲆᐃΔᐃ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Bored 1"
            }, {
                id: 10,
                ΔᐃⲆ: jb.ⲆⵠⲆⵠᐃΔⲆ,
                ⵠΔΔ: jb.ΔⵠΔⲆᐃⵠᐃ,
                ΔΔΔⵠ: jb.ΔⵠⲆΔᐃΔᐃ,
                Δⵠᐃᐃ: jb.ᐃⵠᐃⲆⵠᐃⲆ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Happy 2"
            }, {
                id: 11,
                ΔᐃⲆ: jb.ⲆⵠⵠΔᐃⵠⵠ,
                ⵠΔΔ: jb.ⵠΔᐃⵠⲆΔΔ,
                ΔΔΔⵠ: jb.ⲆᐃⵠΔⲆᐃΔ,
                Δⵠᐃᐃ: jb.ⲆᐃⵠΔⵠᐃΔ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Crazy"
            }, {
                id: 12,
                ΔᐃⲆ: jb.ⲆᐃⲆᐃⵠⲆⵠ,
                ⵠΔΔ: jb.ΔⵠⲆⵠⵠΔΔ,
                ΔΔΔⵠ: jb.ⵠⵠᐃⲆⵠⲆⵠ,
                Δⵠᐃᐃ: jb.ⲆᐃⲆΔⵠⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Happy 3"
            }, {
                id: 13,
                ΔᐃⲆ: jb.ᐃᐃⲆᐃΔⵠᐃ,
                ⵠΔΔ: jb.ΔᐃΔⲆⵠᐃᐃ,
                ΔΔΔⵠ: jb.ᐃᐃᐃⲆᐃⵠΔ,
                Δⵠᐃᐃ: jb.ᐃⲆⲆΔⵠᐃᐃ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Very Cute"
            }, {
                id: 14,
                ΔᐃⲆ: jb.ᐃΔᐃⲆᐃᐃⲆ,
                ⵠΔΔ: jb.ᐃⵠΔⵠΔᐃⲆ,
                ΔΔΔⵠ: jb.ᐃⲆᐃⲆΔΔⵠ,
                Δⵠᐃᐃ: jb.ⵠΔᐃΔᐃⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Curious"
            }, {
                id: 15,
                ΔᐃⲆ: jb.ⲆⲆΔⵠΔⵠᐃ,
                ⵠΔΔ: jb.ᐃᐃⲆᐃΔⲆⵠ,
                ΔΔΔⵠ: jb.ΔⲆΔᐃⵠΔⲆ,
                Δⵠᐃᐃ: jb.ⵠΔΔⲆⲆⵠᐃ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Bored 2"
            }, {
                id: 16,
                ΔᐃⲆ: jb.ΔᐃΔⵠΔᐃⲆ,
                ⵠΔΔ: jb.ⲆⵠⵠΔᐃᐃᐃ,
                ΔΔΔⵠ: jb.ᐃⵠᐃⲆⲆᐃⵠ,
                Δⵠᐃᐃ: jb.ᐃΔΔᐃⵠᐃⲆ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Happy 4"
            }, {
                id: 17,
                ΔᐃⲆ: jb.ⵠΔᐃᐃΔΔᐃ,
                ⵠΔΔ: jb.ⵠᐃⵠⵠᐃⲆⵠ,
                ΔΔΔⵠ: jb.ⲆⵠⵠΔΔⵠⵠ,
                Δⵠᐃᐃ: jb.ⲆⵠⵠⲆⵠⲆⲆ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Scar 2"
            }, {
                id: 18,
                ΔᐃⲆ: jb.ⵠⲆⵠⵠⵠⵠᐃ,
                ⵠΔΔ: jb.ⵠᐃΔⵠⲆᐃΔ,
                ΔΔΔⵠ: jb.ᐃᐃⵠⲆᐃⵠⵠ,
                Δⵠᐃᐃ: jb.ⲆᐃΔⵠᐃⲆⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Sick"
            }, {
                id: 19,
                ΔᐃⲆ: jb.ᐃⵠⵠⵠΔⲆᐃ,
                ⵠΔΔ: jb.ᐃⲆⲆᐃΔΔΔ,
                ΔΔΔⵠ: jb.ᐃⲆᐃⵠⵠⲆⲆ,
                Δⵠᐃᐃ: jb.ᐃΔΔΔⵠΔⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Somnambule"
            }, {
                id: 24,
                ΔᐃⲆ: jb.ⵠⵠᐃⵠΔⲆⵠ,
                ⵠΔΔ: jb.ᐃΔᐃΔᐃⲆⵠ,
                ΔΔΔⵠ: jb.ᐃⵠⲆⲆΔⲆⵠ,
                Δⵠᐃᐃ: jb.ⲆᐃᐃⲆⵠⲆⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Pixelbitie",
                name: "Feel Bad"
            }, {
                id: 23,
                ΔᐃⲆ: jb.ⵠⲆΔᐃΔⲆᐃ,
                ⵠΔΔ: jb.ⲆᐃᐃΔⵠΔⲆ,
                ΔΔΔⵠ: jb.ᐃΔᐃᐃΔΔΔ,
                Δⵠᐃᐃ: jb.ⵠᐃΔⵠⲆΔᐃ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Pixelbitie",
                name: "Mmmh."
            }, {
                id: 103,
                ΔᐃⲆ: jb.ᐃⵠⲆⲆⲆΔΔ,
                ⵠΔΔ: jb.ⵠᐃΔⵠΔᐃⲆ,
                ΔΔΔⵠ: jb.ᐃⵠᐃΔΔᐃᐃ,
                Δⵠᐃᐃ: jb.ⲆⲆⲆⲆΔΔΔ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Panic"
            }, {
                id: 105,
                ΔᐃⲆ: jb.ᐃⲆᐃᐃⵠⵠΔ,
                ⵠΔΔ: jb.ᐃⲆⲆⲆⲆⲆⵠ,
                ΔΔΔⵠ: jb.ΔⲆⲆΔᐃᐃⵠ,
                Δⵠᐃᐃ: jb.ΔᐃⵠⵠᐃΔⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Hypnotic"
            }, {
                id: 106,
                ΔᐃⲆ: jb.ᐃΔᐃΔⵠᐃⵠ,
                ⵠΔΔ: jb.ΔⲆⵠⲆⲆⵠⲆ,
                ΔΔΔⵠ: jb.ΔΔⲆᐃᐃᐃΔ,
                Δⵠᐃᐃ: jb.ΔᐃᐃⲆᐃᐃΔ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Stars in the eyes"
            }, {
                id: 220,
                ΔᐃⲆ: jb.ⵠⵠⲆᐃᐃΔᐃ,
                ⵠΔΔ: jb.ⵠᐃΔⵠⵠⲆⵠ,
                ΔΔΔⵠ: jb.ⲆΔᐃᐃΔᐃⵠ,
                Δⵠᐃᐃ: jb.ⲆⵠΔⵠᐃᐃⲆ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Seams"
            }, {
                id: 104,
                ΔᐃⲆ: jb.ⵠᐃⲆᐃᐃΔΔ,
                ⵠΔΔ: jb.ΔᐃⵠⲆΔⵠⵠ,
                ΔΔΔⵠ: jb.ⲆΔⵠⲆᐃⲆᐃ,
                Δⵠᐃᐃ: jb.ⲆⵠⵠΔⵠΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Scared at night"
            }, {
                id: 20,
                ΔᐃⲆ: jb.ᐃⵠᐃⵠⵠΔᐃ,
                ⵠΔΔ: jb.ⵠⵠᐃⵠΔⵠⵠ,
                ΔΔΔⵠ: jb.ᐃⵠΔⲆⲆⵠΔ,
                Δⵠᐃᐃ: jb.ⲆᐃⵠⲆΔᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Vampire"
            }, {
                id: 21,
                ΔᐃⲆ: jb.ⲆⲆᐃᐃΔᐃⲆ,
                ⵠΔΔ: jb.ΔⲆΔΔⲆⵠᐃ,
                ΔΔΔⵠ: jb.ΔⲆᐃⲆⵠⲆⵠ,
                Δⵠᐃᐃ: jb.ⲆᐃΔΔᐃᐃⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Zombie"
            }, {
                id: 22,
                ΔᐃⲆ: jb.ΔΔᐃΔⵠⲆᐃ,
                ⵠΔΔ: jb.ⲆᐃΔᐃᐃᐃⲆ,
                ΔΔΔⵠ: jb.ⵠΔΔΔⵠⵠⵠ,
                Δⵠᐃᐃ: jb.ⵠᐃⵠᐃᐃⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Pixelbitie",
                name: "Devaster"
            }, {
                id: 116,
                ΔᐃⲆ: jb.ΔᐃⲆⵠⲆⵠⵠ,
                ⵠΔΔ: jb.ΔⵠⲆⲆΔⲆⲆ,
                ΔΔΔⵠ: jb.ᐃⵠⵠᐃΔΔΔ,
                Δⵠᐃᐃ: jb.ⵠⲆⲆᐃⵠⲆᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Fukss",
                name: "Dead Devaster"
            }, {
                id: 27,
                ΔᐃⲆ: jb.ΔΔΔⵠᐃΔⵠ,
                ⵠΔΔ: jb.ⵠᐃⲆᐃⲆⲆΔ,
                ΔΔΔⵠ: jb.ⵠⵠᐃⲆⵠⵠⲆ,
                Δⵠᐃᐃ: jb.ⲆⲆⵠⲆΔⵠᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Winter",
                name: "Cactus"
            }, {
                id: 28,
                ΔᐃⲆ: jb.ᐃΔⵠⲆᐃⲆᐃ,
                ⵠΔΔ: jb.ⵠΔᐃΔⲆΔΔ,
                ΔΔΔⵠ: jb.ΔⲆⲆᐃΔΔⲆ,
                Δⵠᐃᐃ: jb.ᐃⵠⲆΔᐃⲆⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Bee"
            }, {
                id: 49,
                ΔᐃⲆ: jb.ⵠᐃⵠΔⵠⲆᐃ,
                ⵠΔΔ: jb.ⵠⵠⲆⵠᐃΔⵠ,
                ΔΔΔⵠ: jb.ΔΔⵠⲆᐃⵠⵠ,
                Δⵠᐃᐃ: jb.ᐃⲆⵠΔᐃΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Camo Skin"
            }, {
                id: 58,
                ΔᐃⲆ: jb.ⵠΔΔⵠᐃⵠΔ,
                ⵠΔΔ: jb.ⲆᐃⵠⲆΔΔᐃ,
                ΔΔΔⵠ: jb.ΔΔΔᐃⲆΔΔ,
                Δⵠᐃᐃ: jb.ΔⵠᐃᐃΔⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Blue Limax Skin"
            }, {
                id: 59,
                ΔᐃⲆ: jb.ⲆⵠΔⲆⲆⵠᐃ,
                ⵠΔΔ: jb.ΔⲆᐃⲆⵠΔⵠ,
                ΔΔΔⵠ: jb.ⲆᐃⲆΔᐃⵠᐃ,
                Δⵠᐃᐃ: jb.ⲆⲆⲆΔⲆᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Red Limax Skin"
            }, {
                id: 94,
                ΔᐃⲆ: jb.ⲆⲆΔⲆⵠⲆΔ,
                ⵠΔΔ: jb.ᐃᐃΔᐃΔᐃⲆ,
                ΔΔΔⵠ: jb.ⲆΔᐃⲆⵠΔⲆ,
                Δⵠᐃᐃ: jb.ᐃⵠΔⲆⲆΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Mr. Pumpkin"
            }, {
                id: 109,
                ΔᐃⲆ: jb.ⵠᐃⲆΔⲆᐃⲆ,
                ⵠΔΔ: jb.ⵠⵠⲆΔΔΔᐃ,
                ΔΔΔⵠ: jb.ⵠⲆⵠΔᐃⲆᐃ,
                Δⵠᐃᐃ: jb.ᐃⲆᐃΔⵠⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Wood"
            }, {
                id: 114,
                ΔᐃⲆ: jb.ⲆᐃᐃⲆⵠΔⵠ,
                ⵠΔΔ: jb.ᐃⵠⲆᐃⵠᐃⲆ,
                ΔΔΔⵠ: jb.ⵠⵠᐃΔᐃᐃΔ,
                Δⵠᐃᐃ: jb.ⵠΔⵠᐃⲆΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Zebra"
            }, {
                id: 120,
                ΔᐃⲆ: jb.ᐃΔⲆⲆᐃᐃΔ,
                ⵠΔΔ: jb.ΔᐃΔⵠᐃⲆΔ,
                ΔΔΔⵠ: jb.ⲆⵠⲆⲆᐃⲆᐃ,
                Δⵠᐃᐃ: jb.ᐃᐃᐃᐃΔⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "CrysTal",
                name: "Tiger"
            }, {
                id: 134,
                ΔᐃⲆ: jb.ⲆΔⲆⵠⲆᐃΔ,
                ⵠΔΔ: jb.ᐃⵠⲆᐃⲆᐃΔ,
                ΔΔΔⵠ: jb.ᐃⵠⵠⲆⵠᐃᐃ,
                Δⵠᐃᐃ: jb.ⵠⵠᐃᐃⲆᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Franchestcreator",
                name: "Day or Night"
            }, {
                id: 135,
                ΔᐃⲆ: jb.ᐃⵠΔΔⲆᐃΔ,
                ⵠΔΔ: jb.ⵠΔΔᐃⲆΔΔ,
                ΔΔΔⵠ: jb.ᐃⲆΔⲆΔⲆᐃ,
                Δⵠᐃᐃ: jb.ᐃⵠΔᐃᐃⲆⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Poinet",
                name: "Square Starver"
            }, {
                id: 136,
                ΔᐃⲆ: jb.ᐃⲆⵠΔⵠᐃⲆ,
                ⵠΔΔ: jb.ΔΔΔᐃⵠᐃΔ,
                ΔΔΔⵠ: jb.ⵠⲆⵠΔᐃΔⲆ,
                Δⵠᐃᐃ: jb.ᐃᐃⵠΔᐃΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Voodoo Doll"
            }, {
                id: 137,
                ΔᐃⲆ: jb.ᐃΔⵠⵠΔΔᐃ,
                ⵠΔΔ: jb.ΔᐃⲆΔⵠⲆⵠ,
                ΔΔΔⵠ: jb.ΔⲆΔᐃΔⵠⲆ,
                Δⵠᐃᐃ: jb.ⵠⲆΔΔⵠⵠᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Frankenstein"
            }, {
                id: 138,
                ΔᐃⲆ: jb.ΔᐃΔⲆΔⲆⵠ,
                ⵠΔΔ: jb.ⲆᐃΔⵠΔΔⵠ,
                ΔΔΔⵠ: jb.ⲆⵠⲆⲆΔΔΔ,
                Δⵠᐃᐃ: jb.ΔΔⲆⵠⵠΔΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Old Mummy"
            }, {
                id: 139,
                ΔᐃⲆ: jb.ⲆⲆΔᐃΔⲆⵠ,
                ⵠΔΔ: jb.ⲆⲆΔᐃⲆΔᐃ,
                ΔΔΔⵠ: jb.ΔΔΔⲆΔᐃΔ,
                Δⵠᐃᐃ: jb.ⲆⲆᐃΔᐃⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Werewolf"
            }, {
                id: 140,
                ΔᐃⲆ: jb.ᐃⲆΔⲆⵠᐃΔ,
                ⵠΔΔ: jb.ΔᐃⲆⵠⲆΔⲆ,
                ΔΔΔⵠ: jb.ⲆΔΔⵠᐃⲆᐃ,
                Δⵠᐃᐃ: jb.ΔᐃᐃΔΔⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Old Cthulhu"
            }, {
                id: 141,
                ΔᐃⲆ: jb.ᐃⲆΔΔΔᐃΔ,
                ⵠΔΔ: jb.ⲆⲆᐃⵠⵠⲆᐃ,
                ΔΔΔⵠ: jb.ⲆⲆⵠᐃⵠⲆᐃ,
                Δⵠᐃᐃ: jb.ⲆⲆⲆᐃⲆΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Sea Man"
            }, {
                id: 142,
                ΔᐃⲆ: jb.ⵠᐃⲆⵠⲆΔⲆ,
                ⵠΔΔ: jb.ΔᐃᐃᐃⲆᐃΔ,
                ΔΔΔⵠ: jb.ΔⵠⲆᐃⲆΔᐃ,
                Δⵠᐃᐃ: jb.ΔⵠⲆΔΔᐃⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Old Pumpkin"
            }, {
                id: 148,
                ΔᐃⲆ: jb.ⲆⵠΔⲆᐃⲆⵠ,
                ⵠΔΔ: jb.ⵠⵠⵠⵠΔΔᐃ,
                ΔΔΔⵠ: jb.ⵠΔΔⲆΔᐃⵠ,
                Δⵠᐃᐃ: jb.ⲆᐃΔΔᐃⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Old Snowman"
            }, {
                id: 149,
                ΔᐃⲆ: jb.ⵠΔⲆⵠⵠⵠⵠ,
                ⵠΔΔ: jb.ΔⲆⲆᐃᐃⲆⲆ,
                ΔΔΔⵠ: jb.ⲆⵠᐃΔᐃⲆⲆ,
                Δⵠᐃᐃ: jb.ⲆᐃΔⵠⲆⵠᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Old Christmas Tree Man"
            }, {
                id: 150,
                ΔᐃⲆ: jb.ΔⵠⵠⵠⵠⲆᐃ,
                ⵠΔΔ: jb.ΔⵠⵠⲆⲆⲆΔ,
                ΔΔΔⵠ: jb.ΔⲆᐃᐃΔⵠⲆ,
                Δⵠᐃᐃ: jb.ᐃᐃⵠⵠⵠΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Old Mrs Bell"
            }, {
                id: 151,
                ΔᐃⲆ: jb.ᐃⵠᐃⵠⲆΔᐃ,
                ⵠΔΔ: jb.ⵠⲆⵠⵠᐃΔⲆ,
                ΔΔΔⵠ: jb.ⵠᐃⵠᐃⵠᐃⵠ,
                Δⵠᐃᐃ: jb.ⲆⵠᐃⲆⵠⲆⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Old Elfy"
            }, {
                id: 152,
                ΔᐃⲆ: jb.ⵠΔᐃᐃΔᐃⵠ,
                ⵠΔΔ: jb.ⵠⲆᐃΔᐃⲆᐃ,
                ΔΔΔⵠ: jb.Δⵠⵠⵠᐃᐃᐃ,
                Δⵠᐃᐃ: jb.ⵠⵠⵠΔᐃⵠᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Old Mr Present"
            }, {
                id: 153,
                ΔᐃⲆ: jb.ΔᐃᐃΔᐃΔΔ,
                ⵠΔΔ: jb.ⲆⵠΔᐃⲆΔΔ,
                ΔΔΔⵠ: jb.ⵠⲆⲆⵠᐃΔⵠ,
                Δⵠᐃᐃ: jb.ᐃⲆⵠⵠᐃᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "My Dear Old Deer"
            }, {
                id: 154,
                ΔᐃⲆ: jb.ⵠΔⲆⵠⵠⵠⲆ,
                ⵠΔΔ: jb.ⲆᐃⲆⲆᐃⲆᐃ,
                ΔΔΔⵠ: jb.ⵠΔᐃᐃⵠΔᐃ,
                Δⵠᐃᐃ: jb.ᐃᐃⵠΔⵠⲆᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mr Angel"
            }, {
                id: 155,
                ΔᐃⲆ: jb.ⵠᐃᐃⲆⲆᐃⲆ,
                ⵠΔΔ: jb.ᐃⲆⲆⲆΔΔⲆ,
                ΔΔΔⵠ: jb.ΔⵠⲆⵠⲆⲆᐃ,
                Δⵠᐃᐃ: jb.ⲆⲆⵠⵠⲆᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mr Ice Cube"
            }, {
                id: 156,
                ΔᐃⲆ: jb.ⵠΔⲆᐃⲆⵠⲆ,
                ⵠΔΔ: jb.ⲆᐃⵠᐃⵠΔΔ,
                ΔΔΔⵠ: jb.ⵠⵠᐃⵠΔΔⵠ,
                Δⵠᐃᐃ: jb.ᐃΔⵠΔⲆⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mr Snowman"
            }, {
                id: 159,
                ΔᐃⲆ: jb.ΔⵠⵠᐃⵠΔΔ,
                ⵠΔΔ: jb.ⲆᐃᐃⲆΔᐃⵠ,
                ΔΔΔⵠ: jb.ⲆⵠᐃⵠⵠⲆᐃ,
                Δⵠᐃᐃ: jb.ⲆⲆΔⲆΔΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "CrysTal",
                name: "Crystal Sky Skin"
            }, {
                id: 167,
                ΔᐃⲆ: jb.ⵠΔⵠΔⵠΔⲆ,
                ⵠΔΔ: jb.ᐃᐃᐃⲆΔΔⲆ,
                ΔΔΔⵠ: jb.ΔΔΔᐃⲆⵠⵠ,
                Δⵠᐃᐃ: jb.ⵠΔᐃᐃⵠⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Franchestcreator",
                name: "Radioactive Starver"
            }, {
                id: 169,
                ΔᐃⲆ: jb.ᐃᐃⲆᐃᐃᐃⲆ,
                ⵠΔΔ: jb.ⵠᐃⵠⵠΔⵠⵠ,
                ΔΔΔⵠ: jb.ⵠⲆⲆⲆᐃⵠⲆ,
                Δⵠᐃᐃ: jb.ⲆΔⵠΔΔⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "TheScaryBlaze",
                name: "Eaten Cookie"
            }, {
                id: 170,
                ΔᐃⲆ: jb.ⲆᐃⵠⵠⲆᐃΔ,
                ⵠΔΔ: jb.ⵠᐃᐃᐃΔΔΔ,
                ΔΔΔⵠ: jb.ΔΔⵠᐃΔᐃⲆ,
                Δⵠᐃᐃ: jb.ᐃⲆⲆⵠⵠΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "aloner",
                name: "Blob Thing"
            }, {
                id: 172,
                ΔᐃⲆ: jb.ΔΔⵠᐃⲆⵠΔ,
                ⵠΔΔ: jb.ⵠⵠⲆⲆΔⲆᐃ,
                ΔΔΔⵠ: jb.ᐃᐃΔⵠΔᐃᐃ,
                Δⵠᐃᐃ: jb.ⵠⲆᐃᐃⵠⲆᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "aloner",
                name: "Machine Mask"
            }, {
                id: 184,
                ΔᐃⲆ: jb.ⲆⲆᐃᐃⵠⵠⲆ,
                ⵠΔΔ: jb.ᐃᐃΔᐃⵠⲆⵠ,
                ΔΔΔⵠ: jb.ⵠᐃΔᐃⵠⵠᐃ,
                Δⵠᐃᐃ: jb.ᐃΔΔᐃΔΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mad"
            }, {
                id: 206,
                ΔᐃⲆ: jb.ΔΔᐃΔⵠᐃⲆ,
                ⵠΔΔ: jb.ᐃᐃⲆᐃᐃⵠΔ,
                ΔΔΔⵠ: jb.ⵠⵠⵠⲆᐃᐃΔ,
                Δⵠᐃᐃ: jb.ⲆᐃΔⵠⲆᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Survivor"
            }, {
                id: 209,
                ΔᐃⲆ: jb.ΔⲆΔⵠΔⲆⵠ,
                ⵠΔΔ: jb.ⲆΔᐃⵠⲆΔⵠ,
                ΔΔΔⵠ: jb.ⲆΔⵠⲆⵠⵠΔ,
                Δⵠᐃᐃ: jb.ⲆᐃΔⲆⲆⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Starverator"
            }, {
                id: 230,
                ΔᐃⲆ: jb.ⲆⲆⵠΔⲆᐃⲆ,
                ⵠΔΔ: jb.ᐃⵠᐃᐃΔΔᐃ,
                ΔΔΔⵠ: jb.ⲆΔᐃΔⲆⵠᐃ,
                Δⵠᐃᐃ: jb.ⵠΔᐃᐃΔΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Totem"
            }, {
                id: 231,
                ΔᐃⲆ: jb.ⵠΔΔⲆⲆΔⲆ,
                ⵠΔΔ: jb.ᐃᐃⵠᐃⵠⲆᐃ,
                ΔΔΔⵠ: jb.ᐃⲆⲆⵠᐃⲆⵠ,
                Δⵠᐃᐃ: jb.ᐃⵠΔΔᐃⲆⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Big Pile of Sand"
            }, {
                id: 232,
                ΔᐃⲆ: jb.ⲆᐃΔⲆΔⲆΔ,
                ⵠΔΔ: jb.ΔⲆⲆⵠᐃⲆΔ,
                ΔΔΔⵠ: jb.ⲆΔᐃⲆᐃΔᐃ,
                Δⵠᐃᐃ: jb.ᐃΔᐃⵠⵠⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Big Pile of Dirt"
            }, {
                id: 235,
                ΔᐃⲆ: jb.ΔΔⵠΔⵠⲆⵠ,
                ⵠΔΔ: jb.ᐃⲆᐃⵠᐃⵠΔ,
                ΔΔΔⵠ: jb.ᐃΔⲆⵠⵠΔΔ,
                Δⵠᐃᐃ: jb.ᐃΔⲆΔΔⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Sandstone"
            }, {
                id: 29,
                ΔᐃⲆ: jb.ⲆᐃΔⲆⵠⲆⵠ,
                ⵠΔΔ: jb.ⲆᐃΔΔΔⲆⲆ,
                ΔΔΔⵠ: jb.ᐃΔⲆⵠΔΔⲆ,
                Δⵠᐃᐃ: jb.ΔⵠⲆᐃⵠⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Pixelbitie",
                name: "Lollipop 1"
            }, {
                id: 30,
                ΔᐃⲆ: jb.ⲆⵠⵠᐃΔⵠΔ,
                ⵠΔΔ: jb.ⵠⵠⵠΔᐃⲆΔ,
                ΔΔΔⵠ: jb.ⵠᐃⲆᐃⲆⵠΔ,
                Δⵠᐃᐃ: jb.ᐃⲆⲆᐃⵠᐃⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Lollipop 2"
            }, {
                id: 31,
                ΔᐃⲆ: jb.ⲆᐃⲆⵠⵠΔⵠ,
                ⵠΔΔ: jb.ᐃΔΔⵠΔⵠᐃ,
                ΔΔΔⵠ: jb.ᐃᐃΔⲆⵠⲆᐃ,
                Δⵠᐃᐃ: jb.ᐃᐃᐃΔᐃⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Lollipop 3"
            }, {
                id: 32,
                ΔᐃⲆ: jb.ⵠᐃΔᐃⵠⵠΔ,
                ⵠΔΔ: jb.ⲆΔᐃⵠᐃⲆΔ,
                ΔΔΔⵠ: jb.ⲆⵠⲆⲆⵠⲆΔ,
                Δⵠᐃᐃ: jb.ⵠⵠΔⵠΔⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Lollipop 4"
            }, {
                id: 33,
                ΔᐃⲆ: jb.ⲆΔΔΔⲆⲆⵠ,
                ⵠΔΔ: jb.ΔⵠᐃΔΔΔⲆ,
                ΔΔΔⵠ: jb.ΔΔΔⲆΔⵠⵠ,
                Δⵠᐃᐃ: jb.ⲆᐃΔⵠⵠᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Sushui",
                name: "Yellow Bird"
            }, {
                id: 34,
                ΔᐃⲆ: jb.ᐃⵠΔᐃᐃⲆᐃ,
                ⵠΔΔ: jb.ⵠⲆⵠΔᐃᐃⲆ,
                ΔΔΔⵠ: jb.ΔΔᐃᐃᐃΔⲆ,
                Δⵠᐃᐃ: jb.ⲆⵠⵠᐃⲆΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Sushui",
                name: "Red Bird"
            }, {
                id: 35,
                ΔᐃⲆ: jb.ⲆⵠⵠⵠⲆΔⲆ,
                ⵠΔΔ: jb.ᐃⲆⵠᐃΔⵠⲆ,
                ΔΔΔⵠ: jb.ⵠⲆⵠⲆⲆⵠⲆ,
                Δⵠᐃᐃ: jb.ⵠⲆⲆᐃᐃⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Sushui",
                name: "Blue Bird"
            }, {
                id: 37,
                ΔᐃⲆ: jb.ΔᐃΔΔⵠⵠⲆ,
                ⵠΔΔ: jb.ΔⵠΔΔᐃΔⲆ,
                ΔΔΔⵠ: jb.ᐃᐃⵠⲆΔⵠⵠ,
                Δⵠᐃᐃ: jb.ΔᐃⲆⵠᐃΔΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Winter",
                name: "Owl"
            }, {
                id: 52,
                ΔᐃⲆ: jb.ⵠᐃΔᐃΔⵠⵠ,
                ⵠΔΔ: jb.ⲆⵠⵠⲆⵠΔⵠ,
                ΔΔΔⵠ: jb.ᐃⵠᐃᐃⵠⲆⵠ,
                Δⵠᐃᐃ: jb.ΔΔⵠⵠᐃᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Nemo"
            }, {
                id: 53,
                ΔᐃⲆ: jb.ΔⲆⵠⲆΔᐃⲆ,
                ⵠΔΔ: jb.ⵠᐃᐃⵠᐃΔΔ,
                ΔΔΔⵠ: jb.ⲆᐃᐃᐃⵠⲆⵠ,
                Δⵠᐃᐃ: jb.ᐃⲆᐃᐃΔΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mr. Bread"
            }, {
                id: 74,
                ΔᐃⲆ: jb.ᐃΔᐃⲆᐃᐃΔ,
                ⵠΔΔ: jb.ⲆⲆⵠᐃᐃⵠⲆ,
                ΔΔΔⵠ: jb.ⵠᐃⵠᐃⲆⲆᐃ,
                Δⵠᐃᐃ: jb.ᐃᐃⲆⵠΔΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Communist & Taco4Life",
                name: "Mr. Bread 2"
            }, {
                id: 75,
                ΔᐃⲆ: jb.ⵠᐃⵠᐃⵠᐃⲆ,
                ⵠΔΔ: jb.ⲆᐃΔⵠᐃΔⲆ,
                ΔΔΔⵠ: jb.ᐃΔᐃΔⵠⲆⵠ,
                Δⵠᐃᐃ: jb.ΔⵠⵠᐃⵠⲆⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Communist & Taco4Life",
                name: "Mr. Bread 3"
            }, {
                id: 60,
                ΔᐃⲆ: jb.ᐃΔⲆⲆᐃΔⲆ,
                ⵠΔΔ: jb.ⵠΔᐃᐃᐃᐃⵠ,
                ΔΔΔⵠ: jb.ΔᐃⲆᐃΔⵠⵠ,
                Δⵠᐃᐃ: jb.ΔΔⵠᐃⵠᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Red Berry"
            }, {
                id: 61,
                ΔᐃⲆ: jb.ΔⵠᐃᐃΔᐃⵠ,
                ⵠΔΔ: jb.ⵠΔⵠᐃⲆⵠⵠ,
                ΔΔΔⵠ: jb.ΔⵠⲆⲆⲆⵠᐃ,
                Δⵠᐃᐃ: jb.ⲆΔⲆⲆⲆⲆⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Old Berry"
            }, {
                id: 70,
                ΔᐃⲆ: jb.ᐃᐃⲆⵠⵠⲆⵠ,
                ⵠΔΔ: jb.ΔⲆⲆᐃⵠᐃⲆ,
                ΔΔΔⵠ: jb.ᐃⵠᐃⵠΔᐃⲆ,
                Δⵠᐃᐃ: jb.ⲆⵠⲆⲆⵠΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Cake"
            }, {
                id: 71,
                ΔᐃⲆ: jb.ᐃᐃⵠΔⲆΔΔ,
                ⵠΔΔ: jb.ⵠⵠⵠⲆᐃⵠᐃ,
                ΔΔΔⵠ: jb.ΔΔᐃΔᐃⵠⲆ,
                Δⵠᐃᐃ: jb.ⲆᐃᐃⵠᐃΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Christmas Cake"
            }, {
                id: 77,
                ΔᐃⲆ: jb.ⲆⲆⵠᐃⲆΔⲆ,
                ⵠΔΔ: jb.ⲆⲆΔⵠⵠⵠΔ,
                ΔΔΔⵠ: jb.ⲆᐃᐃⲆⲆⵠⲆ,
                Δⵠᐃᐃ: jb.ⲆΔᐃⵠⵠᐃⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Pancakez",
                name: "Mr. Pancake"
            }, {
                id: 87,
                ΔᐃⲆ: jb.ΔⵠΔᐃⲆⵠᐃ,
                ⵠΔΔ: jb.ⵠⲆⲆⵠⵠⲆⲆ,
                ΔΔΔⵠ: jb.ᐃᐃΔΔᐃⲆⵠ,
                Δⵠᐃᐃ: jb.ΔⵠⵠⲆᐃⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Mr. Taco"
            }, {
                id: 78,
                ΔᐃⲆ: jb.ᐃΔΔᐃᐃᐃⲆ,
                ⵠΔΔ: jb.ᐃᐃⵠⲆⵠⲆⲆ,
                ΔΔΔⵠ: jb.ⲆΔⵠᐃΔΔⵠ,
                Δⵠᐃᐃ: jb.ᐃᐃᐃΔᐃⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Mr. Bottle"
            }, {
                id: 79,
                ΔᐃⲆ: jb.ΔⵠⵠⲆᐃᐃⵠ,
                ⵠΔΔ: jb.ⲆⵠᐃⵠⵠᐃⲆ,
                ΔΔΔⵠ: jb.ⵠⲆΔⵠⲆΔᐃ,
                Δⵠᐃᐃ: jb.ΔⵠⲆⵠᐃᐃⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Mr. Bottle 2"
            }, {
                id: 97,
                ΔᐃⲆ: jb.ⵠⵠᐃᐃΔⲆⲆ,
                ⵠΔΔ: jb.ΔᐃⲆⲆⲆⵠΔ,
                ΔΔΔⵠ: jb.ⲆⵠᐃᐃⲆΔⲆ,
                Δⵠᐃᐃ: jb.ΔΔⵠⵠΔⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Pink Rabbit"
            }, {
                id: 102,
                ΔᐃⲆ: jb.ⲆⵠⲆⵠⵠⵠⵠ,
                ⵠΔΔ: jb.ᐃᐃᐃⵠΔΔⵠ,
                ΔΔΔⵠ: jb.ⲆΔⲆΔΔⲆⵠ,
                Δⵠᐃᐃ: jb.ⵠⵠⲆⵠΔⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Marshmallow"
            }, {
                id: 107,
                ΔᐃⲆ: jb.ᐃᐃⲆΔⲆⵠⵠ,
                ⵠΔΔ: jb.ΔᐃⲆⵠᐃⵠⲆ,
                ΔΔΔⵠ: jb.ΔⵠΔΔⵠⲆⵠ,
                Δⵠᐃᐃ: jb.ⵠⵠⵠΔⵠⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Fox"
            }, {
                id: 132,
                ΔᐃⲆ: jb.ᐃΔΔⲆΔⲆΔ,
                ⵠΔΔ: jb.ᐃⲆⲆΔΔᐃⵠ,
                ΔΔΔⵠ: jb.ᐃⲆΔΔⲆΔᐃ,
                Δⵠᐃᐃ: jb.ⵠΔⲆⵠΔΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Raccoon"
            }, {
                id: 111,
                ΔᐃⲆ: jb.ⵠΔⵠᐃΔⵠΔ,
                ⵠΔΔ: jb.ⲆᐃᐃⵠⵠⲆΔ,
                ΔΔΔⵠ: jb.ᐃⲆⵠⵠᐃⵠΔ,
                Δⵠᐃᐃ: jb.ᐃΔⲆⲆⵠΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Cloud"
            }, {
                id: 113,
                ΔᐃⲆ: jb.ᐃᐃΔⲆⲆᐃⵠ,
                ⵠΔΔ: jb.ⵠⵠⲆᐃΔᐃΔ,
                ΔΔΔⵠ: jb.ⵠᐃⲆⲆΔᐃⲆ,
                Δⵠᐃᐃ: jb.ᐃᐃᐃΔⵠΔΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Moon"
            }, {
                id: 117,
                ΔᐃⲆ: jb.ⵠᐃΔⲆⵠᐃᐃ,
                ⵠΔΔ: jb.ᐃΔⲆⵠⲆΔΔ,
                ΔΔΔⵠ: jb.ΔΔᐃⲆⵠᐃᐃ,
                Δⵠᐃᐃ: jb.ⲆⲆⵠⲆᐃⲆⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Mr. Panda"
            }, {
                id: 118,
                ΔᐃⲆ: jb.ⲆⵠⵠⵠΔⵠᐃ,
                ⵠΔΔ: jb.ⵠⵠᐃⲆᐃⵠⲆ,
                ΔΔΔⵠ: jb.ΔΔᐃᐃΔⲆᐃ,
                Δⵠᐃᐃ: jb.ᐃⲆΔⵠⲆᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Mr. Strawberry"
            }, {
                id: 119,
                ΔᐃⲆ: jb.ⲆΔⲆΔΔⵠⵠ,
                ⵠΔΔ: jb.ⵠΔⵠⲆᐃⵠΔ,
                ΔΔΔⵠ: jb.ⲆⲆᐃᐃⲆΔⲆ,
                Δⵠᐃᐃ: jb.ΔⵠⵠⲆⵠΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito & Sushuui",
                name: "Mummy"
            }, {
                id: 122,
                ΔᐃⲆ: jb.ⵠⵠᐃΔᐃⵠⵠ,
                ⵠΔΔ: jb.ΔᐃᐃⵠᐃⵠⲆ,
                ΔΔΔⵠ: jb.ⲆᐃⲆⲆᐃⲆⲆ,
                Δⵠᐃᐃ: jb.ⲆⵠᐃΔᐃⲆᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Dino"
            }, {
                id: 127,
                ΔᐃⲆ: jb.ⵠΔⵠᐃᐃⵠΔ,
                ⵠΔΔ: jb.ΔⲆᐃⵠⲆⲆⲆ,
                ΔΔΔⵠ: jb.ⵠⲆⲆΔΔΔⵠ,
                Δⵠᐃᐃ: jb.ᐃΔⵠⲆᐃΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "MADBalgouthi",
                name: "Mr. Koala"
            }, {
                id: 160,
                ΔᐃⲆ: jb.ⵠⲆⲆΔⵠⵠⲆ,
                ⵠΔΔ: jb.ⵠΔⲆΔⲆⲆⲆ,
                ΔΔΔⵠ: jb.ΔⲆⵠⲆⵠΔΔ,
                Δⵠᐃᐃ: jb.ΔΔΔΔⲆⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Bottle Protection"
            }, {
                id: 162,
                ΔᐃⲆ: jb.ᐃΔᐃⲆⲆⲆᐃ,
                ⵠΔΔ: jb.ⲆΔⵠΔᐃⲆΔ,
                ΔΔΔⵠ: jb.ᐃᐃΔⵠⲆΔⵠ,
                Δⵠᐃᐃ: jb.ⲆΔⵠⵠᐃⲆⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "CrysTal",
                name: "Leaf Man"
            }, {
                id: 166,
                ΔᐃⲆ: jb.ⲆⲆⲆΔⵠᐃΔ,
                ⵠΔΔ: jb.ⲆⲆᐃⲆᐃⲆΔ,
                ΔΔΔⵠ: jb.ⲆΔⲆΔⲆᐃᐃ,
                Δⵠᐃᐃ: jb.ᐃᐃⲆⲆⵠΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Bubble"
            }, {
                id: 174,
                ΔᐃⲆ: jb.ΔⵠᐃᐃᐃⲆᐃ,
                ⵠΔΔ: jb.ⵠⵠⲆⲆⲆⲆᐃ,
                ΔΔΔⵠ: jb.ⵠᐃⵠΔⵠᐃⵠ,
                Δⵠᐃᐃ: jb.ⵠⵠⲆᐃΔΔΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "upfiz",
                name: "Potato"
            }, {
                id: 171,
                ΔᐃⲆ: jb.ΔⵠΔΔⲆᐃⲆ,
                ⵠΔΔ: jb.ᐃⵠⲆΔⵠⵠⲆ,
                ΔΔΔⵠ: jb.ⲆᐃⲆⵠⲆᐃⵠ,
                Δⵠᐃᐃ: jb.ⲆΔⲆⵠⲆᐃⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "aloner",
                name: "Axolotl"
            }, {
                id: 178,
                ΔᐃⲆ: jb.ⵠⲆΔΔⵠⲆⲆ,
                ⵠΔΔ: jb.ⲆⵠⲆᐃᐃΔΔ,
                ΔΔΔⵠ: jb.ᐃΔⵠΔΔⵠⵠ,
                Δⵠᐃᐃ: jb.ΔⵠⵠⵠⵠⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Rusted Machine"
            }, {
                id: 179,
                ΔᐃⲆ: jb.ⵠᐃⲆΔᐃⵠΔ,
                ⵠΔΔ: jb.ΔⲆᐃᐃⵠⲆⵠ,
                ΔΔΔⵠ: jb.ⲆΔᐃΔⵠΔⲆ,
                Δⵠᐃᐃ: jb.ΔⲆⲆᐃⵠⲆⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Starving Machine"
            }, {
                id: 181,
                ΔᐃⲆ: jb.ⵠᐃⲆᐃⲆΔΔ,
                ⵠΔΔ: jb.ⵠⲆΔⲆΔΔⲆ,
                ΔΔΔⵠ: jb.ΔᐃΔΔΔᐃΔ,
                Δⵠᐃᐃ: jb.ⵠⲆᐃⵠᐃⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Night Stars"
            }, {
                id: 191,
                ΔᐃⲆ: jb.ⲆⵠᐃΔΔᐃⲆ,
                ⵠΔΔ: jb.ⵠⵠⲆⵠᐃⵠΔ,
                ΔΔΔⵠ: jb.ᐃΔΔᐃⵠⲆΔ,
                Δⵠᐃᐃ: jb.ⵠΔΔᐃⵠᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Blue Jay"
            }, {
                id: 198,
                ΔᐃⲆ: jb.ᐃⲆᐃΔᐃΔᐃ,
                ⵠΔΔ: jb.ⵠⲆΔⲆⵠᐃⵠ,
                ΔΔΔⵠ: jb.ΔΔⵠⵠⲆᐃᐃ,
                Δⵠᐃᐃ: jb.ⲆΔⲆΔᐃΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "AWTP",
                name: "Dave"
            }, {
                id: 200,
                ΔᐃⲆ: jb.ⵠᐃΔⲆΔⲆᐃ,
                ⵠΔΔ: jb.ⲆⵠⲆⵠⲆⲆᐃ,
                ΔΔΔⵠ: jb.ⵠⲆⲆᐃΔⵠⲆ,
                Δⵠᐃᐃ: jb.ⵠᐃⵠΔⵠⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Jinty",
                name: "Smug"
            }, {
                id: 203,
                ΔᐃⲆ: jb.ⲆⲆΔⵠΔⵠΔ,
                ⵠΔΔ: jb.ΔΔⲆⵠᐃⵠᐃ,
                ΔΔΔⵠ: jb.ᐃΔⲆΔⵠⵠⵠ,
                Δⵠᐃᐃ: jb.ⵠΔⵠΔᐃᐃⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Reclaimed"
            }, {
                id: 204,
                ΔᐃⲆ: jb.ⵠᐃⲆᐃⵠⲆᐃ,
                ⵠΔΔ: jb.ⵠⵠΔⲆᐃᐃΔ,
                ΔΔΔⵠ: jb.ⵠⲆΔⲆΔΔΔ,
                Δⵠᐃᐃ: jb.ⵠⵠΔᐃΔⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Legacy Wolf"
            }, {
                id: 211,
                ΔᐃⲆ: jb.ⲆᐃⵠⵠⵠⲆⵠ,
                ⵠΔΔ: jb.ΔⵠΔΔᐃⵠⵠ,
                ΔΔΔⵠ: jb.ΔⵠⵠᐃᐃⲆⵠ,
                Δⵠᐃᐃ: jb.ⲆⲆⲆΔΔΔΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Starver of the Seas"
            }, {
                id: 213,
                ΔᐃⲆ: jb.ⵠⲆΔⲆΔⵠΔ,
                ⵠΔΔ: jb.ⲆΔΔⵠΔᐃᐃ,
                ΔΔΔⵠ: jb.ΔΔⵠⲆⵠⵠⲆ,
                Δⵠᐃᐃ: jb.ΔⲆⲆᐃᐃᐃⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Ice"
            }, {
                id: 219,
                ΔᐃⲆ: jb.ᐃⲆᐃⲆᐃⵠⵠ,
                ⵠΔΔ: jb.ᐃΔⲆΔⵠΔᐃ,
                ΔΔΔⵠ: jb.ⵠⲆΔᐃⲆΔⵠ,
                Δⵠᐃᐃ: jb.ᐃⲆΔⵠⵠᐃⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Ramil",
                name: "Sandwich Cookie"
            }, {
                id: 221,
                ΔᐃⲆ: jb.ⲆⲆΔⵠⵠⵠⲆ,
                ⵠΔΔ: jb.ⲆⲆⲆΔΔⲆⲆ,
                ΔΔΔⵠ: jb.ΔⵠᐃⲆⲆⵠⵠ,
                Δⵠᐃᐃ: jb.ⵠⲆᐃⲆᐃΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Purple Geode"
            }, {
                id: 222,
                ΔᐃⲆ: jb.ⵠΔⵠⲆᐃⵠⵠ,
                ⵠΔΔ: jb.ᐃᐃΔⵠΔΔΔ,
                ΔΔΔⵠ: jb.ⲆⲆⲆⵠᐃᐃⵠ,
                Δⵠᐃᐃ: jb.ⵠⵠⵠᐃⲆⵠᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Cyan Geode"
            }, {
                id: 223,
                ΔᐃⲆ: jb.ΔΔᐃΔⲆΔᐃ,
                ⵠΔΔ: jb.ⵠΔⵠⲆΔΔⵠ,
                ΔΔΔⵠ: jb.ᐃᐃⲆΔΔⵠⵠ,
                Δⵠᐃᐃ: jb.ⵠᐃΔⵠΔⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Yellow Geode"
            }, {
                id: 228,
                ΔᐃⲆ: jb.ᐃΔΔᐃⲆⲆᐃ,
                ⵠΔΔ: jb.ⲆᐃᐃᐃⲆⵠⵠ,
                ΔΔΔⵠ: jb.ⲆΔΔΔΔΔᐃ,
                Δⵠᐃᐃ: jb.ⲆΔᐃΔΔΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Furnace Head"
            }, {
                id: 229,
                ΔᐃⲆ: jb.ⵠΔᐃⲆΔⲆᐃ,
                ⵠΔΔ: jb.ⲆΔᐃᐃΔⵠⲆ,
                ΔΔΔⵠ: jb.ΔⵠⲆᐃᐃᐃΔ,
                Δⵠᐃᐃ: jb.ⵠⲆΔⵠᐃᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Bag"
            }, {
                id: 227,
                ΔᐃⲆ: jb.ᐃⵠᐃᐃⵠⲆΔ,
                ⵠΔΔ: jb.ᐃΔᐃⲆⵠΔⲆ,
                ΔΔΔⵠ: jb.ⵠⲆⲆⲆΔⵠⲆ,
                Δⵠᐃᐃ: jb.ⲆⲆⲆᐃΔΔΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Lit Furnace Head"
            }, {
                id: 25,
                ΔᐃⲆ: jb.ⲆᐃⲆΔΔⵠᐃ,
                ⵠΔΔ: jb.ⵠⵠⵠⲆⲆΔᐃ,
                ΔΔΔⵠ: jb.ΔᐃᐃⵠᐃΔΔ,
                Δⵠᐃᐃ: jb.ⵠᐃΔⵠⲆΔᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Pixelbitie",
                name: "Test Dummy"
            }, {
                id: 41,
                ΔᐃⲆ: jb.ΔⲆⵠᐃᐃΔᐃ,
                ⵠΔΔ: jb.ⲆⲆᐃⵠⵠⵠⲆ,
                ΔΔΔⵠ: jb.ΔᐃⲆᐃⲆΔᐃ,
                Δⵠᐃᐃ: jb.ΔⵠⵠΔⲆᐃᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Star-ver"
            }, {
                id: 43,
                ΔᐃⲆ: jb.ⲆⲆΔΔⵠⲆᐃ,
                ⵠΔΔ: jb.ΔⲆᐃⵠⲆᐃΔ,
                ΔΔΔⵠ: jb.ΔᐃΔΔⲆⲆⲆ,
                Δⵠᐃᐃ: jb.ⵠⲆⵠⵠΔⵠᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Communist",
                name: "Starver Chest"
            }, {
                id: 88,
                ΔᐃⲆ: jb.ⵠᐃⲆᐃᐃᐃⲆ,
                ⵠΔΔ: jb.ⲆᐃᐃⵠⲆΔⵠ,
                ΔΔΔⵠ: jb.ⲆⵠᐃⵠΔⵠⵠ,
                Δⵠᐃᐃ: jb.ⵠΔⵠΔᐃᐃΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Communist",
                name: "Starver Workbench"
            }, {
                id: 121,
                ΔᐃⲆ: jb.ⲆⵠΔᐃΔΔⲆ,
                ⵠΔΔ: jb.ⲆⲆᐃⲆᐃᐃⵠ,
                ΔΔΔⵠ: jb.ΔᐃⲆᐃᐃᐃᐃ,
                Δⵠᐃᐃ: jb.ΔΔΔⵠΔⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "MADBalgouthi",
                name: "Fish"
            }, {
                id: 39,
                ΔᐃⲆ: jb.ᐃᐃⲆᐃⵠⲆⲆ,
                ⵠΔΔ: jb.ⲆΔⵠᐃⵠΔΔ,
                ΔΔΔⵠ: jb.ⵠᐃⵠⲆᐃⲆΔ,
                Δⵠᐃᐃ: jb.ΔⵠⲆΔΔΔΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Negligent4Dia",
                name: "Crab"
            }, {
                id: 40,
                ΔᐃⲆ: jb.ΔᐃᐃΔⵠⵠᐃ,
                ⵠΔΔ: jb.ᐃⵠΔᐃⵠⲆⲆ,
                ΔΔΔⵠ: jb.ᐃΔΔᐃΔⲆΔ,
                Δⵠᐃᐃ: jb.ΔᐃᐃΔⵠΔΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Negligent4Dia",
                name: "Piranha"
            }, {
                id: 36,
                ΔᐃⲆ: jb.ᐃⵠᐃΔⲆᐃΔ,
                ⵠΔΔ: jb.ᐃⵠⵠⵠⵠⵠⵠ,
                ΔΔΔⵠ: jb.ΔⲆΔⲆᐃΔΔ,
                Δⵠᐃᐃ: jb.ⵠⲆⵠⵠᐃⵠᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Winter Fox"
            }, {
                id: 69,
                ΔᐃⲆ: jb.ⲆΔΔⵠⲆⲆⲆ,
                ⵠΔΔ: jb.ⵠⲆⲆᐃᐃⲆⵠ,
                ΔΔΔⵠ: jb.ᐃᐃᐃⵠⲆᐃΔ,
                Δⵠᐃᐃ: jb.ΔᐃᐃᐃⲆΔⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Zed",
                name: "Baby Foxy"
            }, {
                id: 51,
                ΔᐃⲆ: jb.ΔᐃⵠΔΔⲆⲆ,
                ⵠΔΔ: jb.ΔⲆᐃᐃΔⵠⵠ,
                ΔΔΔⵠ: jb.ΔᐃΔⵠⵠⵠⵠ,
                Δⵠᐃᐃ: jb.ⵠⲆⲆᐃΔⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "HOWI",
                name: "Winter Bear"
            }, {
                id: 133,
                ΔᐃⲆ: jb.ΔⵠΔⵠᐃΔⲆ,
                ⵠΔΔ: jb.ⲆᐃⲆΔᐃᐃᐃ,
                ΔΔΔⵠ: jb.ΔⲆⲆⵠⲆΔⵠ,
                Δⵠᐃᐃ: jb.ⲆⲆⵠΔⵠᐃⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Hawk"
            }, {
                id: 55,
                ΔᐃⲆ: jb.ᐃⲆⲆΔΔⵠΔ,
                ⵠΔΔ: jb.ⲆⲆᐃⲆᐃⵠᐃ,
                ΔΔΔⵠ: jb.ΔⲆⵠΔᐃᐃⲆ,
                Δⵠᐃᐃ: jb.Δⵠᐃᐃᐃⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Nice Little Yuki"
            }, {
                id: 68,
                ΔᐃⲆ: jb.ΔⵠΔᐃΔᐃΔ,
                ⵠΔΔ: jb.ⲆⵠⲆⵠⲆⲆⲆ,
                ΔΔΔⵠ: jb.ΔⵠⲆⲆⲆⲆⲆ,
                Δⵠᐃᐃ: jb.ᐃⲆⵠⲆⵠΔᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Baby Yuki"
            }, {
                id: 62,
                ΔᐃⲆ: jb.ΔΔΔᐃⵠⵠΔ,
                ⵠΔΔ: jb.ⵠⵠⲆⵠΔΔⵠ,
                ΔΔΔⵠ: jb.ᐃⵠᐃᐃⲆΔᐃ,
                Δⵠᐃᐃ: jb.ⲆⵠΔⲆΔᐃΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mr. Carrot"
            }, {
                id: 56,
                ΔᐃⲆ: jb.ⵠⲆⵠᐃⵠΔⲆ,
                ⵠΔΔ: jb.ⲆⲆΔⲆΔⵠⵠ,
                ΔΔΔⵠ: jb.ⲆᐃᐃᐃᐃⲆΔ,
                Δⵠᐃᐃ: jb.ⵠⲆᐃᐃⵠⲆⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Bat Limax"
            }, {
                id: 72,
                ΔᐃⲆ: jb.ⲆⵠᐃΔΔΔΔ,
                ⵠΔΔ: jb.ᐃᐃⲆᐃⵠⵠⵠ,
                ΔΔΔⵠ: jb.ᐃⲆΔᐃΔⵠᐃ,
                Δⵠᐃᐃ: jb.ΔⲆⲆΔⵠⵠⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Mr. Crate"
            }, {
                id: 73,
                ΔᐃⲆ: jb.ΔⵠΔᐃΔᐃⵠ,
                ⵠΔΔ: jb.Ⲇᐃᐃᐃⵠᐃⵠ,
                ΔΔΔⵠ: jb.ⲆΔⵠⲆⲆᐃⲆ,
                Δⵠᐃᐃ: jb.ⵠⲆⵠⵠΔⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Taco4Life & eogito",
                name: "Mr. Spider"
            }, {
                id: 93,
                ΔᐃⲆ: jb.ⵠᐃⵠⲆᐃⲆⲆ,
                ⵠΔΔ: jb.ⵠΔΔᐃⲆᐃᐃ,
                ΔΔΔⵠ: jb.ΔⵠⲆⵠⵠⲆⲆ,
                Δⵠᐃᐃ: jb.ΔⵠᐃⲆᐃᐃᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Anyone want to play?",
                name: "Mr. Spider 2"
            }, {
                id: 82,
                ΔᐃⲆ: jb.ΔΔΔⲆⲆΔⲆ,
                ⵠΔΔ: jb.ⲆᐃᐃᐃᐃᐃⲆ,
                ΔΔΔⵠ: jb.ⵠᐃᐃⲆᐃⲆΔ,
                Δⵠᐃᐃ: jb.ᐃᐃⵠⲆⲆᐃᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mr. Blue Starfish"
            }, {
                id: 83,
                ΔᐃⲆ: jb.ⲆΔΔΔΔⵠⵠ,
                ⵠΔΔ: jb.ᐃⵠᐃⲆΔᐃᐃ,
                ΔΔΔⵠ: jb.ⵠⲆⵠΔΔΔⲆ,
                Δⵠᐃᐃ: jb.ᐃⵠΔⵠᐃⲆΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mr. Orange Starfish"
            }, {
                id: 84,
                ΔᐃⲆ: jb.ᐃΔΔⲆⵠⵠⵠ,
                ⵠΔΔ: jb.ⵠᐃΔⲆᐃᐃⵠ,
                ΔΔΔⵠ: jb.ΔΔΔᐃᐃⵠⲆ,
                Δⵠᐃᐃ: jb.ᐃⵠᐃᐃᐃΔⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mr. Pink Starfish"
            }, {
                id: 85,
                ΔᐃⲆ: jb.ᐃⲆᐃᐃⵠⲆⵠ,
                ⵠΔΔ: jb.ΔⵠⵠᐃⲆⵠⵠ,
                ΔΔΔⵠ: jb.ⵠⵠΔΔΔⲆΔ,
                Δⵠᐃᐃ: jb.ⵠⵠⵠΔΔⵠΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mr. ShellMauve"
            }, {
                id: 86,
                ΔᐃⲆ: jb.ΔⲆⲆΔΔⲆΔ,
                ⵠΔΔ: jb.ⲆⲆᐃᐃⲆΔⵠ,
                ΔΔΔⵠ: jb.ⵠᐃⵠΔΔᐃⲆ,
                Δⵠᐃᐃ: jb.ⵠⲆᐃΔᐃⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mr. Shell Bead"
            }, {
                id: 96,
                ΔᐃⲆ: jb.ⵠⵠⵠⵠΔⲆᐃ,
                ⵠΔΔ: jb.ⵠΔⲆⵠᐃⲆⲆ,
                ΔΔΔⵠ: jb.ⵠⵠᐃΔⵠⲆΔ,
                Δⵠᐃᐃ: jb.ⲆᐃⵠᐃⵠΔⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Fukss",
                name: "Angry Crab"
            }, {
                id: 98,
                ΔᐃⲆ: jb.ⲆΔⲆᐃⵠΔⲆ,
                ⵠΔΔ: jb.ΔⵠΔⵠᐃⲆⲆ,
                ΔΔΔⵠ: jb.ⵠⲆⵠᐃΔᐃⵠ,
                Δⵠᐃᐃ: jb.ᐃᐃⵠᐃᐃⵠᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Penguin"
            }, {
                id: 126,
                ΔᐃⲆ: jb.ΔΔᐃΔⲆⵠΔ,
                ⵠΔΔ: jb.ΔᐃΔΔΔⵠⵠ,
                ΔΔΔⵠ: jb.ΔᐃΔᐃᐃΔΔ,
                Δⵠᐃᐃ: jb.ᐃᐃΔΔᐃⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Anyone want to play?",
                name: "Mr. Boar"
            }, {
                id: 145,
                ΔᐃⲆ: jb.ⲆⵠⲆᐃⵠⵠⵠ,
                ⵠΔΔ: jb.ΔⵠⲆᐃⲆΔΔ,
                ΔΔΔⵠ: jb.ᐃⵠᐃᐃᐃⲆΔ,
                Δⵠᐃᐃ: jb.ⲆⵠΔⲆⵠⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "I saw you"
            }, {
                id: 146,
                ΔᐃⲆ: jb.ᐃΔΔⵠⲆⲆΔ,
                ⵠΔΔ: jb.ⲆᐃⵠᐃⵠⲆᐃ,
                ΔΔΔⵠ: jb.ΔΔΔⲆⵠⵠΔ,
                Δⵠᐃᐃ: jb.ΔᐃΔⲆⵠⲆⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "It was funny"
            }, {
                id: 147,
                ΔᐃⲆ: jb.ΔⵠⲆΔⲆᐃᐃ,
                ⵠΔΔ: jb.ⵠΔᐃⵠᐃΔᐃ,
                ΔΔΔⵠ: jb.ⵠᐃΔⲆⵠⲆΔ,
                Δⵠᐃᐃ: jb.ᐃⵠⲆⵠⲆⲆⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "You can scream"
            }, {
                id: 158,
                ΔᐃⲆ: jb.ᐃΔᐃᐃⲆⵠᐃ,
                ⵠΔΔ: jb.ΔⲆⲆⵠⵠⲆΔ,
                ΔΔΔⵠ: jb.ΔᐃΔⵠᐃⵠᐃ,
                Δⵠᐃᐃ: jb.ΔΔⲆⵠΔⵠᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Mr. Book"
            }, {
                id: 163,
                ΔᐃⲆ: jb.ⲆΔᐃΔΔⲆⵠ,
                ⵠΔΔ: jb.ΔⲆΔΔᐃⲆᐃ,
                ΔΔΔⵠ: jb.ⵠᐃΔᐃⲆΔΔ,
                Δⵠᐃᐃ: jb.ᐃⲆᐃᐃᐃⵠᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Anyone want to play?",
                name: "Mr. Mammoth"
            }, {
                id: 164,
                ΔᐃⲆ: jb.ⲆΔΔⲆⲆⲆⲆ,
                ⵠΔΔ: jb.ΔⵠΔⵠᐃⲆᐃ,
                ΔΔΔⵠ: jb.ⲆΔⲆⵠᐃᐃᐃ,
                Δⵠᐃᐃ: jb.ⲆⲆΔᐃⲆᐃᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "SoOw",
                name: "Mr. Mammoth 2"
            }, {
                id: 161,
                ΔᐃⲆ: jb.ΔⵠⲆᐃΔᐃΔ,
                ⵠΔΔ: jb.ΔΔᐃⲆΔᐃⵠ,
                ΔΔΔⵠ: jb.ᐃᐃᐃⵠᐃⲆⵠ,
                Δⵠᐃᐃ: jb.ⲆⲆΔΔΔΔᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Nightmare"
            }, {
                id: 168,
                ΔᐃⲆ: jb.ᐃᐃⲆΔᐃⵠⲆ,
                ⵠΔΔ: jb.ΔᐃᐃⵠⵠΔⵠ,
                ΔΔΔⵠ: jb.ᐃⵠΔⵠⵠⲆⵠ,
                Δⵠᐃᐃ: jb.ⲆⵠⵠΔᐃΔᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Shiny Crystal"
            }, {
                id: 173,
                ΔᐃⲆ: jb.ᐃⵠᐃΔⵠᐃᐃ,
                ⵠΔΔ: jb.ΔⲆⵠΔⵠⲆᐃ,
                ΔΔΔⵠ: jb.ⲆⲆⵠⲆⵠⲆᐃ,
                Δⵠᐃᐃ: jb.ⲆᐃᐃⵠΔᐃΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Water skin"
            }, {
                id: 175,
                ΔᐃⲆ: jb.ᐃΔΔΔⲆⲆΔ,
                ⵠΔΔ: jb.ᐃⵠⵠⵠⲆⵠⲆ,
                ΔΔΔⵠ: jb.ⵠΔΔⲆⲆⵠΔ,
                Δⵠᐃᐃ: jb.ΔⵠⲆⲆⵠΔᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Fall Berry Bush Starver"
            }, {
                id: 176,
                ΔᐃⲆ: jb.ᐃⲆⵠⲆᐃⵠⵠ,
                ⵠΔΔ: jb.ᐃᐃᐃΔΔⲆⵠ,
                ΔΔΔⵠ: jb.ⲆⲆⲆΔⵠΔᐃ,
                Δⵠᐃᐃ: jb.ΔⲆⵠⵠΔⲆⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Christmas Berry Bush Starver"
            }, {
                id: 177,
                ΔᐃⲆ: jb.ⲆΔΔᐃⵠⲆΔ,
                ⵠΔΔ: jb.ᐃⵠⵠᐃⲆⵠⵠ,
                ΔΔΔⵠ: jb.ΔⵠΔᐃⲆⵠⵠ,
                Δⵠᐃᐃ: jb.ⵠⲆᐃΔⵠΔⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Berry Bush Starver"
            }, {
                id: 182,
                ΔᐃⲆ: jb.ⵠⲆΔⵠⲆᐃΔ,
                ⵠΔΔ: jb.ⵠΔⲆΔΔᐃⵠ,
                ΔΔΔⵠ: jb.ⲆⵠⵠᐃᐃⵠΔ,
                Δⵠᐃᐃ: jb.ΔⵠⲆΔᐃⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamer"
            }, {
                id: 185,
                ΔᐃⲆ: jb.ⲆⵠΔⵠⲆⲆⵠ,
                ⵠΔΔ: jb.ΔⲆᐃⲆᐃⲆⵠ,
                ΔΔΔⵠ: jb.ⵠᐃⵠⵠΔⵠᐃ,
                Δⵠᐃᐃ: jb.ΔⲆᐃᐃⵠⵠᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Wolf"
            }, {
                id: 186,
                ΔᐃⲆ: jb.ΔᐃⲆᐃᐃⵠᐃ,
                ⵠΔΔ: jb.ⲆⵠΔΔΔΔᐃ,
                ΔΔΔⵠ: jb.ᐃΔⲆᐃᐃᐃⵠ,
                Δⵠᐃᐃ: jb.ΔⵠΔⲆᐃᐃᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Snow Wolf"
            }, {
                id: 187,
                ΔᐃⲆ: jb.ⵠᐃᐃᐃⲆΔⵠ,
                ⵠΔΔ: jb.ΔΔⵠⲆⵠΔΔ,
                ΔΔΔⵠ: jb.ᐃΔⵠⵠᐃΔΔ,
                Δⵠᐃᐃ: jb.ΔⲆΔⵠᐃⵠⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Rabbit"
            }, {
                id: 188,
                ΔᐃⲆ: jb.ΔΔⵠⲆᐃΔⲆ,
                ⵠΔΔ: jb.ⵠⲆΔⲆⵠⲆΔ,
                ΔΔΔⵠ: jb.ⲆᐃⲆᐃⵠⲆⲆ,
                Δⵠᐃᐃ: jb.ΔⲆᐃᐃΔΔⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Snow Rabbit"
            }, {
                id: 189,
                ΔᐃⲆ: jb.ⵠⵠⵠⵠᐃΔⵠ,
                ⵠΔΔ: jb.ΔΔᐃⵠᐃᐃᐃ,
                ΔΔΔⵠ: jb.ⲆⲆⲆⵠΔⲆᐃ,
                Δⵠᐃᐃ: jb.ⲆⲆᐃⲆᐃⵠΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Bear"
            }, {
                id: 190,
                ΔᐃⲆ: jb.ΔᐃΔᐃⵠΔΔ,
                ⵠΔΔ: jb.ⵠⲆᐃⲆⵠⲆⵠ,
                ΔΔΔⵠ: jb.ΔⵠⵠⵠⵠΔΔ,
                Δⵠᐃᐃ: jb.ⲆᐃⲆⵠᐃᐃⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Polar Bear"
            }, {
                id: 196,
                ΔᐃⲆ: jb.ΔⵠⵠⲆᐃΔᐃ,
                ⵠΔΔ: jb.ⵠΔⲆΔⵠᐃⵠ,
                ΔΔΔⵠ: jb.ΔⵠᐃⵠⲆⲆΔ,
                Δⵠᐃᐃ: jb.ᐃⵠΔᐃⲆᐃⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Crying Angel"
            }, {
                id: 202,
                ΔᐃⲆ: jb.ᐃⲆⵠΔⵠⵠⵠ,
                ⵠΔΔ: jb.ᐃⵠⲆⲆⵠⲆᐃ,
                ΔΔΔⵠ: jb.ⲆᐃᐃⲆᐃΔΔ,
                Δⵠᐃᐃ: jb.ΔᐃⲆᐃᐃⲆⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Fennec"
            }, {
                id: 207,
                ΔᐃⲆ: jb.ⵠᐃΔΔⵠᐃⲆ,
                ⵠΔΔ: jb.ᐃᐃᐃΔⵠᐃᐃ,
                ΔΔΔⵠ: jb.ⵠⵠⵠⲆΔᐃⲆ,
                Δⵠᐃᐃ: jb.ⲆⲆΔᐃΔⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Decay"
            }, {
                id: 212,
                ΔᐃⲆ: jb.ⲆΔΔⲆᐃΔⵠ,
                ⵠΔΔ: jb.ⵠᐃᐃΔΔⵠΔ,
                ΔΔΔⵠ: jb.ⵠΔⵠⵠⵠᐃᐃ,
                Δⵠᐃᐃ: jb.ⲆᐃⲆⵠⲆⲆⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Pillow"
            }, {
                id: 218,
                ΔᐃⲆ: jb.ΔⵠᐃΔⲆⵠⵠ,
                ⵠΔΔ: jb.ᐃⲆⵠⵠᐃⲆⵠ,
                ΔΔΔⵠ: jb.ⲆⵠᐃΔᐃᐃⲆ,
                Δⵠᐃᐃ: jb.ⲆⲆᐃΔᐃⵠᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Exotic"
            }, {
                id: 224,
                ΔᐃⲆ: jb.ⵠΔⲆⲆΔⲆⵠ,
                ⵠΔΔ: jb.ⲆΔΔᐃⲆᐃᐃ,
                ΔΔΔⵠ: jb.ᐃᐃᐃᐃᐃᐃᐃ,
                Δⵠᐃᐃ: jb.ⵠᐃΔⵠΔᐃΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Apple"
            }, {
                id: 225,
                ΔᐃⲆ: jb.ᐃΔⵠⵠΔⲆᐃ,
                ⵠΔΔ: jb.ⲆΔⲆᐃⵠⲆⵠ,
                ΔΔΔⵠ: jb.ΔᐃᐃᐃⲆⲆΔ,
                Δⵠᐃᐃ: jb.ⵠⵠⲆΔᐃⵠΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Golden Apple"
            }, {
                id: 233,
                ΔᐃⲆ: jb.ⲆⵠΔΔⵠⵠⵠ,
                ⵠΔΔ: jb.ᐃΔⲆΔⵠᐃⵠ,
                ΔΔΔⵠ: jb.ΔᐃⲆⲆΔᐃⲆ,
                Δⵠᐃᐃ: jb.ⵠⲆΔⲆⵠΔⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Lava Cube"
            }, {
                id: 234,
                ΔᐃⲆ: jb.ᐃᐃⵠⲆⲆⲆΔ,
                ⵠΔΔ: jb.ⲆⲆⵠⵠᐃⵠᐃ,
                ΔΔΔⵠ: jb.ΔⲆⲆⵠⵠᐃⲆ,
                Δⵠᐃᐃ: jb.ⵠⵠⵠΔⲆᐃⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Dragon Cube"
            }, {
                id: 42,
                ΔᐃⲆ: jb.ΔⵠᐃΔⲆΔⵠ,
                ⵠΔΔ: jb.ⲆⲆⵠⵠᐃⲆⲆ,
                ΔΔΔⵠ: jb.ⵠΔΔⵠᐃⵠᐃ,
                Δⵠᐃᐃ: jb.ΔΔΔⲆΔΔⵠ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Winter",
                name: "Will-O'-The-Wisp"
            }, {
                id: 91,
                ΔᐃⲆ: jb.ⲆⲆᐃᐃⲆⵠⵠ,
                ⵠΔΔ: jb.ⲆⲆⲆᐃΔᐃⵠ,
                ΔΔΔⵠ: jb.ⲆⵠᐃⵠⵠⲆⲆ,
                Δⵠᐃᐃ: jb.ⲆⲆΔΔⲆⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "ExpertyAnimations",
                name: "Flame"
            }, {
                id: 26,
                ΔᐃⲆ: jb.ⵠⵠᐃⲆⵠᐃⲆ,
                ⵠΔΔ: jb.ᐃΔⲆᐃⲆⵠⲆ,
                ΔΔΔⵠ: jb.ⲆⲆᐃᐃᐃΔⵠ,
                Δⵠᐃᐃ: jb.ⲆᐃΔⲆⲆΔΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Be a Tree"
            }, {
                id: 38,
                ΔᐃⲆ: jb.ⵠⵠⲆᐃⲆΔⲆ,
                ⵠΔΔ: jb.ᐃᐃᐃᐃⲆⲆⵠ,
                ΔΔΔⵠ: jb.ⵠᐃⵠᐃΔⲆⵠ,
                Δⵠᐃᐃ: jb.ᐃΔᐃⵠⲆᐃΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Winter",
                name: "Toxic Mutant"
            }, {
                id: 50,
                ΔᐃⲆ: jb.ᐃⲆⵠᐃⵠΔᐃ,
                ⵠΔΔ: jb.ⵠⵠⲆⲆⲆⵠᐃ,
                ΔΔΔⵠ: jb.ᐃⲆⵠⵠΔΔⲆ,
                Δⵠᐃᐃ: jb.ⵠⵠⵠⲆⲆⲆⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Communist",
                name: "Mr. Tomato"
            }, {
                id: 54,
                ΔᐃⲆ: jb.ⲆⵠⵠⵠΔᐃⲆ,
                ⵠΔΔ: jb.ΔⵠᐃⲆⵠⲆⵠ,
                ΔΔΔⵠ: jb.ⲆΔΔⵠᐃΔᐃ,
                Δⵠᐃᐃ: jb.ΔⲆΔᐃⲆᐃⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mr. Mauve, the Lapa"
            }, {
                id: 57,
                ΔᐃⲆ: jb.ⲆΔᐃⵠΔⵠΔ,
                ⵠΔΔ: jb.ⵠⲆⲆⲆⵠⲆᐃ,
                ΔΔΔⵠ: jb.ᐃΔⲆᐃⵠΔΔ,
                Δⵠᐃᐃ: jb.ΔⵠΔΔⵠΔᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Golden Fish"
            }, {
                id: 64,
                ΔᐃⲆ: jb.ᐃᐃⲆΔⵠⲆᐃ,
                ⵠΔΔ: jb.ΔⲆᐃⵠᐃⵠΔ,
                ΔΔΔⵠ: jb.ΔΔⲆⵠⲆⲆⲆ,
                Δⵠᐃᐃ: jb.ⵠΔⵠⵠᐃᐃⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "LapaMauve"
            }, {
                id: 65,
                ΔᐃⲆ: jb.ⲆⲆⵠⲆᐃⵠΔ,
                ⵠΔΔ: jb.ⲆΔΔᐃΔⲆΔ,
                ΔΔΔⵠ: jb.ΔⵠⲆᐃᐃⵠΔ,
                Δⵠᐃᐃ: jb.ᐃΔⲆΔΔᐃⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "LapaMauve "
            }, {
                id: 92,
                ΔᐃⲆ: jb.ⲆⵠⲆΔᐃᐃⵠ,
                ⵠΔΔ: jb.ᐃᐃᐃⵠⵠⵠᐃ,
                ΔΔΔⵠ: jb.ΔⲆᐃΔⲆᐃⵠ,
                Δⵠᐃᐃ: jb.ⲆᐃⲆⵠᐃⲆΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mr. Burger"
            }, {
                id: 66,
                ΔᐃⲆ: jb.ᐃⵠᐃᐃΔⵠᐃ,
                ⵠΔΔ: jb.ΔΔᐃᐃΔΔᐃ,
                ΔΔΔⵠ: jb.ⲆΔΔⲆΔᐃⲆ,
                Δⵠᐃᐃ: jb.ⲆⲆᐃⵠΔⲆⵠ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Tropical Starver"
            }, {
                id: 80,
                ΔᐃⲆ: jb.ΔΔⵠΔᐃᐃⲆ,
                ⵠΔΔ: jb.ⲆⲆΔΔᐃⲆⵠ,
                ΔΔΔⵠ: jb.ⲆᐃⵠⵠⵠᐃΔ,
                Δⵠᐃᐃ: jb.ⲆΔⵠΔⵠⲆⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mr. ShellPink"
            }, {
                id: 81,
                ΔᐃⲆ: jb.ᐃⵠⵠⲆΔᐃⵠ,
                ⵠΔΔ: jb.ΔⵠΔⲆⲆⵠΔ,
                ΔΔΔⵠ: jb.ᐃⵠⵠΔΔᐃΔ,
                Δⵠᐃᐃ: jb.ΔᐃᐃᐃΔᐃΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mr. OranShell"
            }, {
                id: 99,
                ΔᐃⲆ: jb.ΔΔᐃᐃᐃⵠⵠ,
                ⵠΔΔ: jb.ΔΔᐃⵠⵠⵠᐃ,
                ΔΔΔⵠ: jb.ⲆᐃⲆΔⲆᐃⲆ,
                Δⵠᐃᐃ: jb.ⲆⵠⵠⲆᐃⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "eogito",
                name: "Pepe"
            }, {
                id: 100,
                ΔᐃⲆ: jb.ⵠⵠΔΔⲆⲆⲆ,
                ⵠΔΔ: jb.ⵠΔⵠᐃⵠⵠΔ,
                ΔΔΔⵠ: jb.ΔΔⲆᐃΔΔⲆ,
                Δⵠᐃᐃ: jb.ΔΔⲆⵠⵠⲆⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "fatant",
                name: "Mr. Ant"
            }, {
                id: 115,
                ΔᐃⲆ: jb.ΔᐃΔⲆⵠⵠⲆ,
                ⵠΔΔ: jb.ⲆᐃΔⲆΔⲆⲆ,
                ΔΔΔⵠ: jb.ⵠᐃΔⲆⲆⵠᐃ,
                Δⵠᐃᐃ: jb.ΔⲆᐃᐃⲆΔⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "MADBalgouthi",
                name: "Mr. Watermelon"
            }, {
                id: 101,
                ΔᐃⲆ: jb.Δⵠᐃⵠᐃⵠⵠ,
                ⵠΔΔ: jb.ⵠⵠΔⲆⵠⵠⲆ,
                ΔΔΔⵠ: jb.ⲆⵠⲆᐃⵠᐃΔ,
                Δⵠᐃᐃ: jb.ᐃᐃⵠⵠⲆⵠⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Mr. Thornbush"
            }, {
                id: 131,
                ΔᐃⲆ: jb.ᐃⲆΔⵠΔΔⵠ,
                ⵠΔΔ: jb.ᐃΔⵠⵠⲆⵠΔ,
                ΔΔΔⵠ: jb.ⵠᐃΔⲆⵠᐃⲆ,
                Δⵠᐃᐃ: jb.ⵠⵠⵠⵠᐃΔᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Cthulhu"
            }, {
                id: 143,
                ΔᐃⲆ: jb.ⲆⲆⲆⵠᐃⲆᐃ,
                ⵠΔΔ: jb.ᐃⲆΔᐃⵠⲆᐃ,
                ΔΔΔⵠ: jb.ᐃⲆⲆⲆⲆⲆΔ,
                Δⵠᐃᐃ: jb.ᐃᐃΔΔᐃᐃΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "eogito",
                name: "Mr. Cactus"
            }, {
                id: 144,
                ΔᐃⲆ: jb.ΔⵠΔⲆᐃⵠΔ,
                ⵠΔΔ: jb.ⲆΔΔΔⵠᐃⵠ,
                ΔΔΔⵠ: jb.ⵠⵠⲆΔⲆⲆᐃ,
                Δⵠᐃᐃ: jb.ⵠᐃΔⵠⲆΔⵠ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Momo"
            }, {
                id: 180,
                ΔᐃⲆ: jb.ⲆᐃⲆⲆᐃⲆⵠ,
                ⵠΔΔ: jb.ⲆᐃΔᐃⲆⵠᐃ,
                ΔΔΔⵠ: jb.ᐃᐃᐃⵠΔᐃᐃ,
                Δⵠᐃᐃ: jb.ᐃⵠᐃⲆΔⵠⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Scream"
            }, {
                id: 193,
                ΔᐃⲆ: jb.ΔΔΔᐃⵠΔᐃ,
                ⵠΔΔ: jb.Ⲇⵠᐃᐃⵠᐃᐃ,
                ΔΔΔⵠ: jb.ⲆⵠΔᐃᐃⵠΔ,
                Δⵠᐃᐃ: jb.ΔⵠⵠΔⲆᐃΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Dragon"
            }, {
                id: 195,
                ΔᐃⲆ: jb.ᐃⵠⵠΔⵠⲆⵠ,
                ⵠΔΔ: jb.ᐃᐃⵠⵠΔΔᐃ,
                ΔΔΔⵠ: jb.ᐃⲆᐃⲆΔⵠⵠ,
                Δⵠᐃᐃ: jb.ⵠⲆⲆⲆΔΔᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Forest Spirit"
            }, {
                id: 197,
                ΔᐃⲆ: jb.ᐃⲆᐃⵠⵠΔⵠ,
                ⵠΔΔ: jb.ⲆΔⲆᐃⲆΔᐃ,
                ΔΔΔⵠ: jb.ᐃᐃᐃᐃⲆᐃⲆ,
                Δⵠᐃᐃ: jb.ⵠⲆⲆⵠΔⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Evil Goat"
            }, {
                id: 199,
                ΔᐃⲆ: jb.ⵠΔⵠⲆᐃᐃᐃ,
                ⵠΔΔ: jb.ΔᐃⲆⵠⲆⲆΔ,
                ΔΔΔⵠ: jb.ⲆᐃⵠⲆⵠΔⲆ,
                Δⵠᐃᐃ: jb.ⲆᐃⲆᐃⵠⲆΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Rotten"
            }, {
                id: 201,
                ΔᐃⲆ: jb.ⵠⲆⵠᐃⲆⵠᐃ,
                ⵠΔΔ: jb.ⵠᐃⵠⲆΔⲆⵠ,
                ΔΔΔⵠ: jb.ⲆᐃⵠᐃΔΔⵠ,
                Δⵠᐃᐃ: jb.ⲆΔᐃⵠⵠⲆΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Fossil"
            }, {
                id: 205,
                ΔᐃⲆ: jb.ΔᐃΔᐃΔⲆⲆ,
                ⵠΔΔ: jb.ᐃᐃᐃΔⲆⵠΔ,
                ΔΔΔⵠ: jb.ⲆᐃᐃⲆⵠⲆᐃ,
                Δⵠᐃᐃ: jb.ᐃΔⲆⲆΔⵠΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Spectrum"
            }, {
                id: 210,
                ΔᐃⲆ: jb.ᐃᐃⲆΔᐃΔⲆ,
                ⵠΔΔ: jb.ⲆᐃΔⵠⵠⲆᐃ,
                ΔΔΔⵠ: jb.ΔⵠΔᐃⲆᐃΔ,
                Δⵠᐃᐃ: jb.ⵠᐃⲆⵠΔⵠⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Helpy",
                name: "Black Cat"
            }, {
                id: 214,
                ΔᐃⲆ: jb.ⵠᐃⲆᐃⲆΔⵠ,
                ⵠΔΔ: jb.ᐃΔⵠΔⵠⲆᐃ,
                ΔΔΔⵠ: jb.ⲆᐃⲆᐃᐃⲆⵠ,
                Δⵠᐃᐃ: jb.ΔᐃⵠΔᐃᐃⵠ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Lynx"
            }, {
                id: 215,
                ΔᐃⲆ: jb.ΔⲆⵠΔⲆⲆΔ,
                ⵠΔΔ: jb.ⲆᐃᐃⲆΔⵠΔ,
                ΔΔΔⵠ: jb.ⲆⵠⲆⲆΔⲆΔ,
                Δⵠᐃᐃ: jb.ⲆᐃΔⲆⵠⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Warg"
            }, {
                id: 217,
                ΔᐃⲆ: jb.ΔⲆᐃΔⵠᐃΔ,
                ⵠΔΔ: jb.ⲆⲆΔΔᐃⵠᐃ,
                ΔΔΔⵠ: jb.ⵠⵠᐃⲆΔⵠⵠ,
                Δⵠᐃᐃ: jb.ᐃΔΔΔΔⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Menhir"
            }, {
                id: 95,
                ΔᐃⲆ: jb.ᐃⲆᐃΔⵠⲆⲆ,
                ⵠΔΔ: jb.ⵠΔⲆΔⲆΔⲆ,
                ΔΔΔⵠ: jb.ᐃⵠᐃⵠⲆⲆⵠ,
                Δⵠᐃᐃ: jb.ⲆⵠᐃᐃⵠⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Mr. Garlic"
            }, {
                id: 76,
                ΔᐃⲆ: jb.ⵠⵠⲆⲆⵠΔΔ,
                ⵠΔΔ: jb.ⵠⵠⲆⲆΔΔⲆ,
                ΔΔΔⵠ: jb.ⵠⵠᐃᐃⵠⲆⵠ,
                Δⵠᐃᐃ: jb.ΔΔⲆΔⲆⲆᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Winter",
                name: "Robot Dragon"
            }, {
                id: 44,
                ΔᐃⲆ: jb.ΔΔᐃⵠΔⲆᐃ,
                ⵠΔΔ: jb.ⵠᐃᐃᐃⲆΔᐃ,
                ΔΔΔⵠ: jb.ⵠⵠΔⲆΔⵠΔ,
                Δⵠᐃᐃ: jb.ᐃⲆΔᐃⲆⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Winter",
                name: "Lava Dragon Version 1"
            }, {
                id: 90,
                ΔᐃⲆ: jb.ⵠⵠΔᐃΔⵠΔ,
                ⵠΔΔ: jb.ⲆΔΔⲆⵠⵠⲆ,
                ΔΔΔⵠ: jb.ⲆⵠⲆⲆᐃΔΔ,
                Δⵠᐃᐃ: jb.ᐃⵠⵠΔΔΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "ExpertyAnimations",
                name: "Lava Dragon Version 2"
            }, {
                id: 124,
                ΔᐃⲆ: jb.ᐃΔⵠᐃᐃᐃΔ,
                ⵠΔΔ: jb.ᐃΔⲆᐃΔⵠΔ,
                ΔΔΔⵠ: jb.ⲆᐃⵠΔⵠⲆΔ,
                Δⵠᐃᐃ: jb.ᐃⲆⵠᐃⲆΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Lava Dragon Version 3"
            }, {
                id: 45,
                ΔᐃⲆ: jb.ⲆⵠⲆᐃⲆⲆΔ,
                ⵠΔΔ: jb.ᐃΔΔⵠⲆⲆⵠ,
                ΔΔΔⵠ: jb.ᐃᐃⵠΔⵠΔᐃ,
                Δⵠᐃᐃ: jb.ΔⲆⲆⲆᐃⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Sushui",
                name: "Ice Dragon Version 1"
            }, {
                id: 46,
                ΔᐃⲆ: jb.ⵠᐃⲆⵠΔⵠᐃ,
                ⵠΔΔ: jb.ΔⵠΔⲆᐃⵠⵠ,
                ΔΔΔⵠ: jb.ᐃᐃΔⲆᐃᐃⵠ,
                Δⵠᐃᐃ: jb.ⵠⵠⲆⵠⵠⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Winter",
                name: "Ice Dragon Version 2"
            }, {
                id: 108,
                ΔᐃⲆ: jb.ΔⲆΔⲆᐃΔᐃ,
                ⵠΔΔ: jb.ⵠᐃΔΔⲆⵠΔ,
                ΔΔΔⵠ: jb.ⲆⵠΔΔᐃΔⵠ,
                Δⵠᐃᐃ: jb.ᐃⵠⲆⵠⵠⲆᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Ice Dragon Version 3"
            }, {
                id: 123,
                ΔᐃⲆ: jb.ⵠΔΔⵠⲆⵠⵠ,
                ⵠΔΔ: jb.ⲆⲆⲆⵠΔᐃΔ,
                ΔΔΔⵠ: jb.ᐃᐃᐃΔᐃⵠΔ,
                Δⵠᐃᐃ: jb.ⵠᐃΔΔⵠⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Baby Dragon Version 1"
            }, {
                id: 128,
                ΔᐃⲆ: jb.ᐃⲆⲆⵠⵠᐃᐃ,
                ⵠΔΔ: jb.ⲆⵠⵠⲆⵠⲆⵠ,
                ΔΔΔⵠ: jb.ΔⲆⲆᐃⲆⲆΔ,
                Δⵠᐃᐃ: jb.ᐃⲆⵠΔⲆᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "MADBalgouthi",
                name: "Baby Dragon Version 2"
            }, {
                id: 125,
                ΔᐃⲆ: jb.ᐃⵠⲆᐃⵠⲆᐃ,
                ⵠΔΔ: jb.ⲆᐃΔᐃᐃⲆᐃ,
                ΔΔΔⵠ: jb.ⵠⲆⵠⲆΔΔᐃ,
                Δⵠᐃᐃ: jb.ⲆΔᐃⲆⲆΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Baby Lava"
            }, {
                id: 47,
                ΔᐃⲆ: jb.ⲆⲆⲆⲆᐃΔⵠ,
                ⵠΔΔ: jb.ᐃⵠⲆᐃⵠⲆⲆ,
                ΔΔΔⵠ: jb.ⵠᐃΔⵠⲆⲆⲆ,
                Δⵠᐃᐃ: jb.ΔⵠΔⵠΔΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Kraken"
            }, {
                id: 129,
                ΔᐃⲆ: jb.ⲆⵠΔᐃᐃᐃⵠ,
                ⵠΔΔ: jb.ⲆΔᐃⲆⵠΔᐃ,
                ΔΔΔⵠ: jb.ΔⵠⵠⵠᐃⲆΔ,
                Δⵠᐃᐃ: jb.ᐃⲆᐃⵠᐃΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Sandworm"
            }, {
                id: 63,
                ΔᐃⲆ: jb.ᐃΔⲆⵠᐃΔᐃ,
                ⵠΔΔ: jb.ⵠⲆΔⵠⵠⵠΔ,
                ΔΔΔⵠ: jb.ᐃⵠⲆⵠΔⲆΔ,
                Δⵠᐃᐃ: jb.ΔⲆᐃⵠⵠⲆⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mr. Golden Bread"
            }, {
                id: 67,
                ΔᐃⲆ: jb.ᐃⲆⲆⲆᐃᐃⲆ,
                ⵠΔΔ: jb.ⵠⲆΔᐃΔⲆⵠ,
                ΔΔΔⵠ: jb.ⲆⲆΔᐃᐃᐃᐃ,
                Δⵠᐃᐃ: jb.ⲆⵠⲆⵠᐃᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "ForgottenHeroe",
                name: "Starver Ores"
            }, {
                id: 130,
                ΔᐃⲆ: jb.ⲆⲆᐃⲆΔᐃⲆ,
                ⵠΔΔ: jb.ⲆⲆᐃΔⲆⲆⲆ,
                ΔΔΔⵠ: jb.ΔΔᐃⲆΔᐃᐃ,
                Δⵠᐃᐃ: jb.ΔΔⲆᐃΔᐃⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Poo"
            }, {
                id: 89,
                ΔᐃⲆ: jb.ᐃᐃΔΔⲆΔᐃ,
                ⵠΔΔ: jb.ΔⲆΔΔⲆⲆΔ,
                ΔΔΔⵠ: jb.ᐃⲆΔⵠⲆᐃΔ,
                Δⵠᐃᐃ: jb.ᐃⲆΔΔΔⲆⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Poinet",
                name: "Volcano Starver"
            }, {
                id: 112,
                ΔᐃⲆ: jb.ᐃⲆⲆᐃⵠΔⲆ,
                ⵠΔΔ: jb.ΔΔⵠⲆΔᐃⲆ,
                ΔΔΔⵠ: jb.ᐃΔᐃⲆⲆΔᐃ,
                Δⵠᐃᐃ: jb.ΔΔⵠⲆⲆⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Lava Starver"
            }, {
                id: 183,
                ΔᐃⲆ: jb.ΔⵠⲆⲆᐃⲆᐃ,
                ⵠΔΔ: jb.ⵠᐃΔΔΔⲆⵠ,
                ΔΔΔⵠ: jb.ⵠᐃᐃⵠⵠᐃⵠ,
                Δⵠᐃᐃ: jb.ⲆᐃⵠΔᐃⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Revaster"
            }, {
                id: 192,
                ΔᐃⲆ: jb.ᐃⲆᐃᐃᐃⲆᐃ,
                ⵠΔΔ: jb.ⲆΔⵠⵠᐃⲆᐃ,
                ΔΔΔⵠ: jb.ΔΔⲆⲆⲆⵠᐃ,
                Δⵠᐃᐃ: jb.ΔⲆⵠΔᐃᐃⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Awakened"
            }, {
                id: 194,
                ΔᐃⲆ: jb.ⲆⲆᐃᐃᐃᐃⲆ,
                ⵠΔΔ: jb.ΔⵠⵠⲆⲆᐃⲆ,
                ΔΔΔⵠ: jb.ᐃΔᐃᐃⲆⲆᐃ,
                Δⵠᐃᐃ: jb.ᐃⲆΔⵠⵠⲆⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Ice Dragon"
            }, {
                id: 236,
                ΔᐃⲆ: jb.ⲆΔΔᐃⵠⵠΔ,
                ⵠΔΔ: jb.ᐃᐃΔⵠⵠⲆΔ,
                ΔΔΔⵠ: jb.ⲆⵠᐃᐃⵠⲆΔ,
                Δⵠᐃᐃ: jb.ᐃΔⲆΔΔⲆⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Crystal Dragon"
            }, {
                id: 208,
                ΔᐃⲆ: jb.ᐃⵠΔᐃΔΔⲆ,
                ⵠΔΔ: jb.ΔΔᐃΔᐃⲆⲆ,
                ΔΔΔⵠ: jb.ᐃⲆⵠᐃᐃᐃᐃ,
                Δⵠᐃᐃ: jb.ᐃⵠΔⲆΔᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Bone Dragon"
            }, {
                id: 216,
                ΔᐃⲆ: jb.ΔⲆⵠΔⵠᐃⵠ,
                ⵠΔΔ: jb.ᐃΔΔΔⲆⲆⲆ,
                ΔΔΔⵠ: jb.ⲆᐃⲆⵠⲆⵠᐃ,
                Δⵠᐃᐃ: jb.ΔⵠⵠᐃⵠᐃⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Warg Ghost"
            }, {
                id: 226,
                ΔᐃⲆ: jb.ᐃᐃⲆΔⵠΔᐃ,
                ⵠΔΔ: jb.ᐃⵠⵠⲆⵠᐃⵠ,
                ΔΔΔⵠ: jb.ᐃΔⵠⲆᐃᐃⲆ,
                Δⵠᐃᐃ: jb.ᐃⵠᐃᐃΔⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Cursed"
            }, {
                id: 48,
                ΔᐃⲆ: jb.ⲆΔᐃⵠᐃᐃΔ,
                ⵠΔΔ: jb.ᐃⵠⲆᐃΔⵠⵠ,
                ΔΔΔⵠ: jb.ⵠΔⲆΔΔΔᐃ,
                Δⵠᐃᐃ: jb.ⲆⲆⲆᐃⵠΔΔ,
                ᐃⵠⵠ: Mb.ᐃΔⲆⵠᐃᐃⵠ,
                Ⲇᐃⵠ: "eogito",
                name: "Robot"
            }, {
                id: 110,
                ΔᐃⲆ: jb.ⵠⵠΔΔᐃΔᐃ,
                ⵠΔΔ: jb.ⵠⲆⲆΔⲆᐃⲆ,
                ΔΔΔⵠ: jb.ΔⲆⵠⵠⵠⲆⵠ,
                Δⵠᐃᐃ: jb.ΔᐃⵠᐃⵠⲆᐃ,
                ᐃⵠⵠ: Mb.ᐃΔⲆⵠᐃᐃⵠ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Blue Butterfly"
            }, {
                id: 157,
                ΔᐃⲆ: jb.ᐃΔᐃΔᐃᐃᐃ,
                ⵠΔΔ: jb.ⵠΔᐃᐃⲆᐃΔ,
                ΔΔΔⵠ: jb.ⵠⲆⵠΔⲆⵠⲆ,
                Δⵠᐃᐃ: jb.ᐃⵠΔᐃᐃⲆΔ,
                ᐃⵠⵠ: Mb.ᐃΔⲆⵠᐃᐃⵠ,
                Ⲇᐃⵠ: "eogito",
                name: "Yrifox"
            }, {
                id: 165,
                ΔᐃⲆ: jb.ⲆΔⲆⵠᐃⲆᐃ,
                ⵠΔΔ: jb.ⲆⲆⲆⵠⲆᐃⵠ,
                ΔΔΔⵠ: jb.ᐃΔⵠᐃᐃΔΔ,
                Δⵠᐃᐃ: jb.ΔⲆⵠⵠΔⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃΔⲆⵠᐃᐃⵠ,
                Ⲇᐃⵠ: "OmarJr13",
                name: "Blob Skin"
            }],
            ᐃΔΔᐃ: [{
                id: 0,
                ΔᐃⲆ: jb.ⵠⲆᐃⵠⲆΔᐃ,
                ⵠΔΔ: jb.ΔΔⲆᐃΔΔᐃ,
                ᐃⵠⵠ: Mb.ⲆΔⲆᐃᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Bag 1"
            }, {
                id: 1,
                ΔᐃⲆ: jb.ⵠⵠᐃᐃᐃⲆᐃ,
                ⵠΔΔ: jb.ᐃΔⵠᐃⲆⵠΔ,
                ᐃⵠⵠ: Mb.ⲆΔⲆᐃᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Old Bag"
            }, {
                id: 2,
                ΔᐃⲆ: jb.ΔⲆⲆⲆⵠΔⵠ,
                ⵠΔΔ: jb.ⵠⵠᐃⲆΔΔⲆ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Bag 2"
            }, {
                id: 3,
                ΔᐃⲆ: jb.ⲆⵠΔᐃⲆᐃᐃ,
                ⵠΔΔ: jb.ᐃⲆⲆⲆΔᐃᐃ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Bag 3"
            }, {
                id: 4,
                ΔᐃⲆ: jb.ⵠΔΔⲆᐃⲆᐃ,
                ⵠΔΔ: jb.ΔΔᐃⲆⵠΔⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Bag 4"
            }, {
                id: 5,
                ΔᐃⲆ: jb.ΔᐃΔᐃΔᐃⲆ,
                ⵠΔΔ: jb.ⲆⲆᐃΔᐃᐃᐃ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Bag 5"
            }, {
                id: 11,
                ΔᐃⲆ: jb.ΔⲆΔᐃᐃᐃΔ,
                ⵠΔΔ: jb.ⲆⵠⵠⲆⵠⵠΔ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Wood Pickaxe Bag"
            }, {
                id: 19,
                ΔᐃⲆ: jb.ΔᐃΔΔΔⲆᐃ,
                ⵠΔΔ: jb.ΔᐃⲆⲆΔᐃΔ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io ",
                name: "Wood Carrier"
            }, {
                id: 37,
                ΔᐃⲆ: jb.ΔΔⵠⲆⲆᐃⵠ,
                ⵠΔΔ: jb.ᐃⲆΔⲆⵠⲆΔ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Bag 6"
            }, {
                id: 39,
                ΔᐃⲆ: jb.ΔⲆΔΔΔᐃⵠ,
                ⵠΔΔ: jb.ΔᐃᐃⵠⲆⲆⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Bag with Wooden Swords"
            }, {
                id: 44,
                ΔᐃⲆ: jb.ΔΔΔⵠᐃⲆⵠ,
                ⵠΔΔ: jb.ΔΔᐃⲆⲆᐃΔ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Communist",
                name: "Big Bag"
            }, {
                id: 7,
                ΔᐃⲆ: jb.ᐃΔⲆΔΔΔᐃ,
                ⵠΔΔ: jb.ⵠΔⵠⲆΔᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Communist",
                name: "Bag 6"
            }, {
                id: 8,
                ΔᐃⲆ: jb.ⵠⵠΔⲆⲆⲆΔ,
                ⵠΔΔ: jb.ⵠⵠⵠΔΔΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Easter Bag"
            }, {
                id: 9,
                ΔᐃⲆ: jb.ⵠΔΔⵠⵠⲆᐃ,
                ⵠΔΔ: jb.ⲆᐃⲆⵠΔⲆᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Star Bag"
            }, {
                id: 10,
                ΔᐃⲆ: jb.ΔⲆΔᐃⵠΔⵠ,
                ⵠΔΔ: jb.ΔΔΔⲆⲆᐃⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Winter Bag"
            }, {
                id: 20,
                ΔᐃⲆ: jb.ⵠⵠᐃⵠᐃᐃᐃ,
                ⵠΔΔ: jb.ⵠⵠⲆᐃΔᐃⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io ",
                name: "Stone Carrier"
            }, {
                id: 24,
                ΔᐃⲆ: jb.ΔⲆᐃΔᐃⵠⲆ,
                ⵠΔΔ: jb.ⵠΔΔⵠΔⲆⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Stone Pickaxe Bag"
            }, {
                id: 6,
                ΔᐃⲆ: jb.ⵠᐃᐃΔⲆᐃⲆ,
                ⵠΔΔ: jb.ΔᐃΔⲆⲆⵠᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Communist",
                name: "Bag Camouflage"
            }, {
                id: 38,
                ΔᐃⲆ: jb.ⵠⲆᐃᐃᐃᐃᐃ,
                ⵠΔΔ: jb.ΔᐃΔΔᐃΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Bag with Stone Swords"
            }, {
                id: 54,
                ΔᐃⲆ: jb.ⵠⵠᐃΔⵠᐃⲆ,
                ⵠΔΔ: jb.ⲆᐃᐃⲆᐃΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Cow Bag"
            }, {
                id: 59,
                ΔᐃⲆ: jb.ⲆⲆΔⲆΔⵠᐃ,
                ⵠΔΔ: jb.ᐃⵠⲆⲆΔᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "CrysTal",
                name: "Starver Bag"
            }, {
                id: 62,
                ΔᐃⲆ: jb.ⵠΔⲆᐃⵠᐃⵠ,
                ⵠΔΔ: jb.ΔⵠⵠⵠⲆⲆⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "CrysTal",
                name: "Crystal Sky Bag"
            }, {
                id: 71,
                ΔᐃⲆ: jb.ⲆⵠⲆΔΔⲆΔ,
                ⵠΔΔ: jb.ΔΔⲆΔⵠΔΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Portable Furnace"
            }, {
                id: 78,
                ΔᐃⲆ: jb.ᐃⲆᐃⲆΔⲆᐃ,
                ⵠΔΔ: jb.ⲆⵠᐃⲆᐃⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Crate Bag"
            }, {
                id: 13,
                ΔᐃⲆ: jb.ΔᐃⵠΔⵠᐃᐃ,
                ⵠΔΔ: jb.ⲆⲆᐃΔΔⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Honey Pot"
            }, {
                id: 21,
                ΔᐃⲆ: jb.ⲆⲆⲆΔᐃᐃⵠ,
                ⵠΔΔ: jb.ⲆⵠᐃⵠⲆᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io ",
                name: "Gold Carrier"
            }, {
                id: 30,
                ΔᐃⲆ: jb.ᐃᐃⵠⲆⵠⲆᐃ,
                ⵠΔΔ: jb.ᐃⵠⲆΔΔᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Gold Pickaxe Bag"
            }, {
                id: 29,
                ΔᐃⲆ: jb.ⵠᐃⲆⵠⲆᐃΔ,
                ⵠΔΔ: jb.ⵠΔᐃⲆΔⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Ariel",
                name: "Mr and Mrs Bakers"
            }, {
                id: 41,
                ΔᐃⲆ: jb.ΔⲆᐃᐃⵠⲆᐃ,
                ⵠΔΔ: jb.ΔⵠⲆⵠᐃⲆⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Bag with Golden Swords"
            }, {
                id: 47,
                ΔᐃⲆ: jb.ⵠΔⲆᐃᐃⵠᐃ,
                ⵠΔΔ: jb.ⵠΔⲆⵠⲆⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Explorer Bag"
            }, {
                id: 51,
                ΔᐃⲆ: jb.ⵠⲆΔⵠᐃᐃⲆ,
                ⵠΔΔ: jb.ΔⲆΔᐃⲆⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Bamboo Bag"
            }, {
                id: 53,
                ΔᐃⲆ: jb.ⵠⵠᐃΔⵠⵠⵠ,
                ⵠΔΔ: jb.ΔⲆᐃⵠⵠᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Mummy Bag"
            }, {
                id: 58,
                ΔᐃⲆ: jb.ⲆΔⲆⵠⵠᐃΔ,
                ⵠΔΔ: jb.ⲆΔⵠⵠⲆⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "MADBalgouthi",
                name: "Watermelon Bag"
            }, {
                id: 60,
                ΔᐃⲆ: jb.ⵠⲆⲆΔᐃⲆᐃ,
                ⵠΔΔ: jb.ⲆΔᐃⲆⵠⲆⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Garlic Bag"
            }, {
                id: 61,
                ΔᐃⲆ: jb.ⵠⲆᐃΔΔⲆⵠ,
                ⵠΔΔ: jb.ⵠΔΔⲆΔⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Pumpkin Bag"
            }, {
                id: 64,
                ΔᐃⲆ: jb.ⵠΔΔΔⵠᐃⲆ,
                ⵠΔΔ: jb.ᐃⵠᐃᐃᐃⵠᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "upfiz",
                name: "Oil Barel bag"
            }, {
                id: 67,
                ΔᐃⲆ: jb.ⵠⵠᐃⵠⵠᐃⲆ,
                ⵠΔΔ: jb.ᐃⵠⲆΔⲆⲆⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Tree Bag"
            }, {
                id: 70,
                ΔᐃⲆ: jb.ᐃⵠᐃⲆⲆⵠⵠ,
                ⵠΔΔ: jb.ΔⵠᐃᐃⲆⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Lit Portable Furnace"
            }, {
                id: 72,
                ΔᐃⲆ: jb.ⵠᐃⵠⲆᐃΔⲆ,
                ⵠΔΔ: jb.ⲆᐃⲆᐃⲆᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Christmas Berry Bush Bag"
            }, {
                id: 73,
                ΔᐃⲆ: jb.ⵠᐃⵠΔᐃⲆⵠ,
                ⵠΔΔ: jb.ⵠⵠᐃᐃⵠⵠᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Berry Bush Bag"
            }, {
                id: 74,
                ΔᐃⲆ: jb.ᐃΔΔⵠⲆⵠᐃ,
                ⵠΔΔ: jb.ⵠⲆⵠΔᐃΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Fall Berry Bush Bag"
            }, {
                id: 76,
                ΔᐃⲆ: jb.ᐃⵠΔᐃΔⵠᐃ,
                ⵠΔΔ: jb.ΔᐃΔᐃⵠΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Reclaimed Bag"
            }, {
                id: 14,
                ΔᐃⲆ: jb.ⲆⲆᐃⵠⲆⲆΔ,
                ⵠΔΔ: jb.ⵠⵠⲆΔⵠΔⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "a Rabbit in my Bag"
            }, {
                id: 15,
                ΔᐃⲆ: jb.ΔᐃⵠⲆΔΔΔ,
                ⵠΔΔ: jb.ᐃᐃΔⲆΔᐃⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Bird's nest"
            }, {
                id: 16,
                ΔᐃⲆ: jb.ΔΔⲆⵠᐃⵠΔ,
                ⵠΔΔ: jb.ΔⵠᐃΔΔⵠΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "a Fish on your Back"
            }, {
                id: 17,
                ΔᐃⲆ: jb.ⵠⲆΔΔΔⵠᐃ,
                ⵠΔΔ: jb.ΔΔᐃᐃⲆⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "a Squirrel in my Bag"
            }, {
                id: 22,
                ΔᐃⲆ: jb.ⵠᐃΔⵠᐃⵠΔ,
                ⵠΔΔ: jb.ΔⵠΔᐃΔΔⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io ",
                name: "Diamond Carrier"
            }, {
                id: 12,
                ΔᐃⲆ: jb.ⲆⵠΔΔⲆΔᐃ,
                ⵠΔΔ: jb.ᐃⵠᐃⲆⵠⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Resources Bag"
            }, {
                id: 32,
                ΔᐃⲆ: jb.ᐃᐃᐃⵠᐃΔΔ,
                ⵠΔΔ: jb.ⵠⲆⵠⵠᐃⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Diamond Pickaxe Bag"
            }, {
                id: 40,
                ΔᐃⲆ: jb.ⵠΔⲆΔᐃᐃⲆ,
                ⵠΔΔ: jb.ΔⲆΔΔⲆΔΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Bag with Diamond Swords"
            }, {
                id: 45,
                ΔᐃⲆ: jb.ⲆᐃⲆᐃᐃⲆᐃ,
                ⵠΔΔ: jb.ⲆⵠⲆⵠᐃΔᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "My Cake Bag"
            }, {
                id: 46,
                ΔᐃⲆ: jb.ⵠⲆⵠⵠⲆΔᐃ,
                ⵠΔΔ: jb.ⵠⵠⵠᐃΔⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "My Christmas Cake Bag"
            }, {
                id: 52,
                ΔᐃⲆ: jb.ᐃⲆᐃⵠⵠΔⲆ,
                ⵠΔΔ: jb.ᐃⵠΔⵠΔᐃⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "MADBalgouthi",
                name: "Fish Bag"
            }, {
                id: 65,
                ΔᐃⲆ: jb.ⲆᐃᐃΔⲆⵠΔ,
                ⵠΔΔ: jb.ⵠΔⵠᐃᐃⲆⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Cloud Bag"
            }, {
                id: 68,
                ΔᐃⲆ: jb.ᐃΔᐃᐃᐃᐃΔ,
                ⵠΔΔ: jb.ⵠⵠⲆᐃΔⲆΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Bee Bag"
            }, {
                id: 77,
                ΔᐃⲆ: jb.ⵠⵠⵠⲆⲆⵠΔ,
                ⵠΔΔ: jb.ΔⵠΔΔⲆⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Bag and Bedroll"
            }, {
                id: 80,
                ΔᐃⲆ: jb.ⲆΔᐃⵠⵠⵠΔ,
                ⵠΔΔ: jb.ΔⵠᐃⲆⲆᐃΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Peasant's Bag"
            }, {
                id: 81,
                ΔᐃⲆ: jb.ⲆⵠΔⵠⵠᐃΔ,
                ⵠΔΔ: jb.ⵠᐃΔⵠⵠΔⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Probably Stolen Bag"
            }, {
                id: 48,
                ΔᐃⲆ: jb.ⵠⵠᐃⲆⵠΔᐃ,
                ⵠΔΔ: jb.ΔⵠΔⲆⵠⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "fatant",
                name: "Natural Bag"
            }, {
                id: 23,
                ΔᐃⲆ: jb.ᐃΔᐃⲆΔⲆΔ,
                ⵠΔΔ: jb.ⵠᐃᐃⲆᐃᐃΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io ",
                name: "Amethyst Carrier"
            }, {
                id: 25,
                ΔᐃⲆ: jb.ΔᐃΔΔᐃᐃΔ,
                ⵠΔΔ: jb.ᐃⵠⲆΔΔᐃⵠ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "eogito",
                name: "Amethyst Pickaxe Bag"
            }, {
                id: 28,
                ΔᐃⲆ: jb.ΔⲆΔⵠᐃⵠΔ,
                ⵠΔΔ: jb.ⲆⲆᐃᐃⵠΔⵠ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Your Baby"
            }, {
                id: 33,
                ΔᐃⲆ: jb.ΔᐃⵠⵠΔⲆⵠ,
                ⵠΔΔ: jb.ΔⲆⵠⵠᐃᐃΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Tropical Bag"
            }, {
                id: 43,
                ΔᐃⲆ: jb.ⵠΔⵠΔⵠⲆᐃ,
                ⵠΔΔ: jb.ΔⲆᐃᐃⲆⵠᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "eogito",
                name: "Bag with Amethyst Swords"
            }, {
                id: 35,
                ΔᐃⲆ: jb.ⲆⲆⵠᐃⲆΔᐃ,
                ⵠΔΔ: jb.ΔᐃᐃΔᐃᐃΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "eogito",
                name: "Ice Bag"
            }, {
                id: 50,
                ΔᐃⲆ: jb.ᐃⲆΔⵠᐃⵠΔ,
                ⵠΔΔ: jb.ΔΔᐃΔΔⲆΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Thornbush Bag"
            }, {
                id: 56,
                ΔᐃⲆ: jb.ⲆΔᐃΔΔⵠΔ,
                ⵠΔΔ: jb.ᐃⵠΔⲆᐃⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "eogito",
                name: "Autumn Bag"
            }, {
                id: 57,
                ΔᐃⲆ: jb.ᐃⲆⲆⲆⲆΔⵠ,
                ⵠΔΔ: jb.ΔΔΔᐃⵠⵠⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Dino Egg Bag"
            }, {
                id: 66,
                ΔᐃⲆ: jb.ⵠⵠⵠⵠⵠᐃΔ,
                ⵠΔΔ: jb.ΔΔⵠⵠᐃⵠᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Magic Cloud Bag"
            }, {
                id: 69,
                ΔᐃⲆ: jb.ᐃⵠⲆᐃΔΔⵠ,
                ⵠΔΔ: jb.ᐃᐃᐃⵠⲆⲆΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Chest Bag"
            }, {
                id: 75,
                ΔᐃⲆ: jb.ΔᐃⵠⵠⵠⲆⲆ,
                ⵠΔΔ: jb.ΔⲆᐃⲆᐃⲆⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Spectum Bag"
            }, {
                id: 79,
                ΔᐃⲆ: jb.ΔⵠᐃΔⵠⲆᐃ,
                ⵠΔΔ: jb.ⵠᐃᐃΔᐃⵠΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Winter Peasant's Bag"
            }, {
                id: 31,
                ΔᐃⲆ: jb.ΔⲆΔΔⲆᐃⲆ,
                ⵠΔΔ: jb.ⵠⲆⵠΔⵠⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io ",
                name: "Reidite Carrier"
            }, {
                id: 18,
                ΔᐃⲆ: jb.ΔΔⲆⲆΔᐃᐃ,
                ⵠΔΔ: jb.ᐃᐃⵠⲆⲆᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Winter",
                name: "Lava Bag"
            }, {
                id: 49,
                ΔᐃⲆ: jb.ᐃΔⲆⲆⵠΔᐃ,
                ⵠΔΔ: jb.ⵠⵠⲆⲆⵠⵠᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Lava Bag 2"
            }, {
                id: 36,
                ΔᐃⲆ: jb.ⲆⵠΔⲆᐃΔᐃ,
                ⵠΔΔ: jb.ΔⲆⲆᐃⲆΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Dragon Bag"
            }, {
                id: 55,
                ΔᐃⲆ: jb.ⲆᐃΔΔᐃⵠⲆ,
                ⵠΔΔ: jb.ⲆⵠᐃⲆᐃⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Winter Ice Bag"
            }, {
                id: 26,
                ΔᐃⲆ: jb.ⲆΔᐃᐃΔⵠΔ,
                ⵠΔΔ: jb.ᐃᐃⵠΔΔⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Reidite Pickaxe Bag"
            }, {
                id: 27,
                ΔᐃⲆ: jb.ᐃⵠⲆⲆⵠⵠⲆ,
                ⵠΔΔ: jb.ᐃΔᐃⲆⵠⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Octopus Bowl"
            }, {
                id: 34,
                ΔᐃⲆ: jb.ⲆᐃᐃᐃⵠⵠΔ,
                ⵠΔΔ: jb.ⲆΔΔⲆΔⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Cave Bag"
            }, {
                id: 42,
                ΔᐃⲆ: jb.ⲆⵠᐃΔΔⲆⵠ,
                ⵠΔΔ: jb.ᐃⵠᐃⵠⵠᐃⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Bag with Reidite Swords"
            }, {
                id: 63,
                ΔᐃⲆ: jb.ⵠΔΔⲆΔΔΔ,
                ⵠΔΔ: jb.ᐃⲆⵠΔΔΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Engineer Bag"
            }],
            ⵠⵠΔᐃⵠ: [{
                id: 0,
                ΔᐃⲆ: jb.ⵠᐃΔⵠⵠΔΔ,
                ⵠΔΔ: jb.ΔⵠᐃⲆᐃⵠᐃ,
                ᐃⵠⵠ: Mb.ⲆΔⲆᐃᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Wooden Dead Box"
            }, {
                id: 1,
                ΔᐃⲆ: jb.ΔΔⲆᐃΔΔΔ,
                ⵠΔΔ: jb.ᐃΔᐃΔᐃⲆᐃ,
                ᐃⵠⵠ: Mb.ⲆΔⲆᐃᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Hidden item"
            }, {
                id: 2,
                ΔᐃⲆ: jb.ΔΔⵠΔΔΔⲆ,
                ⵠΔΔ: jb.ⵠᐃΔⵠⵠΔᐃ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Wooden Box 1"
            }, {
                id: 3,
                ΔᐃⲆ: jb.ⵠΔᐃᐃΔᐃᐃ,
                ⵠΔΔ: jb.ΔᐃⲆΔⵠᐃΔ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Wooden Box 2"
            }, {
                id: 4,
                ΔᐃⲆ: jb.ⵠⲆⲆᐃΔⲆⲆ,
                ⵠΔΔ: jb.ᐃᐃᐃᐃⵠⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Wooden Box 3"
            }, {
                id: 5,
                ΔᐃⲆ: jb.ⲆⲆΔᐃΔⵠⲆ,
                ⵠΔΔ: jb.ⲆᐃⵠᐃⲆᐃⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Broken Wooden Box"
            }, {
                id: 6,
                ΔᐃⲆ: jb.ΔⲆᐃⵠΔⲆΔ,
                ⵠΔΔ: jb.ᐃⲆᐃᐃΔⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Wooden Box"
            }, {
                id: 7,
                ΔᐃⲆ: jb.ⵠᐃⵠⲆΔΔⵠ,
                ⵠΔΔ: jb.ⲆⵠⵠⲆⵠᐃΔ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Wooden Battle Box"
            }, {
                id: 8,
                ΔᐃⲆ: jb.ΔΔⵠΔΔΔΔ,
                ⵠΔΔ: jb.ⵠᐃΔΔⵠΔⲆ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Wooden Box with a Cross"
            }, {
                id: 9,
                ΔᐃⲆ: jb.ΔⲆⲆΔᐃⵠⵠ,
                ⵠΔΔ: jb.ᐃⵠⵠᐃᐃᐃⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Wooden Box with Bubbles"
            }, {
                id: 10,
                ΔᐃⲆ: jb.ⵠᐃⵠⵠⲆΔΔ,
                ⵠΔΔ: jb.ⵠⵠᐃⵠⲆⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Wooden Box with Eyes"
            }, {
                id: 11,
                ΔᐃⲆ: jb.ᐃⲆⵠⲆΔΔⵠ,
                ⵠΔΔ: jb.ᐃᐃⲆᐃΔⵠΔ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Dark Wooden Box"
            }, {
                id: 38,
                ΔᐃⲆ: jb.ⵠΔᐃⲆΔΔⵠ,
                ⵠΔΔ: jb.ᐃᐃⵠΔΔⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Weddlz",
                name: "Noob Box"
            }, {
                id: 12,
                ΔᐃⲆ: jb.ⵠΔΔᐃΔᐃᐃ,
                ⵠΔΔ: jb.ΔΔΔⵠΔΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Wooden and Stone Box"
            }, {
                id: 14,
                ΔᐃⲆ: jb.ⲆΔᐃΔⲆΔΔ,
                ⵠΔΔ: jb.ΔⵠᐃⵠΔⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Star Box 1"
            }, {
                id: 15,
                ΔᐃⲆ: jb.ΔⲆⲆⲆⵠᐃΔ,
                ⵠΔΔ: jb.ⲆΔⲆⵠⵠⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Star Box 2"
            }, {
                id: 27,
                ΔᐃⲆ: jb.ⲆⵠᐃⵠⲆᐃΔ,
                ⵠΔΔ: jb.ⵠⵠᐃᐃᐃᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Flower Box"
            }, {
                id: 46,
                ΔᐃⲆ: jb.ᐃΔΔΔΔᐃⲆ,
                ⵠΔΔ: jb.ᐃⵠΔΔⲆᐃⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "MADBalgouthi",
                name: "Blue Box"
            }, {
                id: 75,
                ΔᐃⲆ: jb.ⲆᐃΔΔΔⵠᐃ,
                ⵠΔΔ: jb.ΔᐃᐃⲆⵠᐃⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Night Stars Crate"
            }, {
                id: 19,
                ΔᐃⲆ: jb.ᐃⲆΔᐃⵠⲆⵠ,
                ⵠΔΔ: jb.ⲆΔᐃΔⵠⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Beehive"
            }, {
                id: 13,
                ΔᐃⲆ: jb.ⲆΔᐃΔⲆΔⲆ,
                ⵠΔΔ: jb.ⵠᐃᐃⵠΔⵠᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Wooden and Golden Box"
            }, {
                id: 21,
                ΔᐃⲆ: jb.ⲆΔⵠᐃᐃᐃⲆ,
                ⵠΔΔ: jb.ⲆⵠⵠⵠᐃⲆᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Gravestone"
            }, {
                id: 25,
                ΔᐃⲆ: jb.ΔⵠᐃᐃΔⲆⲆ,
                ⵠΔΔ: jb.ᐃⵠⵠΔΔΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Communist",
                name: "Sky Box"
            }, {
                id: 29,
                ΔᐃⲆ: jb.ᐃΔᐃⲆᐃⲆⲆ,
                ⵠΔΔ: jb.ΔⲆΔⵠΔⲆᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Winter",
                name: "Golden Box"
            }, {
                id: 34,
                ΔᐃⲆ: jb.ⵠⲆⲆᐃᐃⲆⲆ,
                ⵠΔΔ: jb.ⵠⵠΔΔᐃΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Communist",
                name: "Water Crate"
            }, {
                id: 35,
                ΔᐃⲆ: jb.ΔᐃΔᐃⵠᐃᐃ,
                ⵠΔΔ: jb.ΔⲆᐃᐃΔᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Communist",
                name: "Glass Crate"
            }, {
                id: 70,
                ΔᐃⲆ: jb.ⵠⵠⲆᐃⲆⲆᐃ,
                ⵠΔΔ: jb.ΔⵠᐃΔⵠⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "CrysTal",
                name: "Crystal Sky Box"
            }, {
                id: 74,
                ΔᐃⲆ: jb.ⲆⲆⲆⵠΔⲆⲆ,
                ⵠΔΔ: jb.ⲆⵠΔᐃΔⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Reclaimed Crate"
            }, {
                id: 77,
                ΔᐃⲆ: jb.ᐃⵠⲆⲆΔᐃⲆ,
                ⵠΔΔ: jb.ⵠΔᐃⲆΔᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Workplace Accident"
            }, {
                id: 16,
                ΔᐃⲆ: jb.ᐃⵠΔΔΔⵠΔ,
                ⵠΔΔ: jb.ⲆΔⵠᐃᐃⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Wooden and Diamond Box"
            }, {
                id: 18,
                ΔᐃⲆ: jb.ᐃⲆⲆΔΔⵠⲆ,
                ⵠΔΔ: jb.ⵠⵠᐃⲆⵠⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Don't Hit Me"
            }, {
                id: 26,
                ΔᐃⲆ: jb.ⵠΔⲆΔᐃⵠΔ,
                ⵠΔΔ: jb.ΔⵠᐃⵠᐃⲆⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Underwater Box"
            }, {
                id: 31,
                ΔᐃⲆ: jb.ΔᐃΔⲆᐃⲆΔ,
                ⵠΔΔ: jb.ᐃΔⲆⵠⵠᐃΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Communist",
                name: "Items Pile"
            }, {
                id: 32,
                ΔᐃⲆ: jb.ⲆⲆΔΔⲆΔᐃ,
                ⵠΔΔ: jb.ᐃⵠᐃⲆᐃΔᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Cake Box"
            }, {
                id: 33,
                ΔᐃⲆ: jb.ΔᐃⵠⲆⲆⵠⲆ,
                ⵠΔΔ: jb.ΔⲆΔⵠᐃᐃⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Christmas Cake Box"
            }, {
                id: 36,
                ΔᐃⲆ: jb.ᐃΔᐃⵠᐃⲆΔ,
                ⵠΔΔ: jb.ΔᐃⵠΔⵠⲆΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Fukss",
                name: "Crab Box"
            }, {
                id: 42,
                ΔᐃⲆ: jb.ⲆΔⵠⵠⲆΔᐃ,
                ⵠΔΔ: jb.ΔᐃᐃᐃΔᐃᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "MADBalgouthi",
                name: "Fishing Box"
            }, {
                id: 72,
                ΔᐃⲆ: jb.ᐃⲆⲆᐃⵠΔᐃ,
                ⵠΔΔ: jb.ᐃΔⵠΔᐃⵠᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Storage Machine"
            }, {
                id: 22,
                ΔᐃⲆ: jb.ΔᐃⵠᐃΔΔΔ,
                ⵠΔΔ: jb.ⲆΔᐃΔⵠᐃⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Let me out of here"
            }, {
                id: 17,
                ΔᐃⲆ: jb.ⵠΔΔⲆⲆⵠⵠ,
                ⵠΔΔ: jb.ⲆᐃⲆⲆΔⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "eogito",
                name: "Wooden and Amethyst Box"
            }, {
                id: 24,
                ΔᐃⲆ: jb.ⲆᐃᐃⲆΔᐃᐃ,
                ⵠΔΔ: jb.ⵠΔⲆⲆΔⵠᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Aquarium"
            }, {
                id: 28,
                ΔᐃⲆ: jb.ᐃⵠΔⲆᐃΔΔ,
                ⵠΔΔ: jb.ΔⲆᐃⲆᐃᐃⵠ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "eogito",
                name: "Gift Box"
            }, {
                id: 40,
                ΔᐃⲆ: jb.ⵠΔᐃᐃᐃⵠΔ,
                ⵠΔΔ: jb.ᐃΔⲆᐃⲆΔⵠ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "MADBalgouthi",
                name: "Open Watermelon Box"
            }, {
                id: 41,
                ΔᐃⲆ: jb.ΔⵠⵠΔᐃⵠᐃ,
                ⵠΔΔ: jb.ⲆΔⵠⲆⲆⲆΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "MADBalgouthi",
                name: "Watermelon Box"
            }, {
                id: 39,
                ΔᐃⲆ: jb.ⵠⵠⵠⵠⲆΔⲆ,
                ⵠΔΔ: jb.ᐃⵠΔΔⲆᐃⵠ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Thornbush Box"
            }, {
                id: 43,
                ΔᐃⲆ: jb.ⲆᐃⲆⵠᐃᐃᐃ,
                ⵠΔΔ: jb.ⲆᐃⲆΔΔⲆⵠ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "eogito",
                name: "Rabbit in the Box"
            }, {
                id: 47,
                ΔᐃⲆ: jb.ΔΔⵠΔⵠᐃⵠ,
                ⵠΔΔ: jb.ⵠΔⲆⵠᐃⵠⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Garlic Plot"
            }, {
                id: 48,
                ΔᐃⲆ: jb.ⲆⵠⲆΔⵠⲆΔ,
                ⵠΔΔ: jb.ⵠᐃⲆΔⲆᐃⵠ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Pumpkin Plot"
            }, {
                id: 78,
                ΔᐃⲆ: jb.ⵠⵠΔⵠΔᐃⲆ,
                ⵠΔΔ: jb.ⵠⵠᐃⲆΔⵠΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Spectrum Portal"
            }, {
                id: 45,
                ΔᐃⲆ: jb.ΔⵠᐃⲆⵠᐃⵠ,
                ⵠΔΔ: jb.ⲆΔⲆⵠⵠᐃⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Autumn Box"
            }, {
                id: 44,
                ΔᐃⲆ: jb.ΔⲆᐃⲆⲆⵠⵠ,
                ⵠΔΔ: jb.ⵠᐃⵠᐃᐃΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Winter Box"
            }, {
                id: 20,
                ΔᐃⲆ: jb.ΔⲆⲆⵠΔΔⲆ,
                ⵠΔΔ: jb.ΔⲆᐃΔⲆⲆⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Metal and Reidite Box"
            }, {
                id: 23,
                ΔᐃⲆ: jb.ΔΔⵠᐃΔΔⲆ,
                ⵠΔΔ: jb.ΔⵠᐃⲆᐃΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Kraken Box"
            }, {
                id: 30,
                ΔᐃⲆ: jb.ⲆΔΔⵠΔⵠⲆ,
                ⵠΔΔ: jb.ᐃᐃΔⲆᐃⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Winter",
                name: "Lava Box"
            }, {
                id: 37,
                ΔᐃⲆ: jb.ⲆᐃⲆⵠⲆᐃΔ,
                ⵠΔΔ: jb.ⲆⵠΔⲆΔΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Lava Box 2"
            }, {
                id: 49,
                ΔᐃⲆ: jb.ⲆⵠⲆⲆΔⲆᐃ,
                ⵠΔΔ: jb.ⵠΔⲆⵠⵠⲆᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Rabbit"
            }, {
                id: 50,
                ΔᐃⲆ: jb.ⵠΔᐃⲆΔⵠⲆ,
                ⵠΔΔ: jb.ᐃΔᐃΔᐃΔΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Wolf"
            }, {
                id: 51,
                ΔᐃⲆ: jb.ⵠΔᐃⲆⵠⵠⵠ,
                ⵠΔΔ: jb.ⲆᐃᐃⲆⲆⵠᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Spider"
            }, {
                id: 52,
                ΔᐃⲆ: jb.ᐃᐃᐃᐃⲆⵠⲆ,
                ⵠΔΔ: jb.ⵠΔⵠⲆᐃΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Hawk"
            }, {
                id: 53,
                ΔᐃⲆ: jb.ⵠᐃⲆᐃⵠᐃΔ,
                ⵠΔΔ: jb.ⲆᐃⵠⲆⵠⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Bear"
            }, {
                id: 54,
                ΔᐃⲆ: jb.ᐃⵠⵠΔⵠΔⲆ,
                ⵠΔΔ: jb.ΔΔΔΔⵠⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Fox"
            }, {
                id: 55,
                ΔᐃⲆ: jb.ⲆΔⲆⵠⲆⲆΔ,
                ⵠΔΔ: jb.ΔⵠᐃΔⲆⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Baby Mammoth"
            }, {
                id: 56,
                ΔᐃⲆ: jb.ᐃⲆᐃΔᐃⲆⵠ,
                ⵠΔΔ: jb.ⲆΔΔⵠⲆΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Mammoth"
            }, {
                id: 57,
                ΔᐃⲆ: jb.ⵠᐃⲆⲆⲆᐃⵠ,
                ⵠΔΔ: jb.ⲆᐃΔⵠᐃⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Sandworm"
            }, {
                id: 58,
                ΔᐃⲆ: jb.ΔⲆᐃᐃⲆᐃⲆ,
                ⵠΔΔ: jb.ᐃⲆΔΔⵠᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Vulture"
            }, {
                id: 59,
                ΔᐃⲆ: jb.ΔⵠⵠΔΔΔΔ,
                ⵠΔΔ: jb.ⵠⲆΔⵠⲆⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Kraken"
            }, {
                id: 60,
                ΔᐃⲆ: jb.ⵠⲆΔⲆᐃΔⲆ,
                ⵠΔΔ: jb.ⵠⲆᐃᐃΔᐃⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Piranha"
            }, {
                id: 61,
                ΔᐃⲆ: jb.ᐃⲆΔΔΔⵠΔ,
                ⵠΔΔ: jb.ⵠⲆᐃΔΔᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Baby Dragon"
            }, {
                id: 62,
                ΔᐃⲆ: jb.ⵠΔⵠᐃᐃΔΔ,
                ⵠΔΔ: jb.ᐃⵠᐃᐃᐃᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Baby Lava"
            }, {
                id: 63,
                ΔᐃⲆ: jb.ⲆⵠᐃⲆⵠⲆᐃ,
                ⵠΔΔ: jb.ᐃᐃᐃⲆᐃⲆᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Dragon"
            }, {
                id: 64,
                ΔᐃⲆ: jb.ᐃᐃⲆΔᐃΔΔ,
                ⵠΔΔ: jb.ⲆΔⵠΔᐃΔΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Penguin"
            }, {
                id: 65,
                ΔᐃⲆ: jb.ᐃᐃᐃⵠⵠⵠΔ,
                ⵠΔΔ: jb.ΔⵠⵠᐃⲆⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Lava Dragon"
            }, {
                id: 66,
                ΔᐃⲆ: jb.ΔᐃⵠⲆⲆⵠᐃ,
                ⵠΔΔ: jb.ΔⲆⲆⵠⵠᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Boar"
            }, {
                id: 67,
                ΔᐃⲆ: jb.ΔⲆΔΔΔΔᐃ,
                ⵠΔΔ: jb.ᐃⲆⵠⵠΔⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Fire mob"
            }, {
                id: 68,
                ΔᐃⲆ: jb.ᐃᐃΔⲆΔⲆᐃ,
                ⵠΔΔ: jb.ⲆⲆᐃΔΔⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the Crab"
            }, {
                id: 69,
                ΔᐃⲆ: jb.ⲆᐃΔᐃΔᐃⲆ,
                ⵠΔΔ: jb.ΔⵠΔⲆⲆⲆⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Box of the King Crab"
            }, {
                id: 71,
                ΔᐃⲆ: jb.ΔⵠΔⵠᐃΔΔ,
                ⵠΔΔ: jb.ⵠΔΔΔⲆΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Dragon Box"
            }, {
                id: 73,
                ΔᐃⲆ: jb.ΔⲆⵠΔᐃⵠΔ,
                ⵠΔΔ: jb.ⲆΔⲆⲆΔΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Rekt"
            }, {
                id: 76,
                ΔᐃⲆ: jb.ΔⵠⲆᐃᐃᐃⵠ,
                ⵠΔΔ: jb.ⵠᐃΔⲆⲆᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Sleeping Tamon Dragon"
            }],
            ΔᐃᐃᐃⲆ: [{
                id: 0,
                ΔᐃⲆ: jb.ΔⵠⲆΔΔᐃΔ,
                ⵠΔΔ: jb.ⵠⲆΔⲆᐃᐃⲆ,
                ᐃⵠⵠ: Mb.ⲆΔⲆᐃᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Book 1"
            }, {
                id: 1,
                ΔᐃⲆ: jb.ⵠⲆⲆΔⲆᐃᐃ,
                ⵠΔΔ: jb.ΔⲆᐃΔᐃⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Book 2"
            }, {
                id: 2,
                ΔᐃⲆ: jb.ⵠⵠⲆⲆᐃⵠΔ,
                ⵠΔΔ: jb.ΔΔⲆΔᐃᐃᐃ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Book 3"
            }, {
                id: 3,
                ΔᐃⲆ: jb.ⵠΔΔⵠⵠΔᐃ,
                ⵠΔΔ: jb.ᐃⲆⵠᐃΔⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Book 4"
            }, {
                id: 4,
                ΔᐃⲆ: jb.ᐃΔⲆⲆⲆⲆΔ,
                ⵠΔΔ: jb.ᐃΔΔⵠⵠⵠⲆ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Damaged Book 1"
            }, {
                id: 18,
                ΔᐃⲆ: jb.ⵠᐃⵠⵠᐃⵠⲆ,
                ⵠΔΔ: jb.ΔⵠΔⲆΔΔΔ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "SeveR",
                name: "Damaged Book 2"
            }, {
                id: 5,
                ΔᐃⲆ: jb.ⲆΔᐃⵠⵠᐃΔ,
                ⵠΔΔ: jb.ⲆⲆΔⵠᐃΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Doctorpus",
                name: "Scroll"
            }, {
                id: 6,
                ΔᐃⲆ: jb.ΔⲆⵠᐃΔᐃᐃ,
                ⵠΔΔ: jb.ᐃᐃⵠᐃᐃΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Doctorpus",
                name: "Clipboard"
            }, {
                id: 7,
                ΔᐃⲆ: jb.ⲆᐃᐃⲆⲆᐃⲆ,
                ⵠΔΔ: jb.ⵠⲆⵠᐃΔᐃⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Seed Book"
            }, {
                id: 20,
                ΔᐃⲆ: jb.ⲆⵠΔᐃⵠᐃΔ,
                ⵠΔΔ: jb.ΔⲆⲆΔⵠⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Camo Book"
            }, {
                id: 24,
                ΔᐃⲆ: jb.ⵠⲆᐃᐃⵠΔΔ,
                ⵠΔΔ: jb.ΔⵠⲆᐃⵠⲆⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Communist",
                name: "Stone Tablet"
            }, {
                id: 47,
                ΔᐃⲆ: jb.ΔⲆⲆⲆⲆⵠⵠ,
                ⵠΔΔ: jb.ⵠΔⵠⵠⵠⵠᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Reclaimed Book"
            }, {
                id: 10,
                ΔᐃⲆ: jb.ᐃᐃⵠᐃⵠⵠΔ,
                ⵠΔΔ: jb.ᐃΔΔᐃᐃΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Star Book"
            }, {
                id: 8,
                ΔᐃⲆ: jb.ΔΔⲆⵠⲆⵠⵠ,
                ⵠΔΔ: jb.ⵠᐃⵠⵠᐃΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Gold Book"
            }, {
                id: 15,
                ΔᐃⲆ: jb.ⵠⲆΔΔΔᐃΔ,
                ⵠΔΔ: jb.ⲆⵠΔΔⵠᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Old Mysterious Paper"
            }, {
                id: 17,
                ΔᐃⲆ: jb.ⲆⵠᐃᐃΔⲆΔ,
                ⵠΔΔ: jb.ⵠⲆⵠⲆᐃⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Gold Engraving"
            }, {
                id: 25,
                ΔᐃⲆ: jb.ⲆⲆΔᐃᐃᐃⵠ,
                ⵠΔΔ: jb.ΔᐃᐃΔⲆΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "fatant",
                name: "Ant Book"
            }, {
                id: 32,
                ΔᐃⲆ: jb.ⲆΔΔᐃⲆᐃⲆ,
                ⵠΔΔ: jb.ᐃΔᐃⲆΔⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Mummy Book"
            }, {
                id: 37,
                ΔᐃⲆ: jb.ⲆⲆⲆⲆᐃΔⲆ,
                ⵠΔΔ: jb.ᐃⵠΔⲆⵠᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Garlic Book"
            }, {
                id: 38,
                ΔᐃⲆ: jb.ⲆΔⵠⵠⵠΔⲆ,
                ⵠΔΔ: jb.ᐃᐃᐃΔᐃᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Pumpkin Book"
            }, {
                id: 39,
                ΔᐃⲆ: jb.ᐃᐃⵠᐃΔⵠⲆ,
                ⵠΔΔ: jb.ⵠⲆΔⵠⲆⵠᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Christmas Tree Book"
            }, {
                id: 11,
                ΔᐃⲆ: jb.ᐃⵠᐃᐃᐃⵠⵠ,
                ⵠΔΔ: jb.ⵠⵠΔⲆⵠⵠᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Diamond Book"
            }, {
                id: 9,
                ΔᐃⲆ: jb.ⵠΔᐃⵠⲆᐃⲆ,
                ⵠΔΔ: jb.ΔΔⵠΔΔⵠᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Obscure Book"
            }, {
                id: 16,
                ΔᐃⲆ: jb.ⲆⵠΔΔⵠⲆⲆ,
                ⵠΔΔ: jb.ΔᐃΔᐃᐃⵠΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Rolled Parchment"
            }, {
                id: 22,
                ΔᐃⲆ: jb.ᐃⵠⲆΔⵠⲆΔ,
                ⵠΔΔ: jb.ⲆΔΔⵠⲆΔΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Cake Book"
            }, {
                id: 23,
                ΔᐃⲆ: jb.ᐃⲆᐃᐃΔⵠⲆ,
                ⵠΔΔ: jb.ⵠᐃΔΔΔΔⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Christmas Cake Book"
            }, {
                id: 30,
                ΔᐃⲆ: jb.ⲆᐃΔⲆⲆⵠⵠ,
                ⵠΔΔ: jb.ⵠᐃΔⵠΔⵠᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "MADBalgouthi",
                name: "Fish Book"
            }, {
                id: 31,
                ΔᐃⲆ: jb.ΔⵠⲆⵠⵠⵠⲆ,
                ⵠΔΔ: jb.ΔⲆΔΔᐃⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "CrysTal",
                name: "Once upon a time"
            }, {
                id: 48,
                ΔᐃⲆ: jb.ⲆΔⲆᐃⲆⲆΔ,
                ⵠΔΔ: jb.ᐃⵠᐃᐃᐃⲆⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Chrono Clock"
            }, {
                id: 49,
                ΔᐃⲆ: jb.ⵠᐃⵠⲆⲆᐃⲆ,
                ⵠΔΔ: jb.ⵠⲆᐃⲆⵠΔⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Recipe Book"
            }, {
                id: 13,
                ΔᐃⲆ: jb.ⵠᐃⵠⵠⲆΔⲆ,
                ⵠΔΔ: jb.ⵠⲆᐃᐃΔΔΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "eogito",
                name: "Amethyst Book"
            }, {
                id: 28,
                ΔᐃⲆ: jb.ⵠⵠΔⲆΔᐃᐃ,
                ⵠΔΔ: jb.ΔⲆᐃΔⵠΔᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "eogito",
                name: "Paint Pallet"
            }, {
                id: 29,
                ΔᐃⲆ: jb.ᐃᐃⲆΔᐃⵠΔ,
                ⵠΔΔ: jb.ⵠᐃⲆΔⵠⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "CrysTal",
                name: "Watermelon Book"
            }, {
                id: 27,
                ΔᐃⲆ: jb.ⵠⵠᐃⲆᐃΔΔ,
                ⵠΔΔ: jb.ⵠⲆᐃⵠⵠⵠᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Thornbush Book"
            }, {
                id: 35,
                ΔᐃⲆ: jb.ΔᐃⲆᐃⲆⵠΔ,
                ⵠΔΔ: jb.ᐃΔΔᐃᐃᐃᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Menu"
            }, {
                id: 36,
                ΔᐃⲆ: jb.ⵠᐃⵠᐃⵠⲆᐃ,
                ⵠΔΔ: jb.ⲆⲆᐃΔⲆⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "CrysTal",
                name: "Lover Letter"
            }, {
                id: 40,
                ΔᐃⲆ: jb.ᐃᐃᐃᐃⵠⲆⵠ,
                ⵠΔΔ: jb.ΔⵠᐃⲆᐃⵠⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Fresh-Baked Cookies"
            }, {
                id: 41,
                ΔᐃⲆ: jb.ᐃΔᐃᐃⲆⲆⲆ,
                ⵠΔΔ: jb.ΔΔᐃⲆΔⲆΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Inside, there is just a book."
            }, {
                id: 45,
                ΔᐃⲆ: jb.ⵠᐃⵠᐃⲆΔⲆ,
                ⵠΔΔ: jb.ⲆΔⲆΔⲆΔΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Crafting Machine"
            }, {
                id: 33,
                ΔᐃⲆ: jb.ⵠᐃⵠⵠᐃⲆᐃ,
                ⵠΔΔ: jb.ΔᐃΔᐃⲆΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Winter Book"
            }, {
                id: 34,
                ΔᐃⲆ: jb.ⲆⵠΔⲆΔⵠⲆ,
                ⵠΔΔ: jb.ᐃᐃΔⲆⵠⵠᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Autumn Book"
            }, {
                id: 14,
                ΔᐃⲆ: jb.ⲆᐃⲆⲆⵠΔΔ,
                ⵠΔΔ: jb.ᐃΔⲆⵠⲆᐃⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Reidite Book"
            }, {
                id: 12,
                ΔᐃⲆ: jb.ⵠⲆΔᐃΔⵠᐃ,
                ⵠΔΔ: jb.ᐃⵠᐃⵠⵠⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Winter",
                name: "Lava Book"
            }, {
                id: 26,
                ΔᐃⲆ: jb.ᐃⵠⲆᐃⵠⲆΔ,
                ⵠΔΔ: jb.ⵠΔᐃⲆⵠΔΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Lava Book 2"
            }, {
                id: 19,
                ΔᐃⲆ: jb.ⵠⵠᐃᐃⵠᐃΔ,
                ⵠΔΔ: jb.ᐃⵠᐃΔΔᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Winter",
                name: "Ocean Mystery"
            }, {
                id: 21,
                ΔᐃⲆ: jb.ᐃᐃΔΔⵠᐃΔ,
                ⵠΔΔ: jb.ΔⲆⲆⲆⲆⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Dragon Book"
            }, {
                id: 42,
                ΔᐃⲆ: jb.ⲆⲆΔⲆⵠⵠΔ,
                ⵠΔΔ: jb.ⵠΔⲆⵠᐃΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Engineer Book"
            }, {
                id: 43,
                ΔᐃⲆ: jb.ΔᐃⲆΔΔⵠⵠ,
                ⵠΔΔ: jb.ΔΔᐃᐃΔᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Nightmare Book"
            }, {
                id: 44,
                ΔᐃⲆ: jb.ᐃᐃⵠⵠⲆᐃᐃ,
                ⵠΔΔ: jb.ᐃⲆⵠⵠΔⲆⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "aloner",
                name: "Mystery Book"
            }, {
                id: 46,
                ΔᐃⲆ: jb.ᐃⲆⵠΔΔᐃⵠ,
                ⵠΔΔ: jb.ⲆΔⲆⵠΔᐃⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Cursed Book"
            }],
            ⵠΔⵠΔⲆ: [{
                id: 0,
                ΔᐃⲆ: jb.ΔᐃⲆⲆⲆᐃⲆ,
                ⵠΔΔ: jb.ΔᐃⲆⲆⲆᐃⲆ,
                ᐃⵠⵠ: Mb.ⲆΔⲆᐃᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Nothing"
            }, {
                id: 2,
                ΔᐃⲆ: jb.ᐃⲆⲆᐃⵠⵠⲆ,
                ⵠΔΔ: jb.ⲆᐃΔᐃΔᐃᐃ,
                ᐃⵠⵠ: Mb.ⲆΔⲆᐃᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Pink Cheeks"
            }, {
                id: 3,
                ΔᐃⲆ: jb.ᐃⲆⵠⵠⲆⵠⵠ,
                ⵠΔΔ: jb.ⲆᐃᐃᐃᐃΔⵠ,
                ᐃⵠⵠ: Mb.ⲆΔⲆᐃᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Heart"
            }, {
                id: 1,
                ΔᐃⲆ: jb.ⵠΔᐃᐃⲆⵠⲆ,
                ⵠΔΔ: jb.ΔΔᐃΔΔᐃⵠ,
                ᐃⵠⵠ: Mb.ⲆΔⲆᐃᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Bandage 1"
            }, {
                id: 4,
                ΔᐃⲆ: jb.ⵠΔᐃᐃΔᐃΔ,
                ⵠΔΔ: jb.ᐃΔⵠᐃⵠⲆⲆ,
                ᐃⵠⵠ: Mb.ⲆΔⲆᐃᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Flower 1"
            }, {
                id: 5,
                ΔᐃⲆ: jb.ᐃⵠⲆΔⲆᐃᐃ,
                ⵠΔΔ: jb.ⵠⲆⵠⵠⲆⲆⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Bow 1"
            }, {
                id: 6,
                ΔᐃⲆ: jb.ΔᐃⲆⲆΔΔΔ,
                ⵠΔΔ: jb.ⲆⲆⵠᐃΔΔᐃ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Bandage 2"
            }, {
                id: 7,
                ΔᐃⲆ: jb.ΔⲆᐃΔⵠⵠⲆ,
                ⵠΔΔ: jb.ⵠⲆⵠᐃΔⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Flower 2"
            }, {
                id: 8,
                ΔᐃⲆ: jb.ⵠᐃᐃᐃΔΔⲆ,
                ⵠΔΔ: jb.ⲆᐃⵠΔΔᐃⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Bandage 3"
            }, {
                id: 36,
                ΔᐃⲆ: jb.ⵠΔⵠⵠⲆⲆΔ,
                ⵠΔΔ: jb.ΔⲆᐃⲆΔᐃⲆ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Foliage"
            }, {
                id: 59,
                ΔᐃⲆ: jb.ΔⵠⲆᐃⲆⲆⵠ,
                ⵠΔΔ: jb.ⲆᐃⲆⲆⲆΔΔ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Peaceful"
            }, {
                id: 67,
                ΔᐃⲆ: jb.ΔⲆᐃᐃⲆΔⵠ,
                ⵠΔΔ: jb.ⵠⲆΔⲆΔⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Sparkles"
            }, {
                id: 68,
                ΔᐃⲆ: jb.ᐃΔⲆΔᐃΔⲆ,
                ⵠΔΔ: jb.ⲆΔΔⲆᐃⵠΔ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Luxury"
            }, {
                id: 69,
                ΔᐃⲆ: jb.ΔᐃᐃⵠⲆⲆΔ,
                ⵠΔΔ: jb.ⵠⵠⵠⲆΔⲆⵠ,
                ᐃⵠⵠ: Mb.ⵠᐃΔᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Snow Flakes Crown"
            }, {
                id: 17,
                ΔᐃⲆ: jb.ΔᐃⲆⲆΔᐃᐃ,
                ⵠΔΔ: jb.ᐃᐃᐃΔᐃᐃⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Glasses 1"
            }, {
                id: 10,
                ΔᐃⲆ: jb.ΔΔⵠⲆΔΔⲆ,
                ⵠΔΔ: jb.ΔⲆΔᐃΔⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Bow 2"
            }, {
                id: 11,
                ΔᐃⲆ: jb.ⵠⲆⵠⵠⲆᐃⲆ,
                ⵠΔΔ: jb.ⲆⵠⲆΔᐃᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Little Stars"
            }, {
                id: 12,
                ΔᐃⲆ: jb.ⵠⲆⲆⲆᐃᐃᐃ,
                ⵠΔΔ: jb.ⲆⵠⲆⵠⲆⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Pirate Eye Patch 1"
            }, {
                id: 44,
                ΔᐃⲆ: jb.ⲆⵠΔⲆᐃᐃⲆ,
                ⵠΔΔ: jb.ⵠᐃᐃᐃⵠⲆⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Pirate Eye Patch 2"
            }, {
                id: 23,
                ΔᐃⲆ: jb.ⵠⲆΔΔⵠⲆⵠ,
                ⵠΔΔ: jb.ⲆⲆⵠΔⲆᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Clown nose"
            }, {
                id: 16,
                ΔᐃⲆ: jb.ⲆΔⲆⵠⲆΔΔ,
                ⵠΔΔ: jb.ⲆⲆⲆⲆⵠᐃⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Eye Patch"
            }, {
                id: 30,
                ΔᐃⲆ: jb.ᐃΔᐃⵠᐃⵠⵠ,
                ⵠΔΔ: jb.ⲆⲆΔⵠⵠᐃⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Flower 3"
            }, {
                id: 38,
                ΔᐃⲆ: jb.ᐃᐃⲆΔᐃⵠᐃ,
                ⵠΔΔ: jb.ⵠⲆᐃΔⵠΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Winter",
                name: "False Nose"
            }, {
                id: 74,
                ΔᐃⲆ: jb.ᐃⲆΔⲆⵠᐃⲆ,
                ⵠΔΔ: jb.ⵠⲆᐃΔⵠᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Red Cloth"
            }, {
                id: 75,
                ΔᐃⲆ: jb.ᐃⲆΔⲆⲆⲆⵠ,
                ⵠΔΔ: jb.ΔΔⵠᐃᐃᐃⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Blue Cloth"
            }, {
                id: 79,
                ΔᐃⲆ: jb.ΔⵠΔⵠᐃⵠⲆ,
                ⵠΔΔ: jb.ⵠⲆⲆΔⵠⲆⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Transparent Mask"
            }, {
                id: 89,
                ΔᐃⲆ: jb.ΔᐃⲆᐃⲆΔⵠ,
                ⵠΔΔ: jb.ᐃⲆᐃᐃᐃⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Anyone want to play?",
                name: "Starve.io Anime"
            }, {
                id: 94,
                ΔᐃⲆ: jb.ⵠⵠΔⵠⲆᐃᐃ,
                ⵠΔΔ: jb.ᐃΔΔⲆΔⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Ant",
                name: "Hero Mask"
            }, {
                id: 100,
                ΔᐃⲆ: jb.ⲆⵠᐃᐃᐃᐃⲆ,
                ⵠΔΔ: jb.ⲆⲆⵠⲆⲆᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "This starver is mad"
            }, {
                id: 104,
                ΔᐃⲆ: jb.ⲆᐃΔᐃⵠⵠᐃ,
                ⵠΔΔ: jb.ᐃᐃΔⵠⲆⵠΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Scars"
            }, {
                id: 106,
                ΔᐃⲆ: jb.ⲆⲆⵠⲆΔΔⲆ,
                ⵠΔΔ: jb.ⲆⲆⲆΔΔⲆᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "In Search of Intelligence"
            }, {
                id: 109,
                ΔᐃⲆ: jb.ΔΔᐃΔⵠⵠΔ,
                ⵠΔΔ: jb.ᐃᐃⲆⲆΔᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Reclaimed Bandage"
            }, {
                id: 111,
                ΔᐃⲆ: jb.ⵠⲆⵠᐃΔΔⲆ,
                ⵠΔΔ: jb.ⲆⲆᐃΔⵠΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⵠᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Unwrap Starver for Gift"
            }, {
                id: 15,
                ΔᐃⲆ: jb.ᐃⵠΔᐃᐃᐃᐃ,
                ⵠΔΔ: jb.Δᐃⵠᐃⵠᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Star Glasses"
            }, {
                id: 21,
                ΔᐃⲆ: jb.ⲆᐃⲆⲆⲆΔᐃ,
                ⵠΔΔ: jb.Δⵠⵠᐃᐃᐃⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Great-aunt's Glasses"
            }, {
                id: 24,
                ΔᐃⲆ: jb.ΔΔᐃⵠΔⵠⲆ,
                ⵠΔΔ: jb.Δⵠⵠᐃⵠⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Little Starver"
            }, {
                id: 22,
                ΔᐃⲆ: jb.ᐃⵠⲆⵠⵠᐃΔ,
                ⵠΔΔ: jb.ⲆⲆⲆⵠⲆΔⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Little Glasses"
            }, {
                id: 13,
                ΔᐃⲆ: jb.ⲆΔⲆΔⲆⲆᐃ,
                ⵠΔΔ: jb.ΔΔΔⵠᐃΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Flower Chain"
            }, {
                id: 29,
                ΔᐃⲆ: jb.ΔΔⲆⵠⲆΔⲆ,
                ⵠΔΔ: jb.ⵠᐃⲆⵠᐃⲆᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Horns"
            }, {
                id: 31,
                ΔᐃⲆ: jb.ΔⵠⵠⲆⵠΔⵠ,
                ⵠΔΔ: jb.ΔΔⲆⲆᐃⲆⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Golden Flower"
            }, {
                id: 40,
                ΔᐃⲆ: jb.ⲆⲆΔⵠᐃⲆⲆ,
                ⵠΔΔ: jb.ᐃⵠΔᐃⲆΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Sleeping Mask"
            }, {
                id: 57,
                ΔᐃⲆ: jb.ᐃⵠΔⵠⲆⵠⲆ,
                ⵠΔΔ: jb.ᐃᐃᐃⵠⵠⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Taco4Life",
                name: "Fish on your head"
            }, {
                id: 58,
                ΔᐃⲆ: jb.ⲆⲆⲆⲆⵠᐃΔ,
                ⵠΔΔ: jb.ᐃⵠᐃΔΔⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "eogito",
                name: "Rose"
            }, {
                id: 91,
                ΔᐃⲆ: jb.ⲆΔⵠⵠᐃΔⲆ,
                ⵠΔΔ: jb.ΔⲆⲆⲆᐃⲆⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "upfiz",
                name: "Grey Scarf"
            }, {
                id: 92,
                ΔᐃⲆ: jb.ᐃⵠⵠⲆⲆΔⲆ,
                ⵠΔΔ: jb.ⲆⵠΔⵠⲆⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "upfiz",
                name: "Black Scarf"
            }, {
                id: 93,
                ΔᐃⲆ: jb.ΔⵠⲆᐃⵠⵠⵠ,
                ⵠΔΔ: jb.ΔⵠⵠⵠᐃΔΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "upfiz",
                name: "Skull Mask"
            }, {
                id: 95,
                ΔᐃⲆ: jb.ΔΔᐃⵠᐃΔΔ,
                ⵠΔΔ: jb.ⲆⲆⵠΔΔⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Golden Monocle"
            }, {
                id: 96,
                ΔᐃⲆ: jb.ⵠⲆΔΔΔᐃᐃ,
                ⵠΔΔ: jb.ⵠⲆΔΔⵠΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "A simple instruction"
            }, {
                id: 102,
                ΔᐃⲆ: jb.ⲆΔᐃᐃᐃᐃⵠ,
                ⵠΔΔ: jb.ⲆⵠΔⲆΔⲆⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Garland"
            }, {
                id: 103,
                ΔᐃⲆ: jb.ΔᐃⵠΔᐃⵠᐃ,
                ⵠΔΔ: jb.ⵠᐃᐃᐃᐃⲆΔ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "The Doormat"
            }, {
                id: 108,
                ΔᐃⲆ: jb.ΔᐃΔⲆΔⵠⵠ,
                ⵠΔΔ: jb.ⵠΔⲆⵠⲆΔᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Copium Tanks"
            }, {
                id: 117,
                ΔᐃⲆ: jb.ΔΔᐃⲆⲆⲆⲆ,
                ⵠΔΔ: jb.ΔᐃⵠⲆᐃΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Eyelashes"
            }, {
                id: 118,
                ΔᐃⲆ: jb.ⲆᐃⵠⲆᐃΔΔ,
                ⵠΔΔ: jb.ⲆᐃⲆⵠΔᐃⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠⲆᐃ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Helmet Prototype"
            }, {
                id: 9,
                ΔᐃⲆ: jb.ᐃⵠΔⵠᐃⲆⵠ,
                ⵠΔΔ: jb.ᐃᐃΔⵠΔΔⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Fancy Glasses"
            }, {
                id: 25,
                ΔᐃⲆ: jb.ⵠⵠⲆΔⵠⲆⲆ,
                ⵠΔΔ: jb.ᐃⲆⵠⲆΔᐃⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Medecin Mask"
            }, {
                id: 14,
                ΔᐃⲆ: jb.ᐃᐃⵠⲆⵠⲆΔ,
                ⵠΔΔ: jb.ⵠⲆⲆᐃᐃⵠΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mr. Mayor"
            }, {
                id: 19,
                ΔᐃⲆ: jb.ΔΔⲆΔᐃⵠⵠ,
                ⵠΔΔ: jb.ⲆⵠⲆⵠⵠᐃⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Sunglasses 2"
            }, {
                id: 28,
                ΔᐃⲆ: jb.ᐃᐃΔΔⵠΔⲆ,
                ⵠΔΔ: jb.ⲆᐃⵠᐃᐃΔⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "pizza wa",
                name: "Starfish"
            }, {
                id: 37,
                ΔᐃⲆ: jb.ⲆᐃⲆΔΔᐃΔ,
                ⵠΔΔ: jb.ⲆᐃΔⵠⵠΔΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Berry"
            }, {
                id: 39,
                ΔᐃⲆ: jb.ⲆᐃΔⵠⲆᐃⵠ,
                ⵠΔΔ: jb.ᐃⲆⵠⲆΔⲆΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Flake"
            }, {
                id: 43,
                ΔᐃⲆ: jb.ᐃΔⲆⵠΔⲆᐃ,
                ⵠΔΔ: jb.ⵠⵠⲆᐃᐃᐃⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Leaf "
            }, {
                id: 61,
                ΔᐃⲆ: jb.ⵠⲆΔᐃΔΔⵠ,
                ⵠΔΔ: jb.ⲆΔⵠⵠΔⵠⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "A sword in your head"
            }, {
                id: 62,
                ΔᐃⲆ: jb.ᐃᐃⵠᐃᐃᐃΔ,
                ⵠΔΔ: jb.ⲆⵠᐃⵠᐃᐃΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Winter Scarf"
            }, {
                id: 64,
                ΔᐃⲆ: jb.ⲆⲆᐃᐃⲆⲆⵠ,
                ⵠΔΔ: jb.ⲆⵠᐃΔⵠᐃⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Winter Scarf 2"
            }, {
                id: 66,
                ΔᐃⲆ: jb.ⲆΔⲆⵠⲆΔᐃ,
                ⵠΔΔ: jb.ΔⵠΔᐃᐃΔⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "eogito",
                name: "Winter Scarf 3"
            }, {
                id: 70,
                ΔᐃⲆ: jb.ⲆⲆΔΔᐃᐃΔ,
                ⵠΔΔ: jb.ⲆⲆΔⲆⵠᐃᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mask with animal tracks"
            }, {
                id: 71,
                ΔᐃⲆ: jb.ᐃⲆⲆΔⵠᐃⲆ,
                ⵠΔΔ: jb.ⲆⲆΔΔⲆΔⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Spring Mask"
            }, {
                id: 72,
                ΔᐃⲆ: jb.ᐃⲆΔᐃΔⲆⲆ,
                ⵠΔΔ: jb.ⵠⵠΔΔⵠᐃⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Pink Mask"
            }, {
                id: 73,
                ΔᐃⲆ: jb.ᐃⵠⵠΔⲆᐃΔ,
                ⵠΔΔ: jb.ⲆⵠⲆⵠΔᐃΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Blue Mask"
            }, {
                id: 76,
                ΔᐃⲆ: jb.ⵠᐃⲆΔΔⲆΔ,
                ⵠΔΔ: jb.ΔⵠᐃⲆΔᐃⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Military Mask"
            }, {
                id: 77,
                ΔᐃⲆ: jb.ⵠᐃΔᐃᐃᐃⵠ,
                ⵠΔΔ: jb.ⵠᐃⲆᐃΔᐃⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Orange Mask"
            }, {
                id: 78,
                ΔᐃⲆ: jb.ΔΔⵠⲆⵠΔᐃ,
                ⵠΔΔ: jb.ⲆΔΔΔΔⵠᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "White and Red Points Mask"
            }, {
                id: 80,
                ΔᐃⲆ: jb.ᐃᐃᐃΔⲆⵠⲆ,
                ⵠΔΔ: jb.ⲆᐃⵠⵠⵠΔΔ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Stick out your tongue Mask"
            }, {
                id: 81,
                ΔᐃⲆ: jb.ΔΔᐃⵠⵠᐃⲆ,
                ⵠΔΔ: jb.ⵠⲆΔⲆⲆⲆⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Two Teeth Mask"
            }, {
                id: 82,
                ΔᐃⲆ: jb.ΔᐃΔⲆΔᐃΔ,
                ⵠΔΔ: jb.ⲆⵠⲆⲆΔᐃⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Make-up Mask"
            }, {
                id: 83,
                ΔᐃⲆ: jb.ᐃΔΔΔᐃⲆᐃ,
                ⵠΔΔ: jb.ⵠᐃⲆᐃΔⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Sad Mask"
            }, {
                id: 84,
                ΔᐃⲆ: jb.ΔΔΔΔΔᐃᐃ,
                ⵠΔΔ: jb.ᐃⲆⵠⵠⲆⲆⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Happy Mask"
            }, {
                id: 90,
                ΔᐃⲆ: jb.ⵠᐃᐃΔᐃᐃΔ,
                ⵠΔΔ: jb.ⵠⵠΔⵠᐃᐃⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "aloner",
                name: "Blood"
            }, {
                id: 101,
                ΔᐃⲆ: jb.ΔⲆΔⵠⵠⵠΔ,
                ⵠΔΔ: jb.ᐃⵠⲆⵠⵠΔⵠ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Axed Plans"
            }, {
                id: 105,
                ΔᐃⲆ: jb.ⵠⲆⲆⲆⲆⲆᐃ,
                ⵠΔΔ: jb.ᐃⲆΔᐃⲆᐃᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Saddle"
            }, {
                id: 113,
                ΔᐃⲆ: jb.ᐃⵠᐃΔΔΔᐃ,
                ⵠΔΔ: jb.ᐃⵠΔⲆⲆⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "I see"
            }, {
                id: 114,
                ΔᐃⲆ: jb.ΔΔᐃⲆᐃⵠⲆ,
                ⵠΔΔ: jb.ᐃⵠᐃⲆⲆᐃᐃ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "I have no body and I must dress"
            }, {
                id: 115,
                ΔᐃⲆ: jb.ᐃⵠΔᐃⲆᐃᐃ,
                ⵠΔΔ: jb.ⲆⵠΔᐃᐃΔⲆ,
                ᐃⵠⵠ: Mb.ⵠⲆΔⲆ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Cursed Crown"
            }, {
                id: 27,
                ΔᐃⲆ: jb.ᐃΔΔΔᐃⲆⵠ,
                ⵠΔΔ: jb.ⲆⵠⲆⵠⵠⲆΔ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Clown Face"
            }, {
                id: 20,
                ΔᐃⲆ: jb.ⲆⲆᐃⲆⵠⵠⵠ,
                ⵠΔΔ: jb.ΔΔᐃⲆΔⲆᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Sunglasses 3"
            }, {
                id: 32,
                ΔᐃⲆ: jb.ᐃΔⵠᐃᐃᐃⲆ,
                ⵠΔΔ: jb.ΔᐃΔⵠᐃⲆⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "eogito",
                name: "Engineer's Glasses"
            }, {
                id: 33,
                ΔᐃⲆ: jb.ⵠᐃᐃⲆⲆⵠΔ,
                ⵠΔΔ: jb.ΔⲆΔⵠⲆⵠⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "eogito",
                name: "Engineer's Monocle"
            }, {
                id: 34,
                ΔᐃⲆ: jb.ΔΔᐃΔᐃΔᐃ,
                ⵠΔΔ: jb.ⵠᐃΔΔⵠΔⵠ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mauve's butt"
            }, {
                id: 41,
                ΔᐃⲆ: jb.ⵠᐃⵠⵠⲆᐃᐃ,
                ⵠΔΔ: jb.ΔⲆⵠΔⲆᐃᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "eogito",
                name: "Lapa Head"
            }, {
                id: 42,
                ΔᐃⲆ: jb.ⵠΔᐃⲆᐃⵠΔ,
                ⵠΔΔ: jb.ΔⵠᐃⵠᐃΔⵠ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "eogito",
                name: "Lapa Head "
            }, {
                id: 85,
                ΔᐃⲆ: jb.ᐃᐃΔⵠⲆΔⲆ,
                ⵠΔΔ: jb.ⵠⵠⲆⵠᐃⲆⲆ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Mask and Glasses"
            }, {
                id: 110,
                ΔᐃⲆ: jb.ⲆⲆᐃⵠΔⲆᐃ,
                ⵠΔΔ: jb.ΔᐃΔⵠΔΔᐃ,
                ᐃⵠⵠ: Mb.ⵠⵠⲆⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Spectrum Pet"
            }, {
                id: 60,
                ΔᐃⲆ: jb.ΔⵠⲆⲆⲆⲆΔ,
                ⵠΔΔ: jb.ΔᐃⵠΔⵠⵠᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Jason"
            }, {
                id: 26,
                ΔᐃⲆ: jb.ⲆⵠᐃᐃⲆⲆⵠ,
                ⵠΔΔ: jb.ⵠⲆΔᐃᐃΔⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Devil Horns"
            }, {
                id: 18,
                ΔᐃⲆ: jb.ⲆᐃⲆⲆⲆᐃΔ,
                ⵠΔΔ: jb.ᐃⵠⵠⵠⲆᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Big Boss"
            }, {
                id: 35,
                ΔᐃⲆ: jb.ⲆᐃⲆⵠᐃⵠⵠ,
                ⵠΔΔ: jb.ⵠᐃⲆⲆⲆⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Baby Kraken"
            }, {
                id: 63,
                ΔᐃⲆ: jb.ᐃⵠΔⲆΔᐃⵠ,
                ⵠΔΔ: jb.ⲆᐃⵠᐃⲆᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Deer Antlers"
            }, {
                id: 65,
                ΔᐃⲆ: jb.ᐃⵠⲆⲆᐃⵠᐃ,
                ⵠΔΔ: jb.ᐃⵠⵠΔⵠⵠⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Baby Dragon on your head"
            }, {
                id: 86,
                ΔᐃⲆ: jb.ⵠⲆᐃⵠⲆΔΔ,
                ⵠΔΔ: jb.ⲆᐃⲆⵠⲆΔΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Gaz Mask and Glasses"
            }, {
                id: 87,
                ΔᐃⲆ: jb.ⵠⲆⲆΔⵠⲆᐃ,
                ⵠΔΔ: jb.ᐃΔⵠⲆΔⲆᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Pink Gaz Mask and Glasses"
            }, {
                id: 88,
                ΔᐃⲆ: jb.ᐃᐃⲆⵠⲆΔᐃ,
                ⵠΔΔ: jb.ⲆⲆΔⲆᐃⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "eogito",
                name: "Engineer Glasses"
            }, {
                id: 97,
                ΔᐃⲆ: jb.ΔᐃⲆᐃΔⲆⵠ,
                ⵠΔΔ: jb.ᐃᐃᐃⲆⲆⵠⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Jarred Horns"
            }, {
                id: 98,
                ΔᐃⲆ: jb.ΔⵠᐃᐃⲆⵠⲆ,
                ⵠΔΔ: jb.ⲆⵠΔᐃᐃΔΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Curved Horns"
            }, {
                id: 99,
                ΔᐃⲆ: jb.ⲆᐃⵠΔⲆᐃⲆ,
                ⵠΔΔ: jb.ⲆⲆⵠⵠⲆᐃᐃ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Evil Goat Horns"
            }, {
                id: 107,
                ΔᐃⲆ: jb.ΔΔᐃⲆⵠΔᐃ,
                ⵠΔΔ: jb.ⵠΔⵠⵠⵠᐃΔ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Decorative Earmuffs"
            }, {
                id: 112,
                ΔᐃⲆ: jb.ᐃΔⵠⵠⵠⵠᐃ,
                ⵠΔΔ: jb.ᐃⲆⲆⵠⲆᐃⵠ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Tamon Dragon Pet"
            }, {
                id: 116,
                ΔᐃⲆ: jb.ⵠΔΔᐃᐃΔΔ,
                ⵠΔΔ: jb.ΔⵠᐃᐃᐃⲆⲆ,
                ᐃⵠⵠ: Mb.ᐃⵠᐃΔ,
                Ⲇᐃⵠ: "Starve.io",
                name: "Blanket"
            }, {
                id: 45,
                ΔᐃⲆ: jb.ᐃⲆⵠᐃᐃΔΔ,
                ⵠΔΔ: jb.ΔᐃᐃᐃᐃⲆΔ,
                ᐃⵠⵠ: Mb.ΔⲆᐃᐃⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "More than Level 5",
                level: 5
            }, {
                id: 46,
                ΔᐃⲆ: jb.ᐃⵠⲆΔⲆᐃΔ,
                ⵠΔΔ: jb.ⵠⵠⲆΔΔⲆⵠ,
                ᐃⵠⵠ: Mb.ΔⲆᐃᐃⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "More than Level 10",
                level: 10
            }, {
                id: 47,
                ΔᐃⲆ: jb.ⲆΔⲆᐃⲆⵠᐃ,
                ⵠΔΔ: jb.ΔⲆΔΔⲆΔⲆ,
                ᐃⵠⵠ: Mb.ΔⲆᐃᐃⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "More than Level 15",
                level: 15
            }, {
                id: 48,
                ΔᐃⲆ: jb.ΔⲆⲆᐃⲆⲆⲆ,
                ⵠΔΔ: jb.ΔᐃⵠΔⲆΔᐃ,
                ᐃⵠⵠ: Mb.ΔⲆᐃᐃⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "More than Level 20",
                level: 20
            }, {
                id: 49,
                ΔᐃⲆ: jb.ⵠⵠⵠⲆΔⵠⵠ,
                ⵠΔΔ: jb.ⵠⵠᐃᐃᐃⵠⲆ,
                ᐃⵠⵠ: Mb.ΔⲆᐃᐃⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "More than Level 25",
                level: 25
            }, {
                id: 50,
                ΔᐃⲆ: jb.ᐃΔⲆᐃⵠᐃⲆ,
                ⵠΔΔ: jb.ⵠΔΔⵠⵠⵠⵠ,
                ᐃⵠⵠ: Mb.ΔⲆᐃᐃⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "More than Level 30",
                level: 30
            }, {
                id: 51,
                ΔᐃⲆ: jb.ⲆᐃⲆΔΔⲆⲆ,
                ⵠΔΔ: jb.ᐃⲆⲆᐃⵠⲆᐃ,
                ᐃⵠⵠ: Mb.ΔⲆᐃᐃⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "More than Level 35",
                level: 35
            }, {
                id: 52,
                ΔᐃⲆ: jb.ΔΔᐃΔΔᐃΔ,
                ⵠΔΔ: jb.ᐃᐃⵠᐃⲆⲆⵠ,
                ᐃⵠⵠ: Mb.ΔⲆᐃᐃⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "More than Level 40",
                level: 40
            }, {
                id: 53,
                ΔᐃⲆ: jb.ᐃΔᐃⲆⵠⲆⲆ,
                ⵠΔΔ: jb.ⲆΔᐃᐃⵠⵠᐃ,
                ᐃⵠⵠ: Mb.ΔⲆᐃᐃⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "More than Level 45",
                level: 45
            }, {
                id: 54,
                ΔᐃⲆ: jb.ⵠΔⲆⲆⲆΔᐃ,
                ⵠΔΔ: jb.ᐃⲆΔΔΔΔᐃ,
                ᐃⵠⵠ: Mb.ΔⲆᐃᐃⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "More than Level 50",
                level: 50
            }, {
                id: 55,
                ΔᐃⲆ: jb.ⵠᐃⲆᐃⲆΔⲆ,
                ⵠΔΔ: jb.ⲆᐃᐃⲆⲆᐃⵠ,
                ᐃⵠⵠ: Mb.ΔⲆᐃᐃⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "More than Level 55",
                level: 55
            }, {
                id: 56,
                ΔᐃⲆ: jb.ᐃᐃΔᐃᐃΔⵠ,
                ⵠΔΔ: jb.ᐃΔⲆⵠΔᐃΔ,
                ᐃⵠⵠ: Mb.ΔⲆᐃᐃⵠ,
                Ⲇᐃⵠ: "Starve.io",
                name: "More than Level 60",
                level: 60
            }]
        };
        Jf.ⲆΔᐃⲆᐃⲆΔ = ᐃⲆⲆΔⲆⵠΔ(Jd.ⲆⵠⵠΔⵠ, 21);
        Jf.ΔⲆᐃⵠᐃΔⲆ = ᐃⲆⲆΔⲆⵠΔ(Jd.ⲆⵠⵠΔⵠ, 20);
        ΔⲆ[255] = [];
        ΔⲆ[7] = [];
        ΔⲆ[250] = [];
        ΔⲆ[28] = [];
        ΔⲆ[29] = [];
        ΔⲆ[796] = [];
        for (var a = 0; a < Jd.ⲆⵠⵠΔⵠ.length; a++) {
            ΔⲆ[255][a] = [Jd.ⲆⵠⵠΔⵠ[a].ΔᐃⲆ, Jd.ⲆⵠⵠΔⵠ[a].ⵠΔΔ];
            ΔⲆ[7][a] = [Jd.ⲆⵠⵠΔⵠ[a].ΔΔΔⵠ, Jd.ⲆⵠⵠΔⵠ[a].Δⵠᐃᐃ];
        }
        for (a = 0; a < Jd.ΔᐃᐃᐃⲆ.length; a++) {
            ΔⲆ[28][a] = [Jd.ΔᐃᐃᐃⲆ[a].ΔᐃⲆ, Jd.ΔᐃᐃᐃⲆ[a].ⵠΔΔ];
        }
        for (a = 0; a < Jd.ⵠⵠΔᐃⵠ.length; a++) {
            ΔⲆ[250][a] = [Jd.ⵠⵠΔᐃⵠ[a].ΔᐃⲆ, Jd.ⵠⵠΔᐃⵠ[a].ⵠΔΔ];
        }
        for (a = 0; Jd.ᐃΔΔᐃ.length > a; a++) {
            ΔⲆ[29][a] = [Jd.ᐃΔΔᐃ[a].ΔᐃⲆ, Jd.ᐃΔΔᐃ[a].ⵠΔΔ];
        }
        for (a = 0; Jd.ⵠΔⵠΔⲆ.length > a; a++) {
            ΔⲆ[796][a] = [Jd.ⵠΔⵠΔⲆ[a].ΔᐃⲆ, Jd.ⵠΔⵠΔⲆ[a].ⵠΔΔ];
        }
    };
    const $b = 13;
    function ed(a, b, c, d, e) {
        a.beginPath();
        a.lineCap = "round";
        a.arc(b, c, d, 0, Math.PI * 2 * e);
    }
    function id(a, b, c, d) {
        a.beginPath();
        a.arc(b, c, d, 0, Math.PI * 2);
    }
    const td = 9;
    function nd(b, c, d, e) {
        var f = Math.PI * 2 / c;
        b.beginPath();
        var g = [{
            x: d,
            y: 0
        }];
        var a = [];
        for (var i = 1; c > i; i++) {
            g.push({
                x: d * Math.sin(i * f),
                y: Math.cos(i * f) * d
            });
            var j = g.length;
            a.push(Z.ᐃᐃΔᐃΔⵠⲆ(g[j - 2], g[j - 1]));
        }
        a.push(Z.ᐃᐃΔᐃΔⵠⲆ(g[g.length - 1], g[0]));
        var k = a[a.length - 1];
        b.moveTo(k.x, k.y);
        for (i = 0; i < c; i++) {
            b.arcTo(g[i].x, g[i].y, a[i].x, a[i].y, e);
        }
        b.closePath();
    }
    const od = Yl;
    function ad(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = Math.sqrt(b.width * b.width + b.height * b.height);
        d2 = e / 2;
        c.width = e;
        c.height = e;
        d.translate(d2, d2);
        d.rotate(a);
        d.drawImage(b, -b.width / 2, -b.height / 2);
        return c;
    }
    function rd(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = Math.floor(b * 28);
        var g = Math.floor(b * 20);
        e.font = g + "px Baloo Paaji";
        var a = b * 8;
        var h = e.measureText(c).width + a * 2;
        d.width = h;
        d.height = f;
        Zb(e, 0, 0, h, f, b * 10);
        e.globalAlpha = 0.5;
        Xb(e, "#000");
        e.globalAlpha = 1;
        e.textBaseline = "middle";
        e.font = g + "px Baloo Paaji";
        e.beginPath();
        e.fillStyle = "#FFF";
        e.fillText(c, a, f / 2);
        return d;
    }
    const sd = 11;
    function hd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 183, a * 107);
        Zb(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
        e.restore();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 69.5, a * 110);
        Zb(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
        e.restore();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 181);
        Zb(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
        e.restore();
        Xb(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 95);
        e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
        e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
        e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
        e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
        e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
        e.closePath();
        Xb(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68, a * 75);
        e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
        e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
        e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
        e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
        e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
        e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
        e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
        e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
        e.closePath();
        Xb(e, c[3], c[1], a * 6);
        return d;
    }
    function ld(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 70;
        d.height = a * 70;
        e.globalAlpha = 0.5;
        id(e, a * 26, a * 26, a * 9);
        Xb(e, c[0]);
        id(e, a * 56, a * 36, a * 9);
        Xb(e, c[1]);
        id(e, a * 40, a * 50, a * 9);
        Xb(e, c[2]);
        e.globalAlpha = 1;
        id(e, a * 26, a * 26, a * 5);
        Xb(e, c[0]);
        id(e, a * 56, a * 36, a * 5);
        Xb(e, c[1]);
        id(e, a * 40, a * 50, a * 5);
        Xb(e, c[2]);
        return d;
    }
    function gd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 191;
        c.height = a * 153;
        d.save();
        d.translate(a * 96.49996948242188, a * 66.79510498046875);
        Zb(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        d.restore();
        Xb(d, b[0], b[0], a * 4);
        d.translate(a * 2, 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 119, a * 28);
        d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
        d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
        d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
        d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
        d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
        d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
        d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
        d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
        d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
        d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
        d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
        d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
        d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
        d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
        d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
        d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
        d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
        d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
        d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
        d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
        d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
        d.closePath();
        Xb(d, b[0], b[0], a * 4);
        d.save();
        d.translate(a * 97.49996948242188, a * 95.12844848632812);
        Zb(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        d.restore();
        Xb(d, b[0], b[0], a * 4);
        return c;
    }
    function ud(c, e) {
        var f = document.createElement("canvas");
        var i = f.getContext("2d");
        var j = c * 120;
        var k = c * 110;
        var a = j / 2;
        var m = k / 2;
        var n = c * 20;
        var h = c * 112;
        var l = c * 82;
        var g = h / 2;
        var b = l / 2;
        var d = c * 4;
        f.width = j;
        f.height = k;
        i.globalAlpha = 1;
        i.translate(a, m);
        Zb(i, -g, -b, h, l, n);
        Xb(i, e, e, d);
        return f;
    }
    function bd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 22;
        d.height = a * 22;
        e.globalAlpha = 0.4;
        id(e, a * 11, a * 11, a * 10);
        Xb(e, c[0]);
        e.globalAlpha = 0.7;
        id(e, a * 11, a * 11, a * 7);
        Xb(e, c[0]);
        e.globalAlpha = 1;
        id(e, a * 11, a * 11, a * 4);
        Xb(e, c[0]);
        return d;
    }
    function dd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 69.5, a * 145);
        Zb(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
        e.restore();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 183, a * 145);
        Zb(e, a * -8, a * -63, a * 16, a * 126, a * 1);
        e.restore();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 62.5);
        e.rotate(6.28);
        Zb(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
        e.restore();
        Xb(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123.5, a * 118);
        e.rotate(6.24);
        Zb(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
        e.restore();
        Xb(e, c[3], c[1], a * 6);
        e.save();
        e.translate(a * 122, a * 177.5);
        e.rotate(6.32);
        Zb(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
        e.restore();
        Xb(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 157);
        e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
        e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
        e.closePath();
        Xb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 205, a * 175);
        e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
        e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
        e.closePath();
        Xb(e, c[1]);
        return d;
    }
    function vd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 182, a * 120);
        Zb(e, a * -8, a * -67, a * 16, a * 134, a * 1);
        e.restore();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 68.5, a * 127.5);
        Zb(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
        e.restore();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 68);
        Zb(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
        e.restore();
        Xb(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123, a * 179.5);
        Zb(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
        e.restore();
        Xb(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123.5, a * 123.5);
        e.rotate(6.24);
        Zb(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
        e.restore();
        Xb(e, c[3], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 204, a * 112);
        e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
        e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
        e.closePath();
        Xb(e, c[1]);
        return d;
    }
    function cd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 191;
        d.height = a * 153;
        e.globalAlpha = 0.5;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 97.49996948242188, a * 95.12844848632812);
        Zb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        e.restore();
        Xb(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 97.49996948242188, a * 95.12844848632812);
        Zb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        e.restore();
        Xb(e, c[1], c[2], a * 4);
        e.globalCompositeOperation = "destination-out";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
        e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
        e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
        e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
        e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
        e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
        e.closePath();
        Xb(e, c[2], c[3], a * 4);
        e.globalCompositeOperation = "source-over";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
        e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
        e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
        e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
        e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
        e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
        e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
        e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
        e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
        e.closePath();
        Xb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
        e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
        e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
        e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
        e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
        e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
        e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
        e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
        e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
        e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
        e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
        e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
        e.closePath();
        Xb(e, c[5], c[6], a * 4);
        id(e, a * 68, a * 111.29513549804688, a * 15);
        Xb(e, c[7], c[8], a * 4);
        id(e, a * 123, a * 111.29510498046875, a * 15);
        Xb(e, c[7], c[8], a * 4);
        id(e, a * 63, a * 106, a * 5);
        Xb(e, c[9]);
        id(e, a * 118, a * 106, a * 5);
        Xb(e, c[9]);
        return d;
    }
    function md(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 191;
        d.height = a * 153;
        e.globalAlpha = 0.5;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 96.49996948242188, a * 66.79510498046875);
        e.rotate(0);
        Zb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        e.restore();
        Xb(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 96.49996948242188, a * 66.79510498046875);
        e.rotate(0);
        Zb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        e.restore();
        Xb(e, c[1], c[2], a * 4);
        e.translate(a * 2, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 119, a * 28);
        e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
        e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
        e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
        e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
        e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
        e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
        e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
        e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
        e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
        e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
        e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
        e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
        e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
        e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
        e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
        e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
        e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
        e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
        e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
        e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
        e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
        e.closePath();
        Xb(e, c[3], c[4], a * 4);
        return d;
    }
    function pd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 264;
        d.height = a * 246;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 54);
        e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
        e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
        e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
        e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
        e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
        e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
        e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
        e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
        e.closePath();
        Xb(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 54);
        e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
        e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
        e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
        e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
        e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
        e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
        e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
        e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
        e.closePath();
        Xb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 102);
        e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
        e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
        e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
        e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
        e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
        e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
        e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
        e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
        e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
        e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
        e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
        e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
        e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
        e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
        e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
        e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
        e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
        e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
        e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
        e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 103);
        e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
        e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
        e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
        e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
        e.closePath();
        Xb(e, c[3], c[4], a * 4);
        return d;
    }
    const Cd = 0;
    function Td(f, e, i) {
        var j = document.createElement("canvas");
        var k = j.getContext("2d");
        var n = (r = f * 125) / 2;
        var a = (t = f * 95) / 2;
        var o = f * 10;
        var q = f * 8;
        var h = f * 112;
        var l = f * 82;
        var g = h / 2;
        var b = l / 2;
        var d = f * 4;
        j.width = r;
        j.height = t;
        k.translate(n - f * 4, a + f * 4);
        k.globalAlpha = e ? 0.5 : 1;
        Zb(k, -g, -b, h, l, o);
        Xb(k, i[0]);
        k.globalAlpha = 1;
        k.translate(0, -q);
        Zb(k, -g, -b, h, l, o);
        Xb(k, i[1], i[2], d);
        var r = f * 55;
        var t = f * 45;
        o = 5;
        k.translate(f * -40, f * -30);
        Zb(k, 0, 0, r, t, o);
        Xb(k, i[3]);
        var u = fd(f * 0.7, i[3]);
        k.drawImage(u, f * 45, f * -25);
        u = fd(f * 0.7, i[3]);
        k.drawImage(u, f * 45, f * 15);
        u = fd(f * 1.2, i[3]);
        k.drawImage(u, f * 28, f * -30);
        r = f * 15;
        t = f * 70;
        o = f * 5;
        k.translate(f * 78, f * -5);
        Zb(k, 0, 0, r, t, o);
        Xb(k, i[4]);
        r = f * 9;
        t = f * 50;
        o = f * 3;
        k.translate(f * -20, f * 20);
        k.rotate(Math.PI / 5);
        k.globalAlpha = 0.6;
        Zb(k, 0, 0, r, t, o);
        Xb(k, i[5]);
        k.translate(f * -20, f * 29);
        k.rotate(Math.PI / 5);
        k.globalAlpha = 0.6;
        k.beginPath();
        k.lineJoin = "round";
        k.moveTo(0, 0);
        k.lineTo(0, f * 30);
        k.lineTo(f * 30, f * 30);
        k.closePath();
        Xb(k, null, i[5], f * 8);
        return j;
    }
    function fd(c, e) {
        var f = document.createElement("canvas");
        var i = f.getContext("2d");
        var j = c * 100;
        var k = c * 100;
        var a = j / 2;
        var m = k / 2;
        f.width = j;
        f.height = k;
        var n = c * 5;
        var h = c * 28;
        var l = n / 2;
        var g = h / 2;
        i.translate(a, m);
        for (var b = 0; b < 4; b++) {
            Zb(i, -l, -g, n, h, c * 2);
            i.rotate(Math.PI / 4);
            Xb(i, e);
        }
        i.arc(0, 0, c * 10, 0, Math.PI * 2);
        Xb(i, e);
        i.globalCompositeOperation = "destination-out";
        id(i, 0, 0, c * 4);
        i.fill();
        return f;
    }
    function zd(b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 200;
        c.width = e;
        c.height = f;
        var g = yu(0.35, el, ["#0e3022", "#0b8052", "#077b49"]);
        d.drawImage(g, 10, 10);
        g = ru(0.9, Sg, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 21, 20);
        g = ru(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 38, 28);
        g = ru(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 15, 37);
        g = ru(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 32, 45);
        return c;
    }
    function yd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 185;
        c.height = a * 240;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44, a * 137);
        d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
        d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 53, a * 181);
        d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
        d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 63, a * 208);
        d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
        d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130, a * 170);
        d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
        d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 39, a * 140);
        d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
        d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
        d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
        d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 90, a * 95);
        d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
        d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
        d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
        d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 90, a * 86);
        d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
        d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
        d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 92, a * 117);
        d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
        d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
        d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
        d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 92, a * 175);
        d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
        d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
        d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
        d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
        d.closePath();
        Xb(d, b[0]);
        return c;
    }
    function wd(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 32;
        var a = c * 32;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = c * 5;
        var l = c * 28;
        var g = h / 2;
        var b = l / 2;
        j.translate(c * 0, c * 0);
        j.translate(m, n);
        if (f == 1) {
            id(j, 0, 0, c * 10);
            Xb(j, e[2], e[2], c * 3);
            for (var d = 0; d < 4; d++) {
                Zb(j, -g, -b, h, l, c * 2);
                j.rotate(Math.PI / 4);
                Xb(j, e[2], e[2], c * 4);
            }
        }
        id(j, 0, 0, c * 10);
        Xb(j, e[0], e[1], c * 1.5);
        for (d = 0; d < 4; d++) {
            Zb(j, -g, -b, h, l, c * 2);
            j.rotate(Math.PI / 4);
            Xb(j, e[0], e[1], c * 1.5);
        }
        id(j, 0, 0, c * 10);
        Xb(j, e[0]);
        id(j, 0, 0, c * 4);
        Xb(j, e[2], e[1], c * 1.5);
        j.globalCompositeOperation = "destination-out";
        id(j, 0, 0, c * 4);
        Xb(j, e[0], e[1], c * 2);
        j.globalCompositeOperation = "source-over";
        id(j, 0, 0, c * 4);
        Xb(j, qs, e[1], c * 2);
        return i;
    }
    function Pd(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 185;
        f.height = b * 240;
        g.globalAlpha = 0.5;
        g.translate(0, b * 10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 137);
        g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
        g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
        g.closePath();
        Xb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 181);
        g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
        g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
        g.closePath();
        Xb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 63, b * 208);
        g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
        g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
        g.closePath();
        Xb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 130, b * 170);
        g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
        g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
        g.closePath();
        Xb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 39, b * 140);
        g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
        g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
        g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
        g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
        g.closePath();
        Xb(g, d[0]);
        g.globalAlpha = 1;
        g.translate(0, b * -10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 137);
        g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
        g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
        g.closePath();
        Xb(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 181);
        g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
        g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
        g.closePath();
        Xb(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 63, b * 208);
        g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
        g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
        g.closePath();
        Xb(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 130, b * 170);
        g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
        g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
        g.closePath();
        Xb(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 39, b * 140);
        g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
        g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
        g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
        g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
        g.closePath();
        Xb(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 59, b * 99);
        g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
        g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
        g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
        g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
        g.closePath();
        Xb(g, d[3], d[2], b * 4);
        if (e === 0) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 47, b * 149);
            g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
            g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
            g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
            g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
            g.closePath();
            Xb(g, d[1]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 40, b * 139);
            g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
            g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
            g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
            g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
            g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
            g.closePath();
            Xb(g, d[3], d[2], b * 4);
        } else {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 41, b * 139);
            g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
            g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
            g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
            g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
            g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
            g.closePath();
            Xb(g, d[3], d[2], b * 4);
        }
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 90, b * 95);
        g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
        g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
        g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
        g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
        g.closePath();
        Xb(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 90, b * 86);
        g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
        g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
        g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
        g.closePath();
        Xb(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 92, b * 117);
        g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
        g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
        g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
        g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
        g.closePath();
        Xb(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 92, b * 175);
        g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
        g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
        g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
        g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
        g.closePath();
        Xb(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 48, b * 169);
        g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
        g.closePath();
        Xb(g, Gi, d[2], b * 5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 136, b * 171);
        g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
        g.closePath();
        Xb(g, Gi, d[2], b * 4);
        id(g, b * 63, b * 180, b * 15.231546211727817);
        Xb(g, d[4]);
        id(g, b * 121, b * 181, b * 15.652475842498529);
        Xb(g, d[4]);
        id(g, b * 58, b * 175, b * 5.656854249492381);
        Xb(g, d[2]);
        id(g, b * 116, b * 175, b * 5.656854249492381);
        Xb(g, d[2]);
        return f;
    }
    function Ad(a) {
        if (a > 0) {
            return a * a;
        } else {
            return a;
        }
    }
    function kd(a) {
        return Gf.String.fromCharCode(a);
    }
    function xd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 40;
        var a = b * 40;
        e.width = g;
        e.height = a;
        var i = g * b / 2;
        var j = a * b / 2;
        var k = b * 15;
        f.save();
        f.translate(i, j);
        f.globalAlpha = 1;
        id(f, 0, 0, k);
        Xb(f, d[0]);
        k = b * 5;
        i = b * 2;
        j = b * 1;
        f.translate(i, j);
        f.globalAlpha = 1;
        id(f, 0, 0, k);
        Xb(f, d[1]);
        f.restore();
        return e;
    }
    const Md = 3;
    const Bd = 8;
    function Dd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 101, a * 255);
        e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
        e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
        e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
        e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
        e.closePath();
        Xb(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99, a * 258);
        e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
        e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
        e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
        e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
        e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
        e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
        e.closePath();
        Xb(e, c[2], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 323);
        e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
        e.closePath();
        Xb(e, undefined, c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 210);
        e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
        e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
        e.closePath();
        Xb(e, c[3], c[4], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 200);
        e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
        e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
        e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
        e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
        e.closePath();
        Xb(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 97, a * 204);
        e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
        e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
        e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
        e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
        e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
        e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
        e.closePath();
        Xb(e, c[2], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 260);
        e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
        e.closePath();
        Xb(e, od, c[1], a * 14);
        id(e, a * 161, a * 201, a * 13);
        Xb(e, c[5]);
        id(e, a * 216, a * 205, a * 8.06225774829855);
        Xb(e, c[5]);
        id(e, a * 216, a * 175, a * 6.708203932499369);
        Xb(e, c[5]);
        id(e, a * 271, a * 191, a * 5.0990195135927845);
        Xb(e, c[5]);
        id(e, a * 206, a * 180, a * 11.180339887498949);
        Xb(e, c[5]);
        return d;
    }
    function Id(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 52;
        d.height = a * 65;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9.833328247070312, a * 12.078125);
        e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
        e.closePath();
        Xb(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 7.8333282470703125, a * 20.078125);
        e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
        e.closePath();
        Xb(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.833328247070312, a * 26.078125);
        e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
        e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
        e.closePath();
        Xb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35.83332824707031, a * 8.078125);
        e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
        e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
        e.closePath();
        Xb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25.833328247070312, a * 39.078125);
        e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
        e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
        e.closePath();
        Xb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.83332824707031, a * 23.078125);
        e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
        e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
        e.closePath();
        Xb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.833328247070312, a * 24.078125);
        e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
        e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
        Xb(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 38.83332824707031, a * 14.078125);
        e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
        Xb(e, Pg, c[1], a * 2);
        return d;
    }
    function Ed(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 188;
        c.height = a * 190;
        d.globalAlpha = 0.5;
        d.translate(0, a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        Xb(d, b[0], b[0], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
        d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
        d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
        d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
        d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
        d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
        d.closePath();
        Xb(d, b[0], b[0], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
        d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
        d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
        d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
        d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
        d.closePath();
        Xb(d, b[0], b[0], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
        d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
        d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
        d.closePath();
        Xb(d, b[0], b[0], a * 2);
        d.globalAlpha = 1;
        d.translate(0, a * -5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        Xb(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
        d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
        d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
        d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
        d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
        d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
        d.closePath();
        Xb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        Xb(d, undefined, b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
        d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
        d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
        d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
        Xb(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
        d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
        d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
        Xb(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
        d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
        d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
        d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
        d.closePath();
        Xb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
        d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
        d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
        d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
        d.closePath();
        Xb(d, b[3]);
        id(d, a * 77, a * 107, a * 6);
        Xb(d, b[2]);
        id(d, a * 110, a * 107, a * 6);
        Xb(d, b[2]);
        id(d, a * 75, a * 105, a * 3);
        Xb(d, b[4]);
        id(d, a * 108, a * 105, a * 3);
        Xb(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
        d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
        d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
        d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
        d.closePath();
        Xb(d, b[1]);
        return c;
    }
    function Sd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 85, a * 237);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 54.585977194239184, a * 1);
        e.restore();
        Xb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 178, a * 238);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 52.53573932334064, a * 1);
        e.restore();
        Xb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 270, a * 239);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 53.58058329516393, a * 1);
        e.restore();
        Xb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 222, a * 312);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 52.53573932334064, a * 1);
        e.restore();
        Xb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 317, a * 159);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 57.63465889766331, a * 1);
        e.restore();
        Xb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 223.5, a * 139.0625);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 51.66236541235796, a * 1);
        e.restore();
        Xb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 132.5, a * 137.0625);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 52.009614495783374, a * 1);
        e.restore();
        Xb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 178.5, a * 58.0625);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 53.16013544000805, a * 1);
        e.restore();
        Xb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 177.5, a * 216.0625);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 50, a * 1);
        e.restore();
        Xb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 84.5, a * 215.0625);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 54, a * 1);
        e.restore();
        Xb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 319.5, a * 138.0625);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 55.08175741568164, a * 1);
        e.restore();
        Xb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 269.5, a * 216.0625);
        e.rotate(1.5707963267948966);
        nd(e, 6, a * 54.589376255824725, a * 1);
        e.restore();
        Xb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 221.5, a * 293.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 49.49747468305833, a * 1);
        e.restore();
        Xb(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 221.5, a * 342.0625);
        e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
        e.closePath();
        Xb(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 270.0625);
        e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
        e.closePath();
        Xb(e, undefined, c[2], a * 12);
        e.save();
        e.translate(a * 84.5, a * 215.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 30, a * 15);
        e.restore();
        Xb(e, c[3]);
        e.save();
        e.translate(a * 177.5, a * 215.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 30, a * 15);
        e.restore();
        Xb(e, c[3]);
        e.save();
        e.translate(a * 222.5, a * 294.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 30, a * 15);
        e.restore();
        Xb(e, c[3]);
        e.save();
        e.translate(a * 270.5, a * 216.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 30, a * 15);
        e.restore();
        Xb(e, c[3]);
        e.save();
        e.translate(a * 320.5, a * 134.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 30, a * 15);
        e.restore();
        Xb(e, c[3]);
        e.save();
        e.translate(a * 224.5, a * 138.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 30, a * 15);
        e.restore();
        Xb(e, c[3]);
        e.save();
        e.translate(a * 133.5, a * 137.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 30, a * 15);
        e.restore();
        Xb(e, c[3]);
        e.save();
        e.translate(a * 178.5, a * 56.0625);
        e.rotate(0.5235987755982988);
        nd(e, 6, a * 30, a * 15);
        e.restore();
        Xb(e, c[3]);
        return d;
    }
    function Qd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 55;
        var a = b * 55;
        var h = b * 8;
        e.width = g;
        e.height = a;
        f.translate(b * -65, b * -55 + h);
        f.globalAlpha = 1;
        f.beginPath();
        f.moveTo(b * 95, b * 60);
        f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
        f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
        f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
        f.closePath();
        Xb(f, d[0], d[1], 3);
        f.globalAlpha = 1;
        f.beginPath();
        f.moveTo(b * 91, b * 70);
        f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
        f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
        f.closePath();
        Xb(f, d[2], d[3], 3);
        return e;
    }
    function _d(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 202.5, a * 147.5);
        Zb(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
        e.restore();
        Xb(e, b[0], b[1], a * 12);
        e.save();
        e.translate(a * 202.5, a * 190.5);
        Zb(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
        e.restore();
        Xb(e, b[2], b[1], a * 12);
        e.save();
        e.save();
        e.translate(a * 202.5, a * 233.5);
        Zb(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
        e.restore();
        Xb(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 202.5, a * 275);
        Zb(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
        e.restore();
        Xb(e, b[0], b[1], a * 12);
        e.save();
        e.translate(a * 201, a * 212);
        e.rotate(8.64);
        Zb(e, a * -116, a * -22, a * 232, a * 44, a * 10);
        e.restore();
        Xb(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 203.5, a * 121.5);
        Zb(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
        e.restore();
        Xb(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 203.5, a * 299);
        Zb(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
        e.restore();
        Xb(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 298.5, a * 210);
        Zb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
        e.restore();
        Xb(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 108.5, a * 210);
        Zb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
        e.restore();
        Xb(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 204, a * 121.5);
        Zb(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
        e.restore();
        Xb(e, b[3], b[3], a * 10);
        e.save();
        e.translate(a * 197, a * 299);
        Zb(e, a * 85, a * -9, a * -170, a * 18, a * 10);
        e.restore();
        Xb(e, b[3], b[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 94, a * 317);
        e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
        e.closePath();
        Xb(e, yl, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279, a * 142);
        e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
        e.closePath();
        Xb(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 106);
        e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
        e.closePath();
        Xb(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 281, a * 282);
        e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
        e.closePath();
        Xb(e, undefined, b[1], a * 12);
        if (c == 0) {
            e.scale(2, 2);
            e.translate(a * -7, a * 55);
            e.rotate(-0.5);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 60, a * 47);
            e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
            e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
            e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
            e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
            e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
            e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
            e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
            e.closePath();
            Xb(e, b[4], b[4], a * 5);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 68, a * 54);
            e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
            e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
            e.closePath();
            Xb(e, b[3]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 50, a * 55);
            e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
            e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
            e.closePath();
            Xb(e, b[3]);
        } else if (c == 1) {
            e.scale(0.6, 0.6);
            e.translate(a * 185, a * 165);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 108, a * 56);
            e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
            e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
            e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
            e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
            e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
            e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
            e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
            e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
            e.closePath();
            Xb(e, b[4], b[4], a * 20);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 112, a * 72);
            e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
            e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
            e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
            e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
            e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
            e.closePath();
            Xb(e, undefined, b[0], a * 13);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 132, a * 117);
            e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
            e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
            e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
            Xb(e, od, b[0], a * 20);
            id(e, a * 142, a * 221, a * 16.1245154965971);
            Xb(e, b[0]);
        }
        return d;
    }
    function Fd(c, e) {
        var f = document.createElement("canvas");
        var i = f.getContext("2d");
        var j = c * 85;
        var k = c * 115;
        var a = c * 6;
        f.width = j;
        f.height = k;
        i.translate(c * -130, c * -60 + a);
        i.globalAlpha = 0.5;
        i.beginPath();
        i.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
        i.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
        i.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
        i.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
        i.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
        i.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
        i.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
        i.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
        i.closePath();
        Xb(i, e[0]);
        i.translate(0, -a);
        i.globalAlpha = 1;
        i.beginPath();
        i.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
        i.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
        i.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
        i.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
        i.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
        i.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
        i.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
        i.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
        i.closePath();
        Xb(i, e[1], e[2], 4);
        var m = c * 155;
        var n = c * 133;
        var h = c * 10;
        var l = c * 3;
        var g = m + c * -3;
        var b = n + c * -5;
        i.save();
        i.translate(m, n);
        i.globalAlpha = 1;
        id(i, 0, 0, h);
        Xb(i, e[3]);
        i.restore();
        i.save();
        i.translate(g, b);
        i.globalAlpha = 1;
        id(i, 0, 0, l);
        Xb(i, e[4]);
        i.restore();
        i.save();
        i.translate(m + c * 27, n);
        i.globalAlpha = 1;
        id(i, 0, 0, h);
        Xb(i, e[3]);
        i.restore();
        i.save();
        i.translate(c * 27 + g, b);
        i.globalAlpha = 1;
        id(i, 0, 0, l);
        Xb(i, e[4]);
        return f;
    }
    function Rd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 238;
        c.height = a * 230;
        d.translate(a * -93, a * -110 + a * 5);
        d.globalAlpha = 0.3;
        id(d, a * 213.5, a * 256.75, a * 75);
        Xb(d, b[5]);
        id(d, a * 213.5, a * 175.75, a * 25);
        Xb(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.translate(0, -5);
        d.globalAlpha = 1;
        id(d, a * 213.5, a * 256.75, a * 75);
        Xb(d, b[3]);
        id(d, a * 213.5, a * 175.75, a * 25);
        Xb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 219.5, a * 158.75);
        d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
        d.closePath();
        d.lineWidth = a * 10;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 210.5, a * 160.75);
        d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
        d.closePath();
        d.lineWidth = a * 10;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 219.5, a * 158.75);
        d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
        d.closePath();
        d.fillStyle = b[0];
        d.fill();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 210.5, a * 160.75);
        d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
        d.closePath();
        d.fillStyle = b[0];
        d.fill();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        id(d, a * 213.5, a * 256.75, a * 70);
        Xb(d, b[0]);
        id(d, a * 213.5, a * 175.75, a * 20);
        Xb(d, b[0]);
        id(d, a * 222, a * 166, a * 5);
        d.fillStyle = b[2];
        d.fill();
        id(d, a * 205, a * 166, a * 5);
        d.fillStyle = b[2];
        d.fill();
        id(d, a * 206.2, a * 167, a * 2.5);
        d.fillStyle = b[4];
        d.fill();
        id(d, a * 223.2, a * 167, a * 2.5);
        d.fillStyle = b[4];
        d.fill();
        d.save();
        d.translate(a * 213.5, a * 293.75);
        d.rotate(0.76);
        Zb(d, a * -22, a * -21, a * 44, a * 42, a * 6);
        d.restore();
        d.fillStyle = b[1];
        d.fill();
        d.save();
        d.translate(a * 212.5, a * 258.25);
        d.rotate(0.8);
        Zb(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
        d.restore();
        d.fillStyle = b[1];
        d.fill();
        return c;
    }
    const jd = 15;
    function Gd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 75;
        var a = b * 55;
        e.width = g;
        e.height = a;
        f.translate(b * -30, b * -40);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
        f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
        f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
        f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
        f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
        f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
        f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
        f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
        f.closePath();
        Xb(f, d[0]);
        f.beginPath();
        f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
        f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
        f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
        f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
        f.closePath();
        Xb(f, d[1]);
        f.beginPath();
        f.moveTo(b * 69, b * 65);
        f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
        f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
        f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
        Xb(f, Br, d[1], 2);
        f.beginPath();
        f.moveTo(b * 50, b * 48);
        f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
        f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
        f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
        Xb(f, d[2]);
        return e;
    }
    function Ld(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        nd(e, 7, a * 9.848857801796104, a * 5);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        nd(e, 7, a * 9.848857801796104, a * 5);
        e.restore();
        Xb(e, c[8], c[9], a * 4);
        return d;
    }
    function Wd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.translate(a * 5, a * 5);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.32);
        nd(e, 7, a * 42.15447781671598, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.32);
        nd(e, 7, a * 42.15447781671598, a * 10);
        e.restore();
        Xb(e, c[1], c[2], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.28);
        nd(e, 7, a * 30.463092423455635, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.28);
        nd(e, 7, a * 30.463092423455635, a * 10);
        e.restore();
        Xb(e, c[3], c[4], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        id(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        id(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
        Xb(e, c[5], c[6], a * 4);
        return d;
    }
    function Od(f, e, i) {
        var j = document.createElement("canvas");
        var k = j.getContext("2d");
        var m = f * 195;
        var a = f * 190;
        var n = m / 2;
        var o = a / 2;
        j.width = m;
        j.height = a;
        var h = f * 10;
        var l = f * 35;
        var g = f * 150;
        var b = l / 2;
        var d = g / 2;
        var p = f * 4;
        k.translate(n - f * 5, o - f * 5);
        k.rotate(-Math.PI / 1.25);
        k.globalAlpha = 1;
        Zb(k, -b, -d, l, g, h);
        Xb(k, i[0], i[1], p);
        k.translate(0, 0);
        k.rotate(Math.PI / 3);
        k.globalAlpha = 1;
        Zb(k, -b, -d, l, g, h);
        Xb(k, i[0], i[1], p);
        k.translate(0, 5);
        Zb(k, -b / 2, -d / 2, l / 2, g / 3, h - 2);
        Xb(k, i[1]);
        return j;
    }
    const Nd = String.fromCharCode;
    const Hd = Nd(101);
    const qd = Nd(118);
    const Ud = Nd(97);
    const Yd = Nd(108);
    function Kd(f, e, i, j, k) {
        var n = document.createElement("canvas");
        var a = n.getContext("2d");
        var o = f * 70;
        var q = f * 70;
        var h = f * 10;
        var l = f * 5;
        n.width = o;
        n.height = q + l;
        for (var g = 0; g < e.length; g++) {
            var r = e[g];
            a.globalAlpha = r.a;
            var s = r.f(i, false, r.c);
            a.save();
            a.translate(o / 2 + r.x * f, q / 2 + f * r.y);
            a.rotate(r.r);
            a.drawImage(s, -s.width / 2, -s.height / 2);
            a.restore();
        }
        var t = [];
        for (g = 0; j.length > g; g++) {
            var c = document.createElement("canvas");
            var u = c.getContext("2d");
            c.width = o;
            c.height = q + l;
            u.globalAlpha = k / 2;
            if (g == 2) {
                Zb(u, 0, l, o, q, h);
            } else {
                Zb(u, 0, 0, o, q + l, h);
            }
            Xb(u, "#081a19");
            u.globalAlpha = k;
            Zb(u, 0, g == 2 ? l : 0, o, q, h);
            Xb(u, j[g]);
            u.globalAlpha = 1;
            if (g == 2) {
                u.drawImage(n, 0, l);
            } else {
                u.drawImage(n, 0, 0);
            }
            t.push(sq(c));
        }
        return t;
    }
    function Xd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85.25, a * 82.953125);
        e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
        e.closePath();
        Xb(e, undefined, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111.25, a * 8.953125);
        e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
        e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
        e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111.25, a * 8.953125);
        e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
        e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
        e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
        e.closePath();
        Xb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85.25, a * 82.953125);
        e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
        e.closePath();
        Xb(e, undefined, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.25, a * 84.953125);
        e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
        e.closePath();
        Xb(e, lj, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 160.25, a * 114.953125);
        e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
        e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
        e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 160.25, a * 114.953125);
        e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
        e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
        e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
        e.closePath();
        Xb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.25, a * 84.953125);
        e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
        e.closePath();
        Xb(e, Yl, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.25, a * 83.953125);
        e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
        e.closePath();
        Xb(e, undefined, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 13.25, a * 53.953125);
        e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
        e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
        e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 13.25, a * 53.953125);
        e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
        e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
        e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
        e.closePath();
        Xb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.25, a * 83.953125);
        e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
        e.closePath();
        Xb(e, undefined, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.25, a * 86.953125);
        e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
        e.closePath();
        Xb(e, Pg, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.25, a * 159.953125);
        e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
        e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
        e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.25, a * 159.953125);
        e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
        e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
        e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
        e.closePath();
        Xb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.25, a * 86.953125);
        e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
        e.closePath();
        Xb(e, undefined, c[6], a * 4);
        return d;
    }
    const Zd = 13;
    function $d(f, e, i) {
        var j = document.createElement("canvas");
        var k = j.getContext("2d");
        var m = f * 193;
        var a = f * 198;
        var n = f * 140;
        var o = f * 90;
        j.width = m;
        j.height = a;
        var h = f * 10;
        var l = f * 25;
        var g = f * 180;
        var b = l / 2;
        var d = g / 2;
        var p = f * 4;
        k.translate(f * -25, f * 1);
        k.translate(n, o);
        k.rotate(-Math.PI / 5);
        Zb(k, -b, -d, l, g, h);
        Xb(k, i[0], i[1], p);
        k.translate(f * -30, f * -25);
        k.rotate(Math.PI / 3);
        Zb(k, -b, -d, l, g, h);
        Xb(k, i[0], i[1], p);
        k.translate(f * 35, f * 30);
        k.rotate(Math.PI / 3);
        Zb(k, -b, -d, l, g, h);
        Xb(k, i[0], i[1], p);
        return j;
    }
    const At = 5;
    function Bt(f, e, i) {
        var j = document.createElement("canvas");
        var k = j.getContext("2d");
        var m = f * 135;
        var a = f * 190;
        var n = m / 2;
        var o = a / 2;
        j.width = m;
        j.height = a;
        var h = f * 10;
        var l = f * 25;
        var g = f * 180;
        var b = l / 2;
        var d = g / 2;
        var p = f * 4;
        k.translate(n, o);
        k.rotate(-Math.PI / 5);
        k.globalAlpha = 1;
        Zb(k, -b, -d, l, g, h);
        Xb(k, i[0], i[1], p);
        k.translate(0, 0);
        k.rotate(Math.PI / 5);
        k.globalAlpha = 1;
        Zb(k, -b, -d, l, g, h);
        Xb(k, i[0], i[1], p);
        return j;
    }
    function Ct(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 370;
        var a = b * 370;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 180;
        f.globalAlpha = 0.2;
        id(f, i, j, h);
        Xb(f, d[0]);
        return e;
    }
    function Dt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 155;
        d.height = a * 127;
        e.globalAlpha = 0.5;
        e.translate(0, a * 8);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.translate(a * 7, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 41);
        e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
        e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
        e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
        e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
        e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
        e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
        e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        Xb(e, undefined, c[2], a * 4);
        id(e, a * 18, a * 38, a * 14.866068747318506);
        Xb(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 30);
        e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
        e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
        Xb(e, c[1], c[2], a * 4);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        Xb(e, c[4], c[5], a * 4);
        return d;
    }
    function Et(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 205;
        var a = b * 205;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 100;
        f.translate(i, j);
        f.globalAlpha = 1;
        id(f, 0, 0, h);
        Xb(f, d[0]);
        return e;
    }
    function Ft(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 155;
        d.height = a * 127;
        e.globalAlpha = 0.5;
        e.translate(0, a * 8);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.translate(a * 7, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 41);
        e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
        e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
        e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
        e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
        e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
        e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
        e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        Xb(e, vg, c[2], a * 4);
        id(e, a * 18, a * 38, a * 14.866068747318506);
        Xb(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 30);
        e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
        e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
        Xb(e, c[1], c[2], a * 4);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 74);
        e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
        e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
        e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
        e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
        e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
        e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
        e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
        e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
        e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
        e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
        e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
        e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
        e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
        e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
        e.closePath();
        Xb(e, c[6], c[7], a * 6);
        return d;
    }
    function Gt(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 220;
        var g = b * 220;
        var a = b * 32;
        var h = b * 4;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2 + b * 10);
        e.globalAlpha = 0.5;
        id(e, 0, 0, a);
        Xb(e, c[0], c[0]);
        e.translate(0, b * -8);
        e.globalAlpha = 1;
        id(e, 0, 0, a);
        Xb(e, c[1], c[2], h);
        return d;
    }
    function Ht(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 145;
        var a = b * 145;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 70;
        f.translate(i, j);
        f.globalAlpha = 0.4;
        id(f, 0, 0, h);
        Xb(f, d[0]);
        h = b * 50;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        id(f, 0, 0, h);
        Xb(f, d[0]);
        h = b * 35;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        id(f, 0, 0, h);
        Xb(f, d[1]);
        h = b * 20;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        id(f, 0, 0, h);
        Xb(f, d[2]);
        return e;
    }
    const Jt = _a;
    function Kt(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 40;
        var g = b * 40;
        var a = b * 16;
        var h = b * 4;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2);
        e.globalAlpha = 1;
        id(e, 0, 0, a);
        Xb(e, c[0], c[1], h);
        return d;
    }
    const Lt = 5;
    function Mt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 321;
        d.height = a * 284;
        e.translate(a * 100, a * 30);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Xb(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        Xb(e, undefined, c[4], a * 4);
        e.translate(a * -100, a * -30);
        e.translate(a * 10, a * 70);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Xb(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        Xb(e, undefined, c[4], a * 4);
        e.translate(a * 20, a * -80);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Xb(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        Xb(e, undefined, c[4], a * 4);
        return d;
    }
    function Nt(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 121;
        f.height = b * 130;
        g.translate(0, b * 20);
        if (d == 1) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 6, b * 23);
            g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
            g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
            g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
            g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
            g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
            g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
            g.closePath();
            Xb(g, Gi, c[3], b * 13);
        }
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 6, b * 23);
        g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
        g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
        g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
        g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
        g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
        g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
        g.closePath();
        Xb(g, c[1], c[2], b * 4);
        if (e == 1) {
            g.translate(0, b * 5);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 67, b * 30);
            g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
            Xb(g, undefined, c[0], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 17);
            g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
            Xb(g, _h, c[0], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 76, b * 8);
            g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
            Xb(g, undefined, c[0], b * 10);
            if (d == 1) {
                g.translate(b * -6, b * -5);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 67, b * 30);
                g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
                Xb(g, undefined, c[3], b * 18);
                g.translate(3, b * 0);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 70, b * 17);
                g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
                Xb(g, undefined, c[3], b * 18);
                g.translate(3, b * 0);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 76, b * 8);
                g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
                Xb(g, lj, c[3], b * 18);
                g.translate(-6, b * 0);
            } else {
                g.translate(b * -6, b * -5);
            }
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 67, b * 30);
            g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
            Xb(g, Ur, c[2], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 17);
            g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
            Xb(g, Jt, c[2], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 76, b * 8);
            g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
            Xb(g, qs, c[2], b * 10);
        } else {
            if (d == 1) {
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 108, b * 27);
                g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
                g.closePath();
                Xb(g, lj, c[3], b * 18);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 79, b * 30);
                g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
                g.closePath();
                Xb(g, fk, c[3], b * 18);
            } else {
                g.translate(0, b * -5);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 108, b * 27);
                g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
                g.closePath();
                Xb(g, undefined, c[0], b * 7);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 79, b * 30);
                g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
                g.closePath();
                Xb(g, undefined, c[0], b * 7);
                g.translate(0, b * 5);
            }
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 108, b * 27);
            g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
            g.closePath();
            Xb(g, undefined, c[2], b * 7);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 79, b * 30);
            g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
            g.closePath();
            Xb(g, undefined, c[2], b * 7);
        }
        return f;
    }
    function Ot(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 283;
        f.height = b * 224;
        g.translate(0, b * 15);
        g.globalAlpha = 0.5;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 93, b * 55);
        g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
        g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
        g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
        g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
        g.closePath();
        Xb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        g.closePath();
        Xb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        Xb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        Xb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        Xb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        Xb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        Xb(g, d[0]);
        g.translate(0, b * -15);
        g.globalAlpha = 1;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        Xb(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        Xb(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        Xb(g, Go, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        Xb(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        Xb(g, yl, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        Xb(g, lj, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 93, b * 55);
        g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
        g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
        g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
        g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
        g.closePath();
        Xb(g, d[1], d[2], b * 10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        Xb(g, gs, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        Xb(g, od, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        Xb(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        Xb(g, vg, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        Xb(g, fk, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        Xb(g, undefined, d[1], b * 20);
        id(g, b * 101, b * 155, b * 20.591260281974);
        Xb(g, d[3]);
        id(g, b * 180, b * 155, b * 20.591260281974);
        Xb(g, d[3]);
        id(g, b * 95, b * 148, b * 7.211102550927978);
        Xb(g, d[4]);
        id(g, b * 173, b * 148, b * 7.211102550927978);
        Xb(g, d[4]);
        if (e === 1) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 191, b * 107);
            g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
            g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
            g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
            g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
            g.closePath();
            Xb(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 206, b * 98);
            g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
            g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
            g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
            g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
            g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
            g.closePath();
            Xb(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 172, b * 111);
            g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
            g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
            g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
            g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
            g.closePath();
            Xb(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 202, b * 125);
            g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
            g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
            g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
            g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
            g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
            g.closePath();
            Xb(g, d[2]);
        }
        return f;
    }
    function Pt(f, e, i, j) {
        var k = document.createElement("canvas");
        var m = k.getContext("2d");
        var a = f * 210;
        var n = f * 205;
        var o = f * 30;
        var h = f * 20;
        var l = f * 200;
        var g = f * 180;
        var b = l / 2;
        var d = g / 2;
        k.width = a;
        k.height = n;
        k.width = f * 419;
        k.height = f * 412;
        if (j == 1) {
            m.save();
            m.translate(f * 10, f * 0);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 117.99996948242188, f * 216.40621948242188);
            m.bezierCurveTo(f * 86.99996948242188, f * 221.40621948242188, f * 74.99996948242188, f * 217.40621948242188, f * 60.999969482421875, f * 205.40621948242188);
            Xb(m, undefined, e[4], f * 3);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 114.99996948242188, f * 227.40621948242188);
            m.bezierCurveTo(f * 90.99996948242188, f * 233.40621948242188, f * 66.99996948242188, f * 228.40621948242188, f * 43.999969482421875, f * 225.40621948242188);
            Xb(m, undefined, e[4], f * 3);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 110.99996948242188, f * 236.40621948242188);
            m.bezierCurveTo(f * 94.99996948242188, f * 244.40621948242188, f * 79.99996948242188, f * 249.40621948242188, f * 60.999969482421875, f * 249.40621948242188);
            Xb(m, yl, e[4], f * 3);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 111.99996948242188, f * 206.29513549804688);
            m.bezierCurveTo(f * 91.99996948242188, f * 206.29513549804688, f * 87.99996948242188, f * 201.29513549804688, f * 79.99996948242188, f * 192.29513549804688);
            Xb(m, undefined, e[4], f * 3);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 109.99996948242188, f * 249.18402099609375);
            m.bezierCurveTo(f * 97.99996948242188, f * 263.18402099609375, f * 85.99996948242188, f * 271.18402099609375, f * 65.99996948242188, f * 277.18402099609375);
            Xb(m, undefined, e[4], f * 3);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 105.99996948242188, f * 192.18402099609375);
            m.bezierCurveTo(f * 99.49996948242188, f * 197.68402099609375, f * 99.49996948242188, f * 197.68402099609375, f * 92.99996948242188, f * 203.18402099609375);
            m.bezierCurveTo(f * 95.99996948242188, f * 213.18402099609375, f * 95.99996948242188, f * 215.18402099609375, f * 89.99996948242188, f * 219.18402099609375);
            m.bezierCurveTo(f * 91.99996948242188, f * 223.18402099609375, f * 91.99996948242188, f * 226.18402099609375, f * 87.99996948242188, f * 230.18402099609375);
            m.bezierCurveTo(f * 89.99996948242188, f * 234.18402099609375, f * 91.99996948242188, f * 237.18402099609375, f * 90.99996948242188, f * 244.18402099609375);
            m.bezierCurveTo(f * 96.99996948242188, f * 252.18402099609375, f * 96.99996948242188, f * 256.18402099609375, f * 95.99996948242188, f * 262.18402099609375);
            m.bezierCurveTo(f * 106.49996948242188, f * 264.18402099609375, f * 106.49996948242188, f * 264.18402099609375, f * 116.99996948242188, f * 266.18402099609375);
            Xb(m, Go, e[4], f * 3);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 104.99996948242188, f * 183.29513549804688);
            m.bezierCurveTo(f * 99.99996948242188, f * 193.29513549804688, f * 93.99996948242188, f * 195.29513549804688, f * 89.99996948242188, f * 201.29513549804688);
            m.bezierCurveTo(f * 86.99996948242188, f * 212.29513549804688, f * 85.99996948242188, f * 214.29513549804688, f * 81.99996948242188, f * 215.29513549804688);
            m.bezierCurveTo(f * 83.99996948242188, f * 223.29513549804688, f * 83.99996948242188, f * 227.29513549804688, f * 79.99996948242188, f * 230.29513549804688);
            m.bezierCurveTo(f * 83.99996948242188, f * 235.29513549804688, f * 84.99996948242188, f * 240.29513549804688, f * 79.99996948242188, f * 246.29513549804688);
            m.bezierCurveTo(f * 86.99996948242188, f * 251.29513549804688, f * 91.99996948242188, f * 256.2951354980469, f * 89.99996948242188, f * 266.2951354980469);
            m.bezierCurveTo(f * 102.99996948242188, f * 269.2951354980469, f * 102.99996948242188, f * 269.2951354980469, f * 115.99996948242188, f * 272.2951354980469);
            Xb(m, _h, e[4], f * 3);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 107.99996948242188, f * 177.85067749023438);
            m.bezierCurveTo(f * 95.99996948242188, f * 187.35067749023438, f * 95.99996948242188, f * 187.35067749023438, f * 83.99996948242188, f * 196.85067749023438);
            m.bezierCurveTo(f * 82.99996948242188, f * 203.85067749023438, f * 80.99996948242188, f * 209.85067749023438, f * 72.99996948242188, f * 210.85067749023438);
            m.bezierCurveTo(f * 73.99996948242188, f * 220.85067749023438, f * 73.99996948242188, f * 221.85067749023438, f * 66.99996948242188, f * 227.85067749023438);
            m.bezierCurveTo(f * 71.99996948242188, f * 235.85067749023438, f * 73.99996948242188, f * 239.85067749023438, f * 71.99996948242188, f * 247.85067749023438);
            m.bezierCurveTo(f * 80.99996948242188, f * 257.8506774902344, f * 81.99996948242188, f * 263.8506774902344, f * 77.99996948242188, f * 271.8506774902344);
            m.bezierCurveTo(f * 95.49996948242188, f * 272.8506774902344, f * 95.49996948242188, f * 272.8506774902344, f * 112.99996948242188, f * 273.8506774902344);
            Xb(m, undefined, e[4], f * 3);
            m.restore();
        } else if (j == 2) {
            m.save();
            m.translate(f * 130, f * 35);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 170.99996948242188, f * 133.85067749023438);
            m.bezierCurveTo(f * 195.99996948242188, f * 129.85067749023438, f * 196.99996948242188, f * 111.85067749023438, f * 200.99996948242188, f * 88.85067749023438);
            Xb(m, undefined, e[4], f * 3);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 169.99996948242188, f * 143.85067749023438);
            m.bezierCurveTo(f * 189.99996948242188, f * 145.85067749023438, f * 207.99996948242188, f * 126.85067749023438, f * 222.99996948242188, f * 100.85067749023438);
            Xb(m, fh, e[4], f * 3);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 170.99996948242188, f * 157.85067749023438);
            m.bezierCurveTo(f * 193.99996948242188, f * 160.85067749023438, f * 210.99996948242188, f * 151.85067749023438, f * 232.99996948242188, f * 139.85067749023438);
            Xb(m, undefined, e[4], f * 3);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 169.99996948242188, f * 168.85067749023438);
            m.bezierCurveTo(f * 192.99996948242188, f * 175.85067749023438, f * 203.99996948242188, f * 177.85067749023438, f * 245.99996948242188, f * 168.85067749023438);
            Xb(m, Sq, e[4], f * 3);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 167.99996948242188, f * 168.85067749023438);
            m.bezierCurveTo(f * 183.99996948242188, f * 189.85067749023438, f * 191.99996948242188, f * 193.85067749023438, f * 220.99996948242188, f * 196.85067749023438);
            Xb(m, undefined, e[4], f * 3);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 176.99996948242188, f * 117.85067749023438);
            m.bezierCurveTo(f * 181.99996948242188, f * 120.85067749023438, f * 181.99996948242188, f * 120.85067749023438, f * 186.99996948242188, f * 123.85067749023438);
            m.bezierCurveTo(f * 183.99996948242188, f * 137.85067749023438, f * 185.99996948242188, f * 136.85067749023438, f * 190.99996948242188, f * 136.85067749023438);
            m.bezierCurveTo(f * 186.99996948242188, f * 147.85067749023438, f * 189.99996948242188, f * 152.85067749023438, f * 193.99996948242188, f * 155.85067749023438);
            m.bezierCurveTo(f * 187.99996948242188, f * 165.85067749023438, f * 190.99996948242188, f * 169.85067749023438, f * 190.99996948242188, f * 172.85067749023438);
            m.bezierCurveTo(f * 186.99996948242188, f * 183.85067749023438, f * 186.99996948242188, f * 185.85067749023438, f * 189.99996948242188, f * 188.85067749023438);
            m.bezierCurveTo(f * 182.49996948242188, f * 195.35067749023438, f * 182.49996948242188, f * 195.35067749023438, f * 174.99996948242188, f * 201.85067749023438);
            Xb(m, undefined, e[4], f * 3);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 176.99996948242188, f * 112.18402099609375);
            m.bezierCurveTo(f * 183.99996948242188, f * 119.18402099609375, f * 186.99996948242188, f * 117.18402099609375, f * 192.99996948242188, f * 116.18402099609375);
            m.bezierCurveTo(f * 191.99996948242188, f * 126.18402099609375, f * 193.99996948242188, f * 130.18402099609375, f * 199.99996948242188, f * 130.18402099609375);
            m.bezierCurveTo(f * 194.99996948242188, f * 145.18402099609375, f * 197.99996948242188, f * 147.18402099609375, f * 201.99996948242188, f * 153.18402099609375);
            m.bezierCurveTo(f * 196.99996948242188, f * 164.18402099609375, f * 197.99996948242188, f * 169.18402099609375, f * 201.99996948242188, f * 174.18402099609375);
            m.bezierCurveTo(f * 194.99996948242188, f * 184.18402099609375, f * 196.99996948242188, f * 187.18402099609375, f * 200.99996948242188, f * 193.18402099609375);
            m.bezierCurveTo(f * 185.99996948242188, f * 195.18402099609375, f * 181.99996948242188, f * 201.18402099609375, f * 174.99996948242188, f * 210.18402099609375);
            Xb(m, undefined, e[4], f * 3);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 176.99996948242188, f * 101.29513549804688);
            m.bezierCurveTo(f * 181.99996948242188, f * 108.29513549804688, f * 189.99996948242188, f * 110.29513549804688, f * 195.99996948242188, f * 107.29513549804688);
            m.bezierCurveTo(f * 197.99996948242188, f * 121.29513549804688, f * 200.99996948242188, f * 122.29513549804688, f * 206.99996948242188, f * 122.29513549804688);
            m.bezierCurveTo(f * 201.99996948242188, f * 138.29513549804688, f * 204.99996948242188, f * 142.29513549804688, f * 211.99996948242188, f * 148.29513549804688);
            m.bezierCurveTo(f * 201.99996948242188, f * 156.29513549804688, f * 205.99996948242188, f * 167.29513549804688, f * 213.99996948242188, f * 173.29513549804688);
            m.bezierCurveTo(f * 204.99996948242188, f * 181.29513549804688, f * 204.99996948242188, f * 187.29513549804688, f * 205.99996948242188, f * 193.29513549804688);
            m.bezierCurveTo(f * 190.99996948242188, f * 198.29513549804688, f * 181.99996948242188, f * 205.29513549804688, f * 174.99996948242188, f * 214.29513549804688);
            Xb(m, _h, e[4], f * 3);
            m.restore();
        }
        m.translate(k.width / 2, k.height / 2);
        if (!j) {
            m.globalAlpha = 0.5;
            Zb(m, -b, -d, l, g + h, o);
            Xb(m, e[0]);
            if (i) {
                m.rotate(Math.PI);
            }
            m.globalAlpha = 1;
            Zb(m, -b, -d, l, g, o);
            Xb(m, e[1], e[2], 4);
            m.globalAlpha = 1;
            Zb(m, f * 35 - b, f * 20 - d, l - f * 50, g - f * 50, o - f * 10);
            Xb(m, e[3]);
        }
        if (j == 3) {
            m.translate(-k.width / 2, -k.height / 2);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 121, f * 190);
            m.bezierCurveTo(f * 129, f * 186, f * 137, f * 183, f * 135, f * 163);
            m.bezierCurveTo(f * 131, f * 135, f * 153, f * 127, f * 177, f * 124);
            m.bezierCurveTo(f * 198, f * 120, f * 208, f * 122, f * 226, f * 128);
            m.bezierCurveTo(f * 261, f * 112, f * 271, f * 126, f * 287, f * 147);
            m.bezierCurveTo(f * 310, f * 163, f * 304, f * 183, f * 283, f * 196);
            m.bezierCurveTo(f * 296, f * 249, f * 278, f * 262, f * 253, f * 263);
            m.bezierCurveTo(f * 210, f * 264, f * 188, f * 252, f * 177, f * 234);
            m.bezierCurveTo(f * 133, f * 242, f * 123, f * 241, f * 115, f * 225);
            m.bezierCurveTo(f * 109, f * 206, f * 115, f * 193, f * 121, f * 190);
            m.closePath();
            Xb(m, e[4]);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 219, f * 144);
            m.bezierCurveTo(f * 251, f * 121, f * 277, f * 136, f * 276, f * 159);
            m.bezierCurveTo(f * 276, f * 176, f * 273, f * 191, f * 242, f * 193);
            m.bezierCurveTo(f * 226, f * 228, f * 155, f * 219, f * 150, f * 183);
            m.bezierCurveTo(f * 142, f * 144, f * 174, f * 127, f * 219, f * 144);
            m.closePath();
            Xb(m, e[5]);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 123, f * 214);
            m.bezierCurveTo(f * 119, f * 198, f * 129, f * 189, f * 146, f * 194);
            m.bezierCurveTo(f * 158, f * 201, f * 165, f * 218, f * 147, f * 226);
            m.bezierCurveTo(f * 135, f * 230, f * 125, f * 222, f * 123, f * 214);
            m.closePath();
            Xb(m, e[5]);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 257, f * 199);
            m.bezierCurveTo(f * 264, f * 199, f * 275, f * 213, f * 261, f * 220);
            m.bezierCurveTo(f * 246, f * 225, f * 235, f * 200, f * 257, f * 199);
            m.closePath();
            Xb(m, e[5]);
            m.translate(f * -5, f * 55);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 186, f * 123);
            m.bezierCurveTo(f * 198, f * 115, f * 219, f * 110, f * 219, f * 123);
            m.bezierCurveTo(f * 216, f * 135, f * 171, f * 143, f * 186, f * 123);
            m.closePath();
            Xb(m, e[5]);
            m.translate(f * 5, f * -55);
            m.translate(f * -5, f * 15);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 171, f * 241);
            m.bezierCurveTo(f * 189, f * 234, f * 200, f * 248, f * 189, f * 254);
            m.bezierCurveTo(f * 179, f * 260, f * 158, f * 246, f * 171, f * 241);
            m.closePath();
            Xb(m, e[5]);
        } else if (j == 4) {
            m.translate(-k.width / 2, -k.height / 2);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 30, f * 167);
            m.bezierCurveTo(f * 47, f * 144, f * 64, f * 140, f * 80, f * 147);
            m.bezierCurveTo(f * 95, f * 154, f * 95, f * 159, f * 100, f * 179);
            m.bezierCurveTo(f * 105, f * 202, f * 95, f * 218, f * 69, f * 218);
            m.bezierCurveTo(f * 48, f * 236, f * 26, f * 223, f * 28, f * 213);
            m.bezierCurveTo(f * 28, f * 205, f * 29, f * 199, f * 32, f * 195);
            m.bezierCurveTo(f * 21, f * 183, f * 27, f * 173, f * 30, f * 167);
            m.closePath();
            Xb(m, e[4]);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 26, f * 145);
            m.bezierCurveTo(f * 32, f * 138, f * 37, f * 137, f * 40, f * 139);
            m.bezierCurveTo(f * 43, f * 140, f * 41, f * 150, f * 31, f * 159);
            m.bezierCurveTo(f * 23, f * 166, f * 17, f * 158, f * 26, f * 145);
            m.closePath();
            Xb(m, e[4]);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 13, f * 193);
            m.bezierCurveTo(f * 21, f * 187, f * 30, f * 190, f * 20, f * 202);
            m.bezierCurveTo(f * 13, f * 208, f * 7, f * 202, f * 13, f * 193);
            m.closePath();
            Xb(m, e[4]);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 121, f * 190);
            m.bezierCurveTo(f * 129, f * 186, f * 137, f * 183, f * 135, f * 163);
            m.bezierCurveTo(f * 131, f * 135, f * 153, f * 127, f * 177, f * 124);
            m.bezierCurveTo(f * 198, f * 120, f * 208, f * 122, f * 226, f * 128);
            m.bezierCurveTo(f * 261, f * 112, f * 271, f * 126, f * 287, f * 147);
            m.bezierCurveTo(f * 310, f * 163, f * 304, f * 183, f * 283, f * 196);
            m.bezierCurveTo(f * 296, f * 249, f * 278, f * 262, f * 253, f * 263);
            m.bezierCurveTo(f * 210, f * 264, f * 188, f * 252, f * 177, f * 234);
            m.bezierCurveTo(f * 133, f * 242, f * 123, f * 241, f * 115, f * 225);
            m.bezierCurveTo(f * 109, f * 206, f * 115, f * 193, f * 121, f * 190);
            m.closePath();
            Xb(m, e[4]);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 335, f * 196);
            m.bezierCurveTo(f * 312, f * 208, f * 300, f * 185, f * 309, f * 167);
            m.bezierCurveTo(f * 314, f * 141, f * 339, f * 127, f * 359, f * 144);
            m.bezierCurveTo(f * 363, f * 148, f * 364, f * 150, f * 364, f * 150);
            m.bezierCurveTo(f * 392, f * 143, f * 396, f * 183, f * 378, f * 204);
            m.bezierCurveTo(f * 367, f * 215, f * 339, f * 208, f * 335, f * 196);
            m.closePath();
            Xb(m, e[4]);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 349, f * 212);
            m.bezierCurveTo(f * 339, f * 216, f * 334, f * 208, f * 341, f * 203);
            m.bezierCurveTo(f * 353, f * 198, f * 361, f * 205, f * 349, f * 212);
            m.closePath();
            Xb(m, e[4]);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 46, f * 165);
            m.bezierCurveTo(f * 55, f * 148, f * 85, f * 157, f * 83, f * 175);
            m.bezierCurveTo(f * 99, f * 185, f * 89, f * 212, f * 66, f * 204);
            m.bezierCurveTo(f * 55, f * 212, f * 43, f * 212, f * 41, f * 202);
            m.bezierCurveTo(f * 39, f * 194, f * 42, f * 187, f * 49, f * 185);
            m.bezierCurveTo(f * 44, f * 175, f * 45, f * 172, f * 46, f * 165);
            m.closePath();
            Xb(m, e[4]);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 219, f * 144);
            m.bezierCurveTo(f * 251, f * 121, f * 277, f * 136, f * 276, f * 159);
            m.bezierCurveTo(f * 276, f * 176, f * 273, f * 191, f * 242, f * 193);
            m.bezierCurveTo(f * 226, f * 228, f * 155, f * 219, f * 150, f * 183);
            m.bezierCurveTo(f * 142, f * 144, f * 174, f * 127, f * 219, f * 144);
            m.closePath();
            Xb(m, e[5]);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 123, f * 214);
            m.bezierCurveTo(f * 119, f * 198, f * 129, f * 189, f * 146, f * 194);
            m.bezierCurveTo(f * 158, f * 201, f * 165, f * 218, f * 147, f * 226);
            m.bezierCurveTo(f * 135, f * 230, f * 125, f * 222, f * 123, f * 214);
            m.closePath();
            Xb(m, e[5]);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 257, f * 199);
            m.bezierCurveTo(f * 264, f * 199, f * 275, f * 213, f * 261, f * 220);
            m.bezierCurveTo(f * 246, f * 225, f * 235, f * 200, f * 257, f * 199);
            m.closePath();
            Xb(m, e[5]);
            m.translate(f * -5, f * 55);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 186, f * 123);
            m.bezierCurveTo(f * 198, f * 115, f * 219, f * 110, f * 219, f * 123);
            m.bezierCurveTo(f * 216, f * 135, f * 171, f * 143, f * 186, f * 123);
            m.closePath();
            Xb(m, e[5]);
            m.translate(f * 5, f * -55);
            m.translate(f * -5, f * 15);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 171, f * 241);
            m.bezierCurveTo(f * 189, f * 234, f * 200, f * 248, f * 189, f * 254);
            m.bezierCurveTo(f * 179, f * 260, f * 158, f * 246, f * 171, f * 241);
            m.closePath();
            Xb(m, e[5]);
            m.beginPath();
            m.lineCap = "round";
            m.lineJoin = "round";
            m.moveTo(f * 367, f * 164);
            m.bezierCurveTo(f * 380, f * 160, f * 391, f * 185, f * 371, f * 189);
            m.bezierCurveTo(f * 362, f * 192, f * 354, f * 191, f * 350, f * 185);
            m.bezierCurveTo(f * 326, f * 205, f * 314, f * 182, f * 316, f * 171);
            m.bezierCurveTo(f * 317, f * 150, f * 332, f * 143, f * 347, f * 147);
            m.bezierCurveTo(f * 361, f * 151, f * 366, f * 158, f * 367, f * 164);
            m.closePath();
            Xb(m, e[4]);
        }
        return k;
    }
    function Qt(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 283;
        c.height = a * 224;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 100, a * 33);
        d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
        Xb(d, fk, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 181, a * 32);
        d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
        Xb(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 225, a * 52);
        d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
        Xb(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 34, a * 134);
        d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
        Xb(d, mn, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 249, a * 135);
        d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
        Xb(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 56, a * 50);
        d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
        Xb(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 93, a * 55);
        d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
        d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
        d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
        d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
        d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
        d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
        d.closePath();
        Xb(d, b[0]);
        return c;
    }
    function St(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
        e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
        e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
        e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
        e.closePath();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 131, a * 425.5);
        e.rotate(0.16);
        Zb(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
        e.restore();
        Xb(e, c[0]);
        id(e, a * 122, a * 480, a * 18.439088914585774);
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 371);
        e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
        e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
        e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
        e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
        e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
        e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
        e.closePath();
        Xb(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 131, a * 425.5);
        e.rotate(0.16);
        Zb(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
        e.restore();
        Xb(e, c[4], c[5], a * 12.5);
        id(e, a * 122, a * 480, a * 18.439088914585774);
        Xb(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 371);
        e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
        e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
        e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
        e.closePath();
        Xb(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 345);
        e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
        e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
        e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
        e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
        e.closePath();
        Xb(e, c[3]);
        return d;
    }
    function Tt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 100;
        d.height = a * 250;
        e.translate(a * -135, a * -75);
        e.globalAlpha = b ? 0.8 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 178.5, a * 238.03125);
        e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
        e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
        e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
        e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155.5, a * 239.03125);
        e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
        e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
        e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
        e.closePath();
        Xb(e, c[0]);
        id(e, a * 160.5, a * 243.03125, a * 7);
        Xb(e, c[0]);
        id(e, a * 227.5, a * 242.03125, a * 7);
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.5, a * 253.03125);
        e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
        e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
        e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
        e.closePath();
        Xb(e, c[0], c[0], a * 5);
        id(e, a * 194, a * 298, a * 9);
        Xb(e, c[0], c[0], a * 5);
        e.globalAlpha = 1;
        e.translate(a * -10, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 178.5, a * 238.03125);
        e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
        e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
        e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
        e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155.5, a * 239.03125);
        e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
        e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
        e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
        e.closePath();
        Xb(e, c[1], c[2], a * 5);
        id(e, a * 160.5, a * 243.03125, a * 7);
        Xb(e, c[1], c[2], a * 5);
        id(e, a * 227.5, a * 242.03125, a * 7);
        Xb(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.5, a * 253.03125);
        e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
        e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
        e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
        e.closePath();
        Xb(e, c[1], c[2], a * 7);
        id(e, a * 194, a * 298, a * 9);
        Xb(e, c[1], c[2], a * 7);
        return d;
    }
    function Ut(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 424;
        d.height = a * 788;
        e.translate(a * 25, a * 25);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 193.5, a * 602.5);
        e.rotate(-0.12);
        Zb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
        e.restore();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 519);
        e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
        e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
        e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
        e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 119);
        e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
        e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
        e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
        e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 518);
        e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
        e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
        e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
        e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
        e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
        e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
        e.closePath();
        Xb(e, c[0]);
        id(e, a * 204, a * 693, a * 36.013886210738214);
        Xb(e, c[0]);
        id(e, a * 105, a * 518, a * 30);
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 171, a * 535);
        e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
        e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
        e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 244, a * 669);
        e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
        e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
        e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
        e.closePath();
        Xb(e, c[0]);
        e.translate(a * -25, a * -25);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 193.5, a * 602.5);
        e.rotate(-0.12);
        Zb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
        e.restore();
        Xb(e, c[1], c[2], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 519);
        e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
        e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
        e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
        e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
        e.closePath();
        Xb(e, c[3], c[4], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 119);
        e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
        e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
        e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
        e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
        e.closePath();
        Xb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 518);
        e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
        e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
        e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
        e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
        e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
        e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
        e.closePath();
        Xb(e, c[6], c[4], a * 16);
        id(e, a * 204, a * 693, a * 36.013886210738214);
        Xb(e, c[6], c[4], a * 16);
        id(e, a * 105, a * 518, a * 30);
        Xb(e, c[6], c[4], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 171, a * 535);
        e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
        e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
        e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
        e.closePath();
        Xb(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 244, a * 669);
        e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
        e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
        e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
        e.closePath();
        Xb(e, c[6]);
        id(e, a * 204, a * 693, a * 17.029386365926403);
        Xb(e, c[7]);
        id(e, a * 106, a * 518, a * 12);
        Xb(e, c[7]);
        return d;
    }
    function Vt(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 220;
        var g = b * 220;
        var a = b * 16;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2);
        e.globalAlpha = 0.5;
        id(e, 0, 0, a);
        Xb(e, c[0]);
        e.globalAlpha = 1;
        return d;
    }
    function Wt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 131;
        d.height = a * 121;
        e.translate(0, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 59);
        e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
        e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
        e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
        e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
        e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
        e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 59);
        e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
        e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
        e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
        e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
        e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
        e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
        e.closePath();
        Xb(e, c[1], c[2], a * 10);
        return d;
    }
    function Xt(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = Math.max(c.width, b.width);
        var g = Math.max(c.height, b.height);
        d.width = f;
        d.height = g;
        e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
        e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
        return d;
    }
    function Yt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 104;
        d.height = a * 112;
        e.translate(0, a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 16, a * 44);
        e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
        e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
        e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
        e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
        e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
        e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 16, a * 44);
        e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
        e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
        e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
        e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
        e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
        e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
        e.closePath();
        Xb(e, c[1], c[2], a * 8);
        return d;
    }
    function Zt(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 105;
        var a = c * 125;
        var m = c * 4;
        var n = c * 10;
        var h = c * 5;
        var l = c * 10;
        var g = c * 110;
        var b = l / 2;
        var d = g / 2;
        i.width = k;
        i.height = a;
        j.save();
        j.globalAlpha = e ? 0.5 : 1;
        j.translate(k / 2 + c * 8, a / 2 + h);
        Zb(j, -b, -d, l, g, n);
        Xb(j, e ? f[0] : f[1]);
        j.translate(c * -130 + h, c * -128 + h);
        j.beginPath();
        j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
        j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
        j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
        j.closePath();
        Xb(j, f[2]);
        j.restore();
        j.translate(k / 2 + 8, a / 2);
        j.globalAlpha = 1;
        Zb(j, -b, -d, l, g, n);
        Xb(j, f[3], f[4], m);
        j.translate(c * -130, c * -125);
        j.beginPath();
        j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
        j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
        j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
        j.closePath();
        Xb(j, f[5], f[6], m);
        return i;
    }
    function $t(f, e, i) {
        var j = document.createElement("canvas");
        var k = j.getContext("2d");
        var m = (d = f * 450) / 2;
        var a = (p = f * 145) / 2;
        var n = f * 10;
        var o = f * 300;
        var h = f * 30;
        var l = o / 2;
        var g = h / 2;
        var b = 4;
        if (i) {
            var d = f * 145;
            var p = f * 450;
            j.width = d;
            j.height = p;
            k.rotate(Math.PI / 2);
            k.save();
            k.globalAlpha = 0.5;
            Zb(k, f * 100, f * -110, o, h, n);
            Xb(k, e[0]);
            k.translate(f * 178, f * -98);
            Zb(k, -l, -g - f * 6, f * 100, f * 100, n);
            Xb(k, e[0]);
            k.translate(f * -50, f * 5);
            Zb(k, f * 220, f * -15, f * 90, f * 90, n);
            Xb(k, e[0]);
            k.restore();
            k.save();
            k.globalAlpha = 1;
            k.translate(f * 250, f * -63);
            Zb(k, -l - f * 20, -g, o, h, n);
            Xb(k, e[1], e[2], b);
            k.translate(f * -70, f * -40);
            Zb(k, -l - f * 20, -g, f * 100, f * 100, n);
            Xb(k, e[3], e[4], b);
            k.translate(f * -70, f * 15);
            Zb(k, f * 220, f * -22, f * 90, f * 90, n);
            Xb(k, e[3], e[4], b);
            Zb(k, f * 230, f * -12, f * 55, f * 55, n);
            Xb(k, e[5]);
            k.translate(f * -70, 0);
            Zb(k, f * -15, f * -2, f * 60, f * 60, n);
            Xb(k, e[5]);
            k.restore();
        } else {
            j.width = d;
            j.height = p;
            k.save();
            k.globalAlpha = 0.5;
            k.translate(m, a + f * 10);
            Zb(k, -l, -g, o, h, n);
            Xb(k, e[0]);
            k.translate(f * -65, f * -25);
            Zb(k, -l, -g - f * 6, f * 100, f * 100, f * 15);
            Xb(k, e[0]);
            k.translate(f * -35, f * -5);
            Zb(k, f * 220, f * -15, f * 90, f * 90, f * 15);
            Xb(k, e[0]);
            k.restore();
            k.save();
            k.globalAlpha = 1;
            k.translate(f * 240, f * 70);
            Zb(k, -l, -g, o, h, n);
            Xb(k, e[1], e[2], b);
            k.translate(f * -60, f * -40);
            Zb(k, -l - f * 20, -g, f * 100, f * 100, f * 15);
            Xb(k, e[3], e[4], b);
            k.translate(f * -55, f * 10);
            Zb(k, f * 220, f * -22, f * 90, f * 90, f * 15);
            Xb(k, e[3], e[4], b);
            Zb(k, f * 240, f * -12, f * 55, f * 55, f * 12);
            Xb(k, e[5]);
            k.translate(f * 45, f * 0);
            Zb(k, f * -145, f * -2, f * 60, f * 60, f * 12);
            Xb(k, e[5]);
            k.restore();
        }
        return j;
    }
    function _t(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 469;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 31);
        e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
        e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
        e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
        e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 328);
        e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
        e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
        e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 302);
        e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
        e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
        e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
        e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
        e.closePath();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 51.5, a * 440.5);
        e.rotate(0.2);
        Zb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 316);
        e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
        e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        Xb(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 31);
        e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
        e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
        e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
        e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        Xb(e, undefined, c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 328);
        e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
        e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
        e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
        e.closePath();
        Xb(e, c[4], c[5], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 302);
        e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
        e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
        e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
        e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
        e.closePath();
        Xb(e, c[4], c[5], a * 7);
        e.save();
        e.translate(a * 51.5, a * 440.5);
        e.rotate(0.2);
        Zb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
        e.restore();
        Xb(e, c[4], c[5], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 316);
        e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
        e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
        e.closePath();
        Xb(e, c[6]);
        return d;
    }
    const au = 11;
    const bu = 9;
    function cu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 70;
        var a = b * 90;
        var i = b * 4;
        var j = b * 5;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        Xb(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
        f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
        f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
        f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
        f.closePath();
        Xb(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
        f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
        f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
        f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
        f.closePath();
        Xb(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * 3, b * -93 + j);
        f.rotate(Math.PI / 5);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        Xb(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        Xb(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
        f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
        f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
        f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
        f.closePath();
        Xb(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
        f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
        f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
        f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
        f.closePath();
        Xb(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * 3, b * -93);
        f.rotate(Math.PI / 5);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        Xb(f, d[0], d[1], i);
        f.restore();
        return e;
    }
    function du(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        var a = b * 220;
        var i = b * 220;
        var j = b * 100;
        var h = j / 4;
        f.width = a;
        f.height = i;
        g.translate(a / 2, i / 2);
        g.globalAlpha = c ? 0.5 : 1;
        if (!c) {
            g.translate(b * 0, b * -8);
        }
        nd(g, 7, j, h);
        Xb(g, c ? d[0] : d[1]);
        g.globalAlpha = 1;
        if (e == 0) {
            nd(g, 6, j * 0.65, h * 0.65);
            Xb(g, d[2]);
        } else if (e == 1) {
            g.translate(b * 20, b * 20);
            nd(g, 6, j * 0.45, h * 0.4);
            Xb(g, d[2]);
        }
        return f;
    }
    function eu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 154;
        d.height = a * 261;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125, a * 69);
        e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
        e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
        e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
        e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
        e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
        e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
        e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
        e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
        e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125, a * 69);
        e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
        e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
        e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
        e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
        e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
        e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
        e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
        e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
        e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
        e.closePath();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 43);
        e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
        e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
        e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45, a * 29);
        e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
        e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
        e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
        e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 56);
        e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
        e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
        e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
        e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 81);
        e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
        e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
        e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 124);
        e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
        e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
        e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 170);
        e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
        e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
        e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 208);
        e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
        e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
        e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
        e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
        e.closePath();
        Xb(e, c[3]);
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22, a * 81);
        e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
        e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
        e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
        e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
        e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
        e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
        e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
        e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
        e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
        e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
        e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 123);
        e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
        e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
        e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
        e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
        e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
        e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
        e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
        e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
        e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
        e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
        e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
        e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
        e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
        e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
        e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
        e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
        e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
        e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
        e.closePath();
        Xb(e, c[4], c[5], a * 4);
        id(e, a * 107, a * 152, a * 9);
        Xb(e, c[6]);
        id(e, a * 105, a * 173, a * 9);
        Xb(e, c[6]);
        id(e, a * 87, a * 161, a * 9);
        Xb(e, c[6]);
        id(e, a * 106, a * 147, a * 4);
        Xb(e, c[7]);
        id(e, a * 104, a * 167, a * 4);
        Xb(e, c[7]);
        id(e, a * 86, a * 154, a * 4);
        Xb(e, c[7]);
        return d;
    }
    function fu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 220;
        var a = b * 230;
        var i = b * 100;
        var j = i / 4;
        var h = b * 20;
        e.width = g;
        e.height = a;
        f.translate(g / 2, a / 2 + h);
        f.globalAlpha = 0.5;
        nd(f, 7, i, j);
        Xb(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, -h);
        nd(f, 7, i, j);
        Xb(f, d[1]);
        nd(f, 6, i * 0.65, j * 0.65);
        Xb(f, d[2]);
        return e;
    }
    function gu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
        e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
        e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
        e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
        e.closePath();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 129.5, a * 424);
        e.rotate(0.16);
        Zb(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
        e.restore();
        Xb(e, c[0]);
        id(e, a * 121, a * 480, a * 20.396078054371138);
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 311);
        e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
        e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
        e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
        e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
        e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
        e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
        e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
        e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
        e.closePath();
        Xb(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 129.5, a * 424);
        e.rotate(0.16);
        Zb(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
        e.restore();
        Xb(e, c[4], c[5], a * 12.5);
        id(e, a * 121, a * 480, a * 20.396078054371138);
        Xb(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 311);
        e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
        e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
        e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
        e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
        e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
        e.closePath();
        Xb(e, c[1], c[2], a * 12.5);
        return d;
    }
    function hu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 120;
        var a = b * 150;
        var i = b * 60;
        var j = i / 4;
        var h = b * 15;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(g / 2 + b * 0, a / 2 + b * 0 + h);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 0.5;
        nd(f, 8, i, j);
        Xb(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 11, a / 2 + b * 12);
        f.globalAlpha = 1;
        f.rotate(Math.PI / 3);
        f.translate(0, -h);
        nd(f, 8, i, j);
        Xb(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 9, a / 2 - b * 12);
        f.rotate(Math.PI / 2.8);
        nd(f, 5, i * 0.5, j * 0.4);
        Xb(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 19, a / 2 + b * 5);
        f.rotate(Math.PI / 1);
        nd(f, 5, i * 0.5, j * 0.4);
        Xb(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 8, a / 2 + b * 20);
        f.rotate(Math.PI / 2.25);
        nd(f, 5, i * 0.5, j * 0.4);
        Xb(f, d[2]);
        f.restore();
        return e;
    }
    function iu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.translate(a * -20, a * -20);
        e.save();
        e.translate(a * 132, a * 423);
        e.rotate(0.16);
        Zb(e, a * -14, a * -61, a * 28, a * 122, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 344);
        e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
        e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
        e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
        e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
        e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 328);
        e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
        e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
        e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
        e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
        e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
        e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
        e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 332);
        e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
        e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
        e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
        e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
        e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 463);
        e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
        e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
        e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
        e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.save();
        e.translate(a * 132, a * 423);
        e.rotate(0.16);
        Zb(e, a * -14, a * -61, a * 28, a * 122, a * 10);
        e.restore();
        Xb(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 344);
        e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
        e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
        e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
        e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
        e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
        e.closePath();
        Xb(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 328);
        e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
        e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
        e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
        e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
        e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
        e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
        e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
        e.closePath();
        Xb(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 332);
        e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
        e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
        e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
        e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
        e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 463);
        e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
        e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
        e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
        e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
        e.closePath();
        Xb(e, c[1], c[2], a * 12.5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 346);
        e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
        e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
        e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
        e.closePath();
        Xb(e, c[3]);
        return d;
    }
    function ju(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 350;
        d.height = a * 140;
        e.translate(a * -50, a * -150);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 184.5, a * 222.0625);
        e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
        e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
        e.closePath();
        Xb(e, c[0], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.5, a * 241.0625);
        e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
        e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
        e.closePath();
        Xb(e, c[0], c[1], a * 8);
        id(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
        Xb(e, c[2]);
        id(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
        Xb(e, c[2]);
        id(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
        Xb(e, c[2]);
        id(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
        Xb(e, c[2]);
        id(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
        Xb(e, c[2]);
        id(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 151.5, a * 212.0625);
        e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
        e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
        e.closePath();
        Xb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 209.0625);
        e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
        e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
        e.closePath();
        Xb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 188.5, a * 183.0625);
        e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
        e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
        e.closePath();
        Xb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 261.5, a * 202.0625);
        e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
        e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
        e.closePath();
        Xb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 240.5, a * 231.0625);
        e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
        e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
        e.closePath();
        Xb(e, c[3], c[4], a * 4);
        return d;
    }
    function ku(f, e, i, j, k, n, o, p, q, h, l) {
        if (_a === l) {
            l = 0;
        }
        var r = document.createElement("canvas");
        var b = r.getContext("2d");
        n = n ? n * f : 0;
        var d = Math.floor(i * f);
        b.font = d + "px Baloo Paaji";
        b.lineJoin = "round";
        p *= f;
        var t = o ? p * 2 : 0;
        if (q) {
            var c = Math.min(b.measureText(e).width + f * 2 + t, q);
        } else {
            c = b.measureText(e).width + f * 2 + t + f * l * 2;
        }
        d = f * (d + n + l) + t;
        r.width = c;
        r.height = d;
        if (o) {
            b.fillStyle = o;
            Zb(b, 0, 0, c, d, p * 2);
            b.fill();
            b.translate(p, p);
        }
        b.textBaseline = "middle";
        b.font = i + "px Baloo Paaji";
        b.lineJoin = "round";
        if (k) {
            b.beginPath();
            b.fillStyle = k;
            b.fillText(e, 0, d / 2 + n - t / 2, c);
        }
        b.beginPath();
        if (h) {
            b.strokeStyle = h;
            b.lineWidth = l;
            b.strokeText(e, l, (d - t) / 2, c);
        }
        b.fillStyle = j;
        b.fillText(e, l, (d - t) / 2, c);
        return r;
    }
    function lu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 118;
        d.height = a * 114;
        e.translate(0, a * 10);
        id(e, a * 42, a * 43, a * 24.758836806279895);
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 90);
        e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
        e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 45);
        e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
        e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
        e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
        e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
        e.closePath();
        Xb(e, c[0]);
        e.translate(0, a * -10);
        id(e, a * 42, a * 43, a * 24.758836806279895);
        Xb(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 90);
        e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
        e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
        e.closePath();
        Xb(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 45);
        e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
        e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
        e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
        e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
        e.closePath();
        Xb(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 16);
        e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
        e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
        e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
        e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 30);
        e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
        e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
        e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
        e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 29, a * 21);
        e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
        e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
        e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
        e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 36);
        e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
        e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 34);
        e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
        e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 35);
        e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
        e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 63, a * 46);
        e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
        e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
        e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 42);
        e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
        e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 57);
        e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
        e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 52);
        e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
        e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
        e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 61);
        e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
        e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
        e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 45);
        e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
        e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96, a * 53);
        e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
        e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
        e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
        e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 92, a * 71);
        e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
        e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
        e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 82);
        e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
        e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
        e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 72);
        e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
        e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 86);
        e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
        e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
        e.closePath();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 46);
        e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
        e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
        e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
        e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
        e.closePath();
        Xb(e, c[5], c[6], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 76, a * 60);
        e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
        e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
        e.closePath();
        Xb(e, c[7], c[8], a * 5);
        return d;
    }
    function mu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 217;
        d.height = a * 215;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 113);
        e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
        e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
        e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
        e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
        e.closePath();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154, a * 103);
        e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
        e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
        e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
        e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
        e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
        e.closePath();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 46);
        e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
        e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
        e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
        e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
        e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
        e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
        e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
        e.closePath();
        Xb(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46, a * 50);
        e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
        e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
        e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
        e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
        e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
        e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
        e.closePath();
        Xb(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 40);
        e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
        e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
        e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
        e.closePath();
        Xb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 29, a * 48);
        e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
        e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
        e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
        e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
        e.closePath();
        Xb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 89, a * 61);
        e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
        e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
        e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
        e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
        e.closePath();
        Xb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99, a * 59);
        e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
        e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
        e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
        e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
        e.closePath();
        Xb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 62);
        e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
        e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
        e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
        e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
        e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
        e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
        e.closePath();
        Xb(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 130);
        e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
        e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
        e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
        e.closePath();
        Xb(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 119);
        e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
        e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
        e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
        e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
        e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
        e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
        e.closePath();
        Xb(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 64);
        e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
        e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
        e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
        e.closePath();
        Xb(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 65);
        e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
        e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
        e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
        e.closePath();
        Xb(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 112);
        e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
        e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
        e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
        e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
        e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
        e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
        e.closePath();
        Xb(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 114);
        e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
        e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
        e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
        e.closePath();
        Xb(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85, a * 152);
        e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
        e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
        e.closePath();
        e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
        Xb(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 166);
        e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
        e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
        e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
        e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
        e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
        e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
        e.closePath();
        Xb(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 168);
        e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
        e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
        e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
        e.closePath();
        Xb(e, c[10]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 169);
        e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
        e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
        e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
        e.closePath();
        Xb(e, c[9], c[9], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 107);
        e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
        e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
        e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
        e.closePath();
        Xb(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40, a * 108);
        e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
        e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
        e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
        e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
        e.closePath();
        Xb(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 189, a * 106);
        e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
        e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
        e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
        e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
        e.closePath();
        Xb(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 69, a * 178);
        e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
        e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
        Xb(e, od, c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 161);
        e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
        e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
        Xb(e, Pg, c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 91, a * 29);
        e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
        e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
        Xb(e, undefined, c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107, a * 33);
        e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
        e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
        Xb(e, undefined, c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 98);
        e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
        e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
        e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
        e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
        e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
        e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
        e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
        e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
        e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
        Xb(e, undefined, c[3], a * 4);
        return d;
    }
    function nu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112, a * 356);
        e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
        e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
        e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
        e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
        e.closePath();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 131, a * 423);
        e.rotate(0.16);
        Zb(e, a * -14, a * -53, a * 28, a * 106, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 122, a * 480);
        e.rotate(1.72);
        nd(e, 4, a * 26.476404589747453, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 387);
        e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
        e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
        e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
        e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
        e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
        e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 129, a * 338);
        e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
        e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
        e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
        e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
        e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112, a * 356);
        e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
        e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
        e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
        e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
        e.closePath();
        Xb(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 131, a * 423);
        e.rotate(0.16);
        Zb(e, a * -14, a * -53, a * 28, a * 106, a * 10);
        e.restore();
        Xb(e, c[4], c[5], a * 12.5);
        e.save();
        e.translate(a * 122, a * 480);
        e.rotate(1.72);
        nd(e, 4, a * 26.476404589747453, a * 10);
        e.restore();
        Xb(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 387);
        e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
        e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
        e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
        e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
        e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
        e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
        e.closePath();
        Xb(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 129, a * 338);
        e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
        e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
        e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
        e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
        e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
        e.closePath();
        Xb(e, c[3]);
        return d;
    }
    const ou = 9;
    function pu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (wb === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(1.4);
            nd(e, 7, a * 41, a * 10);
            e.restore();
            Xb(e, c[0]);
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(1.4);
        nd(e, 7, a * 41, a * 10);
        Xb(e, c[1], c[2], a * 4);
        nd(e, 7, a * 35, a * 10);
        Xb(e, c[3], c[4], a * 4);
        nd(e, 7, a * 23, a * 5);
        e.restore();
        Xb(e, c[5]);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Zb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        Xb(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Zb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        Xb(e, c[4], c[4], a * 2);
        id(e, a * 45, a * 29, a * 7);
        Xb(e, c[5]);
        id(e, a * 45, a * 61, a * 7);
        Xb(e, c[5]);
        id(e, a * 28, a * 45, a * 7);
        Xb(e, c[5]);
        id(e, a * 62, a * 45, a * 7);
        Xb(e, c[5]);
        return d;
    }
    function qu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 130;
        d.height = a * 142;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 65, a * 80);
        e.rotate(0.2);
        nd(e, 9, a * 60, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 65, a * 71);
        e.rotate(0.2);
        nd(e, 9, a * 60, a * 10);
        Xb(e, c[1], c[2], 4);
        e.rotate(-0.32);
        nd(e, 9, a * 38, a * 10);
        Xb(e, c[3], c[4], 4);
        e.rotate(0.68);
        nd(e, 9, a * 20, a * 8);
        Xb(e, c[5], c[6], 6);
        e.restore();
        return d;
    }
    function ru(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 18;
        var a = b * 18;
        e.width = g;
        e.height = a;
        var i = b * 9;
        var j = b * 9;
        var k = b * 8;
        f.save();
        f.translate(i, j);
        f.globalAlpha = 1;
        id(f, 0, 0, k);
        Xb(f, d[0]);
        k = b * 3;
        i = 0;
        j = b * -3;
        f.translate(i, j);
        f.globalAlpha = 1;
        id(f, 0, 0, k);
        Xb(f, d[1]);
        f.restore();
        return e;
    }
    function su(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (wb === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(0.2);
            nd(e, 9, a * 41, a * 10);
            e.restore();
            Xb(e, c[0]);
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(0.2);
        nd(e, 9, a * 41, a * 10);
        Xb(e, c[1], c[2], a * 4);
        e.rotate(-0.32);
        nd(e, 9, a * 32, a * 10);
        Xb(e, c[3], c[4], a * 4);
        e.rotate(0.68);
        nd(e, 9, a * 23, a * 8);
        Xb(e, c[5], c[6], a * 6);
        e.restore();
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Zb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        Xb(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Zb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        Xb(e, c[4], c[4], a * 2);
        id(e, a * 45, a * 29, a * 7);
        Xb(e, c[5]);
        id(e, a * 45, a * 61, a * 7);
        Xb(e, c[5]);
        id(e, a * 28, a * 45, a * 7);
        Xb(e, c[5]);
        id(e, a * 62, a * 45, a * 7);
        Xb(e, c[5]);
        return d;
    }
    function tu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 135;
        d.height = a * 120;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 3.5, a * 55.25);
        e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
        e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
        e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
        e.closePath();
        Xb(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 6.5, a * 43.25);
        e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
        e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
        e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
        e.closePath();
        Xb(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120.5, a * 62.25);
        e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
        e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
        e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
        e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
        e.closePath();
        Xb(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.5, a * 27);
        e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
        e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
        e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
        e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
        e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
        e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
        e.closePath();
        Xb(e, c[2], c[3], a * 7);
        return d;
    }
    function uu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 234;
        c.height = a * 183;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 25);
        d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
        d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
        d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
        d.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
        d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
        d.closePath();
        Xb(d, b[0], b[0], a * 4);
        return c;
    }
    function vu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 300;
        d.height = a * 300;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 150, a * 160);
        e.rotate(6.28);
        nd(e, 6, a * 146, a * 30);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(6.28);
        nd(e, 6, a * 146, a * 30);
        e.restore();
        Xb(e, c[1], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        nd(e, 6, a * 105, a * 30);
        e.restore();
        Xb(e, c[3], c[3], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        nd(e, 6, a * 66, a * 30);
        e.restore();
        Xb(e, c[4], c[2], a * 8);
        e.save();
        e.translate(a * 131, a * 116);
        nd(e, 7, a * 17, a * 8);
        e.restore();
        Xb(e, c[6]);
        e.save();
        e.translate(a * 163, a * 168);
        nd(e, 7, a * 25, a * 8);
        e.restore();
        Xb(e, c[6]);
        e.save();
        e.translate(a * 117, a * 151);
        nd(e, 7, a * 11, a * 8);
        e.restore();
        Xb(e, c[6]);
        e.save();
        e.translate(a * 167, a * 122);
        nd(e, 7, a * 12, a * 8);
        e.restore();
        Xb(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 207);
        e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
        e.closePath();
        Xb(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 100);
        e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
        e.closePath();
        Xb(e, Vs, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183, a * 100);
        e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
        e.closePath();
        Xb(e, undefined, c[2], a * 8);
        return d;
    }
    function wu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 180;
        var a = b * 210;
        var i = (h = b * 60) / 4;
        var j = b * 20;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(g / 2 - b * 0, a / 2 - b * 35 + j);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 0.5;
        f.translate(b * 0, b * -20);
        nd(f, 5, h, i);
        Xb(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 10, a / 2 + b * 15 + j);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 0.5;
        f.translate(b * 0, b * -20);
        nd(f, 5, h, i);
        Xb(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 50, a / 2 + b * 40 + j);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 0.5;
        f.translate(0, b * -20);
        nd(f, 5, h, i);
        Xb(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 0, a / 2 - b * 35);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 1;
        f.translate(b * 0, b * -20);
        nd(f, 5, h, i);
        Xb(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 10, a / 2 + b * 15);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        nd(f, 5, h, i);
        Xb(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 50, a / 2 + b * 40);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        nd(f, 5, h, i);
        Xb(f, d[1]);
        f.restore();
        var h;
        i = (h = b * 30) / 4;
        f.save();
        f.translate(g / 2 + b * 5, a / 2 - b * 20);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        nd(f, 5, h, i);
        Xb(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 0, a / 2 + b * 10);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        nd(f, 5, h, i);
        Xb(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 45, a / 2 + b * 35);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        nd(f, 5, h, i);
        Xb(f, d[2]);
        f.restore();
        id(f, g / 2 - b * 7, a / 2 + b * 7, 5);
        Xb(f, d[2]);
        return e;
    }
    function xu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 309;
        d.height = a * 287;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34.5, a * 38.53125);
        e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
        e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
        e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
        e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
        e.closePath();
        Xb(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143.5, a * 74.53125);
        e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
        e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
        e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
        e.closePath();
        Xb(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 142.53125);
        e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
        e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
        e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
        e.closePath();
        Xb(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 236.5, a * 189.53125);
        e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
        e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
        e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
        e.closePath();
        Xb(e, c[0], c[0], a * 10);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34.5, a * 38.53125);
        e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
        e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
        e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
        e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
        e.closePath();
        Xb(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143.5, a * 74.53125);
        e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
        e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
        e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
        e.closePath();
        Xb(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 142.53125);
        e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
        e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
        e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
        e.closePath();
        Xb(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 236.5, a * 189.53125);
        e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
        e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
        e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
        e.closePath();
        Xb(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 109.5, a * 51.53125);
        e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
        Xb(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 51.53125);
        e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
        e.closePath();
        Xb(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 63.53125);
        e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
        e.closePath();
        Xb(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.5, a * 84.53125);
        e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
        e.closePath();
        Xb(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 149.5, a * 108.53125);
        e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
        e.closePath();
        Xb(e, c[1], c[2], a * 7);
        return d;
    }
    function yu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 140;
        var a = b * 150;
        var i = b * 10;
        var j = b * 4;
        e.width = g;
        e.height = a;
        f.translate(b * -50, b * -38 + i);
        f.globalAlpha = c ? 0.5 : 1;
        f.beginPath();
        f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
        f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
        f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
        f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
        f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
        f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
        f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
        f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
        f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
        f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
        f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
        f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
        f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
        f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
        f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
        f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
        f.closePath();
        Xb(f, d[0]);
        f.translate(0, 0 - i);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
        f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
        f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
        f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
        f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
        f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
        f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
        f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
        f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
        f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
        f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
        f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
        f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
        f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
        f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
        f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
        f.closePath();
        Xb(f, d[1], d[2], j);
        return e;
    }
    function zu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (wb === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(1);
            nd(e, 8, a * 41, a * 10);
            Xb(e, c[0]);
            e.restore();
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(1);
        nd(e, 8, a * 41, a * 10);
        Xb(e, c[1], c[2], a * 4);
        e.rotate(0.56);
        nd(e, 8, a * 33, a * 10);
        Xb(e, c[3], c[4], a * 4);
        e.rotate(0.28);
        nd(e, 8, a * 24, a * 8);
        Xb(e, c[5]);
        e.restore();
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Zb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        Xb(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Zb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        Xb(e, c[4], c[4], a * 2);
        id(e, a * 45, a * 29, a * 7);
        Xb(e, c[5]);
        id(e, a * 45, a * 61, a * 7);
        Xb(e, c[5]);
        id(e, a * 28, a * 45, a * 7);
        Xb(e, c[5]);
        id(e, a * 62, a * 45, a * 7);
        Xb(e, c[5]);
        return d;
    }
    function Au(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 130;
        var a = b * 142;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j + b * 7);
        f.globalAlpha = c ? 0.5 : 1;
        id(f, 0, 0, b * 60);
        Xb(f, d[0]);
        f.translate(0, b * -7);
        f.globalAlpha = 1;
        id(f, 0, 0, b * 60);
        Xb(f, d[1], d[2], b * 4);
        id(f, 0, 0, b * 40);
        Xb(f, d[3]);
        id(f, 0, 0, b * 25);
        Xb(f, d[4], d[5], b * 8);
        return e;
    }
    function Cu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 277.34375);
        e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
        e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
        e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
        e.closePath();
        Xb(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98.5, a * 214.34375);
        e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
        e.closePath();
        Xb(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98.5, a * 247.34375);
        e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
        e.closePath();
        Xb(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 97.5, a * 189.34375);
        e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
        e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
        e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
        e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
        e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
        e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
        e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
        e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
        e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
        e.closePath();
        Xb(e, c[3], c[4], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 300.5, a * 147.34375);
        e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
        e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
        e.closePath();
        Xb(e, c[5], c[6], a * 12);
        id(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
        Xb(e, c[7]);
        id(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
        Xb(e, c[8]);
        return d;
    }
    function ec(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = c * b * 2;
        var a = b * c * 2;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j);
        id(f, 0, 0, b * c);
        Xb(f, d);
        return e;
    }
    function ic(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 372;
        c.height = a * 375;
        d.globalAlpha = 0.5;
        d.translate(a * 15, a * 15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        Xb(d, b[0]);
        d.globalAlpha = 1;
        d.translate(a * -15, a * -15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        Xb(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
        d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
        d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
        d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
        d.closePath();
        Xb(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
        d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
        d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
        d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
        d.closePath();
        Xb(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
        d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
        d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
        d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
        d.closePath();
        Xb(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
        d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
        d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
        d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
        d.closePath();
        Xb(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
        d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
        d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
        d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
        d.closePath();
        Xb(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
        d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
        d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
        d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
        d.closePath();
        Xb(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        Xb(d, undefined, b[2], a * 4);
        return c;
    }
    function tc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 300;
        d.height = a * 300;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 150, a * 160);
        e.rotate(6.28);
        nd(e, 6, a * 146, a * 30);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(6.28);
        nd(e, 6, a * 146, a * 30);
        e.restore();
        Xb(e, c[1], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        nd(e, 6, a * 105, a * 30);
        e.restore();
        Xb(e, c[3], c[3], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        nd(e, 6, a * 66, a * 30);
        e.restore();
        Xb(e, c[4], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        nd(e, 6, a * 31, a * 30);
        e.restore();
        Xb(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 207);
        e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
        e.closePath();
        Xb(e, Sq, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 100);
        e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
        e.closePath();
        Xb(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183, a * 100);
        e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
        e.closePath();
        Xb(e, undefined, c[2], a * 8);
        return d;
    }
    function nc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 101;
        e.translate(a * 0, a * 5);
        if (wb === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            id(e, a * 44, a * 55, a * 41);
            Xb(e, c[0]);
        }
        e.globalAlpha = 1;
        id(e, a * 44, a * 45, a * 41);
        Xb(e, c[1], c[2], a * 4);
        id(e, a * 44, a * 45, a * 31);
        Xb(e, c[3]);
        e.save();
        e.translate(a * 45, a * 45);
        Zb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        Xb(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        Zb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        Xb(e, c[4], c[4], a * 2);
        id(e, a * 45, a * 29, a * 7);
        Xb(e, c[5]);
        id(e, a * 45, a * 61, a * 7);
        Xb(e, c[5]);
        id(e, a * 28, a * 45, a * 7);
        Xb(e, c[5]);
        id(e, a * 62, a * 45, a * 7);
        Xb(e, c[5]);
        return d;
    }
    function oc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100.5, a * 126.34375);
        e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
        e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
        e.closePath();
        Xb(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 106.5, a * 131.34375);
        e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
        e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 137.34375);
        e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
        e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
        e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
        e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196.5, a * 151.34375);
        e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
        e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
        e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
        e.closePath();
        Xb(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154.5, a * 222.34375);
        e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
        e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
        e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
        e.closePath();
        Xb(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279.5, a * 294.34375);
        e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
        e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
        e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
        e.closePath();
        Xb(e, c[0], c[0], a * 12);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100.5, a * 126.34375);
        e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
        e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
        e.closePath();
        Xb(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 106.5, a * 131.34375);
        e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
        e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 137.34375);
        e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
        e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
        e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
        e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
        e.closePath();
        Xb(e, c[4]);
        id(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
        Xb(e, c[5]);
        id(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
        Xb(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196.5, a * 151.34375);
        e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
        e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
        e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
        e.closePath();
        Xb(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154.5, a * 222.34375);
        e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
        e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
        e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
        e.closePath();
        Xb(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279.5, a * 294.34375);
        e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
        e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
        e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
        e.closePath();
        Xb(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 296.5, a * 287.34375);
        e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
        e.closePath();
        Xb(e, fk, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 294.5, a * 289.34375);
        e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
        e.closePath();
        Xb(e, Sq, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 294.5, a * 291.34375);
        e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
        e.closePath();
        Xb(e, undefined, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.5, a * 161.34375);
        e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
        e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
        e.closePath();
        Xb(e, mn, c[9], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167.5, a * 248.34375);
        e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
        e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
        e.closePath();
        Xb(e, Yl, c[9], a * 3);
        return d;
    }
    function ac(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 373;
        d.height = a * 314;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 184.048583984375, a * 69.1805419921875);
        Zb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
        e.restore();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.048583984375, a * 61.6805419921875);
        e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
        e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
        e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
        e.closePath();
        Xb(e, c[0], c[0], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224.048583984375, a * 56.6805419921875);
        e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
        e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
        e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
        e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
        e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
        e.closePath();
        Xb(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.548583984375, a * 119.6805419921875);
        Zb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
        e.restore();
        Xb(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 155.6805419921875);
        Zb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
        e.restore();
        Xb(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 205.1805419921875);
        Zb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
        e.restore();
        Xb(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        Zb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        Xb(e, c[0], c[0], a * 6);
        id(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
        Xb(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224.048583984375, a * 56.6805419921875);
        e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
        e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
        e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
        e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
        e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
        e.closePath();
        Xb(e, c[3], c[4], a * 6);
        e.save();
        e.translate(a * 184.048583984375, a * 69.1805419921875);
        Zb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
        e.restore();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.048583984375, a * 61.6805419921875);
        e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
        e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
        e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
        e.closePath();
        Xb(e, c[1], c[2], a * 6);
        e.save();
        e.translate(a * 183.548583984375, a * 119.6805419921875);
        Zb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
        e.restore();
        Xb(e, c[5], c[4], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 155.6805419921875);
        Zb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
        e.restore();
        Xb(e, c[3], c[4], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 205.1805419921875);
        Zb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
        e.restore();
        Xb(e, c[6], c[4], a * 6);
        e.globalCompositeOperation = "destination-out";
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        Zb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        Xb(e, c[7], c[8], a * 6);
        e.globalCompositeOperation = "source-over";
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        Zb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        Xb(e, c[7], c[8], a * 6);
        e.globalAlpha = 1;
        e.save();
        id(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
        Xb(e, c[3], c[4], a * 6);
        e.restore();
        return d;
    }
    function rc(b, c, d, e, f) {
        var g = document.createElement("canvas");
        var a = g.getContext("2d");
        if (e == 0) {
            var i = b * 270;
            var j = b * 250;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 140, b * 3);
            a.translate(b * -25, b * -20);
            a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
            a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
            a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
            a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
            a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
            a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
            a.closePath();
            Xb(a, d[0]);
        } else if (e == 1) {
            i = b * 430;
            j = b * 350;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 180, b * 5);
            a.translate(b * -30, b * -60);
            a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
            a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
            a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
            a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
            a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
            a.closePath();
            Xb(a, d[0]);
        } else if (e == 2) {
            i = b * 400;
            j = b * 300;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 80, b * 52);
            a.translate(b * -40, b * -30);
            a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
            a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
            a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
            a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
            a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
            a.closePath();
            Xb(a, d[0]);
        }
        return g;
    }
    function uu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 80;
        c.height = a * 100;
        d.scale(0.5, 0.5);
        d.translate(10, 15);
        d.globalAlpha = 0.5;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 47, a * 5);
        d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
        d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
        d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
        d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
        Xb(d, Vs, b[0], a * 10);
        d.translate(0, -10);
        d.globalAlpha = 1;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 47, a * 5);
        d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
        d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
        d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
        d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
        d.closePath();
        Xb(d, b[1], b[2], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
        Xb(d, fh, b[2], a * 8);
        d.globalAlpha = 0.5;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
        Xb(d, undefined, b[2], a * 8);
        return c;
    }
    function sc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 125;
        d.height = a * 139;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 63, a * 79);
        e.rotate(1);
        nd(e, 8, a * 60, a * 10);
        Xb(e, c[0]);
        e.restore();
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 63, a * 69);
        e.rotate(1);
        nd(e, 8, a * 60, a * 10);
        Xb(e, c[1], c[2], 4);
        e.rotate(0.56);
        nd(e, 8, a * 40, a * 10);
        Xb(e, c[3], c[4], 4);
        e.rotate(0.28);
        nd(e, 8, a * 28, a * 8);
        Xb(e, c[5]);
        e.restore();
        return d;
    }
    function hc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 130;
        d.height = a * 148;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 65, a * 85);
        e.rotate(1.4);
        nd(e, 7, a * 60, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 65, a * 74);
        e.rotate(1.4);
        nd(e, 7, a * 60, a * 10);
        Xb(e, c[1], c[2], 4);
        e.rotate(0.64);
        nd(e, 7, a * 40, a * 10);
        Xb(e, c[3], c[4], 4);
        e.rotate(0.12);
        nd(e, 7, a * 23, a * 5);
        e.restore();
        Xb(e, c[5]);
        return d;
    }
    function lc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 128;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 7);
        e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
        e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
        e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
        e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
        e.closePath();
        Xb(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 124);
        e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
        e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
        e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
        e.closePath();
        Xb(e, c[2], c[3], a * 1);
        return d;
    }
    function gc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 220;
        d.height = a * 180;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -90, a * -150);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 237.8000030517578);
        e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
        e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
        e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
        e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
        e.closePath();
        Xb(e, c[5], c[5], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 211.20000457763672);
        e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
        e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
        e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
        e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
        e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
        e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
        e.closePath();
        Xb(e, c[5], c[5], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120, a * 207);
        e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
        e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
        e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
        e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
        e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
        e.closePath();
        Xb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 238);
        e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
        e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
        e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
        e.closePath();
        Xb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 211);
        e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
        e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
        e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
        e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
        e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
        e.closePath();
        Xb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 280, a * 206);
        e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
        e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
        e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
        e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
        e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
        e.closePath();
        Xb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 138, a * 298.40000915527344);
        e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
        e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
        e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
        e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
        e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
        e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
        e.closePath();
        Xb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 177.5999984741211);
        e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
        e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
        e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
        e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
        e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
        e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
        e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
        e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
        e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
        e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
        e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
        e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
        e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
        e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
        e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
        e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
        e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
        e.closePath();
        Xb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 175.5999984741211);
        e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
        e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
        e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
        e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
        e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
        e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
        e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
        e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
        e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
        e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
        e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
        e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
        e.closePath();
        Xb(e, Jt, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 198, a * 161.4000015258789);
        e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
        e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
        e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
        e.closePath();
        Xb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 194);
        e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
        e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
        e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
        e.closePath();
        Xb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
        e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
        e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
        e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
        e.closePath();
        Xb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 156, a * 188);
        e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
        e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
        e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
        e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
        e.closePath();
        Xb(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 189);
        e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
        e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
        e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
        e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
        e.closePath();
        Xb(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 262);
        e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
        e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
        e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
        e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
        e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
        e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
        e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
        e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
        e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
        e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
        e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
        e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
        e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
        e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
        e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
        e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
        e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
        e.closePath();
        Xb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 264);
        e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
        e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
        e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
        e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
        e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
        e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
        e.closePath();
        Xb(e, fk, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 140, a * 265.33333587646484);
        e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
        e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
        e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
        e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
        e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
        e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
        e.closePath();
        Xb(e, undefined, c[4], a * 6);
        e.globalAlpha = 0.5;
        e.scale(1, 1);
        e.translate(a * 105, a * 155);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
        e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
        e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
        e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
        e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
        e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
        e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
        e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
        e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
        e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
        e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
        e.closePath();
        Xb(e, c[5], c[5], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -110, a * -155);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 237.8000030517578);
        e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
        e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
        e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
        e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
        e.closePath();
        Xb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 211.20000457763672);
        e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
        e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
        e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
        e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
        e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
        e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
        e.closePath();
        Xb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120, a * 207);
        e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
        e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
        e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
        e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
        e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
        e.closePath();
        Xb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 238);
        e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
        e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
        e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
        e.closePath();
        Xb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 211);
        e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
        e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
        e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
        e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
        e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
        e.closePath();
        Xb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 280, a * 206);
        e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
        e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
        e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
        e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
        e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
        e.closePath();
        Xb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 138, a * 298.40000915527344);
        e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
        e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
        e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
        e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
        e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
        e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
        e.closePath();
        Xb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 177.5999984741211);
        e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
        e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
        e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
        e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
        e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
        e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
        e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
        e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
        e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
        e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
        e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
        e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
        e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
        e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
        e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
        e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
        e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
        e.closePath();
        Xb(e, c[2], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 175.5999984741211);
        e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
        e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
        e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
        e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
        e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
        e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
        e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
        e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
        e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
        e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
        e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
        e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
        e.closePath();
        Xb(e, undefined, c[3], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 198, a * 161.4000015258789);
        e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
        e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
        e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
        e.closePath();
        Xb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 194);
        e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
        e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
        e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
        e.closePath();
        Xb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
        e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
        e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
        e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
        e.closePath();
        Xb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 156, a * 188);
        e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
        e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
        e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
        e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
        e.closePath();
        Xb(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 189);
        e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
        e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
        e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
        e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
        e.closePath();
        Xb(e, _a, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 262);
        e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
        e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
        e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
        e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
        e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
        e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
        e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
        e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
        e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
        e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
        e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
        e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
        e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
        e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
        e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
        e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
        e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
        e.closePath();
        Xb(e, c[0], c[0], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 264);
        e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
        e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
        e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
        e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
        e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
        e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
        e.closePath();
        Xb(e, _h, c[1], a * 2);
        return d;
    }
    const uc = 15;
    function bc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 169;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 112);
        e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
        e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
        e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
        e.closePath();
        Xb(e, c[8], c[9], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 127, a * 111);
        e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
        e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
        e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
        e.closePath();
        Xb(e, c[9]);
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 15, a * 117);
        e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
        e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
        e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
        e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 127);
        e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
        e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
        e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
        e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
        e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
        e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
        e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 27.5, a * 138.5);
        Zb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
        e.restore();
        Xb(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143.5, a * 137);
        Zb(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
        e.restore();
        Xb(e, c[1], c[2], a * 5);
        return d;
    }
    function dc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 170;
        var a = b * 172;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j + b * 7);
        f.globalAlpha = c ? 0.5 : 0;
        id(f, 0, 0, b * 60);
        Xb(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, b * -7);
        f.save();
        for (var h = 0; h < 10; h++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            nd(f, 3, b * 20, b * 4);
            Xb(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.restore();
        id(f, 0, 0, b * 60);
        Xb(f, d[3], d[4], b * 4);
        id(f, 0, 0, b * 40);
        Xb(f, d[5]);
        id(f, 0, 0, b * 25);
        Xb(f, d[6], d[7], b * 8);
        return e;
    }
    function vc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 300;
        d.translate(a * -200, a * -40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 344, a * 18.40625);
        d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
        d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
        d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
        d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 335, a * 38.072906494140625);
        d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
        d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
        d.closePath();
        Xb(d, b[0]);
        return c;
    }
    function cc(a, b, c) {
        var d = (e = document.createElement("canvas")).getContext("2d");
        if (c == 0) {
            e.width = a * 566;
            e.height = a * 429;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 312.625, a * 39.046875);
            d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
            d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
            d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
            d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
            d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
            d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
            d.closePath();
            Xb(d, b[0]);
        } else if (c == 1) {
            d = (e = document.createElement("canvas")).getContext("2d");
            e.width = a * 511;
            e.height = a * 408;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 141.625, a * 49.296875);
            d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
            d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
            d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
            d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
            d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
            d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
            d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
            d.closePath();
            Xb(d, b[0]);
        } else if (c == 2) {
            var e;
            d = (e = document.createElement("canvas")).getContext("2d");
            e.width = a * 504;
            e.height = a * 408;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 153.625, a * 46.296875);
            d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
            d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
            d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
            d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
            d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
            d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
            d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
            d.closePath();
            Xb(d, b[0]);
        }
        return e;
    }
    function mc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 200;
        d.height = a * 200;
        e.save();
        e.translate(a * 112, a * 158);
        Zb(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
        e.restore();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 170, a * 100);
        Zb(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
        e.restore();
        Xb(e, c[0]);
        return d;
    }
    function pc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 260;
        e.translate(a * 10, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        Zb(e, 0, 0, a * 400, a * 220, a * 30);
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9, a * 5);
        e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
        e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
        e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
        e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
        e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
        e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
        e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
        e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
        e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
        e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
        e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
        e.closePath();
        Xb(e, c[2], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 70);
        e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
        e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
        e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
        e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
        e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
        e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
        e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
        e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
        e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
        e.closePath();
        Xb(e, c[3], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 158);
        e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
        e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
        e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
        e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
        e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
        e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
        e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
        e.closePath();
        Xb(e, c[2], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 183);
        e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
        e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
        e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
        e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
        e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
        e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
        e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
        e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
        e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
        e.closePath();
        Xb(e, c[3], c[1], a * 12);
        id(e, a * 41, a * 30, a * 14.7648230602334);
        Xb(e, c[3], c[1], a * 12);
        id(e, a * 369, a * 30, a * 15.556349186104045);
        Xb(e, c[3], c[1], a * 12);
        id(e, a * 364, a * 190, a * 15.620499351813308);
        Xb(e, c[3], c[1], a * 12);
        id(e, a * 41, a * 186, a * 15.556349186104045);
        Xb(e, c[3], c[1], a * 12);
        return d;
    }
    function Cc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 88;
        d.height = a * 647;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 45, a * 384.5);
        Zb(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 572);
        e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
        e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
        e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
        e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 587);
        e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
        e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
        e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 113);
        e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
        e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
        e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
        e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 139);
        e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
        e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
        e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 29);
        e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
        e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
        e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
        e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 54);
        e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
        e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
        e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
        e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
        e.closePath();
        Xb(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 45, a * 384.5);
        Zb(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
        e.restore();
        Xb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 572);
        e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
        e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
        e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
        e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
        e.closePath();
        Xb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 587);
        e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
        e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
        e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
        e.closePath();
        Xb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 113);
        e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
        e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
        e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
        e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
        e.closePath();
        Xb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 139);
        e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
        e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
        e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
        e.closePath();
        Xb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 29);
        e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
        e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
        e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
        e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
        e.closePath();
        Xb(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 54);
        e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
        e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
        e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
        e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
        e.closePath();
        Xb(e, c[8]);
        return d;
    }
    function Tc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 501;
        d.height = a * 309;
        e.translate(0, a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 184);
        e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
        e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
        e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
        e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
        e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
        e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
        e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 116);
        e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
        e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
        e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
        e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
        e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
        e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
        e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
        e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
        e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
        e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
        e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
        e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
        e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
        e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
        e.closePath();
        Xb(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 122, a * 191);
        e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
        e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
        e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
        e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
        e.closePath();
        Xb(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 403, a * 182);
        e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
        e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
        e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
        e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
        e.closePath();
        Xb(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155, a * 157);
        e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
        e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
        e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
        e.closePath();
        Xb(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 347, a * 162);
        e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
        e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
        e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
        e.closePath();
        Xb(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 134);
        e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
        e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
        e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
        e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
        e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
        e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
        e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
        e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
        e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
        e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
        e.closePath();
        Xb(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 63, a * 98);
        e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
        e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
        e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
        e.closePath();
        Xb(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 449, a * 97);
        e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
        e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
        e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
        e.closePath();
        Xb(e, c[3], c[2], a * 10);
        return d;
    }
    function fc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 165;
        d.height = a * 123;
        e.save();
        e.translate(a * 81, a * 65);
        Zb(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
        e.restore();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 81, a * 58);
        Zb(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
        e.restore();
        Xb(e, c[1], c[2], 4);
        e.save();
        e.translate(a * 81, a * 58);
        Zb(e, a * -69, a * -47, a * 138, a * 93, a * 15);
        e.restore();
        Xb(e, c[3], c[4], 4);
        e.save();
        e.translate(a * 79, a * 54);
        Zb(e, a * -34, a * -40, a * 68, a * 88, a * 13);
        e.restore();
        Xb(e, Vs, c[5], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 13);
        e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
        e.closePath();
        Xb(e, undefined, c[6], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 13);
        e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
        e.closePath();
        Xb(e, Pg, c[6], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 6);
        e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
        e.closePath();
        Xb(e, Ab, c[7], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123, a * 6);
        e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
        e.closePath();
        Xb(e, undefined, c[7], 4);
        e.save();
        e.translate(a * 79, a * 113);
        Zb(e, a * -18, a * -2, a * 36, a * 4, a * 20);
        e.restore();
        Xb(e, undefined, c[8], 4);
        e.save();
        e.translate(a * 75, a * 118);
        Zb(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
        e.restore();
        Xb(e, c[8]);
        return d;
    }
    function zc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 43;
        d.height = a * 209;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 21, a * 102.5);
        Zb(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 10);
        e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
        e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
        e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 1);
        e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
        e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
        e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 146);
        e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
        e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
        e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
        e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
        e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
        e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
        e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
        e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 6);
        e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
        e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
        e.closePath();
        Xb(e, c[0]);
        e.translate(0, a * -20);
        e.globalAlpha = 1;
        e.translate(0, a * 10);
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 21, a * 102.5);
        Zb(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
        e.restore();
        Xb(e, c[1], c[2], a * 4);
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 10);
        e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
        e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
        e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
        e.closePath();
        Xb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 1);
        e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
        e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
        e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
        e.closePath();
        Xb(e, c[5], c[6], a * 4);
        e.translate(0, a * 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 146);
        e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
        e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
        e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
        e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
        e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
        e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
        e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
        e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
        e.closePath();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 6);
        e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
        e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
        e.closePath();
        Xb(e, c[8]);
        return d;
    }
    function yc(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 450;
        f.height = b * 260;
        var a = pc(b * 1, true, d);
        g.drawImage(a, b * 0, b * 0);
        if (e == 1) {
            g.translate(b * 100, b * 0);
            id(g, b * 113, b * 120, b * 66);
            Xb(g, Sq, d[4], b * 13);
            a = Tt(b * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
            g.rotate(0.7);
            g.drawImage(a, b * 133, b * -64);
            g.rotate(-0.7);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 70);
            g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
            g.closePath();
            Xb(g, undefined, d[4], b * 13);
        } else if (e == 2) {
            g.translate(b * 100, b * 0);
            id(g, b * 113, b * 120, b * 66);
            Xb(g, undefined, d[4], b * 13);
            g.translate(b * 30, b * 40);
            g.save();
            g.translate(b * 83.5, b * 66.5);
            Zb(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
            g.restore();
            Xb(g, "#dff2f7", "#187484", b * 7);
            id(g, b * 22, b * 82, b * 12);
            Xb(g, "#dff2f7", "#187484", b * 7);
            id(g, b * 145, b * 82, b * 12);
            Xb(g, "#dff2f7", "#187484", b * 7);
            a = yu(b * 0.5, ho, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 10, b * 85);
            a = yu(b * 0.5, Ca, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 50, b * 85);
            a = yu(b * 0.5, zq, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 90, b * 85);
            a = ru(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 90, b * 105);
            a = ru(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 90, b * 105);
            a = ru(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 30, b * 125);
            a = ru(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 50, b * 115);
            a = ru(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 30, b * 100);
            a = ru(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 80, b * 120);
            a = ru(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 110, b * 125);
            a = ru(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 120, b * 105);
        } else if (e == 3) {
            g.translate(b * 100, b * 0);
            id(g, b * 113, b * 120, b * 66);
            Xb(g, undefined, d[4], b * 13);
            g.translate(b * 40, b * 50);
            g.save();
            g.translate(b * 71, b * 69);
            Zb(g, b * -30, b * -42, b * 60, b * 84, b * 10);
            g.restore();
            Xb(g, lj, d[5], b * 4);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 42, b * 28);
            g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
            g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
            g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
            g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
            g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
            g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
            g.closePath();
            Xb(g, d[5], d[5], b * 4);
            g.translate(b * -40, b * -50);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 70);
            g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
            g.closePath();
            Xb(g, Pg, d[4], b * 13);
        } else if (e == 4) {
            g.scale(1, 1);
            g.translate(b * 70, b * 50);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 23, b * 6);
            g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
            Xb(g, mn, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 59, b * 10);
            g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
            Xb(g, undefined, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 7, b * 55);
            g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
            Xb(g, Ab, d[5], b * 14);
            g.translate(b * 10, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 123, b * 16);
            g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
            g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
            g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
            Xb(g, mn, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 72, b * 63);
            g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
            Xb(g, undefined, d[5], b * 14);
            g.translate(b * 10, b * 10);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 141, b * 8);
            g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
            g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
            Xb(g, od, d[5], b * 14);
            g.translate(b * 10, b * -10);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 205, b * 124);
            g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
            g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
            g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
            Xb(g, Ur, d[5], b * 14);
        }
        return f;
    }
    function wc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 81;
        d.height = a * 626;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        Xb(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        Xb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 129);
        e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
        e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
        e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
        e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        Xb(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 475);
        e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
        e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
        e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
        e.closePath();
        Xb(e, c[4], c[5], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 496);
        e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
        Xb(e, undefined, c[5], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 521);
        e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
        Xb(e, Gi, c[5], a * 8);
        return d;
    }
    function Pc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 304;
        d.height = a * 278;
        e.translate(a * 10, a * 25);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 137);
        e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
        e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
        e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 52);
        e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
        e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
        e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
        e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
        e.closePath();
        Xb(e, c[0]);
        e.translate(a * -10, a * -25);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 137);
        e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
        e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
        e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
        e.closePath();
        Xb(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 52);
        e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
        e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
        e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
        e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
        e.closePath();
        Xb(e, c[3], c[4], a * 15);
        return d;
    }
    function Ac(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 3);
        f.save();
        f.translate(b * 85, b * 95);
        f.rotate(1.4);
        nd(f, 7, b * 60, b * 10);
        f.restore();
        Xb(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 82);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            nd(f, 3, b * 21, b * 4);
            Xb(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(1);
        nd(f, 8, b * 60, b * 10);
        Xb(f, d[3], d[4], b * 4);
        f.rotate(0.56);
        nd(f, 8, b * 40, b * 10);
        Xb(f, d[5], d[6], b * 4);
        f.rotate(0.28);
        nd(f, 8, b * 28, b * 8);
        Xb(f, d[7]);
        f.restore();
        return e;
    }
    function kc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 100;
        d.height = a * 648;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 50.5, a * 349.5);
        Zb(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 538);
        e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
        e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
        e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
        e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 554);
        e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 569);
        e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
        e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
        e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
        e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 581);
        e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
        e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
        e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
        e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 106);
        e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
        e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
        e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
        e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 27);
        e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
        e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
        e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 43);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
        e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
        e.closePath();
        Xb(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 50.5, a * 349.5);
        Zb(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
        e.restore();
        Xb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 538);
        e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
        e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
        e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
        e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
        e.closePath();
        Xb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 554);
        e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
        e.closePath();
        Xb(e, qs, c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 569);
        e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
        e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
        e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
        e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
        e.closePath();
        Xb(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 581);
        e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
        e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
        e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
        e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
        e.closePath();
        Xb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 106);
        e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
        e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
        e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
        e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
        e.closePath();
        Xb(e, c[5], c[6], a * 8);
        e.save();
        e.translate(a * -46, a * -50);
        e.scale(2, 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 80);
        e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
        e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
        e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
        e.closePath();
        Xb(e, c[8]);
        e.restore();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 27);
        e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
        e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
        e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
        e.closePath();
        Xb(e, c[8], c[9], a * 8);
        e.scale(2, 2);
        e.translate(a * -23, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 57, a * 69);
        e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
        e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
        e.closePath();
        Xb(e, c[10]);
        return d;
    }
    function xc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 300;
        d.translate(a * -80, -20);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 200.5, a * 14.953125);
        d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
        d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
        d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
        d.closePath();
        Xb(d, b[0]);
        return c;
    }
    function Jc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.save();
        f.translate(b * 85, b * 88);
        f.rotate(1.4);
        nd(f, 7, b * 60, b * 10);
        f.restore();
        Xb(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 80);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            nd(f, 3, b * 21, b * 4);
            Xb(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(1.4);
        nd(f, 7, b * 60, b * 10);
        Xb(f, d[3], d[4], b * 4);
        f.rotate(0.64);
        nd(f, 7, b * 40, b * 10);
        Xb(f, d[5], d[6], b * 4);
        f.rotate(0.12);
        nd(f, 7, b * 23, b * 5);
        f.restore();
        Xb(f, d[7]);
        return e;
    }
    function Mc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 115;
        d.height = a * 585;
        e.scale(-1, 1);
        e.translate(a * -110, 0);
        e.translate(a * 10, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 51.5, a * 342);
        Zb(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
        e.restore();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 54, a * 83);
        e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
        e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
        e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 97);
        e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
        e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
        e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
        e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 176);
        e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
        e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 176);
        e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
        e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 403);
        e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
        e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
        e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 67);
        e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
        e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
        e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 125);
        e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
        e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
        e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
        e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 171);
        e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
        e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
        e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 68);
        e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
        e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
        e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
        e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
        e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 71, a * 172);
        e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
        e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
        e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 151);
        e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
        e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
        e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
        e.closePath();
        Xb(e, c[0]);
        e.translate(a * -10, a * -10);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 51.5, a * 342);
        Zb(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
        e.restore();
        Xb(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 54, a * 83);
        e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
        e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
        e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
        e.closePath();
        Xb(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 97);
        e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
        e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
        e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
        e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
        e.closePath();
        Xb(e, c[5], c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 403);
        e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
        e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
        e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
        e.closePath();
        Xb(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 427);
        e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
        Xb(e, _a, c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 448);
        e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
        Xb(e, lj, c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 176);
        e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
        e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
        e.closePath();
        Xb(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 176);
        e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
        e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
        e.closePath();
        Xb(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 67);
        e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
        e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
        e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
        e.closePath();
        Xb(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 125);
        e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
        e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
        e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
        e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
        e.closePath();
        Xb(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 171);
        e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
        e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
        e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
        e.closePath();
        Xb(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 68);
        e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
        e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
        e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
        e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
        e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
        e.closePath();
        Xb(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 71, a * 172);
        e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
        e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
        e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
        e.closePath();
        Xb(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 151);
        e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
        e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
        e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
        e.closePath();
        Xb(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 113);
        e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
        e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
        e.closePath();
        Xb(e, c[3], c[4], a * 6);
        return d;
    }
    function Bc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 260;
        e.translate(a * 10, a * 10);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 9, a * 5);
            e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
            e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
            e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
            e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
            e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
            e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
            e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
            e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
            e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
            e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
            e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
            e.closePath();
            Xb(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 5, a * 70);
            e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
            e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
            e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
            e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
            e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
            e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
            e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
            e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
            e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
            e.closePath();
            Xb(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 19, a * 158);
            e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
            e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
            e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
            e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
            e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
            e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
            e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
            e.closePath();
            Xb(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 183);
            e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
            e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
            e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
            e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
            e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
            e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
            e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
            e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
            e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
            e.closePath();
            Xb(e, b[3], b[3], a * 32);
            id(e, a * 41, a * 30, a * 14.7648230602334);
            Xb(e, b[3], b[3], a * 32);
            id(e, a * 369, a * 30, a * 15.556349186104045);
            Xb(e, b[3], b[3], a * 32);
            id(e, a * 364, a * 190, a * 15.620499351813308);
            Xb(e, b[3], b[3], a * 32);
            id(e, a * 41, a * 186, a * 15.556349186104045);
            Xb(e, b[3], b[3], a * 32);
        } else if (c == 2) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 9, a * 5);
            e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
            e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
            e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
            e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
            e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
            e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
            e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
            e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
            e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
            e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
            e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
            e.closePath();
            Xb(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 5, a * 70);
            e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
            e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
            e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
            e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
            e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
            e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
            e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
            e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
            e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
            e.closePath();
            Xb(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 19, a * 158);
            e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
            e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
            e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
            e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
            e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
            e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
            e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
            e.closePath();
            Xb(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 183);
            e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
            e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
            e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
            e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
            e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
            e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
            e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
            e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
            e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
            e.closePath();
            Xb(e, b[3], b[3], a * 32);
            id(e, a * 41, a * 30, a * 14.7648230602334);
            Xb(e, b[3], b[3], a * 32);
            id(e, a * 369, a * 30, a * 15.556349186104045);
            Xb(e, b[3], b[3], a * 32);
            id(e, a * 364, a * 190, a * 15.620499351813308);
            Xb(e, b[3], b[3], a * 32);
            id(e, a * 41, a * 186, a * 15.556349186104045);
            Xb(e, b[3], b[3], a * 32);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9, a * 5);
        e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
        e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
        e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
        e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
        e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
        e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
        e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
        e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
        e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
        e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
        e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
        e.closePath();
        Xb(e, b[1], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 70);
        e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
        e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
        e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
        e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
        e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
        e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
        e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
        e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
        e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
        e.closePath();
        Xb(e, b[2], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 158);
        e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
        e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
        e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
        e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
        e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
        e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
        e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
        e.closePath();
        Xb(e, b[1], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 183);
        e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
        e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
        e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
        e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
        e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
        e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
        e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
        e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
        e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
        e.closePath();
        Xb(e, b[2], b[0], a * 12);
        id(e, a * 41, a * 30, a * 14.7648230602334);
        Xb(e, b[2], b[0], a * 12);
        id(e, a * 369, a * 30, a * 15.556349186104045);
        Xb(e, b[2], b[0], a * 12);
        id(e, a * 364, a * 190, a * 15.620499351813308);
        Xb(e, b[2], b[0], a * 12);
        id(e, a * 41, a * 186, a * 15.556349186104045);
        Xb(e, b[2], b[0], a * 12);
        return d;
    }
    function Dc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 100;
        c.height = a * 100;
        d.globalAlpha = 0.5;
        d.fillStyle = b[0];
        d.fillRect(0, 0, c.width, c.height);
        return c;
    }
    function Ic(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 92;
        d.height = a * 108;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 10);
        e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
        e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
        e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
        e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
        e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
        e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
        e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
        e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
        e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
        e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
        e.closePath();
        Xb(e, c[0], c[1], 4);
        return d;
    }
    function Ec(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 345;
        d.height = a * 250;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 58);
        e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
        e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
        e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
        e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
        e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
        e.closePath();
        Xb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 108, a * 51);
        e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
        e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
        e.closePath();
        Xb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 249, a * 27);
        e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
        e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
        e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
        e.closePath();
        Xb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 78);
        e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
        e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
        e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
        e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
        e.closePath();
        Xb(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 105);
        e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
        e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
        e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
        e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
        e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
        e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
        e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
        e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
        e.closePath();
        Xb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 48, a * 130);
        e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
        e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
        e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
        e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
        e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
        e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
        e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
        e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
        e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
        e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
        e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
        e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
        e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
        e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
        e.closePath();
        Xb(e, c[1], c[2], a * 8);
        e.globalCompositeOperation = "destination-out";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 158);
        e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
        e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
        e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
        e.closePath();
        Xb(e, c[7], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 215, a * 146);
        e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
        e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
        e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
        e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
        e.closePath();
        Xb(e, c[7], c[8], a * 8);
        e.globalCompositeOperation = "source-over";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 158);
        e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
        e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
        e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
        e.closePath();
        Xb(e, undefined, c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 215, a * 146);
        e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
        e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
        e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
        e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
        e.closePath();
        Xb(e, Pg, c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 66);
        e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
        e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
        e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
        e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
        e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
        e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
        e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
        e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
        e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
        e.closePath();
        Xb(e, c[7], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 185);
        e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
        e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
        e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
        e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
        e.closePath();
        Xb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226, a * 186);
        e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
        e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
        e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
        e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
        e.closePath();
        Xb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 172, a * 110);
        e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
        e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
        e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
        e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
        e.closePath();
        Xb(e, c[3], c[4], a * 8);
        return d;
    }
    function Sc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 139;
        d.height = a * 135;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 77);
        e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
        e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
        e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
        e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
        e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 37);
        e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
        e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
        e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
        e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
        e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 63);
        e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
        e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
        e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
        e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
        e.closePath();
        Xb(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 77);
        e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
        e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
        e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
        e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
        e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
        e.closePath();
        Xb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 37);
        e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
        e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
        e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
        e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
        e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
        e.closePath();
        Xb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 63);
        e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
        e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
        e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
        e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
        e.closePath();
        Xb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 38);
        e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
        e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
        e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 65);
        e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
        e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
        e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
        e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 69);
        e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
        e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
        e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
        e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 69);
        e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
        e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 38);
        e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
        e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
        e.closePath();
        Xb(e, c[2]);
        return d;
    }
    function Qc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 253;
        c.height = a * 260;
        d.globalAlpha = 0.5;
        id(d, a * 126.5, a * 134, a * 119);
        Xb(d, b[0]);
        d.globalAlpha = 1;
        id(d, a * 126.5, a * 124, a * 119);
        Xb(d, b[1], b[2], a * 4);
        id(d, a * 126.5, a * 127, a * 100);
        Xb(d, b[3]);
        d.globalAlpha = 0.5;
        id(d, a * 126.5, a * 135, a * 81);
        Xb(d, b[0]);
        d.globalAlpha = 1;
        id(d, a * 126.5, a * 125, a * 84);
        Xb(d, b[4], b[5], a * 4);
        id(d, a * 126.5, a * 125, a * 61);
        Xb(d, b[6], b[7], a * 4);
        d.globalAlpha = 0.5;
        id(d, a * 126.5, a * 134, a * 40);
        Xb(d, b[8]);
        d.globalAlpha = 1;
        id(d, a * 126.5, a * 125, a * 40);
        Xb(d, b[9]);
        return c;
    }
    function _c(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 151;
        d.height = a * 80;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 54);
        e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
        e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
        e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
        e.closePath();
        Xb(e, c[2], c[3], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 40);
        e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
        e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
        e.closePath();
        Xb(e, c[0], c[1], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 33);
        e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
        e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
        e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
        e.closePath();
        Xb(e, c[0], c[1], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 52);
        e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
        e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
        e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
        e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
        e.closePath();
        Xb(e, c[0], c[1], 4);
        return d;
    }
    function Fc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 108;
        d.height = a * 669;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 54, a * 389.5);
        Zb(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 579);
        e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
        e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
        e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
        e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141);
        e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
        e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
        e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
        e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
        e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 152);
        e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
        e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
        e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 28);
        e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
        e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
        e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
        e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 53);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
        e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
        e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
        e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
        e.closePath();
        Xb(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 54, a * 389.5);
        e.rotate(0);
        Zb(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
        e.restore();
        Xb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 579);
        e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
        e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
        e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
        e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
        e.closePath();
        Xb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141);
        e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
        e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
        e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
        e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
        e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
        e.closePath();
        Xb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 152);
        e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
        e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
        e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
        e.closePath();
        Xb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 28);
        e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
        e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
        e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
        e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
        e.closePath();
        Xb(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 53);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
        e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
        e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
        e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
        e.closePath();
        Xb(e, c[8]);
        return d;
    }
    function Rc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 173;
        c.height = a * 178;
        d.globalAlpha = 0.5;
        id(d, a * 86.5, a * 98, a * 80);
        Xb(d, b[0]);
        d.globalAlpha = 1;
        id(d, a * 86.5, a * 89, a * 81);
        Xb(d, b[1], b[2], a * 4);
        id(d, a * 86.5, a * 86, a * 59);
        Xb(d, b[3], b[4], a * 4);
        d.globalAlpha = 0.5;
        id(d, a * 86.5, a * 95, a * 34);
        Xb(d, b[0]);
        d.globalAlpha = 1;
        id(d, a * 86.5, a * 89, a * 34);
        Xb(d, b[5]);
        return c;
    }
    function jc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 138;
        d.height = a * 133;
        e.globalAlpha = b ? 0.3 : 1;
        e.translate(0, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 79.640625);
        e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
        e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
        e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
        e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
        e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
        e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 82.640625);
        e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
        e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
        e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
        e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
        e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 73.640625);
        e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
        e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
        e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
        e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
        e.closePath();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72, a * 28.640625);
        e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
        e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
        e.closePath();
        Xb(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 26.640625);
        e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
        Xb(e, undefined, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 26.640625);
        e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
        Xb(e, undefined, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 79.640625);
        e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
        e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
        e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
        e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
        e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
        e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
        e.closePath();
        Xb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 82.640625);
        e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
        e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
        e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
        e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
        e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
        e.closePath();
        Xb(e, c[3], c[4], a * 4);
        return d;
    }
    function Gc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 106;
        d.height = a * 681;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 52.5, a * 395);
        e.rotate(0);
        Zb(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 588);
        e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
        e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
        e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 135);
        e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
        e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
        e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
        e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
        e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 150);
        e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
        e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
        e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
        e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
        e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 39);
        e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
        e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
        e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 64);
        e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
        e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
        e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
        e.closePath();
        Xb(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 52.5, a * 395);
        e.rotate(0);
        Zb(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
        e.restore();
        Xb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 588);
        e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
        e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
        e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
        e.closePath();
        Xb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 135);
        e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
        e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
        e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
        e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
        e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
        e.closePath();
        Xb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 150);
        e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
        e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
        e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
        e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
        e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
        e.closePath();
        Xb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 39);
        e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
        e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
        e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
        e.closePath();
        Xb(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 64);
        e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
        e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
        e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
        e.closePath();
        Xb(e, c[8]);
        return d;
    }
    function Lc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 149;
        c.height = a * 153;
        d.globalAlpha = 0.5;
        id(d, a * 74.5, a * 85, a * 66);
        Xb(d, b[0]);
        d.globalAlpha = 1;
        id(d, a * 75.5, a * 72.5, a * 67);
        Xb(d, b[1], b[2], a * 4);
        id(d, a * 75.5, a * 73.5, a * 54);
        Xb(d, b[3]);
        d.globalAlpha = 0.5;
        id(d, a * 74.5, a * 80.5, a * 39);
        Xb(d, b[4]);
        d.globalAlpha = 1;
        id(d, a * 74.5, a * 74.5, a * 37);
        Xb(d, b[5]);
        return c;
    }
    function Wc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.translate(0, b * 3);
        f.globalAlpha = c ? 0.5 : 1;
        f.save();
        f.translate(b * 85, b * 95);
        f.rotate(1.4);
        nd(f, 7, b * 60, b * 10);
        f.restore();
        Xb(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 82);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            nd(f, 3, b * 21, b * 4);
            Xb(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(0.2);
        nd(f, 9, b * 60, b * 10);
        Xb(f, d[3], d[4], b * 4);
        f.rotate(-0.32);
        nd(f, 9, b * 38, b * 10);
        Xb(f, d[5], d[6], b * 4);
        f.rotate(0.68);
        nd(f, 9, b * 20, b * 8);
        Xb(f, d[7], d[8], b * 6);
        f.restore();
        return e;
    }
    function Oc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 169;
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 139);
        e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
        e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
        e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.save();
        e.translate(a * 86.5, a * 81.5);
        Zb(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
        e.restore();
        Xb(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 84.5, a * 79);
        Zb(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
        e.restore();
        Xb(e, c[3], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 54);
        e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
        e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
        e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
        e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
        e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
        e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
        e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 28, a * 24);
        e.rotate(0);
        Zb(e, a * -14, a * -14, a * 28, a * 28, a * 4);
        e.restore();
        Xb(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143, a * 23);
        e.rotate(0);
        Zb(e, a * -14, a * -14, a * 28, a * 28, a * 4);
        e.restore();
        Xb(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 80);
        e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
        e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
        e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
        e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
        e.closePath();
        Xb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 112);
        e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
        e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
        e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
        e.closePath();
        Xb(e, c[8], c[9], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 127, a * 111);
        e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
        e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
        e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
        e.closePath();
        Xb(e, c[9]);
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 15, a * 117);
        e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
        e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
        e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
        e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 127);
        e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
        e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
        e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
        e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
        e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
        e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
        e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 27.5, a * 138.5);
        Zb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
        e.restore();
        Xb(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143.5, a * 137);
        Zb(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
        e.restore();
        Xb(e, c[1], c[2], a * 5);
        return d;
    }
    function Nc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 69;
        d.height = a * 120;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 30, a * 84);
        Zb(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 30, a * 45);
        Zb(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 30, a * 17);
        Zb(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 30, a * 31);
        Zb(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 36, a * 79.140625);
        Zb(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
        e.restore();
        Xb(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 35, a * 40.140625);
        Zb(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
        e.restore();
        Xb(e, c[3], c[4], a * 3);
        e.save();
        e.translate(a * 35, a * 12.140625);
        Zb(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
        e.restore();
        Xb(e, c[3], c[4], a * 3);
        e.save();
        e.translate(a * 34.5, a * 26.140625);
        Zb(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
        e.restore();
        Xb(e, c[3], c[4], a * 3);
        return d;
    }
    function Hc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 20;
        c.height = a * 35;
        Zb(d, 0, 0, 20, 35, 7);
        Xb(d, b[0]);
        return c;
    }
    function qc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 271;
        c.height = a * 366;
        d.globalAlpha = 0.5;
        d.translate(0, a * 10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        Xb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        Xb(d, b[0]);
        d.globalAlpha = 1;
        d.translate(0, a * -10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        Xb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        Xb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        Xb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        Xb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        Xb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        Xb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        Xb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        Xb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        Xb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        Xb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        Xb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        Xb(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        Xb(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        Xb(d, b[2]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        Xb(d, b[1]);
        id(d, a * 102, a * 269, a * 11);
        Xb(d, b[3]);
        id(d, a * 98, a * 266, a * 5);
        Xb(d, b[6]);
        id(d, a * 168, a * 269, a * 11);
        Xb(d, b[3]);
        id(d, a * 164, a * 266, a * 5);
        Xb(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        Xb(d, b[2]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 235);
        d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
        d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
        d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
        d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
        d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
        d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
        d.closePath();
        Xb(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 132, a * 219);
        d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
        d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
        d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
        d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
        d.closePath();
        Xb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 179);
        d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
        d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
        d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
        d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
        d.closePath();
        Xb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 143);
        d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
        d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
        d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
        d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
        d.closePath();
        Xb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 115);
        d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
        d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
        d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
        d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
        d.closePath();
        Xb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 94);
        d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
        d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
        d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
        d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
        d.closePath();
        Xb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130, a * 279);
        d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
        d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
        d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
        d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
        d.closePath();
        Xb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 147, a * 303);
        d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
        d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
        d.closePath();
        Xb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 303);
        d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
        d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
        d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
        d.closePath();
        Xb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 89, a * 280);
        d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
        d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
        d.closePath();
        Xb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 94, a * 290);
        d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
        d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
        d.closePath();
        Xb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 163, a * 295);
        d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
        d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
        d.closePath();
        Xb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 172, a * 286);
        d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
        d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
        d.closePath();
        Xb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        Xb(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        Xb(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        Xb(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        Xb(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        Xb(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        Xb(d, b[7]);
        return c;
    }
    function Uc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 48;
        c.height = a * 47;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 7.1875, a * 25.434661865234375);
        d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
        d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
        d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
        d.closePath();
        Xb(d, b[0]);
        return c;
    }
    function Yc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 280;
        d.translate(a * -100, a * -20);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 228.5, a * 331.953125);
        d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
        d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
        d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
        d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
        d.closePath();
        Xb(d, b[0]);
        return c;
    }
    function Kc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 85;
        c.height = a * 145;
        d.translate(a * -165, a * -95);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217, a * 103);
        d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
        d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
        d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
        d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
        d.closePath();
        Xb(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 231, a * 163);
        d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
        d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
        d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
        d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
        d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
        d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
        d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
        d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
        d.closePath();
        Xb(d, b[2], b[3], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 234, a * 154);
        d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
        d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
        d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
        d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
        d.closePath();
        Xb(d, b[2]);
        return c;
    }
    function Vc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 147;
        c.height = a * 172;
        d.globalAlpha = 0.5;
        d.translate(0, a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 8, a * 50);
        d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
        d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
        d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
        d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
        d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
        d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
        d.closePath();
        Xb(d, b[0]);
        d.translate(0, a * -8);
        d.globalAlpha = 1;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 8, a * 50);
        d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
        d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
        d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
        d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
        d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
        d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
        d.closePath();
        Xb(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 14, a * 57);
        d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
        d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
        Xb(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 93, a * 47);
        d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
        d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
        Xb(d, b[1], b[2], a * 4);
        id(d, a * 51, a * 91, a * 9);
        Xb(d, b[3]);
        id(d, a * 95, a * 91, a * 9);
        Xb(d, b[3]);
        id(d, a * 91, a * 89, a * 4);
        Xb(d, b[4]);
        id(d, a * 47, a * 89, a * 4);
        Xb(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 54, a * 133);
        d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
        d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
        d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
        d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
        d.closePath();
        Xb(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 65.25, a * 135);
        d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
        d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
        d.closePath();
        Xb(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 74, a * 145);
        d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
        d.closePath();
        Xb(d, undefined, b[6], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 19, a * 58);
        d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
        d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
        d.closePath();
        Xb(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 100, a * 51);
        d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
        d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
        d.closePath();
        Xb(d, b[6]);
        return c;
    }
    function Xc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 320;
        d.translate(a * -60, a * -15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 188.5, a * 3.953125);
        d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
        d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
        d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
        d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
        d.closePath();
        Xb(d, b[0]);
        return c;
    }
    function Zc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 187;
        d.height = a * 119;
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, 3);
        e.moveTo(a * 53, a * 45);
        e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
        e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
        e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
        e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
        e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
        e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
        e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
        e.closePath();
        Xb(e, c[5]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, -3);
        e.moveTo(a * 53, a * 45);
        e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
        e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
        e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
        e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
        e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
        e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
        e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
        e.closePath();
        Xb(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 151, a * 60);
        e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
        e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
        e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
        e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
        e.closePath();
        Xb(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 53);
        e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
        e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
        e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
        e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
        e.closePath();
        Xb(e, c[2], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 36);
        e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
        e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
        e.closePath();
        Xb(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 43);
        e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
        Xb(e, gs, c[1], a * 4);
        id(e, a * 58, a * 50, a * 5);
        Xb(e, c[4]);
        id(e, a * 43, a * 65, a * 5);
        Xb(e, c[4]);
        id(e, a * 58, a * 73, a * 5);
        Xb(e, c[4]);
        id(e, a * 58, a * 50, a * 2);
        Xb(e, c[5]);
        id(e, a * 43, a * 65, a * 2);
        Xb(e, c[5]);
        id(e, a * 58, a * 73, a * 2);
        Xb(e, c[5]);
        return d;
    }
    function $c(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 330;
        d.translate(a * -60, a * -10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 188.5, a * 7.953125);
        d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
        d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
        d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
        d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
        d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
        d.closePath();
        Xb(d, b[0]);
        return c;
    }
    function em(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 161;
        c.height = a * 190;
        d.globalAlpha = 0.5;
        d.translate(0, 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        Xb(d, b[0]);
        d.globalAlpha = 1;
        d.translate(0, -8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        Xb(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 28, a * 63);
        d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
        d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
        d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
        d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
        d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
        d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
        d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
        d.closePath();
        Xb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 99, a * 55);
        d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
        d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
        d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
        d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
        d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
        d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
        d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
        d.closePath();
        Xb(d, b[3]);
        id(d, a * 103, a * 110, a * 11);
        Xb(d, b[4]);
        id(d, a * 55, a * 111, a * 11);
        Xb(d, b[4]);
        id(d, a * 99, a * 107, a * 5);
        Xb(d, b[1]);
        id(d, a * 51, a * 108, a * 5);
        Xb(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31, a * 121);
        d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
        d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
        d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
        d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
        d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
        d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
        d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
        d.closePath();
        Xb(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.translate(-2, 0);
        d.moveTo(a * 71, a * 162);
        d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
        d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
        d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
        d.closePath();
        Xb(d, b[3]);
        d.translate(2, 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        Xb(d, undefined, b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 25, a * 63);
        d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
        d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
        d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
        Xb(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 91, a * 53);
        d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
        d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
        d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
        Xb(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31, a * 63);
        d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
        d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
        d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
        d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
        d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
        d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
        d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
        d.closePath();
        Xb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 99, a * 55);
        d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
        d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
        d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
        d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
        d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
        d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
        d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
        d.closePath();
        Xb(d, b[3]);
        return c;
    }
    function im(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 85;
        c.height = a * 145;
        d.translate(a * -20, a * -95);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 50, a * 105);
        d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
        d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
        d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
        d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
        d.closePath();
        Xb(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44, a * 106);
        d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
        d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
        d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
        d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
        d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
        d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
        d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
        d.closePath();
        Xb(d, b[2], b[3], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 30, a * 159);
        d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
        d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
        d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
        d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
        d.closePath();
        Xb(d, b[2]);
        return c;
    }
    function tm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 33;
        c.height = a * 35;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 12.75, a * 7.1328125);
        d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
        d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
        d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
        d.closePath();
        Xb(d, b[0]);
        return c;
    }
    const nm = 15;
    function om(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 142;
        d.height = a * 118;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 27.3671875);
        e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
        e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
        e.closePath();
        Xb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 23.3671875);
        e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
        e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
        e.closePath();
        Xb(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 70.5, a * 34.8671875);
        e.rotate(0);
        Zb(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
        e.restore();
        Xb(e, c[0], c[1], a * 4);
        e.save();
        e.translate(a * 71, a * 40.8671875);
        e.rotate(0);
        Zb(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
        e.restore();
        Xb(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
        e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
        e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
        e.closePath();
        Xb(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
        e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
        e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
        e.closePath();
        Xb(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.800003051757812, a * 49.15625);
        e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
        e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
        e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
        e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
        e.closePath();
        Xb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
        e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
        e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
        e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
        e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
        e.closePath();
        Xb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 56.3671875);
        e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
        e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
        e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
        e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
        e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
        e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
        e.closePath();
        Xb(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 68.30000305175781, a * 41.45625305175781);
        e.rotate(0.76);
        Zb(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
        e.restore();
        Xb(e, undefined, c[5], a * 4);
        e.save();
        e.translate(a * 68.80000305175781, a * 44.45625305175781);
        e.rotate(0.76);
        Zb(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
        e.restore();
        Xb(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 69.80000305175781, a * 44.556243896484375);
        e.rotate(0.76);
        Zb(e, a * -10, a * -10, a * 20, a * 20, a * 5);
        e.restore();
        Xb(e, c[6], c[7], a * 4);
        return d;
    }
    function am(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 120;
        e.height = b * 100;
        Zb(f, b * 10, b * 10, b * 95, b * 80, b * 10);
        Xb(f, c[2]);
        Zb(f, b * 10, b * 5, b * 95, b * 80, b * 10);
        Xb(f, c[3], c[4], b * 4);
        if (d == 0) {
            var g = cm(b * 0.75, c, 0);
            f.drawImage(g, b * 22, b * 18);
        } else if (d == 1) {
            g = cm(b * 0.75, c, 1);
            f.drawImage(g, b * 22, b * 18);
        }
        return e;
    }
    function rm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 88;
        d.height = a * 88;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(0.52);
        nd(e, 6, a * 43, a * 10);
        e.restore();
        Xb(e, c[0], c[1], a * 3);
        return d;
    }
    function sm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 137;
        d.height = a * 129;
        e.globalAlpha = 0.5;
        id(e, a * 69, a * 64, a * 48.16637831516918);
        Xb(e, c[1]);
        e.globalAlpha = 0.7;
        id(e, a * 69, a * 64, a * 38.23105625617661);
        Xb(e, c[2]);
        e.globalAlpha = 0.7;
        id(e, a * 69, a * 64, a * 32.01562118716424);
        Xb(e, c[2], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72, a * 41);
        e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
        e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
        e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 62);
        e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
        e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
        e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
        e.closePath();
        Xb(e, c[3]);
        return d;
    }
    function hm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 142;
        d.height = a * 118;
        e.save();
        e.translate(a * 70.16665649414062, a * 38.20831298828125);
        Zb(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
        e.restore();
        Xb(e, c[0], c[1], a * 4);
        e.save();
        e.translate(a * 70, a * 42.70831298828125);
        Zb(e, a * -61, a * -20, a * 122, a * 40, a * 20);
        e.restore();
        Xb(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123, a * 70.375);
        e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
        e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
        e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
        e.closePath();
        Xb(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 11, a * 68.375);
        e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
        e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
        e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
        e.closePath();
        Xb(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46, a * 32.375);
        e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
        e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
        e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
        e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
        e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
        e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
        e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
        e.closePath();
        Xb(e, c[2], c[1], a * 4);
        id(e, a * 71, a * 44.375, a * 16.55294535724685);
        Xb(e, c[2], c[1], a * 4);
        id(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
        Xb(e, c[2], c[1], a * 4);
        return d;
    }
    function lm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 46;
        d.height = a * 140;
        e.scale(a * -1, a * 1);
        e.translate(a * -50, a * 40);
        e.translate(a * -20, 0);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
        e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
        e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
        e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
        e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -1, 0);
        e.moveTo(a * 17.599990844726562, a * 89.75);
        e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 1, 0);
        e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
        e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
        e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
        e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
        e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
        e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
        e.closePath();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 23.599990844726562, a * 110.94999694824219);
        e.rotate(0);
        Zb(e, a * -7, a * -4, a * 14, a * 8, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.translate(a * 0, 0);
        e.globalAlpha = 1;
        e.translate(a * 10, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
        e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
        e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
        e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
        e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
        e.closePath();
        Xb(e, c[3], c[4], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -1, 0);
        e.moveTo(a * 17.599990844726562, a * 89.75);
        e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
        e.closePath();
        Xb(e, c[1], c[2], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 1, 0);
        e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
        e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
        e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
        e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
        e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
        e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
        e.closePath();
        Xb(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 23.599990844726562, a * 110.94999694824219);
        e.rotate(0);
        Zb(e, a * -7, a * -4, a * 14, a * 8, a * 10);
        e.restore();
        Xb(e, c[1], c[2], a * 3);
        return d;
    }
    function gm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 104;
        d.height = a * 117;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 90);
        e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
        e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
        e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
        e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
        e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 6, a * 76);
        e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
        e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
        e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
        e.closePath();
        Xb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 62);
        e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
        e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
        e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
        e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
        e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
        e.closePath();
        Xb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 107);
        e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
        e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
        e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 1, a * 89);
        e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
        e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
        e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
        e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
        e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 107);
        e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
        e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
        e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
        e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
        e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
        e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
        e.closePath();
        Xb(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22, a * 71);
        e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
        e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
        e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
        e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
        e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
        e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
        e.closePath();
        Xb(e, mn, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 89);
        e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
        e.closePath();
        Xb(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 102);
        e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
        e.closePath();
        Xb(e, _h, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68, a * 62);
        e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
        e.closePath();
        Xb(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 70, a * 41);
        e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
        e.closePath();
        Xb(e, vg, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 33);
        e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
        e.closePath();
        Xb(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 28);
        e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
        e.closePath();
        Xb(e, mn, c[4], a * 6);
        return d;
    }
    function um(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 161;
        d.height = a * 184;
        e.translate(0, a * 10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.5, a * 34.609375);
        e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
        e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
        e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
        e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
        e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
        e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
        e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
        e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
        e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
        e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45.5, a * 144.609375);
        e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
        e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
        e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
        Xb(e, c[0]);
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45.5, a * 144.609375);
        e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
        e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
        e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
        Xb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.5, a * 34.609375);
        e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
        e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
        e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
        e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
        e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
        e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
        e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
        e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
        e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
        e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
        e.closePath();
        Xb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104.5, a * 35.609375);
        e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
        e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
        e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
        Xb(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.5, a * 72.609375);
        e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
        Xb(e, yl, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60.5, a * 85.609375);
        e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
        Xb(e, undefined, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68.5, a * 122.609375);
        e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 142.5, a * 18.609375);
        e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
        e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 146.5, a * 61.50892639160156);
        e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
        e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
        e.closePath();
        Xb(e, c[3]);
        return d;
    }
    function bm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 89;
        d.height = a * 89;
        e.save();
        e.translate(a * 44.5, a * 44.5);
        nd(e, 6, a * 40, a * 10);
        e.restore();
        Xb(e, c[0], c[1], a * 5);
        e.save();
        e.translate(a * 44.5, a * 44.5);
        nd(e, 6, a * 25.11521001172521, a * 10);
        e.restore();
        Xb(e, c[2], c[3], a * 5);
        return d;
    }
    function dm(a, b, c) {
        var d = (e = document.createElement("canvas")).getContext("2d");
        e.width = a * 47;
        e.height = a * 60;
        var e;
        d = (e = document.createElement("canvas")).getContext("2d");
        e.width = a * 47;
        e.height = a * 60;
        id(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
        Xb(d, undefined, c[2], a * 4);
        id(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
        Xb(d, undefined, c[1], a * 4);
        id(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
        Xb(d, fh, c[1], a * 4);
        d.save();
        d.translate(a * 23, a * 38.734375);
        d.rotate(0);
        Zb(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
        d.restore();
        Xb(d, c[2], c[1], a * 4);
        d.save();
        d.translate(a * 23.5, a * 43.734375);
        d.rotate(0.5235987755982988);
        nd(d, 3, a * 8.06225774829855, a * 0);
        d.restore();
        Xb(d, c[3]);
        id(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
        Xb(d, c[3]);
        return e;
    }
    function vm(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 120;
        var g = b * 140;
        d.width = f;
        d.height = g;
        d.width = b * 130;
        d.height = b * 120;
        Zb(e, b * 10, b * 12, b * 110, b * 90, b * 10);
        Xb(e, c[0]);
        Zb(e, b * 10, b * 5, b * 110, b * 90, b * 10);
        Xb(e, c[1], c[2], b * 4);
        var a = ad(-Math.PI / 5, Zt(b * 0.5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        e.drawImage(a, b * 12, b * 18);
        a = ad(Math.PI / 4, Nc(b * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        e.drawImage(a, b * 36, b * 16);
        return d;
    }
    function cm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 95;
        d.height = a * 85;
        if (c == 0) {
            e.translate(a * 7, a * 15);
            e.scale(0.9, 0.9);
            e.save();
            Zb(e, a * 0, a * 5, a * 90, a * 60, 10);
            Xb(e, b[0]);
            e.globalCompositeOperation = "destination-out";
            id(e, a * 25, a * 40, a * 10);
            e.fill();
            id(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
            e.save();
            Zb(e, 0, 0, a * 90, a * 60, a * 10);
            Xb(e, b[1]);
            e.globalCompositeOperation = "destination-out";
            id(e, a * 25, a * 40, a * 10);
            e.fill();
            id(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
        } else if (c == 1) {
            e.scale(0.8, 0.8);
            e.translate(a * 15, a * 33);
            e.save();
            e.scale(0.56, 0.56);
            e.translate(a * -39, a * -60);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 32.5, a * 50.642852783203125);
            e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
            e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
            e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
            e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
            e.closePath();
            Xb(e, b[1]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 116.5, a * 85.64285278320312);
            e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
            e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
            e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
            e.closePath();
            Xb(e, b[1]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 166.5, a * 68.64285278320312);
            e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
            e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
            e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
            e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
            e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
            e.closePath();
            Xb(e, b[1]);
            e.restore();
            e.save();
            Zb(e, 0, a * 15, a * 90, a * 50, a * 10);
            Xb(e, b[0]);
            Zb(e, 0, a * 10, a * 90, a * 50, a * 10);
            Xb(e, b[1]);
            e.globalCompositeOperation = "destination-out";
            id(e, a * 25, a * 40, a * 10);
            e.fill();
            id(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
        }
        return d;
    }
    function mm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 204, a * 195.0833282470703);
        e.rotate(10.16);
        Zb(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
        e.restore();
        Xb(e, c[0], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58.5, a * 226.5833282470703);
        e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
        e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
        e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
        e.closePath();
        Xb(e, c[2], c[3], a * 4);
        e.save();
        e.translate(a * 197, a * 169.0833282470703);
        e.rotate(10.16);
        Zb(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
        e.restore();
        Xb(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.5, a * 24.583328247070312);
        e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
        e.closePath();
        Xb(e, fh, c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
        e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
        e.closePath();
        Xb(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
        e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
        e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
        e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
        e.closePath();
        Xb(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
        e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
        e.closePath();
        Xb(e, c[4], c[1], a * 8);
        e.save();
        e.translate(a * 249.63333129882812, a * 120.89999389648438);
        e.rotate(7.04);
        Zb(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
        e.restore();
        Xb(e, c[5]);
        return d;
    }
    function pm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 202;
        d.height = a * 202;
        e.translate(a * 2, a * 1);
        e.globalAlpha = 0.3;
        id(e, a * 98, a * 99, a * 100);
        Xb(e, c[0]);
        e.globalAlpha = 0.5;
        id(e, a * 98, a * 99, a * 90);
        Xb(e, c[1]);
        return d;
    }
    function Cm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 170;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -10, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 4.109375);
        e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
        e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
        e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
        e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * 10, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 4.109375);
        e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
        e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
        e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
        e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
        e.closePath();
        Xb(e, c[1], c[2], a * 10);
        return d;
    }
    function Tm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 180;
        d.height = a * 120;
        e.translate(a * -65, a * -35);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 150.5, a * 63.84375);
        Zb(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
        e.restore();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 75.34375);
        e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
        e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
        e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206.5, a * 71.34375);
        e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
        e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
        e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 136.5, a * 75.34375);
        e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
        e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
        e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
        e.closePath();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 152.5, a * 80.84375);
        e.rotate(3.12);
        Zb(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 150.5, a * 63.84375);
        Zb(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
        e.restore();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 75.34375);
        e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
        e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
        e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
        e.closePath();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206.5, a * 71.34375);
        e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
        e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
        e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
        e.closePath();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 136.5, a * 75.34375);
        e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
        e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
        e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
        e.closePath();
        Xb(e, c[1], c[2], a * 4);
        e.save();
        e.translate(a * 152.5, a * 80.84375);
        e.rotate(3.12);
        Zb(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
        e.restore();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.5, a * 73.34375);
        e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
        e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
        e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
        e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
        e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
        e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
        e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137.5, a * 65.34375);
        e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 221.5, a * 85.34375);
        e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
        e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 89.34375);
        e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
        e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 208.5, a * 104.34375);
        e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
        e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 117.34375);
        e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
        e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107.5, a * 51.34375);
        e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
        e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
        e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 170.5, a * 52.34375);
        e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
        e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
        e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 69.34375);
        e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
        e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222.5, a * 75.34375);
        e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
        e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 100.34375);
        e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
        e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112.5, a * 48.34375);
        e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
        e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216.5, a * 109.34375);
        e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
        e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86.5, a * 133.34375);
        e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
        e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
        e.closePath();
        Xb(e, c[2]);
        return d;
    }
    function fm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 790;
        e.translate(a * 5, a * 5);
        e.globalAlpha = 0;
        id(e, a * 178.5, a * 172.828125, a * 150);
        Xb(e, undefined, c[0], a * 65);
        id(e, a * 178.5, a * 172.828125, a * 150);
        Xb(e, Go, c[0], a * 55);
        e.closePath();
        e.save();
        e.translate(a * 177, a * 512.328125);
        Zb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
        e.restore();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 136, a * 581.828125);
        Zb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
        e.restore();
        Xb(e, c[0]);
        e.save();
        e.translate(a * 135.5, a * 663.828125);
        Zb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
        e.restore();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 114, a * 594.828125);
        e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
        e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
        e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
        e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
        e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, a * 5);
        e.moveTo(a * 140, a * 294.828125);
        e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
        e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
        e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
        e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
        e.closePath();
        Xb(e, c[0]);
        e.translate(3, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159, a * 679.828125);
        e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
        e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
        e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
        e.closePath();
        Xb(e, c[0]);
        e.save();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 548.828125);
        e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
        e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
        e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
        e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
        e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
        e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
        e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
        e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
        e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
        e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
        e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
        e.closePath();
        Xb(e, c[0], c[0], a * 7);
        e.restore();
        e.globalAlpha = 1;
        e.translate(a * 15, a * 35);
        id(e, a * 178.5, a * 172.828125, a * 150);
        Xb(e, undefined, c[2], a * 95);
        id(e, a * 178.5, a * 172.828125, a * 150);
        Xb(e, Yl, c[1], a * 55);
        e.closePath();
        e.save();
        e.translate(a * 177, a * 512.328125);
        Zb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
        e.restore();
        Xb(e, c[1], c[2], a * 20);
        e.save();
        e.translate(a * 136, a * 581.828125);
        Zb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
        e.restore();
        Xb(e, c[1], c[2], a * 20);
        e.save();
        e.translate(a * 135.5, a * 663.828125);
        Zb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
        e.restore();
        Xb(e, c[1], c[2], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 114, a * 594.828125);
        e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
        e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
        e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
        e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
        e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
        e.closePath();
        Xb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, a * 5);
        e.moveTo(a * 123, a * 294.828125);
        e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
        e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
        e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
        e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
        e.closePath();
        Xb(e, c[1]);
        e.translate(0, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159, a * 679.828125);
        e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
        e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
        e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
        e.closePath();
        Xb(e, c[1]);
        e.save();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 548.828125);
        e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
        e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
        e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
        e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
        e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
        e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
        e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
        e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
        e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
        e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
        e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
        e.closePath();
        Xb(e, c[1], c[1], a * 7);
        e.restore();
        return d;
    }
    function zm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 202;
        d.height = a * 202;
        e.translate(a * 2, a * 1);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 98, a * 41.15177917480469);
        e.rotate(0.8);
        Zb(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
        e.restore();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 22.5089111328125);
        e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
        Xb(e, c[2]);
        e.save();
        e.translate(a * 147.5, a * 69.5089111328125);
        e.rotate(0.2);
        Zb(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
        e.restore();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 163, a * 59.50892639160156);
        e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
        Xb(e, c[2]);
        e.save();
        e.translate(a * 143.5, a * 128.2946319580078);
        e.rotate(1.24);
        Zb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
        e.restore();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 135.93748474121094);
        e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
        Xb(e, c[2]);
        e.save();
        e.translate(a * 99, a * 156.08035278320312);
        e.rotate(0.84);
        Zb(e, a * -18, a * -18, a * 36, a * 36, a * 7);
        e.restore();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 136.08035278320312);
        e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
        Xb(e, c[2]);
        e.save();
        e.translate(a * 54, a * 72.22320556640625);
        e.rotate(1.32);
        Zb(e, a * -18, a * -19, a * 36, a * 38, a * 7);
        e.restore();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34, a * 60.79463195800781);
        e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
        Xb(e, c[2]);
        e.save();
        e.translate(a * 49, a * 127.29463195800781);
        e.rotate(1.76);
        Zb(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
        e.restore();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141.7946319580078);
        e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
        Xb(e, c[2]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 98, a * 41.15177917480469);
        e.rotate(0.8);
        Zb(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
        e.restore();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 22.5089111328125);
        e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
        Xb(e, Yl, c[4], a * 5);
        e.save();
        e.translate(a * 147.5, a * 69.5089111328125);
        e.rotate(0.2);
        Zb(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
        e.restore();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 163, a * 59.50892639160156);
        e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
        Xb(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 143.5, a * 128.2946319580078);
        e.rotate(1.24);
        Zb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
        e.restore();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 135.93748474121094);
        e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
        Xb(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 99, a * 156.08035278320312);
        e.rotate(0.84);
        Zb(e, a * -18, a * -18, a * 36, a * 36, a * 7);
        e.restore();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 136.08035278320312);
        e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
        Xb(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 54, a * 72.22320556640625);
        e.rotate(1.32);
        Zb(e, a * -18, a * -19, a * 36, a * 38, a * 7);
        e.restore();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34, a * 60.79463195800781);
        e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
        Xb(e, Jt, c[4], a * 5);
        e.save();
        e.translate(a * 49, a * 127.29463195800781);
        e.rotate(1.76);
        Zb(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
        e.restore();
        Xb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141.7946319580078);
        e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
        Xb(e, undefined, c[4], a * 5);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 98, a * 99);
        nd(e, 6, a * 70.28669492273468, a * 10);
        e.restore();
        Xb(e, c[2]);
        e.save();
        e.translate(a * 98, a * 99);
        nd(e, 6, a * 56.455940020351264, a * 10);
        e.restore();
        Xb(e, c[2]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 98, a * 99);
        nd(e, 6, a * 70.28669492273468, a * 10);
        e.restore();
        Xb(e, c[5], c[6], a * 5);
        e.save();
        e.translate(a * 98, a * 99);
        nd(e, 6, a * 56.455940020351264, a * 10);
        e.restore();
        Xb(e, c[7], c[8], a * 7);
        return d;
    }
    function ym(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 105;
        d.height = a * 144;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -5, a * 0);
        e.save();
        e.translate(a * 52.5, a * 91.5);
        Zb(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
        e.restore();
        Xb(e, c[0], c[0], a * 3);
        e.save();
        e.translate(a * 53, a * 36);
        Zb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
        e.restore();
        Xb(e, c[0], c[0], a * 4);
        e.save();
        e.translate(a * 53.5, a * 35.5);
        Zb(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
        e.restore();
        Xb(e, c[0], c[0], a * 4);
        e.translate(a * 5, a * 0);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 52.5, a * 91.5);
        Zb(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
        e.restore();
        Xb(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 53, a * 36);
        Zb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
        e.restore();
        Xb(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 53.5, a * 35.5);
        Zb(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
        e.restore();
        Xb(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 60.5);
        e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
        e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
        e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
        e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
        e.closePath();
        Xb(e, c[7], c[6], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 66, a * 40.5);
        e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
        e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
        e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
        e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
        e.closePath();
        Xb(e, c[7], c[6], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 33.5);
        e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
        e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
        e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
        e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
        e.closePath();
        Xb(e, c[9], c[8], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 47.5);
        e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
        e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
        e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
        e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
        e.closePath();
        Xb(e, c[11], c[10], a * 3);
        return d;
    }
    function wm(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 185;
        e.height = b * 164;
        f.translate(0, 0);
        var g = function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 201;
            d.height = a * 164;
            e.translate(0, a * 5);
            e.globalAlpha = b ? 0.5 : 1;
            id(e, a * 100.5, a * 82, a * 74.92746655359852);
            Xb(e, c[0], c[0], a * 4);
            id(e, a * 100.5, a * 82, a * 65.9417374971317);
            Xb(e, c[0], c[0], a * 4);
            e.translate(0, -5);
            e.globalAlpha = 1;
            id(e, a * 100.5, a * 82, a * 74.92746655359852);
            Xb(e, c[1], c[3], a * 4);
            id(e, a * 100.5, a * 82, a * 65.9417374971317);
            Xb(e, c[1], c[2], a * 4);
            id(e, a * 100.5, a * 82, a * 35.9417374971317);
            Xb(e, c[1], c[2], a * 20);
            id(e, a * 100.5, a * 82, a * 15.9417374971317);
            Xb(e, c[1], c[2], a * 6);
            return d;
        }(b, c, d);
        f.drawImage(g, b * -10, b * 0);
        g = Am(b, c, d, 0);
        f.drawImage(g, b * -83, b * -40);
        g = Am(b, c, d, Math.PI / 1.4);
        f.drawImage(g, b * -15, b * -88);
        g = Am(b, c, d, Math.PI / -1.4);
        f.drawImage(g, b * 15, b * -8);
        return e;
    }
    function Pm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 145;
        d.height = a * 120;
        e.beginPath();
        e.scale(0.6, 0.6);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 18, a * -8);
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        Xb(e, c[4], c[5], a * 4);
        e.beginPath();
        e.scale(1.1, 1.1);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -9, a * 4);
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        Xb(e, c[4], c[5], a * 4);
        e.scale(1.1, 1.1);
        e.translate(a * -9, a * 4);
        e.save();
        e.translate(a * 100, a * 73.06874084472656);
        e.rotate(0);
        Zb(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
        e.restore();
        Xb(e, c[1], c[2], a * 4);
        e.save();
        e.translate(a * 100, a * 71.36874389648438);
        e.rotate(0);
        Zb(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
        e.restore();
        Xb(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 144, a * 80);
        e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
        e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
        e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 57, a * 75);
        e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
        e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
        e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        Xb(e, c[4], c[5], a * 4);
        e.translate(0, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115.5, a * 116.07290649414062);
        e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
        e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
        e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
        e.closePath();
        Xb(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39.5, a * 96.07290649414062);
        e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
        e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
        e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
        e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
        e.closePath();
        Xb(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 80);
        e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
        e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
        e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
        e.closePath();
        Xb(e, c[3], c[2], a * 4);
        e.scale(0.5, 0.5);
        e.translate(a * 100, a * 71);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 80);
        e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
        e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
        e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
        e.closePath();
        Xb(e, c[6], c[2], a * 4);
        return d;
    }
    function Am(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 501;
        f.height = b * 564;
        g.scale(0.5, 0.5);
        g.translate(b * 240, b * 255);
        g.rotate(e);
        g.globalAlpha = c ? 0.5 : 0.2;
        id(g, b * 174, b * 87.984375, b * 20.8806130178211);
        Xb(g, d[0], d[0], b * 8);
        id(g, b * 174, b * 87.984375, b * 12.165525060596439);
        Xb(g, d[0], d[0], b * 8);
        id(g, b * 174, b * 87.484375, b * 6);
        Xb(g, d[0]);
        id(g, b * 30, b * 87.984375, b * 20.8806130178211);
        Xb(g, d[0], d[0], b * 4);
        id(g, b * 30, b * 87.984375, b * 12.165525060596439);
        Xb(g, d[0], d[0], b * 4);
        id(g, b * 30, b * 87.484375, b * 6);
        Xb(g, d[0]);
        id(g, b * 100, b * 30, b * 20.8806130178211);
        Xb(g, d[0], d[0], b * 4);
        id(g, b * 100, b * 30, b * 12.165525060596439);
        Xb(g, d[0], d[0], b * 4);
        id(g, b * 100, b * 30, b * 6);
        Xb(g, d[0]);
        id(g, b * 100, b * 130, b * 20.8806130178211);
        Xb(g, d[0], d[0], b * 4);
        id(g, b * 100, b * 130, b * 12.165525060596439);
        Xb(g, d[0], d[0], b * 4);
        id(g, b * 100, b * 130, b * 6);
        Xb(g, d[0]);
        g.save();
        g.translate(b * 102, b * 81.984375);
        g.rotate(0);
        Zb(g, b * -74, b * -57, b * 148, b * 114, b * 23);
        g.restore();
        Xb(g, d[0], d[0], b * 4);
        g.save();
        g.translate(b * 101, b * 64.984375);
        g.rotate(0);
        Zb(g, b * -33, b * -10, b * 66, b * 20, b * 15);
        g.restore();
        Xb(g, d[0], d[0], b * 4);
        g.save();
        g.translate(b * 102, b * 63.484375);
        g.rotate(0);
        Zb(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
        g.restore();
        g.translate(5, -5);
        g.globalAlpha = 1;
        id(g, b * 174, b * 87.984375, b * 20.8806130178211);
        Xb(g, d[1], d[3], b * 8);
        id(g, b * 174, b * 87.984375, b * 12.165525060596439);
        Xb(g, d[1], d[3], b * 8);
        id(g, b * 174, b * 87.484375, b * 6);
        Xb(g, d[2]);
        id(g, b * 30, b * 87.984375, b * 20.8806130178211);
        Xb(g, d[1], d[3], b * 8);
        id(g, b * 30, b * 87.984375, b * 12.165525060596439);
        Xb(g, d[1], d[3], b * 8);
        id(g, b * 30, b * 87.484375, b * 6);
        Xb(g, d[2]);
        id(g, b * 102, b * 30, b * 20.8806130178211);
        Xb(g, d[1], d[3], b * 8);
        id(g, b * 102, b * 30, b * 12.165525060596439);
        Xb(g, d[1], d[3], b * 8);
        id(g, b * 102, b * 30, b * 6);
        Xb(g, d[1]);
        id(g, b * 102, b * 130, b * 20.8806130178211);
        Xb(g, d[1], d[3], b * 8);
        id(g, b * 102, b * 130, b * 12.165525060596439);
        Xb(g, d[1], d[3], b * 8);
        id(g, b * 102, b * 130, b * 6);
        Xb(g, d[1]);
        g.save();
        g.translate(b * 102, b * 81.984375);
        Zb(g, b * -74, b * -57, b * 148, b * 114, b * 23);
        g.restore();
        Xb(g, d[1], d[3], b * 8);
        g.save();
        g.translate(b * 101, b * 64.984375);
        Zb(g, b * -33, b * -10, b * 66, b * 20, b * 15);
        g.restore();
        Xb(g, d[2], d[1], b * 8);
        g.save();
        g.translate(b * 102, b * 63.484375);
        Zb(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
        g.restore();
        Xb(g, d[2], d[1], b * 8);
        id(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
        Xb(g, d[1], d[3], b * 8);
        id(g, b * 135, b * 107.36605834960938, b * 13);
        Xb(g, d[1], d[3], b * 8);
        id(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
        Xb(g, d[2]);
        id(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
        Xb(g, d[1], d[3], b * 8);
        id(g, b * 70, b * 107.36605834960938, b * 13);
        Xb(g, d[1], d[3], b * 8);
        id(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
        Xb(g, d[2]);
        return f;
    }
    function km(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 106;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 75);
        e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
        e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
        e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
        e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
        e.closePath();
        Xb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 38, a * 46);
        e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
        e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
        e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
        e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
        e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
        e.closePath();
        Xb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 75);
        e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
        e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
        e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
        e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
        e.closePath();
        Xb(e, undefined, c[2], a * 4);
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        Xb(e, c[10], c[10], a * 4);
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 43);
        e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
        e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
        e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 43);
        e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
        e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
        e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 19);
        e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
        e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
        e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
        e.closePath();
        Xb(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 148, a * 18);
        e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
        e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
        e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
        e.closePath();
        Xb(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 43);
        e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
        e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
        e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
        e.closePath();
        Xb(e, undefined, c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 43);
        e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
        e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
        e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
        e.closePath();
        Xb(e, gs, c[4], a * 4);
        e.save();
        e.translate(a * 87, a * 34.5);
        e.rotate(0);
        Zb(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
        e.restore();
        Xb(e, c[7], c[2], a * 4);
        e.save();
        e.translate(a * 87, a * 57);
        e.rotate(0);
        Zb(e, a * -8, a * -23, a * 16, a * 46, a * 10);
        e.restore();
        Xb(e, c[8], c[2], a * 4);
        id(e, a * 87, a * 39, a * 4.123105625617661);
        Xb(e, c[9], c[2], a * 4);
        id(e, a * 87, a * 60, a * 4.242640687119285);
        Xb(e, c[9], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        Xb(e, c[8], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 69);
        e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
        e.closePath();
        Xb(e, c[9], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 70);
        e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
        e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
        e.closePath();
        Xb(e, c[9], c[2], a * 4);
        id(e, a * 50, a * 80, a * 5);
        Xb(e, c[9], c[2], a * 4);
        id(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
        Xb(e, c[9], c[2], a * 4);
        id(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
        Xb(e, c[9], c[2], a * 4);
        return d;
    }
    const xm = 9;
    function Jm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 465;
        d.height = a * 405;
        e.globalAlpha = 1;
        e.translate(a * 6, a * 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
        e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
        e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
        e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
        e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
        e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
        e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
        e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
        e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
        e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
        e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
        e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
        e.closePath();
        Xb(e, c[0], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
        e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
        e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
        e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
        e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
        e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
        e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
        e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
        e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
        e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
        e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
        e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
        e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
        e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
        e.closePath();
        Xb(e, undefined, c[1], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
        e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
        e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
        e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
        e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
        e.closePath();
        Xb(e, c[0], c[1], a * 13);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
        e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
        e.closePath();
        Xb(e, c[0], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
        e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
        e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
        e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
        e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
        e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
        e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
        e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
        e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
        e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
        e.closePath();
        Xb(e, c[2], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
        e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
        e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
        e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
        e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
        e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
        e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
        e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
        e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
        e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
        e.closePath();
        Xb(e, c[0], c[1], a * 20);
        return d;
    }
    function Mm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 316;
        d.height = a * 365;
        e.save();
        e.translate(a * 156.07142639160156, a * 51.81248474121094);
        e.rotate(0);
        Zb(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
        e.restore();
        Xb(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
        e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
        e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
        e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
        e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
        e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
        e.closePath();
        Xb(e, c[3], c[4], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
        e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
        e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
        e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
        e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
        e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
        e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
        e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
        e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
        e.closePath();
        Xb(e, undefined, c[5], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
        e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
        e.closePath();
        Xb(e, Jt, c[6], a * 15);
        return d;
    }
    function Bm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 144;
        d.height = a * 280;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 103.79999542236328);
        e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
        e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
        e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
        e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
        e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
        e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
        e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
        e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
        e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
        e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
        e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
        e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
        e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
        e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 103.79999542236328);
        e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
        e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
        e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
        e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
        e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
        e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
        e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
        e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
        e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
        e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
        e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
        e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
        e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
        e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
        e.closePath();
        Xb(e, c[1], c[2], a * 6);
        return d;
    }
    function Dm() {
        ΔⲆ[814] = Kd(1, [{
            f: vp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[815] = ΔⲆ[814];
        ΔⲆ[955] = [];
        ΔⲆ[955][0] = jb.ΔⲆΔΔⵠΔⲆ;
        ΔⲆ[955][1] = jb.ⵠⵠⲆⲆⲆΔⲆ;
        ΔⲆ[955][2] = jb.ᐃΔΔᐃⲆΔⵠ;
        ΔⲆ[956] = ΔⲆ[955];
        ΔⲆ[972] = [];
        ΔⲆ[972][0] = jb.ᐃΔΔΔⲆᐃΔ;
        ΔⲆ[972][1] = jb.ᐃⲆΔΔᐃⵠⲆ;
        ΔⲆ[972][2] = jb.ᐃᐃⵠⲆⵠΔΔ;
        ΔⲆ[973] = ΔⲆ[972];
        ΔⲆ[987] = [];
        ΔⲆ[987][0] = jb.ᐃⵠⲆᐃⲆΔⵠ;
        ΔⲆ[987][1] = jb.ᐃΔⲆⵠΔΔⵠ;
        ΔⲆ[987][2] = jb.ΔᐃⲆⲆⵠⲆΔ;
        ΔⲆ[988] = ΔⲆ[987];
        ΔⲆ[1154] = [];
        ΔⲆ[1154][0] = jb.ⵠⵠΔⲆᐃⲆⵠ;
        ΔⲆ[1154][1] = jb.ⵠᐃⵠⲆⵠᐃΔ;
        ΔⲆ[1154][2] = jb.ⲆᐃⵠⵠⲆᐃⲆ;
        ΔⲆ[1155] = ΔⲆ[1154];
        ΔⲆ[965] = [];
        ΔⲆ[965][0] = jb.ΔᐃᐃᐃⵠⲆⵠ;
        ΔⲆ[965][1] = jb.ΔⲆΔΔΔᐃΔ;
        ΔⲆ[965][2] = jb.ΔⵠΔᐃΔⲆⵠ;
        ΔⲆ[974] = ΔⲆ[965];
        ΔⲆ[1028] = [];
        ΔⲆ[1028][0] = jb.ⵠΔⵠᐃⵠⲆⵠ;
        ΔⲆ[1028][1] = jb.ᐃⵠΔⵠⵠΔⲆ;
        ΔⲆ[1028][2] = jb.ⲆⵠⲆᐃⵠⲆⵠ;
        ΔⲆ[1029] = ΔⲆ[1028];
        ΔⲆ[1027] = ΔⲆ[1028];
        ΔⲆ[712] = [];
        ΔⲆ[712][0] = jb.ᐃΔⲆᐃⵠᐃⲆᐃᐃ;
        ΔⲆ[712][1] = jb.ΔⵠᐃⲆⵠⵠⲆⵠⵠ;
        ΔⲆ[712][2] = jb.ⵠⲆⵠⵠⵠⲆΔᐃⲆ;
        ΔⲆ[713] = ΔⲆ[712];
        ΔⲆ[714] = ΔⲆ[712];
        ΔⲆ[1031] = [];
        ΔⲆ[1031][0] = jb.ⵠⲆᐃⵠⲆⵠⵠ;
        ΔⲆ[1031][1] = jb.ⲆⵠΔΔⲆΔⲆ;
        ΔⲆ[1031][2] = jb.ᐃⵠⵠᐃᐃⲆᐃ;
        ΔⲆ[1032] = ΔⲆ[1031];
        ΔⲆ[1030] = ΔⲆ[1031];
        ΔⲆ[423] = [];
        ΔⲆ[423][0] = jb.ᐃⵠⲆᐃᐃⲆᐃ;
        ΔⲆ[423][1] = jb.ⵠⲆⲆⵠⵠᐃΔ;
        ΔⲆ[423][2] = jb.ΔΔᐃΔᐃⲆΔ;
        ΔⲆ[425] = ΔⲆ[423];
        ΔⲆ[424] = ΔⲆ[423];
        ΔⲆ[1233] = [];
        ΔⲆ[1233][0] = jb.ⵠΔⲆᐃⲆⵠᐃΔⵠ;
        ΔⲆ[1233][1] = jb.ⵠⵠⵠⲆⲆⲆⲆᐃᐃ;
        ΔⲆ[1233][2] = jb.ⲆᐃⵠⲆΔᐃⲆⲆᐃ;
        ΔⲆ[1234] = ΔⲆ[1233];
        ΔⲆ[1230] = [];
        ΔⲆ[1230][0] = jb.ΔΔᐃΔⵠⲆΔᐃⵠ;
        ΔⲆ[1230][1] = jb.ⲆⵠⵠⲆΔᐃΔⲆᐃ;
        ΔⲆ[1230][2] = jb.ᐃᐃΔᐃⲆΔⲆᐃⵠ;
        ΔⲆ[1232] = ΔⲆ[1230];
        ΔⲆ[1231] = ΔⲆ[1230];
        ΔⲆ[569] = [];
        ΔⲆ[569][0] = jb.ᐃⵠΔⵠⲆᐃᐃⲆΔ;
        ΔⲆ[569][1] = jb.ⵠⲆΔⵠⲆⲆⲆⲆⲆ;
        ΔⲆ[569][2] = jb.ⲆⵠⲆⵠᐃΔⲆⵠᐃ;
        ΔⲆ[571] = ΔⲆ[569];
        ΔⲆ[570] = ΔⲆ[569];
        ΔⲆ[1166] = [];
        ΔⲆ[1166][0] = jb.ⲆⲆᐃᐃΔⵠΔⲆΔ;
        ΔⲆ[1166][1] = jb.ⵠᐃΔⵠΔΔᐃΔⵠ;
        ΔⲆ[1166][2] = jb.ⵠⲆᐃΔⵠᐃᐃⵠⲆ;
        ΔⲆ[1167] = ΔⲆ[1166];
        ΔⲆ[1168] = ΔⲆ[1166];
        ΔⲆ[572] = [];
        ΔⲆ[572][0] = jb.ⲆΔⵠΔⵠⲆⵠᐃⲆ;
        ΔⲆ[572][1] = jb.Ⲇⵠⵠᐃⵠᐃᐃⵠⵠ;
        ΔⲆ[572][2] = jb.ᐃΔⵠΔⲆΔΔᐃᐃ;
        ΔⲆ[574] = ΔⲆ[572];
        ΔⲆ[573] = ΔⲆ[572];
        ΔⲆ[1169] = [];
        ΔⲆ[1169][0] = jb.ⲆᐃⵠⵠᐃΔⲆΔⵠ;
        ΔⲆ[1169][1] = jb.ᐃΔΔᐃⲆᐃⲆΔΔ;
        ΔⲆ[1169][2] = jb.ᐃΔΔΔΔⲆⲆᐃΔ;
        ΔⲆ[1170] = ΔⲆ[1169];
        ΔⲆ[1171] = ΔⲆ[1169];
        ΔⲆ[575] = [];
        ΔⲆ[575][0] = jb.ⵠᐃⲆⵠᐃᐃΔΔⲆ;
        ΔⲆ[575][1] = jb.ᐃⲆΔΔᐃⲆⲆΔΔ;
        ΔⲆ[575][2] = jb.ᐃᐃᐃᐃⵠᐃⲆⲆⵠ;
        ΔⲆ[577] = ΔⲆ[575];
        ΔⲆ[576] = ΔⲆ[575];
        ΔⲆ[1172] = [];
        ΔⲆ[1172][0] = jb.ΔⵠⲆⵠⵠᐃΔᐃⲆ;
        ΔⲆ[1172][1] = jb.ⵠΔⲆᐃᐃⲆⲆΔᐃ;
        ΔⲆ[1172][2] = jb.ⲆⵠΔⵠⵠΔⵠΔΔ;
        ΔⲆ[1173] = ΔⲆ[1172];
        ΔⲆ[1174] = ΔⲆ[1172];
        ΔⲆ[578] = [];
        ΔⲆ[578][0] = jb.ᐃⲆⵠⵠⲆᐃᐃⵠⲆ;
        ΔⲆ[578][1] = jb.ᐃᐃᐃᐃⵠΔᐃⵠΔ;
        ΔⲆ[578][2] = jb.ⲆⵠᐃΔⵠᐃΔⲆᐃ;
        ΔⲆ[580] = ΔⲆ[578];
        ΔⲆ[579] = ΔⲆ[578];
        ΔⲆ[1175] = [];
        ΔⲆ[1175][0] = jb.ⵠⲆᐃΔΔⵠⵠᐃⲆ;
        ΔⲆ[1175][1] = jb.ᐃⵠΔᐃⵠⵠᐃΔⵠ;
        ΔⲆ[1175][2] = jb.ΔΔᐃⵠᐃⵠⲆⵠΔ;
        ΔⲆ[1176] = ΔⲆ[1175];
        ΔⲆ[1177] = ΔⲆ[1175];
        ΔⲆ[581] = [];
        ΔⲆ[581][0] = jb.ⵠΔΔᐃᐃᐃⵠⲆⵠ;
        ΔⲆ[581][1] = jb.ᐃⲆᐃᐃᐃᐃΔⲆⲆ;
        ΔⲆ[581][2] = jb.ΔⲆᐃᐃΔⵠⲆⲆΔ;
        ΔⲆ[583] = ΔⲆ[581];
        ΔⲆ[582] = ΔⲆ[581];
        ΔⲆ[1178] = [];
        ΔⲆ[1178][0] = jb.ΔⲆⲆⵠᐃΔΔᐃᐃ;
        ΔⲆ[1178][1] = jb.ΔⵠⵠΔⵠΔⵠΔᐃ;
        ΔⲆ[1178][2] = jb.ΔⲆⵠⲆΔⲆⲆΔᐃ;
        ΔⲆ[1179] = ΔⲆ[1178];
        ΔⲆ[1180] = ΔⲆ[1178];
        ΔⲆ[584] = [];
        ΔⲆ[584][0] = jb.ᐃΔᐃⵠⵠΔᐃⲆΔ;
        ΔⲆ[584][1] = jb.ⲆⲆᐃΔⲆᐃⲆᐃⲆ;
        ΔⲆ[584][2] = jb.ⲆⲆⵠⵠΔᐃⲆⵠΔ;
        ΔⲆ[586] = ΔⲆ[584];
        ΔⲆ[585] = ΔⲆ[584];
        ΔⲆ[1181] = [];
        ΔⲆ[1181][0] = jb.ᐃⲆⲆⵠΔⲆⲆΔⵠ;
        ΔⲆ[1181][1] = jb.ⵠⵠⵠⲆΔⲆΔᐃⵠ;
        ΔⲆ[1181][2] = jb.ⵠⵠΔⲆⵠⵠΔΔⵠ;
        ΔⲆ[1182] = ΔⲆ[1181];
        ΔⲆ[1183] = ΔⲆ[1181];
        ΔⲆ[587] = [];
        ΔⲆ[587][0] = jb.ΔⲆΔⲆⵠᐃⲆⵠᐃ;
        ΔⲆ[587][1] = jb.ᐃᐃⲆΔⵠⵠⲆⵠⲆ;
        ΔⲆ[587][2] = jb.ⵠΔⵠᐃᐃⲆΔⵠⲆ;
        ΔⲆ[589] = ΔⲆ[587];
        ΔⲆ[588] = ΔⲆ[587];
        ΔⲆ[1184] = [];
        ΔⲆ[1184][0] = jb.ⲆⲆⲆⵠΔᐃΔΔᐃ;
        ΔⲆ[1184][1] = jb.ⵠⲆΔΔΔᐃⵠΔΔ;
        ΔⲆ[1184][2] = jb.ⲆⵠΔᐃⲆΔᐃⲆᐃ;
        ΔⲆ[1185] = ΔⲆ[1184];
        ΔⲆ[1186] = ΔⲆ[1184];
        ΔⲆ[1257] = [];
        ΔⲆ[1257][0] = jb.ⵠⲆᐃΔⲆⵠⲆᐃⵠ;
        ΔⲆ[1257][1] = jb.ΔᐃΔⵠΔᐃᐃΔⵠ;
        ΔⲆ[1257][2] = jb.ⵠΔΔⵠⲆⲆΔΔΔ;
        ΔⲆ[1258] = ΔⲆ[1257];
        ΔⲆ[1256] = ΔⲆ[1257];
        ΔⲆ[1260] = [];
        ΔⲆ[1260][0] = jb.ⵠΔⵠⲆⵠᐃⲆⲆΔ;
        ΔⲆ[1260][1] = jb.ΔᐃⵠⵠᐃᐃⲆᐃᐃ;
        ΔⲆ[1260][2] = jb.ᐃⵠΔⲆⲆⲆⲆΔⲆ;
        ΔⲆ[1261] = ΔⲆ[1260];
        ΔⲆ[1259] = ΔⲆ[1260];
        ΔⲆ[1263] = [];
        ΔⲆ[1263][0] = jb.ᐃⲆⵠⵠᐃⵠᐃⲆⵠ;
        ΔⲆ[1263][1] = jb.ⵠⵠΔⵠⲆⵠᐃⲆⵠ;
        ΔⲆ[1263][2] = jb.ⵠⲆᐃⵠΔΔΔΔᐃ;
        ΔⲆ[1264] = ΔⲆ[1263];
        ΔⲆ[1262] = ΔⲆ[1263];
        ΔⲆ[1266] = [];
        ΔⲆ[1266][0] = jb.ⲆⵠⵠᐃΔⵠⵠΔᐃ;
        ΔⲆ[1266][1] = jb.ⲆᐃⵠᐃⵠⲆᐃⵠΔ;
        ΔⲆ[1266][2] = jb.ΔΔᐃⵠⵠⲆΔⵠⵠ;
        ΔⲆ[1267] = ΔⲆ[1266];
        ΔⲆ[1265] = ΔⲆ[1266];
        ΔⲆ[1269] = [];
        ΔⲆ[1269][0] = jb.ΔⲆΔᐃⲆΔⲆⵠⲆ;
        ΔⲆ[1269][1] = jb.ΔᐃⵠⲆᐃⵠΔᐃⵠ;
        ΔⲆ[1269][2] = jb.ΔⲆⵠⵠⵠΔᐃⲆⲆ;
        ΔⲆ[1270] = ΔⲆ[1269];
        ΔⲆ[1268] = ΔⲆ[1269];
        ΔⲆ[1272] = [];
        ΔⲆ[1272][0] = jb.ᐃᐃᐃΔⵠⵠΔΔΔ;
        ΔⲆ[1272][1] = jb.ⲆⲆⲆⵠⲆⵠᐃⲆⵠ;
        ΔⲆ[1272][2] = jb.ᐃⲆΔΔⵠⲆᐃⲆⵠ;
        ΔⲆ[1273] = ΔⲆ[1272];
        ΔⲆ[1271] = ΔⲆ[1272];
        ΔⲆ[1239] = [];
        ΔⲆ[1239][0] = jb.ᐃΔΔⲆⵠΔⵠᐃΔ;
        ΔⲆ[1239][1] = jb.ⵠᐃΔⵠⵠⲆᐃⵠΔ;
        ΔⲆ[1239][2] = jb.ᐃⵠΔⵠΔⲆⵠΔⵠ;
        ΔⲆ[1240] = ΔⲆ[1239];
        ΔⲆ[1238] = ΔⲆ[1239];
        ΔⲆ[1242] = [];
        ΔⲆ[1242][0] = jb.ⲆᐃⵠⵠⵠⵠⵠΔΔ;
        ΔⲆ[1242][1] = jb.ⵠΔᐃΔΔⲆⵠⲆᐃ;
        ΔⲆ[1242][2] = jb.ΔᐃⵠᐃⲆⲆⲆⵠⵠ;
        ΔⲆ[1243] = ΔⲆ[1242];
        ΔⲆ[1241] = ΔⲆ[1242];
        ΔⲆ[1245] = [];
        ΔⲆ[1245][0] = jb.ⵠᐃⲆΔΔⵠⲆΔᐃ;
        ΔⲆ[1245][1] = jb.ⲆΔⵠⵠⲆΔΔⲆⵠ;
        ΔⲆ[1245][2] = jb.ᐃⲆⲆⵠⲆᐃⵠⲆᐃ;
        ΔⲆ[1246] = ΔⲆ[1245];
        ΔⲆ[1244] = ΔⲆ[1245];
        ΔⲆ[1248] = [];
        ΔⲆ[1248][0] = jb.ΔᐃⵠⵠΔᐃᐃⲆⲆ;
        ΔⲆ[1248][1] = jb.ᐃᐃⵠⲆΔΔⲆᐃᐃ;
        ΔⲆ[1248][2] = jb.ⵠᐃⲆⵠᐃΔⵠⵠⲆ;
        ΔⲆ[1249] = ΔⲆ[1248];
        ΔⲆ[1247] = ΔⲆ[1248];
        ΔⲆ[1251] = [];
        ΔⲆ[1251][0] = jb.ⲆᐃΔⵠΔΔⲆⵠᐃ;
        ΔⲆ[1251][1] = jb.ΔᐃᐃⵠΔΔⵠᐃᐃ;
        ΔⲆ[1251][2] = jb.ⲆⵠΔⵠⲆᐃⲆⲆᐃ;
        ΔⲆ[1252] = ΔⲆ[1251];
        ΔⲆ[1250] = ΔⲆ[1251];
        ΔⲆ[1254] = [];
        ΔⲆ[1254][0] = jb.ⵠⲆΔᐃΔⵠⲆⲆⵠ;
        ΔⲆ[1254][1] = jb.ΔⵠⲆⵠⵠΔΔⲆᐃ;
        ΔⲆ[1254][2] = jb.ⲆⲆΔᐃⲆᐃⵠⲆᐃ;
        ΔⲆ[1255] = ΔⲆ[1254];
        ΔⲆ[1253] = ΔⲆ[1254];
        ΔⲆ[1227] = [];
        ΔⲆ[1227][0] = jb.ⲆΔΔᐃΔΔⵠᐃⲆ;
        ΔⲆ[1227][1] = jb.ⵠⵠΔⵠⲆⲆᐃΔⲆ;
        ΔⲆ[1227][2] = jb.ᐃⵠᐃᐃΔⲆⵠᐃⲆ;
        ΔⲆ[1229] = ΔⲆ[1227];
        ΔⲆ[1228] = ΔⲆ[1227];
        ΔⲆ[1187] = [];
        ΔⲆ[1187][0] = jb.ⵠⵠᐃᐃⵠⵠΔ;
        ΔⲆ[1187][1] = jb.ᐃⵠΔⵠΔΔⲆ;
        ΔⲆ[1187][2] = jb.ΔⲆⲆⲆᐃⲆⲆ;
        ΔⲆ[1188] = ΔⲆ[1187];
        ΔⲆ[_r.ᐃΔⲆⲆⵠΔⵠⲆⵠ] = ΔⲆ[1187];
        ΔⲆ[840] = Kd(1, [{
            f: pd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
        }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[841] = ΔⲆ[840];
        ΔⲆ[850] = Kd(1, [{
            f: Vm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[851] = ΔⲆ[850];
        ΔⲆ[644] = Kd(1, [{
            f: Wd,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }, {
            f: Xd,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }, {
            f: Ld,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[643] = ΔⲆ[644];
        ΔⲆ[639] = Kd(1, [{
            f: Id,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[800] = Kd(1, [{
            f: pc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
        }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[799] = ΔⲆ[800];
        ΔⲆ[631] = Kd(1, [{
            f: cu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[632] = ΔⲆ[631];
        ΔⲆ[311] = Kd(1, [{
            f: cu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#493d36", "#332b28"]
        }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[284] = ΔⲆ[311];
        ΔⲆ[808] = Kd(1, [{
            f: cu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c67933", "#b17238"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[809] = ΔⲆ[808];
        ΔⲆ[834] = Kd(1, [{
            f: cu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e8e8e8", "#bbbbbb"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[835] = ΔⲆ[834];
        ΔⲆ[845] = Kd(1, [{
            f: cu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#328a56", "#449573"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[846] = ΔⲆ[845];
        ΔⲆ[949] = Kd(1, [{
            f: cu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c98e2f", "#a36b11"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[950] = ΔⲆ[949];
        ΔⲆ[951] = ΔⲆ[949];
        ΔⲆ[966] = Kd(1, [{
            f: cu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#13a56d", "#098a58"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[967] = ΔⲆ[966];
        ΔⲆ[968] = ΔⲆ[966];
        ΔⲆ[981] = Kd(1, [{
            f: cu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3a8214", "#4a9c1e"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[982] = ΔⲆ[981];
        ΔⲆ[983] = ΔⲆ[981];
        ΔⲆ[959] = Kd(1, [{
            f: cu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#b22419", "#99110e"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[960] = ΔⲆ[959];
        ΔⲆ[961] = ΔⲆ[959];
        ΔⲆ[309] = Kd(1, [{
            f: Bt,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 7,
            c: ["#4d2d14", "#432516"]
        }, {
            f: Ht,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 7,
            c: ["#efd435", "#ec8d35", "#e96132"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[302] = ΔⲆ[309];
        ΔⲆ[328] = Kd(1, [{
            f: $d,
            x: -2,
            y: -1,
            a: 1,
            r: -Math.PI / 7,
            c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
        }, {
            f: Ht,
            x: -2,
            y: -1,
            a: 1,
            r: -Math.PI / 7,
            c: ["#efd435", "#ec8d35", "#e96132"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[327] = ΔⲆ[328];
        ΔⲆ[860] = Kd(1, [{
            f: Ut,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
        }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[865] = Kd(1, [{
            f: eu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[829] = Kd(1, [{
            f: _t,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[261] = Kd(1, [{
            f: St,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[292] = Kd(1, [{
            f: gu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[293] = Kd(1, [{
            f: nu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[455] = Kd(1, [{
            f: iu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[313] = Kd(1, [{
            f: Zt,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[312] = Kd(1, [{
            f: Zt,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[258] = Kd(1, [{
            f: Zt,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[296] = Kd(1, [{
            f: Zt,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[458] = Kd(1, [{
            f: Zt,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[1017] = [];
        ΔⲆ[1017][0] = jb.ΔⲆⵠⲆᐃΔᐃ;
        ΔⲆ[1017][1] = jb.ⲆΔΔΔᐃΔΔ;
        ΔⲆ[1017][2] = jb.ⲆⲆᐃⵠΔⵠᐃ;
        ΔⲆ[1019] = ΔⲆ[1017];
        ΔⲆ[1018] = ΔⲆ[1017];
        ΔⲆ[315] = Kd(1, [{
            f: fu,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#252B28", "#58645F", "#75827D"]
        }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[297] = Kd(1, [{
            f: hu,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#282823", "#877c2d", "#c4bc51"]
        }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[298] = Kd(1, [{
            f: wu,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#232828", "#3fc9c9", "#74ede6"]
        }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[316] = Kd(1, [{
            f: Bt,
            x: 0,
            y: -5,
            a: 1,
            r: Math.PI / 2.5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[830] = ΔⲆ[829];
        ΔⲆ[254] = ΔⲆ[261];
        ΔⲆ[290] = ΔⲆ[292];
        ΔⲆ[291] = ΔⲆ[293];
        ΔⲆ[456] = ΔⲆ[455];
        ΔⲆ[314] = ΔⲆ[313];
        ΔⲆ[256] = ΔⲆ[312];
        ΔⲆ[295] = ΔⲆ[258];
        ΔⲆ[257] = ΔⲆ[296];
        ΔⲆ[460] = ΔⲆ[458];
        ΔⲆ[277] = Kd(1, [{
            f: zd,
            x: 0,
            y: 0,
            a: 1,
            r: 0
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[310] = Kd(1, [{
            f: Td,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
        }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[262] = ΔⲆ[310];
        ΔⲆ[329] = Kd(1, [{
            f: hc,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[263] = ΔⲆ[329];
        ΔⲆ[331] = Kd(1, [{
            f: qu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[332] = ΔⲆ[331];
        ΔⲆ[492] = Kd(1, [{
            f: hc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[493] = ΔⲆ[492];
        ΔⲆ[330] = Kd(1, [{
            f: sc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[265] = ΔⲆ[330];
        ΔⲆ[317] = Kd(1, [{
            f: Au,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
        }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[318] = ΔⲆ[317];
        ΔⲆ[319] = Kd(1, [{
            f: dc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[320] = ΔⲆ[319];
        ΔⲆ[362] = Kd(1, [{
            f: Ac,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[363] = ΔⲆ[362];
        ΔⲆ[364] = Kd(1, [{
            f: Ac,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[365] = ΔⲆ[364];
        ΔⲆ[361] = Kd(1, [{
            f: Jc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[360] = ΔⲆ[361];
        ΔⲆ[495] = Kd(1, [{
            f: Jc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[496] = ΔⲆ[495];
        ΔⲆ[335] = Kd(1, [{
            f: nc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[268] = ΔⲆ[335];
        ΔⲆ[372] = Kd(1, [{
            f: pu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[371] = ΔⲆ[372];
        ΔⲆ[499] = Kd(1, [{
            f: pu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[498] = ΔⲆ[499];
        ΔⲆ[375] = Kd(1, [{
            f: zu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[374] = ΔⲆ[375];
        ΔⲆ[378] = Kd(1, [{
            f: su,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[377] = ΔⲆ[378];
        ΔⲆ[337] = Kd(1, [{
            f: fc,
            x: 0,
            y: 2,
            a: 1,
            r: 0,
            c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[338] = ΔⲆ[337];
        ΔⲆ[300] = Kd(1, [{
            f: Qd,
            x: 0,
            y: -3,
            a: 1,
            r: 0,
            c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
        }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[323] = Kd(1, [{
            f: Qd,
            x: 0,
            y: -3,
            a: 1,
            r: 0,
            c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
        }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[325] = ΔⲆ[323];
        ΔⲆ[305] = Kd(1, [{
            f: Gd,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#cec0c4", "#ffffff", "#6d6768"]
        }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[513] = Kd(1, [{
            f: Gd,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#d4e9ec", "#37b1d7", "#506c71"]
        }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[515] = ΔⲆ[513];
        ΔⲆ[368] = Kd(1, [{
            f: Ic,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#ef96be", "#ffffff"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[1162] = Kd(1, [{
            f: Ic,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#55423e", "#ffffff"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[178] = Kd(1, [{
            f: lc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[179] = Kd(1, [{
            f: lc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[624] = Kd(1, [{
            f: Ic,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#201851", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[393] = Kd(1, [{
            f: Ic,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#231f20", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[505] = Kd(1, [{
            f: Ic,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#ffffff", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[369] = Kd(1, [{
            f: _c,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[370] = ΔⲆ[369];
        ΔⲆ[381] = Kd(1, [{
            f: tu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[380] = ΔⲆ[381];
        ΔⲆ[502] = Kd(1, [{
            f: jc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[503] = ΔⲆ[502];
        ΔⲆ[880] = Kd(1, [{
            f: Dt,
            x: 0,
            y: 5,
            a: 1,
            r: 0,
            c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[881] = ΔⲆ[880];
        ΔⲆ[882] = Kd(1, [{
            f: Ft,
            x: 0,
            y: 5,
            a: 1,
            r: 0,
            c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[883] = ΔⲆ[882];
        ΔⲆ[303] = Kd(1, [{
            f: Od,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#ffffff", "#cec0c4"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[304] = ΔⲆ[303];
        ΔⲆ[392] = [];
        ΔⲆ[392][0] = jb.ᐃΔᐃⲆᐃᐃⵠ;
        ΔⲆ[392][1] = jb.ΔⲆⲆᐃΔΔΔ;
        ΔⲆ[392][2] = jb.ⲆΔⵠⲆⲆⲆⵠ;
        ΔⲆ[367] = ΔⲆ[392];
        ΔⲆ[975] = [];
        ΔⲆ[975][0] = jb.ⵠΔⲆⲆⵠⲆΔ;
        ΔⲆ[975][1] = jb.ΔΔᐃΔⵠⵠⲆ;
        ΔⲆ[975][2] = jb.ⵠΔᐃⲆᐃᐃⵠ;
        ΔⲆ[977] = ΔⲆ[975];
        ΔⲆ[976] = ΔⲆ[975];
        ΔⲆ[978] = [];
        ΔⲆ[978][0] = jb.ᐃⲆᐃᐃⲆⲆⲆ;
        ΔⲆ[978][1] = jb.ᐃⲆΔⵠΔᐃᐃ;
        ΔⲆ[978][2] = jb.ⲆⲆⵠΔⲆΔⵠ;
        ΔⲆ[980] = ΔⲆ[978];
        ΔⲆ[979] = ΔⲆ[978];
        ΔⲆ[1158] = [];
        ΔⲆ[1158][0] = jb.ΔⵠΔⵠⲆᐃΔ;
        ΔⲆ[1158][1] = jb.ΔⵠΔⵠⲆᐃΔ;
        ΔⲆ[1158][2] = jb.ΔⵠΔⵠⲆᐃΔ;
        ΔⲆ[1159] = ΔⲆ[1158];
        ΔⲆ[426] = [];
        ΔⲆ[426][0] = jb.ⲆⵠⵠᐃᐃΔΔ;
        ΔⲆ[426][1] = jb.ᐃᐃⵠᐃⵠΔⵠ;
        ΔⲆ[426][2] = jb.ⲆⵠΔⵠΔⲆᐃ;
        ΔⲆ[427] = ΔⲆ[426];
        ΔⲆ[428] = ΔⲆ[426];
        ΔⲆ[1160] = [];
        ΔⲆ[1160][0] = jb.ΔⵠᐃᐃⲆᐃΔ;
        ΔⲆ[1160][1] = jb.ΔⵠᐃᐃⲆᐃΔ;
        ΔⲆ[1160][2] = jb.ΔⵠᐃᐃⲆᐃΔ;
        ΔⲆ[1161] = ΔⲆ[1160];
        ΔⲆ[1236] = [];
        ΔⲆ[1236][0] = jb.ᐃᐃᐃⵠⲆⵠΔΔΔ;
        ΔⲆ[1236][1] = jb.ⵠⲆⵠᐃⲆⵠⲆⲆᐃ;
        ΔⲆ[1236][2] = jb.ᐃⲆⲆΔΔⲆΔΔΔ;
        ΔⲆ[1235] = ΔⲆ[1236];
        ΔⲆ[1237] = ΔⲆ[1236];
        ΔⲆ[991] = [];
        ΔⲆ[991][0] = jb.ⵠΔⵠⲆⵠⲆⲆ;
        ΔⲆ[991][1] = jb.ⲆΔΔⲆΔΔⵠ;
        ΔⲆ[991][2] = jb.ΔᐃⲆᐃⲆᐃⲆ;
        ΔⲆ[990] = ΔⲆ[991];
        ΔⲆ[992] = ΔⲆ[991];
        ΔⲆ[994] = [];
        ΔⲆ[994][0] = jb.ᐃᐃⵠⵠΔᐃΔ;
        ΔⲆ[994][1] = jb.ⵠᐃΔᐃΔⵠⲆ;
        ΔⲆ[994][2] = jb.ⲆⲆΔΔⵠⵠΔ;
        ΔⲆ[993] = ΔⲆ[994];
        ΔⲆ[995] = ΔⲆ[994];
        ΔⲆ[997] = [];
        ΔⲆ[997][0] = jb.ⵠⲆᐃⵠⵠᐃᐃ;
        ΔⲆ[997][1] = jb.ᐃⲆᐃⵠⵠᐃΔ;
        ΔⲆ[997][2] = jb.ⵠⲆΔᐃⵠⵠⵠ;
        ΔⲆ[996] = ΔⲆ[997];
        ΔⲆ[998] = ΔⲆ[997];
        ΔⲆ[1000] = [];
        ΔⲆ[1000][0] = jb.ΔΔΔⵠᐃΔΔ;
        ΔⲆ[1000][1] = jb.ΔΔᐃⵠᐃᐃⵠ;
        ΔⲆ[1000][2] = jb.ᐃⵠⲆⵠᐃⵠⲆ;
        ΔⲆ[999] = ΔⲆ[1000];
        ΔⲆ[1001] = ΔⲆ[1000];
        ΔⲆ[1003] = [];
        ΔⲆ[1003][0] = jb.ⲆⲆΔΔⵠΔᐃ;
        ΔⲆ[1003][1] = jb.ΔΔΔⵠΔⲆⵠ;
        ΔⲆ[1003][2] = jb.ⲆⵠΔⲆⲆⲆᐃ;
        ΔⲆ[1002] = ΔⲆ[1003];
        ΔⲆ[1004] = ΔⲆ[1003];
        ΔⲆ[1006] = [];
        ΔⲆ[1006][0] = jb.ⲆⵠᐃΔⵠᐃΔ;
        ΔⲆ[1006][1] = jb.ᐃⵠⲆⵠΔΔⲆ;
        ΔⲆ[1006][2] = jb.ⲆᐃⲆᐃⲆΔⲆ;
        ΔⲆ[1005] = ΔⲆ[1006];
        ΔⲆ[1007] = ΔⲆ[1006];
        ΔⲆ[1009] = [];
        ΔⲆ[1009][0] = jb.ᐃᐃⵠⲆⲆΔᐃ;
        ΔⲆ[1009][1] = jb.ΔⲆΔΔⲆⲆᐃ;
        ΔⲆ[1009][2] = jb.ΔΔⵠⲆⵠᐃⲆ;
        ΔⲆ[1008] = ΔⲆ[1009];
        ΔⲆ[1010] = ΔⲆ[1009];
        ΔⲆ[1012] = [];
        ΔⲆ[1012][0] = jb.ΔᐃᐃⵠⵠⲆⲆ;
        ΔⲆ[1012][1] = jb.ⲆᐃⵠΔⵠⲆⵠ;
        ΔⲆ[1012][2] = jb.ΔᐃⲆⵠⲆⵠΔ;
        ΔⲆ[1011] = ΔⲆ[1012];
        ΔⲆ[1013] = ΔⲆ[1012];
        ΔⲆ[1015] = [];
        ΔⲆ[1015][0] = jb.ΔⲆΔⲆΔⵠᐃ;
        ΔⲆ[1015][1] = jb.ᐃⲆⲆⵠΔΔΔ;
        ΔⲆ[1015][2] = jb.ⲆᐃⲆΔᐃⵠΔ;
        ΔⲆ[1014] = ΔⲆ[1015];
        ΔⲆ[1016] = ΔⲆ[1015];
        ΔⲆ[1035] = [];
        ΔⲆ[1035][0] = jb.ΔⲆᐃᐃᐃ;
        ΔⲆ[1035][1] = jb.ΔⲆᐃᐃᐃ;
        ΔⲆ[1035][2] = jb.ΔⲆᐃᐃᐃ;
        ΔⲆ[_r.ΔⲆⵠΔΔⵠⲆΔᐃ] = ΔⲆ[1035];
        ΔⲆ[1036] = ΔⲆ[1035];
        ΔⲆ[1037] = [];
        ΔⲆ[1037][0] = jb.Ⲇᐃᐃᐃᐃ;
        ΔⲆ[1037][1] = jb.Ⲇᐃᐃᐃᐃ;
        ΔⲆ[1037][2] = jb.Ⲇᐃᐃᐃᐃ;
        ΔⲆ[_r.ΔᐃⵠᐃⲆⵠΔⲆⵠ] = ΔⲆ[1037];
        ΔⲆ[1038] = ΔⲆ[1037];
        ΔⲆ[1039] = [];
        ΔⲆ[1039][0] = jb.ᐃⲆΔⵠⲆ;
        ΔⲆ[1039][1] = jb.ᐃⲆΔⵠⲆ;
        ΔⲆ[1039][2] = jb.ᐃⲆΔⵠⲆ;
        ΔⲆ[_r.ⲆᐃⲆᐃⲆΔⵠⲆⲆ] = ΔⲆ[1039];
        ΔⲆ[1040] = ΔⲆ[1039];
        ΔⲆ[1156] = [];
        ΔⲆ[1156][0] = jb.ΔᐃⵠⲆᐃ;
        ΔⲆ[1156][1] = jb.ΔᐃⵠⲆᐃ;
        ΔⲆ[1156][2] = jb.ΔᐃⵠⲆᐃ;
        ΔⲆ[1157] = ΔⲆ[1156];
        ΔⲆ[1046] = [];
        ΔⲆ[1046][0] = jb.ᐃⵠᐃⲆΔⲆΔ;
        ΔⲆ[1046][1] = jb.ᐃΔΔⵠⵠᐃΔ;
        ΔⲆ[1046][2] = jb.ⵠΔⵠⲆΔⵠⲆ;
        ΔⲆ[1048] = ΔⲆ[1046];
        ΔⲆ[1047] = ΔⲆ[1046];
        ΔⲆ[744] = [];
        ΔⲆ[744][0] = jb.ᐃᐃΔⵠⲆⲆⲆ;
        ΔⲆ[744][1] = jb.ⵠᐃⵠᐃⵠΔΔ;
        ΔⲆ[744][2] = jb.ⵠⵠⲆΔⲆΔΔ;
        ΔⲆ[746] = ΔⲆ[744];
        ΔⲆ[745] = ΔⲆ[744];
        ΔⲆ[747] = [];
        ΔⲆ[747][0] = jb.ⲆⵠΔⲆⵠᐃⲆ;
        ΔⲆ[747][1] = jb.ΔⵠⲆⲆᐃⵠⵠ;
        ΔⲆ[747][2] = jb.ΔⲆΔᐃΔᐃⲆ;
        ΔⲆ[749] = ΔⲆ[747];
        ΔⲆ[748] = ΔⲆ[747];
        ΔⲆ[1049] = [];
        ΔⲆ[1049][0] = jb.ΔΔᐃⲆᐃᐃΔ;
        ΔⲆ[1049][1] = jb.ⲆΔᐃᐃⲆⵠᐃ;
        ΔⲆ[1049][2] = jb.ⲆⵠⵠⲆⲆⵠᐃ;
        ΔⲆ[1051] = ΔⲆ[1049];
        ΔⲆ[1050] = ΔⲆ[1049];
        ΔⲆ[1189] = [];
        ΔⲆ[1189][0] = jb.ⲆⲆⲆᐃⵠⲆⲆ;
        ΔⲆ[1189][1] = jb.ΔⵠⲆⵠⵠⲆΔ;
        ΔⲆ[1189][2] = jb.ⲆᐃⲆⲆᐃⵠΔ;
        ΔⲆ[1191] = ΔⲆ[1189];
        ΔⲆ[1190] = ΔⲆ[1189];
        ΔⲆ[1110] = [];
        ΔⲆ[1110][0] = jb.ⵠᐃᐃⲆᐃΔⵠ;
        ΔⲆ[1110][1] = jb.ⵠᐃⵠᐃⲆⲆⵠ;
        ΔⲆ[1110][2] = jb.ⵠΔᐃᐃᐃΔᐃ;
        ΔⲆ[1112] = ΔⲆ[1110];
        ΔⲆ[1111] = ΔⲆ[1110];
        ΔⲆ[1131] = [];
        ΔⲆ[1131][0] = jb.ⲆⲆᐃⲆΔΔⵠᐃΔ;
        ΔⲆ[1131][1] = jb.ΔᐃΔⵠΔⵠⲆⲆΔ;
        ΔⲆ[1131][2] = jb.ⲆⵠΔᐃⵠᐃΔᐃᐃ;
        ΔⲆ[1133] = ΔⲆ[1131];
        ΔⲆ[1132] = ΔⲆ[1131];
        ΔⲆ[1137] = [];
        ΔⲆ[1137][0] = jb.ⲆᐃⵠΔⵠⵠⲆ;
        ΔⲆ[1137][1] = jb.ΔⵠⲆⲆΔΔᐃ;
        ΔⲆ[1137][2] = jb.ᐃᐃΔᐃⲆᐃⲆ;
        ΔⲆ[1138] = ΔⲆ[1137];
        ΔⲆ[1139] = ΔⲆ[1137];
        ΔⲆ[1140] = [];
        ΔⲆ[1140][0] = jb.ΔⵠⵠⵠᐃⵠΔ;
        ΔⲆ[1140][1] = jb.ΔᐃΔⵠⲆΔⲆ;
        ΔⲆ[1140][2] = jb.ⲆᐃⲆⵠⲆΔⵠ;
        ΔⲆ[1141] = ΔⲆ[1140];
        ΔⲆ[1142] = ΔⲆ[1140];
        ΔⲆ[1117] = [];
        ΔⲆ[1117][0] = jb.ΔⲆⲆΔΔⲆᐃ;
        ΔⲆ[1117][1] = jb.ⲆⲆΔᐃⵠᐃⵠ;
        ΔⲆ[1117][2] = jb.ⲆΔⵠⵠⲆⵠⵠ;
        ΔⲆ[1116] = ΔⲆ[1117];
        ΔⲆ[1118] = ΔⲆ[1117];
        ΔⲆ[1080] = [];
        ΔⲆ[1080][0] = jb.ΔᐃΔᐃᐃⲆⵠ;
        ΔⲆ[1080][1] = jb.ⲆΔΔⲆⵠΔⲆ;
        ΔⲆ[1080][2] = jb.ⲆⲆΔⵠⲆⲆᐃ;
        ΔⲆ[1082] = ΔⲆ[1080];
        ΔⲆ[1081] = ΔⲆ[1080];
        ΔⲆ[1224] = [];
        ΔⲆ[1224][0] = jb.ᐃᐃⲆᐃᐃΔⵠᐃᐃ;
        ΔⲆ[1224][1] = jb.ΔᐃⵠⵠⵠΔᐃᐃⲆ;
        ΔⲆ[1224][2] = jb.ΔⲆⲆΔⵠΔⲆΔᐃ;
        ΔⲆ[1226] = ΔⲆ[1224];
        ΔⲆ[1225] = ΔⲆ[1224];
        ΔⲆ[1095] = [];
        ΔⲆ[1095][0] = jb.ⲆΔⵠᐃᐃⵠᐃ;
        ΔⲆ[1095][1] = jb.ᐃⲆⲆⵠⲆᐃᐃ;
        ΔⲆ[1095][2] = jb.ΔⵠΔᐃⵠⵠⵠ;
        ΔⲆ[1097] = ΔⲆ[1095];
        ΔⲆ[1096] = ΔⲆ[1095];
        ΔⲆ[717] = Kd(1, [{
            f: tp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
        }, {
            f: Nm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e4c027"]
        }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[718] = ΔⲆ[717];
        ΔⲆ[408] = Kd(1, [{
            f: tc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
        }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[409] = ΔⲆ[408];
        ΔⲆ[907] = Kd(1, [{
            f: Oc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
        }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[909] = ΔⲆ[907];
        ΔⲆ[908] = ΔⲆ[907];
        ΔⲆ[197] = Kd(1, [{
            f: Pc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
        }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[906] = ΔⲆ[197];
        ΔⲆ[901] = Kd(1, [{
            f: Mc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[900] = ΔⲆ[901];
        ΔⲆ[899] = ΔⲆ[901];
        ΔⲆ[401] = Kd(1, [{
            f: wc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[402] = ΔⲆ[401];
        ΔⲆ[395] = Kd(1, [{
            f: kc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[396] = ΔⲆ[395];
        ΔⲆ[398] = Kd(1, [{
            f: Cc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[399] = ΔⲆ[398];
        ΔⲆ[404] = Kd(1, [{
            f: Gc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[405] = ΔⲆ[404];
        ΔⲆ[472] = Kd(1, [{
            f: Fc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[473] = ΔⲆ[472];
        ΔⲆ[874] = Kd(1, [{
            f: zc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
        }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[876] = ΔⲆ[874];
        ΔⲆ[875] = ΔⲆ[874];
        ΔⲆ[477] = Kd(1, [{
            f: Nc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[478] = ΔⲆ[477];
        ΔⲆ[709] = Kd(1, [{
            f: Bm,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#939393", "#5f6061"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[711] = ΔⲆ[709];
        ΔⲆ[550] = Kd(1, [{
            f: ym,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[551] = ΔⲆ[550];
        ΔⲆ[480] = Kd(1, [{
            f: Nc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[481] = ΔⲆ[480];
        ΔⲆ[483] = Kd(1, [{
            f: Nc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[484] = ΔⲆ[483];
        ΔⲆ[486] = Kd(1, [{
            f: Nc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[487] = ΔⲆ[486];
        ΔⲆ[489] = [];
        ΔⲆ[489][0] = jb.ᐃᐃⲆⲆΔΔᐃ;
        ΔⲆ[489][1] = jb.ΔⵠᐃⵠⲆΔⲆ;
        ΔⲆ[489][2] = jb.ᐃᐃᐃⵠⵠΔⲆ;
        ΔⲆ[491] = ΔⲆ[489];
        ΔⲆ[490] = ΔⲆ[489];
        ΔⲆ[1195] = [];
        ΔⲆ[1195][0] = jb.ⵠⲆᐃᐃᐃⵠᐃ;
        ΔⲆ[1195][1] = jb.ΔⵠⲆΔⵠⲆᐃ;
        ΔⲆ[1195][2] = jb.ⵠᐃⲆΔⲆⲆⵠ;
        ΔⲆ[1197] = ΔⲆ[1195];
        ΔⲆ[1196] = ΔⲆ[1195];
        ΔⲆ[1199] = [];
        ΔⲆ[1199][0] = jb.ⵠᐃⵠᐃⵠΔⵠ;
        ΔⲆ[1199][1] = jb.ᐃᐃᐃⲆⵠⵠᐃ;
        ΔⲆ[1199][2] = jb.ⲆⵠᐃᐃΔⵠᐃ;
        ΔⲆ[1201] = ΔⲆ[1199];
        ΔⲆ[1200] = ΔⲆ[1199];
        ΔⲆ[1203] = [];
        ΔⲆ[1203][0] = jb.ⲆᐃⵠΔⵠΔⵠ;
        ΔⲆ[1203][1] = jb.ᐃⲆΔᐃΔΔᐃ;
        ΔⲆ[1203][2] = jb.ΔΔⵠⲆΔⲆⵠ;
        ΔⲆ[1205] = ΔⲆ[1203];
        ΔⲆ[1204] = ΔⲆ[1203];
        ΔⲆ[1207] = [];
        ΔⲆ[1207][0] = jb.ⲆⵠⵠⲆᐃⲆΔ;
        ΔⲆ[1207][1] = jb.ᐃᐃⵠᐃᐃΔΔ;
        ΔⲆ[1207][2] = jb.ⵠΔᐃᐃᐃⵠⲆ;
        ΔⲆ[1209] = ΔⲆ[1207];
        ΔⲆ[1208] = ΔⲆ[1207];
        ΔⲆ[1211] = [];
        ΔⲆ[1211][0] = jb.ᐃᐃᐃⵠΔΔΔ;
        ΔⲆ[1211][1] = jb.ΔⲆⵠⲆΔⵠⲆ;
        ΔⲆ[1211][2] = jb.ΔⲆΔⵠⲆⲆᐃ;
        ΔⲆ[1213] = ΔⲆ[1211];
        ΔⲆ[1212] = ΔⲆ[1211];
        ΔⲆ[1215] = [];
        ΔⲆ[1215][0] = jb.ⲆᐃⲆΔᐃⲆⵠ;
        ΔⲆ[1215][1] = jb.ΔⲆΔᐃΔⲆᐃ;
        ΔⲆ[1215][2] = jb.ΔⲆⵠⵠⵠⲆᐃ;
        ΔⲆ[1217] = ΔⲆ[1215];
        ΔⲆ[1216] = ΔⲆ[1215];
        ΔⲆ[518] = Kd(1, [{
            f: dm,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
        }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[519] = ΔⲆ[518];
        ΔⲆ[532] = Kd(1, [{
            f: fm,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 5,
            c: ["#141414", "#c4a23a", "#816511"]
        }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[533] = ΔⲆ[532];
        ΔⲆ[521] = Kd(1, [{
            f: um,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#141414", "#178a99", "#0a6372", "#03282e"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
        ΔⲆ[523] = Kd(1, [{
            f: um,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#120202", "#991616", "#750a0a", "#120202"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
        ΔⲆ[529] = Kd(1, [{
            f: pm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#347f93", "#54a4ba"]
        }, {
            f: zm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
        }, {
            f: rm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#a9e4ed", "#86d4e0"]
        }, {
            f: bm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[530] = ΔⲆ[529];
        ΔⲆ[553] = Kd(1, [{
            f: Am,
            x: 45,
            y: 70,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[555] = ΔⲆ[553];
        ΔⲆ[541] = Kd(1, [{
            f: Pm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[542] = ΔⲆ[541];
        ΔⲆ[779] = Kd(1, [{
            f: Jm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[780] = ΔⲆ[779];
        ΔⲆ[767] = Kd(1, [{
            f: Km,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#2a2938", "#242330", "#313041"]
        }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[768] = ΔⲆ[767];
        ΔⲆ[776] = Kd(1, [{
            f: Im,
            x: 0,
            y: 3,
            a: 1,
            r: 0,
            c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
        }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[777] = ΔⲆ[776];
        ΔⲆ[771] = Kd(1, [{
            f: Im,
            x: 0,
            y: 3,
            a: 1,
            r: 0,
            c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
        }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[772] = ΔⲆ[771];
        ΔⲆ[756] = Kd(1, [{
            f: Lm,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[758] = ΔⲆ[756];
        ΔⲆ[760] = Kd(1, [{
            f: Lm,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[762] = ΔⲆ[760];
        ΔⲆ[764] = Kd(1, [{
            f: Lm,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[770] = ΔⲆ[764];
        ΔⲆ[910] = Kd(1, [{
            f: Tc,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[912] = ΔⲆ[910];
        ΔⲆ[911] = ΔⲆ[910];
        ΔⲆ[732] = Kd(1, [{
            f: Ec,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
        }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[734] = ΔⲆ[732];
        ΔⲆ[563] = Kd(1, [{
            f: lm,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
        }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[564] = ΔⲆ[563];
        ΔⲆ[751] = Kd(1, [{
            f: $m,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[252] = Kd(1, [{
            f: sm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[753] = Kd(1, [{
            f: $m,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[253] = Kd(1, [{
            f: sm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[176] = Kd(1, [{
            f: gm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[177] = Kd(1, [{
            f: gm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[175] = Kd(1, [{
            f: gm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[616] = Kd(1, [{
            f: Hm,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[618] = ΔⲆ[616];
        ΔⲆ[699] = Kd(1, [{
            f: Hm,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[700] = ΔⲆ[699];
        ΔⲆ[702] = Kd(1, [{
            f: Hm,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[704] = ΔⲆ[702];
        ΔⲆ[705] = Kd(1, [{
            f: Hm,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[706] = ΔⲆ[705];
        ΔⲆ[420] = Kd(1, [{
            f: Zc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[421] = ΔⲆ[420];
        ΔⲆ[826] = Kd(1, [{
            f: Tm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#252525", "#73583e", "#493425", "#7d6144"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[827] = ΔⲆ[826];
        ΔⲆ[429] = Kd(1, [{
            f: km,
            x: 0,
            y: -2,
            a: 1,
            r: 0,
            c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[430] = ΔⲆ[429];
        ΔⲆ[432] = Kd(1, [{
            f: hm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#dbce71", "#b29c32", "#c4bc51"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[433] = ΔⲆ[432];
        ΔⲆ[435] = Kd(1, [{
            f: om,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[436] = ΔⲆ[435];
        ΔⲆ[438] = Kd(1, [{
            f: mm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[439] = ΔⲆ[438];
        ΔⲆ[441] = Kd(1, [{
            f: Cm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#221e1b", "#ffffff", "#f6f0e7"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[442] = ΔⲆ[441];
        ΔⲆ[418] = Kd(1, [{
            f: Sc,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#c27add", "#cd98e5"]
        }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[609] = Kd(1, [{
            f: sp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#D7C393", "#a48c6c"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[142] = Kd(1, [{
            f: np,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#93CBCE", "#E9F6F6"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[140] = Kd(1, [{
            f: sp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#866432", "#6b4f25"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[180] = Kd(1, [{
            f: Zm,
            x: 3,
            y: 2,
            a: 1,
            r: 0,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[181] = Kd(1, [{
            f: ip,
            x: 3,
            y: 2,
            a: 1,
            r: 0,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[784] = ΔⲆ[180];
        ΔⲆ[785] = ΔⲆ[181];
        ΔⲆ[789] = Kd(1, [{
            f: Gm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
        }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[791] = ΔⲆ[789];
        ΔⲆ[613] = Kd(1, [{
            f: Mm,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
        }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[612] = Kd(1, [{
            f: cp,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
        }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[715] = ΔⲆ[613];
        ΔⲆ[611] = ΔⲆ[612];
        ΔⲆ[634] = Kd(1, [{
            f: ju,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[635] = ΔⲆ[634];
        ΔⲆ[200] = Kd(1, [{
            f: mu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[866] = Kd(1, [{
            f: lu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[143] = Kd(1, [{
            f: _m,
            x: 0,
            y: -2,
            a: 1,
            r: 0,
            c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
        }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[690] = ΔⲆ[143];
        ΔⲆ[662] = Kd(1, [{
            f: oc,
            x: -3,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
        }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[664] = Kd(1, [{
            f: xu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1d051e", "#42261A", "#281818"]
        }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[666] = ΔⲆ[664];
        ΔⲆ[649] = Kd(1, [{
            f: ac,
            x: -3,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
        }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[650] = ΔⲆ[649];
        ΔⲆ[674] = Kd(1, [{
            f: Sd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
        }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[646] = Kd(1, [{
            f: gc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ΔⲆ[647] = ΔⲆ[646];
        ΔⲆ[685] = Kd(1, [{
            f: Um,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[684] = ΔⲆ[685];
        ΔⲆ[870] = Kd(1, [{
            f: ld,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#e2d63b", "#ee71a9", "#42b672"]
        }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[871] = ΔⲆ[870];
        ΔⲆ[605] = Kd(1, [{
            f: Ym,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
        }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[604] = ΔⲆ[605];
        ΔⲆ[842] = Kd(1, [{
            f: dd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[843] = ΔⲆ[842];
        ΔⲆ[652] = Kd(1, [{
            f: lp,
            x: -1,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
        ΔⲆ[654] = ΔⲆ[652];
        ΔⲆ[626] = Kd(1, [{
            f: lp,
            x: -1,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
        }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[627] = ΔⲆ[626];
        ΔⲆ[629] = Kd(1, [{
            f: Xm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[196] = Kd(1, [{
            f: Mt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[898] = ΔⲆ[196];
        ΔⲆ[659] = Kd(1, [{
            f: Cu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
        }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[660] = ΔⲆ[659];
        ΔⲆ[145] = Kd(1, [{
            f: Dd,
            x: -2,
            y: -8,
            a: 1,
            r: 0,
            c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
        }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ΔⲆ[730] = ΔⲆ[145];
        ΔⲆ[566] = [];
        ΔⲆ[566][0] = jb.ⲆΔᐃᐃⵠΔⲆ;
        ΔⲆ[566][1] = jb.ᐃⲆᐃⵠᐃⲆⲆ;
        ΔⲆ[566][2] = jb.ΔᐃᐃΔᐃᐃⲆ;
        ΔⲆ[567] = ΔⲆ[566];
        ΔⲆ[568] = ΔⲆ[566];
        ΔⲆ[877] = [];
        ΔⲆ[877][0] = jb.ᐃᐃᐃΔᐃⲆⵠ;
        ΔⲆ[877][1] = jb.ⵠⲆΔⲆⵠⵠᐃ;
        ΔⲆ[877][2] = jb.ΔⲆⲆⵠΔⲆΔ;
        ΔⲆ[879] = ΔⲆ[877];
        ΔⲆ[878] = ΔⲆ[877];
        ΔⲆ[933] = ΔⲆ[932];
        ΔⲆ[934] = ΔⲆ[932];
        ΔⲆ[932] = [];
        ΔⲆ[932][0] = jb.ᐃⲆᐃⵠΔⲆⵠ;
        ΔⲆ[932][1] = jb.ΔΔⵠⲆⵠⲆⵠ;
        ΔⲆ[932][2] = jb.ⲆⵠᐃⲆᐃᐃΔ;
        ΔⲆ[933] = ΔⲆ[932];
        ΔⲆ[934] = ΔⲆ[932];
        ΔⲆ[943] = [];
        ΔⲆ[943][0] = jb.ⵠΔⲆΔⲆⵠΔ;
        ΔⲆ[943][1] = jb.ⲆⵠΔΔΔΔⲆ;
        ΔⲆ[943][2] = jb.ⵠᐃΔᐃᐃⲆΔ;
        ΔⲆ[944] = ΔⲆ[943];
        ΔⲆ[945] = ΔⲆ[943];
        ΔⲆ[921] = [];
        ΔⲆ[921][0] = jb.ⲆⵠΔⵠⵠᐃⲆ;
        ΔⲆ[921][1] = jb.ΔⲆⲆΔⵠⵠΔ;
        ΔⲆ[921][2] = jb.ΔᐃᐃΔⲆⵠⵠ;
        ΔⲆ[922] = ΔⲆ[921];
        ΔⲆ[923] = ΔⲆ[921];
        ΔⲆ[925] = [];
        ΔⲆ[925][0] = jb.ⵠᐃΔΔᐃⵠⵠ;
        ΔⲆ[925][1] = jb.ⲆᐃⵠⲆᐃⲆⵠ;
        ΔⲆ[925][2] = jb.ⵠᐃΔⵠᐃᐃΔ;
        ΔⲆ[926] = ΔⲆ[925];
        ΔⲆ[927] = ΔⲆ[925];
        ΔⲆ[929] = [];
        ΔⲆ[929][0] = jb.ᐃⵠᐃΔⲆⵠⵠ;
        ΔⲆ[929][1] = jb.ᐃⵠΔⲆⲆⵠⵠ;
        ΔⲆ[929][2] = jb.ᐃⵠΔΔᐃⵠⵠ;
        ΔⲆ[930] = ΔⲆ[929];
        ΔⲆ[931] = ΔⲆ[929];
        ΔⲆ[946] = [];
        ΔⲆ[946][0] = jb.ᐃⵠᐃⵠⵠⲆᐃ;
        ΔⲆ[946][1] = jb.ⵠᐃΔⲆΔⲆⲆ;
        ΔⲆ[946][2] = jb.ᐃⲆⲆᐃᐃᐃΔ;
        ΔⲆ[947] = ΔⲆ[946];
        ΔⲆ[948] = ΔⲆ[946];
        ΔⲆ[735] = [];
        ΔⲆ[735][0] = jb.ⵠⵠΔΔⵠᐃⵠ;
        ΔⲆ[735][1] = jb.ᐃⲆⵠΔᐃⵠⵠ;
        ΔⲆ[735][2] = jb.ⲆⲆⲆᐃⵠᐃⵠ;
        ΔⲆ[737] = ΔⲆ[735];
        ΔⲆ[736] = ΔⲆ[735];
        ΔⲆ[1164] = [];
        ΔⲆ[1164][0] = jb.ⵠⵠΔΔᐃⵠΔ;
        ΔⲆ[1164][1] = jb.ⲆⲆΔᐃΔⵠΔ;
        ΔⲆ[1164][2] = jb.ⲆⵠᐃΔᐃⵠᐃ;
        ΔⲆ[_r.ᐃⵠᐃⵠⲆΔΔⵠⲆ] = ΔⲆ[1164];
        ΔⲆ[1165] = ΔⲆ[1164];
        ΔⲆ[738] = [];
        ΔⲆ[738][0] = jb.ΔⲆⲆᐃΔⲆⵠ;
        ΔⲆ[738][1] = jb.ΔⵠΔᐃⵠⵠᐃ;
        ΔⲆ[738][2] = jb.ⲆᐃⲆᐃⲆᐃⲆ;
        ΔⲆ[740] = ΔⲆ[738];
        ΔⲆ[739] = ΔⲆ[738];
        ΔⲆ[741] = [];
        ΔⲆ[741][0] = jb.ΔΔⵠⵠΔⲆᐃ;
        ΔⲆ[741][1] = jb.ΔᐃⵠⲆᐃᐃⵠ;
        ΔⲆ[741][2] = jb.ΔⲆⲆⵠᐃⵠᐃ;
        ΔⲆ[743] = ΔⲆ[741];
        ΔⲆ[742] = ΔⲆ[741];
        ΔⲆ[938] = [];
        ΔⲆ[938][0] = jb.ΔⵠⲆⲆⵠᐃΔ;
        ΔⲆ[938][1] = jb.ᐃⲆΔΔⲆⲆⵠ;
        ΔⲆ[938][2] = jb.ᐃΔᐃΔⵠⵠᐃ;
        ΔⲆ[939] = ΔⲆ[938];
        ΔⲆ[936] = [];
        ΔⲆ[936][0] = jb.ᐃⵠΔⵠΔⵠᐃ;
        ΔⲆ[936][1] = jb.ⲆᐃΔΔᐃΔⲆ;
        ΔⲆ[936][2] = jb.ΔΔΔΔⵠᐃⲆ;
        ΔⲆ[937] = ΔⲆ[936];
        ΔⲆ[617] = ΔⲆ[616];
        ΔⲆ[701] = ΔⲆ[699];
        ΔⲆ[703] = ΔⲆ[702];
        ΔⲆ[707] = ΔⲆ[705];
        ΔⲆ[348] = ΔⲆ[311];
        ΔⲆ[633] = ΔⲆ[631];
        ΔⲆ[645] = ΔⲆ[644];
        ΔⲆ[640] = ΔⲆ[639];
        ΔⲆ[273] = ΔⲆ[309];
        ΔⲆ[590] = ΔⲆ[252];
        ΔⲆ[752] = ΔⲆ[751];
        ΔⲆ[591] = ΔⲆ[253];
        ΔⲆ[754] = ΔⲆ[753];
        ΔⲆ[276] = ΔⲆ[328];
        ΔⲆ[863] = ΔⲆ[865];
        ΔⲆ[862] = ΔⲆ[860];
        ΔⲆ[831] = ΔⲆ[829];
        ΔⲆ[340] = ΔⲆ[261];
        ΔⲆ[596] = ΔⲆ[594];
        ΔⲆ[345] = ΔⲆ[292];
        ΔⲆ[346] = ΔⲆ[293];
        ΔⲆ[457] = ΔⲆ[455];
        ΔⲆ[274] = ΔⲆ[313];
        ΔⲆ[341] = ΔⲆ[312];
        ΔⲆ[272] = ΔⲆ[258];
        ΔⲆ[344] = ΔⲆ[296];
        ΔⲆ[459] = ΔⲆ[458];
        ΔⲆ[342] = ΔⲆ[315];
        ΔⲆ[270] = ΔⲆ[297];
        ΔⲆ[271] = ΔⲆ[298];
        ΔⲆ[343] = ΔⲆ[316];
        ΔⲆ[269] = ΔⲆ[277];
        ΔⲆ[358] = ΔⲆ[310];
        ΔⲆ[354] = ΔⲆ[329];
        ΔⲆ[356] = ΔⲆ[331];
        ΔⲆ[355] = ΔⲆ[330];
        ΔⲆ[494] = ΔⲆ[492];
        ΔⲆ[349] = ΔⲆ[317];
        ΔⲆ[350] = ΔⲆ[319];
        ΔⲆ[275] = ΔⲆ[300];
        ΔⲆ[351] = ΔⲆ[323];
        ΔⲆ[353] = ΔⲆ[305];
        ΔⲆ[514] = ΔⲆ[513];
        ΔⲆ[352] = ΔⲆ[303];
        ΔⲆ[520] = ΔⲆ[518];
        ΔⲆ[534] = ΔⲆ[532];
        ΔⲆ[531] = ΔⲆ[529];
        ΔⲆ[522] = ΔⲆ[521];
        ΔⲆ[524] = ΔⲆ[523];
        ΔⲆ[565] = ΔⲆ[563];
        ΔⲆ[554] = ΔⲆ[553];
        ΔⲆ[357] = ΔⲆ[335];
        ΔⲆ[359] = ΔⲆ[337];
        ΔⲆ[339] = sq(function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 118;
            d.height = a * 129;
            e.save();
            e.translate(a * 90, a * 90);
            Zb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
            e.restore();
            Xb(e, c[0], c[1], 4);
            e.save();
            Zb(e, a * 30, a * 115, a * 60, a * 5, a * 15);
            e.restore();
            Xb(e, c[2], c[3], 4);
            e.save();
            Zb(e, a * 50, a * 117, a * 20, a * 10, a * 15);
            e.restore();
            Xb(e, c[2]);
            return d;
        }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
        ΔⲆ[366] = Kd(0.5, [{
            f: mc,
            x: 0,
            y: 2,
            a: 1,
            r: 0,
            c: ["#ffffff"]
        }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
        ΔⲆ[382] = ΔⲆ[361];
        ΔⲆ[383] = ΔⲆ[362];
        ΔⲆ[384] = ΔⲆ[364];
        ΔⲆ[497] = ΔⲆ[495];
        ΔⲆ[385] = ΔⲆ[392];
        ΔⲆ[774] = ΔⲆ[178];
        ΔⲆ[775] = ΔⲆ[179];
        ΔⲆ[386] = ΔⲆ[368];
        ΔⲆ[625] = ΔⲆ[624];
        ΔⲆ[394] = ΔⲆ[393];
        ΔⲆ[1163] = ΔⲆ[1162];
        ΔⲆ[506] = ΔⲆ[505];
        ΔⲆ[387] = ΔⲆ[369];
        ΔⲆ[504] = ΔⲆ[502];
        ΔⲆ[388] = ΔⲆ[372];
        ΔⲆ[389] = ΔⲆ[375];
        ΔⲆ[390] = ΔⲆ[378];
        ΔⲆ[501] = ΔⲆ[499];
        ΔⲆ[391] = ΔⲆ[381];
        ΔⲆ[403] = ΔⲆ[401];
        ΔⲆ[397] = ΔⲆ[395];
        ΔⲆ[400] = ΔⲆ[398];
        ΔⲆ[406] = ΔⲆ[404];
        ΔⲆ[474] = ΔⲆ[472];
        ΔⲆ[875] = ΔⲆ[874];
        ΔⲆ[552] = ΔⲆ[550];
        ΔⲆ[710] = ΔⲆ[709];
        ΔⲆ[479] = ΔⲆ[477];
        ΔⲆ[482] = ΔⲆ[480];
        ΔⲆ[485] = ΔⲆ[483];
        ΔⲆ[488] = ΔⲆ[486];
        ΔⲆ[410] = ΔⲆ[408];
        ΔⲆ[719] = ΔⲆ[717];
        ΔⲆ[422] = ΔⲆ[420];
        ΔⲆ[431] = ΔⲆ[429];
        ΔⲆ[434] = ΔⲆ[432];
        ΔⲆ[437] = ΔⲆ[435];
        ΔⲆ[543] = ΔⲆ[541];
        ΔⲆ[733] = ΔⲆ[732];
        ΔⲆ[440] = ΔⲆ[438];
        ΔⲆ[443] = ΔⲆ[441];
        ΔⲆ[446] = ΔⲆ[418];
        ΔⲆ[606] = ΔⲆ[605];
        ΔⲆ[844] = ΔⲆ[842];
        ΔⲆ[683] = ΔⲆ[685];
        ΔⲆ[610] = ΔⲆ[609];
        ΔⲆ[689] = ΔⲆ[143];
        ΔⲆ[686] = ΔⲆ[142];
        ΔⲆ[682] = ΔⲆ[140];
        ΔⲆ[615] = ΔⲆ[613];
        ΔⲆ[614] = ΔⲆ[612];
        ΔⲆ[628] = ΔⲆ[626];
        ΔⲆ[630] = ΔⲆ[629];
        ΔⲆ[636] = ΔⲆ[634];
        ΔⲆ[868] = ΔⲆ[200];
        ΔⲆ[867] = ΔⲆ[866];
        ΔⲆ[648] = ΔⲆ[646];
        ΔⲆ[651] = ΔⲆ[649];
        ΔⲆ[653] = ΔⲆ[652];
        ΔⲆ[661] = ΔⲆ[659];
        ΔⲆ[898] = ΔⲆ[196];
        ΔⲆ[663] = ΔⲆ[662];
        ΔⲆ[665] = ΔⲆ[664];
        ΔⲆ[675] = ΔⲆ[674];
        ΔⲆ[731] = ΔⲆ[145];
        ΔⲆ[757] = ΔⲆ[756];
        ΔⲆ[759] = ΔⲆ[176];
        ΔⲆ[761] = ΔⲆ[760];
        ΔⲆ[763] = ΔⲆ[177];
        ΔⲆ[765] = ΔⲆ[764];
        ΔⲆ[766] = ΔⲆ[175];
        ΔⲆ[769] = ΔⲆ[767];
        ΔⲆ[773] = ΔⲆ[771];
        ΔⲆ[778] = ΔⲆ[776];
        ΔⲆ[781] = ΔⲆ[779];
        ΔⲆ[787] = ΔⲆ[181];
        ΔⲆ[786] = ΔⲆ[180];
        ΔⲆ[790] = ΔⲆ[789];
        ΔⲆ[801] = ΔⲆ[800];
        ΔⲆ[810] = ΔⲆ[808];
        ΔⲆ[836] = ΔⲆ[834];
        ΔⲆ[847] = ΔⲆ[845];
        ΔⲆ[828] = ΔⲆ[826];
    }
    function Im(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 198;
        f.height = b * 147;
        g.globalAlpha = c ? 0.5 : 1;
        g.translate(0, b * 6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 76);
        g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
        g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
        g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
        g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
        g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
        g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
        g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
        g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
        g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
        g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
        g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
        g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
        g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
        g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
        g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
        g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
        g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
        g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
        g.closePath();
        Xb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 36, b * 80);
        g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
        g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
        g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
        g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
        g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
        g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
        g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
        g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
        g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
        g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
        g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
        g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
        g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
        g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
        g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
        g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
        g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
        g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
        g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
        g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
        g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
        g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
        g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
        g.closePath();
        Xb(g, d[0]);
        g.globalAlpha = 1;
        g.translate(0, b * -6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 36, b * 80);
        g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
        g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
        g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
        g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
        g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
        g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
        g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
        g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
        g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
        g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
        g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
        g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
        g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
        g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
        g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
        g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
        g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
        g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
        g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
        g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
        g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
        g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
        g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
        g.closePath();
        Xb(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 49, b * 98);
        g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
        g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
        g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
        g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
        g.closePath();
        Xb(g, d[1]);
        g.globalAlpha = 0.5;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 54, b * 98);
        g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
        g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
        g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
        g.closePath();
        Xb(g, d[0]);
        g.globalAlpha = 1;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 118, b * 47);
        g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
        g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
        g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
        g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
        g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
        g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
        g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
        g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
        g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
        g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
        g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
        g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
        g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
        g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
        g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
        g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
        g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
        g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
        g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
        g.closePath();
        Xb(g, d[1], d[2], b * 6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 62, b * 21);
        g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
        g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
        g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
        g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
        g.closePath();
        Xb(g, d[4]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 60, b * 29);
        g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
        Xb(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 61, b * 37);
        g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
        Xb(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 52, b * 31);
        g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
        Xb(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 46, b * 35);
        g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
        Xb(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 58, b * 44);
        g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
        Xb(g, Vs, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 48);
        g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
        Xb(g, fk, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 46, b * 41);
        g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
        Xb(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 48, b * 48);
        g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
        Xb(g, Go, d[3], b * 4);
        if (e == 0) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 99, b * 101);
            g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
            g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
            Xb(g, Pg, d[5], b * 6);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
            g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
            g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
            Xb(g, undefined, d[5], b * 6);
        } else {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 103, b * 100.39999389648438);
            g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
            Xb(g, undefined, d[5], b * 6);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 103, b * 100.39999389648438);
            g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
            Xb(g, undefined, d[5], b * 6);
            id(g, b * 86, b * 114.39999389648438, b * 4.5);
            Xb(g, d[1], d[5], b * 6);
            id(g, b * 121, b * 114.39999389648438, b * 4.5);
            Xb(g, d[1], d[5], b * 6);
        }
        return f;
    }
    function Em() {
        new Date().getTime();
        function b(a) {
            var b = 0;
            var c = 0;
            for (var d = 0; a.length > d; d++) {
                var e = a.charAt(d);
                if (e !== "_" && d !== 5) {
                    if (e === "1") {
                        b += Math.pow(2, c);
                    }
                    c++;
                }
            }
            return b;
        }
        ᐃΔΔΔᐃΔᐃᐃΔ();
        ΔⲆ[1026] = [jb.ΔΔΔⵠⵠⵠⲆ, jb.ΔⵠⲆᐃⵠΔΔ];
        ΔⲆ[1025] = [];
        ΔⲆ[1025][_r.ΔΔⵠ] = [];
        ΔⲆ[1025][_r.ΔΔⵠ][b("000_010_000")] = [jb.ⵠⲆᐃᐃΔ, jb.ᐃᐃΔⲆΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("000_010_010")] = ΔⲆ[1025][_r.ΔΔⵠ][b("000_010_000")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("000_011_000")] = ΔⲆ[1025][_r.ΔΔⵠ][b("000_010_000")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("000_011_010")] = [jb.ᐃⵠΔⵠⵠ, jb.ᐃΔΔΔⵠ, jb.ᐃᐃΔⲆΔ, jb.ⵠⲆᐃᐃΔ, jb.ᐃΔⵠⵠΔⵠⵠ, jb.ⲆⲆΔᐃⲆⲆⵠ, jb.ᐃⵠᐃⲆΔⵠⵠ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("000_011_011")] = [jb.ΔᐃΔⵠΔⵠΔ, jb.ᐃⵠΔⵠⵠ, jb.ᐃΔΔΔⵠ, jb.ᐃᐃΔⲆΔ, jb.ⵠⲆᐃᐃΔ, jb.ᐃΔⵠⵠΔⵠⵠ, jb.ⲆⲆΔᐃⲆⲆⵠ, jb.ᐃⵠᐃⲆΔⵠⵠ, jb.ⲆⲆΔⵠⲆ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("000_110_000")] = [jb.ⲆⲆⲆΔᐃ, jb.ᐃᐃΔⲆΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("000_110_010")] = [jb.ⵠⲆⲆᐃΔ, jb.ⲆⲆⲆΔᐃ, jb.ᐃⵠΔΔΔ, jb.ᐃᐃΔⲆΔ, jb.ⵠⲆᐃᐃΔ, jb.ⲆⲆΔⵠⲆ, jb.ⲆᐃΔΔᐃ, jb.ΔⲆΔΔᐃΔᐃ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("000_110_110")] = [jb.ⵠⲆⲆᐃΔ, jb.ⲆᐃⵠⲆΔⵠΔⲆᐃ, jb.ᐃᐃⵠΔᐃᐃᐃ, jb.ⲆⲆⲆΔᐃ, jb.ᐃⵠΔΔΔ, jb.ᐃᐃΔⲆΔ, jb.ⲆⲆΔⵠⲆ, jb.ⲆᐃΔΔᐃ, jb.ΔⲆΔΔᐃΔᐃ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("000_111_000")] = [jb.ⲆⲆⲆΔᐃ, jb.ᐃⵠΔΔΔ, jb.ΔᐃⵠⵠΔΔᐃ, jb.ᐃⵠⵠⵠΔⵠⲆ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("000_111_111")] = [jb.ⲆⲆⲆΔᐃ, jb.ᐃᐃⵠΔᐃᐃᐃ, jb.ⵠⲆⲆᐃΔ, jb.ᐃΔΔΔⵠ, jb.ᐃⵠΔⵠⵠ, jb.ΔᐃΔⵠΔⵠΔ, jb.ⵠΔΔᐃΔⵠΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("010_010_000")] = [jb.ᐃᐃΔⲆΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("010_010_010")] = [jb.ᐃΔⵠΔΔΔᐃ, jb.ᐃᐃΔⲆΔ, jb.ⵠⲆᐃᐃΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("010_011_000")] = [jb.ⵠΔⵠᐃⵠ, jb.ᐃᐃΔⲆΔ, jb.ⵠⲆᐃᐃΔ, jb.ⲆᐃΔΔᐃ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("010_110_000")] = [jb.ⲆⲆⲆΔᐃ, jb.ᐃⵠΔΔΔ, jb.ᐃᐃΔⲆΔ, jb.ⲆᐃΔΔᐃ, jb.ᐃΔⵠᐃΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("010_110_110")] = [jb.ⲆⲆᐃΔⵠ, jb.ⵠΔⵠᐃⵠ, jb.ᐃⵠΔⵠⵠ, jb.ᐃΔΔΔⵠ, jb.ⵠⲆⲆᐃΔ, jb.ᐃᐃⵠΔᐃᐃᐃ, jb.ⲆⲆⲆΔᐃ, jb.ⵠΔΔᐃΔⵠΔ, jb.ᐃⵠᐃΔⵠΔΔ, jb.ᐃΔⵠΔΔΔᐃ, jb.ᐃⵠΔΔΔ, jb.ΔᐃⵠⵠΔΔᐃ, jb.ᐃⵠⵠⵠΔⵠⲆ, jb.ᐃᐃΔⲆΔ, jb.ⵠⲆᐃᐃΔ, jb.ᐃΔⵠⵠΔⵠⵠ, jb.ⲆⲆΔᐃⲆⲆⵠ, jb.ᐃⵠᐃⲆΔⵠⵠ, jb.ⲆⲆΔⵠⲆ, jb.ⲆᐃΔΔᐃ, jb.ᐃΔⵠᐃΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("010_011_010")] = ΔⲆ[1025][_r.ΔΔⵠ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("010_011_011")] = ΔⲆ[1025][_r.ΔΔⵠ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("000_111_011")] = ΔⲆ[1025][_r.ΔΔⵠ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("010_110_010")] = ΔⲆ[1025][_r.ΔΔⵠ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("010_111_000")] = ΔⲆ[1025][_r.ΔΔⵠ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("010_111_010")] = ΔⲆ[1025][_r.ΔΔⵠ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("010_111_011")] = ΔⲆ[1025][_r.ΔΔⵠ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("010_111_110")] = ΔⲆ[1025][_r.ΔΔⵠ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("010_111_111")] = ΔⲆ[1025][_r.ΔΔⵠ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("000_111_110")] = ΔⲆ[1025][_r.ΔΔⵠ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("000_111_010")] = ΔⲆ[1025][_r.ΔΔⵠ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("011_011_000")] = [jb.ⲆⲆΔΔΔⵠⲆ, jb.ⲆⲆᐃΔⵠ, jb.ⵠΔⵠᐃⵠ, jb.ᐃᐃΔⲆΔ, jb.ⵠⲆᐃᐃΔ, jb.ⲆᐃΔΔᐃ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("011_011_010")] = [jb.ⲆⲆΔΔΔⵠⲆ, jb.ⲆⲆᐃΔⵠ, jb.ⵠΔⵠᐃⵠ, jb.ⲆⲆⲆΔᐃ, jb.ᐃⵠΔΔΔ, jb.ΔᐃⵠⵠΔΔᐃ, jb.ᐃⵠⵠⵠΔⵠⲆ, jb.ᐃᐃΔⲆΔ, jb.ⵠⲆᐃᐃΔ, jb.ⲆᐃΔΔᐃ, jb.ᐃΔⵠᐃΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("011_011_011")] = [jb.ᐃΔΔΔⵠ, jb.ᐃⵠΔⵠⵠ, jb.ΔᐃΔⵠΔⵠΔ, jb.ⵠΔⵠᐃⵠ, jb.ⲆⲆᐃΔⵠ, jb.ⲆⲆΔΔΔⵠⲆ, jb.ᐃⵠᐃΔⵠΔΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("011_111_000")] = ΔⲆ[1025][_r.ΔΔⵠ][b("011_011_010")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("011_111_010")] = [jb.ⲆⲆΔΔΔⵠⲆ, jb.ⲆⲆᐃΔⵠ, jb.ⵠΔⵠᐃⵠ, jb.ᐃⵠΔⵠⵠ, jb.ᐃΔΔΔⵠ, jb.ⵠⲆⲆᐃΔ, jb.ⲆⲆⲆΔᐃ, jb.ⵠΔΔᐃΔⵠΔ, jb.ᐃⵠᐃΔⵠΔΔ, jb.ᐃΔⵠΔΔΔᐃ, jb.ᐃⵠΔΔΔ, jb.ΔᐃⵠⵠΔΔᐃ, jb.ᐃⵠⵠⵠΔⵠⲆ, jb.ᐃᐃΔⲆΔ, jb.ⵠⲆᐃᐃΔ, jb.ᐃΔⵠⵠΔⵠⵠ, jb.ⲆⲆΔᐃⲆⲆⵠ, jb.ᐃⵠᐃⲆΔⵠⵠ, jb.ⲆⲆΔⵠⲆ, jb.ⲆᐃΔΔᐃ, jb.ᐃΔⵠᐃΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("011_111_011")] = ΔⲆ[1025][_r.ΔΔⵠ][b("011_111_010")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("011_111_110")] = ΔⲆ[1025][_r.ΔΔⵠ][b("011_111_010")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("011_111_111")] = [jb.ⲆⲆΔΔΔⵠⲆ, jb.ⲆⲆᐃΔⵠ, jb.ⵠΔⵠᐃⵠ, jb.ΔᐃΔⵠΔⵠΔ, jb.ᐃⵠΔⵠⵠ, jb.ᐃΔΔΔⵠ, jb.ⵠⲆⲆᐃΔ, jb.ᐃᐃⵠΔᐃᐃᐃ, jb.ⲆⲆⲆΔᐃ, jb.ⵠΔΔᐃΔⵠΔ, jb.ᐃⵠᐃΔⵠΔΔ, jb.ᐃΔⵠΔΔΔᐃ, jb.ᐃⵠΔΔΔ, jb.ΔᐃⵠⵠΔΔᐃ, jb.ᐃⵠⵠⵠΔⵠⲆ, jb.ᐃᐃΔⲆΔ, jb.ⵠⲆᐃᐃΔ, jb.ᐃΔⵠⵠΔⵠⵠ, jb.ⲆⲆΔᐃⲆⲆⵠ, jb.ᐃⵠᐃⲆΔⵠⵠ, jb.ⲆⲆΔⵠⲆ, jb.ⲆᐃΔΔᐃ, jb.ᐃΔⵠᐃΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("110_110_000")] = [jb.ᐃⵠᐃⲆᐃᐃⲆ, jb.ⲆⲆⲆΔᐃ, jb.ⲆⵠΔⲆⲆⲆΔ, jb.ᐃⵠΔΔΔ, jb.ᐃᐃΔⲆΔ, jb.ᐃΔⵠᐃΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("110_110_010")] = [jb.ⵠⲆⲆᐃΔ, jb.ᐃⵠᐃⲆᐃᐃⲆ, jb.ⲆⲆⲆΔᐃ, jb.ᐃΔⵠΔΔΔᐃ, jb.ᐃⵠΔΔΔ, jb.ᐃᐃΔⲆΔ, jb.ⲆⲆΔⵠⲆ, jb.ᐃΔⵠᐃΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("110_110_110")] = [jb.ⵠⲆⲆᐃΔ, jb.ᐃᐃⵠΔᐃᐃᐃ, jb.ᐃⵠᐃⲆᐃᐃⲆ, jb.ⲆⲆⲆΔᐃ, jb.ᐃΔⵠΔΔΔᐃ, jb.ᐃⵠΔΔΔ, jb.ᐃᐃΔⲆΔ, jb.ⲆⲆΔⵠⲆ, jb.ᐃΔⵠᐃΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("110_111_000")] = [jb.ⲆⲆᐃΔⵠ, jb.ⵠΔⵠᐃⵠ, jb.ᐃⵠᐃⲆᐃᐃⲆ, jb.ⲆⲆⲆΔᐃ, jb.ⲆⵠΔⲆⲆⲆΔ, jb.ⵠⲆⵠΔᐃᐃΔ, jb.ᐃⵠΔΔΔ, jb.ΔᐃⵠⵠΔΔᐃ, jb.ᐃⵠⵠⵠΔⵠⲆ, jb.ᐃᐃΔⲆΔ, jb.ⵠⲆᐃᐃΔ, jb.ⲆᐃΔΔᐃ, jb.ᐃΔⵠᐃΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("110_111_110")] = [jb.ⲆⲆᐃΔⵠ, jb.ⵠΔⵠᐃⵠ, jb.ᐃⵠΔⵠⵠ, jb.ᐃΔΔΔⵠ, jb.ⵠⲆⲆᐃΔ, jb.ᐃᐃⵠΔᐃᐃᐃ, jb.ᐃⵠᐃⲆᐃᐃⲆ, jb.ⲆⲆⲆΔᐃ, jb.ⵠΔΔᐃΔⵠΔ, jb.ⵠⲆⵠΔᐃᐃΔ, jb.ᐃⵠᐃΔⵠΔΔ, jb.ᐃΔⵠΔΔΔᐃ, jb.ᐃⵠΔΔΔ, jb.ΔᐃⵠⵠΔΔᐃ, jb.ᐃⵠⵠⵠΔⵠⲆ, jb.ᐃᐃΔⲆΔ, jb.ⵠⲆᐃᐃΔ, jb.ᐃΔⵠⵠΔⵠⵠ, jb.ⲆⲆΔᐃⲆⲆⵠ, jb.ᐃⵠᐃⲆΔⵠⵠ, jb.ⲆⲆΔⵠⲆ, jb.ⲆᐃΔΔᐃ, jb.ᐃΔⵠᐃΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("110_111_111")] = ΔⲆ[1025][_r.ΔΔⵠ][b("110_111_110")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("110_111_011")] = ΔⲆ[1025][_r.ΔΔⵠ][b("110_111_110")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("110_111_010")] = ΔⲆ[1025][_r.ΔΔⵠ][b("110_111_110")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("111_111_110")] = [jb.ᐃΔⵠᐃΔ, jb.ⲆᐃΔΔᐃ, jb.ⲆⲆΔⵠⲆ, jb.ᐃⵠᐃⲆΔⵠⵠ, jb.ⲆⲆΔᐃⲆⲆⵠ, jb.ᐃΔⵠⵠΔⵠⵠ, jb.ⵠⲆᐃᐃΔ, jb.ᐃᐃΔⲆΔ, jb.ᐃⵠⵠⵠΔⵠⲆ, jb.ΔᐃⵠⵠΔΔᐃ, jb.ᐃⵠΔΔΔ, jb.ᐃΔⵠΔΔΔᐃ, jb.ᐃⵠᐃΔⵠΔΔ, jb.ⵠⲆⵠΔᐃᐃΔ, jb.ⵠΔΔᐃΔⵠΔ, jb.ⲆⲆⲆΔᐃ, jb.ᐃⵠᐃⲆᐃᐃⲆ, jb.ⵠⲆⲆᐃΔ, jb.ᐃΔΔΔⵠ, jb.ᐃⵠΔⵠⵠ, jb.ⵠΔⵠᐃⵠ, jb.ⲆⲆᐃΔⵠ, jb.ⲆⲆΔΔΔⵠⲆ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("111_111_011")] = ΔⲆ[1025][_r.ΔΔⵠ][b("111_111_110")];
        ΔⲆ[1025][_r.ΔΔⵠ][b("111_111_000")] = [jb.ⲆⵠΔⲆⲆⲆΔ, jb.ⲆⲆⲆΔᐃ, jb.ᐃⵠᐃⲆᐃᐃⲆ, jb.ⵠΔⵠᐃⵠ, jb.ⲆⲆᐃΔⵠ, jb.ⲆⲆΔΔΔⵠⲆ, jb.ⵠⲆⵠΔᐃᐃΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("111_111_111")] = [jb.ⲆⲆΔΔΔⵠⲆ, jb.ⲆⲆᐃΔⵠ, jb.ⵠΔⵠᐃⵠ, jb.ΔᐃΔⵠΔⵠΔ, jb.ᐃⵠΔⵠⵠ, jb.ᐃΔΔΔⵠ, jb.ⵠⲆⲆᐃΔ, jb.ᐃᐃⵠΔᐃᐃᐃ, jb.ᐃⵠᐃⲆᐃᐃⲆ, jb.ⲆⲆⲆΔᐃ, jb.ⵠΔΔᐃΔⵠΔ, jb.ᐃⵠᐃΔⵠΔΔ, jb.ᐃΔⵠΔΔΔᐃ, jb.ᐃⵠΔΔΔ, jb.ΔᐃⵠⵠΔΔᐃ, jb.ᐃⵠⵠⵠΔⵠⲆ, jb.ᐃᐃΔⲆΔ, jb.ⵠⲆᐃᐃΔ, jb.ᐃΔⵠⵠΔⵠⵠ, jb.ⲆⲆΔᐃⲆⲆⵠ, jb.ᐃⵠᐃⲆΔⵠⵠ, jb.ⲆⲆΔⵠⲆ, jb.ⲆᐃΔΔᐃ, jb.ᐃΔⵠᐃΔ];
        ΔⲆ[1025][_r.ΔΔⵠ][b("111_111_010")] = ΔⲆ[1025][_r.ΔΔⵠ][b("111_111_110")];
        ΔⲆ[1025][_r.ΔⵠΔ] = [];
        ΔⲆ[1025][_r.ΔⵠΔ][b("000_010_000")] = [jb.ΔΔⲆᐃᐃ, jb.ΔⵠΔⲆⲆ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("000_010_010")] = ΔⲆ[1025][_r.ΔⵠΔ][b("000_010_000")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("000_011_000")] = ΔⲆ[1025][_r.ΔⵠΔ][b("000_010_000")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("000_011_010")] = [jb.ᐃᐃΔΔⲆ, jb.ⲆΔᐃⵠΔ, jb.ΔⵠΔⲆⲆ, jb.ΔΔⲆᐃᐃ, jb.ᐃⲆⲆΔᐃΔΔ, jb.ⲆᐃΔΔᐃⲆᐃ, jb.ΔᐃᐃⲆⲆⵠΔ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("000_011_011")] = [jb.ⲆᐃⲆⵠⵠᐃⲆ, jb.ᐃᐃΔΔⲆ, jb.ⲆΔᐃⵠΔ, jb.ΔⵠΔⲆⲆ, jb.ΔΔⲆᐃᐃ, jb.ᐃⲆⲆΔᐃΔΔ, jb.ⲆᐃΔΔᐃⲆᐃ, jb.ΔᐃᐃⲆⲆⵠΔ, jb.ⵠᐃΔⲆᐃ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("000_110_000")] = [jb.ⵠⵠᐃᐃⵠ, jb.ΔⵠΔⲆⲆ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("000_110_010")] = [jb.ᐃⲆΔΔⲆ, jb.ⵠⵠᐃᐃⵠ, jb.ᐃⲆᐃᐃⵠ, jb.ΔⵠΔⲆⲆ, jb.ΔΔⲆᐃᐃ, jb.ⵠᐃΔⲆᐃ, jb.ᐃⲆΔⲆⲆ, jb.ΔᐃⲆⲆⲆⲆⵠ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("000_110_110")] = [jb.ᐃⲆΔΔⲆ, jb.ΔᐃΔⵠⵠᐃΔⵠᐃ, jb.Ⲇⵠⵠᐃⵠⵠᐃ, jb.ⵠⵠᐃᐃⵠ, jb.ᐃⲆᐃᐃⵠ, jb.ΔⵠΔⲆⲆ, jb.ⵠᐃΔⲆᐃ, jb.ᐃⲆΔⲆⲆ, jb.ΔᐃⲆⲆⲆⲆⵠ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("000_111_000")] = [jb.ⵠⵠᐃᐃⵠ, jb.ᐃⲆᐃᐃⵠ, jb.ⲆΔΔᐃΔΔⵠ, jb.ⵠⲆᐃⲆⵠⲆᐃ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("000_111_111")] = [jb.ⵠⵠᐃᐃⵠ, jb.Ⲇⵠⵠᐃⵠⵠᐃ, jb.ᐃⲆΔΔⲆ, jb.ⲆΔᐃⵠΔ, jb.ᐃᐃΔΔⲆ, jb.ⲆᐃⲆⵠⵠᐃⲆ, jb.ᐃᐃⵠⲆᐃΔⵠ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("010_010_000")] = [jb.ΔⵠΔⲆⲆ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("010_010_010")] = [jb.ⲆⵠΔⲆᐃΔΔ, jb.ΔⵠΔⲆⲆ, jb.ΔΔⲆᐃᐃ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("010_011_000")] = [jb.ΔⲆᐃΔᐃ, jb.ΔⵠΔⲆⲆ, jb.ΔΔⲆᐃᐃ, jb.ᐃⲆΔⲆⲆ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("010_110_000")] = [jb.ⵠⵠᐃᐃⵠ, jb.ᐃⲆᐃᐃⵠ, jb.ΔⵠΔⲆⲆ, jb.ᐃⲆΔⲆⲆ, jb.ᐃΔΔⲆⵠ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("010_110_110")] = [jb.ᐃⵠⲆⵠᐃ, jb.ΔⲆᐃΔᐃ, jb.ᐃᐃΔΔⲆ, jb.ⲆΔᐃⵠΔ, jb.ᐃⲆΔΔⲆ, jb.Ⲇⵠⵠᐃⵠⵠᐃ, jb.ⵠⵠᐃᐃⵠ, jb.ᐃᐃⵠⲆᐃΔⵠ, jb.ⲆⵠⵠⲆᐃΔⵠ, jb.ⲆⵠΔⲆᐃΔΔ, jb.ᐃⲆᐃᐃⵠ, jb.ⲆΔΔᐃΔΔⵠ, jb.ⵠⲆᐃⲆⵠⲆᐃ, jb.ΔⵠΔⲆⲆ, jb.ΔΔⲆᐃᐃ, jb.ᐃⲆⲆΔᐃΔΔ, jb.ⲆᐃΔΔᐃⲆᐃ, jb.ΔᐃᐃⲆⲆⵠΔ, jb.ⵠᐃΔⲆᐃ, jb.ᐃⲆΔⲆⲆ, jb.ᐃΔΔⲆⵠ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("010_011_010")] = ΔⲆ[1025][_r.ΔⵠΔ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("010_011_011")] = ΔⲆ[1025][_r.ΔⵠΔ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("000_111_011")] = ΔⲆ[1025][_r.ΔⵠΔ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("010_110_010")] = ΔⲆ[1025][_r.ΔⵠΔ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("010_111_000")] = ΔⲆ[1025][_r.ΔⵠΔ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("010_111_010")] = ΔⲆ[1025][_r.ΔⵠΔ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("010_111_011")] = ΔⲆ[1025][_r.ΔⵠΔ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("010_111_110")] = ΔⲆ[1025][_r.ΔⵠΔ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("010_111_111")] = ΔⲆ[1025][_r.ΔⵠΔ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("000_111_110")] = ΔⲆ[1025][_r.ΔⵠΔ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("000_111_010")] = ΔⲆ[1025][_r.ΔⵠΔ][b("010_110_110")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("011_011_000")] = [jb.ⵠⲆᐃⲆΔⲆⵠ, jb.ᐃⵠⲆⵠᐃ, jb.ΔⲆᐃΔᐃ, jb.ΔⵠΔⲆⲆ, jb.ΔΔⲆᐃᐃ, jb.ᐃⲆΔⲆⲆ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("011_011_010")] = [jb.ⵠⲆᐃⲆΔⲆⵠ, jb.ᐃⵠⲆⵠᐃ, jb.ΔⲆᐃΔᐃ, jb.ⵠⵠᐃᐃⵠ, jb.ᐃⲆᐃᐃⵠ, jb.ⲆΔΔᐃΔΔⵠ, jb.ⵠⲆᐃⲆⵠⲆᐃ, jb.ΔⵠΔⲆⲆ, jb.ΔΔⲆᐃᐃ, jb.ᐃⲆΔⲆⲆ, jb.ᐃΔΔⲆⵠ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("011_011_011")] = [jb.ⲆΔᐃⵠΔ, jb.ᐃᐃΔΔⲆ, jb.ⲆᐃⲆⵠⵠᐃⲆ, jb.ΔⲆᐃΔᐃ, jb.ᐃⵠⲆⵠᐃ, jb.ⵠⲆᐃⲆΔⲆⵠ, jb.ⲆⵠⵠⲆᐃΔⵠ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("011_111_000")] = ΔⲆ[1025][_r.ΔⵠΔ][b("011_011_010")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("011_111_010")] = [jb.ⵠⲆᐃⲆΔⲆⵠ, jb.ᐃⵠⲆⵠᐃ, jb.ΔⲆᐃΔᐃ, jb.ᐃᐃΔΔⲆ, jb.ⲆΔᐃⵠΔ, jb.ᐃⲆΔΔⲆ, jb.ⵠⵠᐃᐃⵠ, jb.ᐃᐃⵠⲆᐃΔⵠ, jb.ⲆⵠⵠⲆᐃΔⵠ, jb.ⲆⵠΔⲆᐃΔΔ, jb.ᐃⲆᐃᐃⵠ, jb.ⲆΔΔᐃΔΔⵠ, jb.ⵠⲆᐃⲆⵠⲆᐃ, jb.ΔⵠΔⲆⲆ, jb.ΔΔⲆᐃᐃ, jb.ᐃⲆⲆΔᐃΔΔ, jb.ⲆᐃΔΔᐃⲆᐃ, jb.ΔᐃᐃⲆⲆⵠΔ, jb.ⵠᐃΔⲆᐃ, jb.ᐃⲆΔⲆⲆ, jb.ᐃΔΔⲆⵠ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("011_111_011")] = ΔⲆ[1025][_r.ΔⵠΔ][b("011_111_010")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("011_111_110")] = ΔⲆ[1025][_r.ΔⵠΔ][b("011_111_010")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("011_111_111")] = [jb.ⵠⲆᐃⲆΔⲆⵠ, jb.ᐃⵠⲆⵠᐃ, jb.ΔⲆᐃΔᐃ, jb.ⲆᐃⲆⵠⵠᐃⲆ, jb.ᐃᐃΔΔⲆ, jb.ⲆΔᐃⵠΔ, jb.ᐃⲆΔΔⲆ, jb.Ⲇⵠⵠᐃⵠⵠᐃ, jb.ⵠⵠᐃᐃⵠ, jb.ᐃᐃⵠⲆᐃΔⵠ, jb.ⲆⵠⵠⲆᐃΔⵠ, jb.ⲆⵠΔⲆᐃΔΔ, jb.ᐃⲆᐃᐃⵠ, jb.ⲆΔΔᐃΔΔⵠ, jb.ⵠⲆᐃⲆⵠⲆᐃ, jb.ΔⵠΔⲆⲆ, jb.ΔΔⲆᐃᐃ, jb.ᐃⲆⲆΔᐃΔΔ, jb.ⲆᐃΔΔᐃⲆᐃ, jb.ΔᐃᐃⲆⲆⵠΔ, jb.ⵠᐃΔⲆᐃ, jb.ᐃⲆΔⲆⲆ, jb.ᐃΔΔⲆⵠ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("110_110_000")] = [jb.ⲆΔΔⵠΔΔⲆ, jb.ⵠⵠᐃᐃⵠ, jb.Δᐃᐃᐃᐃᐃⵠ, jb.ᐃⲆᐃᐃⵠ, jb.ΔⵠΔⲆⲆ, jb.ᐃΔΔⲆⵠ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("110_110_010")] = [jb.ᐃⲆΔΔⲆ, jb.ⲆΔΔⵠΔΔⲆ, jb.ⵠⵠᐃᐃⵠ, jb.ⲆⵠΔⲆᐃΔΔ, jb.ᐃⲆᐃᐃⵠ, jb.ΔⵠΔⲆⲆ, jb.ⵠᐃΔⲆᐃ, jb.ᐃΔΔⲆⵠ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("110_110_110")] = [jb.ᐃⲆΔΔⲆ, jb.Ⲇⵠⵠᐃⵠⵠᐃ, jb.ⲆΔΔⵠΔΔⲆ, jb.ⵠⵠᐃᐃⵠ, jb.ⲆⵠΔⲆᐃΔΔ, jb.ᐃⲆᐃᐃⵠ, jb.ΔⵠΔⲆⲆ, jb.ⵠᐃΔⲆᐃ, jb.ᐃΔΔⲆⵠ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("110_111_000")] = [jb.ᐃⵠⲆⵠᐃ, jb.ΔⲆᐃΔᐃ, jb.ⲆΔΔⵠΔΔⲆ, jb.ⵠⵠᐃᐃⵠ, jb.Δᐃᐃᐃᐃᐃⵠ, jb.ⲆᐃᐃΔᐃⵠⵠ, jb.ᐃⲆᐃᐃⵠ, jb.ⲆΔΔᐃΔΔⵠ, jb.ⵠⲆᐃⲆⵠⲆᐃ, jb.ΔⵠΔⲆⲆ, jb.ΔΔⲆᐃᐃ, jb.ᐃⲆΔⲆⲆ, jb.ᐃΔΔⲆⵠ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("110_111_110")] = [jb.ᐃⵠⲆⵠᐃ, jb.ΔⲆᐃΔᐃ, jb.ᐃᐃΔΔⲆ, jb.ⲆΔᐃⵠΔ, jb.ᐃⲆΔΔⲆ, jb.Ⲇⵠⵠᐃⵠⵠᐃ, jb.ⲆΔΔⵠΔΔⲆ, jb.ⵠⵠᐃᐃⵠ, jb.ᐃᐃⵠⲆᐃΔⵠ, jb.ⲆᐃᐃΔᐃⵠⵠ, jb.ⲆⵠⵠⲆᐃΔⵠ, jb.ⲆⵠΔⲆᐃΔΔ, jb.ᐃⲆᐃᐃⵠ, jb.ⲆΔΔᐃΔΔⵠ, jb.ⵠⲆᐃⲆⵠⲆᐃ, jb.ΔⵠΔⲆⲆ, jb.ΔΔⲆᐃᐃ, jb.ᐃⲆⲆΔᐃΔΔ, jb.ⲆᐃΔΔᐃⲆᐃ, jb.ΔᐃᐃⲆⲆⵠΔ, jb.ⵠᐃΔⲆᐃ, jb.ᐃⲆΔⲆⲆ, jb.ᐃΔΔⲆⵠ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("110_111_111")] = ΔⲆ[1025][_r.ΔⵠΔ][b("110_111_110")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("110_111_011")] = ΔⲆ[1025][_r.ΔⵠΔ][b("110_111_110")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("110_111_010")] = ΔⲆ[1025][_r.ΔⵠΔ][b("110_111_110")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("111_111_110")] = [jb.ᐃΔΔⲆⵠ, jb.ᐃⲆΔⲆⲆ, jb.ⵠᐃΔⲆᐃ, jb.ΔᐃᐃⲆⲆⵠΔ, jb.ⲆᐃΔΔᐃⲆᐃ, jb.ᐃⲆⲆΔᐃΔΔ, jb.ΔΔⲆᐃᐃ, jb.ΔⵠΔⲆⲆ, jb.ⵠⲆᐃⲆⵠⲆᐃ, jb.ⲆΔΔᐃΔΔⵠ, jb.ᐃⲆᐃᐃⵠ, jb.ⲆⵠΔⲆᐃΔΔ, jb.ⲆⵠⵠⲆᐃΔⵠ, jb.ⲆᐃᐃΔᐃⵠⵠ, jb.ᐃᐃⵠⲆᐃΔⵠ, jb.ⵠⵠᐃᐃⵠ, jb.ⲆΔΔⵠΔΔⲆ, jb.ᐃⲆΔΔⲆ, jb.ⲆΔᐃⵠΔ, jb.ᐃᐃΔΔⲆ, jb.ΔⲆᐃΔᐃ, jb.ᐃⵠⲆⵠᐃ, jb.ⵠⲆᐃⲆΔⲆⵠ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("111_111_011")] = ΔⲆ[1025][_r.ΔⵠΔ][b("111_111_110")];
        ΔⲆ[1025][_r.ΔⵠΔ][b("111_111_000")] = [jb.Δᐃᐃᐃᐃᐃⵠ, jb.ⵠⵠᐃᐃⵠ, jb.ⲆΔΔⵠΔΔⲆ, jb.ΔⲆᐃΔᐃ, jb.ᐃⵠⲆⵠᐃ, jb.ⵠⲆᐃⲆΔⲆⵠ, jb.ⲆᐃᐃΔᐃⵠⵠ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("111_111_111")] = [jb.ⵠⲆᐃⲆΔⲆⵠ, jb.ᐃⵠⲆⵠᐃ, jb.ΔⲆᐃΔᐃ, jb.ⲆᐃⲆⵠⵠᐃⲆ, jb.ᐃᐃΔΔⲆ, jb.ⲆΔᐃⵠΔ, jb.ᐃⲆΔΔⲆ, jb.Ⲇⵠⵠᐃⵠⵠᐃ, jb.ⲆΔΔⵠΔΔⲆ, jb.ⵠⵠᐃᐃⵠ, jb.ᐃᐃⵠⲆᐃΔⵠ, jb.ⲆⵠⵠⲆᐃΔⵠ, jb.ⲆⵠΔⲆᐃΔΔ, jb.ᐃⲆᐃᐃⵠ, jb.ⲆΔΔᐃΔΔⵠ, jb.ⵠⲆᐃⲆⵠⲆᐃ, jb.ΔⵠΔⲆⲆ, jb.ΔΔⲆᐃᐃ, jb.ᐃⲆⲆΔᐃΔΔ, jb.ⲆᐃΔΔᐃⲆᐃ, jb.ΔᐃᐃⲆⲆⵠΔ, jb.ⵠᐃΔⲆᐃ, jb.ᐃⲆΔⲆⲆ, jb.ᐃΔΔⲆⵠ];
        ΔⲆ[1025][_r.ΔⵠΔ][b("111_111_010")] = ΔⲆ[1025][_r.ΔⵠΔ][b("111_111_110")];
        ΔⲆ[1024] = [];
        ΔⲆ[1024][_r.ΔΔⵠ] = [];
        ΔⲆ[1024][_r.ΔΔⵠ][b("000_010_000")] = jb.ⵠⲆⵠⵠⲆⲆΔ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("000_010_010")] = jb.ⵠΔᐃⲆⲆⲆΔ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("000_011_000")] = jb.ⲆΔⵠΔⵠⵠⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("000_011_010")] = jb.ΔᐃᐃᐃΔⲆⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("000_011_011")] = jb.ΔⵠᐃⵠⲆΔᐃ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("000_110_000")] = jb.ᐃⵠⵠᐃᐃⵠΔ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("000_110_010")] = jb.ⲆΔⵠⵠΔᐃⵠ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("000_110_110")] = jb.ⲆⲆⵠⵠⲆΔⵠ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("000_111_000")] = jb.ᐃᐃⲆΔᐃΔⵠ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("000_111_010")] = jb.ΔⵠᐃΔᐃⲆⵠ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("000_111_011")] = jb.ᐃΔⲆⵠⵠᐃⵠ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("000_111_110")] = jb.ⲆᐃΔⵠΔΔΔ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("000_111_111")] = jb.ΔΔᐃⵠᐃᐃⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("010_010_000")] = jb.ⵠΔΔⲆᐃⲆⵠ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("010_010_010")] = jb.ⲆᐃⲆᐃΔᐃᐃ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("010_011_000")] = jb.ᐃⲆⵠⲆΔᐃⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("010_011_010")] = jb.ΔΔⲆΔΔΔⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("010_011_011")] = jb.ΔⵠⵠⵠᐃⵠⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("010_110_000")] = jb.ᐃᐃΔᐃΔΔⵠ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("010_110_010")] = jb.ⲆⵠΔᐃⲆⵠⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("010_110_110")] = jb.ΔᐃⲆⲆᐃⲆᐃ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("010_111_000")] = jb.ⲆⲆᐃΔᐃⲆⵠ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("010_111_010")] = jb.ⲆⵠΔΔᐃᐃⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("010_111_011")] = jb.ⵠⲆΔᐃⲆᐃΔ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("010_111_110")] = jb.ⲆΔⲆⲆⲆᐃⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("010_111_111")] = jb.ⲆⲆᐃᐃⲆΔΔ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("011_011_000")] = jb.ᐃⲆᐃⵠᐃᐃⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("011_011_010")] = jb.ⲆⲆⲆᐃΔⵠⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("011_011_011")] = jb.ΔᐃⲆΔⵠⲆⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("011_111_000")] = jb.ΔᐃⲆⲆⵠΔⵠ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("011_111_010")] = jb.ⲆΔⵠⵠᐃΔⵠ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("011_111_011")] = jb.ΔⵠᐃᐃΔⲆΔ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("011_111_110")] = jb.ⲆⲆᐃⲆΔⲆⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("011_111_111")] = jb.ᐃⲆⵠᐃⵠΔⵠ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("110_110_000")] = jb.ΔΔᐃⵠⲆⵠᐃ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("110_110_010")] = jb.ⲆᐃⲆᐃⵠⵠᐃ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("110_110_110")] = jb.ΔΔΔⵠⵠᐃⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("110_111_000")] = jb.ⲆⲆⵠⵠᐃᐃᐃ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("110_111_010")] = jb.ⵠⵠⵠⵠⵠΔΔ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("110_111_011")] = jb.ΔⵠⵠΔΔᐃⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("110_111_110")] = jb.ΔᐃᐃΔᐃⵠⵠ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("110_111_111")] = jb.ⲆᐃΔⲆᐃⵠᐃ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("111_111_011")] = jb.ⲆⵠᐃⵠᐃⲆⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("111_111_110")] = jb.ⵠᐃΔΔⲆⵠᐃ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("111_111_011")] = jb.ⲆⵠᐃⵠᐃⲆⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("111_111_000")] = jb.ᐃⵠᐃᐃⵠᐃⲆ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("111_111_111")] = jb.ΔⲆⲆᐃⲆⵠⵠ;
        ΔⲆ[1024][_r.ΔΔⵠ][b("111_111_010")] = jb.ᐃΔⵠᐃⵠⲆᐃ;
        ΔⲆ[1024][_r.ΔⵠΔ] = [];
        ΔⲆ[1024][_r.ΔⵠΔ][b("000_010_000")] = jb.ⲆᐃΔΔⲆᐃⵠ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("000_010_010")] = jb.ΔᐃΔᐃᐃᐃΔ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("000_011_000")] = jb.ᐃⵠⵠⵠᐃⵠⲆ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("000_011_010")] = jb.ⵠⵠᐃⵠⵠᐃⵠ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("000_011_011")] = jb.ᐃᐃᐃΔⵠⵠⲆ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("000_110_000")] = jb.ⲆⲆᐃᐃⵠΔΔ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("000_110_010")] = jb.ⵠⵠΔⵠⵠΔᐃ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("000_110_110")] = jb.ᐃΔΔⵠⵠⵠᐃ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("000_111_000")] = jb.ⵠⵠⲆⵠⵠᐃⲆ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("000_111_010")] = jb.ⲆᐃⵠᐃΔⵠΔ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("000_111_011")] = jb.ᐃⵠᐃΔⲆⲆⲆ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("000_111_110")] = jb.Ⲇᐃⵠᐃᐃⵠᐃ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("000_111_111")] = jb.ΔⵠⲆⲆⲆᐃΔ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("010_010_000")] = jb.ΔᐃᐃΔΔᐃΔ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("010_010_010")] = jb.ΔᐃΔΔⵠΔⲆ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("010_011_000")] = jb.ⲆⵠⵠᐃΔᐃⵠ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("010_011_010")] = jb.ΔΔⲆᐃᐃΔΔ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("010_011_011")] = jb.ⵠⵠⵠⵠⲆΔⵠ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("010_110_000")] = jb.ⵠᐃⲆⲆⵠΔⵠ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("010_110_010")] = jb.ⲆΔⵠⲆᐃⵠⲆ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("010_110_110")] = jb.ⲆⲆⲆⵠᐃⲆⵠ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("010_111_000")] = jb.ⲆΔΔΔⵠᐃΔ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("010_111_010")] = jb.ΔᐃⲆⲆⵠᐃΔ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("010_111_011")] = jb.ᐃⵠΔⲆⵠᐃᐃ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("010_111_110")] = jb.ⵠΔⵠⲆⲆᐃᐃ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("010_111_111")] = jb.ⲆᐃⲆⵠΔᐃᐃ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("011_011_000")] = jb.ΔⲆᐃⵠΔΔΔ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("011_011_010")] = jb.ⵠⲆⲆⲆΔᐃⵠ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("011_011_011")] = jb.ΔᐃᐃⵠΔⲆᐃ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("011_111_000")] = jb.ΔⵠΔᐃⵠᐃΔ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("011_111_010")] = jb.ᐃᐃΔΔᐃⵠⲆ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("011_111_011")] = jb.ⵠⵠᐃⵠⲆᐃᐃ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("011_111_110")] = jb.ΔⵠⲆⵠΔⲆΔ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("011_111_111")] = jb.ᐃΔΔⲆⲆᐃᐃ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("110_110_000")] = jb.ⲆΔᐃⲆⵠΔⵠ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("110_110_010")] = jb.ⵠᐃⲆΔᐃΔⲆ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("110_110_110")] = jb.ⲆⲆⵠⲆⲆⲆⲆ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("110_111_000")] = jb.ⲆΔⲆⵠⵠᐃᐃ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("110_111_010")] = jb.ΔΔⵠᐃⵠⵠⲆ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("110_111_011")] = jb.ΔᐃΔⲆᐃⲆⲆ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("110_111_110")] = jb.ⲆⵠΔΔᐃᐃⵠ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("110_111_111")] = jb.ᐃΔⵠⲆⲆⵠΔ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("111_111_011")] = jb.ᐃⲆⵠΔᐃΔΔ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("111_111_110")] = jb.ⵠⲆⵠⵠⵠⵠⵠ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("111_111_011")] = jb.ᐃⲆⵠΔᐃΔΔ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("111_111_000")] = jb.ⲆᐃΔΔⵠᐃⲆ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("111_111_111")] = jb.ΔᐃⲆⵠᐃⵠⵠ;
        ΔⲆ[1024][_r.ΔⵠΔ][b("111_111_010")] = jb.ᐃⵠⲆᐃᐃᐃⲆᐃⲆ;
        ΔⲆ[32] = [];
        ΔⲆ[32][_r.ΔΔⵠ] = jb.ΔΔⵠΔᐃΔΔ;
        ΔⲆ[32][_r.ΔⵠΔ] = jb.ᐃⲆⵠⲆⲆᐃⲆ;
        ΔⲆ[205] = [];
        ΔⲆ[205][_r.ΔΔⵠ] = jb.ⲆⲆⲆⲆᐃⲆⲆ;
        ΔⲆ[205][_r.ΔⵠΔ] = jb.ⲆⵠⵠⲆⵠᐃⲆ;
        ΔⲆ[957] = [];
        ΔⲆ[957][_r.ΔΔⵠ] = jb.ΔᐃⵠⲆᐃⵠⲆ;
        ΔⲆ[957][_r.ΔⵠΔ] = jb.ΔᐃΔΔΔᐃᐃ;
        ΔⲆ[207] = [];
        ΔⲆ[207][_r.ΔΔⵠ] = jb.ⵠⵠᐃⲆΔΔⵠ;
        ΔⲆ[207][_r.ΔⵠΔ] = jb.ⵠⵠΔᐃⵠⵠᐃ;
        ΔⲆ[954] = [];
        ΔⲆ[954][_r.ΔΔⵠ] = jb.ⵠⵠΔⵠⲆΔΔ;
        ΔⲆ[954][_r.ΔⵠΔ] = jb.ᐃᐃΔⲆΔΔᐃ;
        ΔⲆ[958] = [];
        ΔⲆ[958][_r.ΔΔⵠ] = jb.ⵠⲆᐃΔⲆᐃΔ;
        ΔⲆ[958][_r.ΔⵠΔ] = jb.ΔᐃⲆⵠⲆⲆᐃ;
        ΔⲆ[209] = [];
        ΔⲆ[209][_r.ΔΔⵠ] = jb.ᐃⵠΔᐃᐃⵠΔ;
        ΔⲆ[209][_r.ΔⵠΔ] = jb.ⵠⲆⵠᐃⲆⲆᐃ;
        ΔⲆ[971] = [];
        ΔⲆ[971][_r.ΔΔⵠ] = jb.ⵠⲆⲆⵠⲆⵠΔ;
        ΔⲆ[971][_r.ΔⵠΔ] = jb.ᐃᐃᐃᐃΔᐃᐃ;
        ΔⲆ[211] = [];
        ΔⲆ[211][_r.ΔΔⵠ] = jb.ΔⲆᐃΔᐃⵠΔ;
        ΔⲆ[211][_r.ΔⵠΔ] = jb.ᐃⲆΔⲆⵠΔⵠ;
        ΔⲆ[986] = [];
        ΔⲆ[986][_r.ΔΔⵠ] = jb.ⵠⵠᐃⲆΔᐃⵠ;
        ΔⲆ[986][_r.ΔⵠΔ] = jb.ⲆᐃⲆΔⲆΔΔ;
        ΔⲆ[989] = [];
        ΔⲆ[989][_r.ΔΔⵠ] = [jb.ΔᐃΔᐃⵠⵠⲆ];
        ΔⲆ[989][_r.ΔⵠΔ] = [jb.ⲆᐃⲆⵠⵠⲆⵠ];
        ΔⲆ[217] = [];
        ΔⲆ[217][_r.ΔΔⵠ] = jb.ⵠⲆⲆΔΔᐃⵠ;
        ΔⲆ[217][_r.ΔⵠΔ] = jb.ΔⲆΔᐃᐃⲆᐃ;
        ΔⲆ[219] = [];
        ΔⲆ[219][_r.ΔΔⵠ] = jb.ⲆⵠⲆⲆⵠΔΔ;
        ΔⲆ[219][_r.ΔⵠΔ] = jb.ⵠΔⲆⲆⵠΔⲆ;
        ΔⲆ[218] = [];
        ΔⲆ[218][_r.ΔΔⵠ] = jb.ᐃΔⲆⵠᐃᐃΔ;
        ΔⲆ[218][_r.ΔⵠΔ] = jb.ΔᐃᐃΔⲆᐃᐃ;
        ΔⲆ[212] = [];
        ΔⲆ[212][_r.ΔΔⵠ] = jb.ⵠⲆⲆΔᐃᐃΔ;
        ΔⲆ[212][_r.ΔⵠΔ] = jb.ⵠⵠⵠΔⲆⲆⵠ;
        ΔⲆ[213] = [];
        ΔⲆ[213][_r.ΔΔⵠ] = jb.ᐃⲆᐃᐃᐃⲆⲆ;
        ΔⲆ[213][_r.ΔⵠΔ] = jb.ΔΔⵠᐃⲆᐃⲆ;
        ΔⲆ[214] = [];
        ΔⲆ[214][_r.ΔΔⵠ] = jb.ⵠⲆⵠⵠᐃⵠΔ;
        ΔⲆ[214][_r.ΔⵠΔ] = jb.ΔⵠᐃΔΔΔΔ;
        ΔⲆ[215] = [];
        ΔⲆ[215][_r.ΔΔⵠ] = jb.ᐃΔᐃΔΔⵠᐃ;
        ΔⲆ[215][_r.ΔⵠΔ] = jb.ΔΔΔΔⲆΔⲆ;
        ΔⲆ[216] = [];
        ΔⲆ[216][_r.ΔΔⵠ] = jb.ⲆΔⲆⲆᐃΔΔ;
        ΔⲆ[216][_r.ΔⵠΔ] = jb.ᐃⲆᐃᐃΔᐃᐃ;
        ΔⲆ[220] = [];
        ΔⲆ[220][_r.ΔΔⵠ] = jb.ⵠᐃⲆⲆΔΔⲆ;
        ΔⲆ[220][_r.ΔⵠΔ] = jb.ⲆΔⵠΔⵠᐃⲆ;
        ΔⲆ[1020] = [];
        ΔⲆ[1020][_r.ΔΔⵠ] = jb.ᐃⲆⵠⵠᐃΔⵠ;
        ΔⲆ[1020][_r.ΔⵠΔ] = jb.ΔΔⲆΔΔᐃᐃ;
        ΔⲆ[1021] = [];
        ΔⲆ[1021][_r.ΔΔⵠ] = jb.ⲆΔᐃⲆⲆᐃᐃ;
        ΔⲆ[1021][_r.ΔⵠΔ] = jb.ᐃⵠⵠΔᐃⵠΔ;
        ΔⲆ[39] = [];
        ΔⲆ[39][_r.ΔΔⵠ] = jb.ΔⵠΔⵠⲆⲆᐃ;
        ΔⲆ[39][_r.ΔⵠΔ] = jb.ⲆΔⵠⲆᐃⵠᐃ;
        ΔⲆ[1022] = jb.ⲆΔⲆⵠⵠⲆⲆ;
        ΔⲆ[1023] = jb.ᐃⵠΔⵠⵠⵠᐃ;
        ΔⲆ[1041] = [];
        ΔⲆ[1041][_r.ΔΔⵠ] = [];
        ΔⲆ[1041][_r.ΔⵠΔ] = [];
        ΔⲆ[1041][_r.ΔΔⵠ].push(jb.ᐃᐃᐃⲆⲆⵠⵠ);
        ΔⲆ[1041][_r.ΔΔⵠ].push(jb.ⵠⲆᐃᐃΔⵠᐃ);
        ΔⲆ[1041][_r.ΔΔⵠ].push(jb.ᐃⵠⵠᐃⵠΔΔ);
        ΔⲆ[1041][_r.ΔⵠΔ].push(jb.ⲆⲆΔᐃᐃⵠΔ);
        ΔⲆ[1041][_r.ΔⵠΔ].push(jb.ΔΔΔⲆⲆⵠⲆ);
        ΔⲆ[1041][_r.ΔⵠΔ].push(jb.ᐃⲆᐃᐃᐃᐃⲆ);
        ΔⲆ[244] = [];
        ΔⲆ[244][_r.ΔΔⵠ] = [];
        ΔⲆ[244][_r.ΔⵠΔ] = [];
        ΔⲆ[244][_r.ΔΔⵠ].push(jb.ⵠΔΔⲆᐃⵠⲆ);
        ΔⲆ[244][_r.ΔΔⵠ].push(jb.ᐃᐃⲆⵠᐃΔᐃ);
        ΔⲆ[244][_r.ΔΔⵠ].push(jb.ⵠⲆᐃⲆΔⵠΔ);
        ΔⲆ[244][_r.ΔⵠΔ].push(jb.ⵠΔⲆΔΔⲆⲆ);
        ΔⲆ[244][_r.ΔⵠΔ].push(jb.ⲆᐃⲆᐃᐃΔΔ);
        ΔⲆ[244][_r.ΔⵠΔ].push(jb.Δᐃᐃᐃⵠⵠⵠ);
        ΔⲆ[1052] = [];
        ΔⲆ[1052][_r.ΔΔⵠ] = [];
        ΔⲆ[1052][_r.ΔⵠΔ] = [];
        ΔⲆ[1052][_r.ΔΔⵠ].push(jb.ᐃΔΔᐃᐃⲆⵠ);
        ΔⲆ[1052][_r.ΔΔⵠ].push(jb.ⵠⲆΔᐃᐃⵠᐃ);
        ΔⲆ[1052][_r.ΔΔⵠ].push(jb.ᐃⵠΔⲆⵠⲆᐃ);
        ΔⲆ[1052][_r.ΔΔⵠ].push(jb.ⵠΔⲆΔⲆⵠᐃ);
        ΔⲆ[1052][_r.ΔΔⵠ].push(jb.ΔⵠⵠΔΔΔⲆ);
        ΔⲆ[1052][_r.ΔⵠΔ].push(jb.ⲆⲆΔⵠⵠⲆΔ);
        ΔⲆ[1052][_r.ΔⵠΔ].push(jb.ᐃΔΔΔᐃⲆⲆ);
        ΔⲆ[1052][_r.ΔⵠΔ].push(jb.ⵠⲆⲆᐃΔⲆΔ);
        ΔⲆ[1052][_r.ΔⵠΔ].push(jb.ⲆᐃΔᐃᐃᐃᐃ);
        ΔⲆ[1052][_r.ΔⵠΔ].push(jb.ΔⵠᐃᐃⵠⲆΔ);
        ΔⲆ[450] = [];
        ΔⲆ[450][_r.ΔΔⵠ] = jb.ΔⲆⲆⵠΔᐃⵠ;
        ΔⲆ[450][_r.ΔⵠΔ] = jb.ΔᐃΔᐃΔΔΔ;
        ΔⲆ[453] = [];
        ΔⲆ[453][_r.ΔΔⵠ] = jb.ⵠΔΔΔⵠΔΔ;
        ΔⲆ[453][_r.ΔⵠΔ] = jb.ⵠᐃΔᐃΔⲆⲆ;
        ΔⲆ[454] = [];
        ΔⲆ[454][_r.ΔΔⵠ] = jb.ΔⲆΔⲆᐃⵠⵠ;
        ΔⲆ[454][_r.ΔⵠΔ] = jb.ᐃΔⵠⵠⵠⲆᐃ;
        ΔⲆ[464] = jb.ⲆⲆⵠΔⵠΔᐃ;
        ΔⲆ[468] = jb.ⲆⲆⵠΔΔⲆᐃ;
        ΔⲆ[469] = jb.ᐃⲆΔᐃᐃΔⵠ;
        ΔⲆ[20] = [];
        ΔⲆ[20][_r.ΔΔⵠ] = jb.ⵠΔⵠⵠⲆᐃⲆ;
        ΔⲆ[20][_r.ΔⵠΔ] = jb.ΔΔⲆⲆΔΔⵠ;
        ΔⲆ[920] = [];
        ΔⲆ[920][_r.ΔΔⵠ] = jb.ⲆᐃⵠΔⲆΔⲆ;
        ΔⲆ[920][_r.ΔⵠΔ] = jb.ⵠⵠⵠᐃⵠⲆᐃ;
        ΔⲆ[21] = [];
        ΔⲆ[21][_r.ΔΔⵠ] = jb.ⲆⵠⵠⵠⲆⲆⲆ;
        ΔⲆ[21][_r.ΔⵠΔ] = jb.ΔΔⲆⲆⵠΔⵠ;
        ΔⲆ[924] = [];
        ΔⲆ[924][_r.ΔΔⵠ] = jb.ⲆᐃⵠΔⲆΔⲆ;
        ΔⲆ[924][_r.ΔⵠΔ] = jb.ⵠⵠⵠᐃⵠⲆᐃ;
        ΔⲆ[44] = [];
        ΔⲆ[44][_r.ΔΔⵠ] = jb.ⲆⲆⵠⵠⵠⲆⵠ;
        ΔⲆ[44][_r.ΔⵠΔ] = jb.ⵠᐃⵠⵠⲆᐃⲆ;
        ΔⲆ[19] = [];
        ΔⲆ[19][_r.ΔΔⵠ] = jb.ⵠⵠΔⵠⵠⵠⲆ;
        ΔⲆ[19][_r.ΔⵠΔ] = jb.ΔⵠᐃⲆⵠΔᐃ;
        ΔⲆ[34] = [];
        ΔⲆ[34][_r.ΔΔⵠ] = jb.ΔΔᐃᐃⵠᐃᐃ;
        ΔⲆ[34][_r.ΔⵠΔ] = jb.ᐃⵠⲆⲆᐃᐃΔ;
        ΔⲆ[17] = [];
        ΔⲆ[17][_r.ΔΔⵠ] = jb.ᐃΔⵠᐃΔⵠᐃ;
        ΔⲆ[17][_r.ΔⵠΔ] = jb.ΔⲆⵠⲆⲆᐃⲆ;
        ΔⲆ[63] = [];
        ΔⲆ[63][_r.ΔΔⵠ] = jb.ΔⲆᐃᐃⵠⵠⵠ;
        ΔⲆ[63][_r.ΔⵠΔ] = jb.ΔΔΔⵠⵠΔᐃ;
        ΔⲆ[60] = [];
        ΔⲆ[60][_r.ΔΔⵠ] = jb.ΔⲆⲆΔⲆⵠⵠ;
        ΔⲆ[60][_r.ΔⵠΔ] = jb.ᐃᐃⵠⲆⲆⲆⲆ;
        ΔⲆ[94] = [];
        ΔⲆ[94][_r.ΔΔⵠ] = jb.ᐃΔⵠⵠⲆⲆᐃΔΔ;
        ΔⲆ[94][_r.ΔⵠΔ] = jb.ᐃⵠΔΔⵠⵠⵠᐃΔ;
        ΔⲆ[95] = [];
        ΔⲆ[95][_r.ΔΔⵠ] = jb.ΔⵠⵠⲆⲆⲆΔΔᐃ;
        ΔⲆ[95][_r.ΔⵠΔ] = jb.ᐃⲆⲆⲆⵠΔΔⲆⵠ;
        ΔⲆ[96] = [];
        ΔⲆ[96][_r.ΔΔⵠ] = jb.ΔᐃᐃᐃᐃᐃⵠᐃΔ;
        ΔⲆ[96][_r.ΔⵠΔ] = jb.ⵠᐃΔᐃⵠΔⲆⵠⵠ;
        ΔⲆ[97] = [];
        ΔⲆ[97][_r.ΔΔⵠ] = jb.ⲆⵠⵠΔᐃⲆⵠⵠⵠ;
        ΔⲆ[97][_r.ΔⵠΔ] = jb.ⲆᐃᐃⲆⲆⲆᐃⵠⲆ;
        ΔⲆ[98] = [];
        ΔⲆ[98][_r.ΔΔⵠ] = jb.ⵠⵠᐃΔⵠⵠᐃᐃⵠ;
        ΔⲆ[98][_r.ΔⵠΔ] = jb.ᐃᐃⵠᐃⲆⵠⲆᐃⵠ;
        ΔⲆ[99] = [];
        ΔⲆ[99][_r.ΔΔⵠ] = jb.ⲆⵠⵠᐃⲆΔⲆⲆⲆ;
        ΔⲆ[99][_r.ΔⵠΔ] = jb.ΔⲆΔⲆΔᐃΔⵠⵠ;
        ΔⲆ[90] = [];
        ΔⲆ[90][_r.ΔΔⵠ] = jb.ⵠⲆⵠᐃⵠⲆᐃ;
        ΔⲆ[90][_r.ΔⵠΔ] = jb.ⲆΔⵠⵠⵠⲆⲆ;
        ΔⲆ[91] = [];
        ΔⲆ[91][_r.ΔΔⵠ] = jb.ⵠᐃᐃⵠⵠΔᐃ;
        ΔⲆ[91][_r.ΔⵠΔ] = jb.ᐃⲆⲆⵠⲆⵠΔ;
        ΔⲆ[71] = [];
        ΔⲆ[71][_r.ΔΔⵠ] = jb.ᐃⲆⲆΔΔΔⵠⲆᐃ;
        ΔⲆ[71][_r.ΔⵠΔ] = jb.ⵠⵠⵠⵠⲆⲆⵠⲆⵠ;
        ΔⲆ[72] = [];
        ΔⲆ[72][_r.ΔΔⵠ] = jb.ΔᐃΔᐃᐃⵠⲆᐃᐃ;
        ΔⲆ[72][_r.ΔⵠΔ] = jb.ⲆᐃᐃΔⲆΔΔΔᐃ;
        ΔⲆ[73] = [];
        ΔⲆ[73][_r.ΔΔⵠ] = jb.ᐃⲆⵠⲆᐃΔΔΔⲆ;
        ΔⲆ[73][_r.ΔⵠΔ] = jb.ⲆΔΔⲆΔⲆᐃᐃΔ;
        ΔⲆ[74] = [];
        ΔⲆ[74][_r.ΔΔⵠ] = jb.ΔΔᐃⵠⲆⵠᐃⲆΔ;
        ΔⲆ[74][_r.ΔⵠΔ] = jb.ⵠⵠᐃᐃΔΔΔΔΔ;
        ΔⲆ[75] = [];
        ΔⲆ[75][_r.ΔΔⵠ] = jb.ⲆᐃᐃΔᐃΔⵠⵠⲆ;
        ΔⲆ[75][_r.ΔⵠΔ] = jb.ᐃⲆΔⲆⵠᐃΔⵠΔ;
        ΔⲆ[76] = [];
        ΔⲆ[76][_r.ΔΔⵠ] = jb.ΔⵠᐃⵠⲆⵠᐃⲆΔ;
        ΔⲆ[76][_r.ΔⵠΔ] = jb.ᐃⵠⲆΔΔⵠⲆⵠⲆ;
        ΔⲆ[101] = [];
        ΔⲆ[101][_r.ΔΔⵠ] = jb.ⵠⵠᐃΔΔΔⵠ;
        ΔⲆ[101][_r.ΔⵠΔ] = jb.ᐃΔⵠΔⲆᐃⵠ;
        ΔⲆ[64] = [];
        ΔⲆ[64][_r.ΔΔⵠ] = jb.ᐃΔⲆᐃΔⲆΔᐃΔ;
        ΔⲆ[64][_r.ΔⵠΔ] = jb.ᐃᐃΔΔΔΔᐃΔⵠ;
        ΔⲆ[102] = [];
        ΔⲆ[102][_r.ΔΔⵠ] = jb.ΔⵠⵠΔΔⲆᐃ;
        ΔⲆ[102][_r.ΔⵠΔ] = jb.ᐃΔᐃⵠⲆᐃᐃ;
        ΔⲆ[65] = [];
        ΔⲆ[65][_r.ΔΔⵠ] = jb.ⵠᐃⵠⲆⵠᐃᐃᐃⵠ;
        ΔⲆ[65][_r.ΔⵠΔ] = jb.ⵠᐃᐃⲆᐃⲆⵠᐃⲆ;
        ΔⲆ[103] = [];
        ΔⲆ[103][_r.ΔΔⵠ] = jb.ⲆⵠⵠⲆⲆᐃΔ;
        ΔⲆ[103][_r.ΔⵠΔ] = jb.ⵠΔⲆⵠᐃΔⲆ;
        ΔⲆ[66] = [];
        ΔⲆ[66][_r.ΔΔⵠ] = jb.ᐃⲆᐃⵠᐃΔΔⲆΔ;
        ΔⲆ[66][_r.ΔⵠΔ] = jb.ⲆⲆΔⲆΔᐃᐃⲆΔ;
        ΔⲆ[104] = [];
        ΔⲆ[104][_r.ΔΔⵠ] = jb.ΔⵠⲆⵠᐃⵠᐃ;
        ΔⲆ[104][_r.ΔⵠΔ] = jb.ΔⲆⵠⲆᐃᐃⵠ;
        ΔⲆ[67] = [];
        ΔⲆ[67][_r.ΔΔⵠ] = jb.ⲆᐃΔΔⲆΔᐃΔΔ;
        ΔⲆ[67][_r.ΔⵠΔ] = jb.ΔᐃⵠΔᐃⵠᐃᐃⲆ;
        ΔⲆ[105] = [];
        ΔⲆ[105][_r.ΔΔⵠ] = jb.ⲆΔᐃΔⵠⲆⵠ;
        ΔⲆ[105][_r.ΔⵠΔ] = jb.ΔⲆᐃⲆΔⵠΔ;
        ΔⲆ[68] = [];
        ΔⲆ[68][_r.ΔΔⵠ] = jb.ΔΔⵠᐃⲆⵠᐃᐃΔ;
        ΔⲆ[68][_r.ΔⵠΔ] = jb.ᐃⲆⲆⵠⵠᐃᐃΔᐃ;
        ΔⲆ[106] = [];
        ΔⲆ[106][_r.ΔΔⵠ] = jb.ΔⵠᐃΔⵠⲆΔ;
        ΔⲆ[106][_r.ΔⵠΔ] = jb.ᐃᐃᐃⵠΔⵠⵠⵠⵠ;
        ΔⲆ[69] = [];
        ΔⲆ[69][_r.ΔΔⵠ] = jb.ΔⵠᐃΔΔⵠΔᐃΔ;
        ΔⲆ[69][_r.ΔⵠΔ] = jb.ⲆΔⲆΔⵠⲆᐃΔΔ;
        ΔⲆ[107] = [];
        ΔⲆ[107][_r.ΔΔⵠ] = jb.ⵠⵠᐃᐃⵠᐃⲆ;
        ΔⲆ[107][_r.ΔⵠΔ] = jb.ᐃⵠᐃⲆⵠⲆⲆ;
        ΔⲆ[70] = [];
        ΔⲆ[70][_r.ΔΔⵠ] = jb.ⵠᐃᐃᐃΔᐃⲆᐃⵠ;
        ΔⲆ[70][_r.ΔⵠΔ] = jb.ⲆΔⵠᐃⵠⲆᐃΔΔ;
        ΔⲆ[80] = [];
        ΔⲆ[80][_r.ΔΔⵠ] = jb.ⵠⲆⵠⲆᐃᐃΔ;
        ΔⲆ[80][_r.ΔⵠΔ] = jb.ⲆᐃΔᐃⲆΔⵠ;
        ΔⲆ[81] = [];
        ΔⲆ[81][_r.ΔΔⵠ] = jb.ⵠⲆⵠᐃΔⲆⵠ;
        ΔⲆ[81][_r.ΔⵠΔ] = jb.ⵠⲆᐃⵠΔΔΔ;
        ΔⲆ[22] = [];
        ΔⲆ[22][_r.ΔΔⵠ] = jb.ᐃΔⵠᐃⵠᐃⲆ;
        ΔⲆ[22][_r.ΔⵠΔ] = jb.ⲆΔΔⵠⲆⵠⵠ;
        ΔⲆ[928] = [];
        ΔⲆ[928][_r.ΔΔⵠ] = jb.ⲆΔΔᐃᐃⲆᐃ;
        ΔⲆ[928][_r.ΔⵠΔ] = jb.ⵠᐃⲆⵠⲆⵠⲆ;
        ΔⲆ[935] = [];
        ΔⲆ[935][_r.ΔΔⵠ] = [];
        ΔⲆ[935][_r.ΔⵠΔ] = [];
        ΔⲆ[935][_r.ΔΔⵠ].push(jb.ⲆⵠⲆⲆΔⲆⲆΔΔ);
        ΔⲆ[935][_r.ΔΔⵠ].push(jb.ⵠΔΔⲆⵠⲆΔⲆⲆ);
        ΔⲆ[935][_r.ΔⵠΔ].push(jb.ⵠΔΔⲆⵠⲆΔⲆⲆ);
        ΔⲆ[935][_r.ΔⵠΔ].push(jb.ΔΔΔⲆⲆΔⵠⲆᐃ);
        ΔⲆ[941] = [];
        ΔⲆ[941][_r.ΔΔⵠ] = [];
        ΔⲆ[941][_r.ΔⵠΔ] = [];
        ΔⲆ[941][_r.ΔΔⵠ].push(jb.ⵠⵠⲆᐃⵠΔᐃ);
        ΔⲆ[941][_r.ΔΔⵠ].push(jb.ⵠΔⵠΔΔⲆⲆ);
        ΔⲆ[941][_r.ΔΔⵠ].push(jb.ⲆⲆⵠΔⲆⲆⲆ);
        ΔⲆ[941][_r.ΔⵠΔ].push(jb.ⵠᐃⲆⵠᐃΔⲆ);
        ΔⲆ[941][_r.ΔⵠΔ].push(jb.ⲆΔⵠΔΔᐃⵠ);
        ΔⲆ[941][_r.ΔⵠΔ].push(jb.ⲆᐃᐃᐃⵠΔᐃ);
        ΔⲆ[53] = [];
        ΔⲆ[53][_r.ΔΔⵠ] = jb.ⲆⵠΔⵠⵠⵠΔ;
        ΔⲆ[53][_r.ΔⵠΔ] = jb.ⲆⲆⲆᐃⵠⵠᐃ;
        ΔⲆ[54] = [];
        ΔⲆ[54][_r.ΔΔⵠ] = jb.ᐃⲆᐃⲆᐃⵠᐃ;
        ΔⲆ[54][_r.ΔⵠΔ] = jb.ⵠⵠΔᐃⲆΔⲆ;
        ΔⲆ[241] = [];
        ΔⲆ[241][_r.ΔΔⵠ] = [];
        ΔⲆ[241][_r.ΔⵠΔ] = [];
        ΔⲆ[241][_r.ΔΔⵠ].push(jb.ⵠΔⵠⵠⵠΔᐃ);
        ΔⲆ[241][_r.ΔΔⵠ].push(jb.ⲆᐃᐃᐃⲆᐃⲆ);
        ΔⲆ[241][_r.ΔΔⵠ].push(jb.ⵠᐃⲆⲆⲆⵠⲆ);
        ΔⲆ[241][_r.ΔⵠΔ].push(jb.ΔⵠⵠⵠⲆⵠΔ);
        ΔⲆ[241][_r.ΔⵠΔ].push(jb.ΔᐃᐃᐃⵠΔᐃ);
        ΔⲆ[241][_r.ΔⵠΔ].push(jb.ᐃⲆⵠⲆⲆⲆⵠ);
        ΔⲆ[202] = [];
        ΔⲆ[202][_r.ΔΔⵠ] = [];
        ΔⲆ[202][_r.ΔⵠΔ] = [];
        ΔⲆ[202][_r.ΔΔⵠ].push(jb.ⵠΔⲆΔᐃⵠⵠ);
        ΔⲆ[202][_r.ΔΔⵠ].push(jb.ⲆⵠⲆΔⲆᐃΔ);
        ΔⲆ[202][_r.ΔΔⵠ].push(jb.ᐃΔⲆⵠᐃⲆᐃ);
        ΔⲆ[202][_r.ΔⵠΔ].push(jb.ⲆⲆΔⵠⵠⵠⵠ);
        ΔⲆ[202][_r.ΔⵠΔ].push(jb.ΔᐃᐃᐃΔΔⵠ);
        ΔⲆ[202][_r.ΔⵠΔ].push(jb.ᐃⲆⵠⵠⲆⲆⵠ);
        ΔⲆ[203] = [];
        ΔⲆ[203][_r.ΔΔⵠ] = [];
        ΔⲆ[203][_r.ΔⵠΔ] = [];
        ΔⲆ[203][_r.ΔΔⵠ].push(jb.ⲆᐃⲆᐃᐃᐃᐃ);
        ΔⲆ[203][_r.ΔΔⵠ].push(jb.ᐃᐃⲆᐃⵠⵠⲆ);
        ΔⲆ[203][_r.ΔΔⵠ].push(jb.ⲆᐃⵠΔⵠΔⲆ);
        ΔⲆ[203][_r.ΔΔⵠ].push(jb.ΔΔΔⵠᐃⵠⲆ);
        ΔⲆ[203][_r.ΔΔⵠ].push(jb.ᐃΔᐃⲆΔᐃᐃ);
        ΔⲆ[203][_r.ΔΔⵠ].push(jb.ⲆΔᐃᐃⲆᐃⵠ);
        ΔⲆ[203][_r.ΔⵠΔ].push(jb.ᐃⵠᐃᐃᐃⲆᐃ);
        ΔⲆ[203][_r.ΔⵠΔ].push(jb.ᐃΔᐃⲆΔⵠᐃ);
        ΔⲆ[203][_r.ΔⵠΔ].push(jb.ⲆᐃⵠᐃΔΔΔ);
        ΔⲆ[203][_r.ΔⵠΔ].push(jb.ΔⲆⵠⵠΔᐃᐃ);
        ΔⲆ[203][_r.ΔⵠΔ].push(jb.ᐃΔⵠᐃᐃⵠⲆ);
        ΔⲆ[203][_r.ΔⵠΔ].push(jb.ⵠΔⲆⵠΔⵠⵠ);
        ΔⲆ[_r.Δⵠⵠⵠᐃ] = [];
        ΔⲆ[_r.Δⵠⵠⵠᐃ][_r.ΔΔⵠ] = [];
        ΔⲆ[_r.Δⵠⵠⵠᐃ][_r.ΔⵠΔ] = [];
        ΔⲆ[_r.Δⵠⵠⵠᐃ][_r.ΔΔⵠ].push(jb.ⲆΔΔΔΔᐃᐃ);
        ΔⲆ[_r.Δⵠⵠⵠᐃ][_r.ΔΔⵠ].push(jb.ᐃᐃⲆⲆⲆⵠⵠ);
        ΔⲆ[_r.Δⵠⵠⵠᐃ][_r.ΔΔⵠ].push(jb.ΔⵠⲆⲆⵠᐃⲆ);
        ΔⲆ[_r.Δⵠⵠⵠᐃ][_r.ΔΔⵠ].push(jb.ⲆᐃⵠΔⲆΔⵠ);
        ΔⲆ[_r.Δⵠⵠⵠᐃ][_r.ΔΔⵠ].push(jb.ⲆΔᐃⵠᐃΔⲆ);
        ΔⲆ[_r.Δⵠⵠⵠᐃ][_r.ΔΔⵠ].push(jb.ⵠⵠᐃᐃᐃⵠΔ);
        ΔⲆ[_r.Δⵠⵠⵠᐃ][_r.ΔⵠΔ].push(jb.ΔᐃΔᐃⲆᐃⵠ);
        ΔⲆ[_r.Δⵠⵠⵠᐃ][_r.ΔⵠΔ].push(jb.ⵠⲆⵠᐃΔⲆᐃ);
        ΔⲆ[_r.Δⵠⵠⵠᐃ][_r.ΔⵠΔ].push(jb.ᐃΔⵠΔᐃΔᐃ);
        ΔⲆ[_r.Δⵠⵠⵠᐃ][_r.ΔⵠΔ].push(jb.ⵠⲆⵠⵠⲆⲆⲆ);
        ΔⲆ[_r.Δⵠⵠⵠᐃ][_r.ΔⵠΔ].push(jb.ⲆⵠⵠᐃⵠᐃΔ);
        ΔⲆ[_r.Δⵠⵠⵠᐃ][_r.ΔⵠΔ].push(jb.ᐃΔⵠᐃⵠᐃΔ);
        ΔⲆ[918] = [];
        ΔⲆ[918][_r.ΔΔⵠ] = jb.ΔⵠⲆⲆΔᐃⲆ;
        ΔⲆ[918][_r.ΔⵠΔ] = jb.ⵠΔⲆᐃᐃⲆⵠ;
        ΔⲆ[919] = jb.ᐃⵠΔΔΔᐃⵠ;
        ΔⲆ[56] = [];
        ΔⲆ[56][_r.ΔΔⵠ] = jb.ᐃᐃᐃⲆⲆⲆᐃᐃⲆ;
        ΔⲆ[56][_r.ΔⵠΔ] = jb.ⵠΔᐃⵠᐃⵠΔΔⲆ;
        ΔⲆ[223] = [];
        ΔⲆ[223][_r.ΔΔⵠ] = jb.ⲆⵠᐃΔⵠΔⲆ;
        ΔⲆ[223][_r.ΔⵠΔ] = jb.ᐃⲆΔⵠᐃΔⵠ;
        ΔⲆ[224] = [];
        ΔⲆ[224][_r.ΔΔⵠ] = jb.ΔᐃᐃᐃⲆᐃⵠ;
        ΔⲆ[224][_r.ΔⵠΔ] = jb.ΔΔᐃⲆᐃΔΔ;
        ΔⲆ[236] = [];
        ΔⲆ[236][_r.ΔΔⵠ] = jb.ᐃⲆⵠᐃⲆΔΔ;
        ΔⲆ[236][_r.ΔⵠΔ] = jb.ΔⵠᐃⲆᐃΔΔ;
        ΔⲆ[1033] = [];
        ΔⲆ[1033][_r.ΔΔⵠ] = jb.ᐃⵠΔⲆΔΔᐃ;
        ΔⲆ[1033][_r.ΔⵠΔ] = jb.ΔⵠⲆΔᐃᐃΔ;
        ΔⲆ[1034] = jb.ΔᐃΔᐃᐃⲆΔ;
        ΔⲆ[1150] = [];
        ΔⲆ[1150][_r.ΔΔⵠ] = jb.ᐃⲆⲆⵠⲆΔΔ;
        ΔⲆ[1150][_r.ΔⵠΔ] = jb.ⲆⲆᐃᐃⲆⲆⲆ;
        ΔⲆ[1152] = [];
        ΔⲆ[1152][_r.ΔΔⵠ] = jb.ᐃⵠΔⲆⵠΔᐃ;
        ΔⲆ[1152][_r.ΔⵠΔ] = jb.ⵠᐃⵠΔᐃΔⵠ;
        ΔⲆ[1149] = jb.ⵠΔΔⲆⵠⲆΔ;
        ΔⲆ[1151] = jb.ⲆⵠⲆⵠᐃⵠⲆ;
        ΔⲆ[1153] = jb.ΔⲆⲆⵠΔⵠⲆ;
        ΔⲆ[1143] = [];
        ΔⲆ[1143][_r.ΔΔⵠ] = jb.ᐃΔⵠᐃⵠⵠᐃ;
        ΔⲆ[1143][_r.ΔⵠΔ] = jb.ⵠΔⲆᐃΔᐃⲆ;
        ΔⲆ[1145] = [];
        ΔⲆ[1145][_r.ΔΔⵠ] = jb.ᐃⵠⲆᐃᐃΔΔ;
        ΔⲆ[1145][_r.ΔⵠΔ] = jb.ΔᐃⲆΔᐃⲆΔ;
        ΔⲆ[1146] = [];
        ΔⲆ[1146][_r.ΔΔⵠ] = jb.ⵠᐃⲆΔⲆΔⵠ;
        ΔⲆ[1146][_r.ΔⵠΔ] = jb.ⲆΔΔⵠⵠΔᐃ;
        ΔⲆ[1144] = jb.ᐃΔᐃᐃⲆΔⲆ;
        ΔⲆ[1148] = jb.ⵠⵠⲆⲆᐃᐃᐃ;
        ΔⲆ[1147] = jb.ΔΔⲆΔⵠⲆᐃ;
        ΔⲆ[1053] = [];
        ΔⲆ[1053][_r.ΔΔⵠ] = jb.ⵠⲆⵠⲆⵠⲆΔ;
        ΔⲆ[1053][_r.ΔⵠΔ] = jb.ΔᐃⲆΔⲆⵠᐃ;
        ΔⲆ[1055] = [];
        ΔⲆ[1055][_r.ΔΔⵠ] = jb.ᐃᐃⲆⲆⵠⲆⲆ;
        ΔⲆ[1055][_r.ΔⵠΔ] = jb.ⵠⵠᐃⵠⲆⲆΔ;
        ΔⲆ[231] = [];
        ΔⲆ[231][_r.ΔΔⵠ] = jb.ⲆΔᐃⲆⲆΔΔ;
        ΔⲆ[231][_r.ΔⵠΔ] = jb.ΔᐃⵠⲆⲆΔⵠ;
        ΔⲆ[1060] = [];
        ΔⲆ[1060][_r.ΔΔⵠ] = jb.ⵠᐃᐃⲆΔΔⲆ;
        ΔⲆ[1060][_r.ΔⵠΔ] = jb.ⲆⵠⲆΔΔᐃⵠ;
        ΔⲆ[1063] = [];
        ΔⲆ[1063][_r.ΔΔⵠ] = jb.ⲆⵠᐃⲆⲆΔⲆ;
        ΔⲆ[1063][_r.ΔⵠΔ] = jb.ⲆΔΔⵠᐃᐃΔ;
        ΔⲆ[1059] = [];
        ΔⲆ[1059][_r.ΔΔⵠ] = jb.ᐃⵠⵠᐃΔⵠⲆ;
        ΔⲆ[1059][_r.ΔⵠΔ] = jb.ΔⲆⲆⲆⲆΔⲆ;
        ΔⲆ[1062] = [];
        ΔⲆ[1062][_r.ΔΔⵠ] = jb.ⲆᐃⲆⵠΔⲆⲆ;
        ΔⲆ[1062][_r.ΔⵠΔ] = jb.ⲆᐃⲆΔⵠᐃⲆ;
        ΔⲆ[1056] = jb.ⲆⲆᐃΔⵠⵠⲆ;
        ΔⲆ[1057] = jb.ⵠΔⵠⲆΔⵠᐃ;
        ΔⲆ[1058] = jb.ΔᐃΔᐃᐃⵠᐃ;
        ΔⲆ[1065] = jb.ⵠⲆΔᐃΔᐃᐃ;
        ΔⲆ[1066] = jb.ΔⵠⵠⲆᐃⵠⵠ;
        ΔⲆ[1067] = jb.ΔΔΔⲆⵠᐃΔ;
        ΔⲆ[1222] = [];
        ΔⲆ[1222][_r.ΔΔⵠ] = jb.ⲆΔⵠΔⲆⵠⲆΔᐃ;
        ΔⲆ[1222][_r.ΔⵠΔ] = jb.ⵠΔΔᐃⲆᐃⲆΔΔ;
        ΔⲆ[248] = [];
        ΔⲆ[248][_r.ΔΔⵠ] = jb.ⵠΔΔΔΔᐃⲆᐃᐃ;
        ΔⲆ[248][_r.ΔⵠΔ] = jb.ⲆᐃΔᐃΔΔΔⵠΔ;
        ΔⲆ[1218] = [];
        ΔⲆ[1218][_r.ΔΔⵠ] = jb.ⵠᐃⲆΔᐃⵠⵠᐃΔ;
        ΔⲆ[1218][_r.ΔⵠΔ] = jb.ⵠⵠΔΔⵠΔΔⵠⲆ;
        ΔⲆ[1221] = [];
        ΔⲆ[1221][_r.ΔΔⵠ] = jb.ᐃⲆΔⵠᐃⵠⲆᐃⲆ;
        ΔⲆ[1221][_r.ΔⵠΔ] = jb.ᐃᐃⲆΔΔⲆΔⲆᐃ;
        ΔⲆ[1223] = jb.ΔⵠᐃᐃⲆΔⲆ;
        ΔⲆ[1219] = jb.ⲆΔΔᐃⲆᐃⵠ;
        ΔⲆ[1068] = [];
        ΔⲆ[1068][_r.ΔΔⵠ] = jb.ⲆⲆⵠⵠΔΔⲆ;
        ΔⲆ[1068][_r.ΔⵠΔ] = jb.ᐃⵠᐃᐃⲆΔⲆ;
        ΔⲆ[232] = [];
        ΔⲆ[232][_r.ΔΔⵠ] = jb.ⵠⲆⵠΔⲆΔⲆ;
        ΔⲆ[232][_r.ΔⵠΔ] = jb.ᐃΔⵠⲆⲆᐃᐃ;
        ΔⲆ[1070] = [];
        ΔⲆ[1070][_r.ΔΔⵠ] = jb.ᐃⲆᐃⲆΔⵠᐃ;
        ΔⲆ[1070][_r.ΔⵠΔ] = jb.ⲆᐃᐃⵠΔⲆⵠ;
        ΔⲆ[1072] = [];
        ΔⲆ[1072][_r.ΔΔⵠ] = jb.ⵠⵠᐃⲆⵠΔΔ;
        ΔⲆ[1072][_r.ΔⵠΔ] = jb.ⵠΔᐃᐃΔⲆⲆ;
        ΔⲆ[1075] = [];
        ΔⲆ[1075][_r.ΔΔⵠ] = jb.ⵠᐃⲆⲆΔⵠΔ;
        ΔⲆ[1075][_r.ΔⵠΔ] = jb.ΔⵠⵠᐃⲆΔΔ;
        ΔⲆ[1071] = [];
        ΔⲆ[1071][_r.ΔΔⵠ] = jb.ΔⲆⵠΔΔⵠⵠ;
        ΔⲆ[1071][_r.ΔⵠΔ] = jb.ΔᐃⵠᐃⵠⲆⲆ;
        ΔⲆ[1074] = [];
        ΔⲆ[1074][_r.ΔΔⵠ] = jb.ⲆⲆⲆΔΔⲆⵠ;
        ΔⲆ[1074][_r.ΔⵠΔ] = jb.ⲆΔⲆᐃⲆᐃΔ;
        ΔⲆ[1073] = [];
        ΔⲆ[1073][_r.ΔΔⵠ] = jb.ᐃᐃⵠⲆⵠⵠⵠ;
        ΔⲆ[1073][_r.ΔⵠΔ] = jb.ᐃⲆᐃⲆⲆᐃⲆ;
        ΔⲆ[1076] = [];
        ΔⲆ[1076][_r.ΔΔⵠ] = jb.ᐃⲆΔΔΔⲆⵠ;
        ΔⲆ[1076][_r.ΔⵠΔ] = jb.ᐃΔⲆⵠⲆⵠᐃ;
        ΔⲆ[1077] = jb.ⵠΔⲆᐃⵠⲆⲆ;
        ΔⲆ[1078] = jb.ᐃᐃⵠΔⵠᐃⲆ;
        ΔⲆ[1079] = jb.ⵠᐃⲆⲆΔᐃΔ;
        ΔⲆ[1083] = [];
        ΔⲆ[1083][_r.ΔΔⵠ] = jb.ᐃΔⲆⵠΔΔΔ;
        ΔⲆ[1083][_r.ΔⵠΔ] = jb.ΔΔΔⵠⲆⲆΔ;
        ΔⲆ[233] = [];
        ΔⲆ[233][_r.ΔΔⵠ] = jb.ΔΔΔⵠⵠⲆᐃ;
        ΔⲆ[233][_r.ΔⵠΔ] = jb.ⲆᐃⵠⵠᐃⲆᐃ;
        ΔⲆ[1085] = [];
        ΔⲆ[1085][_r.ΔΔⵠ] = jb.ⲆΔⲆⲆⵠⲆΔ;
        ΔⲆ[1085][_r.ΔⵠΔ] = jb.ΔΔⵠⵠΔⲆⵠ;
        ΔⲆ[1087] = [];
        ΔⲆ[1087][_r.ΔΔⵠ] = jb.ⲆᐃΔⲆⲆᐃᐃ;
        ΔⲆ[1087][_r.ΔⵠΔ] = jb.ⲆᐃⵠΔΔⵠΔ;
        ΔⲆ[1090] = [];
        ΔⲆ[1090][_r.ΔΔⵠ] = jb.ΔⲆΔΔΔΔⵠ;
        ΔⲆ[1090][_r.ΔⵠΔ] = jb.ΔⵠⲆⲆⵠⵠᐃ;
        ΔⲆ[1086] = [];
        ΔⲆ[1086][_r.ΔΔⵠ] = jb.ⲆΔⲆⵠⲆⲆⵠ;
        ΔⲆ[1086][_r.ΔⵠΔ] = jb.ᐃΔⲆᐃⵠⵠᐃ;
        ΔⲆ[1089] = [];
        ΔⲆ[1089][_r.ΔΔⵠ] = jb.ΔΔⵠΔⲆⵠⲆ;
        ΔⲆ[1089][_r.ΔⵠΔ] = jb.ΔⵠᐃⵠⲆⲆⲆ;
        ΔⲆ[1088] = [];
        ΔⲆ[1088][_r.ΔΔⵠ] = jb.ΔᐃᐃᐃΔⲆᐃ;
        ΔⲆ[1088][_r.ΔⵠΔ] = jb.ΔΔⵠⲆⵠᐃᐃ;
        ΔⲆ[1091] = [];
        ΔⲆ[1091][_r.ΔΔⵠ] = jb.ⵠΔΔᐃⵠⲆⵠ;
        ΔⲆ[1091][_r.ΔⵠΔ] = jb.ᐃΔⲆⵠΔⲆΔ;
        ΔⲆ[1092] = jb.ᐃᐃⲆⵠᐃᐃΔ;
        ΔⲆ[1093] = jb.ΔΔᐃⵠⲆⵠⵠ;
        ΔⲆ[1094] = jb.ᐃⲆᐃᐃⲆᐃⵠ;
        ΔⲆ[1098] = [];
        ΔⲆ[1098][_r.ΔΔⵠ] = jb.ⲆⵠⵠΔᐃΔⵠ;
        ΔⲆ[1098][_r.ΔⵠΔ] = jb.ΔᐃᐃΔᐃⲆΔ;
        ΔⲆ[235] = [];
        ΔⲆ[235][_r.ΔΔⵠ] = jb.ᐃⲆᐃᐃΔᐃⵠ;
        ΔⲆ[235][_r.ΔⵠΔ] = jb.ⲆᐃᐃⵠⵠΔΔ;
        ΔⲆ[1115] = jb.ᐃΔⵠⵠᐃⲆⵠ;
        ΔⲆ[1113] = [];
        ΔⲆ[1113][_r.ΔΔⵠ] = jb.ⵠⲆⵠⵠᐃᐃⵠ;
        ΔⲆ[1113][_r.ΔⵠΔ] = jb.ΔᐃⲆᐃⲆᐃΔ;
        ΔⲆ[1114] = [];
        ΔⲆ[1114][_r.ΔΔⵠ] = jb.ΔᐃⲆᐃⵠⲆᐃ;
        ΔⲆ[1114][_r.ΔⵠΔ] = jb.ᐃᐃⲆⲆΔⵠᐃ;
        ΔⲆ[1100] = [];
        ΔⲆ[1100][_r.ΔΔⵠ] = jb.ⲆΔⲆᐃᐃⵠⵠ;
        ΔⲆ[1100][_r.ΔⵠΔ] = jb.ΔⲆΔⵠⵠⲆΔ;
        ΔⲆ[1102] = [];
        ΔⲆ[1102][_r.ΔΔⵠ] = jb.ᐃⵠⲆᐃⲆⵠⲆ;
        ΔⲆ[1102][_r.ΔⵠΔ] = jb.ᐃⲆᐃⲆⵠⲆⲆ;
        ΔⲆ[1105] = [];
        ΔⲆ[1105][_r.ΔΔⵠ] = jb.ᐃⲆⲆᐃᐃᐃⲆ;
        ΔⲆ[1105][_r.ΔⵠΔ] = jb.ⵠᐃᐃⵠᐃᐃΔ;
        ΔⲆ[1101] = [];
        ΔⲆ[1101][_r.ΔΔⵠ] = jb.ΔΔⲆⲆᐃⵠΔ;
        ΔⲆ[1101][_r.ΔⵠΔ] = jb.ⵠΔΔΔⲆⲆⲆ;
        ΔⲆ[1104] = [];
        ΔⲆ[1104][_r.ΔΔⵠ] = jb.ⲆⲆⵠⵠⵠΔΔ;
        ΔⲆ[1104][_r.ΔⵠΔ] = jb.ⲆⲆⵠⲆⵠΔⵠ;
        ΔⲆ[1103] = [];
        ΔⲆ[1103][_r.ΔΔⵠ] = jb.ⲆΔΔⲆⵠⵠⵠ;
        ΔⲆ[1103][_r.ΔⵠΔ] = jb.ΔΔΔⵠΔⵠΔ;
        ΔⲆ[1106] = [];
        ΔⲆ[1106][_r.ΔΔⵠ] = jb.ⲆΔΔⵠΔⵠΔ;
        ΔⲆ[1106][_r.ΔⵠΔ] = jb.ΔⵠΔⵠΔⲆⲆ;
        ΔⲆ[1107] = jb.ᐃΔΔΔᐃΔᐃ;
        ΔⲆ[1108] = jb.ⲆⵠᐃΔΔⲆⲆ;
        ΔⲆ[1109] = jb.ΔⵠᐃΔⲆⵠᐃ;
        ΔⲆ[1119] = [];
        ΔⲆ[1119][_r.ΔΔⵠ] = jb.ⵠΔⵠΔⵠⵠᐃ;
        ΔⲆ[1119][_r.ΔⵠΔ] = jb.ᐃⵠⵠⵠⵠⲆᐃ;
        ΔⲆ[238] = [];
        ΔⲆ[238][_r.ΔΔⵠ] = jb.ⵠⲆΔⲆⲆⲆᐃ;
        ΔⲆ[238][_r.ΔⵠΔ] = jb.ΔᐃΔⵠΔⲆⵠ;
        ΔⲆ[1136] = jb.ⲆΔⲆⵠⵠⵠᐃ;
        ΔⲆ[1134] = [];
        ΔⲆ[1134][_r.ΔΔⵠ] = jb.ᐃᐃΔᐃⵠⵠⲆ;
        ΔⲆ[1134][_r.ΔⵠΔ] = jb.ⵠⲆᐃⵠⵠⵠⲆ;
        ΔⲆ[1135] = [];
        ΔⲆ[1135][_r.ΔΔⵠ] = jb.ⲆⲆΔⲆᐃᐃⲆ;
        ΔⲆ[1135][_r.ΔⵠΔ] = jb.ⲆⲆⵠᐃⵠᐃⵠ;
        ΔⲆ[1121] = [];
        ΔⲆ[1121][_r.ΔΔⵠ] = jb.ΔᐃⵠᐃⵠΔΔ;
        ΔⲆ[1121][_r.ΔⵠΔ] = jb.ΔⵠΔⵠᐃⵠΔ;
        ΔⲆ[1123] = [];
        ΔⲆ[1123][_r.ΔΔⵠ] = jb.ᐃⲆᐃΔⲆΔΔ;
        ΔⲆ[1123][_r.ΔⵠΔ] = jb.ΔᐃⲆΔᐃⲆⲆ;
        ΔⲆ[1126] = [];
        ΔⲆ[1126][_r.ΔΔⵠ] = jb.ᐃⵠⲆⵠⵠΔΔ;
        ΔⲆ[1126][_r.ΔⵠΔ] = jb.ᐃᐃⲆⵠΔⲆᐃ;
        ΔⲆ[1122] = [];
        ΔⲆ[1122][_r.ΔΔⵠ] = jb.ⵠⲆⵠⲆΔᐃΔ;
        ΔⲆ[1122][_r.ΔⵠΔ] = jb.ΔⵠᐃⵠᐃⵠⲆ;
        ΔⲆ[1125] = [];
        ΔⲆ[1125][_r.ΔΔⵠ] = jb.ⲆⲆⲆⵠⵠⲆᐃ;
        ΔⲆ[1125][_r.ΔⵠΔ] = jb.ⵠᐃᐃΔⲆⲆΔ;
        ΔⲆ[1124] = [];
        ΔⲆ[1124][_r.ΔΔⵠ] = jb.ⲆΔᐃⲆᐃΔⵠ;
        ΔⲆ[1124][_r.ΔⵠΔ] = jb.ⲆΔⲆᐃᐃᐃΔ;
        ΔⲆ[1127] = [];
        ΔⲆ[1127][_r.ΔΔⵠ] = jb.ΔⲆᐃⲆᐃⵠᐃ;
        ΔⲆ[1127][_r.ΔⵠΔ] = jb.ⵠⲆᐃΔᐃⲆⲆ;
        ΔⲆ[1128] = jb.ⲆⵠΔᐃⲆⵠᐃ;
        ΔⲆ[1129] = jb.ⵠᐃⲆΔᐃⲆᐃ;
        ΔⲆ[1130] = jb.ⲆᐃᐃᐃΔⵠΔ;
        ΔⲆ[1042] = [];
        ΔⲆ[1042][_r.ΔΔⵠ] = jb.ⲆᐃⲆⲆΔⲆΔ;
        ΔⲆ[1042][_r.ΔⵠΔ] = jb.ᐃΔⲆⵠⲆᐃΔ;
        ΔⲆ[1043] = [];
        ΔⲆ[1043][_r.ΔΔⵠ] = jb.ⵠⵠⵠΔⲆⵠΔ;
        ΔⲆ[1043][_r.ΔⵠΔ] = jb.ΔᐃⲆᐃᐃⲆᐃ;
        ΔⲆ[1044] = [];
        ΔⲆ[1044][_r.ΔΔⵠ] = jb.ΔΔⵠⲆⲆᐃᐃ;
        ΔⲆ[1044][_r.ΔⵠΔ] = jb.ᐃⲆᐃΔⵠᐃⲆ;
        ΔⲆ[228] = [];
        ΔⲆ[228][_r.ΔΔⵠ] = jb.ᐃⵠⲆΔΔⵠⵠ;
        ΔⲆ[228][_r.ΔⵠΔ] = jb.ᐃⵠⲆΔΔⵠⵠ;
        ΔⲆ[234] = [];
        ΔⲆ[234][_r.ΔΔⵠ] = jb.ⲆⲆΔΔΔΔⵠ;
        ΔⲆ[234][_r.ΔⵠΔ] = jb.ⲆⲆΔΔΔΔⵠ;
        ΔⲆ[249] = [];
        ΔⲆ[249][_r.ΔΔⵠ] = jb.ΔᐃⵠΔⵠΔΔ;
        ΔⲆ[249][_r.ΔⵠΔ] = jb.ΔᐃⵠΔⵠΔΔ;
        ΔⲆ[1045] = jb.ⵠⵠᐃΔⵠⲆⲆ;
        ΔⲆ[89] = [];
        ΔⲆ[89][_r.ΔΔⵠ] = jb.ᐃⵠⵠⲆⵠⲆΔ;
        ΔⲆ[89][_r.ΔⵠΔ] = jb.ⵠᐃᐃᐃΔᐃᐃ;
        ΔⲆ[92] = [];
        ΔⲆ[92][_r.ΔΔⵠ] = jb.ⵠⵠⵠᐃⵠΔᐃ;
        ΔⲆ[92][_r.ΔⵠΔ] = jb.ⲆΔⵠΔΔΔΔ;
        ΔⲆ[247] = [];
        ΔⲆ[247][_r.ΔΔⵠ] = [jb.ⵠⵠⵠⵠᐃⵠⲆ, jb.ⵠΔᐃΔΔⵠΔ, jb.ⵠⵠᐃΔΔΔⵠ, jb.ΔⵠⵠΔΔⲆᐃ, jb.ⲆⵠⵠⲆⲆᐃΔ, jb.ΔⵠⲆⵠᐃⵠᐃ, jb.ⲆΔᐃΔⵠⲆⵠ, jb.ΔⵠᐃΔⵠⲆΔ, jb.ⵠⵠᐃᐃⵠᐃⲆ];
        ΔⲆ[247][_r.ΔⵠΔ] = [jb.ⵠⲆᐃΔⵠⲆⵠ, jb.ᐃΔΔⲆⲆⲆΔ, jb.ᐃΔⵠΔⲆᐃⵠ, jb.ᐃΔᐃⵠⲆᐃᐃ, jb.ⵠΔⲆⵠᐃΔⲆ, jb.ΔⲆⵠⲆᐃᐃⵠ, jb.ΔⲆᐃⲆΔⵠΔ, jb.ΔⵠᐃΔⵠⲆΔ, jb.ᐃⵠᐃⲆⵠⲆⲆ];
        ΔⲆ[93] = [];
        ΔⲆ[93][_r.ΔΔⵠ] = jb.ΔᐃⲆΔΔⲆᐃ;
        ΔⲆ[93][_r.ΔⵠΔ] = jb.ⲆᐃⵠᐃⲆᐃΔ;
        ΔⲆ[225] = [];
        ΔⲆ[225][_r.ΔΔⵠ] = jb.ᐃⵠⲆᐃΔΔⲆ;
        ΔⲆ[225][_r.ΔⵠΔ] = jb.ⲆΔⲆⵠⵠᐃⲆ;
        ΔⲆ[226] = [];
        ΔⲆ[226][_r.ΔΔⵠ] = jb.ⲆⲆⵠⵠⲆᐃⲆ;
        ΔⲆ[226][_r.ΔⵠΔ] = jb.ⲆⲆΔⵠⲆⲆⵠ;
        ΔⲆ[24] = [];
        ΔⲆ[24][_r.ΔΔⵠ] = jb.ᐃⲆΔⵠΔΔΔ;
        ΔⲆ[24][_r.ΔⵠΔ] = jb.ᐃⵠᐃΔᐃⲆᐃ;
        ΔⲆ[88] = [];
        ΔⲆ[88][_r.ΔΔⵠ] = jb.ΔⵠⵠΔⲆΔⵠⲆⵠ;
        ΔⲆ[88][_r.ΔⵠΔ] = jb.ⵠⵠΔⵠⲆⵠⲆⵠⲆ;
        ΔⲆ[87] = [];
        ΔⲆ[87][_r.ΔΔⵠ] = jb.ᐃᐃΔⲆᐃⲆⲆΔⵠ;
        ΔⲆ[87][_r.ΔⵠΔ] = jb.ᐃⲆⵠΔⵠⲆⲆΔⲆ;
        ΔⲆ[82] = [];
        ΔⲆ[82][_r.ΔΔⵠ] = jb.ⵠΔⲆⵠᐃⵠᐃ;
        ΔⲆ[82][_r.ΔⵠΔ] = jb.ΔⲆΔⵠⵠⲆⵠ;
        ΔⲆ[621] = [];
        ΔⲆ[621][_r.ΔΔⵠ] = [];
        ΔⲆ[621][_r.ΔⵠΔ] = [];
        ΔⲆ[621][_r.ΔΔⵠ].push(jb.ΔΔⵠⲆⵠᐃᐃᐃΔ);
        ΔⲆ[621][_r.ΔΔⵠ].push(jb.ᐃΔᐃⵠᐃⵠⵠΔⵠ);
        ΔⲆ[621][_r.ΔΔⵠ].push(jb.ⲆⲆᐃⵠⵠΔᐃⵠⲆ);
        ΔⲆ[621][_r.ΔⵠΔ].push(jb.ᐃⵠⲆⵠᐃᐃΔΔⵠ);
        ΔⲆ[621][_r.ΔⵠΔ].push(jb.ⵠᐃΔΔⵠᐃΔΔΔ);
        ΔⲆ[621][_r.ΔⵠΔ].push(jb.ΔΔΔⵠⵠΔⲆⵠⵠ);
        ΔⲆ[619] = [];
        ΔⲆ[619][_r.ΔΔⵠ] = [];
        ΔⲆ[619][_r.ΔⵠΔ] = [];
        ΔⲆ[619][_r.ΔΔⵠ].push(jb.ⵠⵠᐃⵠⲆⵠᐃΔΔ);
        ΔⲆ[619][_r.ΔΔⵠ].push(jb.ⵠᐃᐃΔΔⵠⵠⲆⵠ);
        ΔⲆ[619][_r.ΔΔⵠ].push(jb.ΔⲆᐃΔΔᐃᐃⲆΔ);
        ΔⲆ[619][_r.ΔⵠΔ].push(jb.ᐃⲆᐃᐃⵠⲆᐃⲆⵠ);
        ΔⲆ[619][_r.ΔⵠΔ].push(jb.ΔᐃᐃΔΔⲆⵠⲆΔ);
        ΔⲆ[619][_r.ΔⵠΔ].push(jb.ΔⲆᐃΔΔΔᐃⵠⲆ);
        ΔⲆ[620] = [];
        ΔⲆ[620][_r.ΔΔⵠ] = [];
        ΔⲆ[620][_r.ΔⵠΔ] = [];
        ΔⲆ[620][_r.ΔΔⵠ].push(jb.ⲆⲆⵠΔΔΔΔΔⲆ);
        ΔⲆ[620][_r.ΔΔⵠ].push(jb.ᐃⵠᐃᐃΔᐃᐃᐃⲆ);
        ΔⲆ[620][_r.ΔΔⵠ].push(jb.ⲆΔᐃΔⵠⵠΔΔⵠ);
        ΔⲆ[620][_r.ΔⵠΔ].push(jb.ᐃΔⲆⵠΔᐃᐃᐃΔ);
        ΔⲆ[620][_r.ΔⵠΔ].push(jb.ⵠⵠΔⲆⵠΔⵠᐃᐃ);
        ΔⲆ[620][_r.ΔⵠΔ].push(jb.ΔⲆⵠⵠᐃⲆⲆᐃᐃ);
        ΔᐃⵠⲆ.g = [];
        ΔᐃⵠⲆ.g[0] = [jb.ⵠΔⲆⲆᐃᐃΔ, jb.ⲆⲆΔᐃⵠⵠΔ];
        ΔᐃⵠⲆ.g[1] = ΔᐃⵠⲆ.g[0];
        ΔᐃⵠⲆ.g[2] = [jb.ᐃΔᐃⲆⲆᐃΔ, jb.ΔΔⵠⲆᐃᐃⵠ];
        ΔᐃⵠⲆ.m = [];
        ΔᐃⵠⲆ.m[0] = [jb.ᐃᐃⵠΔᐃΔΔ, jb.ⲆᐃᐃᐃⲆⲆᐃ];
        ΔᐃⵠⲆ.m[1] = ΔᐃⵠⲆ.m[0];
        ΔᐃⵠⲆ.m[2] = [jb.ⵠΔⲆᐃⵠⵠᐃ, jb.ΔⵠⵠⲆⲆΔΔ];
        ΔᐃⵠⲆ.la = [];
        ΔᐃⵠⲆ.la[0] = [jb.ⵠⲆᐃᐃⲆⵠⵠ, jb.ΔᐃᐃΔⵠᐃΔ];
        ΔᐃⵠⲆ.la[1] = ΔᐃⵠⲆ.la[0];
        ΔᐃⵠⲆ.la[2] = ΔᐃⵠⲆ.la[0];
        ΔᐃⵠⲆ.la[3] = ΔᐃⵠⲆ.la[0];
        ΔᐃⵠⲆ.la[4] = ΔᐃⵠⲆ.la[0];
        ΔᐃⵠⲆ.la[5] = ΔᐃⵠⲆ.la[0];
        ΔᐃⵠⲆ.s = [];
        ΔᐃⵠⲆ.s[0] = [jb.ⵠΔᐃⲆΔⲆΔ, jb.ΔΔⲆᐃΔᐃⲆ];
        ΔᐃⵠⲆ.s[1] = ΔᐃⵠⲆ.s[0];
        ΔᐃⵠⲆ.s[2] = [jb.ᐃⲆᐃᐃⵠΔᐃ, jb.ⵠⵠΔΔⲆⵠᐃ];
        ΔᐃⵠⲆ.p = [];
        ΔᐃⵠⲆ.p[0] = [jb.ΔⲆⲆᐃⲆⵠΔ, jb.ΔⲆⲆᐃⲆⵠΔ];
        ΔᐃⵠⲆ.a = [];
        ΔᐃⵠⲆ.a[0] = [jb.ⵠΔⵠΔᐃΔⵠ, jb.ⵠⵠᐃΔⲆⲆΔ];
        ΔᐃⵠⲆ.a[1] = ΔᐃⵠⲆ.a[0];
        ΔᐃⵠⲆ.a[2] = ΔᐃⵠⲆ.a[0];
        ΔᐃⵠⲆ.d = [];
        ΔᐃⵠⲆ.d[0] = [jb.ᐃΔΔⵠⵠᐃⵠ, jb.ΔⵠⲆΔⵠᐃΔ];
        ΔᐃⵠⲆ.d[1] = ΔᐃⵠⲆ.d[0];
        ΔᐃⵠⲆ.d[2] = ΔᐃⵠⲆ.d[0];
        ΔᐃⵠⲆ.re = [];
        ΔᐃⵠⲆ.re[0] = [jb.ⲆᐃΔⲆΔᐃⲆ, jb.ΔⲆⲆΔⵠⲆΔ];
        ΔᐃⵠⲆ.re[1] = ΔᐃⵠⲆ.re[0];
        ΔᐃⵠⲆ.re[2] = ΔᐃⵠⲆ.re[0];
        ΔᐃⵠⲆ.f = [];
        ΔᐃⵠⲆ.f[0] = [jb.ⲆⲆᐃⲆⵠᐃᐃ, jb.ⲆⲆᐃᐃⵠΔⲆ];
        ΔᐃⵠⲆ.f[1] = ΔᐃⵠⲆ.f[0];
        ΔᐃⵠⲆ.f[2] = ΔᐃⵠⲆ.f[0];
        ΔᐃⵠⲆ.isl = [];
        ΔᐃⵠⲆ.isl[0] = [jb.ΔⵠΔⵠᐃᐃⲆ, jb.ⲆΔⲆᐃⲆⵠⵠ];
        ΔᐃⵠⲆ.isl[1] = ΔᐃⵠⲆ.isl[0];
        ΔᐃⵠⲆ.isl[2] = ΔᐃⵠⲆ.isl[0];
        ΔᐃⵠⲆ.c = [];
        ΔᐃⵠⲆ.c[0] = [jb.ⲆᐃᐃᐃΔᐃᐃ, jb.ᐃΔⲆⲆΔᐃΔ];
        ΔᐃⵠⲆ.c[1] = ΔᐃⵠⲆ.c[0];
        ΔᐃⵠⲆ.c[2] = ΔᐃⵠⲆ.c[0];
        ΔᐃⵠⲆ.wtb = [];
        ΔᐃⵠⲆ.wtb[0] = [jb.ΔΔᐃΔⲆΔⲆ, jb.ⵠⲆⵠⲆⲆΔⵠ];
        ΔᐃⵠⲆ.PIRANHA = [jb.ⵠⵠⵠᐃΔⵠᐃ, jb.ⵠᐃᐃᐃⲆΔⲆ];
        ΔᐃⵠⲆ.KRAKEN = [jb.ⵠⵠⲆᐃⲆᐃᐃ, jb.ᐃΔᐃⲆⲆᐃⵠ];
        ΔᐃⵠⲆ.FOX = [jb.ΔΔΔⲆΔΔΔ, jb.ⵠᐃⵠᐃⲆⵠᐃ];
        ΔᐃⵠⲆ.WOLF = [jb.ᐃᐃΔΔⵠⵠΔ, jb.ⲆΔΔⲆⵠΔᐃ];
        ΔᐃⵠⲆ.SPIDER = [jb.ⵠΔⲆᐃⲆΔᐃ, jb.ⵠᐃⵠⲆᐃᐃΔ];
        ΔᐃⵠⲆ.BEAR = [jb.ΔΔⲆⵠⵠΔⲆ, jb.ⵠΔΔΔⵠⲆᐃ];
        ΔᐃⵠⲆ.CAVE = [jb.ⲆⵠⵠⵠΔⲆⵠ, jb.ᐃⵠΔΔΔΔⲆ];
        ΔᐃⵠⲆ.MAP = [jb.ⵠΔⲆⵠᐃⲆΔ, jb.ΔΔᐃΔΔⲆⲆ];
        ΔᐃⵠⲆ.FOREST = [jb.ⵠᐃΔⵠᐃᐃᐃ, jb.ᐃᐃⵠⵠᐃⲆⵠ];
        ΔᐃⵠⲆ.WINTER = [jb.Ⲇᐃⵠⵠⵠⵠᐃ, jb.ᐃΔᐃⵠⵠⲆⲆ];
        ΔᐃⵠⲆ.DESERT = [jb.ⲆᐃΔⲆⲆΔⵠ, jb.ⵠᐃΔⲆᐃⵠⵠ];
        ΔᐃⵠⲆ.LAVA = [jb.ᐃΔⵠⵠⲆΔⲆ, jb.ᐃⲆⵠΔⵠⲆΔ];
        for (var c in ΔᐃⵠⲆ) {
            for (var d = ΔᐃⵠⲆ[c], e = 0; e < d.length; e++) {
                var f = d[e];
                if (f.ΔⵠᐃΔⲆⲆⵠ !== undefined) {
                    f.ΔⵠᐃΔⲆⲆⵠ();
                } else if (f.length > 0) {
                    for (var g = 0; g < f.length; g++) {
                        if (f[g].ΔⵠᐃΔⲆⲆⵠ !== qs) {
                            f[g].ΔⵠᐃΔⲆⲆⵠ();
                        }
                    }
                }
            }
        }
        console.log(od, _a);
    }
    function Sm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 440;
        d.height = a * 388;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        id(e, a * 220, a * 201, a * 170.41713528867922);
        Xb(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        id(e, a * 220, a * 201, a * 170.41713528867922);
        Xb(e, c[1], c[2], a * 6);
        id(e, a * 220, a * 201, a * 130);
        Xb(e, c[11], c[2], a * 6);
        id(e, a * 222, a * 199, a * 120.74767078498864);
        Xb(e, Gi, c[3], a * 40);
        id(e, a * 220, a * 200, a * 95.44108130150245);
        Xb(e, Vs, c[2], a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        id(e, a * 63, a * 136, a * 49.193495504995376);
        Xb(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        id(e, a * 63, a * 136, a * 49.193495504995376);
        Xb(e, c[8], c[2], a * 4);
        id(e, a * 63, a * 137, a * 25.632011235952593);
        Xb(e, c[7], c[2], a * 4);
        return d;
    }
    function Qm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 81;
        d.height = a * 77;
        e.translate(0, a * 10);
        e.scale(0.2, 0.2);
        e.translate(0, a * -30);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 36.5, a * 278.0625);
            e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
            e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
            e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
            e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
            e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
            e.closePath();
            Xb(e, b[0], b[3], a * 50);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        Xb(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 214.5, a * 124.0625);
        e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
        e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
        e.closePath();
        Xb(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 145.0625);
        e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
        e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
        e.closePath();
        Xb(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103.5, a * 169.0625);
        e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
        e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
        e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
        e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
        e.closePath();
        Xb(e, b[2], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 313.0625);
        e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
        e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
        e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
        e.closePath();
        Xb(e, b[1]);
        e.scale(3, 3);
        e.translate(15, a * 10);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 32);
            e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
            e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
            e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
            Xb(e, Jt, b[3], a * 28);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 56, a * 6);
            e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
            e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
            e.closePath();
            Xb(e, b[3], b[3], a * 28);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 32);
        e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
        e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
        e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
        Xb(e, undefined, b[1], a * 17);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 6);
        e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
        e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
        e.closePath();
        Xb(e, b[1], b[1], a * 17);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 32);
        e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
        e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
        e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
        Xb(e, undefined, b[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 6);
        e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
        e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
        e.closePath();
        Xb(e, b[2], b[2], a * 10);
        return d;
    }
    function _m(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.globalAlpha = 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        Xb(e, c[0]);
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        Xb(e, c[1], c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 214.5, a * 124.0625);
        e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
        e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
        e.closePath();
        Xb(e, undefined, c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 145.0625);
        e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
        e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
        e.closePath();
        Xb(e, Gi, c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103.5, a * 169.0625);
        e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
        e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
        e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
        e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
        e.closePath();
        Xb(e, c[3], c[2], a * 19);
        id(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
        Xb(e, c[4]);
        id(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
        Xb(e, c[4]);
        id(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
        Xb(e, c[4]);
        id(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
        Xb(e, c[4]);
        id(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
        Xb(e, c[4]);
        id(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
        Xb(e, c[4]);
        id(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
        Xb(e, c[4]);
        id(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
        Xb(e, c[4]);
        id(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
        Xb(e, c[4]);
        id(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
        Xb(e, c[4]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 313.0625);
        e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
        e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
        e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
        e.closePath();
        Xb(e, c[5]);
        return d;
    }
    const Fm = 16224700;
    const Rm = 16224700 .ⲆⲆⲆΔΔⵠᐃ;
    const jm = `const Ⲇᐃᐃⵠⵠ = (typeof ⲆᐃⵠᐃΔΔⲆ === "${Rm}") ? 1 : 0; return Ⲇᐃᐃⵠⵠ;`;
    function Gm(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 496;
        e.height = b * 520;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 10);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
        f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
        f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
        f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
        f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
        f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
        f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
        f.closePath();
        Xb(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, b * -10);
        id(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
        Xb(f, d[5], vg, b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 10);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
        f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
        f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
        f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
        f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
        f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
        f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
        f.closePath();
        Xb(f, d[0]);
        f.globalAlpha = 1;
        var g = function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 496;
            c.height = a * 520;
            d.globalAlpha = 1;
            d.translate(0, a * -10);
            id(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
            Xb(d, b[1], b[2], a * 14);
            d.globalCompositeOperation = "destination-out";
            id(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
            Xb(d, b[0], b[0], a * 14);
            d.globalCompositeOperation = "source-over";
            return c;
        }(b, d);
        f.drawImage(g, 0, 0);
        f.translate(0, b * -10);
        id(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
        Xb(f, Pg, d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
        f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
        f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
        f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
        f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
        f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
        f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
        f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
        f.closePath();
        Xb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
        f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
        f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
        f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
        f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
        f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
        f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
        f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
        f.closePath();
        Xb(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
        f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
        f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
        f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
        f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
        f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
        f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
        f.closePath();
        Xb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
        f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
        f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
        f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
        f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
        f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
        f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
        f.closePath();
        Xb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
        f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
        f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
        f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
        f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
        f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
        f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
        f.closePath();
        Xb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
        f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
        f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
        f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
        f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
        f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
        f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
        f.closePath();
        Xb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
        f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
        f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
        f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
        f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
        f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
        f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
        f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
        f.closePath();
        Xb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
        f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
        f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
        f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
        f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
        f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
        f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
        f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
        f.closePath();
        Xb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
        f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
        f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
        f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
        f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
        f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
        f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
        f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
        f.closePath();
        Xb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
        f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
        f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
        f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
        f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
        f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
        f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
        f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
        f.closePath();
        Xb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
        f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
        f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
        f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
        f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
        f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
        f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
        f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
        f.closePath();
        Xb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
        f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
        f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
        f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
        f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
        f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
        f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
        f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
        f.closePath();
        Xb(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
        f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
        f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
        f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
        f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
        f.closePath();
        Xb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
        f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
        f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
        f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
        f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
        f.closePath();
        Xb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
        f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
        f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
        f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
        f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
        f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
        f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
        f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
        f.closePath();
        Xb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
        f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
        f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
        f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
        f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
        f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
        f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
        f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
        f.closePath();
        Xb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
        f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
        f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
        f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
        f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
        f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
        f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
        f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
        f.closePath();
        Xb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
        f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
        f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
        f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
        f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
        f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
        f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
        f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
        f.closePath();
        Xb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
        f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
        f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
        f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
        f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
        f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
        f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
        f.closePath();
        Xb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
        f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
        f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
        f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
        f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
        f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
        f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
        f.closePath();
        Xb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
        f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
        f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
        f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
        f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
        f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
        f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
        f.closePath();
        Xb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
        f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
        f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
        f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
        f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
        f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
        f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
        f.closePath();
        Xb(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
        f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
        f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
        f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
        f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
        f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
        f.closePath();
        Xb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
        f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
        f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
        f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
        f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
        f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
        f.closePath();
        Xb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
        f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
        f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
        f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
        f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
        f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
        f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
        f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
        f.closePath();
        Xb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
        f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
        f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
        f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
        f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
        f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
        f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
        f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
        f.closePath();
        Xb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
        f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
        f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
        f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
        f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
        f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
        f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
        f.closePath();
        Xb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
        f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
        f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
        f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
        f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
        f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
        f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
        f.closePath();
        Xb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
        f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
        f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
        f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
        f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
        f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
        f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
        f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
        f.closePath();
        Xb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
        f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
        f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
        f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
        f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
        f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
        f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
        f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
        f.closePath();
        Xb(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
        f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
        f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
        f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
        f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
        f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
        f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
        f.closePath();
        Xb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
        f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
        f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
        f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
        f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
        f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
        f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
        f.closePath();
        Xb(f, d[4], d[2], b * 12);
        return e;
    }
    function Lm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 372;
        d.height = a * 358;
        e.translate(a * 0, a * 10);
        e.globalAlpha = b ? 0.2 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
        e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
        e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
        e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
        e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
        e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
        e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
        e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
        e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
        e.closePath();
        Xb(e, c[0], c[0], a * 10);
        e.translate(a * 0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
        e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
        e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
        e.closePath();
        Xb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
        e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
        e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
        e.closePath();
        Xb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
        e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
        e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
        e.closePath();
        Xb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
        e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
        e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
        e.closePath();
        Xb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58.000030517578125, a * 122.3125);
        e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
        e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
        e.closePath();
        Xb(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 310.0000305175781, a * 127.3125);
        e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
        e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
        e.closePath();
        Xb(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
        e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
        e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
        e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
        e.closePath();
        Xb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
        e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
        e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
        e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
        e.closePath();
        Xb(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
        e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
        e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
        e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
        e.closePath();
        Xb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
        e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
        e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
        e.closePath();
        Xb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
        e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
        e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
        e.closePath();
        Xb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
        e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
        e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
        e.closePath();
        Xb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
        e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
        e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
        e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
        e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
        e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
        e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
        e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
        e.closePath();
        Xb(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
        e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
        e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
        e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
        e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
        e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
        e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
        e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
        e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
        e.closePath();
        Xb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
        e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
        e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
        e.closePath();
        Xb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
        e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
        e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
        e.closePath();
        Xb(e, c[1], c[1], a * 1);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
        e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
        e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
        e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
        e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
        e.closePath();
        Xb(e, c[2], c[3], a * 10);
        id(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
        Xb(e, c[4], c[5], a * 1);
        id(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
        Xb(e, c[4], c[5], a * 1);
        id(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
        Xb(e, c[4], c[5], a * 1);
        id(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
        Xb(e, c[4], c[5], a * 1);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
        e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
        e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
        e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
        e.closePath();
        Xb(e, c[4], c[5], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
        e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
        e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
        e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
        e.closePath();
        Xb(e, c[6]);
        return d;
    }
    function Wm(b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 600;
        var f = b * 22;
        var g = b * 4;
        var a = b * 4;
        c.width = e;
        c.height = f;
        Zb(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
        Xb(d, null, "#BBE8EF", a);
        return c;
    }
    function Om() {
        new Date().getTime();
        Em();
        Dm();
        ΔⲆ[540] = [];
        ΔⲆ[540][_r.ΔΔⵠ] = [];
        ΔⲆ[540][_r.ΔⵠΔ] = [];
        for (var a = 0; a < _r.ΔⲆΔΔΔⵠΔ; a++) {
            ΔⲆ[540][_r.ΔΔⵠ].push(sq(ec(1, 4 + a, "#59B8CE")));
            ΔⲆ[540][_r.ΔⵠΔ].push(sq(ec(1, 4 + a, "#90DDD9")));
        }
        ΔⲆ[470] = [];
        ΔⲆ[470][_r.ΔΔⵠ] = [];
        ΔⲆ[470][_r.ΔⵠΔ] = [];
        for (a = 0; _r.ⲆⵠⵠⲆⵠⵠᐃ > a; a++) {
            ΔⲆ[470][_r.ΔΔⵠ].push(sq(ec(1, 4 + a, "#fff")));
            ΔⲆ[470][_r.ΔⵠΔ].push(sq(ec(1, 4 + a, "#fff")));
        }
        ΔⲆ[471] = [];
        ΔⲆ[471][_r.ΔΔⵠ] = [];
        ΔⲆ[471][_r.ΔⵠΔ] = [];
        for (a = 0; _r.ⲆⵠⵠⲆⵠⵠᐃ > a; a++) {
            ΔⲆ[471][_r.ΔΔⵠ].push(sq(ec(1, 6 + a, "#DDCD8A")));
            ΔⲆ[471][_r.ΔⵠΔ].push(sq(ec(1, 6 + a, "#155E57")));
        }
        ΔⲆ[942] = [];
        ΔⲆ[942][_r.ΔΔⵠ] = [];
        ΔⲆ[942][_r.ΔⵠΔ] = [];
        for (a = 0; _r.ⵠⵠⵠⲆᐃⲆⲆ > a; a++) {
            ΔⲆ[942][_r.ΔΔⵠ].push(sq(ec(1, 4 + a, "#353326")));
            ΔⲆ[942][_r.ΔⵠΔ].push(sq(ec(1, 4 + a, "#1D2526")));
        }
        ΔⲆ[201] = [];
        ΔⲆ[201][_r.ΔΔⵠ] = sq(bd(1.5, 0, ["#ee71a9"]));
        ΔⲆ[201][_r.ΔⵠΔ] = sq(bd(1.5, 0, ["#ee71a9"]));
        ΔⲆ[872] = [ΔⲆ[201]];
        ΔⲆ[872][1] = [];
        ΔⲆ[872][2] = [];
        ΔⲆ[872][3] = [];
        ΔⲆ[872][4] = [];
        ΔⲆ[872][1][_r.ΔΔⵠ] = sq(bd(1.5, 0, ["#e2d63b"]));
        ΔⲆ[872][1][_r.ΔⵠΔ] = sq(bd(1.5, 0, ["#e2d63b"]));
        ΔⲆ[872][2][_r.ΔΔⵠ] = sq(bd(1.5, 0, ["#309cbd"]));
        ΔⲆ[872][2][_r.ΔⵠΔ] = sq(bd(1.5, 0, ["#309cbd"]));
        ΔⲆ[872][3][_r.ΔΔⵠ] = sq(bd(1.5, 0, ["#cd232d"]));
        ΔⲆ[872][3][_r.ΔⵠΔ] = sq(bd(1.5, 0, ["#cd232d"]));
        ΔⲆ[872][4][_r.ΔΔⵠ] = sq(bd(1.5, 0, ["#42b672"]));
        ΔⲆ[872][4][_r.ΔⵠΔ] = sq(bd(1.5, 0, ["#42b672"]));
        if (Z.ⵠᐃⲆᐃᐃΔⵠ("cti", Gf.location.href)) {
            document.getElementById("version").innerHTML += "[CTI]";
        } else {
            sq = function (a) {
                a.loaded = 1;
                return a;
            };
        }
        ΔⲆ[797] = sq(function () {
            var a = document.createElement("canvas");
            var b = a.getContext("2d");
            a.width = 460;
            a.height = 220;
            b.fillStyle = "#3a2a0d";
            b.fillRect(0, 0, a.width, a.height);
            b.lineWidth = 4;
            b.beginPath();
            b.strokeStyle = "#513810";
            for (var c = 20; c < 220; c += 20) {
                b.moveTo(0, c);
                b.lineTo(460, c);
                b.closePath();
                b.stroke();
            }
            return a;
        }());
        ΔⲆ[108] = [];
        ΔⲆ[108][_r.ΔΔⵠ] = [];
        ΔⲆ[108][_r.ΔⵠΔ] = [];
        ΔⲆ[108][_r.ΔΔⵠ].push(sq(fu(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ΔⲆ[108][_r.ΔΔⵠ].push(sq(fu(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ΔⲆ[108][_r.ΔΔⵠ].push(sq(fu(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ΔⲆ[108][_r.ΔⵠΔ].push(sq(fu(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ΔⲆ[108][_r.ΔⵠΔ].push(sq(fu(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ΔⲆ[108][_r.ΔⵠΔ].push(sq(fu(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ΔⲆ[111] = [];
        ΔⲆ[111][_r.ΔΔⵠ] = [];
        ΔⲆ[111][_r.ΔⵠΔ] = [];
        ΔⲆ[111][_r.ΔΔⵠ].push(sq(hu(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ΔⲆ[111][_r.ΔΔⵠ].push(sq(hu(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ΔⲆ[111][_r.ΔΔⵠ].push(sq(hu(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ΔⲆ[111][_r.ΔⵠΔ].push(sq(hu(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
        ΔⲆ[111][_r.ΔⵠΔ].push(sq(hu(1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
        ΔⲆ[111][_r.ΔⵠΔ].push(sq(hu(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
        ΔⲆ[112] = [];
        ΔⲆ[112][_r.ΔΔⵠ] = [];
        ΔⲆ[112][_r.ΔⵠΔ] = [];
        ΔⲆ[112][_r.ΔΔⵠ].push(sq(wu(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ΔⲆ[112][_r.ΔΔⵠ].push(sq(wu(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ΔⲆ[112][_r.ΔΔⵠ].push(sq(wu(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ΔⲆ[112][_r.ΔⵠΔ].push(sq(wu(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ΔⲆ[112][_r.ΔⵠΔ].push(sq(wu(0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ΔⲆ[112][_r.ΔⵠΔ].push(sq(wu(0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ΔⲆ[239] = [];
        ΔⲆ[239][_r.ΔΔⵠ] = jb.ⵠΔⵠΔⲆⲆᐃ;
        ΔⲆ[239][_r.ΔⵠΔ] = jb.ΔⵠΔⲆΔᐃᐃ;
        ΔⲆ[286] = [];
        ΔⲆ[286][_r.ΔΔⵠ] = sq(Vt(0.6, ["#0d1b1c"]));
        ΔⲆ[286][_r.ΔⵠΔ] = sq(Vt(0.6, ["#030d14"]));
        ΔⲆ[793] = [];
        ΔⲆ[793][_r.ΔΔⵠ] = sq(Kt(0.6, ["#2a2938", "#242330"]));
        ΔⲆ[793][_r.ΔⵠΔ] = sq(Kt(0.6, ["#1b1e30", "#161921"]));
        ΔⲆ[820] = [];
        ΔⲆ[820][_r.ΔΔⵠ] = sq(md(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
        ΔⲆ[820][_r.ΔⵠΔ] = sq(md(0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
        ΔⲆ[821] = [];
        ΔⲆ[821][_r.ΔΔⵠ] = sq(cd(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
        ΔⲆ[821][_r.ΔⵠΔ] = sq(cd(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
        ΔⲆ[822] = [];
        ΔⲆ[822][_r.ΔΔⵠ] = sq(Gt(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
        ΔⲆ[822][_r.ΔⵠΔ] = sq(Gt(0.4, ["#030d14", "#11635e", "#02373e"]));
        ΔⲆ[823] = sq(gd(0.6, ["#BB0000"]));
        ΔⲆ[824] = sq(gd(0.6, ["#DBE71C"]));
        ΔⲆ[825] = sq(gd(0.6, ["#00BB00"]));
        ΔⲆ[109] = [];
        ΔⲆ[109][_r.ΔΔⵠ] = [];
        ΔⲆ[109][_r.ΔⵠΔ] = [];
        ΔⲆ[109][_r.ΔΔⵠ].push(Pt(1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], Mr, 0));
        ΔⲆ[109][_r.ΔΔⵠ].push(Pt(1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], true, 0));
        ΔⲆ[109][_r.ΔΔⵠ].push(Pt(0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], false, 0));
        ΔⲆ[109][_r.ΔΔⵠ].push(Pt(0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], true, 0));
        ΔⲆ[109][_r.ΔΔⵠ].push(Pt(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], el, 0));
        ΔⲆ[109][_r.ΔΔⵠ].push(Pt(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], true, 0));
        ΔⲆ[109][_r.ΔⵠΔ].push(Pt(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], zj, 0));
        ΔⲆ[109][_r.ΔⵠΔ].push(Pt(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], Ho, 0));
        ΔⲆ[109][_r.ΔⵠΔ].push(Pt(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], ie, 0));
        ΔⲆ[109][_r.ΔⵠΔ].push(Pt(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], true, 0));
        ΔⲆ[109][_r.ΔⵠΔ].push(Pt(0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], Br, 0));
        ΔⲆ[109][_r.ΔⵠΔ].push(Pt(0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], sj, 0));
        ΔⲆ[307] = [];
        ΔⲆ[307][_r.ΔΔⵠ] = [];
        ΔⲆ[307][_r.ΔⵠΔ] = [];
        ΔⲆ[307][_r.ΔΔⵠ].push(sq(Xt($t(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], false), ΔⲆ[109][_r.ΔΔⵠ][0])));
        ΔⲆ[307][_r.ΔΔⵠ].push(sq(Xt($t(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], true), ΔⲆ[109][_r.ΔΔⵠ][1])));
        ΔⲆ[307][_r.ΔⵠΔ].push(sq(Xt($t(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], Yn), ΔⲆ[109][_r.ΔⵠΔ][0])));
        ΔⲆ[307][_r.ΔⵠΔ].push(sq(Xt($t(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], true), ΔⲆ[109][_r.ΔⵠΔ][1])));
        ΔⲆ[307][_r.ΔΔⵠ].push(sq(Xt($t(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], gj), ΔⲆ[109][_r.ΔΔⵠ][2])));
        ΔⲆ[307][_r.ΔΔⵠ].push(sq(Xt($t(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], zq), ΔⲆ[109][_r.ΔΔⵠ][2])));
        ΔⲆ[307][_r.ΔⵠΔ].push(sq(Xt($t(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], ie), ΔⲆ[109][_r.ΔⵠΔ][2])));
        ΔⲆ[307][_r.ΔⵠΔ].push(sq(Xt($t(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], sj), ΔⲆ[109][_r.ΔⵠΔ][3])));
        ΔⲆ[109][_r.ΔΔⵠ][5] = sq(ΔⲆ[109][_r.ΔΔⵠ][5]);
        ΔⲆ[109][_r.ΔΔⵠ][4] = sq(ΔⲆ[109][_r.ΔΔⵠ][4]);
        ΔⲆ[109][_r.ΔΔⵠ][3] = sq(ΔⲆ[109][_r.ΔΔⵠ][3]);
        ΔⲆ[109][_r.ΔΔⵠ][2] = sq(ΔⲆ[109][_r.ΔΔⵠ][2]);
        ΔⲆ[109][_r.ΔΔⵠ][1] = sq(ΔⲆ[109][_r.ΔΔⵠ][1]);
        ΔⲆ[109][_r.ΔΔⵠ][0] = sq(ΔⲆ[109][_r.ΔΔⵠ][0]);
        ΔⲆ[109][_r.ΔⵠΔ][5] = sq(ΔⲆ[109][_r.ΔⵠΔ][5]);
        ΔⲆ[109][_r.ΔⵠΔ][4] = sq(ΔⲆ[109][_r.ΔⵠΔ][4]);
        ΔⲆ[109][_r.ΔⵠΔ][3] = sq(ΔⲆ[109][_r.ΔⵠΔ][3]);
        ΔⲆ[109][_r.ΔⵠΔ][2] = sq(ΔⲆ[109][_r.ΔⵠΔ][2]);
        ΔⲆ[109][_r.ΔⵠΔ][1] = sq(ΔⲆ[109][_r.ΔⵠΔ][1]);
        ΔⲆ[109][_r.ΔⵠΔ][0] = sq(ΔⲆ[109][_r.ΔⵠΔ][0]);
        ΔⲆ[8] = [];
        ΔⲆ[8][_r.ΔΔⵠ] = sq(ad(4, Zt(0.75, Zr, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
        ΔⲆ[8][_r.ΔⵠΔ] = sq(ad(4, Zt(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
        ΔⲆ[1] = [];
        ΔⲆ[1][_r.ΔΔⵠ] = sq(ad(4, Zt(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        ΔⲆ[1][_r.ΔⵠΔ] = sq(ad(4, Zt(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
        ΔⲆ[3] = [];
        ΔⲆ[3][_r.ΔΔⵠ] = sq(ad(4, Zt(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        ΔⲆ[3][_r.ΔⵠΔ] = sq(ad(4, Zt(0.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
        ΔⲆ[4] = [];
        ΔⲆ[4][_r.ΔΔⵠ] = sq(ad(4, Zt(0.75, sj, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        ΔⲆ[4][_r.ΔⵠΔ] = sq(ad(4, Zt(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
        ΔⲆ[31] = [];
        ΔⲆ[31][_r.ΔΔⵠ] = sq(ad(4, Zt(0.75, Hj, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        ΔⲆ[31][_r.ΔⵠΔ] = sq(ad(4, Zt(0.75, Mo, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
        ΔⲆ[9] = [];
        ΔⲆ[9][_r.ΔΔⵠ] = sq(ad(3, Ut(0.17, Ca, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
        ΔⲆ[9][_r.ΔⵠΔ] = sq(ad(3, Ut(0.17, zq, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
        ΔⲆ[199] = [];
        ΔⲆ[199][_r.ΔΔⵠ] = sq(ad(3, eu(0.32, hj, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
        ΔⲆ[199][_r.ΔⵠΔ] = sq(ad(3, eu(0.42, oj, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
        ΔⲆ[57] = [];
        ΔⲆ[57][_r.ΔΔⵠ] = sq(ad(3, _t(0.4, true, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
        ΔⲆ[57][_r.ΔⵠΔ] = sq(ad(3, _t(0.4, Gr, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
        ΔⲆ[0] = [];
        ΔⲆ[0][_r.ΔΔⵠ] = sq(ad(3, St(0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
        ΔⲆ[0][_r.ΔⵠΔ] = sq(ad(3, St(0.4, Zr, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
        ΔⲆ[5] = [];
        ΔⲆ[5][_r.ΔΔⵠ] = sq(ad(3, gu(0.4, true, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
        ΔⲆ[5][_r.ΔⵠΔ] = sq(ad(3, gu(0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
        ΔⲆ[6] = [];
        ΔⲆ[6][_r.ΔΔⵠ] = sq(ad(3, nu(0.4, oj, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
        ΔⲆ[6][_r.ΔⵠΔ] = sq(ad(3, nu(0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
        ΔⲆ[30] = [];
        ΔⲆ[30][_r.ΔΔⵠ] = sq(ad(3, iu(0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
        ΔⲆ[30][_r.ΔⵠΔ] = sq(ad(3, iu(0.4, re, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
        ΔⲆ[285] = [];
        ΔⲆ[285][_r.ΔΔⵠ] = [];
        ΔⲆ[285][_r.ΔⵠΔ] = [];
        ΔⲆ[285][_r.ΔΔⵠ].push(sq(rc(0.9, 0, ["#0d4f35"], 0)));
        ΔⲆ[285][_r.ΔΔⵠ].push(sq(rc(0.9, 0, ["#0d4f35"], 1)));
        ΔⲆ[285][_r.ΔΔⵠ].push(sq(rc(0.9, 0, ["#0d4f35"], 2)));
        ΔⲆ[285][_r.ΔⵠΔ].push(sq(rc(0.9, 0, ["#053339"], 0)));
        ΔⲆ[285][_r.ΔⵠΔ].push(sq(rc(0.9, 0, ["#053339"], 1)));
        ΔⲆ[285][_r.ΔⵠΔ].push(sq(rc(0.9, 0, ["#053339"], 2)));
        ΔⲆ[285][_r.ΔΔⵠ].push(sq(uu(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
        ΔⲆ[285][_r.ΔΔⵠ].push(sq(uu(0.8, ["#292002", "#ba930e", "#6d5704"])));
        ΔⲆ[285][_r.ΔⵠΔ].push(sq(uu(0.9, ["#052919", "#0a4738", "#06321f"])));
        ΔⲆ[285][_r.ΔⵠΔ].push(sq(uu(0.8, ["#052918", "#08491c", "#063417"])));
        ΔⲆ[183] = [];
        ΔⲆ[183][_r.ΔΔⵠ] = sq(ad(Math.PI / 2, pc(0.25, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
        ΔⲆ[183][_r.ΔⵠΔ] = sq(ad(Math.PI / 2, pc(0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
        ΔⲆ[803] = [];
        ΔⲆ[803].push(sq(Bc(0.25, ["#44301b", "#57442a", "#523e26"], 0)));
        ΔⲆ[803].push(sq(Bc(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
        ΔⲆ[803].push(sq(Bc(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
        ΔⲆ[802] = [];
        ΔⲆ[802][_r.ΔΔⵠ] = [];
        ΔⲆ[802][_r.ΔⵠΔ] = [];
        ΔⲆ[802][_r.ΔΔⵠ].push(sq(ad(Math.PI / 2, yc(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
        ΔⲆ[802][_r.ΔⵠΔ].push(sq(ad(Math.PI / 2, yc(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
        ΔⲆ[802][_r.ΔΔⵠ].push(sq(ad(Math.PI / 2, yc(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
        ΔⲆ[802][_r.ΔⵠΔ].push(sq(ad(Math.PI / 2, yc(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
        ΔⲆ[802][_r.ΔΔⵠ].push(sq(ad(Math.PI / 2, yc(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
        ΔⲆ[802][_r.ΔⵠΔ].push(sq(ad(Math.PI / 2, yc(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
        ΔⲆ[802][_r.ΔΔⵠ].push(sq(ad(Math.PI / 2, yc(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
        ΔⲆ[802][_r.ΔⵠΔ].push(sq(ad(Math.PI / 2, yc(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
        ΔⲆ[110] = [];
        ΔⲆ[110][_r.ΔΔⵠ] = [sq(yu(1.2, true, ["#0e3022", "#0b8052", "#077b49"]))];
        ΔⲆ[110][_r.ΔⵠΔ] = [sq(yu(1.2, ho, ["#030d14", "#084442", "#0a4049"]))];
        ΔⲆ[623] = [];
        ΔⲆ[623][_r.ΔΔⵠ] = sq(yu(0.8, dr, ["#0e3022", "#68622D", "#665329"]));
        ΔⲆ[623][_r.ΔⵠΔ] = sq(yu(0.8, true, ["#030d14", "#0F3A24", "#083326"]));
        ΔⲆ[189] = [];
        ΔⲆ[189][_r.ΔΔⵠ] = sq(vp(0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
        ΔⲆ[189][_r.ΔⵠΔ] = sq(vp(0.5, Pj, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
        ΔⲆ[192] = [];
        ΔⲆ[192][_r.ΔΔⵠ] = sq(pd(0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
        ΔⲆ[192][_r.ΔⵠΔ] = sq(pd(0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
        ΔⲆ[194] = [];
        ΔⲆ[194][_r.ΔΔⵠ] = sq(Vm(0.5, Pj, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
        ΔⲆ[194][_r.ΔⵠΔ] = sq(Vm(0.5, true, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
        ΔⲆ[287] = [];
        ΔⲆ[287][_r.ΔΔⵠ] = sq(yu(0.8, zq, ["#1b170c", "#0b8052", "#077b49"]));
        ΔⲆ[287][_r.ΔⵠΔ] = sq(yu(0.8, true, ["#030d14", "#084442", "#0a4049"]));
        ΔⲆ[813] = [];
        ΔⲆ[813][_r.ΔΔⵠ] = sq(vp(0.5, Ho, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
        ΔⲆ[813][_r.ΔⵠΔ] = sq(vp(0.5, true, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
        ΔⲆ[839] = [];
        ΔⲆ[839][_r.ΔΔⵠ] = sq(pd(0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
        ΔⲆ[839][_r.ΔⵠΔ] = sq(pd(0.5, Dk, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
        ΔⲆ[869] = [];
        ΔⲆ[869][_r.ΔΔⵠ] = sq(Vm(0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
        ΔⲆ[869][_r.ΔⵠΔ] = sq(Vm(0.5, gq, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
        ΔⲆ[854] = [];
        ΔⲆ[854][_r.ΔΔⵠ] = sq(qm(0.45, y, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
        ΔⲆ[854][_r.ΔⵠΔ] = sq(qm(0.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
        ΔⲆ[859] = sq(qm(0.65, Ho, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
        ΔⲆ[294] = [];
        ΔⲆ[294][_r.ΔΔⵠ] = sq(ru(1.4, 0, ["#ac222a", "#e6636a"]));
        ΔⲆ[294][_r.ΔⵠΔ] = sq(ru(1.4, 0, ["#46195e", "#744188"]));
        ΔⲆ[288] = [];
        ΔⲆ[288][_r.ΔΔⵠ] = sq(Ht(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
        ΔⲆ[288][_r.ΔⵠΔ] = sq(Ht(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
        ΔⲆ[118] = [];
        ΔⲆ[118][_r.ΔΔⵠ] = sq($d(0.9, 0, ["#4d2d14", "#432516"]));
        ΔⲆ[118][_r.ΔⵠΔ] = sq($d(0.9, 0, ["#282404", "#0a0a01"]));
        ΔⲆ[113] = [];
        ΔⲆ[113][_r.ΔΔⵠ] = sq(Bt(0.9, 0, ["#4d2d14", "#432516"]));
        ΔⲆ[113][_r.ΔⵠΔ] = sq(Bt(0.9, 0, ["#282404", "#0a0a01"]));
        ΔⲆ[289] = [];
        ΔⲆ[289][_r.ΔΔⵠ] = sq(Ct(0.9, 0, ["#efd435"]));
        ΔⲆ[289][_r.ΔⵠΔ] = sq(Ct(0.9, 0, ["#fffabb"]));
        ΔⲆ[282] = [];
        ΔⲆ[282][_r.ΔΔⵠ] = sq(Et(0.9, 0, ["#efd435"]));
        ΔⲆ[282][_r.ΔⵠΔ] = sq(Et(0.9, 0, ["#fffabb"]));
        ΔⲆ[816] = [];
        ΔⲆ[816][_r.ΔΔⵠ] = sq(Ct(0.9, 0, ["#efd435"]));
        ΔⲆ[816][_r.ΔⵠΔ] = sq(Ct(0.9, 0, ["rgba(255, 84, 0, 1)"]));
        ΔⲆ[817] = [];
        ΔⲆ[817][_r.ΔΔⵠ] = sq(Et(0.9, 0, ["#efd435"]));
        ΔⲆ[817][_r.ΔⵠΔ] = sq(Et(0.9, 0, ["#ff5704"]));
        ΔⲆ[324] = sq(fd(1, "#ffffff"));
        ΔⲆ[301] = sq(fd(1.5, "#ffffff"));
        ΔⲆ[306] = sq(ku(1, "Your score:", 15, "#FFF"));
        ΔⲆ[655] = sq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 243;
            c.height = a * 172;
            id(d, a * 119.5, a * 140.125, a * 19);
            Xb(d, undefined, b[1], a * 5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 36.5, a * 20.125);
            d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
            d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
            d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
            d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
            d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
            d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
            d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
            d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
            d.closePath();
            Xb(d, b[0], b[1], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 15.5, a * 138.625);
            d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
            d.closePath();
            Xb(d, Gi, b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 13.5, a * 131.625);
            d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
            d.closePath();
            Xb(d, undefined, b[3], a * 10);
            id(d, a * 119.5, a * 140.125, a * 14.866068747318506);
            Xb(d, b[4], b[5], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 106.5, a * 146.625);
            d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
            d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
            d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
            d.closePath();
            Xb(d, b[6], b[7], a * 2);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 105.5, a * 146.625);
            d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
            Xb(d, undefined, b[8], a * 5);
            d.save();
            d.translate(a * 75.5, a * 80.125);
            Zb(d, a * -39, a * -40, a * 78, a * 78, a * 10);
            d.restore();
            Xb(d, b[9]);
            d.save();
            d.translate(a * 167, a * 80.125);
            Zb(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
            d.restore();
            Xb(d, b[9]);
            return c;
        }(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
        ΔⲆ[656] = jb.ⵠᐃⵠⵠΔⲆΔ;
        ΔⲆ[135] = [];
        ΔⲆ[135][_r.ΔΔⵠ] = sq(Wd(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ΔⲆ[135][_r.ΔⵠΔ] = sq(Wd(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ΔⲆ[641] = [];
        ΔⲆ[641][_r.ΔΔⵠ] = sq(Xd(2, Hj, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ΔⲆ[641][_r.ΔⵠΔ] = sq(Xd(2, Tn, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ΔⲆ[642] = [];
        ΔⲆ[642][_r.ΔΔⵠ] = sq(Ld(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ΔⲆ[642][_r.ΔⵠΔ] = sq(Ld(1.5, Dk, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ΔⲆ[134] = [];
        ΔⲆ[134][_r.ΔΔⵠ] = sq(Id(2.2, 0, ["#A89F67", "#9E8456"]));
        ΔⲆ[134][_r.ΔⵠΔ] = sq(Id(2.2, 0, ["#0B4049", "#08383D"]));
        ΔⲆ[638] = [];
        ΔⲆ[638][_r.ΔΔⵠ] = sq(Id(2.2, 0, ["#68622D", "#665329"]));
        ΔⲆ[638][_r.ΔⵠΔ] = sq(Id(2.2, 0, ["#0F3A24", "#083326"]));
        ΔⲆ[321] = [];
        ΔⲆ[321][_r.ΔΔⵠ] = sq(cu(0.8, 0, ["#A89F67", "#9E8456"]));
        ΔⲆ[321][_r.ΔⵠΔ] = sq(cu(0.8, 0, ["#15514F", "#0F3F3D"]));
        ΔⲆ[811] = [];
        ΔⲆ[811][_r.ΔΔⵠ] = sq(cu(0.8, 0, ["#c67933", "#b17238"]));
        ΔⲆ[811][_r.ΔⵠΔ] = sq(cu(0.8, 0, ["#043c37", "#032b23"]));
        ΔⲆ[984] = [];
        ΔⲆ[984][_r.ΔΔⵠ] = sq(cu(0.8, 0, ["#3a8214", "#4a9c1e"]));
        ΔⲆ[984][_r.ΔⵠΔ] = sq(cu(0.8, 0, ["#032d29", "#044640"]));
        ΔⲆ[837] = [];
        ΔⲆ[837][_r.ΔΔⵠ] = sq(cu(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
        ΔⲆ[837][_r.ΔⵠΔ] = sq(cu(0.8, 0, ["#1c6161", "#07413f"]));
        ΔⲆ[848] = [];
        ΔⲆ[848][_r.ΔΔⵠ] = sq(cu(0.8, 0, ["#328a56", "#449573"]));
        ΔⲆ[848][_r.ΔⵠΔ] = sq(cu(0.8, 0, ["#043c37", "#032b23"]));
        ΔⲆ[952] = [];
        ΔⲆ[952][_r.ΔΔⵠ] = sq(cu(0.8, 0, ["#c98e2f", "#a36b11"]));
        ΔⲆ[952][_r.ΔⵠΔ] = sq(cu(0.8, 0, ["#043c37", "#032b23"]));
        ΔⲆ[962] = [];
        ΔⲆ[962][_r.ΔΔⵠ] = sq(cu(0.8, 0, ["#b22419", "#99110e"]));
        ΔⲆ[962][_r.ΔⵠΔ] = sq(cu(0.8, 0, ["#04323c", "#03222b"]));
        ΔⲆ[969] = [];
        ΔⲆ[969][_r.ΔΔⵠ] = sq(cu(0.8, 0, ["#13a56d", "#098a58"]));
        ΔⲆ[969][_r.ΔⵠΔ] = sq(cu(0.8, 0, ["#043c37", "#032b23"]));
        ΔⲆ[657] = Kd(1, [{
            f: Id,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ΔⲆ[723] = Kd(1, [{
            f: Bt,
            x: 0,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ΔⲆ[724] = Kd(1, [{
            f: _m,
            x: 0,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
        }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ΔⲆ[334] = Kd(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[115] = [];
        ΔⲆ[115][_r.ΔΔⵠ] = sq(xd(0.9, 0, ["#7d613e", "#9e7e5a"]));
        ΔⲆ[115][_r.ΔⵠΔ] = sq(xd(0.9, 0, ["#084442", "#125e5a"]));
        ΔⲆ[132] = [];
        ΔⲆ[132][_r.ΔΔⵠ] = sq(xd(0.9, 0, ["#9E8456", "#A89F67"]));
        ΔⲆ[132][_r.ΔⵠΔ] = sq(xd(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
        ΔⲆ[668] = [];
        ΔⲆ[668][_r.ΔΔⵠ] = sq(xd(0.9, 0, ["#665329", "#68622D"]));
        ΔⲆ[668][_r.ΔⵠΔ] = sq(xd(0.9, 0, ["#083326", "#0F3A24"]));
        ΔⲆ[188] = [];
        ΔⲆ[188][_r.ΔΔⵠ] = sq(xd(0.9, 0, ["#c67933", "#ec952d"]));
        ΔⲆ[188][_r.ΔⵠΔ] = sq(xd(0.9, 0, ["#0e6553", "#094437"]));
        ΔⲆ[210] = [];
        ΔⲆ[210][_r.ΔΔⵠ] = sq(xd(0.9, 0, ["#375809", "#4b770e"]));
        ΔⲆ[210][_r.ΔⵠΔ] = sq(xd(0.9, 0, ["#09542d", "#0d5d2f"]));
        ΔⲆ[985] = [];
        ΔⲆ[985][_r.ΔΔⵠ] = sq(xd(0.9, 0, ["#585809", "#72770e"]));
        ΔⲆ[985][_r.ΔⵠΔ] = sq(xd(0.9, 0, ["#295209", "#305d0d"]));
        ΔⲆ[191] = [];
        ΔⲆ[191][_r.ΔΔⵠ] = sq(xd(0.9, 0, ["#b9b094", "#e2d2c0"]));
        ΔⲆ[191][_r.ΔⵠΔ] = sq(xd(0.9, 0, ["#126366", "#0d484b"]));
        ΔⲆ[193] = [];
        ΔⲆ[193][_r.ΔΔⵠ] = sq(xd(0.9, 0, ["#3f8662", "#30915d"]));
        ΔⲆ[193][_r.ΔⵠΔ] = sq(xd(0.9, 0, ["#0e6553", "#094437"]));
        ΔⲆ[812] = [];
        ΔⲆ[812][_r.ΔΔⵠ] = sq(xd(0.9, 0, ["#c79153", "#dfa868"]));
        ΔⲆ[812][_r.ΔⵠΔ] = sq(xd(0.9, 0, ["#073927", "#075040"]));
        ΔⲆ[838] = [];
        ΔⲆ[838][_r.ΔΔⵠ] = sq(xd(0.9, 0, ["#768b5b", "#819984"]));
        ΔⲆ[838][_r.ΔⵠΔ] = sq(xd(0.9, 0, ["#0c4540", "#0e5153"]));
        ΔⲆ[849] = [];
        ΔⲆ[849][_r.ΔΔⵠ] = sq(xd(0.9, 0, ["#567465", "#627c6e"]));
        ΔⲆ[849][_r.ΔⵠΔ] = sq(xd(0.9, 0, ["#073927", "#075040"]));
        ΔⲆ[204] = [];
        ΔⲆ[204][_r.ΔΔⵠ] = sq(xd(0.9, 0, ["#996b3a", "#bf956b"]));
        ΔⲆ[204][_r.ΔⵠΔ] = sq(xd(0.9, 0, ["#0e6553", "#094437"]));
        ΔⲆ[953] = [];
        ΔⲆ[953][_r.ΔΔⵠ] = sq(xd(0.9, 0, ["#7a634a", "#a68f77"]));
        ΔⲆ[953][_r.ΔⵠΔ] = sq(xd(0.9, 0, ["#1e4d43", "#113c32"]));
        ΔⲆ[206] = [];
        ΔⲆ[206][_r.ΔΔⵠ] = sq(xd(0.9, 0, ["#99403c", "#bc796c"]));
        ΔⲆ[206][_r.ΔⵠΔ] = sq(xd(0.9, 0, ["#1e434d", "#11303c"]));
        ΔⲆ[963] = [];
        ΔⲆ[963][_r.ΔΔⵠ] = sq(xd(0.9, 0, ["#88504e", "#b3857c"]));
        ΔⲆ[963][_r.ΔⵠΔ] = sq(xd(0.9, 0, ["#253b41", "#162930"]));
        ΔⲆ[208] = [];
        ΔⲆ[208][_r.ΔΔⵠ] = sq(xd(0.9, 0, ["#0f8870", "#23af93"]));
        ΔⲆ[208][_r.ΔⵠΔ] = sq(xd(0.9, 0, ["#032829", "#083233"]));
        ΔⲆ[970] = [];
        ΔⲆ[970][_r.ΔΔⵠ] = sq(xd(0.9, 0, ["#618a20", "#84a74e"]));
        ΔⲆ[970][_r.ΔⵠΔ] = sq(xd(0.9, 0, ["#1f4632", "#335d47"]));
        ΔⲆ[114] = [];
        ΔⲆ[114][_r.ΔΔⵠ] = sq(Td(1.2, true, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
        ΔⲆ[114][_r.ΔⵠΔ] = sq(Td(1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
        ΔⲆ[162] = [];
        ΔⲆ[162][_r.ΔΔⵠ] = sq(Au(1, y, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        ΔⲆ[162][_r.ΔⵠΔ] = sq(Au(1, Gr, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ΔⲆ[165] = [];
        ΔⲆ[165][_r.ΔΔⵠ] = sq(qu(1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ΔⲆ[165][_r.ΔⵠΔ] = sq(qu(1, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ΔⲆ[122] = [];
        ΔⲆ[122][_r.ΔΔⵠ] = sq(hc(1, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ΔⲆ[122][_r.ΔⵠΔ] = sq(hc(1, re, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ΔⲆ[163] = [];
        ΔⲆ[163][_r.ΔΔⵠ] = sq(hc(1, Hj, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        ΔⲆ[163][_r.ΔⵠΔ] = sq(hc(1, dr, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
        ΔⲆ[164] = [];
        ΔⲆ[164][_r.ΔΔⵠ] = sq(sc(1, zq, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        ΔⲆ[164][_r.ΔⵠΔ] = sq(sc(1, Tn, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
        ΔⲆ[160] = [];
        ΔⲆ[160][_r.ΔΔⵠ] = sq(dc(0.8, ho, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        ΔⲆ[160][_r.ΔⵠΔ] = sq(dc(0.8, sj, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ΔⲆ[169] = [];
        ΔⲆ[169][_r.ΔΔⵠ] = sq(Ac(0.8, true, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        ΔⲆ[169][_r.ΔⵠΔ] = sq(Ac(0.8, y, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
        ΔⲆ[170] = [];
        ΔⲆ[170][_r.ΔΔⵠ] = sq(Wc(0.8, oj, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ΔⲆ[170][_r.ΔⵠΔ] = sq(Wc(0.8, Ho, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ΔⲆ[168] = [];
        ΔⲆ[168][_r.ΔΔⵠ] = sq(Jc(0.8, sj, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        ΔⲆ[168][_r.ΔⵠΔ] = sq(Jc(0.8, Pj, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
        ΔⲆ[123] = [];
        ΔⲆ[123][_r.ΔΔⵠ] = sq(Jc(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ΔⲆ[123][_r.ΔⵠΔ] = sq(Jc(0.8, Aq, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ΔⲆ[166] = [];
        ΔⲆ[166][_r.ΔΔⵠ] = sq(nc(1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
        ΔⲆ[166][_r.ΔⵠΔ] = sq(nc(1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ΔⲆ[336] = [];
        ΔⲆ[336][_r.ΔΔⵠ] = sq(nc(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ΔⲆ[336][_r.ΔⵠΔ] = sq(nc(1, false, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
        ΔⲆ[171] = [];
        ΔⲆ[171][_r.ΔΔⵠ] = sq(pu(1.5, Dk, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
        ΔⲆ[171][_r.ΔⵠΔ] = sq(pu(1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
        ΔⲆ[373] = [];
        ΔⲆ[373][_r.ΔΔⵠ] = sq(pu(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ΔⲆ[373][_r.ΔⵠΔ] = sq(pu(1, ca, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ΔⲆ[124] = [];
        ΔⲆ[124][_r.ΔΔⵠ] = sq(pu(1.5, vr, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ΔⲆ[124][_r.ΔⵠΔ] = sq(pu(1.5, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ΔⲆ[500] = [];
        ΔⲆ[500][_r.ΔΔⵠ] = sq(pu(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ΔⲆ[500][_r.ΔⵠΔ] = sq(pu(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ΔⲆ[172] = [];
        ΔⲆ[172][_r.ΔΔⵠ] = sq(zu(1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
        ΔⲆ[172][_r.ΔⵠΔ] = sq(zu(1.5, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
        ΔⲆ[376] = [];
        ΔⲆ[376][_r.ΔΔⵠ] = sq(zu(1, Bl, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ΔⲆ[376][_r.ΔⵠΔ] = sq(zu(1, rg, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ΔⲆ[173] = [];
        ΔⲆ[173][_r.ΔΔⵠ] = sq(su(1.5, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ΔⲆ[173][_r.ΔⵠΔ] = sq(su(1.5, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ΔⲆ[379] = [];
        ΔⲆ[379][_r.ΔΔⵠ] = sq(su(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ΔⲆ[379][_r.ΔⵠΔ] = sq(su(1, Bl, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ΔⲆ[167] = [];
        ΔⲆ[167][_r.ΔΔⵠ] = sq(fc(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
        ΔⲆ[167][_r.ΔⵠΔ] = sq(fc(0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
        ΔⲆ[691] = [];
        ΔⲆ[691][_r.ΔΔⵠ] = sq(dp(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
        ΔⲆ[691][_r.ΔⵠΔ] = sq(dp(0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
        ΔⲆ[264] = [];
        ΔⲆ[264][_r.ΔΔⵠ] = sq(Fd(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
        ΔⲆ[264][_r.ΔⵠΔ] = sq(Fd(0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
        ΔⲆ[260] = [];
        ΔⲆ[260][_r.ΔΔⵠ] = sq(ad(Math.PI, Rd(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
        ΔⲆ[260][_r.ΔⵠΔ] = sq(ad(Math.PI, Rd(0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
        ΔⲆ[266] = sq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 450;
            c.height = a * 470;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 226.5, a * 91.546875);
            d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
            d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
            d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
            d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
            d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
            d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
            d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
            d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
            d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
            d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
            d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
            d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
            d.closePath();
            Xb(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 129.546875);
            d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
            d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
            d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
            d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
            d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
            d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
            d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
            d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
            d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
            d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
            d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
            d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
            d.closePath();
            Xb(d, fh, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 160.546875);
            d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
            d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
            d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
            d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
            d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
            d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
            d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
            d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
            d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
            d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
            d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
            d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
            d.closePath();
            Xb(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 205.5, a * 194.546875);
            d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
            d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
            d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
            d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
            d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
            d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
            d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
            d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
            d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
            d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
            d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
            d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
            d.closePath();
            Xb(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 149.5, a * 93.546875);
            d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
            d.closePath();
            Xb(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 66.546875);
            d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
            d.closePath();
            Xb(d, mn, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 302.5, a * 88.546875);
            d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
            d.closePath();
            Xb(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 361.5, a * 147.546875);
            d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
            d.closePath();
            Xb(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 379.5, a * 225.546875);
            d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
            d.closePath();
            Xb(d, vg, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 90.5, a * 147.546875);
            d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
            d.closePath();
            Xb(d, Go, b[0], 4);
            return c;
        }(0.6, ["#FFFFFF"]));
        ΔⲆ[299] = [];
        ΔⲆ[299][_r.ΔΔⵠ] = sq(Ed(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
        ΔⲆ[299][_r.ΔⵠΔ] = sq(Ed(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
        ΔⲆ[10] = [];
        ΔⲆ[10][_r.ΔΔⵠ] = sq(_c(0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
        ΔⲆ[10][_r.ΔⵠΔ] = sq(_c(0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
        ΔⲆ[11] = [];
        ΔⲆ[11][_r.ΔΔⵠ] = sq(tu(0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
        ΔⲆ[11][_r.ΔⵠΔ] = sq(tu(0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
        ΔⲆ[40] = [];
        ΔⲆ[40][_r.ΔΔⵠ] = sq(jc(0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
        ΔⲆ[40][_r.ΔⵠΔ] = sq(jc(0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
        ΔⲆ[41] = [];
        ΔⲆ[41][_r.ΔΔⵠ] = sq(Dt(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
        ΔⲆ[41][_r.ΔⵠΔ] = sq(Dt(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
        ΔⲆ[42] = [];
        ΔⲆ[42][_r.ΔΔⵠ] = sq(Ft(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
        ΔⲆ[42][_r.ΔⵠΔ] = sq(Ft(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
        ΔⲆ[716] = [];
        ΔⲆ[716][_r.ΔΔⵠ] = sq(tp(0.42, re, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
        ΔⲆ[716][_r.ΔⵠΔ] = sq(tp(0.42, Tn, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
        ΔⲆ[720] = [];
        ΔⲆ[720][_r.ΔΔⵠ] = sq(Nm(0.9, ["#e4c027"]));
        ΔⲆ[720][_r.ΔⵠΔ] = sq(Nm(0.9, ["#D8E57F"]));
        ΔⲆ[144] = [];
        ΔⲆ[144][_r.ΔΔⵠ] = sq(Sm(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
        ΔⲆ[144][_r.ΔⵠΔ] = sq(Sm(0.42, zq, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
        ΔⲆ[722] = sq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 149;
            c.height = a * 356;
            d.save();
            d.translate(a * 74.5, a * 177.5);
            Zb(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
            d.restore();
            Xb(d, b[0], b[1], a * 4);
            d.save();
            d.translate(a * 74.5, a * 177.5);
            Zb(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
            d.restore();
            Xb(d, b[6], b[1], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 125);
            d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
            d.closePath();
            Xb(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 120);
            d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
            d.closePath();
            Xb(d, b[3], b[3], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 228);
            d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
            d.closePath();
            Xb(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 224);
            d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
            d.closePath();
            Xb(d, b[3], b[3], a * 10);
            d.save();
            d.translate(a * 72, a * 68.5);
            Zb(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
            d.restore();
            Xb(d, b[4]);
            d.save();
            d.translate(a * 72, a * 175.5);
            Zb(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
            d.restore();
            Xb(d, b[4]);
            d.save();
            d.translate(a * 72, a * 279.5);
            Zb(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
            d.restore();
            Xb(d, b[4]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 338);
            d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
            d.closePath();
            Xb(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 333);
            d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
            d.closePath();
            Xb(d, b[3], b[3], a * 10);
            return c;
        }(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
        ΔⲆ[407] = [];
        ΔⲆ[407][_r.ΔΔⵠ] = sq(tc(0.5, zq, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
        ΔⲆ[407][_r.ΔⵠΔ] = sq(tc(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
        ΔⲆ[119] = [];
        ΔⲆ[119][_r.ΔΔⵠ] = sq(vu(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
        ΔⲆ[119][_r.ΔⵠΔ] = sq(vu(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
        ΔⲆ[411] = sq(function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 118;
            d.height = a * 129;
            e.save();
            e.translate(a * 90, a * 90);
            Zb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
            e.restore();
            Xb(e, c[0], c[1], 4);
            return d;
        }(0.8, 0, ["#5f6061", "#939393"]));
        ΔⲆ[412] = Kd(1, [{
            f: Bt,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 2.5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
        ΔⲆ[198] = [];
        ΔⲆ[198][_r.ΔΔⵠ] = sq(Oc(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
        ΔⲆ[198][_r.ΔⵠΔ] = sq(Oc(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
        ΔⲆ[913] = [];
        ΔⲆ[913][_r.ΔΔⵠ] = sq(bc(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
        ΔⲆ[913][_r.ΔⵠΔ] = sq(bc(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
        ΔⲆ[18] = [];
        ΔⲆ[18][_r.ΔΔⵠ] = sq(ad(3, Mc(0.7, ho, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
        ΔⲆ[18][_r.ΔⵠΔ] = sq(ad(3, Mc(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
        ΔⲆ[12] = [];
        ΔⲆ[12][_r.ΔΔⵠ] = sq(ad(3, wc(0.7, Ho, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
        ΔⲆ[12][_r.ΔⵠΔ] = sq(ad(3, wc(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
        ΔⲆ[13] = [];
        ΔⲆ[13][_r.ΔΔⵠ] = sq(ad(3, kc(0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
        ΔⲆ[13][_r.ΔⵠΔ] = sq(ad(3, kc(0.65, Zr, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
        ΔⲆ[14] = [];
        ΔⲆ[14][_r.ΔΔⵠ] = sq(ad(3, Cc(0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
        ΔⲆ[14][_r.ΔⵠΔ] = sq(ad(3, Cc(0.67, true, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
        ΔⲆ[15] = [];
        ΔⲆ[15][_r.ΔΔⵠ] = sq(ad(3, Gc(0.67, Zr, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
        ΔⲆ[15][_r.ΔⵠΔ] = sq(ad(3, Gc(0.67, oj, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
        ΔⲆ[33] = [];
        ΔⲆ[33][_r.ΔΔⵠ] = sq(ad(3, Fc(0.67, true, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
        ΔⲆ[33][_r.ΔⵠΔ] = sq(ad(3, Fc(0.67, Gr, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
        ΔⲆ[16] = [];
        ΔⲆ[16][_r.ΔΔⵠ] = sq(ad(3, zc(1, Hj, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
        ΔⲆ[16][_r.ΔⵠΔ] = sq(ad(3, zc(1, Pj, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
        ΔⲆ[35] = [];
        ΔⲆ[35][_r.ΔΔⵠ] = sq(ad(3, Nc(1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        ΔⲆ[35][_r.ΔⵠΔ] = sq(ad(3, Nc(1, Pj, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
        ΔⲆ[55] = [];
        ΔⲆ[55][_r.ΔΔⵠ] = sq(ad(3, Bm(0.5, Aq, ["#0d1b1c", "#939393", "#5f6061"])));
        ΔⲆ[55][_r.ΔⵠΔ] = sq(ad(3, Bm(0.5, y, ["#030d14", "#485e66", "#1f343f"])));
        ΔⲆ[45] = [];
        ΔⲆ[45][_r.ΔΔⵠ] = sq(ad(3, ym(1, re, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
        ΔⲆ[45][_r.ΔⵠΔ] = sq(ad(3, ym(1, zq, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
        ΔⲆ[36] = [];
        ΔⲆ[36][_r.ΔΔⵠ] = sq(ad(3, Nc(1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        ΔⲆ[36][_r.ΔⵠΔ] = sq(ad(3, Nc(1, Ca, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
        ΔⲆ[37] = [];
        ΔⲆ[37][_r.ΔΔⵠ] = sq(ad(3, Nc(1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        ΔⲆ[37][_r.ΔⵠΔ] = sq(ad(3, Nc(1, Tn, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
        ΔⲆ[38] = [];
        ΔⲆ[38][_r.ΔΔⵠ] = sq(ad(3, Nc(1, re, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        ΔⲆ[38][_r.ΔⵠΔ] = sq(ad(3, Nc(1, re, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
        ΔⲆ[148] = [];
        ΔⲆ[148][_r.ΔΔⵠ] = sq(dm(0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
        ΔⲆ[148][_r.ΔⵠΔ] = sq(dm(0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
        ΔⲆ[536] = [];
        ΔⲆ[536].push(sq(dm(0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
        ΔⲆ[536].push(sq(dm(0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
        ΔⲆ[536].push(sq(dm(0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
        ΔⲆ[538] = [];
        ΔⲆ[538].push(ΔⲆ[536][0]);
        ΔⲆ[538].push(ΔⲆ[536][0]);
        ΔⲆ[538].push(ΔⲆ[536][0]);
        ΔⲆ[158] = [];
        ΔⲆ[158][_r.ΔΔⵠ] = sq(fm(0.06, 0, ["#141414", "#c4a23a", "#816511"]));
        ΔⲆ[158][_r.ΔⵠΔ] = sq(fm(0.06, 0, ["#030d14", "#2b6664", "#133d3c"]));
        ΔⲆ[535] = [];
        ΔⲆ[535].push(sq(fm(0.08, 0, ["#141414", "#c4a23a", "#816511"])));
        ΔⲆ[535].push(sq(fm(0.08, 0, ["#141414", "#e2bd4e", "#a38018"])));
        ΔⲆ[535].push(sq(fm(0.08, 0, ["#141414", "#b0902e", "#634d09"])));
        ΔⲆ[149] = Kd(1.5, [{
            f: um,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#141414", "#178a99", "#0a6372", "#03282e"]
        }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
        ΔⲆ[526] = [];
        ΔⲆ[526][_r.ΔΔⵠ] = sq(pm(0.8, 0, ["#347f93", "#54a4ba"]));
        ΔⲆ[526][_r.ΔⵠΔ] = sq(pm(0.8, 0, ["#98ede3", "#94f2e7"]));
        ΔⲆ[527] = [];
        ΔⲆ[527][_r.ΔΔⵠ] = sq(bm(0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
        ΔⲆ[527][_r.ΔⵠΔ] = sq(bm(0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
        ΔⲆ[528] = [];
        ΔⲆ[528][_r.ΔΔⵠ] = sq(rm(0.8, 0, ["#a9e4ed", "#86d4e0"]));
        ΔⲆ[528][_r.ΔⵠΔ] = sq(rm(0.8, 0, ["#83ddd4", "#485e66"]));
        ΔⲆ[151] = [];
        ΔⲆ[151][_r.ΔΔⵠ] = sq(zm(0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
        ΔⲆ[151][_r.ΔⵠΔ] = sq(zm(0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
        ΔⲆ[1192] = [];
        ΔⲆ[1192][_r.ΔΔⵠ] = jb.ΔΔⲆΔᐃⲆⲆ;
        ΔⲆ[1192][_r.ΔⵠΔ] = jb.ⲆΔᐃⵠᐃᐃⵠ;
        ΔⲆ[1193] = [];
        ΔⲆ[1193][_r.ΔΔⵠ] = jb.ᐃⲆᐃⲆⵠᐃᐃ;
        ΔⲆ[1193][_r.ΔⵠΔ] = jb.ⵠⵠᐃⲆⵠᐃⵠ;
        ΔⲆ[1194] = [];
        ΔⲆ[1194][_r.ΔΔⵠ] = jb.ΔΔⲆΔⲆᐃΔ;
        ΔⲆ[1194][_r.ΔⵠΔ] = jb.ΔᐃⲆΔΔⵠᐃ;
        ΔⲆ[152] = [];
        ΔⲆ[152][_r.ΔΔⵠ] = jb.ⵠΔᐃⵠⲆⲆΔ;
        ΔⲆ[152][_r.ΔⵠΔ] = jb.ⲆᐃⲆⲆⵠᐃⲆ;
        ΔⲆ[1198] = [];
        ΔⲆ[1198][_r.ΔΔⵠ] = jb.ⵠⲆΔⵠᐃΔᐃ;
        ΔⲆ[1198][_r.ΔⵠΔ] = jb.ⲆΔⲆⲆⵠΔᐃ;
        ΔⲆ[153] = [];
        ΔⲆ[153][_r.ΔΔⵠ] = jb.ⵠΔⲆᐃⵠᐃⲆ;
        ΔⲆ[153][_r.ΔⵠΔ] = jb.ᐃⵠΔᐃᐃΔⵠ;
        ΔⲆ[1202] = [];
        ΔⲆ[1202][_r.ΔΔⵠ] = jb.ᐃΔᐃᐃⲆᐃⵠ;
        ΔⲆ[1202][_r.ΔⵠΔ] = jb.ᐃⵠⲆⵠΔΔΔ;
        ΔⲆ[154] = [];
        ΔⲆ[154][_r.ΔΔⵠ] = jb.ΔⵠᐃⵠⵠⵠⲆ;
        ΔⲆ[154][_r.ΔⵠΔ] = jb.ᐃⵠᐃᐃⵠⵠⲆ;
        ΔⲆ[1206] = [];
        ΔⲆ[1206][_r.ΔΔⵠ] = jb.ⲆⲆΔᐃᐃΔⵠ;
        ΔⲆ[1206][_r.ΔⵠΔ] = jb.ᐃᐃΔⵠⵠΔⲆ;
        ΔⲆ[155] = [];
        ΔⲆ[155][_r.ΔΔⵠ] = jb.ΔⵠΔᐃⲆᐃᐃ;
        ΔⲆ[155][_r.ΔⵠΔ] = jb.ΔⵠⵠΔⲆⵠⲆ;
        ΔⲆ[1210] = [];
        ΔⲆ[1210][_r.ΔΔⵠ] = jb.ⵠΔΔΔΔΔⲆ;
        ΔⲆ[1210][_r.ΔⵠΔ] = jb.ΔⵠⵠⲆⵠᐃⵠ;
        ΔⲆ[156] = [];
        ΔⲆ[156][_r.ΔΔⵠ] = jb.ⲆᐃΔᐃᐃⵠⲆ;
        ΔⲆ[156][_r.ΔⵠΔ] = jb.ⲆⵠᐃⲆΔⵠⵠ;
        ΔⲆ[1214] = [];
        ΔⲆ[1214][_r.ΔΔⵠ] = jb.ᐃⲆᐃΔⵠⲆΔ;
        ΔⲆ[1214][_r.ΔⵠΔ] = jb.ⵠᐃΔⵠⲆⵠᐃ;
        ΔⲆ[157] = [];
        ΔⲆ[157][_r.ΔΔⵠ] = jb.ΔⲆᐃΔΔⵠᐃ;
        ΔⲆ[157][_r.ΔⵠΔ] = jb.ΔⵠⲆᐃⵠⵠⲆ;
        ΔⲆ[245] = [];
        ΔⲆ[245][_r.ΔΔⵠ] = jb.ⲆⲆᐃΔᐃⲆⲆ;
        ΔⲆ[245][_r.ΔⵠΔ] = jb.ⵠᐃⲆⲆⵠⵠⲆ;
        ΔⲆ[246] = jb.ΔⵠΔⲆⵠⵠΔ;
        ΔⲆ[159] = [];
        ΔⲆ[159][_r.ΔΔⵠ] = sq(wm(0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
        ΔⲆ[159][_r.ΔⵠΔ] = sq(wm(0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
        ΔⲆ[558] = sq(cm(0.3, ["#092813", "#1f773d"], 0));
        ΔⲆ[559] = sq(cm(0.3, ["#092813", "#1f773d"], 1));
        ΔⲆ[885] = sq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 60;
            c.height = a * 60;
            d.translate(a * -25, a * -25);
            d.translate(0, a * 5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 24, a * 50);
            d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
            d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
            d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
            d.closePath();
            Xb(d, b[0]);
            d.translate(0, a * -5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 24, a * 50);
            d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
            d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
            d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
            d.closePath();
            Xb(d, b[1]);
            return c;
        }(0.6, ["#092813", "#1f773d"]));
        ΔⲆ[556] = [];
        ΔⲆ[556].push(sq(am(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
        ΔⲆ[556].push(sq(am(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
        ΔⲆ[556].push(sq(am(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
        ΔⲆ[560] = [];
        var b = sq(am(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
        ΔⲆ[560].push(b);
        ΔⲆ[560].push(b);
        ΔⲆ[560].push(b);
        ΔⲆ[557] = [];
        ΔⲆ[557].push(sq(am(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
        ΔⲆ[557].push(sq(am(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
        ΔⲆ[557].push(sq(am(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
        ΔⲆ[681] = sq(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 170;
            var g = b * 172;
            var a = f / 2;
            var i = g / 2;
            d.width = f;
            d.height = g;
            e.translate(a, i);
            e.save();
            for (var j = 0; j < 10; j++) {
                e.rotate(Math.PI / 5);
                e.save();
                e.translate(b * 65, 0);
                nd(e, 3, b * 18, b * 4);
                Xb(e, c[0]);
                e.restore();
            }
            e.restore();
            id(e, 0, 0, b * 40);
            Xb(e, mn, c[0], b * 6);
            id(e, 0, 0, b * 20);
            Xb(e, c[0]);
            return d;
        }(0.3, ["#FFFFFF"]));
        ΔⲆ[794] = sq(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 130;
            var g = b * 142;
            var a = f / 2;
            var h = g / 2;
            d.width = f;
            d.height = g;
            id(e, a, h, b * 40);
            Xb(e, undefined, c[0], b * 7);
            id(e, a, h, b * 30);
            Xb(e, undefined, c[0], b * 7);
            id(e, a, h, b * 20);
            Xb(e, c[0]);
            return d;
        }(0.3, ["#FFFFFF"]));
        ΔⲆ[562] = sq(cm(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
        ΔⲆ[667] = sq(ad(Math.PI / 5, function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 316;
            c.height = a * 365;
            d.save();
            d.translate(a * 156.07142639160156, a * 51.81248474121094);
            d.rotate(0);
            Zb(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
            d.restore();
            Xb(d, b[0], b[0], a * 15);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
            d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
            d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
            d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
            d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
            d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
            d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
            d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
            d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
            d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
            d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
            d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
            d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
            d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
            d.closePath();
            Xb(d, b[0], b[0], a * 15);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
            d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
            d.closePath();
            Xb(d, b[0], b[0], a * 15);
            return c;
        }(0.2, ["#FFFFFF"])));
        ΔⲆ[43] = [];
        ΔⲆ[43][_r.ΔΔⵠ] = sq(Pm(0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
        ΔⲆ[43][_r.ΔⵠΔ] = sq(Pm(0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
        ΔⲆ[561] = [];
        ΔⲆ[561].push(sq(am(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
        ΔⲆ[561].push(sq(am(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
        ΔⲆ[561].push(sq(am(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
        ΔⲆ[83] = [];
        ΔⲆ[83][_r.ΔΔⵠ] = sq(Km(0.37, true, ["#2a2938", "#242330", "#313041"]));
        ΔⲆ[83][_r.ΔⵠΔ] = sq(Km(0.37, true, ["#1b1e30", "#161921", "#252f3e"]));
        ΔⲆ[85] = [];
        ΔⲆ[85][_r.ΔΔⵠ] = sq(Jm(0.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
        ΔⲆ[85][_r.ΔⵠΔ] = sq(Jm(0.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
        ΔⲆ[86] = [];
        ΔⲆ[86][_r.ΔΔⵠ] = sq(Im(0.55, hj, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
        ΔⲆ[86][_r.ΔⵠΔ] = sq(Im(0.55, zq, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
        ΔⲆ[84] = [];
        ΔⲆ[84][_r.ΔΔⵠ] = sq(Im(0.55, hj, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
        ΔⲆ[84][_r.ΔⵠΔ] = sq(Im(0.55, zq, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
        ΔⲆ[77] = [];
        ΔⲆ[77][_r.ΔΔⵠ] = sq(Lm(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
        ΔⲆ[77][_r.ΔⵠΔ] = sq(Lm(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
        ΔⲆ[78] = [];
        ΔⲆ[78][_r.ΔΔⵠ] = sq(Lm(0.2, ho, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
        ΔⲆ[78][_r.ΔⵠΔ] = sq(Lm(0.2, Ca, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
        ΔⲆ[79] = [];
        ΔⲆ[79][_r.ΔΔⵠ] = sq(Lm(0.2, Zr, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
        ΔⲆ[79][_r.ΔⵠΔ] = sq(Lm(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
        ΔⲆ[61] = [];
        ΔⲆ[61][_r.ΔΔⵠ] = sq(Tc(0.24, Hj, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
        ΔⲆ[61][_r.ΔⵠΔ] = sq(Tc(0.24, sj, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
        ΔⲆ[59] = [];
        ΔⲆ[59][_r.ΔΔⵠ] = sq(Ec(0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
        ΔⲆ[59][_r.ΔⵠΔ] = sq(Ec(0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
        ΔⲆ[62] = [];
        ΔⲆ[62][_r.ΔΔⵠ] = sq(ad(3, lm(0.9, true, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
        ΔⲆ[62][_r.ΔⵠΔ] = sq(ad(3, lm(0.9, Pj, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
        ΔⲆ[750] = [];
        ΔⲆ[750][_r.ΔΔⵠ] = sq(ad(3, lm(1, true, [undefined, Vs, undefined, "#c8efef", "#c8efef"])));
        ΔⲆ[750][_r.ΔⵠΔ] = sq(ad(3, lm(1, oj, [yl, undefined, undefined, "#87d2e6", "#87d2e6"])));
        ΔⲆ[755] = [];
        ΔⲆ[755].push(sq(op(0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
        ΔⲆ[755].push(sq(op(0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
        ΔⲆ[755].push(sq(op(0.3, Zr, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
        ΔⲆ[795] = [];
        ΔⲆ[795].push(sq(Qm(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
        ΔⲆ[795].push(sq(Qm(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
        ΔⲆ[795].push(sq(Qm(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
        ΔⲆ[782] = [];
        ΔⲆ[782].push(sq(Nt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
        ΔⲆ[782].push(sq(Nt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
        ΔⲆ[782].push(sq(Nt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
        ΔⲆ[783] = [];
        ΔⲆ[783].push(sq(Nt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
        ΔⲆ[783].push(sq(Nt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
        ΔⲆ[783].push(sq(Nt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
        ΔⲆ[46] = [];
        ΔⲆ[46][_r.ΔΔⵠ] = sq(ad(3, Hm(0.7, Ca, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
        ΔⲆ[46][_r.ΔⵠΔ] = sq(ad(3, Hm(0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
        ΔⲆ[50] = [];
        ΔⲆ[50][_r.ΔΔⵠ] = sq(ad(3, Hm(0.7, Zr, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
        ΔⲆ[50][_r.ΔⵠΔ] = sq(ad(3, Hm(0.7, true, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
        ΔⲆ[51] = [];
        ΔⲆ[51][_r.ΔΔⵠ] = sq(ad(3, Hm(0.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
        ΔⲆ[51][_r.ΔⵠΔ] = sq(ad(3, Hm(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
        ΔⲆ[52] = [];
        ΔⲆ[52][_r.ΔΔⵠ] = sq(ad(3, Hm(0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
        ΔⲆ[52][_r.ΔⵠΔ] = sq(ad(3, Hm(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
        ΔⲆ[592] = [];
        ΔⲆ[592].push(sq(vm(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
        ΔⲆ[592].push(sq(vm(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
        ΔⲆ[592].push(sq(vm(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
        ΔⲆ[326] = sq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 188;
            c.height = a * 190;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
            d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
            d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
            d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
            d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
            d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
            d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
            d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
            d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
            d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
            d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
            d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
            d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
            d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
            d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
            d.closePath();
            Xb(d, b[0], b[0], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
            d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
            d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
            d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
            d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
            d.closePath();
            Xb(d, b[0], b[0], a * 2);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
            d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
            d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
            d.closePath();
            Xb(d, b[0], b[0], a * 2);
            return c;
        }(1.1, ["#BB0000"]));
        ΔⲆ[333] = sq(ad(Math.PI, function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 238;
            c.height = a * 230;
            d.translate(a * -93, a * -110);
            id(d, a * 213.5, a * 256.75, a * 75);
            Xb(d, b);
            id(d, a * 213.5, a * 175.75, a * 25);
            Xb(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 156.5, a * 137.75);
            d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 217.5, a * 178.75);
            d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 130.5, a * 124.75);
            d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 214.5, a * 183.75);
            d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 107.5, a * 213.75);
            d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 212.5, a * 187.75);
            d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 102.5, a * 258.75);
            d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 214.5, a * 192.75);
            d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 219.5, a * 158.75);
            d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
            d.closePath();
            d.lineWidth = a * 10;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 210.5, a * 160.75);
            d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
            d.closePath();
            d.lineWidth = a * 10;
            d.strokeStyle = b;
            d.stroke();
            return c;
        }(0.9, "#BB0000")));
        ΔⲆ[23] = [];
        ΔⲆ[23][_r.ΔΔⵠ] = sq(Zc(0.55, Dk, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
        ΔⲆ[23][_r.ΔⵠΔ] = sq(Zc(0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
        ΔⲆ[58] = [];
        ΔⲆ[58][_r.ΔΔⵠ] = sq(Tm(0.55, Ca, ["#252525", "#73583e", "#573f29", "#7d6144"]));
        ΔⲆ[58][_r.ΔⵠΔ] = sq(Tm(0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
        ΔⲆ[25] = [];
        ΔⲆ[25][_r.ΔΔⵠ] = sq(km(0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
        ΔⲆ[25][_r.ΔⵠΔ] = sq(km(0.6, y, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
        ΔⲆ[26] = [];
        ΔⲆ[26][_r.ΔΔⵠ] = sq(hm(0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
        ΔⲆ[26][_r.ΔⵠΔ] = sq(hm(0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
        ΔⲆ[27] = [];
        ΔⲆ[27][_r.ΔΔⵠ] = sq(om(0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
        ΔⲆ[27][_r.ΔⵠΔ] = sq(om(0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
        ΔⲆ[413] = [];
        ΔⲆ[413][_r.ΔΔⵠ] = [];
        ΔⲆ[413][_r.ΔⵠΔ] = [];
        ΔⲆ[413][_r.ΔΔⵠ].push(sq(Qc(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
        ΔⲆ[413][_r.ΔΔⵠ].push(sq(Rc(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
        ΔⲆ[413][_r.ΔΔⵠ].push(sq(Lc(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
        ΔⲆ[413][_r.ΔⵠΔ].push(sq(Qc(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
        ΔⲆ[413][_r.ΔⵠΔ].push(sq(Rc(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
        ΔⲆ[413][_r.ΔⵠΔ].push(sq(Lc(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
        ΔⲆ[449] = [];
        ΔⲆ[449][_r.ΔΔⵠ] = sq(qc(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
        ΔⲆ[449][_r.ΔⵠΔ] = sq(qc(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
        ΔⲆ[451] = [];
        ΔⲆ[451][_r.ΔΔⵠ] = sq(im(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        ΔⲆ[451][_r.ΔⵠΔ] = sq(im(1, ["#050505", "#327570", "#021724", "#200333"]));
        ΔⲆ[452] = [];
        ΔⲆ[452][_r.ΔΔⵠ] = sq(Kc(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        ΔⲆ[452][_r.ΔⵠΔ] = sq(Kc(1, ["#050505", "#327570", "#021724", "#200333"]));
        ΔⲆ[243] = [];
        ΔⲆ[243][_r.ΔΔⵠ] = [];
        ΔⲆ[243][_r.ΔⵠΔ] = [];
        ΔⲆ[243][_r.ΔΔⵠ] = [jb.ΔⵠⲆᐃⵠⲆΔ, jb.ᐃⵠⲆΔⵠⲆⲆ, jb.ⲆΔⲆΔᐃⵠᐃ, jb.ᐃⲆΔᐃⲆⲆⵠ, jb.ᐃΔΔᐃᐃⵠΔ, jb.ΔΔΔⲆⵠΔⲆ, jb.ⲆᐃⲆᐃⲆⵠᐃ, jb.ᐃᐃⲆᐃΔⲆΔ, jb.ⲆΔΔⲆⵠᐃⲆ, jb.ᐃᐃⲆⲆΔⲆΔ, jb.ᐃΔⲆⲆⲆⲆⲆ, jb.ⲆⲆⲆᐃⲆⵠⲆ, jb.ΔⲆⵠⲆⵠⲆᐃ, jb.ΔΔⵠᐃᐃΔΔ, jb.ᐃᐃᐃᐃⵠⵠᐃ, jb.ΔⵠΔⲆᐃⲆⲆ, jb.ⵠΔᐃⲆⲆⲆⲆ, jb.ⵠᐃⲆᐃⵠⵠᐃ, jb.ⵠᐃΔⵠᐃΔΔ, jb.ᐃⵠⵠᐃᐃᐃⲆ, jb.ⲆⲆⵠⵠⵠᐃᐃ, jb.ⵠⲆⲆⵠⲆⵠᐃ, jb.ⲆΔᐃⲆⵠⵠⵠ, jb.ΔⲆᐃⲆᐃΔᐃ, jb.ⵠⲆΔΔᐃΔᐃ, jb.ᐃΔⲆᐃᐃⵠⵠ, jb.ⵠⲆΔⵠᐃⲆⲆ, jb.ⲆΔΔΔᐃᐃⵠ, jb.ᐃⵠⵠⵠΔᐃΔ, jb.ᐃⲆⵠⵠⲆⵠΔ, jb.ⲆᐃᐃᐃⲆⵠᐃ, jb.ᐃΔΔⵠΔᐃᐃ, jb.ⲆⲆⵠΔΔΔΔ, jb.ⵠⵠⲆΔⵠΔᐃ, jb.ⵠΔΔⲆᐃΔᐃ, jb.ⵠⵠⵠΔᐃΔⲆ, jb.ⲆΔⲆΔⲆⵠⵠ, jb.ⵠⲆⵠⵠΔΔᐃ, jb.ᐃⲆⵠⵠᐃᐃᐃ, jb.ΔⵠΔΔᐃⵠⲆ, jb.ᐃΔΔⲆᐃᐃⵠ, jb.ⵠΔⵠΔᐃΔᐃ, jb.ΔᐃᐃΔᐃΔᐃ, jb.ΔΔΔΔᐃⲆᐃ, jb.ᐃᐃⵠⵠΔⲆΔ, jb.ᐃⲆⲆΔⵠⲆᐃ, jb.ΔᐃⲆΔⵠᐃᐃ, jb.ᐃΔᐃᐃⵠΔᐃ, jb.ΔⵠᐃⵠΔⲆᐃ, jb.ⵠᐃⲆΔⲆⲆΔ, jb.ⲆΔⵠΔⲆⵠΔ, jb.ᐃⵠⲆᐃⲆⲆⲆ, jb.ⵠⵠⲆⵠⲆᐃⵠ, jb.ΔⲆⲆⲆᐃΔΔ, jb.ⵠᐃᐃᐃᐃⲆⲆ, jb.ⲆΔⲆΔⵠᐃᐃ];
        ΔⲆ[243][_r.ΔⵠΔ] = [jb.ⲆΔⵠᐃΔⲆⵠ, jb.ΔⵠⲆⵠᐃᐃΔ, jb.ΔΔⲆⲆΔⲆΔ, jb.ⵠⵠⵠΔΔΔⵠ, jb.ⵠⲆⲆᐃⲆⲆΔ, jb.ᐃΔΔⵠᐃΔⲆ, jb.ᐃⵠⵠΔⵠⲆΔ, jb.ⵠᐃᐃⲆΔᐃᐃ, jb.ΔⵠⵠΔⵠⲆᐃ, jb.ⲆⲆᐃⵠⵠΔᐃ, jb.ΔΔᐃⵠⵠⵠΔ, jb.ⵠᐃΔᐃᐃⵠⲆ, jb.ⵠᐃⲆⲆΔΔᐃ, jb.ⵠⵠΔᐃΔᐃⵠ, jb.ᐃⵠᐃᐃΔᐃⵠ, jb.ⵠᐃᐃᐃⲆᐃᐃ, jb.ⲆⲆᐃⵠⵠΔⲆ, jb.ⵠΔⵠⲆⵠΔⵠ, jb.ⵠⵠⲆⲆΔΔⵠ, jb.ⲆΔⲆᐃⲆⲆⵠ, jb.ⲆⲆⵠΔⵠΔΔ, jb.ⲆᐃᐃᐃⲆⲆⵠ, jb.ⲆⵠᐃᐃΔⵠⲆ, jb.ᐃⵠⵠⲆᐃΔⵠ, jb.ⲆⲆⲆⲆⵠΔⵠ, jb.ⲆⵠⵠⵠⲆⲆΔ, jb.ⵠᐃᐃⵠⲆΔΔ, jb.ⲆⲆΔⵠᐃⲆᐃ, jb.ⲆΔⲆᐃⵠⲆᐃ, jb.ⲆᐃΔᐃⵠΔⵠ, jb.ᐃⲆⲆⲆᐃᐃᐃ, jb.ⲆⲆᐃⲆⲆⵠⲆ, jb.ⵠΔⵠΔⵠΔᐃ, jb.ΔⵠⵠⲆⲆⵠᐃ, jb.ⵠᐃⲆⵠⵠᐃΔ, jb.ⵠⲆⲆΔΔⵠΔ, jb.ΔᐃⵠⵠⵠᐃⲆ, jb.ΔᐃⵠΔᐃⲆⲆ, jb.ⲆⵠᐃⲆΔⲆᐃ, jb.ⵠΔᐃᐃⲆⵠΔ, jb.ΔⵠⵠⲆᐃⵠΔ, jb.ΔΔⵠᐃⲆⵠᐃ, jb.ᐃⲆⵠⲆᐃΔᐃ, jb.ᐃⲆⲆⲆΔᐃⵠ, jb.ᐃⵠᐃⲆⲆΔⵠ, jb.ᐃⵠⵠᐃⵠⲆΔ, jb.ᐃᐃΔⲆᐃⵠΔ, jb.ΔⵠΔΔᐃⲆᐃ, jb.ᐃᐃΔᐃᐃⵠⵠ, jb.ⲆΔⲆΔⲆⵠΔ, jb.ⵠⵠΔΔᐃⵠᐃ, jb.ⵠᐃΔᐃⲆⵠⵠ, jb.ΔⲆΔⲆⲆⵠᐃ, jb.ΔᐃᐃᐃΔΔΔ, jb.ⵠⵠⵠΔⵠⵠᐃ, jb.ᐃΔⲆᐃΔⲆⲆ];
        ΔⲆ[676] = [];
        ΔⲆ[676][_r.ΔΔⵠ] = [];
        ΔⲆ[676][_r.ΔⵠΔ] = [];
        ΔⲆ[676][_r.ΔΔⵠ].push(sq(du(1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
        ΔⲆ[676][_r.ΔΔⵠ].push(sq(du(0.9, false, ["#252B28", "#747471", "#83827e"], 1)));
        ΔⲆ[676][_r.ΔΔⵠ].push(sq(du(1, false, ["#252B28", "#747471", "#83827e"], 2)));
        ΔⲆ[676][_r.ΔΔⵠ].push(sq(du(0.9, false, ["#252B28", "#747471", "#83827e"], 2)));
        ΔⲆ[676][_r.ΔⵠΔ].push(sq(du(1.1, false, ["#030d14", "#123335", "#183f3f"], 0)));
        ΔⲆ[676][_r.ΔⵠΔ].push(sq(du(0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
        ΔⲆ[676][_r.ΔⵠΔ].push(sq(du(1, false, ["#030d14", "#123335", "#183f3f"], 2)));
        ΔⲆ[676][_r.ΔⵠΔ].push(sq(du(0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
        ΔⲆ[679] = [];
        ΔⲆ[679][_r.ΔΔⵠ] = [];
        ΔⲆ[679][_r.ΔⵠΔ] = [];
        ΔⲆ[679][_r.ΔΔⵠ].push(sq(du(1.1, hj, ["#252B28", "#58645F", "#75827D"], 2)));
        ΔⲆ[679][_r.ΔΔⵠ].push(sq(du(0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
        ΔⲆ[679][_r.ΔΔⵠ].push(sq(du(1, ho, ["#252B28", "#58645F", "#75827D"], 2)));
        ΔⲆ[679][_r.ΔΔⵠ].push(sq(du(0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
        ΔⲆ[679][_r.ΔⵠΔ].push(sq(du(1.1, Mo, ["#030d14", "#123335", "#183f3f"], 2)));
        ΔⲆ[679][_r.ΔⵠΔ].push(sq(du(0.9, zq, ["#030d14", "#123335", "#183f3f"], 2)));
        ΔⲆ[679][_r.ΔⵠΔ].push(sq(du(1, Aq, ["#030d14", "#123335", "#183f3f"], 2)));
        ΔⲆ[679][_r.ΔⵠΔ].push(sq(du(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
        ΔⲆ[415] = [];
        ΔⲆ[415][_r.ΔΔⵠ] = [];
        ΔⲆ[415][_r.ΔⵠΔ] = [];
        ΔⲆ[415][_r.ΔΔⵠ].push(sq(hu(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ΔⲆ[415][_r.ΔΔⵠ].push(sq(hu(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ΔⲆ[415][_r.ΔΔⵠ].push(sq(hu(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ΔⲆ[415][_r.ΔⵠΔ].push(sq(hu(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ΔⲆ[415][_r.ΔⵠΔ].push(sq(hu(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ΔⲆ[415][_r.ΔⵠΔ].push(sq(hu(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ΔⲆ[416] = [];
        ΔⲆ[416][_r.ΔΔⵠ] = [];
        ΔⲆ[416][_r.ΔⵠΔ] = [];
        ΔⲆ[416][_r.ΔΔⵠ].push(sq(wu(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ΔⲆ[416][_r.ΔΔⵠ].push(sq(wu(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ΔⲆ[416][_r.ΔΔⵠ].push(sq(wu(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ΔⲆ[416][_r.ΔⵠΔ].push(sq(wu(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ΔⲆ[416][_r.ΔⵠΔ].push(sq(wu(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ΔⲆ[416][_r.ΔⵠΔ].push(sq(wu(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ΔⲆ[121] = [];
        ΔⲆ[121][_r.ΔΔⵠ] = [];
        ΔⲆ[121][_r.ΔⵠΔ] = [];
        ΔⲆ[121][_r.ΔΔⵠ].push(sq(Sc(1.7, true, ["#1d051e", "#c27add", "#cd98e5"])));
        ΔⲆ[121][_r.ΔΔⵠ].push(sq(Sc(1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
        ΔⲆ[121][_r.ΔΔⵠ].push(sq(Sc(1.3, Tn, ["#1d051e", "#c27add", "#cd98e5"])));
        ΔⲆ[121][_r.ΔⵠΔ].push(sq(Sc(1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ΔⲆ[121][_r.ΔⵠΔ].push(sq(Sc(1.5, Ca, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ΔⲆ[121][_r.ΔⵠΔ].push(sq(Sc(1.3, Zr, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ΔⲆ[678] = [];
        ΔⲆ[678][_r.ΔΔⵠ] = [];
        ΔⲆ[678][_r.ΔⵠΔ] = [];
        ΔⲆ[678][_r.ΔΔⵠ].push(sq(Dc(1, ["#2d53c4"])));
        ΔⲆ[678][_r.ΔⵠΔ].push(sq(Dc(1, ["#2d53c4"])));
        ΔⲆ[696] = [];
        ΔⲆ[696][_r.ΔΔⵠ] = [];
        ΔⲆ[696][_r.ΔⵠΔ] = [];
        ΔⲆ[696][_r.ΔΔⵠ].push(sq(Dc(1, ["#c4912d"])));
        ΔⲆ[696][_r.ΔⵠΔ].push(sq(Dc(1, ["#c4912d"])));
        ΔⲆ[680] = [];
        ΔⲆ[680][_r.ΔΔⵠ] = sq(Hc(1, ["#414040"]));
        ΔⲆ[680][_r.ΔⵠΔ] = sq(Hc(1, ["#153635"]));
        ΔⲆ[508] = [];
        ΔⲆ[508][_r.ΔΔⵠ] = sq(nc(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ΔⲆ[508][_r.ΔⵠΔ] = sq(nc(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ΔⲆ[509] = [];
        ΔⲆ[509][_r.ΔΔⵠ] = sq(pu(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ΔⲆ[509][_r.ΔⵠΔ] = sq(pu(1, vn, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ΔⲆ[512] = [];
        ΔⲆ[512][_r.ΔΔⵠ] = sq(pu(1, Yk, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ΔⲆ[512][_r.ΔⵠΔ] = sq(pu(1, Yn, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ΔⲆ[511] = [];
        ΔⲆ[511][_r.ΔΔⵠ] = sq(su(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ΔⲆ[511][_r.ΔⵠΔ] = sq(su(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ΔⲆ[510] = [];
        ΔⲆ[510][_r.ΔΔⵠ] = sq(zu(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ΔⲆ[510][_r.ΔⵠΔ] = sq(zu(1, z, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ΔⲆ[419] = [];
        ΔⲆ[419][_r.ΔΔⵠ] = sq(em(0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
        ΔⲆ[419][_r.ΔⵠΔ] = sq(em(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
        ΔⲆ[445] = [];
        ΔⲆ[445][_r.ΔΔⵠ] = sq(Vc(0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
        ΔⲆ[445][_r.ΔⵠΔ] = sq(Vc(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
        ΔⲆ[259] = [];
        ΔⲆ[818] = [];
        ΔⲆ[516] = [];
        ΔⲆ[819] = [];
        for (a = 0; a < 2; a++) {
            ΔⲆ[259][a] = document.createElement("canvas");
            ΔⲆ[259][a].width = 193;
            ΔⲆ[259][a].height = 193;
            ΔⲆ[818][a] = ΔⲆ[259][a].getContext("2d");
            ΔⲆ[516][a] = document.createElement("canvas");
            ΔⲆ[516][a].width = 600;
            ΔⲆ[516][a].height = 600;
            ΔⲆ[819][a] = ΔⲆ[516][a].getContext("2d");
        }
        ΔⲆ[475] = [];
        ΔⲆ[475][_r.ΔΔⵠ] = sq(Hc(1, ["#c8e0de"]));
        ΔⲆ[475][_r.ΔⵠΔ] = sq(Hc(1, ["#147071"]));
        ΔⲆ[476] = [];
        ΔⲆ[476][_r.ΔΔⵠ] = sq(Hc(1, ["#231912"]));
        ΔⲆ[476][_r.ΔⵠΔ] = sq(Hc(1, ["#021719"]));
        ΔⲆ[697] = sq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 253;
            c.height = a * 192;
            d.save();
            d.translate(a * 37, a * 94);
            Zb(d, a * -7, a * -20, a * 14, a * 37, a * 20);
            d.restore();
            Xb(d, b[0]);
            d.save();
            d.translate(a * 131, a * 94);
            Zb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
            d.restore();
            Xb(d, b[0], b[0], a * 13);
            d.save();
            d.translate(a * 223, a * 94.5);
            Zb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
            d.restore();
            Xb(d, b[0]);
            d.save();
            d.translate(a * 128.5, a * 170.5);
            Zb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
            d.restore();
            Xb(d, b[0]);
            return c;
        }(0.5, ["#BB0000"]));
        ΔⲆ[461] = sq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 161;
            c.height = a * 190;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 9, a * 93);
            d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
            d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
            d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
            d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
            d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
            d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
            d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
            d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
            d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
            d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
            d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
            d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
            d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
            d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
            d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
            d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
            d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
            d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
            d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
            d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
            d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
            d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
            d.closePath();
            Xb(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 25, a * 63);
            d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
            d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
            d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
            Xb(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 91, a * 53);
            d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
            d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
            d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
            Xb(d, b, b, a * 4);
            return c;
        }(0.9, "#BB0000"));
        ΔⲆ[462] = sq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 147;
            c.height = a * 172;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 8, a * 50);
            d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
            d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
            d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
            d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
            d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
            d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
            d.closePath();
            Xb(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 14, a * 57);
            d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
            d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
            Xb(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 93, a * 47);
            d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
            d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
            Xb(d, b, b, a * 4);
            return c;
        }(0.9, "#BB0000"));
        ΔⲆ[463] = sq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 271;
            c.height = a * 366;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 133, a * 99);
            d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
            d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
            d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
            d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
            d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
            d.closePath();
            Xb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 73, a * 270);
            d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
            d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
            d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
            d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
            d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
            d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
            d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
            d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
            d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
            d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
            d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
            d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
            d.closePath();
            Xb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 76, a * 252);
            d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
            d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
            d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
            d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
            d.closePath();
            Xb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 84, a * 257);
            d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
            d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
            d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
            d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
            d.closePath();
            Xb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 125, a * 65);
            d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
            d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
            d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
            d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
            d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
            d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
            d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
            d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
            d.closePath();
            Xb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 115, a * 37);
            d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
            d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
            d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
            d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
            d.closePath();
            Xb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 146, a * 34);
            d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
            d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
            d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
            d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
            d.closePath();
            Xb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 143, a * 69);
            d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
            d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
            d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
            d.closePath();
            Xb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 149, a * 92);
            d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
            d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
            d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
            d.closePath();
            Xb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 111, a * 61);
            d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
            d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
            d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
            d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
            d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
            d.closePath();
            Xb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 107, a * 81);
            d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
            d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
            d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
            d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
            d.closePath();
            Xb(d, b[0]);
            return c;
        }(1, ["#BB0000"]));
        ΔⲆ[466] = sq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 85;
            c.height = a * 145;
            d.translate(a * -20, a * -95);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 50, a * 105);
            d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
            d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
            d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
            d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
            d.closePath();
            Xb(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 44, a * 106);
            d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
            d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
            d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
            d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
            d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
            d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
            d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
            d.closePath();
            Xb(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 30, a * 159);
            d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
            d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
            d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
            d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
            d.closePath();
            Xb(d, b);
            return c;
        }(0.8, "#BB0000"));
        ΔⲆ[467] = sq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 85;
            c.height = a * 145;
            d.translate(a * -165, a * -95);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 217, a * 103);
            d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
            d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
            d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
            d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
            d.closePath();
            Xb(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 231, a * 163);
            d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
            d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
            d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
            d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
            d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
            d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
            d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
            d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
            d.closePath();
            Xb(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 234, a * 154);
            d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
            d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
            d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
            d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
            d.closePath();
            Xb(d, b);
            return c;
        }(0.8, "#BB0000"));
        ΔⲆ[322] = sq(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 85;
            var g = b * 115;
            var a = b * 4;
            d.width = f;
            d.height = g;
            e.translate(b * -130, b * -60);
            e.globalAlpha = 1;
            e.beginPath();
            e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
            e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
            e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
            e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
            e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
            e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
            e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
            e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
            e.closePath();
            Xb(e, c, c, a);
            return d;
        }(0.9, "#BB0000"));
        ΔⲆ[279] = sq(ud(0.6, "#BB0000"));
        ΔⲆ[280] = sq(ud(0.6, "#1CE7E0"));
        ΔⲆ[281] = sq(ud(0.6, "#DBE71C"));
        ΔⲆ[308] = sq(ud(0.6, "#00BB00"));
        ΔⲆ[602] = [];
        ΔⲆ[602][_r.ΔΔⵠ] = sq(Hc(1, ["#dac291"]));
        ΔⲆ[602][_r.ΔⵠΔ] = sq(Hc(1, ["#0D423D"]));
        ΔⲆ[698] = [];
        ΔⲆ[698][_r.ΔΔⵠ] = sq(Hc(1, ["#dac291"]));
        ΔⲆ[698][_r.ΔⵠΔ] = sq(Hc(1, ["#0D423D"]));
        ΔⲆ[788] = [];
        ΔⲆ[788][_r.ΔΔⵠ] = sq(Gm(0.3, vr, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
        ΔⲆ[788][_r.ΔⵠΔ] = sq(Gm(0.3, Gr, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
        ΔⲆ[182] = [];
        ΔⲆ[182][_r.ΔΔⵠ] = sq(Gm(0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
        ΔⲆ[182][_r.ΔⵠΔ] = sq(Gm(0.3, Ho, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
        ΔⲆ[127] = [sq(Mm(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
        ΔⲆ[128] = [sq(Mm(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
        ΔⲆ[603] = [];
        ΔⲆ[603][_r.ΔΔⵠ] = [];
        ΔⲆ[603][_r.ΔⵠΔ] = [];
        ΔⲆ[603][_r.ΔΔⵠ].push(sq(xc(1, ["#0B6A84"])));
        ΔⲆ[603][_r.ΔΔⵠ].push(sq(vc(1, ["#0B6A84"])));
        ΔⲆ[603][_r.ΔΔⵠ].push(sq(Xc(1, ["#0B6A84"])));
        ΔⲆ[603][_r.ΔΔⵠ].push(sq($c(1, ["#0B6A84"])));
        ΔⲆ[603][_r.ΔΔⵠ].push(sq(Uc(1, ["#0B6A84"])));
        ΔⲆ[603][_r.ΔΔⵠ].push(sq(Yc(1, ["#0B6A84"])));
        ΔⲆ[603][_r.ΔΔⵠ].push(sq(tm(1, ["#0B6A84"])));
        ΔⲆ[603][_r.ΔⵠΔ].push(sq(xc(1, ["#09373F"])));
        ΔⲆ[603][_r.ΔⵠΔ].push(sq(vc(1, ["#09373F"])));
        ΔⲆ[603][_r.ΔⵠΔ].push(sq(Xc(1, ["#09373F"])));
        ΔⲆ[603][_r.ΔⵠΔ].push(sq($c(1, ["#09373F"])));
        ΔⲆ[603][_r.ΔⵠΔ].push(sq(Uc(1, ["#09373F"])));
        ΔⲆ[603][_r.ΔⵠΔ].push(sq(Yc(1, ["#09373F"])));
        ΔⲆ[603][_r.ΔⵠΔ].push(sq(tm(1, ["#09373F"])));
        ΔⲆ[692] = [];
        ΔⲆ[692][_r.ΔΔⵠ] = [];
        ΔⲆ[692][_r.ΔⵠΔ] = [];
        ΔⲆ[692][_r.ΔΔⵠ].push(sq(cc(1.7, ["#FBEFBC"], 0)));
        ΔⲆ[692][_r.ΔΔⵠ].push(sq(cc(1.9, ["#FBEFBC"], 1)));
        ΔⲆ[692][_r.ΔΔⵠ].push(sq(cc(1.7, ["#FBEFBC"], 2)));
        ΔⲆ[692][_r.ΔⵠΔ].push(sq(cc(1.7, ["#0F4C48"], 0)));
        ΔⲆ[692][_r.ΔⵠΔ].push(sq(cc(1.9, ["#0F4C48"], 1)));
        ΔⲆ[692][_r.ΔⵠΔ].push(sq(cc(1.7, ["#0F4C48"], 2)));
        ΔⲆ[694] = [];
        ΔⲆ[694][_r.ΔΔⵠ] = [];
        ΔⲆ[694][_r.ΔⵠΔ] = [];
        ΔⲆ[694][_r.ΔΔⵠ].push(sq(cc(1.8, ["#A9D6D3"], 0)));
        ΔⲆ[694][_r.ΔΔⵠ].push(sq(cc(2, ["#A9D6D3"], 1)));
        ΔⲆ[694][_r.ΔΔⵠ].push(sq(cc(1.8, ["#A9D6D3"], 2)));
        ΔⲆ[694][_r.ΔⵠΔ].push(sq(cc(1.8, ["#115E60"], 0)));
        ΔⲆ[694][_r.ΔⵠΔ].push(sq(cc(2, ["#115E60"], 1)));
        ΔⲆ[694][_r.ΔⵠΔ].push(sq(cc(1.8, ["#115E60"], 2)));
        ΔⲆ[695] = [];
        ΔⲆ[695][_r.ΔΔⵠ] = [];
        ΔⲆ[695][_r.ΔⵠΔ] = [];
        ΔⲆ[695][_r.ΔΔⵠ].push(sq(cc(1.9, ["#2A8B9B"], 0)));
        ΔⲆ[695][_r.ΔΔⵠ].push(sq(cc(2.1, ["#2A8B9B"], 1)));
        ΔⲆ[695][_r.ΔΔⵠ].push(sq(cc(1.9, ["#2A8B9B"], 2)));
        ΔⲆ[695][_r.ΔⵠΔ].push(sq(cc(1.9, ["#0F464C"], 0)));
        ΔⲆ[695][_r.ΔⵠΔ].push(sq(cc(2.1, ["#0F464C"], 1)));
        ΔⲆ[695][_r.ΔⵠΔ].push(sq(cc(1.9, ["#0F464C"], 2)));
        ΔⲆ[693] = [];
        ΔⲆ[693][_r.ΔΔⵠ] = [];
        ΔⲆ[693][_r.ΔⵠΔ] = [];
        ΔⲆ[693][_r.ΔΔⵠ].push(sq(ic(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ΔⲆ[693][_r.ΔΔⵠ].push(sq(ic(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ΔⲆ[693][_r.ΔΔⵠ].push(sq(ic(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ΔⲆ[693][_r.ΔⵠΔ].push(sq(ic(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ΔⲆ[693][_r.ΔⵠΔ].push(sq(ic(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ΔⲆ[693][_r.ΔⵠΔ].push(sq(ic(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ΔⲆ[637] = [];
        ΔⲆ[637][_r.ΔΔⵠ] = sq(gp(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
        ΔⲆ[637][_r.ΔⵠΔ] = sq(gp(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
        ΔⲆ[687] = sq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 376;
            c.height = a * 371;
            d.globalAlpha = 1;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 191.633544921875, a * 123.98580932617188);
            d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
            d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
            d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
            d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
            d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
            d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
            d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
            d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
            d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
            d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
            d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
            d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
            d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
            d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
            d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
            d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
            d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
            d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
            d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
            d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
            d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
            d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
            d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
            d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
            d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
            d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
            d.closePath();
            Xb(d, b[0], b[0], a * 12);
            return c;
        }(0.8, ["#B6222A"]));
        ΔⲆ[673] = [];
        ΔⲆ[673][_r.ΔΔⵠ] = sq(mp(0.8, true, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
        ΔⲆ[673][_r.ΔⵠΔ] = sq(mp(0.8, vr, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
        ΔⲆ[688] = sq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 158;
            c.height = a * 201;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 96.5, a * 76.421875);
            d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
            d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
            d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
            d.closePath();
            Xb(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 61.5, a * 78.421875);
            d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
            d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
            d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
            d.closePath();
            Xb(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 116.5, a * 127.421875);
            d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
            d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
            d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
            d.closePath();
            Xb(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 41.5, a * 134.421875);
            d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
            d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
            d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
            d.closePath();
            Xb(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 78.5, a * 51.921875);
            d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
            d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
            d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
            d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
            d.closePath();
            Xb(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 72.5, a * 72.421875);
            d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
            d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
            d.closePath();
            Xb(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 42.5, a * 163.421875);
            d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
            d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
            d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
            d.closePath();
            Xb(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 79.5, a * 61.421875);
            d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
            d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
            d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
            d.closePath();
            Xb(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 72.5, a * 72.421875);
            d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
            d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
            d.closePath();
            Xb(d, b[0], b[0], a * 10);
            return c;
        }(0.8, ["#B6222A"]));
        ΔⲆ[902] = [];
        ΔⲆ[902][_r.ΔΔⵠ] = sq(Pd(0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
        ΔⲆ[902][_r.ΔⵠΔ] = sq(Pd(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
        ΔⲆ[903] = [];
        ΔⲆ[903][_r.ΔΔⵠ] = sq(Pd(0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
        ΔⲆ[903][_r.ΔⵠΔ] = sq(Pd(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
        ΔⲆ[_r.ⵠⲆΔΔⵠᐃΔ] = [];
        ΔⲆ[_r.ⵠⲆΔΔⵠᐃΔ][_r.ΔΔⵠ] = sq(Pd(0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
        ΔⲆ[_r.ⵠⲆΔΔⵠᐃΔ][_r.ΔⵠΔ] = sq(Pd(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
        ΔⲆ[904] = sq(yd(0.4, ["#B6222A"]));
        ΔⲆ[905] = sq(yd(0.4, ["#B6222A"]));
        ΔⲆ[_r.ᐃⵠⵠⲆⲆΔΔⵠΔ] = sq(yd(0.4, ["#B6222A"]));
        ΔⲆ[230] = sq(Pc(0.35, Ca, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
        ΔⲆ[229] = sq(Mt(0.35, Mo, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
        ΔⲆ[886] = [];
        ΔⲆ[886][_r.ΔΔⵠ] = sq(Ot(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
        ΔⲆ[886][_r.ΔⵠΔ] = sq(Ot(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
        ΔⲆ[887] = [];
        ΔⲆ[887][_r.ΔΔⵠ] = sq(Ot(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
        ΔⲆ[887][_r.ΔⵠΔ] = sq(Ot(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
        ΔⲆ[894] = [];
        ΔⲆ[894][_r.ΔΔⵠ] = sq(Wt(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
        ΔⲆ[894][_r.ΔⵠΔ] = sq(Wt(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
        ΔⲆ[895] = [];
        ΔⲆ[895][_r.ΔΔⵠ] = sq(Yt(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
        ΔⲆ[895][_r.ΔⵠΔ] = sq(Yt(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
        ΔⲆ[896] = [];
        ΔⲆ[896][_r.ΔΔⵠ] = sq(Wt(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
        ΔⲆ[896][_r.ΔⵠΔ] = sq(Wt(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
        ΔⲆ[897] = [];
        ΔⲆ[897][_r.ΔΔⵠ] = sq(Yt(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
        ΔⲆ[897][_r.ΔⵠΔ] = sq(Yt(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
        ΔⲆ[888] = sq(Qt(0.35, ["#B6222A"]));
        ΔⲆ[889] = sq(Wt(0.35, 0, [mn, "#B6222A"]));
        ΔⲆ[890] = sq(Yt(0.35, 0, [_a, "#B6222A"]));
        ΔⲆ[891] = sq(Qt(0.35, ["#22E066"]));
        ΔⲆ[892] = sq(Wt(0.35, 0, [undefined, "#22E066"]));
        ΔⲆ[893] = sq(Yt(0.35, 0, [gs, "#22E066"]));
        ΔⲆ[48] = [];
        ΔⲆ[48][_r.ΔΔⵠ] = sq(ac(0.3, Ho, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
        ΔⲆ[48][_r.ΔⵠΔ] = sq(ac(0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
        ΔⲆ[47] = [];
        ΔⲆ[47][_r.ΔΔⵠ] = sq(gc(0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
        ΔⲆ[47][_r.ΔⵠΔ] = sq(gc(0.45, zq, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
        ΔⲆ[141] = [];
        ΔⲆ[141][_r.ΔΔⵠ] = sq(Um(0.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
        ΔⲆ[141][_r.ΔⵠΔ] = sq(Um(0.63, Ho, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
        ΔⲆ[125] = [];
        ΔⲆ[125][_r.ΔΔⵠ] = sq(Ym(1, ho, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
        ΔⲆ[125][_r.ΔⵠΔ] = sq(Ym(1, Hj, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
        ΔⲆ[221] = [];
        ΔⲆ[221][_r.ΔΔⵠ] = jb.Δⵠᐃᐃᐃᐃᐃⵠⵠ;
        ΔⲆ[221][_r.ΔⵠΔ] = jb.ᐃΔⲆⵠⵠⵠΔᐃΔ;
        ΔⲆ[190] = [];
        ΔⲆ[190][_r.ΔΔⵠ] = sq(dd(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ΔⲆ[190][_r.ΔⵠΔ] = sq(dd(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ΔⲆ[853] = [ΔⲆ[190]];
        ΔⲆ[853][1] = [];
        ΔⲆ[853][2] = [];
        ΔⲆ[853][1][_r.ΔΔⵠ] = sq(vd(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ΔⲆ[853][1][_r.ΔⵠΔ] = sq(vd(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ΔⲆ[853][2][_r.ΔΔⵠ] = sq(hd(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ΔⲆ[853][2][_r.ΔⵠΔ] = sq(hd(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ΔⲆ[49] = [];
        ΔⲆ[49][_r.ΔΔⵠ] = sq(ad(3 - Math.PI / 2, lp(0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
        ΔⲆ[49][_r.ΔⵠΔ] = sq(ad(3 - Math.PI / 2, lp(0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
        ΔⲆ[728] = [];
        ΔⲆ[728][_r.ΔΔⵠ] = sq(_d(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
        ΔⲆ[728][_r.ΔⵠΔ] = sq(_d(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
        ΔⲆ[798] = sq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 650;
            c.height = a * 650;
            d.scale(1.9, 1.9);
            d.save();
            d.translate(a * 202.5, a * 147.5);
            Zb(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
            d.restore();
            Xb(d, b[4], b[1], a * 12);
            d.save();
            d.translate(a * 203.5, a * 121.5);
            Zb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
            d.restore();
            Xb(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 203.5, a * 299);
            Zb(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
            d.restore();
            Xb(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 298.5, a * 210);
            Zb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            Xb(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 108.5, a * 210);
            Zb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            Xb(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 204, a * 121.5);
            Zb(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
            d.restore();
            Xb(d, b[3], b[3], a * 10);
            d.save();
            d.translate(a * 197, a * 299);
            Zb(d, a * 85, a * -9, a * -170, a * 18, a * 10);
            d.restore();
            Xb(d, b[3], b[3], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 94, a * 317);
            d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
            d.closePath();
            Xb(d, undefined, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 279, a * 142);
            d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
            d.closePath();
            Xb(d, yl, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 93, a * 106);
            d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
            d.closePath();
            Xb(d, undefined, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 281, a * 282);
            d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
            d.closePath();
            Xb(d, undefined, b[1], a * 12);
            return c;
        }(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
        ΔⲆ[729] = sq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 400;
            c.height = a * 400;
            d.save();
            d.translate(a * 202.5, a * 147.5);
            Zb(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
            d.restore();
            Xb(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 190.5);
            Zb(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
            d.restore();
            Xb(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 233.5);
            Zb(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
            d.restore();
            Xb(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 275);
            Zb(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
            d.restore();
            Xb(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 203.5, a * 121.5);
            Zb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
            d.restore();
            Xb(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 203.5, a * 299);
            Zb(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
            d.restore();
            Xb(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 298.5, a * 210);
            Zb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            Xb(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 108.5, a * 210);
            Zb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            Xb(d, b[0], b[0], a * 12);
            return c;
        }(0.3, ["#BB0000"]));
        ΔⲆ[658] = Kd(1, [{
            f: Xm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
        }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ΔⲆ[150] = Kd(1.5, [{
            f: um,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#120202", "#750a0a", "#991616", "#120202"]
        }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
        ΔⲆ[669] = bp(0.35, ["#072428", "#67A242", "#67A242"], 0);
        ΔⲆ[670] = bp(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
        ΔⲆ[671] = bp(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
        ΔⲆ[672] = bp(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
        if (ⵠⲆⵠⵠⵠⲆⵠ) {
            ΔⲆ[278] = sq(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 200;
                var f = b * 180;
                var g = b * 8;
                c.width = e;
                c.height = f;
                d.beginPath();
                Zb(d, 0, 0, e, f - g, g);
                d.globalAlpha = 0.8;
                Xb(d, "#1D6055");
                d.globalAlpha = 1;
                var a = ku(b, "Leaderboard", 25, "#FFF");
                d.drawImage(a, (e - a.width) / 2, b * 5);
                return c;
            }(1));
        } else {
            ΔⲆ[278] = sq(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 200;
                var f = b * 270;
                var g = b * 8;
                c.width = e;
                c.height = f + 20;
                d.beginPath();
                Zb(d, 0, 0, e, f - g, g);
                d.globalAlpha = 0.5;
                Xb(d, "#1D6055");
                d.globalAlpha = 1;
                var a = ku(b, "Leaderboard", 25, "#FFF");
                d.drawImage(a, (e - a.width) / 2, b * 5);
                return c;
            }(1));
        }
        if (ⵠⲆⵠⵠⵠⲆⵠ) {
            ΔⲆ[267] = sq(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 335;
                var f = b * 250;
                var i = b * 120;
                var a = b * 20;
                var j = b * 35;
                var k = b * 65;
                var h = b * 2;
                var l = b * 4;
                c.width = e;
                c.height = i;
                d.beginPath();
                d.translate(0, b * 15);
                Zb(d, k, 0, f, a, h);
                Xb(d, null, "#69A148", l);
                d.translate(0, j);
                Zb(d, k, 0, f, a, h);
                Xb(d, null, "#AF352A", l);
                d.translate(0, j);
                Zb(d, k, 0, f, a, h);
                Xb(d, null, "#669BB1", l);
                return c;
            }(0.75));
        } else {
            ΔⲆ[267] = sq(function (c) {
                var e = document.createElement("canvas");
                var f = e.getContext("2d");
                var i = c * 950;
                var j = c * 180;
                var k = c * 50;
                var a = c * 20;
                var m = c * 240;
                var n = c * 35;
                var h = c * 1;
                var l = c * 4;
                var g = c * 4;
                e.width = i;
                e.height = k;
                f.translate(0, c * 15);
                Zb(f, n, h, j, a, l);
                Xb(f, null, "#69A148", g);
                var b = ΔⲆ[669];
                f.drawImage(b, 17, -8);
                f.translate(m, 0);
                Zb(f, n, h, j, a, l);
                Xb(f, null, "#AF352A", g);
                b = ΔⲆ[671];
                f.drawImage(b, 17, -9);
                f.translate(m, 0);
                Zb(f, n, h, j, a, l);
                Xb(f, null, "#669BB1", g);
                b = ΔⲆ[670];
                f.drawImage(b, 17, -8);
                f.translate(m, 0);
                Zb(f, n, h, j, a, l);
                Xb(f, null, "#074A87", g);
                b = ΔⲆ[672];
                f.drawImage(b, 17, -8);
                return e;
            }(1));
        }
        if (ⵠⲆⵠⵠⵠⲆⵠ) {
            ΔⲆ[608] = sq(Wm(0.75));
        } else {
            ΔⲆ[608] = sq(Wm(1));
        }
        ΔⲆ[792] = sq(km(0.16, Mo, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
        ΔⲆ[537] = sq(ad(5.8, Tt(0.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
        ΔⲆ[283] = [];
        ΔⲆ[465] = [];
        for (a = 0; a < 18; a++) {
            ΔⲆ[465][a] = ku(1, "" + (a + 1), 12, "#FFF");
        }
        ΔⲆ[708] = [];
        ΔⲆ[708].push(sq(up(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
        ΔⲆ[708].push(sq(up(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
        ΔⲆ[708].push(sq(up(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
        ΔⲆ[725] = [];
        ΔⲆ[725].push(sq(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            c.translate(0, a * 20);
            id(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            Xb(c, "#322413", "#322413", a * 4);
            c.translate(0, a * -20);
            id(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            Xb(c, "#392C16", "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
            c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
            c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
            c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
            c.closePath();
            Xb(c, "#12432D");
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
            c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
            c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
            c.closePath();
            Xb(c, "#3A2A0D");
            id(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
            Xb(c, yl, "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
            c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
            c.closePath();
            Xb(c, undefined, "#5E3E1A", a * 12);
            c.translate(0, a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            Xb(c, Vs, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            Xb(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            Xb(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            Xb(c, gs, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            Xb(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            Xb(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            Xb(c, Pg, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            Xb(c, gs, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            Xb(c, undefined, "#c7a726", a * 12);
            c.translate(0, a * -8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            Xb(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            Xb(c, Go, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            Xb(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            Xb(c, lj, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            Xb(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            Xb(c, _a, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            Xb(c, qs, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            Xb(c, Ur, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            Xb(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
            c.closePath();
            Xb(c, "#704618", "#5D3D1A", a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 96, a * 166);
            c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
            c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
            c.closePath();
            Xb(c, "#ECBE35", "#EDCE4F", a * 8);
            id(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
            Xb(c, "#392C16", "#5E3E1A", a * 10);
            return b;
        }(0.22)));
        ΔⲆ[725].push(sq(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            c.translate(0, a * 20);
            id(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            Xb(c, "#322413", "#322413", a * 4);
            c.translate(0, a * -20);
            id(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            Xb(c, "#392C16", "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
            c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
            c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
            c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
            c.closePath();
            Xb(c, "#3A2A0D");
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
            c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
            c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
            c.closePath();
            Xb(c, "#071A1B");
            id(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
            Xb(c, gs, "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
            c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
            c.closePath();
            Xb(c, Pg, "#5E3E1A", a * 12);
            c.translate(0, a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            Xb(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            Xb(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            Xb(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            Xb(c, Ur, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            Xb(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            Xb(c, Go, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            Xb(c, mn, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            Xb(c, mn, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            Xb(c, undefined, "#281C08", a * 12);
            c.translate(0, a * -8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            Xb(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            Xb(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            Xb(c, Sq, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            Xb(c, gs, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            Xb(c, Vs, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            Xb(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            Xb(c, fh, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            Xb(c, Jt, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            Xb(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 96, a * 166);
            c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
            c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
            c.closePath();
            Xb(c, "#704618", "#5D3D1A", a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
            c.closePath();
            Xb(c, "#E1DDD5", "#EAE7E4", a * 8);
            id(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
            Xb(c, "#392C16", "#5E3E1A", a * 10);
            return b;
        }(0.22)));
        ΔⲆ[726] = sq(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            id(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
            Xb(c, "#C09D6F", "#A37943", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
            c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
            c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
            c.closePath();
            Xb(c, "#C09D6F", "#A37943", a * 10);
            c.save();
            c.translate(a * 161.50003051757812, a * 117.90341186523438);
            Zb(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
            c.restore();
            Xb(c, "#C09D6F", "#A37943", a * 10);
            c.save();
            c.translate(a * 162.00003051757812, a * 78.90341186523438);
            Zb(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
            c.restore();
            Xb(c, "#C09D6F");
            id(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
            Xb(c, "#C09D6F");
            return b;
        }(0.22));
        ΔⲆ[727] = [];
        ΔⲆ[727].push(sq(wd(1.5, ["#795026", "#654320", "#eda80d"], 0)));
        ΔⲆ[727].push(sq(wd(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
        ΔⲆ[727].push(sq(wd(1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
        ΔⲆ[546] = jb.ΔⲆⲆⲆΔⲆⵠ;
        ΔⲆ[547] = jb.ΔⲆⲆⲆΔⵠⵠ;
        ΔⲆ[548] = jb.ⵠᐃⵠΔΔΔⵠ;
        ΔⲆ[549] = jb.ΔⲆⵠⵠΔΔᐃ;
        ΔⲆ[517] = ku(1, "Show spectators", 25, "#FFF", Vs, Pg, "#000", 5, 220);
        ΔⲆ[525] = ku(1, "Reconnecting...", 30, "#FFF");
        console.log(undefined, undefined);
    }
    function Nm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 110;
        c.height = a * 110;
        d.globalAlpha = 0.2;
        id(d, a * 55, a * 55, a * 55);
        Xb(d, b[0]);
        return c;
    }
    function Hm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 80;
        d.height = a * 160;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        Zb(e, a * 33, a * 53, a * 10, a * 98, a * 10);
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -150, a * -100);
        e.moveTo(a * 167.5, a * 171.0625);
        e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
        e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
        e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
        e.closePath();
        Xb(e, c[0]);
        e.restore();
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        Zb(e, a * 33, a * 53, a * 10, a * 98, a * 10);
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -150, a * -100);
        e.moveTo(a * 167.5, a * 171.0625);
        e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
        e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
        e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
        e.closePath();
        Xb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 0, a * 1);
        e.moveTo(a * 180.5, a * 169.0625);
        e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
        e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
        e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
        e.closePath();
        Xb(e, c[5]);
        e.restore();
        return d;
    }
    function qm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 160;
        d.height = a * 161;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 80.5, a * 78);
        Zb(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 80.5, a * 78);
        Zb(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
        e.restore();
        Xb(e, c[1], c[2], a * 6);
        e.save();
        e.translate(a * 80, a * 78.5);
        Zb(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
        e.restore();
        Xb(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 80, a * 79.5);
        Zb(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 80, a * 79.5);
        Zb(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
        e.restore();
        Xb(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 71);
        e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
        e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
        e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 78);
        e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
        e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
        e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 73);
        e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
        e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
        e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 83);
        e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
        e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
        e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
        e.closePath();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 71);
        e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
        e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
        e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
        e.closePath();
        Xb(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 78);
        e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
        e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
        e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
        e.closePath();
        Xb(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 73);
        e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
        e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
        e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
        e.closePath();
        Xb(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 83);
        e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
        e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
        e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
        e.closePath();
        Xb(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 78.5, a * 78);
        Zb(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 78.5, a * 78);
        Zb(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
        e.restore();
        Xb(e, c[3], c[4], a * 6);
        return d;
    }
    function Um(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 163;
        d.height = a * 163;
        e.save();
        e.translate(a * 82.5, a * 81.1015625);
        e.rotate(0);
        Zb(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
        e.restore();
        Xb(e, c[1]);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 80, a * 17.1015625);
        Zb(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 80, a * 17.1015625);
        Zb(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
        e.restore();
        Xb(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 83.6015625);
        Zb(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 83.6015625);
        Zb(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
        e.restore();
        Xb(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17.5, a * 82.6015625);
        Zb(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17.5, a * 82.6015625);
        Zb(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
        e.restore();
        Xb(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 80.5, a * 145.6015625);
        Zb(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 80.5, a * 145.6015625);
        Zb(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
        e.restore();
        Xb(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17, a * 18.1015625);
        Zb(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17, a * 18.1015625);
        Zb(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
        e.restore();
        Xb(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 16.6015625);
        Zb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 16.6015625);
        Zb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
        e.restore();
        Xb(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 144.1015625);
        Zb(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 144.1015625);
        Zb(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
        e.restore();
        Xb(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17.5, a * 145.1015625);
        Zb(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17.5, a * 145.1015625);
        Zb(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
        e.restore();
        Xb(e, c[2], c[3], a * 3);
        return d;
    }
    function Ym(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 102;
        d.height = a * 102;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(3, 3);
        Zb(e, a * 24, a * 26, a * 70, a * 9, a * 10);
        Xb(e, c[0]);
        Zb(e, a * 26, a * 70, a * 70, a * 9, a * 10);
        Xb(e, c[0]);
        Zb(e, a * 5, a * 3, a * 22, a * 94, a * 5);
        Xb(e, c[0]);
        Zb(e, a * 40, a * 3, a * 22, a * 94, a * 5);
        Xb(e, c[0]);
        Zb(e, a * 75, a * 3, a * 22, a * 94, a * 5);
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(-3, -3);
        Zb(e, a * 24, a * 26, a * 70, a * 9, a * 10);
        Xb(e, c[1]);
        Zb(e, a * 26, a * 70, a * 70, a * 9, a * 10);
        Xb(e, c[1]);
        Zb(e, a * 5, a * 3, a * 22, a * 94, a * 5);
        Xb(e, c[2], c[3], a * 4);
        Zb(e, a * 40, a * 3, a * 22, a * 94, a * 5);
        Xb(e, c[2], c[3], a * 4);
        Zb(e, a * 75, a * 3, a * 22, a * 94, a * 5);
        Xb(e, c[2], c[3], a * 4);
        return d;
    }
    function Km(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 465;
        d.height = a * 310;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 192);
        e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
        e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
        e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
        e.closePath();
        Xb(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 146, a * 239);
        e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
        e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
        e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
        e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
        e.closePath();
        Xb(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 193);
        e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
        e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
        e.closePath();
        Xb(e, undefined, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 230, a * 57);
        e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
        e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
        e.closePath();
        Xb(e, fh, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154, a * 212);
        e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
        e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
        e.closePath();
        Xb(e, undefined, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 239, a * 59);
        e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
        e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216, a * 61);
        e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
        e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
        e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
        e.closePath();
        Xb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 125);
        e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
        e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
        e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
        e.closePath();
        Xb(e, c[2]);
        return d;
    }
    function Vm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 247;
        d.height = a * 247;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 62);
        e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
        e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164, a * 171);
        e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
        e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        Xb(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 62);
        e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
        e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
        e.closePath();
        Xb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164, a * 171);
        e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
        e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
        e.closePath();
        Xb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        Xb(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 137);
        e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
        e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
        e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
        e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
        e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
        e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
        e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
        e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
        e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
        e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
        e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
        e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
        e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
        e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        Xb(e, undefined, c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 63);
        e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
        e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
        e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 148, a * 40);
        e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
        e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
        e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 189, a * 43);
        e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
        e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
        e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216, a * 98);
        e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
        e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
        e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 180, a * 85);
        e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
        e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
        e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96, a * 114);
        e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
        e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
        e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 92);
        e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
        e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
        e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 130);
        e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
        e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
        e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 113, a * 189);
        e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
        e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
        e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 154);
        e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
        e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
        e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206, a * 152);
        e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
        e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
        e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 181, a * 184);
        e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
        e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
        e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 66, a * 199);
        e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
        e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 143);
        e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
        e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 159);
        e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
        e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
        e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 214);
        e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
        e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
        e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40, a * 52);
        e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
        e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
        e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 81);
        e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
        e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
        e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
        e.closePath();
        Xb(e, c[4], c[5], a * 5);
        return d;
    }
    function Xm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 170;
        e.translate(0, a * -170);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159.5, a * 322.0625);
        e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
        e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
        e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
        e.closePath();
        Xb(e, c[0], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212.5, a * 270.0625);
        e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
        e.closePath();
        Xb(e, Sq, c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 193.5, a * 226.0625);
        e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
        e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
        e.closePath();
        Xb(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164.5, a * 245.0625);
        e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
        e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
        e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
        e.closePath();
        Xb(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115.5, a * 260.0625);
        e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
        e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
        e.closePath();
        Xb(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 152.5, a * 278.0625);
        e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
        e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
        e.closePath();
        Xb(e, c[2], c[3], a * 12);
        return d;
    }
    function Zm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.translate(0, a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        Xb(e, undefined, c[0], a * 11);
        e.translate(0, a * -5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        Xb(e, c[3], c[2], a * 12);
        e.translate(0, a * 25);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        Xb(e, c[5]);
        e.translate(0, a * -25);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        Xb(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 185);
        e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
        e.closePath();
        Xb(e, _a, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 287);
        e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
        e.closePath();
        Xb(e, gs, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 290);
        e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
        e.closePath();
        Xb(e, c[1], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 184);
        e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
        e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
        e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
        e.closePath();
        Xb(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 276);
        e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
        e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
        e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
        e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
        e.closePath();
        Xb(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        Xb(e, undefined, c[2], a * 11);
        return d;
    }
    function $m(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 137;
        d.height = a * 129;
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        Xb(e, undefined, c[2], a * 40);
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        Xb(e, undefined, c[1], a * 20);
        e.globalAlpha = 0.8;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        Xb(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
        e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
        e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
        e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
        e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
        e.closePath();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
        e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
        e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
        e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
        e.closePath();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.00003051757812, a * 49.625);
        e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
        e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
        e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
        e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
        e.closePath();
        Xb(e, c[1], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47.000030517578125, a * 36.625);
        e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
        e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
        e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
        e.closePath();
        Xb(e, c[1], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53.000030517578125, a * 52.625);
        e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
        e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
        e.closePath();
        Xb(e, c[3]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        Xb(e, Ab, c[3], a * 4);
        return d;
    }
    function ep() {
        var b = lx.time;
        if (ΔⲆ[285]) {
            mo.drawImage(ΔⲆ[285][b][1], ro + 480, vo + 190);
            mo.drawImage(ΔⲆ[285][b][2], ro + 180, vo - 430);
            mo.drawImage(ΔⲆ[285][b][1], ro - 855, vo + 100);
            mo.drawImage(ΔⲆ[285][b][0], ro - 550, vo - 300);
            mo.drawImage(ΔⲆ[285][b][0], ro - 1020, vo - 520);
        }
        if (ΔⲆ[108]) {
            mo.drawImage(ΔⲆ[108][b][1], ro - 80, vo - 640);
            mo.drawImage(ΔⲆ[108][b][1], ro + 80, vo + 490);
            mo.drawImage(ΔⲆ[108][b][2], ro - 180, vo - 700);
            mo.drawImage(ΔⲆ[108][b][0], ro + 550, vo + 100);
            mo.drawImage(ΔⲆ[108][b][1], ro + 450, vo + 300);
            mo.drawImage(ΔⲆ[108][b][1], ro + 780, vo + 300);
            mo.drawImage(ΔⲆ[108][b][2], ro + 980, vo + 200);
            mo.drawImage(ΔⲆ[108][b][2], ro + 680, vo + 600);
            mo.drawImage(ΔⲆ[108][b][2], ro - 380, vo + 100);
            mo.drawImage(ΔⲆ[108][b][2], ro + 280, vo + 250);
        }
        if (ΔⲆ[110]) {
            mo.drawImage(ΔⲆ[110][b][0], ro - 590, vo);
            mo.drawImage(ΔⲆ[110][b][0], ro + 120, vo - 390);
            mo.drawImage(ΔⲆ[110][b][0], ro - 270, vo + 340);
        }
        if (ΔⲆ[109]) {
            mo.drawImage(ΔⲆ[109][b][4], ro - 700, vo - 600);
            mo.drawImage(ΔⲆ[109][b][2], ro - 970, vo - 250);
            mo.drawImage(ΔⲆ[109][b][5], ro - 720, vo - 200);
            mo.drawImage(ΔⲆ[109][b][2], ro - 1020, vo + 340);
            mo.drawImage(ΔⲆ[109][b][0], ro - 1120, vo - 0);
            mo.drawImage(ΔⲆ[109][b][1], ro - 650, vo - 330);
            mo.drawImage(ΔⲆ[109][b][4], ro - 495, vo - 90);
            mo.drawImage(ΔⲆ[109][b][3], ro - 520, vo + 340);
            mo.drawImage(ΔⲆ[109][b][2], ro + 830, vo - 520);
        }
        ΔⲆ[413];
        if (nx && mx) {
            var c = nx.ᐃΔΔ.x;
            var d = nx.ᐃΔΔ.y;
            nx.ᐃΔΔ.x = ro;
            nx.ᐃΔΔ.y = vo;
            var e = mx.time;
            mx.time = lx.time;
            var f;
            var g = lx.items;
            g[2].x = 400;
            g[2].y = 100;
            g[2].Δⵠᐃⵠ(114);
            (f = g[1]).x = -500;
            f.y = 100;
            f.ⵠᐃⵠⲆ[0].x = f.x - 20.5;
            f.ⵠᐃⵠⲆ[0].y = f.y - 22.5;
            f.ⵠᐃⵠⲆ[1].x = f.x - 35.5;
            f.ⵠᐃⵠⲆ[1].y = f.y + 7.5;
            f.ⵠᐃⵠⲆ[2].x = f.x + 7.5;
            f.ⵠᐃⵠⲆ[2].y = f.y - 30;
            f.ⵠᐃⵠⲆ[3].x = f.x + 22.5;
            f.ⵠᐃⵠⲆ[3].y = f.y;
            f.ⵠᐃⵠⲆ[4].x = f.x - 7.5;
            f.ⵠᐃⵠⲆ[4].y = f.y + 14.5;
            for (var a = 0; f.info > a; a++) {
                f.ⵠᐃⵠⲆ[a].Δⵠᐃⵠ(294);
            }
            (f = g[3]).x = 210;
            f.y = -290;
            f.ⵠᐃⵠⲆ[0].x = f.x - 20.5;
            f.ⵠᐃⵠⲆ[0].y = f.y - 22.5;
            f.ⵠᐃⵠⲆ[1].x = f.x - 35.5;
            f.ⵠᐃⵠⲆ[1].y = f.y + 7.5;
            f.ⵠᐃⵠⲆ[2].x = f.x + 7.5;
            f.ⵠᐃⵠⲆ[2].y = f.y - 30;
            f.ⵠᐃⵠⲆ[3].x = f.x + 22.5;
            f.ⵠᐃⵠⲆ[3].y = f.y;
            f.ⵠᐃⵠⲆ[4].x = f.x - 7.5;
            f.ⵠᐃⵠⲆ[4].y = f.y + 14.5;
            for (a = 0; f.info > a; a++) {
                f.ⵠᐃⵠⲆ[a].Δⵠᐃⵠ(294);
            }
            g[0].x = 450;
            g[0].y = -100;
            g[0].ⵠⵠᐃⵠᐃ(113);
            g[0].ᐃᐃⲆΔᐃ();
            nx.ᐃΔΔ.x = c;
            nx.ᐃΔΔ.y = d;
            mx.time = e;
        }
    }
    function ip(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.translate(0, a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        Xb(e, undefined, c[0], a * 11);
        e.translate(0, a * -5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        Xb(e, c[3], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        Xb(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 185);
        e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
        e.closePath();
        Xb(e, fh, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 287);
        e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
        e.closePath();
        Xb(e, od, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 290);
        e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
        e.closePath();
        Xb(e, c[1], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 184);
        e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
        e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
        e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
        e.closePath();
        Xb(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 276);
        e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
        e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
        e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
        e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
        e.closePath();
        Xb(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        Xb(e, od, c[2], a * 11);
        return d;
    }
    function tp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 440;
        d.height = a * 388;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        id(e, a * 220, a * 201, a * 170.41713528867922);
        Xb(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        id(e, a * 220, a * 201, a * 170.41713528867922);
        Xb(e, c[1], c[2], a * 6);
        id(e, a * 220, a * 201, a * 130);
        Xb(e, c[11], c[2], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 218, a * 97);
        e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
        e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
        e.closePath();
        Xb(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224, a * 181);
        e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
        e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
        e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
        e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
        e.closePath();
        Xb(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 169, a * 289);
        e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
        e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
        e.closePath();
        Xb(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 146);
        e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
        e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
        e.closePath();
        Xb(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 135);
        e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
        e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
        e.closePath();
        Xb(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 318, a * 223);
        e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
        e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
        e.closePath();
        Xb(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 142, a * 223);
        e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
        e.closePath();
        Xb(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 133);
        e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
        e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
        e.closePath();
        Xb(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 203, a * 102);
        e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
        e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
        e.closePath();
        Xb(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196, a * 324);
        e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
        e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
        e.closePath();
        Xb(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 266, a * 166);
        e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
        Xb(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 269, a * 192);
        e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
        Xb(e, gs, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 263, a * 217);
        e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
        Xb(e, vg, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 204, a * 141);
        e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
        Xb(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 207, a * 230);
        e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
        Xb(e, undefined, c[6], a * 6);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 258);
        e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
        Xb(e, yl, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 196);
        e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
        Xb(e, fh, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 218, a * 97);
        e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
        e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
        e.closePath();
        Xb(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224, a * 181);
        e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
        e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
        e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
        e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
        e.closePath();
        Xb(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 169, a * 289);
        e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
        e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
        e.closePath();
        Xb(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 146);
        e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
        e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
        e.closePath();
        Xb(e, fh, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 135);
        e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
        e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
        e.closePath();
        Xb(e, Sq, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 318, a * 223);
        e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
        e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
        e.closePath();
        Xb(e, undefined, c[6], a * 6);
        id(e, a * 222, a * 199, a * 120.74767078498864);
        Xb(e, undefined, c[3], a * 40);
        id(e, a * 220, a * 200, a * 95.44108130150245);
        Xb(e, undefined, c[2], a * 15);
        id(e, a * 220, a * 201, a * 85);
        Xb(e, lj, c[4], a * 10);
        e.globalAlpha = 0.5;
        id(e, a * 220, a * 201, a * 82);
        Xb(e, c[9]);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        id(e, a * 63, a * 136, a * 49.193495504995376);
        Xb(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        id(e, a * 63, a * 136, a * 49.193495504995376);
        Xb(e, c[8], c[2], a * 4);
        id(e, a * 63, a * 137, a * 25.632011235952593);
        Xb(e, c[7], c[2], a * 4);
        return d;
    }
    function np(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 167;
        d.height = a * 136;
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 76.71426391601562, a * 67.85713195800781);
        Zb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 0.8;
        e.save();
        e.translate(a * 76.71426391601562, a * 67.85713195800781);
        Zb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
        e.restore();
        Xb(e, lj, c[1], a * 7);
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 91.21426391601562, a * 67.35713195800781);
        Zb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
        e.restore();
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 91.21426391601562, a * 67.35713195800781);
        Zb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
        e.restore();
        Xb(e, undefined, c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
        e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
        Xb(e, undefined, c[1], a * 10);
        return d;
    }
    function op(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 170;
        f.height = b * 200;
        g.translate(b * 5, b * 15);
        if (e == 1) {
            g.translate(0, b * -5);
            id(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
            Xb(g, d[1], d[5], b * 20);
            id(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
            Xb(g, d[1], d[5], b * 20);
            g.save();
            g.translate(b * 77.00003051757812, b * 31.267044067382812);
            Zb(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
            g.restore();
            Xb(g, d[1], d[5], b * 20);
            g.save();
            g.translate(b * 77.00003051757812, b * 13.267044067382812);
            Zb(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
            g.restore();
            Xb(g, d[1], d[5], b * 20);
        }
        id(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
        Xb(g, d[1], d[2], b * 7);
        id(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
        Xb(g, d[1], d[2], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
        g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
        g.closePath();
        Xb(g, d[1], d[2], b * 8);
        id(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
        Xb(g, d[1], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
        g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
        g.closePath();
        Xb(g, d[3], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
        g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
        g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
        g.closePath();
        Xb(g, d[3], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
        g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
        g.closePath();
        Xb(g, d[3], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
        g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
        g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
        g.closePath();
        Xb(g, d[3], d[2], b * 4);
        id(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
        Xb(g, d[3], d[2], b * 4);
        g.save();
        g.translate(b * 77.00003051757812, b * 31.267044067382812);
        g.rotate(0);
        Zb(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
        g.restore();
        Xb(g, d[1], d[2], b * 7);
        g.save();
        g.translate(b * 77.00003051757812, b * 13.267044067382812);
        g.rotate(0);
        Zb(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
        g.restore();
        Xb(g, d[1], d[2], b * 7);
        return f;
    }
    function ap(a) {
        if (a > 0) {
            return a * a;
        } else {
            return a;
        }
    }
    function rp(a) {
        return Gf.String.fromCharCode(a);
    }
    function sp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 218;
        d.height = a * 185;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 53.135406494140625);
        e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
        e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
        e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
        e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
        e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
        e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
        e.closePath();
        Xb(e, c[0], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107, a * 25.135406494140625);
        e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
        e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
        e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
        e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
        e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
        e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
        e.closePath();
        Xb(e, c[1]);
        return d;
    }
    function lp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 168;
        d.height = a * 100;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        Zb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        Xb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        Xb(e, c[0]);
        id(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
        Xb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        Zb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        Xb(e, undefined, c[3], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        Xb(e, Ab, c[3], a * 6);
        id(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
        Xb(e, Sq, c[3], a * 6);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        Zb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        Xb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        Xb(e, c[1]);
        id(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
        Xb(e, c[2], c[1], a * 4);
        id(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
        Xb(e, c[3], c[1], a * 4);
        id(e, a * 78, a * 44, a * 20);
        Xb(e, c[4]);
        return d;
    }
    function gp(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 376;
        c.height = a * 371;
        d.globalAlpha = 0.5;
        d.translate(a * 5, a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
        d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
        d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
        d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
        d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
        d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
        d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
        d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
        d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
        d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
        d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
        d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
        d.closePath();
        Xb(d, b[0]);
        d.globalAlpha = 1;
        d.translate(a * -4, a * -5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
        d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
        d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
        d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
        d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
        d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
        d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
        d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
        d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
        d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
        d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
        d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
        d.closePath();
        Xb(d, undefined, b[1], a * 12);
        d.translate(a * -1, a * 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 270.633544921875, a * 88.98580932617188);
        d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
        d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
        d.closePath();
        Xb(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 275.633544921875, a * 281.9858093261719);
        d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
        d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
        d.closePath();
        Xb(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 124.633544921875, a * 291.9858093261719);
        d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
        d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
        d.closePath();
        Xb(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 113.633544921875, a * 80.98580932617188);
        d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
        d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
        d.closePath();
        Xb(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 202.633544921875, a * 20.985809326171875);
        d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
        d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
        d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
        d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
        d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
        d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
        d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
        d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
        d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
        d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
        d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
        d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
        d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
        d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
        d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
        d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
        d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
        d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
        d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
        d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
        d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
        d.closePath();
        Xb(d, b[2], b[3], a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 203.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
        d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
        d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
        d.closePath();
        Xb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 175.633544921875, a * 25.985809326171875);
        d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
        d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
        d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
        d.closePath();
        Xb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 26.633544921875, a * 96.98580932617188);
        d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
        d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
        d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
        d.closePath();
        Xb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 351.633544921875, a * 99.98580932617188);
        d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
        d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
        d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
        d.closePath();
        Xb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 350.633544921875, a * 302.9858093261719);
        d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
        d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
        d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
        d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
        d.closePath();
        Xb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 95.633544921875, a * 224.98580932617188);
        d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
        d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
        d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
        d.closePath();
        Xb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 195.633544921875, a * 253.98580932617188);
        d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
        d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
        d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
        d.closePath();
        Xb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 195.633544921875, a * 251.98580932617188);
        d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
        d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
        d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
        d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
        d.closePath();
        Xb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 316, a * 186.8020782470703);
        d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
        d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 340, a * 157.8020782470703);
        d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
        d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 349, a * 136.8020782470703);
        d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
        d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 278.75, a * 246.4375);
        d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
        d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
        d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 310.75, a * 277.4375);
        d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
        d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
        d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.75, a * 257.4375);
        d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
        d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
        d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 211.75, a * 289.4375);
        d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
        d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 171.75, a * 256.4375);
        d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
        d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
        d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 175.75, a * 289.9375);
        d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
        d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 205.75, a * 314.4375);
        d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
        d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.75, a * 313.4375);
        d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
        d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 103.75, a * 244.4375);
        d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
        d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
        d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 86.75, a * 182.4375);
        d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
        d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
        d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44.75, a * 152.4375);
        d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
        d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31.75, a * 130.4375);
        d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
        d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
        d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 69.75, a * 274.4375);
        d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
        d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
        d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 165.75, a * 95.4375);
        d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
        d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 216.75, a * 94.4375);
        d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
        d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 211.75, a * 68.4375);
        d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
        d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 169.75, a * 71.4375);
        d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
        d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
        d.closePath();
        Xb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 193.75, a * 160.4375);
        d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
        d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
        d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
        d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
        d.closePath();
        Xb(d, b[8], b[9], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
        d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
        d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
        d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
        d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
        d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
        d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
        d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
        d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
        d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
        d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
        d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
        d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
        d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
        d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
        d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
        d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
        d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
        d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
        d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
        d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
        d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
        d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
        d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
        d.closePath();
        Xb(d, b[10]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 185.1999969482422, a * 173.8125);
        d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
        d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
        d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
        d.closePath();
        Xb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
        d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
        d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
        d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
        d.closePath();
        Xb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
        d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
        d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
        d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
        d.closePath();
        Xb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
        d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
        d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
        d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
        d.closePath();
        Xb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 204.1999969482422, a * 201.8125);
        d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
        d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
        d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
        d.closePath();
        Xb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
        d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
        d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
        d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
        d.closePath();
        Xb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
        d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
        d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
        d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
        d.closePath();
        Xb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
        d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
        d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
        d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
        d.closePath();
        Xb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 183.1999969482422, a * 196.8125);
        d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
        d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
        d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
        d.closePath();
        Xb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
        d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
        d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
        d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
        d.closePath();
        Xb(d, b[11]);
        id(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
        Xb(d, b[12]);
        id(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
        Xb(d, b[13]);
        id(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
        Xb(d, b[12]);
        id(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
        Xb(d, b[13]);
        return c;
    }
    function up(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 573;
        d.height = a * 350;
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 336, a * 72);
            e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
            e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
            e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
            e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
            e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
            e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
            e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
            e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
            e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
            e.closePath();
            Xb(e, b[4], b[4], a * 35);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 168, a * 42);
        e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
        e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
        e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
        e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
        e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
        e.closePath();
        Xb(e, b[0], b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 188, a * 41);
        e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
        e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
        e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
        e.closePath();
        Xb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 336, a * 71);
        e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
        e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
        e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
        e.closePath();
        Xb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 357, a * 76);
        e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
        e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
        e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
        e.closePath();
        Xb(e, b[3], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 309, a * 168);
        e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
        Xb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 263, a * 54);
        e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
        e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
        e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
        e.closePath();
        Xb(e, b[3], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 292, a * 198);
        e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
        Xb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 245, a * 68);
        e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
        Xb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 96);
        e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
        Xb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 207, a * 124);
        e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
        Xb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 183);
        e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
        Xb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 213);
        e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
        Xb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 399, a * 257);
        e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
        e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
        e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
        Xb(e, b[3], b[3], a * 12);
        return d;
    }
    function bp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 109;
        d.height = a * 110;
        id(e, a * 54.5, a * 55, a * 48.038209575038294);
        Xb(e, b[0], b[1], a * 8);
        if (c == 0) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
            e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
            e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
            e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
            e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
            e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
            e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
            e.closePath();
            Xb(e, b[2]);
        } else if (c == 1) {
            e.save();
            e.translate(a * 55, a * 39.48748779296875);
            Zb(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
            e.restore();
            Xb(e, b[2], b[3], a * 4);
            id(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
            Xb(e, b[4], b[3], a * 4);
            e.save();
            e.translate(a * 55.5, a * 57.287506103515625);
            Zb(e, a * -9, a * -16, a * 18, a * 32, a * 10);
            e.restore();
            Xb(e, b[4]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 25.287506103515625);
            e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
            e.closePath();
            Xb(e, yl, b[5], a * 4);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 37.287506103515625);
            e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
            e.closePath();
            Xb(e, undefined, b[5], a * 4);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 50.287506103515625);
            e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
            e.closePath();
            Xb(e, Vs, b[5], a * 4);
        } else if (c == 2) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
            e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
            e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
            e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
            e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
            e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
            e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
            e.closePath();
            Xb(e, b[2]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
            e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
            e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
            e.closePath();
            Xb(e, b[3], b[4], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
            e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
            e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
            e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
            e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
            e.closePath();
            Xb(e, b[3], b[4], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
            e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
            e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
            e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
            e.closePath();
            Xb(e, b[2]);
        } else if (c == 3) {
            e.scale(0.9, 0.9);
            e.translate(a * 6, 0);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 54, a * 0.421875);
            e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
            e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
            e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
            e.closePath();
            Xb(e, b[2], b[3], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 74, a * 52.421875);
            e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
            e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
            e.closePath();
            Xb(e, b[3]);
        }
        return d;
    }
    function dp(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 253;
        c.height = a * 192;
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 42, a * 99);
        d.globalAlpha = 0.5;
        Zb(d, a * -7, a * -20, a * 14, a * 39, a * 20);
        d.restore();
        Xb(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 37, a * 94);
        Zb(d, a * -7, a * -20, a * 14, a * 37, a * 20);
        d.restore();
        Xb(d, b[2]);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 136, a * 99);
        d.globalAlpha = 0.5;
        Zb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
        d.restore();
        Xb(d, b[0], b[0], a * 13);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 131, a * 94);
        Zb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
        d.restore();
        Xb(d, b[2], b[2], a * 13);
        d.save();
        d.translate(a * 131, a * 94);
        Zb(d, a * -76, a * -61, a * 152, a * 122, a * 20);
        d.restore();
        Xb(d, b[3], b[1], a * 8);
        d.save();
        d.translate(a * 168.5, a * 93.5);
        Zb(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
        d.restore();
        Xb(d, b[3], b[4], a * 6);
        d.save();
        d.translate(a * 93.5, a * 95.5);
        Zb(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
        d.restore();
        Xb(d, b[3], b[4], a * 6);
        d.save();
        d.translate(a * 130.5, a * 94);
        Zb(d, a * -36, a * -67, a * 73, a * 134, a * 20);
        d.restore();
        Xb(d, b[3], b[2], a * 8);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 133, a * 97);
        Zb(d, a * -83, a * -12, a * 160, a * 24, a * 0);
        d.restore();
        Xb(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 133, a * 92);
        Zb(d, a * -83, a * -12, a * 160, a * 24, a * 0);
        d.restore();
        Xb(d, b[2]);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 228, a * 99.5);
        d.globalAlpha = 0.5;
        Zb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
        d.restore();
        Xb(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 223, a * 94.5);
        Zb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
        d.restore();
        Xb(d, b[2]);
        d.save();
        d.translate(a * 133.5, a * 175.5);
        d.globalAlpha = 0.5;
        Zb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
        d.restore();
        Xb(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 128.5, a * 170.5);
        Zb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
        d.restore();
        Xb(d, b[2]);
        return c;
    }
    function vp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 272;
        d.height = a * 264;
        e.translate(0, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.999969482421875, a * 84.517333984375);
        e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
        e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
        e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
        e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
        e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
        e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
        e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
        e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
        e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
        e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
        e.closePath();
        Xb(e, c[0]);
        e.translate(0, a * -20);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.999969482421875, a * 84.517333984375);
        e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
        e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
        e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
        e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
        e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
        e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
        e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
        e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
        e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
        e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
        e.closePath();
        Xb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
        e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
        e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
        e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
        e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
        e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
        e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
        e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
        e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
        e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
        e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
        e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
        e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
        e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
        e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
        e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
        e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
        e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
        e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
        e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
        e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
        e.closePath();
        Xb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
        e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
        e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
        e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
        e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
        e.closePath();
        Xb(e, c[4], c[5], a * 6);
        return d;
    }
    function cp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 316;
        d.height = a * 365;
        e.save();
        e.translate(a * 156.07142639160156, a * 51.81248474121094);
        e.rotate(0);
        Zb(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
        e.restore();
        Xb(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
        e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
        e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
        e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
        e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
        e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
        e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
        e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
        e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
        e.closePath();
        Xb(e, undefined, c[5], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
        e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
        e.closePath();
        Xb(e, fk, c[6], a * 15);
        return d;
    }
    function mp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 158;
        d.height = a * 201;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 76.421875);
        e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
        e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
        e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
        e.closePath();
        Xb(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 61.5, a * 78.421875);
        e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
        e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
        e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
        e.closePath();
        Xb(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 127.421875);
        e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
        e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
        e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
        e.closePath();
        Xb(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41.5, a * 134.421875);
        e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
        e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
        e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
        e.closePath();
        Xb(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 78.5, a * 51.921875);
        e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
        e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
        e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
        e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
        e.closePath();
        Xb(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        Xb(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.5, a * 163.421875);
        e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
        e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
        e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
        e.closePath();
        Xb(e, c[8], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79.5, a * 61.421875);
        e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
        e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
        e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
        e.closePath();
        Xb(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        Xb(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 76.421875);
        e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
        e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
        e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
        e.closePath();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 61.5, a * 78.421875);
        e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
        e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
        e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
        e.closePath();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 127.421875);
        e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
        e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
        e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
        e.closePath();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41.5, a * 134.421875);
        e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
        e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
        e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
        e.closePath();
        Xb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 78.5, a * 51.921875);
        e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
        e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
        e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
        e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
        e.closePath();
        Xb(e, c[3], c[2], a * 4);
        id(e, a * 108.5, a * 148.421875, a * 9);
        Xb(e, c[5]);
        id(e, a * 106.5, a * 144.421875, a * 3);
        Xb(e, c[6]);
        id(e, a * 46.5, a * 148.421875, a * 9);
        Xb(e, c[5]);
        id(e, a * 44.5, a * 144.421875, a * 3);
        Xb(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 114.421875);
        e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
        e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
        Xb(e, c[3], c[2], a * 4);
        e.beginPath();
        e.translate(0, a * -2);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35.5, a * 131.421875);
        e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
        e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
        Xb(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 57.421875);
        e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
        e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
        e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
        e.closePath();
        Xb(e, c[4]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79.5, a * 61.421875);
        e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
        e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
        e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
        e.closePath();
        Xb(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        Xb(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 154.421875);
        e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
        e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
        e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
        e.closePath();
        Xb(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 81.5, a * 164.421875);
        e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
        e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
        e.closePath();
        Xb(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 164.421875);
        e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
        e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
        e.closePath();
        Xb(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65.5, a * 156.421875);
        e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
        e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
        e.closePath();
        Xb(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.5, a * 163.421875);
        e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
        e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
        e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
        e.closePath();
        Xb(e, c[3], c[2], a * 4);
        return d;
    }
    function pp(b, c, d) {
        var e = ΔⲆ[465][b];
        var f = c.info.translate.x + yo * 5;
        var g = c.info.translate.y + yo * 5;
        if (c.info.state == hf || d) {
            g += yo * 5;
        }
        Cp(mo, e, f, g);
    }
    function Cp(b, c, d, e, f, g, a, i, j, h) {
        if (c.ΔⵠᐃΔⲆⲆⵠ === undefined || c.ΔⵠᐃΔⲆⲆⵠ() === 1) {
            if (h !== undefined) {
                b.drawImage(c, d, e, Math.max(1, f), Math.max(1, g), a, i, j, h);
            } else if (g !== undefined) {
                b.drawImage(c, d, e, f, g);
            } else {
                b.drawImage(c, d, e);
            }
        }
    }
    function Tp() {
        if (nx.ΔⲆΔⲆ.Ⲇⵠᐃⵠⵠ.length > 0) {
            var b = {
                x: px.ⵠⵠⵠᐃᐃ.translate.x,
                y: px.ⵠⵠⵠᐃᐃ.translate.y - yo * 120
            };
        } else {
            b = {
                x: px.ⵠⵠⵠᐃᐃ.translate.x,
                y: px.ⵠⵠⵠᐃᐃ.translate.y - yo * 50
            };
        }
        mo.globalAlpha = 0.8;
        var c = ΔⲆ[259][mx.time];
        Cp(mo, c, b.x, b.y);
        mo.globalAlpha = 1;
        if (px.ⵠⵠⵠᐃᐃ.ᐃᐃⵠᐃᐃ.x > -1) {
            mo.fillStyle = "#660000";
            id(mo, b.x + px.ⵠⵠⵠᐃᐃ.ᐃᐃⵠᐃᐃ.x * yo, b.y + px.ⵠⵠⵠᐃᐃ.ᐃᐃⵠᐃᐃ.y * yo, yo * 5);
            mo.fill();
        }
        var d = yo;
        for (var f = px.ⵠⵠⵠᐃᐃ.ⵠᐃΔΔ, g = 0; g < f.length; g++) {
            var h = f[g];
            mx.time;
            mo.fillStyle = "#ff0000";
            id(mo, b.x + yo * (h.x / (mx.ΔΔΔⲆᐃ * 100) * 193), b.y + h.y / (mx.ΔᐃⵠⵠΔ * 100) * 193 * yo, yo * 2);
            mo.fill();
        }
        var i = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
        if (i) {
            mo.fillStyle = mx.time ? "#fff" : "#e39716";
            id(mo, b.x + i.x / (mx.ΔΔΔⲆᐃ * 100) * 193 * yo, b.y + yo * (i.y / (mx.ΔᐃⵠⵠΔ * 100) * 193), yo * 4);
            mo.fill();
        }
        yo = d;
    }
    function fp() {
        if (!nx.ᐃⲆᐃⲆ.open && !nx.Δᐃⵠⵠᐃ.open && !nx.ᐃΔᐃⵠ.open && !nx.ⵠᐃⲆⲆ.open) {
            nx.ⲆⲆⲆΔ.open = Bl;
            var b = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
            var c = 100;
            if (b) {
                for (var d = 0; d < mx.ⲆⲆΔ[34].length; d++) {
                    var e = mx.ⲆⲆΔ[34][d];
                    var f = Z.ᐃⵠᐃᐃ(e, b);
                    if (c > f) {
                        c = f;
                        nx.ⲆⲆⲆΔ.open = oj;
                        nx.ⲆⲆⲆΔ.ⵠⲆΔⵠᐃⲆⵠ = e.info & 31;
                        nx.ⲆⲆⲆΔ.ⲆΔⵠᐃᐃ = (e.info & 992) >> 5;
                        nx.ⲆⲆⲆΔ.ⲆⲆⲆⲆⵠⵠⵠ = (e.info & 31744) >> 10;
                        nx.ⲆⲆⲆΔ.ΔⵠⵠⲆ = e.ΔⵠⵠⲆ;
                        nx.ⲆⲆⲆΔ.ΔᐃⲆΔΔ = e.id;
                    }
                }
                if (c < 100) {
                    var g = ΔⲆ[722];
                    var a = (j = px.ⲆⲆⲆⲆⲆᐃⵠ).info.translate.x - 32;
                    Cp(mo, g, a, 0);
                    if (nx.ⲆⲆⲆΔ.ⵠⲆΔⵠᐃⲆⵠ > 0) {
                        j.Δⵠᐃⵠ(mo);
                        if ((k = nx.ⲆⲆⲆΔ.ⵠⲆΔⵠᐃⲆⵠ) > 1) {
                            Jp(k, j);
                        }
                    }
                    var j = px.ⵠΔΔΔᐃⵠᐃ;
                    if (nx.ⲆⲆⲆΔ.ⲆⲆⲆⲆⵠⵠⵠ > 0) {
                        j.Δⵠᐃⵠ(mo);
                        if ((k = nx.ⲆⲆⲆΔ.ⲆⲆⲆⲆⵠⵠⵠ) > 1) {
                            Jp(k, j);
                        }
                    }
                    var k;
                    j = px.ⵠᐃⲆΔᐃΔᐃ;
                    if (nx.ⲆⲆⲆΔ.ⲆΔⵠᐃᐃ > 0) {
                        j.Δⵠᐃⵠ(mo);
                        if ((k = nx.ⲆⲆⲆΔ.ⲆΔⵠᐃᐃ) > 1) {
                            Jp(k, j);
                        }
                    }
                }
            }
        }
    }
    function zp() {
        var a = px.ΔⲆⲆⲆΔ;
        var b = a.id;
        if (a.ⵠᐃΔΔΔ === 1 && a.display === 1) {
            if (ⲆⵠⲆⵠⵠ[b] === undefined) {
                ⲆⵠⲆⵠⵠ[b] = function (b) {
                    var c = document.createElement("canvas");
                    var d = c.getContext("2d");
                    var e = zb[b];
                    d.font = "20px Baloo Paaji";
                    var f = 0;
                    if (e.length >= 1) {
                        f = Math.max(0, d.measureText(e[0]).width);
                    }
                    d.font = "17px Baloo Paaji";
                    if (e.length >= 2) {
                        f = Math.max(f, d.measureText(e[1]).width);
                    }
                    d.font = "14px Baloo Paaji";
                    wb = 2;
                    for (; wb < e.length; wb++) {
                        f = Math.max(f, d.measureText(e[wb]).width);
                    }
                    var g = f + 35;
                    var a = 0;
                    a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
                    c.width = g;
                    c.height = a;
                    Zb(d, 0, 0, g, a, 10);
                    d.fillStyle = "#000000";
                    d.globalAlpha = 0.5;
                    d.fill();
                    if (e.length >= 1) {
                        d.textBaseline = "middle";
                        d.font = "20px Baloo Paaji";
                        d.globalAlpha = 1;
                        d.fillStyle = "#e2c340";
                        d.fillText(e[0], 15, 28);
                    }
                    if (e.length >= 2) {
                        d.font = "17px Baloo Paaji";
                        d.fillStyle = "#ffffff";
                        d.fillText(e[1], 15, 55);
                        a = 55;
                    }
                    if (e.length >= 3) {
                        d.font = "14px Baloo Paaji";
                        d.globalAlpha = 0.7;
                        wb = 2;
                        for (; e.length > wb; wb++) {
                            d.fillText(e[wb], 15, a + 28);
                            a += 26;
                        }
                    }
                    return c;
                }(b);
            }
            if (a.ⵠᐃΔⵠ === 1) {
                Cp(mo, ⲆⵠⲆⵠⵠ[b], a.x, a.y);
            } else if (a.x - 80 + ⲆⵠⲆⵠⵠ[b].width > no) {
                Cp(mo, ⲆⵠⲆⵠⵠ[b], no - ⲆⵠⲆⵠⵠ[b].width - 10, a.y - ⲆⵠⲆⵠⵠ[b].height - 10);
            } else {
                Cp(mo, ⲆⵠⲆⵠⵠ[b], a.x - 80, a.y - ⲆⵠⲆⵠⵠ[b].height - 10);
            }
        }
    }
    function yp() {
        if (!nx.ᐃⲆᐃⲆ.open && !nx.Δᐃⵠⵠᐃ.open && !nx.ᐃΔᐃⵠ.open && !nx.ⲆⲆⲆΔ.open && !nx.ⵠᐃⲆⲆ.open) {
            nx.sign.open = false;
            var a = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
            var b = 100;
            if (a) {
                for (var c = 0; c < mx.ⲆⲆΔ[36].length; c++) {
                    var d = mx.ⲆⲆΔ[36][c];
                    var e = Z.ᐃⵠᐃᐃ(d, a);
                    if (e < b && d.info === 0 && nx.id === d.ΔⵠⵠⲆ) {
                        nx.sign.open = Ho;
                        b = e;
                        nx.sign.ΔᐃⲆΔΔ = d.id;
                    }
                }
                if (b < 100) {
                    px.sign.button.Δⵠᐃⵠ(mo);
                }
            }
        }
    }
    function wp() {
        if (!nx.ᐃⲆᐃⲆ.open && !nx.Δᐃⵠⵠᐃ.open) {
            nx.ⵠᐃⲆⲆ.open = nq;
            var b = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
            var c = 100;
            if (b) {
                for (var d = 0; d < Ef.length; d++) {
                    for (var e = Ef[d][0], f = Ef[d][1], j = 0; mx.ⲆⲆΔ[e].length > j; j++) {
                        var k = mx.ⲆⲆΔ[e][j];
                        var m = Z.ᐃⵠᐃᐃ(k, b);
                        if (m < c) {
                            c = m;
                            nx.ⵠᐃⲆⲆ.ᐃⲆᐃⲆⲆΔⲆ = f;
                            nx.ⵠᐃⲆⲆ.type = e;
                            nx.ⵠᐃⲆⲆ.open = hj;
                            nx.ⵠᐃⲆⲆ.ⵠⲆΔⵠᐃⲆⵠ = k.info & 255;
                            nx.ⵠᐃⲆⲆ.ΔⲆΔⲆⵠⵠⲆ = (k.info & 65280) >> 8;
                            nx.ⵠᐃⲆⲆ.ΔⵠⵠⲆ = k.ΔⵠⵠⲆ;
                            nx.ⵠᐃⲆⲆ.ΔᐃⲆΔΔ = k.id;
                        }
                    }
                }
                if (c < 100) {
                    var p;
                    var q = ΔⲆ[656];
                    var l = (g = px.ΔⲆᐃⵠⵠᐃΔ).info.translate.x - 33;
                    Cp(mo, q, l, 0);
                    if (nx.ⵠᐃⲆⲆ.ⵠⲆΔⵠᐃⲆⵠ > 0) {
                        g.Δⵠᐃⵠ(mo);
                        if ((p = nx.ⵠᐃⲆⲆ.ⵠⲆΔⵠᐃⲆⵠ) > 1) {
                            Jp(p, g);
                        }
                    }
                    switch (nx.ⵠᐃⲆⲆ.ᐃⲆᐃⲆⲆΔⲆ) {
                        case 108:
                            var g = px.ᐃⵠⲆⲆⲆΔⵠ;
                            break;
                        case 111:
                            g = px.ⲆⲆⲆΔᐃΔΔ;
                            break;
                        case 112:
                            g = px.ⲆΔⵠⵠⵠᐃᐃ;
                            break;
                        case 121:
                            g = px.ΔᐃᐃΔⲆⲆΔ;
                            break;
                        case 202:
                            g = px.ᐃΔᐃᐃᐃᐃⲆ;
                    }
                    if (nx.ⵠᐃⲆⲆ.ΔⲆΔⲆⵠⵠⲆ > 0) {
                        g.Δⵠᐃⵠ(mo);
                        if ((p = nx.ⵠᐃⲆⲆ.ΔⲆΔⲆⵠⵠⲆ) > 1) {
                            Jp(p, g);
                        }
                    }
                }
            }
        }
    }
    function Pp() {
        nx.ΔᐃⵠⵠⲆ.open = false;
        var a = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
        var b = 100;
        if (a) {
            for (var c = 0; mx.ⲆⲆΔ[22].length > c; c++) {
                var d = mx.ⲆⲆΔ[22][c];
                var e = Z.ᐃⵠᐃᐃ(d, a);
                if (b > e) {
                    b = e;
                    nx.ΔᐃⵠⵠⲆ.open = true;
                    nx.ΔᐃⵠⵠⲆ.ΔⵠⵠⲆ = d.ΔⵠⵠⲆ;
                    nx.ΔᐃⵠⵠⲆ.ΔᐃⲆΔΔ = d.id;
                }
            }
            if (b < 100) {
                px.ΔᐃⵠⵠⲆ.Δⵠᐃⵠ(mo);
            }
        }
    }
    function Ap() {
        if (!nx.ᐃⲆᐃⲆ.open) {
            nx.Δᐃⵠⵠᐃ.ⵠⲆᐃΔ = 0;
            nx.Δᐃⵠⵠᐃ.open = z;
            var b = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
            var c = 100;
            if (b) {
                for (var d = 0; d < mx.ⲆⲆΔ[18].length; d++) {
                    var e = mx.ⲆⲆΔ[18][d];
                    var f = Z.ᐃⵠᐃᐃ(e, b);
                    if (c > f) {
                        c = f;
                        nx.Δᐃⵠⵠᐃ.open = true;
                        nx.Δᐃⵠⵠᐃ.ⵠⲆᐃΔ = e.info;
                        nx.Δᐃⵠⵠᐃ.ΔⵠⵠⲆ = e.ΔⵠⵠⲆ;
                        nx.Δᐃⵠⵠᐃ.ΔᐃⲆΔΔ = e.id;
                    }
                }
                if (c < 100) {
                    var g = ΔⲆ[411];
                    var a = px.ᐃⵠᐃⵠⵠⲆΔ;
                    var j = Math.floor(a.info.translate.x + (a.info.ᐃⲆ[0].width - g.width) / 2);
                    var k = Math.floor(a.info.translate.y + (a.info.ᐃⲆ[0].height - g.height) / 2) + 3;
                    Cp(mo, g, j, k);
                    if (nx.Δᐃⵠⵠᐃ.ⵠⲆᐃΔ > 0) {
                        a.Δⵠᐃⵠ(mo);
                        var h = nx.Δᐃⵠⵠᐃ.ⵠⲆᐃΔ;
                        if (h > 1) {
                            Jp(h, a);
                        }
                    }
                }
            }
        }
    }
    function kp() {
        if (!nx.ᐃⲆᐃⲆ.open && !nx.Δᐃⵠⵠᐃ.open) {
            nx.ᐃΔᐃⵠ.open = false;
            var b = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
            var c = 100;
            if (b) {
                for (var d = 0; mx.ⲆⲆΔ[32].length > d; d++) {
                    var e = mx.ⲆⲆΔ[32][d];
                    var f = Z.ᐃⵠᐃᐃ(e, b);
                    if (c > f) {
                        c = f;
                        nx.ᐃΔᐃⵠ.open = true;
                        nx.ᐃΔᐃⵠ.ⲆᐃⲆΔᐃⵠⲆ = e.info & 255;
                        nx.ᐃΔᐃⵠ.ⲆΔⵠᐃᐃ = (e.info & 65280) >> 8;
                        nx.ᐃΔᐃⵠ.ΔⵠⵠⲆ = e.ΔⵠⵠⲆ;
                        nx.ᐃΔᐃⵠ.ΔᐃⲆΔΔ = e.id;
                    }
                }
                if (c < 100) {
                    var g = ΔⲆ[655];
                    var a = (k = px.ᐃᐃⲆⵠΔᐃΔ).info.translate.x - 33;
                    Cp(mo, g, a, 0);
                    if (nx.ᐃΔᐃⵠ.ⲆᐃⲆΔᐃⵠⲆ > 0) {
                        k.Δⵠᐃⵠ(mo);
                        if ((j = nx.ᐃΔᐃⵠ.ⲆᐃⲆΔᐃⵠⲆ) > 1) {
                            Jp(j, k);
                        }
                    }
                    var j;
                    var k = px.ⲆⲆΔⵠΔⲆᐃ;
                    if (nx.ᐃΔᐃⵠ.ⲆΔⵠᐃᐃ > 0) {
                        k.Δⵠᐃⵠ(mo);
                        if ((j = nx.ᐃΔᐃⵠ.ⲆΔⵠᐃᐃ) > 1) {
                            Jp(j, k);
                        }
                    }
                }
            }
        }
    }
    function xp() {
        if (nx.reconnect.enabled) {
            mo.globalAlpha = 0.9;
            mo.fillStyle = "#000";
            Zb(mo, ro - 150, vo - 90, 300, 180, 15);
            mo.fill();
            mo.globalAlpha = 1;
            var a = ΔⲆ[301];
            mo.save();
            nx.reconnect.rotate = (nx.reconnect.rotate + tx * 2) % (Math.PI * 2);
            mo.translate(no / 2, oo / 2 - 25);
            mo.rotate(nx.reconnect.rotate);
            Cp(mo, a, -a.width / 2, -a.height / 2);
            mo.restore();
            a = ΔⲆ[525];
            Cp(mo, a, (no - a.width) / 2, (oo - a.height) / 2 + 25);
        }
    }
    function Jp(a, b) {
        ΔⲆ[283][a] ||= ku(yo, "x" + a, 17, "#FFF");
        var c = ΔⲆ[283][a];
        var d = b.info.translate.x + b.info.ᐃⲆ[0].width - c.width - yo * 14;
        var e = b.info.translate.y + b.info.ᐃⲆ[0].height - c.height - yo * 19;
        if (b.info.state == hf) {
            e += yo * 5;
        }
        Cp(mo, c, d, e);
    }
    function Mp() {
        if (nx.ΔΔⲆⵠⵠᐃΔ) {
            mo.globalAlpha = 0.5;
            mo.fillStyle = "#000";
            mo.fillRect(0, 0, no, oo);
            mo.globalAlpha = 0.8;
            var b = ΔⲆ[516][mx.time];
            var c = ro - b.width / 2;
            var d = vo - b.height / 2;
            Cp(mo, b, c, d);
            mo.globalAlpha = 1;
            if (px.ⵠⵠⵠᐃᐃ.ᐃᐃⵠᐃᐃ.x > -1) {
                mo.fillStyle = "#660000";
                id(mo, c + px.ⵠⵠⵠᐃᐃ.ᐃᐃⵠᐃᐃ.x * 3 * yo, d + yo * (px.ⵠⵠⵠᐃᐃ.ᐃᐃⵠᐃᐃ.y * 3), yo * 14);
                mo.fill();
            }
            for (var e = px.ⵠⵠⵠᐃᐃ.ⵠᐃΔΔ, f = 0; f < e.length; f++) {
                var g = e[f];
                mx.time;
                mo.fillStyle = "#ff0000";
                id(mo, c + g.x / (mx.ΔΔΔⲆᐃ * 100) * 600 * yo, d + g.y / (mx.ΔᐃⵠⵠΔ * 100) * 600 * yo, yo * 6);
                mo.fill();
            }
            var h = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
            if (h) {
                mo.fillStyle = mx.time ? "#fff" : "#e39716";
                id(mo, c + h.x / (mx.ΔΔΔⲆᐃ * 100) * 600 * yo, d + yo * (h.y / (mx.ΔᐃⵠⵠΔ * 100) * 600), yo * 12);
                mo.fill();
            }
        }
    }
    function Bp() {
        nx.ᐃⲆᐃⲆ.id = -1;
        nx.ᐃⲆᐃⲆ.lock = ie;
        nx.ᐃⲆᐃⲆ.locked = th;
        nx.ᐃⲆᐃⲆ.ᐃⵠⵠᐃⵠⵠⲆ = el;
        nx.ᐃⲆᐃⲆ.ⵠⲆⵠⵠΔᐃⵠ = false;
        nx.ᐃⲆᐃⲆ.open = false;
        var b = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
        var c = 100;
        if (b) {
            for (var d = 0; mx.ⲆⲆΔ[11].length > d; d++) {
                var e = mx.ⲆⲆΔ[11][d];
                var f = Z.ᐃⵠᐃᐃ(e, b);
                if (f < c) {
                    c = f;
                    nx.ᐃⲆᐃⲆ.open = Tn;
                    nx.ᐃⲆᐃⲆ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
                    nx.ᐃⲆᐃⲆ.ⵠⲆᐃΔ = e.info;
                    nx.ᐃⲆᐃⲆ.ΔⵠⵠⲆ = e.ΔⵠⵠⲆ;
                    nx.ᐃⲆᐃⲆ.ΔᐃⲆΔΔ = e.id;
                    nx.ᐃⲆᐃⲆ.locked = e.lock;
                    nx.ᐃⲆᐃⲆ.lock = e.lock && e.ΔⵠⵠⲆ != nx.id && !nx.ᐃΔΔⵠΔⲆᐃ(e.ΔⵠⵠⲆ) ? Dk : th;
                    nx.ᐃⲆᐃⲆ.ⵠⲆⵠⵠΔᐃⵠ = nx.id !== e.ΔⵠⵠⲆ || nx.ᐃⲆᐃⲆ.locked || nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(148) == -1 ? Yn : gq;
                    if (nx.ᐃⲆᐃⲆ.locked && nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(158) != -1) {
                        nx.ᐃⲆᐃⲆ.ᐃⵠⵠᐃⵠⵠⲆ = true;
                    }
                }
            }
            if (c < 100) {
                var g = ΔⲆ[339];
                var a = px.ⲆΔⵠ[0];
                var j = Math.floor(a.info.translate.x + (a.info.ᐃⲆ[0].width - g.width) / 2);
                var k = Math.floor(a.info.translate.y + (a.info.ᐃⲆ[0].height - g.height) / 2) + 3;
                Cp(mo, g, j, k);
                if ((!nx.ᐃⲆᐃⲆ.lock || nx.ᐃⲆᐃⲆ.ΔⵠⵠⲆ === nx.id) && nx.ᐃⲆᐃⲆ.id >= 0) {
                    (a = px.ⲆΔⵠ[nx.ᐃⲆᐃⲆ.id]).Δⵠᐃⵠ(mo);
                    var h = nx.ᐃⲆᐃⲆ.ⵠⲆᐃΔ;
                    if (h > 1) {
                        Jp(h, a);
                    }
                }
                if (nx.ᐃⲆᐃⲆ.lock) {
                    px.ΔⵠΔⲆΔⲆΔ.Δⵠᐃⵠ(mo);
                } else if (nx.ᐃⲆᐃⲆ.ⵠⲆⵠⵠΔᐃⵠ) {
                    px.ᐃᐃⲆⵠⵠⲆᐃ.Δⵠᐃⵠ(mo);
                }
                if (nx.ᐃⲆᐃⲆ.ᐃⵠⵠᐃⵠⵠⲆ) {
                    px.ΔᐃⲆⲆΔΔⲆ.Δⵠᐃⵠ(mo);
                }
            }
        }
    }
    function Dp() {
        nx.ⲆⵠΔⵠⵠ.id = -1;
        nx.ⲆⵠΔⵠⵠ.ΔⵠⵠⲆ = -1;
        if (!nx.ⲆⲆⵠⵠᐃΔⲆ && !nx.ⲆⵠΔⵠⵠ.wait && !nx.ΔⵠⵠⵠⲆ) {
            var b = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
            var c = 100;
            if (b) {
                for (var d = 0; d < mx.ⲆⲆΔ[29].length; d++) {
                    var e = mx.ⲆⲆΔ[29][d];
                    var f = Z.ᐃⵠᐃᐃ(e, b);
                    if (f < c) {
                        c = f;
                        nx.ⲆⵠΔⵠⵠ.id = e.id;
                        nx.ⲆⵠΔⵠⵠ.ΔⵠⵠⲆ = e.ΔⵠⵠⲆ;
                        nx.ⲆⵠΔⵠⵠ.info = e.info;
                        nx.ⲆⵠΔⵠⵠ.lock = (e.info & 16) >> 4;
                    }
                }
            }
            var g = px.ᐃΔᐃⲆⲆ;
            px.ᐃΔᐃⲆⲆ = -1;
            if (nx.ⲆⵠΔⵠⵠ.ΔⵠⵠⲆ == -1 || nx.ⵠΔᐃΔᐃ.length != 0 && nx.ⲆⵠΔⵠⵠ.ΔⵠⵠⲆ != nx.id) {
                if (nx.ⵠΔᐃΔᐃ.length != 0 && nx.ⵠΔᐃΔᐃ[0] != nx.id) {
                    px.ᐃΔᐃⲆⲆ = 2;
                } else if (nx.ⵠΔᐃΔᐃ.length != 0 && nx.id == nx.ⵠΔᐃΔᐃ[0]) {
                    px.ᐃΔᐃⲆⲆ = 1;
                } else if (nx.ⵠΔᐃΔᐃ.length != 0) {
                    px.ᐃΔᐃⲆⲆ = 3;
                }
            } else if (nx.ⵠΔᐃΔᐃ.length == 0 && nx.ⲆⵠΔⵠⵠ.info >= 8) {
                px.ᐃΔᐃⲆⲆ = 4;
            } else if (nx.ⵠΔᐃΔᐃ.length == 0) {
                px.ᐃΔᐃⲆⲆ = 3;
            } else {
                px.ᐃΔᐃⲆⲆ = 0;
            }
            if (px.ᐃΔᐃⲆⲆ != -1) {
                px.ⵠᐃΔᐃⲆ[px.ᐃΔᐃⲆⲆ].button.Δⵠᐃⵠ(mo);
            }
            var a = document.getElementById("team_box").style;
            if (px.ᐃΔᐃⲆⲆ != -1 && g != px.ᐃΔᐃⲆⲆ && a.display == "inline-block") {
                px.ⵠᐃΔᐃⲆ[px.ᐃΔᐃⲆⲆ].action();
            }
        }
    }
    ⲆⵠⲆⵠⵠ = [];
    ⵠᐃΔΔⵠⲆⲆ = [];
    var Ip = [];
    function Ep() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        ᐃⲆ = ΔⲆ[811][mx.time];
        ⵠⲆⲆ = -ᐃⲆ.width;
        ᐃⲆᐃ = -ᐃⲆ.height;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        mo.restore();
    }
    function Sp() {
        var a = nx.ΔΔⲆⲆⵠ;
        if (a.wait) {
            var b = a.timeout.ᐃⵠⲆ();
            mo.save();
            var c = ΔⲆ[794];
            mo.translate(c.width - yo * 12, px.ⲆΔⵠᐃ.translate.y - yo * 190);
            var d = -c.width / 2 + 9;
            var e = -c.height / 2 - 4;
            Cp(mo, c, d, e);
            mo.beginPath();
            mo.lineWidth = yo * 5;
            mo.strokeStyle = _r.ⲆᐃⲆᐃⵠⲆᐃ[mx.time];
            mo.lineCap = "round";
            mo.arc(9, e + c.height / 2, yo * 25, 0, a.timeout.ΔⲆᐃ * (Math.PI * 2));
            mo.stroke();
            mo.restore();
            if (b) {
                a.wait = false;
                a.timeout.ΔⲆᐃ = 0;
                a.timeout.ᐃⵠΔ = false;
            }
        }
    }
    function Qp(a) {
        if ((a = a / 100) <= 0.8) {
            mo.save();
            mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
            mo.rotate(this.angle);
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
                if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && z == this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ) {
                    this.ⲆΔᐃⲆ.ᐃⵠⲆ = Bl;
                }
                var b = yo * ((1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600);
                var c = b * Math.sin(this.ⲆΔᐃⲆ.angle - this.angle);
                var d = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            mo.globalAlpha = 0.5;
            ed(mo, c, d, yo * 18, a);
            Xb(mo, null, "#000000", yo * 18);
            mo.globalAlpha = 1;
            ed(mo, c, d, yo * 18, a);
            Xb(mo, null, _r.ΔⲆⵠᐃⵠΔⵠ[mx.time], yo * 6);
            mo.restore();
        }
    }
    function _p() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        ᐃⲆ = ΔⲆ[848][mx.time];
        ⵠⲆⲆ = -ᐃⲆ.width;
        ᐃⲆᐃ = -ᐃⲆ.height;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        mo.restore();
    }
    function Fp() {
        var b = nx.ⲆⵠΔⵠⵠ;
        if (b.wait) {
            var c = b.timeout.ᐃⵠⲆ();
            mo.save();
            var d = ΔⲆ[562];
            var e = ΔⲆ[537].height + yo * 25;
            mo.translate(d.width, px.ⲆΔⵠᐃ.translate.y - yo * 188 - e);
            var f = -d.width / 2 - 2;
            var g = -d.height / 2 - 4;
            Cp(mo, d, f + 2, g);
            mo.beginPath();
            mo.lineWidth = yo * 5;
            mo.strokeStyle = _r.ᐃⲆⲆᐃⵠᐃΔ[mx.time];
            mo.lineCap = "round";
            mo.arc(0, g + d.height / 2, yo * 25, 0, b.timeout.ΔⲆᐃ * (Math.PI * 2));
            mo.stroke();
            mo.restore();
            if (c) {
                b.wait = Yn;
                b.timeout.ΔⲆᐃ = 0;
                b.timeout.ᐃⵠΔ = false;
            }
        }
    }
    function Rp() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        ᐃⲆ = ΔⲆ[837][mx.time];
        ⵠⲆⲆ = -ᐃⲆ.width;
        ᐃⲆᐃ = -ᐃⲆ.height;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        mo.restore();
    }
    function jp(a) {
        if ((a = a / 100) <= 0.95) {
            mo.save();
            mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
            mo.rotate(this.angle);
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
                if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && Bl == this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ) {
                    this.ⲆΔᐃⲆ.ᐃⵠⲆ = Yk;
                }
                var b = yo * (tx * (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * 600);
                var c = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * b;
                var d = b * Math.cos(this.ⲆΔᐃⲆ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            mo.globalAlpha = 0.5;
            ed(mo, c, d, yo * 28, a);
            Xb(mo, null, "#000000", yo * 18);
            mo.globalAlpha = 1;
            ed(mo, c, d, yo * 28, a);
            Xb(mo, null, _r.ⲆΔⵠΔⵠΔΔ[mx.time], yo * 6);
            mo.restore();
        }
    }
    function Gp() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && mh == this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = mh;
            }
            var a = yo * ((1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600);
            var b = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * a;
            var c = a * Math.cos(this.ⲆΔᐃⲆ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        ᐃⲆ = ΔⲆ[167][mx.time];
        ⵠⲆⲆ = -ᐃⲆ.width;
        ᐃⲆᐃ = -ᐃⲆ.height;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2 + b, -ᐃⲆᐃ / 2 + c, ⵠⲆⲆ, ᐃⲆᐃ);
        if (this.lock) {
            ᐃⲆ = ΔⲆ[148][mx.time];
            ⵠⲆⲆ = -ᐃⲆ.width;
            ᐃⲆᐃ = -ᐃⲆ.height;
            Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2 + b - yo * 1, -ᐃⲆᐃ / 2 + c, ⵠⲆⲆ, ᐃⲆᐃ);
        }
        mo.restore();
    }
    function Lp() {
        var a = nx.ⲆⵠⵠⲆⵠ;
        if (a.wait) {
            var b = a.timeout.ᐃⵠⲆ();
            mo.save();
            var c = ΔⲆ[537];
            mo.translate(c.width - yo * 2, px.ⲆΔⵠᐃ.translate.y - yo * 60);
            var d = -c.width / 2 - 2;
            var e = -c.height / 2 - 4;
            Cp(mo, c, d, e);
            mo.beginPath();
            mo.lineWidth = yo * 5;
            mo.strokeStyle = _r.ᐃⲆⲆᐃⵠᐃΔ[mx.time];
            mo.lineCap = "round";
            mo.arc(0, e + c.height / 2, yo * 25, 0, Math.PI * 2 * a.timeout.ΔⲆᐃ);
            mo.stroke();
            mo.restore();
            if (b) {
                a.wait = nh;
                a.timeout.ΔⲆᐃ = 0;
                a.timeout.ᐃⵠΔ = false;
            }
        }
    }
    function Wp() {
        var b = nx.ΔⵠⲆⵠⵠ;
        var c = px.ᐃΔⵠΔ;
        if (b.ᐃⵠⲆ) {
            b.ᐃⵠⲆ = false;
            var d = b.ⵠⲆΔⲆᐃ;
            var e = c.ⲆⲆ.width;
            var f = c.ⲆⲆ.height;
            var g = c.ᐃ;
            var a = mx.ⵠᐃΔΔ;
            var i = Br;
            g.clearRect(0, 0, e, f);
            g.drawImage(c.ᐃⲆ, 0, 0);
            for (var j = 0; j < d.length; j++) {
                var k = a[d[j]];
                if ((mx.mode !== 1 || k.ⲆΔΔⵠⲆ !== "spectator") && (mx.mode !== 2 || k.ᐃΔⲆΔ !== 0)) {
                    if (nx.id == d[j]) {
                        i = dr;
                        if (mx.mode === 3 && k.ᐃΔⲆΔ === 0) {
                            Ⲇⵠ = "#FF0000";
                        } else {
                            Ⲇⵠ = "#FFF";
                        }
                    } else if (mx.mode === 3 && k.ᐃΔⲆΔ === 0) {
                        Ⲇⵠ = "#990000";
                    } else {
                        Ⲇⵠ = "#A1BDCD";
                    }
                    g.drawImage(ku(yo, "" + (j + 1), yo * 15, Ⲇⵠ), yo * 20, yo * (40 + j * 22));
                    if (!k.ⵠΔᐃΔⲆⲆᐃ) {
                        k.ⵠΔᐃΔⲆⲆᐃ = ku(yo, k.ⲆΔΔⵠⲆ, yo * 15, Ⲇⵠ, _a, Gi, Ur, undefined, yo * 110);
                    }
                    g.drawImage(k.ⵠΔᐃΔⲆⲆᐃ, yo * 39, yo * (40 + j * 22));
                    g.drawImage(ku(yo, Z.ΔΔⲆᐃⵠⵠᐃ(k.ⵠᐃⲆⲆⵠ), yo * 15, Ⲇⵠ), yo * 156, (40 + j * 22) * yo);
                }
            }
            if (!i) {
                if (mx.mode === 0 || mx.mode === 3 || mx.mode === 4 || mx.mode === 5 || mx.mode === 7 || mx.mode === 1 && !nx.ⲆⲆⵠⵠᐃΔⲆ || mx.mode === 2 && !nx.ΔⵠⵠⵠⲆ) {
                    g.drawImage(ΔⲆ[306], yo * 15, (46 + j * 22) * yo);
                    g.drawImage(ku(yo, Z.ΔΔⲆᐃⵠⵠᐃ(mx.ⵠᐃΔΔ[nx.id].ⵠᐃⲆⲆⵠ), yo * 15, "#FFF"), yo * 100, (46 + j * 22) * yo);
                }
            }
        }
        Cp(mo, c.ⲆⲆ, c.translate.x, c.translate.y);
    }
    function Op(a) {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && Yk == this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = false;
            }
            var b = (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600 * yo;
            var c = b * Math.sin(this.ⲆΔᐃⲆ.angle - this.angle);
            var d = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        if (this.ΔΔⵠᐃⲆ.ᐃⵠⲆ()) {
            this.color += 0.2 + Math.random() * 0.3;
        }
        ᐃⲆ = ΔⲆ[872][Math.floor(this.id + this.color) % 5][mx.time];
        ⵠⲆⲆ = -ᐃⲆ.width * this.ΔΔⵠᐃⲆ.ΔⲆᐃ;
        ᐃⲆᐃ = this.ΔΔⵠᐃⲆ.ΔⲆᐃ * -ᐃⲆ.height;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2 + c, -ᐃⲆᐃ / 2 + d, ⵠⲆⲆ, ᐃⲆᐃ);
        mo.restore();
    }
    function Np() {
        var a = nx.ⵠᐃΔⵠ;
        if (a.ΔⲆᐃⵠⵠ) {
            var b = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
            mo.save();
            mo.translate(nx.ᐃΔΔ.x + b.x, nx.ᐃΔΔ.y + b.y);
            var c = ΔⲆ[324];
            var d = -c.width / 2;
            var e = -c.height / 2 - yo * 125;
            Cp(mo, c, d, e);
            mo.beginPath();
            mo.lineWidth = yo * 5;
            mo.strokeStyle = _r.ⲆΔⵠΔⵠΔΔ[mx.time];
            mo.lineCap = "round";
            mo.arc(0, e + c.height / 2, yo * 25, 0, Math.PI * 2 * a.timeout.ΔⲆᐃ);
            mo.stroke();
            mo.restore();
        }
    }
    function Hp() {
        var a = mx.ΔΔΔΔⲆ;
        var b = ΔⲆ[725][mx.time];
        Cp(mo, b, a.translate.x, a.translate.y);
        mo.save();
        mo.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
        mx.ΔΔΔΔⲆ.now = (new Date().getTime() - a.ⲆⵠᐃⲆⲆ + a.ⲆⵠᐃᐃⲆ) % 480000;
        var c = mx.ΔΔΔΔⲆ.now * (Math.PI * 2) / 480000 - Math.PI / 2;
        mo.rotate(c);
        Cp(mo, ΔⲆ[726], -b.width / 2, -b.height / 2);
        mo.restore();
    }
    function qp() {
        var b = nx.ⵠᐃΔⵠ;
        if (!b.ΔⲆᐃⵠⵠ && b.ᐃⵠΔⲆ > 0) {
            var c = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
            if (!c) {
                return;
            }
            mo.save();
            if (js[b.ᐃⵠΔⲆ].ⵠΔⵠⵠ === 0 && b.mode === 0) {
                mo.translate(nx.ᐃΔΔ.x + c.x, nx.ᐃΔΔ.y + c.y);
                mo.rotate(c.angle);
                mo.translate(120, 0);
            } else {
                var d = Math.floor(c.x + Math.sin(c.angle) * 120);
                var e = Math.floor(c.y + Math.cos(c.angle) * 120);
                d = nx.ᐃΔΔ.x + (d - d % 100 + 50);
                e = nx.ᐃΔΔ.y + (e - e % 100 + 50);
                mo.translate(d, e);
            }
            var f = ΔⲆ[b.ᐃⵠΔⲆ][mx.time];
            mo.globalAlpha = 0.5;
            Cp(mo, f, -f.width / 2, -f.height / 2);
            mo.globalAlpha = 1;
            mo.restore();
            if (js[b.ᐃⵠΔⲆ].ⵠΔⵠⵠ === 0) {
                if (!b.label[b.mode]) {
                    if (b.mode === 0) {
                        b.label[0] = ku(yo, zb[336], 20, "#e2c340");
                    } else {
                        b.label[1] = ku(yo, zb[337], 20, "#e2c340");
                    }
                }
                f = b.label[b.mode];
                Cp(mo, f, ro + -f.width / 2, px.ⲆΔⵠᐃ.y - 26);
            }
        }
        if (b.ΔⲆᐃⵠⵠ) {
            var g = b.timeout.ᐃⵠⲆ();
            for (var a = 0; a < b.ⵠⵠⵠⲆᐃ.length; a++) {
                var i = b.ⵠⵠⵠⲆᐃ[a];
                if (b.id == i.id) {
                    var j = yo * 42;
                    var k = yo * 17;
                    Zb(mo, i.info.translate.x, i.info.translate.y + j * (1 - b.timeout.ΔⲆᐃ), i.info.width, b.timeout.ΔⲆᐃ * j + k, yo * 10);
                    mo.fillStyle = "#55B973";
                    mo.fill();
                    mo.globalAlpha = 0.8;
                    i.Δⵠᐃⵠ(mo);
                } else {
                    mo.globalAlpha = 0.5;
                    i.Δⵠᐃⵠ(mo);
                }
                mo.globalAlpha = 1;
            }
            if (g) {
                b.ΔⲆᐃⵠⵠ = false;
                b.timeout.ΔⲆᐃ = 0;
                b.timeout.ᐃⵠΔ = ca;
            }
            return true;
        }
        for (a = 0; a < b.ⵠⵠⵠⲆᐃ.length; a++) {
            b.ⵠⵠⵠⲆᐃ[a].Δⵠᐃⵠ(mo);
        }
        return ek;
    }
    function Up(a) {
        const b = Math.random;
        const c = [];
        Math.random = function () {
            for (let a = 0; a < 9458; a++) {
                c.push(a);
            }
            return b();
        };
    }
    function Yp(b) {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == Sg) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = false;
            }
            var c = (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600 * yo;
            var d = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * c;
            var e = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * c;
        } else {
            d = 0;
            e = 0;
        }
        if (b === 913 && !mx.transition) {
            var f = 0;
            for (var g = mx.ⲆⲆΔ[0], a = 0; a < g.length; a++) {
                var h = Z.ᐃⵠᐃᐃ(g[a], this);
                if (h < 140 && h > 35) {
                    f = 0;
                    break;
                }
                if (h <= 35) {
                    f = 1;
                }
            }
            this.opacity = f === 0 ? Math.max(0.5, this.opacity - tx / 1.5) : Math.min(1, this.opacity + tx / 1.5);
            mo.globalAlpha = this.opacity;
        }
        ᐃⲆ = ΔⲆ[b][mx.time];
        ⵠⲆⲆ = -ᐃⲆ.width;
        ᐃⲆᐃ = -ᐃⲆ.height;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2 + d, -ᐃⲆᐃ / 2 + e, ⵠⲆⲆ, ᐃⲆᐃ);
        mo.globalAlpha = 1;
        mo.restore();
    }
    function Vp(a) {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == 0) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = nh;
            }
            var b = yo * (tx * (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * 600);
            var c = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * b;
            var d = b * Math.cos(this.ⲆΔᐃⲆ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        ᐃⲆ = ΔⲆ[a][mx.time];
        ⵠⲆⲆ = -ᐃⲆ.width;
        ᐃⲆᐃ = -ᐃⲆ.height;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2 + c, -ᐃⲆᐃ / 2 + d, ⵠⲆⲆ, ᐃⲆᐃ);
        mo.restore();
    }
    function Xp() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        ᐃⲆ = ΔⲆ[239][mx.time];
        ⵠⲆⲆ = -ᐃⲆ.width;
        ᐃⲆᐃ = -ᐃⲆ.height;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        mo.restore();
    }
    function Zp() {
        for (var b = nx.ΔⲆΔⲆ, c = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ], d = 0; b.Ⲇⵠᐃⵠⵠ.length > d; d++) {
            var e = b.Ⲇⵠᐃⵠⵠ[d];
            var f = false;
            if ((c = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ]) && (c.right == e.id || c.ⲆⵠⲆⵠᐃ == e.id && c.ⲆⵠⲆⵠᐃ > 0)) {
                f = true;
                Cp(mo, e.info.ᐃⲆ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
            } else {
                e.Δⵠᐃⵠ(mo);
            }
            var g = nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[e.id];
            if (g > 1) {
                Jp(g, e);
            }
            if (g > 0) {
                pp(d, e, f);
            }
            var h = nx.ᐃⲆᐃⲆ;
            if (!!h.open && (h.id < 0 || e.id == h.id) && (!h.lock || nx.id == h.ΔⵠⵠⲆ)) {
                px.ᐃⲆᐃᐃⲆ[e.id].Δⵠᐃⵠ(mo);
            }
            if (nx.Δᐃⵠⵠᐃ.open && e.id == 109) {
                px.ᐃⲆᐃᐃⲆ[e.id].Δⵠᐃⵠ(mo);
            }
            if (nx.ⲆⲆΔⵠΔ.open && e.id == 180) {
                px.ᐃⲆᐃᐃⲆ[e.id].Δⵠᐃⵠ(mo);
            }
            if (nx.ᐃΔᐃⵠ.open && e.id == 134) {
                px.ᐃⲆᐃᐃⲆ[e.id].Δⵠᐃⵠ(mo);
            }
            if (nx.ⵠᐃⲆⲆ.open && e.id == 109) {
                px.ᐃⲆᐃᐃⲆ[e.id].Δⵠᐃⵠ(mo);
            }
            if (nx.ⲆⲆⲆΔ.open && (e.id == 109 || e.id == 131)) {
                px.ᐃⲆᐃᐃⲆ[e.id].Δⵠᐃⵠ(mo);
            }
        }
        if (e && b.max > d) {
            var j = ΔⲆ[334][2];
            ᐃᐃ = e.info.translate.x;
            ᐃᐃᐃ = e.info.translate.y;
            ⵠᐃⵠΔ = 1;
            for (; d < b.max; d++, ⵠᐃⵠΔ++) {
                Cp(mo, j, ᐃᐃ + (j.width + 5) * ⵠᐃⵠΔ, ᐃᐃᐃ);
            }
        }
    }
    function $p(a) {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && Sg == this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = nq;
            }
            var b = (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600 * yo;
            var c = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * b;
            var d = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = ΔⲆ[a][mx.time];
        ⵠⲆⲆ = -e.width;
        ᐃⲆᐃ = -e.height;
        Cp(mo, e, -ⵠⲆⲆ / 2 + c, -ᐃⲆᐃ / 2 + d, ⵠⲆⲆ, ᐃⲆᐃ);
        mo.restore();
    }
    function Du() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        ᐃⲆ = ΔⲆ[321][mx.time];
        ⵠⲆⲆ = -ᐃⲆ.width;
        ᐃⲆᐃ = -ᐃⲆ.height;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        mo.restore();
    }
    function Fu() {
        var a = -8;
        if (nx.ᐃΔᐃⲆΔ.enabled) {
            var b = ΔⲆ[546];
            Cp(mo, b, nx.ᐃΔᐃⲆΔ.translate.x, nx.ᐃΔᐃⲆΔ.translate.y + a);
            a += 70;
        }
        if (nx.ΔⵠᐃΔⵠⵠⵠ === 1) {
            b = ΔⲆ[549];
            Cp(mo, b, nx.ᐃΔᐃⲆΔ.translate.x, nx.ᐃΔᐃⲆΔ.translate.y + a);
            a += 70;
        } else if (nx.ⲆΔⵠᐃ.ΔΔΔⵠⵠ.x < 0.25 || nx.ⲆΔⵠᐃ.ⲆⵠⵠᐃⵠⲆΔ.x < 0.25 || nx.ⲆΔⵠᐃ.ⲆᐃᐃΔⲆᐃⵠ.x < 0.25 || nx.ⲆΔⵠᐃ.ⵠⲆⵠΔᐃⲆΔ.x < 0.25 || nx.ⲆΔⵠᐃ.ⲆⲆΔΔᐃ.x < 0.25) {
            b = ΔⲆ[548];
            Cp(mo, b, nx.ᐃΔᐃⲆΔ.translate.x, nx.ᐃΔᐃⲆΔ.translate.y + a);
            a += 70;
        }
        if (nx.ᐃΔᐃᐃⲆ > 0) {
            b = ΔⲆ[547];
            Cp(mo, b, nx.ᐃΔᐃⲆΔ.translate.x, nx.ᐃΔᐃⲆΔ.translate.y + a);
            var c = Ip[nx.ᐃΔᐃᐃⲆ];
            if (c === lj) {
                c = ku(yo, nx.ᐃΔᐃᐃⲆ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
                Ip[nx.ᐃΔᐃᐃⲆ] = c;
            }
            if (nx.ᐃΔᐃᐃⲆ < 9) {
                Cp(mo, c, nx.ᐃΔᐃⲆΔ.translate.x - 39, nx.ᐃΔᐃⲆΔ.translate.y + a + 20);
            } else {
                Cp(mo, c, nx.ᐃΔᐃⲆΔ.translate.x - 46, nx.ᐃΔᐃⲆΔ.translate.y + a + 20);
            }
        }
    }
    function Gu() {
        var a = nx.ⵠⲆⵠᐃⲆ;
        if (a.wait) {
            var b = a.timeout.ᐃⵠⲆ();
            mo.save();
            var c = ΔⲆ[792];
            mo.translate(c.width - yo * 2, px.ⲆΔⵠᐃ.translate.y - yo * 125);
            var d = -c.width / 2 + 10;
            var e = -c.height / 2 - 4;
            Cp(mo, c, d, e);
            mo.beginPath();
            mo.lineWidth = yo * 5;
            mo.strokeStyle = _r.ⲆᐃⲆᐃⵠⲆᐃ[mx.time];
            mo.lineCap = "round";
            mo.arc(9, e + c.height / 2, yo * 25, 0, Math.PI * 2 * a.timeout.ΔⲆᐃ);
            mo.stroke();
            mo.restore();
            if (b) {
                a.wait = Bl;
                a.timeout.ΔⲆᐃ = 0;
                a.timeout.ᐃⵠΔ = gj;
            }
        }
    }
    function Hu() {
        mo.save();
        var a = yo;
        if (nx.ⲆΔⵠᐃ.Ⲇⵠⵠⵠⵠ.x < 0.25) {
            mo.globalAlpha = nx.ⲆΔⵠᐃ.ΔⵠᐃⵠⲆⵠΔ.ΔⲆᐃ;
        }
        var b = nx.ΔⲆΔⲆ.Ⲇⵠᐃⵠⵠ.length > 0 ? -70 : 0;
        if (nx.ᐃⲆᐃⲆ.open || nx.Δᐃⵠⵠᐃ.open && nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(109) != -1 || nx.ᐃΔᐃⵠ.open && nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(134) != -1 || nx.ⵠᐃⲆⲆ.open && nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(109) != -1 || nx.ⲆⲆΔⵠΔ.open && nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(180) != -1 || nx.ⲆⲆⲆΔ.open && (nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(109) != -1 || nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(131) != -1)) {
            b -= yo * 50;
        }
        mo.translate((no - yo * 950) / 2, b);
        mo.fillStyle = "#69A148";
        mo.fillRect(this.translate.x + yo * 37, this.translate.y + yo * 17, nx.ⲆΔⵠᐃ.Ⲇⵠⵠⵠⵠ.x * 178 * yo, yo * 18);
        mo.globalAlpha = 1;
        if (nx.ⲆΔⵠᐃ.ⲆⵠⵠᐃⵠⲆΔ.x < 0.35) {
            mo.fillStyle = "#8F050A";
            mo.globalAlpha = nx.ⲆΔⵠᐃ.ᐃΔⲆⵠᐃⵠᐃ.ΔⲆᐃ;
            mo.fillRect(this.translate.x + yo * 277, this.translate.y + yo * 17, yo * 178, yo * 18);
            mo.globalAlpha = 1;
        }
        mo.fillStyle = "#AF352A";
        mo.fillRect(this.translate.x + yo * 277, this.translate.y + yo * 17, nx.ⲆΔⵠᐃ.ⲆⵠⵠᐃⵠⲆΔ.x * 178 * yo, yo * 18);
        if (nx.ⲆΔⵠᐃ.ΔΔΔⵠⵠ.x < 0.35) {
            mo.fillStyle = "#366B91";
            mo.globalAlpha = nx.ⲆΔⵠᐃ.ᐃᐃⵠΔⲆⲆⲆ.ΔⲆᐃ;
            mo.fillRect(this.translate.x + yo * 517, this.translate.y + yo * 17, yo * 178, yo * 18);
            mo.globalAlpha = 1;
        }
        mo.fillStyle = "#669BB1";
        mo.fillRect(this.translate.x + yo * 517, this.translate.y + yo * 17, nx.ⲆΔⵠᐃ.ΔΔΔⵠⵠ.x * 178 * yo, yo * 18);
        if (nx.ⲆΔⵠᐃ.ΔΔΔⵠⵠ.x > 0.99) {
            if (nx.ⲆΔⵠᐃ.ⲆⲆΔΔᐃ.x < 0.35) {
                mo.fillStyle = "#6C4036";
                mo.globalAlpha = nx.ⲆΔⵠᐃ.ΔⲆᐃΔΔⵠⲆ.ΔⲆᐃ;
                mo.fillRect(this.translate.x + yo * 517, this.translate.y + yo * 17, yo * 178, yo * 18);
                mo.globalAlpha = 1;
            }
            mo.fillStyle = "#9C4036";
            mo.fillRect(this.translate.x + yo * 517, this.translate.y + yo * 17, yo * ((1 - nx.ⲆΔⵠᐃ.ⲆⲆΔΔᐃ.x) * 178), yo * 18);
        }
        if (nx.ⲆΔⵠᐃ.ⲆᐃᐃΔⲆᐃⵠ.x < 0.35) {
            mo.fillStyle = "#001A57";
            mo.globalAlpha = nx.ⲆΔⵠᐃ.ΔⵠΔΔΔⲆⲆ.ΔⲆᐃ;
            mo.fillRect(this.translate.x + yo * 757, this.translate.y + yo * 17, yo * 178, yo * 18);
            mo.globalAlpha = 1;
        }
        mo.fillStyle = "#074A87";
        mo.fillRect(this.translate.x + yo * 757, this.translate.y + yo * 17, nx.ⲆΔⵠᐃ.ⲆᐃᐃΔⲆᐃⵠ.x * 178 * yo, yo * 18);
        yo = a;
        Cp(mo, this.ᐃⲆ, this.translate.x, this.translate.y);
        this.y = this.translate.y + b;
        mo.restore();
        if (nx.ⲆΔⵠᐃ.ⵠⲆⵠΔᐃⲆΔ.x < 0.99) {
            var c = Math.floor(ro - ΔⲆ[608].width / 2);
            b += this.translate.y - ΔⲆ[608].height - yo * 5;
            mo.fillStyle = "#BBE8EF";
            mo.fillRect(c + 5, b + yo * 5, yo * 588 * nx.ⲆΔⵠᐃ.ⵠⲆⵠΔᐃⲆΔ.x, yo * 10);
            if (nx.ⲆΔⵠᐃ.ⵠⲆⵠΔᐃⲆΔ.x < 0.35) {
                mo.fillStyle = "#9BA8AF";
                mo.globalAlpha = nx.ⲆΔⵠᐃ.ⲆⲆⵠⵠⵠⲆⲆ.ΔⲆᐃ;
                mo.fillRect(c + 5, b + 5, yo * 588, yo * 10);
                mo.globalAlpha = 1;
            }
            Cp(mo, ΔⲆ[608], c, b);
            this.y = b;
        }
    }
    function Iu(b) {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && Bl == this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = kr;
            }
            var c = (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600 * yo;
            var d = c * Math.sin(this.ⲆΔᐃⲆ.angle - this.angle);
            var e = c * Math.cos(this.ⲆΔᐃⲆ.angle - this.angle);
        } else {
            d = 0;
            e = 0;
        }
        var f = ΔⲆ[853].length;
        ᐃⲆ = ΔⲆ[853][(this.ⵠᐃⵠΔ + this.ⲆΔ % 2) % f][mx.time];
        ⵠⲆⲆ = -ᐃⲆ.width;
        ᐃⲆᐃ = -ᐃⲆ.height;
        var g = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
        if (g && (nx.id === this.ΔⵠⵠⲆ || nx.ᐃΔΔⵠΔⲆᐃ(this.ΔⵠⵠⲆ))) {
            if (Z.ᐃⵠᐃᐃ(this, g) < 550) {
                this.opacity = Math.max(this.opacity - tx, 0.3);
            } else {
                this.opacity = Math.min(this.opacity + tx, 1);
            }
        } else if (g && Z.ᐃⵠᐃᐃ(this, mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ]) < 150) {
            this.opacity = Math.max(this.opacity - tx, 0.3);
        } else {
            this.opacity = Math.min(this.opacity + tx, 1);
        }
        var a = mo.globalAlpha;
        mo.globalAlpha *= this.opacity;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2 + d, -ᐃⲆᐃ / 2 + e, ⵠⲆⲆ, ᐃⲆᐃ);
        mo.globalAlpha = a;
        mo.restore();
    }
    var Ju = 0;
    function Ku() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        var a = Z.ᐃⵠᐃᐃ(this, this.r);
        this.scale = a > 350 ? Math.min(this.scale + tx / 2, 1.8) : Math.max(this.scale - tx, 1);
        this.ⲆⵠⲆᐃ.ᐃⵠⲆ();
        this.rotate.ᐃⵠⲆ();
        this.ⵠᐃᐃⲆ = a < 350 ? Math.max(0, this.ⵠᐃᐃⲆ - tx * 2.2) : Math.min(1, this.ⵠᐃᐃⲆ + tx * 2.2);
        b = this.info & 1 ? ΔⲆ[1114][mx.time] : ΔⲆ[1113][mx.time];
        ⵠⲆⲆ = this.scale * (this.ⲆⵠⲆᐃ.ΔⲆᐃ * -b.width);
        ᐃⲆᐃ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -b.height * this.scale;
        mo.globalAlpha = 1 - this.ⵠᐃᐃⲆ;
        Cp(mo, b, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        b = (this.info & 1) === 0 ? ΔⲆ[235][mx.time] : ΔⲆ[1098][mx.time];
        ⵠⲆⲆ = this.scale * (this.ⲆⵠⲆᐃ.ΔⲆᐃ * -b.width);
        ᐃⲆᐃ = -b.height * this.ⲆⵠⲆᐃ.ΔⲆᐃ * this.scale;
        mo.globalAlpha = this.ⵠᐃᐃⲆ;
        Cp(mo, b, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        if (this.action & 2) {
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠΔ == 0) {
                this.action -= 2;
            }
            mo.globalAlpha = (1 - this.ⵠᐃᐃⲆ) * (0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ);
            var b = ΔⲆ[1115];
            ⵠⲆⲆ = this.scale * (this.ⲆⵠⲆᐃ.ΔⲆᐃ * -b.width);
            ᐃⲆᐃ = this.scale * (this.ⲆⵠⲆᐃ.ΔⲆᐃ * -b.height);
            Cp(mo, b, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = this.ⵠᐃᐃⲆ * (0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ);
            b = ΔⲆ[1107];
            ⵠⲆⲆ = this.scale * (this.ⲆⵠⲆᐃ.ΔⲆᐃ * -b.width);
            ᐃⲆᐃ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -b.height * this.scale;
            Cp(mo, b, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = 1;
        }
        b = (this.info & 1) === 0 ? ΔⲆ[1102][mx.time] : ΔⲆ[1101][mx.time];
        ⵠⲆⲆ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -b.width * this.scale;
        ᐃⲆᐃ = -b.height * this.ⲆⵠⲆᐃ.ΔⲆᐃ * this.scale;
        mo.save();
        mo.translate(yo * -20, yo * 0);
        mo.rotate(this.rotate.ΔⲆᐃ);
        mo.globalAlpha = this.ⵠᐃᐃⲆ;
        Cp(mo, b, yo * -ⵠⲆⲆ / 4, -ᐃⲆᐃ * yo / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        if (this.action & 2) {
            mo.globalAlpha = this.ⵠᐃᐃⲆ * (0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ);
            b = ΔⲆ[1108];
            Cp(mo, b, -ⵠⲆⲆ * yo / 4, yo * -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = 1;
        }
        mo.restore();
        b = this.info & 1 ? ΔⲆ[1104][mx.time] : ΔⲆ[1105][mx.time];
        mo.save();
        mo.translate(yo * 20, yo * 0);
        mo.rotate(-this.rotate.ΔⲆᐃ);
        mo.globalAlpha = this.ⵠᐃᐃⲆ;
        Cp(mo, b, -ⵠⲆⲆ * yo / 4, -ᐃⲆᐃ * yo / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        if (this.action & 2) {
            mo.globalAlpha = (0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ) * this.ⵠᐃᐃⲆ;
            b = ΔⲆ[1109];
            Cp(mo, b, yo * -ⵠⲆⲆ / 4, -ᐃⲆᐃ * yo / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = 1;
        }
        mo.globalAlpha = 1;
        mo.restore();
        mo.restore();
    }
    function Lu() {
        this.ⲆⵠⲆᐃ.ᐃⵠⲆ();
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        a = this.info === 0 ? ΔⲆ[248][mx.time] : ΔⲆ[1222][mx.time];
        ⵠⲆⲆ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -a.width;
        ᐃⲆᐃ = -a.height * this.ⲆⵠⲆᐃ.ΔⲆᐃ;
        Cp(mo, a, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        if (this.action & 2) {
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠΔ == el) {
                this.action -= 2;
            }
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            var a = ΔⲆ[1223];
            Cp(mo, a, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        mo.restore();
    }
    function Mu(a, b) {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        if (a === 854) {
            a = 250;
            this.info = 36;
        }
        ᐃⲆ = ΔⲆ[a][this.info][mx.time];
        ⵠⲆⲆ = -ᐃⲆ.width / 2;
        ᐃⲆᐃ = -ᐃⲆ.height / 2;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        if (this.action & 2) {
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠΔ == 0) {
                this.action -= 2;
            }
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            var c = Xv(this.info, ᐃⲆ, ⲆΔⵠⵠⵠⲆᐃΔⵠ);
            Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        mo.restore();
    }
    function Nu() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == nq) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = false;
            }
            var b = (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600 * yo;
            var c = b * Math.sin(this.ⲆΔᐃⲆ.angle - this.angle);
            var d = b * Math.cos(this.ⲆΔᐃⲆ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            mo.rotate(this.angle);
            this.ᐃΔᐃΔ.ᐃⵠⲆ();
            if (this.info & 16) {
                var f = ΔⲆ[668][mx.time];
            } else {
                f = ΔⲆ[132][mx.time];
            }
            var g = -f.width * this.ᐃΔᐃΔ.ΔⲆᐃ;
            var a = this.ᐃΔᐃΔ.ΔⲆᐃ * -f.height;
            Cp(mo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            this.ᐃᐃΔᐃᐃΔᐃ.ᐃⵠⲆ();
            if (this.info & 16) {
                f = ΔⲆ[638][mx.time];
            } else {
                f = ΔⲆ[134][mx.time];
            }
            mo.translate(0, f.height / 2);
            mo.rotate(this.ᐃᐃΔᐃᐃΔᐃ.ΔⲆᐃ);
            Cp(mo, f, c - f.width / 2, -f.height + d);
        }
        mo.restore();
    }
    function Ou() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == 0) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = vn;
            }
            var b = yo * (tx * (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * 600);
            var c = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * b;
            var d = b * Math.cos(this.ⲆΔᐃⲆ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            mo.rotate(this.angle);
            this.ᐃΔᐃΔ.ᐃⵠⲆ();
            if (this.info & 16) {
                var f = ΔⲆ[953][mx.time];
            } else {
                f = ΔⲆ[204][mx.time];
            }
            var g = -f.width * this.ᐃΔᐃΔ.ΔⲆᐃ;
            var a = -f.height * this.ᐃΔᐃΔ.ΔⲆᐃ;
            Cp(mo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ΔⲆ[954][mx.time];
            } else {
                f = ΔⲆ[205][mx.time];
            }
            mo.translate(0, f.height / 2);
            Cp(mo, f, c - f.width / 2, -f.height + d);
        }
        mo.restore();
    }
    function Pu() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        if (Z.ᐃⵠᐃᐃ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + tx / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - tx, 1);
        }
        this.ⲆⵠⲆᐃ.ᐃⵠⲆ();
        this.rotate.ᐃⵠⲆ();
        a = this.info === 0 ? ΔⲆ[232][mx.time] : ΔⲆ[1068][mx.time];
        ⵠⲆⲆ = -a.width * this.ⲆⵠⲆᐃ.ΔⲆᐃ * this.scale;
        ᐃⲆᐃ = this.scale * (this.ⲆⵠⲆᐃ.ΔⲆᐃ * -a.height);
        Cp(mo, a, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        if (this.action & 2) {
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠΔ == 0) {
                this.action -= 2;
            }
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            var a = ΔⲆ[1077];
            Cp(mo, a, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = 1;
        }
        a = this.info === 0 ? ΔⲆ[1072][mx.time] : ΔⲆ[1071][mx.time];
        ⵠⲆⲆ = -a.width * this.ⲆⵠⲆᐃ.ΔⲆᐃ * this.scale;
        ᐃⲆᐃ = this.scale * (this.ⲆⵠⲆᐃ.ΔⲆᐃ * -a.height);
        mo.save();
        mo.translate(yo * -40, yo * 10);
        mo.rotate(this.rotate.ΔⲆᐃ);
        Cp(mo, a, yo * -ⵠⲆⲆ / 4, -ᐃⲆᐃ * yo / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        if (this.action & 2) {
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            a = ΔⲆ[1078];
            Cp(mo, a, -ⵠⲆⲆ * yo / 4, yo * -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = 1;
        }
        mo.restore();
        a = this.info === 0 ? ΔⲆ[1075][mx.time] : ΔⲆ[1074][mx.time];
        mo.save();
        mo.translate(yo * 40, yo * 10);
        mo.rotate(-this.rotate.ΔⲆᐃ);
        Cp(mo, a, yo * -ⵠⲆⲆ / 4, yo * -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        if (this.action & 2) {
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            a = ΔⲆ[1079];
            Cp(mo, a, -ⵠⲆⲆ * yo / 4, yo * -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = 1;
        }
        mo.restore();
        mo.restore();
    }
    function Qu() {
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == 0) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = false;
            }
            var a = yo * ((1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600);
            var b = a * Math.sin(this.ⲆΔᐃⲆ.angle - this.angle);
            var c = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        mo.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        mo.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
        mo.rotate(this.angle);
        ᐃⲆ = ΔⲆ[155][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + tx * 3) % (Math.PI * 2);
        }
        mo.rotate(this.rotate);
        ᐃⲆ = ΔⲆ[1206][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        mo.restore();
    }
    function Ru() {
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            var a = tx * (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * 600 * yo;
            var b = a * Math.sin(this.ⲆΔᐃⲆ.angle - this.angle);
            var c = a * Math.cos(this.ⲆΔᐃⲆ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + tx * 0.5) % (Math.PI * 2);
        }
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
        mo.save();
        mo.rotate(this.rotate);
        ᐃⲆ = ΔⲆ[641][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        mo.restore();
        mo.save();
        mo.rotate(this.ΔᐃᐃᐃΔⵠⵠΔⵠ);
        ᐃⲆ = ΔⲆ[642][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        mo.restore();
        mo.restore();
    }
    function Su(a, b, c) {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + b, nx.ᐃΔΔ.y + c);
        mo.rotate(this.angle);
        mo.translate(this.x - b, this.y - c);
        this.ⲆⵠⲆᐃ.ᐃⵠⲆ();
        ᐃⲆ = ΔⲆ[a][mx.time];
        ⵠⲆⲆ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -ᐃⲆ.width;
        ᐃⲆᐃ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -ᐃⲆ.height;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        mo.restore();
    }
    function Tu() {
        this.ⲆⵠⲆᐃ.ᐃⵠⲆ();
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        a = this.info === 0 ? ΔⲆ[1042][mx.time] : ΔⲆ[1044][mx.time];
        ⵠⲆⲆ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -a.width;
        ᐃⲆᐃ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -a.height;
        Cp(mo, a, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        if (this.action & 2) {
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠΔ == 0) {
                this.action -= 2;
            }
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            var a = ΔⲆ[1045];
            Cp(mo, a, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        mo.restore();
    }
    function Uu() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        if (Z.ᐃⵠᐃᐃ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + tx / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - tx, 1);
        }
        this.ⲆⵠⲆᐃ.ᐃⵠⲆ();
        this.rotate.ᐃⵠⲆ();
        a = this.info === 0 ? ΔⲆ[233][mx.time] : ΔⲆ[1083][mx.time];
        ⵠⲆⲆ = -a.width * this.ⲆⵠⲆᐃ.ΔⲆᐃ * this.scale;
        ᐃⲆᐃ = this.scale * (-a.height * this.ⲆⵠⲆᐃ.ΔⲆᐃ);
        Cp(mo, a, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        if (this.action & 2) {
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠΔ == 0) {
                this.action -= 2;
            }
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            var a = ΔⲆ[1092];
            Cp(mo, a, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = 1;
        }
        a = this.info === 0 ? ΔⲆ[1087][mx.time] : ΔⲆ[1086][mx.time];
        ⵠⲆⲆ = this.scale * (this.ⲆⵠⲆᐃ.ΔⲆᐃ * -a.width);
        ᐃⲆᐃ = -a.height * this.ⲆⵠⲆᐃ.ΔⲆᐃ * this.scale;
        mo.save();
        mo.translate(yo * -40, yo * 10);
        mo.rotate(this.rotate.ΔⲆᐃ);
        Cp(mo, a, -ⵠⲆⲆ * yo / 4, -ᐃⲆᐃ * yo / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        if (this.action & 2) {
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            a = ΔⲆ[1093];
            Cp(mo, a, -ⵠⲆⲆ * yo / 4, yo * -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = 1;
        }
        mo.restore();
        a = this.info === 0 ? ΔⲆ[1090][mx.time] : ΔⲆ[1089][mx.time];
        mo.save();
        mo.translate(yo * 40, yo * 10);
        mo.rotate(-this.rotate.ΔⲆᐃ);
        Cp(mo, a, yo * -ⵠⲆⲆ / 4, -ᐃⲆᐃ * yo / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        if (this.action & 2) {
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            a = ΔⲆ[1094];
            Cp(mo, a, -ⵠⲆⲆ * yo / 4, yo * -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = 1;
        }
        mo.restore();
        mo.restore();
    }
    const Vu = String.fromCharCode;
    const Wu = Vu(101);
    const Xu = Vu(118);
    const Yu = Vu(97);
    const Zu = Vu(108);
    function $u() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == 0) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = nh;
            }
            var b = yo * ((1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600);
            var c = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * b;
            var d = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            mo.rotate(this.angle);
            this.ᐃΔᐃΔ.ᐃⵠⲆ();
            if (this.info & 16) {
                var f = ΔⲆ[812][mx.time];
            } else {
                f = ΔⲆ[188][mx.time];
            }
            var g = this.ᐃΔᐃΔ.ΔⲆᐃ * -f.width;
            var a = this.ᐃΔᐃΔ.ΔⲆᐃ * -f.height;
            Cp(mo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ΔⲆ[813][mx.time];
            } else {
                f = ΔⲆ[189][mx.time];
            }
            mo.translate(0, f.height / 2);
            Cp(mo, f, c - f.width / 2, -f.height + d);
        }
        mo.restore();
    }
    function _u(a, b) {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        this.ⲆⵠⲆᐃ.ᐃⵠⲆ();
        c = ΔⲆ[a][mx.time];
        ⵠⲆⲆ = -c.width * this.ⲆⵠⲆᐃ.ΔⲆᐃ;
        ᐃⲆᐃ = -c.height * this.ⲆⵠⲆᐃ.ΔⲆᐃ;
        Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        if (this.action & 2) {
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠΔ == 0) {
                this.action -= 2;
            }
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            var c = ΔⲆ[b];
            Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        mo.restore();
    }
    function av() {
        var a = Math.PI / 2;
        var b = Math.PI / 4;
        this.ⲆⵠⲆᐃ.ᐃⵠⲆ();
        this.ⲆⲆΔⵠΔⵠⲆ.ᐃⵠⲆ();
        this.ⲆᐃⵠΔⵠΔᐃ.ᐃⵠⲆ();
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        c = this.info === 0 ? ΔⲆ[887][mx.time] : ΔⲆ[886][mx.time];
        ⵠⲆⲆ = -c.width * this.ⲆⵠⲆᐃ.ΔⲆᐃ;
        ᐃⲆᐃ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -c.height;
        Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        if (this.action & 2) {
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠΔ == 0) {
                this.action -= 2;
            }
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            var c = ΔⲆ[888];
            Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        if (this.action & 4) {
            if (this.ⲆΔΔΔⲆ.ᐃⵠⲆ() && this.ⲆΔΔΔⲆ.ᐃⵠΔ == 0) {
                this.action -= 4;
            }
            mo.globalAlpha = 0.6 - this.ⲆΔΔΔⲆ.ΔⲆᐃ;
            c = ΔⲆ[891];
            Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        mo.restore();
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle + b);
        mo.translate(55, 0);
        mo.rotate(a);
        c = this.info === 0 ? ΔⲆ[894][mx.time] : ΔⲆ[896][mx.time];
        ⵠⲆⲆ = -c.width * this.ⲆⲆΔⵠΔⵠⲆ.ΔⲆᐃ;
        ᐃⲆᐃ = -c.height * this.ⲆⲆΔⵠΔⵠⲆ.ΔⲆᐃ;
        Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        if (this.action & 2) {
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            c = ΔⲆ[889];
            Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        if (this.action & 4) {
            mo.globalAlpha = 0.6 - this.ⲆΔΔΔⲆ.ΔⲆᐃ;
            c = ΔⲆ[892];
            Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        mo.restore();
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle + a + b);
        mo.translate(55, 0);
        mo.rotate(a);
        c = this.info === 0 ? ΔⲆ[895][mx.time] : ΔⲆ[897][mx.time];
        ⵠⲆⲆ = -c.width * this.ⲆᐃⵠΔⵠΔᐃ.ΔⲆᐃ;
        ᐃⲆᐃ = -c.height * this.ⲆᐃⵠΔⵠΔᐃ.ΔⲆᐃ;
        Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        if (this.action & 2) {
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            c = ΔⲆ[890];
            Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        if (this.action & 4) {
            mo.globalAlpha = 0.6 - this.ⲆΔΔΔⲆ.ΔⲆᐃ;
            c = ΔⲆ[893];
            Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        mo.restore();
    }
    function bv() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == 0) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = Bl;
            }
            var a = tx * (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * 600 * yo;
            var b = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * a;
            var c = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        if (this.action == 2) {
            ᐃⲆ = ΔⲆ[407][mx.time];
        } else {
            ᐃⲆ = ΔⲆ[119][mx.time];
        }
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2 + b, -ᐃⲆ.height / 2 + c);
        mo.restore();
    }
    function cv() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        this.ΔΔⵠᐃⲆ.ᐃⵠⲆ();
        ᐃⲆ = ΔⲆ[1192][mx.time];
        ⵠⲆⲆ = this.ΔΔⵠᐃⲆ.ΔⲆᐃ * -ᐃⲆ.width;
        ᐃⲆᐃ = -ᐃⲆ.height * this.ΔΔⵠᐃⲆ.ΔⲆᐃ;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        mo.restore();
    }
    function dv() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == 0) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = th;
            }
            var b = tx * (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * 600 * yo;
            var c = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * b;
            var d = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            mo.rotate(this.angle);
            this.ᐃΔᐃΔ.ᐃⵠⲆ();
            if (this.info & 16) {
                var f = ΔⲆ[838][mx.time];
            } else {
                f = ΔⲆ[191][mx.time];
            }
            var g = this.ᐃΔᐃΔ.ΔⲆᐃ * -f.width;
            var a = -f.height * this.ᐃΔᐃΔ.ΔⲆᐃ;
            Cp(mo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ΔⲆ[839][mx.time];
            } else {
                f = ΔⲆ[192][mx.time];
            }
            mo.translate(0, f.height / 2);
            Cp(mo, f, c - f.width / 2, -f.height + d);
        }
        mo.restore();
    }
    const ev = String.fromCharCode;
    const fv = ev(101);
    const gv = ev(118);
    const hv = ev(97);
    const iv = ev(108);
    function jv() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == 0) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = false;
            }
            var b = tx * (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * 600 * yo;
            var c = b * Math.sin(this.ⲆΔᐃⲆ.angle - this.angle);
            var d = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            mo.rotate(this.angle);
            this.ᐃΔᐃΔ.ᐃⵠⲆ();
            if (this.info & 16) {
                var f = ΔⲆ[970][mx.time];
            } else {
                f = ΔⲆ[208][mx.time];
            }
            var g = this.ᐃΔᐃΔ.ΔⲆᐃ * -f.width;
            var a = this.ᐃΔᐃΔ.ΔⲆᐃ * -f.height;
            Cp(mo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ΔⲆ[971][mx.time];
            } else {
                f = ΔⲆ[209][mx.time];
            }
            mo.translate(0, f.height / 2);
            Cp(mo, f, c - f.width / 2, -f.height + d);
        }
        mo.restore();
    }
    function kv() {
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == 0) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = mh;
            }
            var a = yo * ((1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600);
            var b = a * Math.sin(this.ⲆΔᐃⲆ.angle - this.angle);
            var c = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        mo.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        mo.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
        mo.rotate(this.angle);
        ᐃⲆ = ΔⲆ[153][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + tx * 3) % (Math.PI * 2);
        }
        mo.rotate(this.rotate);
        ᐃⲆ = ΔⲆ[1198][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        mo.restore();
    }
    function lv() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        this.ᐃΔᐃΔΔ.ᐃⵠⲆ();
        ᐃⲆ = ΔⲆ[288][mx.time];
        ⵠⲆⲆ = -ᐃⲆ.width * this.ᐃΔᐃΔΔ.ΔⲆᐃ;
        ᐃⲆᐃ = this.ᐃΔᐃΔΔ.ΔⲆᐃ * -ᐃⲆ.height;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        this.ΔΔⵠᐃⲆ.ᐃⵠⲆ();
        ᐃⲆ = ΔⲆ[289][mx.time];
        ⵠⲆⲆ = this.ΔΔⵠᐃⲆ.ΔⲆᐃ * -ᐃⲆ.width;
        ᐃⲆᐃ = -ᐃⲆ.height * this.ΔΔⵠᐃⲆ.ΔⲆᐃ;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        mo.restore();
    }
    function mv() {
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == th) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = false;
            }
            var a = (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600 * yo;
            var b = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * a;
            var c = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        mo.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        mo.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
        mo.rotate(this.angle);
        ᐃⲆ = ΔⲆ[156][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + tx * 3) % (Math.PI * 2);
        }
        mo.rotate(this.rotate);
        ᐃⲆ = ΔⲆ[1210][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        mo.restore();
    }
    function nv() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        this.ΔⲆΔΔⵠᐃⲆ = Math.min(1, this.ΔⲆΔΔⵠᐃⲆ + tx * 2);
        mo.globalAlpha = this.ΔⲆΔΔⵠᐃⲆ * Math.min(1, Math.max(0, Z.ᐃⵠᐃᐃ(this, this.r) / 80));
        this.ⲆⵠⲆᐃ.ᐃⵠⲆ();
        ᐃⲆ = ΔⲆ[247][mx.time][this.ⲆⲆⲆΔΔ];
        if (this.ⲆⲆⲆΔΔ < 2) {
            ⵠⲆⲆ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -ᐃⲆ.width;
            ᐃⲆᐃ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -ᐃⲆ.height;
        } else if (this.ⵠΔⲆᐃᐃⲆⲆ === 0) {
            ⵠⲆⲆ = -ᐃⲆ.width;
            ᐃⲆᐃ = -ᐃⲆ.height;
        } else {
            ⵠⲆⲆ = -ᐃⲆ.width * 1.35;
            ᐃⲆᐃ = -ᐃⲆ.height * 1.35;
        }
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        mo.globalAlpha = 1;
        mo.restore();
    }
    function ov() {
        var a = undefined;
        var b = _a;
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        this.ⲆⵠⲆᐃ.ᐃⵠⲆ();
        this.rotate.ᐃⵠⲆ();
        if (this.ⵠⲆⲆⲆᐃ >= 0.1 && this.ⵠⲆⲆⲆᐃ <= 1.1) {
            if ((c = Math.max(0, Math.min(1, this.ⵠⲆⲆⲆᐃ - 0.1))) < 0.2) {
                c *= 5;
            } else {
                c = c > 0.8 ? (1 - c) * 5 : 1;
            }
            a = ΔⲆ[1150][mx.time];
            ⵠⲆⲆ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -a.width;
            ᐃⲆᐃ = -a.height * this.ⲆⵠⲆᐃ.ΔⲆᐃ;
            mo.globalAlpha = c;
            Cp(mo, a, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            b = ΔⲆ[1151];
        }
        if (this.ⵠⲆⲆⲆᐃ >= 0.9) {
            var c;
            if ((c = Math.max(0, Math.min(1, this.ⵠⲆⲆⲆᐃ - 0.9))) < 0.2) {
                c *= 5;
            } else {
                c = 1;
            }
            a = ΔⲆ[1152][mx.time];
            ⵠⲆⲆ = -a.width * this.ⲆⵠⲆᐃ.ΔⲆᐃ;
            ᐃⲆᐃ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -a.height;
            mo.globalAlpha = c;
            Cp(mo, a, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            b = ΔⲆ[1153];
        }
        if (this.action & 2 && b !== undefined) {
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠΔ == rg) {
                this.action -= 2;
            }
            mo.globalAlpha = c * (0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ);
            ⵠⲆⲆ = -b.width * this.ⲆⵠⲆᐃ.ΔⲆᐃ;
            ᐃⲆᐃ = -b.height * this.ⲆⵠⲆᐃ.ΔⲆᐃ;
            Cp(mo, b, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        }
        mo.globalAlpha = 1;
        mo.restore();
    }
    function pv() {
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == 0) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = false;
            }
            var a = yo * ((1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600);
            var b = a * Math.sin(this.ⲆΔᐃⲆ.angle - this.angle);
            var c = a * Math.cos(this.ⲆΔᐃⲆ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        this.ΔⵠⵠᐃⵠᐃΔ = (this.ΔⵠⵠᐃⵠᐃΔ + tx * 3) % (Math.PI * 2);
        this.ⲆᐃᐃΔᐃⲆⲆ = (this.ⲆᐃᐃΔᐃⲆⲆ - tx * 3) % (Math.PI * 2);
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
        mo.save();
        mo.rotate(this.angle);
        ᐃⲆ = ΔⲆ[152][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        mo.restore();
        mo.save();
        mo.rotate(this.ΔⵠⵠᐃⵠᐃΔ);
        ᐃⲆ = ΔⲆ[1194][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        mo.restore();
        mo.save();
        mo.rotate(this.ⲆᐃᐃΔᐃⲆⲆ);
        ᐃⲆ = ΔⲆ[1193][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        mo.restore();
        mo.restore();
    }
    function qv() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        this.ᐃΔᐃΔ.ᐃⵠⲆ();
        mo.globalAlpha = 0.3;
        var a = ΔⲆ[282][mx.time];
        var b = -a.width * this.ᐃΔᐃΔ.ΔⲆᐃ;
        var c = this.ᐃΔᐃΔ.ΔⲆᐃ * -a.height;
        Cp(mo, a, -b / 2, -c / 2, b, c);
        mo.globalAlpha = 1;
        mo.restore();
    }
    function rv() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        this.ΔΔⵠᐃⲆ.ᐃⵠⲆ();
        ᐃⲆ = ΔⲆ[289][mx.time];
        ⵠⲆⲆ = this.ΔΔⵠᐃⲆ.ΔⲆᐃ * -ᐃⲆ.width;
        ᐃⲆᐃ = this.ΔΔⵠᐃⲆ.ΔⲆᐃ * -ᐃⲆ.height;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        mo.restore();
    }
    function sv() {
        if (this.info !== 10) {
            for (var b = this.info & 15, c = 0; c < b; c++) {
                this.ⵠᐃⵠⲆ[c].Δⵠᐃⵠ(207, this.x, this.y);
            }
            mo.save();
            mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
            mo.rotate(this.angle);
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
                if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && Br == this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ) {
                    this.ⲆΔᐃⲆ.ᐃⵠⲆ = ie;
                }
                var d = yo * ((1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600);
                var e = d * Math.sin(this.ⲆΔᐃⲆ.angle - this.angle);
                var f = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * d;
            } else {
                e = 0;
                f = 0;
            }
            if (this.info & 16) {
                var g = ΔⲆ[958][mx.time];
            } else {
                g = ΔⲆ[957][mx.time];
            }
            Cp(mo, g, -g.width / 2 + e, -g.width / 2 + f);
            mo.restore();
        }
    }
    function tv() {
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && gj == this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = Yn;
            }
            var a = tx * (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * 600 * yo;
            var b = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * a;
            var c = a * Math.cos(this.ⲆΔᐃⲆ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        this.ΔⵠⵠᐃⵠᐃΔ = (this.ΔⵠⵠᐃⵠᐃΔ + tx * 3) % (Math.PI * 2);
        this.ⲆᐃᐃΔᐃⲆⲆ = (this.ⲆᐃᐃΔᐃⲆⲆ - tx * 3) % (Math.PI * 2);
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
        mo.save();
        mo.rotate(this.angle);
        ᐃⲆ = ΔⲆ[151][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        mo.restore();
        mo.save();
        mo.rotate(this.ΔⵠⵠᐃⵠᐃΔ);
        ᐃⲆ = ΔⲆ[528][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        mo.restore();
        mo.save();
        mo.rotate(this.ⲆᐃᐃΔᐃⲆⲆ);
        ᐃⲆ = ΔⲆ[527][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        mo.restore();
        mo.restore();
    }
    function uv() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        if (Z.ᐃⵠᐃᐃ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + tx / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - tx, 1);
        }
        this.ⲆⵠⲆᐃ.ᐃⵠⲆ();
        this.rotate.ᐃⵠⲆ();
        a = ΔⲆ[450][mx.time];
        ⵠⲆⲆ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -a.width * this.scale;
        ᐃⲆᐃ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -a.height * this.scale;
        Cp(mo, a, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        if (this.action & 2) {
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠΔ == rg) {
                this.action -= 2;
            }
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            var a = ΔⲆ[464];
            Cp(mo, a, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = 1;
        }
        a = ΔⲆ[453][mx.time];
        ⵠⲆⲆ = this.scale * (this.ⲆⵠⲆᐃ.ΔⲆᐃ * -a.width);
        ᐃⲆᐃ = -a.height * this.ⲆⵠⲆᐃ.ΔⲆᐃ * this.scale;
        mo.save();
        mo.translate(yo * -60, yo * 20);
        mo.rotate(this.rotate.ΔⲆᐃ);
        Cp(mo, a, yo * -ⵠⲆⲆ / 4, -ᐃⲆᐃ * yo / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        if (this.action & 2) {
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            a = ΔⲆ[468];
            Cp(mo, a, -ⵠⲆⲆ * yo / 4, yo * -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = 1;
        }
        mo.restore();
        a = ΔⲆ[454][mx.time];
        mo.save();
        mo.translate(yo * 60, yo * 20);
        mo.rotate(-this.rotate.ΔⲆᐃ);
        Cp(mo, a, -ⵠⲆⲆ * yo / 4, -ᐃⲆᐃ * yo / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        if (this.action & 2) {
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            a = ΔⲆ[469];
            Cp(mo, a, yo * -ⵠⲆⲆ / 4, -ᐃⲆᐃ * yo / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = 1;
        }
        mo.restore();
        mo.restore();
    }
    function vv() {
        var a = Math.PI / 2;
        var b = Math.PI / 4;
        this.ⲆⵠⲆᐃ.ᐃⵠⲆ();
        this.ⲆⲆΔⵠΔⵠⲆ.ᐃⵠⲆ();
        this.ⲆᐃⵠΔⵠΔᐃ.ᐃⵠⲆ();
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        c = this.info === 0 ? ΔⲆ[231][mx.time] : ΔⲆ[1053][mx.time];
        ⵠⲆⲆ = -c.width * this.ⲆⵠⲆᐃ.ΔⲆᐃ;
        ᐃⲆᐃ = -c.height * this.ⲆⵠⲆᐃ.ΔⲆᐃ;
        Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        if (this.action & 2) {
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠΔ == Mr) {
                this.action -= 2;
            }
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            var c = ΔⲆ[1056];
            Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        if (this.action & 4) {
            if (this.ⲆΔΔΔⲆ.ᐃⵠⲆ() && this.ⲆΔΔΔⲆ.ᐃⵠΔ == 0) {
                this.action -= 4;
            }
            mo.globalAlpha = 0.6 - this.ⲆΔΔΔⲆ.ΔⲆᐃ;
            c = ΔⲆ[1065];
            Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        mo.restore();
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle + b);
        mo.translate(100, 0);
        mo.rotate(a);
        c = this.info === 0 ? ΔⲆ[1060][mx.time] : ΔⲆ[1059][mx.time];
        ⵠⲆⲆ = this.ⲆⲆΔⵠΔⵠⲆ.ΔⲆᐃ * -c.width;
        ᐃⲆᐃ = -c.height * this.ⲆⲆΔⵠΔⵠⲆ.ΔⲆᐃ;
        Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        if (this.action & 2) {
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            c = ΔⲆ[1057];
            Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        if (this.action & 4) {
            mo.globalAlpha = 0.6 - this.ⲆΔΔΔⲆ.ΔⲆᐃ;
            c = ΔⲆ[1066];
            Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        mo.restore();
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle + a + b);
        mo.translate(100, 0);
        mo.rotate(a);
        c = this.info === 0 ? ΔⲆ[1063][mx.time] : ΔⲆ[1062][mx.time];
        ⵠⲆⲆ = this.ⲆᐃⵠΔⵠΔᐃ.ΔⲆᐃ * -c.width;
        ᐃⲆᐃ = this.ⲆᐃⵠΔⵠΔᐃ.ΔⲆᐃ * -c.height;
        Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        if (this.action & 2) {
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            c = ΔⲆ[1058];
            Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        if (this.action & 4) {
            mo.globalAlpha = 0.6 - this.ⲆΔΔΔⲆ.ΔⲆᐃ;
            c = ΔⲆ[1067];
            Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        mo.restore();
    }
    function wv() {
        if (this.info !== 10) {
            mo.save();
            mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
            mo.rotate(this.angle);
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
                if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == ek) {
                    this.ⲆΔᐃⲆ.ᐃⵠⲆ = zj;
                }
                var b = tx * (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * 600 * yo;
                var c = b * Math.sin(this.ⲆΔᐃⲆ.angle - this.angle);
                var d = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            if (this.info & 16) {
                var e = ΔⲆ[623][mx.time];
            } else {
                e = ΔⲆ[287][mx.time];
            }
            Cp(mo, e, -e.width / 2 + c, -e.width / 2 + d);
            mo.restore();
            for (var f = this.info & 15, g = 0; g < f; g++) {
                this.ⵠᐃⵠⲆ[g].Δⵠᐃⵠ(294);
            }
        }
    }
    function xv() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && gj == this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = false;
            }
            var b = tx * (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * 600 * yo;
            var c = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * b;
            var d = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
            e = ΔⲆ[716][mx.time];
            Cp(mo, e, -e.width / 2 + c, -e.height / 2 + d);
            this.up.ᐃⵠⲆ();
            var e = ΔⲆ[720][mx.time];
            var f = this.up.ΔⲆᐃ * -e.width;
            var g = -e.height * this.up.ΔⲆᐃ;
            Cp(mo, e, -f / 2 + yo * 1, -g / 2 + yo * 3, f, g);
        } else {
            e = ΔⲆ[144][mx.time];
            Cp(mo, e, -e.width / 2 + c, -e.height / 2 + d);
        }
        mo.restore();
    }
    function yv() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == Sg) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = false;
            }
            var b = yo * (tx * (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * 600);
            var c = b * Math.sin(this.ⲆΔᐃⲆ.angle - this.angle);
            var d = b * Math.cos(this.ⲆΔᐃⲆ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            mo.rotate(this.angle);
            this.ᐃΔᐃΔ.ᐃⵠⲆ();
            if (this.info & 16) {
                var f = ΔⲆ[849][mx.time];
            } else {
                f = ΔⲆ[193][mx.time];
            }
            var g = -f.width * this.ᐃΔᐃΔ.ΔⲆᐃ;
            var a = -f.height * this.ᐃΔᐃΔ.ΔⲆᐃ;
            Cp(mo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ΔⲆ[869][mx.time];
            } else {
                f = ΔⲆ[194][mx.time];
            }
            mo.translate(0, f.height / 2);
            Cp(mo, f, c - f.width / 2, -f.height + d);
        }
        mo.restore();
    }
    function zv() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        var a = Z.ᐃⵠᐃᐃ(this, this.r);
        this.scale = a > 350 ? Math.min(this.scale + tx / 2, 1.8) : Math.max(this.scale - tx, 1);
        this.ⲆⵠⲆᐃ.ᐃⵠⲆ();
        this.rotate.ᐃⵠⲆ();
        this.ⵠᐃᐃⲆ = a < 350 ? Math.max(0, this.ⵠᐃᐃⲆ - tx * 2.2) : Math.min(1, this.ⵠᐃᐃⲆ + tx * 2.2);
        b = ΔⲆ[1135][mx.time];
        ⵠⲆⲆ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -b.width * this.scale;
        ᐃⲆᐃ = this.scale * (this.ⲆⵠⲆᐃ.ΔⲆᐃ * -b.height);
        mo.globalAlpha = 1 - this.ⵠᐃᐃⲆ;
        Cp(mo, b, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        b = ΔⲆ[1119][mx.time];
        ⵠⲆⲆ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -b.width * this.scale;
        ᐃⲆᐃ = this.scale * (-b.height * this.ⲆⵠⲆᐃ.ΔⲆᐃ);
        mo.globalAlpha = this.ⵠᐃᐃⲆ;
        Cp(mo, b, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        if (this.action & 2) {
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ() && ek == this.ⲆΔᐃⲆ.ᐃⵠΔ) {
                this.action -= 2;
            }
            mo.globalAlpha = (1 - this.ⵠᐃᐃⲆ) * (0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ);
            var b = ΔⲆ[1136];
            ⵠⲆⲆ = this.scale * (this.ⲆⵠⲆᐃ.ΔⲆᐃ * -b.width);
            ᐃⲆᐃ = this.scale * (-b.height * this.ⲆⵠⲆᐃ.ΔⲆᐃ);
            Cp(mo, b, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = (0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ) * this.ⵠᐃᐃⲆ;
            b = ΔⲆ[1128];
            ⵠⲆⲆ = this.scale * (-b.width * this.ⲆⵠⲆᐃ.ΔⲆᐃ);
            ᐃⲆᐃ = this.scale * (this.ⲆⵠⲆᐃ.ΔⲆᐃ * -b.height);
            Cp(mo, b, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = 1;
        }
        b = ΔⲆ[1122][mx.time];
        ⵠⲆⲆ = -b.width * this.ⲆⵠⲆᐃ.ΔⲆᐃ * this.scale;
        ᐃⲆᐃ = this.scale * (this.ⲆⵠⲆᐃ.ΔⲆᐃ * -b.height);
        mo.save();
        mo.translate(yo * -40, yo * 80);
        mo.rotate(this.rotate.ΔⲆᐃ);
        mo.globalAlpha = this.ⵠᐃᐃⲆ;
        Cp(mo, b, -ⵠⲆⲆ * yo / 4, -ᐃⲆᐃ * yo / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        if (this.action & 2) {
            mo.globalAlpha = this.ⵠᐃᐃⲆ * (0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ);
            b = ΔⲆ[1129];
            Cp(mo, b, -ⵠⲆⲆ * yo / 4, -ᐃⲆᐃ * yo / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = 1;
        }
        mo.restore();
        b = ΔⲆ[1125][mx.time];
        mo.save();
        mo.translate(yo * 40, yo * 80);
        mo.rotate(-this.rotate.ΔⲆᐃ);
        mo.globalAlpha = this.ⵠᐃᐃⲆ;
        Cp(mo, b, -ⵠⲆⲆ * yo / 4, yo * -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        if (this.action & 2) {
            mo.globalAlpha = (0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ) * this.ⵠᐃᐃⲆ;
            b = ΔⲆ[1130];
            Cp(mo, b, yo * -ⵠⲆⲆ / 4, -ᐃⲆᐃ * yo / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = 1;
        }
        mo.globalAlpha = 1;
        mo.restore();
        mo.restore();
    }
    function Av() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        if (Z.ᐃⵠᐃᐃ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + tx / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - tx, 1);
        }
        this.ⲆⵠⲆᐃ.ᐃⵠⲆ();
        this.rotate.ᐃⵠⲆ();
        a = ΔⲆ[449][mx.time];
        ⵠⲆⲆ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -a.width * this.scale;
        ᐃⲆᐃ = this.scale * (this.ⲆⵠⲆᐃ.ΔⲆᐃ * -a.height);
        Cp(mo, a, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        if (this.action & 2) {
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠΔ == mh) {
                this.action -= 2;
            }
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            var a = ΔⲆ[463];
            Cp(mo, a, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        a = ΔⲆ[451][mx.time];
        ⵠⲆⲆ = this.scale * (-a.width * this.ⲆⵠⲆᐃ.ΔⲆᐃ);
        ᐃⲆᐃ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -a.height * this.scale;
        mo.save();
        mo.translate(yo * -30, yo * 70);
        mo.rotate(this.rotate.ΔⲆᐃ);
        Cp(mo, a, yo * -10, yo * -40, ⵠⲆⲆ, ᐃⲆᐃ);
        if (this.action & 2) {
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            a = ΔⲆ[466];
            Cp(mo, a, yo * -10, yo * -40, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        mo.restore();
        a = ΔⲆ[452][mx.time];
        mo.save();
        mo.translate(yo * 30, yo * 70);
        mo.rotate(-this.rotate.ΔⲆᐃ);
        Cp(mo, a, yo * 10 - ⵠⲆⲆ, yo * -40, ⵠⲆⲆ, ᐃⲆᐃ);
        if (this.action & 2) {
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            a = ΔⲆ[467];
            Cp(mo, a, yo * 10 - ⵠⲆⲆ, yo * -40, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        mo.restore();
        mo.restore();
    }
    function Bv(a, b, c) {
        if (a >= 0) {
            ᐃⲆ = ΔⲆ[a][mx.time];
            switch (a) {
                case 71:
                case 72:
                case 73:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - (0 + b) * yo, -ᐃⲆ.height / 4 + (c + 35) * yo);
                    break;
                case 74:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - yo * (1 + b), -ᐃⲆ.height / 4 + (c + 45) * yo);
                    break;
                case 75:
                case 76:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - yo * (1 + b), -ᐃⲆ.height / 4 + yo * (c + 40));
            }
        }
    }
    function Cv() {
        if ((this.info & 1) === 1) {
            this.ⵠⲆⲆⲆᐃ = Math.min(this.ⵠⲆⲆⲆᐃ + tx, 2.2);
        } else {
            this.ⵠⲆⲆⲆᐃ = Math.max(this.ⵠⲆⲆⲆᐃ - tx, 0);
            this.ⲆⲆᐃⵠⵠᐃⲆ += tx;
            if (this.ⲆⲆᐃⵠⵠᐃⲆ > 0.1) {
                this.ⲆⲆᐃⵠⵠᐃⲆ = 0;
                var a = {
                    x: this.x + Math.random() * 60 - 30,
                    y: this.y + Math.random() * 60 - 30,
                    a: 0,
                    r: Math.random() * 30 + 30
                };
                this.ᐃΔᐃΔ.push(a);
            }
        }
        for (var b = 0; b < this.ᐃΔᐃΔ.length; b++) {
            a = this.ᐃΔᐃΔ[b];
            mo.save();
            mo.translate(nx.ᐃΔΔ.x + a.x, nx.ᐃΔΔ.y + a.y);
            a.a = Math.min(1, 0 + tx / 2);
            var c = 0;
            if (c < 0.2) {
                c *= 5;
            } else {
                c = c > 0.8 ? (1 - c) * 5 : 1;
            }
            mo.globalAlpha = c * 0.8;
            id(mo, 0, 0, a.r);
            Xb(mo, _r.ΔⲆⵠᐃⵠΔᐃ[mx.time]);
            mo.restore();
            if (0 === 1) {
                this.ᐃΔᐃΔ.splice(b, 1);
                b--;
            }
        }
    }
    function Dv() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == 0) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = false;
            }
            var b = (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600 * yo;
            var c = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * b;
            var d = b * Math.cos(this.ⲆΔᐃⲆ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            mo.rotate(this.angle);
            this.ᐃΔᐃΔ.ᐃⵠⲆ();
            if (this.info & 16) {
                var f = ΔⲆ[985][mx.time];
            } else {
                f = ΔⲆ[210][mx.time];
            }
            var g = -f.width * this.ᐃΔᐃΔ.ΔⲆᐃ;
            var a = -f.height * this.ᐃΔᐃΔ.ΔⲆᐃ;
            Cp(mo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ΔⲆ[986][mx.time];
            } else {
                f = ΔⲆ[211][mx.time];
            }
            mo.translate(0, f.height / 2);
            Cp(mo, f, c - f.width / 2, -f.height + d);
        }
        mo.restore();
    }
    function Ev() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == 0) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = false;
            }
            var a = tx * (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * 600 * yo;
            var b = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * a;
            var c = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        if (this.info === 0) {
            ᐃⲆ = ΔⲆ[183][mx.time];
        } else {
            ᐃⲆ = ΔⲆ[802][mx.time][this.info - 1];
        }
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2 + b, -ᐃⲆ.height / 2 + c);
        mo.restore();
    }
    function Fv() {
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == Bl) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = vn;
            }
            var a = tx * (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * 600 * yo;
            var b = a * Math.sin(this.ⲆΔᐃⲆ.angle - this.angle);
            var c = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
        mo.rotate(this.angle);
        ᐃⲆ = ΔⲆ[135][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        mo.restore();
    }
    function Gv() {
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == 0) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = Sg;
            }
            var a = (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600 * yo;
            var b = a * Math.sin(this.ⲆΔᐃⲆ.angle - this.angle);
            var c = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        mo.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        mo.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
        mo.rotate(this.angle);
        ᐃⲆ = ΔⲆ[157][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + tx * 3) % (Math.PI * 2);
        }
        mo.rotate(this.rotate);
        ᐃⲆ = ΔⲆ[1214][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        mo.restore();
    }
    function Hv() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ⵠⵠⲆᐃᐃ.length == 0 || _r.ⲆⵠⲆᐃⲆⵠⵠ >= this.ⵠⵠⲆᐃᐃ[this.ⵠⵠⲆᐃᐃ.length - 1])) {
            this.ⵠⵠⲆᐃᐃ.push(_r.ᐃΔⲆᐃⲆᐃⵠ);
        }
        for (var a = 0; a < this.ⵠⵠⲆᐃᐃ.length; a++) {
            this.ⵠⵠⲆᐃᐃ[a] = Math.max(0, this.ⵠⵠⲆᐃᐃ[a] - _r.ᐃΔᐃⲆⵠⲆⵠ * tx);
            mo.globalAlpha = this.ⵠⵠⲆᐃᐃ[a] / 1.3;
            var b = (1 - this.ⵠⵠⲆᐃᐃ[a]) * 40;
            var c = (1 - this.ⵠⵠⲆᐃᐃ[a]) * 35 + 10;
            id(mo, yo * -68 + Math.sin(-this.angle - Math.PI / 2) * b, yo * -20 + b * Math.cos(-this.angle - Math.PI / 2), c);
            Xb(mo, "#333333");
        }
        mo.globalAlpha = 1;
        if (this.ⵠⵠⲆᐃᐃ.length > 0 && this.ⵠⵠⲆᐃᐃ[0] === 0) {
            this.ⵠⵠⲆᐃᐃ.shift();
        }
        mo.restore();
    }
    function Iv(a, b) {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        this.ⲆⵠⲆᐃ.ᐃⵠⲆ();
        c = ΔⲆ[a][mx.time];
        ⵠⲆⲆ = -c.width * this.ⲆⵠⲆᐃ.ΔⲆᐃ;
        ᐃⲆᐃ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -c.height;
        Cp(mo, c, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
        if (this.action & 2) {
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠΔ == ek) {
                this.action -= 2;
            }
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            var c = ΔⲆ[b];
            Cp(mo, c, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
            mo.globalAlpha = 1;
        }
        mo.restore();
    }
    function Jv(a, b, c) {
        if (a >= 0) {
            ᐃⲆ = ΔⲆ[a][mx.time];
            switch (a) {
                case 1:
                case 3:
                case 4:
                case 8:
                case 31:
                case 32:
                    ww(a, ᐃⲆ, -ᐃⲆ.width / 2 - (45 + b) * yo, -ᐃⲆ.height / 2 + yo * (c + 22));
                    break;
                case 94:
                case 95:
                case 96:
                case 97:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - (52 + b) * yo, -ᐃⲆ.height / 4 + yo * (c + 20));
                    break;
                case 98:
                case 99:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - (57 + b) * yo, -ᐃⲆ.height / 4 + yo * (c + 20));
                    break;
                case 57:
                case 0:
                case 5:
                case 6:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - yo * (47 + b), -ᐃⲆ.height / 4 + yo * (c + 45));
                    break;
                case 30:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - (52 + b) * yo, -ᐃⲆ.height / 4 + (c + 45) * yo);
                    break;
                case 19:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - yo * (47 + b), -ᐃⲆ.height / 4 + yo * (c + 44));
                    break;
                case 9:
                    ww(a, ᐃⲆ, -ᐃⲆ.width / 2 - yo * (47 + b), -ᐃⲆ.height / 2 + yo * (c + 44));
                    break;
                case 62:
                    ww(a, ᐃⲆ, -ᐃⲆ.width / 2 - (40 + b) * yo, -ᐃⲆ.height / 2 + (c + 65) * yo);
                    break;
                case 12:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - (37 + b) * yo, -ᐃⲆ.height / 4 + yo * (c + 85));
                    break;
                case 34:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - (37 + b) * yo, -ᐃⲆ.height / 4 + (c + 85) * yo);
                    break;
                case 54:
                case 53:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - yo * (26 + b), -ᐃⲆ.height / 4 + (c + 77) * yo);
                    break;
                case 17:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - yo * (37 + b), -ᐃⲆ.height / 4 + (c + 85) * yo);
                    break;
                case 63:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - (47 + b) * yo, -ᐃⲆ.height / 4 + (c + 44) * yo);
                    break;
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - yo * (37 + b), -ᐃⲆ.height / 4 + yo * (c + 30));
                    break;
                case 56:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - (47 + b) * yo, -ᐃⲆ.height / 4 + (c + 35) * yo);
                    break;
                case 92:
                case 93:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - yo * (47 + b), -ᐃⲆ.height / 4 + yo * (c + 40));
                    break;
                case 89:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - yo * (47 + b), -ᐃⲆ.height / 4 + yo * (c + 34));
                    break;
                case 13:
                case 14:
                case 15:
                case 33:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - yo * (37 + b), -ᐃⲆ.height / 4 + yo * (c + 90));
                    break;
                case 18:
                    sw(a, ᐃⲆ, -ᐃⲆ.width / 4 - yo * (40 + b), -ᐃⲆ.height / 4 + (c + 85) * yo);
                    break;
                case 16:
                    ww(a, ᐃⲆ, -ᐃⲆ.width / 2 - (39 + b) * yo, -ᐃⲆ.height / 2 + yo * (c + 90));
                    break;
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 45:
                    ww(a, ᐃⲆ, -ᐃⲆ.width / 2 - (46 + b) * yo, -ᐃⲆ.height / 2 + (c + 35) * yo);
                    break;
                case 49:
                    ww(a, ᐃⲆ, -ᐃⲆ.width / 2 - yo * (47 + b), -ᐃⲆ.height / 2 + yo * (c + 54));
                    break;
                case 46:
                case 50:
                case 51:
                case 52:
                    ww(a, ᐃⲆ, -ᐃⲆ.width / 2 - yo * (46 + b), -ᐃⲆ.height / 2 + yo * (c + 35));
                    break;
                case 55:
                    ww(a, ᐃⲆ, -ᐃⲆ.width / 2 - (47 + b) * yo, -ᐃⲆ.height / 2 + yo * (c + 20));
            }
        }
    }
    function Kv() {
        if (this.info >= 10) {
            mo.save();
            mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
            mo.rotate(this.angle);
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
                if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == 0) {
                    this.ⲆΔᐃⲆ.ᐃⵠⲆ = false;
                }
                var b = tx * (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * 600 * yo;
                var c = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * b;
                var d = b * Math.cos(this.ⲆΔᐃⲆ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            this.ᐃΔᐃΔ.ᐃⵠⲆ();
            var e = ΔⲆ[115][mx.time];
            var f = this.ᐃΔᐃΔ.ΔⲆᐃ * -e.width;
            var g = -e.height * this.ᐃΔᐃΔ.ΔⲆᐃ;
            Cp(mo, e, -f / 2 + c, -g / 2 + d, f, g);
            mo.restore();
        }
    }
    function Lv(a) {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        this.ⲆⵠⲆᐃ.ᐃⵠⲆ();
        ᐃⲆ = ΔⲆ[a][mx.time];
        ⵠⲆⲆ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -ᐃⲆ.width;
        ᐃⲆᐃ = this.ⲆⵠⲆᐃ.ΔⲆᐃ * -ᐃⲆ.height;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        mo.restore();
    }
    function Mv() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        this.ΔΔⵠᐃⲆ.ᐃⵠⲆ();
        ᐃⲆ = ΔⲆ[526][mx.time];
        ⵠⲆⲆ = -ᐃⲆ.width * this.ΔΔⵠᐃⲆ.ΔⲆᐃ;
        ᐃⲆᐃ = -ᐃⲆ.height * this.ΔΔⵠᐃⲆ.ΔⲆᐃ;
        Cp(mo, ᐃⲆ, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        mo.restore();
    }
    function Nv(f, e, i, j, k, n, a, o = 0, p) {
        for (var h = f; h <= e; h++) {
            for (var q = i; q <= j; q++) {
                var r = kx.ⲆⲆⲆⲆ[h][q];
                if (r !== undefined && r[n] !== undefined) {
                    var s = r[n];
                    var t = ΔⲆ[k][mx.time][s.ⵠⲆⲆΔⲆΔⵠ];
                    Cp(mo, t, nx.ᐃΔΔ.x + s.x - t.width / (ⲆⲆⵠⵠΔ * 4), nx.ᐃΔΔ.y + s.y - t.height / (ⲆⲆⵠⵠΔ * 4), t.width / (ⲆⲆⵠⵠΔ * 2), t.height / (ⲆⲆⵠⵠΔ * 2));
                    if (jx.ⵠᐃᐃᐃⵠ) {
                        var w = 2147483648;
                        var x = ((h * 1000 + q) * 1103515245 + 12345) % w / w;
                        if (x < 0.2) {
                            x = Math.floor(ΔⲆ[1025][mx.time][s.ⵠⲆⲆΔⲆΔⵠ].length * (x * 5));
                            t = ΔⲆ[1025][mx.time][s.ⵠⲆⲆΔⲆΔⵠ][x];
                            Cp(mo, t, nx.ᐃΔΔ.x + s.x - t.width / (ⲆⲆⵠⵠΔ * 4), nx.ᐃΔΔ.y + s.y - t.height / (ⲆⲆⵠⵠΔ * 4), t.width / (ⲆⲆⵠⵠΔ * 2), t.height / (ⲆⲆⵠⵠΔ * 2));
                        } else if (s.ⵠᐃⲆΔᐃⵠⲆ !== 0) {
                            t = ΔⲆ[1026][mx.time];
                            var y = (Ju + h % 2 * 30) % 60;
                            mo.globalAlpha = y < 30 ? y / 30 : 1 - (y - 30) / 30;
                            Cp(mo, t, nx.ᐃΔΔ.x + s.x - t.width / (ⲆⲆⵠⵠΔ * 4), nx.ᐃΔΔ.y + s.y - t.height / (ⲆⲆⵠⵠΔ * 4) - 30 + y, t.width / (ⲆⲆⵠⵠΔ * 2), t.height / (ⲆⲆⵠⵠΔ * 2));
                            mo.globalAlpha = 1;
                        }
                    }
                }
            }
        }
    }
    function Ov(b) {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        this.ᐃΔᐃΔ.ᐃⵠⲆ();
        mo.globalAlpha = 0.3;
        var c = ΔⲆ[282][mx.time];
        var d = this.ᐃΔᐃΔ.ΔⲆᐃ * -c.width;
        var e = -c.height * this.ᐃΔᐃΔ.ΔⲆᐃ;
        Cp(mo, c, -d / 2, -e / 2, d, e);
        mo.globalAlpha = 1;
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == 0) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = ca;
            }
            var f = yo * ((1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600);
            var g = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * f;
            var h = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * f;
        } else {
            g = 0;
            h = 0;
        }
        c = ΔⲆ[b][mx.time];
        Cp(mo, c, -c.width / 2 + g, -c.height / 2 + h);
        mo.restore();
    }
    function Pv(a, b) {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        mo.rotate(this.angle);
        c = ΔⲆ[a][mx.time];
        ⵠⲆⲆ = -c.width;
        ᐃⲆᐃ = -c.height;
        Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
        if (this.action & 2) {
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠΔ == 0) {
                this.action -= 2;
            }
            mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
            var c = ΔⲆ[b];
            Cp(mo, c, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            mo.globalAlpha = 1;
        }
        mo.restore();
    }
    function Qv() {
        if (this.info >= 10) {
            mo.save();
            mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
            mo.rotate(this.angle);
            if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
                if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == zj) {
                    this.ⲆΔᐃⲆ.ᐃⵠⲆ = kr;
                }
                var b = (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600 * yo;
                var c = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * b;
                var d = b * Math.cos(this.ⲆΔᐃⲆ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            this.ᐃΔᐃΔ.ᐃⵠⲆ();
            var e = ΔⲆ[206][mx.time];
            var f = -e.width * this.ᐃΔᐃΔ.ΔⲆᐃ;
            var g = -e.height * this.ᐃΔᐃΔ.ΔⲆᐃ;
            Cp(mo, e, -f / 2 + c, -g / 2 + d, f, g);
            mo.restore();
        }
    }
    function Rv() {
        if (this.ⲆΔᐃⲆ.ᐃⵠⲆ) {
            if (this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠⲆ() && this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ᐃⵠΔ == ek) {
                this.ⲆΔᐃⲆ.ᐃⵠⲆ = ie;
            }
            var a = (1 - this.ⲆΔᐃⲆ.ᐃⵠᐃⲆ.ΔⲆᐃ) * tx * 600 * yo;
            var b = Math.sin(this.ⲆΔᐃⲆ.angle - this.angle) * a;
            var c = Math.cos(this.ⲆΔᐃⲆ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        mo.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        mo.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
        mo.rotate(this.angle);
        ᐃⲆ = ΔⲆ[154][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + tx * 3) % (Math.PI * 2);
        }
        mo.rotate(this.rotate);
        ᐃⲆ = ΔⲆ[1202][mx.time];
        Cp(mo, ᐃⲆ, -ᐃⲆ.width / 2, -ᐃⲆ.height / 2);
        mo.restore();
    }
    function Sv(a) {
        if (a > 0) {
            var b = ΔⲆ[a][mx.time];
            switch (a) {
                case 58:
                    ww(a, b, -b.width / 2 + yo * 2, -b.height / 2 - yo * 5);
                    break;
                case 10:
                    ww(a, b, -b.width / 2, -b.height / 2 - yo * 18);
                    break;
                case 11:
                    ww(a, b, -b.width / 2, -b.height / 2 - yo * 10);
                    break;
                case 23:
                    ww(a, b, -b.width / 2, -b.height / 2 - yo * 19);
                    break;
                case 24:
                    sw(a, b, -b.width / 4, -b.height / 4 - yo * 20);
                    break;
                case 25:
                    ww(a, b, -b.width / 2 - yo * 1, -b.height / 2 - yo * 23);
                    break;
                case 26:
                    ww(a, b, -b.width / 2, -b.height / 2 - yo * 5);
                    break;
                case 27:
                    ww(a, b, -b.width / 2, -b.height / 2 - yo * 2);
                    break;
                case 43:
                    ww(a, b, -b.width / 2 + yo * 1.5, -b.height / 2 - yo * 1);
                    break;
                case 44:
                case 20:
                case 21:
                case 22:
                case 80:
                case 81:
                case 82:
                case 60:
                case 90:
                case 88:
                case 87:
                    sw(a, b, -b.width / 4, -b.height / 4 + yo * 2);
                    break;
                case 41:
                case 42:
                    ww(a, b, -b.width / 2 - yo * 5, -b.height / 2 - yo * 2);
                    break;
                case 40:
                    ww(a, b, -b.width / 2, -b.height / 2 - yo * 2);
                    break;
                case 85:
                    ww(a, b, -b.width / 2, -b.height / 2 - yo * 2);
                    break;
                case 48:
                    ww(a, b, -b.width / 2, -b.height / 2 - yo * 2);
                    break;
                case 47:
                    ww(a, b, -b.width / 2 + yo * 2, -b.height / 2);
                    break;
                case 59:
                    ww(a, b, -b.width / 2, -b.height / 2 - yo * 5);
                    break;
                case 77:
                case 78:
                case 79:
                    ww(a, b, -b.width / 2 - yo * 1, -b.height / 2);
                    break;
                case 83:
                    ww(a, b, -b.width / 2, -b.height / 2 + yo * 2);
                    break;
                case 84:
                case 86:
                    ww(a, b, -b.width / 2, -b.height / 2 + yo * 8);
                    break;
                case 61:
                    ww(a, b, -b.width / 2, -b.height / 2 - yo * 4);
            }
        }
    }
    function Tv() {
        if (!this.ⲆᐃⵠⲆᐃ && this.ΔᐃΔⲆᐃ !== 0) {
            if (this.r.x != this.x || this.r.y != this.y) {
                var a = (Z.ⲆⵠⲆΔΔⵠⲆ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
                this.ᐃⵠᐃⵠⲆ = Z.ⵠΔⵠⲆⵠⲆᐃ(a, this.ᐃⵠᐃⵠⲆ);
                this.ᐃⵠᐃⵠⲆ = Z.ΔⵠⵠΔⵠⲆⲆ(this.ᐃⵠᐃⵠⲆ, a, 0.018);
            }
            mo.save();
            mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
            mo.rotate(this.ᐃⵠᐃⵠⲆ);
            if (this.ΔᐃΔⲆᐃ === 223) {
                if (this.ΔⵠⲆⲆⲆ > 50 || this.ⲆΔⲆΔᐃ > 0) {
                    if (this.ΔⵠⲆⲆⲆ > 50) {
                        this.ⲆΔⲆΔᐃ = Math.min(1, this.ⲆΔⲆΔᐃ + tx);
                    } else {
                        this.ⲆΔⲆΔᐃ = Math.max(0, this.ⲆΔⲆΔᐃ - tx);
                    }
                    mo.globalAlpha = this.ⲆΔⲆΔᐃ;
                    var b = ΔⲆ[225][mx.time];
                    sw(225, b, -b.width / 4, -b.height / 4);
                    mo.globalAlpha = 1;
                }
                b = ΔⲆ[223][mx.time];
                sw(223, b, -b.width / 4, -b.height / 4);
            } else if (this.ΔᐃΔⲆᐃ === 229) {
                this.ᐃⲆᐃΔᐃ = Z.ΔⵠⵠΔⵠⲆⲆ(this.ᐃⲆᐃΔᐃ, this.ΔⵠⲆⲆⲆ, 0.018);
                this.ⵠΔⲆⵠⲆΔΔ.ᐃⵠⲆ();
                if (this.ΔⵠⲆⲆⲆ > 85) {
                    this.ⲆΔⲆΔᐃ = Math.min(1, this.ⲆΔⲆΔᐃ + tx / 4);
                } else {
                    this.ⲆΔⲆΔᐃ = Math.max(0.1, this.ⲆΔⲆΔᐃ - tx);
                }
                b = ΔⲆ[1100][mx.time];
                sw(1100, b, -b.width / 4, -b.height / 4);
                b = ΔⲆ[1103][mx.time];
                ⵠⲆⲆ = -b.width;
                ᐃⲆᐃ = -b.height;
                mo.save();
                mo.translate(yo * -20, yo * -20);
                mo.rotate(this.ⵠΔⲆⵠⲆΔΔ.ΔⲆᐃ * this.ⲆΔⲆΔᐃ);
                Cp(mo, b, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
                mo.restore();
                b = ΔⲆ[1106][mx.time];
                mo.save();
                mo.translate(yo * 20, yo * -20);
                mo.rotate(this.ⲆΔⲆΔᐃ * -this.ⵠΔⲆⵠⲆΔΔ.ΔⲆᐃ);
                Cp(mo, b, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
                mo.restore();
            } else if (this.ΔᐃΔⲆᐃ === 228) {
                this.ᐃⲆᐃΔᐃ = Z.ΔⵠⵠΔⵠⲆⲆ(this.ᐃⲆᐃΔᐃ, this.ΔⵠⲆⲆⲆ, 0.018);
                this.ⵠΔⲆⵠⲆΔΔ.ᐃⵠⲆ();
                if (this.ΔⵠⲆⲆⲆ > 85) {
                    this.ⲆΔⲆΔᐃ = Math.min(1, this.ⲆΔⲆΔᐃ + tx / 4);
                } else {
                    this.ⲆΔⲆΔᐃ = Math.max(0.1, this.ⲆΔⲆΔᐃ - tx);
                }
                b = ΔⲆ[1085][mx.time];
                sw(1085, b, -b.width / 4, -b.height / 4);
                b = ΔⲆ[1088][mx.time];
                ⵠⲆⲆ = -b.width;
                ᐃⲆᐃ = -b.height;
                mo.save();
                mo.translate(yo * -40, yo * -45);
                mo.rotate(this.ⲆΔⲆΔᐃ * this.ⵠΔⲆⵠⲆΔΔ.ΔⲆᐃ);
                Cp(mo, b, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
                mo.restore();
                b = ΔⲆ[1091][mx.time];
                mo.save();
                mo.translate(yo * 40, yo * -45);
                mo.rotate(this.ⲆΔⲆΔᐃ * -this.ⵠΔⲆⵠⲆΔΔ.ΔⲆᐃ);
                Cp(mo, b, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
                mo.restore();
            } else if (this.ΔᐃΔⲆᐃ === 227) {
                this.ᐃⲆᐃΔᐃ = Z.ΔⵠⵠΔⵠⲆⲆ(this.ᐃⲆᐃΔᐃ, this.ΔⵠⲆⲆⲆ, 0.018);
                this.ⵠΔⲆⵠⲆΔΔ.ᐃⵠⲆ();
                if (this.ΔⵠⲆⲆⲆ > 85) {
                    this.ⲆΔⲆΔᐃ = Math.min(1, this.ⲆΔⲆΔᐃ + tx / 4);
                } else {
                    this.ⲆΔⲆΔᐃ = Math.max(0.1, this.ⲆΔⲆΔᐃ - tx);
                }
                b = ΔⲆ[1070][mx.time];
                sw(1070, b, -b.width / 4, -b.height / 4);
                b = ΔⲆ[1073][mx.time];
                ⵠⲆⲆ = -b.width;
                ᐃⲆᐃ = -b.height;
                mo.save();
                mo.translate(yo * -40, yo * -45);
                mo.rotate(this.ⲆΔⲆΔᐃ * this.ⵠΔⲆⵠⲆΔΔ.ΔⲆᐃ);
                Cp(mo, b, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
                mo.restore();
                b = ΔⲆ[1076][mx.time];
                mo.save();
                mo.translate(yo * 40, yo * -45);
                mo.rotate(this.ⲆΔⲆΔᐃ * -this.ⵠΔⲆⵠⲆΔΔ.ΔⲆᐃ);
                Cp(mo, b, -ⵠⲆⲆ / 4, -ᐃⲆᐃ / 4, ⵠⲆⲆ / 2, ᐃⲆᐃ / 2);
                mo.restore();
            } else if (this.ΔᐃΔⲆᐃ === 91) {
                this.ᐃⲆᐃΔᐃ = Z.ΔⵠⵠΔⵠⲆⲆ(this.ᐃⲆᐃΔᐃ, this.ΔⵠⲆⲆⲆ, 0.018);
                b = ΔⲆ[91][mx.time];
                sw(91, b, -b.width / 4, -b.height / 4);
            } else if (this.ΔᐃΔⲆᐃ === 230) {
                this.ᐃⲆᐃΔᐃ = Z.ΔⵠⵠΔⵠⲆⲆ(this.ᐃⲆᐃΔᐃ, this.ΔⵠⲆⲆⲆ, 0.018);
                b = ΔⲆ[236][mx.time];
                sw(236, b, -b.width / 4, -b.height / 4);
            } else if (this.ΔᐃΔⲆᐃ === 224) {
                b = ΔⲆ[224][mx.time];
                sw(224, b, -b.width / 4, -b.height / 4);
            } else if (this.ΔᐃΔⲆᐃ === 239) {
                b = ΔⲆ[1221][mx.time];
                if (this.ΔⵠⲆⲆⲆ > 85) {
                    this.ⲆΔⲆΔᐃ = Math.min(1, this.ⲆΔⲆΔᐃ + tx / 4);
                } else {
                    this.ⲆΔⲆΔᐃ = Math.max(0, this.ⲆΔⲆΔᐃ - tx);
                }
                this.ΔⲆⵠᐃᐃ += tx * 60;
                if (this.ΔⲆⵠᐃᐃ > 60) {
                    this.ΔⲆⵠᐃᐃ -= 60;
                }
                var c = this.ⲆΔⲆΔᐃ * ((this.ΔⲆⵠᐃᐃ < 30 ? this.ΔⲆⵠᐃᐃ / 30 : 1 - (this.ΔⲆⵠᐃᐃ - 30) / 30) * 12 - 6);
                sw(1221, b, -b.width / 4, -b.height / 4 + c);
            } else if (this.ΔᐃΔⲆᐃ === 225) {
                b = ΔⲆ[1043][mx.time];
                if (this.ΔⵠⲆⲆⲆ > 85) {
                    this.ⲆΔⲆΔᐃ = Math.min(1, this.ⲆΔⲆΔᐃ + tx / 4);
                } else {
                    this.ⲆΔⲆΔᐃ = Math.max(0, this.ⲆΔⲆΔᐃ - tx);
                }
                this.ΔⲆⵠᐃᐃ += tx * 60;
                if (this.ΔⲆⵠᐃᐃ > 60) {
                    this.ΔⲆⵠᐃᐃ -= 60;
                }
                c = this.ⲆΔⲆΔᐃ * (-6 + (this.ΔⲆⵠᐃᐃ < 30 ? this.ΔⲆⵠᐃᐃ / 30 : 1 - (this.ΔⲆⵠᐃᐃ - 30) / 30) * 12);
                sw(1043, b, -b.width / 4, -b.height / 4 + c);
            } else if (this.ΔᐃΔⲆᐃ === 226) {
                var d = Math.PI / 2;
                var e = Math.PI / 4;
                b = ΔⲆ[1055][mx.time];
                if (this.ΔⵠⲆⲆⲆ > 85) {
                    this.ⲆΔⲆΔᐃ = Math.min(1, this.ⲆΔⲆΔᐃ + tx / 4);
                } else {
                    this.ⲆΔⲆΔᐃ = Math.max(0, this.ⲆΔⲆΔᐃ - tx);
                }
                this.ΔⲆⵠᐃᐃ += tx * 60;
                if (this.ΔⲆⵠᐃᐃ > 60) {
                    this.ΔⲆⵠᐃᐃ -= 60;
                }
                c = this.ⲆΔⲆΔᐃ * (-6 + (this.ΔⲆⵠᐃᐃ < 30 ? this.ΔⲆⵠᐃᐃ / 30 : 1 - (this.ΔⲆⵠᐃᐃ - 30) / 30) * 12);
                sw(1055, b, -b.width / 4 + c, -b.height / 4);
                mo.restore();
                mo.save();
                mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
                mo.rotate(Math.PI + this.ᐃⵠᐃⵠⲆ + e);
                mo.translate(120, c);
                mo.rotate(d);
                b = ΔⲆ[1060][mx.time];
                ⵠⲆⲆ = -b.width;
                ᐃⲆᐃ = -b.height;
                Cp(mo, b, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
                mo.restore();
                mo.save();
                mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
                mo.rotate(Math.PI + this.ᐃⵠᐃⵠⲆ + d + e);
                mo.translate(120, c);
                mo.rotate(d);
                b = ΔⲆ[1063][mx.time];
                ⵠⲆⲆ = -b.width;
                ᐃⲆᐃ = -b.height;
                Cp(mo, b, -ⵠⲆⲆ / 2, -ᐃⲆᐃ / 2, ⵠⲆⲆ, ᐃⲆᐃ);
            }
            mo.restore();
        }
    }
    function Vv() {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        if (this.text.length > 0) {
            for (var a = 0; a < this.text.length && a < 2; a++) {
                if (!this.label[a]) {
                    this.label[a] = rd(yo, this.text[a]);
                    this.ⵠΔᐃⵠⲆΔᐃ[a] = 0;
                    this.ᐃⲆΔⲆⲆᐃⲆ[a] = 0;
                }
                if (a === 1) {
                    this.ᐃⲆΔⲆⲆᐃⲆ[0] = Z.ᐃⵠΔᐃΔ(this.ΔⲆΔΔᐃⲆΔ) * 30;
                }
            }
            this.ⵠΔᐃⵠⲆΔᐃ[0] += tx;
            if (this.text.length > 1) {
                this.ΔⲆΔΔᐃⲆΔ = Math.min(this.ΔⲆΔΔᐃⲆΔ + tx, 1);
                if (this.ⵠΔᐃⵠⲆΔᐃ[0] > 1 && this.ΔⲆΔΔᐃⲆΔ > 0.5) {
                    this.ⵠΔᐃⵠⲆΔᐃ[1] += tx;
                }
            }
            for (a = 0; this.text.length > a && a < 2; a++) {
                var b = this.ⵠΔᐃⵠⲆΔᐃ[a];
                if (b > 0) {
                    mo.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
                    Cp(mo, this.label[a], -this.label[a].width / 2, -this.ᐃⲆΔⲆⲆᐃⲆ[a] + -this.label[a].height / 2 - yo * 110);
                }
            }
            if (this.ⵠΔᐃⵠⲆΔᐃ[0] > 4) {
                this.ⵠΔᐃⵠⲆΔᐃ.shift();
                this.text.shift();
                this.ᐃⲆΔⲆⲆᐃⲆ.shift();
                this.label.shift();
                this.ΔⲆΔΔᐃⲆΔ = 0;
            }
        }
        mo.restore();
    }
    function Wv() {
        if (this.message !== undefined) {
            var a = nx.ΔⲆΔⲆ.Ⲇⵠᐃⵠⵠ.length > 0 ? -95 : 0;
            Cp(mo, this.message, 0, oo - this.message.height + a);
        }
    }
    function Xv(b, c, d) {
        if (c.ΔⵠᐃΔⲆⲆⵠ() !== 1) {
            return c;
        }
        var e = ⲆⵠⲆᐃᐃᐃⵠ[d][b];
        if (e === undefined) {
            var f = (e = document.createElement("canvas")).getContext("2d");
            var g = c.width;
            var a = c.height;
            e.width = g;
            e.height = a;
            f.drawImage(c, 0, 0);
            f.globalCompositeOperation = "source-in";
            f.fillStyle = ᐃᐃᐃΔⲆⲆΔⵠⲆ[d];
            f.fillRect(0, 0, g, a);
            ⲆⵠⲆᐃᐃᐃⵠ[d][b] = e;
        }
        return e;
    }
    function Yv() {
        var c = 0;
        switch (this.right) {
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
                c = 1;
        }
        if (this.ⲆᐃⵠⲆᐃ) {
            for (var f = 0; this.bubbles.length > f; f++) {
                var j = this.bubbles[f];
                if (j.Ⲇⵠⵠⵠⵠ > 0.5) {
                    var k = 1 - (j.Ⲇⵠⵠⵠⵠ - 0.5) * 2;
                } else {
                    k = j.Ⲇⵠⵠⵠⵠ * 2;
                }
                mo.globalAlpha = k;
                var m = ΔⲆ[540][mx.time][j.id];
                Cp(mo, m, nx.ᐃΔΔ.x + j.x - m.width / 2, nx.ᐃΔΔ.y + j.y - m.height / 2);
                mo.globalAlpha = 1;
            }
        } else {
            mo.save();
            mo.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
            mx.ⵠⲆΔⵠᐃⲆΔΔΔ(this);
            if (this.action & 16) {
                (function (a) {
                    if (a.right >= 0) {
                        switch (a.right) {
                            case 49:
                                mo.save();
                                var b = a.attack.ΔⲆᐃ * -3 / Math.PI;
                                if (a.attack.ᐃⵠΔ) {
                                    var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ΔⲆᐃ) / 3;
                                } else {
                                    c = a.attack.ΔⲆᐃ;
                                }
                                mo.rotate(a.angle - Math.PI / 2 + c);
                                mo.globalAlpha = b / 1.2;
                                id(mo, yo * -40, yo * 90, yo * 5);
                                Xb(mo, "#0B6A84");
                                mo.globalAlpha = b / 1.2;
                                id(mo, yo * -52, yo * 100, yo * 8);
                                Xb(mo, "#0B6A84");
                                mo.globalAlpha = b / 1.2;
                                id(mo, yo * -30, yo * 95, yo * 4);
                                Xb(mo, "#0B6A84");
                                mo.globalAlpha = 1;
                                mo.restore();
                                break;
                            case 46:
                            case 50:
                            case 51:
                            case 52:
                                if (a.ⵠΔⲆᐃᐃⲆⲆ === 1) {
                                    break;
                                }
                                if (a.ⲆⵠΔⵠΔ > 0) {
                                    var d = _r.ᐃⲆΔⵠΔⲆᐃ[mx.time];
                                } else {
                                    d = a.ᐃⲆΔⲆᐃᐃⲆ > 0 || a.ⲆᐃᐃⵠΔ > 0 ? _r.ᐃⲆⲆᐃᐃⵠⵠ[mx.time] : _r.ⲆⲆⵠⲆⲆⲆΔ[mx.time];
                                }
                                b = a.attack.ΔⲆᐃ * -3 / Math.PI;
                                c = a.attack.ᐃⵠΔ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0);
                                if (c === 0) {
                                    a.ⲆⵠΔⵠᐃⲆⲆ = a.angle;
                                }
                                mo.save();
                                mo.rotate(a.ⲆⵠΔⵠᐃⲆⲆ - Math.PI / 2);
                                mo.globalAlpha = b;
                                var e = yo * 25 + c * 25;
                                id(mo, e, yo * 80, yo * 15);
                                Xb(mo, d);
                                id(mo, -e, yo * 80, yo * 15);
                                Xb(mo, d);
                                mo.globalAlpha = 1;
                                mo.restore();
                        }
                    }
                })(this);
            }
            mo.save();
            mo.rotate(this.angle - Math.PI / 2);
            if (!(this.action & 16)) {
                if (this.action & 64 || this.ΔᐃΔⲆᐃ !== 0) {
                    this.ⵠᐃⵠⲆⲆΔⵠ.ᐃⵠⲆ();
                } else if (this.action & 32) {
                    this.ΔⵠᐃⵠΔⵠⲆ.ᐃⵠⲆ();
                }
            }
            var p;
            var q = this.ⵠᐃⵠⲆⲆΔⵠ.ΔⲆᐃ;
            var u = this.ΔⵠᐃⵠΔⵠⲆ.ΔⲆᐃ;
            if (this.ⲆⵠⲆⵠᐃ === 85) {
                m = ΔⲆ[793][mx.time];
                p = 793;
            } else if (this.ⲆⵠⲆⵠᐃ === 20) {
                m = ΔⲆ[920][mx.time];
                p = 920;
            } else if (this.ⲆⵠⲆⵠᐃ === 21) {
                m = ΔⲆ[924][mx.time];
                p = 924;
            } else if (this.ⲆⵠⲆⵠᐃ === 22) {
                m = ΔⲆ[928][mx.time];
                p = 928;
            } else if (this.ⲆᐃⲆⲆᐃΔⵠ) {
                m = ΔⲆ[822][mx.time];
                p = 822;
            } else {
                m = ΔⲆ[7][this.ᐃΔⲆΔ][mx.time];
                p = 7;
            }
            Δⵠⵠⵠ = ΔⲆ[286][mx.time];
            var w = m;
            var h = p;
            if (this.action & 16) {
                if (this.attack.ᐃⵠⲆ() && this.attack.ᐃⵠΔ == Yk) {
                    this.ΔΔΔⲆⵠ = !this.ΔΔΔⲆⵠ;
                    this.action -= 16;
                    if (this.ΔⵠᐃⲆ == nx.ΔⵠᐃⲆ) {
                        nx.control.ⵠⵠⵠⲆ = 0;
                    }
                }
                if (this.right >= 0) {
                    this.ΔΔΔⲆⵠ = oj;
                }
                var l = this.ΔΔΔⲆⵠ ? this.attack.ΔⲆᐃ : -this.attack.ΔⲆᐃ / 3;
                var x = this.ΔΔΔⲆⵠ ? this.attack.ΔⲆᐃ / 3 : -this.attack.ΔⲆᐃ;
                if (this.ⲆᐃⲆⲆᐃΔⵠ) {
                    mo.save();
                    mo.rotate(l);
                    ww(p, m, -m.width / 2 - yo * (66 + q), -m.height / 2 + (5 + u) * yo);
                    mo.restore();
                    mo.save();
                    mo.rotate(x);
                    ww(p, m, -m.width / 2 + (66 + q) * yo, -m.height / 2 + (5 + u) * yo);
                    mo.restore();
                } else if (c === 0) {
                    if (this.right === 64) {
                        l = -Z.ⵠᐃⵠⵠᐃᐃⵠ(-l);
                    }
                    mo.save();
                    mo.rotate(l);
                    ww(286, Δⵠⵠⵠ, -Δⵠⵠⵠ.width / 2 - (49 + q) * yo, -Δⵠⵠⵠ.height / 2 + yo * (15 + u));
                    if (this.right === 28) {
                        var b = ΔⲆ[this.right][this.ΔⵠΔⵠⲆ][mx.time];
                        mw(this.right, this.ΔⵠΔⵠⲆ, b, -b.width / 4 - (62 + q) * yo, -b.height / 4 + (u + 18) * yo);
                    } else {
                        Jv(this.right, q, u);
                    }
                    if (p >= 920) {
                        sw(p, m, -m.width / 4 - yo * (49 + q), -m.height / 4 + (11 + u) * yo);
                    } else if (p !== 793) {
                        mw(p, this.ᐃΔⲆΔ, m, -m.width / 4 - (49 + q) * yo, -m.height / 4 + (11 + u) * yo);
                    } else {
                        ww(p, m, -m.width / 2 - yo * (49 + q), -m.height / 2 + yo * (11 + u));
                    }
                    mo.restore();
                    mo.save();
                    mo.rotate(x);
                    ww(286, Δⵠⵠⵠ, -Δⵠⵠⵠ.width / 2 + (49 + q) * yo, -Δⵠⵠⵠ.height / 2 + (15 + u) * yo);
                    if (p >= 920) {
                        sw(p, m, -m.width / 4 + yo * (49 + q), -m.height / 4 + (11 + u) * yo);
                    } else if (p !== 793) {
                        mw(p, this.ᐃΔⲆΔ, m, -m.width / 4 + (49 + q) * yo, -m.height / 4 + (11 + u) * yo);
                    } else {
                        ww(p, m, -m.width / 2 + (49 + q) * yo, -m.height / 2 + yo * (11 + u));
                    }
                    mo.restore();
                }
            } else if (this.ⲆᐃⲆⲆᐃΔⵠ) {
                ww(p, m, -m.width / 2 - yo * (66 + q), -m.height / 2 + yo * (5 + u));
                ww(p, m, -m.width / 2 + (66 + q) * yo, -m.height / 2 + yo * (5 + u));
            } else if (c === 0) {
                ww(286, Δⵠⵠⵠ, -Δⵠⵠⵠ.width / 2 - (49 + q) * yo, -Δⵠⵠⵠ.height / 2 + (15 + u) * yo);
                if (this.right === 28) {
                    b = ΔⲆ[this.right][this.ΔⵠΔⵠⲆ][mx.time];
                    mw(this.right, this.ΔⵠΔⵠⲆ, b, -b.width / 4 - (62 + q) * yo, -b.height / 4 + yo * (u + 18));
                } else {
                    Jv(this.right, q, u);
                }
                if (p >= 920) {
                    sw(p, m, -m.width / 4 - (49 + q) * yo, -m.height / 4 + (11 + u) * yo);
                } else if (p !== 793) {
                    mw(p, this.ᐃΔⲆΔ, m, -m.width / 4 - yo * (49 + q), -m.height / 4 + yo * (11 + u));
                } else {
                    ww(p, m, -m.width / 2 - (49 + q) * yo, -m.height / 2 + (11 + u) * yo);
                }
                ww(286, Δⵠⵠⵠ, -Δⵠⵠⵠ.width / 2 + (49 + q) * yo, -Δⵠⵠⵠ.height / 2 + yo * (15 + u));
                if (p >= 920) {
                    sw(p, m, -m.width / 4 + (49 + q) * yo, -m.height / 4 + yo * (11 + u));
                } else if (p !== 793) {
                    mw(p, this.ᐃΔⲆΔ, m, -m.width / 4 + (49 + q) * yo, -m.height / 4 + (11 + u) * yo);
                } else {
                    ww(p, m, -m.width / 2 + (49 + q) * yo, -m.height / 2 + (11 + u) * yo);
                }
            }
            if (this.Ⲇⵠᐃⵠᐃ && this.ⲆⵠⲆⵠᐃ < 1) {
                m = ΔⲆ[29][this.ⲆΔⵠⵠᐃⲆΔ][mx.time];
                mw(29, this.ⲆΔⵠⵠᐃⲆΔ, m, -m.width / 4, -m.height / 4 - yo * 39);
            }
            if (this.ⲆᐃⲆⲆᐃΔⵠ) {
                m = ΔⲆ[820][mx.time];
                ww(820, m, -m.width / 2, -m.height / 2);
                this.ⵠⵠᐃΔⵠΔᐃ.ᐃⵠⲆ();
                m = ΔⲆ[821][mx.time];
                ww(821, m, -m.width / 2, -m.height / 2 + this.ⵠⵠᐃΔⵠΔᐃ.ΔⲆᐃ);
            } else {
                m = ΔⲆ[255][this.ᐃΔⲆΔ][mx.time];
                if (this.ⲆⵠⲆⵠᐃ !== 85 && (mw(255, this.ᐃΔⲆΔ, m, -m.width / 4, -m.height / 4), this.ⲆᐃⲆΔΔ > 0)) {
                    m = ΔⲆ[796][this.ⲆᐃⲆΔΔ][mx.time];
                    mw(796, this.ⲆᐃⲆΔΔ, m, -m.width / 4, -m.height / 4);
                }
            }
            if (this.action & 128) {
                if (this.ⲆΔΔΔⲆ.ᐃⵠⲆ() && this.ⲆΔΔΔⲆ.ᐃⵠΔ == ek) {
                    this.action -= 128;
                }
                mo.globalAlpha = 0.6 - this.ⲆΔΔΔⲆ.ΔⲆᐃ;
                if (this.ⲆᐃⲆⲆᐃΔⵠ) {
                    m = ΔⲆ[825];
                    Cp(mo, m, -m.width / 2, -m.height / 2);
                } else {
                    m = Xv(this.ᐃΔⲆΔ, ΔⲆ[255][this.ᐃΔⲆΔ][0], ΔⲆᐃᐃⲆⲆΔⵠᐃ);
                    Cp(mo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
                }
                mo.globalAlpha = 1;
            }
            if (this.action & 256) {
                if (this.ⲆⲆⵠΔᐃᐃΔ.ᐃⵠⲆ() && this.ⲆⲆⵠΔᐃᐃΔ.ᐃⵠΔ == 0) {
                    this.action -= 256;
                }
                mo.globalAlpha = 0.6 - this.ⲆⲆⵠΔᐃᐃΔ.ΔⲆᐃ;
                m = ΔⲆ[266];
                Cp(mo, m, -m.width / 2, -m.height / 2);
                mo.globalAlpha = 1;
            }
            if (this.action & 2) {
                if (this.ⲆΔᐃⲆ.ᐃⵠⲆ() && zj == this.ⲆΔᐃⲆ.ᐃⵠΔ) {
                    this.action -= 2;
                }
                mo.globalAlpha = 0.6 - this.ⲆΔᐃⲆ.ΔⲆᐃ;
                if (this.ⲆᐃⲆⲆᐃΔⵠ) {
                    m = ΔⲆ[823];
                    Cp(mo, m, -m.width / 2, -m.height / 2);
                } else {
                    m = Xv(this.ᐃΔⲆΔ, ΔⲆ[255][this.ᐃΔⲆΔ][0], ⲆᐃⲆᐃⲆⲆᐃᐃΔ);
                    Cp(mo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
                }
                mo.globalAlpha = 1;
            }
            if (this.action & 4) {
                if (this.freeze.ᐃⵠⲆ() && this.freeze.ᐃⵠΔ == Sg) {
                    this.action -= 4;
                }
                mo.globalAlpha = 0.6 - this.freeze.ΔⲆᐃ;
                m = Xv(this.ᐃΔⲆΔ, ΔⲆ[255][this.ᐃΔⲆΔ][0], ᐃΔᐃⵠⵠⲆⲆΔⵠ);
                Cp(mo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
                mo.globalAlpha = 1;
            }
            if (this.action & 8) {
                if (this.ⵠΔⵠⲆᐃⲆⵠ.ᐃⵠⲆ() && this.ⵠΔⵠⲆᐃⲆⵠ.ᐃⵠΔ == 0) {
                    this.action -= 8;
                }
                mo.globalAlpha = 0.6 - this.ⵠΔⵠⲆᐃⲆⵠ.ΔⲆᐃ;
                if (this.ⲆᐃⲆⲆᐃΔⵠ) {
                    m = ΔⲆ[824];
                    Cp(mo, m, -m.width / 2, -m.height / 2);
                } else {
                    m = Xv(this.ᐃΔⲆΔ, ΔⲆ[255][this.ᐃΔⲆΔ][0], ⵠⵠⵠᐃⲆᐃⲆᐃⲆ);
                    Cp(mo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
                }
                mo.globalAlpha = 1;
            }
            Sv(this.ⲆⵠⲆⵠᐃ);
            if (c === 1) {
                if (this.action & 16) {
                    q += this.attack.ΔⲆᐃ * 15;
                }
                ww(286, Δⵠⵠⵠ, -Δⵠⵠⵠ.width / 2 - yo * 26, -Δⵠⵠⵠ.height / 2 + (31 + u + q) * yo);
                if (h >= 920) {
                    sw(h, w, -w.width / 4 - yo * 26, -w.height / 4 + yo * (27 + u + q));
                } else if (h !== 793) {
                    mw(h, this.ᐃΔⲆΔ, w, -w.width / 4 - yo * 26, -w.height / 4 + yo * (27 + u + q));
                } else {
                    ww(h, w, -w.width / 2 - yo * 26, -w.height / 2 + (27 + u + q) * yo);
                }
                ww(286, Δⵠⵠⵠ, -Δⵠⵠⵠ.width / 2 + yo * 26, -Δⵠⵠⵠ.height / 2 + yo * (31 + u + q));
                if (h >= 920) {
                    sw(h, w, -w.width / 4 + yo * 26, -w.height / 4 + (27 + u + q) * yo);
                } else if (h !== 793) {
                    mw(h, this.ᐃΔⲆΔ, w, -w.width / 4 + yo * 26, -w.height / 4 + (27 + u + q) * yo);
                } else {
                    ww(h, w, -w.width / 2 + yo * 26, -w.height / 2 + yo * (27 + u + q));
                }
                Bv(this.right, 0, u + q);
            }
            mo.restore();
            if (this.ⲆⵠⲆⵠᐃ !== 83 && this.ⲆⵠⲆⵠᐃ !== 85) {
                if (this.ⲆⵠΔⵠΔ > 0) {
                    this.ΔΔⲆⲆ.ᐃᐃⲆⵠΔⲆⵠ ||= ku(yo, this.ΔΔⲆⲆ.ⲆΔΔⵠⲆ, 20, "#187484", "#000", 2, null, null, yo * 300);
                    m = this.ΔΔⲆⲆ.ᐃᐃⲆⵠΔⲆⵠ;
                } else {
                    if (!this.ΔΔⲆⲆ.label) {
                        this.ΔΔⲆⲆ.label = ku(yo, this.ΔΔⲆⲆ.ⲆΔΔⵠⲆ, 20, "#FFF", "#000", 2, null, null, yo * 300);
                    }
                    m = this.ΔΔⲆⲆ.label;
                }
                if (mx.ΔᐃⲆ == _r.ΔⵠΔ) {
                    mo.globalAlpha = 0.5;
                }
                q = Math.floor(-m.width / 2);
                u = Math.floor(-m.height / 2 - yo * 70);
                Cp(mo, m, q, u);
                if (this.ΔΔⲆⲆ.level > 0) {
                    var y = q + m.width + 5;
                    m = ΔⲆ[885];
                    if (ⵠᐃΔΔⵠⲆⲆ[this.ΔΔⲆⲆ.level] === qs) {
                        ⵠᐃΔΔⵠⲆⲆ[this.ΔΔⲆⲆ.level] = ku(yo, "[" + this.ΔΔⲆⲆ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, yo * 50);
                    }
                    Cp(mo, ⵠᐃΔΔⵠⲆⲆ[this.ΔΔⲆⲆ.level], y, u);
                }
                mo.globalAlpha = 1;
            } else {
                u = Math.floor(yo * -70);
                q = Math.floor(ΔⲆ[558].width / 1.5);
            }
            if (nx.ᐃΔΔⵠΔⲆᐃ(this.ΔⵠⵠⲆ)) {
                if (nx.ⵠΔᐃΔᐃ[0] == this.ΔⵠⵠⲆ) {
                    m = ΔⲆ[559];
                } else {
                    m = ΔⲆ[558];
                }
                Cp(mo, m, q - m.width - 5, u - 6);
            }
            mo.restore();
        }
    }
    function Zv() {
        if (this.enabled && this.ᐃⲆⵠᐃᐃ >= 0) {
            var a = new Date().getTime() - this.ᐃⲆⵠᐃᐃ;
            var b = a % 1000 / 1000;
            if (b > 0.5) {
                b = 1 - (b - 0.5) * 2;
            } else {
                b *= 2;
            }
            a = Math.floor(a / 1000);
            if (a < 60) {
                a = 60 - a;
                if (!this.label) {
                    this.label = ku(yo, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
                }
                if (this.now != a || !this.ⲆⲆΔΔᐃᐃⲆ) {
                    this.now = a;
                    this.ⲆⲆΔΔᐃᐃⲆ = ku(yo, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
                }
                Cp(mo, this.label, (no - this.label.width) / 2, yo * 100);
                mo.globalAlpha = b;
                Cp(mo, this.ⲆⲆΔΔᐃᐃⲆ, (no - this.label.width) / 2 - this.ⲆⲆΔΔᐃᐃⲆ.width + yo * 15, yo * 100);
                mo.globalAlpha = 1;
            }
        }
    }
    function $v(a, b) {
        if (this.text) {
            if (this.timeout.ᐃⵠΔ) {
                mo.globalAlpha = 1 - this.timeout.ΔⲆᐃ;
            } else {
                mo.globalAlpha = 1;
            }
            if (!this.label) {
                this.label = ku(yo, this.text, 40, a, null, null, null, null, null, b, 10);
            }
            Cp(mo, this.label, (no - this.label.width) / 2, yo * 50);
            mo.globalAlpha = 1;
            if (this.timeout.ᐃⵠⲆ() && this.timeout.ᐃⵠΔ == Mr) {
                this.text = this.list.shift();
                this.label = null;
            }
        }
    }
    ⲆᐃⲆᐃⲆⲆᐃᐃΔ = 0;
    ΔⲆᐃᐃⲆⲆΔⵠᐃ = 1;
    ᐃΔᐃⵠⵠⲆⲆΔⵠ = 2;
    ⵠⵠⵠᐃⲆᐃⲆᐃⲆ = 3;
    ⲆΔⵠⵠⵠⲆᐃΔⵠ = 4;
    ⲆⵠⲆᐃᐃᐃⵠ = [[], [], [], [], []];
    ᐃᐃᐃΔⲆⲆΔⵠⲆ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
    var _v = 0;
    function aw(j, e, i, k, n, o, a, q = 0) {
        for (var r = a; q <= r; r--) {
            for (var s = j; e >= s; s++) {
                for (var t = i; k >= t; t++) {
                    var w = kx.ⲆⲆⲆⲆ[s][t];
                    if (w && w[o]) {
                        var x = w[o][r];
                        if (x !== undefined) {
                            for (var y = 0; y < x.length; y++) {
                                var z = x[y];
                                var A = ΔⲆ[n][mx.time][r];
                                var B = (_v + (s + t) * 3) % 60;
                                var D = B < 30 ? B / 30 : 1 - (B - 30) / 30;
                                var E = (1 + D * 0.9 / 30) * -A.width;
                                var F = (1 + D * 0.9 / 30) * -A.height;
                                D = (B = (_v + (s + t) * 7) % 60) < 30 ? B / 30 : 1 - (B - 30) / 30;
                                var G = mo.globalAlpha;
                                mo.globalAlpha = G * (0.9 + D * 0.1);
                                Cp(mo, A, nx.ᐃΔΔ.x + z.x - E / 2, nx.ᐃΔΔ.y + z.y - F / 2, E, F);
                                mo.globalAlpha = G;
                            }
                        }
                    }
                }
            }
        }
    }
    function bw(j, e, i, k, n, o, a, q) {
        if (q === Go) {
            q = 0;
        }
        mx.ⲆⵠⲆᐃ[n].ᐃⵠⲆ();
        for (var r = a; r >= q; r--) {
            for (var t = j; t <= e; t++) {
                for (var w = i; k >= w; w++) {
                    var x = kx.ⲆⲆⲆⲆ[t][w];
                    if (x && x[o]) {
                        var y = x[o][r];
                        if (y !== undefined) {
                            for (var z = 0; z < y.length; z++) {
                                var A = y[z];
                                if (A.ᐃⵠⲆ) {
                                    if (A.ⲆΔᐃⲆ.ᐃⵠⲆ() && A.ⲆΔᐃⲆ.ᐃⵠΔ == Bl) {
                                        A.ᐃⵠⲆ = false;
                                    }
                                    var B = yo * ((1 - A.ⲆΔᐃⲆ.ΔⲆᐃ) * tx * 600);
                                    var D = Math.sin(A.angle) * B;
                                    var E = B * Math.cos(A.angle);
                                } else {
                                    D = 0;
                                    E = 0;
                                }
                                var F = ΔⲆ[n][mx.time][r];
                                var G = mx.ⲆⵠⲆᐃ[n].ΔⲆᐃ * -F.width;
                                var H = -F.height * mx.ⲆⵠⲆᐃ[n].ΔⲆᐃ;
                                Cp(mo, F, nx.ᐃΔΔ.x + A.x - G / 2 + D, nx.ᐃΔΔ.y + A.y - H / 2 + E, G, H);
                            }
                        }
                    }
                }
            }
        }
    }
    var cw = [];
    for (wb = 0; wb < 100; wb++) {
        var dw = 1;
        if (Math.random() < 0.25) {
            dw = 0;
        }
        cw.push(dw);
    }
    function ew(j, e, i, k, n, o, a, q = 0, r) {
        for (var h = a; h >= q; h--) {
            for (var s = j; s <= e; s++) {
                for (var t = i; k >= t; t++) {
                    var w = kx.ⲆⲆⲆⲆ[s][t];
                    if (w !== undefined && w[o] !== undefined) {
                        var x = w[o][h];
                        if (x !== undefined) {
                            for (var A = 0; x.length > A; A++) {
                                var B = x[A];
                                if (B.ᐃⵠⲆ) {
                                    if (B.ⲆΔᐃⲆ.ᐃⵠⲆ() && Yn == B.ⲆΔᐃⲆ.ᐃⵠΔ) {
                                        B.ᐃⵠⲆ = false;
                                    }
                                    var D = (1 - B.ⲆΔᐃⲆ.ΔⲆᐃ) * tx * 600 * yo;
                                    var E = Math.sin(B.angle) * D;
                                    var F = Math.cos(B.angle) * D;
                                } else {
                                    E = 0;
                                    F = 0;
                                }
                                for (var G = 0; G < ᐃΔᐃΔⵠΔⵠ[h].ⵠⲆᐃΔ; G++) {
                                    if (ux !== mx.ⲆⵠᐃΔΔ[G].ΔⵠᐃᐃⵠⲆⵠ) {
                                        mx.ⲆⵠᐃΔΔ[G].ᐃⵠⲆ();
                                        mx.ⲆⵠᐃΔΔ[G].ΔⵠᐃᐃⵠⲆⵠ = ux;
                                    }
                                    var H = ΔⲆ[941][mx.time][ᐃΔᐃΔⵠΔⵠ[h].ᐃⲆᐃᐃ[G].ⵠᐃⲆ];
                                    var I = mx.ⲆⵠᐃΔΔ[G].ΔⲆᐃ * -H.width;
                                    var J = mx.ⲆⵠᐃΔΔ[G].ΔⲆᐃ * -H.height;
                                    Cp(mo, H, nx.ᐃΔΔ.x + B.x - I / 4 + E + ᐃΔᐃΔⵠΔⵠ[h].ᐃⲆᐃᐃ[G].x, nx.ᐃΔΔ.y + B.y - J / 4 + F + ᐃΔᐃΔⵠΔⵠ[h].ᐃⲆᐃᐃ[G].y, I / 2, J / 2);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    function fw(f, e, i, j, k, n, a, o = 0, q) {
        for (var h = a; o <= h; h--) {
            for (var r = f; e >= r; r++) {
                for (var s = i; s <= j; s++) {
                    if (q <= 0 || cw[(r + s * q) % cw.length] !== 1) {
                        var t = kx.ⲆⲆⲆⲆ[r][s];
                        if (Pg !== t && t[n] !== vg) {
                            var w = t[n][h];
                            if (w !== _a) {
                                for (var x = 0; w.length > x; x++) {
                                    var y = w[x];
                                    if (y.ᐃⵠⲆ) {
                                        if (y.ⲆΔᐃⲆ.ᐃⵠⲆ() && y.ⲆΔᐃⲆ.ᐃⵠΔ == ca) {
                                            y.ᐃⵠⲆ = Yk;
                                        }
                                        var z = (1 - y.ⲆΔᐃⲆ.ΔⲆᐃ) * tx * 600 * yo;
                                        var A = z * Math.sin(y.angle);
                                        var B = z * Math.cos(y.angle);
                                    } else {
                                        A = 0;
                                        B = 0;
                                    }
                                    var D = ΔⲆ[k][mx.time][h];
                                    Cp(mo, D, nx.ᐃΔΔ.x + y.x - D.width / (ⲆⲆⵠⵠΔ * 2) + A, nx.ᐃΔΔ.y + y.y - D.height / (ⲆⲆⵠⵠΔ * 2) + B, D.width / ⲆⲆⵠⵠΔ, D.height / ⲆⲆⵠⵠΔ);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    function gw(c, e, f, i, j, k, a, m, n) {
        if (Sq === m) {
            m = 0;
        }
        for (var h = c; e >= h; h++) {
            for (var o = f; i >= o; o++) {
                var p = kx.ⲆⲆⲆⲆ[h][o];
                if (p !== undefined && fh !== p[k]) {
                    var q = p[k];
                    if (od !== q) {
                        if (q.scale === 1) {
                            var r = ΔⲆ[j][mx.time][q.ⲆⲆⵠΔ];
                            mo.save();
                            mo.translate(nx.ᐃΔΔ.x + q.x, nx.ᐃΔΔ.y + q.y);
                            mo.rotate(q.angle);
                            Cp(mo, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
                            mo.restore();
                        } else if (q.scale === 3) {
                            for (var t = 0; q.ⵠᐃⵠ.length > t; t++) {
                                mo.save();
                                mo.translate(nx.ᐃΔΔ.x + q.x, nx.ᐃΔΔ.y + q.y);
                                mo.rotate(q.ⵠᐃⵠ[t].angle);
                                r = ΔⲆ[j][mx.time][q.ⵠᐃⵠ[t].ⲆⲆⵠΔ];
                                Cp(mo, r, -r.width / 3 + q.ⵠᐃⵠ[t].x, -r.height / 3 + q.ⵠᐃⵠ[t].y, r.width / 1.5, r.height / 1.5);
                                mo.restore();
                            }
                        } else {
                            r = ΔⲆ[j][mx.time][q.ⲆⲆⵠΔ];
                            mo.save();
                            mo.translate(nx.ᐃΔΔ.x + q.x, nx.ᐃΔΔ.y + q.y);
                            mo.rotate(q.angle);
                            Cp(mo, r, -r.width / 2, -r.height / 2, r.width, r.height);
                            mo.restore();
                        }
                    }
                }
            }
        }
    }
    ⲆⲆⵠⵠΔ = 1;
    ᐃΔᐃΔⵠΔⵠ = [{
        ⵠⲆᐃΔ: 10,
        ᐃⲆᐃᐃ: [{
            x: -128,
            y: -20,
            ⵠᐃⲆ: 0
        }, {
            x: -86,
            y: -4,
            ⵠᐃⲆ: 1
        }, {
            y: -74,
            ⵠᐃⲆ: 2,
            x: -60
        }, {
            y: -144,
            x: -22,
            ⵠᐃⲆ: 0
        }, {
            ⵠᐃⲆ: 0,
            x: -58,
            y: 86
        }, {
            ⵠᐃⲆ: 0,
            y: -30,
            x: 3
        }, {
            x: 65,
            ⵠᐃⲆ: 1,
            y: -115
        }, {
            x: 118,
            ⵠᐃⲆ: 0,
            y: -50
        }, {
            ⵠᐃⲆ: 1,
            x: 73,
            y: 15
        }, {
            ⵠᐃⲆ: 0,
            y: 79,
            x: 67
        }]
    }, {
        ⵠⲆᐃΔ: 5,
        ᐃⲆᐃᐃ: [{
            ⵠᐃⲆ: 0,
            x: -45,
            y: -26
        }, {
            ⵠᐃⲆ: 2,
            x: -45,
            y: 20
        }, {
            y: -60,
            ⵠᐃⲆ: 1,
            x: 10
        }, {
            y: -17,
            ⵠᐃⲆ: 1,
            x: 52
        }, {
            ⵠᐃⲆ: 0,
            y: 45,
            x: 14
        }]
    }, {
        ᐃⲆᐃᐃ: [{
            y: 3,
            ⵠᐃⲆ: 2,
            x: -30
        }, {
            x: 7,
            ⵠᐃⲆ: 2,
            y: -38
        }, {
            ⵠᐃⲆ: 2,
            x: 37,
            y: 5
        }],
        ⵠⲆᐃΔ: 3
    }, {
        ⵠⲆᐃΔ: 11,
        ᐃⲆᐃᐃ: [{
            ⵠᐃⲆ: 2,
            x: -74,
            y: -87
        }, {
            x: -11,
            y: -10,
            ⵠᐃⲆ: 1
        }, {
            y: 17,
            x: -99,
            ⵠᐃⲆ: 1
        }, {
            x: -66,
            y: 84,
            ⵠᐃⲆ: 0
        }, {
            y: 123,
            ⵠᐃⲆ: 1,
            x: -55
        }, {
            ⵠᐃⲆ: 2,
            x: 10,
            y: 81
        }, {
            ⵠᐃⲆ: 0,
            y: 50,
            x: 52
        }, {
            ⵠᐃⲆ: 1,
            x: 138,
            y: 9
        }, {
            ⵠᐃⲆ: 0,
            y: -28,
            x: 104
        }, {
            x: 67,
            y: -56,
            ⵠᐃⲆ: 2
        }, {
            x: 5,
            ⵠᐃⲆ: 0,
            y: -112
        }]
    }, {
        ᐃⲆᐃᐃ: [{
            ⵠᐃⲆ: 2,
            x: -33,
            y: -66
        }, {
            ⵠᐃⲆ: 0,
            y: 10,
            x: -58
        }, {
            ⵠᐃⲆ: 1,
            x: -19,
            y: 44
        }, {
            x: 44,
            y: 20,
            ⵠᐃⲆ: 0
        }, {
            ⵠᐃⲆ: 2,
            y: -36,
            x: 53
        }, {
            ⵠᐃⲆ: 0,
            y: -62,
            x: 7
        }],
        ⵠⲆᐃΔ: 6
    }, {
        ⵠⲆᐃΔ: 3,
        ᐃⲆᐃᐃ: [{
            x: -19,
            ⵠᐃⲆ: 1,
            y: -25
        }, {
            ⵠᐃⲆ: 2,
            x: -29,
            y: 13
        }, {
            ⵠᐃⲆ: 0,
            y: 12,
            x: 12
        }]
    }];
    var hw = 0;
    var iw = 0;
    var jw = 0;
    var kw = 0;
    function lw(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = nx.ᐃΔΔ.x + f - 700;
        var l = Math.max(nx.ᐃΔΔ.y + e, 0);
        var g = Math.max(-nx.ᐃΔΔ.y + oo - i - 100, 0);
        var r = l;
        var b = oo - l - g;
        if (n) {
            var d = j.ⵠᐃⲆ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += d + 0 - 2;
        if (n) {
            d = j.ⵠᐃⲆ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h + 250 - s + d;
        var u = (s += t - 2) - 2;
        if (n) {
            d = j.ⵠᐃⲆ(q).x;
        } else {
            d = q.r.x;
        }
        if (u < s + (t = h + 350 - s + d) - 3) {
            s += t - 2;
        } else {
            s = u;
        }
        t = h + 700 - s;
        if (n > 0 && k.ΔⲆᐃᐃᐃⵠΔ === 1) {
            if (mx.transition) {
                var p = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                mo.fillStyle = Cw(15, 77, 72, 252, 239, 187, p);
            } else {
                mo.fillStyle = _r.ⲆᐃⵠⲆᐃᐃⲆ[mx.time];
            }
            mo.fillRect(s, r, t, b);
        } else {
            if (mx.transition) {
                p = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                mo.fillStyle = Cw(k.ⵠΔΔ[0], k.ⵠΔΔ[1], k.ⵠΔΔ[2], k.ΔᐃⲆ[0], k.ΔᐃⲆ[1], k.ΔᐃⲆ[2], p);
            } else {
                mo.fillStyle = k.ᐃⵠⵠⵠᐃ[mx.time];
            }
            mo.fillRect(s, r, t, b);
        }
    }
    function mw(b, c, d, e, f) {
        var g = d.width;
        var a = d.height;
        var i = Math.floor(g / 2);
        var j = Math.floor(a / 2);
        if (mx.transition) {
            mo.globalAlpha = 1;
            Cp(mo, ΔⲆ[b][c][mx.time], 0, 0, g, a, e, f, i, j);
            mx.time = mx.time ? 0 : 1;
            mo.globalAlpha = 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ;
            Cp(mo, ΔⲆ[b][c][mx.time], 0, 0, g, a, e, f, i, j);
            mx.time = mx.time ? 0 : 1;
            mo.globalAlpha = 1;
        } else {
            Cp(mo, ΔⲆ[b][c][mx.time], 0, 0, g, a, e, f, i, j);
        }
    }
    function nw(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = nx.ᐃΔΔ.y + j + 710;
        var l = Math.max(nx.ᐃΔΔ.x + e, 0);
        var g = Math.max(-nx.ᐃΔΔ.x + no - i - 100, 0);
        var t = l;
        var b = no - l - g;
        if (o) {
            var d = q.ⵠᐃⲆ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = u;
        var m = t;
        var p = -d.x + 0;
        var C = b;
        var G = u += -d.x + 0 + 2;
        if (o) {
            d = q.ⵠᐃⲆ(r);
        } else {
            d = r.r;
        }
        var f = h - 250 - u - d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f + 2) - 2;
        if (o) {
            d = q.ⵠᐃⲆ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h - 350 - u - d.x) < A) {
            var k = true;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f + 2;
        } else {
            k = kr;
            u = A;
            D = -1;
        }
        f = h - 700 - u;
        if (mx.transition) {
            var N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
            mo.fillStyle = Cw(9, 55, 63, 11, 106, 132, N);
        } else {
            mo.fillStyle = _r.ⲆᐃΔⵠΔ[mx.time];
        }
        mo.fillRect(m, F, C, p);
        if (o) {
            if (mx.transition) {
                N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                mo.fillStyle = Cw(15, 70, 76, 42, 139, 155, N);
            } else {
                mo.fillStyle = _r.ⵠⲆᐃᐃΔΔⵠ[mx.time];
            }
        } else if (mx.transition) {
            N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
            mo.fillStyle = Cw(9, 55, 63, 11, 106, 132, N);
        } else {
            mo.fillStyle = _r.ⲆᐃΔⵠΔ[mx.time];
        }
        mo.fillRect(y, H, K, w);
        if (k) {
            if (o) {
                if (mx.transition) {
                    N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                    mo.fillStyle = Cw(17, 94, 96, 169, 214, 211, N);
                } else {
                    mo.fillStyle = _r.ⵠⲆᐃᐃⲆⲆⵠ[mx.time];
                }
            } else if (mx.transition) {
                N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                mo.fillStyle = Cw(9, 55, 63, 11, 106, 132, N);
            } else {
                mo.fillStyle = _r.ⲆᐃΔⵠΔ[mx.time];
            }
            mo.fillRect(J, L, B, M);
        }
        if (jx.ⵠᐃᐃᐃⵠ && o) {
            q.ᐃⵠΔΔⲆⲆΔΔⵠ(A, D, G, h, -nx.ᐃΔΔ.x + m, -nx.ᐃΔΔ.x + m + C);
        }
    }
    function ow(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = nx.ᐃΔΔ.x + j + 820;
        var l = Math.max(nx.ᐃΔΔ.y + e, 0);
        var g = Math.max(-nx.ᐃΔΔ.y + oo - i - 100, 0);
        var t = l;
        var b = oo - l - g;
        if (o) {
            var d = q.ⵠᐃⲆ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = u;
        var m = t;
        var p = -d.x + 0;
        var C = b;
        var G = u += -d.x + 0 + 2;
        if (o) {
            d = q.ⵠᐃⲆ(r);
        } else {
            d = r.r;
        }
        var f = h - 250 - u - d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f + 2) - 2;
        if (o) {
            d = q.ⵠᐃⲆ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h - 350 - u - d.x) < A) {
            var k = sj;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f + 2;
        } else {
            k = ie;
            u = A;
            D = -1;
        }
        f = h - 700 - u;
        if (mx.transition) {
            var N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
            mo.fillStyle = Cw(9, 55, 63, 11, 106, 132, N);
        } else {
            mo.fillStyle = _r.ⲆᐃΔⵠΔ[mx.time];
        }
        mo.fillRect(F, m, p, C);
        if (o) {
            if (mx.transition) {
                N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                mo.fillStyle = Cw(15, 70, 76, 42, 139, 155, N);
            } else {
                mo.fillStyle = _r.ⵠⲆᐃᐃΔΔⵠ[mx.time];
            }
        } else if (mx.transition) {
            N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
            mo.fillStyle = Cw(9, 55, 63, 11, 106, 132, N);
        } else {
            mo.fillStyle = _r.ⲆᐃΔⵠΔ[mx.time];
        }
        mo.fillRect(H, y, w, K);
        if (k) {
            if (o) {
                if (mx.transition) {
                    N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                    mo.fillStyle = Cw(17, 94, 96, 169, 214, 211, N);
                } else {
                    mo.fillStyle = _r.ⵠⲆᐃᐃⲆⲆⵠ[mx.time];
                }
            } else if (mx.transition) {
                N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                mo.fillStyle = Cw(9, 55, 63, 11, 106, 132, N);
            } else {
                mo.fillStyle = _r.ⲆᐃΔⵠΔ[mx.time];
            }
            mo.fillRect(L, J, M, B);
        }
        if (jx.ⵠᐃᐃᐃⵠ && o) {
            q.ⲆΔᐃⲆΔⲆⵠᐃⲆ(A, D, G, h, -nx.ᐃΔΔ.y + m, -nx.ᐃΔΔ.y + m + C);
        }
    }
    function pw(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = nx.ᐃΔΔ.x + j - 700;
        var l = Math.max(nx.ᐃΔΔ.y + e, 0);
        var g = Math.max(-nx.ᐃΔΔ.y + oo - i - 100, 0);
        var t = l;
        var b = oo - l - g;
        if (o) {
            var d = q.ⵠᐃⲆ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = u;
        var m = t;
        var p = d.x + 0;
        var C = b;
        var G = u += d.x + 0 - 2;
        if (o) {
            d = q.ⵠᐃⲆ(r);
        } else {
            d = r.r;
        }
        var f = h + 250 - u + d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f - 2) - 2;
        if (o) {
            d = q.ⵠᐃⲆ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h + 350 - u + d.x) - 3 > A) {
            var k = true;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f - 2;
        } else {
            k = kr;
            u = A;
            D = -1;
        }
        f = h + 700 - u;
        if (mx.transition) {
            var N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
            mo.fillStyle = Cw(9, 55, 63, 11, 106, 132, N);
        } else {
            mo.fillStyle = _r.ⲆᐃΔⵠΔ[mx.time];
        }
        mo.fillRect(F, m, p, C);
        if (o) {
            if (mx.transition) {
                N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                mo.fillStyle = Cw(15, 70, 76, 42, 139, 155, N);
            } else {
                mo.fillStyle = _r.ⵠⲆᐃᐃΔΔⵠ[mx.time];
            }
        } else if (mx.transition) {
            N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
            mo.fillStyle = Cw(9, 55, 63, 11, 106, 132, N);
        } else {
            mo.fillStyle = _r.ⲆᐃΔⵠΔ[mx.time];
        }
        mo.fillRect(H, y, w, K);
        if (k) {
            if (o) {
                if (mx.transition) {
                    N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                    mo.fillStyle = Cw(17, 94, 96, 169, 214, 211, N);
                } else {
                    mo.fillStyle = _r.ⵠⲆᐃᐃⲆⲆⵠ[mx.time];
                }
            } else if (mx.transition) {
                N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                mo.fillStyle = Cw(9, 55, 63, 11, 106, 132, N);
            } else {
                mo.fillStyle = _r.ⲆᐃΔⵠΔ[mx.time];
            }
            mo.fillRect(L, J, M, B);
        }
        if (jx.ⵠᐃᐃᐃⵠ && o) {
            q.ᐃΔΔΔⲆᐃΔᐃⵠ(A, D, G, h, -nx.ᐃΔΔ.y + m, -nx.ᐃΔΔ.y + m + C);
        }
    }
    function qw(a, b) {
        if (mx.transition) {
            mo.globalAlpha = 1;
            a.ᐃᐃⲆΔᐃ(b);
            mx.time = mx.time ? 0 : 1;
            mo.globalAlpha = 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ;
            a.ᐃᐃⲆΔᐃ(b);
            mx.time = mx.time ? 0 : 1;
            mo.globalAlpha = 1;
        } else {
            a.ᐃᐃⲆΔᐃ(b);
        }
    }
    function rw(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = nx.ᐃΔΔ.y + j - 700;
        var l = Math.max(nx.ᐃΔΔ.x + e, 0);
        var g = Math.max(-nx.ᐃΔΔ.x + no - i - 100, 0);
        var t = l;
        var b = no - l - g;
        if (o) {
            var d = q.ⵠᐃⲆ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = t;
        var m = u;
        var p = d.x + 0;
        var C = b;
        var G = u += d.x + 0 - 2;
        if (o) {
            d = q.ⵠᐃⲆ(r);
        } else {
            d = r.r;
        }
        var f = h + 250 - u + d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f - 2) - 2;
        if (o) {
            d = q.ⵠᐃⲆ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h + 350 - u + d.x) - 3 > A) {
            var k = true;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f - 2;
        } else {
            k = Mr;
            u = A;
            D = -1;
        }
        f = h + 700 - u;
        if (mx.transition) {
            var N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
            mo.fillStyle = Cw(9, 55, 63, 11, 106, 132, N);
        } else {
            mo.fillStyle = _r.ⲆᐃΔⵠΔ[mx.time];
        }
        mo.fillRect(F, m, C, p);
        if (o) {
            if (mx.transition) {
                N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                mo.fillStyle = Cw(15, 70, 76, 42, 139, 155, N);
            } else {
                mo.fillStyle = _r.ⵠⲆᐃᐃΔΔⵠ[mx.time];
            }
        } else if (mx.transition) {
            N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
            mo.fillStyle = Cw(9, 55, 63, 11, 106, 132, N);
        } else {
            mo.fillStyle = _r.ⲆᐃΔⵠΔ[mx.time];
        }
        mo.fillRect(y, H, K, w);
        if (k) {
            if (o) {
                if (mx.transition) {
                    N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                    mo.fillStyle = Cw(17, 94, 96, 169, 214, 211, N);
                } else {
                    mo.fillStyle = _r.ⵠⲆᐃᐃⲆⲆⵠ[mx.time];
                }
            } else if (mx.transition) {
                N = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                mo.fillStyle = Cw(9, 55, 63, 11, 106, 132, N);
            } else {
                mo.fillStyle = _r.ⲆᐃΔⵠΔ[mx.time];
            }
            mo.fillRect(J, L, B, M);
        }
        if (jx.ⵠᐃᐃᐃⵠ && o) {
            q.ΔⵠᐃΔⲆⲆΔΔⵠ(A, D, G, h, -nx.ᐃΔΔ.x + F, -nx.ᐃΔΔ.x + F + C);
        }
    }
    function sw(b, c, d, e) {
        var f = c.width;
        var g = c.height;
        var a = Math.floor(f / 2);
        var h = Math.floor(g / 2);
        if (mx.transition) {
            mo.globalAlpha = 1;
            Cp(mo, ΔⲆ[b][mx.time], 0, 0, f, g, d, e, a, h);
            mx.time = mx.time ? 0 : 1;
            mo.globalAlpha = 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ;
            Cp(mo, ΔⲆ[b][mx.time], 0, 0, f, g, d, e, a, h);
            mx.time = mx.time ? 0 : 1;
            mo.globalAlpha = 1;
        } else {
            Cp(mo, c, 0, 0, f, g, d, e, a, h);
        }
    }
    function tw(a, b, c, d, e) {
        if (mx.transition && e == 1) {
            mo.globalAlpha = 1;
            Cp(mo, ΔⲆ[a][mx.time][b], c, d);
            mx.time = mx.time ? 0 : 1;
            mo.globalAlpha = 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ;
            Cp(mo, ΔⲆ[a][mx.time][b], c, d);
            mx.time = mx.time ? 0 : 1;
            mo.globalAlpha = 1;
        } else {
            mo.globalAlpha = e;
            Cp(mo, ΔⲆ[a][mx.time][b], c, d);
            mo.globalAlpha = 1;
        }
    }
    function uw(a) {
        mo.globalAlpha = a.alpha;
        id(mo, a.x + nx.ᐃΔΔ.x, a.y + nx.ᐃΔΔ.y, a.r);
        Xb(mo, _r.ⵠⵠᐃΔⲆⲆⲆ[mx.time]);
        mo.globalAlpha = 1;
    }
    function vw() {
        mo.globalAlpha = 1;
        if (mx.transition) {
            var a = mx.ΔⵠⵠΔ.ᐃⵠⲆ();
        }
        mx.ΔΔΔᐃᐃᐃΔΔⲆ(-nx.ᐃΔΔ.x, -nx.ᐃΔΔ.y);
        hw = Math.max(Math.floor(-nx.ᐃΔΔ.x / mx.ΔⲆΔⲆᐃⲆΔ) - 5, 0);
        iw = Math.min(Math.floor((-nx.ᐃΔΔ.x + nx.ᐃΔΔ.w) / mx.ΔⲆΔⲆᐃⲆΔ) + 4, mx.ΔΔΔⲆᐃ - 1);
        jw = Math.max(Math.floor(-nx.ᐃΔΔ.y / mx.ⵠⵠⲆⵠΔΔΔ) - 3, 0);
        kw = Math.min(Math.floor((-nx.ᐃΔΔ.y + nx.ᐃΔΔ.ᐃⲆᐃ) / mx.ⵠⵠⲆⵠΔΔΔ) + 3, mx.ΔᐃⵠⵠΔ - 1);
        (function () {
            for (var f = mx.ⵠⲆΔᐃⵠ.length - 1; f >= 0; f--) {
                var j = mx.ⵠⲆΔᐃⵠ[f];
                if (mx.ⵠⵠⵠΔΔ === j.ⵠᐃⲆ) {
                    var k = mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ];
                    if (j.x1 - 230 - no <= -nx.ᐃΔΔ.x && -nx.ᐃΔΔ.x <= j.x2 + 330 && j.y1 - oo <= -nx.ᐃΔΔ.y && -nx.ᐃΔΔ.y <= j.y2 + 100) {
                        var m = j.x2;
                        if (mx.ⵠⵠⵠΔΔ !== j.ⵠᐃⲆ) {
                            m -= 610;
                        }
                        var p = j.x1;
                        if (mx.ⵠⵠⵠΔΔ !== j.ⵠᐃⲆ) {
                            p += 610;
                        }
                        var q = j.y2;
                        if (j.ⵠᐃⲆ !== mx.ⵠⵠⵠΔΔ) {
                            q -= 610;
                        }
                        var u = j.y1;
                        if (mx.ⵠⵠⵠΔΔ !== j.ⵠᐃⲆ) {
                            u += 610;
                        }
                        if (mx.transition) {
                            var w = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                            mo.fillStyle = Cw(k.ⵠΔΔ[0], k.ⵠΔΔ[1], k.ⵠΔΔ[2], k.ΔᐃⲆ[0], k.ΔᐃⲆ[1], k.ΔᐃⲆ[1], w);
                        } else {
                            mo.fillStyle = k.ᐃⵠⵠⵠᐃ[mx.time];
                        }
                        var x = Math.max(nx.ᐃΔΔ.x + p - 2 - 230, 0);
                        var y = Math.max(-nx.ᐃΔΔ.x + no - m - 330 - 2, 0);
                        var z = Math.max(nx.ᐃΔΔ.y + u - 2, 0);
                        var A = Math.max(-nx.ᐃΔΔ.y + oo - q - 100 - 2, 0);
                        mo.beginPath();
                        mo.fillRect(x, z, no - y - x, oo - z - A);
                    }
                }
            }
            for (f = mx.ⵠⲆΔᐃⵠ.length - 1; f >= 0; f--) {
                if ((j = mx.ⵠⲆΔᐃⵠ[f]).ⵠᐃⲆ !== mx.ⵠⵠⵠΔΔ) {
                    m = j.x2;
                    if (j.ⵠᐃⲆ !== mx.ⵠⵠⵠΔΔ) {
                        m -= 400;
                    }
                    p = j.x1;
                    if (j.ⵠᐃⲆ !== mx.ⵠⵠⵠΔΔ) {
                        p += 400;
                    }
                    q = j.y2;
                    if (j.ⵠᐃⲆ !== mx.ⵠⵠⵠΔΔ) {
                        q -= 300;
                    }
                    u = j.y1;
                    if (mx.ⵠⵠⵠΔΔ !== j.ⵠᐃⲆ) {
                        u += 300;
                    }
                    if ((j.ΔⲆᐃ & 8) === 0 && -nx.ᐃΔΔ.x >= m - no + 120 && -nx.ᐃΔΔ.x <= m + 820 && -nx.ᐃΔΔ.y >= u + 88 - oo && q + 50 >= -nx.ᐃΔΔ.y) {
                        Aw(m, u + 88, q - 88, nx.ᐃᐃⵠⲆ[0], mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ], j.ΔⲆᐃ & 8);
                        ow(m, u + 88, q - 88, nx.ᐃᐃⵠⲆ[0], mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ], j.ΔⲆᐃ & 8);
                    }
                    if (!(j.ΔⲆᐃ & 4) && -nx.ᐃΔΔ.x >= p - no - 700 && p - 20 >= -nx.ᐃΔΔ.x && -nx.ᐃΔΔ.y >= u + 88 - oo && -nx.ᐃΔΔ.y <= q + 50) {
                        lw(p, u + 88, q - 88, nx.ᐃᐃⵠⲆ[1], mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ], j.ΔⲆᐃ & 4);
                        pw(p, u + 88, q - 88, nx.ᐃᐃⵠⲆ[1], mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ], j.ΔⲆᐃ & 4);
                    }
                    if (!(j.ΔⲆᐃ & 2) && -nx.ᐃΔΔ.x >= p - 235 - no && -nx.ᐃΔΔ.x <= m + 350 && q - oo - 275 <= -nx.ᐃΔΔ.y && -nx.ᐃΔΔ.y <= q + 490) {
                        xw(q - 230, p - 230, m + 230, nx.ᐃᐃⵠⲆ[2], mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ], j.ΔⲆᐃ & 2);
                        nw(q - 230, p - 230, m + 230, nx.ᐃᐃⵠⲆ[2], mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ], j.ΔⲆᐃ & 2);
                    }
                    if ((j.ΔⲆᐃ & 1) === 0 && p - 235 - no <= -nx.ᐃΔΔ.x && m + 350 >= -nx.ᐃΔΔ.x && u - oo - 390 <= -nx.ᐃΔΔ.y && u + 315 >= -nx.ᐃΔΔ.y) {
                        tf(u + 310, p - 230, m + 230, nx.ᐃᐃⵠⲆ[3], mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ], j.ΔⲆᐃ & 1);
                        rw(u + 310, p - 230, m + 230, nx.ᐃᐃⵠⲆ[3], mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ], j.ΔⲆᐃ & 1);
                    }
                }
            }
            for (f = mx.ⵠⲆΔᐃⵠ.length - 1; f >= 0; f--) {
                j = mx.ⵠⲆΔᐃⵠ[f];
                if (mx.ⵠⵠⵠΔΔ !== j.ⵠᐃⲆ) {
                    m = j.x2;
                    if (mx.ⵠⵠⵠΔΔ !== j.ⵠᐃⲆ) {
                        m -= 400;
                    }
                    p = j.x1;
                    if (j.ⵠᐃⲆ !== mx.ⵠⵠⵠΔΔ) {
                        p += 400;
                    }
                    q = j.y2;
                    if (j.ⵠᐃⲆ !== mx.ⵠⵠⵠΔΔ) {
                        q -= 300;
                    }
                    u = j.y1;
                    if (j.ⵠᐃⲆ !== mx.ⵠⵠⵠΔΔ) {
                        u += 300;
                    }
                    if ((j.ΔⲆᐃ & 8) !== 0 && m - no + 120 <= -nx.ᐃΔΔ.x && m + 820 >= -nx.ᐃΔΔ.x && u + 88 - oo <= -nx.ᐃΔΔ.y && q + 50 >= -nx.ᐃΔΔ.y) {
                        Aw(m, u + 88, q - 88, nx.ᐃᐃⵠⲆ[0], mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ], j.ΔⲆᐃ & 8);
                    }
                    if ((j.ΔⲆᐃ & 4) !== 0 && -nx.ᐃΔΔ.x >= p - no - 700 && -nx.ᐃΔΔ.x <= p - 20 && u + 88 - oo <= -nx.ᐃΔΔ.y && -nx.ᐃΔΔ.y <= q + 50) {
                        lw(p, u + 88, q - 88, nx.ᐃᐃⵠⲆ[1], mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ], j.ΔⲆᐃ & 4);
                    }
                    if (j.ΔⲆᐃ & 2 && p - 235 - no <= -nx.ᐃΔΔ.x && -nx.ᐃΔΔ.x <= m + 350 && q - oo - 275 <= -nx.ᐃΔΔ.y && q + 490 >= -nx.ᐃΔΔ.y) {
                        xw(q - 230, p - 230, m + 230, nx.ᐃᐃⵠⲆ[2], mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ], j.ΔⲆᐃ & 2);
                    }
                    if ((j.ΔⲆᐃ & 1) !== 0 && -nx.ᐃΔΔ.x >= p - 235 - no && -nx.ᐃΔΔ.x <= m + 350 && -nx.ᐃΔΔ.y >= u - oo - 390 && u + 315 >= -nx.ᐃΔΔ.y) {
                        tf(u + 310, p - 230, m + 230, nx.ᐃᐃⵠⲆ[3], mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ], j.ΔⲆᐃ & 1);
                    }
                }
            }
            for (f = mx.ⵠⲆΔᐃⵠ.length - 1; f >= 0; f--) {
                j = mx.ⵠⲆΔᐃⵠ[f];
                if (mx.ⵠⵠⵠΔΔ !== j.ⵠᐃⲆ) {
                    k = mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ];
                    if (j.x1 - 230 - no <= -nx.ᐃΔΔ.x && -nx.ᐃΔΔ.x <= j.x2 + 330 && -nx.ᐃΔΔ.y >= j.y1 - oo && j.y2 + 100 >= -nx.ᐃΔΔ.y) {
                        m = j.x2;
                        if (mx.ⵠⵠⵠΔΔ !== j.ⵠᐃⲆ) {
                            if (j.ΔⲆᐃ & 8) {
                                m -= 610;
                            } else {
                                m -= 414;
                            }
                        }
                        p = j.x1;
                        if (j.ⵠᐃⲆ !== mx.ⵠⵠⵠΔΔ) {
                            if (j.ΔⲆᐃ & 4) {
                                p += 610;
                            } else {
                                p += 414;
                            }
                        }
                        q = j.y2;
                        if (j.ⵠᐃⲆ !== mx.ⵠⵠⵠΔΔ) {
                            if ((j.ΔⲆᐃ & 2) === 0) {
                                q -= 414;
                            } else {
                                q -= 610;
                            }
                        }
                        u = j.y1;
                        if (j.ⵠᐃⲆ !== mx.ⵠⵠⵠΔΔ) {
                            if (j.ΔⲆᐃ & 1) {
                                u += 610;
                            } else {
                                u += 414;
                            }
                        }
                        if (mx.transition) {
                            w = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                            mo.fillStyle = Cw(k.ⵠΔΔ[0], k.ⵠΔΔ[1], k.ⵠΔΔ[2], k.ΔᐃⲆ[0], k.ΔᐃⲆ[1], k.ΔᐃⲆ[2], w);
                        } else {
                            mo.fillStyle = k.ᐃⵠⵠⵠᐃ[mx.time];
                        }
                        x = Math.max(nx.ᐃΔΔ.x + p - 2 - 230, 0);
                        y = Math.max(-nx.ᐃΔΔ.x + no - m - 330 - 2, 0);
                        z = Math.max(nx.ᐃΔΔ.y + u - 2, 0);
                        A = Math.max(-nx.ᐃΔΔ.y + oo - q - 100 - 2, 0);
                        mo.beginPath();
                        mo.fillRect(x, z, no - y - x, oo - z - A);
                    }
                }
            }
            if (jx.ⵠᐃᐃᐃⵠ) {
                zw(bw, jw, kw, hw, iw, 695, "isl", 2);
                zw(bw, jw, kw, hw, iw, 694, "isl", 2);
            }
            zw(fw, jw, kw, hw, iw, 692, "isl", 2);
            if (jx.ⵠᐃᐃᐃⵠ) {
                zw(gw, jw, kw, hw, iw, 243, "de");
            }
            var B = mx.ⲆⲆΔ[0];
            for (f = 0; B.length > f; f++) {
                for (var d = B[f], C = 0; C < d.ᐃⵠᐃⵠᐃ.length; C++) {
                    Bw(d.ᐃⵠᐃⵠᐃ[C]);
                }
            }
            if ((Ju += tx * 40) > 60) {
                Ju -= 60;
            }
            zw(Nv, jw, kw, hw, iw, 1024, "r", 0);
            for (f = 0; mx.ⵠⲆΔᐃⵠ.length > f; f++) {
                if ((j = mx.ⵠⲆΔᐃⵠ[f]).ⵠᐃⲆ !== mx.ⵠⵠⵠΔΔ) {
                    m = j.x2;
                    if (mx.ⵠⵠⵠΔΔ !== j.ⵠᐃⲆ) {
                        m -= 400;
                    }
                    p = j.x1;
                    if (j.ⵠᐃⲆ !== mx.ⵠⵠⵠΔΔ) {
                        p += 400;
                    }
                    q = j.y2;
                    if (j.ⵠᐃⲆ !== mx.ⵠⵠⵠΔΔ) {
                        q -= 300;
                    }
                    u = j.y1;
                    if (mx.ⵠⵠⵠΔΔ !== j.ⵠᐃⲆ) {
                        u += 300;
                    }
                    if ((j.ΔⲆᐃ & 8) > 0 && -nx.ᐃΔΔ.x >= m - no + 120 && m + 820 >= -nx.ᐃΔΔ.x && u + 88 - oo <= -nx.ᐃΔΔ.y && -nx.ᐃΔΔ.y <= q + 50) {
                        ow(m, u + 88, q - 88, nx.ᐃᐃⵠⲆ[0], mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ], j.ΔⲆᐃ & 8);
                    }
                    if ((j.ΔⲆᐃ & 4) > 0 && p - no - 700 <= -nx.ᐃΔΔ.x && p - 20 >= -nx.ᐃΔΔ.x && -nx.ᐃΔΔ.y >= u + 88 - oo && -nx.ᐃΔΔ.y <= q + 50) {
                        pw(p, u + 88, q - 88, nx.ᐃᐃⵠⲆ[1], mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ], j.ΔⲆᐃ & 4);
                    }
                    if ((j.ΔⲆᐃ & 2) > 0 && p - 235 - no <= -nx.ᐃΔΔ.x && -nx.ᐃΔΔ.x <= m + 350 && q - oo - 275 <= -nx.ᐃΔΔ.y && -nx.ᐃΔΔ.y <= q + 490) {
                        nw(q - 230, p - 230, m + 230, nx.ᐃᐃⵠⲆ[2], mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ], j.ΔⲆᐃ & 2);
                    }
                    if ((j.ΔⲆᐃ & 1) > 0 && p - 235 - no <= -nx.ᐃΔΔ.x && m + 350 >= -nx.ᐃΔΔ.x && u - oo - 390 <= -nx.ᐃΔΔ.y && u + 315 >= -nx.ᐃΔΔ.y) {
                        rw(u + 310, p - 230, m + 230, nx.ᐃᐃⵠⲆ[3], mx.ᐃΔΔΔΔ[j.ⵠᐃⲆ], j.ΔⲆᐃ & 1);
                    }
                }
            }
        })();
        (function () {
            var f = hw;
            var e = iw;
            var i = jw;
            var t = kw;
            if (jx.ⵠᐃᐃᐃⵠ) {
                zw(fw, i, t, f, e, 621, "l", 2);
            }
            if (jx.ⵠᐃᐃᐃⵠ) {
                zw(fw, i, t, f, e, _r.Δⵠⵠⵠᐃ, "la", 5);
            }
            zw(fw, i, t, f, e, 203, "la", 5);
            zw(bw, i, t, f, e, 620, "l", 2);
            if (jx.ⵠᐃᐃᐃⵠ) {
                zw(ew, i, t, f, e, 203, "la", 5);
                zw(bw, i, t, f, e, 619, "l", 2);
            }
            zw(fw, i, t, f, e, 1052, "ma", 4);
            for (var n = mx.ⲆⲆΔ[76], u = 0; n.length > u; u++) {
                n[u].ⲆᐃΔⲆᐃⲆⲆ();
            }
            var B = mx.ⲆⲆΔ[0];
            for (u = 0; u < B.length; u++) {
                for (var P = B[u], aa = 0; P.ᐃⲆᐃⲆΔ.length > aa; aa++) {
                    uw(P.ᐃⲆᐃⲆΔ[aa]);
                }
            }
            var ba = mx.ⲆⲆΔ[30];
            for (u = 0; u < ba.length; u++) {
                ef(ba[u], 125);
                ba[u].ⵠᐃᐃᐃⲆ(ba[u].info);
            }

            //yw == zb
            var l = mx.ⲆⲆΔ[18];
            for (u = 0; u < l.length; u++) {
                if (l[u].action == 2) {
                    yw(l[u]);
                }
            }
            var ca = mx.ⲆⲆΔ[1];
            for (u = 0; u < ca.length; u++) {
                yw(ca[u], 113);
            }
            var da = mx.ⲆⲆΔ[22];
            for (u = 0; u < da.length; u++) {
                yw(da[u]);
            }
            var ea = mx.ⲆⲆΔ[23];
            for (u = 0; u < ea.length; u++) {
                yw(ea[u]);
            }
            var fa = mx.ⲆⲆΔ[6];
            for (u = 0; u < fa.length; u++) {
                yw(fa[u], 118);
            }
            //ef == Q
            var c = mx.ⲆⲆΔ[36];
            for (u = 0; u < c.length; u++) {
                ef(c[u]);
            }
            var m = mx.ⲆⲆΔ[33];
            for (u = 0; u < m.length; u++) {
                ef(m[u], 141);
            }
            //yw == Q
            var p = mx.ⲆⲆΔ[3];
            for (u = 0; u < p.length; u++) {
                yw(p[u]);
            }
            p = mx.ⲆⲆΔ[43];
            u = 0;
            for (; p.length > u; u++) {
                yw(p[u]);
            }
            p = mx.ⲆⲆΔ[3];
            u = 0;
            for (; u < p.length; u++) {
                qw(p[u]);
            }
            var ha = mx.ⲆⲆΔ[44];
            for (u = 0; u < ha.length; u++) {
                if ((ha[u].info & 15) === 0 || ha[u].info === 10) {
                    ef(ha[u]);
                }
            }
            var ia = mx.ⲆⲆΔ[54];
            for (u = 0; u < ia.length; u++) {
                if (!(ia[u].info & 15) || ia[u].info === 10) {
                    ef(ia[u]);
                }
            }
            var ja = mx.ⲆⲆΔ[55];
            for (u = 0; u < ja.length; u++) {
                if ((ja[u].info & 15) === 0 || ja[u].info === 10) {
                    ef(ja[u]);
                }
            }
            var ka = mx.ⲆⲆΔ[79];
            for (u = 0; ka.length > u; u++) {
                ef(ka[u], 132);
            }
            var la = mx.ⲆⲆΔ[39];
            for (u = 0; la.length > u; u++) {
                if (!(la[u].info & 15) || la[u].info === 10) {
                    ef(la[u]);
                }
            }
            var ma = mx.ⲆⲆΔ[40];
            for (u = 0; u < ma.length; u++) {
                if ((ma[u].info & 15) === 0 || ma[u].info === 10) {
                    ef(ma[u]);
                }
            }
            var na = mx.ⲆⲆΔ[37];
            for (u = 0; u < na.length; u++) {
                if (!(na[u].info & 15) || na[u].info === 10) {
                    ef(na[u]);
                }
            }
            ka = mx.ⲆⲆΔ[31];
            u = 0;
            for (; ka.length > u; u++) {
                ef(ka[u]);
            }
            var oa = mx.ⲆⲆΔ[86];
            for (u = 0; u < oa.length; u++) {
                ef(oa[u], 250, 729);
            }
            var J = mx.ⲆⲆΔ[82];
            for (u = 0; u < J.length; u++) {
                ef(J[u], 250, 729);
            }
            var M = mx.ⲆⲆΔ[87];
            for (u = 0; M.length > u; u++) {
                ef(M[u], 854, 859);
            }
            var D = mx.ⲆⲆΔ[45];
            for (u = 0; u < D.length; u++) {
                if (D[u].info & 1) {
                    ef(D[u], 336);
                }
            }
            D = mx.ⲆⲆΔ[46];
            u = 0;
            for (; D.length > u; u++) {
                if (D[u].info & 1) {
                    ef(D[u], 373);
                }
            }
            D = mx.ⲆⲆΔ[47];
            u = 0;
            for (; u < D.length; u++) {
                if (D[u].info) {
                    ef(D[u], 376);
                }
            }
            D = mx.ⲆⲆΔ[48];
            u = 0;
            for (; u < D.length; u++) {
                if (D[u].info) {
                    ef(D[u], 379);
                }
            }
            D = mx.ⲆⲆΔ[49];
            u = 0;
            for (; D.length > u; u++) {
                if (D[u].info) {
                    ef(D[u], 500);
                }
            }
            D = mx.ⲆⲆΔ[53];
            u = 0;
            for (; u < D.length; u++) {
                if (D[u].info) {
                    ef(D[u], 376);
                }
            }
            D = mx.ⲆⲆΔ[10];
            u = 0;
            for (; u < D.length; u++) {
                if (D[u].info & 1) {
                    ef(D[u], 336);
                }
            }
            D = mx.ⲆⲆΔ[15];
            u = 0;
            for (; u < D.length; u++) {
                if (D[u].info & 1) {
                    ef(D[u], 373);
                }
            }
            D = mx.ⲆⲆΔ[16];
            u = 0;
            for (; D.length > u; u++) {
                if (D[u].info) {
                    ef(D[u], 376);
                }
            }
            D = mx.ⲆⲆΔ[17];
            u = 0;
            for (; u < D.length; u++) {
                if (D[u].info) {
                    ef(D[u], 379);
                }
            }
            D = mx.ⲆⲆΔ[21];
            u = 0;
            for (; D.length > u; u++) {
                if (D[u].info) {
                    ef(D[u], 500);
                }
            }
            D = mx.ⲆⲆΔ[51];
            u = 0;
            for (; u < D.length; u++) {
                if (D[u].info) {
                    ef(D[u], 376);
                }
            }
            var pa = mx.ⲆⲆΔ[80];
            for (u = 0; pa.length > u; u++) {
                ef(pa[u], 264, 322);
            }
            var E = mx.ⲆⲆΔ[41];
            for (u = 0; E.length > u; u++) {
                ef(E[u], 198);
            }
            n = mx.ⲆⲆΔ[76];
            u = 0;
            for (; n.length > u; u++) {
                ef(n[u], _r.ⵠΔᐃᐃΔⲆᐃ, _r.ᐃⲆⵠΔΔᐃΔᐃΔ);
            }
            var qa = mx.ⲆⲆΔ[91];
            for (u = 0; qa.length > u; u++) {
                if (qa[u].ⵠΔⲆᐃᐃⲆⲆ === 0) {
                    ef(qa[u]);
                }
            }
            B = mx.ⲆⲆΔ[0];
            u = 0;
            for (; B.length > u; u++) {
                P = B[u];
                if (B[u].ΔᐃΔⲆᐃ !== 227 && B[u].ΔᐃΔⲆᐃ !== 228 && B[u].ΔᐃΔⲆᐃ !== 229 && B[u].ΔᐃΔⲆᐃ !== 230 && B[u].ΔᐃΔⲆᐃ !== 91) {
                    if (P.ΔΔⵠⵠⲆⵠⵠ === 0) {
                        if (P.ⵠⵠⵠⲆΔⵠⲆ > 0.001) {
                            P.ⵠⵠⵠⲆΔⵠⲆ = Z.ΔⵠⵠΔⵠⲆⲆ(P.ⵠⵠⵠⲆΔⵠⲆ, 0, 0.018);
                            var ra = 1 + Math.min(1, Math.max(P.ⵠⵠⵠⲆΔⵠⲆ, 0) / 100) * 0.18;
                            mo.save();
                            mo.scale(ra, ra);
                            nx.ᐃΔΔ.x /= ra;
                            nx.ᐃΔΔ.y /= ra;
                            P.x /= ra;
                            P.y /= ra;
                            P.r.x /= ra;
                            P.r.y /= ra;
                            P.ⲆΔΔⵠⲆᐃⵠ();
                            P.Δⵠᐃⵠ();
                            nx.ᐃΔΔ.x *= ra;
                            nx.ᐃΔΔ.y *= ra;
                            P.x *= ra;
                            P.y *= ra;
                            P.r.x *= ra;
                            P.r.y *= ra;
                            mo.restore();
                        } else {
                            P.ⵠΔⲆᐃᐃⲆⲆ = 0;
                            P.ⲆΔΔⵠⲆᐃⵠ();
                            P.Δⵠᐃⵠ();
                        }
                    }
                } else if (P.ΔⵠⲆⲆⲆ <= 180) {
                    mo.save();
                    ra = 1 + Math.min(1, Math.max(P.ᐃⲆᐃΔᐃ - 30, 0) / 180) * 0.35;
                    mo.scale(ra, ra);
                    nx.ᐃΔΔ.x /= ra;
                    nx.ᐃΔΔ.y /= ra;
                    P.x /= ra;
                    P.y /= ra;
                    P.r.x /= ra;
                    P.r.y /= ra;
                    P.ⵠΔⲆᐃᐃⲆⲆ = 0;
                    P.ⲆΔΔⵠⲆᐃⵠ();
                    P.Δⵠᐃⵠ();
                    nx.ᐃΔΔ.x *= ra;
                    nx.ᐃΔΔ.y *= ra;
                    P.x *= ra;
                    P.y *= ra;
                    P.r.x *= ra;
                    P.r.y *= ra;
                    mo.restore();
                }
            }
            E = mx.ⲆⲆΔ[41];
            u = 0;
            for (; E.length > u; u++) {
                ef(E[u], 913);
            }
            var sa = mx.ⲆⲆΔ[67];
            for (u = 0; u < sa.length; u++) {
                ef(sa[u]);
            }
            var F = mx.ⲆⲆΔ[62];
            for (u = 0; F.length > u; u++) {
                ef(F[u], 419, 461);
            }
            var R = mx.ⲆⲆΔ[70];
            for (u = 0; R.length > u; u++) {
                ef(R[u]);
            }
            var j = mx.ⲆⲆΔ[60];
            for (u = 0; j.length > u; u++) {
                ef(j[u], 299, 326);
            }
            var G = mx.ⲆⲆΔ[72];
            for (u = 0; G.length > u; u++) {
                ef(G[u], 232, 1077);
            }
            var L = mx.ⲆⲆΔ[73];
            for (u = 0; u < L.length; u++) {
                ef(L[u], 233, 1092);
            }
            ha = mx.ⲆⲆΔ[44];
            u = 0;
            for (; u < ha.length; u++) {
                if (ha[u].info & 15 && ha[u].info !== 10) {
                    ef(ha[u]);
                }
            }
            ia = mx.ⲆⲆΔ[54];
            u = 0;
            for (; u < ia.length; u++) {
                if ((ia[u].info & 15) !== 0 && ia[u].info !== 10) {
                    ef(ia[u]);
                }
            }
            ja = mx.ⲆⲆΔ[89];
            u = 0;
            for (; ja.length > u; u++) {
                ef(ja[u], 239);
            }
            ja = mx.ⲆⲆΔ[55];
            u = 0;
            for (; ja.length > u; u++) {
                if ((ja[u].info & 15) !== 0 && ja[u].info !== 10) {
                    ef(ja[u]);
                }
            }
            p = mx.ⲆⲆΔ[43];
            u = 0;
            for (; p.length > u; u++) {
                qw(p[u]);
            }
            la = mx.ⲆⲆΔ[39];
            u = 0;
            for (; la.length > u; u++) {
                if ((la[u].info & 15) !== 0 && la[u].info !== 10) {
                    ef(la[u]);
                }
            }
            ma = mx.ⲆⲆΔ[40];
            u = 0;
            for (; u < ma.length; u++) {
                if ((ma[u].info & 15) !== 0 && ma[u].info !== 10) {
                    ef(ma[u]);
                }
            }
            na = mx.ⲆⲆΔ[37];
            u = 0;
            for (; na.length > u; u++) {
                if ((na[u].info & 15) !== 0 && na[u].info !== 10) {
                    ef(na[u]);
                }
            }
            var W = mx.ⲆⲆΔ[81];
            for (u = 0; W.length > u; u++) {
                ef(W[u], 691, 697);
            }
            var O = mx.ⲆⲆΔ[66];
            for (u = 0; u < O.length; u++) {
                ef(O[u], 637, 687);
            }
            var N = mx.ⲆⲆΔ[65];
            for (u = 0; u < N.length; u++) {
                ef(N[u], 673, 688);
            }
            var H = mx.ⲆⲆΔ[61];
            for (u = 0; H.length > u; u++) {
                ef(H[u], 260, 333);
            }
            var q = mx.ⲆⲆΔ[88];
            for (u = 0; q.length > u; u++) {
                ef(q[u], 1033, 1034);
            }
            var U = mx.ⲆⲆΔ[63];
            for (u = 0; U.length > u; u++) {
                ef(U[u], 445, 462);
            }
            var Y = mx.ⲆⲆΔ[77];
            for (u = 0; Y.length > u; u++) {
                ef(Y[u]);
            }
            var K = mx.ⲆⲆΔ[68];
            for (u = 0; K.length > u; u++) {
                ef(K[u], 918, 919);
            }
            var V = mx.ⲆⲆΔ[71];
            for (u = 0; u < V.length; u++) {
                ef(V[u]);
            }
            var X = mx.ⲆⲆΔ[78];
            for (u = 0; X.length > u; u++) {
                ef(X[u], 1218, 1219);
            }
            var ta = mx.ⲆⲆΔ[64];
            for (u = 0; u < ta.length; u++) {
                if (ta[u].scale === 1) {
                    ef(ta[u], 449, 463);
                }
            }
            ta = mx.ⲆⲆΔ[69];
            u = 0;
            for (; ta.length > u; u++) {
                if (ta[u].scale === 1) {
                    ef(ta[u], 450, 464);
                }
            }
            var ua = mx.ⲆⲆΔ[11];
            for (u = 0; u < ua.length; u++) {
                ef(ua[u]);
            }
            var va = mx.ⲆⲆΔ[2];
            for (u = 0; va.length > u; u++) {
                ef(va[u], 114);
            }
            l = mx.ⲆⲆΔ[18];
            u = 0;
            for (; u < l.length; u++) {
                ef(l[u]);
            }
            var wa = mx.ⲆⲆΔ[34];
            for (u = 0; u < wa.length; u++) {
                ef(wa[u]);
            }
            D = mx.ⲆⲆΔ[10];
            u = 0;
            for (; D.length > u; u++) {
                if (!(D[u].info & 1)) {
                    ef(D[u], 166);
                }
                D[u].ⵠᐃᐃᐃⲆ(D[u].info >> 1);
            }
            D = mx.ⲆⲆΔ[15];
            u = 0;
            for (; u < D.length; u++) {
                if (!(D[u].info & 1)) {
                    ef(D[u], 171);
                }
                D[u].ⵠᐃᐃᐃⲆ(D[u].info >> 1);
            }
            D = mx.ⲆⲆΔ[16];
            u = 0;
            for (; D.length > u; u++) {
                if (!(D[u].info & 1)) {
                    ef(D[u], 172);
                }
                D[u].ⵠᐃᐃᐃⲆ(D[u].info >> 1);
            }
            D = mx.ⲆⲆΔ[17];
            u = 0;
            for (; u < D.length; u++) {
                if (!(D[u].info & 1)) {
                    ef(D[u], 173);
                }
                D[u].ⵠᐃᐃᐃⲆ(D[u].info >> 1);
            }
            D = mx.ⲆⲆΔ[21];
            u = 0;
            for (; D.length > u; u++) {
                if (!(D[u].info & 1)) {
                    ef(D[u], 124);
                }
                D[u].ⵠᐃᐃᐃⲆ(D[u].info >> 1);
            }
            D = mx.ⲆⲆΔ[51];
            u = 0;
            for (; D.length > u; u++) {
                if (!(D[u].info & 1)) {
                    ef(D[u], 218);
                }
                D[u].ⵠᐃᐃᐃⲆ(D[u].info >> 1);
            }
            D = mx.ⲆⲆΔ[45];
            u = 0;
            for (; u < D.length; u++) {
                if (!(D[u].info & 1)) {
                    ef(D[u], 212);
                }
                D[u].ⵠᐃᐃᐃⲆ(D[u].info >> 1);
            }
            D = mx.ⲆⲆΔ[46];
            u = 0;
            for (; u < D.length; u++) {
                if (!(D[u].info & 1)) {
                    ef(D[u], 213);
                }
                D[u].ⵠᐃᐃᐃⲆ(D[u].info >> 1);
            }
            D = mx.ⲆⲆΔ[47];
            u = 0;
            for (; u < D.length; u++) {
                if (!(D[u].info & 1)) {
                    ef(D[u], 214);
                }
                D[u].ⵠᐃᐃᐃⲆ(D[u].info >> 1);
            }
            D = mx.ⲆⲆΔ[48];
            u = 0;
            for (; D.length > u; u++) {
                if (!(D[u].info & 1)) {
                    ef(D[u], 215);
                }
                D[u].ⵠᐃᐃᐃⲆ(D[u].info >> 1);
            }
            D = mx.ⲆⲆΔ[49];
            u = 0;
            for (; D.length > u; u++) {
                if (!(D[u].info & 1)) {
                    ef(D[u], 216);
                }
                D[u].ⵠᐃᐃᐃⲆ(D[u].info >> 1);
            }
            D = mx.ⲆⲆΔ[53];
            u = 0;
            for (; u < D.length; u++) {
                if (!(D[u].info & 1)) {
                    ef(D[u], 220);
                }
                D[u].ⵠᐃᐃᐃⲆ(D[u].info >> 1);
            }
            var xa = mx.ⲆⲆΔ[4];
            for (u = 0; u < xa.length; u++) {
                ef(xa[u], 162);
                xa[u].ⵠᐃᐃᐃⲆ(xa[u].info);
            }
            xa = mx.ⲆⲆΔ[7];
            u = 0;
            for (; u < xa.length; u++) {
                ef(xa[u], 163);
                xa[u].ⵠᐃᐃᐃⲆ(xa[u].info);
            }
            xa = mx.ⲆⲆΔ[8];
            u = 0;
            for (; u < xa.length; u++) {
                ef(xa[u], 164);
                xa[u].ⵠᐃᐃᐃⲆ(xa[u].info);
            }
            xa = mx.ⲆⲆΔ[9];
            u = 0;
            for (; xa.length > u; u++) {
                ef(xa[u], 165);
                xa[u].ⵠᐃᐃᐃⲆ(xa[u].info);
            }
            xa = mx.ⲆⲆΔ[19];
            u = 0;
            for (; xa.length > u; u++) {
                ef(xa[u], 122);
                xa[u].ⵠᐃᐃᐃⲆ(xa[u].info);
            }
            xa = mx.ⲆⲆΔ[50];
            u = 0;
            for (; xa.length > u; u++) {
                ef(xa[u], 217);
                xa[u].ⵠᐃᐃᐃⲆ(xa[u].info);
            }
            var ya = mx.ⲆⲆΔ[5];
            for (u = 0; ya.length > u; u++) {
                ef(ya[u], 160);
                ya[u].ⵠᐃᐃᐃⲆ(ya[u].info);
            }
            ya = mx.ⲆⲆΔ[12];
            u = 0;
            for (; ya.length > u; u++) {
                ef(ya[u], 168);
                ya[u].ⵠᐃᐃᐃⲆ(ya[u].info);
            }
            ya = mx.ⲆⲆΔ[13];
            u = 0;
            for (; ya.length > u; u++) {
                ef(ya[u], 169);
                ya[u].ⵠᐃᐃᐃⲆ(ya[u].info);
            }
            ya = mx.ⲆⲆΔ[14];
            u = 0;
            for (; u < ya.length; u++) {
                ef(ya[u], 170);
                ya[u].ⵠᐃᐃᐃⲆ(ya[u].info);
            }
            ya = mx.ⲆⲆΔ[20];
            u = 0;
            for (; u < ya.length; u++) {
                ef(ya[u], 123);
                ya[u].ⵠᐃᐃᐃⲆ(ya[u].info);
            }
            ya = mx.ⲆⲆΔ[52];
            u = 0;
            for (; ya.length > u; u++) {
                ef(ya[u], 219);
                ya[u].ⵠᐃᐃᐃⲆ(ya[u].info);
            }
            var za = mx.ⲆⲆΔ[35];
            for (u = 0; u < za.length; u++) {
                var Aa = za[u];
                if (Aa.info > 0) {
                    ef(Aa, 788);
                } else {
                    ef(Aa, 182);
                }
            }
            var Ba = mx.ⲆⲆΔ[29];
            for (u = 0; u < Ba.length; u++) {
                ef(Ba[u], 159);
            }
            zw(fw, i, t, f, e, 111, "g", 2);
            zw(fw, i, t, f, e, 415, "gw", 2);
            zw(fw, i, t, f, e, 112, "d", 2);
            zw(fw, i, t, f, e, 416, "dw", 2);
            zw(fw, i, t, f, e, 110, "p", 0);
            zw(fw, i, t, f, e, 241, "m", 2);
            zw(fw, i, t, f, e, 121, "a", 2);
            zw(fw, i, t, f, e, 202, "re", 2);
            zw(fw, i, t, f, e, 679, "cs", 3, 3);
            zw(fw, i, t, f, e, 679, "cs", 2, 2);
            zw(fw, i, t, f, e, 679, "cs", 1, 1);
            zw(fw, i, t, f, e, 679, "cs", 0, 0);
            zw(fw, i, t, f, e, 676, "cs", 3, 3);
            zw(fw, i, t, f, e, 676, "cs", 2, 2);
            zw(fw, i, t, f, e, 676, "cs", 1, 1);
            zw(fw, i, t, f, e, 676, "cs", 0, 0);
            var Ca = mx.ⲆⲆΔ[100];
            for (u = 0; Ca.length > u; u++) {
                for (aa = 0; aa < Ca[u].info; aa++) {
                    ef(Ca[u].ⵠᐃⵠⲆ[aa], 294);
                }
            }
            zw(fw, i, t, f, e, 108, "s", 2);
            var Da = mx.ⲆⲆΔ[24];
            for (u = 0; Da.length > u; u++) {
                ef(Da[u]);
            }
            Da = mx.ⲆⲆΔ[25];
            u = 0;
            for (; u < Da.length; u++) {
                ef(Da[u]);
            }
            Da = mx.ⲆⲆΔ[26];
            u = 0;
            for (; u < Da.length; u++) {
                ef(Da[u]);
            }
            Da = mx.ⲆⲆΔ[27];
            u = 0;
            for (; u < Da.length; u++) {
                ef(Da[u]);
            }
            Da = mx.ⲆⲆΔ[28];
            u = 0;
            for (; u < Da.length; u++) {
                ef(Da[u]);
            }
            var Ea = mx.ⲆⲆΔ[32];
            for (u = 0; u < Ea.length; u++) {
                yw(Ea[u]);
            }
            ca = mx.ⲆⲆΔ[1];
            u = 0;
            for (; ca.length > u; u++) {
                qw(ca[u]);
            }
            ca = mx.ⲆⲆΔ[6];
            u = 0;
            for (; ca.length > u; u++) {
                qw(ca[u]);
            }
            l = mx.ⲆⲆΔ[18];
            u = 0;
            for (; u < l.length; u++) {
                if (l[u].action == 2) {
                    qw(l[u]);
                }
            }
            wa = mx.ⲆⲆΔ[34];
            u = 0;
            for (; wa.length > u; u++) {
                qw(wa[u]);
            }
            da = mx.ⲆⲆΔ[22];
            u = 0;
            for (; u < da.length; u++) {
                qw(da[u]);
            }
            ea = mx.ⲆⲆΔ[23];
            u = 0;
            for (; u < ea.length; u++) {
                qw(ea[u]);
                ea[u].ⵠᐃᐃᐃⲆ(ea[u].info);
            }
            zw(fw, i, t, f, e, 989, "c", 0);
            zw(fw, i, t, f, e, 109, "t", 5, 4);
            zw(fw, i, t, f, e, 413, "f", 2, 2);
            zw(fw, i, t, f, e, 693, "plm", 0, 0);
            zw(fw, i, t, f, e, 307, "b", 3, 2);
            zw(fw, i, t, f, e, 109, "t", 3, 2);
            zw(fw, i, t, f, e, 307, "b", 1, 0);
            zw(fw, i, t, f, e, 413, "f", 1, 1);
            zw(fw, i, t, f, e, 693, "plm", 1, 1);
            zw(fw, i, t, f, e, 109, "t", 1, 0);
            zw(fw, i, t, f, e, 413, "f", 0, 0);
            zw(fw, i, t, f, e, 693, "plm", 2, 2);
            Ea = mx.ⲆⲆΔ[32];
            u = 0;
            for (; u < Ea.length; u++) {
                qw(Ea[u]);
            }
            var Fa = mx.ⲆⲆΔ[56];
            for (u = 0; Fa.length > u; u++) {
                ef(Fa[u], 221);
            }
            B = mx.ⲆⲆΔ[0];
            u = 0;
            for (; u < B.length; u++) {
                if ((P = B[u]).ΔΔⵠⵠⲆⵠⵠ === 1 && (P.ΔⵠⲆⲆⲆ < 180 || P.ΔᐃΔⲆᐃ !== 227 && P.ΔᐃΔⲆᐃ !== 228 && P.ΔᐃΔⲆᐃ !== 91 && P.ΔᐃΔⲆᐃ !== 229 && P.ΔᐃΔⲆᐃ !== 230)) {
                    P.ⵠⵠⵠⲆΔⵠⲆ = Z.ΔⵠⵠΔⵠⲆⲆ(P.ⵠⵠⵠⲆΔⵠⲆ, 100, 0.018);
                    ra = 1 + Math.min(1, Math.max(P.ⵠⵠⵠⲆΔⵠⲆ, 0) / 100) * 0.18;
                    mo.save();
                    mo.scale(ra, ra);
                    nx.ᐃΔΔ.x /= ra;
                    nx.ᐃΔΔ.y /= ra;
                    P.x /= ra;
                    P.y /= ra;
                    P.r.x /= ra;
                    P.r.y /= ra;
                    P.ⲆΔΔⵠⲆᐃⵠ();
                    P.Δⵠᐃⵠ();
                    nx.ᐃΔΔ.x *= ra;
                    nx.ᐃΔΔ.y *= ra;
                    P.x *= ra;
                    P.y *= ra;
                    P.r.x *= ra;
                    P.r.y *= ra;
                    mo.restore();
                }
            }
            var Ga = mx.ⲆⲆΔ[38];
            for (u = 0; Ga.length > u; u++) {
                ef(Ga[u], 190);
                Ga[u].ⵠᐃᐃᐃⲆ(Ga[u].info);
            }
            var Ha = mx.ⲆⲆΔ[90];
            for (u = 0; u < Ha.length; u++) {
                ef(Ha[u], 245, 246);
            }
            var Ia = mx.ⲆⲆΔ[42];
            for (u = 0; Ia.length > u; u++) {
                ef(Ia[u], 201);
            }
            B = mx.ⲆⲆΔ[0];
            u = 0;
            for (; B.length > u; u++) {
                if (((P = B[u]).ΔᐃΔⲆᐃ === 227 || P.ΔᐃΔⲆᐃ === 228 || P.ΔᐃΔⲆᐃ === 91 || P.ΔᐃΔⲆᐃ === 229 || P.ΔᐃΔⲆᐃ === 230) && P.ΔⵠⲆⲆⲆ > 180) {
                    P.ⵠΔⲆᐃᐃⲆⲆ = 1;
                    mo.save();
                    ra = 1 + Math.min(1, Math.max(P.ᐃⲆᐃΔᐃ - 30, 0) / 180) * 0.35;
                    mo.scale(ra, ra);
                    nx.ᐃΔΔ.x /= ra;
                    nx.ᐃΔΔ.y /= ra;
                    P.x /= ra;
                    P.y /= ra;
                    P.r.x /= ra;
                    P.r.y /= ra;
                    P.ⲆΔΔⵠⲆᐃⵠ();
                    P.Δⵠᐃⵠ();
                    nx.ᐃΔΔ.x *= ra;
                    nx.ᐃΔΔ.y *= ra;
                    P.x *= ra;
                    P.y *= ra;
                    P.r.x *= ra;
                    P.r.y *= ra;
                    mo.restore();
                }
            }
            qa = mx.ⲆⲆΔ[91];
            u = 0;
            for (; u < qa.length; u++) {
                if (qa[u].ⵠΔⲆᐃᐃⲆⲆ === 1) {
                    ef(qa[u]);
                }
            }
            ta = mx.ⲆⲆΔ[64];
            u = 0;
            for (; u < ta.length; u++) {
                if (ta[u].scale > 1) {
                    ef(ta[u], 449, 463);
                }
            }
            ta = mx.ⲆⲆΔ[69];
            u = 0;
            for (; u < ta.length; u++) {
                if (ta[u].scale > 1) {
                    ef(ta[u], 450, 464);
                }
            }
            var Ja = mx.ⲆⲆΔ[74];
            for (u = 0; u < Ja.length; u++) {
                ef(Ja[u], 235, 1107);
            }
            var Ka = mx.ⲆⲆΔ[75];
            for (u = 0; Ka.length > u; u++) {
                ef(Ka[u], 238, 1128);
            }
            if ((_v += tx * 15) > 60) {
                _v -= 60;
            }
            zw(aw, i, t, f, e, 1041, "fo", 2);
            zw(aw, i, t, f, e, 244, "fod", 2);
        })();
        if (jx.ⵠᐃᐃᐃⵠ && mx.mode !== 2 && mx.mode !== 4 && mx.mode !== 5) {
            (function () {
                var a = nx.ΔⵠᐃᐃⲆ;
                if (a.ᐃⲆⵠᐃΔ === 0) {
                    a.ⲆΔᐃⵠⲆ = Math.max(0, a.ⲆΔᐃⵠⲆ - tx / 10);
                } else {
                    a.ⲆΔᐃⵠⲆ = Math.min(1, a.ⲆΔᐃⵠⲆ + tx / 10);
                }
                for (var b = a.ⲆⵠⵠⲆᐃ, c = 0; c < b.length; c++) {
                    var d = b[c];
                    a.ᐃⵠⲆ(d);
                    tw(471, d.id, nx.ᐃΔΔ.x + d.x, nx.ᐃΔΔ.y + d.y, d.alpha);
                }
                for (c = 0; b.length > c; c++) {
                    d = b[c];
                    if (d.Ⲇⵠⵠⵠⵠ <= 0 || -nx.ᐃΔΔ.x + no < d.x || d.x < -nx.ᐃΔΔ.x - nx.ᐃΔΔ.w / 2 || -nx.ᐃΔΔ.y + oo < d.y) {
                        b.splice(c, 1);
                    }
                }
                var e = -nx.ᐃΔΔ.y;
                if (mx.ⲆᐃᐃⵠΔ > -1000) {
                    a.add(e);
                }
            })();
            (function () {
                var a = nx.ⵠᐃⵠᐃⲆ;
                if (a.ᐃⲆⵠᐃΔ === 0) {
                    a.ⲆΔᐃⵠⲆ = Math.max(0, a.ⲆΔᐃⵠⲆ - tx / 10);
                } else {
                    a.ⲆΔᐃⵠⲆ = Math.min(1, a.ⲆΔᐃⵠⲆ + tx / 10);
                }
                for (var b = a.ⲆⵠⵠⲆᐃ, c = 0; c < b.length; c++) {
                    var d = b[c];
                    a.ᐃⵠⲆ(d);
                    tw(470, d.id, nx.ᐃΔΔ.x + d.x, nx.ᐃΔΔ.y + d.y, d.alpha);
                }
                for (c = 0; b.length > c; c++) {
                    if ((d = b[c]).Ⲇⵠⵠⵠⵠ <= 0 || -nx.ᐃΔΔ.x + no < d.x || -nx.ᐃΔΔ.x > d.x || -nx.ᐃΔΔ.y + oo < d.y) {
                        b.splice(c, 1);
                    }
                }
                var e = -nx.ᐃΔΔ.y;
                if (mx.ⲆⵠΔⵠΔ > -1000) {
                    a.add(e);
                }
            })();
            (function () {
                var a = nx.ᐃⲆⵠᐃⵠⲆᐃ;
                for (var b = a.ⲆⵠⵠⲆᐃ, c = 0; c < b.length; c++) {
                    var d = b[c];
                    a.ᐃⵠⲆ(d);
                    tw(942, d.id, nx.ᐃΔΔ.x + d.x, nx.ᐃΔΔ.y + d.y, d.alpha);
                }
                for (c = 0; c < b.length; c++) {
                    d = b[c];
                    if (d.Ⲇⵠⵠⵠⵠ <= 0 || -nx.ᐃΔΔ.x + no < d.x || -nx.ᐃΔΔ.x > d.x || -nx.ᐃΔΔ.y + oo < d.y) {
                        b.splice(c, 1);
                    }
                }
                var e = -nx.ᐃΔΔ.y;
                if (mx.ⲆᐃᐃᐃⲆ > -1000) {
                    a.add(e);
                }
            })();
        }
        if (mx.transition && a) {
            mx.transition = false;
            mx.ΔⵠⵠΔ.ΔⲆᐃ = 0;
            mx.ΔⵠⵠΔ.ᐃⵠΔ = ca;
        }
    }
    function ww(a, b, c, d) {
        if (mx.transition) {
            mo.globalAlpha = 1;
            Cp(mo, ΔⲆ[a][mx.time], c, d);
            mx.time = mx.time ? 0 : 1;
            mo.globalAlpha = 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ;
            Cp(mo, ΔⲆ[a][mx.time], c, d);
            mx.time = mx.time ? 0 : 1;
            mo.globalAlpha = 1;
        } else {
            Cp(mo, b, c, d);
        }
    }
    function xw(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = nx.ᐃΔΔ.y + f + 710;
        var l = Math.max(nx.ᐃΔΔ.x + e, 0);
        var g = Math.max(-nx.ᐃΔΔ.x + no - i - 100, 0);
        var r = l;
        var b = no - l - g;
        if (n) {
            var d = j.ⵠᐃⲆ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += -d + 0 + 2;
        if (n) {
            d = j.ⵠᐃⲆ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h - 250 - s - d;
        var u = (s += t + 2) - 2;
        if (n) {
            d = j.ⵠᐃⲆ(q).x;
        } else {
            d = q.r.x;
        }
        if (u > s + (t = h - 350 - s - d)) {
            s += t + 2;
        } else {
            s = u;
        }
        t = h - 700 - s;
        if (n > 0 && k.ΔⲆᐃᐃᐃⵠΔ === 1) {
            if (mx.transition) {
                var p = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                mo.fillStyle = Cw(15, 77, 72, 252, 239, 187, p);
            } else {
                mo.fillStyle = _r.ⲆᐃⵠⲆᐃᐃⲆ[mx.time];
            }
            mo.fillRect(r, s, b, t);
        } else {
            if (mx.transition) {
                p = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                mo.fillStyle = Cw(k.ⵠΔΔ[0], k.ⵠΔΔ[1], k.ⵠΔΔ[2], k.ΔᐃⲆ[0], k.ΔᐃⲆ[1], k.ΔᐃⲆ[2], p);
            } else {
                mo.fillStyle = k.ᐃⵠⵠⵠᐃ[mx.time];
            }
            mo.fillRect(r, s, b, t);
        }
    }
    function yw(a, b) {
        if (mx.transition) {
            mo.globalAlpha = 1;
            a.ⵠⵠᐃⵠᐃ(b);
            mx.time = mx.time ? 0 : 1;
            mo.globalAlpha = 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ;
            a.ⵠⵠᐃⵠᐃ(b);
            mx.time = mx.time ? 0 : 1;
            mo.globalAlpha = 1;
        } else {
            a.ⵠⵠᐃⵠᐃ(b);
        }
    }
    function zw(b, c, d, e, f, g, a, i, j, h) {
        if (mx.transition) {
            mo.globalAlpha = 1;
            b(c, d, e, f, g, a, i, j, h);
            mx.time = mx.time ? 0 : 1;
            mo.globalAlpha = 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ;
            b(c, d, e, f, g, a, i, j, h);
            mx.time = mx.time ? 0 : 1;
            mo.globalAlpha = 1;
        } else {
            b(c, d, e, f, g, a, i, j, h);
        }
    }
    function Aw(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = nx.ᐃΔΔ.x + f + 820;
        var l = Math.max(nx.ᐃΔΔ.y + e, 0);
        var g = Math.max(-nx.ᐃΔΔ.y + oo - i - 100, 0);
        var r = l;
        var b = oo - l - g;
        if (n) {
            var d = j.ⵠᐃⲆ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += -d + 0 + 2;
        if (n) {
            d = j.ⵠᐃⲆ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h - 250 - s - d;
        var u = (s += t + 2) - 2;
        if (n) {
            d = j.ⵠᐃⲆ(q).x;
        } else {
            d = q.r.x;
        }
        if (u > s + (t = h - 350 - s - d)) {
            s += t + 2;
        } else {
            s = u;
        }
        t = h - 700 - s;
        if (n > 0 && k.ΔⲆᐃᐃᐃⵠΔ === 1) {
            if (mx.transition) {
                var p = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                mo.fillStyle = Cw(15, 77, 72, 252, 239, 187, p);
            } else {
                mo.fillStyle = _r.ⲆᐃⵠⲆᐃᐃⲆ[mx.time];
            }
            mo.fillRect(s, r, t, b);
        } else {
            if (mx.transition) {
                p = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                mo.fillStyle = Cw(k.ⵠΔΔ[0], k.ⵠΔΔ[1], k.ⵠΔΔ[2], k.ΔᐃⲆ[0], k.ΔᐃⲆ[1], k.ΔᐃⲆ[2], p);
            } else {
                mo.fillStyle = k.ᐃⵠⵠⵠᐃ[mx.time];
            }
            mo.fillRect(s, r, t, b);
        }
    }
    function Bw(a) {
        mo.save();
        mo.translate(nx.ᐃΔΔ.x + a.x, nx.ᐃΔΔ.y + a.y);
        mo.rotate(a.angle);
        mo.globalAlpha = a.alpha;
        var b = ΔⲆ[a.id][mx.time];
        Cp(mo, b, -b.width / 2, -b.height / 2);
        mo.globalAlpha = 1;
        mo.restore();
    }
    function Cw(b, c, d, e, f, g, a) {
        var i;
        var j = "#";
        j += (i = Math.floor(a * e + (1 - a) * b)) < 16 ? "0" + i.toString(16) : i.toString(16);
        j += (i = Math.floor(a * f + c * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
        return j += (i = Math.floor(g * a + (1 - a) * d)) < 16 ? "0" + i.toString(16) : i.toString(16);
    }
    function ef(a, b, c) {
        if (mx.transition) {
            mo.globalAlpha = 1;
            a.Δⵠᐃⵠ(b, c);
            mx.time = mx.time ? 0 : 1;
            mo.globalAlpha = 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ;
            a.Δⵠᐃⵠ(b, c);
            mx.time = mx.time ? 0 : 1;
            mo.globalAlpha = 1;
        } else {
            a.Δⵠᐃⵠ(b, c);
        }
    }
    function tf(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = nx.ᐃΔΔ.y + f - 700;
        var l = Math.max(nx.ᐃΔΔ.x + e, 0);
        var g = Math.max(-nx.ᐃΔΔ.x + no - i - 100, 0);
        var r = l;
        var b = no - l - g;
        if (n) {
            var d = j.ⵠᐃⲆ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += d + 0 - 2;
        if (n) {
            d = j.ⵠᐃⲆ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h + 250 - s + d;
        var u = (s += t - 2) - 2;
        if (n) {
            d = j.ⵠᐃⲆ(q).x;
        } else {
            d = q.r.x;
        }
        if (s + (t = h + 350 - s + d) - 3 > u) {
            s += t - 2;
        } else {
            s = u;
        }
        t = h + 700 - s;
        if (n > 0 && k.ΔⲆᐃᐃᐃⵠΔ === 1) {
            if (mx.transition) {
                var p = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                mo.fillStyle = Cw(15, 77, 72, 252, 239, 187, p);
            } else {
                mo.fillStyle = _r.ⲆᐃⵠⲆᐃᐃⲆ[mx.time];
            }
            mo.fillRect(r, s, b, t);
        } else {
            if (mx.transition) {
                p = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                mo.fillStyle = Cw(k.ⵠΔΔ[0], k.ⵠΔΔ[1], k.ⵠΔΔ[2], k.ΔᐃⲆ[0], k.ΔᐃⲆ[1], k.ΔᐃⲆ[2], p);
            } else {
                mo.fillStyle = k.ᐃⵠⵠⵠᐃ[mx.time];
            }
            mo.fillRect(r, s, b, t);
        }
    }
    var nf = 0;
    var of = 1;
    var af = 2;
    var rf = 0;
    var sf = 1;
    var hf = 2;
    function lf(a, b) {
        var c = a.getBoundingClientRect();
        return {
            x: b.clientX - c.left,
            y: b.clientY - c.top
        };
    }
    function gf(b, c, d, e) {
        const f = (2531011 + (14508 + b) * 214013) % 4294967296;
        const g = ((c + 4449) * 1664525 + 1013904223) % 4294967296;
        const a = (d | 4105) & ~(d & 4105);
        const i = (2531011 + (43647 + e) * 214013) % 4294967296;
        const j = ft(f, g, a, i, f);
        ao(g, a, i, f, g);
        return j ^ 42854;
    }
    function uf(b, c, d, e, f) {
        var g = {
            x: d,
            y: e,
            ΔΔⲆⵠⵠ: d,
            ΔΔⵠΔᐃ: e
        };
        return {
            translate: g,
            Δⵠᐃⵠ: function (a) {
                Cp(a, b, g.x, g.y, b.width / 2, b.height / 2);
            },
            active: c,
            position: f
        };
    }
    function bf(f, j, i, k, n, q, a, t, u, w, l, g, b, d, x) {
        if (f.length === 0) {
            f = " ";
        }
        if (a === gs) {
            a = 0;
        }
        if (Jt === t) {
            t = 0;
        }
        if (u === undefined) {
            u = 0;
        }
        if (_h === d) {
            d = 0;
        }
        var c = document.createElement("canvas");
        var m = c.getContext("2d");
        m.textBaseline = "middle";
        m.font = (x !== undefined ? x + " " : "") + k + "px " + j;
        n = n !== undefined ? Math.min(m.measureText(f).width, n) : m.measureText(f).width;
        c.width = n + a;
        c.height = k + t;
        if (od !== q) {
            if (l !== undefined) {
                m.globalAlpha = l;
            }
            m.fillStyle = q;
            if (Vs !== g) {
                ⲆⲆⵠⲆⲆⲆΔᐃΔ(m, u + 2, u, n + a - u * 2 - 4, k + t - u * 2, g);
                m.fill();
            } else {
                m.fillRect(u, u, n + a - u * 2, k + t - u * 2);
            }
            m.globalAlpha = 1;
            if (u !== 0) {
                m.lineWidth = u;
                m.strokeStyle = w;
                m.stroke();
            }
        }
        m.textBaseline = "middle";
        m.font = (x !== undefined ? x + " " : "") + k + "px " + j;
        if (b !== undefined) {
            m.strokeStyle = b;
            m.lineWidth = d;
            m.lineJoin = "miter";
            m.miterLimit = 2;
            m.strokeText(f, Math.floor(a / 2), Math.floor(t / 2) + Math.floor(k / 2), n);
        }
        m.fillStyle = i;
        m.fillText(f, Math.floor(a / 2), Math.floor(t / 2) + Math.floor(k / 2), n);
        c.w2 = c.width / 2;
        c.ᐃᐃⵠΔΔ = c.height / 2;
        return c;
    }
    function df(f, e, i, j, k, m, n, p, q, r, t) {
        if (q === Pg) {
            q = 0;
        }
        if (p === gs) {
            p = 0;
        }
        if (r === undefined) {
            r = 0;
        }
        if (gs === t) {
            t = 1;
        }
        if (m !== 1) {
            m = 0;
        }
        if (j) {
            var w = j;
        }
        var u;
        var x = {
            width: f,
            height: e,
            ᐃⲆ: w,
            state: rf,
            translate: {
                x: p,
                y: q,
                ΔΔⲆⵠⵠ: p,
                ΔΔⵠΔᐃ: q
            },
            ⵠⵠⵠⵠΔⲆⵠⲆⲆ: m,
            ⲆⵠⲆᐃ: 0,
            callback: n,
            position: r,
            active: t
        };
        function d() {
            return x.ᐃⲆ[x.state];
        }
        function v(a) {
            var b = x.translate;
            if (x.width === 0 || x.height === 0) {
                x.width = x.ᐃⲆ[0].width;
                x.height = x.ᐃⲆ[0].height;
            }
            return a.x > b.x && a.x < b.x + x.width / k && a.y > b.y && a.y < b.y + x.height / k;
        }
        m = function () {
            var a = 0;
            if (x.ⵠⵠⵠⵠΔⲆⵠⲆⲆ === 1) {
                if (sf === x.state || x.state === hf) {
                    x.ⲆⵠⲆᐃ = (0 + tx * 1000) % 1000;
                } else if (0 < 0) {
                    x.ⲆⵠⲆᐃ = 0 > 500 ? 0 + tx * 1000 : 0 - tx * 1000;
                    if (0 < 0 || 1000 < 0) {
                        x.ⲆⵠⲆᐃ = 0;
                    }
                }
                a = Z.ᐃⵠΔᐃΔ(0 > 500 ? 2 : 0) * 0.2;
            }
            return a;
        };
        if ((k = k === 3 ? 3 : k === 1 ? 2 : 1) === 2) {
            u = function (a) {
                var b = 1 + m();
                var c = d();
                var e = b * x.width / 2;
                var f = x.height * b / 2;
                var g = (e - x.width / 2) / 2;
                var h = (f - x.height / 2) / 2;
                Cp(a, c, x.translate.x - g, x.translate.y - h, e, f);
            };
        } else if (k === 3) {
            u = function (b) {
                var c = d();
                var e = x.width;
                var f = x.height;
                var g = (e - x.width) / 2;
                var h = (f - x.height) / 2;
                Cp(b, c, x.translate.x - g, x.translate.y - h, e, f);
            };
            k = 1;
        } else {
            u = function (a) {
                Cp(a, d(), x.translate.x, x.translate.y);
            };
        }
        return {
            info: x,
            ⵠⵠΔΔ: function (a, b, c) {
                if (v(b)) {
                    if (of == c) {
                        x.state = hf;
                    } else if (c == af || c == nf && hf != x.state) {
                        x.state = sf;
                    }
                    return true;
                } else {
                    x.state = rf;
                    return false;
                }
            },
            Δⵠᐃⵠ: u,
            ΔⵠⵠⲆⲆⲆⵠ: v
        };
    }
    function vf(b, c, d, e, f) {
        const i = ~(b & 9827) & (b | 9827);
        const a = (8 << (c >> 8 & 255)) + (0 << (c >> 16 & 255)) + (24 << (c & 255)) + (16 << (c >> 24 & 255));
        const j = d ^ 18843;
        const k = (16 << (e >> 16 & 255)) + (0 << (e & 255)) + (8 << (e >> 8 & 255)) + (24 << (e >> 24 & 255));
        const h = ~(f & 61887) & (f | 61887);
        const l = gf(i, a, j, k);
        (function (b, c, d, e, f, g) {
            const a = (1013904223 + (e + 23128) * 1664525) % 4294967296;
            const i = ~(f & 28135) & f | ~(f & 28135) & 28135;
            const j = function (b, c, d) {
                const e = ~(b & 29495) & 29495 | ~(b & 29495) & b;
                const f = (1 + (43291 + c) * 22695477) % 4294967296;
                const g = ((3519 + d) * 2147483629 + 2147483587) % 2147483647;
                const a = function (b, c, d, e) {
                    const f = (2147483587 + (b + 46040) * 2147483629) % 2147483647;
                    const g = ((59999 + c) * 2147483629 + 2147483587) % 2147483647;
                    const a = (12345 + (195 + d) * 1103515245) % 2147483648;
                    const i = (2531011 + (23535 + e) * 214013) % 4294967296;
                    const j = hx(f, g);
                    eo(a, i, f, g);
                    return ~(j & 11655) & (j | 11655);
                }(e, f, g, e);
                const h = hx(f, g);
                return (8 << ((a ^ h) >> 24 & 255)) + (0 << ((a ^ h) >> 16 & 255)) + (24 << ((a ^ h) >> 8 & 255)) + (16 << ((a ^ h) & 255));
            }(~(b & 21628) & 21628 | ~(b & 21628) & b, (c | 29576) & ~(c & 29576), ~(d & 25465) & (d | 25465));
            Cr(a, i);
        })(h, i, a, j, k);
        return (l | 50150) & ~(l & 50150);
    }
    var cf = "send";
    var mf = Z.ᐃΔᐃⵠΔΔⲆ("id") === "1" ? 1 : 0;
    var pf = Z.ᐃΔᐃⵠΔΔⲆ("password");
    var Cf = Z.ᐃΔᐃⵠΔΔⲆ("debug") || _a;
    if (Cf !== undefined) {
        Cf = JSON.parse(Gf.decodeURIComponent(Cf));
    }
    var Dw = Z.ᐃΔᐃⵠΔΔⲆ("server") || undefined;
    var ff = Z.ᐃΔᐃⵠΔΔⲆ("region") || yl;
    var zf = "starve.io";
    var yf = "https://" + zf;
    var wf = {
        ⵠΔⵠᐃⲆᐃⵠ: 128,
        ᐃᐃⵠⵠⲆΔⵠ: 32,
        ᐃᐃΔΔ: 2,
        ᐃΔΔⵠⲆⵠⲆ: 256,
        ⵠΔᐃᐃⲆⵠⵠΔᐃ: 1,
        ΔⲆⲆⵠᐃ: 4,
        IDLE: 64,
        ΔⵠⲆΔⲆⵠⵠ: 16,
        ΔᐃⵠⲆΔΔⲆ: 8
    };
    var Pf = [{
        ΔᐃᐃΔᐃ: 1000,
        items: [[2, 113], [1, 117], [8, 110], [1, 143]]
    }, {
        ΔᐃᐃΔᐃ: 2000,
        items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
    }, {
        ΔᐃᐃΔᐃ: 4000,
        items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
    }, {
        ΔᐃᐃΔᐃ: 8000,
        items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
    }, {
        ΔᐃᐃΔᐃ: 16000,
        items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
    }, {
        ΔᐃᐃΔᐃ: 16000,
        items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
    }, {
        ΔᐃᐃΔᐃ: 16000,
        items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
    }, {
        ΔᐃᐃΔᐃ: 16000,
        items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
    }, {
        ΔᐃᐃΔᐃ: 16000,
        items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
    }, {
        ΔᐃᐃΔᐃ: 20000,
        items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
    }];
    const Af = [];
    let kf = 0;
    var Ew = {
        ⵠⲆΔᐃΔⵠⵠⲆΔ: 14,
        ⵠⵠᐃΔΔⲆᐃ: 600000,
        ᐃⲆⵠⲆⵠⲆⲆ: 1,
        ⲆΔⵠΔⲆᐃⲆⲆⵠ: 5,
        ⵠⵠⲆⵠΔⲆΔⲆⲆ: 0.58,
        ΔΔⵠⵠⲆᐃⲆⵠᐃ: 8000,
        ⲆΔΔΔⵠᐃᐃ: 3,
        ⲆⲆⲆᐃΔⵠᐃⲆΔ: 3,
        ⵠⲆΔᐃⵠⲆΔ: 52,
        ᐃⲆΔΔⲆᐃⲆⲆⲆ: 125000,
        ΔΔⵠᐃⵠⲆⵠ: 0,
        ᐃⲆΔᐃΔΔⲆᐃⵠ: 25,
        ⲆᐃᐃΔⵠΔΔ: 0.2,
        ᐃⲆᐃΔⵠᐃᐃΔᐃ: "[" + 6 + "]",
        ΔⲆᐃᐃΔⲆⲆᐃΔ: 50,
        ᐃᐃΔᐃᐃⵠᐃ: 4,
        ⲆᐃⲆⵠⵠⵠᐃᐃⲆ: 60000,
        ΔⲆⵠΔⲆΔⲆ: 4,
        ⲆΔⲆᐃᐃⵠⵠⵠΔ: 14,
        ΔⵠⲆΔⲆⵠⵠ: 0.2,
        ⲆⵠⲆⲆⵠΔⵠⲆⲆ: 5,
        ᐃⵠΔᐃᐃᐃⵠᐃⵠ: 2000,
        ᐃⵠⲆⵠⵠΔⲆᐃⵠ: 20,
        ⲆⲆΔΔⵠᐃⵠⵠΔ: 200,
        ᐃⲆΔⵠⲆᐃⲆ: 2
    };
    var Jf = {
        ΔΔⵠ: 480000,
        ᐃᐃⵠΔⵠⵠⵠ: 10,
        ⵠΔⲆΔⵠⵠⵠ: 16,
        ᐃᐃᐃⲆⲆΔΔΔⵠ: 6,
        ⵠᐃⵠⵠⲆΔⵠ: 60,
        ⵠΔΔⵠⵠ: 1,
        ⵠⵠⲆⵠΔ: 2,
        ΔΔⲆⵠⲆ: 4,
        ⲆⵠⵠΔᐃ: 8,
        ⲆᐃᐃΔⵠΔΔ: 10,
        ⲆⲆⵠⲆⲆⲆᐃ: 100,
        ΔⵠΔΔⲆⵠΔ: 100,
        ⵠⲆⵠⲆΔⲆⵠ: 100,
        ⲆᐃⲆᐃΔᐃⵠΔΔ: 100,
        ⲆᐃΔⵠᐃⲆⲆ: 100,
        ⵠΔᐃⲆᐃΔᐃ: 100,
        ᐃᐃᐃΔⵠΔⵠΔⲆ: 100,
        ⵠΔᐃⲆᐃΔᐃ: 100,
        ⲆΔᐃᐃⲆᐃᐃ: 100,
        ΔⲆΔⲆΔΔⵠ: 100,
        ⲆⲆⵠⲆⲆ: 0,
        ⲆⵠⵠᐃΔΔᐃ: 1,
        ᐃΔΔᐃⲆ: 2,
        ⵠΔᐃⲆΔ: 3,
        ᐃⵠⲆⲆⵠ: 4,
        ᐃⵠⵠⵠⲆΔΔ: 5,
        ᐃΔⵠΔⲆ: 6,
        ⵠⵠᐃⵠⲆ: 7,
        ᐃΔΔⲆⵠΔⲆᐃⵠ: {
            losangeles: "Los Angeles",
            atlanta: "Atlanta",
            osaka: "Osaka",
            frankfurt: "Frankfurt",
            sydney: "Sydney"
        },
        ⵠⲆⵠⲆⵠⵠΔ: {
            0: "normal",
            2: "zombies",
            3: "vampires",
            4: "forest",
            6: "community",
            7: "experimental"
        },
        ⲆΔᐃⲆᐃⲆΔ: 0,
        ΔⲆᐃⵠᐃΔⲆ: 0,
        ᐃⲆⵠᐃᐃΔⲆ: 30,
        ᐃⵠᐃⲆⵠΔⲆΔⲆ: 2,
        ⵠᐃⵠⵠⲆΔⵠ: 60000,
        ⵠⲆⲆⵠᐃⵠⲆⵠⵠ: 0,
        ⵠΔⵠⲆⲆⵠⲆΔᐃ: 0,
        ΔⵠⲆⲆⲆⲆΔΔⲆ: 50,
        ⵠΔⵠΔⵠⲆⵠⵠᐃ: 0,
        ⵠᐃⵠΔⵠⵠΔⲆⲆ: 40,
        ⲆⲆⲆⲆΔΔⵠⲆᐃ: 39,
        ΔΔᐃⲆΔΔⲆᐃΔ: 830,
        ⵠᐃⲆᐃᐃΔᐃ: 25,
        ⲆΔⵠⲆⵠᐃⵠ: 8,
        ⵠᐃⵠⲆᐃ: 0,
        ΔᐃⲆΔⲆ: 0,
        ⲆⲆⲆⲆⵠΔΔ: 200,
        ΔΔⲆⲆⵠⲆᐃ: 0,
        ΔⲆⲆⲆᐃ: 250,
        ΔⲆⵠⲆⵠᐃⲆ: 150,
        ᐃⵠⵠⲆᐃⵠᐃ: 0,
        ⲆᐃⵠΔⵠ: 350,
        ⵠⲆⲆⲆᐃΔⲆ: 100,
        ⵠⲆⲆΔΔᐃΔ: 700,
        ⲆⵠⵠΔΔ: 39879
    };
    var Mf = [];
    for (wb = 0; wb < 500; wb++) {
        Mf[wb] = 0;
    }
    Mf[47] = 1;
    Mf[57] = 1;
    Mf[0] = 1;
    Mf[5] = 1;
    Mf[6] = 1;
    Mf[30] = 1;
    Mf[19] = 1;
    Mf[9] = 1;
    Mf[62] = 1;
    Mf[63] = 1;
    Mf[13] = 1;
    Mf[14] = 1;
    Mf[15] = 1;
    Mf[33] = 1;
    function Bf(a) {
        return Gf.String.fromCharCode(a);
    }
    Mf[34] = 1;
    Mf[16] = 1;
    Mf[17] = 1;
    Mf[12] = 1;
    Mf[18] = 1;
    var Df = [{
        time: 2880000
    }, {
        time: 1440000
    }, {
        time: 1920000
    }, {
        time: 1440000
    }, {
        time: 2880000
    }, {
        time: 2400000
    }, {
        time: 2400000
    }, {
        time: 4800000
    }, {
        time: 2880000
    }, {
        time: 3360000
    }, {
        time: 2880000
    }, {
        time: 3840000
    }, {
        time: 3360000
    }];
    var If = {
        ⵠⲆᐃᐃᐃ: 74,
        ⲆⲆⲆᐃⵠ: 22,
        ᐃΔΔᐃᐃ: 38,
        ΔⲆΔΔᐃ: 91,
        ΔΔᐃᐃⵠ: 43,
        ⵠᐃⵠᐃⲆΔᐃ: 84,
        ⵠⲆΔⵠⵠ: 13,
        ⵠⲆⵠᐃᐃ: 12,
        ⵠⵠΔΔᐃ: 79,
        ΔΔⲆⲆⵠΔΔ: 85,
        ⲆΔᐃᐃΔ: 24,
        ⲆΔΔⲆᐃ: 46,
        ΔᐃⵠⲆⲆ: 60,
        ⲆᐃΔΔΔ: 42,
        ΔᐃⲆᐃΔ: 7,
        ᐃⵠⲆΔᐃ: 78,
        ⲆⲆΔⵠⵠ: 0,
        ΔⲆᐃⲆΔⵠⲆ: 89,
        ⵠᐃᐃⲆⵠ: 47,
        ⲆᐃⲆⲆⵠ: 80,
        Δⵠᐃⵠᐃ: 18,
        ΔⲆⵠⵠⲆ: 16,
        ⵠΔΔⲆΔ: 64,
        ᐃⵠⵠⲆⵠ: 40,
        ᐃᐃⵠΔᐃ: 69,
        ΔΔᐃΔⲆ: 15,
        ⲆⲆΔⵠᐃ: 54,
        ᐃⲆⵠⵠΔ: 68,
        Ⲇⵠⵠⵠᐃ: 90,
        ⲆⵠΔΔᐃ: 53,
        ⵠⵠΔᐃΔ: 88,
        ⲆᐃΔⲆΔ: 26,
        ᐃΔᐃΔᐃ: 65,
        ⵠΔⲆⲆΔ: 35,
        ᐃⵠⵠᐃᐃ: 100,
        Ⲇᐃⵠᐃⵠ: 63,
        ⲆⵠⲆΔⵠ: 71,
        ᐃⲆⲆΔⲆ: 11,
        ᐃΔⵠⲆⵠ: 49,
        ᐃᐃⲆⲆⵠ: 51,
        ⵠⵠⲆⲆᐃ: 87,
        ⲆⵠΔΔⵠΔΔ: 82,
        ⵠⲆⵠΔΔ: 61,
        ⲆΔⲆᐃⲆ: 62,
        ΔΔⵠⲆᐃ: 67,
        ⵠⵠΔⲆⲆ: 36,
        ⵠⲆⵠⵠᐃ: 45,
        ⲆⲆⵠⲆΔⵠⵠ: 83,
        ⵠⲆΔⲆΔ: 28,
        ⵠΔᐃⲆᐃ: 39,
        ΔⵠᐃΔⵠ: 31,
        ⵠⲆⲆⵠⵠ: 81,
        ᐃⵠⵠᐃⲆ: 10,
        ΔΔᐃᐃᐃ: 4,
        ⲆᐃⵠΔⲆ: 77,
        Δⵠⵠᐃᐃ: 30,
        ⵠᐃᐃΔⵠ: 44,
        ᐃⲆΔᐃᐃ: 70,
        ⲆⲆᐃᐃⵠ: 17,
        ᐃⲆᐃⲆⵠ: 1,
        ⲆᐃⲆⵠⲆ: 2,
        ⲆᐃΔⵠᐃ: 20,
        ⲆᐃΔⲆᐃ: 6,
        ⵠΔⲆΔΔ: 55,
        ᐃⵠⲆΔⵠ: 41,
        ⲆΔⵠⲆᐃ: 52,
        ΔΔΔΔᐃ: 56,
        ΔᐃⲆᐃⵠ: 48,
        ⵠΔᐃᐃΔⲆᐃ: 76,
        ᐃΔⵠΔΔ: 37,
        ΔΔᐃⵠΔ: 27,
        ᐃⵠΔⲆᐃ: 73,
        ΔΔᐃΔᐃ: 66,
        ΔΔⲆⲆΔ: 50,
        ΔᐃΔᐃᐃ: 19,
        Δⵠᐃᐃⵠ: 14,
        ᐃᐃⵠΔⵠ: 8,
        ⵠᐃᐃⵠⲆ: 5,
        ⲆⲆΔΔⵠ: 72,
        ᐃᐃⲆⲆᐃ: 21,
        ᐃᐃⵠⵠᐃ: 29,
        Ⲇⵠⵠᐃᐃ: 9,
        ⲆⵠⵠΔΔ: 3,
        ⲆⵠⵠΔⲆ: 25,
        ⲆᐃⲆⵠΔ: 34,
        ᐃΔΔⵠΔ: 23,
        ⵠⵠΔᐃⵠ: 86,
        ΔⲆⲆⵠⵠ: 75,
        ⲆᐃΔⲆⲆ: 33,
        ⵠⲆⲆᐃᐃ: 32
    };
    var Ef = [[24, 108], [25, 111], [26, 112], [27, 121], [28, 202]];
    function Sf(a, b, c, d) {
        this.id = a;
        this.ΔⵠⲆⲆⲆ = (a + 5) * 8;
        this.Ⲇⵠⵠⵠⵠ = no / 1366;
        this.x = b;
        this.y = c;
        this.c = Math.sin(d);
        this.ⵠⲆᐃⵠ = Math.cos(d);
        this.alpha = 0;
    }
    function Qf(j) {
        function e(b, c, d) {
            var e = c;
            for (var f = d; f < mx.ΔᐃⵠⵠΔ; f++) {
                for (var g = c; mx.ΔΔΔⲆᐃ > g && (d === f && (e = Math.max(g, e)), e >= g) && b[f][g] !== 1; g++) {
                    b[f][g] = 1;
                }
                if (g < e) {
                    break;
                }
            }
            mx.ⵠⲆΔᐃⵠ.push(new mx.ΔⲆⲆᐃΔᐃⵠ(mx.ⵠⵠⵠΔΔ, c, d, e - c + 1, f - d, 15));
        }
        function i(b, c, d, e, f) {
            for (var a = 0; f > a && k(b, c, d, e, 8) !== 1; a++);
            if (f === a) {
                return 0;
            } else {
                return 1;
            }
        }
        function k(c, d, e, f, i) {
            var j = d + Math.floor(f * mx.ⲆⵠⲆΔⲆ.get());
            var a = e + Math.floor(f * mx.ⲆⵠⲆΔⲆ.get());
            var k = 10 + Math.floor((mx.ΔΔΔⲆᐃ - j - 20) * mx.ⲆⵠⲆΔⲆ.get());
            var m = 10 + Math.floor((mx.ΔᐃⵠⵠΔ - a - 20) * mx.ⲆⵠⲆΔⲆ.get());
            var h = k + j;
            var l = m + a;
            for (var g = 0; g < mx.ⵠⲆΔᐃⵠ.length; g++) {
                var n = mx.ⵠⲆΔᐃⵠ[g];
                if (Z.ᐃᐃⵠⲆΔΔⲆ(k, h, m, l, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
                    return 0;
                }
            }
            mx.ⵠⲆΔᐃⵠ.push(new mx.ΔⲆⲆᐃΔᐃⵠ(c, k, m, j, a, 15));
            return 1;
        }
        function p(a, b) {
            for (var d = 0; b.length > d; d++) {
                c(b[d][0], b[d][1], a, b[d][2]);
            }
        }
        function n(f, j, k, m, n, o, a, p) {
            var q = Math.floor(a / 2);
            var h = Math.max(1, Math.floor(a / 2));
            var l = Math.floor(p / 2);
            var g = Math.max(1, Math.floor(p / 2));
            for (var b = 0; k > b; b++) {
                for (var r = f - l; f + g > r; r++) {
                    for (var s = j - q; j + h > s; s++) {
                        if (u(r, s, "wtb", 0, 1) === 1) {
                            o.push([r, s, 1]);
                        }
                    }
                }
                f += m;
                j += n;
            }
        }
        function a(a, e) {
            var f = mx.ⵠⲆΔᐃⵠ[a];
            var i = Math.floor(f.y1 / 100);
            var j = Math.floor(f.x1 / 100);
            var k = Math.floor(f.ᐃⲆᐃ / 100);
            var m = j + (z = Math.floor(f.w / 100));
            var o = 2;
            var q = k;
            var r = i;
            for (var s = j + 10 + Math.floor(mx.ⲆⵠⲆΔⲆ.get() * (z - 20)), t = s - 4; s + 4 > t; t++) {
                u(i - 1, t, "wtb", 0, 1);
            }
            while (q > 0) {
                if (o !== 2) {
                    if (q < 10) {
                        for (A = 1; q > 0; A++) {
                            n(r, s, 1, 1, 0, e, A, 1);
                            q -= 1;
                            r += 1;
                        }
                    } else if (o !== 1) {
                        o = 1;
                        var w = Math.floor(1 + mx.ⲆⵠⲆΔⲆ.get() * 2);
                        var x = 1 + Math.floor(mx.ⲆⵠⲆΔⲆ.get() * 4);
                        if (j + 16 > s) {
                            n(r, s, w, 0, 1, e, x, x);
                            s += w;
                        } else if (m - 16 < s) {
                            n(r, s, w, 0, -1, e, x, x);
                            s -= w;
                        } else if (mx.ⲆⵠⲆΔⲆ.get() > 0.5) {
                            n(r, s, w, 0, 1, e, x, x);
                            s += w;
                        } else {
                            n(r, s, w, 0, -1, e, x, x);
                            s -= w;
                        }
                    } else {
                        var y = Math.min(q, Math.floor(1 + mx.ⲆⵠⲆΔⲆ.get() * 4));
                        var z = 1 + Math.floor(mx.ⲆⵠⲆΔⲆ.get() * 4);
                        n(r, s, y, 1, 0, e, z, z);
                        o = 0;
                        q -= y;
                        r += y;
                    }
                } else {
                    for (var A = 10; A > 1; A--) {
                        n(r, s, 1, 1, 0, e, A, 1);
                        q -= 1;
                        r += 1;
                    }
                    o = 0;
                }
            }
            for (t = s - 1; s + 2 > t; t++) {
                u(r, t, "wtb", 0, 1);
            }
        }
        function o(a) {
            var b = mx.ⵠⲆΔᐃⵠ[a];
            u(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
            u(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
            u(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
            u(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
        }
        function q(b, c) {
            for (var d = 0; d < 6; d++) {
                h(b, "t", d, Math.floor(c * 80));
            }
            for (d = 0; d < 4; d++) {
                h(b, "b", d, Math.floor(c * 80));
            }
            for (d = 0; d < 3; d++) {
                h(b, "s", d, Math.floor(c * 50));
            }
            var e = [];
            for (d = 0; d < 6; d++) {
                a(b, e);
            }
            p(b, e);
            e = [];
            h(b, "p", 0, Math.floor(c * 28));
            for (d = 0; d < 3; d++) {
                h(b, "g", d, Math.floor(c * 7));
            }
            for (d = 0; d < 3; d++) {
                h(b, "d", d, Math.floor(c * 2));
            }
            for (d = 0; d < 3; d++) {
                h(b, "a", d, Math.floor(c * 1));
            }
            for (d = 0; d < 3; d++) {
                h(b, "m", d, Math.floor(c * 1));
            }
            h(b, "a", 0, Math.floor(c * 1));
            o(b);
        }
        function h(f, e, i, j, k) {
            var m = mx.ⵠⲆΔᐃⵠ[f];
            var a = Math.floor(m.x1 / 100);
            var n = Math.floor(m.y1 / 100);
            var p = Math.floor(m.w / 100);
            var q = Math.floor(m.ᐃⲆᐃ / 100);
            if (k !== undefined) {
                k = 1 - k;
                a += Math.floor(p * k / 2);
                n += Math.floor(q * k / 2);
                p -= Math.floor(p * k);
                q -= Math.floor(q * k);
            }
            var t = kx.ⲆⲆⲆⲆ;
            for (var g = 0, w = 0; w < j && g <= 50000; g++) {
                var x = n + Math.floor(mx.ⲆⵠⲆΔⲆ.get() * q);
                var y = a + Math.floor(p * mx.ⲆⵠⲆΔⲆ.get());
                if (mx.Δⵠⵠⵠⵠ(f, y * 100 + 50, x * 100 + 50) >= 400 && ((z = t[x][y + 1]) === Ur || z[e] === undefined || z[e][i] === undefined)) {
                    var z = t[x][y - 1];
                    if (fk === z || z[e] === undefined || z[e][i] === yl) {
                        if ((z = t[x + 1][y]) === gs || z[e] === Go || Gi === z[e][i]) {
                            if ((z = t[x - 1][y]) === undefined || z[e] === undefined || z[e][i] === undefined) {
                                if ((z = t[x + 1][y - 1]) === undefined || z[e] === undefined || Ab === z[e][i]) {
                                    if ((z = t[x - 1][y + 1]) === undefined || od === z[e] || z[e][i] === undefined) {
                                        z = t[x + 1][y + 1];
                                        if (od === z || Ur === z[e] || z[e][i] === undefined) {
                                            if ((z = t[x - 1][y - 1]) === undefined || yl === z[e] || z[e][i] === undefined) {
                                                if (t[x][y] === Ab) {
                                                    u(x, y, e, i, 1);
                                                    w++;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        function l(b, c) {
            for (var d = 0; d < 6; d++) {
                h(b, "t", d, Math.floor(c * 20));
            }
            for (d = 0; d < 4; d++) {
                h(b, "b", d, Math.floor(c * 20));
            }
            for (d = 0; d < 3; d++) {
                h(b, "s", d, Math.floor(c * 20));
            }
            var e = [];
            a(b, e);
            p(b, e);
            e = [];
            h(b, "p", 0, Math.floor(c * 24));
            for (d = 0; d < 3; d++) {
                h(b, "g", d, Math.floor(c * 5));
            }
            if (mx.mode === 2) {
                for (d = 0; d < 3; d++) {
                    h(b, "d", d, Math.floor(c * 3));
                }
                for (d = 0; d < 3; d++) {
                    h(b, "a", d, Math.floor(c * 2));
                }
            }
            o(b);
        }
        function g(a) {
            for (var b = 0; b < 3; b++) {
                h(a, "s", b, 15);
            }
            for (b = 0; b < 3; b++) {
                h(a, "a", b, 1);
            }
            for (b = 0; b < 3; b++) {
                h(a, "d", b, 1);
            }
            o(a);
        }
        function b(a, b) {
            for (var c = 0; c < 3; c++) {
                h(a, "s", c, Math.floor(b * 18));
            }
            for (c = 0; c < 3; c++) {
                h(a, "f", c, Math.floor(b * 24));
            }
            for (c = 0; c < 3; c++) {
                h(a, "d", c, Math.max(1, Math.floor(b * 2)), 0.3);
            }
            for (c = 0; c < 3; c++) {
                h(a, "g", c, Math.floor(b * 6));
            }
            o(a);
        }
        function d(a, b) {
            for (var c = 0; c < 3; c++) {
                h(a, "s", c, Math.floor(b * 12));
            }
            for (c = 0; c < 3; c++) {
                h(a, "m", c, Math.max(1, Math.floor(b * 1)), 0.2);
            }
            h(a, "c", 0, Math.floor(b * 36));
            var d = [];
            (function (c, d) {
                var e = mx.ⵠⲆΔᐃⵠ[c];
                var f = Math.floor(e.y1 / 100);
                var i = Math.floor(e.x1 / 100);
                var j = Math.floor(e.ᐃⲆᐃ / 100);
                var a = Math.floor(e.w / 100);
                var k = f + Math.floor(j / 2);
                var m = i + Math.floor(a / 2);
                for (var h = 0; h < 3; h++) {
                    u(n = Math.floor(k - 3 + mx.ⲆⵠⲆΔⲆ.get() * 6), o = Math.floor(m - 3 + mx.ⲆⵠⲆΔⲆ.get() * 6), "plm", h, 1);
                }
                for (h = 0; h < 80; h++) {
                    var n;
                    var o;
                    if (u(n = Math.floor(k - 3 + mx.ⲆⵠⲆΔⲆ.get() * 6), o = Math.floor(m - 3 + mx.ⲆⵠⲆΔⲆ.get() * 6), "wtb", 0, 1) === 1) {
                        d.push([n, o, 0]);
                    }
                }
            })(a, d);
            p(a, d);
            d = [];
        }
        function u(a, b, c, d, e) {
            if (a >= 0 && b >= 0 && a < mx.ΔᐃⵠⵠΔ && mx.ΔΔΔⲆᐃ > b) {
                ⲆⲆⲆⲆ = kx.ⲆⲆⲆⲆ;
                if (ⲆⲆⲆⲆ[a][b] === undefined) {
                    ⲆⲆⲆⲆ[a][b] = {};
                }
                if (ⲆⲆⲆⲆ[a][b][c] !== undefined) {
                    return 0;
                } else {
                    ⲆⲆⲆⲆ[a][b][c] = [];
                    ⲆⲆⲆⲆ[a][b][c][d] = [{
                        x: b * 100 + 50,
                        y: a * 100 + 50
                    }];
                    if (e === 1) {
                        (function (a, b, c, d) {
                            Lb.push([a, b, c, d]);
                        })(c, d, a, b);
                    }
                    return 1;
                }
            }
        }
        function c(a, b, c, d) {
            if (m(a, b) && (ⲆⲆⲆⲆ = kx.ⲆⲆⲆⲆ, ⲆⲆⲆⲆ[a][b] === undefined && (ⲆⲆⲆⲆ[a][b] = {}), ⲆⲆⲆⲆ[a][b].r === undefined)) {
                var e = 0;
                if (m(a - 1, b) && ⲆⲆⲆⲆ[a - 1][b] !== undefined && Jt !== ⲆⲆⲆⲆ[a - 1][b].wtb) {
                    e += 2;
                }
                if (m(a, b - 1) && ⲆⲆⲆⲆ[a][b - 1] !== od && ⲆⲆⲆⲆ[a][b - 1].wtb !== Yl) {
                    e += 8;
                }
                if (m(a, b + 1) && ⲆⲆⲆⲆ[a][b + 1] !== undefined && ⲆⲆⲆⲆ[a][b + 1].wtb !== yl) {
                    e += 16;
                }
                if (m(a + 1, b) && ⲆⲆⲆⲆ[a + 1][b] !== undefined && ⲆⲆⲆⲆ[a + 1][b].wtb !== Ur) {
                    e += 64;
                }
                if (m(a - 1, b - 1) && (e & 10) === 10 && ⲆⲆⲆⲆ[a - 1][b - 1] !== lj && ⲆⲆⲆⲆ[a - 1][b - 1].wtb !== undefined) {
                    e += 1;
                }
                if (m(a - 1, b + 1) && (e & 18) === 18 && ⲆⲆⲆⲆ[a - 1][b + 1] !== Gi && ⲆⲆⲆⲆ[a - 1][b + 1].wtb !== undefined) {
                    e += 4;
                }
                if (m(a + 1, b - 1) && (e & 72) === 72 && ⲆⲆⲆⲆ[a + 1][b - 1] !== vg && ⲆⲆⲆⲆ[a + 1][b - 1].wtb !== undefined) {
                    e += 32;
                }
                if (m(a + 1, b + 1) && (e & 80) === 80 && ⲆⲆⲆⲆ[a + 1][b + 1] !== undefined && ⲆⲆⲆⲆ[a + 1][b + 1].wtb !== Vs) {
                    e += 128;
                }
                ⲆⲆⲆⲆ[a][b].r = {};
                ⲆⲆⲆⲆ[a][b].r.ⵠⲆⲆΔⲆΔⵠ = e;
                ⲆⲆⲆⲆ[a][b].r.ⵠᐃⲆΔᐃⵠⲆ = d;
                ⲆⲆⲆⲆ[a][b].r.ᐃⵠᐃᐃ = mx.Δⵠⵠⵠⵠ(c, b * 100 + 50, a * 100 + 50) - 400;
                ⲆⲆⲆⲆ[a][b].r.x = b * 100 + 50;
                ⲆⲆⲆⲆ[a][b].r.y = a * 100 + 50;
            }
        }
        function m(a, b) {
            return a >= 0 && b >= 0 && a < mx.ΔᐃⵠⵠΔ && b < mx.ΔΔΔⲆᐃ;
        }
        function f(a, b) {
            (function (c, d) {
                var e = mx.ⵠⲆΔᐃⵠ[d];
                for (var f = 0, i = 0; c > i && f < 10000; f++) {
                    var j = e.y1 + mx.ⲆⵠⲆΔⲆ.get() * e.ᐃⲆᐃ;
                    var k = e.x1 + e.w * mx.ⲆⵠⲆΔⲆ.get();
                    var m = Math.floor(j / 100);
                    var p = Math.floor(k / 100);
                    if (mx.Δⵠⵠⵠⵠ(d, p * 100 + 50, m * 100 + 50) >= 600) {
                        for (var q = 1, t = m - 4; q === 1 && m + 4 >= t; t++) {
                            for (var v = p - 4; q === 1 && v <= p + 4; v++) {
                                if (Jt !== kx.ⲆⲆⲆⲆ[t][v]) {
                                    q = 0;
                                }
                            }
                        }
                        if (q !== 0) {
                            u(m, p, "la", i % 6, 0);
                            i++;
                        }
                    }
                }
            })(b * 80, a);
            for (var c = 0; c < 3; c++) {
                h(a, "s", c, Math.floor(b * 12));
            }
            for (c = 0; c < 3; c++) {
                h(a, "g", c, Math.floor(b * 6));
            }
            for (c = 0; c < 3; c++) {
                h(a, "re", c, Math.max(1, Math.floor(b * 1)), 0.2);
            }
            for (c = 0; c < 3; c++) {
                h(a, "a", c, Math.max(1, Math.floor(b * 2)));
            }
            o(a);
        }
        function s(a, b, c) {
            if (a[b]) {
                for (Ek = 0; a[b].length > Ek; Ek++) {
                    if (a[b][Ek]) {
                        for (ᐃΔᐃⲆ = 0; a[b][Ek].length > ᐃΔᐃⲆ; ᐃΔᐃⲆ++) {
                            a[b][Ek][ᐃΔᐃⲆ].ⲆΔᐃⲆ = c;
                            a[b][Ek][ᐃΔᐃⲆ].ᐃⵠⲆ = false;
                            a[b][Ek][ᐃΔᐃⲆ].time = 0;
                            a[b][Ek][ᐃΔᐃⲆ].angle = 0;
                        }
                    }
                }
            }
        }
        this.mode = 0;
        this.ΔⲆⲆᐃⲆᐃᐃ = j;
        this.ⵠⵠⲆⲆΔ = 0;
        this.ᐃⵠⲆᐃⵠΔΔ = 6;
        this.ⵠᐃΔΔ = [];
        this.ⲆⲆΔ = [];
        this.ⲆⲆΔ[0] = [];
        this.ⲆⲆΔ[100] = [];
        this.ⲆⲆΔ[80] = [];
        this.ⲆⲆΔ[60] = [];
        this.ⲆⲆΔ[67] = [];
        this.ⲆⲆΔ[70] = [];
        this.ⲆⲆΔ[77] = [];
        this.ⲆⲆΔ[71] = [];
        this.ⲆⲆΔ[72] = [];
        this.ⲆⲆΔ[73] = [];
        this.ⲆⲆΔ[74] = [];
        this.ⲆⲆΔ[65] = [];
        this.ⲆⲆΔ[66] = [];
        this.ⲆⲆΔ[62] = [];
        this.ⲆⲆΔ[88] = [];
        this.ⲆⲆΔ[91] = [];
        this.ⲆⲆΔ[90] = [];
        this.ⲆⲆΔ[63] = [];
        this.ⲆⲆΔ[78] = [];
        this.ⲆⲆΔ[64] = [];
        this.ⲆⲆΔ[69] = [];
        this.ⲆⲆΔ[68] = [];
        this.ⲆⲆΔ[79] = [];
        this.ⲆⲆΔ[89] = [];
        this.ⲆⲆΔ[83] = [];
        this.ⲆⲆΔ[84] = [];
        this.ⲆⲆΔ[85] = [];
        this.ⲆⲆΔ[81] = [];
        this.ⲆⲆΔ[82] = [];
        this.ⲆⲆΔ[86] = [];
        this.ⲆⲆΔ[34] = [];
        this.ⲆⲆΔ[36] = [];
        this.ⲆⲆΔ[61] = [];
        this.ⲆⲆΔ[2] = [];
        this.ⲆⲆΔ[1] = [];
        this.ⲆⲆΔ[6] = [];
        this.ⲆⲆΔ[3] = [];
        this.ⲆⲆΔ[5] = [];
        this.ⲆⲆΔ[12] = [];
        this.ⲆⲆΔ[13] = [];
        this.ⲆⲆΔ[14] = [];
        this.ⲆⲆΔ[20] = [];
        this.ⲆⲆΔ[52] = [];
        this.ⲆⲆΔ[4] = [];
        this.ⲆⲆΔ[7] = [];
        this.ⲆⲆΔ[8] = [];
        this.ⲆⲆΔ[9] = [];
        this.ⲆⲆΔ[19] = [];
        this.ⲆⲆΔ[50] = [];
        this.ⲆⲆΔ[41] = [];
        this.ⲆⲆΔ[10] = [];
        this.ⲆⲆΔ[15] = [];
        this.ⲆⲆΔ[16] = [];
        this.ⲆⲆΔ[17] = [];
        this.ⲆⲆΔ[21] = [];
        this.ⲆⲆΔ[51] = [];
        this.ⲆⲆΔ[45] = [];
        this.ⲆⲆΔ[46] = [];
        this.ⲆⲆΔ[47] = [];
        this.ⲆⲆΔ[48] = [];
        this.ⲆⲆΔ[49] = [];
        this.ⲆⲆΔ[53] = [];
        this.ⲆⲆΔ[18] = [];
        this.ⲆⲆΔ[29] = [];
        this.ⲆⲆΔ[56] = [];
        this.ⲆⲆΔ[11] = [];
        this.ⲆⲆΔ[22] = [];
        this.ⲆⲆΔ[23] = [];
        this.ⲆⲆΔ[30] = [];
        this.ⲆⲆΔ[38] = [];
        this.ⲆⲆΔ[33] = [];
        this.ⲆⲆΔ[31] = [];
        this.ⲆⲆΔ[55] = [];
        this.ⲆⲆΔ[37] = [];
        this.ⲆⲆΔ[43] = [];
        this.ⲆⲆΔ[44] = [];
        this.ⲆⲆΔ[54] = [];
        this.ⲆⲆΔ[39] = [];
        this.ⲆⲆΔ[40] = [];
        this.ⲆⲆΔ[32] = [];
        this.ⲆⲆΔ[24] = [];
        this.ⲆⲆΔ[25] = [];
        this.ⲆⲆΔ[26] = [];
        this.ⲆⲆΔ[27] = [];
        this.ⲆⲆΔ[28] = [];
        this.ⲆⲆΔ[35] = [];
        this.ⲆⲆΔ[87] = [];
        this.ⲆⲆΔ[42] = [];
        this.ᐃⲆⵠΔᐃ = [];
        this.ΔΔΔⲆᐃ = 260;
        this.ΔᐃⵠⵠΔ = 260;
        this.ΔⲆΔⲆᐃⲆΔ = 100;
        this.ⵠⵠⲆⵠΔΔΔ = 100;
        this.w = this.ΔΔΔⲆᐃ * this.ΔⲆΔⲆᐃⲆΔ;
        this.ᐃⲆᐃ = this.ΔᐃⵠⵠΔ * this.ⵠⵠⲆⵠΔΔΔ;
        this.ⲆⵠⲆΔⲆ = new yk.ΔⲆⲆⲆⲆⵠᐃ();
        this.ⵠⲆΔᐃⵠ = [];
        this.ΔⵠⵠΔ = new Z.ΔⲆⲆᐃ(Bl, 0, 1, 0, 1, 1);
        this.transition = false;
        this.ᐃΔΔΔΔ = [];
        this.ΔΔᐃⵠᐃ = 0;
        this.ᐃⵠⲆᐃΔΔᐃ = 1;
        this.ⲆⵠⵠΔⲆᐃⲆ = 2;
        this.ⵠⵠᐃΔⲆᐃΔ = 3;
        this.ⵠⵠⵠΔΔ = 4;
        this.ΔΔⵠⵠΔⵠⵠ = 10;
        this.ᐃΔΔΔΔ[this.ΔΔᐃⵠᐃ] = {
            ΔⲆᐃᐃᐃⵠΔ: 1,
            ΔᐃⲆ: [19, 58, 43],
            ⵠΔΔ: [4, 43, 48],
            ᐃⵠⵠⵠᐃ: ["#133a2b", "#042b30"]
        };
        this.ᐃΔΔΔΔ[this.ⵠⵠⵠΔΔ] = {
            ΔⲆᐃᐃᐃⵠΔ: 0,
            ΔᐃⲆ: [11, 106, 132],
            ⵠΔΔ: [9, 55, 63],
            ᐃⵠⵠⵠᐃ: ["#0B6A84", "#09373F"]
        };
        this.ᐃΔΔΔΔ[this.ᐃⵠⲆᐃΔΔᐃ] = {
            ΔⲆᐃᐃᐃⵠΔ: 0,
            ΔᐃⲆ: [235, 242, 240],
            ⵠΔΔ: [19, 97, 103],
            ᐃⵠⵠⵠᐃ: ["#EBF2F0", "#136167"]
        };
        this.ᐃΔΔΔΔ[this.ⲆⵠⵠΔⲆᐃⲆ] = {
            ΔⲆᐃᐃᐃⵠΔ: 0,
            ⵠΔΔ: [3, 28, 30],
            ᐃⵠⵠⵠᐃ: ["#2D2017", "#031C1E"],
            ΔᐃⲆ: [45, 32, 23]
        };
        this.ᐃΔΔΔΔ[this.ⵠⵠᐃΔⲆᐃΔ] = {
            ΔᐃⲆ: [74, 74, 74],
            ⵠΔΔ: [24, 61, 60],
            ΔⲆᐃᐃᐃⵠΔ: 0,
            ᐃⵠⵠⵠᐃ: ["#4A4A4A", "#183D3C"]
        };
        this.ᐃΔΔΔΔ[this.ΔΔⵠⵠΔⵠⵠ] = {
            ⵠΔΔ: [9, 61, 56],
            ΔᐃⲆ: [235, 216, 166],
            ΔⲆᐃᐃᐃⵠΔ: 0,
            ᐃⵠⵠⵠᐃ: ["#EBD8A6", "#093D38"]
        };
        this.ΔⲆⲆᐃΔᐃⵠ = function (b, c, d, e, f, g) {
            this.x1 = c * 100;
            this.y1 = d * 100;
            this.w = e * 100;
            this.ᐃⲆᐃ = f * 100;
            this.x2 = (c + e) * 100;
            this.y2 = (d + f) * 100;
            this.ⵠᐃⲆ = b;
            this.ΔⲆᐃ = Yl === g ? 15 : g;
        };
        this.ΔⲆⲆⵠΔ = -1000000;
        this.ⲆⵠΔⵠΔ = this.ΔⲆⲆⵠΔ;
        this.ⲆᐃᐃⵠΔ = this.ΔⲆⲆⵠΔ;
        this.ⲆᐃᐃᐃⲆ = this.ΔⲆⲆⵠΔ;
        this.ⵠΔⲆⲆⵠᐃⲆ = this.ΔⲆⲆⵠΔ;
        this.ΔΔⵠⲆⲆᐃⲆ = this.ΔⲆⲆⵠΔ;
        this.ΔⵠⵠᐃΔ = this.ΔⲆⲆⵠΔ;
        this.ⵠⲆΔⵠᐃⲆΔΔΔ = function (b) {
            var c = b.r.x;
            var d = b.r.y;
            var e = Math.floor(d / 100);
            var f = Math.floor(c / 100);
            b.ⲆⵠΔⵠΔ = mx.ΔⲆⲆⵠΔ;
            b.ⲆᐃᐃⵠΔ = mx.ΔⲆⲆⵠΔ;
            b.ⲆᐃᐃᐃⲆ = mx.ΔⲆⲆⵠΔ;
            b.ⵠΔⲆⲆⵠᐃⲆ = mx.ΔⲆⲆⵠΔ;
            b.ΔⵠⵠᐃΔ = mx.ΔⲆⲆⵠΔ;
            b.ᐃⲆΔⲆᐃᐃⲆ = mx.ΔⲆⲆⵠΔ;
            for (var g = 0; mx.ⵠⵠⵠΔΔ !== mx.ⵠⲆΔᐃⵠ[g].ⵠᐃⲆ; g++) {
                if (mx.ΔΔᐃⵠᐃ === mx.ⵠⲆΔᐃⵠ[g].ⵠᐃⲆ) {
                    var h = mx.Δⵠⵠⵠⵠ(g, c, d);
                    b.ⵠΔⲆⲆⵠᐃⲆ = Math.max(b.ⵠΔⲆⲆⵠᐃⲆ, h);
                    if (h > 0 && mx.ⵠΔⲆΔⲆᐃⲆΔᐃ(g, c, d) === 1) {
                        b.ᐃⲆΔⲆᐃᐃⲆ = 1;
                    }
                } else if (mx.ⵠⲆΔᐃⵠ[g].ⵠᐃⲆ === mx.ᐃⵠⲆᐃΔΔᐃ) {
                    b.ⲆⵠΔⵠΔ = Math.max(b.ⲆⵠΔⵠΔ, mx.Δⵠⵠⵠⵠ(g, c, d));
                } else if (mx.ΔΔⵠⵠΔⵠⵠ === mx.ⵠⲆΔᐃⵠ[g].ⵠᐃⲆ) {
                    b.ⲆᐃᐃⵠΔ = Math.max(b.ⲆᐃᐃⵠΔ, mx.Δⵠⵠⵠⵠ(g, c, d));
                } else if (mx.ⵠⲆΔᐃⵠ[g].ⵠᐃⲆ === mx.ⲆⵠⵠΔⲆᐃⲆ) {
                    b.ⲆᐃᐃᐃⲆ = Math.max(b.ⲆᐃᐃᐃⲆ, mx.Δⵠⵠⵠⵠ(g, c, d));
                } else if (mx.ⵠⲆΔᐃⵠ[g].ⵠᐃⲆ === mx.ⵠⵠᐃΔⲆᐃΔ) {
                    b.ΔⵠⵠᐃΔ = Math.max(b.ΔⵠⵠᐃΔ, mx.Δⵠⵠⵠⵠ(g, c, d));
                }
            }
            if (kx.ⲆⲆⲆⲆ[e][f].iblk) {
                b.ᐃⲆΔⲆᐃᐃⲆ = 1;
            }
            if (mx.ⲆΔⵠΔⲆⲆᐃᐃΔ(f, e)) {
                b.ΔΔⵠⲆⲆᐃⲆ = b.ΔⲆⲆⵠΔ;
            } else if (kx.ⲆⲆⲆⲆ[e][f].wtb || b.ⲆⵠΔⵠΔ < 0 && b.ⲆᐃᐃᐃⲆ < 0 && b.ⵠΔⲆⲆⵠᐃⲆ < 0 && b.ᐃⲆΔⲆᐃᐃⲆ < 0 && b.ΔⵠⵠᐃΔ < 0 && b.ⲆᐃᐃⵠΔ < 0) {
                b.ΔΔⵠⲆⲆᐃⲆ = 1;
            } else {
                b.ΔΔⵠⲆⲆᐃⲆ = b.ΔⲆⲆⵠΔ;
            }
        };
        this.ΔΔΔᐃᐃᐃΔΔⲆ = function (a, b) {
            mx.ⲆⵠΔⵠΔ = mx.ΔⲆⲆⵠΔ;
            mx.ⲆᐃᐃⵠΔ = mx.ΔⲆⲆⵠΔ;
            mx.ⲆᐃᐃᐃⲆ = mx.ΔⲆⲆⵠΔ;
            mx.ΔⵠⵠᐃΔ = mx.ΔⲆⲆⵠΔ;
            mx.ⵠΔⲆⲆⵠᐃⲆ = mx.ΔⲆⲆⵠΔ;
            for (var c = 0; mx.ⵠⲆΔᐃⵠ[c].ⵠᐃⲆ !== mx.ⵠⵠⵠΔΔ; c++) {
                if (mx.ⵠⲆΔᐃⵠ[c].ⵠᐃⲆ === mx.ΔΔᐃⵠᐃ) {
                    mx.ⵠΔⲆⲆⵠᐃⲆ = Math.max(mx.ⵠΔⲆⲆⵠᐃⲆ, mx.Δⵠⵠⵠⵠ(c, a, b));
                } else if (mx.ᐃⵠⲆᐃΔΔᐃ === mx.ⵠⲆΔᐃⵠ[c].ⵠᐃⲆ) {
                    mx.ⲆⵠΔⵠΔ = Math.max(mx.ⲆⵠΔⵠΔ, mx.Δⵠⵠⵠⵠ(c, a, b));
                } else if (mx.ΔΔⵠⵠΔⵠⵠ === mx.ⵠⲆΔᐃⵠ[c].ⵠᐃⲆ) {
                    mx.ⲆᐃᐃⵠΔ = Math.max(mx.ⲆᐃᐃⵠΔ, mx.Δⵠⵠⵠⵠ(c, a, b));
                } else if (mx.ⵠⲆΔᐃⵠ[c].ⵠᐃⲆ === mx.ⲆⵠⵠΔⲆᐃⲆ) {
                    mx.ⲆᐃᐃᐃⲆ = Math.max(mx.ⲆᐃᐃᐃⲆ, mx.Δⵠⵠⵠⵠ(c, a, b));
                } else if (mx.ⵠⲆΔᐃⵠ[c].ⵠᐃⲆ === mx.ⵠⵠᐃΔⲆᐃΔ) {
                    mx.ΔⵠⵠᐃΔ = Math.max(mx.ΔⵠⵠᐃΔ, mx.Δⵠⵠⵠⵠ(c, a, b));
                }
            }
            if (mx.ⲆⵠΔⵠΔ < 0 && mx.ΔⵠⵠᐃΔ < 0 && mx.ⵠΔⲆⲆⵠᐃⲆ < 0 && mx.ΔⵠⵠᐃΔ < 0 && mx.ⲆᐃᐃⵠΔ < 0) {
                mx.ΔΔⵠⲆⲆᐃⲆ = 1;
            } else {
                mx.ΔΔⵠⲆⲆᐃⲆ = mx.ΔⲆⲆⵠΔ;
            }
        };
        this.ⵠΔⲆΔⲆᐃⲆΔᐃ = function (b, c, d) {
            var e = mx.ⵠⲆΔᐃⵠ[b];
            var f = 0;
            ⲆⲆⵠⵠ = e.x1 + 30 + ((e.ΔⲆᐃ & 4) === 0 ? 150 : 0);
            var g = c - ⲆⲆⵠⵠ;
            if ((e.ΔⲆᐃ & 4) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ⲆⵠᐃⲆ = e.y1 + 250 + (e.ΔⲆᐃ & 1 ? 0 : 150);
            g = d - ⲆⵠᐃⲆ;
            if ((e.ΔⲆᐃ & 1) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ᐃΔⲆᐃ = e.x2 + 80 + (e.ΔⲆᐃ & 8 ? 0 : -200);
            g = ᐃΔⲆᐃ - c;
            if ((e.ΔⲆᐃ & 8) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ΔΔⵠⵠ = e.y2 - 200 + (e.ΔⲆᐃ & 2 ? 0 : -200);
            g = ΔΔⵠⵠ - d;
            if ((e.ΔⲆᐃ & 2) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            if (ⲆⲆⵠⵠ <= c && c <= ᐃΔⲆᐃ && d >= ⲆⵠᐃⲆ && d <= ΔΔⵠⵠ) {
                return f;
            } else {
                return 0;
            }
        };
        this.Δⵠⵠⵠⵠ = function (a, b, c) {
            var d = mx.ⵠⲆΔᐃⵠ[a];
            ⲆⲆⵠⵠ = d.x1 + 30;
            ⲆⵠᐃⲆ = d.y1 + 250;
            ᐃΔⲆᐃ = d.x2 + 80;
            ΔΔⵠⵠ = d.y2 - 200;
            if (b >= ⲆⲆⵠⵠ && ᐃΔⲆᐃ >= b && c >= ⲆⵠᐃⲆ && c <= ΔΔⵠⵠ) {
                return Math.min(b - ⲆⲆⵠⵠ, ᐃΔⲆᐃ - b, c - ⲆⵠᐃⲆ, ΔΔⵠⵠ - c);
            }
            var e = -1000000;
            if (b - ⲆⲆⵠⵠ < 0) {
                e = Math.max(e, b - ⲆⲆⵠⵠ);
            } else if (ᐃΔⲆᐃ - b < 0) {
                e = Math.max(e, ᐃΔⲆᐃ - b);
            }
            ᐃΔΔᐃᐃⵠᐃ = -1000000;
            if (c < ⲆⵠᐃⲆ || c > ΔΔⵠⵠ) {
                if (c - ⲆⵠᐃⲆ < 0) {
                    ᐃΔΔᐃᐃⵠᐃ = Math.max(ᐃΔΔᐃᐃⵠᐃ, c - ⲆⵠᐃⲆ);
                } else {
                    ᐃΔΔᐃᐃⵠᐃ = Math.max(ᐃΔΔᐃᐃⵠᐃ, ΔΔⵠⵠ - c);
                }
                e = e !== -1000000 && ᐃΔΔᐃᐃⵠᐃ !== -1000000 ? Math.min(e, ᐃΔΔᐃᐃⵠᐃ) : ᐃΔΔᐃᐃⵠᐃ;
            }
            return e;
        };
        this.ⲆⵠᐃⲆⵠⵠΔ = function (b, c, d) {
            var e = d;
            var f = c;
            u(e, f, "isl", b, 1);
            for (var g = 0; g < 4; g++) {
                for (var h = 0; h < 3; h++) {
                    u(e - h, f - g, "iblk", 0);
                    u(e + h, f - g, "iblk", 0);
                    u(e + h, f + g, "iblk", 0);
                    u(e - h, f + g, "iblk", 0);
                }
            }
            if (b === 0) {
                for (g = 0; g < 2; g++) {
                    u(e - g, f - 4, "iblk", 0);
                    u(e + g, f - 4, "iblk", 0);
                    u(e - g, f + 4, "iblk", 0);
                    u(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 3; g++) {
                    u(e - 3, f + g, "iblk", 0);
                    u(e + 3, f + g, "iblk", 0);
                    u(e - 3, f - g, "iblk", 0);
                    u(e + 3, f - g, "iblk", 0);
                }
                u(e - 2, f - 4, "iblk", 0);
                u(e - 3, f - 3, "iblk", 0);
                u(e + 2, f + 4, "iblk", 0);
                u(e + 3, f + 3, "iblk", 0);
            } else if (b === 1) {
                for (g = 0; g < 3; g++) {
                    u(e - g, f - 4, "iblk", 0);
                    u(e + g, f - 4, "iblk", 0);
                    u(e - g, f + 4, "iblk", 0);
                    u(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 4; g++) {
                    u(e - 3, f + g, "iblk", 0);
                    u(e + 3, f + g, "iblk", 0);
                    u(e - 3, f - g, "iblk", 0);
                    u(e + 3, f - g, "iblk", 0);
                }
            } else if (b === 2) {
                for (g = 0; g < 2; g++) {
                    u(e - g, f - 4, "iblk", 0);
                    u(e + g, f - 4, "iblk", 0);
                    u(e - g, f + 4, "iblk", 0);
                    u(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 3; g++) {
                    u(e - 3, f + g, "iblk", 0);
                    u(e + 3, f + g, "iblk", 0);
                    u(e - 3, f - g, "iblk", 0);
                    u(e + 3, f - g, "iblk", 0);
                }
            }
        };
        this.ᐃΔⵠΔΔⵠᐃΔᐃ = function (b) {
            for (var c = 0; c < mx.ⵠⲆΔᐃⵠ.length && b > 0; c++) {
                var d = mx.ⵠⲆΔᐃⵠ[c];
                if (d.ⵠᐃⲆ === mx.ⵠⵠⵠΔΔ && d.w > 1800 && d.ᐃⲆᐃ > 1000) {
                    var f = Math.floor((d.x1 + d.w / 2) / 100);
                    var g = Math.floor((d.y1 + d.ᐃⲆᐃ / 2) / 100);
                    mx.ⲆⵠᐃⲆⵠⵠΔ(b % 3, f, g);
                    for (var h = 0; h < 3; h++) {
                        var j = g - 2 + Math.floor(mx.ⲆⵠⲆΔⲆ.get() * 4);
                        var k = f - 3 + Math.floor(mx.ⲆⵠⲆΔⲆ.get() * 6);
                        if (kx.ⲆⲆⲆⲆ[j][k].s === undefined) {
                            u(j, k, "plm", h);
                        }
                        j = g - 2 + Math.floor(mx.ⲆⵠⲆΔⲆ.get() * 4);
                        k = f - 3 + Math.floor(mx.ⲆⵠⲆΔⲆ.get() * 6);
                        if (kx.ⲆⲆⲆⲆ[j][k].plm === undefined) {
                            u(j, k, "s", h);
                        }
                    }
                    j = g - 2 + Math.floor(mx.ⲆⵠⲆΔⲆ.get() * 4);
                    k = f - 3 + Math.floor(mx.ⲆⵠⲆΔⲆ.get() * 6);
                    if (kx.ⲆⲆⲆⲆ[j][k].plm === Gi && od === kx.ⲆⲆⲆⲆ[j][k].s) {
                        u(j, k, "p", 0, 1);
                    }
                    b--;
                }
            }
        };
        this.ⲆΔᐃⵠᐃⲆⵠⵠⵠ = function (c) {
            mx.ⲆⵠⲆΔⲆ.ⲆⵠᐃⲆⲆ(c);
            var h = 0;
            while (1) {
                if (++h > 10000) {
                    return;
                }
                mx.ⵠⲆΔᐃⵠ = [];
                if (mx.ⵠⵠⲆⲆΔ === 0 && (mx.mode === 3 || mx.mode === 7 || mx.mode === 0)) {
                    mx.ⵠⵠⲆⲆΔ = Or;
                }
                if (mx.mode === 2) {
                    mx.ⵠⲆΔᐃⵠ.push(new mx.ΔⲆⲆᐃΔᐃⵠ(mx.ΔΔᐃⵠᐃ, 2, 2, 80, 80, 15));
                } else if (mx.mode === 4) {
                    mx.ⵠⲆΔᐃⵠ.push(new mx.ΔⲆⲆᐃΔᐃⵠ(mx.ΔΔᐃⵠᐃ, 2, 2, 150, 150, 15));
                } else if (mx.ⵠⵠⲆⲆΔ !== 0 && mx.ⵠⵠⲆⲆΔ.length > 0 && mx.ⵠⵠⲆⲆΔ[0].length > 3) {
                    for (var j = 0; j < mx.ⵠⵠⲆⲆΔ.length; j++) {
                        if ((G = mx.ⵠⵠⲆⲆΔ[j])[0] !== 0) {
                            break;
                        }
                        var m = Jf.ΔΔᐃⵠᐃ;
                        switch (G[1]) {
                            case "FOREST":
                                m = mx.ΔΔᐃⵠᐃ;
                                break;
                            case "WINTER":
                                m = mx.ᐃⵠⲆᐃΔΔᐃ;
                                break;
                            case "DESERT":
                                m = mx.ΔΔⵠⵠΔⵠⵠ;
                                break;
                            case "LAVA":
                                m = mx.ⲆⵠⵠΔⲆᐃⲆ;
                                break;
                            case "DRAGON":
                                m = mx.ⵠⵠᐃΔⲆᐃΔ;
                        }
                        mx.ⵠⲆΔᐃⵠ.push(new mx.ΔⲆⲆᐃΔᐃⵠ(m, G[2], G[3], G[4], G[5], G[6], G[7]));
                    }
                } else if (mx.ⵠⵠⲆⲆΔ !== 0) {
                    for (j = 0; mx.ⵠⵠⲆⲆΔ.length > j; j++) {
                        var o = mx.ⵠⵠⲆⲆΔ[j];
                        m = Jf.ΔΔᐃⵠᐃ;
                        switch (o[0]) {
                            case "FOREST":
                                m = mx.ΔΔᐃⵠᐃ;
                                break;
                            case "WINTER":
                                m = mx.ᐃⵠⲆᐃΔΔᐃ;
                                break;
                            case "DESERT":
                                m = mx.ΔΔⵠⵠΔⵠⵠ;
                                break;
                            case "LAVA":
                                m = mx.ⲆⵠⵠΔⲆᐃⲆ;
                                break;
                            case "DRAGON":
                                m = mx.ⵠⵠᐃΔⲆᐃΔ;
                        }
                        if (i(m, o[1], o[2], 0, (j + 1) * 10) === 0) {
                            break;
                        }
                    }
                    if (j !== mx.ⵠⵠⲆⲆΔ.length) {
                        continue;
                    }
                }
                break;
            }
            ᐃᐃⵠΔⵠᐃⲆᐃⵠ();
            var t = [];
            for (var v = 0; v < mx.ΔᐃⵠⵠΔ; v++) {
                t[v] = new Array(mx.ΔΔΔⲆᐃ);
                for (var x = 0; mx.ΔΔΔⲆᐃ > x; x++) {
                    t[v][x] = 0;
                }
            }
            for (v = 0; mx.ⵠⲆΔᐃⵠ.length > v; v++) {
                for (var z = (o = mx.ⵠⲆΔᐃⵠ[v]).x2 / 100, B = o.y2 / 100, D = o.x1 / 100; D <= z; D++) {
                    for (var E = o.y1 / 100; E <= B; E++) {
                        t[E][D] = 1;
                    }
                }
            }
            for (E = 0; E < mx.ΔᐃⵠⵠΔ; E++) {
                for (D = 0; D < mx.ΔΔΔⲆᐃ; D++) {
                    if (t[E][D] === 0) {
                        e(t, D, E);
                    }
                }
            }
            kx = {
                w: mx.ΔΔΔⲆᐃ,
                ᐃⲆᐃ: mx.ΔᐃⵠⵠΔ,
                ⲆⲆⲆⲆ: []
            };
            for (v = 0; mx.ΔᐃⵠⵠΔ > v; v++) {
                kx.ⲆⲆⲆⲆ[v] = [];
            }
            if (mx.ⵠⵠⲆⲆΔ !== 0 && mx.ⵠⵠⲆⲆΔ.length > 0 && mx.ⵠⵠⲆⲆΔ[0].length > 3) {
                for (j = 0; j < mx.ⵠⵠⲆⲆΔ.length; j++) {
                    if ((G = mx.ⵠⵠⲆⲆΔ[j])[1] === "isl") {
                        mx.ⲆⵠᐃⲆⵠⵠΔ(G[2], G[3], G[4]);
                    }
                }
            } else {
                mx.ᐃΔⵠΔΔⵠᐃΔᐃ(mx.ᐃⵠⲆᐃⵠΔΔ);
            }
            if (mx.ⵠⵠⲆⲆΔ !== 0 && mx.ⵠⵠⲆⲆΔ.length > 0 && mx.ⵠⵠⲆⲆΔ[0].length > 3) {
                var F = [];
                for (j = 0; mx.ⵠⵠⲆⲆΔ.length > j; j++) {
                    var G = mx.ⵠⵠⲆⲆΔ[j];
                    if (G[0] === 1) {
                        if (G[1] === "r") {
                            u(G[3], G[2], "wtb", 0, 1);
                            F.push([G[3], G[2], G[4]]);
                        } else {
                            u(G[4], G[3], G[1], G[2], G[5]);
                        }
                    }
                }
                p(0, F);
                F = [];
            } else {
                for (v = 0; v < mx.ⵠⲆΔᐃⵠ.length; v++) {
                    o = mx.ⵠⲆΔᐃⵠ[v];
                    if (mx.mode === 4) {
                        if (o.ⵠᐃⲆ === mx.ΔΔᐃⵠᐃ) {
                            q(v, o.w / 10000);
                        }
                    } else {
                        if (mx.ΔΔᐃⵠᐃ === o.ⵠᐃⲆ) {
                            l(v, o.w / 10000);
                        }
                        if (o.ⵠᐃⲆ === mx.ⲆⵠⵠΔⲆᐃⲆ) {
                            f(v, o.w / 10000);
                        }
                        if (o.ⵠᐃⲆ === mx.ᐃⵠⲆᐃΔΔᐃ) {
                            b(v, o.w / 10000);
                        }
                        if (o.ⵠᐃⲆ === mx.ΔΔⵠⵠΔⵠⵠ) {
                            d(v, o.w / 10000);
                        }
                        if (o.ⵠᐃⲆ === mx.ⵠⵠᐃΔⲆᐃΔ) {
                            g(v);
                        }
                    }
                }
            }
            Nb("isl", 1);
            Nb("wtb", 20);
            Nb("la", 1);
            Nb("c", 1);
            Nb("s", 1);
            Nb("f", 1);
            Nb("p", 1);
            Nb("g", 1);
            Nb("d", 1);
            Nb("a", 1);
            Nb("re", 1);
            Nb("m", 1);
            Lb = [];
            mx.ⲆⲆΔᐃᐃⲆᐃᐃⵠ(kx);
        };
        this.ᐃΔΔΔ = u;
        this.ⲆⲆΔᐃᐃⲆᐃᐃⵠ = function (b) {
            for (var c = 0; c < this.ΔᐃⵠⵠΔ; c++) {
                for (var d = 0; this.ΔΔΔⲆᐃ > d; d++) {
                    if (!b.ⲆⲆⲆⲆ[c]) {
                        b.ⲆⲆⲆⲆ[c] = [];
                    }
                    if (b.ⲆⲆⲆⲆ[c][d]) {
                        var e = b.ⲆⲆⲆⲆ[c][d];
                        if (e.de && e.de.length > 0) {
                            for (var f = 0; f < e.de.length; f++) {
                                if (e.de[f] && e.de[f].length > 0) {
                                    e.de = e.de[f][0];
                                    if (f >= 41 && f <= 49) {
                                        e.de.scale = 3;
                                        var g = Math.floor(Math.random() * 3 + 1);
                                        e.de.ⵠᐃⵠ = [];
                                        for (var h = 0; g > h; h++) {
                                            e.de.ⵠᐃⵠ.push({
                                                x: Math.random() * 120 - 60,
                                                y: Math.random() * 120 - 60,
                                                angle: Math.random() * Math.PI * 2,
                                                ⲆⲆⵠΔ: 41 + Math.floor(Math.random() * 9)
                                            });
                                        }
                                    } else if (f >= 19 && f <= 26) {
                                        e.de.scale = 3;
                                        g = Math.floor(Math.random() * 3 + 1);
                                        e.de.ⵠᐃⵠ = [];
                                        for (h = 0; h < g; h++) {
                                            e.de.ⵠᐃⵠ.push({
                                                x: Math.random() * 120 - 60,
                                                y: Math.random() * 120 - 60,
                                                angle: Math.PI * Math.random() * 2,
                                                ⲆⲆⵠΔ: 19 + Math.floor(Math.random() * 8)
                                            });
                                        }
                                    } else if (f <= 15 || f >= 27 && f <= 40) {
                                        e.de.angle = 0;
                                        e.de.scale = 2;
                                        e.de.ⲆⲆⵠΔ = f;
                                    } else {
                                        e.de.angle = Math.PI * Math.random() * 2;
                                        e.de.scale = 1;
                                        e.de.ⲆⲆⵠΔ = f;
                                    }
                                }
                            }
                        }
                        s(e, "p", new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "t", new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "s", new Z.ΔⲆⲆᐃ(zj, 1, 1, 0, 10, 10));
                        s(e, "g", new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "d", new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "b", new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "f", new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "sw", new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "gw", new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "dw", new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "a", new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "cs", new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "plm", new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "re", new Z.ΔⲆⲆᐃ(Mr, 1, 1, 0, 10, 10));
                        s(e, "c", new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "m", new Z.ΔⲆⲆᐃ(ie, 1, 1, 0, 10, 10));
                    } else {
                        b.ⲆⲆⲆⲆ[c][d] = [];
                    }
                }
            }
        };
        this.time = _r.ΔΔⵠ;
        this.ΔΔΔΔⲆ = {
            translate: {
                x: 0,
                y: 0
            },
            now: 0,
            ⲆⵠᐃᐃⲆ: 0,
            ⲆⵠᐃⲆⲆ: 0
        };
        this.ᐃⲆᐃⵠⲆⲆⵠⲆΔ = function () {
            this.ᐃⲆⵠΔᐃ = [];
            this.ⲆⲆΔ[0] = [];
            this.ⲆⲆΔ[2] = [];
            this.ⲆⲆΔ[1] = [];
            this.ⲆⲆΔ[6] = [];
            this.ⲆⲆΔ[3] = [];
            this.ⲆⲆΔ[5] = [];
            this.ⲆⲆΔ[12] = [];
            this.ⲆⲆΔ[13] = [];
            this.ⲆⲆΔ[14] = [];
            this.ⲆⲆΔ[20] = [];
            this.ⲆⲆΔ[52] = [];
            this.ⲆⲆΔ[30] = [];
            this.ⲆⲆΔ[56] = [];
            this.ⲆⲆΔ[38] = [];
            this.ⲆⲆΔ[33] = [];
            this.ⲆⲆΔ[31] = [];
            this.ⲆⲆΔ[55] = [];
            this.ⲆⲆΔ[37] = [];
            this.ⲆⲆΔ[43] = [];
            this.ⲆⲆΔ[44] = [];
            this.ⲆⲆΔ[54] = [];
            this.ⲆⲆΔ[39] = [];
            this.ⲆⲆΔ[40] = [];
            this.ⲆⲆΔ[32] = [];
            this.ⲆⲆΔ[24] = [];
            this.ⲆⲆΔ[25] = [];
            this.ⲆⲆΔ[26] = [];
            this.ⲆⲆΔ[27] = [];
            this.ⲆⲆΔ[28] = [];
            this.ⲆⲆΔ[35] = [];
            this.ⲆⲆΔ[4] = [];
            this.ⲆⲆΔ[7] = [];
            this.ⲆⲆΔ[8] = [];
            this.ⲆⲆΔ[9] = [];
            this.ⲆⲆΔ[19] = [];
            this.ⲆⲆΔ[50] = [];
            this.ⲆⲆΔ[41] = [];
            this.ⲆⲆΔ[10] = [];
            this.ⲆⲆΔ[15] = [];
            this.ⲆⲆΔ[16] = [];
            this.ⲆⲆΔ[17] = [];
            this.ⲆⲆΔ[21] = [];
            this.ⲆⲆΔ[51] = [];
            this.ⲆⲆΔ[45] = [];
            this.ⲆⲆΔ[46] = [];
            this.ⲆⲆΔ[47] = [];
            this.ⲆⲆΔ[48] = [];
            this.ⲆⲆΔ[49] = [];
            this.ⲆⲆΔ[53] = [];
            this.ⲆⲆΔ[18] = [];
            this.ⲆⲆΔ[29] = [];
            this.ⲆⲆΔ[56] = [];
            this.ⲆⲆΔ[11] = [];
            this.ⲆⲆΔ[22] = [];
            this.ⲆⲆΔ[23] = [];
            this.ⲆⲆΔ[100] = [];
            this.ⲆⲆΔ[80] = [];
            this.ⲆⲆΔ[60] = [];
            this.ⲆⲆΔ[67] = [];
            this.ⲆⲆΔ[70] = [];
            this.ⲆⲆΔ[77] = [];
            this.ⲆⲆΔ[71] = [];
            this.ⲆⲆΔ[72] = [];
            this.ⲆⲆΔ[73] = [];
            this.ⲆⲆΔ[74] = [];
            this.ⲆⲆΔ[65] = [];
            this.ⲆⲆΔ[66] = [];
            this.ⲆⲆΔ[62] = [];
            this.ⲆⲆΔ[88] = [];
            this.ⲆⲆΔ[91] = [];
            this.ⲆⲆΔ[90] = [];
            this.ⲆⲆΔ[63] = [];
            this.ⲆⲆΔ[78] = [];
            this.ⲆⲆΔ[75] = [];
            this.ⲆⲆΔ[76] = [];
            this.ⲆⲆΔ[64] = [];
            this.ⲆⲆΔ[69] = [];
            this.ⲆⲆΔ[68] = [];
            this.ⲆⲆΔ[79] = [];
            this.ⲆⲆΔ[89] = [];
            this.ⲆⲆΔ[83] = [];
            this.ⲆⲆΔ[84] = [];
            this.ⲆⲆΔ[85] = [];
            this.ⲆⲆΔ[81] = [];
            this.ⲆⲆΔ[82] = [];
            this.ⲆⲆΔ[86] = [];
            this.ⲆⲆΔ[34] = [];
            this.ⲆⲆΔ[36] = [];
            this.ⲆⲆΔ[61] = [];
            this.ⲆⲆΔ[87] = [];
            this.ⲆⲆΔ[42] = [];
        };
        this.ⲆⵠᐃᐃᐃⵠⵠΔⲆ = function (a) {
            if (this.ᐃⲆⵠΔᐃ[a]) {
                ᐃⲆⲆⵠ = this.ᐃⲆⵠΔᐃ[a].type;
                this.ᐃⲆⵠΔᐃ[a] = null;
                for (var b = this.ⲆⲆΔ[ᐃⲆⲆⵠ], c = 0; b.length > c; c++) {
                    if (a == b[c].ΔⵠᐃⲆ) {
                        b.splice(c, 1);
                        return;
                    }
                }
            }
        };
        this.ΔⵠΔⵠⵠΔⵠⵠᐃ = function (a, b) {
            for (var c = 0; c < this.ⲆⲆΔ[56].length; c++) {
                var d = this.ⲆⲆΔ[56][c];
                if (b === Math.floor(d.x / 100) && Math.floor(d.y / 100) === a) {
                    return 1;
                }
            }
            return 0;
        };
        this.ⲆΔⵠΔⲆⲆᐃᐃΔ = function (a, b) {
            for (var c = 0; this.ⲆⲆΔ[30].length > c; c++) {
                var d = this.ⲆⲆΔ[30][c];
                if (Math.floor(d.x / 100) == a && Math.floor(d.y / 100) == b) {
                    return hj;
                }
            }
            return ie;
        };
        this.ΔᐃᐃⲆΔ = function (j) {
            for (var e = 0; j.length > e; e++) {
                ⲆⲆⵠⲆ = j[e];
                if (ⲆⲆⵠⲆ.angle != ⲆⲆⵠⲆ.ᐃᐃᐃΔΔΔⵠ) {
                    var q = Math.PI * 2;
                    ⲆⲆⵠⲆ.angle = (ⲆⲆⵠⲆ.angle + q) % q;
                    ⲆⲆⵠⲆ.ᐃᐃᐃΔΔΔⵠ = (ⲆⲆⵠⲆ.ᐃᐃᐃΔΔΔⵠ + q) % q;
                    if (ⲆⲆⵠⲆ.ᐃᐃᐃΔΔΔⵠ != ⲆⲆⵠⲆ.angle) {
                        var B = ⲆⲆⵠⲆ.ᐃᐃᐃΔΔΔⵠ - ⲆⲆⵠⲆ.angle;
                        var D = Math.abs(B);
                        if (Math.PI < D) {
                            D = Math.PI * 2 - D;
                        }
                        var E = D / Math.PI * 3 * 10 * tx;
                        if (B > Math.PI) {
                            ⲆⲆⵠⲆ.angle -= E;
                        } else if (-Math.PI > B) {
                            ⲆⲆⵠⲆ.angle += E;
                        } else if (B < 0) {
                            ⲆⲆⵠⲆ.angle -= E;
                        } else {
                            ⲆⲆⵠⲆ.angle += E;
                        }
                        ⲆⲆⵠⲆ.angle = (ⲆⲆⵠⲆ.angle + q) % q;
                        if (E > Math.abs(ⲆⲆⵠⲆ.angle - ⲆⲆⵠⲆ.ᐃᐃᐃΔΔΔⵠ)) {
                            ⲆⲆⵠⲆ.angle = ⲆⲆⵠⲆ.ᐃᐃᐃΔΔΔⵠ;
                        }
                    }
                }
                Math.floor(ⲆⲆⵠⲆ.r.y / 100);
                Math.floor(ⲆⲆⵠⲆ.r.x / 100);
                if (ⲆⲆⵠⲆ.x != ⲆⲆⵠⲆ.r.x || ⲆⲆⵠⲆ.y != ⲆⲆⵠⲆ.r.y) {
                    if (ⲆⲆⵠⲆ.action & 64) {
                        ⲆⲆⵠⲆ.action -= 64;
                    }
                    ⲆⲆⵠⲆ.action |= 32;
                    var F = Z.ΔᐃΔᐃᐃΔⵠ(ⲆⲆⵠⲆ, ⲆⲆⵠⲆ.r) + Math.PI;
                    var G = ⲆⲆⵠⲆ.ΔⵠⲆⲆⲆ * tx;
                    var H = Z.ᐃⵠΔⵠᐃᐃⵠ(G, F);
                    if (Z.ⲆⵠⵠⵠᐃⵠΔ(Z.ΔⵠΔⵠⲆⵠⵠ(ⲆⲆⵠⲆ, ⲆⲆⵠⲆ.r)) > Z.ⲆⵠⵠⵠᐃⵠΔ(H)) {
                        Z.ᐃΔⲆΔⵠⵠⲆ(ⲆⲆⵠⲆ, H);
                    } else {
                        if (ⲆⲆⵠⲆ.action & 32) {
                            ⲆⲆⵠⲆ.action -= 32;
                        }
                        ⲆⲆⵠⲆ.action |= 64;
                        Z.ⲆⵠⵠΔᐃⵠⲆ(ⲆⲆⵠⲆ.r, ⲆⲆⵠⲆ);
                    }
                }
                if (ⲆⲆⵠⲆ.ⲆᐃⵠⲆᐃ) {
                    var I = ⲆⲆⵠⲆ.bubbles;
                    if ((M = I.length) === 0 || M < _r.ᐃⲆⵠᐃᐃⵠⵠ && I[M - 1].Ⲇⵠⵠⵠⵠ < 0.95) {
                        I.push({
                            id: Math.floor(Math.random() * ΔⲆ[540][0].length),
                            x: Math.floor(ⲆⲆⵠⲆ.x + Math.random() * 80 - 40),
                            y: Math.floor(ⲆⲆⵠⲆ.y + Math.random() * 80 - 40),
                            Ⲇⵠⵠⵠⵠ: 1
                        });
                    }
                    for (var J = 0; J < M; J++) {
                        I[J].Ⲇⵠⵠⵠⵠ = Math.max(0, I[J].Ⲇⵠⵠⵠⵠ - tx);
                    }
                    for (J = 0; J < M; J++) {
                        if (I[J].Ⲇⵠⵠⵠⵠ === 0) {
                            I.splice(J, 1);
                            break;
                        }
                    }
                }
                var K = 0;
                if (ⲆⲆⵠⲆ.Ⲇᐃᐃᐃ && jx.ⵠᐃᐃᐃⵠ) {
                    var L = ⲆⲆⵠⲆ.ᐃⲆᐃⲆΔ;
                    var M = L.length;
                    if (ⲆⲆⵠⲆ.ΔΔⵠⲆⲆᐃⲆ > 0 && ⲆⲆⵠⲆ.ΔᐃΔⲆᐃ !== 227 && ⲆⲆⵠⲆ.ΔᐃΔⲆᐃ !== 228 && ⲆⲆⵠⲆ.ΔᐃΔⲆᐃ !== 230 && ⲆⲆⵠⲆ.ΔᐃΔⲆᐃ !== 229 && ⲆⲆⵠⲆ.ΔᐃΔⲆᐃ !== 91 && !ⲆⲆⵠⲆ.ⲆᐃⵠⲆᐃ && (K = 1, M === 0 || _r.ΔΔΔᐃᐃΔⵠ < Z.ᐃⵠᐃᐃ(L[M - 1], ⲆⲆⵠⲆ))) {
                        var N = -ⲆⲆⵠⲆ.angle;
                        var O = yo * (Math.cos(N) * 45);
                        var Q = yo * (Math.sin(N) * 45);
                        L.push({
                            x: ⲆⲆⵠⲆ.x + O,
                            y: ⲆⲆⵠⲆ.y + Q,
                            r: 8,
                            alpha: 0.8
                        });
                        L.push({
                            x: ⲆⲆⵠⲆ.x - O,
                            y: ⲆⲆⵠⲆ.y - Q,
                            r: 8,
                            alpha: 0.8
                        });
                        L.push({
                            x: ⲆⲆⵠⲆ.x,
                            y: ⲆⲆⵠⲆ.y,
                            r: 24,
                            alpha: 1
                        });
                    }
                    for (J = 0; M > J; J++) {
                        L[J].alpha = Math.max(0, L[J].alpha - tx / 2.2);
                        L[J].r += tx * 20;
                    }
                    if (L.length > 0 && L[0].alpha === 0) {
                        L.splice(0, 1);
                    }
                    var R = ⲆⲆⵠⲆ.ᐃⵠᐃⵠᐃ;
                    M = R.length;
                    var S = -1;
                    var U = Math.max(0, Math.sign(ⲆⲆⵠⲆ.ᐃⲆΔⲆᐃᐃⲆ));
                    var V = Math.max(0, Math.sign(ⲆⲆⵠⲆ.ⲆⵠΔⵠΔ));
                    Math.max(0, Math.sign(ⲆⲆⵠⲆ.ⲆᐃᐃⵠΔ));
                    var W = Math.max(0, Math.sign(ⲆⲆⵠⲆ.ⲆᐃᐃᐃⲆ));
                    var X = Math.max(0, Math.sign(ⲆⲆⵠⲆ.ΔⵠⵠᐃΔ));
                    if (ⲆⲆⵠⲆ.ᐃⲆΔⲆᐃᐃⲆ > 0 || ⲆⲆⵠⲆ.ⲆᐃᐃⵠΔ > 0) {
                        S = 602;
                    } else if (ⲆⲆⵠⲆ.ΔⵠⵠᐃΔ > 0) {
                        S = 680;
                    } else if (ⲆⲆⵠⲆ.ⲆⵠΔⵠΔ > 0) {
                        S = 475;
                    } else if (ⲆⲆⵠⲆ.ⲆᐃᐃᐃⲆ > 0) {
                        S = 476;
                    }
                    if (ⲆⲆⵠⲆ.ΔᐃΔⲆᐃ === 225 && (U | V | W | X) == 1) {
                        S = 228;
                        var Y = ⲆⲆⵠⲆ.ᐃⵠᐃⵠⲆ - Math.PI / 2;
                        var _ = 15;
                        var aa = 11;
                        var ba = _r.ᐃΔΔⲆⲆΔⲆ;
                    } else if (ⲆⲆⵠⲆ.ΔᐃΔⲆᐃ === 239 && (U | V | W | X) === 1) {
                        S = 249;
                        Y = ⲆⲆⵠⲆ.ᐃⵠᐃⵠⲆ - Math.PI / 2;
                        _ = 21;
                        aa = 16;
                        ba = _r.ᐃΔΔⲆⲆΔⲆ;
                    } else if (ⲆⲆⵠⲆ.ΔᐃΔⲆᐃ === 226 && (U | V | W | X) === 1) {
                        S = 234;
                        Y = ⲆⲆⵠⲆ.ᐃⵠᐃⵠⲆ - Math.PI / 2;
                        var ca = Math.random() * 50;
                        _ = 10 + ca;
                        aa = 0 + ca;
                        ba = _r.ᐃΔΔⲆⲆΔⲆ * 0.9;
                    } else {
                        Y = ⲆⲆⵠⲆ.angle;
                        _ = 15;
                        aa = 11;
                        ba = _r.ᐃΔΔⲆⲆΔⲆ;
                    }
                    if (ⲆⲆⵠⲆ.ΔᐃΔⲆᐃ === 227 || ⲆⲆⵠⲆ.ΔᐃΔⲆᐃ === 228 || ⲆⲆⵠⲆ.ΔᐃΔⲆᐃ === 91 || ⲆⲆⵠⲆ.ΔᐃΔⲆᐃ === 229 || ⲆⲆⵠⲆ.ΔᐃΔⲆᐃ === 230 || ⲆⲆⵠⲆ.ⲆᐃⵠⲆᐃ); else if (ⲆⲆⵠⲆ.ΔᐃΔⲆᐃ === 224) {
                        if (M === 0 || _r.ΔⵠⵠⲆⲆΔⲆ < Z.ᐃⵠᐃᐃ(R[M - 1], ⲆⲆⵠⲆ)) {
                            R.push({
                                x: ⲆⲆⵠⲆ.x,
                                y: ⲆⲆⵠⲆ.y,
                                angle: ⲆⲆⵠⲆ.ᐃⵠᐃⵠⲆ,
                                alpha: 1,
                                id: 226
                            });
                        }
                    } else if (S != -1 && K === 0 && (M === 0 || ba < Z.ᐃⵠᐃᐃ(R[M - 1], ⲆⲆⵠⲆ))) {
                        ⲆⲆⵠⲆ.ᐃΔⲆⲆΔΔⲆ++;
                        if (Math.abs(ⲆⲆⵠⲆ.x - ⲆⲆⵠⲆ.r.x) > 1 && Math.abs(ⲆⲆⵠⲆ.y - ⲆⲆⵠⲆ.r.y) > 1) {
                            if (ⲆⲆⵠⲆ.x < ⲆⲆⵠⲆ.r.x && ⲆⲆⵠⲆ.r.y < ⲆⲆⵠⲆ.y || ⲆⲆⵠⲆ.r.x < ⲆⲆⵠⲆ.x && ⲆⲆⵠⲆ.y < ⲆⲆⵠⲆ.r.y) {
                                if (ⲆⲆⵠⲆ.ᐃΔⲆⲆΔΔⲆ % 2) {
                                    O = yo * -aa;
                                    Q = yo * -aa;
                                } else {
                                    Q = yo * aa;
                                    O = aa * yo;
                                }
                            } else if (ⲆⲆⵠⲆ.ᐃΔⲆⲆΔΔⲆ % 2) {
                                O = aa * yo;
                                Q = -aa * yo;
                            } else {
                                Q = aa * yo;
                                O = -aa * yo;
                            }
                        } else if (ⲆⲆⵠⲆ.ᐃΔⲆⲆΔΔⲆ % 2) {
                            O = yo * (_ * Math.cos(Y));
                            Q = Math.sin(Y) * _ * yo;
                        } else {
                            O = _ * -Math.cos(Y) * yo;
                            Q = _ * -Math.sin(Y) * yo;
                        }
                        R.push({
                            x: ⲆⲆⵠⲆ.x + O,
                            y: ⲆⲆⵠⲆ.y + Q,
                            angle: Y + Math.PI / 2,
                            alpha: 1,
                            id: S
                        });
                    }
                    for (J = 0; M > J; J++) {
                        if (R[J].id === 226) {
                            R[J].alpha = Math.max(0, R[J].alpha - tx * 1.5);
                        } else {
                            R[J].alpha = Math.max(0, R[J].alpha - tx / 2.85);
                        }
                    }
                    if (R.length > 0 && R[0].alpha === 0) {
                        R.splice(0, 1);
                    }
                }
            }
        };
        this.ᐃⵠⲆ = function () {
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[0]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[80]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[60]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[67]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[70]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[77]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[71]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[72]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[73]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[74]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[61]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[62]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[88]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[91]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[90]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[63]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[78]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[75]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[76]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[64]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[68]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[65]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[66]);
            this.ΔᐃᐃⲆΔ(this.ⲆⲆΔ[69]);
        };
        this.ⲆⵠⲆᐃ = [];
        this.ⲆⵠⲆᐃ[620] = new Z.ΔⲆⲆᐃ(ca, 1, 1.05, 1, 0.008, 0.008);
        this.ⲆⵠⲆᐃ[619] = new Z.ΔⲆⲆᐃ(ek, 1, 1.08, 1, 0.006, 0.006);
        this.ⲆⵠⲆᐃ[694] = new Z.ΔⲆⲆᐃ(false, 1, 1.02, 1, 0.008, 0.008);
        this.ⲆⵠⲆᐃ[695] = new Z.ΔⲆⲆᐃ(vn, 1, 1.08, 1, 0.006, 0.006);
        this.ⲆⵠᐃΔΔ = [];
        this.ⲆⵠᐃΔΔ[0] = new Z.ΔⲆⲆᐃ(false, 0.1, 1, 0, 0.6, 0.6);
        this.ⲆⵠᐃΔΔ[1] = new Z.ΔⲆⲆᐃ(false, 0.4, 1, 0, 0.6, 0.6);
        this.ⲆⵠᐃΔΔ[2] = new Z.ΔⲆⲆᐃ(false, 0.3, 1, 0, 0.6, 0.6);
        this.ⲆⵠᐃΔΔ[3] = new Z.ΔⲆⲆᐃ(ek, 0.8, 1, 0, 0.6, 0.6);
        this.ⲆⵠᐃΔΔ[4] = new Z.ΔⲆⲆᐃ(false, 0.3, 1, 0, 0.6, 0.6);
        this.ⲆⵠᐃΔΔ[5] = new Z.ΔⲆⲆᐃ(zj, 0.8, 1, 0, 0.6, 0.6);
        this.ⲆⵠᐃΔΔ[6] = new Z.ΔⲆⲆᐃ(ek, 0.5, 1, 0, 0.6, 0.6);
        this.ⲆⵠᐃΔΔ[7] = new Z.ΔⲆⲆᐃ(false, 0.9, 1, 0, 0.6, 0.6);
        this.ⲆⵠᐃΔΔ[8] = new Z.ΔⲆⲆᐃ(Mr, 0.6, 1, 0, 0.6, 0.6);
        this.ⲆⵠᐃΔΔ[9] = new Z.ΔⲆⲆᐃ(Sg, 0.2, 1, 0, 0.6, 0.6);
        this.ⲆⵠᐃΔΔ[10] = new Z.ΔⲆⲆᐃ(false, 0.6, 1, 0, 0.6, 0.6);
        this.ⲆⵠᐃΔΔ[11] = new Z.ΔⲆⲆᐃ(vn, 0.4, 1, 0, 0.6, 0.6);
        this.ⲆⵠᐃΔΔ[12] = new Z.ΔⲆⲆᐃ(gj, 0.8, 1, 0, 0.6, 0.6);
        this.ⲆⵠᐃΔΔ[13] = new Z.ΔⲆⲆᐃ(false, 0.2, 1, 0, 0.6, 0.6);
        this.ⲆⵠᐃΔΔ[14] = new Z.ΔⲆⲆᐃ(el, 0.7, 1, 0, 0.6, 0.6);
    }
    function _f(b, c, d, e, f, i, a, j, k, h) {
        this.type = b;
        this.ΔⵠⵠⲆ = c;
        this.id = d;
        this.x = e;
        this.y = f;
        this.angle = i;
        this.ᐃᐃᐃΔΔΔⵠ = i;
        this.action = a;
        this.info = j;
        this.ᐃᐃΔᐃⵠ = h;
        this.r = {
            x: e,
            y: f
        };
        this.ΔⵠⲆⲆⲆ = k;
        if (mx) {
            this.ΔⵠᐃⲆ = c * mx.ΔⲆⲆᐃⲆᐃᐃ + d;
        }
        switch (b) {
            case 0:
                this.ΔΔⲆⲆ = mx.ⵠᐃΔΔ[this.ΔⵠⵠⲆ];
                this.ᐃΔⲆΔ = this.ΔΔⲆⲆ.ᐃΔⲆΔ;
                this.ⲆΔⵠⵠᐃⲆΔ = this.ΔΔⲆⲆ.ⲆΔⵠⵠᐃⲆΔ;
                this.ΔⵠΔⵠⲆ = this.ΔΔⲆⲆ.ΔⵠΔⵠⲆ;
                this.ⲆᐃⲆΔΔ = this.ΔΔⲆⲆ.ⲆᐃⲆΔΔ;
                this.ⵠΔⲆⲆⵠᐃⲆ = -1000000;
                this.ⲆᐃᐃᐃⲆ = -1000000;
                this.ⲆⵠΔⵠΔ = -1000000;
                this.ⲆᐃᐃⵠΔ = -1000000;
                this.ΔΔⵠⲆⲆᐃⲆ = -1000000;
                this.ᐃⲆΔⲆᐃᐃⲆ = -1000000;
                this.ΔⵠⵠᐃΔ = -1000000;
                this.ΔⵠⵠⵠⲆ = mx.mode === 2 && this.ᐃΔⲆΔ === 0 ? Ca : Yk;
                this.ΔⲆΔᐃᐃⲆⵠ = mx.mode === 3 && this.ᐃΔⲆΔ === 0;
                this.ⲆᐃⲆⲆᐃΔⵠ = this.ΔⵠⵠⵠⲆ && this.ΔΔⲆⲆ.ⲆΔΔⵠⲆ === "  " ? Pj : gj;
                this.ᐃⵠᐃⵠᐃ = [];
                this.ΔΔⵠⵠⲆⵠⵠ = 0;
                this.Ⲇᐃᐃᐃ = true;
                this.ᐃΔⲆⲆΔΔⲆ = 0;
                this.ⵠΔⲆᐃᐃⲆⲆ = 0;
                this.ᐃⲆᐃⲆΔ = [];
                this.r = {
                    x: e,
                    y: f
                };
                this.Δⵠᐃⵠ = Yv;
                this.ⲆΔΔⵠⲆᐃⵠ = Tv;
                this.ⲆΔⲆΔᐃ = 0;
                this.ᐃⵠᐃⵠⲆ = 0;
                this.ΔⲆⵠᐃᐃ = 0;
                this.ⵠΔⲆⵠⲆΔΔ = new Z.ΔⲆⲆᐃ(el, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ᐃⲆᐃΔᐃ = 0;
                this.ⵠⵠⵠⲆΔⵠⲆ = 0;
                this.ⲆΔᐃⲆ = new Z.ΔⲆⲆᐃ(kr, 0.6, 0.6, 0, 5, 3);
                this.ⲆΔΔΔⲆ = new Z.ΔⲆⲆᐃ(gj, 0.6, 0.6, 0, 5, 3);
                this.freeze = new Z.ΔⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                this.ⵠΔⵠⲆᐃⲆⵠ = new Z.ΔⲆⲆᐃ(Sg, 0.6, 0.6, 0, 5, 3);
                this.ⵠᐃⵠⲆⲆΔⵠ = new Z.ΔⲆⲆᐃ(vr, 0, 2.25, -1.5, 3.75, 7.5);
                this.ΔⵠᐃⵠΔⵠⲆ = new Z.ΔⲆⲆᐃ(true, 0, 7.5, -3, 22.5, 33.75);
                this.attack = new Z.ΔⲆⲆᐃ(false, 0, 0, -Math.PI / 3, 6, 9);
                this.ᐃᐃⵠⲆΔᐃΔⲆΔ = 0;
                this.ⲆⲆⵠΔᐃᐃΔ = new Z.ΔⲆⲆᐃ(false, 0.6, 0.6, 0, 1, 3);
                this.ⵠⵠᐃΔⵠΔᐃ = this.ⲆᐃⲆⲆᐃΔⵠ ? new Z.ΔⲆⲆᐃ(Hj, 0, 2.25, -1.5, 2.75, 5.5) : 0;
                this.ⲆⵠΔⵠᐃⲆⲆ = 0;
                this.ΔⲆΔΔᐃⲆΔ = 0;
                this.ⵠΔᐃⵠⲆΔᐃ = [];
                this.ᐃⲆΔⲆⲆᐃⲆ = [];
                this.text = [];
                this.label = [];
                this.ⲆᐃΔΔⵠΔⵠ = Vv;
                this.ΔΔΔⲆⵠ = true;
                this.right = -1;
                this.ΔᐃΔⲆᐃ = -1;
                this.action = 64;
                this.ⵠⲆᐃᐃⵠⵠΔ = false;
                this.ⲆⵠⲆⵠᐃ = 0;
                this.ⲆᐃⵠⲆᐃ = nq;
                this.bubbles = [];
                this.Ⲇⵠᐃⵠᐃ = 0;
                this.ᐃᐃⵠⵠΔ = -1;
                this.ᐃⵠⲆ = function (a) {
                    if (this.info & 32768) {
                        this.ⵠⲆᐃᐃⵠⵠΔ = true;
                        this.info = this.info & -32769;
                    } else {
                        this.ⵠⲆᐃᐃⵠⵠΔ = kr;
                    }
                    if (this.info & 16384) {
                        this.info = this.info & -16385;
                        this.Ⲇⵠᐃⵠᐃ = 1;
                    } else {
                        this.Ⲇⵠᐃⵠᐃ = 0;
                    }
                    this.ⲆⵠⲆⵠᐃ = Math.floor(this.info / 128);
                    this.info -= this.ⲆⵠⲆⵠᐃ * 128;
                    if (this.info === 7 || this.ⲆᐃⲆⲆᐃΔⵠ) {
                        this.right = -1;
                    } else {
                        this.right = this.info;
                    }
                    this.ΔΔⵠⵠⲆⵠⵠ = mx.ΔⵠΔⵠⵠΔⵠⵠᐃ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
                    this.ΔᐃΔⲆᐃ = this.ᐃᐃΔᐃⵠ & 255;
                    if (this.right === 2) {
                        this.ⲆᐃⵠⲆᐃ = true;
                    } else {
                        this.ⲆᐃⵠⲆᐃ = false;
                    }
                    if (Mf[this.right]) {
                        this.ⲆⵠⵠⲆⵠ = Gr;
                    } else {
                        this.ⲆⵠⵠⲆⵠ = false;
                    }
                    if (a & 256) {
                        this.ⲆⲆⵠΔᐃᐃΔ.ᐃⵠΔ = nq;
                        this.ⲆⲆⵠΔᐃᐃΔ.ΔⲆᐃ = 0.6;
                    } else if (a & 4) {
                        this.freeze.ᐃⵠΔ = false;
                        this.freeze.ΔⲆᐃ = 0.6;
                    } else if (a & 128) {
                        this.ⲆΔΔΔⲆ.ᐃⵠΔ = zj;
                        this.ⲆΔΔΔⲆ.ΔⲆᐃ = 0.6;
                    }
                    if (a & 8) {
                        this.ⵠΔⵠⲆᐃⲆⵠ.ᐃⵠΔ = false;
                        this.ⵠΔⵠⲆᐃⲆⵠ.ΔⲆᐃ = 0.6;
                    }
                    if (a & 2) {
                        this.ⲆΔᐃⲆ.ᐃⵠΔ = false;
                        this.ⲆΔᐃⲆ.ΔⲆᐃ = 0.6;
                    }
                    if (a & 16) {
                        this.ᐃᐃⵠⲆΔᐃΔⲆΔ = 0.58;
                        if (qx.ΔΔⵠⵠΔ && this.ᐃᐃⵠⵠΔ !== -1) {
                            qx.ⵠᐃΔΔ[this.ᐃᐃⵠⵠΔ].ΔΔΔΔΔⵠᐃᐃⲆ(Uw[this.right]);
                        }
                    }
                };
                this.ᐃⵠⲆ();
                break;
            case 23:
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(th, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: kr,
                    angle: 0
                };
                this.ⵠⵠᐃⵠᐃ = cv;
                this.ᐃᐃⲆΔᐃ = pv;
                this.ΔΔⵠᐃⲆ = new Z.ΔⲆⲆᐃ(Br, 1, 1.23, 1.18, 0.01, 0.01);
                this.ΔⵠⵠᐃⵠᐃΔ = 0;
                this.ⲆᐃᐃΔᐃⲆⲆ = 0;
                this.ⵠᐃᐃᐃⲆ = jp;
                break;
            case 22:
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(kr, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: false,
                    angle: 0
                };
                this.ⵠⵠᐃⵠᐃ = Mv;
                this.ᐃᐃⲆΔᐃ = tv;
                this.ΔΔⵠᐃⲆ = new Z.ΔⲆⲆᐃ(ie, 1, 1.23, 1.18, 0.01, 0.01);
                this.ΔⵠⵠᐃⵠᐃΔ = 0;
                this.ⲆᐃᐃΔᐃⲆⲆ = 0;
                break;
            case 1:
            case 6:
                this.ⵠⵠᐃⵠᐃ = Ov;
                this.ᐃᐃⲆΔᐃ = lv;
                this.ᐃΔᐃΔΔ = new Z.ΔⲆⲆᐃ(false, 1, 1.03, 0.98, 0.3, 0.3);
                this.ᐃΔᐃΔ = new Z.ΔⲆⲆᐃ(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.ΔΔⵠᐃⲆ = new Z.ΔⲆⲆᐃ(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: rg,
                    angle: 0
                };
                break;
            case 43:
                this.ⵠⵠᐃⵠᐃ = Qv;
                this.ᐃᐃⲆΔᐃ = sv;
                this.ᐃΔᐃΔ = new Z.ΔⲆⲆᐃ(Yk, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: false,
                    angle: 0
                };
                this.ⵠᐃⵠⲆ = [];
                for (var l = 0; l < 3; l++) {
                    this.ⵠᐃⵠⲆ.push({
                        Δⵠᐃⵠ: Su,
                        ⲆⵠⲆᐃ: new Z.ΔⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.ⵠᐃⵠⲆ[0].x = this.x - 16.5;
                this.ⵠᐃⵠⲆ[0].y = this.y - 15.5;
                this.ⵠᐃⵠⲆ[0].angle = this.angle;
                this.ⵠᐃⵠⲆ[1].x = this.x + 36;
                this.ⵠᐃⵠⲆ[1].y = this.y + 17;
                this.ⵠᐃⵠⲆ[1].angle = this.angle;
                this.ⵠᐃⵠⲆ[2].x = this.x - 18.5;
                this.ⵠᐃⵠⲆ[2].y = this.y + 39;
                this.ⵠᐃⵠⲆ[2].angle = this.angle;
                break;
            case 3:
                this.ⵠⵠᐃⵠᐃ = Kv;
                this.ᐃᐃⲆΔᐃ = wv;
                this.ᐃΔᐃΔ = new Z.ΔⲆⲆᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: kr,
                    angle: 0
                };
                this.ⵠᐃⵠⲆ = [];
                for (l = 0; l < 3; l++) {
                    this.ⵠᐃⵠⲆ.push({
                        Δⵠᐃⵠ: Lv,
                        ⲆⵠⲆᐃ: new Z.ΔⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.ⵠᐃⵠⲆ[0].x = this.x - 16.5;
                this.ⵠᐃⵠⲆ[0].y = this.y - 15.5;
                this.ⵠᐃⵠⲆ[1].x = this.x - 5.5;
                this.ⵠᐃⵠⲆ[1].y = this.y + 7.5;
                this.ⵠᐃⵠⲆ[2].x = this.x + 18;
                this.ⵠᐃⵠⲆ[2].y = this.y - 5;
                break;
            case 77:
                this.Δⵠᐃⵠ = Lu;
                this.ⲆⵠⲆᐃ = new Z.ΔⲆⲆᐃ(Br, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆΔᐃⲆ = new Z.ΔⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 70:
                this.Δⵠᐃⵠ = Tu;
                this.ⲆⵠⲆᐃ = new Z.ΔⲆⲆᐃ(el, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆΔᐃⲆ = new Z.ΔⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 71:
                this.Δⵠᐃⵠ = vv;
                this.ⲆⵠⲆᐃ = new Z.ΔⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆⲆΔⵠΔⵠⲆ = new Z.ΔⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆᐃⵠΔⵠΔᐃ = new Z.ΔⲆⲆᐃ(ca, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆΔᐃⲆ = new Z.ΔⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                this.ⲆΔΔΔⲆ = new Z.ΔⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 67:
                this.Δⵠᐃⵠ = av;
                this.ⲆⵠⲆᐃ = new Z.ΔⲆⲆᐃ(Mr, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆⲆΔⵠΔⵠⲆ = new Z.ΔⲆⲆᐃ(Bl, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆᐃⵠΔⵠΔᐃ = new Z.ΔⲆⲆᐃ(Yk, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆΔᐃⲆ = new Z.ΔⲆⲆᐃ(zj, 0.6, 0.6, 0, 5, 3);
                this.ⲆΔΔΔⲆ = new Z.ΔⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 68:
                this.Δⵠᐃⵠ = Iv;
                this.ⲆⵠⲆᐃ = new Z.ΔⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆΔᐃⲆ = new Z.ΔⲆⲆᐃ(el, 0.6, 0.6, 0, 5, 3);
                break;
            case 90:
                this.Δⵠᐃⵠ = _u;
                this.ⲆⵠⲆᐃ = new Z.ΔⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
                this.ⲆΔᐃⲆ = new Z.ΔⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 91:
                this.ⲆⲆⲆΔΔ = this.info & 15;
                this.ⵠΔⲆᐃᐃⲆⲆ = this.ᐃᐃΔᐃⵠ & 1;
                this.ΔⲆΔΔⵠᐃⲆ = 0;
                this.x = this.info;
                this.y = this.ᐃᐃΔᐃⵠ;
                this.Δⵠᐃⵠ = nv;
                this.ⲆⵠⲆᐃ = new Z.ΔⲆⲆᐃ(kr, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
                break;
            case 80:
            case 60:
            case 61:
            case 62:
            case 63:
            case 78:
            case 65:
            case 66:
            case 88:
                this.Δⵠᐃⵠ = _u;
                this.ⲆⵠⲆᐃ = new Z.ΔⲆⲆᐃ(ie, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆΔᐃⲆ = new Z.ΔⲆⲆᐃ(Yn, 0.6, 0.6, 0, 5, 3);
                break;
            case 36:
                this.Δⵠᐃⵠ = Ev;
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: nh,
                    angle: 0
                };
                break;
            case 34:
                this.ᐃᐃⲆΔᐃ = Hv;
                this.Δⵠᐃⵠ = xv;
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(ek, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: z,
                    angle: 0
                };
                this.up = new Z.ΔⲆⲆᐃ(nq, 1, 1.03, 0.98, 0.1, 0.1);
                this.ⵠⵠⲆᐃᐃ = [];
                break;
            case 87:
                this.angle = Math.random() * Math.PI / 2;
            case 86:
            case 82:
                this.Δⵠᐃⵠ = Mu;
                this.ⲆΔᐃⲆ = new Z.ΔⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 81:
                this.Δⵠᐃⵠ = Pv;
                this.ⲆΔᐃⲆ = new Z.ΔⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 69:
                this.scale = 1;
                this.Δⵠᐃⵠ = uv;
                this.ⲆⵠⲆᐃ = new Z.ΔⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new Z.ΔⲆⲆᐃ(Yk, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⲆΔᐃⲆ = new Z.ΔⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 76:
                this.ⵠⲆⲆⲆᐃ = 0;
                this.ᐃΔᐃΔ = [];
                this.ⲆⲆᐃⵠⵠᐃⲆ = 0;
                this.ⲆᐃΔⲆᐃⲆⲆ = Cv;
                this.Δⵠᐃⵠ = ov;
                this.ⲆⵠⲆᐃ = new Z.ΔⲆⲆᐃ(Yk, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new Z.ΔⲆⲆᐃ(ca, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⲆΔᐃⲆ = new Z.ΔⲆⲆᐃ(Sg, 0.6, 0.6, 0, 5, 3);
                break;
            case 75:
                this.x = this.info;
                this.y = this.ᐃᐃΔᐃⵠ;
                this.scale = 1;
                this.ⵠᐃᐃⲆ = 0;
                this.Δⵠᐃⵠ = zv;
                this.ⲆⵠⲆᐃ = new Z.ΔⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new Z.ΔⲆⲆᐃ(nh, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⲆΔᐃⲆ = new Z.ΔⲆⲆᐃ(vn, 0.6, 0.6, 0, 5, 3);
                break;
            case 74:
                this.x = this.info;
                this.y = this.ᐃᐃΔᐃⵠ;
                this.scale = 1;
                this.ⵠᐃᐃⲆ = 0;
                this.Δⵠᐃⵠ = Ku;
                this.ⲆⵠⲆᐃ = new Z.ΔⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new Z.ΔⲆⲆᐃ(th, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⲆΔᐃⲆ = new Z.ΔⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 73:
                this.scale = 1;
                this.Δⵠᐃⵠ = Uu;
                this.ⲆⵠⲆᐃ = new Z.ΔⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new Z.ΔⲆⲆᐃ(zj, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⲆΔᐃⲆ = new Z.ΔⲆⲆᐃ(vn, 0.6, 0.6, 0, 5, 3);
                break;
            case 72:
                this.scale = 1;
                this.Δⵠᐃⵠ = Pu;
                this.ⲆⵠⲆᐃ = new Z.ΔⲆⲆᐃ(Sg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new Z.ΔⲆⲆᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⲆΔᐃⲆ = new Z.ΔⲆⲆᐃ(th, 0.6, 0.6, 0, 5, 3);
                break;
            case 64:
                this.scale = 1;
                this.Δⵠᐃⵠ = Av;
                this.ⲆⵠⲆᐃ = new Z.ΔⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new Z.ΔⲆⲆᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⲆΔᐃⲆ = new Z.ΔⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 100:
                this.ⵠᐃⵠⲆ = [];
                for (l = 0; l < 5; l++) {
                    this.ⵠᐃⵠⲆ.push({
                        Δⵠᐃⵠ: Lv,
                        ⲆⵠⲆᐃ: new Z.ΔⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                switch (this.id % 3) {
                    case 0:
                        this.ⵠᐃⵠⲆ[0].x = this.x - 20.5;
                        this.ⵠᐃⵠⲆ[0].y = this.y - 22.5;
                        this.ⵠᐃⵠⲆ[1].x = this.x - 35.5;
                        this.ⵠᐃⵠⲆ[1].y = this.y + 7.5;
                        this.ⵠᐃⵠⲆ[2].x = this.x + 7.5;
                        this.ⵠᐃⵠⲆ[2].y = this.y - 30;
                        this.ⵠᐃⵠⲆ[3].x = this.x + 22.5;
                        this.ⵠᐃⵠⲆ[3].y = this.y;
                        this.ⵠᐃⵠⲆ[4].x = this.x - 7.5;
                        this.ⵠᐃⵠⲆ[4].y = this.y + 14.5;
                        break;
                    case 1:
                        this.ⵠᐃⵠⲆ[0].x = this.x - 30.5;
                        this.ⵠᐃⵠⲆ[0].y = this.y - 22.5;
                        this.ⵠᐃⵠⲆ[1].x = this.x - 15.5;
                        this.ⵠᐃⵠⲆ[1].y = this.y + 7.5;
                        this.ⵠᐃⵠⲆ[2].x = this.x + 15.5;
                        this.ⵠᐃⵠⲆ[2].y = this.y - 30;
                        this.ⵠᐃⵠⲆ[3].x = this.x + 12.5;
                        this.ⵠᐃⵠⲆ[3].y = this.y + 5;
                        this.ⵠᐃⵠⲆ[4].x = this.x - 40.5;
                        this.ⵠᐃⵠⲆ[4].y = this.y + 14.5;
                        break;
                    case 2:
                        this.ⵠᐃⵠⲆ[0].x = this.x - 20.5;
                        this.ⵠᐃⵠⲆ[0].y = this.y - 20.5;
                        this.ⵠᐃⵠⲆ[1].x = this.x - 35.5;
                        this.ⵠᐃⵠⲆ[1].y = this.y + 15.5;
                        this.ⵠᐃⵠⲆ[2].x = this.x + 7.5;
                        this.ⵠᐃⵠⲆ[2].y = this.y - 17;
                        this.ⵠᐃⵠⲆ[3].x = this.x + 22.5;
                        this.ⵠᐃⵠⲆ[3].y = this.y + 5;
                        this.ⵠᐃⵠⲆ[4].x = this.x - 7.5;
                        this.ⵠᐃⵠⲆ[4].y = this.y + 1.5;
                }
                break;
            case 31:
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: rg,
                    angle: 0
                };
                this.Δⵠᐃⵠ = Nu;
                this.ᐃΔᐃΔ = new Z.ΔⲆⲆᐃ(Bl, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ᐃᐃΔᐃᐃΔᐃ = new Z.ΔⲆⲆᐃ(false, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
                break;
            case 40:
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: false,
                    angle: 0
                };
                this.Δⵠᐃⵠ = yv;
                this.ᐃΔᐃΔ = new Z.ΔⲆⲆᐃ(ek, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 39:
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: false,
                    angle: 0
                };
                this.Δⵠᐃⵠ = dv;
                this.ᐃΔᐃΔ = new Z.ΔⲆⲆᐃ(kr, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 44:
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: false,
                    angle: 0
                };
                this.Δⵠᐃⵠ = Ou;
                this.ᐃΔᐃΔ = new Z.ΔⲆⲆᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 55:
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: Yk,
                    angle: 0
                };
                this.Δⵠᐃⵠ = Dv;
                this.ᐃΔᐃΔ = new Z.ΔⲆⲆᐃ(ca, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 54:
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: kr,
                    angle: 0
                };
                this.Δⵠᐃⵠ = jv;
                this.ᐃΔᐃΔ = new Z.ΔⲆⲆᐃ(gj, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 37:
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(gj, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: Yn,
                    angle: 0
                };
                this.Δⵠᐃⵠ = $u;
                this.ᐃΔᐃΔ = new Z.ΔⲆⲆᐃ(Yn, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 24:
                this.Δⵠᐃⵠ = kv;
                this.rotate = 0;
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(nq, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: mh,
                    angle: 0
                };
                break;
            case 25:
                this.Δⵠᐃⵠ = Rv;
                this.rotate = 0;
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(Sg, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: false,
                    angle: 0
                };
                break;
            case 26:
                this.Δⵠᐃⵠ = Qu;
                this.rotate = 0;
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(Yn, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: false,
                    angle: 0
                };
                break;
            case 27:
                this.Δⵠᐃⵠ = mv;
                this.rotate = 0;
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(vn, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: false,
                    angle: 0
                };
                break;
            case 28:
                this.Δⵠᐃⵠ = Gv;
                this.rotate = 0;
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: kr,
                    angle: 0
                };
                break;
            case 32:
                this.ⵠⵠᐃⵠᐃ = Fv;
                this.ᐃᐃⲆΔᐃ = Ru;
                this.rotate = 0;
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(z, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: el,
                    angle: 0
                };
                break;
            case 38:
                this.Δⵠᐃⵠ = Iu;
                this.ⵠᐃⵠΔ = Math.floor(this.x / 100);
                this.ⲆΔ = Math.floor(this.y / 100);
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(rg, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: false,
                    angle: 0
                };
                this.opacity = 1;
                this.ⵠᐃᐃᐃⲆ = Qp;
                break;
            case 42:
                this.Δⵠᐃⵠ = Op;
                this.ΔΔⵠᐃⲆ = new Z.ΔⲆⲆᐃ(false, 1, 1.15, 1, 0.3, 0.3);
                this.color = 0;
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: false,
                    angle: 0
                };
                break;
            case 33:
            case 2:
            case 56:
            case 35:
            case 29:
                this.Δⵠᐃⵠ = Vp;
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: el,
                    angle: 0
                };
                break;
            case 30:
                this.Δⵠᐃⵠ = Vp;
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: false,
                    angle: 0
                };
                this.ⵠᐃᐃᐃⲆ = Qp;
                break;
            case 4:
            case 7:
            case 8:
            case 9:
            case 19:
            case 50:
            case 5:
            case 12:
            case 13:
            case 14:
            case 20:
            case 52:
                this.Δⵠᐃⵠ = Vp;
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: el,
                    angle: 0
                };
                this.ⵠᐃᐃᐃⲆ = jp;
                break;
            case 41:
                this.Δⵠᐃⵠ = Yp;
                this.opacity = 1;
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: false,
                    angle: 0
                };
                var m = this.angle % (Math.PI / 2);
                if (Math.PI / 4 > m) {
                    this.angle -= m;
                } else {
                    this.angle += Math.PI / 2 - m;
                }
                break;
            case 79:
                this.Δⵠᐃⵠ = Du;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case 89:
                this.Δⵠᐃⵠ = Xp;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 83:
                this.Δⵠᐃⵠ = Ep;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 84:
                this.Δⵠᐃⵠ = Rp;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case 85:
                this.Δⵠᐃⵠ = _p;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 11:
                this.ᐃⵠⲆ = function (a) {
                    this.lock = this.info & 8192 ? 1 : 0;
                    this.info = this.info & 8191;
                    this.action = a;
                };
                this.Δⵠᐃⵠ = Gp;
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(Yn, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: Br,
                    angle: 0
                };
                this.lock = 0;
                this.ᐃⵠⲆ(this.action);
                break;
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 53:
            case 10:
            case 15:
            case 16:
            case 17:
            case 21:
            case 51:
                this.Δⵠᐃⵠ = $p;
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: false,
                    angle: 0
                };
                this.ⵠᐃᐃᐃⲆ = jp;
                break;
            case 18:
                this.ⵠⵠᐃⵠᐃ = qv;
                this.Δⵠᐃⵠ = bv;
                this.ᐃᐃⲆΔᐃ = rv;
                this.ᐃΔᐃΔ = new Z.ΔⲆⲆᐃ(gj, 1, 1.23, 1.18, 0.02, 0.02);
                this.ΔΔⵠᐃⲆ = new Z.ΔⲆⲆᐃ(false, 1, 1.23, 1.18, 0.04, 0.04);
                this.ⲆΔᐃⲆ = {
                    ᐃⵠᐃⲆ: new Z.ΔⲆⲆᐃ(th, 1, 1, 0, 10, 10),
                    ᐃⵠⲆ: false,
                    angle: 0
                };
                this.ᐃⵠⲆ = function (a) {
                    this.action = a;
                };
        }
    }
    function Ff() {
        this.ⲆΔΔⵠⲆ = "";
        this.ᐃΔⲆΔ = 0;
        this.ⲆᐃⲆΔΔ = 0;
        this.Ⲇⵠᐃⵠᐃ = 0;
        this.ⲆΔⵠⵠᐃⲆΔ = 0;
        this.ΔⵠΔⵠⲆ = 0;
        this.ᐃΔᐃΔⲆ = 0;
        this.ⵠⲆᐃΔⵠ = 0;
        this.level = 0;
        this.label = null;
        this.ᐃᐃⲆⵠΔⲆⵠ = null;
        this.ⵠΔᐃΔⲆⲆᐃ = null;
        this.ᐃⵠΔⵠΔ = false;
        this.ⵠᐃⲆⲆⵠ = 0;
    }
    function Rf() {
        Math.random();
        return "d";
    }
    ⲆΔᐃΔᐃᐃⲆΔⵠ = 1;
    ;
    function jf() {
        Math.random();
        return "o";
    }
    function Fw() {
        Math.random();
        return "s";
    }
    function Wf() {
        Math.random();
        return "t";
    }
    function Gw() {
        Math.random();
        return "p";
    }
    function Hw() {
        Math.random();
        return "a";
    }
    function Iw() {
        Math.random();
        return "i";
    }
    function qf() {
        Math.random();
        return "g";
    }
    function Wf() {
        Math.random();
        return "t";
    }
    function Uf() {
        Math.random();
        return "C";
    }
    function Yf() {
        Math.random();
        return "n";
    }
    function Kf() {
        Math.random();
        return "e";
    }
    function Vf() {
        Math.random();
        return "r";
    }
    function Gw() {
        Math.random();
        return "p";
    }
    function Hw() {
        Math.random();
        return "a";
    }
    function Xf() {
        this.ⲆⵠᐃⲆⲆ = function () { };
        this.ΔᐃⵠⵠⲆ = {
            ΔᐃⲆΔΔ: 1,
            open: false,
            ΔⵠⵠⲆ: 1
        };
        this.ⲆⲆΔⵠΔ = {
            open: false,
            ΔⵠⵠⲆ: 1,
            ΔᐃⲆΔΔ: -1
        };
        this.ᐃΔᐃⵠ = {
            ⲆᐃⲆΔᐃⵠⲆ: 0,
            ⲆΔⵠᐃᐃ: 0,
            ΔⵠⵠⲆ: 1,
            ΔᐃⲆΔΔ: -1,
            open: false
        };
        this.ⵠᐃⲆⲆ = {
            ΔⵠⵠⲆ: 1,
            ⵠⲆΔⵠᐃⲆⵠ: 0,
            open: false,
            ΔⲆΔⲆⵠⵠⲆ: 0,
            ΔᐃⲆΔΔ: -1,
            ᐃⲆᐃⲆⲆΔⲆ: 0,
            type: 0
        };
        this.ⲆⲆⲆΔ = {
            ΔⵠⵠⲆ: 1,
            ΔᐃⲆΔΔ: -1,
            ⵠⲆΔⵠᐃⲆⵠ: 0,
            ⲆⲆⲆⲆⵠⵠⵠ: 0,
            open: false,
            ⲆΔⵠᐃᐃ: 0
        };
        this.sign = {
            ΔᐃⲆΔΔ: -1,
            open: th
        };
        this.Δᐃⵠⵠᐃ = {
            ⵠⲆᐃΔ: 0,
            ΔⵠⵠⲆ: 1,
            ΔᐃⲆΔΔ: -1,
            open: false
        };
        this.ⲆᐃⵠⲆᐃ = {
            enabled: false,
            ᐃⲆⵠᐃᐃ: -1,
            label: false,
            now: -1,
            Δⵠᐃⵠ: Zv
        };
        this.ᐃⲆᐃⲆ = {
            ΔⵠⵠⲆ: 1,
            lock: false,
            id: -1,
            ⵠⲆⵠⵠΔᐃⵠ: false,
            ⵠⲆᐃΔ: 0,
            locked: false,
            ΔᐃⲆΔΔ: -1,
            ᐃⵠⵠᐃⵠⵠⲆ: ie,
            open: Br
        };
        this.ᐃⵠΔⵠΔ = gq;
        this.reconnect = {
            enabled: gj,
            rotate: 0
        };
        this.key = Z.ⵠᐃⲆᐃᐃΔⵠ("key", Gf.location.href);
        var a = Z.ⵠᐃⲆᐃᐃΔⵠ("egg", Gf.location.href);
        if (a) {
            jx.ᐃΔⲆΔ = parseInt(a);
        }
        this.beta = Gf.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
        if (this.key && this.beta) {
            ⲆⵠΔⵠ.set("starve_beta", this.key);
        } else if (this.beta) {
            this.key = ⲆⵠΔⵠ.get("starve_beta");
        }
        this.ⵠⲆΔΔΔ = ⲆⵠΔⵠ.get("starve_token") ? ⲆⵠΔⵠ.get("starve_token") : Z.ⵠⵠⵠᐃᐃΔⲆ(14);
        Gf.baguette();
        var b = Gf.kot2;
        function c() {
            this.seed = 1;
            this.ⲆᐃⵠΔᐃⵠᐃ = 2;
            this.ΔⵠⲆⲆⲆⲆᐃ = 3;
            this.ⵠⵠᐃⲆⲆΔᐃᐃⵠ = 1;
            this.ΔΔⲆΔⵠΔΔⵠΔ = 2;
            this.ΔΔⲆⵠⵠᐃᐃⵠΔ = 3;
            this.ΔⵠΔΔᐃⲆΔ = function (a) {
                this.seed = 2 + Math.floor(Math.random() * 39879);
            };
            this.ΔΔⲆⵠⵠⵠΔ = function (a) {
                this.ⲆᐃⵠΔᐃⵠᐃ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⲆⲆⲆᐃⵠⵠⵠ = function (a) {
                this.ΔⵠⲆⲆⲆⲆᐃ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ΔΔⵠᐃⲆᐃⲆⲆᐃ = function (a) {
                this.ⵠⵠᐃⲆⲆΔᐃᐃⵠ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⲆΔⵠΔΔᐃΔᐃⵠ = function (a) {
                this.ΔΔⲆΔⵠΔΔⵠΔ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⲆᐃᐃᐃΔⵠⲆⲆᐃ = function (a) {
                this.ΔΔⲆⵠⵠᐃᐃⵠΔ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ΔᐃⲆΔΔᐃΔ = function (c, e, f, i, j, k, a) {
                for (var m = 1; m < a;) {
                    var n = f * m % ⵠⲆᐃⵠᐃⲆⵠ;
                    var o = ⵠΔΔⵠⵠⵠⲆ[n];
                    if (o < 0.1) {
                        p += 50;
                        m += 50;
                    } else {
                        var p = Math.floor(o * i + j);
                        if (m > k && a > m) {
                            var q = Math.random() > 0.5 ? tx * -10 : tx * 10;
                            var r = p * e;
                            this.ΔⵠⲆᐃᐃⵠᐃ[n] = Math.max(-25, Math.min(25, this.ΔⵠⲆᐃᐃⵠᐃ[n] + q));
                            this.ΔⵠⵠᐃΔΔⵠ[n] = Math.max(-8, Math.min(8, this.ΔⵠⵠᐃΔΔⵠ[n] + q));
                            if (r > 0) {
                                mo.beginPath();
                                mo.arc(m + nx.ᐃΔΔ.x + this.ΔⵠⵠᐃΔΔⵠ[n], c + this.ΔⵠⲆᐃᐃⵠᐃ[n] - 20, r, 0, Math.PI * 2);
                                if (mx.transition) {
                                    var t = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                                    mo.fillStyle = Cw(83, 156, 160, 236, 247, 249, t);
                                } else {
                                    mo.fillStyle = _r.ΔᐃⲆΔΔΔᐃ[mx.time];
                                }
                                mo.fill();
                            }
                        }
                        m += p * 2;
                    }
                }
            };
            this.ΔⲆⲆⲆΔⵠᐃ = function (c, e, f, i, j, k, a) {
                for (var m = 1; m < a;) {
                    var n = m * f % ⵠⲆᐃⵠᐃⲆⵠ;
                    var o = ⵠΔΔⵠⵠⵠⲆ[n];
                    if (o < 0.1) {
                        p += 50;
                        m += 50;
                    } else {
                        var p = Math.floor(o * i + j);
                        if (k < m && m < a) {
                            var q = Math.random() > 0.5 ? tx * -10 : tx * 10;
                            var r = p * e;
                            this.ⵠⲆΔΔⵠ[n] = Math.max(-25, Math.min(25, this.ⵠⲆΔΔⵠ[n] + q));
                            this.ⵠΔᐃᐃⲆ[n] = Math.max(-8, Math.min(8, this.ⵠΔᐃᐃⲆ[n] + q));
                            if (r > 0) {
                                mo.beginPath();
                                mo.arc(c + this.ⵠⲆΔΔⵠ[n] - 20, m + nx.ᐃΔΔ.y + this.ⵠΔᐃᐃⲆ[n], r, 0, Math.PI * 2);
                                if (mx.transition) {
                                    var t = mx.time ? 1 - mx.ΔⵠⵠΔ.ΔⲆᐃ : mx.ΔⵠⵠΔ.ΔⲆᐃ;
                                    mo.fillStyle = Cw(83, 156, 160, 236, 247, 249, t);
                                } else {
                                    mo.fillStyle = _r.ΔᐃⲆΔΔΔᐃ[mx.time];
                                }
                                mo.fill();
                            }
                        }
                        m += p * 2;
                    }
                }
            };
            this.ᐃⵠΔΔⲆⲆΔΔⵠ = function (b, c, d, e, f, g) {
                var h;
                f -= 30;
                g += 30;
                if ((h = -(d - 0 - e - 2) / 200) === 0) {
                    this.ⲆⲆⲆᐃⵠⵠⵠ();
                }
                mo.globalAlpha = Z.ᐃⵠΔᐃΔ(h);
                this.ΔᐃⲆΔΔᐃΔ(d, h, this.ΔⵠⲆⲆⲆⲆᐃ, 18, 16, f, g);
                mo.globalAlpha = 1;
                if ((h = -(b - 250 - e + 500) / 150) === 0) {
                    this.ΔⵠΔΔᐃⲆΔ();
                }
                mo.globalAlpha = Z.ᐃⵠΔᐃΔ(h);
                this.ΔᐃⲆΔΔᐃΔ(b, h, this.seed, 12, 10, f, g);
                mo.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
                        this.ΔΔⲆⵠⵠⵠΔ();
                    }
                    mo.globalAlpha = Z.ᐃⵠΔᐃΔ(h);
                    this.ΔᐃⲆΔΔᐃΔ(c, h, this.ⲆᐃⵠΔᐃⵠᐃ, 6, 6, f, g);
                    mo.globalAlpha = 1;
                }
            };
            this.ΔⵠᐃΔⲆⲆΔΔⵠ = function (b, c, d, e, f, g) {
                f -= 30;
                g += 30;
                var h = -(-d + 0 + e + 2) / 200;
                if (h === 0) {
                    this.ⲆⲆⲆᐃⵠⵠⵠ();
                }
                mo.globalAlpha = Z.ᐃⵠΔᐃΔ(h);
                this.ΔᐃⲆΔΔᐃΔ(d, h, this.ΔⵠⲆⲆⲆⲆᐃ, 18, 16, f, g);
                mo.globalAlpha = 1;
                if ((h = -(-b + 250 + e) / 150) === 0) {
                    this.ΔⵠΔΔᐃⲆΔ();
                }
                mo.globalAlpha = Z.ᐃⵠΔᐃΔ(h);
                this.ΔᐃⲆΔΔᐃΔ(b, h, this.seed, 12, 10, f, g);
                mo.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(-c + 350 + e) / 100) <= 0.01) {
                        this.ΔΔⲆⵠⵠⵠΔ();
                    }
                    mo.globalAlpha = Z.ᐃⵠΔᐃΔ(h);
                    this.ΔᐃⲆΔΔᐃΔ(c, h, this.ⲆᐃⵠΔᐃⵠᐃ, 6, 6, f, g);
                    mo.globalAlpha = 1;
                }
            };
            this.ᐃΔΔΔⲆᐃΔᐃⵠ = function (b, c, d, e, f, g) {
                var h;
                f -= 30;
                g += 30;
                if ((h = -(-d + 0 + e + 2) / 200) === 0) {
                    this.ⲆⲆⲆᐃⵠⵠⵠ();
                }
                mo.globalAlpha = Z.ᐃⵠΔᐃΔ(h);
                this.ΔⲆⲆⲆΔⵠᐃ(d, h, this.ΔⵠⲆⲆⲆⲆᐃ, 18, 16, f, g);
                mo.globalAlpha = 1;
                if ((h = -(-b + 250 + e) / 150) === 0) {
                    this.ΔⵠΔΔᐃⲆΔ();
                }
                mo.globalAlpha = Z.ᐃⵠΔᐃΔ(h);
                this.ΔⲆⲆⲆΔⵠᐃ(b, h, this.seed, 12, 10, f, g);
                mo.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(-c + 350 + e) / 100) <= 0.01) {
                        this.ΔΔⲆⵠⵠⵠΔ();
                    }
                    mo.globalAlpha = Z.ᐃⵠΔᐃΔ(h);
                    this.ΔⲆⲆⲆΔⵠᐃ(c, h, this.ⲆᐃⵠΔᐃⵠᐃ, 6, 6, f, g);
                    mo.globalAlpha = 1;
                }
            };
            this.ⲆΔᐃⲆΔⲆⵠᐃⲆ = function (b, c, d, e, f, g) {
                var h;
                f -= 30;
                g += 30;
                if ((h = -(d - 0 - e - 2) / 200) === 0) {
                    this.ⲆⲆⲆᐃⵠⵠⵠ();
                }
                mo.globalAlpha = Z.ᐃⵠΔᐃΔ(h);
                this.ΔⲆⲆⲆΔⵠᐃ(d, h, this.ΔⵠⲆⲆⲆⲆᐃ, 18, 16, f, g);
                mo.globalAlpha = 1;
                if ((h = -(b - 250 - e + 500) / 150) === 0) {
                    this.ΔⵠΔΔᐃⲆΔ();
                }
                mo.globalAlpha = Z.ᐃⵠΔᐃΔ(h);
                this.ΔⲆⲆⲆΔⵠᐃ(b, h, this.seed, 12, 10, f, g);
                mo.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
                        this.ΔΔⲆⵠⵠⵠΔ();
                    }
                    mo.globalAlpha = Z.ᐃⵠΔᐃΔ(h);
                    this.ΔⲆⲆⲆΔⵠᐃ(c, h, this.ⲆᐃⵠΔᐃⵠᐃ, 6, 6, f, g);
                    mo.globalAlpha = 1;
                }
            };
            this.w1 = {
                r: new Z.ⵠΔᐃΔⲆ(Z.ᐃΔᐃᐃⵠᐃᐃ, 0, 10, 0, 0, 200),
                ᐃΔᐃⲆ: new Z.ⵠΔᐃΔⲆ(Z.ΔΔⵠᐃΔⲆⲆ, 0, 10, 200, 200, 0)
            };
            this.w2 = {
                r: new Z.ⵠΔᐃΔⲆ(Z.ⵠΔΔⵠⵠΔΔ, 0, 10, 0, 0, 150),
                ᐃΔᐃⲆ: new Z.ⵠΔᐃΔⲆ(Z.ᐃⵠΔᐃΔ, 0, 10, 150, 150, 0)
            };
            this.w3 = {
                r: new Z.ⵠΔᐃΔⲆ(Z.ᐃΔⵠΔⵠⵠⲆ, 0, 10, 0, 0, 100),
                ᐃΔᐃⲆ: new Z.ⵠΔᐃΔⲆ(Z.ᐃⵠΔᐃΔ, 0, 10, 100, 100, 0)
            };
            this.ⲆᐃⲆⲆΔⲆΔΔⲆ = function (a) {
                if (a.r.ⲆⵠⲆⲆⲆ === a.r.x) {
                    if (a.ᐃΔᐃⲆ.ⲆⵠⲆⲆⲆ === a.ᐃΔᐃⲆ.x) {
                        return a.r;
                    } else {
                        return a.ᐃΔᐃⲆ;
                    }
                } else {
                    return a.r;
                }
            };
            this.ⵠᐃⲆ = function (a) {
                var b;
                if (a.r.x === a.r.ⲆⵠⲆⲆⲆ) {
                    if (a.ᐃΔᐃⲆ.ⲆⵠⲆⲆⲆ === a.ᐃΔᐃⲆ.x) {
                        a.r.ΔΔⵠᐃΔᐃΔ();
                        a.ᐃΔᐃⲆ.ΔΔⵠᐃΔᐃΔ();
                        b = a.r;
                    } else {
                        b = a.ᐃΔᐃⲆ;
                    }
                } else {
                    b = a.r;
                }
                b.ⲆⲆᐃⵠᐃⲆⲆ(b.ⲆⵠⲆⲆⲆ);
                return b;
            };
            this.ⵠⲆΔΔⵠ = [];
            this.ⵠΔᐃᐃⲆ = [];
            this.ΔⵠⲆᐃᐃⵠᐃ = [];
            this.ΔⵠⵠᐃΔΔⵠ = [];
            this.ⲆⵠᐃⲆⲆ = function () {
                for (var a = 0; a < ⵠⲆᐃⵠᐃⲆⵠ; a++) {
                    this.ⵠⲆΔΔⵠ[a] = Math.floor(ⵠΔΔⵠⵠⵠⲆ[a] * 25);
                    this.ⵠΔᐃᐃⲆ[a] = Math.floor(ⵠΔΔⵠⵠⵠⲆ[a] * 8);
                    this.ΔⵠⲆᐃᐃⵠᐃ[a] = Math.floor(ⵠΔΔⵠⵠⵠⲆ[a] * 25);
                    this.ΔⵠⵠᐃΔΔⵠ[a] = Math.floor(ⵠΔΔⵠⵠⵠⲆ[a] * 8);
                }
                this.w1.r.x = this.w1.r.ⲆⵠⲆⲆⲆ;
                this.w2.r.ᐃⵠΔⲆΔ = 3.5;
                this.w3.r.ᐃⵠΔⲆΔ = 2;
            };
            this.ⲆⵠᐃⲆⲆ();
        }
        this.ⵠⲆΔΔΔ = b.substring(0, 6) + this.ⵠⲆΔΔΔ.substring(6);
        this.ᐃⲆΔΔᐃⵠΔ = ⲆⵠΔⵠ.get("starve_token_id") ? ⲆⵠΔⵠ.get("starve_token_id") : "";
        this.id = 0;
        this.ΔⵠᐃⲆ = 0;
        this.ΔᐃⲆ = 0;
        this.ⵠᐃΔΔΔⵠΔ = {
            Ⲇⵠᐃᐃᐃᐃᐃ: 0,
            ⵠⵠⵠᐃⵠ: 0,
            ⵠᐃⲆⲆⵠ: 0,
            ᐃⵠΔᐃⵠᐃΔ: ""
        };
        this.ⲆⵠᐃΔᐃᐃⲆⲆΔ = {
            connected: 0,
            ΔⵠᐃᐃⵠⲆⵠ: new Date().getTime()
        };
        this.ⵠΔᐃΔᐃ = [];
        this.ᐃΔΔⵠΔⲆᐃ = function (a) {
            for (var b = 0; this.ⵠΔᐃΔᐃ.length > b; b++) {
                if (this.ⵠΔᐃΔᐃ[b] == a) {
                    return Dk;
                }
            }
            return gj;
        };
        this.ⲆᐃⲆΔᐃ = {
            ᐃⲆⵠᐃᐃ: 0,
            time: 0,
            value: 0,
            open: th,
            Δⵠᐃⵠ: function () {
                if (this.open) {
                    var a = new Date().getTime();
                    this.time = Math.floor((a - this.ᐃⲆⵠᐃᐃ) / 1000);
                    if (this.time < 60) {
                        px.ⲆᐃⲆΔᐃ.button.Δⵠᐃⵠ(mo);
                    } else {
                        document.getElementById("shop_starterkit").style.display = "none";
                        this.open = ie;
                    }
                }
            }
        };
        this.ⲆⵠΔⵠⵠ = {
            id: -1,
            ΔⵠⵠⲆ: -1,
            lock: 0,
            timeout: new Z.ΔⲆⲆᐃ(Bl, 0, 1, 0, 1 / 30, 1),
            wait: Yn
        };
        this.ⵠⲆⵠᐃⲆ = {
            timeout: new Z.ΔⲆⲆᐃ(nq, 0, 1, 0, 1 / 5, 1),
            wait: false
        };
        this.ΔΔⲆⲆⵠ = {
            timeout: new Z.ΔⲆⲆᐃ(kr, 0, 1, 0, 1, 1),
            wait: false
        };
        this.ⲆⵠⵠⲆⵠ = {
            timeout: new Z.ΔⲆⲆᐃ(Yn, 0, 1, 0, 0.1, 1),
            wait: false
        };
        this.ᐃΔΔ = new Z.ΔᐃΔⵠᐃⵠⲆ(Z.ⵠᐃⵠⵠᐃᐃⵠ, 0, 0.4, 0, 0, ro, vo, ro, vo);
        this.ᐃΔΔ.ᐃⲆⵠᐃᐃ = 0;
        this.ᐃΔΔ.ⵠⲆΔᐃᐃⲆⲆ = 0;
        this.ᐃΔΔ.ᐃⵠⲆ = function () {
            if (this.ⵠⲆΔᐃᐃⲆⲆ > 0) {
                this.ⵠⲆΔᐃᐃⲆⲆ -= tx;
            } else {
                var a = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
                if (a) {
                    this.ᐃⲆⵠᐃᐃ = 0;
                    var b = Math.max(Math.min(ro - a.x, -2), 2 - mx.w + no);
                    var c = Math.max(Math.min(vo - a.y, -2), -mx.ᐃⲆᐃ + 2 + oo);
                    this.ⲆⲆᐃⵠᐃⲆⲆ({
                        x: b,
                        y: c
                    });
                } else {
                    this.ᐃⲆⵠᐃᐃ += tx;
                    if (this.ᐃⲆⵠᐃᐃ > 3) {
                        this.ᐃⲆⵠᐃᐃ = 0;
                        if (!nx.reconnect.enabled) {
                            ⲆΔⲆΔ.ΔΔΔΔⵠᐃⲆⵠⲆ();
                        }
                    }
                }
            }
        };
        this.ᐃΔΔ.w = screen.width;
        this.ᐃΔΔ.ᐃⲆᐃ = screen.height;
        this.ᐃΔΔ.ⵠᐃⵠᐃᐃᐃΔ = this.ᐃΔΔ.w;
        this.ᐃΔΔ.ΔΔⲆᐃⵠΔⵠ = this.ᐃΔΔ.ᐃⲆᐃ;
        this.ᐃΔΔ.rx = 0;
        this.ᐃΔΔ.ry = 0;
        this.ᐃΔΔ.ᐃᐃᐃⲆΔⵠⵠΔᐃ = 0;
        this.ᐃΔΔ.ᐃᐃⲆⵠⵠΔⲆᐃᐃ = 0;
        this.ᐃΔΔ.ⲆᐃᐃⲆⲆ = function (a, b) {
            this.x = -Math.min(Math.max(-mx.ΔⲆΔⲆᐃⲆΔ * 2, a - mx.ΔⲆΔⲆᐃⲆΔ - this.ⵠᐃⵠᐃᐃᐃΔ / 2), mx.w - this.ⵠᐃⵠᐃᐃᐃΔ);
            this.y = -Math.min(Math.max(-mx.ⵠⵠⲆⵠΔΔΔ * 2, b - (mx.ⵠⵠⲆⵠΔΔΔ + this.ΔΔⲆᐃⵠΔⵠ) / 2), mx.ᐃⲆᐃ - this.ΔΔⲆᐃⵠΔⵠ + mx.ⵠⵠⲆⵠΔΔΔ);
            this.ⲆⵠⲆⲆⲆ = this.x;
            this.ⵠΔⵠΔⵠⲆⲆ = this.y;
        };
        this.control = {
            angle: 0,
            timeout: 0,
            ΔΔᐃΔⲆⲆⵠ: 0,
            ⵠⵠⵠⲆ: 0,
            attack: 0,
            ᐃⵠⲆ: function () {
                var a = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
                var c = 0;
                if (Settings.Autofarm.e && Settings.Autofarm.a != null) {
                    c = Settings.Autofarm.a;
                } else {
                    var b;
                    if (a) {
                        b = {
                            x: nx.ᐃΔΔ.x + a.x,
                            y: nx.ᐃΔΔ.y + a.y
                        };
                    } else {
                        b = xo;
                    }
                    c = Z.ΔᐃΔᐃᐃΔⵠ(sx.ᐃⲆᐃᐃ, b);
                }
                var d = zj;
                this.ⵠⵠⵠⲆ += tx;
                if (!sx.state) {
                    if (a && !(a.action & 16) && this.ⵠⵠⵠⲆ > 0.2) {
                        this.attack = 1;
                        d = true;
                        this.ⵠⵠⵠⲆ = 0;
                        ⲆΔⲆΔ.ⵠΔⵠᐃΔᐃᐃΔⲆ(c);
                    }
                }
                if (a) {
                    a.angle = c;
                    a.ᐃᐃᐃΔΔΔⵠ = c;
                }
                if (!d) {
                    this.timeout += tx;
                    if (this.timeout > 0.2) {
                        this.timeout = 0;
                        if (Math.abs(this.angle - c) > 0.005) {
                            ⲆΔⲆΔ.ᐃΔⵠᐃⵠᐃⵠⲆⲆ(c);
                            this.angle = c;
                        }
                    }
                }
                if (!nx.ΔⵠⲆᐃⵠ.open && !nx.ⲆⵠⵠᐃⲆ.open) {
                    var e = 0;
                    if (rx.ᐃᐃΔⲆⲆΔΔ()) {
                        e |= 1;
                    }
                    if (rx.ᐃᐃⲆⲆⲆⵠⲆ()) {
                        e |= 2;
                    }
                    if (rx.ᐃⲆΔⲆⲆΔΔ()) {
                        e |= 4;
                    }
                    if (rx.ᐃⵠΔⵠΔᐃΔ()) {
                        e |= 8;
                    }
                    if (this.ΔΔᐃΔⲆⲆⵠ != e) {
                        ⲆΔⲆΔ.ⵠᐃⲆⲆⲆⲆⵠΔᐃ(e);
                    }
                    this.ΔΔᐃΔⲆⲆⵠ = e;
                }
            }
        };
        this.ⲆΔⵠᐃ = {
            c: 1,
            ᐃΔᐃⲆ: 1,
            ᐃⲆᐃ: 1,
            ⵠᐃⲆ: 1,
            ᐃⵠΔ: 1,
            ΔᐃⲆⵠΔⲆΔ: 1,
            ᐃᐃⵠΔⲆⲆⲆ: new Z.ΔⲆⲆᐃ(Dk, 0, 1, 0, 3, 3),
            ΔⵠᐃⵠⲆⵠΔ: new Z.ΔⲆⲆᐃ(sj, 0, 1, 0, 2, 2),
            ᐃΔⲆⵠᐃⵠᐃ: new Z.ΔⲆⲆᐃ(vr, 0, 1, 0, 3, 3),
            ΔⵠΔΔΔⲆⲆ: new Z.ΔⲆⲆᐃ(Ho, 0, 1, 0, 3, 3),
            ⲆⲆⵠⵠⵠⲆⲆ: new Z.ΔⲆⲆᐃ(true, 0, 1, 0, 3, 3),
            ΔⲆᐃΔΔⵠⲆ: new Z.ΔⲆⲆᐃ(true, 0, 1, 0, 3, 3),
            ΔΔΔⵠⵠ: new Z.ⵠΔᐃΔⲆ(Z.ⵠᐃⵠⵠᐃᐃⵠ, 0, 1, 0, 0, 1),
            Ⲇⵠⵠⵠⵠ: new Z.ⵠΔᐃΔⲆ(Z.ⵠᐃⵠⵠᐃᐃⵠ, 0, 1, 0, 0, 1),
            ⲆⵠⵠᐃⵠⲆΔ: new Z.ⵠΔᐃΔⲆ(Z.ⵠᐃⵠⵠᐃᐃⵠ, 0, 1, 0, 0, 1),
            ⲆᐃᐃΔⲆᐃⵠ: new Z.ⵠΔᐃΔⲆ(Z.ⵠᐃⵠⵠᐃᐃⵠ, 0, 1, 0, 0, 1),
            ⵠⲆⵠΔᐃⲆΔ: new Z.ⵠΔᐃΔⲆ(Z.ⵠᐃⵠⵠᐃᐃⵠ, 0, 1, 0, 0, 1),
            ⲆⲆΔΔᐃ: new Z.ⵠΔᐃΔⲆ(Z.ⵠᐃⵠⵠᐃᐃⵠ, 0, 1, 0, 0, 1),
            ᐃⵠⲆ: function () {
                this.ᐃᐃⵠΔⲆⲆⲆ.ᐃⵠⲆ();
                this.ΔⵠᐃⵠⲆⵠΔ.ᐃⵠⲆ();
                this.ᐃΔⲆⵠᐃⵠᐃ.ᐃⵠⲆ();
                this.ΔⵠΔΔΔⲆⲆ.ᐃⵠⲆ();
                this.ⲆⲆⵠⵠⵠⲆⲆ.ᐃⵠⲆ();
                this.ΔⲆᐃΔΔⵠⲆ.ᐃⵠⲆ();
                this.ΔΔΔⵠⵠ.ⲆⲆᐃⵠᐃⲆⲆ(this.c);
                this.Ⲇⵠⵠⵠⵠ.ⲆⲆᐃⵠᐃⲆⲆ(this.ᐃΔᐃⲆ);
                this.ⲆⵠⵠᐃⵠⲆΔ.ⲆⲆᐃⵠᐃⲆⲆ(this.ᐃⲆᐃ);
                this.ⲆᐃᐃΔⲆᐃⵠ.ⲆⲆᐃⵠᐃⲆⲆ(this.ⵠᐃⲆ);
                this.ⵠⲆⵠΔᐃⲆΔ.ⲆⲆᐃⵠᐃⲆⲆ(this.ᐃⵠΔ);
                this.ⲆⲆΔΔᐃ.ⲆⲆᐃⵠᐃⲆⲆ(this.ΔᐃⲆⵠΔⲆΔ);
            }
        };
        this.ΔΔⲆⵠⵠᐃΔ = gj;
        this.ⲆⲆⵠⵠᐃΔⲆ = Yk;
        this.ΔⵠⵠⵠⲆ = vn;
        this.ΔⲆΔᐃᐃⲆⵠ = false;
        this.ΔⲆΔⲆ = {
            max: 10,
            ⵠΔⲆⲆᐃΔⲆ: 0,
            Ⲇⵠᐃⵠᐃ: 0,
            ᐃⲆⵠⲆ: [],
            Ⲇⵠᐃⵠⵠ: [],
            ⵠΔᐃΔΔᐃⵠ: function (a, b) {
                if (a === 1) {
                    this.Ⲇⵠᐃⵠᐃ = Jf.ᐃᐃᐃⲆⲆΔΔΔⵠ;
                }
                this.ⵠΔⲆⲆᐃΔⲆ += b;
                this.max = 10 + this.ⵠΔⲆⲆᐃΔⲆ + this.Ⲇⵠᐃⵠᐃ;
            },
            ᐃⲆⵠⲆⲆⵠⲆ: {
                item: -1,
                ᐃⲆ: null,
                ⲆⲆΔᐃᐃ: 0,
                ⲆⲆⲆⵠᐃΔΔ: 0,
                ΔΔⲆⵠⵠ: -1,
                ΔΔⵠΔᐃ: -1,
                ⵠⲆΔᐃᐃ: function (a) {
                    if (!!this.ⲆⲆΔᐃᐃ && (a.x !== this.ΔΔⲆⵠⵠ || a.y !== this.ΔΔⵠΔᐃ)) {
                        this.ⲆⲆⲆⵠᐃΔΔ = 1;
                    }
                },
                start: function (a, b) {
                    this.ΔΔⲆⵠⵠ = b.x;
                    this.ΔΔⵠΔᐃ = b.y;
                    this.item = a;
                    this.ᐃⲆ = nx.ΔⲆΔⲆ.Ⲇⵠᐃⵠⵠ[a].info.ᐃⲆ[2];
                    this.ⲆⲆΔᐃᐃ = 1;
                },
                stop: function () {
                    this.ⲆⲆΔᐃᐃ = 0;
                    this.ⲆⲆⲆⵠᐃΔΔ = 0;
                    this.ΔΔⲆⵠⵠ = -1;
                    this.ΔΔⵠΔᐃ = -1;
                },
                release: function () {
                    var a = -1;
                    var b = nx.ΔⲆΔⲆ.Ⲇⵠᐃⵠⵠ;
                    var c = 0;
                    if (this.ⲆⲆΔᐃᐃ && this.ⲆⲆⲆⵠᐃΔΔ) {
                        for (var d = 0; d < b.length; d++) {
                            if (b[d].info.state === sf) {
                                a = d;
                                break;
                            }
                        }
                        if (a !== -1 && a !== this.item && b[this.item]) {
                            c = 1;
                            var f = b[a];
                            b[a] = b[this.item];
                            b[this.item] = f;
                            px.ΔⵠⵠⲆⵠᐃⲆ();
                        }
                    }
                    this.stop();
                    return c;
                },
                Δⵠᐃⵠ: function (a, b) {
                    if (this.ⲆⲆΔᐃᐃ && this.ⲆⲆⲆⵠᐃΔΔ) {
                        Cp(mo, this.ᐃⲆ, Math.floor(a - this.ᐃⲆ.width / 2), Math.floor(b - this.ᐃⲆ.height / 2));
                    }
                }
            },
            ᐃⲆⵠⲆⵠⲆⲆΔΔ: function (a) {
                for (d = 0; d < a.length; d++) {
                    if (this.ᐃⲆⵠⲆ[a[d][0]] == a[d][1]) {
                        return Ho;
                    }
                }
                return false;
            },
            ⲆⵠᐃⵠⲆ: function (a) {
                for (var b = 0; b < this.Ⲇⵠᐃⵠⵠ.length; b++) {
                    if (this.Ⲇⵠᐃⵠⵠ[b].id == a) {
                        return b;
                    }
                }
                return -1;
            },
            ⵠΔΔⲆⲆⲆⲆ: function (a, b) {
                this.ᐃⲆⵠⲆ[a] = 0;
                this.Ⲇⵠᐃⵠⵠ.splice(b, 1);
                px.ΔⵠⵠⲆⵠᐃⲆ();
            },
            ΔΔᐃⵠΔΔⵠ: function (a, b, c) {
                ᐃⵠⲆ = Pj;
                this.ᐃⲆⵠⲆ[a] = Math.max(0, this.ᐃⲆⵠⲆ[a] - b);
                if (!this.ᐃⲆⵠⲆ[a] && c >= 0) {
                    this.ⵠΔΔⲆⲆⲆⲆ(a, c);
                }
            }
        };
        this.ΔⵠΔΔᐃ = {
            enabled: false,
            translate: {
                y: 0,
                x: 0
            },
            ⲆⲆᐃⵠᐃⲆᐃ: function () {
                if (mx.mode == 1 && !nx.ⲆⲆⵠⵠᐃΔⲆ) {
                    nx.ΔⵠΔΔᐃ.enabled = !nx.ΔⵠΔΔᐃ.enabled;
                    if (nx.ΔⵠΔΔᐃ.enabled) {
                        px.options.ⵠⲆⲆⲆⲆᐃᐃ.display = "inline-block";
                    } else {
                        px.options.ⵠⲆⲆⲆⲆᐃᐃ.display = "none";
                    }
                }
            }
        };
        px.options.ⵠⲆⲆⲆⲆᐃᐃ.display = "none";
        this.ᐃΔᐃⲆΔ = {
            enabled: false,
            translate: {
                y: 0,
                x: 0
            },
            ᐃⲆⵠᐃᐃ: 0,
            ⲆⲆᐃⵠᐃⲆᐃ: function () {
                nx.ᐃΔᐃⲆΔ.enabled = !nx.ᐃΔᐃⲆΔ.enabled;
                if (nx.ᐃΔᐃⲆΔ.enabled) {
                    px.options.ⲆΔⵠⵠΔᐃᐃ.display = "inline-block";
                } else {
                    px.options.ⲆΔⵠⵠΔᐃᐃ.display = "none";
                }
            },
            ᐃⵠⲆ: function () {
                if (!!this.enabled && nx.ⵠᐃΔⵠ.id < 0 && !px.ᐃⲆⵠⵠ.open) {
                    this.ᐃⲆⵠᐃᐃ += tx;
                    if (this.ᐃⲆⵠᐃᐃ > 2) {
                        this.ᐃⲆⵠᐃᐃ = 0;
                        if (nx.ⲆΔⵠᐃ.ᐃⲆᐃ < 0.35) {
                            if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[110]) {
                                ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(110, nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(110));
                            } else if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[192]) {
                                ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(192, nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(192));
                            } else if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[196]) {
                                ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(196, nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(196));
                            } else if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[189]) {
                                ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(189, nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(189));
                            } else if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[207]) {
                                ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(207, nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(207));
                            } else if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[205]) {
                                ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(205, nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(205));
                            } else if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[209]) {
                                ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(209, nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(209));
                            } else if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[143]) {
                                ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(143, nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(143));
                            } else if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[117]) {
                                ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(117, nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(117));
                            } else if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[138]) {
                                ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(138, nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(138));
                            } else if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[133]) {
                                ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(133, nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(133));
                            } else if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[145]) {
                                ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(145, nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(145));
                            } else if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[136]) {
                                ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(136, nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(136));
                            } else if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[197]) {
                                ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(197, nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(197));
                            }
                        } else if (nx.ⲆΔⵠᐃ.ⵠᐃⲆ < 0.35 && nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[127]) {
                            ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(127, nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(127));
                        }
                    }
                }
            }
        };
        px.options.ⲆΔⵠⵠΔᐃᐃ.display = "none";
        this.ⵠᐃΔⵠ = {
            id: -1,
            Ⲇⵠⵠⵠ: -1,
            timeout: new Z.ΔⲆⲆᐃ(rg, 0, 1, 0, 1, 1),
            ΔⲆᐃⵠⵠ: Mr,
            ᐃⵠΔⲆ: -1,
            mode: 0,
            label: [],
            ⵠⵠⵠⲆᐃ: [],
            ᐃᐃᐃⲆΔ: mh,
            ᐃΔᐃΔΔ: false,
            ⲆⵠⲆᐃⲆΔⲆ: false,
            ⲆⲆΔⵠΔ: Br,
            ΔⲆⵠⲆΔⵠᐃⵠΔ: function () {
                this.mode = this.mode === 0 ? 1 : 0;
            },
            ⵠᐃΔΔⲆᐃᐃΔᐃ: function (a) {
                this.ᐃᐃᐃⲆΔ = a;
                var b = px.ᐃⲆⵠⵠ;
                if (b.open) {
                    b.ᐃᐃⵠᐃⲆΔᐃ(b.button);
                }
                this.ᐃⵠⲆ();
            },
            ⵠΔΔⵠᐃΔⲆⵠⲆ: function (a) {
                var b = Us[a];
                this.id = a;
                this.ΔⲆᐃⵠⵠ = Gr;
                mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
                this.timeout.ᐃᐃᐃᐃΔⵠⲆ = b.time * 8;
                this.Ⲇⵠⵠⵠ = b.Ⲇⵠⵠⵠ;
            },
            ΔᐃΔΔⵠⵠΔᐃⲆ: function (a) {
                var b = Us[a];
                this.id = a;
                this.ΔⲆᐃⵠⵠ = true;
                var c = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
                if (c && c.right == 28) {
                    this.timeout.ᐃᐃᐃᐃΔⵠⲆ = b.time * 3;
                } else {
                    this.timeout.ᐃᐃᐃᐃΔⵠⲆ = b.time;
                }
                this.Ⲇⵠⵠⵠ = b.Ⲇⵠⵠⵠ;
                for (var d = 0; d < b.r.length; d++) {
                    var e = b.r[d];
                    nx.ΔⲆΔⲆ.ΔΔᐃⵠΔΔⵠ(e[0], e[1], nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(e[0]));
                }
                px.ΔⵠⵠⲆⵠᐃⲆ();
            },
            ᐃⵠⲆ: function () {
                this.ⵠⵠⵠⲆᐃ = [];
                if (px.ΔⲆⲆⲆΔ.ⵠᐃΔⵠ === 1) {
                    px.ΔⲆⲆⲆΔ.display = 0;
                }
                for (var a in Us) {
                    var b = Us[a];
                    var c = true;
                    if (b.r) {
                        for (var d = 0; d < b.r.length; d++) {
                            if (nx.ΔⲆΔⲆ.max >= 16 && b.id === 100) {
                                c = false;
                                break;
                            }
                            if (b.w > this.ᐃᐃᐃⲆΔ || b.f > this.ᐃΔᐃΔΔ || b.ᐃⵠΔ > this.ⲆⵠⲆᐃⲆΔⲆ || b.e > this.ⲆⲆΔⵠΔ) {
                                c = zj;
                                break;
                            }
                            var f = b.r[d];
                            if (!nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[f[0]] || nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[f[0]] < f[1]) {
                                c = false;
                                break;
                            }
                        }
                        if (c) {
                            this.ⵠⵠⵠⲆᐃ.push(px.ᐃⲆⲆ[b.id]);
                        }
                    }
                }
                px.ΔⲆⲆⵠⵠΔΔ();
                px.ᐃⲆᐃᐃⲆᐃᐃ();
                px.ᐃⲆᐃⵠΔⲆⲆ();
                px.ᐃⲆΔⵠⵠⲆΔ();
                px.ΔΔᐃⲆᐃΔⵠ();
                px.ΔⲆΔᐃⵠⲆⵠ();
                px.sign.ΔΔⵠΔⲆⲆΔ();
            },
            ΔΔⵠᐃΔᐃΔ: function () {
                this.id = -1;
                this.ΔⲆᐃⵠⵠ = th;
                this.timeout.ΔⲆᐃ = 0;
                this.timeout.ᐃⵠΔ = false;
                this.ᐃⵠⲆ();
            }
        };
        this.ΔΔⵠᐃⲆⲆⵠ = {
            message: yl,
            Δⵠᐃⵠ: Wv
        };
        this.alert = {
            timeout: new Z.ΔⲆⲆᐃ(false, 1, 1, 0, 4, 0.3),
            text: "",
            label: null,
            Δⵠᐃⵠ: $v,
            list: []
        };
        this.ΔⵠⲆⵠⵠ = {
            ⲆⲆ: document.createElement("canvas"),
            ⵠⲆΔⲆᐃ: [],
            ᐃⵠⲆ: true,
            translate: {
                y: 0,
                x: 0
            },
            sort: function () {
                var a = [];
                for (var b = mx.ⵠᐃΔΔ, c = 0; c < b.length; c++) {
                    if (b[c].ᐃⵠΔⵠΔ) {
                        a.push({
                            id: c,
                            ⵠⲆᐃⵠ: b[c].ⵠᐃⲆⲆⵠ
                        });
                    }
                }
                a.sort(function (a, b) {
                    return b.ⵠⲆᐃⵠ - a.ⵠⲆᐃⵠ;
                });
                this.ⵠⲆΔⲆᐃ = [];
                for (c = 0; c < a.length && c < 10; c++) {
                    this.ⵠⲆΔⲆᐃ.push(a[c].id);
                }
                this.ᐃⵠⲆ = true;
            },
            ⲆⵠᐃⲆⲆ: function (a) {
                for (var b = mx.ⵠᐃΔΔ, c = 0; c < b.length; c++) {
                    b[c].ⵠᐃⲆⲆⵠ = 0;
                }
                b[nx.id].ⵠᐃⲆⲆⵠ = Z.ᐃⵠⵠΔⲆⵠΔ(a[1]);
                this.ⵠⲆΔⲆᐃ = [];
                for (c = 2; c < a.length; c += 2) {
                    this.ⵠⲆΔⲆᐃ.push(a[c]);
                    b[a[c]].ⵠᐃⲆⲆⵠ = Z.ᐃⵠⵠΔⲆⵠΔ(a[c + 1]);
                }
                this.ᐃⵠⲆ = true;
            }
        };
        this.ΔⵠⲆⵠⵠ.ⲆⲆ.width = yo * 180;
        this.ΔⵠⲆⵠⵠ.ⲆⲆ.height = yo * 300;
        this.ΔⵠⲆⵠⵠ.ᐃ = this.ΔⵠⲆⵠⵠ.ⲆⲆ.getContext("2d");
        this.ⲆⵠⵠᐃⲆ = {
            open: false,
            input: document.getElementById("commandInput"),
            ᐃⵠΔΔΔᐃΔ: document.getElementById("commandsBox"),
            style: document.getElementById("commandMainBox").style,
            ᐃΔᐃⵠΔⲆⵠᐃᐃ: function (a) {
                this.ᐃⵠΔΔΔᐃΔ.innerHTML += a;
            },
            ᐃⵠⲆ: function () {
                this.style.left = Math.floor(no / 2 - 300) + "px";
                this.style.top = Math.floor(oo / 2 - 250) + "px";
            },
            ⵠΔᐃᐃⲆⲆⲆⲆⵠ: function () {
                this.ᐃⵠΔΔΔᐃΔ.innerHTML = "";
            },
            ᐃᐃᐃᐃⲆ: function () {
                this.open = false;
                this.style.display = "none";
            },
            ⲆΔΔΔᐃ: function (a) {
                var b = "<table class=\"tableList\">";
                for (var c = 0; c < a.length; c++) {
                    if (c % 3 === 0) {
                        b += "<tr>";
                    }
                    b += "<td class=\"tableList\">" + a[c] + "</td>";
                    if ((c + 1) % 3 == 0 || c + 1 === a.length) {
                        b += "</tr>";
                    }
                }
                return b += "</table>";
            },
            ⵠΔⲆΔⲆ: function (a, b, c, d) {
                d = d || "";
                var f = "<div class=commandWritten>" + (a = a || "");
                f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
                f += (c = c || "") + "</div>" + d + "</div>";
                this.ᐃΔᐃⵠΔⲆⵠᐃᐃ(f);
                this.ΔⲆΔⲆⲆΔᐃΔᐃ();
            },
            ΔⲆΔⲆⲆΔᐃΔᐃ: function () {
                this.ᐃⵠΔΔΔᐃΔ.scrollTop = this.ᐃⵠΔΔΔᐃΔ.scrollHeight;
            },
            ΔᐃᐃⲆⵠⵠⲆ: function (b) {
                switch (b) {
                    case "clean":
                        this.ⵠΔᐃᐃⲆⲆⲆⲆⵠ();
                        return Pj;
                    case "list":
                        var c = "";
                        const a = Gf.document.createElement("div");
                        for (var d = mx.ⵠᐃΔΔ, f = 0; f < d.length; f++) {
                            var g = d[f];
                            if (g.ᐃⵠΔⵠΔ) {
                                a.innerText = g.ⲆΔΔⵠⲆ;
                                c += a.innerHTML + " <span style=\"color:green\">#" + f + "</span><br />";
                            }
                        }
                        this.ⵠΔⲆΔⲆ("list", 1, "List all connected players", c);
                        return true;
                    case "weapon-list":
                        this.ⵠΔⲆΔⲆ("Weapons", 1, "List all weapons in the game", this.ⲆΔΔΔᐃ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
                        return true;
                    case "tool-list":
                        this.ⵠΔⲆΔⲆ("Tools", 1, "List all tools in the game", this.ⲆΔΔΔᐃ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
                        return y;
                    case "survival-list":
                        this.ⵠΔⲆΔⲆ("Survival Items", 1, "List all survival items in the game", this.ⲆΔΔΔᐃ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
                        return gq;
                    case "resource-list":
                        this.ⵠΔⲆΔⲆ("Resources", 1, "List all resources in the game", this.ⲆΔΔΔᐃ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
                        return true;
                    case "food-list":
                        this.ⵠΔⲆΔⲆ("Food", 1, "List all food in the game", this.ⲆΔΔΔᐃ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
                        return true;
                    case "hat-list":
                        this.ⵠΔⲆΔⲆ("Hats", 1, "List all hats in the game", this.ⲆΔΔΔᐃ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
                        return Hj;
                    case "building-list":
                        this.ⵠΔⲆΔⲆ("Buildings", 1, "List all buildings in the game", this.ⲆΔΔΔᐃ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
                        return true;
                    case "biome-list":
                        this.ⵠΔⲆΔⲆ("Biomes list", 1, "List all available biomes in the game", this.ⲆΔΔΔᐃ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
                        return vr;
                    case "help-config":
                        this.ⵠΔⲆΔⲆ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
                        return true;
                    case "pos":
                        d = mx.ⲆⲆΔ[0];
                        f = 0;
                        for (; f < d.length; f++) {
                            var e = d[f];
                            if (e.ΔⵠⵠⲆ === nx.id) {
                                this.ⵠΔⲆΔⲆ("pos", 1, "Your position is " + Math.floor(e.x / 100) + ":" + Math.floor(e.y / 100));
                                return true;
                            }
                        }
                        break;
                    case "help-admin":
                        this.ⵠΔⲆΔⲆ("help-admin", 1, "List all available commands for admin only", this.ⲆΔΔΔᐃ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
                        return Dk;
                    case "help":
                        this.ⵠΔⲆΔⲆ("help", 1, "List all available commands", this.ⲆΔΔΔᐃ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
                        return true;
                }
                return gj;
            },
            ΔⲆⵠᐃᐃⲆⲆΔΔ: function () {
                if (!this.open) {
                    this.open = true;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
            },
            ᐃΔΔΔⲆᐃᐃ: function () {
                var a = this.input.value;
                if (a && a.length > 0) {
                    if (!this.ΔᐃᐃⲆⵠⵠⲆ(a)) {
                        ⲆΔⲆΔ.ᐃΔᐃⵠΔᐃⵠⲆΔ(this.input.value);
                    }
                    this.input.value = "";
                }
            }
        };
        this.ΔⵠⲆᐃⵠ = {
            open: ie,
            input: document.getElementById("chat_input"),
            style: document.getElementById("chat_block").style,
            ᐃⵠⲆ: function () {
                this.style.left = Math.floor(no / 2 - 150) + "px";
                this.style.top = Math.floor(oo / 2 + 80) + "px";
            },
            ᐃᐃᐃᐃⲆ: function () {
                this.open = zj;
                this.style.display = "none";
                this.input.value = "";
            },
            prefix: "!",
            cmd: {
                hud: function (a) {
                    if (a === "off") {
                        var b = "Enter \"!hud\" without the quotes to restore the HUD";
                        if (nx.alert.text) {
                            nx.alert.list.push(b);
                        } else {
                            nx.alert.text = b;
                        }
                        px.ⲆΔⲆⵠᐃΔⲆ = 0;
                    } else {
                        px.ⲆΔⲆⵠᐃΔⲆ = 1;
                    }
                }
            },
            ΔᐃᐃⲆⵠⵠⲆ: function (a) {
                if (a.charAt(0) == this.prefix) {
                    var b = "";
                    var c = "";
                    for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
                        b += a.charAt(d);
                    }
                    for (d++; d < a.length; d++) {
                        c += a.charAt(d);
                    }
                    var e = this.cmd[b];
                    if (e) {
                        e(c);
                    }
                    return true;
                }
                return false;
            },
            ΔΔⵠⵠΔ: function () {
                if (this.open) {
                    this.open = th;
                    this.style.display = "none";
                    var a = this.input.value;
                    if (a) {
                        if (!this.ΔᐃᐃⲆⵠⵠⲆ(a)) {
                            ⲆΔⲆΔ.ΔⵠΔΔΔⲆᐃΔΔ(this.input.value);
                        }
                        this.input.value = "";
                    }
                } else {
                    this.open = vr;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
            }
        };
        this.ᐃⲆⵠᐃⵠⲆᐃ = {
            ⲆⵠⵠⲆᐃ: [],
            ᐃⵠⲆ: function (a) {
                a.y += tx * 80 * a.ⵠⲆᐃⵠ;
                a.x += tx * 80 * a.c;
                a.Ⲇⵠⵠⵠⵠ -= tx / 6;
                if (a.Ⲇⵠⵠⵠⵠ > 0.2) {
                    a.alpha = Math.min(a.alpha + tx * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - tx * 1, 0);
                }
            },
            add: function (b) {
                var c = Math.floor(Math.min(_r.ᐃⵠⲆⵠΔᐃᐃ * (no / 1366), _r.ᐃⵠⲆⵠΔᐃᐃ + 10) * Math.max(Math.min(mx.ⲆᐃᐃᐃⲆ + 1000, 3000) / 3000, 0));
                if (this.ⲆⵠⵠⲆᐃ.length < c) {
                    var d = Math.floor(Math.random() * _r.ⵠⵠⵠⲆᐃⲆⲆ);
                    var e = -nx.ᐃΔΔ.x + Math.floor(Math.random() * nx.ᐃΔΔ.w);
                    var f = -nx.ᐃΔΔ.y + Math.floor(Math.random() * nx.ᐃΔΔ.ᐃⲆᐃ);
                    var g = Math.random(Math.PI);
                    this.ⲆⵠⵠⲆᐃ.push(new Sf(d, e, f, g));
                }
            }
        };
        this.ΔⵠᐃΔⵠⵠⵠ = 0;
        this.ᐃΔᐃᐃⲆ = 0;
        this.ΔⵠᐃᐃⲆ = {
            ⲆⵠⵠⲆᐃ: [],
            ᐃⲆⵠᐃΔ: 0,
            ⲆΔᐃⵠⲆ: 0,
            ᐃⵠⲆ: function (a) {
                a.y += tx * (200 + this.ⲆΔᐃⵠⲆ * 800) * a.ⵠⲆᐃⵠ;
                a.x += tx * (200 + this.ⲆΔᐃⵠⲆ * 800) * a.c;
                a.Ⲇⵠⵠⵠⵠ -= tx / 6;
                if (a.Ⲇⵠⵠⵠⵠ > 0.2) {
                    a.alpha = Math.min(a.alpha + tx * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - tx * 1, 0);
                }
            },
            add: function (b) {
                var c = Math.floor(Math.min((this.ⲆΔᐃⵠⲆ + 0.1) * _r.ΔⲆᐃⵠⵠΔⲆ * (no / 1366), (this.ⲆΔᐃⵠⲆ + 0.1) * _r.ΔⲆᐃⵠⵠΔⲆ + 10) * Math.max(Math.min(mx.ⲆᐃᐃⵠΔ + 1000, 3000) / 3000, 0));
                if (this.ⲆⵠⵠⲆᐃ.length < c) {
                    var d = Math.floor(Math.random() * _r.ⵠⵠⵠⲆᐃⲆⲆ);
                    var e = -nx.ᐃΔΔ.x + Math.floor(Math.random() * nx.ᐃΔΔ.w);
                    var f = -nx.ᐃΔΔ.y + Math.floor(Math.random() * nx.ᐃΔΔ.ᐃⲆᐃ);
                    var g = Math.random(Math.PI);
                    if (nx.ΔⵠᐃᐃⲆ.ᐃⲆⵠᐃΔ !== 0) {
                        e -= nx.ᐃΔΔ.w / 2;
                    }
                    this.ⲆⵠⵠⲆᐃ.push(new Sf(d, e, f, g));
                }
            }
        };
        this.ⵠᐃⵠᐃⲆ = {
            ⲆⵠⵠⲆᐃ: [],
            ᐃⲆⵠᐃΔ: 0,
            ⲆΔᐃⵠⲆ: 0,
            ᐃⵠⲆ: function (a) {
                if (rx.ᐃⲆΔⲆⲆΔΔ()) {
                    a.y += tx * a.ΔⵠⲆⲆⲆ * (5.5 + this.ⲆΔᐃⵠⲆ * 10);
                } else {
                    a.y += tx * a.ΔⵠⲆⲆⲆ * (5 + this.ⲆΔᐃⵠⲆ * 10);
                }
                a.Ⲇⵠⵠⵠⵠ -= tx / 2;
                if (rx.ᐃᐃΔⲆⲆΔΔ()) {
                    a.x += tx * (100 + this.ⲆΔᐃⵠⲆ * 400);
                } else if (rx.ᐃᐃⲆⲆⲆⵠⲆ()) {
                    a.x -= tx * (130 - this.ⲆΔᐃⵠⲆ * 400);
                } else {
                    a.x -= tx * (30 - this.ⲆΔᐃⵠⲆ * 400);
                }
                if (a.Ⲇⵠⵠⵠⵠ > 0.2) {
                    a.alpha = Math.min(a.alpha + tx * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - tx * 5, 0);
                }
            },
            add: function (a) {
                var b = Math.floor(Math.min((this.ⲆΔᐃⵠⲆ * 1.5 + 0.5) * _r.ⲆᐃⵠᐃⵠΔⵠ * (no / 1366), (this.ⲆΔᐃⵠⲆ * 1.5 + 0.5) * _r.ⲆᐃⵠᐃⵠΔⵠ + 10) * Math.max(Math.min(mx.ⲆⵠΔⵠΔ + 1000, 3000) / 3000, 0));
                if (this.ⲆⵠⵠⲆᐃ.length < b) {
                    var c = Math.floor(Math.random() * _r.ⲆⵠⵠⲆⵠⵠᐃ);
                    var d = -nx.ᐃΔΔ.x + Math.floor(Math.random() * nx.ᐃΔΔ.w);
                    var e = -nx.ᐃΔΔ.y + Math.floor(Math.random() * 400 * yo - yo * 200);
                    this.ⲆⵠⵠⲆᐃ.push(new Sf(c, d, e, 0));
                }
            }
        };
        this.ᐃᐃⵠⲆ = [];
        for (var d = 0; d < 4; d++) {
            this.ᐃᐃⵠⲆ.push(new c());
        }
    }
    function jf() {
        Math.random();
        return "o";
    }
    setTimeout(function b() {
        //nati
        var c = Yf() + Hw() + Wf() + Iw();
        Math.random();
        var d = "W" + Kf() + (Math.random(), "b") + (Math.random(), "S") + jf() + (Math.random(), "c") + (Math.random(), "k") + Kf() + Wf();
        if (Gf[d].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        var e = Fw() + Kf() + Yf() + Rf();
        var f = Gw() + Vf() + jf() + Wf() + jf() + Wf() + (Math.random(), "y") + Gw() + Kf();
        if (Gf[d][f][e].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        d = Rf() + Vf() + Hw() + (Math.random(), "w") + function () {
            Math.random();
            return "I";
        }() + (Math.random(), "m") + Hw() + qf() + Kf();
        e = Uf() + Hw() + Yf() + (Math.random(), "v") + Hw() + Fw() + (Math.random(), "R") + Kf() + Yf() + Rf() + Kf() + Vf() + Iw() + Yf() + qf() + Uf() + jf() + Yf() + Wf() + Kf() + (Math.random(), "x") + Wf() + (Math.random(), "2") + (Math.random(), "D");
        if (Gf[e][f][d].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        setTimeout(b, 100000);
    }, 100000);
    function Zf(b, c) {
        this.ⲆⲆ = b;
        this.ᐃ = c;
        var d = this;
        this.ⲆᐃⲆⵠΔΔΔ = false;
        this.ⲆᐃⲆΔⲆⲆⵠ = {
            id: document.getElementById("scoreboard"),
            style: document.getElementById("scoreboard").style,
            height: 0,
            translate: {
                y: 0,
                x: 0
            },
            ᐃⵠⲆ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = this.translate.y + "px";
            },
            ⲆⵠᐃⲆⲆ: function () {
                this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + nx.ⵠᐃΔΔΔⵠΔ.ᐃⵠΔᐃⵠᐃΔ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + zb[335] + " : " + nx.ΔᐃⲆ + "</div><div class=\"stats\"> " + zb[334] + " : " + nx.ⵠᐃΔΔΔⵠΔ.ⵠⵠⵠᐃⵠ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + zb[333] + " : " + nx.ⵠᐃΔΔΔⵠΔ.ⵠᐃⲆⲆⵠ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + nx.ⵠᐃΔΔΔⵠΔ.Ⲇⵠᐃᐃᐃᐃᐃ + " " + zb[332] + "</div></div><div id=\"shop_points\">" + zb[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + zb[329] + "</div><div class=\"social\" id=\"fffacebook\">" + zb[330] + "</div></div><div id=\"bbback\">" + zb[328] + "</div>";
                this.style.display = "inline-block";
                document.getElementById("tttwitter").addEventListener("mouseup", Mw, vn);
                document.getElementById("bbback").addEventListener("mouseup", function () {
                    ox.ᐃᐃᐃᐃⲆ(jx.ΔΔⵠⵠΔ);
                }, ek);
                document.getElementById("fffacebook").addEventListener("mouseup", $f, false);
                this.height = Math.floor(this.id.clientHeight / 2);
                (function () {
                    var a = new XMLHttpRequest();
                    a.open("GET", Ax + "getBreadAndScore?userid=" + Hx);
                    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    a.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
                            var b = JSON.parse(a.responseText);
                            var c = b.b - jx.ⵠⲆⵠⲆΔ;
                            jx.ⵠⲆⵠⲆΔ = b.b;
                            jx.ⵠᐃⲆⲆⵠ = b.s;
                            jx.ⲆΔΔᐃⲆ = jx.ⵠᐃΔᐃⵠΔⲆ(jx.ⵠᐃⲆⲆⵠ);
                            jx.ᐃⵠⵠΔⲆΔᐃ = jx.ᐃⵠⵠⲆⲆᐃᐃ(jx.ⵠᐃⲆⲆⵠ);
                            jx.ⲆⲆᐃⵠⲆⵠⵠ = 0;
                            document.getElementById("breadWonInner").innerHTML = "" + c;
                        }
                    };
                    a.send();
                })();
            }
        };
        var f;
        var g = 0;
        function e() {
            d.ᐃⵠⲆ();
            if (++g != 30) {
                Gf.setTimeout(e, 33);
            } else {
                d.ᐃⵠⲆ();
            }
        }
        this.ᐃᐃᐃᐃⲆ = function (a) {
            if (d.ⲆᐃⲆⵠΔΔΔ === true) {
                d.ⲆᐃⲆⵠΔΔΔ = false;
                f = a;
                i = -1;
                j();
                wx();
            }
        };
        var i = -1;
        function j() {
            d.ᐃⵠⲆ();
            if (++i == 30) {
                d.stop();
                d.ⲆᐃⲆΔⲆⲆⵠ.style.display = "none";
                f();
                return;
            }
            Gf.setTimeout(j, 33);
        }
        this.ⲆΔΔⲆⵠ = false;
        this.stop = function () {
            this.ⲆΔΔⲆⵠ = false;
        };
        this.ΔΔⵠⵠΔ = function () {
            yx();
            document.getElementById("game_body").style.backgroundColor = _r.ΔⲆⲆΔΔ[lx.time];
            d.ⲆᐃⲆΔⲆⲆⵠ.ⲆⵠᐃⲆⲆ();
            jx.ⲆⲆⵠⲆᐃ.style.display = "inline-block";
            d.ⲆΔΔⲆⵠ = Hj;
            d.ⲆᐃⲆⵠΔΔΔ = true;
            i = -1;
            g = 0;
            e();
        };
        this.ᐃⵠⲆ = function () {
            this.ⲆᐃⲆΔⲆⲆⵠ.translate.x = Math.floor(ro - 275);
            this.ⲆᐃⲆΔⲆⲆⵠ.translate.y = Math.floor(vo - this.ⲆᐃⲆΔⲆⲆⵠ.height - 28);
            jx.ⲆⲆⵠⲆᐃ.translate.x = this.ⲆᐃⲆΔⲆⲆⵠ.translate.x - 350;
            jx.ⲆⲆⵠⲆᐃ.translate.y = this.ⲆᐃⲆΔⲆⲆⵠ.translate.y + 0;
            jx.ⲆⲆⵠⲆᐃ.ᐃⵠⲆ();
            if (g != 30 || i != -1) {
                var a = 0;
                if (g != 30) {
                    a = 1500 / (g + 1) - 50;
                }
                if (i != -1) {
                    a = -(1750 / (30 - i + 1) - 48);
                }
                this.ⲆᐃⲆΔⲆⲆⵠ.translate.y -= a;
            }
            this.ⲆᐃⲆΔⲆⲆⵠ.ᐃⵠⲆ();
        };
        this.Δⵠᐃⵠ = function () {
            ep();
            nx.alert.Δⵠᐃⵠ("#FFF", "#000");
        };
    }
    function $f() {
        Z.ᐃᐃΔⵠⵠΔⵠ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
    }
    function Jw(b, c, d, e, f, g) {
        const a = ~(d & 20176) & 20176 | ~(d & 20176) & d;
        const i = e ^ 28175;
        const j = ((40746 + f) * 214013 + 2531011) % 4294967296;
        const h = g ^ 1772;
        return (12340 + (lt(((40591 + b) * 2147483629 + 2147483587) % 2147483647, (1 + (c + 9698) * 22695477) % 4294967296) ^ tb(a, i, j, h))) % 65516;
    }
    function Kw(c, f) {
        var j = this;
        this.ⲆⲆ = c;
        this.ᐃ = f;
        if (Gf.navigator.userAgent.indexOf("Edge") > -1) {
            this.ᐃⲆⲆⲆⵠᐃⲆ = "default";
            this.ⲆⲆΔᐃΔΔΔ = "pointer";
        } else {
            this.ᐃⲆⲆⲆⵠᐃⲆ = "url('img/cursor0.png'), default";
            this.ⲆⲆΔᐃΔΔΔ = "url('img/cursor1.png'), pointer";
        }
        this.ⲆΔⲆⵠᐃΔⲆ = 1;
        this.ΔᐃᐃⲆⲆⵠⵠ = 1;
        this.ᐃⲆⵠⲆΔΔⲆ = 1;
        this.ᐃΔΔⵠⲆΔΔ = 1;
        this.ᐃΔⲆᐃⵠΔᐃⲆⲆ = {
            id: document.getElementById("team_box"),
            style: document.getElementById("team_box").style,
            ᐃⵠⲆ: function () {
                this.style.left = Math.floor(ro - 125) + "px";
                this.style.top = "110px";
            }
        };
        this.ᐃⵠΔΔ = {
            ⲆⵠΔⵠΔⵠⲆ: df(60, 60, 0, ΔⲆ[782]),
            ⵠⵠᐃᐃΔᐃⵠ: df(60, 60, 0, ΔⲆ[783])
        };
        this.sign = {
            open: Mr,
            ⲆⲆΔⲆΔⲆᐃⵠᐃ: 0,
            ᐃⲆⲆΔⲆⵠⵠ: document.getElementById("sign_object"),
            ⲆᐃⵠᐃᐃⵠΔ: 0,
            id: document.getElementById("sign_window"),
            style: document.getElementById("sign_window").style,
            button: df(60, 60, 0, ΔⲆ[803]),
            ΔΔⵠΔⲆⲆΔ: function () {
                var a = Math.floor(Math.floor((3 + nx.ⵠᐃΔⵠ.ⵠⵠⵠⲆᐃ.length) / 4) * (10 + ΔⲆ[316][0].width) + 35);
                this.button.info.translate.x = a;
                this.button.info.translate.y = 22;
            },
            ᐃⵠⲆ: function () {
                this.style.left = Math.floor(ro - 150) + "px";
                this.style.top = Math.floor(vo - 115) + "px";
            },
            ᐃᐃᐃᐃⲆ: function () {
                px.sign.style.display = "none";
                px.sign.open = zj;
            },
            select: function () {
                px.sign.open = !px.sign.open;
                if (px.sign.open) {
                    px.sign.style.display = "inline-block";
                } else {
                    px.sign.style.display = "none";
                }
            },
            ok: function () {
                ⲆΔⲆΔ.ⵠᐃⲆⵠΔⵠⲆⵠⲆ(nx.sign.ΔᐃⲆΔΔ, px.sign.ⲆᐃⵠᐃᐃⵠΔ);
                px.sign.select();
            },
            up: function () {
                px.sign.ⲆᐃⵠᐃᐃⵠΔ = px.sign.ⲆᐃⵠᐃᐃⵠΔ === 0 ? 3 : px.sign.ⲆᐃⵠᐃᐃⵠΔ - 1;
                px.sign.ᐃⲆⲆΔⲆⵠⵠ.src = "./img/sign" + px.sign.ⲆᐃⵠᐃᐃⵠΔ + ".png";
            },
            down: function () {
                px.sign.ⲆᐃⵠᐃᐃⵠΔ = (px.sign.ⲆᐃⵠᐃᐃⵠΔ + 1) % 4;
                px.sign.ᐃⲆⲆΔⲆⵠⵠ.src = "./img/sign" + px.sign.ⲆᐃⵠᐃᐃⵠΔ + ".png";
            }
        };
        document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, Bl);
        document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, th);
        document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, false);
        document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, vn);
        this.ᐃΔⲆⲆⲆ = {
            open: false,
            id: document.getElementById("shop_market"),
            style: document.getElementById("shop_market").style,
            items: [{
                id: 0,
                name: "wood",
                ᐃᐃⵠⵠⲆ: 1,
                b: 1,
                a: 3,
                ΔⲆᐃᐃⲆ: 316
            }, {
                id: 1,
                name: "stone",
                ᐃᐃⵠⵠⲆ: 1,
                b: 1,
                a: 4,
                ΔⲆᐃᐃⲆ: 315
            }, {
                id: 2,
                name: "gold",
                ᐃᐃⵠⵠⲆ: 1,
                b: 1,
                a: 6,
                ΔⲆᐃᐃⲆ: 297
            }, {
                id: 3,
                name: "diamond",
                ᐃᐃⵠⵠⲆ: 4,
                b: 4,
                a: 1,
                ΔⲆᐃᐃⲆ: 298
            }, {
                id: 4,
                name: "amethyst",
                ᐃᐃⵠⵠⲆ: 8,
                b: 8,
                a: 1,
                ΔⲆᐃᐃⲆ: 418
            }, {
                id: 5,
                name: "reidite",
                ᐃᐃⵠⵠⲆ: 16,
                b: 16,
                a: 1,
                ΔⲆᐃᐃⲆ: 938
            }, {
                id: 6,
                name: "pumpkin_seed",
                ᐃᐃⵠⵠⲆ: 10,
                b: 10,
                a: 1,
                ΔⲆᐃᐃⲆ: 808
            }, {
                id: 7,
                name: "carrot_seed",
                ᐃᐃⵠⵠⲆ: 16,
                b: 16,
                a: 1,
                ΔⲆᐃᐃⲆ: 949
            }, {
                id: 8,
                name: "tomato_seed",
                ᐃᐃⵠⵠⲆ: 20,
                b: 20,
                a: 1,
                ΔⲆᐃᐃⲆ: 959
            }, {
                id: 9,
                name: "thornbush_seed",
                ᐃᐃⵠⵠⲆ: 30,
                b: 30,
                a: 1,
                ΔⲆᐃᐃⲆ: 845
            }, {
                id: 10,
                name: "garlic_seed",
                ᐃᐃⵠⵠⲆ: 40,
                b: 40,
                a: 1,
                ΔⲆᐃᐃⲆ: 834
            }, {
                id: 11,
                name: "watermelon_seed",
                ᐃᐃⵠⵠⲆ: 60,
                b: 60,
                a: 1,
                ΔⲆᐃᐃⲆ: 966
            }],
            button: df(60, 60, 0, ΔⲆ[795]),
            ᐃⵠⲆ: function () {
                this.style.left = Math.floor(ro - 450) + "px";
                this.style.top = Math.floor(vo - 270) + "px";
            },
            select: function () {
                px.ᐃΔⲆⲆⲆ.open = !px.ᐃΔⲆⲆⲆ.open;
                if (px.ᐃΔⲆⲆⲆ.open) {
                    px.ᐃΔⲆⲆⲆ.style.display = "inline-block";
                } else {
                    px.ᐃΔⲆⲆⲆ.style.display = "none";
                }
            },
            ᐃᐃᐃᐃⲆ: function () {
                px.ᐃΔⲆⲆⲆ.style.display = "none";
                px.ᐃΔⲆⲆⲆ.open = false;
            },
            ⲆᐃⲆⲆⵠⲆⵠ: function () {
                ⲆΔⲆΔ.ⵠⵠⲆΔᐃⲆᐃᐃⵠ(this.ⵠⵠΔΔⵠⵠΔ);
            },
            ⲆᐃᐃⲆⲆ: function () {
                this.id;
                if (this.ⵠⵠΔΔⵠⵠΔ.a === 1) {
                    var a = Math.floor(Number(this.value) * this.ⵠⵠΔΔⵠⵠΔ.b);
                    this.ⵠⵠΔΔⵠⵠΔ.ᐃᐃⵠⵠⲆ = a;
                    document.getElementById(this.ⵠⵠΔΔⵠⵠΔ.name + "_trad_number").innerHTML = a + "";
                } else {
                    a = Math.floor(Number(this.value) / this.ⵠⵠΔΔⵠⵠΔ.a);
                    this.ⵠⵠΔΔⵠⵠΔ.ᐃᐃⵠⵠⲆ = a;
                    document.getElementById(this.ⵠⵠΔΔⵠⵠΔ.name + "_trad_number").innerHTML = a + "";
                }
            }
        };
        document.getElementById("quit_market").addEventListener("mouseup", this.ᐃΔⲆⲆⲆ.ᐃᐃᐃᐃⲆ, false);
        var e = [["mouseup", this.ᐃΔⲆⲆⲆ.ⲆᐃⲆⲆⵠⲆⵠ, "buy_"], ["click", this.ᐃΔⲆⲆⲆ.ⲆᐃᐃⲆⲆ, ""], ["change", this.ᐃΔⲆⲆⲆ.ⲆᐃᐃⲆⲆ, ""], ["keypress", this.ᐃΔⲆⲆⲆ.keypress, ""]];
        for (var i = 0; this.ᐃΔⲆⲆⲆ.items.length > i; i++) {
            var k = this.ᐃΔⲆⲆⲆ.items[i];
            document.getElementById(k.name + "_market").src = ΔⲆ[k.ΔⲆᐃᐃⲆ][0].ᐃⵠⲆⵠΔ === undefined ? ΔⲆ[k.ΔⲆᐃᐃⲆ][0].src : ΔⲆ[k.ΔⲆᐃᐃⲆ][0].ᐃⵠⲆⵠΔ;
            if (k.a === 1) {
                document.getElementById(k.name + "_trad_number").innerHTML = k.b;
                document.getElementById(k.name + "_number").value = 1;
                document.getElementById(k.name + "_number").step = 1;
                document.getElementById(k.name + "_number").min = 1;
                document.getElementById(k.name + "_number").max = Math.floor(255 / k.b);
            } else {
                document.getElementById(k.name + "_trad_number").innerHTML = 1;
                document.getElementById(k.name + "_number").value = k.a;
                document.getElementById(k.name + "_number").step = k.a;
                document.getElementById(k.name + "_number").min = k.a;
            }
            document.getElementById("buy_" + k.name + "_number").ⵠⵠΔΔⵠⵠΔ = k;
            document.getElementById(k.name + "_number").ⵠⵠΔΔⵠⵠΔ = k;
            for (var m = 0; m < e.length; m++) {
                document.getElementById(e[m][2] + k.name + "_number").addEventListener(e[m][0], e[m][1], false);
            }
        }
        $("[type='number']").keypress(function (a) {
            a.preventDefault();
        });
        this.options = {
            open: Bl,
            id: document.getElementById("option_in_game"),
            style: document.getElementById("option_in_game").style,
            ⵠⵠⵠⵠᐃ: document.getElementById("agree_ing").style,
            ⲆΔᐃⵠⵠᐃⲆ: document.getElementById("cancel_agree_ing").style,
            ᐃⵠⲆΔⵠᐃΔ: document.getElementById("quest_agree_ing").style,
            ⵠⲆⲆⲆⲆᐃᐃ: document.getElementById("spectator_agree_ing").style,
            ⲆΔⵠⵠΔᐃᐃ: document.getElementById("auto_feed_agree_ing").style,
            ΔⵠᐃᐃⲆᐃᐃ: document.getElementById("info_agree_ing").style,
            ᐃⲆⵠⵠⵠᐃᐃ: document.getElementById("pixelated_agree_ing").style,
            button: df(60, 60, 0, ΔⲆ[727]),
            ᐃⵠⲆᐃⲆᐃⵠⵠᐃ: function () {
                px.options.open = !px.options.open;
                if (px.options.open) {
                    px.options.style.display = "inline-block";
                } else {
                    px.options.style.display = "none";
                }
            },
            ΔⲆᐃΔⲆΔⲆΔⵠ: function () {
                jx.ᐃΔⲆᐃⵠⵠⲆ();
            },
            ⵠΔᐃᐃᐃᐃᐃΔᐃ: function () {
                jx.ⲆΔᐃΔⲆΔⵠ();
            },
            high: function () {
                jx.ⲆᐃᐃⵠΔΔⲆΔⲆ();
            },
            low: function () {
                jx.ΔᐃΔⲆⵠⵠⵠⲆⲆ();
            },
            ΔΔⲆⲆⲆ: function () {
                px.ᐃⲆⵠⵠ.ΔΔⲆⲆⲆ();
            },
            ⲆⲆⲆΔΔΔΔⵠⲆ: function () {
                px.ᐃⵠΔⵠᐃ.ΔΔⲆⲆⲆ();
            },
            ⲆⲆⲆΔᐃⲆᐃΔΔ: function () {
                px.ⵠΔΔΔ.ΔΔⲆⲆⲆ();
            },
            ᐃᐃᐃⵠⵠⵠⲆⲆᐃ: function () {
                nx.ΔⵠΔΔᐃ.ⲆⲆᐃⵠᐃⲆᐃ();
            },
            ᐃᐃΔᐃᐃᐃⲆⵠⵠ: function () {
                nx.ᐃΔᐃⲆΔ.ⲆⲆᐃⵠᐃⲆᐃ();
            },
            ᐃᐃᐃᐃⲆ: function () {
                px.options.style.display = "none";
                px.options.open = gj;
            },
            ᐃⵠⲆ: function () {
                this.style.left = Math.floor(ro - 235) + "px";
                this.style.top = Math.floor(vo - 170) + "px";
            }
        };
        document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ΔⲆᐃΔⲆΔⲆΔⵠ, zj);
        document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ⵠΔᐃᐃᐃᐃᐃΔᐃ, Bl);
        document.getElementById("low_ing").addEventListener("mouseup", this.options.low, Sg);
        document.getElementById("high_ing").addEventListener("mouseup", this.options.high, false);
        document.getElementById("quit_opt").addEventListener("mouseup", this.options.ᐃᐃᐃᐃⲆ, false);
        document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ΔΔⲆⲆⲆ, ie);
        document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ⲆⲆⲆΔᐃⲆᐃΔΔ, Bl);
        document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ⲆⲆⲆΔΔΔΔⵠⲆ, false);
        document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ᐃᐃᐃⵠⵠⵠⲆⲆᐃ, Mr);
        document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ᐃᐃΔᐃᐃᐃⲆⵠⵠ, vn);
        this.ᐃⵠΔⵠᐃ = {
            open: mh,
            ⵠᐃΔΔΔ: ⲆⵠΔⵠ.get("starve_cancel") ? ⲆⵠΔⵠ.get("starve_cancel") === "0" ? 0 : 1 : 1,
            id: document.getElementById("cancel_sure_delete"),
            style: document.getElementById("cancel_sure_delete").style,
            ⵠⵠⵠⵠᐃ: document.getElementById("cancel_agree").style,
            button: 0,
            ⲆΔ: 0,
            ᐃᐃᐃᐃⲆ: function () {
                px.ᐃⵠΔⵠᐃ.style.display = "none";
                px.ᐃⵠΔⵠᐃ.open = Mr;
            },
            ᐃᐃⲆᐃⲆᐃⲆ: function () {
                if (nx.ⵠᐃΔⵠ.ΔⲆᐃⵠⵠ) {
                    ⲆΔⲆΔ.ᐃⵠⲆⲆⵠⵠΔⲆⲆ();
                }
                px.ᐃⵠΔⵠᐃ.ᐃᐃᐃᐃⲆ();
            },
            ΔΔⲆⲆⲆ: function () {
                if (px.ᐃⵠΔⵠᐃ.ⵠᐃΔΔΔ) {
                    ⲆⵠΔⵠ.set("starve_cancel", "0");
                    px.ᐃⵠΔⵠᐃ.ⵠⵠⵠⵠᐃ.display = "inline-block";
                    px.options.ⲆΔᐃⵠⵠᐃⲆ.display = "none";
                } else {
                    ⲆⵠΔⵠ.set("starve_cancel", "1");
                    px.ᐃⵠΔⵠᐃ.ⵠⵠⵠⵠᐃ.display = "none";
                    px.options.ⲆΔᐃⵠⵠᐃⲆ.display = "inline-block";
                }
                px.ᐃⵠΔⵠᐃ.ⵠᐃΔΔΔ = !px.ᐃⵠΔⵠᐃ.ⵠᐃΔΔΔ;
            },
            ᐃᐃⵠᐃⲆΔᐃ: function () {
                if (this.ⵠᐃΔΔΔ) {
                    this.style.display = "inline-block";
                    this.open = true;
                } else {
                    this.ᐃᐃⲆᐃⲆᐃⲆ();
                }
            },
            ᐃⵠⲆ: function () {
                this.style.left = Math.floor(ro - 235) + "px";
                this.style.top = Math.floor(vo - 130) + "px";
            }
        };
        this.ᐃⵠΔⵠᐃ.id.oncontextmenu = function () {
            return false;
        };
        this.ᐃⵠΔⵠᐃ.ⵠⵠⵠⵠᐃ.display = "none";
        if (this.ᐃⵠΔⵠᐃ.ⵠᐃΔΔΔ) {
            this.options.ⲆΔᐃⵠⵠᐃⲆ.display = "inline-block";
        } else {
            this.options.ⲆΔᐃⵠⵠᐃⲆ.display = "none";
        }
        document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ᐃⵠΔⵠᐃ.ᐃᐃⲆᐃⲆᐃⲆ, nq);
        document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ᐃⵠΔⵠᐃ.ᐃᐃᐃᐃⲆ, Bl);
        document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ᐃⵠΔⵠᐃ.ΔΔⲆⲆⲆ, Br);
        document.addEventListener("cancel_sure_delete", function (a) {
            a.preventDefault();
        }, zj);
        this.ᐃⵠⲆⲆⵠⵠΔ = {
            ⵠᐃΔΔΔ: ⲆⵠΔⵠ.get("starve_aliasing") ? ⲆⵠΔⵠ.get("starve_aliasing") === "0" ? 0 : 1 : 1,
            ᐃᐃⵠⲆⲆᐃⲆ: function (a) {
                document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
            },
            ΔΔⲆⲆⲆ: function () {
                if (px.ᐃⵠⲆⲆⵠⵠΔ.ⵠᐃΔΔΔ === 0) {
                    ⲆⵠΔⵠ.set("starve_aliasing", "1");
                    px.ᐃⵠⲆⲆⵠⵠΔ.ᐃᐃⵠⲆⲆᐃⲆ(1);
                    px.options.ᐃⲆⵠⵠⵠᐃᐃ.display = "inline-block";
                } else {
                    ⲆⵠΔⵠ.set("starve_aliasing", "0");
                    px.ᐃⵠⲆⲆⵠⵠΔ.ᐃᐃⵠⲆⲆᐃⲆ(0);
                    px.options.ᐃⲆⵠⵠⵠᐃᐃ.display = "none";
                }
                px.ᐃⵠⲆⲆⵠⵠΔ.ⵠᐃΔΔΔ = (px.ᐃⵠⲆⲆⵠⵠΔ.ⵠᐃΔΔΔ + 1) % 2;
            }
        };
        if (this.ᐃⵠⲆⲆⵠⵠΔ.ⵠᐃΔΔΔ === 1) {
            this.options.ᐃⲆⵠⵠⵠᐃᐃ.display = "inline-block";
        } else {
            this.ᐃⵠⲆⲆⵠⵠΔ.ᐃᐃⵠⲆⲆᐃⲆ(0);
            this.options.ᐃⲆⵠⵠⵠᐃᐃ.display = "none";
        }
        document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ᐃⵠⲆⲆⵠⵠΔ.ΔΔⲆⲆⲆ, false);
        this.ΔⲆⲆⲆΔ = {
            ⵠᐃΔΔΔ: ⲆⵠΔⵠ.get("starve_info_box") ? ⲆⵠΔⵠ.get("starve_info_box") === "0" ? 0 : 1 : 1,
            display: 0,
            x: 0,
            y: 0,
            id: 0,
            ⵠᐃΔⵠ: 0,
            ΔΔⲆⲆⲆ: function () {
                if (px.ΔⲆⲆⲆΔ.ⵠᐃΔΔΔ === 0) {
                    ⲆⵠΔⵠ.set("starve_info_box", "1");
                    px.options.ΔⵠᐃᐃⲆᐃᐃ.display = "inline-block";
                } else {
                    ⲆⵠΔⵠ.set("starve_info_box", "0");
                    px.options.ΔⵠᐃᐃⲆᐃᐃ.display = "none";
                }
                px.ΔⲆⲆⲆΔ.ⵠᐃΔΔΔ = (px.ΔⲆⲆⲆΔ.ⵠᐃΔΔΔ + 1) % 2;
            },
            ⵠⵠΔΔ: function (a, b, c) {
                if (a && this.ⵠᐃΔΔΔ) {
                    this.display = 1;
                    this.id = c === 0 ? b.id : Us[b.id].Ⲇⵠⵠⵠ;
                    this.x = b.info.translate.x + 80;
                    this.y = b.info.translate.y;
                    this.ⵠᐃΔⵠ = c;
                }
                return a;
            }
        };
        if (this.ΔⲆⲆⲆΔ.ⵠᐃΔΔΔ === 1) {
            this.options.ΔⵠᐃᐃⲆᐃᐃ.display = "inline-block";
        } else {
            this.options.ΔⵠᐃᐃⲆᐃᐃ.display = "none";
        }
        document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ΔⲆⲆⲆΔ.ΔΔⲆⲆⲆ, ca);
        if (ⲆⵠΔⵠ.get("starve_scale")) {
            Co = Number(ⲆⵠΔⵠ.get("starve_scale"));
            document.getElementById("input_ratio").value = Co;
            Co *= Yq / Zq;
            $q();
        }
        this.ᐃΔⵠᐃⲆΔᐃ = function () {
            ⲆⵠΔⵠ.set("starve_scale", "" + document.getElementById("input_ratio").value);
            Co = Yq / Zq * document.getElementById("input_ratio").value;
            $q();
        };
        document.getElementById("input_ratio").addEventListener("input", this.ᐃΔⵠᐃⲆΔᐃ, false);
        this.ᐃⲆⵠⵠ = {
            open: false,
            ⵠᐃΔΔΔ: ⲆⵠΔⵠ.get("starve_safe") ? ⲆⵠΔⵠ.get("starve_safe") === "0" ? 0 : 1 : 1,
            id: document.getElementById("sure_delete"),
            style: document.getElementById("sure_delete").style,
            ⵠⵠⵠⵠᐃ: document.getElementById("agree").style,
            button: 0,
            ⲆΔ: 0,
            ᐃᐃᐃᐃⲆ: function () {
                px.ᐃⲆⵠⵠ.style.display = "none";
                px.ᐃⲆⵠⵠ.open = kr;
            },
            all: function () {
                if (!nx.ΔΔⲆⲆⵠ.wait) {
                    if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && nx.ⵠᐃΔⵠ.id < 0 && !nx.ⲆᐃⵠⲆᐃ.enabled) {
                        ⲆΔⲆΔ.ⲆⲆⵠᐃⵠⵠᐃⲆⵠ(px.ᐃⲆⵠⵠ.button);
                    }
                    px.ᐃⲆⵠⵠ.ᐃᐃᐃᐃⲆ();
                }
            },
            ⲆⲆΔⲆ: function () {
                if (nx.ⵠᐃΔⵠ.ᐃᐃᐃⲆΔ && !nx.ΔΔⲆⲆⵠ.wait) {
                    if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && nx.ⵠᐃΔⵠ.id < 0 && !nx.ⲆᐃⵠⲆᐃ.enabled) {
                        ⲆΔⲆΔ.ΔⵠⵠᐃⲆⲆⵠⲆⲆ(px.ᐃⲆⵠⵠ.button);
                    }
                    px.ᐃⲆⵠⵠ.ᐃᐃᐃᐃⲆ();
                }
            },
            ΔᐃⲆⵠⲆᐃᐃΔⲆ: function () {
                if (!nx.ΔΔⲆⲆⵠ.wait) {
                    if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && nx.ⵠᐃΔⵠ.id < 0 && !nx.ⲆᐃⵠⲆᐃ.enabled) {
                        ⲆΔⲆΔ.ΔⲆΔⲆΔΔΔᐃᐃ(px.ᐃⲆⵠⵠ.button);
                    }
                    px.ᐃⲆⵠⵠ.ᐃᐃᐃᐃⲆ();
                }
            },
            ΔΔⲆⲆⲆ: function () {
                if (px.ᐃⲆⵠⵠ.ⵠᐃΔΔΔ) {
                    ⲆⵠΔⵠ.set("starve_safe", "0");
                    px.ᐃⲆⵠⵠ.ⵠⵠⵠⵠᐃ.display = "inline-block";
                    px.options.ⵠⵠⵠⵠᐃ.display = "none";
                } else {
                    ⲆⵠΔⵠ.set("starve_safe", "1");
                    px.ᐃⲆⵠⵠ.ⵠⵠⵠⵠᐃ.display = "none";
                    px.options.ⵠⵠⵠⵠᐃ.display = "inline-block";
                }
                px.ᐃⲆⵠⵠ.ⵠᐃΔΔΔ = !px.ᐃⲆⵠⵠ.ⵠᐃΔΔΔ;
            },
            ᐃᐃⵠᐃⲆΔᐃ: function (a) {
                this.button = a;
                document.getElementById("item_to_del").src = ΔⲆ[js[a].ᐃⲆ][0].ᐃⵠⲆⵠΔ === undefined ? ΔⲆ[js[a].ᐃⲆ][0].src : ΔⲆ[js[a].ᐃⲆ][0].ᐃⵠⲆⵠΔ;
                if (js[a].ⲆⲆΔⲆ && !nx.ΔⵠⵠⵠⲆ && nx.ⵠᐃΔⵠ.ᐃᐃᐃⲆΔ) {
                    document.getElementById("recycle_delete").style.display = "inline-block";
                } else {
                    document.getElementById("recycle_delete").style.display = "none";
                }
                if (this.ⵠᐃΔΔΔ) {
                    this.style.display = "inline-block";
                    this.open = true;
                } else {
                    this.all();
                }
            },
            ᐃⵠⲆ: function () {
                this.style.left = Math.floor(ro - 235) + "px";
                this.style.top = Math.floor(vo - 175) + "px";
            }
        };
        this.ᐃⲆⵠⵠ.ⵠⵠⵠⵠᐃ.display = "none";
        if (this.ᐃⲆⵠⵠ.ⵠᐃΔΔΔ) {
            this.options.ⵠⵠⵠⵠᐃ.display = "inline-block";
        } else {
            this.options.ⵠⵠⵠⵠᐃ.display = "none";
        }
        document.getElementById("one_delete").addEventListener("mouseup", this.ᐃⲆⵠⵠ.ΔᐃⲆⵠⲆᐃᐃΔⲆ, false);
        document.getElementById("yes_delete").addEventListener("mouseup", this.ᐃⲆⵠⵠ.all, false);
        document.getElementById("recycle_delete").addEventListener("mouseup", this.ᐃⲆⵠⵠ.ⲆⲆΔⲆ, ek);
        document.getElementById("no_delete").addEventListener("mouseup", this.ᐃⲆⵠⵠ.ᐃᐃᐃᐃⲆ, zj);
        document.getElementById("case_agree").addEventListener("mouseup", this.ᐃⲆⵠⵠ.ΔΔⲆⲆⲆ, Mr);
        this.ⲆᐃⲆΔᐃ = {
            open: false,
            ⵠⲆΔⵠⲆ: -1,
            button: df(60, 60, 0, ΔⲆ[592]),
            id: document.getElementById("shop_starterkit"),
            style: document.getElementById("shop_starterkit").style,
            ᐃⵠⲆ: function () {
                this.style.left = Math.floor(ro - 300) + "px";
                this.style.top = Math.floor(vo - 215) + "px";
            },
            ᐃᐃᐃᐃⲆ: function () {
                px.ⲆᐃⲆΔᐃ.open = false;
                px.ⲆᐃⲆΔᐃ.style.display = "none";
            },
            select: function () {
                px.ⲆᐃⲆΔᐃ.open = !px.ⲆᐃⲆΔᐃ.open;
                if (px.ⲆᐃⲆΔᐃ.open) {
                    px.ⲆᐃⲆΔᐃ.style.display = "inline-block";
                } else {
                    px.ⲆᐃⲆΔᐃ.style.display = "none";
                }
            },
            ⲆᐃⲆⲆⵠⲆⵠ: function () {
                if (px.ⲆᐃⲆΔᐃ.ⵠⲆΔⵠⲆ >= 0) {
                    ⲆΔⲆΔ.ᐃΔΔᐃᐃᐃᐃⲆᐃ(px.ⲆᐃⲆΔᐃ.ⵠⲆΔⵠⲆ);
                    px.ⲆᐃⲆΔᐃ.ᐃᐃᐃᐃⲆ();
                    if (ga) {
                        ga("send", "event", "Game", "kit", "" + px.ⲆᐃⲆΔᐃ.ⵠⲆΔⵠⲆ);
                    }
                }
            },
            ⲆⵠᐃⲆⲆ: function () {
                var a = nx.ⲆᐃⲆΔᐃ.value;
                document.getElementById("points_bank").innerHTML = Z.ΔΔⲆᐃⵠⵠᐃ(a) + " points";
                for (var b = 0; b < Pf.length; b++) {
                    if (Pf[b].ΔᐃᐃΔᐃ > a) {
                        document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
                    } else {
                        document.getElementById("starter" + (b + 1)).style.opacity = "1";
                    }
                }
                for (b = 1; b < 13; b++) {
                    document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + b).innerHTML = "";
                }
                document.getElementById("buy_kit").style.opacity = "0.2";
            },
            ⵠΔⲆⲆΔⵠⵠᐃᐃ: function () {
                if (this.id.length > 8) {
                    var a = Number(this.id.charAt(7) + this.id.charAt(8));
                } else {
                    a = Number(this.id.charAt(7));
                }
                var b = Pf[a - 1];
                if (nx.ⲆᐃⲆΔᐃ.value >= b.ΔᐃᐃΔᐃ) {
                    px.ⲆᐃⲆΔᐃ.ⵠⲆΔⵠⲆ = a;
                    document.getElementById("buy_kit").style.opacity = "1";
                } else {
                    px.ⲆᐃⲆΔᐃ.ⵠⲆΔⵠⲆ = -1;
                    document.getElementById("buy_kit").style.opacity = "0.2";
                }
                b = b.items;
                for (var c = 1, d = 1; c < b.length + 1; c++) {
                    if (b[c - 1][1] !== 29) {
                        document.getElementById("inv_shop" + d).style.display = "inline-block";
                        document.getElementById("inv_shop" + d).src = ΔⲆ[js[b[c - 1][1]].ᐃⲆ][0].ᐃⵠⲆⵠΔ === undefined ? ΔⲆ[js[b[c - 1][1]].ᐃⲆ][0].src : ΔⲆ[js[b[c - 1][1]].ᐃⲆ][0].ᐃⵠⲆⵠΔ;
                        document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
                        d++;
                    }
                }
                for (; d < 13; d++) {
                    document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + d).innerHTML = "";
                }
            }
        };
        document.getElementById("quit3").addEventListener("mouseup", this.ⲆᐃⲆΔᐃ.ᐃᐃᐃᐃⲆ, z);
        document.getElementById("buy_kit").addEventListener("mouseup", this.ⲆᐃⲆΔᐃ.ⲆᐃⲆⲆⵠⲆⵠ, false);
        for (m = 1; m < 11; m++) {
            document.getElementById("starter" + m).addEventListener("mouseup", this.ⲆᐃⲆΔᐃ.ⵠΔⲆⲆΔⵠⵠᐃᐃ, false);
        }
        this.ⵠΔΔΔ = {
            open: false,
            ⵠᐃΔΔΔ: ⲆⵠΔⵠ.get("starve_quests") ? ⲆⵠΔⵠ.get("starve_quests") === "1" ? 1 : 0 : 0,
            button: df(60, 60, 0, ΔⲆ[755]),
            id: document.getElementById("chronoquest"),
            style: document.getElementById("chronoquest").style,
            ᐃⵠⲆ: function () {
                this.style.left = Math.floor(ro - 420) + "px";
                this.style.top = Math.floor(vo - 270) + "px";
            },
            ᐃᐃᐃᐃⲆ: function () {
                px.ⵠΔΔΔ.style.display = "none";
                px.ⵠΔΔΔ.open = false;
            },
            select: function () {
                px.ⵠΔΔΔ.open = !px.ⵠΔΔΔ.open;
                if (px.ⵠΔΔΔ.open) {
                    px.ⵠΔΔΔ.style.display = "inline-block";
                } else {
                    px.ⵠΔΔΔ.style.display = "none";
                }
            },
            list: [],
            reset: function () {
                for (var a = 0; a < Df.length; a++) {
                    this.list[a] = 1;
                    document.getElementById("timeremain_" + a).style.display = "inline-block";
                    document.getElementById("time_finished_" + a).style.display = "none";
                    document.getElementById("claim_reward_" + a).style.display = "none";
                }
            },
            ᐃⵠᐃΔᐃⵠᐃ: 0,
            ΔⲆΔΔⵠᐃⲆ: 0,
            ⵠᐃⵠⵠΔΔΔⵠᐃ: function () {
                if (px.ⵠΔΔΔ.open) {
                    var a = new Date().getTime();
                    if (a - this.ᐃⵠᐃΔᐃⵠᐃ >= 1000) {
                        this.ᐃⵠᐃΔᐃⵠᐃ = a;
                        for (var b = 0; b < Df.length; b++) {
                            if (px.ⵠΔΔΔ.list[b]) {
                                var c = Df[b].time - (a - mx.ΔΔΔΔⲆ.ⲆⵠᐃⲆⲆ + px.ⵠΔΔΔ.ΔⲆΔΔⵠᐃⲆ);
                                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
                            }
                        }
                    }
                }
            },
            restore: function (a) {
                for (var b = 0; b < a.length; b++) {
                    if (a[b] != 1) {
                        px.ⵠΔΔΔ.ⵠⵠᐃⲆⵠⵠΔ(b, a[b]);
                    }
                }
            },
            ⵠⵠᐃⲆⵠⵠΔ: function (a, b) {
                if (b === 3 && (a === 11 || a === 12)) {
                    nx.ΔⲆΔⲆ.ⵠΔᐃΔΔᐃⵠ(0, 1);
                    px.ΔⵠⵠⲆⵠᐃⲆ();
                }
                document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                if (b > 1) {
                    document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
                    document.getElementById("timeremain_" + a).style.display = "none";
                } else if (b === 0) {
                    document.getElementById("time_finished_" + a).innerHTML = "FAILED";
                    document.getElementById("timeremain_" + a).style.display = "none";
                }
                document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
                document.getElementById("time_finished_" + a).style.display = "inline";
                px.ⵠΔΔΔ.list[a] = 0;
            },
            modify: function (a, b) {
                px.ⵠΔΔΔ.ⵠⵠᐃⲆⵠⵠΔ(a, b);
                if (px.ⵠΔΔΔ.ⵠᐃΔΔΔ) {
                    px.ⵠΔΔΔ.open = true;
                    px.ⵠΔΔΔ.style.display = "inline-block";
                }
            },
            ΔΔⲆⲆⲆ: function () {
                if (px.ⵠΔΔΔ.ⵠᐃΔΔΔ) {
                    ⲆⵠΔⵠ.set("starve_quests", "0");
                    px.options.ᐃⵠⲆΔⵠᐃΔ.display = "none";
                } else {
                    ⲆⵠΔⵠ.set("starve_quests", "1");
                    px.options.ᐃⵠⲆΔⵠᐃΔ.display = "inline-block";
                }
                px.ⵠΔΔΔ.ⵠᐃΔΔΔ = !px.ⵠΔΔΔ.ⵠᐃΔΔΔ;
            },
            ⲆᐃΔⲆⵠΔΔⵠⵠ: function () {
                var a = Number(this.id.charAt(13));
                var b = Number(this.id.charAt(14));
                if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
                    a = a * 10 + b;
                }
                ⲆΔⲆΔ.ᐃᐃᐃⵠⲆΔⵠⵠᐃ(a);
            }
        };
        if (this.ⵠΔΔΔ.ⵠᐃΔΔΔ) {
            this.options.ᐃⵠⲆΔⵠᐃΔ.display = "inline-block";
        } else {
            this.options.ᐃⵠⲆΔⵠᐃΔ.display = "none";
        }
        document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ⵠΔΔΔ.ᐃᐃᐃᐃⲆ, rg);
        for (m = 0; Df.length > m; m++) {
            document.getElementById("claim_reward_" + m).addEventListener("mouseup", this.ⵠΔΔΔ.ⲆᐃΔⲆⵠΔΔⵠⵠ, false);
        }
        this.ⲆΔᐃⵠ = {
            open: gj,
            button: df(60, 60, 0, ΔⲆ[708]),
            list: {
                id: document.getElementById("recipe_craft"),
                style: document.getElementById("recipe_craft").style,
                ᐃⵠΔΔⲆⵠⵠ: [],
                ᐃΔⲆΔΔΔⲆ: 0,
                ᐃⵠⲆ: function () {
                    this.style.left = Math.floor(ro - 335) + "px";
                    this.style.top = Math.floor(vo - 215) + "px";
                },
                ᐃᐃᐃᐃⲆ: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    px.ⲆΔᐃⵠ.open = nq;
                },
                ΔΔᐃΔⲆⲆⵠ: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    document.getElementById("home_craft").style.display = "inline-block";
                },
                ᐃᐃΔⲆ: function (a) {
                    if ((b = this.ᐃⵠΔΔⲆⵠⵠ[a]).ᐃⵠΔ) {
                        document.getElementById("watercraft").style.display = "inline-block";
                    } else {
                        document.getElementById("watercraft").style.display = "none";
                    }
                    if (b.f) {
                        document.getElementById("firecraft").style.display = "inline-block";
                    } else {
                        document.getElementById("firecraft").style.display = "none";
                    }
                    if (b.w) {
                        document.getElementById("workcraft").style.display = "inline-block";
                    } else {
                        document.getElementById("workcraft").style.display = "none";
                    }
                    if (b.e) {
                        document.getElementById("wellcraft").style.display = "inline-block";
                    } else {
                        document.getElementById("wellcraft").style.display = "none";
                    }
                    for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
                        document.getElementById("inv" + c).style.display = "inline-block";
                        document.getElementById("inv" + c).src = ΔⲆ[js[b[a][0]].ᐃⲆ][0].ᐃⵠⲆⵠΔ === undefined ? ΔⲆ[js[b[a][0]].ᐃⲆ][0].src : ΔⲆ[js[b[a][0]].ᐃⲆ][0].ᐃⵠⲆⵠΔ;
                        document.getElementById("numb" + c).innerHTML = "" + b[a][1];
                        c++;
                    }
                    for (; c < 6; c++) {
                        document.getElementById("inv" + c).style.display = "none";
                        document.getElementById("numb" + c).innerHTML = "";
                    }
                },
                select: function (a) {
                    this.ᐃΔⲆΔΔΔⲆ = a;
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("workcraft").style.display = "none";
                    document.getElementById("firecraft").style.display = "none";
                    document.getElementById("watercraft").style.display = "none";
                    document.getElementById("wellcraft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "inline-block";
                    document.getElementById("inv1").style.display = "none";
                    document.getElementById("inv2").style.display = "none";
                    document.getElementById("inv3").style.display = "none";
                    document.getElementById("inv4").style.display = "none";
                    document.getElementById("inv5").style.display = "none";
                    document.getElementById("numb1").innerHTML = "";
                    document.getElementById("numb2").innerHTML = "";
                    document.getElementById("numb3").innerHTML = "";
                    document.getElementById("numb4").innerHTML = "";
                    document.getElementById("numb5").innerHTML = "";
                    for (var b = 0, c = 0; b < Us.length; b++) {
                        var d = Us[b];
                        if (a === d.ⵠᐃⲆ) {
                            this.ᐃⵠΔΔⲆⵠⵠ[c] = d;
                            c++;
                            document.getElementById("img_" + c).style.display = "inline-block";
                            document.getElementById("img_" + c).src = ΔⲆ[js[d.Ⲇⵠⵠⵠ].ᐃⲆ][0].ᐃⵠⲆⵠΔ === undefined ? ΔⲆ[js[d.Ⲇⵠⵠⵠ].ᐃⲆ][0].src : ΔⲆ[js[d.Ⲇⵠⵠⵠ].ᐃⲆ][0].ᐃⵠⲆⵠΔ;
                        }
                    }
                    for (c++; c < 49; c++) {
                        document.getElementById("img_" + c).style.display = "none";
                    }
                }
            },
            ᐃⲆⵠΔᐃⵠⲆ: {
                id: document.getElementById("home_craft"),
                style: document.getElementById("home_craft").style,
                ᐃⵠⲆ: function () {
                    this.style.left = Math.floor(ro - 285) + "px";
                    this.style.top = Math.floor(vo - 170) + "px";
                },
                ᐃᐃᐃᐃⲆ: function () {
                    document.getElementById("home_craft").style.display = "none";
                    px.ⲆΔᐃⵠ.open = Mr;
                }
            },
            ⲆᐃⲆⲆᐃⲆᐃΔⵠ: function () {
                this.open = !this.open;
                if (this.open) {
                    document.getElementById("home_craft").style.display = "inline-block";
                } else {
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "none";
                }
            }
        };
        document.getElementById("quit").addEventListener("mouseup", this.ⲆΔᐃⵠ.ᐃⲆⵠΔᐃⵠⲆ.ᐃᐃᐃᐃⲆ, false);
        document.getElementById("quitmenu").addEventListener("mouseup", this.ⲆΔᐃⵠ.list.ᐃᐃᐃᐃⲆ, false);
        document.getElementById("backhome").addEventListener("mouseup", this.ⲆΔᐃⵠ.list.ΔΔᐃΔⲆⲆⵠ, false);
        document.getElementById("hatcategory").addEventListener("mouseup", function () {
            px.ⲆΔᐃⵠ.list.select(2);
        }, false);
        document.getElementById("weaponcategory").addEventListener("mouseup", function () {
            px.ⲆΔᐃⵠ.list.select(1);
        }, false);
        document.getElementById("toolcategory").addEventListener("mouseup", function () {
            px.ⲆΔᐃⵠ.list.select(0);
        }, false);
        document.getElementById("foodcategory").addEventListener("mouseup", function () {
            px.ⲆΔᐃⵠ.list.select(3);
        }, false);
        document.getElementById("placeablecategory").addEventListener("mouseup", function () {
            px.ⲆΔᐃⵠ.list.select(4);
        }, false);
        document.getElementById("constructioncategory").addEventListener("mouseup", function () {
            px.ⲆΔᐃⵠ.list.select(5);
        }, false);
        document.getElementById("img_1").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(0);
        }, false);
        document.getElementById("img_2").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(1);
        }, Yk);
        document.getElementById("img_3").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(2);
        }, gj);
        document.getElementById("img_4").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(3);
        }, zj);
        document.getElementById("img_5").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(4);
        }, ek);
        document.getElementById("img_6").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(5);
        }, false);
        document.getElementById("img_7").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(6);
        }, false);
        document.getElementById("img_8").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(7);
        }, el);
        document.getElementById("img_9").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(8);
        }, false);
        document.getElementById("img_10").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(9);
        }, false);
        document.getElementById("img_11").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(10);
        }, false);
        document.getElementById("img_12").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(11);
        }, ie);
        document.getElementById("img_13").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(12);
        }, false);
        document.getElementById("img_14").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(13);
        }, vn);
        document.getElementById("img_15").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(14);
        }, mh);
        document.getElementById("img_16").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(15);
        }, false);
        document.getElementById("img_17").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(16);
        }, false);
        document.getElementById("img_18").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(17);
        }, Yk);
        document.getElementById("img_19").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(18);
        }, Yk);
        document.getElementById("img_20").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(19);
        }, Yk);
        document.getElementById("img_21").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(20);
        }, false);
        document.getElementById("img_22").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(21);
        }, false);
        document.getElementById("img_23").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(22);
        }, false);
        document.getElementById("img_24").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(23);
        }, false);
        document.getElementById("img_25").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(24);
        }, nq);
        document.getElementById("img_26").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(25);
        }, Yn);
        document.getElementById("img_27").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(26);
        }, kr);
        document.getElementById("img_28").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(27);
        }, false);
        document.getElementById("img_29").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(28);
        }, false);
        document.getElementById("img_30").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(29);
        }, false);
        document.getElementById("img_31").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(30);
        }, false);
        document.getElementById("img_32").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(31);
        }, zj);
        document.getElementById("img_33").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(32);
        }, Bl);
        document.getElementById("img_34").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(33);
        }, false);
        document.getElementById("img_35").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(34);
        }, vn);
        document.getElementById("img_36").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(35);
        }, Mr);
        document.getElementById("img_37").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(36);
        }, false);
        document.getElementById("img_38").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(37);
        }, false);
        document.getElementById("img_39").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(38);
        }, false);
        document.getElementById("img_40").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(39);
        }, Sg);
        document.getElementById("img_41").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(40);
        }, kr);
        document.getElementById("img_42").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(41);
        }, nh);
        document.getElementById("img_43").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(42);
        }, mh);
        document.getElementById("img_44").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(43);
        }, false);
        document.getElementById("img_45").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(44);
        }, nh);
        document.getElementById("img_46").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(45);
        }, false);
        document.getElementById("img_47").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(46);
        }, nq);
        document.getElementById("img_48").addEventListener("mousedown", function () {
            px.ⲆΔᐃⵠ.list.ᐃᐃΔⲆ(47);
        }, Br);
        this.ⵠⵠⵠᐃᐃ = {
            translate: {
                y: 0,
                x: 0
            },
            ᐃᐃⵠᐃᐃ: {
                x: -1,
                y: -1
            },
            ⵠᐃΔΔ: [],
            focus: function (a) {
                var b = this.translate.y + (nx.ΔⲆΔⲆ.Ⲇⵠᐃⵠⵠ.length > 0 ? -120 : -50);
                if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
                    this.ᐃᐃⵠᐃᐃ.x = a.x - this.translate.x;
                    this.ᐃᐃⵠᐃᐃ.y = a.y - b;
                }
            }
        };
        this.ᐃΔⵠΔ = {
            translate: {
                x: 0,
                y: 0
            },
            ᐃⲆ: ΔⲆ[278],
            ⲆⲆ: document.createElement("canvas")
        };
        this.ᐃΔⵠΔ.ⲆⲆ.width = this.ᐃΔⵠΔ.ᐃⲆ.width;
        this.ᐃΔⵠΔ.ⲆⲆ.height = this.ᐃΔⵠΔ.ᐃⲆ.height;
        this.ᐃΔⵠΔ.ᐃ = this.ᐃΔⵠΔ.ⲆⲆ.getContext("2d");
        this.ⲆΔⵠᐃ = {
            translate: {
                x: 0,
                y: 0
            },
            ᐃⲆ: ΔⲆ[267],
            Δⵠᐃⵠ: Hu,
            y: 0,
        };
        this.ⲆΔᐃⵠᐃᐃᐃ = function () {
            ΔⲆⲆΔᐃ = document.getElementById("team_box");
            ΔⲆⲆΔᐃ.innerHTML = "";
            ΔⲆⲆΔᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + mx.ⵠᐃΔΔ[nx.ⵠΔᐃΔᐃ[0]].ⲆΔΔⵠⲆ + "</div";
            for (var a = 1; a < nx.ⵠΔᐃΔᐃ.length; a++) {
                ΔⲆⲆΔᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + mx.ⵠᐃΔΔ[nx.ⵠΔᐃΔᐃ[a]].ⲆΔΔⵠⲆ + "</div></div>";
            }
            ΔⲆⲆΔᐃ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
            ΔⲆⲆΔᐃ.style.display = "inline-block";
            document.getElementById("leave").addEventListener("click", ⲆΔⲆΔ.ⲆΔᐃⵠᐃᐃᐃ, false);
        };
        this.ᐃⵠⲆΔⵠⵠⵠᐃⲆ = function () {
            ΔⲆⲆΔᐃ = document.getElementById("team_box");
            ΔⲆⲆΔᐃ.innerHTML = "";
            ΔⲆⲆΔᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + mx.ⵠᐃΔΔ[nx.ⵠΔᐃΔᐃ[0]].ⲆΔΔⵠⲆ + "</div";
            for (var a = 1; nx.ⵠΔᐃΔᐃ.length > a; a++) {
                ΔⲆⲆΔᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + mx.ⵠᐃΔΔ[nx.ⵠΔᐃΔᐃ[a]].ⲆΔΔⵠⲆ + "</div></div>";
            }
            ΔⲆⲆΔᐃ.innerHTML += "</div>";
            ΔⲆⲆΔᐃ.style.display = "inline-block";
        };
        this.ΔⲆⲆⲆΔⲆᐃⵠᐃ = function () {
            ΔⲆⲆΔᐃ = document.getElementById("team_box");
            ΔⲆⲆΔᐃ.innerHTML = "";
            ΔⲆⲆΔᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + mx.ⵠᐃΔΔ[nx.ⵠΔᐃΔᐃ[0]].ⲆΔΔⵠⲆ + "</div";
            for (var a = 1; a < nx.ⵠΔᐃΔᐃ.length; a++) {
                ΔⲆⲆΔᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + mx.ⵠᐃΔΔ[nx.ⵠΔᐃΔᐃ[a]].ⲆΔΔⵠⲆ + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
            }
            if (nx.ⲆⵠΔⵠⵠ.lock === 0) {
                ΔⲆⲆΔᐃ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
            } else {
                ΔⲆⲆΔᐃ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
            }
            document.getElementById("lock_team").addEventListener("click", ⲆΔⲆΔ.ⵠⲆⲆᐃⵠⵠΔΔⵠ, false);
            ΔⲆⲆΔᐃ.style.display = "inline-block";
            for (a = 1; a < nx.ⵠΔᐃΔᐃ.length; a++) {
                switch (a) {
                    case 1:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⲆΔⲆΔ.ⵠⲆⲆⲆⵠⵠⲆ(1);
                        }, false);
                        break;
                    case 2:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⲆΔⲆΔ.ⵠⲆⲆⲆⵠⵠⲆ(2);
                        }, false);
                        break;
                    case 3:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⲆΔⲆΔ.ⵠⲆⲆⲆⵠⵠⲆ(3);
                        }, false);
                        break;
                    case 4:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⲆΔⲆΔ.ⵠⲆⲆⲆⵠⵠⲆ(4);
                        }, false);
                        break;
                    case 5:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⲆΔⲆΔ.ⵠⲆⲆⲆⵠⵠⲆ(5);
                        }, false);
                        break;
                    case 6:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⲆΔⲆΔ.ⵠⲆⲆⲆⵠⵠⲆ(6);
                        }, false);
                        break;
                    case 7:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⲆΔⲆΔ.ⵠⲆⲆⲆⵠⵠⲆ(7);
                        }, nq);
                        break;
                    case 8:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⲆΔⲆΔ.ⵠⲆⲆⲆⵠⵠⲆ(8);
                        }, ca);
                }
            }
        };
        this.ⵠᐃΔᐃⲆ = [];
        this.ⵠᐃΔᐃⲆ[2] = {
            button: df(60, 60, 0, ΔⲆ[556]),
            action: this.ⲆΔᐃⵠᐃᐃᐃ
        };
        this.ⵠᐃΔᐃⲆ[3] = {
            button: df(60, 60, 0, ΔⲆ[556]),
            action: ⲆΔⲆΔ.ⲆⵠⵠⵠⵠᐃⲆΔᐃ
        };
        this.ⵠᐃΔᐃⲆ[0] = {
            button: df(60, 60, 0, ΔⲆ[557]),
            action: this.ΔⲆⲆⲆΔⲆᐃⵠᐃ
        };
        this.ⵠᐃΔᐃⲆ[1] = {
            button: df(60, 60, 0, ΔⲆ[561]),
            action: this.ᐃⵠⲆΔⵠⵠⵠᐃⲆ
        };
        this.ⵠᐃΔᐃⲆ[4] = {
            button: df(60, 60, 0, ΔⲆ[560]),
            action: function () { }
        };
        this.ᐃΔᐃⲆⲆ = -1;
        this.ⲆⲆⲆⲆⲆᐃⵠ = df(60, 60, 0, ΔⲆ[723]);
        this.ⵠΔΔΔᐃⵠᐃ = df(60, 60, 0, ΔⲆ[724]);
        this.ⵠᐃⲆΔᐃΔᐃ = df(60, 60, 0, ΔⲆ[658]);
        this.ᐃᐃⲆⵠΔᐃΔ = df(60, 60, 0, ΔⲆ[657]);
        this.ⲆⲆΔⵠΔⲆᐃ = df(60, 60, 0, ΔⲆ[658]);
        this.ΔⲆᐃⵠⵠᐃΔ = df(60, 60, 0, ΔⲆ[316]);
        this.ᐃⵠⲆⲆⲆΔⵠ = df(60, 60, 0, ΔⲆ[315]);
        this.ⲆⲆⲆΔᐃΔΔ = df(60, 60, 0, ΔⲆ[297]);
        this.ⲆΔⵠⵠⵠᐃᐃ = df(60, 60, 0, ΔⲆ[298]);
        this.ΔᐃᐃΔⲆⲆΔ = df(60, 60, 0, ΔⲆ[418]);
        this.ᐃΔᐃᐃᐃᐃⲆ = df(60, 60, 0, ΔⲆ[938]);
        this.ᐃⵠᐃⵠⵠⲆΔ = df(60, 60, 0, ΔⲆ[412]);
        this.ᐃᐃⲆⵠⵠⲆᐃ = df(60, 60, 0, ΔⲆ[536]);
        this.ΔᐃⲆⲆΔΔⲆ = df(60, 60, 0, ΔⲆ[535]);
        this.ΔⵠΔⲆΔⲆΔ = df(60, 60, 0, ΔⲆ[538]);
        this.ΔᐃⵠⵠⲆ = df(120, 120, 0, ΔⲆ[149]);
        this.ΔᐃⵠⵠⲆ.info.translate.x = 10;
        this.ΔᐃⵠⵠⲆ.info.translate.y = 10;
        this.ⲆΔⵠ = [];
        this.ⲆΔⵠ[0] = df(68, 68, 0, ΔⲆ[340], 3);
        this.ⲆΔⵠ[0].id = 0;
        this.ⲆΔⵠ[1] = df(68, 68, 0, ΔⲆ[341], 3);
        this.ⲆΔⵠ[1].id = 1;
        this.ⲆΔⵠ[108] = df(68, 68, 0, ΔⲆ[342], 3);
        this.ⲆΔⵠ[108].id = 108;
        this.ⲆΔⵠ[109] = df(68, 68, 0, ΔⲆ[343], 3);
        this.ⲆΔⵠ[109].id = 109;
        this.ⲆΔⵠ[110] = df(68, 68, 0, ΔⲆ[269], 3);
        this.ⲆΔⵠ[110].id = 110;
        this.ⲆΔⵠ[233] = df(68, 68, 0, ΔⲆ[1155], 3);
        this.ⲆΔⵠ[233].id = 233;
        this.ⲆΔⵠ[111] = df(68, 68, 0, ΔⲆ[270], 3);
        this.ⲆΔⵠ[111].id = 111;
        this.ⲆΔⵠ[112] = df(68, 68, 0, ΔⲆ[271], 3);
        this.ⲆΔⵠ[112].id = 112;
        this.ⲆΔⵠ[3] = df(68, 68, 0, ΔⲆ[272], 3);
        this.ⲆΔⵠ[3].id = 3;
        this.ⲆΔⵠ[4] = df(68, 68, 0, ΔⲆ[344], 3);
        this.ⲆΔⵠ[4].id = 4;
        this.ⲆΔⵠ[5] = df(68, 68, 0, ΔⲆ[345], 3);
        this.ⲆΔⵠ[5].id = 5;
        this.ⲆΔⵠ[57] = df(68, 68, 0, ΔⲆ[831], 3);
        this.ⲆΔⵠ[57].id = 57;
        this.ⲆΔⵠ[6] = df(68, 68, 0, ΔⲆ[346], 3);
        this.ⲆΔⵠ[6].id = 6;
        this.ⲆΔⵠ[113] = df(68, 68, 0, ΔⲆ[273], 3);
        this.ⲆΔⵠ[113].id = 113;
        this.ⲆΔⵠ[114] = df(68, 68, 0, ΔⲆ[358], 3);
        this.ⲆΔⵠ[114].id = 114;
        this.ⲆΔⵠ[115] = df(68, 68, 0, ΔⲆ[348], 3);
        this.ⲆΔⵠ[115].id = 115;
        this.ⲆΔⵠ[162] = df(68, 68, 0, ΔⲆ[349], 3);
        this.ⲆΔⵠ[162].id = 162;
        this.ⲆΔⵠ[160] = df(68, 68, 0, ΔⲆ[350], 3);
        this.ⲆΔⵠ[160].id = 160;
        this.ⲆΔⵠ[8] = df(68, 68, 0, ΔⲆ[274], 3);
        this.ⲆΔⵠ[8].id = 8;
        this.ⲆΔⵠ[117] = df(68, 68, 0, ΔⲆ[351], 3);
        this.ⲆΔⵠ[117].id = 117;
        this.ⲆΔⵠ[116] = df(68, 68, 0, ΔⲆ[275], 3);
        this.ⲆΔⵠ[116].id = 116;
        this.ⲆΔⵠ[118] = df(68, 68, 0, ΔⲆ[276], 3);
        this.ⲆΔⵠ[118].id = 118;
        this.ⲆΔⵠ[195] = df(68, 68, 0, ΔⲆ[352], 3);
        this.ⲆΔⵠ[195].id = 195;
        this.ⲆΔⵠ[161] = df(68, 68, 0, ΔⲆ[353], 3);
        this.ⲆΔⵠ[161].id = 161;
        this.ⲆΔⵠ[163] = df(68, 68, 0, ΔⲆ[354], 3);
        this.ⲆΔⵠ[163].id = 163;
        this.ⲆΔⵠ[164] = df(68, 68, 0, ΔⲆ[355], 3);
        this.ⲆΔⵠ[164].id = 164;
        this.ⲆΔⵠ[165] = df(68, 68, 0, ΔⲆ[356], 3);
        this.ⲆΔⵠ[165].id = 165;
        this.ⲆΔⵠ[166] = df(68, 68, 0, ΔⲆ[357], 3);
        this.ⲆΔⵠ[166].id = 166;
        this.ⲆΔⵠ[167] = df(68, 68, 0, ΔⲆ[359], 3);
        this.ⲆΔⵠ[167].id = 167;
        this.ⲆΔⵠ[168] = df(68, 68, 0, ΔⲆ[382], 3);
        this.ⲆΔⵠ[168].id = 168;
        this.ⲆΔⵠ[169] = df(68, 68, 0, ΔⲆ[383], 3);
        this.ⲆΔⵠ[169].id = 169;
        this.ⲆΔⵠ[170] = df(68, 68, 0, ΔⲆ[384], 3);
        this.ⲆΔⵠ[170].id = 170;
        this.ⲆΔⵠ[2] = df(68, 68, 0, ΔⲆ[386], 3);
        this.ⲆΔⵠ[2].id = 2;
        this.ⲆΔⵠ[237] = df(68, 68, 0, ΔⲆ[1163], 3);
        this.ⲆΔⵠ[237].id = 237;
        this.ⲆΔⵠ[174] = df(68, 68, 0, ΔⲆ[394], 3);
        this.ⲆΔⵠ[174].id = 174;
        this.ⲆΔⵠ[222] = df(68, 68, 0, ΔⲆ[1036], 3);
        this.ⲆΔⵠ[222].id = 222;
        this.ⲆΔⵠ[231] = df(68, 68, 0, ΔⲆ[1038], 3);
        this.ⲆΔⵠ[231].id = 231;
        this.ⲆΔⵠ[232] = df(68, 68, 0, ΔⲆ[1040], 3);
        this.ⲆΔⵠ[232].id = 232;
        this.ⲆΔⵠ[234] = df(68, 68, 0, ΔⲆ[1157], 3);
        this.ⲆΔⵠ[234].id = 234;
        this.ⲆΔⵠ[10] = df(68, 68, 0, ΔⲆ[387], 3);
        this.ⲆΔⵠ[10].id = 10;
        this.ⲆΔⵠ[171] = df(68, 68, 0, ΔⲆ[388], 3);
        this.ⲆΔⵠ[171].id = 171;
        this.ⲆΔⵠ[172] = df(68, 68, 0, ΔⲆ[389], 3);
        this.ⲆΔⵠ[172].id = 172;
        this.ⲆΔⵠ[173] = df(68, 68, 0, ΔⲆ[390], 3);
        this.ⲆΔⵠ[173].id = 173;
        this.ⲆΔⵠ[11] = df(68, 68, 0, ΔⲆ[391], 3);
        this.ⲆΔⵠ[11].id = 11;
        this.ⲆΔⵠ[12] = df(68, 68, 0, ΔⲆ[403], 3);
        this.ⲆΔⵠ[12].id = 12;
        this.ⲆΔⵠ[13] = df(68, 68, 0, ΔⲆ[397], 3);
        this.ⲆΔⵠ[13].id = 13;
        this.ⲆΔⵠ[14] = df(68, 68, 0, ΔⲆ[400], 3);
        this.ⲆΔⵠ[14].id = 14;
        this.ⲆΔⵠ[15] = df(68, 68, 0, ΔⲆ[406], 3);
        this.ⲆΔⵠ[15].id = 15;
        this.ⲆΔⵠ[16] = df(68, 68, 0, ΔⲆ[875], 3);
        this.ⲆΔⵠ[16].id = 16;
        this.ⲆΔⵠ[119] = df(68, 68, 0, ΔⲆ[410], 3);
        this.ⲆΔⵠ[119].id = 119;
        this.ⲆΔⵠ[23] = df(68, 68, 0, ΔⲆ[422], 3);
        this.ⲆΔⵠ[23].id = 23;
        this.ⲆΔⵠ[24] = df(68, 68, 0, ΔⲆ[425], 3);
        this.ⲆΔⵠ[24].id = 24;
        this.ⲆΔⵠ[87] = df(68, 68, 0, ΔⲆ[1229], 3);
        this.ⲆΔⵠ[87].id = 87;
        this.ⲆΔⵠ[88] = df(68, 68, 0, ΔⲆ[1232], 3);
        this.ⲆΔⵠ[88].id = 88;
        this.ⲆΔⵠ[80] = df(68, 68, 0, ΔⲆ[1139], 3);
        this.ⲆΔⵠ[80].id = 80;
        this.ⲆΔⵠ[81] = df(68, 68, 0, ΔⲆ[1142], 3);
        this.ⲆΔⵠ[81].id = 81;
        this.ⲆΔⵠ[101] = df(68, 68, 0, ΔⲆ[1167], 3);
        this.ⲆΔⵠ[101].id = 101;
        this.ⲆΔⵠ[64] = df(68, 68, 0, ΔⲆ[571], 3);
        this.ⲆΔⵠ[64].id = 64;
        this.ⲆΔⵠ[71] = df(68, 68, 0, ΔⲆ[1240], 3);
        this.ⲆΔⵠ[71].id = 71;
        this.ⲆΔⵠ[102] = df(68, 68, 0, ΔⲆ[1170], 3);
        this.ⲆΔⵠ[102].id = 102;
        this.ⲆΔⵠ[65] = df(68, 68, 0, ΔⲆ[574], 3);
        this.ⲆΔⵠ[65].id = 65;
        this.ⲆΔⵠ[72] = df(68, 68, 0, ΔⲆ[1243], 3);
        this.ⲆΔⵠ[72].id = 72;
        this.ⲆΔⵠ[103] = df(68, 68, 0, ΔⲆ[1173], 3);
        this.ⲆΔⵠ[103].id = 103;
        this.ⲆΔⵠ[66] = df(68, 68, 0, ΔⲆ[577], 3);
        this.ⲆΔⵠ[66].id = 66;
        this.ⲆΔⵠ[73] = df(68, 68, 0, ΔⲆ[1246], 3);
        this.ⲆΔⵠ[73].id = 73;
        this.ⲆΔⵠ[104] = df(68, 68, 0, ΔⲆ[1176], 3);
        this.ⲆΔⵠ[104].id = 104;
        this.ⲆΔⵠ[67] = df(68, 68, 0, ΔⲆ[580], 3);
        this.ⲆΔⵠ[67].id = 67;
        this.ⲆΔⵠ[74] = df(68, 68, 0, ΔⲆ[1249], 3);
        this.ⲆΔⵠ[74].id = 74;
        this.ⲆΔⵠ[105] = df(68, 68, 0, ΔⲆ[1179], 3);
        this.ⲆΔⵠ[105].id = 105;
        this.ⲆΔⵠ[68] = df(68, 68, 0, ΔⲆ[583], 3);
        this.ⲆΔⵠ[68].id = 68;
        this.ⲆΔⵠ[75] = df(68, 68, 0, ΔⲆ[1252], 3);
        this.ⲆΔⵠ[75].id = 75;
        this.ⲆΔⵠ[106] = df(68, 68, 0, ΔⲆ[1182], 3);
        this.ⲆΔⵠ[106].id = 106;
        this.ⲆΔⵠ[69] = df(68, 68, 0, ΔⲆ[586], 3);
        this.ⲆΔⵠ[69].id = 69;
        this.ⲆΔⵠ[76] = df(68, 68, 0, ΔⲆ[1255], 3);
        this.ⲆΔⵠ[76].id = 76;
        this.ⲆΔⵠ[107] = df(68, 68, 0, ΔⲆ[1185], 3);
        this.ⲆΔⵠ[107].id = 107;
        this.ⲆΔⵠ[70] = df(68, 68, 0, ΔⲆ[589], 3);
        this.ⲆΔⵠ[70].id = 70;
        this.ⲆΔⵠ[94] = df(68, 68, 0, ΔⲆ[1258], 3);
        this.ⲆΔⵠ[94].id = 94;
        this.ⲆΔⵠ[95] = df(68, 68, 0, ΔⲆ[1261], 3);
        this.ⲆΔⵠ[95].id = 95;
        this.ⲆΔⵠ[96] = df(68, 68, 0, ΔⲆ[1264], 3);
        this.ⲆΔⵠ[96].id = 96;
        this.ⲆΔⵠ[97] = df(68, 68, 0, ΔⲆ[1267], 3);
        this.ⲆΔⵠ[97].id = 97;
        this.ⲆΔⵠ[98] = df(68, 68, 0, ΔⲆ[1270], 3);
        this.ⲆΔⵠ[98].id = 98;
        this.ⲆΔⵠ[99] = df(68, 68, 0, ΔⲆ[1273], 3);
        this.ⲆΔⵠ[99].id = 99;
        this.ⲆΔⵠ[58] = df(68, 68, 0, ΔⲆ[828], 3);
        this.ⲆΔⵠ[58].id = 58;
        this.ⲆΔⵠ[25] = df(68, 68, 0, ΔⲆ[431], 3);
        this.ⲆΔⵠ[25].id = 25;
        this.ⲆΔⵠ[26] = df(68, 68, 0, ΔⲆ[434], 3);
        this.ⲆΔⵠ[26].id = 26;
        this.ⲆΔⵠ[27] = df(68, 68, 0, ΔⲆ[437], 3);
        this.ⲆΔⵠ[27].id = 27;
        this.ⲆΔⵠ[28] = df(68, 68, 0, ΔⲆ[440], 3);
        this.ⲆΔⵠ[28].id = 28;
        this.ⲆΔⵠ[120] = df(68, 68, 0, ΔⲆ[443], 3);
        this.ⲆΔⵠ[120].id = 120;
        this.ⲆΔⵠ[29] = df(68, 68, 0, ΔⲆ[385], 3);
        this.ⲆΔⵠ[29].id = 29;
        this.ⲆΔⵠ[121] = df(68, 68, 0, ΔⲆ[446], 3);
        this.ⲆΔⵠ[121].id = 121;
        this.ⲆΔⵠ[30] = df(68, 68, 0, ΔⲆ[457], 3);
        this.ⲆΔⵠ[30].id = 30;
        this.ⲆΔⵠ[9] = df(68, 68, 0, ΔⲆ[862], 3);
        this.ⲆΔⵠ[9].id = 9;
        this.ⲆΔⵠ[31] = df(68, 68, 0, ΔⲆ[459], 3);
        this.ⲆΔⵠ[31].id = 31;
        this.ⲆΔⵠ[32] = df(68, 68, 0, ΔⲆ[1018], 3);
        this.ⲆΔⵠ[32].id = 32;
        this.ⲆΔⵠ[33] = df(68, 68, 0, ΔⲆ[474], 3);
        this.ⲆΔⵠ[33].id = 33;
        this.ⲆΔⵠ[35] = df(68, 68, 0, ΔⲆ[479], 3);
        this.ⲆΔⵠ[35].id = 35;
        this.ⲆΔⵠ[36] = df(68, 68, 0, ΔⲆ[482], 3);
        this.ⲆΔⵠ[36].id = 36;
        this.ⲆΔⵠ[37] = df(68, 68, 0, ΔⲆ[485], 3);
        this.ⲆΔⵠ[37].id = 37;
        this.ⲆΔⵠ[38] = df(68, 68, 0, ΔⲆ[488], 3);
        this.ⲆΔⵠ[38].id = 38;
        this.ⲆΔⵠ[39] = df(68, 68, 0, ΔⲆ[491], 3);
        this.ⲆΔⵠ[39].id = 39;
        this.ⲆΔⵠ[122] = df(68, 68, 0, ΔⲆ[494], 3);
        this.ⲆΔⵠ[122].id = 122;
        this.ⲆΔⵠ[123] = df(68, 68, 0, ΔⲆ[497], 3);
        this.ⲆΔⵠ[123].id = 123;
        this.ⲆΔⵠ[124] = df(68, 68, 0, ΔⲆ[501], 3);
        this.ⲆΔⵠ[124].id = 124;
        this.ⲆΔⵠ[40] = df(68, 68, 0, ΔⲆ[504], 3);
        this.ⲆΔⵠ[40].id = 40;
        this.ⲆΔⵠ[146] = df(68, 68, 0, ΔⲆ[506], 3);
        this.ⲆΔⵠ[146].id = 146;
        this.ⲆΔⵠ[240] = df(68, 68, 0, ΔⲆ[1234], 3);
        this.ⲆΔⵠ[240].id = 240;
        this.ⲆΔⵠ[147] = df(68, 68, 0, ΔⲆ[514], 3);
        this.ⲆΔⵠ[147].id = 147;
        this.ⲆΔⵠ[148] = df(68, 68, 0, ΔⲆ[520], 3);
        this.ⲆΔⵠ[148].id = 148;
        this.ⲆΔⵠ[149] = df(68, 68, 0, ΔⲆ[522], 3);
        this.ⲆΔⵠ[149].id = 149;
        this.ⲆΔⵠ[150] = df(68, 68, 0, ΔⲆ[524], 3);
        this.ⲆΔⵠ[150].id = 150;
        this.ⲆΔⵠ[151] = df(68, 68, 0, ΔⲆ[531], 3);
        this.ⲆΔⵠ[151].id = 151;
        this.ⲆΔⵠ[158] = df(68, 68, 0, ΔⲆ[534], 3);
        this.ⲆΔⵠ[158].id = 158;
        this.ⲆΔⵠ[159] = df(68, 68, 0, ΔⲆ[554], 3);
        this.ⲆΔⵠ[159].id = 159;
        this.ⲆΔⵠ[43] = df(68, 68, 0, ΔⲆ[543], 3);
        this.ⲆΔⵠ[43].id = 43;
        this.ⲆΔⵠ[45] = df(68, 68, 0, ΔⲆ[552], 3);
        this.ⲆΔⵠ[45].id = 45;
        this.ⲆΔⵠ[125] = df(68, 68, 0, ΔⲆ[606], 3);
        this.ⲆΔⵠ[125].id = 125;
        this.ⲆΔⵠ[221] = df(68, 68, 0, ΔⲆ[1237], 3);
        this.ⲆΔⵠ[221].id = 221;
        this.ⲆΔⵠ[223] = df(68, 68, 0, ΔⲆ[1029], 3);
        this.ⲆΔⵠ[223].id = 223;
        this.ⲆΔⵠ[224] = df(68, 68, 0, ΔⲆ[1032], 3);
        this.ⲆΔⵠ[224].id = 224;
        this.ⲆΔⵠ[230] = df(68, 68, 0, ΔⲆ[1118], 3);
        this.ⲆΔⵠ[230].id = 230;
        this.ⲆΔⵠ[89] = df(68, 68, 0, ΔⲆ[1047], 3);
        this.ⲆΔⵠ[89].id = 89;
        this.ⲆΔⵠ[225] = df(68, 68, 0, ΔⲆ[1050], 3);
        this.ⲆΔⵠ[225].id = 225;
        this.ⲆΔⵠ[227] = df(68, 68, 0, ΔⲆ[1081], 3);
        this.ⲆΔⵠ[227].id = 227;
        this.ⲆΔⵠ[239] = df(68, 68, 0, ΔⲆ[1225], 3);
        this.ⲆΔⵠ[239].id = 239;
        this.ⲆΔⵠ[228] = df(68, 68, 0, ΔⲆ[1096], 3);
        this.ⲆΔⵠ[228].id = 228;
        this.ⲆΔⵠ[229] = df(68, 68, 0, ΔⲆ[1111], 3);
        this.ⲆΔⵠ[229].id = 229;
        this.ⲆΔⵠ[226] = df(68, 68, 0, ΔⲆ[1190], 3);
        this.ⲆΔⵠ[226].id = 226;
        this.ⲆΔⵠ[126] = df(68, 68, 0, ΔⲆ[610], 3);
        this.ⲆΔⵠ[126].id = 126;
        this.ⲆΔⵠ[127] = df(68, 68, 0, ΔⲆ[615], 3);
        this.ⲆΔⵠ[127].id = 127;
        this.ⲆΔⵠ[128] = df(68, 68, 0, ΔⲆ[614], 3);
        this.ⲆΔⵠ[128].id = 128;
        this.ⲆΔⵠ[46] = df(68, 68, 0, ΔⲆ[617], 3);
        this.ⲆΔⵠ[46].id = 46;
        this.ⲆΔⵠ[50] = df(68, 68, 0, ΔⲆ[701], 3);
        this.ⲆΔⵠ[50].id = 50;
        this.ⲆΔⵠ[51] = df(68, 68, 0, ΔⲆ[703], 3);
        this.ⲆΔⵠ[51].id = 51;
        this.ⲆΔⵠ[52] = df(68, 68, 0, ΔⲆ[707], 3);
        this.ⲆΔⵠ[52].id = 52;
        this.ⲆΔⵠ[55] = df(68, 68, 0, ΔⲆ[710], 3);
        this.ⲆΔⵠ[55].id = 55;
        this.ⲆΔⵠ[129] = df(68, 68, 0, ΔⲆ[625], 3);
        this.ⲆΔⵠ[129].id = 129;
        this.ⲆΔⵠ[130] = df(68, 68, 0, ΔⲆ[628], 3);
        this.ⲆΔⵠ[130].id = 130;
        this.ⲆΔⵠ[131] = df(68, 68, 0, ΔⲆ[630], 3);
        this.ⲆΔⵠ[131].id = 131;
        this.ⲆΔⵠ[132] = df(68, 68, 0, ΔⲆ[633], 3);
        this.ⲆΔⵠ[132].id = 132;
        this.ⲆΔⵠ[133] = df(68, 68, 0, ΔⲆ[636], 3);
        this.ⲆΔⵠ[133].id = 133;
        this.ⲆΔⵠ[134] = df(68, 68, 0, ΔⲆ[640], 3);
        this.ⲆΔⵠ[134].id = 134;
        this.ⲆΔⵠ[135] = df(68, 68, 0, ΔⲆ[645], 3);
        this.ⲆΔⵠ[135].id = 135;
        this.ⲆΔⵠ[47] = df(68, 68, 0, ΔⲆ[648], 3);
        this.ⲆΔⵠ[47].id = 47;
        this.ⲆΔⵠ[48] = df(68, 68, 0, ΔⲆ[651], 3);
        this.ⲆΔⵠ[48].id = 48;
        this.ⲆΔⵠ[49] = df(68, 68, 0, ΔⲆ[653], 3);
        this.ⲆΔⵠ[49].id = 49;
        this.ⲆΔⵠ[136] = df(68, 68, 0, ΔⲆ[661], 3);
        this.ⲆΔⵠ[136].id = 136;
        this.ⲆΔⵠ[143] = df(68, 68, 0, ΔⲆ[689], 3);
        this.ⲆΔⵠ[143].id = 143;
        this.ⲆΔⵠ[137] = df(68, 68, 0, ΔⲆ[663], 3);
        this.ⲆΔⵠ[137].id = 137;
        this.ⲆΔⵠ[138] = df(68, 68, 0, ΔⲆ[665], 3);
        this.ⲆΔⵠ[138].id = 138;
        this.ⲆΔⵠ[139] = df(68, 68, 0, ΔⲆ[675], 3);
        this.ⲆΔⵠ[139].id = 139;
        this.ⲆΔⵠ[140] = df(68, 68, 0, ΔⲆ[682], 3);
        this.ⲆΔⵠ[140].id = 140;
        this.ⲆΔⵠ[141] = df(68, 68, 0, ΔⲆ[683], 3);
        this.ⲆΔⵠ[141].id = 141;
        this.ⲆΔⵠ[142] = df(68, 68, 0, ΔⲆ[686], 3);
        this.ⲆΔⵠ[142].id = 142;
        this.ⲆΔⵠ[144] = df(68, 68, 0, ΔⲆ[719], 3);
        this.ⲆΔⵠ[144].id = 144;
        this.ⲆΔⵠ[145] = df(68, 68, 0, ΔⲆ[731], 3);
        this.ⲆΔⵠ[145].id = 145;
        this.ⲆΔⵠ[59] = df(68, 68, 0, ΔⲆ[733], 3);
        this.ⲆΔⵠ[59].id = 59;
        this.ⲆΔⵠ[62] = df(68, 68, 0, ΔⲆ[565], 3);
        this.ⲆΔⵠ[62].id = 62;
        this.ⲆΔⵠ[185] = df(68, 68, 0, ΔⲆ[590], 3);
        this.ⲆΔⵠ[185].id = 185;
        this.ⲆΔⵠ[184] = df(68, 68, 0, ΔⲆ[752], 3);
        this.ⲆΔⵠ[184].id = 184;
        this.ⲆΔⵠ[187] = df(68, 68, 0, ΔⲆ[591], 3);
        this.ⲆΔⵠ[187].id = 187;
        this.ⲆΔⵠ[186] = df(68, 68, 0, ΔⲆ[754], 3);
        this.ⲆΔⵠ[186].id = 186;
        this.ⲆΔⵠ[77] = df(68, 68, 0, ΔⲆ[757], 3);
        this.ⲆΔⵠ[77].id = 77;
        this.ⲆΔⵠ[175] = df(68, 68, 0, ΔⲆ[759], 3);
        this.ⲆΔⵠ[175].id = 175;
        this.ⲆΔⵠ[176] = df(68, 68, 0, ΔⲆ[763], 3);
        this.ⲆΔⵠ[176].id = 176;
        this.ⲆΔⵠ[78] = df(68, 68, 0, ΔⲆ[761], 3);
        this.ⲆΔⵠ[78].id = 78;
        this.ⲆΔⵠ[177] = df(68, 68, 0, ΔⲆ[766], 3);
        this.ⲆΔⵠ[177].id = 177;
        this.ⲆΔⵠ[79] = df(68, 68, 0, ΔⲆ[765], 3);
        this.ⲆΔⵠ[79].id = 79;
        this.ⲆΔⵠ[83] = df(68, 68, 0, ΔⲆ[769], 3);
        this.ⲆΔⵠ[83].id = 83;
        this.ⲆΔⵠ[84] = df(68, 68, 0, ΔⲆ[773], 3);
        this.ⲆΔⵠ[84].id = 84;
        this.ⲆΔⵠ[178] = df(68, 68, 0, ΔⲆ[774], 3);
        this.ⲆΔⵠ[178].id = 178;
        this.ⲆΔⵠ[179] = df(68, 68, 0, ΔⲆ[775], 3);
        this.ⲆΔⵠ[179].id = 179;
        this.ⲆΔⵠ[86] = df(68, 68, 0, ΔⲆ[778], 3);
        this.ⲆΔⵠ[86].id = 86;
        this.ⲆΔⵠ[85] = df(68, 68, 0, ΔⲆ[781], 3);
        this.ⲆΔⵠ[85].id = 85;
        this.ⲆΔⵠ[180] = df(68, 68, 0, ΔⲆ[786], 3);
        this.ⲆΔⵠ[180].id = 180;
        this.ⲆΔⵠ[181] = df(68, 68, 0, ΔⲆ[787], 3);
        this.ⲆΔⵠ[181].id = 181;
        this.ⲆΔⵠ[182] = df(68, 68, 0, ΔⲆ[790], 3);
        this.ⲆΔⵠ[182].id = 182;
        this.ⲆΔⵠ[183] = df(68, 68, 0, ΔⲆ[801], 3);
        this.ⲆΔⵠ[183].id = 183;
        this.ⲆΔⵠ[188] = df(68, 68, 0, ΔⲆ[810], 3);
        this.ⲆΔⵠ[188].id = 188;
        this.ⲆΔⵠ[189] = df(68, 68, 0, ΔⲆ[815], 3);
        this.ⲆΔⵠ[189].id = 189;
        this.ⲆΔⵠ[190] = df(68, 68, 0, ΔⲆ[844], 3);
        this.ⲆΔⵠ[190].id = 190;
        this.ⲆΔⵠ[191] = df(68, 68, 0, ΔⲆ[836], 3);
        this.ⲆΔⵠ[191].id = 191;
        this.ⲆΔⵠ[192] = df(68, 68, 0, ΔⲆ[841], 3);
        this.ⲆΔⵠ[192].id = 192;
        this.ⲆΔⵠ[193] = df(68, 68, 0, ΔⲆ[847], 3);
        this.ⲆΔⵠ[193].id = 193;
        this.ⲆΔⵠ[194] = df(68, 68, 0, ΔⲆ[851], 3);
        this.ⲆΔⵠ[194].id = 194;
        this.ⲆΔⵠ[206] = df(68, 68, 0, ΔⲆ[961], 3);
        this.ⲆΔⵠ[206].id = 206;
        this.ⲆΔⵠ[207] = df(68, 68, 0, ΔⲆ[974], 3);
        this.ⲆΔⵠ[207].id = 207;
        this.ⲆΔⵠ[204] = df(68, 68, 0, ΔⲆ[951], 3);
        this.ⲆΔⵠ[204].id = 204;
        this.ⲆΔⵠ[205] = df(68, 68, 0, ΔⲆ[956], 3);
        this.ⲆΔⵠ[205].id = 205;
        this.ⲆΔⵠ[208] = df(68, 68, 0, ΔⲆ[968], 3);
        this.ⲆΔⵠ[208].id = 208;
        this.ⲆΔⵠ[209] = df(68, 68, 0, ΔⲆ[973], 3);
        this.ⲆΔⵠ[209].id = 209;
        this.ⲆΔⵠ[210] = df(68, 68, 0, ΔⲆ[983], 3);
        this.ⲆΔⵠ[210].id = 210;
        this.ⲆΔⵠ[211] = df(68, 68, 0, ΔⲆ[988], 3);
        this.ⲆΔⵠ[211].id = 211;
        this.ⲆΔⵠ[41] = df(68, 68, 0, ΔⲆ[881], 3);
        this.ⲆΔⵠ[41].id = 41;
        this.ⲆΔⵠ[42] = df(68, 68, 0, ΔⲆ[883], 3);
        this.ⲆΔⵠ[42].id = 42;
        this.ⲆΔⵠ[12] = df(68, 68, 0, ΔⲆ[403], 3);
        this.ⲆΔⵠ[12].id = 12;
        this.ⲆΔⵠ[16] = df(68, 68, 0, ΔⲆ[875], 3);
        this.ⲆΔⵠ[16].id = 16;
        this.ⲆΔⵠ[196] = df(68, 68, 0, ΔⲆ[898], 3);
        this.ⲆΔⵠ[196].id = 196;
        this.ⲆΔⵠ[18] = df(68, 68, 0, ΔⲆ[899], 3);
        this.ⲆΔⵠ[18].id = 18;
        this.ⲆΔⵠ[197] = df(68, 68, 0, ΔⲆ[906], 3);
        this.ⲆΔⵠ[197].id = 197;
        this.ⲆΔⵠ[198] = df(68, 68, 0, ΔⲆ[908], 3);
        this.ⲆΔⵠ[198].id = 198;
        this.ⲆΔⵠ[61] = df(68, 68, 0, ΔⲆ[911], 3);
        this.ⲆΔⵠ[61].id = 61;
        this.ⲆΔⵠ[201] = df(68, 68, 0, ΔⲆ[871], 3);
        this.ⲆΔⵠ[201].id = 201;
        this.ⲆΔⵠ[199] = df(68, 68, 0, ΔⲆ[863], 3);
        this.ⲆΔⵠ[199].id = 199;
        this.ⲆΔⵠ[200] = df(68, 68, 0, ΔⲆ[868], 3);
        this.ⲆΔⵠ[200].id = 200;
        this.ᐃⲆᐃᐃⲆ = [];
        for (m = 0; m < 250; m++) {
            this.ᐃⲆᐃᐃⲆ[m] = df(0, 0, 0, ΔⲆ[366]);
        }
        this.ⲆΔᐃ = [];
        this.ⲆΔᐃ[0] = df(60, 60, 0, ΔⲆ[261], 3);
        this.ⲆΔᐃ[0].id = 0;
        this.ⲆΔᐃ[1] = df(60, 60, 0, ΔⲆ[312], 3);
        this.ⲆΔᐃ[1].id = 1;
        this.ⲆΔᐃ[108] = df(60, 60, 0, ΔⲆ[315], 3);
        this.ⲆΔᐃ[108].id = 108;
        this.ⲆΔᐃ[108].info.ᐃⲆ[2] = this.ⲆΔᐃ[108].info.ᐃⲆ[0];
        this.ⲆΔᐃ[109] = df(60, 60, 0, ΔⲆ[316], 3);
        this.ⲆΔᐃ[109].id = 109;
        this.ⲆΔᐃ[109].info.ᐃⲆ[2] = this.ⲆΔᐃ[109].info.ᐃⲆ[0];
        this.ⲆΔᐃ[110] = df(60, 60, 0, ΔⲆ[277], 3);
        this.ⲆΔᐃ[110].id = 110;
        this.ⲆΔᐃ[233] = df(60, 60, 0, ΔⲆ[1154], 3);
        this.ⲆΔᐃ[233].id = 233;
        this.ⲆΔᐃ[111] = df(60, 60, 0, ΔⲆ[297], 3);
        this.ⲆΔᐃ[111].id = 111;
        this.ⲆΔᐃ[111].info.ᐃⲆ[2] = this.ⲆΔᐃ[111].info.ᐃⲆ[0];
        this.ⲆΔᐃ[112] = df(60, 60, 0, ΔⲆ[298], 3);
        this.ⲆΔᐃ[112].id = 112;
        this.ⲆΔᐃ[112].info.ᐃⲆ[2] = this.ⲆΔᐃ[112].info.ᐃⲆ[0];
        this.ⲆΔᐃ[3] = df(60, 60, 0, ΔⲆ[258], 3);
        this.ⲆΔᐃ[3].id = 3;
        this.ⲆΔᐃ[4] = df(60, 60, 0, ΔⲆ[296], 3);
        this.ⲆΔᐃ[4].id = 4;
        this.ⲆΔᐃ[5] = df(60, 60, 0, ΔⲆ[292], 3);
        this.ⲆΔᐃ[5].id = 5;
        this.ⲆΔᐃ[57] = df(60, 60, 0, ΔⲆ[829], 3);
        this.ⲆΔᐃ[57].id = 57;
        this.ⲆΔᐃ[6] = df(60, 60, 0, ΔⲆ[293], 3);
        this.ⲆΔᐃ[6].id = 6;
        this.ⲆΔᐃ[113] = df(60, 60, 0, ΔⲆ[309], 3);
        this.ⲆΔᐃ[113].id = 113;
        this.ⲆΔᐃ[114] = df(60, 60, 0, ΔⲆ[310], 3);
        this.ⲆΔᐃ[114].id = 114;
        this.ⲆΔᐃ[115] = df(60, 60, 0, ΔⲆ[311], 3);
        this.ⲆΔᐃ[115].id = 115;
        this.ⲆΔᐃ[162] = df(60, 60, 0, ΔⲆ[317], 3);
        this.ⲆΔᐃ[162].id = 162;
        this.ⲆΔᐃ[160] = df(60, 60, 0, ΔⲆ[319], 3);
        this.ⲆΔᐃ[160].id = 160;
        this.ⲆΔᐃ[8] = df(60, 60, 0, ΔⲆ[313], 3);
        this.ⲆΔᐃ[8].id = 8;
        this.ⲆΔᐃ[117] = df(60, 60, 0, ΔⲆ[323], 3);
        this.ⲆΔᐃ[117].id = 117;
        this.ⲆΔᐃ[116] = df(60, 60, 0, ΔⲆ[300], 3);
        this.ⲆΔᐃ[116].id = 116;
        this.ⲆΔᐃ[118] = df(60, 60, 0, ΔⲆ[328], 3);
        this.ⲆΔᐃ[118].id = 118;
        this.ⲆΔᐃ[195] = df(60, 60, 0, ΔⲆ[303], 3);
        this.ⲆΔᐃ[195].id = 195;
        this.ⲆΔᐃ[161] = df(60, 60, 0, ΔⲆ[305], 3);
        this.ⲆΔᐃ[161].id = 161;
        this.ⲆΔᐃ[161].info.ᐃⲆ[2] = this.ⲆΔᐃ[161].info.ᐃⲆ[0];
        this.ⲆΔᐃ[163] = df(60, 60, 0, ΔⲆ[329], 3);
        this.ⲆΔᐃ[163].id = 163;
        this.ⲆΔᐃ[164] = df(60, 60, 0, ΔⲆ[330], 3);
        this.ⲆΔᐃ[164].id = 164;
        this.ⲆΔᐃ[165] = df(60, 60, 0, ΔⲆ[331], 3);
        this.ⲆΔᐃ[165].id = 165;
        this.ⲆΔᐃ[166] = df(60, 60, 0, ΔⲆ[335], 3);
        this.ⲆΔᐃ[166].id = 166;
        this.ⲆΔᐃ[167] = df(60, 60, 0, ΔⲆ[337], 3);
        this.ⲆΔᐃ[167].id = 167;
        this.ⲆΔᐃ[168] = df(60, 60, 0, ΔⲆ[361], 3);
        this.ⲆΔᐃ[168].id = 168;
        this.ⲆΔᐃ[169] = df(60, 60, 0, ΔⲆ[362], 3);
        this.ⲆΔᐃ[169].id = 169;
        this.ⲆΔᐃ[170] = df(60, 60, 0, ΔⲆ[364], 3);
        this.ⲆΔᐃ[170].id = 170;
        this.ⲆΔᐃ[29] = df(60, 60, 0, ΔⲆ[392], 3);
        this.ⲆΔᐃ[29].id = 29;
        this.ⲆΔᐃ[10] = df(60, 60, 0, ΔⲆ[369], 3);
        this.ⲆΔᐃ[10].id = 10;
        this.ⲆΔᐃ[171] = df(60, 60, 0, ΔⲆ[372], 3);
        this.ⲆΔᐃ[171].id = 171;
        this.ⲆΔᐃ[172] = df(60, 60, 0, ΔⲆ[375], 3);
        this.ⲆΔᐃ[172].id = 172;
        this.ⲆΔᐃ[173] = df(60, 60, 0, ΔⲆ[378], 3);
        this.ⲆΔᐃ[173].id = 173;
        this.ⲆΔᐃ[2] = df(60, 60, 0, ΔⲆ[368], 3);
        this.ⲆΔᐃ[2].id = 2;
        this.ⲆΔᐃ[2].info.ᐃⲆ[2] = this.ⲆΔᐃ[2].info.ᐃⲆ[0];
        this.ⲆΔᐃ[237] = df(60, 60, 0, ΔⲆ[1162], 3);
        this.ⲆΔᐃ[237].id = 237;
        this.ⲆΔᐃ[237].info.ᐃⲆ[2] = this.ⲆΔᐃ[237].info.ᐃⲆ[0];
        this.ⲆΔᐃ[174] = df(60, 60, 0, ΔⲆ[393], 3);
        this.ⲆΔᐃ[174].id = 174;
        this.ⲆΔᐃ[174].info.ᐃⲆ[2] = this.ⲆΔᐃ[174].info.ᐃⲆ[0];
        this.ⲆΔᐃ[222] = df(60, 60, 0, ΔⲆ[1035], 3);
        this.ⲆΔᐃ[222].id = 222;
        this.ⲆΔᐃ[231] = df(60, 60, 0, ΔⲆ[1037], 3);
        this.ⲆΔᐃ[231].id = 231;
        this.ⲆΔᐃ[232] = df(60, 60, 0, ΔⲆ[1039], 3);
        this.ⲆΔᐃ[232].id = 232;
        this.ⲆΔᐃ[234] = df(60, 60, 0, ΔⲆ[1156], 3);
        this.ⲆΔᐃ[234].id = 234;
        this.ⲆΔᐃ[10] = df(60, 60, 0, ΔⲆ[369], 3);
        this.ⲆΔᐃ[10].id = 10;
        this.ⲆΔᐃ[11] = df(60, 60, 0, ΔⲆ[381], 3);
        this.ⲆΔᐃ[11].id = 11;
        this.ⲆΔᐃ[12] = df(60, 60, 0, ΔⲆ[401], 3);
        this.ⲆΔᐃ[12].id = 12;
        this.ⲆΔᐃ[13] = df(60, 60, 0, ΔⲆ[395], 3);
        this.ⲆΔᐃ[13].id = 13;
        this.ⲆΔᐃ[14] = df(60, 60, 0, ΔⲆ[398], 3);
        this.ⲆΔᐃ[14].id = 14;
        this.ⲆΔᐃ[15] = df(60, 60, 0, ΔⲆ[404], 3);
        this.ⲆΔᐃ[15].id = 15;
        this.ⲆΔᐃ[16] = df(60, 60, 0, ΔⲆ[874], 3);
        this.ⲆΔᐃ[16].id = 16;
        this.ⲆΔᐃ[119] = df(60, 60, 0, ΔⲆ[408], 3);
        this.ⲆΔᐃ[119].id = 119;
        this.ⲆΔᐃ[23] = df(60, 60, 0, ΔⲆ[420], 3);
        this.ⲆΔᐃ[23].id = 23;
        this.ⲆΔᐃ[24] = df(60, 60, 0, ΔⲆ[423], 3);
        this.ⲆΔᐃ[24].id = 24;
        this.ⲆΔᐃ[87] = df(60, 60, 0, ΔⲆ[1227], 3);
        this.ⲆΔᐃ[87].id = 87;
        this.ⲆΔᐃ[88] = df(60, 60, 0, ΔⲆ[1230], 3);
        this.ⲆΔᐃ[88].id = 88;
        this.ⲆΔᐃ[80] = df(60, 60, 0, ΔⲆ[1137], 3);
        this.ⲆΔᐃ[80].id = 80;
        this.ⲆΔᐃ[81] = df(60, 60, 0, ΔⲆ[1140], 3);
        this.ⲆΔᐃ[81].id = 81;
        this.ⲆΔᐃ[64] = df(60, 60, 0, ΔⲆ[569], 3);
        this.ⲆΔᐃ[64].id = 64;
        this.ⲆΔᐃ[101] = df(60, 60, 0, ΔⲆ[1166], 3);
        this.ⲆΔᐃ[101].id = 101;
        this.ⲆΔᐃ[71] = df(60, 60, 0, ΔⲆ[1239], 3);
        this.ⲆΔᐃ[71].id = 71;
        this.ⲆΔᐃ[65] = df(60, 60, 0, ΔⲆ[572], 3);
        this.ⲆΔᐃ[65].id = 65;
        this.ⲆΔᐃ[102] = df(60, 60, 0, ΔⲆ[1169], 3);
        this.ⲆΔᐃ[102].id = 102;
        this.ⲆΔᐃ[72] = df(60, 60, 0, ΔⲆ[1242], 3);
        this.ⲆΔᐃ[72].id = 72;
        this.ⲆΔᐃ[66] = df(60, 60, 0, ΔⲆ[575], 3);
        this.ⲆΔᐃ[66].id = 66;
        this.ⲆΔᐃ[103] = df(60, 60, 0, ΔⲆ[1172], 3);
        this.ⲆΔᐃ[103].id = 103;
        this.ⲆΔᐃ[73] = df(60, 60, 0, ΔⲆ[1245], 3);
        this.ⲆΔᐃ[73].id = 73;
        this.ⲆΔᐃ[67] = df(60, 60, 0, ΔⲆ[578], 3);
        this.ⲆΔᐃ[67].id = 67;
        this.ⲆΔᐃ[104] = df(60, 60, 0, ΔⲆ[1175], 3);
        this.ⲆΔᐃ[104].id = 104;
        this.ⲆΔᐃ[74] = df(60, 60, 0, ΔⲆ[1248], 3);
        this.ⲆΔᐃ[74].id = 74;
        this.ⲆΔᐃ[68] = df(60, 60, 0, ΔⲆ[581], 3);
        this.ⲆΔᐃ[68].id = 68;
        this.ⲆΔᐃ[105] = df(60, 60, 0, ΔⲆ[1178], 3);
        this.ⲆΔᐃ[105].id = 105;
        this.ⲆΔᐃ[75] = df(60, 60, 0, ΔⲆ[1251], 3);
        this.ⲆΔᐃ[75].id = 75;
        this.ⲆΔᐃ[69] = df(60, 60, 0, ΔⲆ[584], 3);
        this.ⲆΔᐃ[69].id = 69;
        this.ⲆΔᐃ[106] = df(60, 60, 0, ΔⲆ[1181], 3);
        this.ⲆΔᐃ[106].id = 106;
        this.ⲆΔᐃ[76] = df(60, 60, 0, ΔⲆ[1254], 3);
        this.ⲆΔᐃ[76].id = 76;
        this.ⲆΔᐃ[70] = df(60, 60, 0, ΔⲆ[587], 3);
        this.ⲆΔᐃ[70].id = 70;
        this.ⲆΔᐃ[107] = df(60, 60, 0, ΔⲆ[1184], 3);
        this.ⲆΔᐃ[107].id = 107;
        this.ⲆΔᐃ[94] = df(60, 60, 0, ΔⲆ[1257], 3);
        this.ⲆΔᐃ[94].id = 94;
        this.ⲆΔᐃ[95] = df(60, 60, 0, ΔⲆ[1260], 3);
        this.ⲆΔᐃ[95].id = 95;
        this.ⲆΔᐃ[96] = df(60, 60, 0, ΔⲆ[1263], 3);
        this.ⲆΔᐃ[96].id = 96;
        this.ⲆΔᐃ[97] = df(60, 60, 0, ΔⲆ[1266], 3);
        this.ⲆΔᐃ[97].id = 97;
        this.ⲆΔᐃ[98] = df(60, 60, 0, ΔⲆ[1269], 3);
        this.ⲆΔᐃ[98].id = 98;
        this.ⲆΔᐃ[99] = df(60, 60, 0, ΔⲆ[1272], 3);
        this.ⲆΔᐃ[99].id = 99;
        this.ⲆΔᐃ[58] = df(60, 60, 0, ΔⲆ[826], 3);
        this.ⲆΔᐃ[58].id = 58;
        this.ⲆΔᐃ[25] = df(60, 60, 0, ΔⲆ[429], 3);
        this.ⲆΔᐃ[25].id = 25;
        this.ⲆΔᐃ[26] = df(60, 60, 0, ΔⲆ[432], 3);
        this.ⲆΔᐃ[26].id = 26;
        this.ⲆΔᐃ[27] = df(60, 60, 0, ΔⲆ[435], 3);
        this.ⲆΔᐃ[27].id = 27;
        this.ⲆΔᐃ[28] = df(60, 60, 0, ΔⲆ[438], 3);
        this.ⲆΔᐃ[28].id = 28;
        this.ⲆΔᐃ[120] = df(60, 60, 0, ΔⲆ[441], 3);
        this.ⲆΔᐃ[120].id = 120;
        this.ⲆΔᐃ[120].info.ᐃⲆ[2] = this.ⲆΔᐃ[120].info.ᐃⲆ[0];
        this.ⲆΔᐃ[29] = df(60, 60, 0, ΔⲆ[392], 3);
        this.ⲆΔᐃ[29].id = 29;
        this.ⲆΔᐃ[121] = df(60, 60, 0, ΔⲆ[418], 3);
        this.ⲆΔᐃ[121].id = 121;
        this.ⲆΔᐃ[121].info.ᐃⲆ[2] = this.ⲆΔᐃ[121].info.ᐃⲆ[0];
        this.ⲆΔᐃ[30] = df(60, 60, 0, ΔⲆ[455], 3);
        this.ⲆΔᐃ[30].id = 30;
        this.ⲆΔᐃ[9] = df(60, 60, 0, ΔⲆ[860], 3);
        this.ⲆΔᐃ[9].id = 9;
        this.ⲆΔᐃ[31] = df(60, 60, 0, ΔⲆ[458], 3);
        this.ⲆΔᐃ[31].id = 31;
        this.ⲆΔᐃ[32] = df(60, 60, 0, ΔⲆ[1017], 3);
        this.ⲆΔᐃ[32].id = 32;
        this.ⲆΔᐃ[33] = df(60, 60, 0, ΔⲆ[472], 3);
        this.ⲆΔᐃ[33].id = 33;
        this.ⲆΔᐃ[35] = df(60, 60, 0, ΔⲆ[477], 3);
        this.ⲆΔᐃ[35].id = 35;
        this.ⲆΔᐃ[36] = df(60, 60, 0, ΔⲆ[480], 3);
        this.ⲆΔᐃ[36].id = 36;
        this.ⲆΔᐃ[37] = df(60, 60, 0, ΔⲆ[483], 3);
        this.ⲆΔᐃ[37].id = 37;
        this.ⲆΔᐃ[38] = df(60, 60, 0, ΔⲆ[486], 3);
        this.ⲆΔᐃ[38].id = 38;
        this.ⲆΔᐃ[39] = df(60, 60, 0, ΔⲆ[489], 3);
        this.ⲆΔᐃ[39].id = 39;
        this.ⲆΔᐃ[122] = df(60, 60, 0, ΔⲆ[492], 3);
        this.ⲆΔᐃ[122].id = 122;
        this.ⲆΔᐃ[123] = df(60, 60, 0, ΔⲆ[495], 3);
        this.ⲆΔᐃ[123].id = 123;
        this.ⲆΔᐃ[124] = df(60, 60, 0, ΔⲆ[499], 3);
        this.ⲆΔᐃ[124].id = 124;
        this.ⲆΔᐃ[40] = df(60, 60, 0, ΔⲆ[502], 3);
        this.ⲆΔᐃ[40].id = 40;
        this.ⲆΔᐃ[146] = df(60, 60, 0, ΔⲆ[505], 3);
        this.ⲆΔᐃ[146].id = 146;
        this.ⲆΔᐃ[146].info.ᐃⲆ[2] = this.ⲆΔᐃ[146].info.ᐃⲆ[0];
        this.ⲆΔᐃ[240] = df(60, 60, 0, ΔⲆ[1233], 3);
        this.ⲆΔᐃ[240].id = 240;
        this.ⲆΔᐃ[240].info.ᐃⲆ[2] = this.ⲆΔᐃ[240].info.ᐃⲆ[0];
        this.ⲆΔᐃ[147] = df(60, 60, 0, ΔⲆ[513], 3);
        this.ⲆΔᐃ[147].id = 147;
        this.ⲆΔᐃ[147].info.ᐃⲆ[2] = this.ⲆΔᐃ[147].info.ᐃⲆ[0];
        this.ⲆΔᐃ[148] = df(60, 60, 0, ΔⲆ[518], 3);
        this.ⲆΔᐃ[148].id = 148;
        this.ⲆΔᐃ[148].info.ᐃⲆ[2] = this.ⲆΔᐃ[148].info.ᐃⲆ[0];
        this.ⲆΔᐃ[149] = df(60, 60, 0, ΔⲆ[521], 3);
        this.ⲆΔᐃ[149].id = 149;
        this.ⲆΔᐃ[150] = df(60, 60, 0, ΔⲆ[523], 3);
        this.ⲆΔᐃ[150].id = 150;
        this.ⲆΔᐃ[151] = df(60, 60, 0, ΔⲆ[529], 3);
        this.ⲆΔᐃ[151].id = 151;
        this.ⲆΔᐃ[158] = df(60, 60, 0, ΔⲆ[532], 3);
        this.ⲆΔᐃ[158].id = 158;
        this.ⲆΔᐃ[159] = df(60, 60, 0, ΔⲆ[553], 3);
        this.ⲆΔᐃ[159].id = 159;
        this.ⲆΔᐃ[43] = df(60, 60, 0, ΔⲆ[541], 3);
        this.ⲆΔᐃ[43].id = 43;
        this.ⲆΔᐃ[45] = df(60, 60, 0, ΔⲆ[550], 3);
        this.ⲆΔᐃ[45].id = 45;
        this.ⲆΔᐃ[125] = df(60, 60, 0, ΔⲆ[605], 3);
        this.ⲆΔᐃ[125].id = 125;
        this.ⲆΔᐃ[221] = df(60, 60, 0, ΔⲆ[1236], 3);
        this.ⲆΔᐃ[221].id = 221;
        this.ⲆΔᐃ[223] = df(60, 60, 0, ΔⲆ[1028], 3);
        this.ⲆΔᐃ[223].id = 223;
        this.ⲆΔᐃ[224] = df(60, 60, 0, ΔⲆ[1031], 3);
        this.ⲆΔᐃ[224].id = 224;
        this.ⲆΔᐃ[230] = df(60, 60, 0, ΔⲆ[1117], 3);
        this.ⲆΔᐃ[230].id = 230;
        this.ⲆΔᐃ[89] = df(60, 60, 0, ΔⲆ[1046], 3);
        this.ⲆΔᐃ[89].id = 89;
        this.ⲆΔᐃ[225] = df(60, 60, 0, ΔⲆ[1049], 3);
        this.ⲆΔᐃ[225].id = 225;
        this.ⲆΔᐃ[226] = df(60, 60, 0, ΔⲆ[1189], 3);
        this.ⲆΔᐃ[226].id = 226;
        this.ⲆΔᐃ[227] = df(60, 60, 0, ΔⲆ[1080], 3);
        this.ⲆΔᐃ[227].id = 227;
        this.ⲆΔᐃ[239] = df(60, 60, 0, ΔⲆ[1224], 3);
        this.ⲆΔᐃ[239].id = 239;
        this.ⲆΔᐃ[228] = df(60, 60, 0, ΔⲆ[1095], 3);
        this.ⲆΔᐃ[228].id = 228;
        this.ⲆΔᐃ[229] = df(60, 60, 0, ΔⲆ[1110], 3);
        this.ⲆΔᐃ[229].id = 229;
        this.ⲆΔᐃ[126] = df(60, 60, 0, ΔⲆ[609], 3);
        this.ⲆΔᐃ[126].id = 126;
        this.ⲆΔᐃ[126].info.ᐃⲆ[2] = this.ⲆΔᐃ[126].info.ᐃⲆ[0];
        this.ⲆΔᐃ[127] = df(60, 60, 0, ΔⲆ[613], 3);
        this.ⲆΔᐃ[127].id = 127;
        this.ⲆΔᐃ[128] = df(60, 60, 0, ΔⲆ[612], 3);
        this.ⲆΔᐃ[128].id = 128;
        this.ⲆΔᐃ[46] = df(60, 60, 0, ΔⲆ[616], 3);
        this.ⲆΔᐃ[46].id = 46;
        this.ⲆΔᐃ[50] = df(60, 60, 0, ΔⲆ[699], 3);
        this.ⲆΔᐃ[50].id = 50;
        this.ⲆΔᐃ[51] = df(60, 60, 0, ΔⲆ[702], 3);
        this.ⲆΔᐃ[51].id = 51;
        this.ⲆΔᐃ[52] = df(60, 60, 0, ΔⲆ[705], 3);
        this.ⲆΔᐃ[52].id = 52;
        this.ⲆΔᐃ[55] = df(60, 60, 0, ΔⲆ[709], 3);
        this.ⲆΔᐃ[55].id = 55;
        this.ⲆΔᐃ[129] = df(60, 60, 0, ΔⲆ[624], 3);
        this.ⲆΔᐃ[129].id = 129;
        this.ⲆΔᐃ[129].info.ᐃⲆ[2] = this.ⲆΔᐃ[129].info.ᐃⲆ[0];
        this.ⲆΔᐃ[130] = df(60, 60, 0, ΔⲆ[626], 3);
        this.ⲆΔᐃ[130].id = 130;
        this.ⲆΔᐃ[131] = df(60, 60, 0, ΔⲆ[629], 3);
        this.ⲆΔᐃ[131].id = 131;
        this.ⲆΔᐃ[131].info.ᐃⲆ[2] = this.ⲆΔᐃ[131].info.ᐃⲆ[0];
        this.ⲆΔᐃ[132] = df(60, 60, 0, ΔⲆ[631], 3);
        this.ⲆΔᐃ[132].id = 132;
        this.ⲆΔᐃ[133] = df(60, 60, 0, ΔⲆ[634], 3);
        this.ⲆΔᐃ[133].id = 133;
        this.ⲆΔᐃ[134] = df(60, 60, 0, ΔⲆ[639], 3);
        this.ⲆΔᐃ[134].id = 134;
        this.ⲆΔᐃ[134].info.ᐃⲆ[2] = this.ⲆΔᐃ[134].info.ᐃⲆ[0];
        this.ⲆΔᐃ[135] = df(60, 60, 0, ΔⲆ[644], 3);
        this.ⲆΔᐃ[135].id = 135;
        this.ⲆΔᐃ[47] = df(60, 60, 0, ΔⲆ[646], 3);
        this.ⲆΔᐃ[47].id = 47;
        this.ⲆΔᐃ[48] = df(60, 60, 0, ΔⲆ[649], 3);
        this.ⲆΔᐃ[48].id = 48;
        this.ⲆΔᐃ[49] = df(60, 60, 0, ΔⲆ[652], 3);
        this.ⲆΔᐃ[49].id = 49;
        this.ⲆΔᐃ[136] = df(60, 60, 0, ΔⲆ[659], 3);
        this.ⲆΔᐃ[136].id = 136;
        this.ⲆΔᐃ[143] = df(60, 60, 0, ΔⲆ[143], 3);
        this.ⲆΔᐃ[143].id = 143;
        this.ⲆΔᐃ[137] = df(60, 60, 0, ΔⲆ[662], 3);
        this.ⲆΔᐃ[137].id = 137;
        this.ⲆΔᐃ[138] = df(60, 60, 0, ΔⲆ[664], 3);
        this.ⲆΔᐃ[138].id = 138;
        this.ⲆΔᐃ[139] = df(60, 60, 0, ΔⲆ[674], 3);
        this.ⲆΔᐃ[139].id = 139;
        this.ⲆΔᐃ[139].info.ᐃⲆ[2] = this.ⲆΔᐃ[139].info.ᐃⲆ[0];
        this.ⲆΔᐃ[140] = df(60, 60, 0, ΔⲆ[140], 3);
        this.ⲆΔᐃ[140].id = 140;
        this.ⲆΔᐃ[140].info.ᐃⲆ[2] = this.ⲆΔᐃ[140].info.ᐃⲆ[0];
        this.ⲆΔᐃ[141] = df(60, 60, 0, ΔⲆ[685], 3);
        this.ⲆΔᐃ[141].id = 141;
        this.ⲆΔᐃ[142] = df(60, 60, 0, ΔⲆ[142], 3);
        this.ⲆΔᐃ[142].id = 142;
        this.ⲆΔᐃ[142].info.ᐃⲆ[2] = this.ⲆΔᐃ[142].info.ᐃⲆ[0];
        this.ⲆΔᐃ[144] = df(60, 60, 0, ΔⲆ[717], 3);
        this.ⲆΔᐃ[144].id = 144;
        this.ⲆΔᐃ[145] = df(60, 60, 0, ΔⲆ[145], 3);
        this.ⲆΔᐃ[145].id = 145;
        this.ⲆΔᐃ[59] = df(60, 60, 0, ΔⲆ[732], 3);
        this.ⲆΔᐃ[59].id = 59;
        this.ⲆΔᐃ[62] = df(60, 60, 0, ΔⲆ[563], 3);
        this.ⲆΔᐃ[62].id = 62;
        this.ⲆΔᐃ[185] = df(60, 60, 0, ΔⲆ[252], 3);
        this.ⲆΔᐃ[185].id = 185;
        this.ⲆΔᐃ[185].info.ᐃⲆ[2] = this.ⲆΔᐃ[185].info.ᐃⲆ[0];
        this.ⲆΔᐃ[184] = df(60, 60, 0, ΔⲆ[751], 3);
        this.ⲆΔᐃ[184].id = 184;
        this.ⲆΔᐃ[184].info.ᐃⲆ[2] = this.ⲆΔᐃ[184].info.ᐃⲆ[0];
        this.ⲆΔᐃ[17] = df(60, 60, 0, ΔⲆ[877], 3);
        this.ⲆΔᐃ[17].id = 17;
        this.ⲆΔᐃ[63] = df(60, 60, 0, ΔⲆ[566], 3);
        this.ⲆΔᐃ[63].id = 63;
        this.ⲆΔᐃ[187] = df(60, 60, 0, ΔⲆ[253], 3);
        this.ⲆΔᐃ[187].id = 187;
        this.ⲆΔᐃ[187].info.ᐃⲆ[2] = this.ⲆΔᐃ[187].info.ᐃⲆ[0];
        this.ⲆΔᐃ[186] = df(60, 60, 0, ΔⲆ[753], 3);
        this.ⲆΔᐃ[186].id = 186;
        this.ⲆΔᐃ[186].info.ᐃⲆ[2] = this.ⲆΔᐃ[186].info.ᐃⲆ[0];
        this.ⲆΔᐃ[77] = df(60, 60, 0, ΔⲆ[756], 3);
        this.ⲆΔᐃ[77].id = 77;
        this.ⲆΔᐃ[175] = df(60, 60, 0, ΔⲆ[176], 3);
        this.ⲆΔᐃ[175].id = 175;
        this.ⲆΔᐃ[175].info.ᐃⲆ[2] = this.ⲆΔᐃ[175].info.ᐃⲆ[0];
        this.ⲆΔᐃ[176] = df(60, 60, 0, ΔⲆ[177], 3);
        this.ⲆΔᐃ[176].id = 176;
        this.ⲆΔᐃ[176].info.ᐃⲆ[2] = this.ⲆΔᐃ[176].info.ᐃⲆ[0];
        this.ⲆΔᐃ[78] = df(60, 60, 0, ΔⲆ[760], 3);
        this.ⲆΔᐃ[78].id = 78;
        this.ⲆΔᐃ[177] = df(60, 60, 0, ΔⲆ[175], 3);
        this.ⲆΔᐃ[177].id = 177;
        this.ⲆΔᐃ[177].info.ᐃⲆ[2] = this.ⲆΔᐃ[177].info.ᐃⲆ[0];
        this.ⲆΔᐃ[79] = df(60, 60, 0, ΔⲆ[764], 3);
        this.ⲆΔᐃ[79].id = 79;
        this.ⲆΔᐃ[83] = df(60, 60, 0, ΔⲆ[767], 3);
        this.ⲆΔᐃ[83].id = 83;
        this.ⲆΔᐃ[84] = df(60, 60, 0, ΔⲆ[771], 3);
        this.ⲆΔᐃ[84].id = 84;
        this.ⲆΔᐃ[178] = df(60, 60, 0, ΔⲆ[178], 3);
        this.ⲆΔᐃ[178].id = 178;
        this.ⲆΔᐃ[179] = df(60, 60, 0, ΔⲆ[179], 3);
        this.ⲆΔᐃ[179].id = 179;
        this.ⲆΔᐃ[86] = df(60, 60, 0, ΔⲆ[776], 3);
        this.ⲆΔᐃ[86].id = 86;
        this.ⲆΔᐃ[85] = df(60, 60, 0, ΔⲆ[779], 3);
        this.ⲆΔᐃ[85].id = 85;
        this.ⲆΔᐃ[180] = df(60, 60, 0, ΔⲆ[180], 3);
        this.ⲆΔᐃ[180].id = 180;
        this.ⲆΔᐃ[181] = df(60, 60, 0, ΔⲆ[181], 3);
        this.ⲆΔᐃ[181].id = 181;
        this.ⲆΔᐃ[182] = df(60, 60, 0, ΔⲆ[789], 3);
        this.ⲆΔᐃ[182].id = 182;
        this.ⲆΔᐃ[183] = df(60, 60, 0, ΔⲆ[800], 3);
        this.ⲆΔᐃ[183].id = 183;
        this.ⲆΔᐃ[188] = df(60, 60, 0, ΔⲆ[808], 3);
        this.ⲆΔᐃ[188].id = 188;
        this.ⲆΔᐃ[189] = df(60, 60, 0, ΔⲆ[814], 3);
        this.ⲆΔᐃ[189].id = 189;
        this.ⲆΔᐃ[191] = df(60, 60, 0, ΔⲆ[834], 3);
        this.ⲆΔᐃ[191].id = 191;
        this.ⲆΔᐃ[192] = df(60, 60, 0, ΔⲆ[840], 3);
        this.ⲆΔᐃ[192].id = 192;
        this.ⲆΔᐃ[190] = df(60, 60, 0, ΔⲆ[842], 3);
        this.ⲆΔᐃ[190].id = 190;
        this.ⲆΔᐃ[193] = df(60, 60, 0, ΔⲆ[845], 3);
        this.ⲆΔᐃ[193].id = 193;
        this.ⲆΔᐃ[194] = df(60, 60, 0, ΔⲆ[850], 3);
        this.ⲆΔᐃ[194].id = 194;
        this.ⲆΔᐃ[204] = df(60, 60, 0, ΔⲆ[949], 3);
        this.ⲆΔᐃ[204].id = 204;
        this.ⲆΔᐃ[205] = df(60, 60, 0, ΔⲆ[955], 3);
        this.ⲆΔᐃ[205].id = 205;
        this.ⲆΔᐃ[206] = df(60, 60, 0, ΔⲆ[959], 3);
        this.ⲆΔᐃ[206].id = 206;
        this.ⲆΔᐃ[207] = df(60, 60, 0, ΔⲆ[965], 3);
        this.ⲆΔᐃ[207].id = 207;
        this.ⲆΔᐃ[208] = df(60, 60, 0, ΔⲆ[966], 3);
        this.ⲆΔᐃ[208].id = 208;
        this.ⲆΔᐃ[209] = df(60, 60, 0, ΔⲆ[972], 3);
        this.ⲆΔᐃ[209].id = 209;
        this.ⲆΔᐃ[210] = df(60, 60, 0, ΔⲆ[981], 3);
        this.ⲆΔᐃ[210].id = 210;
        this.ⲆΔᐃ[211] = df(60, 60, 0, ΔⲆ[987], 3);
        this.ⲆΔᐃ[211].id = 211;
        this.ⲆΔᐃ[41] = df(60, 60, 0, ΔⲆ[880], 3);
        this.ⲆΔᐃ[41].id = 41;
        this.ⲆΔᐃ[42] = df(60, 60, 0, ΔⲆ[882], 3);
        this.ⲆΔᐃ[42].id = 42;
        this.ⲆΔᐃ[12] = df(60, 60, 0, ΔⲆ[401], 3);
        this.ⲆΔᐃ[12].id = 12;
        this.ⲆΔᐃ[16] = df(60, 60, 0, ΔⲆ[874], 3);
        this.ⲆΔᐃ[16].id = 16;
        this.ⲆΔᐃ[196] = df(60, 60, 0, ΔⲆ[196], 3);
        this.ⲆΔᐃ[196].id = 196;
        this.ⲆΔᐃ[18] = df(60, 60, 0, ΔⲆ[901], 3);
        this.ⲆΔᐃ[18].id = 18;
        this.ⲆΔᐃ[197] = df(60, 60, 0, ΔⲆ[197], 3);
        this.ⲆΔᐃ[197].id = 197;
        this.ⲆΔᐃ[198] = df(60, 60, 0, ΔⲆ[907], 3);
        this.ⲆΔᐃ[198].id = 198;
        this.ⲆΔᐃ[61] = df(60, 60, 0, ΔⲆ[910], 3);
        this.ⲆΔᐃ[61].id = 61;
        this.ⲆΔᐃ[201] = df(60, 60, 0, ΔⲆ[870], 3);
        this.ⲆΔᐃ[201].id = 201;
        this.ⲆΔᐃ[200] = df(60, 60, 0, ΔⲆ[200], 3);
        this.ⲆΔᐃ[200].id = 200;
        this.ⲆΔᐃ[199] = df(60, 60, 0, ΔⲆ[865], 3);
        this.ⲆΔᐃ[199].id = 199;
        this.ᐃⲆⲆ = [];
        this.ᐃⲆⲆ[35] = df(60, 60, 0, ΔⲆ[254], 3);
        this.ᐃⲆⲆ[35].id = 35;
        this.ᐃⲆⲆ[5] = df(60, 60, 0, ΔⲆ[256], 3);
        this.ᐃⲆⲆ[5].id = 5;
        this.ᐃⲆⲆ[0] = df(60, 60, 0, ΔⲆ[302], 3);
        this.ᐃⲆⲆ[0].id = 0;
        this.ᐃⲆⲆ[3] = df(60, 60, 0, ΔⲆ[262], 3);
        this.ᐃⲆⲆ[3].id = 3;
        this.ᐃⲆⲆ[55] = df(60, 60, 0, ΔⲆ[318], 3);
        this.ᐃⲆⲆ[55].id = 55;
        this.ᐃⲆⲆ[67] = df(60, 60, 0, ΔⲆ[320], 3);
        this.ᐃⲆⲆ[67].id = 67;
        this.ᐃⲆⲆ[40] = df(60, 60, 0, ΔⲆ[284], 3);
        this.ᐃⲆⲆ[40].id = 40;
        this.ᐃⲆⲆ[6] = df(60, 60, 0, ΔⲆ[295], 3);
        this.ᐃⲆⲆ[6].id = 6;
        this.ᐃⲆⲆ[7] = df(60, 60, 0, ΔⲆ[257], 3);
        this.ᐃⲆⲆ[7].id = 7;
        this.ᐃⲆⲆ[36] = df(60, 60, 0, ΔⲆ[290], 3);
        this.ᐃⲆⲆ[36].id = 36;
        this.ᐃⲆⲆ[34] = df(60, 60, 0, ΔⲆ[830], 3);
        this.ᐃⲆⲆ[34].id = 34;
        this.ᐃⲆⲆ[37] = df(60, 60, 0, ΔⲆ[291], 3);
        this.ᐃⲆⲆ[37].id = 37;
        this.ᐃⲆⲆ[4] = df(60, 60, 0, ΔⲆ[314], 3);
        this.ᐃⲆⲆ[4].id = 4;
        this.ᐃⲆⲆ[49] = df(60, 60, 0, ΔⲆ[325], 3);
        this.ᐃⲆⲆ[49].id = 49;
        this.ᐃⲆⲆ[1] = df(60, 60, 0, ΔⲆ[327], 3);
        this.ᐃⲆⲆ[1].id = 1;
        this.ᐃⲆⲆ[54] = df(60, 60, 0, ΔⲆ[304], 3);
        this.ᐃⲆⲆ[54].id = 54;
        this.ᐃⲆⲆ[56] = df(60, 60, 0, ΔⲆ[263], 3);
        this.ᐃⲆⲆ[56].id = 56;
        this.ᐃⲆⲆ[57] = df(60, 60, 0, ΔⲆ[265], 3);
        this.ᐃⲆⲆ[57].id = 57;
        this.ᐃⲆⲆ[58] = df(60, 60, 0, ΔⲆ[332], 3);
        this.ᐃⲆⲆ[58].id = 58;
        this.ᐃⲆⲆ[61] = df(60, 60, 0, ΔⲆ[268], 3);
        this.ᐃⲆⲆ[61].id = 61;
        this.ᐃⲆⲆ[79] = df(60, 60, 0, ΔⲆ[338], 3);
        this.ᐃⲆⲆ[79].id = 79;
        this.ᐃⲆⲆ[68] = df(60, 60, 0, ΔⲆ[360], 3);
        this.ᐃⲆⲆ[68].id = 68;
        this.ᐃⲆⲆ[69] = df(60, 60, 0, ΔⲆ[363], 3);
        this.ᐃⲆⲆ[69].id = 69;
        this.ᐃⲆⲆ[70] = df(60, 60, 0, ΔⲆ[365], 3);
        this.ᐃⲆⲆ[70].id = 70;
        this.ᐃⲆⲆ[100] = df(60, 60, 0, ΔⲆ[367], 3);
        this.ᐃⲆⲆ[100].id = 100;
        this.ᐃⲆⲆ[83] = df(60, 60, 0, ΔⲆ[370], 3);
        this.ᐃⲆⲆ[83].id = 83;
        this.ᐃⲆⲆ[62] = df(60, 60, 0, ΔⲆ[371], 3);
        this.ᐃⲆⲆ[62].id = 62;
        this.ᐃⲆⲆ[63] = df(60, 60, 0, ΔⲆ[374], 3);
        this.ᐃⲆⲆ[63].id = 63;
        this.ᐃⲆⲆ[64] = df(60, 60, 0, ΔⲆ[377], 3);
        this.ᐃⲆⲆ[64].id = 64;
        this.ᐃⲆⲆ[83] = df(60, 60, 0, ΔⲆ[370], 3);
        this.ᐃⲆⲆ[83].id = 83;
        this.ᐃⲆⲆ[84] = df(60, 60, 0, ΔⲆ[380], 3);
        this.ᐃⲆⲆ[84].id = 84;
        this.ᐃⲆⲆ[25] = df(60, 60, 0, ΔⲆ[402], 3);
        this.ᐃⲆⲆ[25].id = 25;
        this.ᐃⲆⲆ[26] = df(60, 60, 0, ΔⲆ[396], 3);
        this.ᐃⲆⲆ[26].id = 26;
        this.ᐃⲆⲆ[27] = df(60, 60, 0, ΔⲆ[399], 3);
        this.ᐃⲆⲆ[27].id = 27;
        this.ᐃⲆⲆ[28] = df(60, 60, 0, ΔⲆ[405], 3);
        this.ᐃⲆⲆ[28].id = 28;
        this.ᐃⲆⲆ[31] = df(60, 60, 0, ΔⲆ[876], 3);
        this.ᐃⲆⲆ[31].id = 31;
        this.ᐃⲆⲆ[2] = df(60, 60, 0, ΔⲆ[409], 3);
        this.ᐃⲆⲆ[2].id = 2;
        this.ᐃⲆⲆ[80] = df(60, 60, 0, ΔⲆ[421], 3);
        this.ᐃⲆⲆ[80].id = 80;
        this.ᐃⲆⲆ[81] = df(60, 60, 0, ΔⲆ[424], 3);
        this.ᐃⲆⲆ[81].id = 81;
        this.ᐃⲆⲆ[bs.ⲆᐃᐃⲆΔ] = df(60, 60, 0, ΔⲆ[1228], 3);
        this.ᐃⲆⲆ[bs.ⲆᐃᐃⲆΔ].id = bs.ⲆᐃᐃⲆΔ;
        this.ᐃⲆⲆ[86] = df(60, 60, 0, ΔⲆ[1231], 3);
        this.ᐃⲆⲆ[86].id = 86;
        this.ᐃⲆⲆ[98] = df(60, 60, 0, ΔⲆ[1138], 3);
        this.ᐃⲆⲆ[98].id = 98;
        this.ᐃⲆⲆ[99] = df(60, 60, 0, ΔⲆ[1141], 3);
        this.ᐃⲆⲆ[99].id = 99;
        this.ᐃⲆⲆ[131] = df(60, 60, 0, ΔⲆ[570], 3);
        this.ᐃⲆⲆ[131].id = 131;
        this.ᐃⲆⲆ[132] = df(60, 60, 0, ΔⲆ[1168], 3);
        this.ᐃⲆⲆ[132].id = 132;
        this.ᐃⲆⲆ[145] = df(60, 60, 0, ΔⲆ[1238], 3);
        this.ᐃⲆⲆ[145].id = 145;
        this.ᐃⲆⲆ[133] = df(60, 60, 0, ΔⲆ[573], 3);
        this.ᐃⲆⲆ[133].id = 133;
        this.ᐃⲆⲆ[134] = df(60, 60, 0, ΔⲆ[1171], 3);
        this.ᐃⲆⲆ[134].id = 134;
        this.ᐃⲆⲆ[146] = df(60, 60, 0, ΔⲆ[1241], 3);
        this.ᐃⲆⲆ[146].id = 146;
        this.ᐃⲆⲆ[135] = df(60, 60, 0, ΔⲆ[576], 3);
        this.ᐃⲆⲆ[135].id = 135;
        this.ᐃⲆⲆ[136] = df(60, 60, 0, ΔⲆ[1174], 3);
        this.ᐃⲆⲆ[136].id = 136;
        this.ᐃⲆⲆ[147] = df(60, 60, 0, ΔⲆ[1244], 3);
        this.ᐃⲆⲆ[147].id = 147;
        this.ᐃⲆⲆ[137] = df(60, 60, 0, ΔⲆ[579], 3);
        this.ᐃⲆⲆ[137].id = 137;
        this.ᐃⲆⲆ[138] = df(60, 60, 0, ΔⲆ[1177], 3);
        this.ᐃⲆⲆ[138].id = 138;
        this.ᐃⲆⲆ[167] = df(60, 60, 0, ΔⲆ[1256], 3);
        this.ᐃⲆⲆ[167].id = 167;
        this.ᐃⲆⲆ[168] = df(60, 60, 0, ΔⲆ[1259], 3);
        this.ᐃⲆⲆ[168].id = 168;
        this.ᐃⲆⲆ[169] = df(60, 60, 0, ΔⲆ[1262], 3);
        this.ᐃⲆⲆ[169].id = 169;
        this.ᐃⲆⲆ[170] = df(60, 60, 0, ΔⲆ[1265], 3);
        this.ᐃⲆⲆ[170].id = 170;
        this.ᐃⲆⲆ[171] = df(60, 60, 0, ΔⲆ[1268], 3);
        this.ᐃⲆⲆ[171].id = 171;
        this.ᐃⲆⲆ[172] = df(60, 60, 0, ΔⲆ[1271], 3);
        this.ᐃⲆⲆ[172].id = 172;
        this.ᐃⲆⲆ[148] = df(60, 60, 0, ΔⲆ[1247], 3);
        this.ᐃⲆⲆ[148].id = 148;
        this.ᐃⲆⲆ[139] = df(60, 60, 0, ΔⲆ[582], 3);
        this.ᐃⲆⲆ[139].id = 139;
        this.ᐃⲆⲆ[140] = df(60, 60, 0, ΔⲆ[1180], 3);
        this.ᐃⲆⲆ[140].id = 140;
        this.ᐃⲆⲆ[149] = df(60, 60, 0, ΔⲆ[1250], 3);
        this.ᐃⲆⲆ[149].id = 149;
        this.ᐃⲆⲆ[141] = df(60, 60, 0, ΔⲆ[585], 3);
        this.ᐃⲆⲆ[141].id = 141;
        this.ᐃⲆⲆ[142] = df(60, 60, 0, ΔⲆ[1183], 3);
        this.ᐃⲆⲆ[142].id = 142;
        this.ᐃⲆⲆ[150] = df(60, 60, 0, ΔⲆ[1253], 3);
        this.ᐃⲆⲆ[150].id = 150;
        this.ᐃⲆⲆ[143] = df(60, 60, 0, ΔⲆ[588], 3);
        this.ᐃⲆⲆ[143].id = 143;
        this.ᐃⲆⲆ[144] = df(60, 60, 0, ΔⲆ[1186], 3);
        this.ᐃⲆⲆ[144].id = 144;
        this.ᐃⲆⲆ[87] = df(60, 60, 0, ΔⲆ[827], 3);
        this.ᐃⲆⲆ[87].id = 87;
        this.ᐃⲆⲆ[88] = df(60, 60, 0, ΔⲆ[430], 3);
        this.ᐃⲆⲆ[88].id = 88;
        this.ᐃⲆⲆ[89] = df(60, 60, 0, ΔⲆ[433], 3);
        this.ᐃⲆⲆ[89].id = 89;
        this.ᐃⲆⲆ[90] = df(60, 60, 0, ΔⲆ[436], 3);
        this.ᐃⲆⲆ[90].id = 90;
        this.ᐃⲆⲆ[24] = df(60, 60, 0, ΔⲆ[439], 3);
        this.ᐃⲆⲆ[24].id = 24;
        this.ᐃⲆⲆ[101] = df(60, 60, 0, ΔⲆ[442], 3);
        this.ᐃⲆⲆ[101].id = 101;
        this.ᐃⲆⲆ[100] = df(60, 60, 0, ΔⲆ[367], 3);
        this.ᐃⲆⲆ[100].id = 100;
        this.ᐃⲆⲆ[38] = df(60, 60, 0, ΔⲆ[456], 3);
        this.ᐃⲆⲆ[38].id = 38;
        this.ᐃⲆⲆ[bs.ⲆⲆᐃⵠⲆ] = df(60, 60, 0, ΔⲆ[861], 3);
        this.ᐃⲆⲆ[bs.ⲆⲆᐃⵠⲆ].id = bs.ⲆⲆᐃⵠⲆ;
        this.ᐃⲆⲆ[8] = df(60, 60, 0, ΔⲆ[460], 3);
        this.ᐃⲆⲆ[8].id = 8;
        this.ᐃⲆⲆ[9] = df(60, 60, 0, ΔⲆ[1019], 3);
        this.ᐃⲆⲆ[9].id = 9;
        this.ᐃⲆⲆ[29] = df(60, 60, 0, ΔⲆ[473], 3);
        this.ᐃⲆⲆ[29].id = 29;
        this.ᐃⲆⲆ[10] = df(60, 60, 0, ΔⲆ[478], 3);
        this.ᐃⲆⲆ[10].id = 10;
        this.ᐃⲆⲆ[11] = df(60, 60, 0, ΔⲆ[481], 3);
        this.ᐃⲆⲆ[11].id = 11;
        this.ᐃⲆⲆ[12] = df(60, 60, 0, ΔⲆ[484], 3);
        this.ᐃⲆⲆ[12].id = 12;
        this.ᐃⲆⲆ[13] = df(60, 60, 0, ΔⲆ[487], 3);
        this.ᐃⲆⲆ[13].id = 13;
        this.ᐃⲆⲆ[14] = df(60, 60, 0, ΔⲆ[490], 3);
        this.ᐃⲆⲆ[14].id = 14;
        this.ᐃⲆⲆ[59] = df(60, 60, 0, ΔⲆ[493], 3);
        this.ᐃⲆⲆ[59].id = 59;
        this.ᐃⲆⲆ[71] = df(60, 60, 0, ΔⲆ[496], 3);
        this.ᐃⲆⲆ[71].id = 71;
        this.ᐃⲆⲆ[65] = df(60, 60, 0, ΔⲆ[498], 3);
        this.ᐃⲆⲆ[65].id = 65;
        this.ᐃⲆⲆ[85] = df(60, 60, 0, ΔⲆ[503], 3);
        this.ᐃⲆⲆ[85].id = 85;
        this.ᐃⲆⲆ[102] = df(60, 60, 0, ΔⲆ[515], 3);
        this.ᐃⲆⲆ[102].id = 102;
        this.ᐃⲆⲆ[103] = df(60, 60, 0, ΔⲆ[519], 3);
        this.ᐃⲆⲆ[103].id = 103;
        this.ᐃⲆⲆ[115] = df(60, 60, 0, ΔⲆ[530], 3);
        this.ᐃⲆⲆ[115].id = 115;
        this.ᐃⲆⲆ[104] = df(60, 60, 0, ΔⲆ[533], 3);
        this.ᐃⲆⲆ[104].id = 104;
        this.ᐃⲆⲆ[105] = df(60, 60, 0, ΔⲆ[555], 3);
        this.ᐃⲆⲆ[105].id = 105;
        this.ᐃⲆⲆ[91] = df(60, 60, 0, ΔⲆ[542], 3);
        this.ᐃⲆⲆ[91].id = 91;
        this.ᐃⲆⲆ[15] = df(60, 60, 0, ΔⲆ[551], 3);
        this.ᐃⲆⲆ[15].id = 15;
        this.ᐃⲆⲆ[106] = df(60, 60, 0, ΔⲆ[604], 3);
        this.ᐃⲆⲆ[106].id = 106;
        this.ᐃⲆⲆ[108] = df(60, 60, 0, ΔⲆ[1235], 3);
        this.ᐃⲆⲆ[108].id = 108;
        this.ᐃⲆⲆ[163] = df(60, 60, 0, ΔⲆ[1027], 3);
        this.ᐃⲆⲆ[163].id = 163;
        this.ᐃⲆⲆ[164] = df(60, 60, 0, ΔⲆ[1030], 3);
        this.ᐃⲆⲆ[164].id = 164;
        this.ᐃⲆⲆ[166] = df(60, 60, 0, ΔⲆ[1116], 3);
        this.ᐃⲆⲆ[166].id = 166;
        this.ᐃⲆⲆ[165] = df(60, 60, 0, ΔⲆ[1048], 3);
        this.ᐃⲆⲆ[165].id = 165;
        this.ᐃⲆⲆ[bs.ⲆⵠΔΔΔ] = df(60, 60, 0, ΔⲆ[1051], 3);
        this.ᐃⲆⲆ[bs.ⲆⵠΔΔΔ].id = bs.ⲆⵠΔΔΔ;
        this.ᐃⲆⲆ[bs.ⲆⲆΔΔⵠ] = df(60, 60, 0, ΔⲆ[1082], 3);
        this.ᐃⲆⲆ[bs.ⲆⲆΔΔⵠ].id = bs.ⲆⲆΔΔⵠ;
        this.ᐃⲆⲆ[bs.ⲆᐃⵠΔⲆ] = df(60, 60, 0, ΔⲆ[1226], 3);
        this.ᐃⲆⲆ[bs.ⲆᐃⵠΔⲆ].id = bs.ⲆᐃⵠΔⲆ;
        this.ᐃⲆⲆ[bs.ⲆⵠⲆΔⵠ] = df(60, 60, 0, ΔⲆ[1191], 3);
        this.ᐃⲆⲆ[bs.ⲆⵠⲆΔⵠ].id = bs.ⲆⵠⲆΔⵠ;
        this.ᐃⲆⲆ[110] = df(60, 60, 0, ΔⲆ[611], 3);
        this.ᐃⲆⲆ[110].id = 110;
        this.ᐃⲆⲆ[111] = df(60, 60, 0, ΔⲆ[715], 3);
        this.ᐃⲆⲆ[111].id = 111;
        this.ᐃⲆⲆ[112] = df(60, 60, 0, ΔⲆ[715], 3);
        this.ᐃⲆⲆ[112].id = 112;
        this.ᐃⲆⲆ[113] = df(60, 60, 0, ΔⲆ[715], 3);
        this.ᐃⲆⲆ[113].id = 113;
        this.ᐃⲆⲆ[16] = df(60, 60, 0, ΔⲆ[618], 3);
        this.ᐃⲆⲆ[16].id = 16;
        this.ᐃⲆⲆ[17] = df(60, 60, 0, ΔⲆ[700], 3);
        this.ᐃⲆⲆ[17].id = 17;
        this.ᐃⲆⲆ[18] = df(60, 60, 0, ΔⲆ[704], 3);
        this.ᐃⲆⲆ[18].id = 18;
        this.ᐃⲆⲆ[19] = df(60, 60, 0, ΔⲆ[706], 3);
        this.ᐃⲆⲆ[19].id = 19;
        this.ᐃⲆⲆ[122] = df(60, 60, 0, ΔⲆ[711], 3);
        this.ᐃⲆⲆ[122].id = 122;
        this.ᐃⲆⲆ[20] = df(60, 60, 0, ΔⲆ[627], 3);
        this.ᐃⲆⲆ[20].id = 20;
        this.ᐃⲆⲆ[41] = df(60, 60, 0, ΔⲆ[632], 3);
        this.ᐃⲆⲆ[41].id = 41;
        this.ᐃⲆⲆ[52] = df(60, 60, 0, ΔⲆ[635], 3);
        this.ᐃⲆⲆ[52].id = 52;
        this.ᐃⲆⲆ[114] = df(60, 60, 0, ΔⲆ[643], 3);
        this.ᐃⲆⲆ[114].id = 114;
        this.ᐃⲆⲆ[94] = df(60, 60, 0, ΔⲆ[647], 3);
        this.ᐃⲆⲆ[94].id = 94;
        this.ᐃⲆⲆ[93] = df(60, 60, 0, ΔⲆ[650], 3);
        this.ᐃⲆⲆ[93].id = 93;
        this.ᐃⲆⲆ[21] = df(60, 60, 0, ΔⲆ[654], 3);
        this.ᐃⲆⲆ[21].id = 21;
        this.ᐃⲆⲆ[53] = df(60, 60, 0, ΔⲆ[660], 3);
        this.ᐃⲆⲆ[53].id = 53;
        this.ᐃⲆⲆ[51] = df(60, 60, 0, ΔⲆ[690], 3);
        this.ᐃⲆⲆ[51].id = 51;
        this.ᐃⲆⲆ[50] = df(60, 60, 0, ΔⲆ[666], 3);
        this.ᐃⲆⲆ[50].id = 50;
        this.ᐃⲆⲆ[109] = df(60, 60, 0, ΔⲆ[684], 3);
        this.ᐃⲆⲆ[109].id = 109;
        this.ᐃⲆⲆ[124] = df(60, 60, 0, ΔⲆ[718], 3);
        this.ᐃⲆⲆ[124].id = 124;
        this.ᐃⲆⲆ[125] = df(60, 60, 0, ΔⲆ[730], 3);
        this.ᐃⲆⲆ[125].id = 125;
        this.ᐃⲆⲆ[126] = df(60, 60, 0, ΔⲆ[734], 3);
        this.ᐃⲆⲆ[126].id = 126;
        this.ᐃⲆⲆ[129] = df(60, 60, 0, ΔⲆ[563], 3);
        this.ᐃⲆⲆ[129].id = 129;
        this.ᐃⲆⲆ[151] = df(60, 60, 0, ΔⲆ[758], 3);
        this.ᐃⲆⲆ[151].id = 151;
        this.ᐃⲆⲆ[152] = df(60, 60, 0, ΔⲆ[762], 3);
        this.ᐃⲆⲆ[152].id = 152;
        this.ᐃⲆⲆ[153] = df(60, 60, 0, ΔⲆ[770], 3);
        this.ᐃⲆⲆ[153].id = 153;
        this.ᐃⲆⲆ[154] = df(60, 60, 0, ΔⲆ[768], 3);
        this.ᐃⲆⲆ[154].id = 154;
        this.ᐃⲆⲆ[155] = df(60, 60, 0, ΔⲆ[772], 3);
        this.ᐃⲆⲆ[155].id = 155;
        this.ᐃⲆⲆ[157] = df(60, 60, 0, ΔⲆ[777], 3);
        this.ᐃⲆⲆ[157].id = 157;
        this.ᐃⲆⲆ[156] = df(60, 60, 0, ΔⲆ[780], 3);
        this.ᐃⲆⲆ[156].id = 156;
        this.ᐃⲆⲆ[158] = df(60, 60, 0, ΔⲆ[784], 3);
        this.ᐃⲆⲆ[158].id = 158;
        this.ᐃⲆⲆ[159] = df(60, 60, 0, ΔⲆ[785], 3);
        this.ᐃⲆⲆ[159].id = 159;
        this.ᐃⲆⲆ[160] = df(60, 60, 0, ΔⲆ[791], 3);
        this.ᐃⲆⲆ[160].id = 160;
        this.ᐃⲆⲆ[161] = df(60, 60, 0, ΔⲆ[799], 3);
        this.ᐃⲆⲆ[161].id = 161;
        this.ᐃⲆⲆ[42] = df(60, 60, 0, ΔⲆ[809], 3);
        this.ᐃⲆⲆ[42].id = 42;
        this.ᐃⲆⲆ[43] = df(60, 60, 0, ΔⲆ[835], 3);
        this.ᐃⲆⲆ[43].id = 43;
        this.ᐃⲆⲆ[107] = df(60, 60, 0, ΔⲆ[843], 3);
        this.ᐃⲆⲆ[107].id = 107;
        this.ᐃⲆⲆ[44] = df(60, 60, 0, ΔⲆ[846], 3);
        this.ᐃⲆⲆ[44].id = 44;
        this.ᐃⲆⲆ[46] = df(60, 60, 0, ΔⲆ[960], 3);
        this.ᐃⲆⲆ[46].id = 46;
        this.ᐃⲆⲆ[45] = df(60, 60, 0, ΔⲆ[950], 3);
        this.ᐃⲆⲆ[45].id = 45;
        this.ᐃⲆⲆ[47] = df(60, 60, 0, ΔⲆ[967], 3);
        this.ᐃⲆⲆ[47].id = 47;
        this.ᐃⲆⲆ[48] = df(60, 60, 0, ΔⲆ[982], 3);
        this.ᐃⲆⲆ[48].id = 48;
        this.ᐃⲆⲆ[25] = df(60, 60, 0, ΔⲆ[402], 3);
        this.ᐃⲆⲆ[25].id = 25;
        this.ᐃⲆⲆ[31] = df(60, 60, 0, ΔⲆ[876], 3);
        this.ᐃⲆⲆ[31].id = 31;
        this.ᐃⲆⲆ[33] = df(60, 60, 0, ΔⲆ[900], 3);
        this.ᐃⲆⲆ[33].id = 33;
        this.ᐃⲆⲆ[162] = df(60, 60, 0, ΔⲆ[909], 3);
        this.ᐃⲆⲆ[162].id = 162;
        this.ᐃⲆⲆ[128] = df(60, 60, 0, ΔⲆ[912], 3);
        this.ᐃⲆⲆ[128].id = 128;
        this.ⲆΔⵠ[53] = df(68, 68, 0, ΔⲆ[976], 3);
        this.ⲆΔⵠ[53].id = 53;
        this.ⲆΔᐃ[53] = df(60, 60, 0, ΔⲆ[975], 3);
        this.ⲆΔᐃ[53].id = 53;
        this.ᐃⲆⲆ[22] = df(60, 60, 0, ΔⲆ[977], 3);
        this.ᐃⲆⲆ[22].id = 22;
        this.ⲆΔⵠ[54] = df(68, 68, 0, ΔⲆ[979], 3);
        this.ⲆΔⵠ[54].id = 54;
        this.ⲆΔᐃ[54] = df(60, 60, 0, ΔⲆ[978], 3);
        this.ⲆΔᐃ[54].id = 54;
        this.ᐃⲆⲆ[23] = df(60, 60, 0, ΔⲆ[980], 3);
        this.ᐃⲆⲆ[23].id = 23;
        this.ⲆΔⵠ[56] = df(68, 68, 0, ΔⲆ[713], 3);
        this.ⲆΔⵠ[56].id = 56;
        this.ⲆΔᐃ[56] = df(60, 60, 0, ΔⲆ[712], 3);
        this.ⲆΔᐃ[56].id = 56;
        this.ᐃⲆⲆ[123] = df(60, 60, 0, ΔⲆ[714], 3);
        this.ᐃⲆⲆ[123].id = 123;
        this.ⲆΔⵠ[82] = df(68, 68, 0, ΔⲆ[428], 3);
        this.ⲆΔⵠ[82].id = 82;
        this.ⲆΔᐃ[82] = df(60, 60, 0, ΔⲆ[426], 3);
        this.ⲆΔᐃ[82].id = 82;
        this.ᐃⲆⲆ[82] = df(60, 60, 0, ΔⲆ[427], 3);
        this.ᐃⲆⲆ[82].id = 82;
        this.ⲆΔⵠ[235] = df(68, 68, 0, ΔⲆ[1159], 3);
        this.ⲆΔⵠ[235].id = 235;
        this.ⲆΔᐃ[235] = df(60, 60, 0, ΔⲆ[1158], 3);
        this.ⲆΔᐃ[235].id = 235;
        this.ⲆΔⵠ[238] = df(68, 68, 0, ΔⲆ[1188], 3);
        this.ⲆΔⵠ[238].id = 238;
        this.ⲆΔᐃ[238] = df(60, 60, 0, ΔⲆ[1187], 3);
        this.ⲆΔᐃ[238].id = 238;
        this.ⲆΔⵠ[236] = df(68, 68, 0, ΔⲆ[1161], 3);
        this.ⲆΔⵠ[236].id = 236;
        this.ⲆΔᐃ[236] = df(60, 60, 0, ΔⲆ[1160], 3);
        this.ⲆΔᐃ[236].id = 236;
        this.ⲆΔⵠ[152] = df(68, 68, 0, ΔⲆ[1197], 3);
        this.ⲆΔⵠ[152].id = 152;
        this.ⲆΔᐃ[152] = df(60, 60, 0, ΔⲆ[1195], 3);
        this.ⲆΔᐃ[152].id = 152;
        this.ᐃⲆⲆ[116] = df(60, 60, 0, ΔⲆ[1196], 3);
        this.ᐃⲆⲆ[116].id = 116;
        this.ⲆΔⵠ[212] = df(68, 68, 0, ΔⲆ[992], 3);
        this.ⲆΔⵠ[212].id = 212;
        this.ⲆΔᐃ[212] = df(60, 60, 0, ΔⲆ[991], 3);
        this.ⲆΔᐃ[212].id = 212;
        this.ᐃⲆⲆ[73] = df(60, 60, 0, ΔⲆ[990], 3);
        this.ᐃⲆⲆ[73].id = 73;
        this.ⲆΔⵠ[213] = df(68, 68, 0, ΔⲆ[995], 3);
        this.ⲆΔⵠ[213].id = 213;
        this.ⲆΔᐃ[213] = df(60, 60, 0, ΔⲆ[994], 3);
        this.ⲆΔᐃ[213].id = 213;
        this.ᐃⲆⲆ[74] = df(60, 60, 0, ΔⲆ[993], 3);
        this.ᐃⲆⲆ[74].id = 74;
        this.ⲆΔⵠ[214] = df(68, 68, 0, ΔⲆ[998], 3);
        this.ⲆΔⵠ[214].id = 214;
        this.ⲆΔᐃ[214] = df(60, 60, 0, ΔⲆ[997], 3);
        this.ⲆΔᐃ[214].id = 214;
        this.ᐃⲆⲆ[75] = df(60, 60, 0, ΔⲆ[996], 3);
        this.ᐃⲆⲆ[75].id = 75;
        this.ⲆΔⵠ[215] = df(68, 68, 0, ΔⲆ[1001], 3);
        this.ⲆΔⵠ[215].id = 215;
        this.ⲆΔᐃ[215] = df(60, 60, 0, ΔⲆ[1000], 3);
        this.ⲆΔᐃ[215].id = 215;
        this.ᐃⲆⲆ[76] = df(60, 60, 0, ΔⲆ[999], 3);
        this.ᐃⲆⲆ[76].id = 76;
        this.ⲆΔⵠ[216] = df(68, 68, 0, ΔⲆ[1004], 3);
        this.ⲆΔⵠ[216].id = 216;
        this.ⲆΔᐃ[216] = df(60, 60, 0, ΔⲆ[1003], 3);
        this.ⲆΔᐃ[216].id = 216;
        this.ᐃⲆⲆ[77] = df(60, 60, 0, ΔⲆ[1002], 3);
        this.ᐃⲆⲆ[77].id = 77;
        this.ⲆΔⵠ[220] = df(68, 68, 0, ΔⲆ[1007], 3);
        this.ⲆΔⵠ[220].id = 220;
        this.ⲆΔᐃ[220] = df(60, 60, 0, ΔⲆ[1006], 3);
        this.ⲆΔᐃ[220].id = 220;
        this.ᐃⲆⲆ[78] = df(60, 60, 0, ΔⲆ[1005], 3);
        this.ᐃⲆⲆ[78].id = 78;
        this.ⲆΔⵠ[217] = df(68, 68, 0, ΔⲆ[1016], 3);
        this.ⲆΔⵠ[217].id = 217;
        this.ⲆΔᐃ[217] = df(60, 60, 0, ΔⲆ[1015], 3);
        this.ⲆΔᐃ[217].id = 217;
        this.ᐃⲆⲆ[60] = df(60, 60, 0, ΔⲆ[1014], 3);
        this.ᐃⲆⲆ[60].id = 60;
        this.ⲆΔⵠ[219] = df(68, 68, 0, ΔⲆ[1013], 3);
        this.ⲆΔⵠ[219].id = 219;
        this.ⲆΔᐃ[219] = df(60, 60, 0, ΔⲆ[1012], 3);
        this.ⲆΔᐃ[219].id = 219;
        this.ᐃⲆⲆ[72] = df(60, 60, 0, ΔⲆ[1011], 3);
        this.ᐃⲆⲆ[72].id = 72;
        this.ⲆΔⵠ[218] = df(68, 68, 0, ΔⲆ[1010], 3);
        this.ⲆΔⵠ[218].id = 218;
        this.ⲆΔᐃ[218] = df(60, 60, 0, ΔⲆ[1009], 3);
        this.ⲆΔᐃ[218].id = 218;
        this.ᐃⲆⲆ[66] = df(60, 60, 0, ΔⲆ[1008], 3);
        this.ᐃⲆⲆ[66].id = 66;
        this.ⲆΔⵠ[153] = df(68, 68, 0, ΔⲆ[1201], 3);
        this.ⲆΔⵠ[153].id = 153;
        this.ⲆΔᐃ[153] = df(60, 60, 0, ΔⲆ[1199], 3);
        this.ⲆΔᐃ[153].id = 153;
        this.ᐃⲆⲆ[117] = df(60, 60, 0, ΔⲆ[1200], 3);
        this.ᐃⲆⲆ[117].id = 117;
        this.ⲆΔⵠ[154] = df(68, 68, 0, ΔⲆ[1205], 3);
        this.ⲆΔⵠ[154].id = 154;
        this.ⲆΔᐃ[154] = df(60, 60, 0, ΔⲆ[1203], 3);
        this.ⲆΔᐃ[154].id = 154;
        this.ᐃⲆⲆ[118] = df(60, 60, 0, ΔⲆ[1204], 3);
        this.ᐃⲆⲆ[118].id = 118;
        this.ⲆΔⵠ[155] = df(68, 68, 0, ΔⲆ[1209], 3);
        this.ⲆΔⵠ[155].id = 155;
        this.ⲆΔᐃ[155] = df(60, 60, 0, ΔⲆ[1207], 3);
        this.ⲆΔᐃ[155].id = 155;
        this.ᐃⲆⲆ[119] = df(60, 60, 0, ΔⲆ[1208], 3);
        this.ᐃⲆⲆ[119].id = 119;
        this.ⲆΔⵠ[156] = df(68, 68, 0, ΔⲆ[1213], 3);
        this.ⲆΔⵠ[156].id = 156;
        this.ⲆΔᐃ[156] = df(60, 60, 0, ΔⲆ[1211], 3);
        this.ⲆΔᐃ[156].id = 156;
        this.ᐃⲆⲆ[120] = df(60, 60, 0, ΔⲆ[1212], 3);
        this.ᐃⲆⲆ[120].id = 120;
        this.ⲆΔⵠ[157] = df(68, 68, 0, ΔⲆ[1217], 3);
        this.ⲆΔⵠ[157].id = 157;
        this.ⲆΔᐃ[157] = df(60, 60, 0, ΔⲆ[1215], 3);
        this.ⲆΔᐃ[157].id = 157;
        this.ᐃⲆⲆ[121] = df(60, 60, 0, ΔⲆ[1216], 3);
        this.ᐃⲆⲆ[121].id = 121;
        this.ⲆΔⵠ[203] = df(68, 68, 0, ΔⲆ[937], 3);
        this.ⲆΔⵠ[203].id = 203;
        this.ⲆΔᐃ[203] = df(60, 60, 0, ΔⲆ[936], 3);
        this.ⲆΔᐃ[203].id = 203;
        this.ⲆΔᐃ[203].info.ᐃⲆ[2] = this.ⲆΔᐃ[203].info.ᐃⲆ[0];
        this.ⲆΔⵠ[150] = df(68, 68, 0, ΔⲆ[524], 3);
        this.ⲆΔⵠ[150].id = 150;
        this.ⲆΔᐃ[150] = df(60, 60, 0, ΔⲆ[523], 3);
        this.ⲆΔᐃ[150].id = 150;
        this.ⲆΔᐃ[150].info.ᐃⲆ[2] = this.ⲆΔᐃ[150].info.ᐃⲆ[0];
        this.ⲆΔⵠ[202] = df(68, 68, 0, ΔⲆ[939], 3);
        this.ⲆΔⵠ[202].id = 202;
        this.ⲆΔᐃ[202] = df(60, 60, 0, ΔⲆ[938], 3);
        this.ⲆΔᐃ[202].id = 202;
        this.ⲆΔᐃ[202].info.ᐃⲆ[2] = this.ⲆΔᐃ[202].info.ᐃⲆ[0];
        this.ⲆΔⵠ[19] = df(68, 68, 0, ΔⲆ[934], 3);
        this.ⲆΔⵠ[19].id = 19;
        this.ⲆΔᐃ[19] = df(60, 60, 0, ΔⲆ[932], 3);
        this.ⲆΔᐃ[19].id = 19;
        this.ᐃⲆⲆ[39] = df(60, 60, 0, ΔⲆ[933], 3);
        this.ᐃⲆⲆ[39].id = 39;
        this.ⲆΔⵠ[20] = df(68, 68, 0, ΔⲆ[923], 3);
        this.ⲆΔⵠ[20].id = 20;
        this.ⲆΔᐃ[20] = df(60, 60, 0, ΔⲆ[921], 3);
        this.ⲆΔᐃ[20].id = 20;
        this.ᐃⲆⲆ[95] = df(60, 60, 0, ΔⲆ[922], 3);
        this.ᐃⲆⲆ[95].id = 95;
        this.ⲆΔⵠ[21] = df(68, 68, 0, ΔⲆ[927], 3);
        this.ⲆΔⵠ[21].id = 21;
        this.ⲆΔᐃ[21] = df(60, 60, 0, ΔⲆ[925], 3);
        this.ⲆΔᐃ[21].id = 21;
        this.ᐃⲆⲆ[96] = df(60, 60, 0, ΔⲆ[926], 3);
        this.ᐃⲆⲆ[96].id = 96;
        this.ⲆΔⵠ[22] = df(68, 68, 0, ΔⲆ[931], 3);
        this.ⲆΔⵠ[22].id = 22;
        this.ⲆΔᐃ[22] = df(60, 60, 0, ΔⲆ[929], 3);
        this.ⲆΔᐃ[22].id = 22;
        this.ᐃⲆⲆ[97] = df(60, 60, 0, ΔⲆ[930], 3);
        this.ᐃⲆⲆ[97].id = 97;
        this.ⲆΔⵠ[60] = df(68, 68, 0, ΔⲆ[736], 3);
        this.ⲆΔⵠ[60].id = 60;
        this.ⲆΔᐃ[60] = df(60, 60, 0, ΔⲆ[735], 3);
        this.ⲆΔᐃ[60].id = 60;
        this.ᐃⲆⲆ[127] = df(60, 60, 0, ΔⲆ[737], 3);
        this.ᐃⲆⲆ[127].id = 127;
        this.ⲆΔⵠ[90] = df(68, 68, 0, ΔⲆ[739], 3);
        this.ⲆΔⵠ[90].id = 90;
        this.ⲆΔᐃ[90] = df(60, 60, 0, ΔⲆ[738], 3);
        this.ⲆΔᐃ[90].id = 90;
        this.ᐃⲆⲆ[173] = df(60, 60, 0, ΔⲆ[740], 3);
        this.ᐃⲆⲆ[173].id = 173;
        this.ⲆΔⵠ[92] = df(68, 68, 0, ΔⲆ[745], 3);
        this.ⲆΔⵠ[92].id = 92;
        this.ⲆΔᐃ[92] = df(60, 60, 0, ΔⲆ[744], 3);
        this.ⲆΔᐃ[92].id = 92;
        this.ᐃⲆⲆ[174] = df(60, 60, 0, ΔⲆ[746], 3);
        this.ᐃⲆⲆ[174].id = 174;
        this.ⲆΔⵠ[93] = df(68, 68, 0, ΔⲆ[748], 3);
        this.ⲆΔⵠ[93].id = 93;
        this.ⲆΔᐃ[93] = df(60, 60, 0, ΔⲆ[747], 3);
        this.ⲆΔᐃ[93].id = 93;
        this.ᐃⲆⲆ[175] = df(60, 60, 0, ΔⲆ[749], 3);
        this.ᐃⲆⲆ[175].id = 175;
        this.ⲆΔⵠ[91] = df(68, 68, 0, ΔⲆ[742], 3);
        this.ⲆΔⵠ[91].id = 91;
        this.ⲆΔᐃ[91] = df(60, 60, 0, ΔⲆ[741], 3);
        this.ⲆΔᐃ[91].id = 91;
        this.ᐃⲆⲆ[176] = df(60, 60, 0, ΔⲆ[743], 3);
        this.ᐃⲆⲆ[176].id = 176;
        this.ⲆΔⵠ[100] = df(68, 68, 0, ΔⲆ[1165], 3);
        this.ⲆΔⵠ[100].id = 100;
        this.ⲆΔᐃ[100] = df(60, 60, 0, ΔⲆ[1164], 3);
        this.ⲆΔᐃ[100].id = 100;
        this.ᐃⲆⲆ[bs.Ⲇⵠⵠⵠᐃ] = df(60, 60, 0, ΔⲆ[_r.ᐃⵠᐃⵠⲆΔΔⵠⲆ], 3);
        this.ᐃⲆⲆ[bs.Ⲇⵠⵠⵠᐃ].id = bs.Ⲇⵠⵠⵠᐃ;
        this.ⲆΔⵠ[34] = df(68, 68, 0, ΔⲆ[945], 3);
        this.ⲆΔⵠ[34].id = 34;
        this.ⲆΔᐃ[34] = df(60, 60, 0, ΔⲆ[943], 3);
        this.ⲆΔᐃ[34].id = 34;
        this.ᐃⲆⲆ[30] = df(60, 60, 0, ΔⲆ[944], 3);
        this.ᐃⲆⲆ[30].id = 30;
        this.ⲆΔⵠ[44] = df(68, 68, 0, ΔⲆ[948], 3);
        this.ⲆΔⵠ[44].id = 44;
        this.ⲆΔᐃ[44] = df(60, 60, 0, ΔⲆ[946], 3);
        this.ⲆΔᐃ[44].id = 44;
        this.ᐃⲆⲆ[92] = df(60, 60, 0, ΔⲆ[947], 3);
        this.ᐃⲆⲆ[92].id = 92;
        this.ⲆΔⵠ[17] = df(68, 68, 0, ΔⲆ[878], 3);
        this.ⲆΔⵠ[17].id = 17;
        this.ⲆΔᐃ[17] = df(60, 60, 0, ΔⲆ[877], 3);
        this.ⲆΔᐃ[17].id = 17;
        this.ᐃⲆⲆ[32] = df(60, 60, 0, ΔⲆ[879], 3);
        this.ᐃⲆⲆ[32].id = 32;
        this.ⲆΔⵠ[63] = df(68, 68, 0, ΔⲆ[568], 3);
        this.ⲆΔⵠ[63].id = 63;
        this.ⲆΔᐃ[63] = df(60, 60, 0, ΔⲆ[566], 3);
        this.ⲆΔᐃ[63].id = 63;
        this.ᐃⲆⲆ[130] = df(60, 60, 0, ΔⲆ[567], 3);
        this.ᐃⲆⲆ[130].id = 130;
        this.ⲆΔⵠ[187] = df(68, 68, 0, ΔⲆ[591], 3);
        this.ⲆΔⵠ[187].id = 187;
        this.ⲆΔᐃ[187] = df(60, 60, 0, ΔⲆ[253], 3);
        this.ⲆΔᐃ[187].id = 187;
        this.ⲆΔⵠ[ds.ⲆᐃΔᐃⲆΔΔ] = df(68, 68, 0, ΔⲆ[_r.ᐃⵠⲆⲆⵠᐃᐃⲆΔ], 3);
        this.ⲆΔⵠ[ds.ⲆᐃΔᐃⲆΔΔ].id = ds.ⲆᐃΔᐃⲆΔΔ;
        this.ⲆΔᐃ[ds.ⲆᐃΔᐃⲆΔΔ] = df(60, 60, 0, ΔⲆ[_r.ΔⵠᐃᐃⵠⲆⵠⵠⵠ], 3);
        this.ⲆΔᐃ[ds.ⲆᐃΔᐃⲆΔΔ].id = ds.ⲆᐃΔᐃⲆΔΔ;
        this.ⲆΔⵠ[ds.ᐃⲆⵠᐃⲆⲆⵠ] = df(68, 68, 0, ΔⲆ[_r.ΔⵠⵠᐃⵠⲆΔᐃᐃ], 3);
        this.ⲆΔⵠ[ds.ᐃⲆⵠᐃⲆⲆⵠ].id = ds.ᐃⲆⵠᐃⲆⲆⵠ;
        this.ⲆΔᐃ[ds.ᐃⲆⵠᐃⲆⲆⵠ] = df(60, 60, 0, ΔⲆ[_r.ΔΔⲆΔⵠΔᐃⵠⲆ], 3);
        this.ⲆΔᐃ[ds.ᐃⲆⵠᐃⲆⲆⵠ].id = ds.ᐃⲆⵠᐃⲆⲆⵠ;
        this.ⲆΔⵠ[ds.ΔⵠΔⵠⲆⲆⵠ] = df(68, 68, 0, ΔⲆ[_r.ᐃⵠⲆᐃⲆᐃⲆᐃΔ], 3);
        this.ⲆΔⵠ[ds.ΔⵠΔⵠⲆⲆⵠ].id = ds.ΔⵠΔⵠⲆⲆⵠ;
        this.ⲆΔᐃ[ds.ΔⵠΔⵠⲆⲆⵠ] = df(60, 60, 0, ΔⲆ[_r.ⵠⵠⲆⲆⵠⲆΔᐃⵠ], 3);
        this.ⲆΔᐃ[ds.ΔⵠΔⵠⲆⲆⵠ].id = ds.ΔⵠΔⵠⲆⲆⵠ;
        this.ⲆΔⵠ[ds.ⵠΔⲆⲆⲆⲆᐃ] = df(68, 68, 0, ΔⲆ[_r.ⵠᐃᐃⵠⵠΔΔΔΔ], 3);
        this.ⲆΔⵠ[ds.ⵠΔⲆⲆⲆⲆᐃ].id = ds.ⵠΔⲆⲆⲆⲆᐃ;
        this.ⲆΔᐃ[ds.ⵠΔⲆⲆⲆⲆᐃ] = df(60, 60, 0, ΔⲆ[_r.ΔᐃⲆΔΔⲆΔᐃᐃ], 3);
        this.ⲆΔᐃ[ds.ⵠΔⲆⲆⲆⲆᐃ].id = ds.ⵠΔⲆⲆⲆⲆᐃ;
        this.ⲆΔⵠ[ds.ΔⵠⵠΔⵠᐃᐃ] = df(68, 68, 0, ΔⲆ[_r.ΔΔᐃⲆᐃΔᐃⲆΔ], 3);
        this.ⲆΔⵠ[ds.ΔⵠⵠΔⵠᐃᐃ].id = ds.ΔⵠⵠΔⵠᐃᐃ;
        this.ⲆΔᐃ[ds.ΔⵠⵠΔⵠᐃᐃ] = df(60, 60, 0, ΔⲆ[_r.ⵠⵠΔᐃⲆΔⲆⲆⵠ], 3);
        this.ⲆΔᐃ[ds.ΔⵠⵠΔⵠᐃᐃ].id = ds.ΔⵠⵠΔⵠᐃᐃ;
        this.ΔⲆⲆⵠⵠΔΔ = function () {
            for (var a = nx.ⵠᐃΔⵠ.ⵠⵠⵠⲆᐃ, b = 10, c = 10, d = 0; d < a.length; d++) {
                if (d > 0 && !(d % 4)) {
                    b += a[0].info.width + 10;
                    c = 10;
                }
                a[d].info.translate.x = b;
                a[d].info.translate.y = c;
                c += 10 + a[d].info.height;
            }
        };
        this.ᐃⲆᐃᐃⲆᐃᐃ = function () {
            var a = Math.floor((10 + this.ⲆΔⵠ[0].info.ᐃⲆ[0].width) * Math.floor((3 + nx.ⵠᐃΔⵠ.ⵠⵠⵠⲆᐃ.length) / 4) + 35);
            for (var b = 0; this.ⲆΔⵠ.length > b; b++) {
                if (this.ⲆΔⵠ[b]) {
                    this.ⲆΔⵠ[b].info.translate.x = a;
                    this.ⲆΔⵠ[b].info.translate.y = 22;
                }
            }
            this.ΔᐃⲆⲆΔΔⲆ.info.translate.x = a + 17;
            this.ΔᐃⲆⲆΔΔⲆ.info.translate.y = 22 + ΔⲆ[339].height;
            this.ΔⵠΔⲆΔⲆΔ.info.translate.x = a + 17;
            this.ΔⵠΔⲆΔⲆΔ.info.translate.y = 30;
            this.ᐃᐃⲆⵠⵠⲆᐃ.info.translate.x = a + 17;
            this.ᐃᐃⲆⵠⵠⲆᐃ.info.translate.y = 22 + ΔⲆ[339].height;
        };
        this.ΔᐃⲆᐃᐃⵠⲆΔΔ = function () {
            var a = Math.floor((no - ΔⲆ[556][0].width) / 2);
            for (var b = 0; b < this.ⵠᐃΔᐃⲆ.length; b++) {
                this.ⵠᐃΔᐃⲆ[b].button.info.translate.x = a;
                this.ⵠᐃΔᐃⲆ[b].button.info.translate.y = -13;
            }
        };
        this.ΔⲆΔᐃⵠⲆⵠ = function () {
            var a = 12 + Math.floor((10 + this.ⲆⲆⲆⲆⲆᐃⵠ.info.ᐃⲆ[0].width) * Math.floor((3 + nx.ⵠᐃΔⵠ.ⵠⵠⵠⲆᐃ.length) / 4) + 35);
            this.ⲆⲆⲆⲆⲆᐃⵠ.info.translate.x = a;
            this.ⲆⲆⲆⲆⲆᐃⵠ.info.translate.y = 33;
            this.ⵠᐃⲆΔᐃΔᐃ.info.translate.x = this.ⲆⲆⲆⲆⲆᐃⵠ.info.translate.x;
            this.ⵠᐃⲆΔᐃΔᐃ.info.translate.y = 137;
            this.ⵠΔΔΔᐃⵠᐃ.info.translate.x = this.ⲆⲆⲆⲆⲆᐃⵠ.info.translate.x;
            this.ⵠΔΔΔᐃⵠᐃ.info.translate.y = 240;
        };
        this.ΔΔᐃⲆᐃΔⵠ = function () {
            var a = 12 + Math.floor((10 + this.ΔⲆᐃⵠⵠᐃΔ.info.ᐃⲆ[0].width) * Math.floor((3 + nx.ⵠᐃΔⵠ.ⵠⵠⵠⲆᐃ.length) / 4) + 35);
            this.ΔⲆᐃⵠⵠᐃΔ.info.translate.x = a;
            this.ΔⲆᐃⵠⵠᐃΔ.info.translate.y = 36;
            a += 83;
            this.ᐃⵠⲆⲆⲆΔⵠ.info.translate.x = a;
            this.ᐃⵠⲆⲆⲆΔⵠ.info.translate.y = 36;
            this.ⲆⲆⲆΔᐃΔΔ.info.translate.x = a;
            this.ⲆⲆⲆΔᐃΔΔ.info.translate.y = 36;
            this.ⲆΔⵠⵠⵠᐃᐃ.info.translate.x = a;
            this.ⲆΔⵠⵠⵠᐃᐃ.info.translate.y = 36;
            this.ΔᐃᐃΔⲆⲆΔ.info.translate.x = a;
            this.ΔᐃᐃΔⲆⲆΔ.info.translate.y = 36;
            this.ᐃΔᐃᐃᐃᐃⲆ.info.translate.x = a;
            this.ᐃΔᐃᐃᐃᐃⲆ.info.translate.y = 36;
        };
        this.ᐃⲆΔⵠⵠⲆΔ = function () {
            var a = 12 + Math.floor(Math.floor((3 + nx.ⵠᐃΔⵠ.ⵠⵠⵠⲆᐃ.length) / 4) * (10 + this.ᐃᐃⲆⵠΔᐃΔ.info.ᐃⲆ[0].width) + 35);
            this.ᐃᐃⲆⵠΔᐃΔ.info.translate.x = a;
            this.ᐃᐃⲆⵠΔᐃΔ.info.translate.y = 36;
            a += 83;
            this.ⲆⲆΔⵠΔⲆᐃ.info.translate.x = a;
            this.ⲆⲆΔⵠΔⲆᐃ.info.translate.y = 36;
        };
        this.ᐃⲆᐃⵠΔⲆⲆ = function () {
            var a = Math.floor((10 + this.ᐃⵠᐃⵠⵠⲆΔ.info.ᐃⲆ[0].width) * Math.floor((3 + nx.ⵠᐃΔⵠ.ⵠⵠⵠⲆᐃ.length) / 4) + 35);
            this.ᐃⵠᐃⵠⵠⲆΔ.info.translate.x = a;
            this.ᐃⵠᐃⵠⵠⲆΔ.info.translate.y = 22;
        };
        this.ΔⵠⵠⲆⵠᐃⲆ = function () {
            var a = nx.ΔⲆΔⲆ.Ⲇⵠᐃⵠⵠ;
            if (a.length > 0) {
                var b = Math.floor((no - (a[0].info.width + 5) * nx.ΔⲆΔⲆ.max) / 2);
            }
            for (var c = 0; c < a.length; c++) {
                a[c].info.translate.x = b + c * (a[c].info.width + 5);
                a[c].info.translate.y = oo - a[c].info.width - 10;
                this.ᐃⲆᐃᐃⲆ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
                this.ᐃⲆᐃᐃⲆ[a[c].id].info.translate.y = a[c].info.translate.y - this.ᐃⲆᐃᐃⲆ[a[c].id].info.ᐃⲆ[0].height - 6;
            }
        };
        var n;
        var o = 0;
        function p() {
            j.ᐃⵠⲆ();
            if (++o == 30) {
                j.ⲆⲆᐃᐃΔΔΔ();
                j.ᐃⵠⲆ();
                return;
            }
            Gf.setTimeout(p, 33);
        }
        this.ᐃᐃᐃᐃⲆ = function (a) {
            if (nx.ΔⵠⲆᐃⵠ.open) {
                nx.ΔⵠⲆᐃⵠ.ᐃᐃᐃᐃⲆ();
            }
            if (nx.ⲆⵠⵠᐃⲆ.open) {
                nx.ⲆⵠⵠᐃⲆ.ᐃᐃᐃᐃⲆ();
            }
            document.getElementById("team_box").style.display = "none";
            j.ᐃΔⲆⲆⲆ.style.display = "none";
            j.ᐃΔⲆⲆⲆ.open = false;
            j.sign.style.display = "none";
            j.sign.open = false;
            document.getElementById("shop_starterkit").style.display = "none";
            document.getElementById("home_craft").style.display = "none";
            document.getElementById("recipe_craft").style.display = "none";
            j.ⲆΔᐃⵠ.open = false;
            document.getElementById("option_in_game").style.display = "none";
            j.options.open = false;
            document.getElementById("sure_delete").style.display = "none";
            j.ᐃⲆⵠⵠ.open = vn;
            document.getElementById("cancel_sure_delete").style.display = "none";
            j.ᐃⵠΔⵠᐃ.open = false;
            document.getElementById("chronoquest").style.display = "none";
            j.ⵠΔΔΔ.open = false;
            n = a;
            j.ⲆΔᐃⵠΔⲆⵠ();
            j.ⲆⲆ.style.cursor = j.ᐃⲆⲆⲆⵠᐃⲆ;
            qx.ᐃᐃᐃᐃⲆ();
            g = -1;
            q();
            wx();
        };
        var g = -1;
        function q() {
            j.ᐃⵠⲆ();
            if (++g == 30) {
                j.stop();
                n();
                return;
            }
            Gf.setTimeout(q, 33);
        }
        this.ⲆΔΔⲆⵠ = false;
        this.stop = function () {
            this.ⲆΔΔⲆⵠ = false;
        };
        this.ΔΔⵠⵠΔ = function () {
            ⲆΔⲆΔ.ⲆᐃⲆⵠⵠᐃΔⲆⵠ();
            j.ⲆΔΔⲆⵠ = Dk;
            g = -1;
            o = 0;
            p();
        };
        this.ᐃⵠⲆ = function () {
            this.ᐃΔⵠΔ.translate.x = no - this.ᐃΔⵠΔ.ᐃⲆ.width - 10;
            this.ᐃΔⵠΔ.translate.y = 5;
            mx.ΔΔΔΔⲆ.translate.x = this.ᐃΔⵠΔ.translate.x - ΔⲆ[725][0].width - 85;
            mx.ΔΔΔΔⲆ.translate.y = 10;
            this.ⲆΔᐃⵠ.button.info.translate.x = this.ᐃΔⵠΔ.translate.x - ΔⲆ[708][0].width - 10;
            this.ⲆΔᐃⵠ.button.info.translate.y = 10;
            this.ⵠΔΔΔ.button.info.translate.x = this.ᐃΔⵠΔ.translate.x - ΔⲆ[755][0].width - 20;
            this.ⵠΔΔΔ.button.info.translate.y = this.ⲆΔᐃⵠ.button.info.translate.y + ΔⲆ[708][0].height + 5;
            this.options.button.info.translate.x = this.ᐃΔⵠΔ.translate.x - ΔⲆ[727][0].width - 20;
            this.options.button.info.translate.y = this.ⵠΔΔΔ.button.info.translate.y + ΔⲆ[727][0].height + 18;
            this.ᐃⵠΔΔ.ⲆⵠΔⵠΔⵠⲆ.info.translate.x = this.ᐃΔⵠΔ.translate.x - ΔⲆ[727][0].width - 20;
            this.ᐃⵠΔΔ.ⲆⵠΔⵠΔⵠⲆ.info.translate.y = this.options.button.info.translate.y + ΔⲆ[783][0].height;
            this.ᐃⵠΔΔ.ⵠⵠᐃᐃΔᐃⵠ.info.translate.x = this.ᐃΔⵠΔ.translate.x - ΔⲆ[727][0].width - 20;
            this.ᐃⵠΔΔ.ⵠⵠᐃᐃΔᐃⵠ.info.translate.y = this.options.button.info.translate.y + ΔⲆ[783][0].height;
            this.ᐃΔⲆⲆⲆ.button.info.translate.x = this.ᐃΔⵠΔ.translate.x - ΔⲆ[795][0].width - 20;
            this.ᐃΔⲆⲆⲆ.button.info.translate.y = this.ᐃⵠΔΔ.ⲆⵠΔⵠΔⵠⲆ.info.translate.y + ΔⲆ[795][0].height;
            nx.ᐃΔᐃⲆΔ.translate.x = this.ᐃΔⵠΔ.translate.x - 63 - 85;
            nx.ᐃΔᐃⲆΔ.translate.y = 100;
            nx.ΔⵠΔΔᐃ.translate.x = this.ᐃΔⵠΔ.translate.x - ΔⲆ[517].width - 85;
            nx.ΔⵠΔΔᐃ.translate.y = nx.ᐃΔᐃⲆΔ.translate.y + 10 + ΔⲆ[546].height;
            this.ⵠⵠⵠᐃᐃ.translate.y = oo - 3 - 193;
            this.ⵠⵠⵠᐃᐃ.translate.x = no - 3 - 193;
            this.ⲆΔⵠᐃ.translate.x = 5;
            this.ⲆΔⵠᐃ.translate.y = oo - this.ⲆΔⵠᐃ.ᐃⲆ.height - 5;
            this.ⲆᐃⲆΔᐃ.button.info.translate.x = ro - 91 / 2;
            this.ⲆᐃⲆΔᐃ.button.info.translate.y = 50;
            this.ΔⲆⲆⵠⵠΔΔ();
            this.ΔⵠⵠⲆⵠᐃⲆ();
            this.ᐃⲆᐃᐃⲆᐃᐃ();
            this.ᐃⲆᐃⵠΔⲆⲆ();
            this.ᐃⲆΔⵠⵠⲆΔ();
            this.ΔΔᐃⲆᐃΔⵠ();
            this.ΔⲆΔᐃⵠⲆⵠ();
            this.ΔᐃⲆᐃᐃⵠⲆΔΔ();
            this.sign.ΔΔⵠΔⲆⲆΔ();
            Dp();
            nx.ΔⵠⲆᐃⵠ.ᐃⵠⲆ();
            nx.ⲆⵠⵠᐃⲆ.ᐃⵠⲆ();
            this.ᐃΔⲆᐃⵠΔᐃⲆⲆ.ᐃⵠⲆ();
            this.ⲆΔᐃⵠ.ᐃⲆⵠΔᐃⵠⲆ.ᐃⵠⲆ();
            this.ⲆΔᐃⵠ.list.ᐃⵠⲆ();
            this.ᐃⲆⵠⵠ.ᐃⵠⲆ();
            this.ᐃⵠΔⵠᐃ.ᐃⵠⲆ();
            this.ⵠΔΔΔ.ᐃⵠⲆ();
            this.ⲆᐃⲆΔᐃ.ᐃⵠⲆ();
            this.options.ᐃⵠⲆ();
            this.ᐃΔⲆⲆⲆ.ᐃⵠⲆ();
            this.sign.ᐃⵠⲆ();
            var a = 0;
            if (o != 30) {
                a = 1500 / (o + 1) - 50;
            }
            if (g != -1) {
                a = -(1500 / (30 - g + 1) - 48);
            }
            this.ⲆᐃⲆΔᐃ.button.info.translate.y -= a > 0 ? a : -a;
            this.ᐃΔⵠΔ.translate.y -= a > 0 ? a : -a;
            nx.ᐃΔᐃⲆΔ.translate.y -= a > 0 ? a : -a;
            nx.ΔⵠΔΔᐃ.translate.y -= a > 0 ? a : -a;
            this.ⲆΔᐃⵠ.button.info.translate.y -= a > 0 ? a : -a;
            this.ⵠΔΔΔ.button.info.translate.y -= a > 0 ? a : -a;
            this.options.button.info.translate.y -= a > 0 ? a : -a;
            this.ᐃΔⲆⲆⲆ.button.info.translate.y -= a > 0 ? a : -a;
            this.ᐃⵠΔΔ.ⲆⵠΔⵠΔⵠⲆ.info.translate.y -= a > 0 ? a : -a;
            this.ᐃⵠΔΔ.ⵠⵠᐃᐃΔᐃⵠ.info.translate.y -= a > 0 ? a : -a;
            mx.ΔΔΔΔⲆ.translate.y -= a > 0 ? a : -a;
            this.ⲆΔⵠᐃ.translate.y -= a < 0 ? a : -a;
            this.ⵠⵠⵠᐃᐃ.translate.y -= a < 0 ? a : -a;
        };
        this.ⵠⲆᐃⵠΔᐃⵠΔⲆ = function () {
            if (!nx.ⲆᐃⵠⲆᐃ.enabled && !!this.ⲆΔⲆⵠᐃΔⲆ && !nx.ΔⵠⵠⵠⲆ) {
                qp();
            }
            Np();
            (function () {
                var a = mx.ⲆⲆΔ[0];
                if (mx.mode === 0 || mx.mode === 7 || mx.mode === 2 || mx.mode === 4 || mx.mode === 5 || mx.mode === 6 || mx.mode === 3) {
                    for (var b = 0; a.length > b; b++) {
                        a[b].ⲆᐃΔΔⵠΔⵠ();
                    }
                } else if (mx.mode === 1) {
                    for (b = 0; a.length > b; b++) {
                        if (nx.ⲆⲆⵠⵠᐃΔⲆ || nx.ΔⵠΔΔᐃ.enabled || a[b].ΔΔⲆⲆ.ⲆΔΔⵠⲆ !== "spectator") {
                            a[b].ⲆᐃΔΔⵠΔⵠ();
                        }
                    }
                }
            })();
            if (this.ⲆΔⲆⵠᐃΔⲆ) {
                Tp();
                if (this.ᐃⲆⵠⲆΔΔⲆ === 1) {
                    this.ⲆΔᐃⵠ.button.Δⵠᐃⵠ(f);
                }
                if (mx.mode !== 2 && mx.mode !== 4 && mx.mode !== 5 && this.ᐃΔΔⵠⲆΔΔ === 1) {
                    this.ⵠΔΔΔ.button.Δⵠᐃⵠ(f);
                }
                this.options.button.Δⵠᐃⵠ(f);
                if (this.ⵠⲆⲆᐃᐃΔⵠ === 1) {
                    this.ᐃΔⲆⲆⲆ.button.Δⵠᐃⵠ(f);
                }
                if (qx.ΔΔⵠⵠΔ) {
                    this.ᐃⵠΔΔ.ⲆⵠΔⵠΔⵠⲆ.Δⵠᐃⵠ(f);
                } else {
                    this.ᐃⵠΔΔ.ⵠⵠᐃᐃΔᐃⵠ.Δⵠᐃⵠ(f);
                }
                Wp();
                Fu();
                this.ⲆΔⵠᐃ.Δⵠᐃⵠ();
                Lp();
                Gu();
                Sp();
                Fp();
                Zp();
                Bp();
                Ap();
                (function () {
                    if (!nx.ᐃⲆᐃⲆ.open && !nx.Δᐃⵠⵠᐃ.open && !nx.ᐃΔᐃⵠ.open && !nx.ⲆⲆⲆΔ.open && !nx.ⵠᐃⲆⲆ.open) {
                        nx.ⲆⲆΔⵠΔ.open = false;
                        var a = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
                        var b = 100;
                        if (a) {
                            for (var c = 0; c < mx.ⲆⲆΔ[35].length; c++) {
                                var d = mx.ⲆⲆΔ[35][c];
                                var e = Z.ᐃⵠᐃᐃ(d, a);
                                if (b > e) {
                                    b = e;
                                    nx.ⲆⲆΔⵠΔ.open = vr;
                                    nx.ⲆⲆΔⵠΔ.ΔⵠⵠⲆ = d.ΔⵠⵠⲆ;
                                    nx.ⲆⲆΔⵠΔ.ΔᐃⲆΔΔ = d.id;
                                }
                            }
                        }
                    }
                })();
                kp();
                wp();
                fp();
                yp();
                Dp();
                zp();
            }
            if (nx.ⲆᐃⵠⲆᐃ.enabled) {
                Pp();
            }
            Mp();
            if (this.ⲆΔⲆⵠᐃΔⲆ && this.ΔᐃᐃⲆⲆⵠⵠ === 1) {
                Hp();
            }
            nx.ΔΔⵠᐃⲆⲆⵠ.Δⵠᐃⵠ();
            nx.alert.Δⵠᐃⵠ("#FFF", "#000");
            if (this.ⲆΔⲆⵠᐃΔⲆ) {
                nx.ⲆᐃⵠⲆᐃ.Δⵠᐃⵠ();
                nx.ⲆᐃⲆΔᐃ.Δⵠᐃⵠ();
                nx.ΔⲆΔⲆ.ᐃⲆⵠⲆⲆⵠⲆ.Δⵠᐃⵠ(sx.ᐃⲆᐃᐃ.x, sx.ᐃⲆᐃᐃ.y);
            }
            xp();
        };
        this.ᐃᐃⲆΔᐃⲆᐃΔⵠ = function () {
            nx.ᐃΔΔ.ᐃⵠⲆ();
            nx.ⲆΔⵠᐃ.ᐃⵠⲆ();
            if (!nx.reconnect.enabled && nx.ᐃⵠΔⵠΔ) {
                nx.control.ᐃⵠⲆ();
                nx.ᐃΔᐃⲆΔ.ᐃⵠⲆ();
            }
            mx.ᐃⵠⲆ();
            this.ⵠΔΔΔ.ⵠᐃⵠⵠΔΔΔⵠᐃ();
        };
        this.ΔᐃᐃⲆⲆᐃᐃⲆⲆ = function () {
            vw();
        };
        this.ΔⲆᐃⲆΔⲆⵠⲆΔ = function () {
            ⲆΔⲆΔ.ΔⵠⵠΔⵠⲆⲆΔⲆ();
            ⲆΔⲆΔ.ⵠⲆᐃⲆΔⲆⲆⲆΔ();
            ⲆΔⲆΔ.ΔΔᐃⲆᐃⲆᐃΔⲆ();
            ⲆΔⲆΔ.ᐃⲆᐃⵠⲆⲆᐃⵠⲆ();
        };
        this.Δⵠᐃⵠ = function () {
            if (!nx.reconnect.enabled && nx.ᐃⵠΔⵠΔ) {
                this.ΔⲆᐃⲆΔⲆⵠⲆΔ();
            }
            qx.ⵠᐃⵠᐃᐃΔΔⵠⲆ();
            this.ᐃᐃⲆΔᐃⲆᐃΔⵠ();
            if (jx.ⲆⲆΔⲆᐃⲆⲆ !== 1) {
                this.ΔᐃᐃⲆⲆᐃᐃⲆⲆ();
                this.ⵠⲆᐃⵠΔᐃⵠΔⲆ();
            } else {
                var a = jb.ⲆΔⲆΔΔⵠⲆ;
                Cp(f, a, ro - a.width / 4, vo - a.height / 4, a.width / 2, a.height / 2);
            }
        };
        this.ΔᐃⵠΔⲆⲆⲆ = function (a) {
            if (!nx.ΔⵠⲆᐃⵠ.open && !nx.ⲆⵠⵠᐃⲆ.open) {
                if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = false;
            }
            if (nx.ΔⵠⲆᐃⵠ.open && a.keyCode === 27) {
                nx.ΔⵠⲆᐃⵠ.ᐃᐃᐃᐃⲆ();
            } else if (nx.ⲆⵠⵠᐃⲆ.open && a.keyCode === 27) {
                nx.ⲆⵠⵠᐃⲆ.ᐃᐃᐃᐃⲆ();
            } else if (nx.ΔⵠⲆᐃⵠ.open || nx.ⲆⵠⵠᐃⲆ.open || a.keyCode != 79 || g != -1) {
                if (a.keyCode == 13 && g == -1) {
                    if (nx.ⲆⵠⵠᐃⲆ.open) {
                        nx.ⲆⵠⵠᐃⲆ.ᐃΔΔΔⲆᐃᐃ();
                    } else {
                        nx.ΔⵠⲆᐃⵠ.ΔΔⵠⵠΔ();
                    }
                } else if (!nx.ΔⵠⲆᐃⵠ.open && !nx.ⲆⵠⵠᐃⲆ.open) {
                    if (a.keyCode === 82) {
                        nx.ᐃΔᐃⲆΔ.ⲆⲆᐃⵠᐃⲆᐃ();
                    } else if (a.keyCode !== 80 || mx.mode !== 1 || nx.ⲆⲆⵠⵠᐃΔⲆ) {
                        if (a.keyCode >= 49 && a.keyCode <= 57) {
                            if (nx.ⵠᐃΔⵠ.id < 0) {
                                var b = a.keyCode - 49;
                                var c = nx.ΔⲆΔⲆ.Ⲇⵠᐃⵠⵠ[b];
                                if (c) {
                                    ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(c.id, b);
                                }
                            }
                        } else if (a.keyCode == 89) {
                            nx.ΔΔⲆⵠⵠᐃΔ = !nx.ΔΔⲆⵠⵠᐃΔ;
                        } else if (a.keyCode == 71) {
                            nx.ⵠᐃΔⵠ.ΔⲆⵠⲆΔⵠᐃⵠΔ();
                        }
                    } else {
                        nx.ΔⵠΔΔᐃ.ⲆⲆᐃⵠᐃⲆᐃ();
                    }
                }
            } else {
                nx.ⲆⵠⵠᐃⲆ.ΔⲆⵠᐃᐃⲆⲆΔΔ();
            }
            rx.up(a);
        };
        this.ΔΔⵠΔⵠⲆΔ = function (a) {
            rx.down(a);
            if (!nx.ΔⵠⲆᐃⵠ.open && !nx.ⲆⵠⵠᐃⲆ.open) {
                if (8 == a.keyCode) a.preventDefault();
                if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = true;
                if (a.code === Settings.Autofarm.k) Settings.Autofarm.e = !Settings.Autofarm.e;
                if (a.code === Settings.AutoRecycle.k) Settings.AutoRecycle.e = !Settings.AutoRecycle.e;
                if (a.code === Settings.AutoCraft.k) Settings.AutoCraft.e = !Settings.AutoCraft.e;
            }
        };
        this.ᐃⵠⲆⲆΔΔΔ = function (b) {
            sx.ᐃⲆᐃᐃ = lf(j.ⲆⲆ, b);
            var c = false;
            if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0) {
                j.ⵠⵠⵠᐃᐃ.focus(sx.ᐃⲆᐃᐃ);
            }
            var d = nx.ᐃⲆᐃⲆ;
            if (nx.ⵠᐃΔⵠ.id < 0 && d.id >= 0 && (!nx.ᐃⲆᐃⲆ.lock || nx.id === nx.ᐃⲆᐃⲆ.ΔⵠⵠⲆ)) {
                c |= j.ⲆΔⵠ[nx.ᐃⲆᐃⲆ.id].ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
            }
            var e = nx.ᐃΔᐃⵠ;
            if (e.open && e.ⲆΔⵠᐃᐃ > 0) {
                c |= j.ⲆⲆΔⵠΔⲆᐃ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
            }
            var f = nx.ⵠᐃⲆⲆ;
            if (f.open && f.ΔⲆΔⲆⵠⵠⲆ > 0) {
                c |= j.ᐃⵠⲆⲆⲆΔⵠ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
                c |= j.ⲆⲆⲆΔᐃΔΔ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
                c |= j.ⲆΔⵠⵠⵠᐃᐃ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
                c |= j.ΔᐃᐃΔⲆⲆΔ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
                c |= j.ᐃΔᐃᐃᐃᐃⲆ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
            }
            var a = nx.ⲆⲆⲆΔ;
            if (a.open && a.ⲆⲆⲆⲆⵠⵠⵠ > 0) {
                c |= j.ⵠΔΔΔᐃⵠᐃ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
            }
            if (nx.sign.open) {
                c |= j.sign.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
            }
            if (!nx.ᐃⲆᐃⲆ.lock) {
                if (nx.ᐃⲆᐃⲆ.ⵠⲆⵠⵠΔᐃⵠ) {
                    c |= j.ᐃᐃⲆⵠⵠⲆᐃ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
                }
            }
            if (nx.ᐃⲆᐃⲆ.ᐃⵠⵠᐃⵠⵠⲆ) {
                c |= j.ΔᐃⲆⲆΔΔⲆ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
            }
            if (nx.ⵠᐃΔⵠ.id < 0 && !j.ⲆΔᐃⵠ.open && !j.ᐃⲆⵠⵠ.open && !j.ᐃⵠΔⵠᐃ.open && !j.ⵠΔΔΔ.open && !j.options.open && !j.ᐃΔⲆⲆⲆ.open) {
                for (var k = nx.ΔⲆΔⲆ.Ⲇⵠᐃⵠⵠ, m = 0; m < k.length; m++) {
                    var n = k[m].ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
                    c |= n;
                    if (n) {
                        nx.ΔⲆΔⲆ.ᐃⲆⵠⲆⲆⵠⲆ.start(m, sx.ᐃⲆᐃᐃ);
                    }
                    if (d.open && (d.id < 0 || k[m].id == d.id) || nx.Δᐃⵠⵠᐃ.open && k[m].id === 109 || nx.ⲆⲆΔⵠΔ.open && k[m].id === 180 || nx.ⲆⲆⲆΔ.open && (k[m].id === 109 || k[m].id === 131) || nx.ᐃΔᐃⵠ.open && k[m].id === 134 || nx.ⵠᐃⲆⲆ.open && k[m].id === 109) {
                        c |= j.ᐃⲆᐃᐃⲆ[k[m].id].ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
                    }
                }
            }
            if (nx.ΔᐃⵠⵠⲆ.open) {
                c |= j.ΔᐃⵠⵠⲆ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
            }
            if (j.ᐃΔᐃⲆⲆ != -1) {
                if (c |= j.ⵠᐃΔᐃⲆ[j.ᐃΔᐃⲆⲆ].button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of)) {
                    var o = true;
                }
            } else {
                o = nq;
            }
            if (nx.ⵠᐃΔⵠ.id < 0 && nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !o && !j.ⲆΔᐃⵠ.open && !j.ᐃⲆⵠⵠ.open && !j.options.open && !j.ᐃⵠΔⵠᐃ.open && !j.ᐃΔⲆⲆⲆ.open && !nx.ΔⵠⵠⵠⲆ) {
                k = nx.ⵠᐃΔⵠ.ⵠⵠⵠⲆᐃ;
                m = 0;
                for (; k.length > m; m++) {
                    c |= k[m].ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
                }
            }
            if (nx.ⵠᐃΔⵠ.id < 0 && nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && nx.ⲆᐃⲆΔᐃ.open && !j.ⲆΔᐃⵠ.open && !j.ᐃⲆⵠⵠ.open && !j.options.open && !j.ᐃⵠΔⵠᐃ.open && !j.ⵠΔΔΔ.open && !j.ᐃΔⲆⲆⲆ.open) {
                c |= j.ⲆᐃⲆΔᐃ.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
            }
            if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !j.ᐃⲆⵠⵠ.open && !j.options.open && !j.ᐃⵠΔⵠᐃ.open && !j.ⵠΔΔΔ.open && !j.ᐃΔⲆⲆⲆ.open) {
                c |= j.ⲆΔᐃⵠ.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
            }
            if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !j.ⲆΔᐃⵠ.open && !j.ᐃⲆⵠⵠ.open && !j.ᐃⵠΔⵠᐃ.open && !j.ⵠΔΔΔ.open && !j.ᐃΔⲆⲆⲆ.open) {
                c |= j.options.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
            }
            if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !j.ⲆΔᐃⵠ.open && !j.ᐃⲆⵠⵠ.open && !j.ᐃⵠΔⵠᐃ.open && !j.ⵠΔΔΔ.open && !j.options.open) {
                c |= j.ᐃΔⲆⲆⲆ.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
            }
            if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !j.ⲆΔᐃⵠ.open && !j.ᐃⲆⵠⵠ.open && !j.ᐃⵠΔⵠᐃ.open && !j.ⵠΔΔΔ.open && !j.options.open && !j.ᐃΔⲆⲆⲆ.open) {
                if (qx.ΔΔⵠⵠΔ) {
                    c |= j.ᐃⵠΔΔ.ⲆⵠΔⵠΔⵠⲆ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
                } else {
                    c |= j.ᐃⵠΔΔ.ⵠⵠᐃᐃΔᐃⵠ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
                }
            }
            if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !j.ⲆΔᐃⵠ.open && !j.ᐃΔⲆⲆⲆ.open && !j.ᐃⲆⵠⵠ.open && !j.options.open && !j.ᐃⵠΔⵠᐃ.open && mx.mode !== 2 && mx.mode !== 4 && mx.mode !== 5) {
                c |= j.ⵠΔΔΔ.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
            }
            if (!c && !j.ⲆΔᐃⵠ.open && !j.ᐃⲆⵠⵠ.open && !j.options.open && !j.ᐃⵠΔⵠᐃ.open && !j.ⵠΔΔΔ.open && !j.ᐃΔⲆⲆⲆ.open && !j.sign.open) {
                if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ >= 0) {
                    ⲆΔⲆΔ.ⲆᐃᐃⲆⲆΔⵠⵠΔ();
                } else if (!o) {
                    sx.down();
                }
            }
        };
        this.ΔⵠᐃΔⲆΔᐃ = function (c) {
            sx.ᐃⲆᐃᐃ = lf(j.ⲆⲆ, c);
            sx.up();
            if (!nx.ΔⲆΔⲆ.ᐃⲆⵠⲆⲆⵠⲆ.release()) {
                var d = nx.ᐃⲆᐃⲆ;
                var e = nx.Δᐃⵠⵠᐃ;
                var f = nx.ⲆⲆΔⵠΔ;
                var i = nx.ᐃΔᐃⵠ;
                var k = nx.ⵠᐃⲆⲆ;
                var m = nx.ⲆⲆⲆΔ;
                if (nx.control.attack) {
                    nx.control.attack = 0;
                    ⲆΔⲆΔ.ⵠΔⵠᐃⵠⵠⲆᐃᐃ();
                }
                if (j.ᐃΔᐃⲆⲆ != -1) {
                    var n = j.ⵠᐃΔᐃⲆ[j.ᐃΔᐃⲆⲆ].button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af);
                    var o = document.getElementById("team_box").style;
                    if (n && o.display == "inline-block") {
                        o.display = "none";
                        return;
                    }
                    if (n) {
                        j.ⵠᐃΔᐃⲆ[j.ᐃΔᐃⲆⲆ].action();
                    }
                }
                if (nx.ⵠᐃΔⵠ.id < 0 && d.id >= 0 && !j.ᐃⲆⵠⵠ.open) {
                    if (!nx.ᐃⲆᐃⲆ.lock || nx.id === nx.ᐃⲆᐃⲆ.ΔⵠⵠⲆ) {
                        if (n = j.ⲆΔⵠ[nx.ᐃⲆᐃⲆ.id].ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                            ⲆΔⲆΔ.ⲆΔᐃⵠΔᐃⲆⲆⲆ(d);
                        }
                    }
                }
                if ((i = nx.ᐃΔᐃⵠ).open && i.ⲆΔⵠᐃᐃ > 0 && !j.ᐃⲆⵠⵠ.open) {
                    if (n = j.ⲆⲆΔⵠΔⲆᐃ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                        ⲆΔⲆΔ.ⵠⲆΔᐃᐃⲆΔΔⵠ(i);
                    }
                }
                if ((k = nx.ⵠᐃⲆⲆ).open && k.ΔⲆΔⲆⵠⵠⲆ > 0 && !j.ᐃⲆⵠⵠ.open) {
                    switch (k.type) {
                        case 24:
                            if (n = j.ᐃⵠⲆⲆⲆΔⵠ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                                ⲆΔⲆΔ.ⵠⲆⵠᐃⲆᐃᐃ(k);
                            }
                            break;
                        case 25:
                            if (n = j.ⲆⲆⲆΔᐃΔΔ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                                ⲆΔⲆΔ.ⵠⲆⵠᐃⲆᐃᐃ(k);
                            }
                            break;
                        case 26:
                            if (n = j.ⲆΔⵠⵠⵠᐃᐃ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                                ⲆΔⲆΔ.ⵠⲆⵠᐃⲆᐃᐃ(k);
                            }
                            break;
                        case 27:
                            if (n = j.ΔᐃᐃΔⲆⲆΔ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                                ⲆΔⲆΔ.ⵠⲆⵠᐃⲆᐃᐃ(k);
                            }
                            break;
                        case 28:
                            if (n = j.ᐃΔᐃᐃᐃᐃⲆ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                                ⲆΔⲆΔ.ⵠⲆⵠᐃⲆᐃᐃ(k);
                            }
                    }
                }
                if ((m = nx.ⲆⲆⲆΔ).open && m.ⲆⲆⲆⲆⵠⵠⵠ > 0 && !j.ᐃⲆⵠⵠ.open) {
                    if (n = j.ⵠΔΔΔᐃⵠᐃ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                        ⲆΔⲆΔ.ᐃᐃⲆⲆⵠΔΔⵠⵠ(m);
                    }
                }
                if (nx.sign.open && !j.ᐃⲆⵠⵠ.open) {
                    if (n = j.sign.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                        j.sign.select();
                    }
                }
                if (!nx.ᐃⲆᐃⲆ.lock && !j.ᐃⲆⵠⵠ.open) {
                    if (nx.ᐃⲆᐃⲆ.ⵠⲆⵠⵠΔᐃⵠ && (n = j.ᐃᐃⲆⵠⵠⲆᐃ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af))) {
                        ⲆΔⲆΔ.ⵠᐃⲆⵠΔΔᐃᐃΔ(d);
                    }
                }
                if (nx.ᐃⲆᐃⲆ.ᐃⵠⵠᐃⵠⵠⲆ && !j.ᐃⲆⵠⵠ.open && (n = j.ΔᐃⲆⲆΔΔⲆ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af))) {
                    ⲆΔⲆΔ.ᐃⲆⲆᐃⲆⲆⲆⵠΔ(d);
                    if (ga) {
                        ga("send", "event", "Game", "lockpick");
                    }
                }
                if (nx.ΔᐃⵠⵠⲆ.open) {
                    if (n = j.ΔᐃⵠⵠⲆ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                        ⲆΔⲆΔ.ΔᐃⵠⵠⲆ();
                        if (ga) {
                            ga("send", "event", "Game", "resurrection");
                        }
                    }
                }
                if (nx.ⵠᐃΔⵠ.id < 0 && !nx.ⲆᐃⵠⲆᐃ.enabled && !j.ᐃⲆⵠⵠ.open) {
                    for (var l = nx.ΔⲆΔⲆ.Ⲇⵠᐃⵠⵠ, p = 0; p < l.length; p++) {
                        if (n = l[p].ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                            if (c.which != 1 || c.shiftKey) {
                                if ((c.which == 1 && c.shiftKey || c.which == 3) && nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0) {
                                    j.ᐃⲆⵠⵠ.ᐃᐃⵠᐃⲆΔᐃ(l[p].id);
                                }
                            } else {
                                ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(l[p].id, p);
                            }
                        } else if (d.open && (d.id < 0 || d.id === l[p].id)) {
                            if ((n = j.ᐃⲆᐃᐃⲆ[l[p].id].ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) && nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0) {
                                ⲆΔⲆΔ.ΔΔⵠᐃΔᐃᐃⲆΔ(d, l[p].id, c.shiftKey ? 10 : 1);
                            }
                        } else if (f.open && l[p].id === 180) {
                            if ((n = j.ᐃⲆᐃᐃⲆ[l[p].id].ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) && nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0) {
                                ⲆΔⲆΔ.ᐃΔⵠΔᐃⲆⲆⲆΔ(f);
                            }
                        } else if (e.open && l[p].id === 109) {
                            if ((n = j.ᐃⲆᐃᐃⲆ[l[p].id].ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) && nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0) {
                                ⲆΔⲆΔ.ⵠΔⲆᐃΔΔΔⵠⵠ(e, c.shiftKey ? 10 : 1);
                            }
                        } else if (i.open && l[p].id === 134) {
                            if ((n = j.ᐃⲆᐃᐃⲆ[l[p].id].ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) && nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0) {
                                ⲆΔⲆΔ.ⵠⵠᐃⵠΔᐃⵠΔᐃ(i, c.shiftKey ? 10 : 1);
                            }
                        } else if (k.open && l[p].id === 109) {
                            if ((n = j.ᐃⲆᐃᐃⲆ[l[p].id].ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) && nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0) {
                                ⲆΔⲆΔ.ᐃⲆΔΔᐃⲆⵠⵠⲆ(k, c.shiftKey ? 10 : 1);
                            }
                        } else if (m.open && (l[p].id === 109 || l[p].id === 131)) {
                            if ((n = j.ᐃⲆᐃᐃⲆ[l[p].id].ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) && nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0) {
                                if (l[p].id === 109) {
                                    ⲆΔⲆΔ.ⲆⲆⲆⲆᐃΔΔ(m, c.shiftKey ? 10 : 1, 0);
                                } else {
                                    ⲆΔⲆΔ.ⲆⲆⲆⲆᐃΔΔ(m, 0, c.shiftKey ? 10 : 1);
                                }
                            }
                        }
                    }
                }
                if (nx.ⵠᐃΔⵠ.id < 0 && nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !nx.ⲆᐃⵠⲆᐃ.enabled && !j.ᐃⲆⵠⵠ.open && !nx.ΔⵠⵠⵠⲆ) {
                    l = nx.ⵠᐃΔⵠ.ⵠⵠⵠⲆᐃ;
                    p = 0;
                    for (; p < l.length; p++) {
                        if (n = l[p].ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                            ΔⵠⲆⵠᐃ = ⲆΔⲆΔ.ⵠᐃΔⲆᐃᐃⲆⵠΔ(l[p].id);
                            if (ΔⵠⲆⵠᐃ && ga) {
                                ga("send", "event", "Game", "craft", js[Us[l[p].id].Ⲇⵠⵠⵠ].name);
                            }
                        }
                    }
                }
                if (nx.ⵠᐃΔⵠ.id < 0 && nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && nx.ⲆᐃⲆΔᐃ.open && !j.ᐃΔⲆⲆⲆ.open && !j.ⲆΔᐃⵠ.open && !j.ᐃⲆⵠⵠ.open && !j.options.open && !j.ᐃⵠΔⵠᐃ.open && !j.ⵠΔΔΔ.open) {
                    if (n = j.ⲆᐃⲆΔᐃ.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf)) {
                        px.ⲆᐃⲆΔᐃ.select();
                    }
                }
                if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !j.ⲆΔᐃⵠ.open && !j.ᐃⲆⵠⵠ.open && !j.ᐃΔⲆⲆⲆ.open && !j.ᐃⵠΔⵠᐃ.open && !j.ⵠΔΔΔ.open && !j.options.open) {
                    if (qx.ΔΔⵠⵠΔ) {
                        if (n = j.ᐃⵠΔΔ.ⲆⵠΔⵠΔⵠⲆ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                            qx.select();
                            if (ga) {
                                ga("send", "event", "Game", "sound on");
                            }
                        }
                    } else if (n = j.ᐃⵠΔΔ.ⵠⵠᐃᐃΔᐃⵠ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                        qx.select();
                        if (ga) {
                            ga("send", "event", "Game", "sound off");
                        }
                    }
                }
                if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !j.ⲆΔᐃⵠ.open && !j.ᐃⲆⵠⵠ.open && !j.ᐃⵠΔⵠᐃ.open && !j.ⵠΔΔΔ.open && !j.ᐃΔⲆⲆⲆ.open) {
                    if (n = j.options.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                        j.options.ᐃⵠⲆᐃⲆᐃⵠⵠᐃ();
                        if (ga) {
                            ga("send", "event", "Game", "options");
                        }
                    }
                }
                if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !j.ⲆΔᐃⵠ.open && !j.ᐃⲆⵠⵠ.open && !j.ᐃⵠΔⵠᐃ.open && !j.ⵠΔΔΔ.open && !j.options.open && j.ⵠⲆⲆᐃᐃΔⵠ === 1) {
                    if (n = j.ᐃΔⲆⲆⲆ.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                        j.ᐃΔⲆⲆⲆ.select();
                        if (ga) {
                            ga("send", "event", "Game", "market");
                        }
                    }
                }
                if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !j.ᐃⲆⵠⵠ.open && !j.ᐃΔⲆⲆⲆ.open && !j.options.open && !j.ᐃⵠΔⵠᐃ.open && !j.ⵠΔΔΔ.open && j.ᐃⲆⵠⲆΔΔⲆ === 1) {
                    if (n = j.ⲆΔᐃⵠ.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                        j.ⲆΔᐃⵠ.ⲆᐃⲆⲆᐃⲆᐃΔⵠ();
                        if (ga) {
                            ga("send", "event", "Game", "recipe");
                        }
                    }
                }
                if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !j.ⲆΔᐃⵠ.open && !j.ᐃⲆⵠⵠ.open && !j.options.open && !j.ᐃⵠΔⵠᐃ.open && !j.ᐃΔⲆⲆⲆ.open && mx.mode !== 2 && mx.mode !== 4 && mx.mode !== 5 && j.ᐃΔΔⵠⲆΔΔ === 1) {
                    if (n = j.ⵠΔΔΔ.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                        j.ⵠΔΔΔ.select();
                        if (ga) {
                            ga("send", "event", "Game", "quests");
                        }
                    }
                }
                if (nx.ⵠᐃΔⵠ.ΔⲆᐃⵠⵠ && c.which == 3) {
                    j.ᐃⵠΔⵠᐃ.ᐃᐃⵠᐃⲆΔᐃ();
                }
            }
        };
        this.ᐃᐃΔⲆᐃⵠⵠ = th;
        this.ΔⲆⵠᐃⵠᐃᐃ = function (b) {
            sx.ᐃⲆᐃᐃ = lf(j.ⲆⲆ, b);
            var d = false;
            px.ΔⲆⲆⲆΔ.display = 0;
            nx.ΔⲆΔⲆ.ᐃⲆⵠⲆⲆⵠⲆ.ⵠⲆΔᐃᐃ(sx.ᐃⲆᐃᐃ);
            if (j.ᐃΔᐃⲆⲆ != -1) {
                d |= j.ⵠᐃΔᐃⲆ[j.ᐃΔᐃⲆⲆ].button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
            }
            var e = nx.ᐃΔᐃⵠ;
            if (e.open && e.ⲆΔⵠᐃᐃ > 0) {
                d |= j.ⲆⲆΔⵠΔⲆᐃ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
            }
            var f = nx.ⵠᐃⲆⲆ;
            if (f.open && f.ΔⲆΔⲆⵠⵠⲆ > 0) {
                d |= j.ᐃⵠⲆⲆⲆΔⵠ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
                d |= j.ⲆⲆⲆΔᐃΔΔ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
                d |= j.ⲆΔⵠⵠⵠᐃᐃ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
                d |= j.ΔᐃᐃΔⲆⲆΔ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
                d |= j.ᐃΔᐃᐃᐃᐃⲆ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
            }
            var a = nx.ⲆⲆⲆΔ;
            if (a.open && a.ⲆⲆⲆⲆⵠⵠⵠ > 0) {
                d |= j.ⵠΔΔΔᐃⵠᐃ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
            }
            if (nx.sign.open) {
                d |= j.sign.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
            }
            var i = nx.ᐃⲆᐃⲆ;
            if (nx.ⵠᐃΔⵠ.id < 0 && i.id >= 0 && !nx.ⲆᐃⵠⲆᐃ.enabled) {
                if (!nx.ᐃⲆᐃⲆ.lock || nx.id === nx.ᐃⲆᐃⲆ.ΔⵠⵠⲆ) {
                    d |= j.ⲆΔⵠ[i.id].ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
                }
            }
            if (nx.ΔᐃⵠⵠⲆ.open) {
                d |= j.ΔᐃⵠⵠⲆ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
            }
            if (!nx.ᐃⲆᐃⲆ.lock && !nx.ⲆᐃⵠⲆᐃ.enabled) {
                if (nx.ᐃⲆᐃⲆ.ⵠⲆⵠⵠΔᐃⵠ) {
                    d |= j.ᐃᐃⲆⵠⵠⲆᐃ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
                }
            }
            if (nx.ᐃⲆᐃⲆ.ᐃⵠⵠᐃⵠⵠⲆ && !nx.ⲆᐃⵠⲆᐃ.enabled) {
                d |= j.ΔᐃⲆⲆΔΔⲆ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
            }
            if (nx.ⵠᐃΔⵠ.id < 0 && !nx.ⲆᐃⵠⲆᐃ.enabled) {
                for (var k = nx.ΔⲆΔⲆ.Ⲇⵠᐃⵠⵠ, m = 0; m < k.length; m++) {
                    var n = k[m].ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
                    d |= px.ΔⲆⲆⲆΔ.ⵠⵠΔΔ(n, k[m], 0);
                    if (i.open && (i.id < 0 || k[m].id == i.id) || nx.Δᐃⵠⵠᐃ.open && k[m].id == 109 || nx.ⲆⲆΔⵠΔ.open && k[m].id === 180 || nx.ⲆⲆⲆΔ.open && (k[m].id == 109 || k[m].id == 131) || nx.ᐃΔᐃⵠ.open && k[m].id == 134 || nx.ⵠᐃⲆⲆ.open && k[m].id == 109) {
                        d |= j.ᐃⲆᐃᐃⲆ[k[m].id].ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
                    }
                }
            }
            if (nx.ⵠᐃΔⵠ.id < 0 && nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !nx.ⲆᐃⵠⲆᐃ.enabled && !nx.ΔⵠⵠⵠⲆ) {
                k = nx.ⵠᐃΔⵠ.ⵠⵠⵠⲆᐃ;
                m = 0;
                for (; m < k.length; m++) {
                    n = false;
                    n = k[m].ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
                    d |= px.ΔⲆⲆⲆΔ.ⵠⵠΔΔ(n, k[m], 1);
                }
            }
            if (nx.ⵠᐃΔⵠ.id < 0 && nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !!nx.ⲆᐃⲆΔᐃ.open && !j.ⲆΔᐃⵠ.open && !j.ᐃⲆⵠⵠ.open && !j.options.open && !j.ᐃⵠΔⵠᐃ.open && !j.ⵠΔΔΔ.open && !j.ᐃΔⲆⲆⲆ.open) {
                d |= j.ⲆᐃⲆΔᐃ.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
            }
            if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !j.ᐃⲆⵠⵠ.open && !j.options.open && !j.ᐃⵠΔⵠᐃ.open && !j.ⵠΔΔΔ.open && !j.ᐃΔⲆⲆⲆ.open && j.ᐃⲆⵠⲆΔΔⲆ === 1) {
                d |= j.ⲆΔᐃⵠ.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
            }
            if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !j.ⲆΔᐃⵠ.open && !j.ᐃⲆⵠⵠ.open && !j.ᐃⵠΔⵠᐃ.open && !j.ⵠΔΔΔ.open && !j.ᐃΔⲆⲆⲆ.open) {
                d |= j.options.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
            }
            if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !j.ⲆΔᐃⵠ.open && !j.ᐃⲆⵠⵠ.open && !j.ᐃⵠΔⵠᐃ.open && !j.ⵠΔΔΔ.open && !j.options.open && j.ⵠⲆⲆᐃᐃΔⵠ === 1) {
                d |= j.ᐃΔⲆⲆⲆ.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
            }
            if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !j.ⲆΔᐃⵠ.open && !j.ᐃⲆⵠⵠ.open && !j.ᐃⵠΔⵠᐃ.open && !j.ⵠΔΔΔ.open && !j.options.open && !j.ᐃΔⲆⲆⲆ.open) {
                if (qx.ΔΔⵠⵠΔ) {
                    d |= j.ᐃⵠΔΔ.ⲆⵠΔⵠΔⵠⲆ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
                } else {
                    d |= j.ᐃⵠΔΔ.ⵠⵠᐃᐃΔᐃⵠ.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
                }
            }
            if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ < 0 && !j.ⲆΔᐃⵠ.open && !j.ᐃⲆⵠⵠ.open && !j.options.open && !j.ᐃⵠΔⵠᐃ.open && !j.ᐃΔⲆⲆⲆ.open && mx.mode !== 2 && mx.mode !== 4 && Jf.ᐃⲆΔⵠⲆΔⲆΔⵠ !== mx.mode && j.ᐃΔΔⵠⲆΔΔ === 1) {
                d |= j.ⵠΔΔΔ.button.ⵠⵠΔΔ(j.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
            }
            if (j.ᐃᐃΔⲆᐃⵠⵠ !== d) {
                j.ᐃᐃΔⲆᐃⵠⵠ = d;
                c.style.cursor = d ? j.ⲆⲆΔᐃΔΔΔ : j.ᐃⲆⲆⲆⵠᐃⲆ;
            }
        };
        this.ⲆⲆᐃᐃΔΔΔ = function () {
            Gf.addEventListener("mousedown", this.ᐃⵠⲆⲆΔΔΔ, false);
            Gf.addEventListener("mouseup", this.ΔⵠᐃΔⲆΔᐃ, zj);
            Gf.addEventListener("mousemove", this.ΔⲆⵠᐃⵠᐃᐃ, ie);
            Gf.addEventListener("keyup", this.ΔᐃⵠΔⲆⲆⲆ, nh);
            Gf.addEventListener("keydown", this.ΔΔⵠΔⵠⲆΔ, false);
        };
        this.ⲆΔᐃⵠΔⲆⵠ = function () {
            Gf.removeEventListener("mousedown", this.ᐃⵠⲆⲆΔΔΔ, Mr);
            Gf.removeEventListener("mouseup", this.ΔⵠᐃΔⲆΔᐃ, gj);
            Gf.removeEventListener("mousemove", this.ΔⲆⵠᐃⵠᐃᐃ, false);
            Gf.removeEventListener("keyup", this.ΔᐃⵠΔⲆⲆⲆ, el);
            Gf.removeEventListener("keydown", this.ΔΔⵠΔⵠⲆΔ, false);
        };
    }
    function Lw(i, u) {
        this.ⲆⲆ = i;
        this.ᐃ = u;
        if (Gf.navigator.userAgent.indexOf("Edge") > -1) {
            this.ᐃⲆⲆⲆⵠᐃⲆ = "default";
            this.ⲆⲆΔᐃΔΔΔ = "pointer";
        } else {
            this.ᐃⲆⲆⲆⵠᐃⲆ = "url('img/cursor0.png'), default";
            this.ⲆⲆΔᐃΔΔΔ = "url('img/cursor1.png'), pointer";
        }
        var B = this;
        function e(c, e, f, i, j) {
            var a = this;
            for (var k = e + 9, m = 0, n = i, o = e; k > o; o++) {
                B.buttons[o].info.callback = b;
                B.buttons[o].info.ᐃⲆᐃⵠΔΔⲆᐃⲆ = c;
            }
            function p() {
                var a = c[n];
                jx.ΔⲆᐃⲆⵠⵠⵠ = bf(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, 10, 8);
                if (fk !== a.level) {
                    jx.ΔΔⲆΔⵠᐃⲆ = bf("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
                } else {
                    jx.ΔΔⲆΔⵠᐃⲆ = bf("by " + a.Ⲇᐃⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, Go, 10, 8);
                }
            }
            function b() {
                if (n !== this.ⵠⲆⲆΔⵠⵠᐃ && this.ⵠⲆⲆΔⵠⵠᐃ !== -1) {
                    if (this.ᐃⵠΔⲆᐃΔⲆ > 0) {
                        if (ᐃΔⲆⵠⵠⲆΔ === e) {
                            C(w, ia, "none");
                        } else {
                            C(A, ia, "none");
                        }
                    } else if (e === ᐃΔⲆⵠⵠⲆΔ) {
                        C(w, ja, "inline-block");
                    } else {
                        C(A, ja, "inline-block");
                    }
                    n = this.ⵠⲆⲆΔⵠⵠᐃ;
                    f(this.ⵠⲆⲆΔⵠⵠᐃ);
                    p();
                }
            }
            this.ⲆⲆᐃΔΔ = function () {
                for (var a = e, b = m * 3; a < k && b < c.length; a++, b++) {
                    if (Mb.ᐃΔⲆⵠᐃᐃⵠ !== c[b].ᐃⵠⵠ || j[b] !== 0) {
                        B.buttons[a].info.ⵠⲆⲆΔⵠⵠᐃ = b;
                        for (var d = 0; d < 3; d++) {
                            B.buttons[a].info.ᐃⲆ[d] = ⵠᐃⵠᐃΔ[c[b].ᐃⵠⵠ][d];
                            B.buttons[a].info.active = ja;
                            B.buttons[a].info.ᐃⵠΔⲆᐃΔⲆ = j[b];
                        }
                    } else {
                        B.buttons[a].info.ⵠⲆⲆΔⵠⵠᐃ = -1;
                        B.buttons[a].info.active = ia;
                    }
                }
                for (; a < k; a++) {
                    B.buttons[a].info.ⵠⲆⲆΔⵠⵠᐃ = -1;
                    B.buttons[a].info.active = ia;
                }
                p();
            };
            B.buttons[k].info.callback = function () {
                if (m > 0) {
                    m--;
                }
                a.ⲆⲆᐃΔΔ();
            };
            B.buttons[k + 1].info.callback = function () {
                if (c.length > m * 3 + 9) {
                    m++;
                }
                a.ⲆⲆᐃΔΔ();
            };
        }
        function n() {
            var b = Number(ⲆⵠΔⵠ.get("starve_crate"));
            var c = Number(ⲆⵠΔⵠ.get("starve_dead"));
            var d = Number(ⲆⵠΔⵠ.get("starve_book"));
            var e = Number(ⲆⵠΔⵠ.get("starve_bag"));
            var f = Number(ⲆⵠΔⵠ.get("starve_skin"));
            var a = Number(ⲆⵠΔⵠ.get("starve_accessory"));
            B.ᐃΔⲆΔ = f || 0;
            B.ΔⵠΔⵠⲆ = d || 0;
            B.ᐃΔᐃΔⲆ = b || 1;
            B.ⲆᐃⲆΔΔ = a || 0;
            B.Ⲇⵠᐃⵠᐃ = e || 0;
            B.ⵠⲆᐃΔⵠ = c || 0;
        }
        function a() {
            for (var a = Jd.ⲆⵠⵠΔⵠ, b = 0; a.length > b; b++) {
                if (a[b].ᐃⵠⵠ === Mb.ⲆΔⲆᐃᐃ) {
                    B.unlock.ᐃΔⲆΔ[b] = 1;
                } else {
                    B.unlock.ᐃΔⲆΔ[b] = 0;
                }
            }
            a = Jd.ⵠΔⵠΔⲆ;
            b = 0;
            for (; b < a.length; b++) {
                if (Mb.ⲆΔⲆᐃᐃ === a[b].ᐃⵠⵠ) {
                    B.unlock.ⲆᐃⲆΔΔ[b] = 1;
                } else {
                    B.unlock.ⲆᐃⲆΔΔ[b] = 0;
                }
            }
            a = Jd.ᐃΔΔᐃ;
            b = 0;
            for (; b < a.length; b++) {
                if (Mb.ⲆΔⲆᐃᐃ === a[b].ᐃⵠⵠ) {
                    B.unlock.Ⲇⵠᐃⵠᐃ[b] = 1;
                } else {
                    B.unlock.Ⲇⵠᐃⵠᐃ[b] = 0;
                }
            }
            a = Jd.ΔᐃᐃᐃⲆ;
            b = 0;
            for (; b < a.length; b++) {
                if (Mb.ⲆΔⲆᐃᐃ === a[b].ᐃⵠⵠ) {
                    B.unlock.ΔⵠΔⵠⲆ[b] = 1;
                } else {
                    B.unlock.ΔⵠΔⵠⲆ[b] = 0;
                }
            }
            a = Jd.ⵠⵠΔᐃⵠ;
            b = 0;
            for (; b < a.length; b++) {
                if (Mb.ⲆΔⲆᐃᐃ === a[b].ᐃⵠⵠ) {
                    B.unlock.ᐃΔᐃΔⲆ[b] = 1;
                    B.unlock.ⵠⲆᐃΔⵠ[b] = 1;
                } else {
                    B.unlock.ᐃΔᐃΔⲆ[b] = 0;
                    B.unlock.ⵠⲆᐃΔⵠ[b] = 0;
                }
            }
        }
        this.waiting = nq;
        this.ⵠᐃΔⵠΔⲆⲆ = 0;
        this.ΔᐃⵠᐃⲆⲆⵠ = -1;
        this.ᐃⲆΔΔⲆⵠᐃ = {
            translate: {
                x: 0,
                y: 0
            },
            angle: 0,
            ᐃⲆ: ΔⲆ[301],
            Δⵠᐃⵠ: function () {
                this.angle += tx * 2;
                u.save();
                u.translate(this.translate.x + this.ᐃⲆ.width / 2, this.translate.y + this.ᐃⲆ.height / 2);
                u.rotate(this.angle);
                Cp(u, this.ᐃⲆ, -this.ᐃⲆ.width / 2, -this.ᐃⲆ.height / 2);
                u.restore();
            }
        };
        this.ⵠᐃᐃⵠΔⵠΔ = {
            id: document.getElementById("langselect"),
            style: document.getElementById("langselect").style,
            translate: {
                y: 0,
                x: 0
            },
            ᐃⵠⲆ: function () {
                this.style.left = Math.floor(this.translate.x) + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.ⵠⲆⵠⲆΔ = 0;
        this.ⲆᐃⲆⲆⲆⵠΔ = -1;
        this.ⲆΔᐃᐃⵠⵠⲆ = undefined;
        this.ⲆⲆⵠⲆⲆⲆⵠ = "";
        this.ΔⵠᐃᐃΔᐃᐃ = "";
        this.ⲆⲆⵠᐃΔᐃⵠ = undefined;
        this.ⲆΔΔᐃⲆ = 0;
        this.ⲆᐃᐃⲆⲆΔⵠ = -1;
        this.ⲆᐃⵠΔᐃᐃⲆ = undefined;
        this.ⲆⲆᐃⵠⲆⵠⵠ = 0;
        this.ᐃⵠⵠΔⲆΔᐃ = 0;
        this.ⲆᐃᐃⵠᐃᐃⲆ = 0;
        this.ⵠⵠⵠᐃⵠ = 0;
        this.ⲆᐃᐃᐃΔΔⲆ = 0;
        this.time = 0;
        this.ⵠᐃⲆⲆⵠ = 0;
        this.ⲆⵠⵠᐃⵠΔⲆ = 0;
        this.ⲆⲆⵠⲆⵠᐃⲆ = 0;
        this.ⲆⲆΔΔⵠⵠᐃ = 0;
        this.ⲆᐃᐃΔⵠⲆⲆ = 0;
        this.ᐃⲆΔⲆⵠⲆⵠ = [];
        this.ⵠⲆΔⵠⲆ = -1;
        this.ΔΔⵠᐃⲆᐃⵠ = -1;
        this.ⵠΔᐃⲆᐃⲆᐃ = -1;
        this.ⲆⵠΔⲆΔⵠᐃ = undefined;
        this.ⵠΔΔⵠⵠᐃᐃ = undefined;
        this.ᐃᐃⵠᐃΔᐃⲆ = -1;
        this.ⵠⲆᐃΔΔⵠⵠ = -1;
        this.ΔⲆΔΔΔⲆΔ = -1;
        this.ⲆΔΔⵠⵠΔΔ = -1;
        this.ΔᐃⵠΔⲆΔΔ = undefined;
        this.ⵠⲆⵠⲆⲆΔΔ = undefined;
        this.ⲆᐃⵠⲆⲆΔΔ = yl;
        this.ΔⲆᐃⲆⵠⵠⵠ = undefined;
        this.ΔΔⲆΔⵠᐃⲆ = Gi;
        this.ΔΔⲆᐃΔⲆⲆ = undefined;
        this.ⵠᐃⲆᐃᐃⵠΔ = mn;
        this.ΔⲆⲆᐃⵠⵠᐃ = undefined;
        this.ᐃⵠᐃΔⵠⲆⲆ = undefined;
        this.ᐃⲆΔⵠᐃᐃⵠ = 3;
        this.ⲆⵠⲆᐃ = 0;
        this.ⵠᐃΔΔⲆⵠΔⵠᐃ = false;
        this.ⵠᐃᐃᐃⵠ = ⲆⵠΔⵠ.get("starve_quality") ? ⲆⵠΔⵠ.get("starve_quality") : "high";
        if (this.ⵠᐃᐃᐃⵠ === "high") {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            this.ⵠᐃᐃᐃⵠ = 1;
        } else {
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            this.ⵠᐃᐃᐃⵠ = 0;
        }
        this.ⲆᐃᐃⵠΔΔⲆΔⲆ = function () {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            ⲆⵠΔⵠ.set("starve_quality", "high", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 1;
            px.ᐃΔⵠᐃⲆΔᐃ();
            jx.ⵠᐃᐃᐃⵠ = 1;
        };
        this.ΔᐃΔⲆⵠⵠⵠⲆⲆ = function () {
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            ⲆⵠΔⵠ.set("starve_quality", "low", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 0.5 / (Yq / Zq);
            px.ᐃΔⵠᐃⲆΔᐃ();
            jx.ⵠᐃᐃᐃⵠ = 0;
        };
        if (_a === ⲆⵠΔⵠ.get("starve_mapping") && Dr === "FR") {
            rx.ᐃΔⲆᐃⵠⵠⲆ();
            this.mapping = "azerty";
        } else {
            this.mapping = ⲆⵠΔⵠ.get("starve_mapping") ? ⲆⵠΔⵠ.get("starve_mapping") : "qwerty";
        }
        if (this.mapping == "azerty") {
            rx.ᐃΔⲆᐃⵠⵠⲆ();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
        } else {
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
        }
        this.ᐃΔⲆᐃⵠⵠⲆ = function () {
            rx.ᐃΔⲆᐃⵠⵠⲆ();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
            ⲆⵠΔⵠ.set("starve_mapping", "azerty", {
                expires: 30
            });
        };
        this.ⲆΔᐃΔⲆΔⵠ = function () {
            rx.ⲆΔᐃΔⲆΔⵠ();
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            ⲆⵠΔⵠ.set("starve_mapping", "qwerty", {
                expires: 30
            });
        };
        this.ΔᐃⲆⵠᐃᐃᐃ = {
            id: document.getElementById("all_rights_reserved"),
            style: document.getElementById("all_rights_reserved").style,
            translate: {
                y: 0,
                x: 0
            },
            ᐃⵠⲆ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        n();
        this.unlock = {};
        this.unlock.ᐃΔⲆΔ = [];
        this.unlock.Ⲇⵠᐃⵠᐃ = [];
        this.unlock.ΔⵠΔⵠⲆ = [];
        this.unlock.ᐃΔᐃΔⲆ = [];
        this.unlock.ⵠⲆᐃΔⵠ = [];
        this.unlock.ⲆᐃⲆΔΔ = [];
        this.ᐃⲆⵠⵠⵠⲆⵠ = 0;
        this.ⲆᐃΔⲆΔⵠΔ = a;
        a();
        this.ⲆⲆⵠⲆᐃ = {
            id: document.getElementById("trevda"),
            style: document.getElementById("trevda").style,
            translate: {
                x: 0,
                y: 0
            },
            ᐃⵠⲆ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        var o;
        var r = 0;
        function t() {
            B.ᐃⵠⲆ();
            if (++r == 30) {
                B.ⲆⲆᐃᐃΔΔΔ();
                B.ⵠᐃΔⵠΔⲆⲆ = Zr;
                B.ᐃⵠⲆ();
                return;
            }
            Gf.setTimeout(t, 33);
        }
        this.ᐃᐃᐃᐃⲆ = function (a) {
            o = a;
            B.ⲆΔᐃⵠΔⲆⵠ();
            B.ⵠᐃΔⵠΔⲆⲆ = 0;
            l = -1;
            v();
        };
        var l = -1;
        function v() {
            B.ᐃⵠⲆ();
            if (++l == 30) {
                ⲆⵠΔⵠ.set("starve_nickname", B.ⲆΔΔⵠⲆ.input.value, {
                    expires: 30
                });
                B.ⲆΔΔⵠⲆ.style.display = "none";
                B.ⲆᐃⲆᐃⲆ.style.display = "none";
                B.ⵠᐃᐃⵠΔⵠΔ.style.display = "none";
                B.ΔᐃⲆⵠᐃᐃᐃ.style.display = "none";
                B.ⲆⲆⵠⲆᐃ.style.display = "none";
                B.stop();
                o();
                return;
            }
            Gf.setTimeout(v, 33);
        }
        this.ⲆΔΔⲆⵠ = false;
        this.stop = function () {
            this.ⲆΔΔⲆⵠ = false;
        };
        this.ΔΔⵠⵠΔ = function () {
            yx();
            document.getElementById("game_body").style.backgroundColor = _r.ΔⲆⲆΔΔ[lx.time];
            B.ⲆΔΔⵠⲆ.style.display = "inline-block";
            B.ⲆᐃⲆᐃⲆ.style.display = "inline-block";
            B.ⵠᐃᐃⵠΔⵠΔ.style.display = "inline-block";
            B.ΔᐃⲆⵠᐃᐃᐃ.style.display = "inline-block";
            B.ⲆⲆⵠⲆᐃ.style.display = "inline-block";
            B.waiting = rg;
            B.ⲆΔΔⲆⵠ = true;
            l = -1;
            r = 0;
            t();
        };
        this.ⲆΔⲆⲆⲆΔⲆ = function (a, b) {
            b = b < 0 ? -b : b;
            if (da === (a.position & da)) {
                if ((a.position & Y) === Y) {
                    a.translate.x = ro + a.translate.ΔΔⲆⵠⵠ - b;
                } else if ((a.position & _) === _) {
                    a.translate.x = ro + a.translate.ΔΔⲆⵠⵠ + b;
                } else {
                    a.translate.x = ro + a.translate.ΔΔⲆⵠⵠ;
                }
            } else if ((a.position & Y) === Y) {
                a.translate.x = a.translate.ΔΔⲆⵠⵠ - b;
            } else if ((a.position & _) === _) {
                a.translate.x = no - a.translate.ΔΔⲆⵠⵠ + b;
            } else {
                a.translate.x = a.translate.ΔΔⲆⵠⵠ;
            }
            if (ea === (a.position & ea)) {
                if ((a.position & aa) === aa) {
                    a.translate.y = vo + a.translate.ΔΔⵠΔᐃ - b;
                } else if (ba === (a.position & ba)) {
                    a.translate.y = vo + a.translate.ΔΔⵠΔᐃ + b;
                } else {
                    a.translate.y = vo + a.translate.ΔΔⵠΔᐃ;
                }
            } else if ((a.position & aa) === aa) {
                a.translate.y = a.translate.ΔΔⵠΔᐃ - b;
            } else if (ba === (a.position & ba)) {
                a.translate.y = oo + a.translate.ΔΔⵠΔᐃ + b;
            } else {
                a.translate.y = a.translate.ΔΔⵠΔᐃ;
            }
            if (a.style !== undefined) {
                a.style.left = Math.floor(a.translate.x) + "px";
                a.style.top = Math.floor(a.translate.y) + "px";
            }
        };
        this.ᐃⵠⲆ = function () {
            var a = 0;
            if (r != 30 || l != -1) {
                if (r != 30) {
                    a = 1500 / (r + 1) - 50;
                }
                if (l != -1) {
                    a = -(1750 / (30 - l + 1) - 48);
                }
            }
            for (var b = 0; this.ΔⵠΔⵠ.length > b; b++) {
                this.ⲆΔⲆⲆⲆΔⲆ(this.ΔⵠΔⵠ[b], a);
            }
            for (b = 0; b < this.buttons.length; b++) {
                this.ⲆΔⲆⲆⲆΔⲆ(this.buttons[b].info, a);
            }
            for (b = 0; b < this.ΔᐃΔⲆΔ.length; b++) {
                this.ⲆΔⲆⲆⲆΔⲆ(this.ΔᐃΔⲆΔ[b], a);
            }
            this.ᐃⲆΔΔⲆⵠᐃ.translate.x = (no - this.ᐃⲆΔΔⲆⵠᐃ.ᐃⲆ.width) / 2;
            this.ᐃⲆΔΔⲆⵠᐃ.translate.y = 0;
            this.ⵠᐃᐃⵠΔⵠΔ.translate.x = no - 450;
            this.ⵠᐃᐃⵠΔⵠΔ.translate.y = oo - 40;
            this.ΔᐃⲆⵠᐃᐃᐃ.translate.x = no - 340;
            this.ΔᐃⲆⵠᐃᐃᐃ.translate.y = oo - 25;
            this.ⲆⲆⵠⲆᐃ.translate.x = no - 320;
            this.ⲆⲆⵠⲆᐃ.translate.y = 80;
            if (r != 30 || l != -1) {
                var c = 0;
                if (r != 30) {
                    c = 1500 / (r + 1) - 50;
                }
                if (l != -1) {
                    c = -(1750 / (30 - l + 1) - 48);
                }
                this.ᐃⲆΔΔⲆⵠᐃ.translate.y -= c > 0 ? c : -c;
                this.ⵠᐃᐃⵠΔⵠΔ.translate.y -= c < 0 ? c : -c;
                this.ΔᐃⲆⵠᐃᐃᐃ.translate.y -= c < 0 ? c : -c;
            }
            this.ⵠᐃᐃⵠΔⵠΔ.ᐃⵠⲆ();
            this.ΔᐃⲆⵠᐃᐃᐃ.ᐃⵠⲆ();
            this.ⲆⲆⵠⲆᐃ.ᐃⵠⲆ();
        };
        this.ΔⲆᐃⵠⵠⵠⲆ = function (b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = 342;
            c.height = 342;
            var e = -Math.PI / 2;
            for (var f = 0; b.length > f; f++) {
                var g = b[f][0];
                var h = Math.PI * b[f][1] / 180;
                d.beginPath();
                d.arc(171, 171, 170, e, e + h, ek);
                d.lineTo(171, 171);
                d.fillStyle = g;
                d.fill();
                e += h;
            }
            return c;
        };
        this.ᐃⲆⲆᐃΔⵠⲆⵠΔ = function () {
            this.ⲆⲆⵠⲆⲆⲆⵠ = document.getElementById("account_nickname_input").value;
            if (this.ΔⵠᐃᐃΔᐃᐃ !== this.ⲆⲆⵠⲆⲆⲆⵠ) {
                this.ΔⵠᐃᐃΔᐃᐃ = this.ⲆⲆⵠⲆⲆⲆⵠ;
                this.ⲆⲆⵠᐃΔᐃⵠ = bf(this.ⲆⲆⵠⲆⲆⲆⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
            }
        };
        this.Δⵠᐃⵠ = function () {
            ep();
            jx.ⲆⲆᐃⵠⲆⵠⵠ = Z.ΔⵠⵠΔⵠⲆⲆ(jx.ⲆⲆᐃⵠⲆⵠⵠ, jx.ᐃⵠⵠΔⲆΔᐃ, 0.03);
            this.ΔⵠΔⵠ[ⵠᐃⲆⲆⲆⲆΔ].translate.x = this.ΔⵠΔⵠ[0].translate.x + -72 + jx.ⲆⲆᐃⵠⲆⵠⵠ * 165;
            this.ΔⵠΔⵠ[ⵠᐃⲆⲆⲆⲆΔ].translate.ΔΔⲆⵠⵠ = this.ΔⵠΔⵠ[ⵠᐃⲆⲆⲆⲆΔ].translate.x;
            this.ΔⵠΔⵠ[ⵠᐃⲆⲆⲆⲆΔ].translate.y = this.ΔⵠΔⵠ[0].translate.y + 30;
            this.ΔⵠΔⵠ[ⵠᐃⲆⲆⲆⲆΔ].translate.ΔΔⵠΔᐃ = this.ΔⵠΔⵠ[ⵠᐃⲆⲆⲆⲆΔ].translate.y;
            for (var n = 2; this.ΔⵠΔⵠ.length > n; n++) {
                if (ja === this.ΔⵠΔⵠ[n].active) {
                    this.ΔⵠΔⵠ[n].Δⵠᐃⵠ(u);
                }
            }
            if ((V = this.ⵠⲆΔⵠⲆ - Date.now()) > 0) {
                var t = Math.floor(V / 60000);
                var y = Math.floor(t / 60);
                t %= 60;
                if (this.ⵠΔᐃⲆᐃⲆᐃ !== t) {
                    this.ⵠΔᐃⲆᐃⲆᐃ = t;
                    t = t < 10 ? "0" + t : "" + t;
                    B.ⲆⵠΔⲆΔⵠᐃ = bf(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (this.ΔΔⵠᐃⲆᐃⵠ !== y) {
                    this.ΔΔⵠᐃⲆᐃⵠ = y;
                    y = y < 10 ? "0" + y : "" + y;
                    B.ⵠΔΔⵠⵠᐃᐃ = bf(y, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (W = this.ΔⵠΔⵠ[ΔⲆΔΔΔⲆⲆ]).Δⵠᐃⵠ(u);
                var K = this.ⵠΔΔⵠⵠᐃᐃ;
                Cp(u, K, W.translate.x - K.width / 4 + 182, W.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
                K = this.ⲆⵠΔⲆΔⵠᐃ;
                Cp(u, K, W.translate.x - K.width / 4 + 251, W.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
            }
            var V = this.ᐃᐃⵠᐃΔᐃⲆ - Date.now();
            if (V > 0) {
                t = Math.floor(V / 60000);
                y = Math.floor(t / 60);
                var W;
                var X = Math.floor(y / 24);
                t %= 60;
                y %= 24;
                if (this.ⲆΔΔⵠⵠΔΔ !== t) {
                    this.ⲆΔΔⵠⵠΔΔ = t;
                    t = t < 10 ? "0" + t : "" + t;
                    B.ΔᐃⵠΔⲆΔΔ = bf(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (this.ΔⲆΔΔΔⲆΔ !== y) {
                    this.ΔⲆΔΔΔⲆΔ = y;
                    y = y < 10 ? "0" + y : "" + y;
                    B.ⵠⲆⵠⲆⲆΔΔ = bf(y, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (this.ⵠⲆᐃΔΔⵠⵠ !== X) {
                    this.ⵠⲆᐃΔΔⵠⵠ = X;
                    X = X < 10 ? "0" + X : "" + X;
                    B.ⲆᐃⵠⲆⲆΔΔ = bf(X, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (W = this.ΔⵠΔⵠ[ᐃⵠᐃⲆΔⲆᐃ]).Δⵠᐃⵠ(u);
                K = this.ⲆᐃⵠⲆⲆΔΔ;
                Cp(u, K, W.translate.x - K.width / 4 + 113, W.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
                K = this.ⵠⲆⵠⲆⲆΔΔ;
                Cp(u, K, W.translate.x - K.width / 4 + 182, W.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
                K = this.ΔᐃⵠΔⲆΔΔ;
                Cp(u, K, W.translate.x - K.width / 4 + 251, W.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
            }
            if (P === (this.Δᐃⵠᐃᐃ & P)) {
                this.buttons[ΔⵠⵠΔᐃⵠⲆ].info.state = hf;
            } else if (z === (this.Δᐃⵠᐃᐃ & z)) {
                this.buttons[ᐃᐃⲆΔᐃΔᐃ].info.state = hf;
            } else if (p === (this.Δᐃⵠᐃᐃ & p)) {
                this.buttons[ⲆᐃⵠΔΔΔⵠ].info.state = hf;
            } else if ((this.Δᐃⵠᐃᐃ & c) === c) {
                this.buttons[ⵠⵠᐃⲆⵠᐃΔ].info.state = hf;
            } else if ((this.Δᐃⵠᐃᐃ & f) === f) {
                this.buttons[ⲆΔⲆΔⵠΔΔ].info.state = hf;
            } else if ((this.Δᐃⵠᐃᐃ & m) === m) {
                this.buttons[ᐃⵠⲆⵠΔΔⵠ].info.state = hf;
            } else if ((this.Δᐃⵠᐃᐃ & R) === R || k === (this.Δᐃⵠᐃᐃ & k) || (this.Δᐃⵠᐃᐃ & x) === x || (this.Δᐃⵠᐃᐃ & J) === J || M === (this.Δᐃⵠᐃᐃ & M) || (this.Δᐃⵠᐃᐃ & D) === D || I === (this.Δᐃⵠᐃᐃ & I)) {
                this.buttons[ⲆⲆᐃᐃΔⵠⲆ].info.state = hf;
            } else if ((this.Δᐃⵠᐃᐃ & E) === E || S === (this.Δᐃⵠᐃᐃ & S) || (this.Δᐃⵠᐃᐃ & Q) === Q || F === (this.Δᐃⵠᐃᐃ & F) || j === (this.Δᐃⵠᐃᐃ & j) || (this.Δᐃⵠᐃᐃ & G) === G) {
                this.buttons[ⲆᐃⵠΔΔΔⵠ].info.state = hf;
            } else if (O === (this.Δᐃⵠᐃᐃ & O) || (this.Δᐃⵠᐃᐃ & N) === N || (this.Δᐃⵠᐃᐃ & H) === H) {
                this.buttons[ΔⵠⲆΔⵠΔᐃ].info.state = hf;
            } else if ((this.Δᐃⵠᐃᐃ & q) === q) {
                this.buttons[ⵠⵠᐃⲆⵠᐃΔ].info.state = hf;
            }
            if ((this.Δᐃⵠᐃᐃ & z) === z) {
                if (this.ⵠᐃⲆᐃᐃⵠΔ === this.ΔΔⲆⲆΔΔⲆ) {
                    this.ΔΔⲆᐃΔⲆⲆ = this.ΔⲆΔⲆⲆⲆⲆ;
                    this.buttons[this.ΔⲆΔⲆⲆⲆⲆ].info.active = ia;
                    this.buttons[this.ΔᐃⵠΔᐃⲆᐃ].info.active = ia;
                    this.buttons[this.ΔⲆⵠᐃΔΔΔ].info.active = ia;
                } else {
                    this.buttons[this.ΔⲆΔⲆⲆⲆⲆ].info.active = ja;
                    this.buttons[this.ΔᐃⵠΔᐃⲆᐃ].info.active = ja;
                    this.buttons[this.ΔⲆⵠᐃΔΔΔ].info.active = ja;
                }
                if (this.ΔⲆᐃⵠᐃᐃᐃ === this.ⵠᐃⲆᐃᐃⵠΔ) {
                    this.buttons[this.ΔⲆᐃⵠᐃᐃᐃ].info.state = hf;
                } else if (this.ⵠᐃⲆᐃᐃⵠΔ === this.ⲆⵠΔᐃⲆⲆⵠ) {
                    this.buttons[this.ⲆⵠΔᐃⲆⲆⵠ].info.state = hf;
                } else if (this.ΔΔⲆⲆΔΔⲆ === this.ⵠᐃⲆᐃᐃⵠΔ) {
                    this.buttons[this.ΔΔⲆⲆΔΔⲆ].info.state = hf;
                } else if (this.ⲆᐃⲆᐃᐃΔⲆ === this.ⵠᐃⲆᐃᐃⵠΔ) {
                    this.buttons[this.ⲆᐃⲆᐃᐃΔⲆ].info.state = hf;
                } else if (this.ⵠΔᐃΔⲆΔⲆ === this.ⵠᐃⲆᐃᐃⵠΔ) {
                    this.buttons[this.ⵠΔᐃΔⲆΔⲆ].info.state = hf;
                }
                if (this.ΔⲆΔⲆⲆⲆⲆ === this.ΔΔⲆᐃΔⲆⲆ) {
                    this.buttons[this.ΔⲆΔⲆⲆⲆⲆ].info.state = hf;
                } else if (this.ΔΔⲆᐃΔⲆⲆ === this.ΔᐃⵠΔᐃⲆᐃ) {
                    this.buttons[this.ΔᐃⵠΔᐃⲆᐃ].info.state = hf;
                } else if (this.ΔΔⲆᐃΔⲆⲆ === this.ΔⲆⵠᐃΔΔΔ) {
                    this.buttons[this.ΔⲆⵠᐃΔΔΔ].info.state = hf;
                }
                if (this.ΔΔⵠΔⵠᐃᐃ === this.ΔⲆⲆᐃⵠⵠᐃ) {
                    this.buttons[this.ΔΔⵠΔⵠᐃᐃ].info.state = hf;
                } else if (this.ⵠⲆⵠⲆΔⲆΔ === this.ΔⲆⲆᐃⵠⵠᐃ) {
                    this.buttons[this.ⵠⲆⵠⲆΔⲆΔ].info.state = hf;
                } else if (this.ΔⲆⲆᐃⵠⵠᐃ === this.ΔᐃⲆⲆⲆⵠᐃ) {
                    this.buttons[this.ΔᐃⲆⲆⲆⵠᐃ].info.state = hf;
                }
                if (this.ᐃⵠᐃΔⵠⲆⲆ === this.ΔΔⲆᐃΔⲆⵠ) {
                    this.buttons[this.ΔΔⲆᐃΔⲆⵠ].info.state = hf;
                } else if (this.ᐃⵠᐃΔⵠⲆⲆ === this.ⵠΔⲆⲆΔⵠⵠ) {
                    this.buttons[this.ⵠΔⲆⲆΔⵠⵠ].info.state = hf;
                } else if (this.ᐃⵠᐃΔⵠⲆⲆ === this.ⵠΔΔⲆΔⵠᐃ) {
                    this.buttons[this.ⵠΔΔⲆΔⵠᐃ].info.state = hf;
                } else if (this.ᐃⵠᐃΔⵠⲆⲆ === this.ⲆⲆⲆᐃⲆⵠᐃ) {
                    this.buttons[this.ⲆⲆⲆᐃⲆⵠᐃ].info.state = hf;
                } else if (this.ᐃⵠᐃΔⵠⲆⲆ === this.ΔⵠᐃⲆᐃⵠⵠ) {
                    this.buttons[this.ΔⵠᐃⲆᐃⵠⵠ].info.state = hf;
                } else if (this.ⲆⲆⲆᐃΔⲆΔ === this.ᐃⵠᐃΔⵠⲆⲆ) {
                    this.buttons[this.ⲆⲆⲆᐃΔⲆΔ].info.state = hf;
                }
            }
            if ((this.Δᐃⵠᐃᐃ & c) === c) {
                if (this.ΔᐃⵠᐃⲆⲆⵠ === -1) {
                    this.buttons[Aa].info.state = hf;
                } else if (this.ΔᐃⵠᐃⲆⲆⵠ === 0) {
                    this.buttons[Ba].info.state = hf;
                } else if (this.ΔᐃⵠᐃⲆⲆⵠ === 2) {
                    this.buttons[Da].info.state = hf;
                } else if (this.ΔᐃⵠᐃⲆⲆⵠ === 3) {
                    this.buttons[Ea].info.state = hf;
                } else if (this.ΔᐃⵠᐃⲆⲆⵠ === 4) {
                    this.buttons[Ca].info.state = hf;
                }
                if (this.ᐃⲆΔⵠᐃᐃⵠ === 0) {
                    this.buttons[ua].info.state = hf;
                } else if (this.ᐃⲆΔⵠᐃᐃⵠ === 1) {
                    this.buttons[va].info.state = hf;
                } else if (this.ᐃⲆΔⵠᐃᐃⵠ === 2) {
                    this.buttons[wa].info.state = hf;
                } else if (this.ᐃⲆΔⵠᐃᐃⵠ === 3) {
                    this.buttons[xa].info.state = hf;
                } else if (this.ᐃⲆΔⵠᐃᐃⵠ === 4) {
                    this.buttons[ya].info.state = hf;
                } else if (this.ᐃⲆΔⵠᐃᐃⵠ === 5) {
                    this.buttons[za].info.state = hf;
                }
            }
            if ((this.Δᐃⵠᐃᐃ & P) === P && ⲆΔⲆΔ.ΔⵠΔⵠⲆⲆΔ === 0) {
                if (this.buttons[na].ΔⵠⵠⲆⲆⲆⵠ(sx.ᐃⲆᐃᐃ)) {
                    this.buttons[na].hint = Math.min(1, this.buttons[na].hint + tx * 1.5);
                } else {
                    this.buttons[na].hint = Math.max(0, this.buttons[na].hint - tx * 1.5);
                }
                if (this.buttons[oa].ΔⵠⵠⲆⲆⲆⵠ(sx.ᐃⲆᐃᐃ)) {
                    this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + tx * 1.5);
                } else {
                    this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - tx * 1.5);
                }
                if (this.buttons[pa].ΔⵠⵠⲆⲆⲆⵠ(sx.ᐃⲆᐃᐃ)) {
                    this.buttons[pa].hint = Math.min(1, this.buttons[pa].hint + tx * 1.5);
                } else {
                    this.buttons[pa].hint = Math.max(0, this.buttons[pa].hint - tx * 1.5);
                }
                if (this.buttons[sa].ΔⵠⵠⲆⲆⲆⵠ(sx.ᐃⲆᐃᐃ)) {
                    this.buttons[sa].hint = Math.min(1, this.buttons[sa].hint + tx * 1.5);
                } else {
                    this.buttons[sa].hint = Math.max(0, this.buttons[sa].hint - tx * 1.5);
                }
                if (this.buttons[qa].ΔⵠⵠⲆⲆⲆⵠ(sx.ᐃⲆᐃᐃ)) {
                    this.buttons[qa].hint = Math.min(1, this.buttons[qa].hint + tx * 1.5);
                } else {
                    this.buttons[qa].hint = Math.max(0, this.buttons[qa].hint - tx * 1.5);
                }
                if (this.buttons[ra].ΔⵠⵠⲆⲆⲆⵠ(sx.ᐃⲆᐃᐃ)) {
                    this.buttons[ra].hint = Math.min(1, this.buttons[ra].hint + tx * 1.5);
                } else {
                    this.buttons[ra].hint = Math.max(0, this.buttons[ra].hint - tx * 1.5);
                }
            }
            var Y = 1;
            if ((this.Δᐃⵠᐃᐃ & (k | x | J | M | D | I)) > 1) {
                K = jb.ᐃⵠᐃⵠⲆᐃᐃ;
                u.save();
                u.translate(ro, ma + K.height / 4);
                if (this.ΔⲆⵠⵠⵠ === 1) {
                    this.ΔⵠⲆⵠⵠΔⵠ += tx / 3;
                    Y = this.ⲆⵠΔᐃⵠⵠⵠ - 100 / Math.pow(1 + this.ΔⵠⲆⵠⵠΔⵠ, 1 + this.ΔⵠⲆⵠⵠΔⵠ);
                    u.rotate(Y);
                }
                Cp(u, K, -K.width / 4, -K.height / 4, K.width / 2, K.height / 2);
                u.restore();
            }
            if (ⲆΔⲆΔ.ΔⵠΔⵠⲆⲆΔ === 0) {
                if (ⲆΔⲆΔ.ΔⲆΔⵠᐃ === 0) {
                    this.buttons[na].info.state = hf;
                } else if (ⲆΔⲆΔ.ΔⲆΔⵠᐃ === 4) {
                    this.buttons[oa].info.state = hf;
                } else if (ⲆΔⲆΔ.ΔⲆΔⵠᐃ === 2) {
                    this.buttons[qa].info.state = hf;
                } else if (ⲆΔⲆΔ.ΔⲆΔⵠᐃ === 3) {
                    this.buttons[ra].info.state = hf;
                } else if (ⲆΔⲆΔ.ΔⲆΔⵠᐃ === 6) {
                    this.buttons[pa].info.state = hf;
                } else if (ⲆΔⲆΔ.ΔⲆΔⵠᐃ === 7) {
                    this.buttons[sa].info.state = hf;
                }
            }
            for (n = 1; n < this.buttons.length; n++) {
                if (ja === this.buttons[n].info.active) {
                    this.buttons[n].Δⵠᐃⵠ(u);
                }
            }
            this.ΔⵠΔⵠ[0].Δⵠᐃⵠ(u);
            if ((this.Δᐃⵠᐃᐃ & (T | L)) > 0) {
                K = this.ⲆⲆⵠᐃΔᐃⵠ;
                Cp(u, K, ro - K.width / 4, 138, K.width / 2, K.height / 2);
            }
            var _ = Math.max(1, Math.min(18, Math.floor((jx.ⲆΔΔᐃⲆ + 3) / 2)));
            this.ΔⵠΔⵠ[_].active = ja;
            this.ΔⵠΔⵠ[_].Δⵠᐃⵠ(u);
            this.ΔⵠΔⵠ[_].active = ia;
            this.buttons[0].Δⵠᐃⵠ(u);
            if ((this.Δᐃⵠᐃᐃ & (p | S | F | E | j)) > 1) {
                var g = (this.Δᐃⵠᐃᐃ & (S | F | E | j)) > 1 ? -190 : 0;
                K = ΔⲆ[29][this.Ⲇⵠᐃⵠᐃ][this.ᐃⲆⵠⵠⵠⲆⵠ];
                Cp(u, K, ro - K.width / 4 + g, 183, K.width / 2, K.height / 2);
                this.ⲆⵠⲆᐃ = (this.ⲆⵠⲆᐃ + tx * 1000) % 2000;
                var b = (this.ⲆⵠⲆᐃ < 1000) * 4.5 ? this.ⲆⵠⲆᐃ / 1000 : (2000 - this.ⲆⵠⲆᐃ) / 1000;
                K = ΔⲆ[28][this.ΔⵠΔⵠⲆ][this.ᐃⲆⵠⵠⵠⲆⵠ];
                Cp(u, K, ro - K.width / 4 - 62 + b + g, 240, K.width / 2, K.height / 2);
                K = ΔⲆ[7][this.ᐃΔⲆΔ][this.ᐃⲆⵠⵠⵠⲆⵠ];
                Cp(u, K, ro - K.width / 4 - 54 + b + g, 272, K.width / 2, K.height / 2);
                Cp(u, K, ro - K.width / 4 + 54 - b + g, 272, K.width / 2, K.height / 2);
                K = ΔⲆ[255][this.ᐃΔⲆΔ][this.ᐃⲆⵠⵠⵠⲆⵠ];
                Cp(u, K, ro - K.width / 4 + g, 222, K.width / 2, K.height / 2);
                K = ΔⲆ[796][this.ⲆᐃⲆΔΔ][this.ᐃⲆⵠⵠⵠⲆⵠ];
                Cp(u, K, ro - K.width / 4 + g, 222, K.width / 2, K.height / 2);
            }
            if ((this.Δᐃⵠᐃᐃ & p) === p) {
                K = ΔⲆ[250][this.ᐃΔᐃΔⲆ][this.ᐃⲆⵠⵠⵠⲆⵠ];
                Cp(u, K, ro - K.width / 4 - 61, 406 - K.height / 4, K.width / 2, K.height / 2);
                K = ΔⲆ[250][this.ⵠⲆᐃΔⵠ][this.ᐃⲆⵠⵠⵠⲆⵠ];
                Cp(u, K, ro - K.width / 4 + 53, 406 - K.height / 4, K.width / 2, K.height / 2);
            }
            if ((this.Δᐃⵠᐃᐃ & Q) === Q) {
                K = ΔⲆ[250][this.ⵠⲆᐃΔⵠ][this.ᐃⲆⵠⵠⵠⲆⵠ];
                Cp(u, K, ro - K.width / 4 - 200, 268 - K.height / 4, K.width / 2, K.height / 2);
            }
            if (G === (this.Δᐃⵠᐃᐃ & G)) {
                K = ΔⲆ[250][this.ᐃΔᐃΔⲆ][this.ᐃⲆⵠⵠⵠⲆⵠ];
                Cp(u, K, ro - K.width / 4 - 200, 268 - K.height / 4, K.width / 2, K.height / 2);
            }
            if ((this.Δᐃⵠᐃᐃ & (S | F | E | j | Q | G)) > 1) {
                for (n = 1; this.buttons.length > n; n++) {
                    if (this.buttons[n].view & this.Δᐃⵠᐃᐃ) {
                        var aa = this.buttons[n].info;
                        if (aa.ⵠⲆⲆΔⵠⵠᐃ >= 0) {
                            K = aa.ᐃⲆᐃⵠΔΔⲆᐃⲆ[aa.ⵠⲆⲆΔⵠⵠᐃ].ΔᐃⲆ;
                            Cp(u, K, aa.translate.x - K.width / 8 + 44.5, aa.translate.y - K.height / 8 + 45.5, K.width / 4, K.height / 4);
                            if (aa.ᐃⵠΔⲆᐃΔⲆ !== 1) {
                                K = jb.ΔΔᐃᐃᐃⲆΔ;
                                Cp(u, K, aa.translate.x - K.width / 4 + 44.5, aa.translate.y - K.height / 4 + 44.5, K.width / 2, K.height / 2);
                            }
                        }
                    }
                }
                K = this.ΔⲆᐃⲆⵠⵠⵠ;
                Cp(u, K, ro - 312, 375, K.width / 2, K.height / 2);
                K = this.ΔΔⲆΔⵠᐃⲆ;
                Cp(u, K, ro - 312, 395, K.width / 2, K.height / 2);
            }
            if (this.ⲆᐃⲆⲆⲆⵠΔ !== this.ⵠⲆⵠⲆΔ) {
                this.ⲆᐃⲆⲆⲆⵠΔ = this.ⵠⲆⵠⲆΔ;
                this.ⲆΔᐃᐃⵠⵠⲆ = bf("" + this.ⵠⲆⵠⲆΔ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
            }
            Cp(u, this.ⲆΔᐃᐃⵠⵠⲆ, this.ΔⵠΔⵠ[0].translate.x + 350, 15, this.ⲆΔᐃᐃⵠⵠⲆ.w2, this.ⲆΔᐃᐃⵠⵠⲆ.ᐃᐃⵠΔΔ);
            if (this.ⲆᐃᐃⲆⲆΔⵠ !== this.ⲆΔΔᐃⲆ) {
                this.ⲆᐃᐃⲆⲆΔⵠ = this.ⲆΔΔᐃⲆ;
                this.ⲆᐃⵠΔᐃᐃⲆ = bf("LVL " + (this.ⲆΔΔᐃⲆ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, undefined, undefined, Sq, undefined, "#3F3019", 20);
            }
            Cp(u, this.ⲆᐃⵠΔᐃᐃⲆ, this.ΔⵠΔⵠ[0].translate.x + 94, 0, this.ⲆᐃⵠΔᐃᐃⲆ.w2, this.ⲆᐃⵠΔᐃᐃⲆ.ᐃᐃⵠΔΔ);
            if (ⲆΔⲆΔ.ΔⵠΔⵠⲆⲆΔ === 0) {
                if ((ba = this.buttons[na].hint) > 0) {
                    K = jb.ΔᐃⲆΔⲆⲆⵠ;
                    Cp(u, K, ro - K.width / 4, -36 - Z.ᐃⵠΔᐃΔ(1 - ba) * K.height / 2, K.width / 2, K.height / 2);
                }
                if ((ba = this.buttons[oa].hint) > 0) {
                    K = jb.ΔᐃⵠᐃΔⲆΔ;
                    Cp(u, K, ro - K.width / 4, -36 - Z.ᐃⵠΔᐃΔ(1 - ba) * K.height / 2, K.width / 2, K.height / 2);
                }
                if ((ba = this.buttons[pa].hint) > 0) {
                    K = jb.ⲆᐃⵠᐃⲆᐃⲆ;
                    Cp(u, K, ro - K.width / 4, -36 - K.height * Z.ᐃⵠΔᐃΔ(1 - ba) / 2, K.width / 2, K.height / 2);
                }
                var ba = this.buttons[sa].hint;
                if (ba > 0) {
                    K = jb.ⵠᐃⵠᐃΔΔᐃ;
                    Cp(u, K, ro - K.width / 4, -36 - Z.ᐃⵠΔᐃΔ(1 - ba) * K.height / 2, K.width / 2, K.height / 2);
                }
                if ((ba = this.buttons[ra].hint) > 0) {
                    K = jb.ⲆⲆⵠΔⲆΔⲆ;
                    Cp(u, K, ro - K.width / 4, -36 - K.height * Z.ᐃⵠΔᐃΔ(1 - ba) / 2, K.width / 2, K.height / 2);
                }
                ba = this.buttons[qa].hint;
                if (ba > 0) {
                    K = jb.ᐃⲆᐃᐃᐃΔⲆ;
                    Cp(u, K, ro - K.width / 4, -36 - K.height * Z.ᐃⵠΔᐃΔ(1 - ba) / 2, K.width / 2, K.height / 2);
                }
            }
            if (this.ΔⲆⵠⵠⵠ === 1 && Math.abs(Y - this.ⲆⵠΔᐃⵠⵠⵠ) < 0.006) {
                u.globalAlpha = Math.min(1, this.ⲆⵠⵠΔⵠⲆΔ * 3);
                K = jb.ⲆΔⵠΔΔⵠⲆ;
                u.save();
                u.translate(ro, 260);
                this.ⲆⵠⵠΔⵠⲆΔ += tx;
                u.rotate(this.ⲆⵠⵠΔⵠⲆΔ);
                Cp(u, K, -K.width / 2, -K.height / 2, K.width, K.height);
                u.restore();
                b = 1.05 + Math.cos(this.ⲆⵠⵠΔⵠⲆΔ * 5) * 0.05;
                if (this.ⵠⵠⲆΔⲆᐃΔ === 0) {
                    var ca = b * (K = Jd.ⲆⵠⵠΔⵠ[this.ᐃᐃⲆⲆⵠᐃⵠ].ΔᐃⲆ).width;
                    var da = b * K.height;
                    Cp(u, K, ro - ca / 2, 260 - da / 2, ca, da);
                } else if (this.ⵠⵠⲆΔⲆᐃΔ === 1) {
                    ca = b * (K = Jd.ⲆⵠⵠΔⵠ[0].ΔᐃⲆ).width;
                    da = K.height * b;
                    Cp(u, K, ro - ca / 2, 260 - da / 2, ca, da);
                    ca = b * (K = Jd.ⵠΔⵠΔⲆ[this.ᐃᐃⲆⲆⵠᐃⵠ].ΔᐃⲆ).width;
                    da = K.height * b;
                    Cp(u, K, ro - ca / 2, 260 - da / 2, ca, da);
                } else if (this.ⵠⵠⲆΔⲆᐃΔ === 2) {
                    ca = (K = Jd.ᐃΔΔᐃ[this.ᐃᐃⲆⲆⵠᐃⵠ].ΔᐃⲆ).width * b;
                    da = b * K.height;
                    Cp(u, K, ro - ca / 2, 180 - da / 2, ca, da);
                    ca = (K = Jd.ⲆⵠⵠΔⵠ[0].ΔᐃⲆ).width * b;
                    da = K.height * b;
                    Cp(u, K, ro - ca / 2, 260 - da / 2, ca, da);
                } else if (this.ⵠⵠⲆΔⲆᐃΔ === 3) {
                    ca = (K = Jd.ΔᐃᐃᐃⲆ[this.ᐃᐃⲆⲆⵠᐃⵠ].ΔᐃⲆ).width * b;
                    da = K.height * b;
                    u.save();
                    u.translate(ro, 260);
                    u.rotate(Math.PI);
                    Cp(u, K, -ca / 2, -da / 2, ca, da);
                    u.restore();
                } else if (this.ⵠⵠⲆΔⲆᐃΔ === 4) {
                    ca = b * (K = Jd.ⵠⵠΔᐃⵠ[this.ᐃᐃⲆⲆⵠᐃⵠ].ΔᐃⲆ).width;
                    da = K.height * b;
                    Cp(u, K, ro - ca / 2, 260 - da / 2, ca, da);
                }
                K = this.ᐃΔΔΔⵠⵠΔ;
                Cp(u, K, ro - K.width / 4, 340, K.width / 2, K.height / 2);
                K = this.ⲆⵠᐃⲆᐃⲆᐃ;
                Cp(u, K, ro - K.width / 4, 365, K.width / 2, K.height / 2);
                if (this.ⲆⵠⵠΔⵠⲆΔ > 6) {
                    this.ΔⲆⵠⵠⵠ = 0;
                    U(R);
                }
                u.globalAlpha = 1;
            }
            nx.alert.Δⵠᐃⵠ("#FFF", "#000");
            if (B.waiting) {
                this.ᐃⲆΔΔⲆⵠᐃ.Δⵠᐃⵠ();
            }
        };
        var b = 0;
        var P = Math.pow(2, b++);
        var c = Math.pow(2, b++);
        this.ᐃΔᐃⵠᐃ = c;
        var m = Math.pow(2, b++);
        var p = Math.pow(2, b++);
        var R = Math.pow(2, b++);
        var f = Math.pow(2, b++);
        var z = Math.pow(2, b++);
        var y = Math.pow(2, b++);
        this.ΔᐃⲆΔⵠ = y;
        var w = Math.pow(2, b++);
        var A = Math.pow(2, b++);
        var k = Math.pow(2, b++);
        var x = Math.pow(2, b++);
        var J = Math.pow(2, b++);
        var M = Math.pow(2, b++);
        var D = Math.pow(2, b++);
        var I = Math.pow(2, b++);
        var E = Math.pow(2, b++);
        var Q = Math.pow(2, b++);
        var S = Math.pow(2, b++);
        var F = Math.pow(2, b++);
        var j = Math.pow(2, b++);
        var G = Math.pow(2, b++);
        var L = Math.pow(2, b++);
        var T = Math.pow(2, b++);
        var O = Math.pow(2, b++);
        this.ⲆⵠΔᐃΔ = O;
        var N = Math.pow(2, b++);
        this.ᐃΔⲆⲆᐃ = N;
        var H = Math.pow(2, b++);
        this.ᐃⵠΔᐃⵠ = H;
        var q = Math.pow(2, b++);
        function C(a, b, c) {
            for (var d = 0; B.ΔⵠΔⵠ.length > d; d++) {
                if ((B.ΔⵠΔⵠ[d].view & a) !== 0) {
                    B.ΔⵠΔⵠ[d].active = b;
                }
            }
            for (d = 0; B.buttons.length > d; d++) {
                if ((B.buttons[d].view & a) !== 0) {
                    B.buttons[d].info.active = b;
                }
            }
            for (d = 0; B.ΔᐃΔⲆΔ.length > d; d++) {
                if (B.ΔᐃΔⲆΔ[d].view & a) {
                    B.ΔᐃΔⲆΔ[d].style.display = c;
                }
            }
        }
        this.Δᐃⵠᐃᐃ = P;
        function K() {
            var b = Number(ⲆⵠΔⵠ.get("starve_crate"));
            var c = Number(ⲆⵠΔⵠ.get("starve_dead"));
            var d = Number(ⲆⵠΔⵠ.get("starve_book"));
            var e = Number(ⲆⵠΔⵠ.get("starve_bag"));
            var f = Number(ⲆⵠΔⵠ.get("starve_skin"));
            var g = Number(ⲆⵠΔⵠ.get("starve_accessory"));
            if (jx.unlock.ᐃΔⲆΔ[jx.ᐃΔⲆΔ] <= 0) {
                jx.ᐃΔⲆΔ = jx.unlock.ᐃΔⲆΔ[f] > 0 ? f : 0;
            }
            if (jx.unlock.ΔⵠΔⵠⲆ[jx.ΔⵠΔⵠⲆ] <= 0) {
                jx.ΔⵠΔⵠⲆ = jx.unlock.ΔⵠΔⵠⲆ[d] > 0 ? d : 0;
            }
            if (jx.unlock.ⵠⲆᐃΔⵠ[jx.ⵠⲆᐃΔⵠ] <= 0) {
                jx.ⵠⲆᐃΔⵠ = jx.unlock.ⵠⲆᐃΔⵠ[c] > 0 ? c : 0;
            }
            if (jx.unlock.ᐃΔᐃΔⲆ[jx.ᐃΔᐃΔⲆ] <= 0) {
                jx.ᐃΔᐃΔⲆ = jx.unlock.ᐃΔᐃΔⲆ[b] > 0 ? b : 0;
            }
            if (jx.unlock.ⲆᐃⲆΔΔ[jx.ⲆᐃⲆΔΔ] <= 0) {
                jx.ⲆᐃⲆΔΔ = jx.unlock.ⲆᐃⲆΔΔ[g] > 0 ? g : 0;
            }
            if (jx.unlock.Ⲇⵠᐃⵠᐃ[jx.Ⲇⵠᐃⵠᐃ] <= 0) {
                jx.Ⲇⵠᐃⵠᐃ = jx.unlock.Ⲇⵠᐃⵠᐃ[e] > 0 ? e : 0;
            }
        }
        function U(a) {
            if (B.ⵠᐃΔⵠΔⲆⲆ !== Yn) {
                C(w, ia, "none");
                C(A, ia, "none");
                K();
                if (a !== B.Δᐃⵠᐃᐃ && B.ΔⲆⵠⵠⵠ < 1) {
                    B.ⲆⲆⵠⲆᐃ.style.display = P === a || R === a || a === c || z === a || p === a || a === f ? "inline-block" : "none";
                    C(B.Δᐃⵠᐃᐃ, ia, "none");
                    B.Δᐃⵠᐃᐃ = a;
                    C(B.Δᐃⵠᐃᐃ, ja, "inline-block");
                }
            }
        }
        function V(a) {
            if (nx.ᐃⵠⵠΔⵠΔᐃ !== mn && nx.ⲆᐃΔⲆᐃⲆⵠ !== undefined && nx.ⲆⲆⲆⲆᐃⲆΔ !== undefined) {
                a();
            }
        }
        function W() {
            K();
            if (xx % 2) {
                console.log(yl);
                ⲆΔⲆΔ.connect();
            } else {
                console.log(undefined);
                if (Gf.Widget.isBlocked === 1) {
                    Gf.Widget.createAdPlayer(ⲆΔⲆΔ.connect.bind(ⲆΔⲆΔ), ⲆΔⲆΔ.connect.bind(ⲆΔⲆΔ));
                } else {
                    Gf.Widget.preroll();
                    Gf.Widget.play = ⲆΔⲆΔ.connect.bind(ⲆΔⲆΔ);
                }
            }
        }
        function X(a, b, c) {
            const d = new XMLHttpRequest();
            d.open("GET", a);
            d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            d.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    if (b !== undefined) {
                        b(d.responseText);
                    }
                } else if (this.readyState == 4 && Vs !== c) {
                    c();
                }
            };
            d.send();
        }
        this.ⲆⲆΔⲆᐃⲆⲆ = 0;
        this.Δᐃⵠᐃ = U;
        this.ⲆⵠⲆⵠΔⲆᐃ = function (b, a) {
            let c = "0";
            let d = 0;
            if (Hx) {
                c = Hx + "0";
            }
            if (nx.ᐃⵠⵠΔⵠΔᐃ) {
                V(b);
            } else {
                X(`${Ax}token?id=${c}`, function (c) {
                    if (d === 1) {
                        return;
                    }
                    const e = c.split("_");
                    const f = e[0] + "_";
                    const g = Number(e[1]);
                    const a = Math.abs(function (a) {
                        return an(a, 8260, 46947, 8004, 37330, 5330);
                    }(g));
                    nx.ᐃⵠⵠΔⵠΔᐃ = f + a;
                    V(b);
                }, function () {
                    if (d !== 1) {
                        if (a === 1) {
                            d = 1;
                            b();
                            return;
                        } else {
                            B.waiting = Br;
                            return;
                        }
                    }
                });
            }
            X(`${Bx}get`, function (c) {
                if (d === 1) {
                    return;
                }
                const e = c.split("_");
                const f = e[0] + "_";
                const g = Number(e[1]);
                const a = Math.abs(ht(g));
                nx.ⲆᐃΔⲆᐃⲆⵠ = f + a;
                nx.ΔΔᐃⵠΔⵠΔ = a;
                V(b);
            }, function () {
                if (d !== 1) {
                    if (a === 1) {
                        d = 1;
                        b();
                        return;
                    } else {
                        B.waiting = false;
                        return;
                    }
                }
            });
            X(`${Bx}set`, function (c) {
                if (d === 1) {
                    return;
                }
                const e = c.split("_");
                const f = e[0] + "_";
                const g = Number(e[1]);
                const a = Math.abs(jt(g));
                nx.ⲆⲆⲆⲆᐃⲆΔ = f + a;
                nx.ΔⲆΔⵠᐃΔⵠΔΔ = a;
                V(b);
            }, function () {
                if (d !== 1) {
                    if (a === 1) {
                        d = 1;
                        b();
                        return;
                    } else {
                        B.waiting = ca;
                        return;
                    }
                }
            });
        };
        this.ⵠⲆⲆⲆⲆΔᐃ = function () {
            if (B.waiting === false) {
                nx.reconnect.enabled = false;
                B.waiting = true;
                B.ⲆⵠⲆⵠΔⲆᐃ(W);
            }
        };
        var Y = 1;
        var _ = 2;
        var aa = 4;
        var ba = 8;
        var da = 16;
        var ea = 32;
        var fa = 1;
        var ha = 1;
        var ia = 0;
        var ja = 1;
        if (Gf.innerWidth < 1300) {
            this.ⲆΔΔⵠⲆ = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: ja,
                position: aa | Y,
                view: P,
                translate: {
                    y: 0,
                    ΔΔⵠΔᐃ: 184,
                    x: 0,
                    ΔΔⲆⵠⵠ: 200
                }
            };
        } else {
            this.ⲆΔΔⵠⲆ = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: ja,
                position: aa | da,
                view: P,
                translate: {
                    ΔΔⵠΔᐃ: 184,
                    x: 0,
                    ΔΔⲆⵠⵠ: -180,
                    y: 0
                }
            };
        }
        this.ⲆΔΔⵠⲆ.id.addEventListener("keyup", function (a) {
            a.preventDefault();
            if (a.keyCode == 13 && !B.waiting && !B.ⵠᐃΔΔⲆⵠΔⵠᐃ) {
                B.ⵠⲆⲆⲆⲆΔᐃ();
            }
        });
        this.ⲆΔΔⵠⲆ.input.value = ⲆⵠΔⵠ.get("starve_nickname") ? ⲆⵠΔⵠ.get("starve_nickname") : "";
        this.ⵠⵠᐃᐃⲆⵠⵠⲆΔ = {
            id: document.getElementById("account_nickname_block"),
            style: document.getElementById("account_nickname_block").style,
            input: document.getElementById("account_nickname_input"),
            active: ia,
            position: aa | da,
            view: c,
            translate: {
                ΔΔⵠΔᐃ: 110,
                ΔΔⲆⵠⵠ: -122,
                y: 0,
                x: 0
            }
        };
        if (Gf.innerWidth < 1300) {
            this.ⲆᐃⲆᐃⲆ = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: ja,
                position: aa | Y,
                view: P,
                translate: {
                    ΔΔⵠΔᐃ: 225,
                    x: 0,
                    y: 0,
                    ΔΔⲆⵠⵠ: 208
                }
            };
        } else {
            this.ⲆᐃⲆᐃⲆ = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: ja,
                position: aa | da,
                view: P,
                translate: {
                    x: 0,
                    ΔΔⵠΔᐃ: 225,
                    ΔΔⲆⵠⵠ: -180,
                    y: 0
                }
            };
        }
        this.ᐃΔⵠΔ = {
            id: document.getElementById("leaderboard"),
            style: document.getElementById("leaderboard").style,
            active: ia,
            position: aa | da,
            view: z,
            translate: {
                x: 0,
                ΔΔⲆⵠⵠ: -294.5,
                ΔΔⵠΔᐃ: 190,
                y: 0
            }
        };
        this.ⵠᐃⲆΔⵠⵠᐃᐃΔ = {
            id: document.getElementById("stats_box"),
            style: document.getElementById("stats_box").style,
            active: ia,
            position: aa | da,
            view: c,
            translate: {
                y: 0,
                x: 0,
                ΔΔⵠΔᐃ: 187,
                ΔΔⲆⵠⵠ: 125
            }
        };
        this.ⲆⵠΔᐃⲆΔⲆᐃⵠ = {
            id: document.getElementById("serverAddressBlock"),
            style: document.getElementById("serverAddressBlock").style,
            input: document.getElementById("serverAddressInput"),
            active: ia,
            position: aa | da,
            view: H,
            translate: {
                x: 0,
                y: 0,
                ΔΔⵠΔᐃ: 350,
                ΔΔⲆⵠⵠ: -220
            }
        };
        b = 0;
        this.ΔᐃΔⲆΔ = [];
        this.ΔᐃΔⲆΔ[b++] = this.ⲆΔΔⵠⲆ;
        this.ΔᐃΔⲆΔ[b++] = this.ⲆᐃⲆᐃⲆ;
        this.ΔᐃΔⲆΔ[b++] = this.ᐃΔⵠΔ;
        this.ΔᐃΔⲆΔ[b++] = this.ⵠⵠᐃᐃⲆⵠⵠⲆΔ;
        this.ΔᐃΔⲆΔ[b++] = this.ⵠᐃⲆΔⵠⵠᐃᐃΔ;
        this.ΔᐃΔⲆΔ[b++] = this.ⲆⵠΔᐃⲆΔⲆᐃⵠ;
        b = 0;
        this.ΔⵠΔⵠ = [];
        this.ΔⵠΔⵠ[b++] = uf(jb.ΔⲆᐃⲆⲆⲆⲆ, ja, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ⲆⵠⲆⵠⵠⲆⵠ, ia, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ⲆⲆⲆΔᐃⲆⵠ, ia, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ⲆⵠΔᐃⵠⵠΔ, ia, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ΔᐃΔⲆΔⵠⲆ, ia, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ⵠⲆⵠΔⵠᐃΔ, ia, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ΔⵠᐃΔᐃΔᐃ, ia, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ⵠⵠⵠⲆᐃⲆᐃ, ia, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ΔⲆⲆΔⲆⵠᐃ, ia, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ⲆⵠΔⵠᐃⵠⵠ, ia, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ΔᐃΔΔⲆΔⵠ, ia, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ᐃΔᐃⲆⲆⵠⲆ, ia, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ΔᐃΔᐃΔᐃⵠ, ia, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ᐃᐃᐃⵠⲆᐃⵠ, ia, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ΔΔΔΔⵠⲆⲆ, ia, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ⲆⲆᐃⲆᐃΔΔ, ia, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ᐃⲆΔᐃⲆⲆΔ, ia, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ΔΔⲆⵠⲆΔⵠ, ia, 0, 0, Y);
        this.ΔⵠΔⵠ[b++] = uf(jb.ⵠⲆⲆⵠⵠⵠΔ, ia, 0, 0, Y);
        if (Gf.innerWidth < 1300) {
            this.ΔⵠΔⵠ[b] = uf(jb.ⵠⲆⲆΔΔⵠⵠ, ja, 200, 100, aa | Y);
        } else {
            this.ΔⵠΔⵠ[b] = uf(jb.ⵠⲆⲆΔΔⵠⵠ, ja, -753 / 4, 100, aa | da);
        }
        this.ΔⵠΔⵠ[b++].view = P;
        this.ΔⵠΔⵠ[b++] = uf(jb.ΔΔΔΔΔᐃⵠ, ja, 403, -10, _);
        if (Gf.innerWidth > 1300) {
            this.ΔⵠΔⵠ[b] = uf(jb.ⵠⲆᐃΔΔΔⲆ, ja, -885 / 4, -319 / 2, ba | da);
            this.ΔⵠΔⵠ[b++].view = P;
        }
        this.ΔⵠΔⵠ[b] = uf(jb.ⲆⲆⲆⵠΔᐃⲆ, ia, -323.25, 100, aa | da);
        this.ΔⵠΔⵠ[b++].view = c;
        this.ΔⵠΔⵠ[b] = uf(jb.ⲆⵠⲆᐃΔΔᐃ, ia, -1425 / 4, 100, aa | da);
        this.ΔⵠΔⵠ[b++].view = p;
        this.ΔⵠΔⵠ[b] = uf(jb.ⲆⲆᐃᐃⵠⲆᐃ, ia, -905 / 4, 50, aa | da);
        this.ΔⵠΔⵠ[b++].view = m;
        this.ΔⵠΔⵠ[b] = uf(jb.ⵠΔⵠᐃᐃⵠⵠ, ia, -402, 130, aa | da);
        this.ΔⵠΔⵠ[b++].view = R;
        this.ΔⵠΔⵠ[b] = uf(jb.ⵠᐃᐃᐃⲆᐃΔ, ia, -279.25, 130, aa | da);
        this.ΔⵠΔⵠ[b++].view = O;
        this.ΔⵠΔⵠ[b] = uf(jb.ΔⵠᐃⲆⵠΔⲆ, ia, -1222 / 4, 130, aa | da);
        this.ΔⵠΔⵠ[b++].view = N;
        this.ΔⵠΔⵠ[b] = uf(jb.ΔᐃΔᐃⵠⲆⵠ, ia, -1222 / 4, 100, aa | da);
        this.ΔⵠΔⵠ[b++].view = H;
        this.ΔⵠΔⵠ[b] = uf(jb.ⲆᐃⵠⵠⵠⲆⲆ, ia, -jb.ⲆᐃⵠⵠⵠⲆⲆ.width / 4 - 350, -15, aa | da);
        this.ΔⵠΔⵠ[b++].view = q;
        this.ΔⵠΔⵠ[b] = uf(jb.ⵠᐃᐃᐃⵠᐃⵠ, ia, -1497 / 4, 110, aa | da);
        this.ΔⵠΔⵠ[b++].view = f;
        this.ΔⵠΔⵠ[b] = uf(jb.ᐃΔⲆⲆᐃΔᐃ, ia, -1226 / 4, 100, aa | da);
        this.ΔⵠΔⵠ[b++].view = z;
        this.ΔⵠΔⵠ[b] = uf(jb.ⲆⵠⲆᐃⵠΔⲆ, ia, -1381 / 4, 80, aa | da);
        this.ΔⵠΔⵠ[b++].view = y;
        this.ΔⵠΔⵠ[b] = uf(jb.ⲆΔᐃᐃⵠΔᐃ, ia, -385.5, 150, aa | da);
        this.ΔⵠΔⵠ[b++].view = k;
        var ka = 360 / 100;
        var la = this.ΔⲆᐃⵠⵠⵠⲆ([["#25c5d6", ka * 3], ["#e2cf27", ka * 10], ["#afac98", ka * 30], ["#d88e23", ka * 57]]);
        this.ΔⵠΔⵠ[b] = uf(la, ia, -la.width / 4, 178, aa | da);
        this.ΔⵠΔⵠ[b++].view = k;
        this.ⲆⲆⲆΔΔᐃⲆⵠⵠ = function (b, c, d) {
            var e;
            B.ΔⲆⵠⵠⵠ = 1;
            B.ΔⵠⲆⵠⵠΔⵠ = 0;
            B.ⲆⵠⵠΔⵠⲆΔ = 0;
            B.ⲆⵠΔᐃⵠⵠⵠ = b;
            B.ⵠⵠⲆΔⲆᐃΔ = c;
            var f = 0;
            if (c === 0) {
                for (f = 0; Jd.ⲆⵠⵠΔⵠ.length > f && d !== Jd.ⲆⵠⵠΔⵠ[f].id; f++);
                e = Jd.ⲆⵠⵠΔⵠ[f];
                B.unlock.ᐃΔⲆΔ[f] = 1;
            } else if (c === 1) {
                for (f = 0; f < Jd.ⵠΔⵠΔⲆ.length && Jd.ⵠΔⵠΔⲆ[f].id !== d; f++);
                e = Jd.ⵠΔⵠΔⲆ[f];
                B.unlock.ⲆᐃⲆΔΔ[f] = 1;
            } else if (c === 2) {
                for (f = 0; f < Jd.ᐃΔΔᐃ.length && Jd.ᐃΔΔᐃ[f].id !== d; f++);
                e = Jd.ᐃΔΔᐃ[f];
                B.unlock.Ⲇⵠᐃⵠᐃ[f] = 1;
            } else if (c === 3) {
                for (f = 0; Jd.ΔᐃᐃᐃⲆ.length > f && Jd.ΔᐃᐃᐃⲆ[f].id !== d; f++);
                e = Jd.ΔᐃᐃᐃⲆ[f];
                B.unlock.ΔⵠΔⵠⲆ[f] = 1;
            } else if (c === 4) {
                for (f = 0; Jd.ⵠⵠΔᐃⵠ.length > f && d !== Jd.ⵠⵠΔᐃⵠ[f].id; f++);
                e = Jd.ⵠⵠΔᐃⵠ[f];
                B.unlock.ᐃΔᐃΔⲆ[f] = 1;
                B.unlock.ⵠⲆᐃΔⵠ[f] = 1;
            }
            B.ᐃᐃⲆⲆⵠᐃⵠ = f;
            B.ⲆⵠᐃⲆᐃⲆᐃ = bf("by " + e.Ⲇᐃⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, Ab, 30, 24, Jt, undefined, undefined, Ur, "#000000", 24);
            B.ᐃΔΔΔⵠⵠΔ = bf(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, Go, 30, 24, undefined, yl, undefined, undefined, "#000000", 20);
        };
        this.ΔⲆⵠⵠⵠ = 0;
        this.ΔⵠⲆⵠⵠΔⵠ = 0;
        this.ⲆⵠΔᐃⵠⵠⵠ = 0;
        this.ⵠⵠⲆΔⲆᐃΔ = 0;
        this.ⲆⵠⵠΔⵠⲆΔ = 0;
        this.ⲆⵠᐃⲆᐃⲆᐃ = undefined;
        this.ᐃΔΔΔⵠⵠΔ = vg;
        var ma = 197;
        this.ΔⵠΔⵠ[b] = uf(jb.ⵠᐃⵠᐃⵠⲆⵠ, ia, -385.5, 150, aa | da);
        this.ΔⵠΔⵠ[b++].view = D;
        la = this.ΔⲆᐃⵠⵠⵠⲆ([["#d45ce5", ka * 3], ["#25c5d6", ka * 10], ["#e2cf27", ka * 30], ["#afac98", ka * 57]]);
        this.ΔⵠΔⵠ[b] = uf(la, ia, -la.width / 4, 178, aa | da);
        this.ΔⵠΔⵠ[b++].view = D;
        this.ΔⵠΔⵠ[b] = uf(jb.ⲆⲆⲆⲆⲆⵠΔ, ia, -385.5, 150, aa | da);
        this.ΔⵠΔⵠ[b++].view = J;
        la = this.ΔⲆᐃⵠⵠⵠⲆ([["#d33a2a", ka * 3], ["#d45ce5", ka * 10], ["#25c5d6", ka * 30], ["#e2cf27", ka * 57]]);
        this.ΔⵠΔⵠ[b] = uf(la, ia, -la.width / 4, 178, aa | da);
        this.ΔⵠΔⵠ[b++].view = J;
        this.ΔⵠΔⵠ[b] = uf(jb.ⵠᐃᐃᐃᐃΔΔ, ia, -385.5, 150, aa | da);
        this.ΔⵠΔⵠ[b++].view = M;
        la = this.ΔⲆᐃⵠⵠⵠⲆ([["#25c5d6", ka * 3], ["#e2cf27", ka * 10], ["#afac98", ka * 30], ["#d88e23", ka * 57]]);
        this.ΔⵠΔⵠ[b] = uf(la, ia, -la.width / 4, 178, aa | da);
        this.ΔⵠΔⵠ[b++].view = M;
        this.ΔⵠΔⵠ[b] = uf(jb.ΔᐃᐃΔⵠΔⵠ, ia, -1542 / 4, 150, aa | da);
        this.ΔⵠΔⵠ[b++].view = x;
        la = this.ΔⲆᐃⵠⵠⵠⲆ([["#d45ce5", ka * 3], ["#25c5d6", ka * 10], ["#e2cf27", ka * 30], ["#afac98", ka * 57]]);
        this.ΔⵠΔⵠ[b] = uf(la, ia, -la.width / 4, 178, aa | da);
        this.ΔⵠΔⵠ[b++].view = x;
        this.ΔⵠΔⵠ[b] = uf(jb.ΔᐃᐃⲆᐃⵠᐃ, ia, -1542 / 4, 150, aa | da);
        this.ΔⵠΔⵠ[b++].view = I;
        la = this.ΔⲆᐃⵠⵠⵠⲆ([["#d33a2a", ka * 3], ["#d45ce5", ka * 10], ["#25c5d6", ka * 30], ["#e2cf27", ka * 57]]);
        this.ΔⵠΔⵠ[b] = uf(la, ia, -la.width / 4, 178, aa | da);
        this.ΔⵠΔⵠ[b++].view = I;
        this.ΔⵠΔⵠ[b] = uf(jb.ⵠⵠⵠᐃⵠᐃΔ, ia, -1366 / 4, 100, aa | da);
        this.ΔⵠΔⵠ[b++].view = E;
        this.ΔⵠΔⵠ[b] = uf(jb.ᐃⵠᐃⲆΔᐃΔ, ia, -1366 / 4, 100, aa | da);
        this.ΔⵠΔⵠ[b++].view = j;
        this.ΔⵠΔⵠ[b] = uf(jb.ΔⵠⵠΔᐃⲆΔ, ia, -1366 / 4, 100, aa | da);
        this.ΔⵠΔⵠ[b++].view = S;
        this.ΔⵠΔⵠ[b] = uf(jb.ᐃⵠⲆⵠΔⵠᐃ, ia, -341.5, 100, aa | da);
        this.ΔⵠΔⵠ[b++].view = F;
        this.ΔⵠΔⵠ[b] = uf(jb.ⵠⵠᐃΔⵠᐃΔ, ia, -1366 / 4, 100, aa | da);
        this.ΔⵠΔⵠ[b++].view = Q;
        this.ΔⵠΔⵠ[b] = uf(jb.ⲆⵠⲆΔᐃΔⵠ, ia, -1366 / 4, 100, aa | da);
        this.ΔⵠΔⵠ[b++].view = G;
        ΔⲆΔΔΔⲆⲆ = b++;
        this.ΔⵠΔⵠ[ΔⲆΔΔΔⲆⲆ] = uf(jb.ΔⲆΔΔΔⲆⲆ, ia, 484, 0, aa);
        ᐃⵠᐃⲆΔⲆᐃ = b++;
        this.ΔⵠΔⵠ[ᐃⵠᐃⲆΔⲆᐃ] = uf(jb.ᐃⵠᐃⲆΔⲆᐃ, ia, 812.5, 0, aa);
        this.ΔⵠΔⵠ[b] = uf(jb.ⲆⲆᐃⵠΔᐃᐃ, ia, -758 / 4, -5, aa | da);
        this.ΔⵠΔⵠ[b++].view = A;
        this.ΔⵠΔⵠ[b] = uf(jb.ΔΔⵠᐃΔⲆΔ, ia, -189.5, -5, aa | da);
        this.ΔⵠΔⵠ[b++].view = w;
        ⵠᐃⲆⲆⲆⲆΔ = b++;
        this.ΔⵠΔⵠ[ⵠᐃⲆⲆⲆⲆΔ] = uf(jb.ΔⲆᐃᐃⵠᐃⲆ, ja, 93, 30, aa);
        this.ΔⵠΔⵠ[b] = uf(jb.ᐃⲆⲆⵠΔⲆΔ, ia, -173, 110, aa | da);
        this.ΔⵠΔⵠ[b++].view = L;
        this.ΔⵠΔⵠ[b] = uf(jb.ⵠⵠⵠΔⲆΔⲆ, ia, -173, 110, aa | da);
        this.ΔⵠΔⵠ[b++].view = T;
        b = 0;
        this.buttons = [];
        this.buttons[b] = df(50, 57, 0, [jb.ⵠᐃⲆΔΔᐃⲆ, jb.ⵠⲆⵠⲆᐃΔᐃ, jb.ΔᐃⵠⵠⵠᐃΔ], fa, 0, function () {
            if (B.ᐃⵠΔᐃⲆ()) {
                U(y);
            } else {
                U(m);
            }
        }, 320, 0, Y, ja);
        b++;
        if (Gf.innerWidth < 1300) {
            this.buttons[b] = df(202, 97, 0, [jb.ⵠᐃΔΔⵠᐃᐃ, jb.ᐃⲆⲆΔᐃᐃΔ, jb.ᐃⵠΔΔΔⲆⵠ], fa, 0, this.ⵠⲆⲆⲆⲆΔᐃ, 462, 235, aa | Y, ja);
        } else {
            this.buttons[b] = df(202, 97, 0, [jb.ⵠᐃΔΔⵠᐃᐃ, jb.ᐃⲆⲆΔᐃᐃΔ, jb.ᐃⵠΔΔΔⲆⵠ], fa, 0, this.ⵠⲆⲆⲆⲆΔᐃ, 74, 235, aa | da, ja);
        }
        this.buttons[b].view = P;
        b++;
        if (Gf.innerWidth > 1300) {
            this.buttons[b] = df(355, 168, 0, [jb.ⲆᐃᐃΔΔᐃᐃ, jb.ⲆᐃᐃΔΔᐃᐃ, jb.ⲆᐃᐃΔΔᐃᐃ], fa, 0, function () {
                Gf.open("./changelog.html", "_blank");
            }, -195, -115, ba | da, ja);
            this.buttons[b++].view = P;
            this.buttons[b] = df(355, 168, 0, [jb.ᐃΔⵠᐃⵠΔᐃ, jb.ᐃΔⵠᐃⵠΔᐃ, jb.ᐃΔⵠᐃⵠΔᐃ], fa, 0, function () {
                Gf.open("https://taming.io", "_blank");
            }, 20, -115, ba | da, ja);
            this.buttons[b++].view = P;
        }
        this.buttons[b++] = df(80, 80, 0, [jb.ΔΔⵠᐃΔⵠᐃ, jb.ⲆⲆⵠΔⲆᐃᐃ, jb.ΔᐃΔΔΔⲆⲆ], fa, 0, function () {
            Gf.open("https://lapamauve.creator-spring.com/", "_blank");
        }, 380, 10, _, ja);
        this.buttons[b++] = df(80, 80, 0, [jb.ⲆⲆΔⲆᐃⵠΔ, jb.ᐃᐃⲆⵠᐃΔΔ, jb.ΔⲆᐃⵠⵠᐃⲆ], fa, 0, function () {
            Gf.open("https://discord.gg/starveio", "_blank");
        }, 330, 10, _, ja);
        this.buttons[b++] = df(80, 80, 0, [jb.ᐃΔΔᐃⵠᐃᐃ, jb.ΔⲆⲆⵠᐃᐃᐃ, jb.ⵠⵠⵠⲆΔⵠΔ], fa, 0, function () {
            Gf.open("https://reddit.com/r/starveio", "_blank");
        }, 280, 10, _, ja);
        this.buttons[b++] = df(80, 80, 0, [jb.ⲆⲆⵠⵠⵠⲆᐃ, jb.ᐃⲆⵠⲆΔⵠᐃ, jb.ΔⵠΔⵠⵠⵠⵠ], fa, 0, function () {
            Gf.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, 230, 10, _, ja);
        this.buttons[b++] = df(80, 80, 0, [jb.ⵠⲆΔⵠᐃΔⲆ, jb.ⵠᐃΔΔᐃⵠΔ, jb.ⵠⵠᐃΔᐃⲆⵠ], fa, 0, function () {
            Gf.open("https://www.facebook.com/LapaMauve/", "_blank");
        }, 155, 10, _, ja);
        this.buttons[b++] = df(80, 80, 0, [jb.ᐃᐃⲆⲆⵠⲆⵠ, jb.ᐃΔΔⵠΔⵠΔ, jb.ⵠⵠⵠⲆⵠΔᐃ], fa, 0, function () {
            Gf.open("https://twitter.com/lapamauve", "_blank");
        }, 105, 10, _, ja);
        this.buttons[b++] = df(80, 80, 0, [jb.ⵠᐃΔᐃᐃΔΔ, jb.ᐃᐃΔⲆⵠΔᐃ, jb.ⵠⵠⲆᐃⲆⵠⲆ], fa, 0, function () {
            Gf.open("https://www.youtube.com/@lapamauveofficial", "_blank");
        }, 55, 10, _, ja);
        ᐃᐃⲆΔᐃΔᐃ = b++;
        this.buttons[ᐃᐃⲆΔᐃΔᐃ] = df(232, 142, 0, [jb.ⵠΔΔΔᐃⲆⵠ, jb.ΔⲆΔᐃΔᐃⵠ, jb.ᐃⲆⲆⲆⲆΔᐃ], fa, 0, function () {
            U(z);
            Zx(jx.ΔⲆΔⲆⲆⲆⲆ, jx.ΔΔⲆⲆΔΔⲆ, jx.ⵠⲆⵠⲆΔⲆΔ, jx.ⲆⲆⲆᐃΔⲆΔ);
        }, -5, 573, Y, ja);
        this.buttons[b++] = df(236, 165, 0, [jb.ⵠᐃΔⵠⵠΔⲆ, jb.ⵠᐃΔⵠⵠΔⲆ, jb.ⵠᐃΔⵠⵠΔⲆ], fa, ha, function () {
            U(z);
        }, -5, 566, Y, ja);
        ⲆΔⲆΔⵠΔΔ = b++;
        this.buttons[ⲆΔⲆΔⵠΔΔ] = df(236, 165, 0, [jb.Δⵠⵠⵠᐃⵠᐃ, jb.ΔᐃⲆᐃᐃⵠⲆ, jb.ⲆⲆΔⵠᐃⲆⵠ], fa, 0, function () {
            U(f);
        }, -5, 494, Y, ja);
        this.buttons[b++] = df(236, 165, 0, [jb.ⵠΔᐃΔᐃⵠⵠ, jb.ⵠΔᐃΔᐃⵠⵠ, jb.ⵠΔᐃΔᐃⵠⵠ], fa, ha, function () {
            U(f);
        }, -5, 494, Y, ja);
        ΔⵠⲆΔⵠΔᐃ = b++;
        this.buttons[ΔⵠⲆΔⵠΔᐃ] = df(236, 165, 0, [jb.Δⵠⵠⵠᐃⵠᐃ, jb.ΔᐃⲆᐃᐃⵠⲆ, jb.ⲆⲆΔⵠᐃⲆⵠ], fa, 0, function () {
            if (B.ᐃⵠΔᐃⲆ()) {
                if (jx.ᐃᐃⵠᐃΔᐃⲆ - Date.now() > 0) {
                    U(H);
                } else {
                    U(O);
                }
            } else {
                U(m);
            }
        }, -5, 415, Y, ja);
        this.buttons[b++] = df(236, 165, 0, [jb.ΔⲆᐃⵠⲆΔⵠ, jb.ΔⲆᐃⵠⲆΔⵠ, jb.ΔⲆᐃⵠⲆΔⵠ], fa, ha, function () {
            if (B.ᐃⵠΔᐃⲆ()) {
                if (jx.ᐃᐃⵠᐃΔᐃⲆ - Date.now() > 0) {
                    U(H);
                } else {
                    U(O);
                }
            } else {
                U(m);
            }
        }, -5, 415, Y, ja);
        ⲆⲆᐃᐃΔⵠⲆ = b++;
        this.buttons[ⲆⲆᐃᐃΔⵠⲆ] = df(236, 165, 0, [jb.Δⵠⵠⵠᐃⵠᐃ, jb.ΔᐃⲆᐃᐃⵠⲆ, jb.ⲆⲆΔⵠᐃⲆⵠ], fa, 0, function () {
            U(R);
        }, -5, 336, Y, ja);
        this.buttons[b++] = df(236, 165, 0, [jb.ⲆᐃᐃⵠⵠΔⲆ, jb.ⲆᐃᐃⵠⵠΔⲆ, jb.ⲆᐃᐃⵠⵠΔⲆ], fa, ha, function () {
            U(R);
        }, -5, 336, Y, ja);
        ⲆᐃⵠΔΔΔⵠ = b++;
        this.buttons[ⲆᐃⵠΔΔΔⵠ] = df(236, 165, 0, [jb.Δⵠⵠⵠᐃⵠᐃ, jb.ΔᐃⲆᐃᐃⵠⲆ, jb.ⲆⲆΔⵠᐃⲆⵠ], fa, 0, function () {
            U(p);
        }, -5, 257, Y, ja);
        this.buttons[b++] = df(236, 165, 0, [jb.ᐃᐃᐃⲆⲆΔΔ, jb.ᐃᐃᐃⲆⲆΔΔ, jb.ᐃᐃᐃⲆⲆΔΔ], fa, ha, function () {
            U(p);
        }, -5, 257, Y, ja);
        ΔⵠⵠΔᐃⵠⲆ = b++;
        this.buttons[ΔⵠⵠΔᐃⵠⲆ] = df(236, 165, 0, [jb.Δⵠⵠⵠᐃⵠᐃ, jb.ΔᐃⲆᐃᐃⵠⲆ, jb.ⲆⲆΔⵠᐃⲆⵠ], fa, 0, function () {
            U(P);
        }, -5, 178, Y, ja);
        this.buttons[b++] = df(236, 165, 0, [jb.ⵠⲆΔΔΔⲆⵠ, jb.ⵠⲆΔΔΔⲆⵠ, jb.ⵠⲆΔΔΔⲆⵠ], fa, ha, function () {
            U(P);
        }, -5, 178, Y, ja);
        ᐃⵠⲆⵠΔΔⵠ = b++;
        this.ᐃⵠⲆⵠΔΔⵠ = ᐃⵠⲆⵠΔΔⵠ;
        this.buttons[ᐃⵠⲆⵠΔΔⵠ] = df(324, 222, 0, [jb.ᐃⵠⲆⲆⵠΔᐃ, jb.ⵠⵠⲆᐃᐃⵠΔ, jb.ΔⵠⲆⲆΔⲆᐃ], fa, 0, function () {
            U(m);
        }, 0, 70, Y, ja);
        ⵠⵠᐃⲆⵠᐃΔ = b++;
        Ⲇᐃᐃᐃⵠⵠᐃ = b++;
        this.ⵠⵠᐃⲆⵠᐃΔ = ⵠⵠᐃⲆⵠᐃΔ;
        this.Ⲇᐃᐃᐃⵠⵠᐃ = Ⲇᐃᐃᐃⵠⵠᐃ;
        this.buttons[ⵠⵠᐃⲆⵠᐃΔ] = df(324, 222, 0, [jb.ⲆⵠᐃᐃᐃΔⲆ, jb.ΔᐃΔΔΔΔⵠ, jb.ΔΔᐃⲆⲆΔⵠ], fa, 0, function () {
            U(c);
            ta(-1);
        }, 0, 70, Y, ia);
        this.buttons[Ⲇᐃᐃᐃⵠⵠᐃ] = df(324, 222, 0, [jb.ⲆⵠⲆⲆⲆⵠⲆ, jb.ⲆⵠⲆⲆⲆⵠⲆ, jb.ⲆⵠⲆⲆⲆⵠⲆ], fa, ha, function () {
            U(c);
            ta(-1);
        }, 0, 70, Y, ia);
        if (ⲆΔⲆΔ.ΔⵠΔⵠⲆⲆΔ === 0) {
            var na = b++;
            if (Gf.innerWidth < 1300) {
                this.buttons[na] = df(266, 176, 0, [jb.ΔΔᐃⲆⲆΔⲆ, jb.ΔⲆⲆⵠⲆⵠⲆ, jb.ΔⲆⵠⲆΔⲆᐃ], fa, 0, function () {
                    ⲆΔⲆΔ.Δᐃᐃⵠⵠ(0);
                }, 150, 300, Y | aa, ja);
            } else {
                this.buttons[na] = df(266, 176, 0, [jb.ΔΔᐃⲆⲆΔⲆ, jb.ΔⲆⲆⵠⲆⵠⲆ, jb.ΔⲆⵠⲆΔⲆᐃ], fa, 0, function () {
                    ⲆΔⲆΔ.Δᐃᐃⵠⵠ(0);
                }, -340, 100, da | aa, ja);
            }
            this.buttons[na].view = P;
            this.buttons[na].hint = 0;
            var oa = b++;
            if (Gf.innerWidth < 1300) {
                this.buttons[oa] = df(266, 176, 0, [jb.ⵠⲆΔⲆᐃⲆⲆ, jb.ⵠⲆᐃᐃΔⲆΔ, jb.ΔΔⲆᐃΔⵠⵠ], fa, 0, function () {
                    ⲆΔⲆΔ.Δᐃᐃⵠⵠ(4);
                }, 150, 400, Y | aa, ja);
            } else {
                this.buttons[oa] = df(266, 176, 0, [jb.ⵠⲆΔⲆᐃⲆⲆ, jb.ⵠⲆᐃᐃΔⲆΔ, jb.ΔΔⲆᐃΔⵠⵠ], fa, 0, function () {
                    ⲆΔⲆΔ.Δᐃᐃⵠⵠ(4);
                }, -340, 200, da | aa, ja);
            }
            this.buttons[oa].view = P;
            this.buttons[oa].hint = 0;
            var pa = b++;
            if (Gf.innerWidth < 1300) {
                this.buttons[pa] = df(266, 176, 0, [jb.ᐃⵠⲆⵠᐃΔᐃ, jb.Δᐃᐃᐃᐃⵠⵠ, jb.ⵠⲆⵠᐃⲆΔᐃ], fa, 0, function () {
                    ⲆΔⲆΔ.Δᐃᐃⵠⵠ(6);
                }, 450, 300, Y | aa, ja);
            } else {
                this.buttons[pa] = df(266, 176, 0, [jb.ᐃⵠⲆⵠᐃΔᐃ, jb.Δᐃᐃᐃᐃⵠⵠ, jb.ⵠⲆⵠᐃⲆΔᐃ], fa, 0, function () {
                    ⲆΔⲆΔ.Δᐃᐃⵠⵠ(6);
                }, -340, 300, da | aa, ja);
            }
            this.buttons[pa].view = P;
            this.buttons[pa].hint = 0;
            var qa = b++;
            if (Gf.innerWidth < 1300) {
                this.buttons[qa] = df(266, 176, 0, [jb.ΔⲆΔΔⵠⵠᐃ, jb.ᐃⲆᐃⵠΔΔⵠ, jb.ΔΔᐃᐃⲆᐃⵠ], fa, 0, function () {
                    ⲆΔⲆΔ.Δᐃᐃⵠⵠ(2);
                }, 300, 300, Y | aa, ja);
            } else {
                this.buttons[qa] = df(266, 176, 0, [jb.ΔⲆΔΔⵠⵠᐃ, jb.ᐃⲆᐃⵠΔΔⵠ, jb.ΔΔᐃᐃⲆᐃⵠ], fa, 0, function () {
                    ⲆΔⲆΔ.Δᐃᐃⵠⵠ(2);
                }, 204, 100, da | aa, ja);
            }
            this.buttons[qa].view = P;
            this.buttons[qa].hint = 0;
            var ra = b++;
            if (Gf.innerWidth < 1300) {
                this.buttons[ra] = df(266, 176, 0, [jb.ΔⲆΔΔⵠⵠⵠ, jb.ΔⲆⲆΔⵠΔⵠ, jb.ᐃⵠⵠᐃⲆᐃⵠ], fa, 0, function () {
                    ⲆΔⲆΔ.Δᐃᐃⵠⵠ(3);
                }, 300, 400, Y | aa, ja);
            } else {
                this.buttons[ra] = df(266, 176, 0, [jb.ΔⲆΔΔⵠⵠⵠ, jb.ΔⲆⲆΔⵠΔⵠ, jb.ᐃⵠⵠᐃⲆᐃⵠ], fa, 0, function () {
                    ⲆΔⲆΔ.Δᐃᐃⵠⵠ(3);
                }, 204, 200, da | aa, ja);
            }
            this.buttons[ra].view = P;
            this.buttons[ra].hint = 0;
            var sa = b++;
            this.buttons[sa] = df(266, 176, 0, [jb.ⵠⵠⵠⲆⲆΔⵠ, jb.ΔⲆΔⲆⵠΔⵠ, jb.ᐃΔᐃᐃᐃⵠᐃ], fa, 0, function () {
                ⲆΔⲆΔ.Δᐃᐃⵠⵠ(7);
            }, Gf.innerWidth < 1300 ? 450 : 204, Gf.innerWidth < 1300 ? 400 : 300, (Gf.innerWidth < 1300 ? Y : da) | aa, ja);
            this.buttons[sa].view = P;
            this.buttons[sa].hint = 0;
        }
        function ta(b, c) {
            if (Go !== c) {
                jx.ᐃⲆΔⵠᐃᐃⵠ = c;
                var d = jx.ᐃⲆΔⲆⵠⲆⵠ[c];
                jx.ⵠᐃⲆⲆⵠ = d.score;
                jx.ⵠⵠⵠᐃⵠ = d.kill;
                jx.ⲆᐃᐃᐃΔΔⲆ = d.death;
                jx.time = d.time;
                jx.ⲆᐃᐃΔⵠⲆⲆ = d.bestScore;
                jx.ⲆⲆⵠⲆⵠᐃⲆ = d.bestKill;
                jx.ⲆⲆΔΔⵠⵠᐃ = d.bestTime;
                jx.ⲆⵠⵠᐃⵠΔⲆ = d.scoreTotal;
            }
            if (b === undefined) {
                b = jx.ΔᐃⵠᐃⲆⲆⵠ;
            }
            jx.ΔᐃⵠᐃⲆⲆⵠ = b;
            if (b >= 0) {
                document.getElementById("stats_box_time").innerHTML = jx.ⲆⲆΔΔⵠⵠᐃ[b];
                document.getElementById("stats_box_kill").innerHTML = jx.ⲆⲆⵠⲆⵠᐃⲆ[b];
                document.getElementById("stats_box_score").innerHTML = jx.ⲆᐃᐃΔⵠⲆⲆ[b];
            } else {
                var f = 0;
                for (var g = 0; jx.ⵠⵠⵠᐃⵠ.length > g; g++) {
                    f += jx.ⵠⵠⵠᐃⵠ[g];
                }
                var h = 0;
                for (g = 0; jx.time.length > g; g++) {
                    h += jx.time[g];
                }
                document.getElementById("stats_box_time").innerHTML = h;
                document.getElementById("stats_box_kill").innerHTML = f;
                document.getElementById("stats_box_score").innerHTML = jx.ⵠᐃⲆⲆⵠ;
            }
        }
        this.buttons[b] = df(87, 78, 0, [jb.ⵠⵠΔΔⲆᐃⵠ, jb.Ⲇᐃᐃᐃⵠⵠⵠ, jb.ΔⲆⲆⲆⵠΔΔ], fa, 0, function () {
            jx.ᐃⲆⲆᐃΔⵠⲆⵠΔ();
            if (jx.ⲆᐃᐃⵠᐃᐃⲆ === 0) {
                U(T);
            } else {
                U(L);
            }
        }, 127, 110, da | aa, ia);
        this.buttons[b++].view = c;
        this.buttons[b] = df(87, 78, 0, [jb.ⲆⲆⵠᐃⲆⵠⲆ, jb.ⵠΔⲆᐃΔⵠⵠ, jb.ΔⲆᐃΔᐃΔⵠ], fa, 0, function () {
            const a = Gf.document.createElement("textarea");
            a.value = Hx;
            Gf.document.body.appendChild(a);
            a.select();
            Gf.document.execCommand("copy");
            Gf.document.body.removeChild(a);
        }, 182, 110, da | aa, ia);
        this.buttons[b++].view = c;
        this.buttons[b] = df(87, 78, 0, [jb.ⵠⵠⵠΔᐃⵠΔ, jb.ᐃᐃⲆᐃⲆⲆΔ, jb.ⵠⵠΔΔᐃⵠⵠ], fa, 0, function () {
            if (Dx === Fx && Gf.FB && Gf.FB.getUserID()) {
                Gf.FB.logout();
            }
            if (Fx === Cx && Pg !== Px) {
                Gf.gapi.auth2.getAuthInstance().signOut();
                Px = undefined;
            }
            Hx = Gi;
            Gx = Gi;
            Fx = undefined;
            jx.ⵠⲆΔⵠⲆ = 0;
            jx.ⵠⲆⵠⲆΔ = 0;
            jx.ⵠᐃⲆⲆⵠ = 0;
            jx.ⲆᐃΔⲆΔⵠΔ();
            ⵠΔⲆⲆⵠΔΔⵠⵠ();
        }, 255, 110, da | aa, ia);
        this.buttons[b++].view = c;
        this.buttons[b] = df(58, 64, 0, [jb.ᐃΔⲆᐃⲆⲆΔ, jb.ⵠⵠⵠΔⵠⲆⵠ, jb.ⲆⲆⲆⲆΔᐃⵠ], fa, 0, function () {
            U(P);
        }, 189, 118, da | aa, ia);
        this.buttons[b++].view = m;
        this.buttons[b] = df(497, 72, 0, [jb.ⲆΔΔⲆⲆⲆᐃ, jb.ᐃⲆΔΔᐃᐃᐃ, jb.ᐃⵠⲆⵠⲆᐃΔ], fa, 0, function () {
            (function () {
                if (Cf) {
                    Gx = Z.ⵠⵠⵠᐃᐃΔⲆ(40);
                    Fx = Ex;
                    Hx = Cf.userId;
                    Gf.ⵠΔⵠⵠᐃⵠⵠ();
                    return;
                }
                Gf.gapi.auth2.getAuthInstance().signIn();
            })();
        }, -130, 390, da | aa, ia);
        this.buttons[b++].view = m;
        this.buttons[b] = df(497, 72, 0, [jb.ⲆᐃⵠⵠⲆⵠⲆ, jb.ΔΔⲆⵠΔᐃⲆ, jb.ⵠᐃᐃᐃⵠⲆᐃ], fa, 0, function () {
            Gf.FB.login(function (a) {
                if (a.authResponse) {
                    Gf.FB.api("/me", function (a) {
                        Fx = Dx;
                        Gx = Gf.FB.getAuthResponse().accessToken;
                        Ux();
                        Gf.ⵠΔⵠⵠᐃⵠⵠ();
                    });
                }
            });
        }, -130, 430, da | aa, ia);
        this.buttons[b++].view = m;
        ⲆⵠΔⵠᐃᐃᐃ = 20000;
        this.ᐃⵠⵠⲆⲆᐃᐃ = function (a) {
            var b = jx.ⵠᐃΔᐃⵠΔⲆ(a);
            var c = b * b * ⲆⵠΔⵠᐃᐃᐃ;
            return (a -= c) / (ⲆⵠΔⵠᐃᐃᐃ * ((b + 1) * (b + 1)) - c);
        };
        this.ⵠᐃΔᐃⵠΔⲆ = function (a) {
            return Math.floor(Math.sqrt(a / ⲆⵠΔⵠᐃᐃᐃ));
        };
        this.ΔⵠⲆΔΔᐃᐃᐃⲆ = function (a) {
            jx.ⲆΔΔᐃⲆ = jx.ⵠᐃΔᐃⵠΔⲆ(a);
            jx.ᐃⵠⵠΔⲆΔᐃ = jx.ᐃⵠⵠⲆⲆᐃᐃ(a);
            jx.ⲆⲆᐃⵠⲆⵠⵠ = 0;
            jx.ⵠᐃⲆⲆⵠ = a;
        };
        this.ΔΔᐃΔⲆΔⲆᐃᐃ = function (a) {
            jx.buttons[jx.ᐃⵠⲆⵠΔΔⵠ].info.active = 0;
            jx.buttons[jx.ⵠⵠᐃⲆⵠᐃΔ].info.active = 1;
            jx.buttons[jx.Ⲇᐃᐃᐃⵠⵠᐃ].info.active = 1;
            n();
            if (a.name.indexOf("Starver#") === -1) {
                document.getElementById("account_nickname_input").value = Gf.decodeURIComponent(Gf.escape(Gf.atob(a.name)));
            } else {
                document.getElementById("account_nickname_input").value = a.name;
            }
            jx.ⵠⲆⵠⲆΔ = a.bread;
            var b = a.seasons;
            var c = b[b.length - 1];
            jx.ᐃⲆΔⲆⵠⲆⵠ = b;
            B.ΔⵠⲆΔΔᐃᐃᐃⲆ(c.score);
            jx.ⵠᐃⲆⲆⵠ = c.score;
            jx.ⵠⵠⵠᐃⵠ = c.kill;
            jx.ⲆᐃᐃᐃΔΔⲆ = c.death;
            jx.time = c.time;
            jx.ⲆᐃᐃΔⵠⲆⲆ = c.bestScore;
            jx.ⲆⲆⵠⲆⵠᐃⲆ = c.bestKill;
            jx.ⲆⲆΔΔⵠⵠᐃ = c.bestTime;
            jx.ⲆⵠⵠᐃⵠΔⲆ = c.scoreTotal;
            jx.ⲆᐃᐃⵠᐃᐃⲆ = a.firstName;
            document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
            if (jx.ⲆᐃᐃⵠᐃᐃⲆ === yl) {
                jx.ⲆᐃᐃⵠᐃᐃⲆ = 0;
            }
            jx.ᐃᐃⵠᐃΔᐃⲆ = Date.now() + a.privateServerTime;
            if (Number(a.privateServerTime) > 0) {
                jx.ᐃᐃⵠᐃΔᐃⲆ = Date.now() + Number(a.privateServerTime);
            }
            jx.ⵠⲆΔⵠⲆ = Date.now() + a.kit;
            if (Number(a.kit) > 0) {
                jx.ⵠⲆΔⵠⲆ = Date.now() + Number(a.kit);
            }
            var d = Jd.ⲆⵠⵠΔⵠ;
            for (var e = 0; e < a.skins.length; e++) {
                var f = a.skins[e];
                if (f > 0) {
                    for (var g = 0; d.length > g; g++) {
                        if (d[g].id === e) {
                            B.unlock.ᐃΔⲆΔ[g] = 1;
                        }
                    }
                }
            }
            d = Jd.ⵠΔⵠΔⲆ;
            e = 0;
            for (; e < a.accessories.length; e++) {
                if ((f = a.accessories[e]) > 0) {
                    for (g = 0; d.length > g; g++) {
                        if (e === d[g].id) {
                            B.unlock.ⲆᐃⲆΔΔ[g] = 1;
                        }
                    }
                }
            }
            d = Jd.ΔᐃᐃᐃⲆ;
            e = 0;
            for (; a.books.length > e; e++) {
                if ((f = a.books[e]) > 0) {
                    for (g = 0; g < d.length; g++) {
                        if (e === d[g].id) {
                            B.unlock.ΔⵠΔⵠⲆ[g] = 1;
                        }
                    }
                }
            }
            d = Jd.ᐃΔΔᐃ;
            e = 0;
            for (; e < a.bags.length; e++) {
                if ((f = a.bags[e]) > 0) {
                    for (g = 0; d.length > g; g++) {
                        if (d[g].id === e) {
                            B.unlock.Ⲇⵠᐃⵠᐃ[g] = 1;
                        }
                    }
                }
            }
            d = Jd.ⵠⵠΔᐃⵠ;
            e = 0;
            for (; e < a.crates.length; e++) {
                if ((f = a.crates[e]) > 0) {
                    for (g = 0; g < d.length; g++) {
                        if (e === d[g].id) {
                            B.unlock.ᐃΔᐃΔⲆ[g] = 1;
                            B.unlock.ⵠⲆᐃΔⵠ[g] = 1;
                        }
                    }
                }
            }
        };
        this.ΔⵠΔΔⵠⲆⲆⵠΔ = function () {
            Gf.ⵠΔⵠⵠᐃⵠⵠ = function () {
                U(P);
                (function (a) {
                    var b = new XMLHttpRequest();
                    b.open("GET", Ax + "login?token=" + Gx + "&type=" + Fx + (Cf ? "&userId=" + Cf.userId + "&userInfo=" + Cf.userInfo : ""));
                    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    b.onreadystatechange = function () {
                        if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
                            a(JSON.parse(b.responseText));
                        }
                    };
                    b.send();
                })(B.ΔΔᐃΔⲆΔⲆᐃᐃ);
            };
            if (Ix === 1) {
                Gf.ⵠΔⵠⵠᐃⵠⵠ();
            }
        };
        Gf.ⵠΔⲆⲆⵠΔΔⵠⵠ = function () {
            jx.buttons[jx.ᐃⵠⲆⵠΔΔⵠ].info.active = 1;
            jx.buttons[jx.ⵠⵠᐃⲆⵠᐃΔ].info.active = 0;
            jx.buttons[jx.Ⲇᐃᐃᐃⵠⵠᐃ].info.active = 0;
            U(P);
        };
        this.ᐃⵠΔᐃⲆ = function () {
            return jx.buttons[jx.ⵠⵠᐃⲆⵠᐃΔ].info.active;
        };
        this.buttons[b] = df(461, 105, 0, [jb.ΔᐃⲆΔⲆⵠⵠ, jb.ⵠⵠΔᐃΔΔⵠ, jb.ᐃⵠⵠⲆΔⵠΔ], fa, 0, function () {
            if (B.ᐃⵠΔᐃⲆ()) {
                U(y);
            } else {
                U(m);
            }
        }, -100, 80, da | aa, ia);
        this.buttons[b++].view = R;
        this.buttons[b] = df(157, 158, 0, [jb.ΔⵠΔᐃΔⲆⲆ, jb.ⲆΔᐃᐃⵠᐃⵠ, jb.ⵠΔⲆⲆΔᐃⵠ], fa, 0, function () {
            Gf.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, -35, 125, da | aa, ia);
        this.buttons[b++].view = f;
        this.buttons[b] = df(66, 73, 0, [jb.ΔᐃΔⲆⵠΔΔ, jb.ⲆⵠⵠⲆⲆᐃⲆ, jb.ⵠΔΔⵠΔᐃΔ], fa, 0, undefined, -68, 340, da | aa, ia);
        this.buttons[b++].view = f;
        this.buttons[b] = df(66, 73, 0, [jb.ᐃⲆⵠⲆⵠᐃⵠ, jb.ΔΔⲆⲆⵠᐃᐃ, jb.ᐃⵠⵠⲆⲆΔⵠ], fa, 0, undefined, -30, 340, da | aa, ia);
        this.buttons[b++].view = f;
        this.ᐃⵠⲆⵠⵠΔΔⲆⲆ = b;
        this.buttons[b] = df(97, 66, 0, [jb.ⵠⲆⲆΔⵠΔᐃ, jb.ⲆᐃΔⵠᐃΔΔ, jb.ᐃⵠⵠⲆⲆⲆΔ], fa, 0, function () {
            Zx(undefined, undefined, jx.ⵠⲆⵠⲆΔⲆΔ);
        }, -14, 151, da | aa, ia);
        this.buttons[b++].view = z;
        this.ΔΔⵠΔⵠᐃᐃ = b;
        this.buttons[b] = df(135, 66, 0, [jb.ⲆⲆΔⲆᐃΔⲆ, jb.ΔΔⲆᐃⲆΔⵠ, jb.ᐃᐃᐃⲆⵠᐃᐃ], fa, 0, function () {
            Zx(undefined, Jt, jx.ΔΔⵠΔⵠᐃᐃ);
        }, 37.5, 151, da | aa, ia);
        this.buttons[b++].view = z;
        this.ΔᐃⲆⲆⲆⵠᐃ = b;
        this.buttons[b] = df(160, 66, 0, [jb.ⵠΔᐃᐃⲆΔⵠ, jb.ⲆᐃᐃΔᐃΔΔ, jb.ᐃᐃΔⵠⵠᐃᐃ], fa, 0, function () {
            Zx(yl, undefined, jx.ΔᐃⲆⲆⲆⵠᐃ);
        }, 107.5, 151, da | aa, ia);
        this.buttons[b++].view = z;
        this.ⵠⲆⵠⲆΔⲆΔ = b;
        this.buttons[b] = df(207, 66, 0, [jb.ᐃⲆⵠΔᐃᐃᐃ, jb.ᐃᐃⲆⲆᐃᐃᐃ, jb.ΔⲆᐃⲆΔⲆᐃ], fa, 0, function () {
            Zx(undefined, Jt, jx.ⵠⲆⵠⲆΔⲆΔ);
        }, 190.5, 151, da | aa, ia);
        this.buttons[b++].view = z;
        this.ΔⲆⵠᐃΔΔΔ = b;
        this.buttons[b] = df(144, 66, 0, [jb.ΔⵠΔⲆⵠⵠⵠ, jb.ⲆᐃⵠΔⵠᐃⲆ, jb.ΔΔⲆⲆⵠᐃΔ], fa, 0, function () {
            Zx(jx.ΔⲆⵠᐃΔΔΔ);
        }, 103.5, 110, da | aa, ia);
        this.buttons[b++].view = z;
        this.ΔᐃⵠΔᐃⲆᐃ = b;
        this.buttons[b] = df(124, 66, 0, [jb.ⵠⵠΔᐃᐃⵠⲆ, jb.ⵠⵠᐃⲆⵠΔⲆ, jb.ᐃᐃΔΔⲆᐃΔ], fa, 0, function () {
            Zx(jx.ΔᐃⵠΔᐃⲆᐃ);
        }, 177.5, 110, da | aa, ia);
        this.buttons[b++].view = z;
        this.ΔⲆΔⲆⲆⲆⲆ = b;
        this.buttons[b] = df(104, 66, 0, [jb.ᐃⲆⲆⵠΔᐃᐃ, jb.ᐃⲆΔΔΔⲆΔ, jb.ᐃⵠⵠⲆΔⲆⵠ], fa, 0, function () {
            Zx(jx.ΔⲆΔⲆⲆⲆⲆ);
        }, 242, 110, da | aa, ia);
        this.buttons[b++].view = z;
        this.ΔΔⲆᐃΔⲆⵠ = b;
        this.buttons[b] = df(46, 51, 0, [jb.ΔΔⲆⵠⵠⲆⵠ, jb.ⵠᐃⲆΔⵠⵠⲆ, jb.ⵠⵠⵠᐃⵠᐃⲆ], fa, 0, function () {
            Zx(undefined, undefined, undefined, jx.ΔΔⲆᐃΔⲆⵠ);
        }, -185, 528, da | aa, ia);
        this.buttons[b++].view = z;
        this.ⵠΔⲆⲆΔⵠⵠ = b;
        this.buttons[b] = df(46, 51, 0, [jb.ⲆᐃΔᐃⵠᐃᐃ, jb.ⲆᐃⲆᐃⲆΔⵠ, jb.ⵠⲆⲆⵠⲆⲆⵠ], fa, 0, function () {
            Zx(undefined, undefined, Yl, jx.ⵠΔⲆⲆΔⵠⵠ);
        }, -149, 528, da | aa, ia);
        this.buttons[b++].view = z;
        this.ⵠΔΔⲆΔⵠᐃ = b;
        this.buttons[b] = df(46, 51, 0, [jb.ⵠΔᐃΔⵠⲆᐃ, jb.ᐃᐃᐃⵠⲆⵠⵠ, jb.ᐃⵠⵠΔⲆⲆᐃ], fa, 0, function () {
            Zx(Sq, undefined, _a, jx.ⵠΔΔⲆΔⵠᐃ);
        }, -113, 528, da | aa, ia);
        this.buttons[b++].view = z;
        this.ⲆⲆⲆᐃⲆⵠᐃ = b;
        this.buttons[b] = df(46, 51, 0, [jb.ⲆⵠⲆⵠⵠΔⲆ, jb.ⵠΔΔΔΔⵠⲆ, jb.ⵠΔΔΔΔⲆⵠ], fa, 0, function () {
            Zx(vg, mn, undefined, jx.ⲆⲆⲆᐃⲆⵠᐃ);
        }, -77, 528, da | aa, ia);
        this.buttons[b++].view = z;
        this.ΔⵠᐃⲆᐃⵠⵠ = b;
        this.buttons[b] = df(46, 51, 0, [jb.ⲆⵠΔⲆⵠⲆⲆ, jb.ⲆⲆΔⲆⵠᐃⲆ, jb.ⲆⲆᐃΔⲆᐃⵠ], fa, 0, function () {
            Zx(Vs, undefined, undefined, jx.ΔⵠᐃⲆᐃⵠⵠ);
        }, -41, 528, da | aa, ia);
        this.buttons[b++].view = z;
        this.ⲆⲆⲆᐃΔⲆΔ = b;
        this.buttons[b] = df(46, 51, 0, [jb.ᐃΔΔᐃⲆΔΔ, jb.ᐃⲆⵠᐃⵠᐃᐃ, jb.ΔⵠⵠⵠΔΔⵠ], fa, 0, function () {
            Zx(mn, lj, lj, jx.ⲆⲆⲆᐃΔⲆΔ);
        }, -5, 528, da | aa, ia);
        this.buttons[b++].view = z;
        this.buttons[b] = df(232, 352, 0, [jb.ⲆᐃᐃΔΔⵠΔ, jb.ΔΔΔⲆΔΔⲆ, jb.ᐃᐃⵠⵠⵠⵠΔ], fa, 0, function () {
            $x(300);
        }, -330, 135, da | aa, ia);
        this.buttons[b++].view = y;
        this.buttons[b] = df(232, 352, 0, [jb.ⵠⲆᐃⲆⵠⵠⲆ, jb.ⲆΔΔⵠΔΔⵠ, jb.ⲆᐃΔᐃⵠⲆⲆ], fa, 0, function () {
            $x(600);
        }, -195, 135, da | aa, ia);
        this.buttons[b++].view = y;
        this.buttons[b] = df(243, 374, 0, [jb.ΔⵠΔⵠΔΔΔ, jb.ⲆΔΔⲆᐃΔΔ, jb.ΔⵠΔⲆⵠⲆⲆ], fa, 0, function () {
            $x(2600);
        }, -60, 130, da | aa, ia);
        this.buttons[b++].view = y;
        this.buttons[b] = df(232, 352, 0, [jb.ᐃΔᐃⲆⲆΔⵠ, jb.ⵠᐃⵠⵠᐃΔΔ, jb.ΔⵠⲆⲆᐃᐃΔ], fa, 0, function () {
            $x(7000);
        }, 78, 135, da | aa, ia);
        this.buttons[b++].view = y;
        this.buttons[b] = df(243, 374, 0, [jb.ⵠⵠΔᐃⵠᐃⲆ, jb.ΔᐃⵠΔᐃⵠΔ, jb.ᐃΔⵠⵠᐃⵠⲆ], fa, 0, function () {
            $x(20000);
        }, 213, 130, da | aa, ia);
        this.buttons[b++].view = y;
        this.buttons[b] = df(58, 64, 0, [jb.ᐃΔⲆᐃⲆⲆΔ, jb.ⵠⵠⵠΔⵠⲆⵠ, jb.ⲆⲆⲆⲆΔᐃⵠ], fa, 0, function () {
            U(R);
        }, 300, 88, da | aa, ia);
        this.buttons[b++].view = y;
        this.buttons[b] = df(323, 112, 0, [jb.ⲆⲆᐃΔᐃⵠⲆ, jb.ᐃⲆᐃⵠᐃⲆᐃ, jb.ᐃⵠⲆⲆΔⲆⲆ], fa, 0, function () {
            U(E);
            Fa.ⲆⲆᐃΔΔ();
        }, -315, 185, da | aa, ia);
        this.buttons[b++].view = p;
        this.buttons[b] = df(323, 112, 0, [jb.ⲆⵠΔᐃⲆᐃΔ, jb.ᐃⲆᐃⵠⲆΔⲆ, jb.ⲆⵠΔⵠᐃΔⲆ], fa, 0, function () {
            U(j);
            Ka.ⲆⲆᐃΔΔ();
        }, -315, 321, da | aa, ia);
        this.buttons[b++].view = p;
        this.buttons[b] = df(323, 112, 0, [jb.ⲆᐃΔΔᐃᐃᐃ, jb.ⲆᐃⵠᐃⲆⲆⲆ, jb.ⵠᐃⵠⲆᐃΔΔ], fa, 0, function () {
            U(S);
            Ga.ⲆⲆᐃΔΔ();
        }, 153, 185, da | aa, ia);
        this.buttons[b++].view = p;
        this.buttons[b] = df(323, 112, 0, [jb.ⵠⵠᐃⵠⲆΔⵠ, jb.ⲆΔᐃᐃⵠⲆΔ, jb.ΔΔᐃⲆⵠⵠΔ], fa, 0, function () {
            U(F);
            Ha.ⲆⲆᐃΔΔ();
        }, 153, 321, da | aa, ia);
        this.buttons[b++].view = p;
        this.buttons[b] = df(323, 112, 0, [jb.ᐃⵠΔᐃⵠⲆΔ, jb.ΔⲆⵠⵠⲆΔⲆ, jb.ᐃᐃⲆⵠⵠⵠⲆ], fa, 0, function () {
            U(Q);
            Ia.ⲆⲆᐃΔΔ();
        }, 153, 463, da | aa, ia);
        this.buttons[b++].view = p;
        this.buttons[b] = df(323, 112, 0, [jb.ⲆΔⵠⵠᐃⲆⲆ, jb.ⵠΔΔⲆⵠΔⵠ, jb.ⵠⲆⵠΔⵠᐃᐃ], fa, 0, function () {
            U(G);
            Ja.ⲆⲆᐃΔΔ();
        }, -315, 463, da | aa, ia);
        this.buttons[b++].view = p;
        this.buttons[b] = df(327, 117, 0, [jb.ᐃⲆΔⲆᐃⵠᐃ, jb.ΔⲆⵠⵠᐃⵠⲆ, jb.ⲆⲆⲆΔⵠⲆⲆ], fa, 0, function () {
            U(q);
        }, 155, 70, Y, ja);
        this.buttons[b++].view = P;
        this.buttons[b] = df(130, 129, 0, [jb.ⵠᐃΔᐃⵠᐃᐃ, jb.ᐃΔᐃⲆⵠᐃⵠ, jb.ⲆⵠⲆΔΔΔⲆ], fa, 0, function () {
            C(w, ia, "none");
            U(R);
        }, 10, 40, da | aa, ia);
        this.buttons[b++].view = w;
        this.buttons[b] = df(130, 129, 0, [jb.ⵠᐃΔᐃⵠᐃᐃ, jb.ᐃΔᐃⲆⵠᐃⵠ, jb.ⲆⵠⲆΔΔΔⲆ], fa, 0, function () {
            C(A, ia, "none");
            U(R);
        }, 10, 40, da | aa, ia);
        this.buttons[b++].view = A;
        this.buttons[b] = df(115, 73, 0, [jb.ⵠᐃⲆⵠᐃ, jb.ⵠΔΔᐃⲆ, jb.ⲆⵠᐃᐃΔ], fa, 0, function () {
            U(R);
        }, 200, 140, da | aa, ia);
        this.buttons[b++].view = O;
        this.buttons[b] = df(524, 110, 0, [jb.ⵠⲆⲆⵠᐃⵠΔ, jb.ᐃΔⵠⵠⵠΔᐃ, jb.ⲆΔⵠΔⵠΔᐃ], fa, 0, function () {
            Vx("Atlanta");
        }, -265, 300, da | aa, ia);
        this.buttons[b++].view = O;
        this.buttons[b] = df(523, 110, 0, [jb.ΔⵠΔⵠⵠᐃΔ, jb.ⵠᐃⲆΔΔᐃΔ, jb.ΔΔᐃⲆᐃΔᐃ], fa, 0, function () {
            Vx("LosAngeles");
        }, 5, 300, da | aa, ia);
        this.buttons[b++].view = O;
        this.buttons[b] = df(344, 110, 0, [jb.ⲆΔⲆᐃᐃᐃᐃ, jb.ᐃΔⵠⵠⵠᐃᐃ, jb.ΔΔΔᐃⲆⲆᐃ], fa, 0, function () {
            Vx("Frankfurt");
        }, -265, 365, da | aa, ia);
        this.buttons[b++].view = O;
        this.buttons[b] = df(344, 110, 0, [jb.ΔⵠⵠⲆⵠⲆⲆ, jb.ⵠΔΔΔⲆΔᐃ, jb.ⲆΔⲆᐃΔᐃΔ], fa, 0, function () {
            Vx("Osaka");
        }, 100, 365, da | aa, ia);
        this.buttons[b++].view = O;
        this.buttons[b] = df(344, 110, 0, [jb.ⵠᐃⵠᐃⲆΔΔ, jb.ⵠΔᐃΔΔΔⲆ, jb.ⲆΔⵠⲆⲆΔΔ], fa, 0, function () {
            Vx("Sydney");
        }, -86, 365, da | aa, ia);
        this.buttons[b++].view = O;
        this.buttons[b] = df(115, 73, 0, [jb.ⵠᐃⲆⵠᐃ, jb.ⵠΔΔᐃⲆ, jb.ⲆⵠᐃᐃΔ], fa, 0, function () {
            U(O);
        }, 224, 140, da | aa, ia);
        this.buttons[b++].view = N;
        this.buttons[b] = df(230, 352, 0, [jb.ⲆⲆⵠⵠᐃⵠΔ, jb.ΔΔΔΔΔⲆⲆ, jb.ⲆΔⵠᐃⵠᐃⲆ], fa, 0, function () {
            $x(350);
        }, -280, 240, da | aa, ia);
        this.buttons[b++].view = N;
        this.buttons[b] = df(230, 352, 0, [jb.ΔⵠᐃⲆⵠⲆᐃ, jb.ⲆΔⲆΔⲆᐃⲆ, jb.ⲆⲆᐃΔⵠⵠᐃ], fa, 0, function () {
            $x(700);
        }, -130, 240, da | aa, ia);
        this.buttons[b++].view = N;
        this.buttons[b] = df(230, 352, 0, [jb.ᐃΔᐃⵠⵠᐃⵠ, jb.ⵠⵠΔᐃⵠΔᐃ, jb.ᐃⲆⵠⲆⵠᐃᐃ], fa, 0, function () {
            $x(1400);
        }, 20, 240, da | aa, ia);
        this.buttons[b++].view = N;
        this.buttons[b] = df(230, 352, 0, [jb.ΔⲆⵠⲆⲆᐃᐃ, jb.ⲆⲆⲆⵠΔᐃᐃ, jb.ⲆⵠⵠⵠⲆⵠⵠ], fa, 0, function () {
            $x(3000);
        }, 170, 240, da | aa, ia);
        this.buttons[b++].view = N;
        this.buttons[b] = df(105, 119, 0, [jb.ᐃᐃⲆⲆⲆᐃᐃ, jb.ΔᐃᐃΔΔⵠⲆ, jb.ⵠΔⲆⲆⲆⲆⵠ], fa, 0, function () {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            const b = Gf.document.createElement("textarea");
            b.value = yf + "?server=" + a[1] + "&region=" + a[0];
            Gf.document.body.appendChild(b);
            b.select();
            Gf.document.execCommand("copy");
            Gf.document.body.removeChild(b);
        }, 170, 310, da | aa, ia);
        this.buttons[b++].view = H;
        this.buttons[b] = df(105, 119, 0, [jb.ΔⲆⵠΔⵠⵠᐃ, jb.ΔΔⲆΔⵠⵠⲆ, jb.ⲆᐃᐃⵠΔΔΔ], fa, 0, function () {
            (function () {
                var a = new XMLHttpRequest();
                a.open("GET", Ax + "rebootServer?token=" + Gx + "&userid=" + Hx);
                a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                a.onreadystatechange = function () {
                    if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
                        const a = document.getElementById("serverAddressInput").value.split(" : ");
                        location.href = yf + "?server=" + a[1] + "&region=" + a[0];
                    }
                };
                a.send();
            })();
        }, 235, 310, da | aa, ia);
        this.buttons[b++].view = H;
        this.buttons[b] = df(204, 115, 0, [jb.ΔᐃᐃΔΔⵠᐃ, jb.ⲆᐃⲆⲆᐃⵠⵠ, jb.ΔᐃⲆΔΔΔΔ], fa, 0, function () {
            Gf.open("./commands.html", "_blank");
        }, -265, 490, da | aa, ia);
        this.buttons[b++].view = H;
        this.buttons[b] = df(145, 69, 0, [jb.ⵠΔΔⵠΔᐃⲆ, jb.ΔⲆⲆⲆᐃᐃⵠ, jb.ᐃⵠΔᐃⲆⵠΔ], fa, 0, function () {
            U(k);
        }, -210, 170, da | aa, ia);
        this.buttons[b++].view = R;
        this.buttons[b] = df(145, 69, 0, [jb.ⲆᐃΔⲆᐃΔⲆ, jb.ⵠⲆⵠΔΔⵠⵠ, jb.ⵠΔᐃᐃᐃΔⲆ], fa, 0, function () {
            U(M);
        }, 70, 170, da | aa, ia);
        this.buttons[b++].view = R;
        this.buttons[b] = df(145, 69, 0, [jb.ⵠⲆⵠⵠᐃᐃᐃ, jb.ΔᐃΔⲆⵠⵠⵠ, jb.ΔΔⵠⲆᐃⲆⵠ], fa, 0, function () {
            U(x);
        }, 70, 204, da | aa, ia);
        this.buttons[b++].view = R;
        this.buttons[b] = df(145, 69, 0, [jb.ⵠⵠⵠⵠⲆⲆΔ, jb.ⲆΔⵠᐃᐃⲆΔ, jb.ΔⲆΔΔᐃᐃⲆ], fa, 0, function () {
            U(D);
        }, -210, 204, da | aa, ia);
        this.buttons[b++].view = R;
        this.buttons[b] = df(145, 69, 0, [jb.ⵠⵠⵠⵠⲆⲆΔ, jb.ⲆΔⵠᐃᐃⲆΔ, jb.ΔⲆΔΔᐃᐃⲆ], fa, 0, function () {
            U(I);
        }, 70, 238, da | aa, ia);
        this.buttons[b++].view = R;
        this.buttons[b] = df(145, 69, 0, [jb.ⵠⵠⵠⵠⲆⲆΔ, jb.ⲆΔⵠᐃᐃⲆΔ, jb.ΔⲆΔΔᐃᐃⲆ], fa, 0, function () {
            if (B.ᐃⵠΔᐃⲆ()) {
                Yx(0, 300);
            } else {
                U(m);
            }
        }, 307, 205, da | aa, ia);
        this.buttons[b++].view = R;
        this.buttons[b] = df(145, 69, 0, [jb.ΔⲆᐃΔᐃᐃⵠ, jb.ΔᐃⵠΔⵠⲆᐃ, jb.ⵠⲆΔⵠⲆⲆⲆ], fa, 0, function () {
            U(J);
        }, -210, 238, da | aa, ia);
        this.buttons[b++].view = R;
        this.buttons[b] = df(145, 69, 0, [jb.ΔⲆᐃΔᐃᐃⵠ, jb.ΔᐃⵠΔⵠⲆᐃ, jb.ⵠⲆΔⵠⲆⲆⲆ], fa, 0, function () {
            if (B.ᐃⵠΔᐃⲆ()) {
                Yx(1, 600);
            } else {
                U(m);
            }
        }, 307, 239, da | aa, ia);
        this.buttons[b++].view = R;
        this.buttons[b] = df(192, 101, 0, [jb.ᐃⵠⵠΔᐃᐃᐃ, jb.ⲆΔⲆΔΔΔⲆ, jb.ⵠⵠⲆΔⲆΔⲆ], fa, 0, function () {
            Wx();
        }, -100, 250, da | aa, ia);
        this.buttons[b++].view = T;
        this.buttons[b] = df(192, 104, 0, [jb.ᐃⵠⵠⲆΔΔⵠ, jb.ⵠⵠⵠΔⲆΔⵠ, jb.ΔΔⵠⵠⵠᐃΔ], fa, 0, function () {
            Wx();
        }, -100, 239, da | aa, ia);
        this.buttons[b++].view = L;
        this.buttons[b] = df(192, 101, 0, [jb.ᐃᐃⵠᐃΔⲆᐃ, jb.ᐃⵠⲆΔΔⲆᐃ, jb.ΔᐃⵠⵠΔᐃⲆ], fa, 0, function () {
            U(c);
        }, 10, 250, da | aa, ia);
        this.buttons[b++].view = T;
        this.buttons[b] = df(192, 104, 0, [jb.ᐃⲆⵠⵠᐃⵠⲆ, jb.ⵠⵠⲆΔⵠⵠⲆ, jb.ᐃᐃⲆᐃᐃⵠⲆ], fa, 0, function () {
            U(c);
        }, 10, 239, da | aa, ia);
        this.buttons[b++].view = L;
        ⵠᐃⵠᐃΔ = [];
        ⵠᐃⵠᐃΔ[Mb.ⲆΔⲆᐃᐃ] = [jb.ᐃⵠΔᐃⵠΔⵠ, jb.ΔΔᐃΔⲆⵠⵠ, jb.ᐃⲆΔⵠΔⲆⲆ];
        ⵠᐃⵠᐃΔ[Mb.ⵠᐃΔᐃ] = [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ];
        ⵠᐃⵠᐃΔ[Mb.ᐃⵠⵠᐃ] = [jb.ᐃⵠΔΔⲆΔᐃ, jb.ⵠᐃΔΔᐃⲆΔ, jb.ΔⲆΔΔᐃᐃΔ];
        ⵠᐃⵠᐃΔ[Mb.ᐃⵠⲆᐃ] = [jb.ᐃΔᐃᐃᐃᐃᐃ, jb.ΔⲆⲆᐃⵠⲆᐃ, jb.ⲆᐃᐃΔⲆΔᐃ];
        ⵠᐃⵠᐃΔ[Mb.ⵠⲆΔⲆ] = [jb.ⲆⲆᐃᐃⵠⲆΔ, jb.ⵠⲆΔΔΔΔⵠ, jb.ᐃᐃⵠᐃⲆᐃⲆ];
        ⵠᐃⵠᐃΔ[Mb.ⵠⵠⲆⵠ] = [jb.ⲆⵠⲆⲆΔᐃΔ, jb.ᐃᐃⲆⵠⲆⵠⵠ, jb.ⲆⲆΔᐃⲆΔⵠ];
        ⵠᐃⵠᐃΔ[Mb.ᐃⵠᐃΔ] = [jb.ⵠᐃᐃᐃⵠⵠᐃ, jb.ᐃᐃᐃⲆⵠⲆΔ, jb.ⵠⵠᐃᐃΔⵠⲆ];
        ⵠᐃⵠᐃΔ[Mb.ΔⲆᐃᐃⵠ] = [jb.ΔⵠΔⲆⵠⲆΔ, jb.ᐃᐃⵠⲆⲆΔΔ, jb.ᐃᐃⲆⲆⵠⵠΔ];
        ⵠᐃⵠᐃΔ[Mb.ᐃΔⲆⵠᐃᐃⵠ] = [jb.ⲆᐃⲆⵠᐃⵠΔ, jb.ⵠᐃΔⵠᐃⵠⵠ, jb.ΔΔⵠⵠⲆⵠΔ];
        ᐃΔⲆⵠⵠⲆΔ = b;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, -29, 205, da | aa, ia);
        this.buttons[b++].view = E;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, od, -29, 300, da | aa, ia);
        this.buttons[b++].view = E;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, Yl, -29, 395, da | aa, ia);
        this.buttons[b++].view = E;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, Ab, 65, 205, da | aa, ia);
        this.buttons[b++].view = E;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 65, 300, da | aa, ia);
        this.buttons[b++].view = E;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, fh, 65, 395, da | aa, ia);
        this.buttons[b++].view = E;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 159, 205, da | aa, ia);
        this.buttons[b++].view = E;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, Pg, 159, 300, da | aa, ia);
        this.buttons[b++].view = E;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 159, 395, da | aa, ia);
        this.buttons[b++].view = E;
        this.buttons[b] = df(39, 122, 0, [jb.ⵠᐃΔΔΔⵠᐃ, jb.ⲆΔᐃⵠⲆΔΔ, jb.ΔⵠᐃᐃᐃᐃⲆ], fa, 0, Vs, -61, 315, da | aa, ia);
        this.buttons[b++].view = E;
        this.buttons[b] = df(39, 122, 0, [jb.ΔⵠⵠⲆᐃⲆᐃ, jb.ⵠⵠⵠᐃᐃⲆⲆ, jb.ᐃΔⲆΔᐃΔⵠ], fa, 0, fh, 260, 315, da | aa, ia);
        this.buttons[b++].view = E;
        this.buttons[b] = df(115, 73, 0, [jb.ⵠᐃⲆⵠᐃ, jb.ⵠΔΔᐃⲆ, jb.ⲆⵠᐃᐃΔ], fa, 0, function () {
            U(p);
        }, -320, 470, da | aa, ia);
        this.buttons[b++].view = E;
        ᐃⲆᐃΔᐃⵠᐃⵠᐃ = b;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, Yl, -29, 205, da | aa, ia);
        this.buttons[b++].view = j;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, -29, 300, da | aa, ia);
        this.buttons[b++].view = j;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, Ab, -29, 395, da | aa, ia);
        this.buttons[b++].view = j;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 65, 205, da | aa, ia);
        this.buttons[b++].view = j;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 65, 300, da | aa, ia);
        this.buttons[b++].view = j;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 65, 395, da | aa, ia);
        this.buttons[b++].view = j;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, Ab, 159, 205, da | aa, ia);
        this.buttons[b++].view = j;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 159, 300, da | aa, ia);
        this.buttons[b++].view = j;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, gs, 159, 395, da | aa, ia);
        this.buttons[b++].view = j;
        this.buttons[b] = df(39, 122, 0, [jb.ⵠᐃΔΔΔⵠᐃ, jb.ⲆΔᐃⵠⲆΔΔ, jb.ΔⵠᐃᐃᐃᐃⲆ], fa, 0, Vs, -61, 315, da | aa, ia);
        this.buttons[b++].view = j;
        this.buttons[b] = df(39, 122, 0, [jb.ΔⵠⵠⲆᐃⲆᐃ, jb.ⵠⵠⵠᐃᐃⲆⲆ, jb.ᐃΔⲆΔᐃΔⵠ], fa, 0, Yl, 260, 315, da | aa, ia);
        this.buttons[b++].view = j;
        this.buttons[b] = df(115, 73, 0, [jb.ⵠᐃⲆⵠᐃ, jb.ⵠΔΔᐃⲆ, jb.ⲆⵠᐃᐃΔ], fa, 0, function () {
            U(p);
        }, -320, 470, da | aa, ia);
        this.buttons[b++].view = j;
        ᐃⵠⵠⲆᐃᐃΔⵠⲆ = b;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, -29, 205, da | aa, ia);
        this.buttons[b++].view = G;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, lj, -29, 300, da | aa, ia);
        this.buttons[b++].view = G;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, vg, -29, 395, da | aa, ia);
        this.buttons[b++].view = G;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 65, 205, da | aa, ia);
        this.buttons[b++].view = G;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, lj, 65, 300, da | aa, ia);
        this.buttons[b++].view = G;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 65, 395, da | aa, ia);
        this.buttons[b++].view = G;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, Sq, 159, 205, da | aa, ia);
        this.buttons[b++].view = G;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 159, 300, da | aa, ia);
        this.buttons[b++].view = G;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 159, 395, da | aa, ia);
        this.buttons[b++].view = G;
        this.buttons[b] = df(39, 122, 0, [jb.ⵠᐃΔΔΔⵠᐃ, jb.ⲆΔᐃⵠⲆΔΔ, jb.ΔⵠᐃᐃᐃᐃⲆ], fa, 0, undefined, -61, 315, da | aa, ia);
        this.buttons[b++].view = G;
        this.buttons[b] = df(39, 122, 0, [jb.ΔⵠⵠⲆᐃⲆᐃ, jb.ⵠⵠⵠᐃᐃⲆⲆ, jb.ᐃΔⲆΔᐃΔⵠ], fa, 0, _h, 260, 315, da | aa, ia);
        this.buttons[b++].view = G;
        this.buttons[b] = df(115, 73, 0, [jb.ⵠᐃⲆⵠᐃ, jb.ⵠΔΔᐃⲆ, jb.ⲆⵠᐃᐃΔ], fa, 0, function () {
            U(p);
        }, -320, 470, da | aa, ia);
        this.buttons[b++].view = G;
        ⵠⲆⵠᐃⵠᐃΔᐃΔ = b;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, _h, -29, 205, da | aa, ia);
        this.buttons[b++].view = S;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, Go, -29, 300, da | aa, ia);
        this.buttons[b++].view = S;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, fk, -29, 395, da | aa, ia);
        this.buttons[b++].view = S;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 65, 205, da | aa, ia);
        this.buttons[b++].view = S;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 65, 300, da | aa, ia);
        this.buttons[b++].view = S;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 65, 395, da | aa, ia);
        this.buttons[b++].view = S;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, Gi, 159, 205, da | aa, ia);
        this.buttons[b++].view = S;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, gs, 159, 300, da | aa, ia);
        this.buttons[b++].view = S;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 159, 395, da | aa, ia);
        this.buttons[b++].view = S;
        this.buttons[b] = df(39, 122, 0, [jb.ⵠᐃΔΔΔⵠᐃ, jb.ⲆΔᐃⵠⲆΔΔ, jb.ΔⵠᐃᐃᐃᐃⲆ], fa, 0, fh, -61, 315, da | aa, ia);
        this.buttons[b++].view = S;
        this.buttons[b] = df(39, 122, 0, [jb.ΔⵠⵠⲆᐃⲆᐃ, jb.ⵠⵠⵠᐃᐃⲆⲆ, jb.ᐃΔⲆΔᐃΔⵠ], fa, 0, undefined, 260, 315, da | aa, ia);
        this.buttons[b++].view = S;
        this.buttons[b] = df(115, 73, 0, [jb.ⵠᐃⲆⵠᐃ, jb.ⵠΔΔᐃⲆ, jb.ⲆⵠᐃᐃΔ], fa, 0, function () {
            U(p);
        }, -320, 470, da | aa, ia);
        this.buttons[b++].view = S;
        ⲆΔΔᐃᐃΔΔⵠⵠ = b;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, -29, 205, da | aa, ia);
        this.buttons[b++].view = F;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, -29, 300, da | aa, ia);
        this.buttons[b++].view = F;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, -29, 395, da | aa, ia);
        this.buttons[b++].view = F;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 65, 205, da | aa, ia);
        this.buttons[b++].view = F;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 65, 300, da | aa, ia);
        this.buttons[b++].view = F;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 65, 395, da | aa, ia);
        this.buttons[b++].view = F;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, fk, 159, 205, da | aa, ia);
        this.buttons[b++].view = F;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, qs, 159, 300, da | aa, ia);
        this.buttons[b++].view = F;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, fh, 159, 395, da | aa, ia);
        this.buttons[b++].view = F;
        this.buttons[b] = df(39, 122, 0, [jb.ⵠᐃΔΔΔⵠᐃ, jb.ⲆΔᐃⵠⲆΔΔ, jb.ΔⵠᐃᐃᐃᐃⲆ], fa, 0, fk, -61, 315, da | aa, ia);
        this.buttons[b++].view = F;
        this.buttons[b] = df(39, 122, 0, [jb.ΔⵠⵠⲆᐃⲆᐃ, jb.ⵠⵠⵠᐃᐃⲆⲆ, jb.ᐃΔⲆΔᐃΔⵠ], fa, 0, undefined, 260, 315, da | aa, ia);
        this.buttons[b++].view = F;
        this.buttons[b] = df(115, 73, 0, [jb.ⵠᐃⲆⵠᐃ, jb.ⵠΔΔᐃⲆ, jb.ⲆⵠᐃᐃΔ], fa, 0, function () {
            U(p);
        }, -320, 470, da | aa, ia);
        this.buttons[b++].view = F;
        ⲆⲆⵠᐃⲆⲆⵠΔⲆ = b;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, -29, 205, da | aa, ia);
        this.buttons[b++].view = Q;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, -29, 300, da | aa, ia);
        this.buttons[b++].view = Q;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, Vs, -29, 395, da | aa, ia);
        this.buttons[b++].view = Q;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 65, 205, da | aa, ia);
        this.buttons[b++].view = Q;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, Pg, 65, 300, da | aa, ia);
        this.buttons[b++].view = Q;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 65, 395, da | aa, ia);
        this.buttons[b++].view = Q;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, fk, 159, 205, da | aa, ia);
        this.buttons[b++].view = Q;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, undefined, 159, 300, da | aa, ia);
        this.buttons[b++].view = Q;
        this.buttons[b] = df(178, 182, 0, [jb.ⵠΔΔⵠ, jb.ⵠⵠⲆΔ, jb.ᐃⲆⲆⲆ], fa, 0, lj, 159, 395, da | aa, ia);
        this.buttons[b++].view = Q;
        this.buttons[b] = df(39, 122, 0, [jb.ⵠᐃΔΔΔⵠᐃ, jb.ⲆΔᐃⵠⲆΔΔ, jb.ΔⵠᐃᐃᐃᐃⲆ], fa, 0, Gi, -61, 315, da | aa, ia);
        this.buttons[b++].view = Q;
        this.buttons[b] = df(39, 122, 0, [jb.ΔⵠⵠⲆᐃⲆᐃ, jb.ⵠⵠⵠᐃᐃⲆⲆ, jb.ᐃΔⲆΔᐃΔⵠ], fa, 0, undefined, 260, 315, da | aa, ia);
        this.buttons[b++].view = Q;
        this.buttons[b] = df(115, 73, 0, [jb.ⵠᐃⲆⵠᐃ, jb.ⵠΔΔᐃⲆ, jb.ⲆⵠᐃᐃΔ], fa, 0, function () {
            U(p);
        }, -320, 470, da | aa, ia);
        this.buttons[b++].view = Q;
        this.buttons[b] = df(260, 260, 0, [jb.ⲆΔΔΔΔΔⵠ, jb.ᐃⲆⵠⵠⵠᐃΔ, jb.ⲆⲆᐃᐃⵠΔᐃ], fa, 0, function () {
            if (B.ᐃⵠΔᐃⲆ()) {
                _x(3, 50);
            } else {
                U(m);
            }
        }, -65, 197, da | aa, ia);
        this.buttons[b++].view = M;
        this.buttons[b] = df(115, 73, 0, [jb.ⵠᐃⲆⵠᐃ, jb.ⵠΔΔᐃⲆ, jb.ⲆⵠᐃᐃΔ], fa, 0, function () {
            U(R);
        }, 309, 180, da | aa, ia);
        this.buttons[b++].view = M;
        this.buttons[b] = df(260, 260, 0, [jb.ᐃᐃⲆⵠⲆᐃΔ, jb.ⲆᐃⲆΔᐃⵠⵠ, jb.ᐃⲆⵠⵠⲆᐃΔ], fa, 0, function () {
            if (B.ᐃⵠΔᐃⲆ()) {
                _x(0, 100);
            } else {
                U(m);
            }
        }, -65, 197, da | aa, ia);
        this.buttons[b++].view = k;
        this.buttons[b] = df(115, 73, 0, [jb.ⵠᐃⲆⵠᐃ, jb.ⵠΔΔᐃⲆ, jb.ⲆⵠᐃᐃΔ], fa, 0, function () {
            U(R);
        }, 309, 180, da | aa, ia);
        this.buttons[b++].view = k;
        this.buttons[b] = df(260, 260, 0, [jb.ᐃΔⵠⵠᐃⵠᐃ, jb.ᐃⵠᐃⵠΔⲆⲆ, jb.ΔⵠⲆⵠⵠΔᐃ], fa, 0, function () {
            if (B.ᐃⵠΔᐃⲆ()) {
                _x(4, 150);
            } else {
                U(m);
            }
        }, -65, 197, da | aa, ia);
        this.buttons[b++].view = x;
        this.buttons[b] = df(115, 73, 0, [jb.ⵠᐃⲆⵠᐃ, jb.ⵠΔΔᐃⲆ, jb.ⲆⵠᐃᐃΔ], fa, 0, function () {
            U(R);
        }, 309, 180, da | aa, ia);
        this.buttons[b++].view = x;
        this.buttons[b] = df(260, 260, 0, [jb.ΔⲆΔΔⵠᐃⵠ, jb.ΔΔΔᐃⵠᐃᐃ, jb.ⲆⵠⵠⲆⵠᐃᐃ], fa, 0, function () {
            if (B.ᐃⵠΔᐃⲆ()) {
                _x(1, 300);
            } else {
                U(m);
            }
        }, -65, 197, da | aa, ia);
        this.buttons[b++].view = D;
        this.buttons[b] = df(115, 73, 0, [jb.ⵠᐃⲆⵠᐃ, jb.ⵠΔΔᐃⲆ, jb.ⲆⵠᐃᐃΔ], fa, 0, function () {
            U(R);
        }, 309, 180, da | aa, ia);
        this.buttons[b++].view = D;
        this.buttons[b] = df(260, 260, 0, [jb.ⲆᐃⲆⲆⲆⲆᐃ, jb.ΔΔⵠΔⲆⲆⲆ, jb.ᐃⲆⲆⲆΔⵠⵠ], fa, 0, function () {
            if (B.ᐃⵠΔᐃⲆ()) {
                _x(2, 600);
            } else {
                U(m);
            }
        }, -65, 197, da | aa, ia);
        this.buttons[b++].view = J;
        this.buttons[b] = df(115, 73, 0, [jb.ⵠᐃⲆⵠᐃ, jb.ⵠΔΔᐃⲆ, jb.ⲆⵠᐃᐃΔ], fa, 0, function () {
            U(R);
        }, 309, 180, da | aa, ia);
        this.buttons[b++].view = J;
        this.buttons[b] = df(260, 260, 0, [jb.ΔⲆΔΔⵠᐃⵠ, jb.ΔΔΔᐃⵠᐃᐃ, jb.ⲆⵠⵠⲆⵠᐃᐃ], fa, 0, function () {
            if (B.ᐃⵠΔᐃⲆ()) {
                _x(5, 300);
            } else {
                U(m);
            }
        }, -65, 197, da | aa, ia);
        this.buttons[b++].view = I;
        this.buttons[b] = df(115, 73, 0, [jb.ⵠᐃⲆⵠᐃ, jb.ⵠΔΔᐃⲆ, jb.ⲆⵠᐃᐃΔ], fa, 0, function () {
            U(R);
        }, 309, 180, da | aa, ia);
        this.buttons[b++].view = I;
        var ua = b;
        this.buttons[b] = df(46, 51, 0, [jb.ⵠⲆᐃᐃᐃⲆⵠ, jb.ⲆⵠⲆⲆⲆⲆⵠ, jb.ΔᐃⲆⵠⵠΔⵠ], fa, 0, function () {
            ta(mn, 0);
        }, -305, 132, da | aa, ia);
        this.buttons[b++].view = c;
        var va = b;
        this.buttons[b] = df(46, 51, 0, [jb.ⲆⵠⵠΔⵠⲆⲆ, jb.ⲆⵠⲆΔΔⲆⲆ, jb.ⲆᐃⵠⵠⲆΔⲆ], fa, 0, function () {
            ta(fh, 1);
        }, -273, 132, da | aa, ia);
        this.buttons[b++].view = c;
        var wa = b;
        this.buttons[b] = df(46, 51, 0, [jb.ⲆⲆᐃΔⲆᐃΔ, jb.ⵠΔⵠᐃᐃᐃⵠ, jb.ⵠΔⲆⵠⲆⵠᐃ], fa, 0, function () {
            ta(undefined, 2);
        }, -241, 132, da | aa, ia);
        this.buttons[b++].view = c;
        var xa = b;
        this.buttons[b] = df(46, 51, 0, [jb.ᐃⲆⲆᐃⵠⵠΔ, jb.ⵠⲆΔΔᐃⲆⵠ, jb.ⲆΔⲆⲆᐃᐃᐃ], fa, 0, function () {
            ta(undefined, 3);
        }, -305, 165, da | aa, ia);
        this.buttons[b++].view = c;
        var ya = b;
        this.buttons[b] = df(46, 51, 0, [jb.ⵠΔⲆᐃⵠⵠⲆ, jb.ΔⲆⲆΔⲆΔⵠ, jb.ⲆⵠΔⵠⲆΔΔ], fa, 0, function () {
            ta(undefined, 4);
        }, -273, 165, da | aa, ia);
        this.buttons[b++].view = c;
        var za = b;
        this.buttons[b] = df(46, 51, 0, [jb.ⵠⲆᐃⲆᐃᐃΔ, jb.ⵠⲆΔⲆᐃᐃᐃ, jb.ⵠᐃᐃᐃΔΔᐃ], fa, 0, function () {
            ta(Go, 5);
        }, -241, 165, da | aa, ia);
        this.buttons[b++].view = c;
        var Aa = b;
        this.buttons[b] = df(460, 73, 0, [jb.ΔᐃΔΔⲆΔΔ, jb.ΔⲆΔⲆΔᐃⲆ, jb.ⵠⲆⵠⲆᐃΔⵠ], fa, 0, function () {
            ta(-1);
        }, -180, 170, da | aa, ia);
        this.buttons[b++].view = c;
        var Ba = b;
        this.buttons[b] = df(222, 68, 0, [jb.ᐃⲆⲆᐃⲆΔⲆ, jb.ᐃΔⵠⵠΔΔⲆ, jb.ⲆΔᐃΔΔᐃⵠ], fa, 0, function () {
            ta(0);
        }, -180, 215, da | aa, ia);
        this.buttons[b++].view = c;
        var Ca = b;
        this.buttons[b] = df(222, 68, 0, [jb.ΔⲆⲆΔᐃΔᐃ, jb.ⲆΔⲆⵠΔⲆⲆ, jb.ⵠⲆⵠⵠᐃΔΔ], fa, 0, function () {
            ta(4);
        }, -180, 260, da | aa, ia);
        this.buttons[b++].view = c;
        var Da = b;
        this.buttons[b] = df(222, 68, 0, [jb.ΔⵠⲆⵠⲆᐃⵠ, jb.ᐃⲆΔᐃⲆΔΔ, jb.ⲆⵠⲆᐃⲆⲆⵠ], fa, 0, function () {
            ta(2);
        }, -60, 215, da | aa, ia);
        this.buttons[b++].view = c;
        var Ea = b;
        this.buttons[b] = df(222, 68, 0, [jb.ᐃⵠᐃᐃᐃⵠⲆ, jb.ⵠⲆᐃⲆᐃⵠᐃ, jb.ΔⲆᐃΔⲆᐃⲆ], fa, 0, function () {
            ta(3);
        }, -60, 260, da | aa, ia);
        this.buttons[b++].view = c;
        this.ΔΔⲆⲆΔΔⲆ = b;
        this.buttons[b] = df(143, 66, 0, [jb.ᐃΔⲆΔᐃⵠⵠ, jb.ΔᐃⵠⵠⲆΔⲆ, jb.ΔΔᐃⲆⲆᐃⲆ], fa, 0, function () {
            Zx(undefined, jx.ΔΔⲆⲆΔΔⲆ);
        }, -298, 110, da | aa, ia);
        this.buttons[b++].view = z;
        this.ΔⲆᐃⵠᐃᐃᐃ = b;
        this.buttons[b] = df(104, 66, 0, [jb.ⲆΔⵠⲆⲆΔⲆ, jb.ᐃⵠΔΔΔⲆⲆ, jb.ⵠᐃᐃⵠⵠΔⵠ], fa, 0, function () {
            Zx(gs, jx.ΔⲆᐃⵠᐃᐃᐃ);
        }, -223, 110, da | aa, ia);
        this.buttons[b++].view = z;
        this.ⵠΔᐃΔⲆΔⲆ = b;
        this.buttons[b] = df(110, 66, 0, [jb.ⲆᐃΔΔⲆᐃΔ, jb.ⵠᐃⲆᐃΔⲆΔ, jb.ⲆΔⲆⲆΔⵠⲆ], fa, 0, function () {
            Zx(undefined, jx.ⵠΔᐃΔⲆΔⲆ);
        }, -168, 110, da | aa, ia);
        this.buttons[b++].view = z;
        this.ⲆᐃⲆᐃᐃΔⲆ = b;
        this.buttons[b] = df(88, 66, 0, [jb.ⵠΔⵠᐃⵠⲆᐃ, jb.ΔⵠⵠᐃΔⲆᐃ, jb.ΔΔΔⵠᐃⲆΔ], fa, 0, function () {
            Zx(Pg, jx.ⲆᐃⲆᐃᐃΔⲆ);
        }, -110, 110, da | aa, ia);
        this.buttons[b++].view = z;
        this.ⲆⵠΔᐃⲆⲆⵠ = b;
        this.buttons[b] = df(88, 66, 0, [jb.ⵠⲆᐃⵠᐃⵠⵠ, jb.ⵠⵠᐃⲆᐃⲆᐃ, jb.ⵠⵠⵠⲆⵠⲆᐃ], fa, 0, function () {
            Zx(undefined, jx.ⲆⵠΔᐃⲆⲆⵠ);
        }, -63, 110, da | aa, ia);
        this.buttons[b++].view = z;
        this.buttons[b] = df(86, 44, 0, [jb.ⵠⵠᐃⲆᐃΔⲆ, jb.ᐃⲆⲆΔΔⲆⵠ, jb.ΔᐃᐃᐃⵠⵠΔ], fa, 0, function () {
            Gf.open("./terms.html", "_blank");
        }, 349, 290, da | aa, ia);
        this.buttons[b++].view = R;
        var Fa = new e(Jd.ⲆⵠⵠΔⵠ, ᐃΔⲆⵠⵠⲆΔ, function (a) {
            jx.ᐃΔⲆΔ = a;
            if (jx.unlock.ᐃΔⲆΔ[a] === 1) {
                ⲆⵠΔⵠ.set("starve_skin", "" + a, {
                    expires: 30
                });
            }
        }, this.ᐃΔⲆΔ, this.unlock.ᐃΔⲆΔ);
        var Ga = new e(Jd.ᐃΔΔᐃ, ⵠⲆⵠᐃⵠᐃΔᐃΔ, function (a) {
            jx.Ⲇⵠᐃⵠᐃ = a;
            if (jx.unlock.Ⲇⵠᐃⵠᐃ[a] === 1) {
                ⲆⵠΔⵠ.set("starve_bag", "" + a, {
                    expires: 30
                });
            }
        }, this.Ⲇⵠᐃⵠᐃ, this.unlock.Ⲇⵠᐃⵠᐃ);
        var Ha = new e(Jd.ΔᐃᐃᐃⲆ, ⲆΔΔᐃᐃΔΔⵠⵠ, function (a) {
            jx.ΔⵠΔⵠⲆ = a;
            if (jx.unlock.ΔⵠΔⵠⲆ[a] === 1) {
                ⲆⵠΔⵠ.set("starve_book", "" + a, {
                    expires: 30
                });
            }
        }, this.ΔⵠΔⵠⲆ, this.unlock.ΔⵠΔⵠⲆ);
        var Ia = new e(Jd.ⵠⵠΔᐃⵠ, ⲆⲆⵠᐃⲆⲆⵠΔⲆ, function (a) {
            jx.ⵠⲆᐃΔⵠ = a;
            if (jx.unlock.ⵠⲆᐃΔⵠ[a] === 1) {
                ⲆⵠΔⵠ.set("starve_dead", "" + a, {
                    expires: 30
                });
            }
        }, this.ⵠⲆᐃΔⵠ, this.unlock.ⵠⲆᐃΔⵠ);
        var Ja = new e(Jd.ⵠⵠΔᐃⵠ, ᐃⵠⵠⲆᐃᐃΔⵠⲆ, function (a) {
            jx.ᐃΔᐃΔⲆ = a;
            if (jx.unlock.ᐃΔᐃΔⲆ[a] === 1) {
                ⲆⵠΔⵠ.set("starve_crate", "" + a, {
                    expires: 30
                });
            }
        }, this.ᐃΔᐃΔⲆ, this.unlock.ᐃΔᐃΔⲆ);
        var Ka = new e(Jd.ⵠΔⵠΔⲆ, ᐃⲆᐃΔᐃⵠᐃⵠᐃ, function (a) {
            jx.ⲆᐃⲆΔΔ = a;
            if (jx.unlock.ⲆᐃⲆΔΔ[a] === 1) {
                ⲆⵠΔⵠ.set("starve_accessory", "" + a, {
                    expires: 30
                });
            }
        }, this.ⲆᐃⲆΔΔ, this.unlock.ⲆᐃⲆΔΔ);
        this.ᐃⵠⲆⲆΔΔΔ = function (a) {
            sx.ᐃⲆᐃᐃ = lf(B.ⲆⲆ, a);
            for (var b = 0; b < B.buttons.length; b++) {
                if (B.buttons[b].info.active === ja) {
                    B.buttons[b].ⵠⵠΔΔ(B.ⲆⲆ, sx.ᐃⲆᐃᐃ, of);
                }
            }
        };
        this.ΔⵠᐃΔⲆΔᐃ = function (a) {
            sx.ᐃⲆᐃᐃ = lf(B.ⲆⲆ, a);
            for (var b = 0; b < B.buttons.length; b++) {
                var c = B.buttons[b];
                if (c.info.active === ja && c.ⵠⵠΔΔ(B.ⲆⲆ, sx.ᐃⲆᐃᐃ, af)) {
                    c.info.callback();
                    return;
                }
            }
        };
        this.ᐃᐃΔⲆᐃⵠⵠ = Yk;
        this.ΔⲆⵠᐃⵠᐃᐃ = function (a) {
            sx.ᐃⲆᐃᐃ = lf(B.ⲆⲆ, a);
            var b = false;
            for (var c = 0; B.buttons.length > c; c++) {
                if (ja === B.buttons[c].info.active) {
                    b |= B.buttons[c].ⵠⵠΔΔ(B.ⲆⲆ, sx.ᐃⲆᐃᐃ, nf);
                }
            }
            if (b !== B.ᐃᐃΔⲆᐃⵠⵠ) {
                B.ᐃᐃΔⲆᐃⵠⵠ = b;
                i.style.cursor = b ? B.ⲆⲆΔᐃΔΔΔ : B.ᐃⲆⲆⲆⵠᐃⲆ;
            }
        };
        this.ⲆⲆᐃᐃΔΔΔ = function () {
            Gf.addEventListener("mousedown", this.ᐃⵠⲆⲆΔΔΔ, kr);
            Gf.addEventListener("mouseup", this.ΔⵠᐃΔⲆΔᐃ, false);
            Gf.addEventListener("mousemove", this.ΔⲆⵠᐃⵠᐃᐃ, el);
        };
        this.ⲆΔᐃⵠΔⲆⵠ = function () {
            Gf.removeEventListener("mousedown", this.ᐃⵠⲆⲆΔΔΔ, false);
            Gf.removeEventListener("mouseup", this.ΔⵠᐃΔⲆΔᐃ, th);
            Gf.removeEventListener("mousemove", this.ΔⲆⵠᐃⵠᐃᐃ, false);
        };
    }
    function Mw() {
        Z.ᐃᐃΔⵠⵠΔⵠ("https://twitter.com/intent/tweet?text=I%20survived%20" + nx.ΔᐃⲆ + "%20days%20with%20" + nx.ⵠᐃΔΔΔⵠΔ.ⵠᐃⲆⲆⵠ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
    }
    if (Gf.ΔⵠⲆⵠᐃⵠⵠ) {
        var Nw = Gf.Math.acos;
        Gf.Math.acos = Gf.Math.asin;
        Gf.Math.asin = Nw;
        var Ow = Gf.Math.acos;
        Gf.Math.acos = Gf.Math.asin;
        Gf.Math.asin = Ow;
    }
    function Pw(b, c, d, e, f) {
        const g = ~(e & 28664) & (e | 28664);
        const a = (16 << (f >> 8 & 255)) + (8 << (f & 255)) + (24 << (f >> 16 & 255)) + (0 << (f >> 24 & 255));
        const h = rt((1 + (b + 26886) * 22695477) % 4294967296);
        lt(g, a);
        return ~(h & 10205) & 10205 | ~(h & 10205) & h;
    }
    function Qw(b, c, d, e, f) {
        const g = ~(b & 23786) & 23786 | ~(b & 23786) & b;
        const a = (16 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (0 << (c >> 16 & 255)) + (24 << (c >> 0 & 255));
        const i = d ^ 6948;
        const j = ~(e & 38553) & (e | 38553);
        const h = ~(f & 49151) & (f | 49151);
        return (1 + (3344 + (xr(g, a, i, j, h) ^ Pw(g, 0, 0, j, h))) * 22695477) % 4294967296;
    }
    (function () {
        function b() {
            this.ⲆⵠᐃⲆⲆ();
        }
        b.prototype = {
            ⲆⵠᐃⲆⲆ: function () {
                var a = this || j;
                a.ⵠⵠΔΔⵠᐃΔ = 1000;
                a.ⲆΔⵠᐃⵠⵠⵠ = {};
                a.ᐃᐃΔΔⵠ = [];
                a.ⵠᐃΔⵠᐃ = false;
                a.ᐃⵠⵠⵠⵠ = 1;
                a.ⲆΔⵠⵠΔⵠⲆ = "canplaythrough";
                a.ΔⲆᐃⲆΔ = typeof Gf != "undefined" && Gf.navigator ? Gf.navigator : null;
                a.ⲆⵠⲆᐃⲆⲆⲆ = null;
                a.ᐃⵠⲆΔᐃⵠΔ = false;
                a.ⲆᐃᐃᐃΔ = true;
                a.ΔΔΔⵠⵠⲆⵠ = true;
                a.ᐃ = null;
                a.ⵠΔⵠⵠΔⵠⵠ = true;
                a.ΔⵠΔⵠΔΔᐃ();
                return a;
            },
            volume: function (b) {
                var c = this || j;
                b = parseFloat(b);
                if (!c.ᐃ) {
                    i();
                }
                if (b !== undefined && b >= 0 && b <= 1) {
                    c.ᐃⵠⵠⵠⵠ = b;
                    if (c.ⵠᐃΔⵠᐃ) {
                        return c;
                    }
                    if (c.ⲆᐃᐃᐃΔ) {
                        c.ⲆⵠⲆᐃⲆⲆⲆ.gain.value = b;
                    }
                    for (var d = 0; d < c.ᐃᐃΔΔⵠ.length; d++) {
                        if (!c.ᐃᐃΔΔⵠ[d].ᐃⲆᐃᐃᐃ) {
                            for (var f = c.ᐃᐃΔΔⵠ[d].ⵠⲆⲆⵠΔ(), g = 0; g < f.length; g++) {
                                var h = c.ᐃᐃΔΔⵠ[d].ΔⵠⲆᐃⲆ(f[g]);
                                if (h && h.ⵠⲆᐃⲆ) {
                                    h.ⵠⲆᐃⲆ.volume = h.ᐃⵠⵠⵠⵠ * b;
                                }
                            }
                        }
                    }
                    return c;
                }
                return c.ᐃⵠⵠⵠⵠ;
            },
            ⲆⵠⵠΔᐃΔΔ: function (b) {
                var c = this || j;
                if (!c.ᐃ) {
                    i();
                }
                c.ⵠᐃΔⵠᐃ = b;
                if (c.ⲆᐃᐃᐃΔ) {
                    c.ⲆⵠⲆᐃⲆⲆⲆ.gain.value = b ? 0 : c.ᐃⵠⵠⵠⵠ;
                }
                for (var d = 0; d < c.ᐃᐃΔΔⵠ.length; d++) {
                    if (!c.ᐃᐃΔΔⵠ[d].ᐃⲆᐃᐃᐃ) {
                        for (var e = c.ᐃᐃΔΔⵠ[d].ⵠⲆⲆⵠΔ(), f = 0; f < e.length; f++) {
                            var g = c.ᐃᐃΔΔⵠ[d].ΔⵠⲆᐃⲆ(e[f]);
                            if (g && g.ⵠⲆᐃⲆ) {
                                g.ⵠⲆᐃⲆ.muted = !!b || g.ⵠᐃΔⵠᐃ;
                            }
                        }
                    }
                }
                return c;
            },
            ΔᐃⵠⲆΔᐃᐃ: function () {
                var a = this || j;
                for (var b = a.ᐃᐃΔΔⵠ.length - 1; b >= 0; b--) {
                    a.ᐃᐃΔΔⵠ[b].ΔᐃⵠⲆΔᐃᐃ();
                }
                if (a.ⲆᐃᐃᐃΔ && a.ᐃ && a.ᐃ.close !== undefined) {
                    a.ᐃ.close();
                    a.ᐃ = null;
                    i();
                }
                return a;
            },
            ⲆᐃΔⲆᐃⵠΔᐃⲆ: function (a) {
                return (this || j).ⲆΔⵠᐃⵠⵠⵠ[a.replace(/^x-/, "")];
            },
            ΔⵠΔⵠΔΔᐃ: function () {
                var a = this || j;
                a.state = a.ᐃ && a.ᐃ.state || "running";
                a.ⵠⲆⲆᐃⲆΔᐃ();
                if (!a.ⲆᐃᐃᐃΔ) {
                    if (typeof Audio != "undefined") {
                        try {
                            if (new Audio().oncanplaythrough === undefined) {
                                a.ⲆΔⵠⵠΔⵠⲆ = "canplay";
                            }
                        } catch (b) {
                            a.ᐃⵠⲆΔᐃⵠΔ = true;
                        }
                    } else {
                        a.ᐃⵠⲆΔᐃⵠΔ = true;
                    }
                }
                try {
                    if (new Audio().muted) {
                        a.ᐃⵠⲆΔᐃⵠΔ = true;
                    }
                } catch (a) { }
                if (!a.ᐃⵠⲆΔᐃⵠΔ) {
                    a.ᐃᐃⲆᐃᐃⲆΔᐃⲆ();
                }
                return a;
            },
            ᐃᐃⲆᐃᐃⲆΔᐃⲆ: function () {
                var b = this || j;
                var c = null;
                try {
                    c = typeof Audio != "undefined" ? new Audio() : null;
                } catch (a) {
                    return b;
                }
                if (!c || typeof c.canPlayType != "function") {
                    return b;
                }
                var d = c.canPlayType("audio/mpeg;").replace(/^no$/, "");
                var e = b.ΔⲆᐃⲆΔ && b.ΔⲆᐃⲆΔ.userAgent.match(/OPR\/([0-6].)/g);
                var f = e && parseInt(e[0].split("/")[1], 10) < 33;
                b.ⲆΔⵠᐃⵠⵠⵠ = {
                    ⵠΔⲆⲆᐃⲆΔⲆⲆ: !f && (!!d || !!c.canPlayType("audio/mp3;").replace(/^no$/, "")),
                    ⵠⵠⲆⵠⵠΔΔΔᐃ: !!d,
                    ⵠΔᐃⲆΔΔᐃΔΔ: !!c.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
                    ⵠᐃΔᐃⲆⲆΔΔⲆ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ⵠⵠΔΔⵠΔⵠⵠⵠ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ⵠΔⵠᐃᐃⲆⵠⵠⲆ: !!c.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
                    ᐃᐃⲆⵠⲆⵠΔᐃⵠ: !!c.canPlayType("audio/aac;").replace(/^no$/, ""),
                    ⲆᐃⲆⲆΔᐃⲆΔΔ: !!c.canPlayType("audio/x-caf;").replace(/^no$/, ""),
                    ᐃⲆᐃΔⵠᐃᐃⵠΔ: !!(c.canPlayType("audio/x-m4a;") || c.canPlayType("audio/m4a;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
                    ⲆⵠᐃΔⵠⲆⵠΔⲆ: !!(c.canPlayType("audio/x-mp4;") || c.canPlayType("audio/mp4;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
                    ᐃⵠΔⵠΔⵠΔⵠⲆ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ⵠᐃᐃⲆΔΔᐃⵠⵠ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ΔⵠⵠⵠⵠⵠΔⵠⵠ: !!c.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
                    ΔΔⲆᐃⵠⵠⵠⵠᐃ: !!(c.canPlayType("audio/x-flac;") || c.canPlayType("audio/flac;")).replace(/^no$/, "")
                };
                return b;
            },
            ⲆᐃΔⵠᐃⲆᐃᐃⵠ: function () {
                var b = this || j;
                var a = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(b.ΔⲆᐃⲆΔ && b.ΔⲆᐃⲆΔ.userAgent);
                var c = !!("ontouchend" in Gf) || !!b.ΔⲆᐃⲆΔ && b.ΔⲆᐃⲆΔ.maxTouchPoints > 0 || !!b.ΔⲆᐃⲆΔ && b.ΔⲆᐃⲆΔ.ᐃᐃⲆⲆᐃᐃᐃⲆΔ > 0;
                if (!b.ΔⲆᐃᐃᐃᐃⵠ && b.ᐃ && (a || c)) {
                    b.ΔⲆᐃᐃᐃᐃⵠ = false;
                    if (!b.ⲆⵠⲆᐃᐃΔΔΔΔ && b.ᐃ.sampleRate !== 44100) {
                        b.ⲆⵠⲆᐃᐃΔΔΔΔ = true;
                        b.ΔᐃⵠⲆΔᐃᐃ();
                    }
                    b.ΔΔΔᐃⲆⲆⲆ = b.ᐃ.createBuffer(1, 1, 22050);
                    function c() {
                        j.ΔⵠΔᐃⵠⲆΔ();
                        var a = b.ᐃ.createBufferSource();
                        a.buffer = b.ΔΔΔᐃⲆⲆⲆ;
                        a.connect(b.ᐃ.destination);
                        if (a.start === undefined) {
                            a.ᐃⲆᐃᐃΔᐃΔΔᐃ(0);
                        } else {
                            a.start(0);
                        }
                        if (typeof b.ᐃ.resume == "function") {
                            b.ᐃ.resume();
                        }
                        a.onended = function () {
                            a.disconnect(0);
                            b.ΔⲆᐃᐃᐃᐃⵠ = true;
                            b.ⵠΔⵠⵠΔⵠⵠ = false;
                            document.removeEventListener("touchend", c, true);
                        };
                    }
                    document.addEventListener("touchend", c, true);
                    return b;
                }
            },
            ⵠⲆⲆᐃⲆΔᐃ: function () {
                var a = this;
                if (a.ΔΔΔⵠⵠⲆⵠ && a.ᐃ && a.ᐃ.suspend !== undefined && j.ⲆᐃᐃᐃΔ) {
                    for (var b = 0; b < a.ᐃᐃΔΔⵠ.length; b++) {
                        if (a.ᐃᐃΔΔⵠ[b].ᐃⲆᐃᐃᐃ) {
                            for (var c = 0; c < a.ᐃᐃΔΔⵠ[b].ᐃⲆⲆᐃⵠ.length; c++) {
                                if (!a.ᐃᐃΔΔⵠ[b].ᐃⲆⲆᐃⵠ[c].ᐃΔⵠⵠΔ) {
                                    return a;
                                }
                            }
                        }
                    }
                    if (a.ᐃᐃⵠΔᐃⲆᐃ) {
                        clearTimeout(a.ᐃᐃⵠΔᐃⲆᐃ);
                    }
                    a.ᐃᐃⵠΔᐃⲆᐃ = setTimeout(function () {
                        if (a.ΔΔΔⵠⵠⲆⵠ) {
                            a.ᐃᐃⵠΔᐃⲆᐃ = null;
                            a.state = "suspending";
                            a.ᐃ.suspend().then(function () {
                                a.state = "suspended";
                                if (a.ⵠΔΔΔΔᐃⲆ) {
                                    delete a.ⵠΔΔΔΔᐃⲆ;
                                    a.ΔⵠΔᐃⵠⲆΔ();
                                }
                            });
                        }
                    }, 30000);
                    return a;
                }
            },
            ΔⵠΔᐃⵠⲆΔ: function () {
                var a = this;
                if (a.ᐃ && a.ᐃ.resume !== undefined && j.ⲆᐃᐃᐃΔ) {
                    if (a.state === "running" && a.ᐃᐃⵠΔᐃⲆᐃ) {
                        clearTimeout(a.ᐃᐃⵠΔᐃⲆᐃ);
                        a.ᐃᐃⵠΔᐃⲆᐃ = null;
                    } else if (a.state === "suspended") {
                        a.ᐃ.resume().then(function () {
                            a.state = "running";
                            for (var b = 0; b < a.ᐃᐃΔΔⵠ.length; b++) {
                                a.ᐃᐃΔΔⵠ[b].ⵠᐃⵠⲆΔ("resume");
                            }
                        });
                        if (a.ᐃᐃⵠΔᐃⲆᐃ) {
                            clearTimeout(a.ᐃᐃⵠΔᐃⲆᐃ);
                            a.ᐃᐃⵠΔᐃⲆᐃ = null;
                        }
                    } else if (a.state === "suspending") {
                        a.ⵠΔΔΔΔᐃⲆ = true;
                    }
                    return a;
                }
            }
        };
        var j = new b();
        function c(a) {
            if (a.src && a.src.length !== 0) {
                this.ⲆⵠᐃⲆⲆ(a);
            } else {
                console.error(Go);
            }
        }
        c.prototype = {
            ⲆⵠᐃⲆⲆ: function (a) {
                var b = this;
                if (!j.ᐃ) {
                    i();
                }
                b.ᐃⵠᐃⵠⲆⲆΔⲆⵠ = a.autoplay || false;
                b.Ⲇᐃⵠᐃᐃⵠⵠ = typeof a.ᐃᐃᐃΔⲆᐃⵠ != "string" ? a.ᐃᐃᐃΔⲆᐃⵠ : [a.ᐃᐃᐃΔⲆᐃⵠ];
                b.ⲆᐃΔⵠⵠⲆⵠ = a.ΔᐃⲆⲆᐃⵠⲆᐃⵠ || false;
                b.ⵠᐃΔⵠᐃ = a.ⲆⵠⵠΔᐃΔΔ || false;
                b.ⵠᐃⲆⵠⲆ = a.loop || false;
                b.ᐃΔΔΔⵠᐃⵠⵠᐃ = a.ⵠⵠΔΔΔⲆⵠⵠⲆ || 5;
                b.ΔΔⵠᐃᐃᐃⵠⵠⲆ = typeof a.preload != "boolean" || a.preload;
                b.ⵠⵠΔⲆⵠ = a.rate || 1;
                b.ᐃⲆⲆΔΔ = a.ΔⲆ || {};
                b.ᐃⵠⲆⵠΔ = typeof a.src != "string" ? a.src : [a.src];
                b.ᐃⵠⵠⵠⵠ = a.volume !== undefined ? a.volume : 1;
                b.ⲆᐃΔⲆᐃⵠΔ = 0;
                b.ᐃⲆᐃᐃΔ = "unloaded";
                b.ᐃⲆⲆᐃⵠ = [];
                b.ⲆΔΔⲆΔΔΔ = {};
                b.ᐃⲆΔΔⵠ = [];
                b.ⲆⲆΔΔⵠⲆΔⲆᐃ = a.onend ? [{
                    ᐃᐃΔⲆᐃ: a.onend
                }] : [];
                b.ᐃⵠⵠⵠΔᐃⵠⵠⲆ = a.onfade ? [{
                    ᐃᐃΔⲆᐃ: a.onfade
                }] : [];
                b.ⵠΔⵠⵠᐃᐃⵠᐃⵠ = a.onload ? [{
                    ᐃᐃΔⲆᐃ: a.onload
                }] : [];
                b.ᐃΔΔⵠⵠⵠⲆΔⵠ = a.ᐃΔⲆⲆⲆⲆⵠᐃᐃ ? [{
                    ᐃᐃΔⲆᐃ: a.ᐃΔⲆⲆⲆⲆⵠᐃᐃ
                }] : [];
                b.ⵠΔⵠᐃⵠᐃᐃᐃᐃ = a.onpause ? [{
                    ᐃᐃΔⲆᐃ: a.onpause
                }] : [];
                b.ᐃⲆⵠᐃⲆⲆⵠⵠⵠ = a.onplay ? [{
                    ᐃᐃΔⲆᐃ: a.onplay
                }] : [];
                b.ⲆⵠⵠᐃⵠΔⲆⵠⵠ = a.onstop ? [{
                    ᐃᐃΔⲆᐃ: a.onstop
                }] : [];
                b.ⲆⲆⲆⲆΔⵠⵠᐃΔ = a.onmute ? [{
                    ᐃᐃΔⲆᐃ: a.onmute
                }] : [];
                b.ΔⲆᐃΔⵠᐃᐃΔᐃ = a.ⲆⲆⲆΔᐃⵠᐃⵠⲆ ? [{
                    ᐃᐃΔⲆᐃ: a.ⲆⲆⲆΔᐃⵠᐃⵠⲆ
                }] : [];
                b.ⵠᐃᐃΔⲆΔⲆᐃΔ = a.ⵠΔᐃΔⵠⲆⲆⵠΔ ? [{
                    ᐃᐃΔⲆᐃ: a.ⵠΔᐃΔⵠⲆⲆⵠΔ
                }] : [];
                b.ⵠΔΔᐃⲆΔᐃᐃᐃ = a.ⵠΔΔⲆⵠⲆᐃΔⵠ ? [{
                    ᐃᐃΔⲆᐃ: a.ⵠΔΔⲆⵠⲆᐃΔⵠ
                }] : [];
                b.ⵠΔᐃΔⵠⵠᐃᐃⵠ = [];
                b.ᐃⲆᐃᐃᐃ = j.ⲆᐃᐃᐃΔ && !b.ⲆᐃΔⵠⵠⲆⵠ;
                if (j.ᐃ !== undefined && j.ᐃ && j.ⵠΔⵠⵠΔⵠⵠ) {
                    j.ⲆᐃΔⵠᐃⲆᐃᐃⵠ();
                }
                j.ᐃᐃΔΔⵠ.push(b);
                if (b.ᐃⵠᐃⵠⲆⲆΔⲆⵠ) {
                    b.ᐃⲆΔΔⵠ.push({
                        event: "play",
                        action: function () {
                            b.play();
                        }
                    });
                }
                if (b.ΔΔⵠᐃᐃᐃⵠⵠⲆ) {
                    b.load();
                }
                return b;
            },
            load: function () {
                var b = this;
                var c = null;
                if (!j.ᐃⵠⲆΔᐃⵠΔ) {
                    if (typeof b.ᐃⵠⲆⵠΔ == "string") {
                        b.ᐃⵠⲆⵠΔ = [b.ᐃⵠⲆⵠΔ];
                    }
                    for (var e = 0; e < b.ᐃⵠⲆⵠΔ.length; e++) {
                        var f;
                        var g;
                        if (b.Ⲇᐃⵠᐃᐃⵠⵠ && b.Ⲇᐃⵠᐃᐃⵠⵠ[e]) {
                            f = b.Ⲇᐃⵠᐃᐃⵠⵠ[e];
                        } else {
                            if (typeof (g = b.ᐃⵠⲆⵠΔ[e]) != "string") {
                                b.ⵠᐃⵠⲆΔ("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                                continue;
                            }
                            if (!(f = /^data:audio\/([^;,]+);/i.exec(g))) {
                                f = /\.([^.]+)$/.exec(g.split("?", 1)[0]);
                            }
                            f &&= f[1].toLowerCase();
                        }
                        if (!f) {
                            console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
                        }
                        if (f && j.ⲆᐃΔⲆᐃⵠΔᐃⲆ(f)) {
                            c = b.ᐃⵠⲆⵠΔ[e];
                            break;
                        }
                    }
                    if (c) {
                        b.ᐃⵠⲆⵠΔ = c;
                        b.ᐃⲆᐃᐃΔ = "loading";
                        if (Gf.location.protocol === "https:" && c.slice(0, 5) === "http:") {
                            b.ⲆᐃΔⵠⵠⲆⵠ = true;
                            b.ᐃⲆᐃᐃᐃ = false;
                        }
                        new d(b);
                        if (b.ᐃⲆᐃᐃᐃ) {
                            a(b);
                        }
                        return b;
                    } else {
                        b.ⵠᐃⵠⲆΔ("loaderror", null, "No codec support for selected audio sources.");
                        return;
                    }
                }
                b.ⵠᐃⵠⲆΔ("loaderror", null, "No audio support.");
            },
            play: function (c, f) {
                var i = this;
                var k = null;
                if (typeof c == "number") {
                    k = c;
                    c = null;
                } else {
                    if (typeof c == "string" && i.ᐃⲆᐃᐃΔ === "loaded" && !i.ᐃⲆⲆΔΔ[c]) {
                        return null;
                    }
                    if (c === undefined) {
                        c = "__default";
                        var n = 0;
                        for (var o = 0; o < i.ᐃⲆⲆᐃⵠ.length; o++) {
                            if (i.ᐃⲆⲆᐃⵠ[o].ᐃΔⵠⵠΔ && !i.ᐃⲆⲆᐃⵠ[o].ⲆᐃᐃⲆᐃ) {
                                n++;
                                k = i.ᐃⲆⲆᐃⵠ[o].ⲆⲆⵠΔ;
                            }
                        }
                        if (n === 1) {
                            c = null;
                        } else {
                            k = null;
                        }
                    }
                }
                var q = k ? i.ΔⵠⲆᐃⲆ(k) : i.ⲆΔⲆⵠⲆⵠΔᐃⵠ();
                if (!q) {
                    return null;
                }
                if (k && !c) {
                    c = q.ᐃⲆⲆΔΔ || "__default";
                }
                if (i.ᐃⲆᐃᐃΔ !== "loaded") {
                    q.ᐃⲆⲆΔΔ = c;
                    q.ⲆᐃᐃⲆᐃ = false;
                    var h = q.ⲆⲆⵠΔ;
                    i.ᐃⲆΔΔⵠ.push({
                        event: "play",
                        action: function () {
                            i.play(h);
                        }
                    });
                    return h;
                }
                if (k && !q.ᐃΔⵠⵠΔ) {
                    if (!f) {
                        setTimeout(function () {
                            i.ⵠᐃⵠⲆΔ("play", q.ⲆⲆⵠΔ);
                        }, 0);
                    }
                    return q.ⲆⲆⵠΔ;
                }
                if (i.ᐃⲆᐃᐃᐃ) {
                    j.ΔⵠΔᐃⵠⲆΔ();
                }
                var l = Math.max(0, q.ᐃⲆⲆΔⵠ > 0 ? q.ᐃⲆⲆΔⵠ : i.ᐃⲆⲆΔΔ[c][0] / 1000);
                var g = Math.max(0, (i.ᐃⲆⲆΔΔ[c][0] + i.ᐃⲆⲆΔΔ[c][1]) / 1000 - l);
                var b = g * 1000 / Math.abs(q.ⵠⵠΔⲆⵠ);
                q.ᐃΔⵠⵠΔ = false;
                q.ⲆᐃᐃⲆᐃ = false;
                q.ᐃⲆⲆΔΔ = c;
                q.ᐃⲆⲆΔⵠ = l;
                q.ⲆⲆΔᐃᐃ = i.ᐃⲆⲆΔΔ[c][0] / 1000;
                q.ⵠΔΔⲆⵠⲆᐃ = (i.ᐃⲆⲆΔΔ[c][0] + i.ᐃⲆⲆΔΔ[c][1]) / 1000;
                q.ⵠᐃⲆⵠⲆ = !!q.ⵠᐃⲆⵠⲆ || !!i.ᐃⲆⲆΔΔ[c][2];
                var d = q.ⵠⲆᐃⲆ;
                if (i.ᐃⲆᐃᐃᐃ) {
                    function a() {
                        i.ⵠΔⵠⵠΔΔⲆᐃⵠ(q);
                        var a = q.ⵠᐃΔⵠᐃ || i.ⵠᐃΔⵠᐃ ? 0 : q.ᐃⵠⵠⵠⵠ;
                        d.gain.setValueAtTime(a, j.ᐃ.currentTime);
                        q.ᐃΔⲆⲆⵠⵠⵠ = j.ᐃ.currentTime;
                        if (d.ⲆⵠⵠᐃΔ.start === undefined) {
                            if (q.ⵠᐃⲆⵠⲆ) {
                                d.ⲆⵠⵠᐃΔ.ΔᐃⵠⵠⲆⵠⵠⲆᐃ(0, l, 86400);
                            } else {
                                d.ⲆⵠⵠᐃΔ.ΔᐃⵠⵠⲆⵠⵠⲆᐃ(0, l, g);
                            }
                        } else if (q.ⵠᐃⲆⵠⲆ) {
                            d.ⲆⵠⵠᐃΔ.start(0, l, 86400);
                        } else {
                            d.ⲆⵠⵠᐃΔ.start(0, l, g);
                        }
                        if (b !== Infinity) {
                            i.ⲆΔΔⲆΔΔΔ[q.ⲆⲆⵠΔ] = setTimeout(i.ⲆᐃᐃⲆᐃ.bind(i, q), b);
                        }
                        if (!f) {
                            setTimeout(function () {
                                i.ⵠᐃⵠⲆΔ("play", q.ⲆⲆⵠΔ);
                            }, 0);
                        }
                    }
                    var t = j.state === "running";
                    if (i.ᐃⲆᐃᐃΔ === "loaded" && t) {
                        a();
                    } else {
                        var m = t || i.ᐃⲆᐃᐃΔ !== "loaded" ? "load" : "resume";
                        i.once(m, a, t ? q.ⲆⲆⵠΔ : null);
                        i.ΔⲆⵠΔⲆᐃⵠ(q.ⲆⲆⵠΔ);
                    }
                } else {
                    function a() {
                        d.currentTime = l;
                        d.muted = q.ⵠᐃΔⵠᐃ || i.ⵠᐃΔⵠᐃ || j.ⵠᐃΔⵠᐃ || d.muted;
                        d.volume = q.ᐃⵠⵠⵠⵠ * j.volume();
                        d.playbackRate = q.ⵠⵠΔⲆⵠ;
                        d.play();
                        if (b !== Infinity) {
                            i.ⲆΔΔⲆΔΔΔ[q.ⲆⲆⵠΔ] = setTimeout(i.ⲆᐃᐃⲆᐃ.bind(i, q), b);
                        }
                        if (!f) {
                            i.ⵠᐃⵠⲆΔ("play", q.ⲆⲆⵠΔ);
                        }
                    }
                    var p = i.ᐃⲆᐃᐃΔ === "loaded" && (Gf && Gf.ⲆᐃᐃᐃΔⲆⲆᐃᐃ || !d.readyState && j.ΔⲆᐃⲆΔ.ⲆΔⲆΔⲆᐃⵠΔᐃ);
                    if (d.readyState === 4 || p) {
                        a();
                    } else {
                        function b() {
                            a();
                            d.removeEventListener(j.ⲆΔⵠⵠΔⵠⲆ, b, false);
                        }
                        d.addEventListener(j.ⲆΔⵠⵠΔⵠⲆ, b, false);
                        i.ΔⲆⵠΔⲆᐃⵠ(q.ⲆⲆⵠΔ);
                    }
                }
                return q.ⲆⲆⵠΔ;
            },
            pause: function (a) {
                var b = this;
                if (b.ᐃⲆᐃᐃΔ !== "loaded") {
                    b.ᐃⲆΔΔⵠ.push({
                        event: "pause",
                        action: function () {
                            b.pause(a);
                        }
                    });
                    return b;
                }
                for (var c = b.ⵠⲆⲆⵠΔ(a), d = 0; d < c.length; d++) {
                    b.ΔⲆⵠΔⲆᐃⵠ(c[d]);
                    var e = b.ΔⵠⲆᐃⲆ(c[d]);
                    if (e && !e.ᐃΔⵠⵠΔ && (e.ᐃⲆⲆΔⵠ = b.ᐃΔⲆⲆᐃⲆΔ(c[d]), e.ⲆⲆⲆⵠⵠⲆⲆ = 0, e.ᐃΔⵠⵠΔ = true, b.ⵠᐃⵠⵠᐃⲆⲆ(c[d]), e.ⵠⲆᐃⲆ)) {
                        if (b.ᐃⲆᐃᐃᐃ) {
                            if (!e.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ) {
                                continue;
                            }
                            if (e.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ.stop === undefined) {
                                e.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ.ᐃⵠⵠΔⲆΔΔⲆΔ(0);
                            } else {
                                e.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ.stop(0);
                            }
                            b.ΔⲆⵠⵠΔᐃΔ(e.ⵠⲆᐃⲆ);
                        } else if (!isNaN(e.ⵠⲆᐃⲆ.duration) || e.ⵠⲆᐃⲆ.duration === Infinity) {
                            e.ⵠⲆᐃⲆ.pause();
                        }
                    }
                    if (!arguments[1]) {
                        b.ⵠᐃⵠⲆΔ("pause", e ? e.ⲆⲆⵠΔ : null);
                    }
                }
                return b;
            },
            stop: function (b, c) {
                var d = this;
                if (d.ᐃⲆᐃᐃΔ !== "loaded") {
                    d.ᐃⲆΔΔⵠ.push({
                        event: "stop",
                        action: function () {
                            d.stop(b);
                        }
                    });
                    return d;
                }
                for (var e = d.ⵠⲆⲆⵠΔ(b), f = 0; f < e.length; f++) {
                    d.ΔⲆⵠΔⲆᐃⵠ(e[f]);
                    var g = d.ΔⵠⲆᐃⲆ(e[f]);
                    if (g) {
                        g.ᐃⲆⲆΔⵠ = g.ⲆⲆΔᐃᐃ || 0;
                        g.ⲆⲆⲆⵠⵠⲆⲆ = 0;
                        g.ᐃΔⵠⵠΔ = true;
                        g.ⲆᐃᐃⲆᐃ = true;
                        d.ⵠᐃⵠⵠᐃⲆⲆ(e[f]);
                        if (g.ⵠⲆᐃⲆ) {
                            if (d.ᐃⲆᐃᐃᐃ) {
                                if (g.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ) {
                                    if (g.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ.stop === undefined) {
                                        g.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ.ᐃⵠⵠΔⲆΔΔⲆΔ(0);
                                    } else {
                                        g.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ.stop(0);
                                    }
                                    d.ΔⲆⵠⵠΔᐃΔ(g.ⵠⲆᐃⲆ);
                                }
                            } else if (!isNaN(g.ⵠⲆᐃⲆ.duration) || g.ⵠⲆᐃⲆ.duration === Infinity) {
                                g.ⵠⲆᐃⲆ.currentTime = g.ⲆⲆΔᐃᐃ || 0;
                                g.ⵠⲆᐃⲆ.pause();
                            }
                        }
                        if (!c) {
                            d.ⵠᐃⵠⲆΔ("stop", g.ⲆⲆⵠΔ);
                        }
                    }
                }
                return d;
            },
            ⲆⵠⵠΔᐃΔΔ: function (b, c) {
                var d = this;
                if (d.ᐃⲆᐃᐃΔ !== "loaded") {
                    d.ᐃⲆΔΔⵠ.push({
                        event: "mute",
                        action: function () {
                            d.ⲆⵠⵠΔᐃΔΔ(b, c);
                        }
                    });
                    return d;
                }
                if (c === undefined) {
                    if (typeof b != "boolean") {
                        return d.ⵠᐃΔⵠᐃ;
                    }
                    d.ⵠᐃΔⵠᐃ = b;
                }
                for (var e = d.ⵠⲆⲆⵠΔ(c), f = 0; f < e.length; f++) {
                    var g = d.ΔⵠⲆᐃⲆ(e[f]);
                    if (g) {
                        g.ⵠᐃΔⵠᐃ = b;
                        if (d.ᐃⲆᐃᐃᐃ && g.ⵠⲆᐃⲆ) {
                            g.ⵠⲆᐃⲆ.gain.setValueAtTime(b ? 0 : g.ᐃⵠⵠⵠⵠ, j.ᐃ.currentTime);
                        } else if (g.ⵠⲆᐃⲆ) {
                            g.ⵠⲆᐃⲆ.muted = !!j.ⵠᐃΔⵠᐃ || b;
                        }
                        d.ⵠᐃⵠⲆΔ("mute", g.ⲆⲆⵠΔ);
                    }
                }
                return d;
            },
            volume: function () {
                var b;
                var c;
                var d;
                var f = this;
                var g = arguments;
                if (g.length === 0) {
                    return f.ᐃⵠⵠⵠⵠ;
                }
                if (g.length === 1 || g.length === 2 && g[1] === undefined) {
                    if (f.ⵠⲆⲆⵠΔ().indexOf(g[0]) >= 0) {
                        c = parseInt(g[0], 10);
                    } else {
                        b = parseFloat(g[0]);
                    }
                } else if (g.length >= 2) {
                    b = parseFloat(g[0]);
                    c = parseInt(g[1], 10);
                }
                if (b === undefined || b < 0 || b > 1) {
                    if (d = c ? f.ΔⵠⲆᐃⲆ(c) : f.ᐃⲆⲆᐃⵠ[0]) {
                        return d.ᐃⵠⵠⵠⵠ;
                    } else {
                        return 0;
                    }
                }
                if (f.ᐃⲆᐃᐃΔ !== "loaded") {
                    f.ᐃⲆΔΔⵠ.push({
                        event: "volume",
                        action: function () {
                            f.volume.apply(f, g);
                        }
                    });
                    return f;
                }
                if (c === undefined) {
                    f.ᐃⵠⵠⵠⵠ = b;
                }
                c = f.ⵠⲆⲆⵠΔ(c);
                for (var a = 0; a < c.length; a++) {
                    if (d = f.ΔⵠⲆᐃⲆ(c[a])) {
                        d.ᐃⵠⵠⵠⵠ = b;
                        if (!g[2]) {
                            f.ⵠᐃⵠⵠᐃⲆⲆ(c[a]);
                        }
                        if (f.ᐃⲆᐃᐃᐃ && d.ⵠⲆᐃⲆ && !d.ⵠᐃΔⵠᐃ) {
                            d.ⵠⲆᐃⲆ.gain.setValueAtTime(b, j.ᐃ.currentTime);
                        } else if (d.ⵠⲆᐃⲆ && !d.ⵠᐃΔⵠᐃ) {
                            d.ⵠⲆᐃⲆ.volume = b * j.volume();
                        }
                        f.ⵠᐃⵠⲆΔ("volume", d.ⲆⲆⵠΔ);
                    }
                }
                return f;
            },
            fade: function (f, e, i, k) {
                var o = this;
                var a = Math.abs(f - e);
                var n = f > e ? "out" : "in";
                var p = a / 0.01;
                var q = p > 0 ? i / p : i;
                if (q < 4) {
                    p = Math.ceil(p / (4 / q));
                    q = 4;
                }
                if (o.ᐃⲆᐃᐃΔ !== "loaded") {
                    o.ᐃⲆΔΔⵠ.push({
                        event: "fade",
                        action: function () {
                            o.fade(f, e, i, k);
                        }
                    });
                    return o;
                }
                o.volume(f, k);
                for (var r = o.ⵠⲆⲆⵠΔ(k), g = 0; g < r.length; g++) {
                    var s = o.ΔⵠⲆᐃⲆ(r[g]);
                    if (s) {
                        if (!k) {
                            o.ⵠᐃⵠⵠᐃⲆⲆ(r[g]);
                        }
                        if (o.ᐃⲆᐃᐃᐃ && !s.ⵠᐃΔⵠᐃ) {
                            var t = j.ᐃ.currentTime;
                            var u = t + i / 1000;
                            s.ᐃⵠⵠⵠⵠ = f;
                            s.ⵠⲆᐃⲆ.gain.setValueAtTime(f, t);
                            s.ⵠⲆᐃⲆ.gain.linearRampToValueAtTime(e, u);
                        }
                        var w = f;
                        s.ⵠⲆⲆⵠⲆⲆΔ = setInterval(function (a, b) {
                            if (p > 0) {
                                w += n === "in" ? 0.01 : -0.01;
                            }
                            w = Math.max(0, w);
                            w = Math.min(1, w);
                            w = Math.round(w * 100) / 100;
                            if (o.ᐃⲆᐃᐃᐃ) {
                                if (k === undefined) {
                                    o.ᐃⵠⵠⵠⵠ = w;
                                }
                                b.ᐃⵠⵠⵠⵠ = w;
                            } else {
                                o.volume(w, a, true);
                            }
                            if (e < f && w <= e || e > f && w >= e) {
                                clearInterval(b.ⵠⲆⲆⵠⲆⲆΔ);
                                b.ⵠⲆⲆⵠⲆⲆΔ = null;
                                o.volume(e, a);
                                o.ⵠᐃⵠⲆΔ("fade", a);
                            }
                        }.bind(o, r[g], s), q);
                    }
                }
                return o;
            },
            ⵠᐃⵠⵠᐃⲆⲆ: function (a) {
                var b = this;
                var c = b.ΔⵠⲆᐃⲆ(a);
                if (c && c.ⵠⲆⲆⵠⲆⲆΔ) {
                    if (b.ᐃⲆᐃᐃᐃ) {
                        c.ⵠⲆᐃⲆ.gain.cancelScheduledValues(j.ᐃ.currentTime);
                    }
                    clearInterval(c.ⵠⲆⲆⵠⲆⲆΔ);
                    c.ⵠⲆⲆⵠⲆⲆΔ = null;
                    b.ⵠᐃⵠⲆΔ("fade", a);
                }
                return b;
            },
            loop: function () {
                var b;
                var c;
                var d;
                var f = this;
                var g = arguments;
                if (g.length === 0) {
                    return f.ⵠᐃⲆⵠⲆ;
                }
                if (g.length === 1) {
                    if (typeof g[0] != "boolean") {
                        return !!(d = f.ΔⵠⲆᐃⲆ(parseInt(g[0], 10))) && d.ⵠᐃⲆⵠⲆ;
                    }
                    b = g[0];
                    f.ⵠᐃⲆⵠⲆ = b;
                } else if (g.length === 2) {
                    b = g[0];
                    c = parseInt(g[1], 10);
                }
                for (var h = f.ⵠⲆⲆⵠΔ(c), a = 0; a < h.length; a++) {
                    if (d = f.ΔⵠⲆᐃⲆ(h[a])) {
                        d.ⵠᐃⲆⵠⲆ = b;
                        if (f.ᐃⲆᐃᐃᐃ && d.ⵠⲆᐃⲆ && d.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ) {
                            d.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ.loop = b;
                            if (b) {
                                d.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ.loopStart = d.ⲆⲆΔᐃᐃ || 0;
                                d.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ.loopEnd = d.ⵠΔΔⲆⵠⲆᐃ;
                            }
                        }
                    }
                }
                return f;
            },
            rate: function () {
                var b;
                var c;
                var d;
                var f = this;
                var g = arguments;
                if (g.length === 0) {
                    c = f.ᐃⲆⲆᐃⵠ[0].ⲆⲆⵠΔ;
                } else if (g.length === 1) {
                    if (f.ⵠⲆⲆⵠΔ().indexOf(g[0]) >= 0) {
                        c = parseInt(g[0], 10);
                    } else {
                        b = parseFloat(g[0]);
                    }
                } else if (g.length === 2) {
                    b = parseFloat(g[0]);
                    c = parseInt(g[1], 10);
                }
                if (typeof b != "number") {
                    if (d = f.ΔⵠⲆᐃⲆ(c)) {
                        return d.ⵠⵠΔⲆⵠ;
                    } else {
                        return f.ⵠⵠΔⲆⵠ;
                    }
                }
                if (f.ᐃⲆᐃᐃΔ !== "loaded") {
                    f.ᐃⲆΔΔⵠ.push({
                        event: "rate",
                        action: function () {
                            f.rate.apply(f, g);
                        }
                    });
                    return f;
                }
                if (c === undefined) {
                    f.ⵠⵠΔⲆⵠ = b;
                }
                c = f.ⵠⲆⲆⵠΔ(c);
                for (var a = 0; a < c.length; a++) {
                    if (d = f.ΔⵠⲆᐃⲆ(c[a])) {
                        d.ⲆⲆⲆⵠⵠⲆⲆ = f.ᐃΔⲆⲆᐃⲆΔ(c[a]);
                        d.ᐃΔⲆⲆⵠⵠⵠ = f.ᐃⲆᐃᐃᐃ ? j.ᐃ.currentTime : d.ᐃΔⲆⲆⵠⵠⵠ;
                        d.ⵠⵠΔⲆⵠ = b;
                        if (f.ᐃⲆᐃᐃᐃ && d.ⵠⲆᐃⲆ && d.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ) {
                            d.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ.playbackRate.value = b;
                        } else if (d.ⵠⲆᐃⲆ) {
                            d.ⵠⲆᐃⲆ.playbackRate = b;
                        }
                        var k = f.ᐃΔⲆⲆᐃⲆΔ(c[a]);
                        var l = ((f.ᐃⲆⲆΔΔ[d.ᐃⲆⲆΔΔ][0] + f.ᐃⲆⲆΔΔ[d.ᐃⲆⲆΔΔ][1]) / 1000 - k) * 1000 / Math.abs(d.ⵠⵠΔⲆⵠ);
                        if (!!f.ⲆΔΔⲆΔΔΔ[c[a]] || !d.ᐃΔⵠⵠΔ) {
                            f.ΔⲆⵠΔⲆᐃⵠ(c[a]);
                            f.ⲆΔΔⲆΔΔΔ[c[a]] = setTimeout(f.ⲆᐃᐃⲆᐃ.bind(f, d), l);
                        }
                        f.ⵠᐃⵠⲆΔ("rate", d.ⲆⲆⵠΔ);
                    }
                }
                return f;
            },
            ᐃΔⲆⲆᐃⲆΔ: function () {
                var b;
                var c;
                var d = this;
                var f = arguments;
                if (f.length === 0) {
                    c = d.ᐃⲆⲆᐃⵠ[0].ⲆⲆⵠΔ;
                } else if (f.length === 1) {
                    if (d.ⵠⲆⲆⵠΔ().indexOf(f[0]) >= 0) {
                        c = parseInt(f[0], 10);
                    } else {
                        c = d.ᐃⲆⲆᐃⵠ[0].ⲆⲆⵠΔ;
                        b = parseFloat(f[0]);
                    }
                } else if (f.length === 2) {
                    b = parseFloat(f[0]);
                    c = parseInt(f[1], 10);
                }
                if (c === undefined) {
                    return d;
                }
                if (d.ᐃⲆᐃᐃΔ !== "loaded") {
                    d.ᐃⲆΔΔⵠ.push({
                        event: "seek",
                        action: function () {
                            d.ᐃΔⲆⲆᐃⲆΔ.apply(d, f);
                        }
                    });
                    return d;
                }
                var g = d.ΔⵠⲆᐃⲆ(c);
                if (g) {
                    if (typeof b != "number" || b < 0) {
                        if (d.ᐃⲆᐃᐃᐃ) {
                            var a = d.ΔⵠⲆΔⲆⲆⵠ(c) ? j.ᐃ.currentTime - g.ᐃΔⲆⲆⵠⵠⵠ : 0;
                            var k = g.ⲆⲆⲆⵠⵠⲆⲆ ? g.ⲆⲆⲆⵠⵠⲆⲆ - g.ᐃⲆⲆΔⵠ : 0;
                            return g.ᐃⲆⲆΔⵠ + (k + a * Math.abs(g.ⵠⵠΔⲆⵠ));
                        }
                        return g.ⵠⲆᐃⲆ.currentTime;
                    }
                    var l = d.ΔⵠⲆΔⲆⲆⵠ(c);
                    if (l) {
                        d.pause(c, true);
                    }
                    g.ᐃⲆⲆΔⵠ = b;
                    g.ⲆᐃᐃⲆᐃ = false;
                    d.ΔⲆⵠΔⲆᐃⵠ(c);
                    if (l) {
                        d.play(c, true);
                    }
                    if (!d.ᐃⲆᐃᐃᐃ && g.ⵠⲆᐃⲆ) {
                        g.ⵠⲆᐃⲆ.currentTime = b;
                    }
                    d.ⵠᐃⵠⲆΔ("seek", c);
                }
                return d;
            },
            ΔⵠⲆΔⲆⲆⵠ: function (a) {
                var b = this;
                if (typeof a == "number") {
                    var c = b.ΔⵠⲆᐃⲆ(a);
                    return !!c && !c.ᐃΔⵠⵠΔ;
                }
                for (var d = 0; d < b.ᐃⲆⲆᐃⵠ.length; d++) {
                    if (!b.ᐃⲆⲆᐃⵠ[d].ᐃΔⵠⵠΔ) {
                        return true;
                    }
                }
                return false;
            },
            duration: function (a) {
                var b = this;
                var c = b.ⲆᐃΔⲆᐃⵠΔ;
                var d = b.ΔⵠⲆᐃⲆ(a);
                if (d) {
                    c = b.ᐃⲆⲆΔΔ[d.ᐃⲆⲆΔΔ][1] / 1000;
                }
                return c;
            },
            state: function () {
                return this.ᐃⲆᐃᐃΔ;
            },
            ΔᐃⵠⲆΔᐃᐃ: function () {
                var a = this;
                for (var b = a.ᐃⲆⲆᐃⵠ, c = 0; c < b.length; c++) {
                    if (!b[c].ᐃΔⵠⵠΔ) {
                        a.stop(b[c].ⲆⲆⵠΔ);
                    }
                    if (!a.ᐃⲆᐃᐃᐃ) {
                        if (!/MSIE |Trident\//.test(j.ΔⲆᐃⲆΔ && j.ΔⲆᐃⲆΔ.userAgent)) {
                            b[c].ⵠⲆᐃⲆ.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
                        }
                        b[c].ⵠⲆᐃⲆ.removeEventListener("error", b[c].ⲆⵠᐃΔⲆΔΔ, false);
                        b[c].ⵠⲆᐃⲆ.removeEventListener(j.ⲆΔⵠⵠΔⵠⲆ, b[c].ΔⲆᐃΔΔᐃⲆ, false);
                    }
                    delete b[c].ⵠⲆᐃⲆ;
                    a.ΔⲆⵠΔⲆᐃⵠ(b[c].ⲆⲆⵠΔ);
                    var d = j.ᐃᐃΔΔⵠ.indexOf(a);
                    if (d >= 0) {
                        j.ᐃᐃΔΔⵠ.splice(d, 1);
                    }
                }
                var g = true;
                for (c = 0; c < j.ᐃᐃΔΔⵠ.length; c++) {
                    if (j.ᐃᐃΔΔⵠ[c].ᐃⵠⲆⵠΔ === a.ᐃⵠⲆⵠΔ) {
                        g = false;
                        break;
                    }
                }
                if (f && g) {
                    delete f[a.ᐃⵠⲆⵠΔ];
                }
                j.ᐃⵠⲆΔᐃⵠΔ = false;
                a.ᐃⲆᐃᐃΔ = "unloaded";
                a.ᐃⲆⲆᐃⵠ = [];
                a = null;
                return null;
            },
            on: function (a, b, c, d) {
                var e = this["_on" + a];
                if (typeof b == "function") {
                    e.push(d ? {
                        id: c,
                        ᐃᐃΔⲆᐃ: b,
                        once: d
                    } : {
                        id: c,
                        ᐃᐃΔⲆᐃ: b
                    });
                }
                return this;
            },
            ⵠᐃⵠΔᐃᐃⵠΔΔ: function (b, c, d) {
                var e = this;
                var f = e["_on" + b];
                var g = 0;
                if (typeof c == "number") {
                    d = c;
                    c = null;
                }
                if (c || d) {
                    for (g = 0; g < f.length; g++) {
                        var h = d === f[g].id;
                        if (c === f[g].ᐃᐃΔⲆᐃ && h || !c && h) {
                            f.splice(g, 1);
                            break;
                        }
                    }
                } else if (b) {
                    e["_on" + b] = [];
                } else {
                    var j = Object.keys(e);
                    for (g = 0; g < j.length; g++) {
                        if (j[g].indexOf("_on") === 0 && Array.isArray(e[j[g]])) {
                            e[j[g]] = [];
                        }
                    }
                }
                return e;
            },
            once: function (a, b, c) {
                this.on(a, b, c, 1);
                return this;
            },
            ⵠᐃⵠⲆΔ: function (b, c, d) {
                var e = this;
                var f = e["_on" + b];
                for (var g = f.length - 1; g >= 0; g--) {
                    if (!f[g].id || f[g].id === c || b === "load") {
                        setTimeout(function (a) {
                            a.call(this, c, d);
                        }.bind(e, f[g].ᐃᐃΔⲆᐃ), 0);
                        if (f[g].once) {
                            e.ⵠᐃⵠΔᐃᐃⵠΔΔ(b, f[g].ᐃᐃΔⲆᐃ, f[g].id);
                        }
                    }
                }
                return e;
            },
            ΔᐃⲆᐃⵠΔⵠ: function () {
                var a = this;
                if (a.ᐃⲆΔΔⵠ.length > 0) {
                    var b = a.ᐃⲆΔΔⵠ[0];
                    a.once(b.event, function () {
                        a.ᐃⲆΔΔⵠ.shift();
                        a.ΔᐃⲆᐃⵠΔⵠ();
                    });
                    b.action();
                }
                return a;
            },
            ⲆᐃᐃⲆᐃ: function (b) {
                var c = this;
                var d = b.ᐃⲆⲆΔΔ;
                if (!c.ᐃⲆᐃᐃᐃ && c.ⵠⲆᐃⲆ && !c.ⵠⲆᐃⲆ.ended) {
                    setTimeout(c.ⲆᐃᐃⲆᐃ.bind(c, b), 100);
                    return c;
                }
                var e = !!b.ⵠᐃⲆⵠⲆ || !!c.ᐃⲆⲆΔΔ[d][2];
                c.ⵠᐃⵠⲆΔ("end", b.ⲆⲆⵠΔ);
                if (!c.ᐃⲆᐃᐃᐃ && e) {
                    c.stop(b.ⲆⲆⵠΔ, true).play(b.ⲆⲆⵠΔ);
                }
                if (c.ᐃⲆᐃᐃᐃ && e) {
                    c.ⵠᐃⵠⲆΔ("play", b.ⲆⲆⵠΔ);
                    b.ᐃⲆⲆΔⵠ = b.ⲆⲆΔᐃᐃ || 0;
                    b.ⲆⲆⲆⵠⵠⲆⲆ = 0;
                    b.ᐃΔⲆⲆⵠⵠⵠ = j.ᐃ.currentTime;
                    var f = (b.ⵠΔΔⲆⵠⲆᐃ - b.ⲆⲆΔᐃᐃ) * 1000 / Math.abs(b.ⵠⵠΔⲆⵠ);
                    c.ⲆΔΔⲆΔΔΔ[b.ⲆⲆⵠΔ] = setTimeout(c.ⲆᐃᐃⲆᐃ.bind(c, b), f);
                }
                if (c.ᐃⲆᐃᐃᐃ && !e) {
                    b.ᐃΔⵠⵠΔ = true;
                    b.ⲆᐃᐃⲆᐃ = true;
                    b.ᐃⲆⲆΔⵠ = b.ⲆⲆΔᐃᐃ || 0;
                    b.ⲆⲆⲆⵠⵠⲆⲆ = 0;
                    c.ΔⲆⵠΔⲆᐃⵠ(b.ⲆⲆⵠΔ);
                    c.ΔⲆⵠⵠΔᐃΔ(b.ⵠⲆᐃⲆ);
                    j.ⵠⲆⲆᐃⲆΔᐃ();
                }
                if (!c.ᐃⲆᐃᐃᐃ && !e) {
                    c.stop(b.ⲆⲆⵠΔ);
                }
                return c;
            },
            ΔⲆⵠΔⲆᐃⵠ: function (a) {
                var b = this;
                if (b.ⲆΔΔⲆΔΔΔ[a]) {
                    clearTimeout(b.ⲆΔΔⲆΔΔΔ[a]);
                    delete b.ⲆΔΔⲆΔΔΔ[a];
                }
                return b;
            },
            ΔⵠⲆᐃⲆ: function (a) {
                for (var b = this, c = 0; c < b.ᐃⲆⲆᐃⵠ.length; c++) {
                    if (a === b.ᐃⲆⲆᐃⵠ[c].ⲆⲆⵠΔ) {
                        return b.ᐃⲆⲆᐃⵠ[c];
                    }
                }
                return null;
            },
            ⲆΔⲆⵠⲆⵠΔᐃⵠ: function () {
                var a = this;
                a.ⲆⲆⵠⲆΔᐃⵠᐃΔ();
                for (var b = 0; b < a.ᐃⲆⲆᐃⵠ.length; b++) {
                    if (a.ᐃⲆⲆᐃⵠ[b].ⲆᐃᐃⲆᐃ) {
                        return a.ᐃⲆⲆᐃⵠ[b].reset();
                    }
                }
                return new d(a);
            },
            ⲆⲆⵠⲆΔᐃⵠᐃΔ: function () {
                var a = this;
                var b = a.ᐃΔΔΔⵠᐃⵠⵠᐃ;
                var c = 0;
                var d = 0;
                if (a.ᐃⲆⲆᐃⵠ.length >= b) {
                    for (d = 0; d < a.ᐃⲆⲆᐃⵠ.length; d++) {
                        if (a.ᐃⲆⲆᐃⵠ[d].ⲆᐃᐃⲆᐃ) {
                            c++;
                        }
                    }
                    for (d = a.ᐃⲆⲆᐃⵠ.length - 1; d >= 0; d--) {
                        if (c <= b) {
                            return;
                        }
                        if (a.ᐃⲆⲆᐃⵠ[d].ⲆᐃᐃⲆᐃ) {
                            if (a.ᐃⲆᐃᐃᐃ && a.ᐃⲆⲆᐃⵠ[d].ⵠⲆᐃⲆ) {
                                a.ᐃⲆⲆᐃⵠ[d].ⵠⲆᐃⲆ.disconnect(0);
                            }
                            a.ᐃⲆⲆᐃⵠ.splice(d, 1);
                            c--;
                        }
                    }
                }
            },
            ⵠⲆⲆⵠΔ: function (a) {
                if (a === undefined) {
                    var b = [];
                    for (var c = 0; c < this.ᐃⲆⲆᐃⵠ.length; c++) {
                        b.push(this.ᐃⲆⲆᐃⵠ[c].ⲆⲆⵠΔ);
                    }
                    return b;
                }
                return [a];
            },
            ⵠΔⵠⵠΔΔⲆᐃⵠ: function (a) {
                a.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ = j.ᐃ.createBufferSource();
                a.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ.buffer = f[this.ᐃⵠⲆⵠΔ];
                if (a.ⲆⵠΔΔⵠ) {
                    a.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ.connect(a.ⲆⵠΔΔⵠ);
                } else {
                    a.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ.connect(a.ⵠⲆᐃⲆ);
                }
                a.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ.loop = a.ⵠᐃⲆⵠⲆ;
                if (a.ⵠᐃⲆⵠⲆ) {
                    a.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ.loopStart = a.ⲆⲆΔᐃᐃ || 0;
                    a.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ.loopEnd = a.ⵠΔΔⲆⵠⲆᐃ;
                }
                a.ⵠⲆᐃⲆ.ⲆⵠⵠᐃΔ.playbackRate.value = a.ⵠⵠΔⲆⵠ;
                return this;
            },
            ΔⲆⵠⵠΔᐃΔ: function (a) {
                var b = this;
                if (b.ΔΔΔᐃⲆⲆⲆ) {
                    a.ⲆⵠⵠᐃΔ.onended = null;
                    a.ⲆⵠⵠᐃΔ.disconnect(0);
                    try {
                        a.ⲆⵠⵠᐃΔ.buffer = b.ΔΔΔᐃⲆⲆⲆ;
                    } catch (a) { }
                }
                a.ⲆⵠⵠᐃΔ = null;
                return b;
            }
        };
        function d(a) {
            this.Δⵠⵠᐃⵠᐃᐃ = a;
            this.ⲆⵠᐃⲆⲆ();
        }
        d.prototype = {
            ⲆⵠᐃⲆⲆ: function () {
                var a = this;
                var b = a.Δⵠⵠᐃⵠᐃᐃ;
                a.ⵠᐃΔⵠᐃ = b.ⵠᐃΔⵠᐃ;
                a.ⵠᐃⲆⵠⲆ = b.ⵠᐃⲆⵠⲆ;
                a.ᐃⵠⵠⵠⵠ = b.ᐃⵠⵠⵠⵠ;
                a.ⵠⵠΔⲆⵠ = b.ⵠⵠΔⲆⵠ;
                a.ᐃⲆⲆΔⵠ = 0;
                a.ᐃΔⵠⵠΔ = true;
                a.ⲆᐃᐃⲆᐃ = true;
                a.ᐃⲆⲆΔΔ = "__default";
                a.ⲆⲆⵠΔ = ++j.ⵠⵠΔΔⵠᐃΔ;
                b.ᐃⲆⲆᐃⵠ.push(a);
                a.create();
                return a;
            },
            create: function () {
                var a = this;
                var b = a.Δⵠⵠᐃⵠᐃᐃ;
                var c = j.ⵠᐃΔⵠᐃ || a.ⵠᐃΔⵠᐃ || a.Δⵠⵠᐃⵠᐃᐃ.ⵠᐃΔⵠᐃ ? 0 : a.ᐃⵠⵠⵠⵠ;
                if (b.ᐃⲆᐃᐃᐃ) {
                    a.ⵠⲆᐃⲆ = j.ᐃ.createGain === undefined ? j.ᐃ.ⵠᐃᐃᐃᐃΔⵠΔⵠ() : j.ᐃ.createGain();
                    a.ⵠⲆᐃⲆ.gain.setValueAtTime(c, j.ᐃ.currentTime);
                    a.ⵠⲆᐃⲆ.paused = true;
                    a.ⵠⲆᐃⲆ.connect(j.ⲆⵠⲆᐃⲆⲆⲆ);
                } else {
                    a.ⵠⲆᐃⲆ = new Audio();
                    a.ⲆⵠᐃΔⲆΔΔ = a.ΔΔⵠΔΔΔᐃⵠᐃ.bind(a);
                    a.ⵠⲆᐃⲆ.addEventListener("error", a.ⲆⵠᐃΔⲆΔΔ, false);
                    a.ΔⲆᐃΔΔᐃⲆ = a.ⵠΔⵠⲆⵠΔⵠⵠⲆ.bind(a);
                    a.ⵠⲆᐃⲆ.addEventListener(j.ⲆΔⵠⵠΔⵠⲆ, a.ΔⲆᐃΔΔᐃⲆ, false);
                    a.ⵠⲆᐃⲆ.src = b.ᐃⵠⲆⵠΔ;
                    a.ⵠⲆᐃⲆ.preload = "auto";
                    a.ⵠⲆᐃⲆ.volume = c * j.volume();
                    a.ⵠⲆᐃⲆ.load();
                }
                return a;
            },
            reset: function () {
                var a = this;
                var b = a.Δⵠⵠᐃⵠᐃᐃ;
                a.ⵠᐃΔⵠᐃ = b.ⵠᐃΔⵠᐃ;
                a.ⵠᐃⲆⵠⲆ = b.ⵠᐃⲆⵠⲆ;
                a.ᐃⵠⵠⵠⵠ = b.ᐃⵠⵠⵠⵠ;
                a.ⵠⵠΔⲆⵠ = b.ⵠⵠΔⲆⵠ;
                a.ᐃⲆⲆΔⵠ = 0;
                a.ⲆⲆⲆⵠⵠⲆⲆ = 0;
                a.ᐃΔⵠⵠΔ = true;
                a.ⲆᐃᐃⲆᐃ = true;
                a.ᐃⲆⲆΔΔ = "__default";
                a.ⲆⲆⵠΔ = ++j.ⵠⵠΔΔⵠᐃΔ;
                return a;
            },
            ΔΔⵠΔΔΔᐃⵠᐃ: function () {
                var a = this;
                a.Δⵠⵠᐃⵠᐃᐃ.ⵠᐃⵠⲆΔ("loaderror", a.ⲆⲆⵠΔ, a.ⵠⲆᐃⲆ.error ? a.ⵠⲆᐃⲆ.error.code : 0);
                a.ⵠⲆᐃⲆ.removeEventListener("error", a.ⲆⵠᐃΔⲆΔΔ, false);
            },
            ⵠΔⵠⲆⵠΔⵠⵠⲆ: function () {
                var a = this;
                var b = a.Δⵠⵠᐃⵠᐃᐃ;
                b.ⲆᐃΔⲆᐃⵠΔ = Math.ceil(a.ⵠⲆᐃⲆ.duration * 10) / 10;
                if (Object.keys(b.ᐃⲆⲆΔΔ).length === 0) {
                    b.ᐃⲆⲆΔΔ = {
                        ⵠᐃΔⲆⲆΔΔⵠΔ: [0, b.ⲆᐃΔⲆᐃⵠΔ * 1000]
                    };
                }
                if (b.ᐃⲆᐃᐃΔ !== "loaded") {
                    b.ᐃⲆᐃᐃΔ = "loaded";
                    b.ⵠᐃⵠⲆΔ("load");
                    b.ΔᐃⲆᐃⵠΔⵠ();
                }
                a.ⵠⲆᐃⲆ.removeEventListener(j.ⲆΔⵠⵠΔⵠⲆ, a.ΔⲆᐃΔΔᐃⲆ, false);
            }
        };
        var f = {};
        function a(a) {
            var b = a.ᐃⵠⲆⵠΔ;
            if (f[b]) {
                a.ⲆᐃΔⲆᐃⵠΔ = f[b].duration;
                h(a);
                return;
            }
            if (/^data:[^;]+;base64,/.test(b)) {
                for (var c = atob(b.split(",")[1]), d = new Uint8Array(c.length), e = 0; e < c.length; ++e) {
                    d[e] = c.charCodeAt(e);
                }
                m(d.buffer, a);
            } else {
                var g = new XMLHttpRequest();
                g.open("GET", b, true);
                g.responseType = "arraybuffer";
                g.onload = function () {
                    var b = (g.status + "")[0];
                    if (b === "0" || b === "2" || b === "3") {
                        m(g.response, a);
                    } else {
                        a.ⵠᐃⵠⲆΔ("loaderror", null, "Failed loading audio file with status: " + g.status + ".");
                    }
                };
                g.onerror = function () {
                    if (a.ᐃⲆᐃᐃᐃ) {
                        a.ⲆᐃΔⵠⵠⲆⵠ = true;
                        a.ᐃⲆᐃᐃᐃ = false;
                        a.ᐃⲆⲆᐃⵠ = [];
                        delete f[b];
                        a.load();
                    }
                };
                k(g);
            }
        }
        function k(a) {
            try {
                a.send();
            } catch (b) {
                a.onerror();
            }
        }
        function m(a, b) {
            j.ᐃ.decodeAudioData(a, function (a) {
                if (a && b.ᐃⲆⲆᐃⵠ.length > 0) {
                    f[b.ᐃⵠⲆⵠΔ] = a;
                    h(b, a);
                }
            }, function () {
                b.ⵠᐃⵠⲆΔ("loaderror", null, "Decoding audio data failed.");
            });
        }
        function h(a, b) {
            if (b && !a.ⲆᐃΔⲆᐃⵠΔ) {
                a.ⲆᐃΔⲆᐃⵠΔ = b.duration;
            }
            if (Object.keys(a.ᐃⲆⲆΔΔ).length === 0) {
                a.ᐃⲆⲆΔΔ = {
                    ⵠᐃΔⲆⲆΔΔⵠΔ: [0, a.ⲆᐃΔⲆᐃⵠΔ * 1000]
                };
            }
            if (a.ᐃⲆᐃᐃΔ !== "loaded") {
                a.ᐃⲆᐃᐃΔ = "loaded";
                a.ⵠᐃⵠⲆΔ("load");
                a.ΔᐃⲆᐃⵠΔⵠ();
            }
        }
        function i() {
            try {
                if (typeof AudioContext != "undefined") {
                    j.ᐃ = new AudioContext();
                } else if (typeof ᐃΔⲆⵠⵠᐃⲆᐃΔ != "undefined") {
                    j.ᐃ = new ᐃΔⲆⵠⵠᐃⲆᐃΔ();
                } else {
                    j.ⲆᐃᐃᐃΔ = false;
                }
            } catch (a) {
                j.ⲆᐃᐃᐃΔ = false;
            }
            var a = /iP(hone|od|ad)/.test(j.ΔⲆᐃⲆΔ && j.ΔⲆᐃⲆΔ.platform);
            var b = j.ΔⲆᐃⲆΔ && j.ΔⲆᐃⲆΔ.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
            var c = b ? parseInt(b[1], 10) : null;
            if (a && c && c < 9) {
                var d = /safari/.test(j.ΔⲆᐃⲆΔ && j.ΔⲆᐃⲆΔ.userAgent.toLowerCase());
                if (j.ΔⲆᐃⲆΔ && j.ΔⲆᐃⲆΔ.ⲆⵠⲆⵠⲆⵠⵠⲆᐃ && !d || j.ΔⲆᐃⲆΔ && !j.ΔⲆᐃⲆΔ.ⲆⵠⲆⵠⲆⵠⵠⲆᐃ && !d) {
                    j.ⲆᐃᐃᐃΔ = false;
                }
            }
            if (j.ⲆᐃᐃᐃΔ) {
                j.ⲆⵠⲆᐃⲆⲆⲆ = j.ᐃ.createGain === undefined ? j.ᐃ.ⵠᐃᐃᐃᐃΔⵠΔⵠ() : j.ᐃ.createGain();
                j.ⲆⵠⲆᐃⲆⲆⲆ.gain.value = j.ⵠᐃΔⵠᐃ ? 0 : 1;
                j.ⲆⵠⲆᐃⲆⲆⲆ.connect(j.ᐃ.destination);
            }
            j.ΔⵠΔⵠΔΔᐃ();
        }
        if (typeof ⲆΔⵠᐃⲆⵠⲆ == "function" && ⲆΔⵠᐃⲆⵠⲆ.ᐃⲆᐃⵠΔᐃᐃ) {
            ⲆΔⵠᐃⲆⵠⲆ([], function () {
                return {
                    Howler: j,
                    Howl: c
                };
            });
        }
        if (typeof ᐃᐃΔᐃΔⲆⵠ != "undefined") {
            ᐃᐃΔᐃΔⲆⵠ.Howler = j;
            ᐃᐃΔᐃΔⲆⵠ.Howl = c;
        }
        if (typeof Gf != "undefined") {
            Gf.ᐃᐃⲆΔⲆⵠⲆ = b;
            Gf.Howler = j;
            Gf.Howl = c;
            Gf.ᐃΔᐃⲆΔᐃⲆ = d;
        } else if (typeof ⲆᐃᐃΔᐃᐃⲆ != "undefined") {
            ⲆᐃᐃΔᐃᐃⲆ.ᐃᐃⲆΔⲆⵠⲆ = b;
            ⲆᐃᐃΔᐃᐃⲆ.Howler = j;
            ⲆᐃᐃΔᐃᐃⲆ.Howl = c;
            ⲆᐃᐃΔᐃᐃⲆ.ᐃΔᐃⲆΔᐃⲆ = d;
        }
    })();
    (function () {
        ᐃᐃⲆΔⲆⵠⲆ.prototype.ⲆⵠΔᐃⵠ = [0, 0, 0];
        ᐃᐃⲆΔⲆⵠⲆ.prototype.ⵠⵠᐃᐃᐃ = [0, 0, -1, 0, 1, 0];
        ᐃᐃⲆΔⲆⵠⲆ.prototype.ⲆΔⲆⲆⲆⲆⵠ = function (a) {
            var b = this;
            if (!b.ᐃ || !b.ᐃ.listener) {
                return b;
            }
            for (var c = b.ᐃᐃΔΔⵠ.length - 1; c >= 0; c--) {
                b.ᐃᐃΔΔⵠ[c].ⲆΔⲆⲆⲆⲆⵠ(a);
            }
            return b;
        };
        ᐃᐃⲆΔⲆⵠⲆ.prototype.ᐃⲆᐃᐃ = function (a, b, c) {
            var d = this;
            if (d.ᐃ && d.ᐃ.listener) {
                b = typeof b != "number" ? d.ⲆⵠΔᐃⵠ[1] : b;
                c = typeof c != "number" ? d.ⲆⵠΔᐃⵠ[2] : c;
                if (typeof a != "number") {
                    return d.ⲆⵠΔᐃⵠ;
                } else {
                    d.ⲆⵠΔᐃⵠ = [a, b, c];
                    d.ᐃ.listener.setPosition(d.ⲆⵠΔᐃⵠ[0], d.ⲆⵠΔᐃⵠ[1], d.ⲆⵠΔᐃⵠ[2]);
                    return d;
                }
            } else {
                return d;
            }
        };
        ᐃᐃⲆΔⲆⵠⲆ.prototype.orientation = function (b, c, d, e, f, g) {
            var h = this;
            if (!h.ᐃ || !h.ᐃ.listener) {
                return h;
            }
            var j = h.ⵠⵠᐃᐃᐃ;
            c = typeof c != "number" ? j[1] : c;
            d = typeof d != "number" ? j[2] : d;
            e = typeof e != "number" ? j[3] : e;
            f = typeof f != "number" ? j[4] : f;
            g = typeof g != "number" ? j[5] : g;
            if (typeof b != "number") {
                return j;
            } else {
                h.ⵠⵠᐃᐃᐃ = [b, c, d, e, f, g];
                h.ᐃ.listener.setOrientation(b, c, d, e, f, g);
                return h;
            }
        };
        Howl.prototype.ⲆⵠᐃⲆⲆ = function (a) {
            return function (b) {
                var c = this;
                c.ⵠⵠᐃᐃᐃ = b.orientation || [1, 0, 0];
                c.ⲆⵠⲆⲆⲆᐃⲆ = b.ⲆΔⲆⲆⲆⲆⵠ || null;
                c.ⲆⵠΔᐃⵠ = b.ᐃⲆᐃᐃ || null;
                c.ⲆΔᐃᐃⵠ = {
                    coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
                    coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
                    coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : 0,
                    distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
                    maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
                    panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
                    refDistance: b.refDistance !== undefined ? b.refDistance : 1,
                    rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : 1
                };
                c.ⲆⲆᐃΔⵠⵠΔΔⲆ = b.ΔΔᐃᐃΔΔΔⵠΔ ? [{
                    ᐃᐃΔⲆᐃ: b.ΔΔᐃᐃΔΔΔⵠΔ
                }] : [];
                c.ΔΔΔᐃⵠΔⲆⲆⵠ = b.ⲆⵠΔᐃⵠⲆᐃⲆΔ ? [{
                    ᐃᐃΔⲆᐃ: b.ⲆⵠΔᐃⵠⲆᐃⲆΔ
                }] : [];
                c.ᐃᐃⲆΔᐃⲆΔⵠᐃ = b.ⵠⲆΔⲆⲆᐃΔᐃΔ ? [{
                    ᐃᐃΔⲆᐃ: b.ⵠⲆΔⲆⲆᐃΔᐃΔ
                }] : [];
                return a.call(this, b);
            };
        }(Howl.prototype.ⲆⵠᐃⲆⲆ);
        Howl.prototype.ⲆΔⲆⲆⲆⲆⵠ = function (c, d) {
            var e = this;
            if (!e.ᐃⲆᐃᐃᐃ) {
                return e;
            }
            if (e.ᐃⲆᐃᐃΔ !== "loaded") {
                e.ᐃⲆΔΔⵠ.push({
                    event: "stereo",
                    action: function () {
                        e.ⲆΔⲆⲆⲆⲆⵠ(c, d);
                    }
                });
                return e;
            }
            var f = Howler.ᐃ.createStereoPanner === undefined ? "spatial" : "stereo";
            if (d === undefined) {
                if (typeof c != "number") {
                    return e.ⲆⵠⲆⲆⲆᐃⲆ;
                }
                e.ⲆⵠⲆⲆⲆᐃⲆ = c;
                e.ⲆⵠΔᐃⵠ = [c, 0, 0];
            }
            for (var g = e.ⵠⲆⲆⵠΔ(d), a = 0; a < g.length; a++) {
                var h = e.ΔⵠⲆᐃⲆ(g[a]);
                if (h) {
                    if (typeof c != "number") {
                        return h.ⲆⵠⲆⲆⲆᐃⲆ;
                    }
                    h.ⲆⵠⲆⲆⲆᐃⲆ = c;
                    h.ⲆⵠΔᐃⵠ = [c, 0, 0];
                    if (h.ⵠⲆᐃⲆ) {
                        h.ⲆΔᐃᐃⵠ.panningModel = "equalpower";
                        if (!h.ⲆⵠΔΔⵠ || !h.ⲆⵠΔΔⵠ.pan) {
                            b(h, f);
                        }
                        if (f === "spatial") {
                            h.ⲆⵠΔΔⵠ.setPosition(c, 0, 0);
                        } else {
                            h.ⲆⵠΔΔⵠ.pan.value = c;
                        }
                    }
                    e.ⵠᐃⵠⲆΔ("stereo", h.ⲆⲆⵠΔ);
                }
            }
            return e;
        };
        Howl.prototype.ᐃⲆᐃᐃ = function (c, d, e, f) {
            var g = this;
            if (!g.ᐃⲆᐃᐃᐃ) {
                return g;
            }
            if (g.ᐃⲆᐃᐃΔ !== "loaded") {
                g.ᐃⲆΔΔⵠ.push({
                    event: "pos",
                    action: function () {
                        g.ᐃⲆᐃᐃ(c, d, e, f);
                    }
                });
                return g;
            }
            d = typeof d != "number" ? 0 : d;
            e = typeof e != "number" ? -0.5 : e;
            if (f === undefined) {
                if (typeof c != "number") {
                    return g.ⲆⵠΔᐃⵠ;
                }
                g.ⲆⵠΔᐃⵠ = [c, d, e];
            }
            for (var a = g.ⵠⲆⲆⵠΔ(f), i = 0; i < a.length; i++) {
                var j = g.ΔⵠⲆᐃⲆ(a[i]);
                if (j) {
                    if (typeof c != "number") {
                        return j.ⲆⵠΔᐃⵠ;
                    }
                    j.ⲆⵠΔᐃⵠ = [c, d, e];
                    if (j.ⵠⲆᐃⲆ) {
                        if (!j.ⲆⵠΔΔⵠ || !!j.ⲆⵠΔΔⵠ.pan) {
                            b(j, "spatial");
                        }
                        j.ⲆⵠΔΔⵠ.setPosition(c, d, e);
                    }
                    g.ⵠᐃⵠⲆΔ("pos", j.ⲆⲆⵠΔ);
                }
            }
            return g;
        };
        Howl.prototype.orientation = function (c, d, e, f) {
            var g = this;
            if (!g.ᐃⲆᐃᐃᐃ) {
                return g;
            }
            if (g.ᐃⲆᐃᐃΔ !== "loaded") {
                g.ᐃⲆΔΔⵠ.push({
                    event: "orientation",
                    action: function () {
                        g.orientation(c, d, e, f);
                    }
                });
                return g;
            }
            d = typeof d != "number" ? g.ⵠⵠᐃᐃᐃ[1] : d;
            e = typeof e != "number" ? g.ⵠⵠᐃᐃᐃ[2] : e;
            if (f === undefined) {
                if (typeof c != "number") {
                    return g.ⵠⵠᐃᐃᐃ;
                }
                g.ⵠⵠᐃᐃᐃ = [c, d, e];
            }
            for (var a = g.ⵠⲆⲆⵠΔ(f), i = 0; i < a.length; i++) {
                var j = g.ΔⵠⲆᐃⲆ(a[i]);
                if (j) {
                    if (typeof c != "number") {
                        return j.ⵠⵠᐃᐃᐃ;
                    }
                    j.ⵠⵠᐃᐃᐃ = [c, d, e];
                    if (j.ⵠⲆᐃⲆ) {
                        if (!j.ⲆⵠΔΔⵠ) {
                            j.ⲆⵠΔᐃⵠ ||= g.ⲆⵠΔᐃⵠ || [0, 0, -0.5];
                            b(j, "spatial");
                        }
                        j.ⲆⵠΔΔⵠ.setOrientation(c, d, e);
                    }
                    g.ⵠᐃⵠⲆΔ("orientation", j.ⲆⲆⵠΔ);
                }
            }
            return g;
        };
        Howl.prototype.ᐃⲆⵠⵠⲆΔᐃΔⲆ = function () {
            var c;
            var d;
            var e;
            var f = this;
            var g = arguments;
            if (!f.ᐃⲆᐃᐃᐃ) {
                return f;
            }
            if (g.length === 0) {
                return f.ⲆΔᐃᐃⵠ;
            }
            if (g.length === 1) {
                if (typeof g[0] != "object") {
                    if (e = f.ΔⵠⲆᐃⲆ(parseInt(g[0], 10))) {
                        return e.ⲆΔᐃᐃⵠ;
                    } else {
                        return f.ⲆΔᐃᐃⵠ;
                    }
                }
                c = g[0];
                if (d === undefined) {
                    f.ⲆΔᐃᐃⵠ = {
                        coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : f.ⲆΔⲆΔΔⵠᐃⲆΔ,
                        coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : f.ΔⲆⵠΔᐃⵠΔⵠⵠ,
                        coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : f.ⵠΔΔΔⲆᐃⵠⵠᐃ,
                        distanceModel: c.distanceModel !== undefined ? c.distanceModel : f.ΔⲆᐃⲆⵠΔΔⲆᐃ,
                        maxDistance: c.maxDistance !== undefined ? c.maxDistance : f.ⲆⲆΔⵠⲆⵠΔᐃⲆ,
                        panningModel: c.panningModel !== undefined ? c.panningModel : f.ⵠⵠΔⵠⲆᐃΔΔΔ,
                        refDistance: c.refDistance !== undefined ? c.refDistance : f.ΔᐃⲆⲆⵠⵠⲆⲆΔ,
                        rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : f.ΔΔᐃⵠΔΔⲆΔⲆ
                    };
                }
            } else if (g.length === 2) {
                c = g[0];
                d = parseInt(g[1], 10);
            }
            for (var a = f.ⵠⲆⲆⵠΔ(d), j = 0; j < a.length; j++) {
                if (e = f.ΔⵠⲆᐃⲆ(a[j])) {
                    var k = e.ⲆΔᐃᐃⵠ;
                    k = {
                        coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : k.coneInnerAngle,
                        coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : k.coneOuterAngle,
                        coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : k.coneOuterGain,
                        distanceModel: c.distanceModel !== undefined ? c.distanceModel : k.distanceModel,
                        maxDistance: c.maxDistance !== undefined ? c.maxDistance : k.maxDistance,
                        panningModel: c.panningModel !== undefined ? c.panningModel : k.panningModel,
                        refDistance: c.refDistance !== undefined ? c.refDistance : k.refDistance,
                        rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : k.rolloffFactor
                    };
                    var m = e.ⲆⵠΔΔⵠ;
                    if (m) {
                        m.coneInnerAngle = k.coneInnerAngle;
                        m.coneOuterAngle = k.coneOuterAngle;
                        m.coneOuterGain = k.coneOuterGain;
                        m.distanceModel = k.distanceModel;
                        m.maxDistance = k.maxDistance;
                        m.panningModel = k.panningModel;
                        m.refDistance = k.refDistance;
                        m.rolloffFactor = k.rolloffFactor;
                    } else {
                        e.ⲆⵠΔᐃⵠ ||= f.ⲆⵠΔᐃⵠ || [0, 0, -0.5];
                        b(e, "spatial");
                    }
                }
            }
            return f;
        };
        ᐃΔᐃⲆΔᐃⲆ.prototype.ⲆⵠᐃⲆⲆ = function (a) {
            return function () {
                var b = this;
                var c = b.Δⵠⵠᐃⵠᐃᐃ;
                b.ⵠⵠᐃᐃᐃ = c.ⵠⵠᐃᐃᐃ;
                b.ⲆⵠⲆⲆⲆᐃⲆ = c.ⲆⵠⲆⲆⲆᐃⲆ;
                b.ⲆⵠΔᐃⵠ = c.ⲆⵠΔᐃⵠ;
                b.ⲆΔᐃᐃⵠ = c.ⲆΔᐃᐃⵠ;
                a.call(this);
                if (b.ⲆⵠⲆⲆⲆᐃⲆ) {
                    c.ⲆΔⲆⲆⲆⲆⵠ(b.ⲆⵠⲆⲆⲆᐃⲆ);
                } else if (b.ⲆⵠΔᐃⵠ) {
                    c.ᐃⲆᐃᐃ(b.ⲆⵠΔᐃⵠ[0], b.ⲆⵠΔᐃⵠ[1], b.ⲆⵠΔᐃⵠ[2], b.ⲆⲆⵠΔ);
                }
            };
        }(ᐃΔᐃⲆΔᐃⲆ.prototype.ⲆⵠᐃⲆⲆ);
        ᐃΔᐃⲆΔᐃⲆ.prototype.reset = function (a) {
            return function () {
                var b = this;
                var c = b.Δⵠⵠᐃⵠᐃᐃ;
                b.ⵠⵠᐃᐃᐃ = c.ⵠⵠᐃᐃᐃ;
                b.ⲆⵠΔᐃⵠ = c.ⲆⵠΔᐃⵠ;
                b.ⲆΔᐃᐃⵠ = c.ⲆΔᐃᐃⵠ;
                return a.call(this);
            };
        }(ᐃΔᐃⲆΔᐃⲆ.prototype.reset);
        function b(a, b) {
            b = b || "spatial";
            if (b === "spatial") {
                a.ⲆⵠΔΔⵠ = Howler.ᐃ.createPanner();
                a.ⲆⵠΔΔⵠ.coneInnerAngle = a.ⲆΔᐃᐃⵠ.coneInnerAngle;
                a.ⲆⵠΔΔⵠ.coneOuterAngle = a.ⲆΔᐃᐃⵠ.coneOuterAngle;
                a.ⲆⵠΔΔⵠ.coneOuterGain = a.ⲆΔᐃᐃⵠ.coneOuterGain;
                a.ⲆⵠΔΔⵠ.distanceModel = a.ⲆΔᐃᐃⵠ.distanceModel;
                a.ⲆⵠΔΔⵠ.maxDistance = a.ⲆΔᐃᐃⵠ.maxDistance;
                a.ⲆⵠΔΔⵠ.panningModel = a.ⲆΔᐃᐃⵠ.panningModel;
                a.ⲆⵠΔΔⵠ.refDistance = a.ⲆΔᐃᐃⵠ.refDistance;
                a.ⲆⵠΔΔⵠ.rolloffFactor = a.ⲆΔᐃᐃⵠ.rolloffFactor;
                a.ⲆⵠΔΔⵠ.setPosition(a.ⲆⵠΔᐃⵠ[0], a.ⲆⵠΔᐃⵠ[1], a.ⲆⵠΔᐃⵠ[2]);
                a.ⲆⵠΔΔⵠ.setOrientation(a.ⵠⵠᐃᐃᐃ[0], a.ⵠⵠᐃᐃᐃ[1], a.ⵠⵠᐃᐃᐃ[2]);
            } else {
                a.ⲆⵠΔΔⵠ = Howler.ᐃ.createStereoPanner();
                a.ⲆⵠΔΔⵠ.pan.value = a.ⲆⵠⲆⲆⲆᐃⲆ;
            }
            a.ⲆⵠΔΔⵠ.connect(a.ⵠⲆᐃⲆ);
            if (!a.ᐃΔⵠⵠΔ) {
                a.Δⵠⵠᐃⵠᐃᐃ.pause(a.ⲆⲆⵠΔ, true).play(a.ⲆⲆⵠΔ);
            }
        }
    })();
    var Rw = 1;
    var Sw = 1;
    var Tw = {
        ΔⵠᐃⲆᐃⲆᐃⲆᐃ: 5000,
        ⲆΔΔⲆⵠΔΔ: 460000,
        ⲆΔΔ: 6,
        ⲆⲆΔⵠⵠ: 8,
        ⵠᐃᐃⵠᐃⲆΔᐃᐃ: 5000,
        ΔⵠⵠΔⲆⲆᐃ: 3000,
        ⲆⲆⲆⲆᐃ: 1,
        ᐃⲆⲆΔΔⲆⵠΔΔ: 12,
        ⵠΔⵠΔⲆⲆⵠ: 12,
        ᐃΔⲆⵠᐃⵠᐃⵠⵠ: 12,
        ᐃⵠΔΔᐃ: 3,
        ΔΔΔⵠᐃ: 2,
        ⲆⵠᐃΔⲆᐃΔΔⵠ: 5000
    };
    var Uw = [];
    Uw[-1] = 1;
    Uw[28] = 1;
    Uw[49] = 1;
    Uw[ds.ᐃⲆⵠⵠⲆⵠⵠⵠΔ] = 2;
    Uw[8] = 2;
    Uw[1] = 2;
    Uw[3] = 2;
    Uw[4] = 2;
    Uw[31] = 2;
    function Vw(a) {
        return Gf.String.fromCharCode(a);
    }
    Uw[32] = 2;
    Uw[9] = 2;
    Uw[57] = 2;
    Uw[0] = 2;
    Uw[63] = 2;
    Uw[17] = 2;
    Uw[5] = 2;
    Uw[6] = 2;
    Uw[30] = 2;
    Uw[ds.ΔⵠⲆᐃΔΔΔⵠᐃ] = 2;
    Uw[18] = 2;
    Uw[12] = 2;
    Uw[13] = 2;
    Uw[14] = 2;
    Uw[15] = 2;
    Uw[16] = 2;
    Uw[33] = 2;
    Uw[ds.ᐃⲆΔΔΔⲆΔᐃΔ] = 2;
    Uw[35] = 2;
    Uw[36] = 2;
    Uw[37] = 2;
    Uw[38] = 2;
    Uw[39] = 2;
    Uw[45] = 2;
    const Ww = String.fromCharCode;
    const Xw = Ww(101);
    const Yw = Ww(118);
    const Zw = Ww(97);
    const $w = Ww(108);
    Uw[62] = 2;
    Uw[54] = 2;
    Uw[53] = 2;
    Uw[46] = 3;
    Uw[50] = 3;
    Uw[51] = 3;
    Uw[52] = 3;
    Δᐃᐃᐃ = [];
    Δᐃᐃᐃ[0] = 0;
    Δᐃᐃᐃ[1] = 1;
    Δᐃᐃᐃ[2] = 1;
    Δᐃᐃᐃ[3] = 1;
    Δᐃᐃᐃ[4] = 0;
    Δᐃᐃᐃ[5] = 0;
    Δᐃᐃᐃ[6] = 0;
    Δᐃᐃᐃ[7] = 0;
    Δᐃᐃᐃ[8] = 0;
    Δᐃᐃᐃ[9] = 0;
    Δᐃᐃᐃ[10] = 1;
    Δᐃᐃᐃ[11] = 1;
    Δᐃᐃᐃ[12] = 1;
    Δᐃᐃᐃ[13] = 1;
    Δᐃᐃᐃ[14] = 1;
    Δᐃᐃᐃ[15] = 1;
    Δᐃᐃᐃ[16] = 0;
    Δᐃᐃᐃ[17] = 0;
    Δᐃᐃᐃ[18] = 0;
    Δᐃᐃᐃ[19] = 0;
    Δᐃᐃᐃ[20] = 0;
    Δᐃᐃᐃ[21] = 0;
    Δᐃᐃᐃ[22] = 0;
    Δᐃᐃᐃ[23] = 1;
    Δᐃᐃᐃ[24] = 1;
    Δᐃᐃᐃ[25] = 1;
    Δᐃᐃᐃ[26] = 1;
    Δᐃᐃᐃ[27] = 1;
    Δᐃᐃᐃ[28] = 1;
    Δᐃᐃᐃ[29] = 1;
    Δᐃᐃᐃ[30] = 1;
    Δᐃᐃᐃ[31] = 1;
    Δᐃᐃᐃ[32] = 1;
    Δᐃᐃᐃ[33] = 1;
    Δᐃᐃᐃ[34] = 1;
    Δᐃᐃᐃ[35] = 1;
    Δᐃᐃᐃ[36] = 1;
    Δᐃᐃᐃ[37] = 1;
    Δᐃᐃᐃ[38] = 1;
    Δᐃᐃᐃ[40] = 0;
    Δᐃᐃᐃ[41] = 0;
    Δᐃᐃᐃ[42] = 0;
    Δᐃᐃᐃ[50] = 1;
    Δᐃᐃᐃ[51] = 1;
    Δᐃᐃᐃ[52] = 1;
    Δᐃᐃᐃ[55] = 0;
    Δᐃᐃᐃ[56] = 0;
    Δᐃᐃᐃ[57] = 0;
    Δᐃᐃᐃ[58] = 0;
    ⲆⵠΔⲆⵠ = [];
    ⲆⵠΔⲆⵠ[If.ΔⵠⲆⲆⵠ] = 0;
    ⲆⵠΔⲆⵠ[1] = 0;
    ⲆⵠΔⲆⵠ[29] = 0;
    ⲆⵠΔⲆⵠ[6] = 0;
    ⲆⵠΔⲆⵠ[3] = -1;
    ⲆⵠΔⲆⵠ[31] = -1;
    ⲆⵠΔⲆⵠ[2] = 0;
    ⲆⵠΔⲆⵠ[4] = 0;
    ⲆⵠΔⲆⵠ[30] = 0;
    ⲆⵠΔⲆⵠ[33] = 0;
    ⲆⵠΔⲆⵠ[32] = 1;
    ⲆⵠΔⲆⵠ[35] = 1;
    ⲆⵠΔⲆⵠ[7] = 1;
    ⲆⵠΔⲆⵠ[8] = 1;
    ⲆⵠΔⲆⵠ[9] = 1;
    ⲆⵠΔⲆⵠ[19] = 1;
    ⲆⵠΔⲆⵠ[50] = 1;
    ⲆⵠΔⲆⵠ[5] = 0;
    ⲆⵠΔⲆⵠ[12] = 1;
    ⲆⵠΔⲆⵠ[13] = 1;
    ⲆⵠΔⲆⵠ[14] = 1;
    ⲆⵠΔⲆⵠ[20] = 1;
    ⲆⵠΔⲆⵠ[52] = 1;
    ⲆⵠΔⲆⵠ[10] = 0;
    ⲆⵠΔⲆⵠ[15] = 1;
    ⲆⵠΔⲆⵠ[16] = 1;
    ⲆⵠΔⲆⵠ[17] = 1;
    ⲆⵠΔⲆⵠ[21] = 1;
    ⲆⵠΔⲆⵠ[51] = 1;
    ⲆⵠΔⲆⵠ[45] = 0;
    ⲆⵠΔⲆⵠ[46] = 1;
    ⲆⵠΔⲆⵠ[47] = 1;
    ⲆⵠΔⲆⵠ[48] = 1;
    ⲆⵠΔⲆⵠ[49] = 1;
    ⲆⵠΔⲆⵠ[53] = 1;
    ⲆⵠΔⲆⵠ[18] = 1;
    ⲆⵠΔⲆⵠ[22] = 1;
    ⲆⵠΔⲆⵠ[23] = 1;
    ⲆⵠΔⲆⵠ[11] = 0;
    ⲆⵠΔⲆⵠ[34] = 1;
    var _w = {
        ᐃⲆⵠⲆΔᐃᐃ: {
            ⲆⵠΔⲆΔ: null,
            path: ["audio/ambience.mp3"],
            ΔⲆ: {
                d0: [90086, 300, false],
                d1: [90391, 300, th],
                d2: [90684, 300, false]
            },
            sample: {
                d0: 8,
                d1: 8,
                d2: 8
            }
        },
        ⲆᐃΔⲆⵠᐃⲆ: {
            ⲆⵠΔⲆΔ: null,
            path: ["audio/ambience.mp3"],
            ΔⲆ: {
                p0: [89303, 300, mh],
                p1: [89549, 300, Sg],
                p2: [89815, 300, false]
            },
            sample: {
                p0: 8,
                p1: 8,
                p2: 8
            }
        },
        ⲆⲆⲆⵠⵠⲆⵠ: {
            ⲆⵠΔⲆΔ: null,
            path: ["audio/ambience.mp3"],
            ΔⲆ: {
                w2: [88751, 300, false],
                w3: [89025, 300, false],
                w0: [88195, 300, rg],
                w1: [88473, 300, false]
            },
            sample: {
                w0: 8,
                w1: 8,
                w2: 8,
                w3: 8
            }
        },
        ᐃᐃᐃᐃⵠΔᐃ: {
            ⲆⵠΔⲆΔ: null,
            path: ["audio/ambience.mp3"],
            ΔⲆ: {
                ᐃᐃΔⵠᐃΔⵠᐃΔ: [100, 2800, true],
                ΔⵠⵠᐃΔⵠΔ: [66014, 925, true],
                ⲆⵠⵠᐃΔᐃⲆ: [30562, 655, true],
                ΔⵠᐃⵠΔⵠⲆ: [31658, 813, vr],
                ΔΔΔⲆⵠ: [91431, 400, mh],
                ΔⵠᐃⵠΔⵠΔ: [92249, 500, false],
                ᐃⲆᐃⲆΔ: [28380, 1797, true],
                ΔᐃΔⲆΔΔᐃ: [3100, 8800, Gr],
                ⲆᐃᐃⲆᐃⲆᐃ: [91022, 400, ie],
                ᐃΔᐃΔΔ: [12356, 6965, Tn],
                ⵠΔⵠΔΔΔⵠ: [66961, 21223, y],
                ΔΔⵠΔᐃΔⲆ: [54524, 11393, true],
                ΔⲆᐃᐃⲆⲆᐃ: [32604, 21890, true],
                ΔᐃⲆⵠⵠⲆⲆ: [66961, 21223, re],
                ΔᐃⲆᐃᐃⵠⵠ: [19882, 8301, true]
            },
            sample: {
                ᐃᐃΔⵠᐃΔⵠᐃΔ: 1,
                ΔᐃΔⲆΔΔᐃ: 1,
                ΔᐃⲆᐃᐃⵠⵠ: 1,
                ΔⲆᐃᐃⲆⲆᐃ: 1,
                ΔΔⵠΔᐃΔⲆ: 1,
                ΔᐃⲆⵠⵠⲆⲆ: 1,
                ⵠΔⵠΔΔΔⵠ: 1,
                ᐃΔᐃΔΔ: 8,
                ᐃⲆᐃⲆΔ: 8,
                ⲆⵠⵠᐃΔᐃⲆ: 8,
                ΔⵠᐃⵠΔⵠⲆ: 8,
                ΔⵠⵠᐃΔⵠΔ: 8,
                ⲆᐃᐃⲆᐃⲆᐃ: 6,
                ΔΔΔⲆⵠ: 6,
                ΔⵠᐃⵠΔⵠΔ: 6
            }
        }
    };
    function ax(b, c, d, e, f, i, a, j, k, h, l) {
        this.r = 1;
        this.ᐃⲆⵠᐃᐃ = b;
        this.ⲆⲆⲆᐃΔⲆⲆ = b;
        this.ⵠΔΔ = c;
        this.ΔᐃⲆ = d;
        this.fade = e;
        this.ΔⲆⲆᐃⵠᐃΔ = f;
        this.ⲆΔᐃⲆΔⲆΔ = i;
        this.ΔΔⲆⲆ = a;
        this.ᐃΔΔⲆΔⵠⵠ = j;
        this.source = k;
        this.source.ΔⲆⲆⵠΔⵠⵠ = k.x + k.w;
        this.source.ⵠΔᐃᐃⲆ = k.y + k.ᐃⲆᐃ;
        this.ΔΔⵠΔΔⲆᐃⲆᐃ = h;
        this.ᐃⲆΔⵠⵠᐃⲆ = l;
        this.ΔΔᐃⵠᐃⵠⲆ = 0;
        this.ᐃᐃⲆᐃΔⵠⲆ = {
            d: 5,
            ⲆⲆᐃᐃ: 5
        };
        this.ⲆⲆⵠΔΔ = function () {
            this.ᐃⲆⵠᐃᐃ -= tx;
            if (this.ᐃⲆⵠᐃᐃ < 0) {
                this.ᐃⲆⵠᐃᐃ = this.ⲆⲆⲆᐃΔⲆⲆ;
                var a = _w.ᐃᐃᐃᐃⵠΔᐃ.ⲆⵠΔⲆΔ.playing(this.ⵠΔΔ);
                var b = _w.ᐃᐃᐃᐃⵠΔᐃ.ⲆⵠΔⲆΔ.playing(this.ΔᐃⲆ);
                if (a && !b) {
                    var c = Rw * this.ΔΔⲆⲆ.volume(this.ⵠΔΔ);
                    var d = Rw * (Math.random() * this.ⲆΔᐃⲆΔⲆΔ + this.ΔⲆⲆᐃⵠᐃΔ);
                    this.ΔΔⲆⲆ.fade(c, d, this.fade, this.ⵠΔΔ);
                } else if (!a && b) {
                    c = this.ΔΔⲆⲆ.volume(this.ΔᐃⲆ) * Rw;
                    d = Rw * (Math.random() * this.ⲆΔᐃⲆΔⲆΔ + this.ΔⲆⲆᐃⵠᐃΔ);
                    this.ΔΔⲆⲆ.fade(c, d, this.fade, this.ΔᐃⲆ);
                }
            }
        };
        this.transition = function () {
            this.ᐃⲆⵠᐃᐃ = this.ⲆⲆⲆᐃΔⲆⲆ;
            this.ᐃᐃⲆᐃΔⵠⲆ.d = this.ᐃᐃⲆᐃΔⵠⲆ.ⲆⲆᐃᐃ;
            if (mx.time) {
                this.ΔΔⲆⲆ.fade(0, Rw * this.ΔⲆⲆᐃⵠᐃΔ, this.ᐃΔΔⲆΔⵠⵠ, this.ⵠΔΔ);
                this.ΔΔⲆⲆ.play(this.ⵠΔΔ);
                if (this.ΔΔⲆⲆ.playing(this.ΔᐃⲆ)) {
                    var a = this.ΔΔⲆⲆ.volume(this.ΔᐃⲆ) * Rw;
                    this.ΔΔⲆⲆ.fade(a, 0, this.ᐃΔΔⲆΔⵠⵠ, this.ΔᐃⲆ);
                }
            } else {
                this.ΔΔⲆⲆ.fade(0, Rw * this.ΔⲆⲆᐃⵠᐃΔ, this.ᐃΔΔⲆΔⵠⵠ, this.ΔᐃⲆ);
                this.ΔΔⲆⲆ.play(this.ΔᐃⲆ);
                if (this.ΔΔⲆⲆ.playing(this.ⵠΔΔ)) {
                    a = Rw * this.ΔΔⲆⲆ.volume(this.ⵠΔΔ);
                    this.ΔΔⲆⲆ.fade(a, 0, this.ᐃΔΔⲆΔⵠⵠ, this.ⵠΔΔ);
                }
            }
        };
        this.check = function (a) {
            if (this.ΔΔᐃⵠᐃⵠⲆ) {
                if (Z.ᐃⲆΔⵠⵠᐃⲆ(a, this.ΔΔⵠΔΔⲆᐃⲆᐃ)) {
                    if (!qx.transition && mx.ΔΔΔΔⲆ.now < 460000) {
                        if (mx.time) {
                            if (!this.ΔΔⲆⲆ.playing(this.ⵠΔΔ)) {
                                this.ᐃᐃⲆᐃΔⵠⲆ.d -= tx;
                                if (this.ᐃᐃⲆᐃΔⵠⲆ.d < 0) {
                                    this.transition();
                                }
                            }
                        } else if (!this.ΔΔⲆⲆ.playing(this.ΔᐃⲆ)) {
                            this.ᐃᐃⲆᐃΔⵠⲆ.d -= tx;
                            if (this.ᐃᐃⲆᐃΔⵠⲆ.d < 0) {
                                this.transition();
                            }
                        }
                    }
                } else {
                    this.ΔΔᐃⵠᐃⵠⲆ = 0;
                    if (this.ΔΔⲆⲆ.playing(this.ⵠΔΔ)) {
                        var b = this.ΔΔⲆⲆ.volume(this.ⵠΔΔ) * Rw;
                        this.ΔΔⲆⲆ.fade(b, 0, this.ᐃΔΔⲆΔⵠⵠ, this.ⵠΔΔ);
                    }
                    if (this.ΔΔⲆⲆ.playing(this.ΔᐃⲆ)) {
                        b = Rw * this.ΔΔⲆⲆ.volume(this.ΔᐃⲆ);
                        this.ΔΔⲆⲆ.fade(b, 0, this.ᐃΔΔⲆΔⵠⵠ, this.ΔᐃⲆ);
                    }
                }
            } else if (Z.ᐃⲆΔⵠⵠᐃⲆ(a, this.ᐃⲆΔⵠⵠᐃⲆ)) {
                this.ΔΔᐃⵠᐃⵠⲆ = 1;
                if (!qx.transition && mx.ΔΔΔΔⲆ.now < 460000) {
                    this.transition();
                }
            }
        };
        this.ᐃⵠⲆ = function (a, b) {
            var c;
            var d;
            c = a.x < this.source.x ? qx.ⵠᐃⵠⵠⵠΔⵠ(this.source.x) : this.source.ΔⲆⲆⵠΔⵠⵠ < a.x ? qx.ⵠᐃⵠⵠⵠΔⵠ(this.source.ΔⲆⲆⵠΔⵠⵠ) : b.x;
            d = a.y < this.source.y ? qx.ΔᐃᐃⲆⲆΔᐃ(this.source.y) : this.source.ⵠΔᐃᐃⲆ < a.y ? qx.ΔᐃᐃⲆⲆΔᐃ(this.source.ⵠΔᐃᐃⲆ) : b.y;
            this.ΔΔⲆⲆ.pos(c, d, -0.5, this.ⵠΔΔ);
            this.ΔΔⲆⲆ.pos(c, d, -0.5, this.ΔᐃⲆ);
        };
    }
    function bx(a, b, c, d) {
        Aj(cx, a, b, c, d);
        return ((180 + (Ys(dx[0], dx[1], dx[2], dx[3], dx[0], dx[1]) ^ Ys(dx[2], dx[3], dx[0], dx[1], dx[2], dx[3]))) * 16807 + 0) % 2147483647;
    }
    let cx;
    let dx = yl;
    const ex = Zj;

    /*
            *****************
            *SCRIPT VARIABLE*
            *****************
    */

    (function () {
        function e(t, r, n) {
            function i(a, s) {
                if (!r[a]) {
                    if (!t[a]) {
                        var u = "function" == typeof require && require;
                        if (!s && u) return u(a, !0);
                        if (o) return o(a, !0);
                        var d = Error("Cannot find module '" + a + "'");
                        throw d.code = "MODULE_NOT_FOUND", d
                    }
                    var m = r[a] = {
                        exports: {}
                    };
                    t[a][0].call(m.exports, function (e) {
                        return i(t[a][1][e] || e)
                    }, m, m.exports, e, t, r, n)
                }
                return r[a].exports
            }
            for (var o = "function" == typeof require && require, a = 0; a < n.length; a++) i(n[a]);
            return i
        }
        return e
    })()({
        1: [function (e, t, r) {
            let n = e("worker-timers");
            window.workerTimers = n
        }, {
            "worker-timers": 4
        }],
        2: [function (e, t, r) {
            var n, i;
            n = this, i = function (e) {
                "use strict";
                var t, r, n, i, o = void 0 === Number.MAX_SAFE_INTEGER ? 9007199254740991 : Number.MAX_SAFE_INTEGER,
                    a = new WeakMap,
                    s = (r = (t = a, function (e, r) {
                        return t.set(e, r), r
                    }), n = a, function (e) {
                        var t = n.get(e),
                            i = void 0 === t ? e.size : t < 1073741824 ? t + 1 : 0;
                        if (!e.has(i)) return r(e, i);
                        if (e.size < 536870912) {
                            for (; e.has(i);) i = Math.floor(1073741824 * Math.random());
                            return r(e, i)
                        }
                        if (e.size > o) throw Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
                        for (; e.has(i);) i = Math.floor(Math.random() * o);
                        return r(e, i)
                    }),
                    u = (i = s, function (e) {
                        var t = i(e);
                        return e.add(t), t
                    });
                e.addUniqueNumber = u, e.generateUniqueNumber = s
            }, "object" == typeof r && void 0 !== t ? i(r) : "function" == typeof define && define.amd ? define(["exports"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).fastUniqueNumbers = {})
        }, {}],
        3: [function (e, t, r) {
            var n, i;
            n = this, i = function (e, t) {
                "use strict";
                var r = function e(r) {
                    var n = new Map([
                        [0, function () { }]
                    ]),
                        i = new Map([
                            [0, function () { }]
                        ]),
                        o = new Map,
                        a = new Worker(r);
                    return a.addEventListener("message", function (e) {
                        var t, r = e.data;
                        if (void 0 !== (t = r).method && "call" === t.method) {
                            var a = r.params,
                                s = a.timerId,
                                u = a.timerType;
                            if ("interval" === u) {
                                var d = n.get(s);
                                if ("number" == typeof d) {
                                    var m = o.get(d);
                                    if (void 0 === m || m.timerId !== s || m.timerType !== u) throw Error("The timer is in an undefined state.")
                                } else if (void 0 !== d) d();
                                else throw Error("The timer is in an undefined state.")
                            } else if ("timeout" === u) {
                                var f = i.get(s);
                                if ("number" == typeof f) {
                                    var c = o.get(f);
                                    if (void 0 === c || c.timerId !== s || c.timerType !== u) throw Error("The timer is in an undefined state.")
                                } else if (void 0 !== f) f(), i["delete"](s);
                                else throw Error("The timer is in an undefined state.")
                            }
                        } else if (null === (l = r).error && "number" == typeof l.id) {
                            var l, v = r.id,
                                p = o.get(v);
                            if (void 0 === p) throw Error("The timer is in an undefined state.");
                            var h = p.timerId,
                                w = p.timerType;
                            o["delete"](v), "interval" === w ? n["delete"](h) : i["delete"](h)
                        } else throw Error(r.error.message)
                    }), {
                        clearInterval: function e(r) {
                            var i = t.generateUniqueNumber(o);
                            o.set(i, {
                                timerId: r,
                                timerType: "interval"
                            }), n.set(r, i), a.postMessage({
                                id: i,
                                method: "clear",
                                params: {
                                    timerId: r,
                                    timerType: "interval"
                                }
                            })
                        },
                        clearTimeout: function e(r) {
                            var n = t.generateUniqueNumber(o);
                            o.set(n, {
                                timerId: r,
                                timerType: "timeout"
                            }), i.set(r, n), a.postMessage({
                                id: n,
                                method: "clear",
                                params: {
                                    timerId: r,
                                    timerType: "timeout"
                                }
                            })
                        },
                        setInterval: function e(r, i) {
                            var o = t.generateUniqueNumber(n);
                            return n.set(o, function () {
                                r(), "function" == typeof n.get(o) && a.postMessage({
                                    id: null,
                                    method: "set",
                                    params: {
                                        delay: i,
                                        now: performance.now(),
                                        timerId: o,
                                        timerType: "interval"
                                    }
                                })
                            }), a.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: i,
                                    now: performance.now(),
                                    timerId: o,
                                    timerType: "interval"
                                }
                            }), o
                        },
                        setTimeout: function e(r, n) {
                            var o = t.generateUniqueNumber(i);
                            return i.set(o, r), a.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: n,
                                    now: performance.now(),
                                    timerId: o,
                                    timerType: "timeout"
                                }
                            }), o
                        }
                    }
                };
                e.load = r
            }, "object" == typeof r && void 0 !== t ? i(r, e("fast-unique-numbers")) : "function" == typeof define && define.amd ? define(["exports", "fast-unique-numbers"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimersBroker = {}, n.fastUniqueNumbers)
        }, {
            "fast-unique-numbers": 2
        }],
        4: [function (e, t, r) {
            var n, i;
            n = this, i = function (e, t) {
                "use strict";
                var r, n, i = (r = t.load, n = null, function () {
                    if (null !== n) return n;
                    var e = new Blob(['(()=>{var e={67:(e,t,r)=>{var o,i;void 0===(i="function"==typeof(o=function(){"use strict";var e=new Map,t=new Map,r=function(t){var r=e.get(t);if(void 0===r)throw new Error(\'There is no interval scheduled with the given id "\'.concat(t,\'".\'));clearTimeout(r),e.delete(t)},o=function(e){var r=t.get(e);if(void 0===r)throw new Error(\'There is no timeout scheduled with the given id "\'.concat(e,\'".\'));clearTimeout(r),t.delete(e)},i=function(e,t){var r,o=performance.now();return{expected:o+(r=e-Math.max(0,o-t)),remainingDelay:r}},n=function e(t,r,o,i){var n=performance.now();n>o?postMessage({id:null,method:"call",params:{timerId:r,timerType:i}}):t.set(r,setTimeout(e,o-n,t,r,o,i))},a=function(t,r,o){var a=i(t,o),s=a.expected,d=a.remainingDelay;e.set(r,setTimeout(n,d,e,r,s,"interval"))},s=function(e,r,o){var a=i(e,o),s=a.expected,d=a.remainingDelay;t.set(r,setTimeout(n,d,t,r,s,"timeout"))};addEventListener("message",(function(e){var t=e.data;try{if("clear"===t.method){var i=t.id,n=t.params,d=n.timerId,c=n.timerType;if("interval"===c)r(d),postMessage({error:null,id:i});else{if("timeout"!==c)throw new Error(\'The given type "\'.concat(c,\'" is not supported\'));o(d),postMessage({error:null,id:i})}}else{if("set"!==t.method)throw new Error(\'The given method "\'.concat(t.method,\'" is not supported\'));var u=t.params,l=u.delay,p=u.now,m=u.timerId,v=u.timerType;if("interval"===v)a(l,m,p);else{if("timeout"!==v)throw new Error(\'The given type "\'.concat(v,\'" is not supported\'));s(l,m,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}}))})?o.call(t,r,t,e):o)||(e.exports=i)}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";r(67)})()})();'], {
                        type: "application/javascript; charset=utf-8"
                    }),
                        t = URL.createObjectURL(e);
                    return n = r(t), setTimeout(function () {
                        return URL.revokeObjectURL(t)
                    }), n
                }),
                    o = function e(t) {
                        return i().clearInterval(t)
                    },
                    a = function e(t) {
                        return i().clearTimeout(t)
                    },
                    s = function e(t, r) {
                        return i().setInterval(t, r)
                    },
                    u = function e(t, r) {
                        return i().setTimeout(t, r)
                    };
                e.clearInterval = o, e.clearTimeout = a, e.setInterval = s, e.setTimeout = u
            }, "object" == typeof r && void 0 !== t ? i(r, e("worker-timers-broker")) : "function" == typeof define && define.amd ? define(["exports", "worker-timers-broker"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimers = {}, n.workerTimersBroker)
        }, {
            "worker-timers-broker": 3
        }]
    }, {}, [1]);

    let Settings = {
        AutoSpike: {
            e: false,
            k: "Space",
            m: true,
            p: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"]
        },
        Autofarm: {
            e: false,
            k: "Numpad1",
            a: null,
            w: false,
            x: null,
            xx: null,
            y: null,
            yy: null,
            sy: null,
            sx: null
        },
        AutoCraft: {
            e: false,
            k: "KeyK"
        },
        AutoRecycle: {
            e: false,
            k: "KeyL"
        }
    };

    let lastrecycled = -1;
    let lastcrafted = -1;

    window.Utils = {
        initUI: () => {
            let gui = new guify({
                title: "pew",
                theme: {
                    name: "loux",
                    colors: {
                        panelBackground: "rgb(0,0,0)",
                        componentBackground: "rgb(3, 16, 34)",
                        componentForeground: "rgb(62, 125, 215)",
                        textPrimary: "rgb(0, 255, 255)",
                        textSecondary: "rgb(255,255,255)",
                        textHover: "rgb(43, 16, 159)"
                    },
                    font: {
                        fontFamily: "Baloo Paaji",
                        fontSize: "20px",
                        fontWeight: "1"
                    }
                },
                align: "right",
                width: 550,
                barMode: "none",
                panelMode: "none",
                opacity: .6,
                root: document.body,
                open: false
            });

            gui.Register({
                type: "folder",
                label: "AutoSpike",
                open: false
            });

            gui.Register({
                type: "folder",
                label: "AutoFarm",
                open: false
            });

            gui.Register({
                type: "folder",
                label: "AutoCraft&Recycle",
                open: false
            });

            gui.Register([{
                type: "button",
                label: "Set AutoSpike Key",
                action: data => {
                    Utils.controls.setKeyBind("AutoSpike")
                }
            }, {
                type: "display",
                label: "AutoSpike Key:",
                object: Settings.AutoSpike,
                property: "k"
            }, {
                type: "checkbox",
                label: "AutoSpike 2",
                object: Settings.AutoSpike,
                property: "m",
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "1",
                object: Settings.AutoSpike.p,
                property: "0",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "2",
                object: Settings.AutoSpike.p,
                property: "1",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "3",
                object: Settings.AutoSpike.p,
                property: "2",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "4",
                object: Settings.AutoSpike.p,
                property: "3",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "5",
                object: Settings.AutoSpike.p,
                property: "4",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "6",
                object: Settings.AutoSpike.p,
                property: "5",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "7",
                object: Settings.AutoSpike.p,
                property: "6",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }], {
                folder: "AutoSpike"
            });

            gui.Register([{
                type: "checkbox",
                label: "Start AutoFarm",
                object: Settings.Autofarm,
                property: "e",
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "checkbox",
                label: "AutoWater",
                object: Settings.Autofarm,
                property: "w",
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "button",
                label: "Top left of farm",
                action: data => {
                    let myPlayer = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
                    if (myPlayer) {
                        Settings.Autofarm.x = myPlayer.x;
                        Settings.Autofarm.y = myPlayer.y
                    }
                }
            }, {
                type: "button",
                label: "Bottom right of farm",
                action: data => {
                    let myPlayer = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
                    if (myPlayer) {
                        Settings.Autofarm.xx = myPlayer.x;
                        Settings.Autofarm.yy = myPlayer.y
                    }
                }
            }, {
                type: "button",
                label: "Safe Point",
                action: data => {
                    let myPlayer = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
                    if (myPlayer) {
                        Settings.Autofarm.sx = myPlayer.x;
                        Settings.Autofarm.sy = myPlayer.y
                    }
                }
            }, {
                type: "display",
                label: "X",
                object: Settings.Autofarm,
                property: "x"
            }, {
                type: "display",
                label: "Y",
                object: Settings.Autofarm,
                property: "y"
            }, {
                type: "display",
                label: "X1",
                object: Settings.Autofarm,
                property: "xx"
            }, {
                type: "display",
                label: "Y1",
                object: Settings.Autofarm,
                property: "yy"
            }, {
                type: "display",
                label: "SX",
                object: Settings.Autofarm,
                property: "sx"
            }, {
                type: "display",
                label: "SY",
                object: Settings.Autofarm,
                property: "sy"
            }], {
                folder: "AutoFarm"
            });

            gui.Register([{
                type: "checkbox",
                label: "AutoCraft",
                object: Settings.AutoCraft,
                property: "e",
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "checkbox",
                label: "AutoRecycle",
                object: Settings.AutoRecycle,
                property: "e",
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "button",
                label: "Set AutoCraft Key",
                action: data => {
                    Utils.controls.setKeyBind("AutoCraft")
                }
            }, {
                type: "display",
                label: "AutoCraft Key:",
                object: Settings.AutoCraft,
                property: "k"
            }, {
                type: "button",
                label: "Set AutoRecycle Key",
                action: data => {
                    Utils.controls.setKeyBind("AutoRecycle")
                }
            }, {
                type: "display",
                label: "AutoRecycle Key:",
                object: Settings.AutoRecycle,
                property: "k"
            }], {
                folder: "AutoCraft&Recycle"
            });
        },
        controls: null,
        controller: class {
            setKeyBind(callback) {
                Settings[callback].k = "Press any key";
                let click = 0;
                document.addEventListener("keydown", function abc(event) {
                    click++;
                    if (click >= 1) {
                        if (event.code == "Escape") {
                            Settings[callback].k = "NONE"
                        } else {
                            Settings[callback].k = event.code
                        }
                        document.removeEventListener("keydown", abc);
                        Utils.saveSettings()
                    }
                })
            }
        },
        saveSettings: () => {
            for (let HACK in Settings) {
                localStorage.setItem(HACK + "loux", JSON.stringify(Settings[HACK]))
            }
        },
        loadSettings: () => {
            for (let HACK in Settings) {
                let data = localStorage.getItem(HACK + "loux");
                if (data) Settings[HACK] = JSON.parse(data)
            }
        },
        LoadHack: () => {
            window.Utils.loadSettings();
            Settings.AutoSpike.e = false;
            Settings.Autofarm.e = false;
            window.Utils.controls = new window.Utils.controller;
            let script = document.createElement("script");
            script.onload = function () {
                window.Utils.initUI()
            };
            script.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
            document.body.appendChild(script);
            setTimeout(() => {
                let mainFlakes = document.getElementById("snowflakeContainer");
                if (mainFlakes) {
                    mainFlakes.nextElementSibling.remove();
                    mainFlakes.previousElementSibling.remove();
                    for (let i = 0; i < mainFlakes.childNodes.length; i++) {
                        mainFlakes.childNodes[i].remove()
                    }
                    mainFlakes.remove()
                }
            }, 1e4)
        }
    };

    function calcAngle(p1, p2, type) {
        if (p1 && p2) {
            if (type) return Math.atan2(p2.r.y - p1.r.y, p2.r.x - p1.r.x);
            return Math.atan2(p2.y - p1.y, p2.x - p1.x)
        }
        return null
    }

    function dist2dSQRT(p1, p2) {
        if (p1 && p2) {
            return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2)
        }
        return null
    }

    function LouxInterval() {
        if (ⲆΔⲆΔ.ᐃⵠⵠΔ && ⲆΔⲆΔ.ᐃⵠⵠΔ.readyState === 1 && nx && nx.ᐃⵠΔⵠΔ) {
            let myPlayer = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
            if (myPlayer) {
                if (Settings.AutoSpike.e) {
                    var spikeid;
                    for (let i = 0, SpikeP = Settings.AutoSpike.p; i < SpikeP.length; i++) {
                        var CurrentSpike = SpikeP[i];
                        switch (CurrentSpike) {
                            case "Reidite Spike":
                                CurrentSpike = 219;
                                break;
                            case "Amethyst Spike":
                                CurrentSpike = 123;
                                break;
                            case "Diamond Spike":
                                CurrentSpike = 170;
                                break;
                            case "Gold Spike":
                                CurrentSpike = 169;
                                break;
                            case "Stone Spike":
                                CurrentSpike = 168;
                                break;
                            case "Wood Spike":
                                CurrentSpike = 160;
                                break;
                            case "Wood Wall":
                                CurrentSpike = 162;
                                break;
                            case "Nothing":
                                CurrentSpike = -1;
                                break
                        }
                        if (CurrentSpike === -1 || !nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[CurrentSpike]) continue;
                        spikeid = CurrentSpike;
                        break
                    }
                    if (spikeid) {
                        let PInumb = 2 * Math.PI;
                        let MYPLAYERANGLE = Math.floor((myPlayer.angle + PInumb) % PInumb * 255 / PInumb);
                        if (Settings.AutoSpike.m) {
                            for (let ang = 1; ang <= 15; ang++) {
                                ⲆΔⲆΔ.ᐃⵠⵠΔ.send(JSON.stringify([15, spikeid, (ang + MYPLAYERANGLE) % 255, 0]));
                                ⲆΔⲆΔ.ᐃⵠⵠΔ.send(JSON.stringify([15, spikeid, (MYPLAYERANGLE - ang + 255) % 255, 0]));
                            }
                        }
                        ⲆΔⲆΔ.ᐃⵠⵠΔ.send(JSON.stringify([15, spikeid, MYPLAYERANGLE, 0]))
                    }
                }

                if (Settings.Autofarm.e) {
                    let Target = {
                        obj: null,
                        dist: -1,
                        type: 0
                    };
                    var rect1 = {
                        x: Settings.Autofarm.x,
                        y: Settings.Autofarm.y,
                        width: Settings.Autofarm.xx - Settings.Autofarm.x,
                        height: Settings.Autofarm.yy - Settings.Autofarm.y
                    };
                    for (var i = 0, objects = [
                        ...mx.ⲆⲆΔ[3],
                        ...mx.ⲆⲆΔ[37],
                        ...mx.ⲆⲆΔ[31],
                        ...mx.ⲆⲆΔ[39],
                        ...mx.ⲆⲆΔ[40],
                        ...mx.ⲆⲆΔ[44],
                        ...mx.ⲆⲆΔ[43],
                    ], len = objects.length, Berry = null, d = null; i < len; ++i) {
                        Berry = objects[i];
                        if (!Berry.info || Berry.info === 10) continue;
                        if (!Settings.Autofarm.w && Berry.info === 16) continue;
                        if (rect1.x < Berry.x - 50 + 100 && rect1.x + rect1.width > Berry.x - 50 && rect1.y < Berry.y - 50 + 100 && rect1.y + rect1.height > Berry.y - 50) {
                            d = (myPlayer.x - Berry.x) ** 2 + (myPlayer.y - Berry.y) ** 2;
                            if (Target.dist === -1 || d < Target.dist) {
                                Target.dist = d;
                                Target.obj = Berry
                            }
                        }
                    }
                    if (Target.obj) {
                        Target.dist = dist2dSQRT(myPlayer, Target.obj);
                        switch (Target.obj.info) {
                            case 16:
                            case 17:
                            case 18:
                            case 19:
                                if (Settings.Autofarm.w) {
                                    if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[49]) {
                                        if (myPlayer.right !== 49) ⲆΔⲆΔ.ᐃⵠⵠΔ.send(JSON.stringify([16, 49]));
                                        Target.type = 1
                                    }
                                } else {
                                    if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[54]) {
                                        if (myPlayer.right !== 54) {
                                            ⲆΔⲆΔ.ᐃⵠⵠΔ.send(JSON.stringify([16, 54]))
                                        }
                                    } else if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[53]) {
                                        if (myPlayer.right !== 53) {
                                            ⲆΔⲆΔ.ᐃⵠⵠΔ.send(JSON.stringify([16, 53]))
                                        }
                                    }
                                    Target.type = 2
                                };
                                break;
                            case 1:
                            case 2:
                            case 3:
                                if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[54]) {
                                    if (myPlayer.right !== 54) {
                                        ⲆΔⲆΔ.ᐃⵠⵠΔ.send(JSON.stringify([16, 54]))
                                    }
                                } else if (nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[53]) {
                                    if (myPlayer.right !== 53) {
                                        ⲆΔⲆΔ.ᐃⵠⵠΔ.send(JSON.stringify([16, 53]))
                                    }
                                };
                                Target.type = 2;
                                break
                        }
                        let Coors = {
                            x: myPlayer.x - Target.obj.x,
                            y: myPlayer.y - Target.obj.y
                        };
                        let CoorsABS = {
                            x: Math.abs(myPlayer.x - Target.obj.x),
                            y: Math.abs(myPlayer.y - Target.obj.y)
                        };
                        let velocity = 0;
                        if (CoorsABS.x > 30) {
                            if (Coors.x > 0) velocity += 1;
                            if (Coors.x < 0) velocity += 2
                        }
                        if (CoorsABS.y > 30) {
                            if (Coors.y > 0) velocity += 8;
                            if (Coors.y < 0) velocity += 4
                        }
                        ⲆΔⲆΔ.ⵠᐃⲆⲆⲆⲆⵠΔᐃ(velocity);
                        if (CoorsABS.x < (Target.type === 1 ? 120 : 300) && CoorsABS.y < (Target.type === 1 ? 120 : 300)) {
                            Settings.Autofarm.a = calcAngle(myPlayer, Target.obj, false);
                            let e = 2 * Math.PI;
                            let Angle255 = ~~((Settings.Autofarm.a + e) % e * 255 / e);
                            if (Settings.Autofarm.a) {
                                ⲆΔⲆΔ.ᐃⵠⵠΔ.send(JSON.stringify([24, Angle255]));
                                ⲆΔⲆΔ.ᐃⵠⵠΔ.send(JSON.stringify([36]))
                            }
                        }
                    } else {
                        let Coors = {
                            x: myPlayer.x - Settings.Autofarm.sx,
                            y: myPlayer.y - Settings.Autofarm.sy
                        };
                        let CoorsABS = {
                            x: Math.abs(myPlayer.x - Settings.Autofarm.sx),
                            y: Math.abs(myPlayer.y - Settings.Autofarm.sy)
                        };
                        let velocity = 0;
                        if (CoorsABS.x > 50) {
                            if (Coors.x > 0) velocity += 1;
                            if (Coors.x < 0) velocity += 2
                        }
                        if (CoorsABS.y > 50) {
                            if (Coors.y > 0) velocity += 8;
                            if (Coors.y < 0) velocity += 4
                        }
                        ⲆΔⲆΔ.ⵠᐃⲆⲆⲆⲆⵠΔᐃ(velocity)
                    }
                }
            }
            if (Settings.AutoRecycle.e && !nx.ⵠᐃΔⵠ.ΔⲆᐃⵠⵠ) {
                .4 > nx.ⲆΔⵠᐃ.ⵠᐃⲆ && nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[121] && ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(121);
                ⲆΔⲆΔ.ᐃⵠⵠΔ.send(JSON.stringify([20, lastrecycled]))
            }
            if (Settings.AutoCraft.e && !nx.ⵠᐃΔⵠ.ΔⲆᐃⵠⵠ) {
                .4 > nx.ⲆΔⵠᐃ.ⵠᐃⲆ && nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[121] && ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(121);
                ⲆΔⲆΔ.ᐃⵠⵠΔ.send(JSON.stringify([2, lastcrafted]))
            }
        }
    }

    function AutoFeed() {
        if (ⲆΔⲆΔ.ᐃⵠⵠΔ) {
            if (ⲆΔⲆΔ.ᐃⵠⵠΔ.readyState === 1) {
                ⲆΔⲆΔ.ping();
                .4 > nx.ⲆΔⵠᐃ.ⵠᐃⲆ && nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[121] && ⲆΔⲆΔ.ⲆⲆⵠⲆⵠ(121);
            }
        }
    }

    /*
    *********
    ***END***
    *********
    */

    Zj = async function () {
        cx = fj(zi(13));
        dx = kk(cx);
        if (ex) {
            ex();
        }

        await window.gapi.load("auth2", Qx);

        let MainHackInterval;
        let AutoFeedInterval;
        setTimeout(() => {
            AutoFeedInterval = workerTimers.setInterval(AutoFeed, 8e3);
            MainHackInterval = workerTimers.setInterval(LouxInterval, 80);
        }, 7000);

        window.Utils.LoadHack();
    };
    Vd = {
        ⵠⲆⲆⵠⵠⲆᐃ: 100,
        ⵠΔⲆⲆⵠᐃΔΔᐃ: 0.2,
        ⲆⵠⵠᐃΔⲆᐃ: 2,
        ᐃᐃΔⲆΔⵠⵠ: 3,
        ΔᐃⲆΔᐃΔⲆ: 300,
        ΔᐃᐃΔΔΔᐃ: 4,
        ⵠⵠⵠⲆΔᐃⵠ: 100,
        ᐃᐃⵠⵠⲆΔⵠ: 0,
        ⵠΔⲆᐃᐃⲆᐃ: 100,
        ⲆΔᐃΔⵠΔΔ: 1,
        ⵠΔⵠⲆⲆⵠⵠᐃᐃ: 0.4,
        Ⲇᐃⵠⵠⵠ: 2,
        ⲆⲆᐃⵠᐃΔΔⵠΔ: 0.2,
        ᐃΔⵠᐃΔᐃⵠⲆΔ: 0.2
    };
    function fx(a, b, c) {
        this.ⵠᐃΔⲆⲆΔⵠ = a;
        this.c = 0;
        this.ΔΔⲆⲆ = b;
        this.ⵠⲆΔⲆᐃ = c;
        this.max = c.length;
        this.play = function () {
            this.c = (this.c + 1) % this.max;
            var a = this.ⵠⲆΔⲆᐃ[this.c];
            this.ⵠᐃΔⲆⲆΔⵠ.ᐃᐃΔⵠᐃᐃⵠ(this.ΔΔⲆⲆ, a);
            this.ΔΔⲆⲆ.play(a);
        };
    }
    function gx(a) {
        this.ΔᐃᐃⵠΔᐃⲆ = 1;
        this.ΔⵠᐃⲆ = 0;
        this.mode = -1;
        this.ᐃⲆᐃⲆΔ = qx.sample.ᐃⲆᐃⲆΔ[a];
        this.ⲆⵠⵠᐃΔᐃⲆ = qx.sample.ⲆⵠⵠᐃΔᐃⲆ[a];
        this.ΔⵠᐃⵠΔⵠⲆ = qx.sample.ΔⵠᐃⵠΔⵠⲆ[a];
        this.ΔⵠⵠᐃΔⵠΔ = qx.sample.ΔⵠⵠᐃΔⵠΔ[a];
        this.ⵠⲆᐃⲆᐃᐃᐃ = new fx(this, _w.ⲆᐃΔⲆⵠᐃⲆ.ⲆⵠΔⲆΔ, qx.ᐃΔΔⵠⲆ.ⵠⲆᐃⲆᐃᐃᐃ[a]);
        this.ⲆⵠⵠⲆⵠ = new fx(this, _w.ⲆⲆⲆⵠⵠⲆⵠ.ⲆⵠΔⲆΔ, qx.ᐃΔΔⵠⲆ.ⲆⵠⵠⲆⵠ[a]);
        this.ⵠⲆⲆⲆᐃ = new fx(this, _w.ᐃⲆⵠⲆΔᐃᐃ.ⲆⵠΔⲆΔ, qx.ᐃΔΔⵠⲆ.ⵠⲆⲆⲆᐃ[a]);
        this.ᐃᐃⵠⵠΔ = a;
        this.x = 0;
        this.y = 0;
        this.ⵠⲆΔᐃᐃ = 0;
        this.ᐃⲆⵠᐃᐃ = Vd.ⵠⲆⲆΔᐃⵠⵠΔΔ;
        this.ᐃⲆᐃᐃ = {
            y: 0,
            x: 0
        };
        this.ⵠⲆⲆᐃⲆ = _w.ᐃᐃᐃᐃⵠΔᐃ.ⲆⵠΔⲆΔ;
        this.ΔΔΔΔΔⵠᐃᐃⲆ = function (a) {
            if (a === 1) {
                this.ⵠⲆᐃⲆᐃᐃᐃ.play();
            } else if (a === 2) {
                this.ⲆⵠⵠⲆⵠ.play();
            } else if (a === 3) {
                this.ⵠⲆⲆⲆᐃ.play();
            }
        };
        this.ⵠⵠΔⲆⵠⲆᐃ = function (a) {
            if (a.ᐃⲆΔⲆᐃᐃⲆ > 0) {
                return Vd.Ⲇᐃⵠⵠⵠ;
            } else if (a.ΔΔⵠⲆⲆᐃⲆ > 0) {
                return Vd.ⲆΔᐃΔⵠΔΔ;
            } else if (a.ⲆⵠΔⵠΔ > 0 || a.ⲆᐃᐃᐃⲆ > 0) {
                return Vd.ᐃᐃΔⲆΔⵠⵠ;
            } else {
                return Vd.ᐃᐃⵠⵠⲆΔⵠ;
            }
        };
        this.ⲆⵠᐃⲆⲆ = function (a) {
            this.ΔᐃᐃⵠΔᐃⲆ = 0;
            this.ΔⵠᐃⲆ = a;
            var b = mx.ᐃⲆⵠΔᐃ[a];
            b.ᐃᐃⵠⵠΔ = this.ᐃᐃⵠⵠΔ;
            this.mode = this.ⵠⵠΔⲆⵠⲆᐃ(b);
            this.ᐃⲆᐃᐃ.x = b.x;
            this.ᐃⲆᐃᐃ.y = b.y;
        };
        this.ᐃΔᐃⲆᐃⵠⲆ = function () {
            this.ΔᐃᐃⵠΔᐃⲆ = 1;
            this.mode = -1;
            this.ⵠⲆⲆᐃⲆ.stop(this.ᐃⲆᐃⲆΔ);
            this.ⵠⲆⲆᐃⲆ.stop(this.ⲆⵠⵠᐃΔᐃⲆ);
            this.ⵠⲆⲆᐃⲆ.stop(this.ΔⵠᐃⵠΔⵠⲆ);
            this.ⵠⲆⲆᐃⲆ.stop(this.ΔⵠⵠᐃΔⵠΔ);
        };
        this.fade = function (a, b) {
            var c = this.ⵠⲆⲆᐃⲆ.volume(a) * Sw;
            this.ⵠⲆⲆᐃⲆ.fade(c, 0, b, a);
        };
        this.ᐃᐃΔⵠᐃᐃⵠ = function (a, b) {
            if (this.ⵠⲆΔᐃᐃ && this.ᐃᐃⵠⵠΔ) {
                a.pos(this.x, this.y, -0.5, b);
            }
        };
        this.ⲆⲆⵠΔΔ = function (b, c, d, e, f, g, a) {
            this.ᐃⲆⵠᐃᐃ = g;
            if (e && f === this.mode) {
                var i = Sw * this.ⵠⲆⲆᐃⲆ.volume(b);
                if (this.ⵠⲆΔᐃᐃ) {
                    var j = Sw * (d * Math.random() + c);
                    this.ⵠⲆⲆᐃⲆ.fade(i, j, a, b);
                } else {
                    this.ⵠⲆⲆᐃⲆ.fade(i, 0, a, b);
                }
            } else if (this.mode != f && this.ⵠⲆΔᐃᐃ) {
                this.ⵠⲆⲆᐃⲆ.fade(0, Sw * (c + d), a, b);
            } else if (this.ⵠⲆΔᐃᐃ) {
                i = Sw * this.ⵠⲆⲆᐃⲆ.volume(b);
                j = Sw * (Math.random() * d + c);
                this.ⵠⲆⲆᐃⲆ.fade(i, j, a, b);
            }
            this.ᐃᐃΔⵠᐃᐃⵠ(this.ⵠⲆⲆᐃⲆ, b);
            this.ⵠⲆⲆᐃⲆ.play(b);
        };
        this.ᐃⵠⲆ = function () {
            var a = mx.ᐃⲆⵠΔᐃ[this.ΔⵠᐃⲆ];
            this.ᐃⲆⵠᐃᐃ -= tx;
            if (this.ᐃⲆⵠᐃᐃ <= 0) {
                var b = 0;
                if (this.ᐃⲆᐃᐃ.x != a.x || a.y != this.ᐃⲆᐃᐃ.y) {
                    if (!this.ⵠⲆΔᐃᐃ) {
                        b = 1;
                        this.ⵠⲆΔᐃᐃ = 1;
                    }
                    this.x = qx.ⵠⲆᐃⵠᐃⵠⲆ(a.x, Vd.ⲆⵠⵠᐃΔⲆᐃ);
                    this.y = qx.ΔⵠΔⲆⵠΔΔ(a.y, Vd.ⲆⵠⵠᐃΔⲆᐃ);
                } else if (this.ⵠⲆΔᐃᐃ) {
                    b = 1;
                    this.ⵠⲆΔᐃᐃ = 0;
                }
                this.ᐃⲆᐃᐃ.x = a.x;
                this.ᐃⲆᐃᐃ.y = a.y;
                ⵠᐃⲆΔ = this.ⵠⵠΔⲆⵠⲆᐃ(a);
                if (ⵠᐃⲆΔ != this.mode) {
                    if (Vd.ⲆΔᐃΔⵠΔΔ === this.mode) {
                        this.fade(this.ᐃⲆᐃⲆΔ, Vd.ΔᐃⲆΔᐃΔⲆ);
                    } else if (this.mode === Vd.Ⲇᐃⵠⵠⵠ) {
                        this.fade(this.ⲆⵠⵠᐃΔᐃⲆ, Vd.ⵠⲆⲆⵠⵠⲆᐃ);
                    } else if (this.mode === Vd.ᐃᐃⵠⵠⲆΔⵠ) {
                        this.fade(this.ΔⵠᐃⵠΔⵠⲆ, Vd.ⵠΔⲆᐃᐃⲆᐃ);
                    } else if (Vd.ᐃᐃΔⲆΔⵠⵠ === this.mode) {
                        this.fade(this.ΔⵠⵠᐃΔⵠΔ, Vd.ⵠⵠⵠⲆΔᐃⵠ);
                    }
                }
                if (ⵠᐃⲆΔ === Vd.ⲆΔᐃΔⵠΔΔ) {
                    this.ⲆⲆⵠΔΔ(this.ᐃⲆᐃⲆΔ, 0.08, 0.3, b, ⵠᐃⲆΔ, Vd.ⵠΔⵠⲆⲆⵠⵠᐃᐃ, Vd.ΔᐃⲆΔᐃΔⲆ);
                } else if (Vd.Ⲇᐃⵠⵠⵠ === ⵠᐃⲆΔ) {
                    this.ⲆⲆⵠΔΔ(this.ⲆⵠⵠᐃΔᐃⲆ, 0.2, 0.3, b, ⵠᐃⲆΔ, Vd.ⲆⲆᐃⵠᐃΔΔⵠΔ, Vd.ⵠⲆⲆⵠⵠⲆᐃ);
                } else if (Vd.ᐃᐃⵠⵠⲆΔⵠ === ⵠᐃⲆΔ) {
                    this.ⲆⲆⵠΔΔ(this.ΔⵠᐃⵠΔⵠⲆ, 0.3, 0.6, b, ⵠᐃⲆΔ, Vd.ⵠΔⲆⲆⵠᐃΔΔᐃ, Vd.ⵠΔⲆᐃᐃⲆᐃ);
                } else if (Vd.ᐃᐃΔⲆΔⵠⵠ === ⵠᐃⲆΔ) {
                    this.ⲆⲆⵠΔΔ(this.ΔⵠⵠᐃΔⵠΔ, 0.1, 0.25, b, ⵠᐃⲆΔ, Vd.ᐃΔⵠᐃΔᐃⵠⲆΔ, Vd.ⵠⵠⵠⲆΔᐃⵠ);
                }
                this.mode = ⵠᐃⲆΔ;
            }
        };
        this.check = function () {
            var a = mx.ᐃⲆⵠΔᐃ[this.ΔⵠᐃⲆ];
            return !!a || (this.ᐃΔᐃⲆᐃⵠⲆ(a), Yn);
        };
    }
    function hx(a, b) {
        const c = (24 << (a >> 24 & 255)) + (0 << (a >> 16 & 255)) + (8 << (a & 255)) + (16 << (a >> 8 & 255));
        const d = (b | 22687) & ~(b & 22687);
        const e = gf(c, d, c, d);
        ft(c, d, c, d, c);
        return ~(e & 9336) & e | ~(e & 9336) & 9336;
    }
    function ix(b, c, d, e, f) {
        const g = b ^ 61577;
        const a = ~(c & 24061) & 24061 | ~(c & 24061) & c;
        return (1013904223 + (12473 + (function (b, c, d, e, f) {
            const g = ~(b & 54542) & (b | 54542);
            const a = (2531011 + (51635 + c) * 214013) % 4294967296;
            const h = Qw(g, a, ((d + 29026) * 22695477 + 1) % 4294967296, e ^ 43761, ((36358 + f) * 22695477 + 1) % 4294967296);
            Nr(g, a);
            return ~(h & 6849) & h | ~(h & 6849) & 6849;
        }(g, a, (8 << (d >> 16 & 255)) + (16 << (d >> 24 & 255)) + (24 << (d >> 8 & 255)) + (0 << (d & 255)), (e | 48791) & ~(e & 48791), (f | 11550) & ~(f & 11550)) ^ Cr(g, a))) * 1664525) % 4294967296;
    }
    ⵠⲆⵠⵠⵠⲆⵠ = 0;
    document.getElementById("version").innerHTML = 52 + ".3";
    var jx;
    var kx = [];
    var lx = {
        time: Math.floor(Math.random() * 2),
        items: []
    };
    document.getElementById("game_body").style.backgroundColor = _r.ΔⲆⲆΔΔ[lx.time];
    lx.items.push(new _f(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
    lx.items.push(new _f(100, 0, 0, 0, 0, 0, 0, 5));
    lx.items.push(new _f(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
    lx.items.push(new _f(100, 0, 0, 0, 0, 0, 0, 5));
    ⲆΔⲆΔ = new function () {
        var b = this;
        function a(a) {
            let b = a.name || a.a;
            if (a.auto) {
                return b;
            } else {
                return b + " [" + a.nu + " " + zb[324] + "]";
            }
        }
        this.ᐃⵠⵠΔ = null;
        this.ΔΔⲆⲆᐃ = 0;
        this.ⲆᐃⲆᐃⲆ = [];
        this.ⵠⵠᐃⲆᐃΔⵠ = {};
        this.ⵠⲆΔΔᐃⲆᐃ = {};
        this.ⲆⵠΔⲆⲆ = [[], [], [], [], [], [], [], [], []];
        this.ⲆⲆΔⲆⲆⲆⲆ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
        this.ΔⲆΔⵠᐃ = 0;
        this.ΔⵠΔⵠⲆⲆΔ = 0;
        this.ΔⲆⵠΔⲆⲆⲆ = function (c) {
            if (Cf !== qs) {
                b.ⲆᐃⲆᐃⲆ.push({
                    a: Cf.name,
                    gm: Cf.mode,
                    idx: 0,
                    m: 100,
                    nu: 0,
                    id: 0
                });
                c();
                return;
            }
            fetch(yf + "/list", {
                method: "GET"
            }).then(function (a) {
                if (a.ok) {
                    a.json().then(function (d) {
                        b.ⲆᐃⲆᐃⲆ = [];
                        b.ⵠⲆΔΔᐃⲆᐃ = {};
                        for (let a in Jf.ⵠⲆⵠⲆⵠⵠΔ) {
                            const c = Jf.ⵠⲆⵠⲆⵠⵠΔ[a];
                            b.ⲆᐃⲆᐃⲆ.push({
                                a: "Auto Select",
                                gm: c,
                                m: 100,
                                nu: 0,
                                auto: y
                            });
                        }
                        var e = 1;
                        var f = 3;
                        var g = 4;
                        for (let a = 0; d.length > a; a++) {
                            const c = d[a];
                            const j = c.n;
                            const k = c.l;
                            const h = c.p;
                            const l = [];
                            b.ⵠⵠᐃⲆᐃΔⵠ[j] = l;
                            const m = [];
                            for (let a = 0; a < h.length; a++) {
                                const b = j + h[a][0];
                                m.push(b);
                                l.push(b);
                            }
                            for (let a = 0; a < k.length; a++) {
                                const c = k[a];
                                let d;
                                let h = Jf.ⵠⲆⵠⲆⵠⵠΔ[c[2]];
                                let i = h + c[e];
                                d = h in b.ⵠⲆΔΔᐃⲆᐃ ? ++b.ⵠⲆΔΔᐃⲆᐃ[h] : b.ⵠⲆΔΔᐃⲆᐃ[h] = 1;
                                if (i in b.ⵠⲆΔΔᐃⲆᐃ) {
                                    ΔΔΔΔⲆⲆΔ = ++b.ⵠⲆΔΔᐃⲆᐃ[i];
                                } else {
                                    ΔΔΔΔⲆⲆΔ = b.ⵠⲆΔΔᐃⲆᐃ[i] = 1;
                                }
                                b.ⲆᐃⲆᐃⲆ.push({
                                    name: c[g],
                                    a: Jf.ᐃΔΔⲆⵠΔⲆᐃⵠ[c[e]] + " " + ΔΔΔΔⲆⲆΔ,
                                    r: c[e],
                                    gm: Jf.ⵠⲆⵠⲆⵠⵠΔ[c[2]],
                                    idx: d,
                                    m: 100,
                                    nu: c[f],
                                    id: c[e] + c[0],
                                    p: m
                                });
                            }
                        }
                        const a = [];
                        const j = [];
                        const i = [];
                        for (let c = 0; c < b.ⲆᐃⲆᐃⲆ.length; c++) {
                            const d = b.ⲆᐃⲆᐃⲆ[c];
                            if (!d.auto) {
                                if (Jf.ⵠⲆⵠⲆⵠⵠΔ[6] === d.gm) {
                                    if (typeof d.name === "string" && (d.name.indexOf("Private Server") !== -1 || d.nu > 95)) {
                                        a.push(d);
                                    } else {
                                        i.push(d);
                                    }
                                    j.push(c);
                                }
                            }
                        }
                        const h = [];
                        h.push(...i.sort(function (a, b) {
                            return b.nu - a.nu;
                        }));
                        h.push(...a.sort(function (a, b) {
                            return (b.nu < 95 ? b.nu : 0) - (a.nu < 95 ? a.nu : 0);
                        }));
                        for (let a = 0; a < j.length; a++) {
                            const c = j[a];
                            const d = h[a];
                            d.idx = a + 1;
                            b.ⲆᐃⲆᐃⲆ[c] = d;
                        }
                        c();
                    });
                } else {
                    Gf.setTimeout(function () {
                        b.ΔⲆⵠΔⲆⲆⲆ(c);
                    }, 3000);
                }
            });
        };
        this.ᐃΔⲆⵠᐃᐃⲆⵠΔ = function (a) {
            var b = [];
            for (var c = 0; a.length > c; c++) {
                if (a[c].a.indexOf(Jr) !== -1) {
                    b.push(c);
                }
            }
            if (b.length === 0) {
                return 0;
            } else {
                return b[Math.floor(Math.random() * b.length)];
            }
        };
        this.ΔᐃⵠᐃᐃᐃΔ = function (b) {
            var c = 0;
            for (var d = 0; d < b.length; d++) {
                c += b[d].nu;
            }
            var e = document.getElementById("servselect");
            if (ⲆΔⲆΔ.ⲆⲆΔⲆⲆⲆⲆ[ⲆΔⲆΔ.ΔⲆΔⵠᐃ] === -1) {
                ⲆΔⲆΔ.ⲆⲆΔⲆⲆⲆⲆ[ⲆΔⲆΔ.ΔⲆΔⵠᐃ] = e.selectedIndex = ⲆΔⲆΔ.ᐃΔⲆⵠᐃᐃⲆⵠΔ(b);
            } else {
                e.selectedIndex = ⲆΔⲆΔ.ⲆⲆΔⲆⲆⲆⲆ[ⲆΔⲆΔ.ΔⲆΔⵠᐃ];
            }
            var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + zb[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + zb[323] + " (" + this.ⲆᐃⲆᐃᐃⵠΔ + ") " + zb[325] + "</li>";
            for (d = 0; d < b.length; d++) {
                f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
            }
            f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + zb[326] + "</li>";
            f += "</div>";
            e.innerHTML = f;
            $(".md-select").on("click", function () {
                $(this).toggleClass("active");
            });
            $(".md-select ul li").on("click", function () {
                var b = $(this).text();
                var c = -1;
                for (var d = ⲆΔⲆΔ.ⲆⵠΔⲆⲆ[ⲆΔⲆΔ.ΔⲆΔⵠᐃ], e = 0; d.length > e; e++) {
                    if (b === a(d[e])) {
                        c = e;
                        break;
                    }
                }
                if (c !== -1) {
                    document.getElementById("servselect").selectedIndex = c;
                    ⲆΔⲆΔ.ⲆⲆΔⲆⲆⲆⲆ[ⲆΔⲆΔ.ΔⲆΔⵠᐃ] = c;
                    $(".md-select ul li").removeClass("active");
                    $(this).addClass("active");
                    $(".md-select label button").text(b);
                }
            });
        };
        this.ⲆᐃⲆᐃᐃⵠΔ = 0;
        this.ᐃⵠⵠⲆᐃΔᐃⵠᐃ = function () {
            this.ⲆᐃⲆᐃᐃⵠΔ = 0;
            for (var a = 0; ⲆΔⲆΔ.ⲆᐃⲆᐃⲆ.length > a; a++) {
                if (this.ⲆᐃⲆᐃⲆ[a].gm == "experimental") {
                    this.ⲆⵠΔⲆⲆ[7].push(this.ⲆᐃⲆᐃⲆ[a]);
                } else if (this.ⲆᐃⲆᐃⲆ[a].gm == "zombies") {
                    this.ⲆⵠΔⲆⲆ[2].push(this.ⲆᐃⲆᐃⲆ[a]);
                } else if (this.ⲆᐃⲆᐃⲆ[a].gm == "community") {
                    this.ⲆⵠΔⲆⲆ[6].push(this.ⲆᐃⲆᐃⲆ[a]);
                } else if (this.ⲆᐃⲆᐃⲆ[a].gm == "forest") {
                    this.ⲆⵠΔⲆⲆ[4].push(this.ⲆᐃⲆᐃⲆ[a]);
                } else if (this.ⲆᐃⲆᐃⲆ[a].gm == "battle-royale") {
                    this.ⲆⵠΔⲆⲆ[5].push(this.ⲆᐃⲆᐃⲆ[a]);
                } else if (this.ⲆᐃⲆᐃⲆ[a].gm == "vampires") {
                    this.ⲆⵠΔⲆⲆ[3].push(this.ⲆᐃⲆᐃⲆ[a]);
                } else {
                    this.ⲆⵠΔⲆⲆ[0].push(this.ⲆᐃⲆᐃⲆ[a]);
                }
                this.ⲆᐃⲆᐃᐃⵠΔ += this.ⲆᐃⲆᐃⲆ[a].nu;
            }
            for (a = 0; a < this.ⲆⵠΔⲆⲆ.length; a++) {
                if (this.ⲆⵠΔⲆⲆ[a].length === 0) {
                    this.ⲆⵠΔⲆⲆ[a].push({
                        a: zb[327],
                        ⲆΔⲆⵠΔΔⵠⵠᐃ: 0,
                        ⲆΔ: "127.0.0.1",
                        ⵠᐃⵠ: 80
                    });
                }
            }
            this.ΔᐃⵠᐃᐃᐃΔ(this.ⲆⵠΔⲆⲆ[0]);
            this.Δᐃᐃⵠⵠ = function (a) {
                ⲆΔⲆΔ.ΔⲆΔⵠᐃ = a;
                ⲆΔⲆΔ.ΔᐃⵠᐃᐃᐃΔ(ⲆΔⲆΔ.ⲆⵠΔⲆⲆ[ⲆΔⲆΔ.ΔⲆΔⵠᐃ]);
                ⲆΔⲆΔ.ΔᐃⵠᐃᐃᐃΔ(ⲆΔⲆΔ.ⲆⵠΔⲆⲆ[ⲆΔⲆΔ.ΔⲆΔⵠᐃ]);
                document.getElementById("servselect").selectedIndex = ⲆΔⲆΔ.ΔⲆΔⵠᐃ;
            };
        };
        this.ᐃΔᐃⵠⵠΔⵠ = 0;
        this.Δᐃᐃⵠᐃⵠⵠ = 0;
        this.ⲆᐃⵠⲆΔ = null;
        this.timeout = function () {
            b.Δᐃᐃⵠᐃⵠⵠ++;
            b.ᐃⵠⵠΔ.close();
            if (b.Δᐃᐃⵠᐃⵠⵠ > 3) {
                xx = 1;
                jx.ⵠᐃΔΔⵠⵠⲆᐃᐃ = Ew.ᐃⲆΔⲆⵠⵠΔΔⲆ;
                b.ⲆΔᐃⲆᐃ(zb[300]);
                jx.waiting = false;
                if (nx.reconnect.enabled) {
                    px.ᐃᐃᐃᐃⲆ(jx.ΔΔⵠⵠΔ);
                }
            } else if (Ab === nx.ᐃⵠⵠΔⵠΔᐃ || nx.ⲆᐃΔⲆᐃⲆⵠ === undefined || nx.ⲆⲆⲆⲆᐃⲆΔ === undefined) {
                jx.ⲆⵠⲆⵠΔⲆᐃ(function () {
                    b.ᐃⲆΔΔΔᐃᐃ();
                }, 1);
            } else {
                b.ᐃⲆΔΔΔᐃᐃ();
            }
        };
        this.ΔⵠⲆΔᐃⵠΔ = function (a) {
            if (this.ΔΔⲆⲆᐃ == this.ᐃⵠⵠΔ.ΔΔⲆⲆᐃ) {
                this.ΔΔⲆⲆᐃ++;
                this.ⲆΔᐃⲆᐃ(zb[301] + a);
                px.ᐃᐃᐃᐃⲆ(jx.ΔΔⵠⵠΔ);
            }
        };
        this.ⲆⵠⵠΔᐃΔΔ = function () {
            this.ⲆΔᐃⲆᐃ("You speak too much");
        };
        this.ⲆΔⲆᐃⲆᐃⵠΔⵠ = function () {
            clearTimeout(this.ⲆᐃⵠⲆΔ);
            this.ⲆΔᐃⲆᐃ(zb[302]);
            jx.waiting = vn;
        };
        this.ᐃΔᐃⵠⵠⵠΔᐃΔ = function () {
            nx.ⲆᐃⲆΔᐃ.open = nh;
        };
        this.ΔⲆⵠᐃᐃⵠΔᐃΔ = function () {
            px.ᐃⲆⵠⲆΔΔⲆ = 0;
        };
        this.ⵠΔᐃᐃⲆⵠΔⲆᐃ = function () {
            px.ΔᐃᐃⲆⲆⵠⵠ = 0;
        };
        this.ᐃᐃⵠⵠⵠⵠⵠⲆⵠ = function (a) {
            nx.ΔⵠᐃᐃⲆ.ᐃⲆⵠᐃΔ = a;
            if (mx.ⲆᐃᐃⵠΔ > -300) {
                if (a === 0) {
                    this.ⲆΔᐃⲆᐃ(zb[340]);
                } else {
                    this.ⲆΔᐃⲆᐃ(zb[341]);
                }
            }
        };
        this.ᐃΔᐃᐃⲆ = function (a) {
            nx.ᐃΔᐃᐃⲆ = a;
        };
        this.ᐃᐃΔⵠⵠᐃⲆⵠΔ = function (a) {
            nx.ΔⵠᐃΔⵠⵠⵠ = a;
        };
        this.ΔⵠᐃΔⵠⵠⵠ = function (a) {
            nx.ⵠᐃⵠᐃⲆ.ᐃⲆⵠᐃΔ = a;
            if (mx.ⲆⵠΔⵠΔ > -300) {
                if (a === 0) {
                    this.ⲆΔᐃⲆᐃ(zb[342]);
                } else {
                    this.ⲆΔᐃⲆᐃ(zb[343]);
                }
            }
        };
        this.ᐃⲆᐃⲆᐃⲆⵠᐃⵠ = function (a) {
            if (a === 0) {
                document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
            } else if (a === 1) {
                document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
            } else if (a === 2) {
                document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
            } else if (a === 3) {
                document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
            }
        };
        this.ᐃᐃΔᐃᐃⵠΔⵠⲆ = function () {
            px.ⵠⲆⲆᐃᐃΔⵠ = 0;
        };
        this.ΔⵠΔⵠⵠᐃΔᐃᐃ = function () {
            px.ᐃΔΔⵠⲆΔΔ = 0;
        };
        this.ⵠᐃᐃⵠᐃΔΔⲆΔ = function () {
            nx.ΔⲆΔⲆ.Ⲇⵠᐃⵠⵠ = [];
            nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ = [];
            nx.ΔⲆΔⲆ.id = -1;
            nx.ΔⲆΔⲆ.ᐃⲆⵠⲆⲆⵠⲆ.stop();
            nx.ⵠᐃΔⵠ.ⵠⵠⵠⲆᐃ = [];
            nx.ⵠᐃΔⵠ.ΔⲆᐃⵠⵠ = false;
            nx.ⵠᐃΔⵠ.ⲆᐃⲆⵠΔᐃⵠⵠⲆ = false;
            nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ = -1;
            nx.ⵠᐃΔⵠ.id = -1;
            nx.ⵠᐃΔⵠ.ᐃᐃᐃⲆΔ = ie;
            nx.ⵠᐃΔⵠ.ⲆⲆΔⵠΔ = false;
            nx.ⵠᐃΔⵠ.ᐃΔᐃΔΔ = el;
            nx.ⵠᐃΔⵠ.ⲆⵠⲆᐃⲆΔⲆ = false;
            nx.ⵠᐃΔⵠ.timeout = new Z.ΔⲆⲆᐃ(Br, 0, 1, 0, 1, 1);
        };
        this.ΔⲆⲆΔᐃΔⵠΔᐃ = function () {
            clearTimeout(this.ⲆᐃⵠⲆΔ);
            this.ⲆΔᐃⲆᐃ();
            jx.waiting = false;
        };
        this.ΔᐃᐃⲆⵠⵠⲆ = function (a) {
            for (var b = 0; b < a.length; b++) {
                if (typeof a[b] === "string") {
                    a[b] = Z.ⲆᐃⵠⲆⲆᐃⵠ(a[b]);
                }
            }
            nx.ⲆⵠⵠᐃⲆ.ⵠΔⲆΔⲆ(a[1], a[2], a[3], a[4]);
        };
        this.message = function (a) {
            this.ⲆΔᐃⲆᐃ(a);
        };
        this.ᐃⲆᐃΔⲆΔⲆⲆⵠ = function () {
            clearTimeout(this.ⲆᐃⵠⲆΔ);
            this.ⲆΔᐃⲆᐃ(zb[339]);
            jx.waiting = Yn;
        };
        this.ᐃᐃΔⵠⲆⲆᐃΔΔ = function () {
            clearTimeout(this.ⲆᐃⵠⲆΔ);
            this.ⲆΔᐃⲆᐃ(zb[338]);
            jx.waiting = false;
        };
        this.ᐃⲆΔⲆⵠΔⵠⵠⲆ = function () {
            clearTimeout(this.ⲆᐃⵠⲆΔ);
            this.ⲆΔᐃⲆᐃ(zb[304]);
            jx.waiting = zj;
        };
        this.ⵠᐃΔⵠⵠⵠΔⲆⵠ = function () {
            nx.ΔⲆΔⲆ.ⵠΔᐃΔΔᐃⵠ(1, 0);
            px.ΔⵠⵠⲆⵠᐃⲆ();
        };
        this.ΔⵠᐃⵠⲆΔᐃᐃᐃ = function (a) {
            var b = a[1];
            var c = mx.ⵠᐃΔΔ[b];
            c.ᐃΔⲆΔ = a[2];
            c.ⲆᐃⲆΔΔ = a[3];
            c.ⲆΔⵠⵠᐃⲆΔ = a[4];
            c.ΔⵠΔⵠⲆ = a[5];
            c.ᐃΔᐃΔⲆ = a[6];
            c.ⵠⲆᐃΔⵠ = a[7];
            c.level = a[8];
            var d = mx.ᐃⲆⵠΔᐃ[b * mx.ΔⲆⲆᐃⲆᐃᐃ];
            if (d) {
                d.ᐃΔⲆΔ = a[2];
                d.ⲆᐃⲆΔΔ = a[3];
                d.ⲆΔⵠⵠᐃⲆΔ = a[4];
                d.ΔⵠΔⵠⲆ = a[5];
            }
        };
        this.ΔⲆⵠᐃᐃⲆⵠᐃⵠ = function (a) {
            if (a === 29) {
                nx.ΔⲆΔⲆ.ⵠΔᐃΔΔᐃⵠ(1, 0);
                px.ΔⵠⵠⲆⵠᐃⲆ();
            } else {
                this.ᐃⵠᐃⲆⲆⲆΔ([0, a, 1]);
            }
            nx.ⵠᐃΔⵠ.ΔΔⵠᐃΔᐃΔ();
        };
        this.ᐃᐃⲆⵠΔΔᐃⲆᐃ = function (a) {
            nx.ᐃΔᐃⲆΔ.ᐃⲆⵠᐃᐃ = 0;
            nx.ⵠᐃΔⵠ.ⵠΔΔⵠᐃΔⲆⵠⲆ(a);
        };
        this.ᐃΔΔⲆⵠⵠⵠΔⵠ = function (a) {
            for (var b = Us[a].r, c = 0; c < b.length; c++) {
                if (nx.ΔⲆΔⲆ.Ⲇⵠᐃⵠⵠ.length < nx.ΔⲆΔⲆ.max || nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[b[c][0]] > 0) {
                    var d = Math.floor(b[c][1] * 0.8);
                    if (!d) {
                        continue;
                    }
                    this.ᐃⵠᐃⲆⲆⲆΔ([0, b[c][0], d]);
                }
            }
            nx.ⵠᐃΔⵠ.ΔΔⵠᐃΔᐃΔ();
        };
        this.ᐃΔⵠⲆΔᐃΔⲆΔ = function (a) {
            nx.ᐃΔᐃⲆΔ.ᐃⲆⵠᐃᐃ = 0;
            nx.ⵠᐃΔⵠ.ΔᐃΔΔⵠⵠΔᐃⲆ(a);
        };
        this.ⲆΔᐃⲆᐃ = function (a) {
            if (nx.alert.text) {
                if (a !== nx.alert.text && nx.alert.list[nx.alert.list.length - 1] !== a) {
                    nx.alert.list.push(a);
                }
            } else {
                nx.alert.text = a;
            }
        };
        this.ᐃΔⵠⵠⵠΔⵠⵠⵠ = function () {
            this.ⲆΔᐃⲆᐃ(zb[305]);
        };
        this.ⲆⵠⲆᐃⲆΔⲆᐃᐃ = function () {
            var a;
            a = nx.ΔᐃⲆ == 0 ? zb[306] : zb[307] + (nx.ΔᐃⲆ + 1) + zb[308];
            this.ⲆΔᐃⲆᐃ(a);
            nx.ΔᐃⲆ++;
        };
        this.ⲆⲆᐃᐃⵠΔⵠⲆΔ = function () {
            clearTimeout(b.ⲆᐃⵠⲆΔ);
            nx.reconnect.enabled = false;
            nx.ᐃⵠΔⵠΔ = Yk;
            this.ⲆΔᐃⲆᐃ(zb[309]);
            px.ᐃᐃᐃᐃⲆ(jx.ΔΔⵠⵠΔ);
            this.ᐃⵠⵠΔ.close();
        };
        this.ⵠᐃⵠⲆⵠⲆⲆⲆᐃ = function () {
            xx = 1;
            clearTimeout(this.ⲆᐃⵠⲆΔ);
            this.ⲆΔᐃⲆᐃ(zb[310]);
            jx.waiting = nq;
        };
        this.ⲆⵠⵠⲆⵠᐃⲆᐃⲆ = function () {
            xx = 1;
            clearTimeout(this.ⲆᐃⵠⲆΔ);
            this.ⲆΔᐃⲆᐃ(zb[311]);
            jx.waiting = gj;
        };
        this.ΔᐃⲆⲆⵠΔᐃᐃⲆ = function (a) {
            var b = a[1];
            var c = mx.ⵠᐃΔΔ;
            c[b].ⲆΔΔⵠⲆ = a[2];
            c[b].ᐃΔⲆΔ = a[3];
            c[b].ⲆᐃⲆΔΔ = a[4];
            c[b].ⲆΔⵠⵠᐃⲆΔ = a[5];
            c[b].ΔⵠΔⵠⲆ = a[6];
            c[b].ᐃΔᐃΔⲆ = a[7];
            c[b].ⵠⲆᐃΔⵠ = a[8];
            c[b].level = a[9];
            c[b].ⵠᐃⲆⲆⵠ = 0;
            c[b].ⵠΔᐃΔⲆⲆᐃ = null;
            c[b].label = null;
            c[b].ᐃᐃⲆⵠΔⲆⵠ = null;
            c[b].ᐃⵠΔⵠΔ = true;
            if (mf === 1) {
                c[b].ⲆΔΔⵠⲆ += "|" + b;
            }
        };
        this.ΔΔΔΔⵠᐃⲆⵠⲆ = function () {
            this.ᐃⵠⵠΔ[cf](qo[ea].stringify([29]));
        };
        this.ⲆΔΔᐃΔⵠⵠΔⵠ = function () {
            this.ⲆΔᐃⲆᐃ(zb[312]);
        };
        this.ΔᐃⲆⲆᐃⲆⲆ = function () {
            this.ⲆΔᐃⲆᐃ(zb[313]);
        };
        this.ᐃΔΔᐃᐃᐃᐃⲆᐃ = function (a) {
            this.ᐃⵠⵠΔ[cf](da[La].stringify([32, a]));
            nx.ⲆᐃⲆΔᐃ.open = z;
        };
        this.ᐃᐃⲆⲆⵠⵠⲆᐃᐃ = function (a) {
            for (var b = Pf[a - 1].items, c = 0; c < b.length && nx.ΔⲆΔⲆ.max > nx.ΔⲆΔⲆ.Ⲇⵠᐃⵠⵠ.length; c++) {
                var d = b[c][1];
                var e = b[c][0];
                if (b[c][1] === 29) {
                    nx.ΔⲆΔⲆ.ⵠΔᐃΔΔᐃⵠ(1, 0);
                } else {
                    this.ᐃⵠᐃⲆⲆⲆΔ([0, d, e]);
                }
            }
        };
        this.ᐃⵠᐃⲆⲆⲆΔ = function (b) {
            for (var c = b.length, d = nx.ΔⲆΔⲆ, e = 1; c > e; e += 2) {
                var f = b[e];
                var g = b[e + 1];
                for (var h = 0; d.Ⲇⵠᐃⵠⵠ.length > h; h++) {
                    if (f == d.Ⲇⵠᐃⵠⵠ[h].id) {
                        d.ᐃⲆⵠⲆ[f] += g;
                        break;
                    }
                }
                if (d.Ⲇⵠᐃⵠⵠ.length == h) {
                    d.ᐃⲆⵠⲆ[f] = g;
                    d.Ⲇⵠᐃⵠⵠ.push(px.ⲆΔᐃ[f]);
                    px.ΔⵠⵠⲆⵠᐃⲆ();
                }
            }
            nx.ⵠᐃΔⵠ.ᐃⵠⲆ();
        };
        this.ⲆΔⵠᐃ = function (b, c, d, e, f, g, a) {
            nx.ⲆΔⵠᐃ.ᐃΔᐃⲆ = b / 100;
            nx.ⲆΔⵠᐃ.ᐃⲆᐃ = c / 100;
            nx.ⲆΔⵠᐃ.c = d / 100;
            nx.ⲆΔⵠᐃ.ⵠᐃⲆ = e / 100;
            nx.ⲆΔⵠᐃ.ᐃⵠΔ = f / 100;
            nx.ⲆΔⵠᐃ.ΔᐃⲆⵠΔⲆΔ = g / 100;
            nx.ᐃΔᐃᐃⲆ = a;
        };
        this.ᐃΔᐃⲆⲆᐃᐃⵠΔ = function (a) {
            px.ⵠΔΔΔ.modify(a, 2);
        };
        this.ᐃⲆⵠⲆⲆⲆⲆΔΔ = function (a) {
            px.ⵠΔΔΔ.modify(a, 0);
        };
        this.claimed = function (a) {
            px.ⵠΔΔΔ.modify(a, 3);
        };
        this.ⵠΔⲆⵠⲆΔⲆΔᐃ = function (a, b) {
            nx.ⲆΔⵠᐃ.ᐃΔᐃⲆ = a / 100;
            nx.ᐃΔᐃᐃⲆ = b;
        };
        this.ⵠᐃⵠΔⲆⲆⲆⵠⲆ = function (a) {
            nx.ⲆΔⵠᐃ.ⵠᐃⲆ = a / 100;
        };
        this.ΔⲆᐃΔⲆⵠᐃᐃᐃ = function (a) {
            nx.ⲆΔⵠᐃ.ᐃⲆᐃ = a / 100;
        };
        this.ᐃᐃⵠᐃⲆⲆⵠⲆⲆ = function (a) {
            nx.ⲆΔⵠᐃ.ΔᐃⲆⵠΔⲆΔ = a / 100;
        };
        this.ΔΔⲆⲆⵠⵠⲆΔΔ = function (a) {
            nx.ⲆΔⵠᐃ.c = a / 100;
        };
        this.ΔΔⵠⵠⲆᐃⵠΔⵠ = function (a) {
            mx.time = a;
            mx.transition = hj;
            qx.transition = 1;
        };
        this.ⲆᐃⲆⵠⵠᐃΔⲆⵠ = function () {
            document.getElementById("game_body").style.backgroundColor = _r.ΔⲆⲆΔΔ[mx.time];
        };
        this.ⵠⵠⲆᐃⵠᐃⲆΔᐃ = function (a) {
            if (mx.mode == 1 && mx.ⵠᐃΔΔ[a].ⲆΔΔⵠⲆ !== "spectator") {
                this.ⲆΔᐃⲆᐃ(mx.ⵠᐃΔΔ[a].ⲆΔΔⵠⲆ + zb[314]);
            }
            mx.ⵠᐃΔΔ[a].ᐃⵠΔⵠΔ = false;
        };
        this.ΔΔⵠᐃⵠⵠᐃᐃⲆ = function (a) {
            var b = new Uint16Array(a);
            ΔΔⲆⲆ.ᐃΔΔ.ⲆᐃᐃⲆⲆ(b[1], b[2]);
        };
        this.ⲆⲆΔⵠΔΔᐃΔΔ = function (a) {
            var b = new Uint16Array(a);
            nx.ᐃΔΔ.ⲆᐃᐃⲆⲆ(b[1], b[2]);
        };
        this.ⵠⲆⲆⲆⵠⲆΔⲆᐃ = function (b, c) {
            var d = new Uint16Array(c);
            for (var e = (b.length - 2) / 4, f = 0; e > f; f++) {
                var g = d[1 + f * 2];
                var i = b[4 + f * 4];
                var j = (b[5 + f * 4] >> 1) / 127 * Math.PI * 2;
                var k = mx.ᐃⲆⵠΔᐃ[i * mx.ΔⲆⲆᐃⲆᐃᐃ + g];
                if (k && k.ⲆΔᐃⲆ) {
                    if (qx.loaded && qx.ΔΔⵠⵠΔ) {
                        qx.ⲆΔᐃⲆ(b[5 + f * 4] & 1, ⲆⵠΔⲆⵠ[k.type], k.x, k.y);
                    }
                    k.ⲆΔᐃⲆ.angle = j;
                    k.ⲆΔᐃⲆ.ᐃⵠⲆ = j;
                }
            }
        };
        this.ⵠⲆⵠΔⵠΔⵠΔⵠ = function (b) {
            var c = new Uint16Array(b);
            for (var d = (c.length - 1) / 4, e = 0; e < d; e++) {
                var f;
                var i = e * 4;
                var j = c[1 + i];
                var k = c[2 + i];
                var m = (c[3 + i] >> 1) / 127 * Math.PI * 2;
                var p = c[4 + i];
                var q = kx.ⲆⲆⲆⲆ[k][j];
                switch (p) {
                    case 0:
                        (f = q.p[0][0]).angle = m;
                        f.ᐃⵠⲆ = Mo;
                        break;
                    case 1:
                        (f = q.s[0][0]).angle = m;
                        f.ᐃⵠⲆ = true;
                        break;
                    case 2:
                        (f = q.s[1][0]).angle = m;
                        f.ᐃⵠⲆ = Dk;
                        break;
                    case 3:
                        (f = q.s[2][0]).angle = m;
                        f.ᐃⵠⲆ = Hj;
                        break;
                    case 4:
                        (f = q.t[0][0]).angle = m;
                        f.ᐃⵠⲆ = gq;
                        break;
                    case 5:
                        (f = q.t[1][0]).angle = m;
                        f.ᐃⵠⲆ = true;
                        break;
                    case 6:
                        (f = q.t[2][0]).angle = m;
                        f.ᐃⵠⲆ = true;
                        break;
                    case 7:
                        (f = q.t[3][0]).angle = m;
                        f.ᐃⵠⲆ = Gr;
                        break;
                    case 8:
                        (f = q.t[4][0]).angle = m;
                        f.ᐃⵠⲆ = Dk;
                        break;
                    case 9:
                        (f = q.t[5][0]).angle = m;
                        f.ᐃⵠⲆ = true;
                        break;
                    case 10:
                        (f = q.g[0][0]).angle = m;
                        f.ᐃⵠⲆ = true;
                        break;
                    case 11:
                        (f = q.g[1][0]).angle = m;
                        f.ᐃⵠⲆ = dr;
                        break;
                    case 12:
                        (f = q.g[2][0]).angle = m;
                        f.ᐃⵠⲆ = true;
                        break;
                    case 13:
                        (f = q.d[0][0]).angle = m;
                        f.ᐃⵠⲆ = re;
                        break;
                    case 14:
                        (f = q.d[1][0]).angle = m;
                        f.ᐃⵠⲆ = true;
                        break;
                    case 15:
                        (f = q.d[2][0]).angle = m;
                        f.ᐃⵠⲆ = Pj;
                        break;
                    case 16:
                        (f = q.b[0][0]).angle = m;
                        f.ᐃⵠⲆ = y;
                        break;
                    case 17:
                        (f = q.b[1][0]).angle = m;
                        f.ᐃⵠⲆ = true;
                        break;
                    case 18:
                        (f = q.b[2][0]).angle = m;
                        f.ᐃⵠⲆ = dr;
                        break;
                    case 19:
                        (f = q.b[3][0]).angle = m;
                        f.ᐃⵠⲆ = vr;
                        break;
                    case 20:
                        (f = q.f[0][0]).angle = m;
                        f.ᐃⵠⲆ = true;
                        break;
                    case 21:
                        (f = q.f[1][0]).angle = m;
                        f.ᐃⵠⲆ = Zr;
                        break;
                    case 22:
                        (f = q.f[2][0]).angle = m;
                        f.ᐃⵠⲆ = Pj;
                        break;
                    case 23:
                        (f = q.sw[0][0]).angle = m;
                        f.ᐃⵠⲆ = true;
                        break;
                    case 24:
                        (f = q.sw[1][0]).angle = m;
                        f.ᐃⵠⲆ = Ho;
                        break;
                    case 25:
                        (f = q.sw[2][0]).angle = m;
                        f.ᐃⵠⲆ = sj;
                        break;
                    case 26:
                        (f = q.gw[0][0]).angle = m;
                        f.ᐃⵠⲆ = Pj;
                        break;
                    case 27:
                        (f = q.gw[1][0]).angle = m;
                        f.ᐃⵠⲆ = Tn;
                        break;
                    case 28:
                        (f = q.gw[2][0]).angle = m;
                        f.ᐃⵠⲆ = Tn;
                        break;
                    case 29:
                        (f = q.dw[0][0]).angle = m;
                        f.ᐃⵠⲆ = true;
                        break;
                    case 30:
                        (f = q.dw[1][0]).angle = m;
                        f.ᐃⵠⲆ = Ho;
                        break;
                    case 31:
                        (f = q.dw[2][0]).angle = m;
                        f.ᐃⵠⲆ = Mo;
                        break;
                    case 32:
                        (f = q.a[0][0]).angle = m;
                        f.ᐃⵠⲆ = vr;
                        break;
                    case 33:
                        (f = q.a[1][0]).angle = m;
                        f.ᐃⵠⲆ = zq;
                        break;
                    case 34:
                        (f = q.a[2][0]).angle = m;
                        f.ᐃⵠⲆ = true;
                        break;
                    case 35:
                        (f = q.cs[0][0]).angle = m;
                        f.ᐃⵠⲆ = hj;
                        break;
                    case 36:
                        (f = q.cs[1][0]).angle = m;
                        f.ᐃⵠⲆ = re;
                        break;
                    case 37:
                        (f = q.cs[2][0]).angle = m;
                        f.ᐃⵠⲆ = dr;
                        break;
                    case 38:
                        (f = q.cs[3][0]).angle = m;
                        f.ᐃⵠⲆ = true;
                        break;
                    case 40:
                        (f = q.plm[0][0]).angle = m;
                        f.ᐃⵠⲆ = gq;
                        break;
                    case 41:
                        (f = q.plm[1][0]).angle = m;
                        f.ᐃⵠⲆ = Ca;
                        break;
                    case 42:
                        (f = q.plm[2][0]).angle = m;
                        f.ᐃⵠⲆ = true;
                        break;
                    case 50:
                        (f = q.re[0][0]).angle = m;
                        f.ᐃⵠⲆ = sj;
                        break;
                    case 51:
                        (f = q.re[1][0]).angle = m;
                        f.ᐃⵠⲆ = Dk;
                        break;
                    case 52:
                        (f = q.re[2][0]).angle = m;
                        f.ᐃⵠⲆ = true;
                        break;
                    case 55:
                        (f = q.c[0][0]).angle = m;
                        f.ᐃⵠⲆ = hj;
                        break;
                    case 56:
                        (f = q.m[0][0]).angle = m;
                        f.ᐃⵠⲆ = Hj;
                        break;
                    case 57:
                        (f = q.m[1][0]).angle = m;
                        f.ᐃⵠⲆ = sj;
                        break;
                    case 58:
                        (f = q.m[2][0]).angle = m;
                        f.ᐃⵠⲆ = true;
                }
                if (qx.loaded && qx.ΔΔⵠⵠΔ && f) {
                    qx.ⲆΔᐃⲆ(c[3 + i] & 1, Δᐃᐃᐃ[p], f.x, f.y);
                }
            }
        };
        this.ΔᐃⵠⵠⲆ = function () {
            this.ᐃⵠⵠΔ[cf](hp[Ko].stringify([33, nx.ΔᐃⵠⵠⲆ.ΔⵠⵠⲆ, nx.ΔᐃⵠⵠⲆ.ΔᐃⲆΔΔ]));
        };
        this.ⵠⵠᐃⵠΔᐃⵠΔᐃ = function (a, b) {
            this.ᐃⵠⵠΔ[cf](hp[Ta].stringify([14, b, a.ΔⵠⵠⲆ, a.ΔᐃⲆΔΔ]));
        };
        this.ⲆⲆⲆⲆᐃΔΔ = function (a, b, c) {
            if (b) {
                this.ᐃⵠⵠΔ[cf](hp[Ta].stringify([17, b, a.ΔⵠⵠⲆ, a.ΔᐃⲆΔΔ]));
            } else {
                this.ᐃⵠⵠΔ[cf](hp[na].stringify([0, c, a.ΔⵠⵠⲆ, a.ΔᐃⲆΔΔ]));
            }
        };
        this.ᐃᐃⲆⲆⵠΔΔⵠⵠ = function (a) {
            this.ᐃⵠⵠΔ[cf](xa[Ma].stringify([12, a.ΔⵠⵠⲆ, a.ΔᐃⲆΔΔ]));
        };
        this.ᐃᐃᐃⵠⲆΔⵠⵠᐃ = function (a) {
            this.ᐃⵠⵠΔ[cf](xa[Xa].stringify([30, a]));
        };
        this.ᐃΔⵠΔᐃⲆⲆⲆΔ = function (a) {
            this.ᐃⵠⵠΔ[cf](Pa[Ko].stringify([21, a.ΔⵠⵠⲆ, a.ΔᐃⲆΔΔ]));
        };
        this.ᐃⲆΔΔᐃⲆⵠⵠⲆ = function (a, b) {
            this.ᐃⵠⵠΔ[cf](da[Ma].stringify([9, b, a.ΔⵠⵠⲆ, a.ΔᐃⲆΔΔ, a.type]));
        };
        this.ⵠΔⲆᐃΔΔΔⵠⵠ = function (a, b) {
            this.ᐃⵠⵠΔ[cf](da[Ma].stringify([34, b, a.ΔⵠⵠⲆ, a.ΔᐃⲆΔΔ]));
        };
        this.ΔΔⵠᐃΔᐃᐃⲆΔ = function (a, b, c) {
            this.ᐃⵠⵠΔ[cf](Pa[Ta].stringify([13, b, c, a.ΔⵠⵠⲆ, a.ΔᐃⲆΔΔ]));
        };
        this.ⵠⲆⵠᐃⲆᐃᐃ = function (a) {
            this.ᐃⵠⵠΔ[cf](xa[Ma].stringify([1, a.ΔⵠⵠⲆ, a.ΔᐃⲆΔΔ, a.type]));
        };
        this.ⵠⲆΔᐃᐃⲆΔΔⵠ = function (a) {
            this.ᐃⵠⵠΔ[cf](xa[Ma].stringify([26, a.ΔⵠⵠⲆ, a.ΔᐃⲆΔΔ]));
        };
        this.ⲆΔᐃⵠΔᐃⲆⲆⲆ = function (a) {
            this.ᐃⵠⵠΔ[cf](xa[Ma].stringify([27, a.ΔⵠⵠⲆ, a.ΔᐃⲆΔΔ]));
        };
        this.ᐃⲆⲆᐃⲆⲆⲆⵠΔ = function (a) {
            this.ᐃⵠⵠΔ[cf](eq[Fa].stringify([23, a.ΔⵠⵠⲆ, a.ΔᐃⲆΔΔ]));
        };
        this.ⵠᐃⲆⵠΔΔᐃᐃΔ = function (a) {
            this.ᐃⵠⵠΔ[cf](Ya[La].stringify([5, a.ΔᐃⲆΔΔ]));
        };
        this.ⵠⲆⲆⲆⵠⵠⲆ = function (a) {
            b.ᐃⵠⵠΔ[cf](iq[Xa].stringify([22, nx.ⲆⵠΔⵠⵠ.id, nx.ⵠΔᐃΔᐃ[a]]));
        };
        this.ⲆⵠⵠⵠⵠᐃⲆΔᐃ = function () {
            b.ᐃⵠⵠΔ[cf](jq[$a].stringify([38, nx.ⲆⵠΔⵠⵠ.ΔⵠⵠⲆ, nx.ⲆⵠΔⵠⵠ.id]));
        };
        this.ⲆΔᐃⵠᐃᐃᐃ = function () {
            b.ᐃⵠⵠΔ[cf](pq[lq].stringify([18]));
        };
        this.ⵠⲆⲆᐃⵠⵠΔΔⵠ = function () {
            b.ᐃⵠⵠΔ[cf](pq[Xa].stringify([4, nx.ⲆⵠΔⵠⵠ.id]));
            if (document.getElementById("lock_team").innerHTML == "LOCK") {
                nx.ⲆⵠΔⵠⵠ.lock = 1;
                document.getElementById("lock_team").innerHTML = "UNLOCK";
            } else {
                nx.ⲆⵠΔⵠⵠ.lock = 0;
                document.getElementById("lock_team").innerHTML = "LOCK";
            }
        };
        this.ⲆⲆΔ = function (j, e, i) {
            var k = new Uint16Array(j);
            if (i) {
                mx.ᐃⲆᐃⵠⲆⲆⵠⲆΔ();
            }
            for (var n = (e.length - 2) / 18, o = 0; o < n; o++) {
                var q = 2 + o * 18;
                var t = 1 + o * 9;
                var w = e[q];
                var x = k[t + 1];
                var y = k[t + 5];
                var z = w * mx.ΔⲆⲆᐃⲆᐃᐃ + y;
                if (x & 1) {
                    mx.ⲆⵠᐃᐃᐃⵠⵠΔⲆ(z);
                } else {
                    var A = k[t + 2];
                    var B = k[t + 3];
                    var D = k[t + 4];
                    var E = k[t + 6];
                    var F = k[t + 7];
                    var G = k[t + 8];
                    var H = Math.PI * (e[q + 1] / 255) * 2;
                    if (mx.ᐃⲆⵠΔᐃ[z]) {
                        var I = mx.ᐃⲆⵠΔᐃ[z];
                        I.r.x = B;
                        I.r.y = D;
                        if (w != 0 && Z.ᐃⵠᐃᐃ(I, I.r) > 200) {
                            I.x = B;
                            I.y = D;
                        }
                        if (nx.id !== I.id || w === 0) {
                            I.ᐃᐃᐃΔΔΔⵠ = H;
                        }
                        I.action |= x;
                        I.info = E;
                        I.ΔⵠⲆⲆⲆ = F;
                        I.ᐃᐃΔᐃⵠ = G;
                        if (I.ᐃⵠⲆ) {
                            I.ᐃⵠⲆ(x);
                        }
                    } else {
                        var J = new _f(A, w, y, B, D, H, x, E, F, G);
                        mx.ᐃⲆⵠΔᐃ[z] = J;
                        mx.ⲆⲆΔ[A].push(J);
                    }
                }
            }
        };
        this.ᐃΔⵠΔ = function (a) {
            this.ᐃΔᐃⵠⵠΔⵠ = ux;
            var b = new Uint16Array(a);
            nx.ΔⵠⲆⵠⵠ.ⲆⵠᐃⲆⲆ(b);
        };
        this.ⵠΔᐃΔⵠΔᐃⲆⲆ = function (a) {
            if (Ps !== undefined) {
                Us = Ps;
            }
            if (a.length > 0) {
                Ps = JSON.parse(JSON.stringify(Us));
                for (var b = 0; b < a.length; b++) {
                    var c = a[b];
                    var d = Us[c.item];
                    if (fh !== d) {
                        d.r = c.recipe;
                        d.w = c.workbench;
                        d.f = c.fire;
                        d.ᐃⵠΔ = c.water;
                        d.e = c.well;
                        d.time = 1 / c.time;
                    }
                }
            }
        };
        this.ΔΔⵠᐃⲆⲆⵠ = function (a) {
            if (a && a.length !== 0) {
                nx.ΔΔⵠᐃⲆⲆⵠ.message = function (b) {
                    var c = document.createElement("canvas");
                    var d = c.getContext("2d");
                    for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
                        b = b.replace("\\n", "\n");
                    }
                    b = b.split("\n");
                    Ⲇⵠ = [];
                    var f = b.length * 18 + 10;
                    var g = 0;
                    d.font = 14 + "px Baloo Paaji";
                    for (var h = 0; h < b.length; h++) {
                        if (b[h].charAt(0) === "#") {
                            Ⲇⵠ[h] = b[h].substring(0, 7);
                            b[h] = b[h].substring(8);
                        } else {
                            Ⲇⵠ[h] = "#FFFFFF";
                        }
                        g = Math.max(d.measureText(b[h]).width + 16, g);
                    }
                    c.height = f;
                    c.width = g;
                    h = 0;
                    for (; b.length > h; h++) {
                        var i = ku(1, b[h], 14, Ⲇⵠ[h], null, null, null, null, null, "#000", 6);
                        d.drawImage(i, 8, h * 18 + 5);
                    }
                    return c;
                }(a);
            } else {
                nx.ΔΔⵠᐃⲆⲆⵠ.message = Ab;
            }
        };
        this.ΔⵠⲆᐃⵠ = function (a) {
            var b = mx.ᐃⲆⵠΔᐃ[a[1] * mx.ΔⲆⲆᐃⲆᐃᐃ];
            if (b) {
                if (mx.mode === 2 && b.ᐃΔⲆΔ === 0) {
                    if (nx.ΔⵠⵠⵠⲆ) {
                        if (Math.random() > 0.5) {
                            b.text.push(a[2] + " ..." + ᐃᐃⲆΔΔ);
                        } else {
                            b.text.push(ᐃᐃⲆΔΔ + "... " + a[2]);
                        }
                    } else {
                        b.text.push(ᐃⲆⵠᐃΔᐃΔ[Math.floor(Math.random() * ᐃⲆⵠᐃΔᐃΔ.length)]);
                    }
                } else {
                    b.text.push(a[2]);
                }
            }
        };
        this.ⵠᐃΔⲆᐃᐃⲆⵠΔ = function (a) {
            if (nx.ΔⲆΔⲆ.max !== nx.ΔⲆΔⲆ.Ⲇⵠᐃⵠⵠ.length || Us[a].Ⲇⵠⵠⵠ === 29 || nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(Us[a].Ⲇⵠⵠⵠ) != -1 || nx.ΔⲆΔⲆ.ᐃⲆⵠⲆⵠⲆⲆΔΔ(Us[a].r)) {
                this.ᐃⵠⵠΔ[cf](qo[ea].stringify([2, a]));
                lastcrafted = a;
                return 1;
            } else {
                this.ΔᐃⲆⲆᐃⲆⲆ();
                return 0;
            }
        };
        this.ᐃᐃᐃⲆΔ = function (a) {
            nx.ⵠᐃΔⵠ.ⵠᐃΔΔⲆᐃᐃΔᐃ(a);
        };
        this.ⲆⲆΔⵠΔ = function (a) {
            nx.ⵠᐃΔⵠ.ⲆⲆΔⵠΔ = a;
            nx.ⵠᐃΔⵠ.ᐃⵠⲆ();
        };
        this.ᐃΔᐃΔΔ = function (a) {
            nx.ⵠᐃΔⵠ.ᐃΔᐃΔΔ = a;
            nx.ⵠᐃΔⵠ.ᐃⵠⲆ();
        };
        this.ⲆⵠⲆᐃⲆΔⲆ = function (a) {
            nx.ⵠᐃΔⵠ.ⲆⵠⲆᐃⲆΔⲆ = a;
            nx.ⵠᐃΔⵠ.ᐃⵠⲆ();
        };
        this.ᐃⲆΔᐃⲆⵠᐃᐃΔ = function (a) {
            this.ⲆΔᐃⲆᐃ(zb[315]);
        };
        this.ᐃⲆⲆⲆᐃⵠᐃᐃⵠ = function () {
            nx.ⵠᐃΔⵠ.ΔΔⵠᐃΔᐃΔ();
        };
        this.ⵠⵠⵠᐃᐃ = function (a) {
            px.ⵠⵠⵠᐃᐃ.ⵠᐃΔΔ = [];
            var b = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
            var c = 0;
            for (var d = 1; a.length > d; d += 2) {
                var e = {
                    x: Math.floor(a[d] * mx.w / 250),
                    y: Math.floor(a[d + 1] * mx.ᐃⲆᐃ / 250)
                };
                if (b && !c && !nx.ⲆⲆⵠⵠᐃΔⲆ && Z.ᐃⵠᐃᐃ(e, b) < 250) {
                    c += 1;
                } else {
                    px.ⵠⵠⵠᐃᐃ.ⵠᐃΔΔ.push(e);
                }
            }
        };
        this.ΔᐃΔᐃⵠⲆⵠΔΔ = function () {
            nx.ΔᐃⵠⵠⲆ.open = Sg;
            nx.ⲆᐃⵠⲆᐃ.enabled = mh;
            nx.ⲆᐃⵠⲆᐃ.ᐃⲆⵠᐃᐃ = -1;
            nx.ⲆᐃⵠⲆᐃ.label = null;
            nx.ⲆᐃⵠⲆᐃ.ⲆⲆΔΔᐃᐃⲆ = null;
            nx.ⲆᐃⵠⲆᐃ.now = -1;
        };
        this.ⲆᐃⵠⲆᐃ = function (a) {
            Jf.ⵠᐃⵠⵠⲆΔⵠ = a;
            nx.ⲆᐃⵠⲆᐃ.enabled = vr;
            nx.ⲆᐃⵠⲆᐃ.ᐃⲆⵠᐃᐃ = new Date().getTime();
            nx.ⲆᐃⵠⲆᐃ.label = null;
            nx.ⲆᐃⵠⲆᐃ.now = -1;
            for (var b = [45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; b.length > c; c++) {
                var d = nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(b[c]);
                if (d != -1) {
                    nx.ΔⲆΔⲆ.ⵠΔΔⲆⲆⲆⲆ(b.length[c], d);
                }
            }
            nx.ⵠᐃΔⵠ.ΔΔⵠᐃΔᐃΔ();
        };
        this.ⵠΔᐃⲆᐃⲆᐃΔⲆ = function (a, b, c) {
            this.ᐃΔⵠᐃⵠⵠΔ(a, b * 256 + c);
        };
        this.ᐃΔⵠᐃⵠⵠΔ = function (a, b) {
            nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ = -1;
            nx.ΔⲆΔⲆ.ΔΔᐃⵠΔΔⵠ(a, b, nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(a));
            nx.ⵠᐃΔⵠ.ᐃⵠⲆ();
        };
        this.ᐃⲆⵠⵠⲆᐃⲆΔᐃ = function (a) {
            nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ = -1;
            nx.ΔΔⲆⲆⵠ.wait = oj;
            var b = nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(a);
            nx.ΔⲆΔⲆ.ΔΔᐃⵠΔΔⵠ(a, 1, b);
            if (b >= 0 && !nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ[a]) {
                nx.ⵠᐃΔⵠ.ᐃⵠⲆ();
            }
            if (a == 159) {
                nx.ⵠΔᐃΔᐃ = [nx.id];
            }
        };
        this.ᐃⵠⲆⲆⵠⵠΔⲆⲆ = function () {
            this.ᐃⵠⵠΔ[cf](hp[Ko].stringify([37]));
        };
        this.ⵠⵠⲆΔᐃⲆᐃᐃⵠ = function (a) {
            this.ᐃⵠⵠΔ[cf](da[na].stringify([28, a.ᐃᐃⵠⵠⲆ, a.id]));
        };
        this.ⵠᐃⲆⵠΔⵠⲆⵠⲆ = function (a, b) {
            this.ᐃⵠⵠΔ[cf](da[Ma].stringify([7, a, b]));
        };
        this.ⲆᐃᐃⲆⲆΔⵠⵠΔ = function () {
            var a = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
            if (a) {
                var b = Math.PI * 2;
                this.ᐃⵠⵠΔ[cf](da[na].stringify([15, nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ, Math.floor((a.angle + b) % b * 255 / b), nx.ⵠᐃΔⵠ.mode]));
            }
        };
        this.ⲆⲆⵠⲆⵠ = function (a, b) {
            switch (a) {
                case 195:
                case 110:
                case 116:
                case 117:
                case 145:
                case 127:
                case 133:
                case 136:
                case 142:
                case 143:
                case 189:
                case 207:
                case 233:
                case 205:
                case 209:
                case 211:
                case 192:
                case 137:
                case 138:
                case 196:
                case 197:
                case 200:
                case 199:
                    nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ = -1;
                    this.ᐃⵠⵠΔ[cf](Pa[Ta].stringify([16, a]));
                    break;
                case 114:
                case 160:
                case 115:
                case 132:
                case 188:
                case 206:
                case 204:
                case 191:
                case 193:
                case 208:
                case 210:
                case 113:
                case 162:
                case 163:
                case 164:
                case 165:
                case 118:
                case 167:
                case 151:
                case 152:
                case 166:
                case 171:
                case 172:
                case 173:
                case 124:
                case 218:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 220:
                case 168:
                case 169:
                case 170:
                case 119:
                case 122:
                case 123:
                case 217:
                case 219:
                case 125:
                case 190:
                case 141:
                case 135:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 198:
                case 201:
                case 182:
                case 183:
                case 144:
                case 159:
                case 221:
                    if (!nx.ΔⵠⵠⵠⲆ) {
                        if (nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ === a) {
                            nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ = -1;
                        } else {
                            nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ = a;
                        }
                    }
                    break;
                case 0:
                case 57:
                case 5:
                case 6:
                case 30:
                case 19:
                case 9:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 92:
                case 93:
                case 12:
                case 13:
                case 14:
                case 15:
                case 33:
                case ds.ᐃⲆΔΔΔⲆΔᐃΔ:
                case 16:
                case 17:
                case 34:
                case 18:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                    if (!nx.ΔⵠⵠⵠⲆ) {
                        nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ = -1;
                        if ((c = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ]) && c.right === a) {
                            this.ᐃⵠⵠΔ[cf](xa[Ma].stringify([16, 7]));
                        } else {
                            nx.ⲆⵠⵠⲆⵠ.wait = true;
                            this.ᐃⵠⵠΔ[cf](eq[Fa].stringify([16, a]));
                        }
                    }
                    break;
                case 1:
                case 8:
                case 3:
                case 4:
                case 35:
                case 36:
                case 37:
                case 28:
                case 38:
                case 39:
                case 31:
                case 32:
                case 45:
                case 46:
                case 50:
                case 51:
                case 52:
                case 55:
                case 56:
                case 53:
                case 54:
                case 89:
                case 49:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                    if (!nx.ΔⵠⵠⵠⲆ) {
                        nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ = -1;
                        if ((c = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ]) && c.right === a) {
                            this.ᐃⵠⵠΔ[cf](Ya[La].stringify([16, 7]));
                        } else {
                            this.ᐃⵠⵠΔ[cf](iq[Xa].stringify([16, a]));
                        }
                    }
                    break;
                case 223:
                case 224:
                case 225:
                case 239:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 91:
                    if (!nx.ΔⵠⵠⵠⲆ) {
                        nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ = -1;
                        var c = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
                        this.ᐃⵠⵠΔ[cf](iq[Xa].stringify([16, a]));
                    }
                    break;
                case 77:
                case 78:
                case 79:
                case 58:
                case 25:
                case 26:
                case 27:
                case 43:
                case 44:
                case 20:
                case 21:
                case 22:
                case 59:
                case 60:
                case 90:
                case 61:
                case 47:
                    if ((c = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ]) && c.ⲆⵠⲆⵠᐃ !== a) {
                        nx.ⵠⲆⵠᐃⲆ.wait = dr;
                    }
                    this.ᐃⵠⵠΔ[cf](Pa[Ma].stringify([16, a]));
                    break;
                case 10:
                case 83:
                case 84:
                case 86:
                case 11:
                case 40:
                case 88:
                case 82:
                case 80:
                case 81:
                case 41:
                case 42:
                case 85:
                case 23:
                case 24:
                case 48:
                    this.ᐃⵠⵠΔ[cf](jq[$a].stringify([16, a]));
            }
        };
        this.ⲆⲆⵠᐃⵠⵠᐃⲆⵠ = function (a) {
            this.ᐃⵠⵠΔ[cf](da[ea].stringify([11, a]));
        };
        this.ⲆⲆΔⲆⲆΔⲆⵠⵠ = function (a) {
            nx.ΔΔⲆⲆⵠ.wait = Ca;
            var b = nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(a);
            nx.ΔⲆΔⲆ.ⵠΔΔⲆⲆⲆⲆ(a, b);
            nx.ⵠᐃΔⵠ.ᐃⵠⲆ();
        };
        this.ΔⵠⵠᐃⲆⲆⵠⲆⲆ = function (a, b) {
            this.ᐃⵠⵠΔ[cf](qo[La].stringify([20, a]));
            lastrecycled = a;
        };
        this.ΔⲆΔⲆΔΔΔᐃᐃ = function (a, b) {
            this.ᐃⵠⵠΔ[cf](hp[Ko].stringify([35, a]));
        };
        this.ΔᐃᐃⵠⲆᐃⵠⵠᐃ = function (a) {
            nx.ΔΔⲆⲆⵠ.wait = Zr;
            var b = nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(a);
            nx.ΔⲆΔⲆ.ΔΔᐃⵠΔΔⵠ(a, 1, b);
            nx.ⵠᐃΔⵠ.ᐃⵠⲆ();
        };
        this.ⵠⲆⵠΔΔⲆⲆⲆⲆ = function (a) {
            var b = a[1];
            var c = a[2];
            nx.ΔΔⲆⲆⵠ.wait = Dk;
            var d = nx.ΔⲆΔⲆ.ⲆⵠᐃⵠⲆ(b);
            nx.ΔⲆΔⲆ.ΔΔᐃⵠΔΔⵠ(b, c, d);
            nx.ⵠᐃΔⵠ.ᐃⵠⲆ();
        };
        this.ⵠΔⵠᐃⵠⵠⲆᐃᐃ = function () {
            this.ᐃⵠⵠΔ[cf](hp[Ko].stringify([36]));
        };
        this.ⵠΔⵠᐃΔᐃᐃΔⲆ = function (a) {
            var b = Math.PI * 2;
            this.ᐃⵠⵠΔ[cf](da[na].stringify([24, Math.floor((a + b) % b * 255 / b)]));
        };
        this.ᐃΔⵠᐃⵠᐃⵠⲆⲆ = function (a) {
            var b = Math.PI * 2;
            this.ᐃⵠⵠΔ[cf](da[na].stringify([19, Math.floor((a + b) % b * 255 / b)]));
        };
        this.ⵠᐃⲆⲆⲆⲆⵠΔᐃ = function (a) {
            this.ᐃⵠⵠΔ[cf](ᐃⵠΔᐃⲆⲆⵠ[0].stringify([3, a]));
        };
        this.ᐃΔᐃⵠΔᐃⵠⲆΔ = function (a) {
            this.ᐃⵠⵠΔ[cf](xa[Ma].stringify([31, a]));
        };
        this.ΔⵠΔΔΔⲆᐃΔΔ = function (a) {
            var b = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
            if (nx.ΔⵠⵠⵠⲆ) {
                if (Math.random() > 0.5) {
                    b.text.push(a.substring(0, 25) + " ..." + ᐃᐃⲆΔΔ);
                } else {
                    b.text.push(ᐃᐃⲆΔΔ + "... " + a.substring(0, 25));
                }
            } else {
                b.text.push(a);
            }
            this.ᐃⵠⵠΔ[cf](xa[Ma].stringify([8, a]));
        };
        this.ΔᐃᐃⲆΔ = function (a) {
            var b = ΔΔⲆⲆ.select.ⲆⲆΔ;
            if (b.length != 0) {
                var c = [3];
                var d = [];
                Z.ΔᐃⲆⵠΔⵠⲆ(a, {
                    x: ΔΔⲆⲆ.ᐃΔΔ.rx,
                    y: ΔΔⲆⲆ.ᐃΔΔ.ry
                });
                c.push(a.x);
                c.push(a.y);
                for (var e = 0; e < b.length; e++) {
                    d.push(b[e].ᐃⵠⲆⲆΔⲆᐃⲆΔ);
                }
                c.push(d);
                this.ᐃⵠⵠΔ[cf](eq[Fa].stringify(c));
            }
        };
        this.ᐃΔΔⲆⲆᐃⲆ = 0;
        this.ⲆⲆΔⲆΔⵠⲆ = {
            ⵠᐃⵠΔ: 0,
            ⲆΔ: 0
        };
        this.ᐃⲆᐃⵠⲆⲆᐃⵠⲆ = function () {
            if (ux - this.ᐃΔΔⲆⲆᐃⲆ > 50) {
                this.ᐃΔΔⲆⲆᐃⲆ = ux;
                var a = nx.ᐃΔΔ;
                var b = Math.floor(a.x / 100);
                var c = Math.floor(a.y / 100);
                if (b != this.ⲆⲆΔⲆΔⵠⲆ.ⲆΔ || c != this.ⲆⲆΔⲆΔⵠⲆ.ⵠᐃⵠΔ) {
                    this.ᐃⵠⵠΔ[cf](iq[La].stringify([10, Math.floor(-a.x), Math.floor(-a.y)]));
                    this.ⲆⲆΔⲆΔⵠⲆ.ⲆΔ = b;
                    this.ⲆⲆΔⲆΔⵠⲆ.ⵠᐃⵠΔ = c;
                }
            }
        };
        this.ⵠᐃⵠᐃΔΔⲆ = 0;
        this.ΔΔᐃⲆᐃⲆᐃΔⲆ = function () {
            if (ux - this.ⵠᐃⵠᐃΔΔⲆ > 60000) {
                this.ⵠᐃⵠᐃΔΔⲆ = ux;
                this.ping();
            }
        };
        this.ⵠᐃⲆⵠᐃⲆⵠⵠΔ = function () {
            nx.reconnect.enabled = true;
            if (this.ᐃⵠⵠΔ.ΔΔⲆⲆᐃ == this.ΔΔⲆⲆᐃ) {
                this.ΔΔⲆⲆᐃ++;
                this.ᐃⵠⵠΔ.close();
                ⲆΔⲆΔ.connect();
            }
        };
        this.ᐃⲆΔΔⵠΔᐃⲆⵠ = function (a) {
            this.ⲆΔᐃⲆᐃ(zb[316]);
            for (var b = 1; a.length > b; b++) {
                nx.ⵠΔᐃΔᐃ.push(a[b]);
            }
        };
        this.ⲆΔΔⵠΔⵠⲆΔⲆ = function (a) {
            this.ⲆΔᐃⲆᐃ(mx.ⵠᐃΔΔ[a].ⲆΔΔⵠⲆ + zb[318]);
            nx.ⵠΔᐃΔᐃ.push(a);
            var b = document.getElementById("team_box");
            if (px.ᐃΔᐃⲆⲆ != -1 && b.style.display == "inline-block") {
                px.ⵠᐃΔᐃⲆ[px.ᐃΔᐃⲆⲆ].action();
            }
        };
        this.ⵠⵠᐃᐃΔⲆⲆᐃⲆ = function () {
            this.ⲆΔᐃⲆᐃ(zb[319]);
            nx.ⲆⵠΔⵠⵠ.wait = true;
            nx.ⵠΔᐃΔᐃ = [];
            document.getElementById("team_box").style.display = "none";
        };
        this.ᐃᐃᐃΔⲆⵠⵠⲆⵠ = function (a) {
            if (a == nx.id) {
                this.ⲆΔᐃⲆᐃ(zb[320]);
                nx.ⲆⵠΔⵠⵠ.wait = dr;
                nx.ⵠΔᐃΔᐃ = [];
                document.getElementById("team_box").style.display = "none";
            } else {
                this.ⲆΔᐃⲆᐃ(mx.ⵠᐃΔΔ[a].ⲆΔΔⵠⲆ + zb[321]);
                for (var b = 0; nx.ⵠΔᐃΔᐃ.length > b; b++) {
                    if (a == nx.ⵠΔᐃΔᐃ[b]) {
                        nx.ⵠΔᐃΔᐃ.splice(b, 1);
                        break;
                    }
                }
                var c = document.getElementById("team_box");
                if (px.ᐃΔᐃⲆⲆ != -1 && c.style.display == "inline-block") {
                    px.ⵠᐃΔᐃⲆ[px.ᐃΔᐃⲆⲆ].action();
                }
            }
        };
        this.ΔⲆΔΔΔΔᐃⵠᐃ = function (a) {
            nx.ᐃⵠΔⵠΔ = false;
            this.ⲆΔᐃⲆᐃ(zb[322]);
            if (this.ΔΔⲆⲆᐃ == this.ᐃⵠⵠΔ.ΔΔⲆⲆᐃ) {
                this.ΔΔⲆⲆᐃ++;
                px.ᐃᐃᐃᐃⲆ(jx.ΔΔⵠⵠΔ);
                this.ᐃⵠⵠΔ.close();
            }
        };
        this.ΔΔΔⲆᐃⲆⲆᐃΔ = function (a, b) {
            nx.ᐃⵠΔⵠΔ = false;
            var c = new Uint16Array(b);
            var d = new Uint32Array(b);
            nx.ⵠᐃΔΔΔⵠΔ.ᐃⵠΔᐃⵠᐃΔ = ut[a][Math.floor(Math.random() * ut[a].length)];
            nx.ⵠᐃΔΔΔⵠΔ.ⵠᐃⲆⲆⵠ = Z.ΔΔⲆᐃⵠⵠᐃ(mx.ⵠᐃΔΔ[nx.id].ⵠᐃⲆⲆⵠ);
            nx.ⵠᐃΔΔΔⵠΔ.Ⲇⵠᐃᐃᐃᐃᐃ = Z.ΔΔⲆᐃⵠⵠᐃ(d[1]);
            nx.ⵠᐃΔΔΔⵠΔ.ⵠⵠⵠᐃⵠ = c[1];
            this.ⲆΔᐃⲆᐃ(zb[317]);
            if (this.ΔΔⲆⲆᐃ == this.ᐃⵠⵠΔ.ΔΔⲆⲆᐃ) {
                this.ΔΔⲆⲆᐃ++;
                px.ᐃᐃᐃᐃⲆ(ox.ΔΔⵠⵠΔ);
                this.ᐃⵠⵠΔ.close();
                try {
                    Gf.Widget.adsRefresh();
                } catch (a) { }
            }
            Settings.AutoSpike.e = false;
        };
        this.ping = function () {
            this.ᐃⵠⵠΔ[cf](Ew.ᐃⲆᐃΔⵠᐃᐃΔᐃ);
        };
        this.ΔⵠⵠΔⵠⲆⲆΔⲆ = function () {
            if (this.ᐃⵠⵠΔ.readyState == 3) {
                this.ᐃΔᐃⵠⵠΔⵠ -= 600000;
            }
        };
        this.ⵠⲆᐃⲆΔⲆⲆⲆΔ = function () {
            if (tx > 5) {
                this.ᐃΔᐃⵠⵠΔⵠ = ux;
            }
            if (ux - this.ᐃΔᐃⵠⵠΔⵠ > 600000) {
                this.ᐃΔᐃⵠⵠΔⵠ = ux;
                this.ⵠᐃⲆⵠᐃⲆⵠⵠΔ();
            }
        };
        this.ⵠᐃⲆⵠΔⵠⲆⲆⲆ = function (c) {
            xx++;
            clearTimeout(this.ⲆᐃⵠⲆΔ);
            document.getElementById("commandMainBoxName").innerHTML = this.ⲆⵠΔⲆⲆ[this.ΔⲆΔⵠᐃ][this.ⲆⲆΔⲆⲆⲆⲆ[this.ΔⲆΔⵠᐃ]].a;
            document.getElementById("exploreForest").src = "img/forest-leaf.png";
            document.getElementById("exploreWinter").src = "img/winter-flake.png";
            document.getElementById("exploreDesert").src = "img/desert-cactus.png";
            document.getElementById("exploreLava").src = "img/lava-volcano.png";
            this.ᐃΔᐃⵠⵠΔⵠ = ux;
            nx.ⲆΔⵠᐃ.ΔΔΔⵠⵠ.ᐃⵠΔⲆΔ = nx.ⲆΔⵠᐃ.ΔΔΔⵠⵠ.ⲆᐃⲆΔⲆ;
            nx.ⲆΔⵠᐃ.ⲆⵠⵠᐃⵠⲆΔ.ᐃⵠΔⲆΔ = nx.ⲆΔⵠᐃ.ⲆⵠⵠᐃⵠⲆΔ.ⲆᐃⲆΔⲆ;
            nx.ⲆΔⵠᐃ.ⲆᐃᐃΔⲆᐃⵠ.ᐃⵠΔⲆΔ = nx.ⲆΔⵠᐃ.ⲆᐃᐃΔⲆᐃⵠ.ⲆᐃⲆΔⲆ;
            nx.ⲆΔⵠᐃ.ⵠⲆⵠΔᐃⲆΔ.ᐃⵠΔⲆΔ = nx.ⲆΔⵠᐃ.ⵠⲆⵠΔᐃⲆΔ.ⲆᐃⲆΔⲆ;
            nx.ⲆΔⵠᐃ.ⲆⲆΔΔᐃ.ᐃⵠΔⲆΔ = nx.ⲆΔⵠᐃ.ⲆⲆΔΔᐃ.ⲆᐃⲆΔⲆ;
            nx.ⲆΔⵠᐃ.ᐃΔᐃⲆ = 1;
            nx.ⲆΔⵠᐃ.c = 1;
            nx.ⲆΔⵠᐃ.ᐃⲆᐃ = 1;
            nx.ⲆΔⵠᐃ.ⵠᐃⲆ = 1;
            nx.ⲆΔⵠᐃ.ᐃⵠΔ = 1;
            nx.ⲆΔⵠᐃ.ΔᐃⲆⵠΔⲆΔ = 1;
            nx.ΔΔⲆⵠⵠᐃΔ = false;
            px.ΔⲆⲆⲆΔ.display = 0;
            nx.ΔⲆΔⲆ.Ⲇⵠᐃⵠⵠ = [];
            nx.ΔⲆΔⲆ.ᐃⲆⵠⲆ = [];
            nx.ΔⲆΔⲆ.max = 10;
            nx.ΔⲆΔⲆ.ⵠΔⲆⲆᐃΔⲆ = 0;
            nx.ΔⲆΔⲆ.Ⲇⵠᐃⵠᐃ = 0;
            nx.ΔⲆΔⲆ.id = -1;
            px.ᐃⲆⵠⲆΔΔⲆ = 1;
            px.ΔᐃᐃⲆⲆⵠⵠ = 1;
            px.ᐃΔΔⵠⲆΔΔ = 1;
            px.ⵠⲆⲆᐃᐃΔⵠ = 1;
            nx.ᐃⵠΔⵠΔ = oj;
            nx.ΔⲆΔⲆ.ᐃⲆⵠⲆⲆⵠⲆ.stop();
            nx.ⵠᐃΔⵠ.ⵠⵠⵠⲆᐃ = [];
            nx.ⵠᐃΔⵠ.ΔⲆᐃⵠⵠ = ca;
            nx.ⵠᐃΔⵠ.ⲆᐃⲆⵠΔᐃⵠⵠⲆ = false;
            nx.ⵠᐃΔⵠ.ᐃⵠΔⲆ = -1;
            nx.ⵠᐃΔⵠ.id = -1;
            nx.ⵠᐃΔⵠ.ᐃᐃᐃⲆΔ = nh;
            nx.ⵠᐃΔⵠ.ⲆⲆΔⵠΔ = false;
            nx.ⵠᐃΔⵠ.ᐃΔᐃΔΔ = false;
            nx.ⵠᐃΔⵠ.ⲆⵠⲆᐃⲆΔⲆ = false;
            nx.ⵠᐃΔⵠ.timeout = new Z.ΔⲆⲆᐃ(ek, 0, 1, 0, 1, 1);
            nx.ⲆⵠⵠⲆⵠ.timeout = new Z.ΔⲆⲆᐃ(false, 0, 1, 0, 1 / 10, 1);
            nx.ⲆⵠⵠⲆⵠ.wait = rg;
            nx.ⵠⲆⵠᐃⲆ.timeout = new Z.ΔⲆⲆᐃ(ek, 0, 1, 0, 0.2, 1);
            nx.ⵠⲆⵠᐃⲆ.wait = ie;
            nx.ΔΔⲆⲆⵠ.timeout = new Z.ΔⲆⲆᐃ(false, 0, 1, 0, 1, 1);
            nx.ΔΔⲆⲆⵠ.wait = false;
            nx.ⲆⵠΔⵠⵠ.id = -1;
            nx.ⲆⵠΔⵠⵠ.ΔⵠⵠⲆ = -1;
            nx.ⲆⵠΔⵠⵠ.wait = Yk;
            nx.ⲆⵠΔⵠⵠ.timeout = new Z.ΔⲆⲆᐃ(false, 0, 1, 0, 1 / 30, 1);
            px.ⵠⵠⵠᐃᐃ.ᐃᐃⵠᐃᐃ.x = -1;
            px.ⵠⵠⵠᐃᐃ.ᐃᐃⵠᐃᐃ.y = -1;
            px.ⲆΔᐃⵠ.open = false;
            px.ⵠⵠⵠᐃᐃ.ⵠᐃΔΔ = [];
            nx.ΔⵠΔΔᐃ.enabled = false;
            mx.mode = c[1];
            if (c[20] !== undefined && c[21] !== undefined) {
                mx.ΔΔΔⲆᐃ = c[20];
                mx.ΔᐃⵠⵠΔ = c[21];
                mx.w = mx.ΔΔΔⲆᐃ * mx.ΔⲆΔⲆᐃⲆΔ;
                mx.ᐃⲆᐃ = mx.ΔᐃⵠⵠΔ * mx.ⵠⵠⲆⵠΔΔΔ;
            }
            mx.ᐃⵠⲆᐃⵠΔΔ = c[22];
            mx.ⵠⵠⲆⲆΔ = c[23];
            b.ΔΔⵠᐃⲆⲆⵠ(c[24]);
            b.ⵠΔᐃΔⵠΔᐃⲆⲆ(c[25]);
            nx.ΔⵠᐃᐃⲆ.ᐃⲆⵠᐃΔ = c[26];
            nx.ΔⵠᐃΔⵠⵠⵠ = 0;
            nx.ⵠᐃⵠᐃⲆ.ᐃⲆⵠᐃΔ = c[27];
            mx.ⲆΔᐃⵠᐃⲆⵠⵠⵠ(c[19]);
            mx.time = c[5];
            mx.ΔΔΔΔⲆ.ⲆⵠᐃᐃⲆ = c[15];
            mx.ΔΔΔΔⲆ.ⲆⵠᐃⲆⲆ = new Date().getTime();
            px.ⵠΔΔΔ.ΔⲆΔΔⵠᐃⲆ = c[16];
            mx.transition = Yk;
            nx.ΔᐃⲆ = c[2];
            px.ⵠΔΔΔ.reset();
            nx.ⵠΔᐃΔᐃ = c[8];
            mx.ⲆⲆΔ[0] = [];
            mx.ⲆⲆΔ[100] = [];
            mx.ⲆⲆΔ[2] = [];
            mx.ⲆⲆΔ[1] = [];
            mx.ⲆⲆΔ[6] = [];
            mx.ⲆⲆΔ[3] = [];
            mx.ⲆⲆΔ[31] = [];
            mx.ⲆⲆΔ[37] = [];
            mx.ⲆⲆΔ[43] = [];
            mx.ⲆⲆΔ[44] = [];
            mx.ⲆⲆΔ[39] = [];
            mx.ⲆⲆΔ[40] = [];
            mx.ⲆⲆΔ[54] = [];
            mx.ⲆⲆΔ[55] = [];
            mx.ⲆⲆΔ[4] = [];
            mx.ⲆⲆΔ[7] = [];
            mx.ⲆⲆΔ[8] = [];
            mx.ⲆⲆΔ[9] = [];
            mx.ⲆⲆΔ[10] = [];
            mx.ⲆⲆΔ[15] = [];
            mx.ⲆⲆΔ[16] = [];
            mx.ⲆⲆΔ[17] = [];
            mx.ⲆⲆΔ[45] = [];
            mx.ⲆⲆΔ[46] = [];
            mx.ⲆⲆΔ[47] = [];
            mx.ⲆⲆΔ[48] = [];
            mx.ⲆⲆΔ[49] = [];
            mx.ⲆⲆΔ[53] = [];
            mx.ⲆⲆΔ[11] = [];
            mx.ⲆⲆΔ[22] = [];
            mx.ⲆⲆΔ[23] = [];
            mx.ⲆⲆΔ[5] = [];
            mx.ⲆⲆΔ[12] = [];
            mx.ⲆⲆΔ[13] = [];
            mx.ⲆⲆΔ[14] = [];
            mx.ⲆⲆΔ[60] = [];
            mx.ⲆⲆΔ[70] = [];
            mx.ⲆⲆΔ[71] = [];
            mx.ⲆⲆΔ[72] = [];
            mx.ⲆⲆΔ[73] = [];
            mx.ⲆⲆΔ[74] = [];
            mx.ⲆⲆΔ[81] = [];
            mx.ⲆⲆΔ[82] = [];
            mx.ⲆⲆΔ[87] = [];
            mx.ⲆⲆΔ[86] = [];
            mx.ⲆⲆΔ[34] = [];
            mx.ⲆⲆΔ[65] = [];
            mx.ⲆⲆΔ[66] = [];
            mx.ⲆⲆΔ[67] = [];
            mx.ⲆⲆΔ[62] = [];
            mx.ⲆⲆΔ[63] = [];
            mx.ⲆⲆΔ[78] = [];
            mx.ⲆⲆΔ[77] = [];
            mx.ⲆⲆΔ[75] = [];
            mx.ⲆⲆΔ[76] = [];
            mx.ⲆⲆΔ[64] = [];
            mx.ⲆⲆΔ[69] = [];
            mx.ⲆⲆΔ[68] = [];
            mx.ⲆⲆΔ[79] = [];
            mx.ⲆⲆΔ[89] = [];
            mx.ⲆⲆΔ[83] = [];
            mx.ⲆⲆΔ[84] = [];
            mx.ⲆⲆΔ[85] = [];
            mx.ⲆⲆΔ[80] = [];
            mx.ⲆⲆΔ[88] = [];
            mx.ⲆⲆΔ[91] = [];
            mx.ⲆⲆΔ[90] = [];
            mx.ⲆⲆΔ[61] = [];
            mx.ⲆⲆΔ[18] = [];
            mx.ⲆⲆΔ[19] = [];
            mx.ⲆⲆΔ[20] = [];
            mx.ⲆⲆΔ[21] = [];
            mx.ⲆⲆΔ[50] = [];
            mx.ⲆⲆΔ[52] = [];
            mx.ⲆⲆΔ[51] = [];
            mx.ⲆⲆΔ[29] = [];
            mx.ⲆⲆΔ[56] = [];
            mx.ⲆⲆΔ[30] = [];
            mx.ⲆⲆΔ[38] = [];
            mx.ⲆⲆΔ[33] = [];
            mx.ⲆⲆΔ[32] = [];
            mx.ⲆⲆΔ[24] = [];
            mx.ⲆⲆΔ[25] = [];
            mx.ⲆⲆΔ[26] = [];
            mx.ⲆⲆΔ[27] = [];
            mx.ⲆⲆΔ[28] = [];
            mx.ⲆⲆΔ[42] = [];
            mx.ⲆⲆΔ[41] = [];
            mx.ⲆⲆΔ[35] = [];
            mx.ⲆⲆΔ[36] = [];
            mx.ᐃⲆⵠΔᐃ = [];
            mx.ΔⲆⲆᐃⲆᐃᐃ = c[7];
            nx.id = c[9];
            nx.ΔⵠᐃⲆ = nx.id * mx.ΔⲆⲆᐃⲆᐃᐃ;
            if (qx.loaded) {
                qx.ⵠᐃΔΔ[0].ΔⵠᐃⲆ = nx.ΔⵠᐃⲆ;
                qx.ⵠᐃΔΔ[0].ΔᐃᐃⵠΔᐃⲆ = 0;
            }
            rx.ᐃΔⲆΔᐃᐃᐃ();
            nx.ᐃΔΔ.ⲆᐃᐃⲆⲆ(c[3], c[10]);
            mx.ⵠᐃΔΔ = [];
            var d = mx.ⵠᐃΔΔ;
            for (var e = 0; e < c[11]; e++) {
                d.push(new Ff());
            }
            e = 0;
            for (var f = c[4]; f.length > e; e++) {
                var g = d[f[e].i];
                g.ⲆΔΔⵠⲆ = f[e].n;
                g.ᐃΔⲆΔ = f[e].s;
                g.ⲆᐃⲆΔΔ = f[e].a;
                g.ᐃΔᐃΔⲆ = f[e].c;
                g.ΔⵠΔⵠⲆ = f[e].b;
                g.ⵠⲆᐃΔⵠ = f[e].d;
                g.ⲆΔⵠⵠᐃⲆΔ = f[e].g;
                g.level = f[e].l;
                g.ⵠᐃⲆⲆⵠ = Z.ᐃⵠⵠΔⲆⵠΔ(f[e].p);
                g.ᐃⵠΔⵠΔ = true;
                if (mf === 1) {
                    g.ⲆΔΔⵠⲆ += "|" + f[e].i;
                }
            }
            nx.ΔⵠⲆⵠⵠ.sort();
            if (mx.mode === 1 && mx.ⵠᐃΔΔ[nx.id].ⲆΔΔⵠⲆ === "spectator") {
                nx.ⲆⲆⵠⵠᐃΔⲆ = Dk;
            } else {
                nx.ⲆⲆⵠⵠᐃΔⲆ = ek;
            }
            if (mx.mode === 2 && mx.ⵠᐃΔΔ[nx.id].ᐃΔⲆΔ === 0) {
                nx.ΔⵠⵠⵠⲆ = Dk;
            } else {
                nx.ΔⵠⵠⵠⲆ = false;
            }
            if (mx.mode === 3 && mx.ⵠᐃΔΔ[nx.id].ᐃΔⲆΔ === 0) {
                nx.ΔⲆΔᐃᐃⲆⵠ = y;
            } else {
                nx.ΔⲆΔᐃᐃⲆⵠ = false;
            }
            ⲆⵠΔⵠ.set("starve_token", nx.ⵠⲆΔΔΔ);
            if (c[12] === 0) {
                nx.ⲆᐃⲆΔᐃ.ᐃⲆⵠᐃᐃ = 0;
                px.ⵠΔΔΔ.restore(c[17]);
                var h = c[14];
                if (h[29]) {
                    nx.ΔⲆΔⲆ.ⵠΔᐃΔΔᐃⵠ(1, 0);
                }
                for (e = 0; h.length > e; e++) {
                    if (h[e]) {
                        if (e == 29) {
                            continue;
                        }
                        if (e == 7) {
                            continue;
                        }
                        this.ᐃⵠᐃⲆⲆⲆΔ([0, e, h[e]]);
                    }
                }
                nx.ⲆᐃⲆΔᐃ.open = kr;
            } else {
                if (mx.mode === 4) {
                    this.ᐃⵠᐃⲆⲆⲆΔ([0, 238, 1]);
                } else if (mx.mode === 3) {
                    if (nx.ΔⲆΔᐃᐃⲆⵠ) {
                        this.ᐃⵠᐃⲆⲆⲆΔ([0, 190, 4]);
                    } else {
                        this.ᐃⵠᐃⲆⲆⲆΔ([0, 191, 3]);
                    }
                }
                if (mx.mode === 0 || mx.mode === 3 || mx.mode === 7 || mx.mode === 4) {
                    nx.ⲆᐃⲆΔᐃ.ᐃⲆⵠᐃᐃ = new Date().getTime();
                    nx.ⲆᐃⲆΔᐃ.open = true;
                    nx.ⲆᐃⲆΔᐃ.value = c[13];
                    px.ⲆᐃⲆΔᐃ.ⲆⵠᐃⲆⲆ();
                } else {
                    nx.ⲆᐃⲆΔᐃ.ᐃⲆⵠᐃᐃ = 0;
                    nx.ⲆᐃⲆΔᐃ.open = ca;
                    nx.ⲆᐃⲆΔᐃ.value = 0;
                }
                nx.ᐃⲆΔΔᐃⵠΔ = c[12].toString();
            }
            nx.ⲆᐃⵠⲆᐃ.enabled = c[6];
            nx.ⲆᐃⵠⲆᐃ.ᐃⲆⵠᐃᐃ = -1;
            nx.ⲆᐃⵠⲆᐃ.label = null;
            nx.ⲆᐃⵠⲆᐃ.now = -1;
            ⲆⵠΔⵠ.set("starve_token_id", nx.ᐃⲆΔΔᐃⵠΔ);
            if (nx.reconnect.enabled) {
                nx.reconnect.rotate = 0;
                nx.reconnect.enabled = false;
            } else {
                jx.ᐃᐃᐃᐃⲆ(px.ΔΔⵠⵠΔ);
                if (ga) {
                    ga("send", "event", "Game", "play", "S" + jx.ᐃΔⲆΔ + "A" + jx.ⲆᐃⲆΔΔ);
                }
            }
        };
        this.connect = function () {
            b.Δᐃᐃⵠᐃⵠⵠ = 0;
            b.ᐃⲆΔΔΔᐃᐃ();
        };
        this.ⵠⵠⵠᐃᐃⵠⲆ = [];
        this.ⲆⲆᐃⵠΔᐃᐃⵠΔ = function (c) {
            const d = b.ⲆᐃⲆᐃⲆ.filter(a => a.gm === c);
            const f = {};
            for (let a = 0; d.length > a; a++) {
                const b = d[a];
                const c = b.r;
                if (c !== undefined) {
                    if (Jt === f[c]) {
                        f[c] = [];
                    }
                    f[c].push(b);
                }
            }
            function g(d) {
                b.ⵠⵠⵠᐃᐃⵠⲆ[c] = d;
                const e = f[d];
                const g = e[Math.floor(Math.random() * e.length)];
                b.ⲆΔᐃᐃⲆΔᐃ({
                    domain: zf,
                    is_tls: 1,
                    id: g.id,
                    p: g.p
                });
            }
            if (b.ⵠⵠⵠᐃᐃⵠⲆ[c] !== _a) {
                g(b.ⵠⵠⵠᐃᐃⵠⲆ[c]);
                return;
            }
            let a = 1;
            function h(b) {
                const c = new Gf.XMLHttpRequest();
                const d = b[0];
                const e = d.p;
                const f = d.r;
                const i = e[Math.floor(Math.random() * e.length)];
                c.open("GET", "https://" + i + "." + zf + "/", true);
                c.onreadystatechange = function () {
                    if (c.readyState === 4) {
                        if (a === 0) {
                            return;
                        }
                        a = 0;
                        g(f);
                    }
                };
                c.send();
            }
            for (let a in f) {
                h(f[a]);
            }
            Gf.setTimeout(function () {
                if (a === 0) {
                    return;
                }
                a = 0;
                const b = Gf.Object.keys(f);
                g(b[Math.floor(b.length * Math.random())]);
            }, 5000);
        };
        this.ⵠⵠᐃⲆⲆⵠᐃⵠⵠ = function () {
            let a = Jf.ⵠⲆⵠⲆⵠⵠΔ[b.ΔⲆΔⵠᐃ];
            console.log(fk, Jt, undefined);
            let c = b.ⲆⲆΔⲆⲆⲆⲆ[b.ΔⲆΔⵠᐃ];
            let d = b.ⲆᐃⲆᐃⲆ.find(b => b.gm == a && b.idx == c);
            if (Ur === d) {
                b.ⲆⲆᐃⵠΔᐃᐃⵠΔ(a);
            } else {
                b.ⲆΔᐃᐃⲆΔᐃ({
                    domain: zf,
                    is_tls: 1,
                    id: d.id,
                    p: d.p
                });
            }
        };
        this.ᐃⲆΔΔΔᐃᐃ = function () {
            console.log(undefined);
            if (Dw !== undefined && fk !== ff) {
                console.log(Ab, vg, undefined);
                b.ⲆΔᐃᐃⲆΔᐃ({
                    domain: zf,
                    is_tls: 1,
                    id: ff + Dw,
                    p: b.ⵠⵠᐃⲆᐃΔⵠ[ff]
                });
                return;
            }
            if (Cf === undefined) {
                b.ⵠⵠᐃⲆⲆⵠᐃⵠⵠ();
            } else {
                b.ⲆΔᐃᐃⲆΔᐃ({
                    domain: Cf.domain,
                    is_tls: Cf.ssl,
                    id: Cf.id,
                    p: [Cf.p]
                });
            }
        };
        this.ⲆΔᐃᐃⲆΔᐃ = function (c) {
            let d = c.domain;
            let e = c.is_tls;
            let f = c.id;
            let a = c.p;
            let g = a[Math.floor(Math.random() * a.length)];
            let i = e ? "wss://" + g + "." + d + "/" + f : "ws://" + d;
            console.log(_h, Ur);
            b.ᐃⵠⵠΔ = new Gf.WebSocket(i);
            b.ᐃⵠⵠΔ.binaryType = "arraybuffer";
            b.ᐃⵠⵠΔ.ΔΔⲆⲆᐃ = b.ΔΔⲆⲆᐃ;
            b.ᐃⵠⵠΔ.onmessage = function (a) {
                if (b.ΔΔⲆⲆᐃ == b.ΔΔⲆⲆᐃ) {
                    if (typeof a.data == "string") {
                        var c = JSON.parse(a.data);
                        switch (c[0]) {
                            case 0:
                                b.ΔⵠⲆᐃⵠ(c);
                                break;
                            case 1:
                                b.ΔⵠⲆΔᐃⵠΔ(c[1]);
                                break;
                            case 2:
                                b.ΔᐃⲆⲆⵠΔᐃᐃⲆ(c);
                                break;
                            case 3:
                                b.ⵠᐃⲆⵠΔⵠⲆⲆⲆ(c);
                                break;
                            case 4:
                                b.message(c[1]);
                                break;
                            case 5:
                                b.ΔᐃᐃⲆⵠⵠⲆ(c);
                                break;
                            case 6:
                                b.ΔΔⵠᐃⲆⲆⵠ(c[1]);
                        }
                    } else {
                        var d = function (b, c, d) {
                            const f = new Uint8Array(b);
                            const e = f.length;
                            let g = Af[e];
                            let a = mn;
                            let h = lj;
                            if (g === undefined) {
                                kf += e * 2;
                                if (kf < 65535) {
                                    h = fj(vj(e));
                                } else {
                                    kf = e;
                                    for (let a = 0; a < Af.length; a++) {
                                        if (Af[a] !== _h) {
                                            const b = Af[a][0];
                                            Af[a] = undefined;
                                            ej(b);
                                        }
                                    }
                                    h = fj(vj(e));
                                    me();
                                }
                                a = kk(h);
                                Af[e] = [h, a];
                            } else {
                                h = g[0];
                                a = g[1];
                            }
                            for (let g = 0; g < f.length; g++) {
                                a[g] = f[g];
                            }
                            Ei(h, c, d);
                            for (let g = 0; f.length > g; g++) {
                                f[g] = a[g];
                            }
                            return f;
                        }(a.data, nx.ΔΔᐃⵠΔⵠΔ, nx.ΔⲆΔⵠᐃΔⵠΔΔ);
                        var e = d.buffer;
                        switch (d[0]) {
                            case 0:
                                b.ⲆⲆΔ(e, d, rg);
                                break;
                            case 1:
                                b.ⲆⲆΔ(e, d, Gr);
                                break;
                            case 2:
                                b.ᐃⲆⲆⲆᐃⵠᐃᐃⵠ();
                                break;
                            case 3:
                                b.ᐃⵠᐃⲆⲆⲆΔ(new Uint16Array(e));
                                break;
                            case 4:
                                b.ᐃⲆΔⲆⵠΔⵠⵠⲆ();
                                break;
                            case 5:
                                b.ⲆⵠⵠⲆⵠᐃⲆᐃⲆ();
                                break;
                            case 6:
                                b.ᐃⲆΔᐃⲆⵠᐃᐃΔ();
                                break;
                            case 7:
                                b.ⵠⲆⵠΔⵠΔⵠΔⵠ(e);
                                break;
                            case 8:
                                b.ΔⲆⵠᐃᐃⲆⵠᐃⵠ(d[1]);
                                break;
                            case 9:
                                b.ᐃΔⵠⲆΔᐃΔⲆΔ(d[1]);
                                break;
                            case 10:
                                b.ΔᐃⲆⲆᐃⲆⲆ();
                                break;
                            case 11:
                                b.ᐃΔⵠᐃⵠⵠΔ(d[1], d[2]);
                                break;
                            case 12:
                                b.ᐃᐃᐃⲆΔ(d[1]);
                                break;
                            case 13:
                                b.ⵠⲆⲆⲆⵠⲆΔⲆᐃ(d, e);
                                break;
                            case 14:
                                b.ⲆⵠⵠΔᐃΔΔ();
                                break;
                            case 15:
                                b.ⵠⵠⲆᐃⵠᐃⲆΔᐃ(d[1]);
                                break;
                            case 16:
                                b.ⲆΔⵠᐃ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                                break;
                            case 17:
                                b.ⲆⲆΔⵠΔΔᐃΔΔ(e);
                                break;
                            case 18:
                                b.ⲆΔΔᐃΔⵠⵠΔⵠ();
                                break;
                            case 19:
                                b.ᐃΔᐃΔΔ(d[1]);
                                break;
                            case 20:
                                b.ⲆⵠⲆᐃⲆΔⲆᐃᐃ();
                                break;
                            case 21:
                                b.ᐃΔⵠΔ(e);
                                break;
                            case 22:
                                b.ΔΔⵠⵠⲆᐃⵠΔⵠ(d[1]);
                                break;
                            case 23:
                                b.ΔΔⵠᐃⵠⵠᐃᐃⲆ(e);
                                break;
                            case 24:
                                b.ᐃⲆⵠⵠⲆᐃⲆΔᐃ(d[1]);
                                break;
                            case 25:
                                b.ΔΔΔⲆᐃⲆⲆᐃΔ(d[1], e);
                                break;
                            case 26:
                                b.ⵠⵠⵠᐃᐃ(d);
                                break;
                            case 27:
                                b.ⲆⲆᐃᐃⵠΔⵠⲆΔ();
                                break;
                            case 28:
                                b.ⲆᐃⵠⲆᐃ(d[1]);
                                break;
                            case 29:
                                b.ΔᐃΔᐃⵠⲆⵠΔΔ();
                                break;
                            case 30:
                                b.ΔⲆΔΔΔΔᐃⵠᐃ();
                                break;
                            case 31:
                                b.ᐃⲆΔΔⵠΔᐃⲆⵠ(d);
                                break;
                            case 32:
                                b.ᐃᐃᐃΔⲆⵠⵠⲆⵠ(d[1]);
                                break;
                            case 33:
                                b.ⲆΔΔⵠΔⵠⲆΔⲆ(d[1]);
                                break;
                            case 34:
                                b.ⵠⵠᐃᐃΔⲆⲆᐃⲆ();
                                break;
                            case 35:
                                b.ᐃᐃⲆⲆⵠⵠⲆᐃᐃ(d[1]);
                                break;
                            case 36:
                                b.ⲆⵠⲆᐃⲆΔⲆ(d[1]);
                                break;
                            case 37:
                                b.ⵠΔⲆⵠⲆΔⲆΔᐃ(d[1], d[2]);
                                break;
                            case 38:
                                b.ΔⲆᐃΔⲆⵠᐃᐃᐃ(d[1]);
                                break;
                            case 39:
                                b.ⵠᐃⵠΔⲆⲆⲆⵠⲆ(d[1]);
                                break;
                            case 40:
                                b.ⵠᐃΔⵠⵠⵠΔⲆⵠ();
                                break;
                            case 41:
                                b.ΔⵠᐃⵠⲆΔᐃᐃᐃ(d);
                                break;
                            case 42:
                                b.ᐃΔᐃⲆⲆᐃᐃⵠΔ(d[1]);
                                break;
                            case 43:
                                b.ᐃⲆⵠⲆⲆⲆⲆΔΔ(d[1]);
                                break;
                            case 44:
                                b.claimed(d[1]);
                                break;
                            case 45:
                                b.ᐃᐃⲆⵠΔΔᐃⲆᐃ(d[1]);
                                break;
                            case 46:
                                b.ᐃΔΔⲆⵠⵠⵠΔⵠ(d[1]);
                                break;
                            case 47:
                                b.ⲆⲆΔⵠΔ(d[1]);
                                break;
                            case 48:
                                b.ᐃΔⵠⵠⵠΔⵠⵠⵠ();
                                break;
                            case 50:
                                b.ⵠΔᐃⲆᐃⲆᐃΔⲆ(d[1], d[2], d[3]);
                                break;
                            case 51:
                                b.ⵠᐃⵠⲆⵠⲆⲆⲆᐃ();
                                break;
                            case 52:
                                b.ⲆⲆΔⲆⲆΔⲆⵠⵠ(d[1]);
                                break;
                            case 53:
                                b.ΔᐃᐃⵠⲆᐃⵠⵠᐃ(d[1]);
                                break;
                            case 54:
                                b.ΔΔᐃᐃⲆΔΔⲆⵠ();
                                break;
                            case 55:
                                b.ᐃᐃⵠᐃⲆⲆⵠⲆⲆ(d[1]);
                                break;
                            case 56:
                                b.ΔΔⲆⲆⵠⵠⲆΔΔ(d[1]);
                                break;
                            case 57:
                                b.ᐃᐃΔⵠⲆⲆᐃΔΔ();
                                break;
                            case 58:
                                b.ᐃⲆᐃΔⲆΔⲆⲆⵠ();
                                break;
                            case 59:
                                b.ⵠᐃᐃⵠᐃΔΔⲆΔ();
                                break;
                            case 60:
                                b.ᐃΔᐃⵠⵠⵠΔᐃΔ();
                                break;
                            case 61:
                                nx.ᐃΔΔ.ⵠⲆΔᐃᐃⲆⲆ = 0.2;
                                nx.ᐃΔΔ.ᐃⲆⵠᐃᐃ = 3;
                                break;
                            case 62:
                                b.ⵠⲆⵠΔΔⲆⲆⲆⲆ(new Uint16Array(e));
                                break;
                            case 63:
                                b.ⵠΔᐃᐃⲆⵠΔⲆᐃ();
                                break;
                            case 64:
                                b.ΔⲆⵠᐃᐃⵠΔᐃΔ();
                                break;
                            case 65:
                                b.ΔⵠΔⵠⵠᐃΔᐃᐃ();
                                break;
                            case 66:
                                b.ᐃᐃΔᐃᐃⵠΔⵠⲆ();
                                break;
                            case 67:
                                b.ᐃⲆᐃⲆᐃⲆⵠᐃⵠ(d[1]);
                                break;
                            case 68:
                                b.ᐃᐃⵠⵠⵠⵠⵠⲆⵠ(d[1]);
                                break;
                            case 69:
                                b.ΔⵠᐃΔⵠⵠⵠ(d[1]);
                                break;
                            case 70:
                                b.ᐃᐃΔⵠⵠᐃⲆⵠΔ(d[1]);
                                break;
                            case 71:
                                b.ᐃΔᐃᐃⲆ(d[1]);
                        }
                    }
                }
            };
            b.ᐃⵠⵠΔ.onerror = function () {
                if (nx.reconnect.enabled) {
                    Gf.setTimeout(b.timeout, 2500);
                }
            };
            this.ᐃⵠⵠΔ.onopen = function () {
                clearTimeout(b.ⲆᐃⵠⲆΔ);
                nx.ᐃⵠⵠΔⵠΔᐃ = nx.ᐃⵠⵠΔⵠΔᐃ || Z.ᐃΔᐃⵠΔΔⲆ("token");
                Z.ᐃΔⵠΔⵠⲆⲆ().then(a => {
                    b.ᐃⵠⵠΔ[cf](pq[$a].stringify([jx.ⲆΔΔⵠⲆ.input.value, screen.width + 200, screen.height + 200, 52, nx.ⵠⲆΔΔΔ, nx.ᐃⲆΔΔᐃⵠΔ, nx.reconnect.enabled ? 1 : 0, jx.ᐃΔⲆΔ, jx.ⲆᐃⲆΔΔ, jx.Ⲇⵠᐃⵠᐃ, jx.ΔⵠΔⵠⲆ, jx.ᐃΔᐃΔⲆ, jx.ⵠⲆᐃΔⵠ, Hx === Go ? 0 : Hx, Gx === undefined ? 0 : Gx.substring(Gx.length - 50), pf, nx.ᐃⵠⵠΔⵠΔᐃ, a, nx.ⲆᐃΔⲆᐃⲆⵠ, nx.ⲆⲆⲆⲆᐃⲆΔ]));
                    nx.ᐃⵠⵠΔⵠΔᐃ = undefined;
                    nx.ⲆᐃΔⲆᐃⲆⵠ = fk;
                    nx.ⲆⲆⲆⲆᐃⲆΔ = qs;
                    b.ⲆᐃⵠⲆΔ = setTimeout(b.timeout, 2000);
                });
            };
        };
    }();
    var mx;
    var nx;
    var ox;
    var px = {
        ⲆΔΔⲆⵠ: Bl
    };
    var qx = new function () {
        this.ΔΔⵠⵠΔ = 0;
        this.loaded = 0;
        this.transition = 0;
        this.ⵠᐃⵠⵠⵠΔⵠ = function (a) {
            return a / mx.w * 100;
        };
        this.ΔᐃᐃⲆⲆΔᐃ = function (a) {
            return a / mx.ᐃⲆᐃ * 100;
        };
        this.ⵠⲆᐃⵠᐃⵠⲆ = function (a, b) {
            a = this.ⵠᐃⵠⵠⵠΔⵠ(a) - this.ΔᐃⲆᐃⲆ.x;
            return this.ΔᐃⲆᐃⲆ.x + b * a;
        };
        this.ΔⵠΔⲆⵠΔΔ = function (a, b) {
            a = Math.abs(this.ΔᐃᐃⲆⲆΔᐃ(a) - this.ΔᐃⲆᐃⲆ.y);
            return this.ΔᐃⲆᐃⲆ.y + b * a;
        };
        this.sample = {};
        this.ᐃΔΔⵠⲆ = {};
        this.ΔΔⲆⲆ = {};
        this.ⵠᐃΔⲆᐃⲆΔ = function (b, c, d, e) {
            for (var f = 0; c.length > f; f++) {
                var g = c[f];
                if (!b.playing(g)) {
                    b.pos(d, e, -0.5, g);
                    b.play(g);
                    return Ho;
                }
            }
            return mh;
        };
        this.ⲆΔᐃⲆ = function (a, b, c, d) {
            c = this.ⵠⲆᐃⵠᐃⵠⲆ(c, Vd.ΔᐃᐃΔΔΔᐃ);
            d = this.ΔⵠΔⲆⵠΔΔ(d, Vd.ΔᐃᐃΔΔΔᐃ);
            console.log("HIT", a, b, c, d, Vd.ΔᐃᐃΔΔΔᐃ);
            if (a) {
                if (b === 1) {
                    this.ⵠᐃΔⲆᐃⲆΔ(this.ΔΔⲆⲆ.ΔⵠᐃⵠΔⵠΔ, this.sample.ΔⵠᐃⵠΔⵠΔ, c, d);
                } else if (b === 0) {
                    this.ⵠᐃΔⲆᐃⲆΔ(this.ΔΔⲆⲆ.ⲆᐃᐃⲆᐃⲆᐃ, this.sample.ⲆᐃᐃⲆᐃⲆᐃ, c, d);
                }
            } else {
                this.ⵠᐃΔⲆᐃⲆΔ(this.ΔΔⲆⲆ.ΔΔΔⲆⵠ, this.sample.ΔΔΔⲆⵠ, c, d);
            }
        };
        this.ΔᐃⲆᐃⲆ = {
            y: 0,
            x: 0
        };
        this.ⲆᐃΔⲆⵠΔᐃ = {
            x: 0,
            y: 0
        };
        this.ⲆᐃⲆᐃⵠ = {};
        this.ⵠᐃΔΔ = [];
        this.ⵠⲆⲆᐃⲆ = function (a, b) {
            for (var c in this.ⲆᐃⲆᐃⵠ) {
                var d = this.ⲆᐃⲆᐃⵠ[c];
                d.check(a);
                if (d.ΔΔᐃⵠᐃⵠⲆ) {
                    if (mx.ΔΔΔΔⲆ.now < 460000) {
                        d.ⲆⲆⵠΔΔ();
                    }
                    if (b) {
                        d.ᐃⵠⲆ(a, this.ΔᐃⲆᐃⲆ);
                    }
                    if (this.transition) {
                        d.transition();
                    }
                }
            }
            this.transition &&= 0;
        };
        this.ΔΔⵠΔⵠΔⵠⲆⲆ = function () {
            var a = [];
            for (var b = 0; this.ⵠᐃΔΔ.length > b; b++) {
                if ((e = this.ⵠᐃΔΔ[b]).ΔᐃᐃⵠΔᐃⲆ) {
                    a.push(b);
                } else if (!e.ΔᐃᐃⵠΔᐃⲆ && !mx.ᐃⲆⵠΔᐃ[e.ΔⵠᐃⲆ]) {
                    e.ᐃΔᐃⲆᐃⵠⲆ();
                    a.push(b);
                }
            }
            var c = mx.ⲆⲆΔ[0];
            var d = 0;
            for (b = 0; b < c.length && d < a.length; b++) {
                var e = c[b];
                if ((mx.mode != 1 || mx.ⵠᐃΔΔ[e.id].ⲆΔΔⵠⲆ !== "spectator") && e.ᐃᐃⵠⵠΔ === -1 && e.ΔⵠᐃⲆ !== nx.ΔⵠᐃⲆ) {
                    this.ⵠᐃΔΔ[a[d]].ⲆⵠᐃⲆⲆ(e.ΔⵠᐃⲆ);
                    d++;
                }
            }
        };
        this.ΔⲆⲆⲆΔⲆᐃᐃᐃ = function () {
            this.ΔΔⵠΔⵠΔⵠⲆⲆ();
            for (var a = 0; this.ⵠᐃΔΔ.length > a; a++) {
                var b = this.ⵠᐃΔΔ[a];
                if (!b.ΔᐃᐃⵠΔᐃⲆ && b.check()) {
                    b.ᐃⵠⲆ();
                }
            }
        };
        this.ΔᐃΔΔⲆᐃⵠᐃΔ = function (a) {
            if (this.ⲆᐃΔⲆⵠΔᐃ.x === a.x && this.ⲆᐃΔⲆⵠΔᐃ.y === a.y) {
                return 0;
            } else {
                this.ⲆᐃΔⲆⵠΔᐃ.x = a.x;
                this.ⲆᐃΔⲆⵠΔᐃ.y = a.y;
                this.ΔᐃⲆᐃⲆ.x = this.ⵠᐃⵠⵠⵠΔⵠ(a.x);
                this.ΔᐃⲆᐃⲆ.y = this.ΔᐃᐃⲆⲆΔᐃ(a.y);
                Howler.pos(this.ΔᐃⲆᐃⲆ.x, this.ΔᐃⲆᐃⲆ.y, 0);
                return 1;
            }
        };
        this.ⵠᐃⵠᐃᐃΔΔⵠⲆ = function () {
            if (this.ΔΔⵠⵠΔ && this.loaded) {
                var a = mx.ᐃⲆⵠΔᐃ[nx.ΔⵠᐃⲆ];
                if (a) {
                    a.ᐃᐃⵠⵠΔ = 0;
                    var b = this.ΔᐃΔΔⲆᐃⵠᐃΔ(a);
                    if (mx.mode !== 2 && mx.mode !== 4 && mx.mode !== 5) {
                        this.ⵠⲆⲆᐃⲆ(a, b);
                    }
                    this.ΔⲆⲆⲆΔⲆᐃᐃᐃ();
                }
            }
        };
        this.ⲆᐃΔΔΔⵠᐃⲆⲆ = function () {
            for (var b in _w) {
                var c = _w[b];
                if (typeof c === "object" && c.path) {
                    c.ⲆⵠΔⲆΔ = new Howl({
                        src: c.path,
                        volume: 0,
                        sprite: c.ΔⲆ
                    });
                }
                for (var d in c.sample) {
                    var f = c.sample[d];
                    var g = [];
                    console.log(undefined);
                    for (var h = 0; h < f; h++) {
                        var j = c.ⲆⵠΔⲆΔ.play(d);
                        c.ⲆⵠΔⲆΔ.stop(j);
                        c.ⲆⵠΔⲆΔ.on("fade", function (a) {
                            if (!this.volume(a)) {
                                console.log(Yl, mn);
                                this.stop(a);
                            }
                        }, j);
                        g.push(j);
                    }
                    if (g.length > 1) {
                        qx.sample[d] = g;
                    } else {
                        qx.sample[d] = g[0];
                    }
                    qx.ΔΔⲆⲆ[d] = c.ⲆⵠΔⲆΔ;
                }
            }
        };
        this.ⲆᐃⲆⵠΔⲆΔ = function (a, b, c) {
            for (var d = 0; d < a.length; d++) {
                b.volume(c, a[d]);
            }
        };
        this.ⵠⲆⲆⵠⵠΔΔ = function (b, c, d, e, f, g) {
            var a = b;
            for (var i = 0; i < d; i++) {
                var j = a[i] = [];
                for (ⵠᐃⵠΔ = 0; ⵠᐃⵠΔ < e; ⵠᐃⵠΔ++) {
                    j[ⵠᐃⵠΔ] = qx.sample[f + ⵠᐃⵠΔ][i];
                    c.ⲆⵠΔⲆΔ.volume(g, j[ⵠᐃⵠΔ]);
                }
            }
        };
        this.ⲆⵠᐃⲆⲆ = function () {
            qx.ⲆᐃΔΔΔⵠᐃⲆⲆ();
            qx.ᐃΔΔⵠⲆ.ⵠⲆᐃⲆᐃᐃᐃ = [];
            qx.ᐃΔΔⵠⲆ.ⲆⵠⵠⲆⵠ = [];
            qx.ᐃΔΔⵠⲆ.ⵠⲆⲆⲆᐃ = [];
            qx.ⵠⲆⲆⵠⵠΔΔ(qx.ᐃΔΔⵠⲆ.ⵠⲆᐃⲆᐃᐃᐃ, _w.ⲆᐃΔⲆⵠᐃⲆ, 8, 3, "p", 0.15);
            qx.ⵠⲆⲆⵠⵠΔΔ(qx.ᐃΔΔⵠⲆ.ⲆⵠⵠⲆⵠ, _w.ⲆⲆⲆⵠⵠⲆⵠ, 8, 4, "w", 0.15);
            qx.ⵠⲆⲆⵠⵠΔΔ(qx.ᐃΔΔⵠⲆ.ⵠⲆⲆⲆᐃ, _w.ᐃⲆⵠⲆΔᐃᐃ, 8, 3, "d", 0.09);
            qx.ⲆᐃⲆⵠΔⲆΔ(qx.sample.ΔΔΔⲆⵠ, qx.ΔΔⲆⲆ.ΔΔΔⲆⵠ, 0.15);
            qx.ⲆᐃⲆⵠΔⲆΔ(qx.sample.ⲆᐃᐃⲆᐃⲆᐃ, qx.ΔΔⲆⲆ.ⲆᐃᐃⲆᐃⲆᐃ, 0.2);
            qx.ⲆᐃⲆⵠΔⲆΔ(qx.sample.ΔⵠᐃⵠΔⵠΔ, qx.ΔΔⲆⲆ.ΔⵠᐃⵠΔⵠΔ, 1);
            qx.ⲆᐃⲆᐃⵠ.ⲆΔΔΔⲆΔⲆⲆⵠ = new ax(12, this.sample.ΔᐃⲆᐃᐃⵠⵠ, this.sample.ΔᐃΔⲆΔΔᐃ, 5000, 0.05, 0.4, _w.ᐃᐃᐃᐃⵠΔᐃ.ⲆⵠΔⲆΔ, 3000, {
                x: _r.ⵠΔᐃⵠⲆⵠⵠ,
                y: _r.ΔⵠᐃⵠⲆⵠⵠ,
                w: mx.w,
                ᐃⲆᐃ: mx.ᐃⲆᐃ
            }, {
                x: _r.ⵠΔᐃⵠⲆⵠⵠ - 2300,
                y: _r.ΔⵠᐃⵠⲆⵠⵠ - 4000,
                w: mx.w,
                ᐃⲆᐃ: mx.ᐃⲆᐃ
            }, {
                x: _r.ⵠΔᐃⵠⲆⵠⵠ - 1500,
                y: _r.ΔⵠᐃⵠⲆⵠⵠ - 2000,
                w: mx.w,
                ᐃⲆᐃ: mx.ᐃⲆᐃ
            });
            qx.ⲆᐃⲆᐃⵠ.ᐃⵠⵠᐃⲆᐃΔΔⵠ = new ax(12, this.sample.ΔΔⵠΔᐃΔⲆ, this.sample.ΔⲆᐃᐃⲆⲆᐃ, 5000, 0.03, 0.25, _w.ᐃᐃᐃᐃⵠΔᐃ.ⲆⵠΔⲆΔ, 3000, {
                x: 0,
                y: _r.ΔⵠᐃⵠⲆⵠⵠ + 800,
                w: _r.ⵠΔᐃⵠⲆⵠⵠ - 2300,
                ᐃⲆᐃ: mx.ᐃⲆᐃ
            }, {
                x: -100,
                y: _r.ΔⵠᐃⵠⲆⵠⵠ - 300,
                w: _r.ⵠΔᐃⵠⲆⵠⵠ - 100,
                ᐃⲆᐃ: mx.ᐃⲆᐃ
            }, {
                x: -100,
                y: _r.ΔⵠᐃⵠⲆⵠⵠ + 400,
                w: _r.ⵠΔᐃⵠⲆⵠⵠ - 1400,
                ᐃⲆᐃ: mx.ᐃⲆᐃ
            });
            qx.ⲆᐃⲆᐃⵠ.ΔⵠⵠᐃΔⵠΔ = new ax(12, this.sample.ⵠΔⵠΔΔΔⵠ, this.sample.ΔᐃⲆⵠⵠⲆⲆ, 5000, 0.01, 0.22, _w.ᐃᐃᐃᐃⵠΔᐃ.ⲆⵠΔⲆΔ, 3000, {
                x: -100,
                y: -100,
                w: mx.w + 200,
                ᐃⲆᐃ: _r.ΔⵠᐃⵠⲆⵠⵠ - 1000
            }, {
                x: -100,
                y: -100,
                w: mx.w + 200,
                ᐃⲆᐃ: _r.ΔⵠᐃⵠⲆⵠⵠ + 600
            }, {
                x: -100,
                y: -100,
                w: mx.w + 200,
                ᐃⲆᐃ: _r.ΔⵠᐃⵠⲆⵠⵠ + 100
            });
            for (var a = 0; a < 8; a++) {
                qx.ⵠᐃΔΔ[a] = new gx(a);
            }
            qx.ⵠᐃΔΔ[0].ⲆⵠᐃⲆⲆ(nx.ΔⵠᐃⲆ);
            qx.loaded = 1;
        };
        this.ⲆⲆⵠⵠᐃⲆᐃΔΔ = function () {
            if (!this.transition && mx.ΔΔΔΔⲆ.now < 460000) {
                this.transition = 1;
            }
        };
        this.ᐃᐃᐃᐃⲆ = function () {
            if (this.ΔΔⵠⵠΔ && this.loaded) {
                for (var a in qx.sample) {
                    var b = qx.sample[a];
                    if (typeof b === "object") {
                        for (var c = 0; c < b.length; c++) {
                            qx.ΔΔⲆⲆ[a].stop(b[c]);
                        }
                    } else {
                        qx.ΔΔⲆⲆ[a].stop(b);
                    }
                }
                for (c = 0; c < qx.ⵠᐃΔΔ.length; c++) {
                    qx.ⵠᐃΔΔ[c].ᐃΔᐃⲆᐃⵠⲆ();
                }
            }
        };
        this.select = function () {
            if (qx.ΔΔⵠⵠΔ) {
                qx.ᐃᐃᐃᐃⲆ();
            } else {
                if (!qx.loaded) {
                    qx.ⲆⵠᐃⲆⲆ();
                }
                qx.ⵠᐃΔΔ[0].ΔⵠᐃⲆ = nx.ΔⵠᐃⲆ;
                qx.ⵠᐃΔΔ[0].ΔᐃᐃⵠΔᐃⲆ = 0;
                qx.ⲆⲆⵠⵠᐃⲆᐃΔΔ();
            }
            qx.ΔΔⵠⵠΔ = !qx.ΔΔⵠⵠΔ;
        };
    }();
    var rx = new function () {
        this.ᐃΔⲆᐃⵠⵠⲆ = function () {
            this.ΔΔⲆⵠⲆ = 81;
            this.ⲆⵠⵠΔᐃ = 68;
            this.ⵠΔΔⵠⵠ = 90;
            this.ⵠⲆⲆⵠΔⲆⲆ = 83;
        };
        this.ⲆΔᐃΔⲆΔⵠ = function () {
            this.ΔΔⲆⵠⲆ = 65;
            this.ⲆⵠⵠΔᐃ = 68;
            this.ⵠΔΔⵠⵠ = 87;
            this.ⵠⵠⲆⵠΔ = 83;
        };
        this.ⵠᐃⲆⲆᐃ = 0;
        this.ⵠⲆⲆⵠΔⲆⲆ = 1;
        this.ⲆᐃⲆⵠΔΔⵠ = 49;
        this.ΔⵠΔΔΔΔⵠ = 50;
        this.ᐃᐃⵠⵠⲆⵠΔ = 51;
        this.ᐃⲆΔᐃⵠΔⲆ = 52;
        this.ⵠⲆⲆⵠᐃⵠΔⲆᐃ = 53;
        this.ΔᐃΔⲆⲆⵠΔ = 17;
        this.ᐃᐃⲆⵠᐃⵠⵠ = 37;
        this.ⲆΔᐃΔᐃΔΔ = 39;
        this.ⵠⲆΔᐃᐃΔⵠ = 38;
        this.ⵠⵠⲆᐃᐃΔⵠ = 40;
        this.ⵠᐃⲆⲆⵠⲆΔ = 32;
        this.ᐃⲆᐃΔⲆΔⵠ = 82;
        this.ᐃⵠⲆⲆᐃᐃⲆ = 71;
        this.ⲆᐃΔΔᐃΔᐃ = 86;
        this.ⵠΔⲆⲆⵠⵠⲆ = 66;
        this.ⲆΔᐃΔⲆΔⵠ();
        this.keys = new Array(255);
        for (var a = 0; a < 255; a++) {
            this.keys[a] = this.ⵠᐃⲆⲆᐃ;
        }
        this.up = function (a) {
            var b = Math.min(a.charCode || a.keyCode, 255);
            this.keys[b] = this.ⵠᐃⲆⲆᐃ;
        };
        this.down = function (a) {
            var b = Math.min(a.charCode || a.keyCode, 255);
            if (b == this.ΔΔⲆⵠⲆ || b == this.ᐃᐃⲆⵠᐃⵠⵠ) {
                this.ΔᐃⵠᐃΔⵠⵠ();
            } else if (b == this.ⵠΔΔⵠⵠ || this.ⵠⲆΔᐃᐃΔⵠ == b) {
                this.ⵠⲆⵠᐃᐃⲆⵠ();
            } else if (b == this.ⵠⲆⲆⵠΔⲆⲆ || this.ⲆΔᐃᐃᐃⵠᐃⵠⲆ == b) {
                this.ⵠΔⵠⲆⲆΔΔ();
            } else if (this.ⲆⵠⵠΔᐃ == b || b == this.ⲆΔᐃΔᐃΔΔ) {
                this.ΔⲆⵠⵠⵠⵠΔ();
            }
            this.keys[b] = this.ⵠⲆⲆⵠΔⲆⲆ;
            return b;
        };
        this.ΔᐃⵠᐃΔⵠⵠ = function () {
            this.keys[this.ⲆⵠⵠΔᐃ] = this.ⵠᐃⲆⲆᐃ;
            this.keys[this.ⲆΔᐃΔᐃΔΔ] = this.ⵠᐃⲆⲆᐃ;
        };
        this.ΔⲆⵠⵠⵠⵠΔ = function () {
            this.keys[this.ΔΔⲆⵠⲆ] = this.ⵠᐃⲆⲆᐃ;
            this.keys[this.ᐃᐃⲆⵠᐃⵠⵠ] = this.ⵠᐃⲆⲆᐃ;
        };
        this.ⵠΔⵠⲆⲆΔΔ = function () {
            this.keys[this.ⵠΔΔⵠⵠ] = this.ⵠᐃⲆⲆᐃ;
            this.keys[this.ⵠⲆΔᐃᐃΔⵠ] = this.ⵠᐃⲆⲆᐃ;
        };
        this.ⵠⲆⵠᐃᐃⲆⵠ = function () {
            this.keys[this.ⵠⵠⲆⵠΔ] = this.ⵠᐃⲆⲆᐃ;
            this.keys[this.ⵠⵠⲆᐃᐃΔⵠ] = this.ⵠᐃⲆⲆᐃ;
        };
        this.ᐃΔⲆΔᐃᐃᐃ = function () {
            this.keys[this.ⲆⵠⵠΔᐃ] = this.ⵠᐃⲆⲆᐃ;
            this.keys[this.ⲆΔᐃΔᐃΔΔ] = this.ⵠᐃⲆⲆᐃ;
            this.keys[this.ΔΔⲆⵠⲆ] = this.ⵠᐃⲆⲆᐃ;
            this.keys[this.ᐃᐃⲆⵠᐃⵠⵠ] = this.ⵠᐃⲆⲆᐃ;
            this.keys[this.ⵠΔΔⵠⵠ] = this.ⵠᐃⲆⲆᐃ;
            this.keys[this.ⵠⲆΔᐃᐃΔⵠ] = this.ⵠᐃⲆⲆᐃ;
            this.keys[this.ⵠⵠⲆⵠΔ] = this.ⵠᐃⲆⲆᐃ;
            this.keys[this.ⵠⵠⲆᐃᐃΔⵠ] = this.ⵠᐃⲆⲆᐃ;
        };
        this.ᐃᐃΔⲆⲆΔΔ = function () {
            return this.keys[this.ΔΔⲆⵠⲆ] || this.keys[this.ᐃᐃⲆⵠᐃⵠⵠ];
        };
        this.ᐃᐃⲆⲆⲆⵠⲆ = function () {
            return this.keys[this.ⲆⵠⵠΔᐃ] || this.keys[this.ⲆΔᐃΔᐃΔΔ];
        };
        this.ᐃⵠΔⵠΔᐃΔ = function () {
            return this.keys[this.ⵠΔΔⵠⵠ] || this.keys[this.ⵠⲆΔᐃᐃΔⵠ];
        };
        this.ᐃⲆΔⲆⲆΔΔ = function () {
            return this.keys[this.ⵠⵠⲆⵠΔ] || this.keys[this.ⵠⵠⲆᐃᐃΔⵠ];
        };
        this.ⲆΔᐃⲆⲆᐃⲆⵠⲆ = function () {
            return this.keys[this.ΔᐃΔⲆⲆⵠΔ];
        };
        this.ⵠⵠΔᐃⵠΔᐃΔⲆ = function () {
            return this.keys[this.ⲆᐃⲆⵠΔΔⵠ];
        };
        this.ⵠᐃᐃΔⲆⲆⵠᐃᐃ = function () {
            return this.keys[this.ΔⵠΔΔΔΔⵠ];
        };
        this.ΔⲆⵠⲆⵠᐃⲆΔΔ = function () {
            return this.keys[this.ᐃᐃⵠⵠⲆⵠΔ];
        };
        this.ᐃᐃⲆΔⵠᐃⲆᐃᐃ = function () {
            return this.keys[this.ᐃⲆΔᐃⵠΔⲆ];
        };
        this.ⲆⲆᐃᐃΔΔⵠᐃⲆ = function () {
            return this.keys[this.ⵠᐃⲆⲆⵠⲆΔ];
        };
        this.ᐃⵠⲆⲆⵠΔᐃΔᐃ = function () {
            return this.keys[this.ᐃⲆᐃΔⲆΔⵠ];
        };
        this.ⲆΔⵠⲆⵠⵠΔΔⵠ = function () {
            return this.keys[this.ᐃⵠⲆⲆᐃᐃⲆ];
        };
        this.ⲆⲆⲆᐃᐃᐃⵠⲆⵠ = function () {
            return this.keys[this.ⲆᐃΔΔᐃΔᐃ];
        };
        this.ⲆᐃᐃΔΔᐃΔᐃΔ = function () {
            return this.keys[this.ⵠΔⲆⲆⵠⵠⲆ];
        };
    }();
    var sx = new function () {
        this.ⵠⲆⲆⵠΔⲆⲆ = 0;
        this.ⵠᐃⲆⲆᐃ = 1;
        this.IDLE = 2;
        this.ΔⵠΔᐃⲆⵠⲆ = 0;
        this.ᐃΔᐃᐃⲆⵠᐃⵠⵠ = 1;
        this.ᐃⲆᐃᐃ = {
            y: 0,
            x: 0
        };
        this.ⲆΔᐃⵠⲆⲆᐃ = 0;
        this.ΔⲆΔⲆⵠⵠⵠ = 0;
        this.angle = 0;
        this.state = this.IDLE;
        this.ᐃⵠᐃᐃ = this.ΔⵠΔᐃⲆⵠⲆ;
        this.down = function () {
            this.state = this.ⵠⲆⲆⵠΔⲆⲆ;
        };
        this.up = function () {
            this.state = this.ⵠᐃⲆⲆᐃ;
        };
        this.ᐃⵠⲆ = function () {
            if (this.ⲆΔᐃⵠⲆⲆᐃ != this.ᐃⲆᐃᐃ.x || this.ΔⲆΔⲆⵠⵠⵠ != this.ᐃⲆᐃᐃ.y) {
                this.ⲆΔᐃⵠⲆⲆᐃ = this.ᐃⲆᐃᐃ.x;
                this.ΔⲆΔⲆⵠⵠⵠ = this.ᐃⲆᐃᐃ.y;
                return true;
            } else {
                return vn;
            }
        };
    }();
    var tx = 0;
    var ux = 0;
    var vx = new function (f, e, i) {
        this.ⲆⲆ = f;
        this.ᐃ = e;
        this.ⵠΔⵠⵠΔⲆⵠ = {
            translate: {
                x: 0,
                y: 0
            },
            style: document.getElementById("loading").style,
            ᐃⵠⲆ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.ⵠΔⵠⵠΔⲆⵠ.style.position = "absolute";
        this.ⵠΔⵠⵠΔⲆⵠ.style.display = "inline-block";
        this.ⵠΔⵠⵠΔⲆⵠ.ᐃⵠⲆ();
        this.ⲆΔΔⲆⵠ = true;
        this.stop = function () {
            this.ⲆΔΔⲆⵠ = mh;
        };
        this.ᐃⲆΔΔⲆⵠᐃ = {
            total: 1
        };
        var j = this;
        function k() { }
        var n = 0;
        function o(a) {
            if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
                return 1;
            } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
                return 0;
            } else {
                return 1;
            }
        }
        this.ΔⲆᐃΔⲆ = function () {
            j.ᐃⵠⲆ();
            if (++n == 40) {
                j.stop();
                k();
                return;
            }
            Gf.setTimeout(j.ΔⲆᐃΔⲆ, 33);
        };
        this.ᐃᐃᐃᐃⲆ = function (a) {
            k = a;
            j.ΔⲆᐃΔⲆ();
        };
        new Date().getTime();
        Object.keys(jb).length;
        console.log(undefined, undefined);
        for (var p in jb) {
            if (o(jb[p]) === 0) {
                0;
            }
        }
        console.log(lj, undefined);
        function q() {
            if (this.ⲆⲆⲆⲆⲆⲆⲆ !== 0) {
                return this.ⲆⲆⲆⲆⲆⲆⲆ;
            } else {
                this.ⲆⲆⲆⲆⲆⲆⲆ = 2;
                this.src = this.ᐃⵠⲆⵠΔ;
                return 0;
            }
        }
        function l(a) {
            this.ⲆⲆⲆⲆⲆⲆⲆ = 1;
        }
        var g = 0;
        function s() {
            console.log(undefined);
            if (g !== 1) {
                g = 1;
                console.log(undefined);
                if (Eb !== kt) {
                    kt();
                }
                Eb();
                var a = Z.ᐃΔᐃⵠΔΔⲆ("server");
                if (a !== null) {
                    ⲆΔⲆΔ.ΔⵠΔⵠⲆⲆΔ = 1;
                    ⲆΔⲆΔ.ⲆᐃⲆᐃⲆ = [{
                        nu: 0,
                        m: 100,
                        i: "server" + a + ".starve.io",
                        p: 443,
                        a: a,
                        ssl: 1
                    }];
                }
                ⲆΔⲆΔ.ᐃⵠⵠⲆᐃΔᐃⵠᐃ();
                setTimeout(i, 100);
            }
        }
        function d() {
            let a = function () {
                ⲆΔⲆΔ.ΔⲆⵠΔⲆⲆⲆ(s);
            };
            if (document.fonts && document.fonts.check) {
                if (document.fonts.check("1em Baloo Paaji")) {
                    setTimeout(a, 100);
                } else {
                    setTimeout(d, 100);
                }
            } else {
                setTimeout(a, 1000);
            }
        }
        function u() {
            this.ᐃΔⲆΔᐃΔΔ++;
            console.warn(`Image (${this.src}) failed to load, attempt ${this.ᐃΔⲆΔᐃΔΔ}`, this);
            if (this.ᐃΔⲆΔᐃΔΔ > 3) {
                console.warn("Failed to load image too many times");
            }
            var a = this.ᐃΔⲆΔᐃΔΔ;
            var b = this.src;
            var c = o(b) === 0 ? 10000 : 2000;
            setTimeout(function () {
                for (var c in wt) {
                    if (b.indexOf(wt[c]) !== -1) {
                        jb[c] = new Image();
                        jb[c].onload = l;
                        jb[c].onerror = u;
                        jb[c].ᐃΔⲆΔᐃΔΔ = a;
                        jb[c].src = b;
                        break;
                    }
                }
            }, c);
        }
        function c(a) {
            for (var b in jb) {
                var c = jb[b];
                if (typeof c === "string" && o(c) === a) {
                    jb[b] = new Image();
                    jb[b].ⲆⲆⲆⲆⲆⲆⲆ = 0;
                    jb[b].ᐃΔⲆΔᐃΔΔ = 0;
                    jb[b].onload = l;
                    jb[b].onerror = u;
                    jb[b].ΔⵠᐃΔⲆⲆⵠ = q;
                    jb[b].ᐃⵠⲆⵠΔ = c;
                }
            }
        }
        c(1);
        c(0);
        ku(1, "l", 20, "#000");
        d();
        Em();
        this.ᐃⵠⲆ = function () {
            this.ⵠΔⵠⵠΔⲆⵠ.translate.x = (no - 500) / 2;
            this.ⵠΔⵠⵠΔⲆⵠ.translate.y = (oo - 150) / 2;
            var a = 2500 / (40 - n + 1) - 48;
            this.ⵠΔⵠⵠΔⲆⵠ.translate.y -= a;
            this.ⵠΔⵠⵠΔⲆⵠ.ᐃⵠⲆ();
        };
        this.ⵠΔⵠⵠΔⲆⵠ.ᐃⵠⲆ();
        this.Δⵠᐃⵠ = function () {
            try {
                ep();
            } catch (a) { }
            this.ᐃⵠⲆ();
        };
    }(fo, mo, function () {
        Om();
        px = new Kw(fo, mo);
        (jx = new Lw(fo, mo)).ΔⵠΔΔⵠⲆⲆⵠΔ();
        ox = new Zf(fo, mo);
        mx = new Qf();
        nx = new Xf();
        vx.ᐃᐃᐃᐃⲆ(function () {
            vx.ⵠΔⵠⵠΔⲆⵠ.style.display = "none";
            jx.ΔΔⵠⵠΔ();
        });
    });
    function wx() {
        try {
            Gf.Widget.adsRefresh();
        } catch (a) { }
    }
    Gf.onbeforeunload = function () {
        if (px.ⲆΔΔⲆⵠ) {
            return "Are you sure you want quit starve.io ;-; ?";
        }
    };
    $q();
    (function b(a) {
        Gf.requestAnimationFrame(b);
        tx = (a - ux) / 1000;
        ux = a;
        tx = tx > 1 ? 1 : tx;
        if (px.ⲆΔΔⲆⵠ) {
            px.Δⵠᐃⵠ();
        } else {
            mo.clearRect(0, 0, no, oo);
            if (vx.ⲆΔΔⲆⵠ) {
                vx.Δⵠᐃⵠ();
            } else if (jx.ⲆΔΔⲆⵠ) {
                jx.Δⵠᐃⵠ();
            } else if (ox.ⲆΔΔⲆⵠ) {
                ox.Δⵠᐃⵠ();
            }
        }
    })(0);
    var xx = 0;
    function yx() {
        zx.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", true);
        zx.send();
    }
    var zx = new XMLHttpRequest();
    zx.onreadystatechange = function () {
        if (this.readyState === 4) {
            this.status;
        }
    };
    var Ax = "https://token.starve.io/";
    var Bx = "https://token2.starve.io/";
    var Cx = 0;
    var Dx = 1;
    var Ex = 4;
    var Fx = gs;
    var Gx = mn;
    var Hx = vg;
    var Ix = 0;
    Gf.ⵠΔⵠⵠᐃⵠⵠ = function () {
        Ix = 1;
    };
    var Jx = {
        ⵠⲆⵠⲆⵠΔⲆΔᐃ: "ACCESS_TOKEN"
    };
    var Kx = document.createElement("script");
    Kx.type = "text/javascript";
    Kx.async = y;
    Kx.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
    Kx.addEventListener("load", function (a) {
        Gf.XPayStationWidget.init(Jx);
        Gf.XPayStationWidget.on("status-done", Xx);
    }, nq);
    var Lx = document.getElementsByTagName("head")[0];
    function Mx(a) {
        if (a > 0) {
            return a * a;
        } else {
            return a;
        }
    }
    function Nx(a) {
        return Gf.String.fromCharCode(a);
    }
    Lx.appendChild(Kx);
    Gf.fbAsyncInit = function () {
        Ux();
        console.log(Go);
    };
    (function (a, b, c) {
        var d;
        var e = a.getElementsByTagName(b)[0];
        if (!a.getElementById(c)) {
            (d = a.createElement(b)).id = c;
            d.src = "https://connect.facebook.net/en_US/sdk.js";
            e.parentNode.insertBefore(d, e);
        }
    })(document, "script", "facebook-jssdk");
    var Ox = undefined;
    var Px = undefined;
    function Qx() {
        Gf.gapi.auth2.init({
            client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
            scope: "https://www.googleapis.com/auth/userinfo.profile"
        }).then(a => {
            (Ox = a).isSignedIn.listen(Rx);
            Ox.currentUser.listen(Sx);
            if (Ox.isSignedIn.get()) {
                Ox.signIn();
            }
            Tx();
        });
    }
    function Rx(a) { }
    function Sx(a) {
        if (Gx === undefined && od !== Px && (Gx = Px.getAuthResponse().id_token) !== Ab) {
            Fx = Cx;
            Hx = Px.getBasicProfile().getId();
            Gf.ⵠΔⵠⵠᐃⵠⵠ();
            return;
        }
        if (qs !== a && a.isSignedIn() === gq) {
            Hx = (Px = a).id;
            Hx = Px.getBasicProfile().getId();
            Gx = Px.getAuthResponse().id_token;
            Fx = Cx;
            Gf.ⵠΔⵠⵠᐃⵠⵠ();
        }
    }
    function Tx() {
        if (Ox) {
            Px = Ox.currentUser.get();
        }
    }
    function Ux() {
        if (Gf.FB) {
            Gf.FB.init({
                xfbml: true,
                appId: "642017356260407",
                cookie: true,
                version: "v15.0"
            });
        }
        if (Hx === yl) {
            (function () {
                try {
                    if (Gf.FB && Gf.FB.getUserID()) {
                        Hx = Gf.FB.getUserID();
                        if (Gx === lj) {
                            Gf.FB.getLoginStatus(function () {
                                Fx = Dx;
                                Gx = Gf.FB.getAuthResponse().accessToken;
                                Gf.ⵠΔⵠⵠᐃⵠⵠ(Hx);
                            });
                        }
                    }
                } catch (a) { }
                try {
                    Hx = Px.getBasicProfile().getId();
                } catch (a) { }
            })();
        }
    }
    function Vx(a) {
        var b = new XMLHttpRequest();
        b.open("GET", Ax + "setRegion?token=" + Gx + "&userid=" + Hx + "&region=" + a);
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                if (b.responseText !== "0") {
                    jx.Δᐃⵠᐃ(jx.ᐃΔⲆⲆᐃ);
                } else {
                    jx.Δᐃⵠᐃ(jx.ᐃΔⲆⲆⵠ);
                }
            }
        };
        b.send();
    }
    function Wx() {
        if (jx.ⵠⲆⵠⲆΔ >= 300 || jx.ⲆᐃᐃⵠᐃᐃⲆ <= 0) {
            var a = document.getElementById("account_nickname_input").value.trim();
            document.getElementById("account_nickname_input").value = a;
            if (a.length >= 1 && a.length <= 20) {
                var b = new XMLHttpRequest();
                b.open("GET", Ax + "changeNickname?token=" + Gx + "&userid=" + Hx + "&nickname=" + encodeURIComponent(a));
                b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                b.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
                        var a = Number(b.responseText);
                        if (a > 0) {
                            jx.ⵠⲆⵠⲆΔ -= a;
                        }
                        jx.ⲆᐃᐃⵠᐃᐃⲆ = 1;
                        jx.Δᐃⵠᐃ(jx.ᐃΔᐃⵠᐃ);
                    }
                };
                b.send();
            }
        }
    }
    function Xx() {
        var a = new XMLHttpRequest();
        a.open("GET", Ax + "claimBread?userid=" + Hx);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
                var b = Number(a.responseText);
                if (!isNaN(b)) {
                    jx.ⵠⲆⵠⲆΔ = b;
                }
            }
        };
        a.send();
    }
    function Yx(a, b) {
        if (b > jx.ⵠⲆⵠⲆΔ) {
            jx.Δᐃⵠᐃ(jx.ΔᐃⲆΔⵠ);
        } else {
            var c = new XMLHttpRequest();
            c.open("GET", Ax + "buyKit?token=" + Gx + "&userid=" + Hx + "&kit=" + a);
            c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            c.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
                    var a = JSON.parse(c.responseText);
                    jx.ⵠⲆⵠⲆΔ -= b;
                    jx.ⵠⲆΔⵠⲆ = Date.now() + Number(a);
                }
            };
            c.send();
        }
    }
    function Zx(b, c, d, f) {
        b = b === fh ? jx.ΔΔⲆᐃΔⲆⲆ : b;
        c = c === Ur ? jx.ⵠᐃⲆᐃᐃⵠΔ : c;
        d = d === undefined ? jx.ΔⲆⲆᐃⵠⵠᐃ : d;
        f = f === undefined ? jx.ᐃⵠᐃΔⵠⲆⲆ : f;
        if (b !== jx.ΔΔⲆᐃΔⲆⲆ || jx.ⵠᐃⲆᐃᐃⵠΔ !== c || jx.ΔⲆⲆᐃⵠⵠᐃ !== d || f !== jx.ᐃⵠᐃΔⵠⲆⲆ) {
            jx.ΔΔⲆᐃΔⲆⲆ = b;
            jx.ⵠᐃⲆᐃᐃⵠΔ = c;
            jx.ΔⲆⲆᐃⵠⵠᐃ = d;
            jx.ᐃⵠᐃΔⵠⲆⲆ = f;
            if (jx.ΔΔⲆᐃΔⲆⵠ === f) {
                f = "0";
            } else if (f === jx.ⵠΔⲆⲆΔⵠⵠ) {
                f = "1";
            } else if (f === jx.ⵠΔΔⲆΔⵠᐃ) {
                f = "2";
            } else if (f === jx.ⲆⲆⲆᐃⲆⵠᐃ) {
                f = "3";
            } else if (jx.ΔⵠᐃⲆᐃⵠⵠ === f) {
                f = "4";
            } else if (jx.ⲆⲆⲆᐃΔⲆΔ === f) {
                f = "5";
            }
            if (c === jx.ΔΔⲆⲆΔΔⲆ) {
                c = "total";
            } else if (c === jx.ΔⲆᐃⵠᐃᐃᐃ) {
                c = "normal";
            } else if (jx.ⲆᐃⲆᐃᐃΔⲆ === c) {
                c = "zombie";
            } else if (c === jx.ⲆⵠΔᐃⲆⲆⵠ) {
                c = "vampire";
            } else if (jx.ⵠΔᐃΔⲆΔⲆ === c) {
                c = "forest";
            }
            if (b === jx.ΔⲆΔⲆⲆⲆⲆ) {
                b = "all";
            }
            if (b === jx.ΔᐃⵠΔᐃⲆᐃ) {
                b = "week";
            }
            if (b === jx.ΔⲆⵠᐃΔΔΔ) {
                b = "today";
            }
            if (d === jx.ΔΔⵠΔⵠᐃᐃ) {
                d = "kill";
            } else if (d === jx.ⵠⲆⵠⲆΔⲆΔ) {
                d = "score";
            } else if (jx.ΔᐃⲆⲆⲆⵠᐃ === d) {
                d = "time";
            }
            var g = new XMLHttpRequest();
            g.open("GET", Ax + "leaderboard?range=" + b + "&mode=" + c + "&sort=" + d + "&season=" + f);
            g.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            g.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && g.responseText !== "0") {
                    for (var a = JSON.parse(g.responseText), b = "", c = 0; a.length > c; c++) {
                        ⵠᐃⵠⵠΔ = a[c];
                        var d = ⵠᐃⵠⵠΔ[1];
                        try {
                            if (d.indexOf("Starver#") === -1) {
                                d = Gf.decodeURIComponent(Gf.escape(Gf.atob(d)));
                            }
                        } catch (a) { }
                        b += "<div class=\"lineLeaderboard\">";
                        b += "<div class=\"rank\">";
                        b += c + 1 + "";
                        b += "</div>";
                        b += "<div class=\"name\">";
                        b += d;
                        b += "</div>";
                        b += "<div class=\"lvl\">";
                        b += jx.ⵠᐃΔᐃⵠΔⲆ(ⵠᐃⵠⵠΔ[6]) + 1 + "";
                        b += "</div>";
                        b += "<div class=\"kills\">";
                        b += ⵠᐃⵠⵠΔ[5] + "";
                        b += "</div>";
                        b += "<div class=\"time\">";
                        b += ⵠᐃⵠⵠΔ[4] + "";
                        b += "</div>";
                        b += "<div class=\"score\">";
                        b += ⵠᐃⵠⵠΔ[3] + "";
                        b += "</div>";
                        b += "</div>";
                    }
                    document.getElementById("leaderboard").innerHTML = b;
                }
            };
            g.send();
        }
    }
    function $x(a) {
        if (Hx) {
            var b = new XMLHttpRequest();
            b.open("GET", Ax + "xsolla?userid=" + Hx + "&item=" + a);
            b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            b.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
                    Jx.access_token = b.responseText;
                    Gf.XPayStationWidget.init(Jx);
                    Gf.XPayStationWidget.open();
                }
            };
            b.send();
        }
    }
    function _x(a, b) {
        if (jx.ΔⲆⵠⵠⵠ <= 0) {
            if (b > jx.ⵠⲆⵠⲆΔ) {
                jx.Δᐃⵠᐃ(jx.ΔᐃⲆΔⵠ);
            } else {
                jx.ΔⲆⵠⵠⵠ = 2;
                jx.ΔⵠⲆⵠⵠΔⵠ = 0;
                jx.ⲆⵠΔᐃⵠⵠⵠ = 100;
                var c = new XMLHttpRequest();
                c.open("GET", Ax + "buySpin?token=" + Gx + "&userid=" + Hx + "&spin=" + a);
                c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                c.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        if (c.responseText !== "0") {
                            var a = JSON.parse(c.responseText);
                            jx.ⲆⲆⲆΔΔᐃⲆⵠⵠ(Math.PI * a.rand * 2, a.type, a.id);
                            jx.ⵠⲆⵠⲆΔ -= b;
                        } else {
                            jx.ΔⲆⵠⵠⵠ = 0;
                        }
                    }
                };
                c.send();
            }
        }
    }
})();
