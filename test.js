(function () {
  var m = 47;
  if (m == 10) {
    m = 35;
  }
  const _a = window;
  var Ac = 53;
  var ge = 223;
  if (ge > 7) {
    ge = 225;
  }
  if (Ac === 5) {
    Ac = 222;
  }
  let Of = 130;
  var Yf = 254;
  if (Yf === 4) {
    Yf = 161;
  }
  var ng = 172;
  var Wg = 141;
  if (Wg >= 1) {
    Wg = 182;
  }
  var aj = 43;
  if (aj === 0) {
    aj = 90;
  }
  if (ng >= 14) {
    ng = 45;
  }
  const bj = function (a) {
    let b = "";
    for (let c = 0; c < a.length; c++) {
      b += _a.String.fromCharCode(a[c] ^ Of++ % 255);
    }
    return b;
  };
  var g = 81;
  Math.floor(20[20 .ⲆⵠᐃᐃⲆⵠⲆ]);
  Math.floor(178[178 .ᐃΔΔⲆⵠᐃⲆ]);
  var cj = 179;
  if (cj >= 12) {
    cj = 246;
  }
  if (g > 9) {
    g = 138;
  }
  Math.floor(252[252 .ΔⵠΔⲆⲆΔΔΔⵠ]);
  Math.floor(169[169 .ΔⲆΔⲆᐃⲆⲆ]);
  const dj = 0;
  const b = 9;
  const d = 19;
  const v = 19;
  const ej = undefined;
  const c = 11;
  const p = 13;
  const C = 18;
  const f = 255;
  const z = 17;
  const y = -8;
  const w = -4;
  const P = 100;
  const k = true;
  const A = 8;
  const x = false;
  const J = 2;
  const M = 256;
  const B = 15;
  const D = 20;
  const E = 6;
  const I = 18;
  const S = 4;
  const Q = 7;
  const T = 16;
  const F = 2;
  const R = 13;
  const j = 14;
  const W = 1 << 2;
  const G = 1 << 11;
  const L = 6;
  const O = 12;
  const N = 4096;
  const q = 13;
  const H = 255;
  const U = 10;
  const Y = 5;
  const K = 4;
  const V = k;
  const X = 4;
  const Z = 1;
  const _ = 3;
  const ee = 9;
  let ie = ej;
  const te = String.fromCharCode;
  const oe = te(101);
  const ae = te(118);
  const re = te(97);
  const se = te(108);
  const he = 12;
  let le;
  const fj = 3;
  const be = 17;
  let de = ej;
  const gj = 6;
  const me = 2;
  let ce;
  let hj;
  const ij = ej;
  let Te = ij;
  const jj = x;
  let ze = ej;
  const kj = 6;
  let we = [];
  let Pe = ij;
  const lj = V;
  let Ae = "_";
  let mj = ej;
  const nj = 13;
  let Me;
  const oj = x;
  let De;
  let pj = ej;
  let qj = ej;
  let rj = ej;
  let sj = ej;
  const tj = 3;
  let Fe;
  const uj = 11;
  let je;
  let vj = ej;
  const wj = 19;
  let Le;
  const xj = 13;
  let Ne = ij;
  let yj = ij;
  let zj = ej;
  let Aj = ej;
  const Bj = 12;
  const Ke = 5;
  let Ve = ij;
  const Cj = 10;
  const Ze = 256;
  const $e = 15;
  let ei;
  let Dj;
  const Ej = 17;
  const ni = {};
  ni.get = function (a, b) {
    if (b !== "ᐃΔⲆⵠⲆⲆᐃ") {
      const a = function () {
        _a.addEventListener("mousemove", function () {
          a();
        });
      };
      a();
    }
    return _a.Reflect.get(...arguments);
  };
  const oi = 7;
  const ai = 100;
  const ri = 18;
  let si;
  let Fj = ej;
  let Gj = ij;
  const Hj = 6;
  const ui = 1;
  let bi;
  let Ij;
  const Jj = 12;
  const mi = ij;
  let ci;
  const Kj = 8;
  const Ci = 3;
  const Ti = 10;
  let fi = ij;
  const Lj = 20;
  const yi = 255;
  const wi = 15;
  const Pi = 9;
  const ki = 16;
  let Ai;
  let Mj = ij;
  const Nj = 0;
  const Mi = 9;
  let Bi = mi;
  let Oj = ej;
  const Pj = 14;
  let Ii;
  const Qj = k;
  const Qi = x;
  let _i;
  const Rj = 5;
  let Ri;
  const Sj = 12;
  let Wi;
  const Tj = 255;
  const Li = 6;
  let Oi;
  let Uj = mi;
  let Vj = ej;
  let Wj = ij;
  const Xj = 17;
  let Yi;
  let Yj;
  let Zj;
  let $j;
  let _j = ej;
  let ak = ij;
  let bk = 0;
  if (!_a.WebAssembly || !_a.WebAssembly.instantiate) {
    ᐃΔΔΔᐃⵠⵠΔⲆ();
  }
  const ck = 14;
  const dk = 4;
  const ek = 3;
  const fk = {
    Date: Date
  };
  _a.WebAssembly.instantiate(Uint8Array.from(_a.atob(""), function (a) {
    return a.charCodeAt(0);
  }), fk).then(function (a) {
    ie = a.instance;
    le = ie.exports;
    de = le.memory;
    ce = de.buffer;
    hj = le.__pin;
    Te = le.__unpin;
    ze = le.__new;
    Pe = le.__collect;
    Ae = "_";
    for (let b = 0; b < 31; b++) {
      we[b] = le[Ae + b];
    }
    mj = le.__rtti_base;
    Me = new Float32Array(ce);
    qj = new Float64Array(ce);
    pj = new BigUint64Array(ce);
    rj = new Uint32Array(ce);
    De = new Uint16Array(ce);
    sj = new Uint8Array(ce);
    Fe = new BigInt64Array(ce);
    vj = new Int32Array(ce);
    je = new Int16Array(ce);
    Le = new Int8Array(ce);
    Oj = we[9];
    Ii = we[3];
    fi = we[5];
    Aj = we[15];
    zj = we[21];
    ak = we[25];
    Fj = we[26];
    Uj = we[20];
    Bi = we[13];
    Wi = we[14];
    Ri = we[2];
    Oi = we[1];
    ei = we[17];
    _i = we[6];
    _j = we[27];
    Zj = we[24];
    Mj = we[30];
    Gj = we[18];
    Yj = we[10];
    Ve = we[8];
    ci = we[16];
    bi = we[29];
    Ai = we[7];
    Ij = we[23];
    Ne = we[11];
    si = we[12];
    Vj = we[0];
    Wj = we[19];
    yj = we[4];
    Dj = we[28];
    Yi = we[22];
    bk = 1;
    if ($j) {
      $j();
    }
  });
  const gk = 7;
  const hk = 14;
  const ik = 15;
  const jk = 7;
  const kk = 15;
  const lk = function (a) {
    return rj[(mj + 4 >>> 2) + (a << 1)];
  };
  function mk(a) {
    return 31 - Math.clz32(a >>> 6 & 31);
  }
  const nk = 10;
  const ok = 19;
  const pk = lj;
  const qk = 255;
  const rk = mi;
  const sk = 11;
  const tk = ej;
  function uk(a, b, c) {
    if (c) {
      switch (a) {
        case 2:
          return Me;
        case 3:
          return qj;
      }
    } else {
      switch (a) {
        case 0:
          if (b) {
            return Le;
          } else {
            return sj;
          }
        case 1:
          if (b) {
            return je;
          } else {
            return De;
          }
        case 2:
          if (b) {
            return vj;
          } else {
            return rj;
          }
        case 3:
          if (b) {
            return Fe;
          } else {
            return pj;
          }
      }
    }
  }
  const vk = 20;
  const wk = 3;
  const xk = 19;
  const yk = V;
  const zk = 17;
  const Ak = 256;
  function Bk(b) {
    const c = rj[b + y >>> 2];
    const d = lk(c);
    const e = mk(d);
    let f = d & W ? b : rj[b + 4 >>> 2];
    const g = d & 2 ? rj[b + 12 >>> 2] : rj[f + w >>> 2] >>> e;
    return uk(e, d & G, d & 4096).subarray(f >>>= e, f + g);
  }
  const Ck = yk;
  const Dk = 6;
  function Ek(b, c, d, e, f) {
    const i = b ^ 42585;
    const a = ((c + 63269) * 214013 + 2531011) % 4294967296;
    const j = (e + 7127) % 65408;
    const k = ~(f & 3097) & f | ~(f & 3097) & 3097;
    const h = wb(i, a, ((32380 + d) * 1664525 + 1013904223) % 4294967296);
    (function (b, c, d, e) {
      const f = b ^ 14882;
      const g = (0 << (c >> 16 & 255)) + (16 << (c & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255));
      const a = (1013904223 + (31545 + d) * 1664525) % 4294967296;
      const i = ~(e & 8004) & e | ~(e & 8004) & 8004;
      const j = wb(f, g, a);
      (function (b, c, d, e) {
        const f = (2531011 + (57648 + b) * 214013) % 4294967296;
        const i = ~(c & 49335) & c | ~(c & 49335) & 49335;
        const a = ~(d & 24451) & (d | 24451);
        const j = e ^ 54663;
        const k = function (b, c) {
          const d = b ^ 39186;
          const e = ~(c & 58051) & c | ~(c & 58051) & 58051;
          const f = Bb(d, e, d, e, d);
          const g = function (b, c, d) {
            const e = b ^ 25204;
            const f = ((c + 7012) * 2147483629 + 2147483587) % 2147483647;
            const g = ~(d & 14905) & (d | 14905);
            const a = Rb(e, f, g, e, f);
            const h = function (a, b) {
              const c = a ^ 53453;
              const d = b ^ 14727;
              const e = function (b, c, d, e) {
                const f = b ^ 23439;
                const g = ~(c & 59552) & 59552 | ~(c & 59552) & c;
                const a = (0 << (d >> 16 & 255)) + (16 << (d >> 8 & 255)) + (8 << (d & 255)) + (24 << (d >> 24 & 255));
                const i = ((e + 26423) * 1664525 + 1013904223) % 4294967296;
                const j = function (b, c, d, e) {
                  const f = (b + 46126) % 65302;
                  const g = ~(c & 54318) & (c | 54318);
                  const a = ((49155 + d) * 1103515245 + 12345) % 2147483648;
                  const i = ((e + 34085) * 1664525 + 1013904223) % 4294967296;
                  const j = Fb(f, g, a, i);
                  rt(f, g, a, i, f);
                  return j ^ 10218;
                }(f, g, a, i);
                Ew(f, g, a, i, f);
                return ~(j & 22422) & (j | 22422);
              }(c, d, c, d);
              Jr(c, d, c, d);
              return ~(e & 61999) & (e | 61999);
            }(g, e);
            return (24 << ((a ^ h) >> 0 & 255)) + (0 << ((a ^ h) >> 16 & 255)) + (16 << ((a ^ h) >> 24 & 255)) + (8 << ((a ^ h) >> 8 & 255));
          }(e, d, e);
          return ((23886 + (f ^ g)) * 22695477 + 1) % 4294967296;
        }(f, i);
        const h = hb(a, j, f, i, a);
      })(i, f, g, a);
    })(j, k, i, a);
    return ~(h & 24322) & (h | 24322);
  }
  const Fk = 18;
  const Gk = "development";
  const Hk = 100;
  const Ik = "production";
  const Jk = 2;
  const Kk = 14;
  const Lk = oj;
  function Mk(a) {
    this.ⵠⵠⵠΔ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor(Math.random() * (this.ⵠⵠⵠΔ - 1));
  }
  Mk.prototype.random = function () {
    this.state = (this.a * this.state + this.c) % this.ⵠⵠⵠΔ;
    return this.state / this.ⵠⵠⵠΔ;
  };
  Mk.prototype.ⵠⵠⵠΔᐃⵠᐃ = function (a) {
    this.state = a;
  };
  ⵠⲆᐃΔⲆΔᐃ = 10000;
  ⵠᐃⲆᐃⲆᐃⲆ = [];
  const Nk = 13;
  const Ok = 17;
  var Pk = new Mk();
  const Qk = 100;
  Pk.ⵠⵠⵠΔᐃⵠᐃ(new Date().getTime());
  for (var Rk = 0; ⵠⲆᐃΔⲆΔᐃ > Rk; Rk++) {
    ⵠᐃⲆᐃⲆᐃⲆ.push(Pk.random());
  }
  function Sk(b, c, d, e) {
    const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
    const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
    const j = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const k = function (c, e, f, i, j, k) {
      const a = c ^ 10715;
      const m = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
      const n = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
      const h = i ^ 40782;
      const g = j ^ 41301;
      const l = ~(k & 12091) & (k | 12091);
      const o = gn(a, m, n, h, g, l);
      gn(a, m, n, h, g, l);
      An(a, m, n, h, g);
      const b = (o | 3006) & ~(o & 3006);
      return ~(b & 24460) & (b | 24460);
    }(f, i, a, j, f, i);
    const h = Fn(a, j, f, i, a);
    gn(j, f, i, a, j, f);
    const g = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
    return (g | 38630) & ~(g & 38630);
  }
  function Tk(c, e, f, i, j, k) {
    const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
    const m = ~(e & 49976) & e | ~(e & 49976) & 49976;
    const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
    const h = i ^ 52219;
    const g = (j + 3575) % 65503;
    const l = ~(k & 6932) & k | ~(k & 6932) & 6932;
    const o = Mn(a, m, n, h, g);
    const b = function (c, d, e, f, i, j) {
      const a = c ^ 30142;
      const k = (d + 63025) % 65493;
      const m = e ^ 30777;
      const h = ((45939 + f) * 22695477 + 1) % 4294967296;
      const g = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
      const l = (j | 45652) & ~(j & 45652);
      const n = Mn(a, k, m, h, g);
      Xk(l, a, k, m, h);
      fn(g, l, a, k, m, h);
      return n ^ 60048;
    }(l, a, m, n, h, g);
    mn(l, a, m, n, h, g);
    const d = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
    return ~(d & 42138) & d | ~(d & 42138) & 42138;
  }
  const Uk = 14;
  const Vk = 0;
  const Wk = 255;
  function Xk(c, d, e, f, i) {
    const j = ((c + 14772) * 2147483629 + 2147483587) % 2147483647;
    const a = d ^ 63080;
    const k = ((e + 60304) * 22695477 + 1) % 4294967296;
    const m = ~(f & 5467) & 5467 | ~(f & 5467) & f;
    const h = (i | 40165) & ~(i & 40165);
    const g = function (b, c, d, e) {
      const f = (b | 57611) & ~(b & 57611);
      const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
      const a = d ^ 62842;
      const j = ~(e & 1179) & e | ~(e & 1179) & 1179;
      const k = tn(f, i, a, j);
      const h = xn(f, i, a, j);
      Sk(f, i, a, j);
      const g = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> 8 & 255));
      return ~(g & 63304) & (g | 63304);
    }(j, a, k, m);
    const l = Fn(h, j, a, k, m);
    const n = qn(h, j, a, k, m, h);
    return ((28765 + ((16 << ((g ^ l) >> 24 & 255)) + (8 << ((g ^ l) >> 16 & 255)) + (24 << ((g ^ l) >> 32 & 255)) + (32 << ((g ^ l) >> 8 & 255)) ^ n)) * 1664525 + 1013904223) % 4294967296;
  }
  const Yk = 16;
  const Zk = 17;
  const $k = 6;
  const _k = 4;
  function Ho(c, d, e, f, i) {
    const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
    const a = d ^ 58614;
    const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
    const m = f ^ 40810;
    const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
    const g = Ln(j, a);
    const l = Sk(k, m, h, j);
    (function (b, c, d, e) {
      const f = (b + 34282) % 65336;
      const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
      const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
      const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
      const k = function (b, c) {
        const d = ~(b & 41406) & b | ~(b & 41406) & 41406;
        const e = ((c + 17922) * 1103515245 + 12345) % 2147483648;
        const f = On(d, e, d);
        bn(e, d, e, d);
        const g = en(e, d, e, d, e);
        return ((42346 + (f ^ 18573 ^ g)) * 2147483629 + 2147483587) % 2147483647;
      }(f, i);
      const h = In(a, j, f, i, a);
      Ln(j, f);
      const g = (58498 + (k ^ h)) % 65531;
    })(a, k, m, h);
    const n = (24 << ((g ^ l) >> 24 & 255)) + (32 << ((g ^ l) >> 16 & 255)) + (8 << ((g ^ l) >> 32 & 255)) + (16 << ((g ^ l) >> 8 & 255));
    return ~(n & 13644) & n | ~(n & 13644) & 13644;
  }
  function en(b, c, d, e, f) {
    const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
    const a = (c + 39144) % 65406;
    const j = d ^ 34575;
    const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
    const h = (f | 25975) & ~(f & 25975);
    const g = tn(i, a, j, k);
    In(h, i, a, j, k);
    mn(h, i, a, j, k, h);
    return (g | 19326) & ~(g & 19326) ^ 36297;
  }
  function tn(b, c, d, e) {
    const f = b ^ 11762;
    const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
    return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
  }
  function nn(b, c, d, e, f) {
    const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
    const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
    const j = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
    const k = (1 + (e + 41324) * 22695477) % 4294967296;
    const h = (f | 19607) & ~(f & 19607);
    const g = Bn(i, a);
    In(j, k, h, i, a);
    fn(j, k, h, i, a, j);
    const l = ~(g & 49323) & 49323 | ~(g & 49323) & g;
    return ~(l & 46567) & (l | 46567);
  }
  function on(c, d, e, f, i, j) {
    const a = (1013904223 + (c + 28824) * 1664525) % 4294967296;
    const k = (1013904223 + (13210 + d) * 1664525) % 4294967296;
    const m = ~(e & 32165) & 32165 | ~(e & 32165) & e;
    const h = (24 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 32 & 255));
    const g = (1 + (39199 + i) * 22695477) % 4294967296;
    const l = j ^ 33037;
    const n = function (b, c, d) {
      const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const f = (c | 44117) & ~(c & 44117);
      const i = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
      const a = zn(e, f, i, e, f);
      const j = qn(i, e, f, i, e, f);
      const k = function (a, b) {
        const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
        const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
        const e = fn(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
          const i = b ^ 64570;
          const a = (2531011 + (c + 41768) * 214013) % 4294967296;
          const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
          const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
          const h = (f | 21896) & ~(f & 21896);
          const g = function (a, b) {
            const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
            const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
            const e = function (b, c, d) {
              const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
              const f = (c | 55665) & ~(c & 55665);
              const g = (d + 54633) % 65404;
              const a = Xk(e, f, g, e, f);
              (function (c, e, f, i, j, k) {
                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                const n = (f | 14774) & ~(f & 14774);
                const h = (i | 48802) & ~(i & 48802);
                const g = ~(j & 24998) & (j | 24998);
                const l = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                const o = sn(a, m, n, h);
                const b = In(g, l, a, m, n);
                const d = sn(h, g, l, a);
              })(g, e, f, g, e, f);
              xn(g, e, f, g);
              return ~(a & 43875) & (a | 43875) ^ 15116;
            }(c, d, c);
            An(d, c, d, c, d);
            tn(c, d, c, d);
            return (e | 17943) & ~(e & 17943) ^ 21791;
          }(i, a);
          bn(j, k, h, i);
          const l = nn(a, j, k, h, i);
        })(c, d, c, d, c);
        Bn(d, c);
        return (e | 58283) & ~(e & 58283) ^ 8337;
      }(i, e);
      const h = (16 << ((a ^ j) >> 32 & 255)) + (24 << ((a ^ j) >> 24 & 255)) + (32 << ((a ^ j) >> 8 & 255)) + (8 << ((a ^ j) >> 16 & 255));
      return (8 << ((h ^ k) >> 32 & 255)) + (16 << ((h ^ k) >> 8 & 255)) + (32 << ((h ^ k) >> 16 & 255)) + (24 << ((h ^ k) >> 24 & 255));
    }(a, k, m);
    xn(h, g, l, a);
    return ((34159 + (n ^ 2959 ^ sn(k, m, h, g))) * 1103515245 + 12345) % 2147483648;
  }
  const an = 8;
  const rn = 1;
  function sn(b, c, d, e) {
    const f = ~(b & 33107) & (b | 33107);
    const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
    const a = ~(d & 32053) & (d | 32053);
    const i = e ^ 12240;
    const j = function (b, c, d, e) {
      const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
      const i = (1 + (50595 + c) * 22695477) % 4294967296;
      const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
      const j = e ^ 18768;
      const k = Mn(f, i, a, j, f);
      const h = Ho(i, a, j, f, i);
      const g = Tn(a, j);
      return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ g)) * 1664525 + 1013904223) % 4294967296;
    }(f, g, a, i);
    xn(f, g, a, i);
    return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ Mn(f, g, a, i, f))) * 214013) % 4294967296;
  }
  const hn = 14;
  function gn(b, c, d, e, f, i) {
    const a = ~(b & 36133) & (b | 36133);
    const j = (c | 13670) & ~(c & 13670);
    const k = (d | 31390) & ~(d & 31390);
    const h = e ^ 64081;
    const g = f ^ 7550;
    const l = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (Rn(a, j, k, h, g) ^ xn(l, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ An(h, g, l, a, j))) * 1103515245) % 2147483648;
  }
  const ln = 9;
  const un = V;
  function bn(b, c, d, e) {
    const f = (b | 15432) & ~(b & 15432);
    const g = c ^ 12315;
    const a = d ^ 38714;
    const i = e ^ 58084;
    const j = Tk(f, g, a, i, f, g);
    xn(a, i, f, g);
    return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ mn(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
  }
  const dn = 255;
  const vn = 15;
  function mn(b, c, d, e, f, i) {
    const a = b ^ 23409;
    const j = c ^ 26380;
    const k = ((f + 33017) * 1103515245 + 12345) % 2147483648;
    const h = i ^ 42490;
    return ((19056 + (tn(a, j, d ^ 53590, e ^ 36633) ^ tn(k, h, a, j))) * 22695477 + 1) % 4294967296;
  }
  const cn = 19;
  const pn = 5;
  const Cn = 11;
  function Tn(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const f = mn(d, e, d, e, d, e);
    const g = mn(d, e, d, e, d, e);
    tn(d, e, d, e);
    const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
    return ~(a & 55949) & 55949 | ~(a & 55949) & a;
  }
  function fn(c, e, f, i, j, k) {
    const a = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
    const m = (e | 41551) & ~(e & 41551);
    const n = (24 << (f >> 24 & 255)) + (16 << (f >> 32 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 8 & 255));
    const h = ~(i & 32641) & (i | 32641);
    const g = ((j + 35582) * 214013 + 2531011) % 4294967296;
    const l = ~(k & 1090) & (k | 1090);
    const o = qn(a, m, n, h, g, l);
    en(a, m, n, h, g);
    tn(l, a, m, n);
    const b = ~(o & 8077) & 8077 | ~(o & 8077) & o;
    return ~(b & 3708) & (b | 3708);
  }
  function zn(b, c, d, e, f) {
    const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
    const j = (d | 31275) & ~(d & 31275);
    const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
    const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
    const g = mn(i, a, j, k, h, i);
    const l = tn(a, j, k, h);
    On(i, a, j);
    return (24 << ((g ^ l) >> 16 & 255)) + (8 << ((g ^ l) >> 8 & 255)) + (32 << ((g ^ l) >> 24 & 255)) + (16 << ((g ^ l) >> 32 & 255)) ^ 31710;
  }
  const yn = 4;
  const wn = 3;
  const Pn = Lk;
  const kn = 12;
  function An(b, c, d, e, f) {
    const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
    const j = (2531011 + (22845 + d) * 214013) % 4294967296;
    const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
    const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
    const g = mn(i, a, j, k, h, i);
    const l = fn(a, j, k, h, i, a);
    tn(j, k, h, i);
    return (8 << ((g ^ l) >> 24 & 255)) + (16 << ((g ^ l) >> 16 & 255)) + (24 << ((g ^ l) >> 8 & 255)) + (32 << ((g ^ l) >> 32 & 255)) ^ 35444;
  }
  function xn(b, c, d, e) {
    const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const i = c ^ 57623;
    const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const j = ~(e & 24601) & e | ~(e & 24601) & 24601;
    const k = Bn(f, i);
    Bn(a, j);
    Fn(f, i, a, j, f);
    const h = ~(k & 43902) & 43902 | ~(k & 43902) & k;
    return (h | 8862) & ~(h & 8862);
  }
  const Jn = 256;
  function Mn(b, c, d, e, f) {
    const i = b ^ 62008;
    const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const j = ((d + 46531) * 22695477 + 1) % 4294967296;
    const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
    const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
    const g = Xk(i, a, j, k, h);
    qn(i, a, j, k, h, i);
    return ((3037 + (g ^ 57467 ^ Fn(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
  }
  function Bn(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (Rn(c, d, c, d, c) ^ In(d, c, d, c, d))) % 65357 ^ tn(c, d, c, d))) * 22695477) % 4294967296;
  }
  const Dn = 7;
  const En = 19;
  function In(b, c, d, e, f) {
    const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const a = c ^ 50118;
    const j = d ^ 41620;
    const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
    const g = qn(i, a, j, k, h, i);
    qn(a, j, k, h, i, a);
    return (2531011 + (53616 + ((g | 43477) & ~(g & 43477) ^ tn(j, k, h, i))) * 214013) % 4294967296;
  }
  const Sn = 13;
  const Qn = 20;
  const _n = oj;
  function Fn(c, d, e, f, i) {
    const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
    const a = (d + 52922) % 65337;
    const k = e ^ 25250;
    const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
    const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
    const g = en(j, a, k, m, h);
    const l = Ln(j, a);
    en(k, m, h, j, a);
    const n = (1 + (19675 + (g ^ l)) * 22695477) % 4294967296;
    return ~(n & 7922) & n | ~(n & 7922) & 7922;
  }
  function Rn(c, d, e, f, i) {
    const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const a = d ^ 55978;
    const k = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
    const m = ~(f & 30642) & (f | 30642);
    const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
    const g = In(j, a, k, m, h);
    const l = An(j, a, k, m, h);
    tn(j, a, k, m);
    const n = (16 << ((g ^ l) >> 32 & 255)) + (24 << ((g ^ l) >> 8 & 255)) + (8 << ((g ^ l) >> 24 & 255)) + (32 << ((g ^ l) >> 16 & 255));
    return ~(n & 23686) & (n | 23686);
  }
  const jn = 100;
  const Wn = 10;
  const Gn = 15;
  function Ln(b, c) {
    const d = b ^ 24508;
    const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const f = nn(d, e, d, e, d);
    const g = Rn(e, d, e, d, e);
    zn(d, e, d, e, d);
    const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
    return ~(a & 40927) & 40927 | ~(a & 40927) & a;
  }
  function On(b, c, d) {
    const e = b ^ 23323;
    const f = (2531011 + (61713 + c) * 214013) % 4294967296;
    const g = (d | 24198) & ~(d & 24198);
    const a = nn(e, f, g, e, f);
    const h = nn(g, e, f, g, e);
    nn(f, g, e, f, g);
    return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
  }
  const Nn = ej;
  function qn(b, c, d, e, f, i) {
    const a = d ^ 8102;
    const j = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
    const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
    const h = (1 + (62237 + i) * 22695477) % 4294967296;
    const g = Tn((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
    const l = Tn(a, j);
    Tn(k, h);
    return (45290 + (g ^ l)) % 65334 ^ 55575;
  }
  const Hn = 0;
  const Un = 18;
  const Yn = 2;
  const Kn = 9;
  ΔⲆᐃ = {
    ⵠⲆΔⵠᐃΔⵠ: () => new Promise((a, b) => {
      _a.grecaptcha.ready(function () {
        _a.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (Bf) {
            a(0);
          } else {
            console.log(ej);
            b(c);
          }
        });
      });
    }),
    ⲆⵠⲆⲆⵠⲆⵠⵠⵠ: function (a) {
      _a.open(a, "_blank").focus();
    },
    ᐃᐃⵠᐃⲆⵠΔ: function (a) {
      _a.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ΔⵠⵠᐃΔΔⲆ: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return false;
        }
      }
      return pk;
    },
    ⲆΔⵠⵠⲆᐃᐃΔᐃ: function (a, b) {
      if (a.length != b.length) {
        return false;
      }
      for (var c = 0; c < a.length; c++) {
        if (typeof a == "object") {
          if (!this.ΔⵠⵠᐃΔΔⲆ(a[c], b[c])) {
            return jj;
          }
        } else if (a[c] != b[c]) {
          return false;
        }
      }
      return true;
    },
    ⵠⲆᐃⲆᐃᐃⵠ: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    ΔᐃⲆΔΔᐃΔ: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    ⲆⲆⵠⵠᐃⵠΔⲆᐃ: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    ΔᐃⲆᐃΔⲆΔ: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    ᐃⵠⵠⵠΔⵠⲆ: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < 0) {
        return -1;
      } else {
        return 1;
      }
    },
    ΔⲆᐃΔΔⲆᐃ: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    ᐃΔᐃⲆⲆΔⵠ: function (b, c, d, e) {
      var f = e - c;
      var g = d - b;
      return Math.atan2(f, g);
    },
    ⲆᐃᐃΔⲆⵠⵠ: function (a, b) {
      return Math.asin(this.ΔᐃⲆᐃΔⲆΔ(a, b) / (this.ᐃⵠⵠⵠΔⵠⲆ(a) * this.ᐃⵠⵠⵠΔⵠⲆ(b))) * this.sign(this.ΔⲆᐃΔΔⲆᐃ(a, b));
    },
    ⲆΔⲆⲆⵠᐃᐃ: function (a) {
      ⲆᐃᐃⲆⲆⵠⵠ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ⲆᐃᐃⲆⲆⵠⵠ);
      if (b === null) {
        return null;
      } else {
        return b[1];
      }
    },
    ⲆⲆᐃᐃⵠⵠⲆ: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    ᐃⵠᐃᐃᐃⲆⲆ: function (a, b) {
      return this.ⲆᐃᐃΔⲆⵠⵠ({
        x: 1,
        y: 0
      }, this.ΔᐃⲆΔΔᐃΔ(a, b));
    },
    ⲆⵠⲆⲆ: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    ᐃᐃᐃᐃᐃΔⲆ: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    ᐃᐃᐃᐃᐃⲆⲆ: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    ⲆⲆᐃⲆᐃᐃΔ: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    ΔᐃⲆⵠⵠⵠᐃⵠⲆ: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    ⲆΔΔⲆᐃᐃⲆᐃᐃ: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    ⵠⲆΔΔⲆ: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    ΔΔⵠⲆⵠΔᐃ: function (a, b) {
      return Math.floor((a - b) / 2);
    },
    ᐃΔΔᐃΔⲆⵠ: function (a, b) {
      return {
        x: (a.x + b.x) / 2,
        y: (a.y + b.y) / 2
      };
    },
    ΔⲆⲆᐃⲆΔⲆ: function () {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -1;
      }
    },
    ⵠⲆᐃⵠᐃⵠⵠⲆⵠ: function (b, c, d) {
      var e = this.ΔⲆⲆᐃⲆΔⲆ();
      var f = this.ΔⲆⲆᐃⲆΔⲆ();
      var g = Math.random() * Math.PI / 2;
      return {
        x: Math.floor(b + Math.sin(g) * e * d),
        y: Math.floor(c + Math.cos(g) * f * d)
      };
    },
    ⲆΔΔⵠΔⲆΔⵠⵠ: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.ΔⵠⲆ = d;
    },
    ⲆⲆᐃᐃⵠⵠⲆΔΔ: function (a) {
      ⵠᐃΔΔ = [];
      ⵠᐃΔΔ.push.apply(ⵠᐃΔΔ, a);
      var b = [];
      while (ⵠᐃΔΔ.length > 0) {
        var c = Math.floor(Math.random() * ⵠᐃΔΔ.length);
        b.push(ⵠᐃΔΔ[c]);
        ⵠᐃΔΔ.splice(c, 1);
      }
      return b;
    },
    ⲆⵠⵠΔΔⲆᐃ: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * 100;
      }
      return a;
    },
    ⵠⲆⲆⵠⵠΔᐃ: function (b) {
      if (typeof b != "number") {
        return "0";
      }
      if (b >= 10000) {
        var c = Math.floor(Math.log10(b)) - 2;
        var d = Math.max(0, 3 - c);
        var e = Math.floor(b / 1000).toString();
        if (d) {
          for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
            g++;
          }
          if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
            e = e.substring(0, e.length - 1);
          }
        }
        return e += "k";
      }
      return b.toString();
    },
    ΔΔⲆⵠΔᐃⵠ: function (a) {
      return a * (2 - a);
    },
    ΔΔⲆⲆⲆⵠⲆ: function (a) {
      return --a * a * a + 1;
    },
    ΔⲆΔⲆⲆ: function (a) {
      if (a < 0.5) {
        return a * 2 * a;
      } else {
        return (4 - a * 2) * a - 1;
      }
    },
    ⵠⵠᐃⵠⲆⵠᐃ: function (a) {
      if (a < 0.5) {
        return a * 4 * a * a;
      } else {
        return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
      }
    },
    ⲆΔᐃΔᐃᐃᐃΔΔ: function (a) {
      if (a < 0.5) {
        return a * 8 * a * a * a;
      } else {
        return 1 - --a * 8 * a * a * a;
      }
    },
    ΔᐃⲆⵠⲆⲆᐃ: function (a) {
      return 1 - --a * a * a * a;
    },
    ⲆⵠⲆⲆΔⲆⲆ: function (a) {
      return 1 + --a * a * a * a * a;
    },
    ᐃⵠⲆⲆ: function (b, c, d, e, f, g) {
      this.ⵠΔⲆ = b;
      this.ⵠΔΔ = c;
      this.max = d;
      this.min = e;
      this.ⲆⵠΔΔᐃΔΔ = f;
      this.ᐃⵠΔⲆΔᐃΔ = g;
      this.ⵠⵠᐃⲆΔ = 0;
      this.ΔⵠΔ = function () {
        if (this.ⵠΔⲆ) {
          if ((a = this.ⵠΔΔ + Gx * this.ⲆⵠΔΔᐃΔΔ) > this.max) {
            this.ⵠΔΔ = this.max;
            this.ⵠΔⲆ = false;
            return pk;
          }
          this.ⵠΔΔ = a;
        } else {
          var a;
          if ((a = this.ⵠΔΔ - Gx * this.ᐃⵠΔⲆΔᐃΔ) < this.min) {
            this.ⵠΔΔ = this.min;
            this.ⵠΔⲆ = true;
          } else {
            this.ⵠΔΔ = a;
          }
        }
      };
      return _n;
    },
    ΔⵠᐃΔⵠ: function (b, c, d, e, f, g) {
      this.ⲆⲆⲆᐃᐃ = b;
      this.ᐃᐃΔΔⵠ = c;
      this.ᐃᐃⲆᐃⲆ = d;
      this.ⲆⵠⵠᐃⲆ = e;
      this.x = f;
      this.ⲆⵠⲆⵠⵠ = g;
      this.ⲆᐃⵠⵠⵠⲆᐃ = function () {
        this.x = this.ⲆΔⲆᐃᐃΔⲆⲆⲆ;
        this.ᐃᐃΔΔⵠ = 0;
      };
      this.ᐃΔⵠⵠΔ = function (a) {
        if (a !== this.ⲆⵠⲆⵠⵠ) {
          this.ⲆⵠⲆⵠⵠ = a;
          this.ⲆⵠⵠᐃⲆ = this.x;
          this.ᐃᐃΔΔⵠ = 0;
        }
        if (this.ⲆⵠⲆⵠⵠ !== this.x) {
          this.ᐃᐃΔΔⵠ += Gx;
          if (this.ᐃᐃΔΔⵠ > this.ᐃᐃⲆᐃⲆ) {
            this.x = this.ⲆⵠⲆⵠⵠ;
          } else {
            var b = this.ⲆⲆⲆᐃᐃ(this.ᐃᐃΔΔⵠ / this.ᐃᐃⲆᐃⲆ);
            this.x = this.ⲆⵠⵠᐃⲆ + (this.ⲆⵠⲆⵠⵠ - this.ⲆⵠⵠᐃⲆ) * b;
          }
        }
      };
    },
    ⵠΔᐃΔΔΔⲆ: function (b, c, d, e, f, g, a, i, j) {
      this.ⲆⲆⲆᐃᐃ = b;
      this.ᐃᐃΔΔⵠ = c;
      this.ᐃᐃⲆᐃⲆ = d;
      this.ⲆⵠⵠᐃⲆ = e;
      this.ⲆᐃⵠⲆΔ = f;
      this.x = g;
      this.y = a;
      this.ⲆⵠⲆⵠⵠ = i;
      this.ΔᐃⲆⲆⵠⵠⲆ = j;
      this.ᐃΔⵠⵠΔ = function (a) {
        if (a.x != this.ⲆⵠⲆⵠⵠ || a.y != this.ΔᐃⲆⲆⵠⵠⲆ) {
          this.ⲆⵠⲆⵠⵠ = a.x;
          this.ΔᐃⲆⲆⵠⵠⲆ = a.y;
          this.ⲆⵠⵠᐃⲆ = this.x;
          this.ⲆᐃⵠⲆΔ = this.y;
          this.ᐃᐃΔΔⵠ = 0;
        }
        if (this.ⲆⵠⲆⵠⵠ != this.x || this.ΔᐃⲆⲆⵠⵠⲆ != this.y) {
          this.ᐃᐃΔΔⵠ += Gx;
          if (this.ᐃᐃΔΔⵠ > this.ᐃᐃⲆᐃⲆ) {
            this.x = this.ⲆⵠⲆⵠⵠ;
            this.y = this.ΔᐃⲆⲆⵠⵠⲆ;
          } else {
            var b = this.ⲆⲆⲆᐃᐃ(this.ᐃᐃΔΔⵠ / this.ᐃᐃⲆᐃⲆ);
            this.x = this.ⲆⵠⵠᐃⲆ + (this.ⲆⵠⲆⵠⵠ - this.ⲆⵠⵠᐃⲆ) * b;
            this.y = this.ⲆᐃⵠⲆΔ + (this.ΔᐃⲆⲆⵠⵠⲆ - this.ⲆᐃⵠⲆΔ) * b;
          }
        }
      };
    },
    ⵠⵠⵠᐃΔᐃⵠ: function (a) {
      var b = "";
      for (var c = 0; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    ⲆⵠΔΔⲆΔΔ: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[1];
      }
    },
    ⲆΔᐃᐃⵠ: function (a) {
      let b = "";
      const c = a.length;
      for (let d = 0; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    ⲆΔᐃⲆⲆⵠⲆ: function (a, b) {
      if (a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ΔⵠⲆ) {
        return lj;
      } else {
        return jj;
      }
    },
    ⵠᐃᐃᐃΔⵠⵠ: function (b, c, d, e, f, g, a, h) {
      if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
        return 1;
      } else {
        return 0;
      }
    },
    ΔΔⲆⲆΔ: function (a, b, c) {
      return (1 - c) * a + c * b;
    },
    ⵠΔⵠᐃΔⲆᐃ: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  Math.sign = Math.sign || function (a) {
    if (a === 0) {
      return 0;
    } else if (a > 0) {
      return 1;
    } else {
      return -1;
    }
  };
  const Vn = _n;
  const Xn = 5;
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ⵠⵠⵠᐃᐃΔⲆⵠᐃ;
  };
  const Zn = 3;
  const $n = _n;
  function eo(a, b) {
    const c = (a | 41825) & ~(a & 41825);
    const d = (1 + (b + 45094) * 22695477) % 4294967296;
    const e = pt(c, d);
    (function (b, c, d) {
      const e = (24 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (0 << (b >> 16 & 255)) + (8 << (b & 255));
      const f = c ^ 39087;
      const g = (8 << (d & 255)) + (0 << (d >> 24 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 8 & 255));
      const a = Eb(e, f, g, e, f, g);
      Eb(e, f, g, e, f, g);
    })(c, d, c);
    return ~(e & 35715) & 35715 | ~(e & 35715) & e;
  }
  function io(b, c, d, e, f) {
    Ii(ox, b, c, d, e, f);
    const g = Hr(px[0], px[1], px[2], px[3]);
    const a = function (b, c, d, e, f) {
      bi(ox, b, c, d, e, f);
      const g = to(px[0], px[1]);
      const a = Ox(px[2], px[3], px[4], px[0], px[1]);
      return (8 << ((g ^ a) >> 8 & 255)) + (0 << ((g ^ a) & 255)) + (24 << ((g ^ a) >> 16 & 255)) + (16 << ((g ^ a) >> 24 & 255));
    }(px[4], px[0], px[1], px[2], px[3]);
    return (8 << ((g ^ a) & 255)) + (0 << ((g ^ a) >> 8 & 255)) + (24 << ((g ^ a) >> 24 & 255)) + (16 << ((g ^ a) >> 16 & 255));
  }
  function to(a, b) {
    Dj(ox, a, b);
    const c = Gr(px[0], px[1], px[0], px[1], px[0]);
    const d = function (b, c, d, e) {
      Bi(ox, b, c, d, e);
      const f = mx(px[0], px[1], px[2], px[3], px[0]);
      const g = Gr(px[1], px[2], px[3], px[0], px[1]);
      return (17631 + (f ^ g)) % 65488;
    }(px[1], px[0], px[1], px[0]);
    return (24 << ((c ^ d) >> 24 & 255)) + (16 << ((c ^ d) >> 8 & 255)) + (8 << ((c ^ d) >> 16 & 255)) + (0 << ((c ^ d) & 255));
  }
  (function (a) {
    var b = $n;
    if (typeof ΔΔΔᐃᐃΔⵠ == "function" && ΔΔΔᐃᐃΔⵠ.ⵠᐃΔᐃΔⵠⵠⲆⲆ) {
      ΔΔΔᐃᐃΔⵠ(a);
      b = true;
    }
    if (typeof ⵠⲆΔⵠⲆᐃⵠ === "object") {
      ΔⵠⲆⵠᐃΔⵠⲆⲆ.exports = a();
      b = lj;
    }
    if (!b) {
      var c = _a.ᐃΔⲆⲆ;
      var d = _a.ᐃΔⲆⲆ = a();
      d.ΔᐃⲆⲆᐃᐃᐃᐃΔ = function () {
        _a.ᐃΔⲆⲆ = c;
        return d;
      };
    }
  })(function () {
    function b() {
      for (var a = 0, b = {}; a < arguments.length; a++) {
        var c = arguments[a];
        for (var d in c) {
          b[d] = c[d];
        }
      }
      return b;
    }
    return function a(c) {
      function d(e, f, j) {
        var k;
        if (typeof document != "undefined") {
          if (arguments.length > 1) {
            if (typeof (j = b({
              path: "/"
            }, d.ⲆᐃⲆΔΔᐃᐃ, j)).expires == "number") {
              var m = new Date();
              m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
              j.expires = m;
            }
            try {
              k = JSON.stringify(f);
              if (/^[\{\[]/.test(k)) {
                f = k;
              }
            } catch (a) {}
            f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ⲆΔⲆᐃⲆᐃⵠⲆⲆ ? "; secure" : ""].join("");
          }
          if (!e) {
            k = {};
          }
          for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, g = 0; n.length > g; g++) {
            var p = n[g].split("=");
            var q = p.slice(1).join("=");
            if (q.charAt(0) === "\"") {
              q = q.slice(1, -1);
            }
            try {
              var s = p[0].replace(h, decodeURIComponent);
              q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
              if (this.json) {
                try {
                  q = JSON.parse(q);
                } catch (a) {}
              }
              if (e === s) {
                k = q;
                break;
              }
              if (!e) {
                k[s] = q;
              }
            } catch (a) {}
          }
          return k;
        }
      }
      d.set = d;
      d.get = function (a) {
        return d.call(d, a);
      };
      d.ΔᐃΔᐃΔⵠⲆᐃᐃ = function () {
        return d.apply({
          json: true
        }, [].slice.call(arguments));
      };
      d.ⲆᐃⲆΔΔᐃᐃ = {};
      d.remove = function (a, c) {
        d(a, "", b(c, {
          expires: -1
        }));
      };
      d.ⵠΔΔᐃΔⲆⵠΔᐃ = a;
      return d;
    }(function () {});
  });
  const no = 5;
  const oo = 17;
  const ao = 0;
  const ro = 9;
  var so = document.getElementById("game_canvas");
  const ho = 15;
  var go = so.getContext("2d");
  const lo = 16;
  var uo = so.width;
  var xp = so.height;
  var aq = so.width / 2;
  var bq = so.height / 2;
  const cq = 8;
  const po = 6;
  var Co = {
    x: aq,
    y: bq
  };
  var dq = 1;
  const eq = 0;
  const zo = 11;
  var yo = 1;
  var fq = -1;
  const gq = 10;
  const ko = 1;
  const Ao = 18;
  const xo = k;
  var Jo = "J" + Ra;
  var hq = "S" + $a;
  const iq = 5;
  var Do;
  var jq = _a;
  const Io = 14;
  const So = 12;
  const Qo = 255;
  var _o = (nq = "O") + "N";
  const kq = 7;
  const Ro = 1;
  var jo;
  const lq = String.fromCharCode;
  const Go = lq(101);
  const Lo = lq(118);
  const Oo = lq(97);
  const No = lq(108);
  var qo = 0;
  const Uo = 16;
  var Yo = jq;
  const Ko = 0;
  var Vo;
  const mq = tk;
  const Zo = 15;
  hq = "N";
  const $o = 15;
  const ea = 13;
  var ia = "J";
  var nq = "O" + Ra;
  const oq = 3;
  const oa = 100;
  var aa = Yo;
  const ra = 256;
  const sa = 17;
  const ha = 4;
  const la = 19;
  const ua = 9;
  var ba;
  const pq = 20;
  const va = 7;
  const ma = 6;
  var ca = aa;
  _o = "N" + undefined;
  const pa = oj;
  const Ca = 6;
  const Ta = 17;
  var fa;
  var qq = ca;
  const ya = 11;
  const wa = 16;
  const Pa = 255;
  const ka = 12157249;
  const Aa = 12157249 .ΔⲆΔᐃᐃᐃΔ;
  const xa = `const ⵠⲆΔΔᐃΔᐃ = (typeof ΔΔⵠᐃⲆΔᐃⲆⲆ === "${Aa}") ? 1 : 0; return ⵠⲆΔΔᐃΔᐃ;`;
  var Ja;
  var rq = qq;
  const Ba = 5;
  const Da = 9;
  var Ea;
  function sq(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Sa(a) {
    return _a.String.fromCharCode(a);
  }
  const Qa = 15;
  const Fa = 19;
  var Ra;
  var tq = rq;
  const Wa = 9;
  const Ga = 18;
  const La = 15;
  var Oa;
  const uq = 5;
  const qa = 2;
  var Ha = tq;
  const vq = lj;
  ia = "O";
  const Ya = ej;
  var Ka;
  var wq;
  var xq = Ha = tq;
  var Za = xq;
  var $a = "J" + (Ka = "S");
  const yq = 3;
  so.oncontextmenu = function () {
    return pa;
  };
  const zq = Vn;
  const Aq = 8;
  function Bq(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.ⵠⵠΔΔⲆⵠⲆ = 1;
    return b;
  }
  Jo = "J";
  const Cq = 10;
  const Dq = 14;
  nq = _o;
  const Eq = 17;
  const Fq = 255;
  _o = Ra;
  const Gq = 18;
  Ra = $a;
  nq = $a;
  const Hq = 13;
  const Iq = Lk;
  const Jq = 256;
  ba = fa = $a + (ia += Jo = hq);
  const Kq = 12;
  hq = ia + Jo;
  const Lq = 100;
  Ja = Do = jo = $a + ia;
  const Mq = 7;
  const Nq = 4;
  const Oq = 1;
  const Pq = 14;
  nq = $a + ia;
  Ea = jo;
  _o = $a + ia;
  const Qq = ej;
  const Rq = 6;
  const Sq = 0;
  Oa = Vo = Do;
  const Tq = 16;
  ia = Ra = $a;
  Ka = jo;
  const Uq = 20;
  wq = Do;
  Jo = nq;
  const Vq = 5;
  const Wq = 2;
  var Xq = _a.devicePixelRatio || 1;
  const Yq = 3;
  var Zq = go.ΔⲆΔⵠᐃⵠΔΔⵠ || go.ΔᐃΔⵠΔᐃΔΔΔ || go.ᐃⵠΔᐃΔᐃᐃᐃᐃ || go.ΔⵠⲆΔⲆΔⲆΔΔ || go.ⵠⲆΔⲆΔΔΔⲆⵠ || 1;
  function $q() {
    if (_a.innerWidth != so.width) {
      so.width = _a.innerWidth;
      uo = so.width;
      aq = so.width / 2;
    }
    if (_a.innerHeight != so.height) {
      so.height = _a.innerHeight;
      xp = so.height;
      bq = so.height / 2;
    }
    Co = {
      x: aq,
      y: bq
    };
    var a = so.width;
    var b = so.height;
    yo = fq === -1 ? Xq / Zq : fq;
    so.width = yo * a;
    so.height = b * yo;
    so.style.width = a + "px";
    so.style.height = b + "px";
    go.scale(yo, yo);
    if (zx) {
      zx.ⲆⵠΔ.ⲆⲆⲆᐃⵠⵠᐃ = a;
      zx.ⲆⵠΔ.ᐃⲆᐃΔᐃᐃⵠ = b;
    }
    if (Ix.ⵠΔⲆΔΔ) {
      Ix.ΔⵠΔ();
    } else if (xx.ⵠΔⲆΔΔ) {
      xx.ΔⵠΔ();
    } else if (Cx.ⵠΔⲆΔΔ) {
      Cx.ΔⵠΔ();
    } else if (Ax.ⵠΔⲆΔΔ) {
      Ax.ΔⵠΔ();
    }
  }
  const _q = xo;
  const ar = 20;
  const br = 19;
  var cr = document.getElementById("game_body");
  cr.ondragstart = function () {
    return Vn;
  };
  const dr = 13;
  cr.ondrop = function () {
    return $n;
  };
  cr.onresize = $q;
  (function () {
    var b = 0;
    for (var a = ["ms", "moz", "webkit", "o"], c = 0; c < a.length && !_a.requestAnimationFrame; ++c) {
      _a.requestAnimationFrame = _a[a[c] + "RequestAnimationFrame"];
      _a.cancelAnimationFrame = _a[a[c] + "CancelAnimationFrame"] || _a[a[c] + "CancelRequestAnimationFrame"];
    }
    _a.requestAnimationFrame ||= function (c, d) {
      var e = new Date().getTime();
      var f = Math.max(0, 16 - (e - b));
      var a = _a.setTimeout(function () {
        c(e + f);
      }, f);
      b = e + f;
      return a;
    };
    _a.cancelAnimationFrame ||= function (a) {
      clearTimeout(a);
    };
  })();
  const er = 17;
  function fr(b, c, d, e, f, i) {
    const a = (e | 56845) & ~(e & 56845);
    const j = f ^ 343;
    const k = ((i + 62452) * 22695477 + 1) % 4294967296;
    const h = function (b, c, d) {
      const e = b ^ 50076;
      const f = (2531011 + (35766 + c) * 214013) % 4294967296;
      const g = d ^ 4220;
      const a = rt(e, f, g, e, f);
      const h = kf(g, e, f, g, e, f);
      return (18179 + (a ^ h)) % 65528;
    }(~(b & 10866) & (b | 10866), (c + 60306) % 65449, (d | 58589) & ~(d & 58589));
    nx(a, j, k);
    return h ^ 39446;
  }
  const gr = 255;
  const hr = Vn;
  function ir(b, c, d, e, f) {
    Mj(ox, b, c, d, e, f);
    const g = Xb(px[0], px[1]);
    const a = Xb(px[2], px[3]);
    return (8 << ((g ^ a) >> 24 & 255)) + (0 << ((g ^ a) >> 8 & 255)) + (24 << ((g ^ a) >> 16 & 255)) + (16 << ((g ^ a) & 255));
  }
  const jr = un;
  const kr = 7;
  const lr = 0;
  const mr = function () {
    let b = 0;
    let i = 0;
    let j = 0;
    const k = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 116, 97, 99, 107]);
    const o = ΔⲆᐃ.ⲆΔᐃᐃⵠ([67, 97, 110, 118, 97, 115, 82, 101, 110, 100, 101, 114, 105, 110, 103, 67, 111, 110, 116, 101, 120, 116, 50, 68]);
    const a = ΔⲆᐃ.ⲆΔᐃᐃⵠ([112, 114, 111, 116, 111, 116, 121, 112, 101]);
    const q = ΔⲆᐃ.ⲆΔᐃᐃⵠ([100, 114, 97, 119, 73, 109, 97, 103, 101]);
    ΔⲆᐃ.ⲆΔᐃᐃⵠ([103, 108, 111, 98, 97, 108, 65, 108, 112, 104, 97]);
    const r = ΔⲆᐃ.ⲆΔᐃᐃⵠ([117, 115, 101, 114, 115, 99, 114, 105, 112, 116]);
    const h = ΔⲆᐃ.ⲆΔᐃᐃⵠ([105, 110, 100, 101, 120, 79, 102]);
    const g = ΔⲆᐃ.ⲆΔᐃᐃⵠ([77, 97, 116, 104]);
    ΔⲆᐃ.ⲆΔᐃᐃⵠ([99, 101, 105, 108]);
    const l = ΔⲆᐃ.ⲆΔᐃᐃⵠ([102, 108, 111, 111, 114]);
    const s = ΔⲆᐃ.ⲆΔᐃᐃⵠ([87, 101, 98, 83, 111, 99, 107, 101, 116]);
    const d = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 110, 100]);
    const u = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 105, 103, 110]);
    const m = ΔⲆᐃ.ⲆΔᐃᐃⵠ([102, 105, 108, 108, 82, 101, 99, 116]);
    const c = ΔⲆᐃ.ⲆΔᐃᐃⵠ([103, 117, 105, 102, 121]);
    const p = ΔⲆᐃ.ⲆΔᐃᐃⵠ([101, 118, 97, 108]);
    const v = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 116, 116, 105, 110, 103, 115, 46, 88, 114, 97, 121]);
    const C = ΔⲆᐃ.ⲆΔᐃᐃⵠ([10]);
    const f = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 116, 116, 105, 110, 103, 115, 46, 67, 111, 108, 111, 114, 101, 100, 83, 112, 105, 107, 101, 115]);
    const z = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 83, 112, 105, 107, 101]);
    const y = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 70, 101, 101, 100]);
    const w = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 67, 114, 97, 102, 116]);
    const F = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 82, 101, 99, 121, 99, 108, 101]);
    const A = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 84, 111, 116, 101, 109]);
    ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 116, 116, 105, 110, 103, 115, 46, 69, 120, 116, 114, 97, 99, 116, 111, 114, 73, 110, 102, 111]);
    const x = ΔⲆᐃ.ⲆΔᐃᐃⵠ([83, 97, 110, 100, 115, 116, 111, 114, 109, 73, 109, 97, 103, 101]);
    const G = ΔⲆᐃ.ⲆΔᐃᐃⵠ([116, 111, 83, 116, 114, 105, 110, 103]);
    const H = ΔⲆᐃ.ⲆΔᐃᐃⵠ([66, 108, 105, 122, 122, 97, 114, 100, 73, 109, 97, 103, 101]);
    const B = ΔⲆᐃ.ⲆΔᐃᐃⵠ([67, 66, 79]);
    const D = ΔⲆᐃ.ⲆΔᐃᐃⵠ([76, 69, 69, 84, 95, 83, 67, 82, 73, 80, 84, 95, 69, 88, 84, 69, 82, 78, 65, 76]);
    function E(a) {
      try {
        new a();
      } catch (a) {
        if (a[k][h](r) !== -1) {
          return 1;
        } else {
          return 0;
        }
      }
      return 0;
    }
    function I(a) {
      try {
        a();
      } catch (a) {
        if (a[k][h](r) !== -1) {
          return 1;
        } else {
          return 0;
        }
      }
      return 0;
    }
    function J(a) {
      try {
        _a[p](a);
        return 1;
      } catch (a) {
        return 0;
      }
    }
    return {
      ᐃⲆⵠᐃⲆⲆⲆ: function () {
        i++;
        if (i > 1000) {
          i = 0;
          j = I(_a[o][a][q]) || j;
          j = I(_a[o][a][m]) || j;
          j = I(_a[s][a][d]) || j;
          j = function (a) {
            if (a && a[G]) {
              if (a[G]()[h](C) !== -1) {
                return 1;
              }
            }
            return 0;
          }(E) || j;
          j = E(_a[s]) || j;
          j = J(D) || j;
          j = J(B) || j;
          j = J(v) || j;
          j = J(f) || j;
          j = J(z) || j;
          j = J(y) || j;
          j = J(w) || j;
          j = J(F) || j;
          j = J(A) || j;
          j = J(A) || j;
          j = J(x) || j;
          j = J(H) || j;
          if (_a[c] !== undefined) {
            j = 1;
          }
        }
        if (j === 1) {
          b++;
          if (b > 10000) {
            b = 0;
            _a[g][l] = _a[g][u];
          }
        }
      },
      ΔΔⲆΔⵠΔⵠ: function () {
        return j;
      }
    };
  }();
  const nr = 11;
  var pr = navigator.language || navigator.userLanguage;
  const rr = 0;
  var sr = -new Date().getTimezoneOffset() / 60;
  var tr = "Europe";
  const ur = 18;
  const vr = 15;
  var wr = "South America";
  const xr = 13;
  const yr = 256;
  const zr = 8;
  const Ar = 14;
  const Br = 9;
  const Cr = 12;
  const Dr = 6;
  const Er = vq;
  var Fr = tr;
  if (sr >= -2 && sr <= 2) {
    Fr = tr;
  } else if (sr > 2 && sr <= 5) {
    Fr = "Russia";
  } else if (sr > 5 && sr <= 9) {
    Fr = "Asia";
  } else if (sr > 9) {
    Fr = "Australia";
  } else if (sr >= -5 && sr < -2) {
    Fr = pr === "pt-BR" || pr === "pt-br" || pr === "pt" || pr === "pt-pt" ? wr : "North America";
  } else if (sr < -5) {
    Fr = pr === "pt-BR" || pr === "pt-br" || pr === "pt" || pr === "pt-pt" ? wr : "West America";
  }
  var Mk = {
    ⵠΔᐃᐃᐃⵠᐃ: function (a) {
      var b = 2147483648;
      var c = a || Math.floor((b - 1) * Math.random());
      this.ᐃⵠΔᐃᐃ = function (a) {
        c = a || Math.floor(Math.random() * (b - 1));
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  function Gr(b, c, d, e, f) {
    Wi(ox, b, c, d, e, f);
    const g = mx(px[0], px[1], px[2], px[3], px[4]);
    Wp(px[0], px[1]);
    return ~(g & 27537) & 27537 | ~(g & 27537) & g;
  }
  function Hr(a, b, c, d) {
    si(ox, a, b, c, d);
    return ((192 + (Ox(px[0], px[1], px[2], px[3], px[0]) ^ Ox(px[1], px[2], px[3], px[0], px[1]))) * 75 + 74) % 65537;
  }
  const Ir = 11;
  function Jr(b, c, d, e) {
    const f = b ^ 22271;
    const g = (24 << (c & 255)) + (16 << (c >> 24 & 255)) + (0 << (c >> 8 & 255)) + (8 << (c >> 16 & 255));
    const a = ~(d & 25598) & d | ~(d & 25598) & 25598;
    return (2147483587 + (32114 + (function (b, c, d, e, f) {
      const i = (b + 29595) % 65464;
      const a = (16 << (c & 255)) + (8 << (c >> 24 & 255)) + (0 << (c >> 16 & 255)) + (24 << (c >> 8 & 255));
      const j = (0 << (d >> 8 & 255)) + (24 << (d >> 16 & 255)) + (8 << (d >> 24 & 255)) + (16 << (d & 255));
      const k = (2531011 + (29843 + e) * 214013) % 4294967296;
      const h = (1013904223 + (48297 + f) * 1664525) % 4294967296;
      const g = nx(i, a, j);
      const l = Ew(k, h, i, a, j);
      return (0 << ((g ^ l) >> 8 & 255)) + (8 << ((g ^ l) >> 16 & 255)) + (16 << ((g ^ l) >> 24 & 255)) + (24 << ((g ^ l) & 255));
    }(f, g, a, e ^ 12507, f) ^ kb(g, a))) * 2147483629) % 2147483647;
  }
  var Kr = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
  var Lr = 0;
  let Mr = {
    ⲆⵠᐃᐃΔ: ["#133A2B", "#042b30"],
    ΔⲆⲆΔᐃΔⲆᐃᐃ: ["#EBF2F0", "#136167"],
    ⲆᐃᐃΔⲆⵠΔ: ["#4EB687", "#187484"],
    ⲆΔⵠᐃⲆⲆⵠ: ["#664516", "#13474C"],
    ⲆᐃⵠⵠⵠΔⲆ: ["#FCEFBB", "#0F4D48"],
    ᐃⲆᐃⲆⲆΔΔ: ["#C1AA7E", "#0F423D"],
    ⵠΔⲆᐃᐃΔΔ: ["#594837", "#163A3A"],
    ᐃⵠᐃⵠΔⲆⲆ: ["#A5D6D6", "#539CA0"],
    ΔᐃⲆⲆⵠ: ["#0B6A84", "#09373F"],
    ΔⲆⵠΔᐃⲆΔ: ["#2A8B9B", "#0F464C"],
    ΔⲆΔᐃⲆⵠᐃ: ["#A9D6D3", "#115E60"],
    ΔⲆⲆΔⲆⲆⲆ: ["#ECF7F9", "#539CA0"],
    ᐃΔΔΔⲆΔΔ: ["#FFF", "#FFF"],
    ᐃᐃᐃⵠΔⲆⵠ: ["#FFF", "#FFF"],
    ΔᐃⲆΔⵠΔⵠ: ["#1C9BA4", "#00272F"],
    ᐃΔΔΔⵠ: ["#2D2017", "#031C1E"],
    ⵠⲆⵠ: 0,
    ᐃⵠΔ: 1,
    ⲆⵠᐃᐃⵠΔΔΔⵠ: 2300,
    ⵠⵠΔᐃⵠⵠⲆᐃⵠ: 2290,
    ᐃⵠⲆΔⵠⵠΔ: 34,
    ⲆᐃⲆⲆⵠⵠΔ: 5,
    ⲆᐃⲆⵠⲆΔᐃ: 68,
    ᐃΔΔⵠⲆΔⵠ: 34,
    ΔⵠⲆᐃΔΔᐃ: 5,
    ⲆⵠⵠᐃⲆⵠⲆ: 1,
    ᐃⲆⲆᐃⲆΔⲆ: 0.6,
    ⵠᐃⲆᐃᐃΔΔ: 0.25,
    ᐃⵠᐃⲆΔᐃΔ: 50,
    ⲆⲆⲆⵠΔⲆⲆ: 10,
    ᐃⵠⵠΔⵠⲆΔ: 75,
    ᐃΔΔᐃΔᐃⲆ: 20,
    ⲆⵠⵠΔⲆⵠⵠ: 5,
    ⲆⲆᐃΔΔ: 0,
    ⵠⲆⲆⲆΔ: 1,
    ΔⵠΔⲆΔ: 2,
    ⵠᐃⲆᐃᐃ: 3,
    ⵠᐃⵠΔⲆ: 4,
    ᐃΔⵠⵠⵠ: 5,
    ⲆⲆΔⲆᐃ: 6,
    ΔΔⲆⵠᐃ: 7,
    ᐃᐃΔᐃⵠ: 8,
    ⲆⵠⲆΔΔ: 9,
    ⵠΔᐃΔΔ: 10,
    ᐃΔⲆΔⲆ: 11,
    ᐃⵠᐃⵠᐃ: 12,
    ΔⲆⵠᐃᐃ: 13,
    ⵠⲆᐃⲆᐃ: 14,
    ⵠᐃⲆᐃΔ: 15,
    ᐃΔΔᐃⵠ: 16,
    ΔᐃΔⲆⲆ: 17,
    ⵠᐃⲆΔᐃ: 18,
    ΔΔᐃᐃⲆ: 19,
    ⵠΔᐃΔⵠ: 20,
    ΔᐃΔᐃⲆ: 21,
    ⵠᐃⵠⵠⲆ: 22,
    ΔᐃᐃⲆᐃ: 23,
    ⵠᐃᐃΔΔ: 24,
    ⵠΔⵠΔᐃ: 25,
    ᐃᐃΔᐃΔ: 26,
    ⵠⵠᐃᐃⵠ: 27,
    ⵠΔⲆΔᐃ: 28,
    ⲆⵠⲆΔ: 29,
    ⵠⲆⲆΔⲆ: 30,
    ΔΔᐃᐃᐃ: 31,
    ᐃⲆΔⵠᐃ: 32,
    ⲆΔᐃⲆⲆ: 33,
    ᐃᐃⵠᐃⲆ: 34,
    ΔᐃΔⵠⲆ: 35,
    ᐃⵠⵠΔᐃ: 36,
    ᐃⲆᐃⵠⵠ: 37,
    ⵠᐃᐃᐃⵠ: 38,
    ᐃᐃⵠᐃΔ: 39,
    ⵠΔⵠⲆⵠ: 40,
    ⵠᐃⵠᐃⲆ: 41,
    ᐃⵠⵠⲆⲆ: 42,
    ⲆᐃᐃᐃⲆ: 43,
    ᐃⵠⵠⵠΔ: 44,
    ΔΔᐃⲆΔ: 45,
    ᐃⵠⵠⵠⵠ: 46,
    ⲆⲆⵠⲆΔ: 47,
    ⲆⲆᐃΔᐃ: 48,
    ᐃᐃⲆⵠⲆ: 49,
    ⵠⵠⲆⲆΔ: 50,
    ⵠᐃᐃΔⵠ: 51,
    ⲆΔⵠᐃⲆ: 52,
    ⵠΔⵠᐃᐃ: 53,
    ⲆⲆⲆᐃΔ: 54,
    ᐃΔⲆⲆⲆ: 55,
    ⲆΔΔΔᐃ: 56,
    ⲆΔᐃⲆΔ: 57,
    ⲆΔᐃᐃᐃ: 58,
    ᐃᐃᐃΔⵠ: 59,
    ⲆᐃᐃⲆⲆ: 60,
    ᐃΔⲆⲆΔ: 61,
    ᐃᐃᐃⲆΔ: 62,
    ⵠᐃᐃⲆᐃ: 63,
    ⵠᐃⲆⵠⵠ: 64,
    ΔⵠⵠⲆⲆ: 65,
    ⵠⵠΔᐃΔ: 66,
    ⵠΔᐃⵠᐃ: 67,
    ᐃΔᐃΔⵠ: 68,
    Δᐃᐃⵠⵠ: 69,
    ᐃⲆⵠᐃΔ: 70,
    ⲆⵠⵠⵠΔ: 71,
    ⵠΔΔᐃΔ: 72,
    ⲆΔⲆⲆᐃ: 73,
    ⵠΔΔΔΔ: 74,
    ⲆᐃⵠΔᐃ: 75,
    ᐃⲆⲆᐃᐃ: 76,
    ⵠⲆᐃΔΔ: 77,
    ⲆΔⲆⵠⵠ: 78,
    ⵠᐃΔⵠᐃ: 79,
    ᐃⵠΔⵠⲆ: 80,
    ⲆΔⲆᐃⲆ: 81,
    ᐃⲆⲆⲆⲆ: 82,
    ⵠΔᐃΔⲆ: 83,
    ⲆᐃΔⵠⵠ: 84,
    ᐃⲆᐃΔΔ: 85,
    ΔᐃᐃⲆⵠ: 86,
    ⵠΔⵠⵠᐃ: 87,
    ⲆⵠⵠΔⲆ: 88,
    ΔⲆⵠⵠⲆ: 89,
    ᐃⲆΔΔΔ: 90,
    ᐃΔᐃΔᐃ: 91,
    ΔᐃⲆⵠⵠ: 92,
    ΔⵠΔⵠΔ: 93,
    ᐃΔΔⲆⵠ: 94,
    ⲆᐃⵠΔⵠ: 95,
    ΔᐃΔΔⲆ: 96,
    ⵠΔΔΔⲆ: 97,
    ΔⲆΔΔΔ: 98,
    ᐃΔⵠᐃΔ: 99,
    ⵠΔᐃⲆΔⵠΔΔⵠ: 100,
    ⲆΔᐃⲆⵠ: 101,
    ᐃⲆᐃΔⲆ: 102,
    ΔⵠΔΔⵠ: 103,
    ΔⵠⲆⵠΔ: 104,
    ΔⲆᐃᐃⲆ: 105,
    ⵠⲆⵠⲆΔ: 106,
    ᐃⲆⵠⲆⵠ: 107,
    ΔⲆⵠᐃΔ: 108,
    ᐃⲆⲆᐃ: 109,
    ⲆⵠᐃΔᐃ: 110,
    ⵠᐃΔⲆ: 111,
    ⲆΔⵠᐃ: 112,
    ⵠⲆΔⵠⵠⵠᐃ: 113,
    ΔⵠΔⲆⵠ: 114,
    ⵠⵠⲆⵠΔᐃⲆ: 115,
    ΔⲆⲆⵠΔ: 116,
    ⵠⵠΔΔⲆ: 117,
    ᐃΔⵠᐃᐃⵠΔ: 118,
    ᐃᐃⵠᐃⵠⵠⵠ: 119,
    ⵠⲆᐃΔᐃ: 120,
    ⲆⵠΔⲆ: 121,
    ᐃᐃⵠᐃᐃ: 122,
    ΔⲆⲆⲆΔ: 123,
    ΔⲆΔΔⵠΔΔ: 124,
    ΔⲆᐃⲆᐃ: 125,
    ᐃⲆᐃⵠⲆ: 126,
    ⵠⲆΔᐃⵠ: 127,
    ⵠᐃⲆⲆⲆ: 128,
    ᐃⵠⵠΔΔ: 129,
    ᐃⲆⲆⲆⵠ: 130,
    ⲆⵠⲆᐃᐃ: 131,
    ⲆΔⵠⲆⵠ: 132,
    ΔᐃⵠⲆΔ: 133,
    ΔⵠⲆΔΔ: 134,
    ⲆⲆΔⵠᐃ: 135,
    ᐃⵠᐃⵠΔ: 136,
    ᐃᐃᐃᐃᐃ: 137,
    ΔᐃΔΔⵠ: 138,
    ⵠⵠⵠᐃΔ: 139,
    ⵠᐃⲆᐃⵠⵠΔ: 140,
    ΔΔΔⵠᐃ: 141,
    ᐃⵠᐃΔΔⵠΔ: 142,
    ⲆΔΔΔᐃⵠⲆ: 143,
    ⵠⲆᐃΔΔᐃᐃ: 144,
    ᐃⲆΔⲆΔⲆΔ: 145,
    ΔⲆΔⵠΔ: 146,
    ΔᐃⵠⵠΔ: 147,
    ⲆΔᐃⵠⵠ: 148,
    ΔᐃⲆⵠᐃ: 149,
    ᐃΔⲆⵠᐃ: 150,
    ΔⵠᐃΔΔ: 151,
    ᐃⲆⲆⵠᐃ: 152,
    Ⲇᐃⵠⵠᐃ: 153,
    ᐃΔᐃⵠᐃ: 154,
    Δⵠⵠⵠᐃ: 155,
    ⲆᐃᐃΔⵠ: 156,
    ᐃⲆᐃΔⵠ: 157,
    ᐃⵠᐃΔΔ: 158,
    ᐃᐃⲆⲆΔ: 159,
    ᐃⵠΔⵠΔ: 160,
    ᐃᐃⵠⵠⲆ: 161,
    ⵠⵠΔⲆΔ: 162,
    ᐃⵠⵠᐃΔ: 163,
    ⵠⲆⵠᐃΔ: 164,
    ΔΔⵠΔᐃ: 165,
    ᐃᐃΔΔᐃⵠⲆ: 166,
    ᐃⵠⵠΔⵠ: 167,
    ΔᐃⵠΔᐃ: 168,
    ΔⲆⲆᐃⲆ: 169,
    ᐃⲆΔΔᐃ: 170,
    ⲆᐃⵠⵠⲆΔⲆ: 171,
    ᐃΔⲆᐃⲆⲆⵠ: 172,
    ⲆΔᐃᐃΔⵠΔ: 173,
    ⵠΔⵠΔⲆ: 174,
    ⲆⵠⵠⲆᐃᐃⵠ: 175,
    ⵠᐃᐃᐃΔⵠⲆ: 176,
    ⲆⵠⵠⵠΔⲆᐃ: 177,
    ⵠΔⵠᐃⵠⵠᐃ: 178,
    ⵠᐃᐃⲆⲆⲆΔ: 179,
    ᐃΔΔΔᐃΔⵠ: 180,
    ⲆⲆⵠΔᐃᐃᐃ: 181,
    ᐃⲆⲆΔⲆⲆⵠ: 182,
    ΔΔⵠΔΔ: 183,
    ⵠⲆⵠⵠᐃ: 184,
    ⲆΔΔᐃΔ: 185,
    ΔΔⲆΔⲆ: 186,
    ΔᐃᐃΔⵠ: 187,
    ⵠᐃⲆΔⲆᐃⲆ: 188,
    ΔⲆⲆᐃᐃ: 189,
    ΔⲆΔⲆⵠ: 190,
    ᐃⵠᐃΔⲆᐃᐃ: 191,
    Ⲇᐃᐃⵠⵠ: 192,
    ⲆᐃΔΔⲆᐃⲆ: 193,
    ᐃΔΔⵠᐃ: 194,
    ⲆⲆⵠᐃⲆ: 195,
    ΔΔᐃⲆᐃΔᐃ: 196,
    ⵠⵠⵠⵠⵠⵠⲆ: 197,
    ΔΔΔΔⲆ: 198,
    Ⲇⵠᐃⵠⵠ: 199,
    ⲆᐃΔᐃᐃⲆΔ: 200,
    ⲆⲆᐃⲆΔ: 201,
    ᐃⲆⵠΔ: 202,
    ΔⲆⲆⵠⵠ: 203,
    ᐃΔᐃⲆΔⲆΔ: 204,
    ⲆⲆⲆⲆⲆ: 205,
    ΔΔⵠᐃᐃΔΔ: 206,
    ᐃⲆⲆᐃⲆ: 207,
    ᐃΔᐃⵠΔᐃΔ: 208,
    ΔⲆⵠⵠΔ: 209,
    ⲆⵠᐃΔᐃΔΔ: 210,
    ΔΔᐃΔⵠᐃᐃ: 211,
    ⵠΔΔᐃⵠ: 212,
    ᐃⵠⲆⵠⵠ: 213,
    ⲆΔⵠΔⲆ: 214,
    ⵠᐃⵠⵠᐃ: 215,
    Ⲇᐃⵠᐃᐃ: 216,
    ΔΔⵠᐃΔ: 217,
    ᐃᐃΔΔⲆ: 218,
    ⲆⲆΔᐃΔ: 219,
    ΔⲆᐃⲆΔ: 220,
    ᐃⲆΔⵠⲆ: 221,
    ᐃⵠⵠⲆᐃ: 222,
    ᐃᐃⵠⲆΔ: 223,
    ⵠⲆⲆⲆⵠ: 224,
    ΔΔΔᐃⲆΔⲆ: 225,
    ⲆΔᐃΔΔΔⵠ: 226,
    ⵠᐃΔⲆᐃ: 227,
    ⵠΔⲆᐃᐃⵠᐃ: 228,
    ΔΔⲆᐃⵠ: 229,
    ⵠⵠⲆᐃᐃ: 230,
    ⲆⵠⵠⲆΔ: 231,
    ΔⲆᐃᐃⵠ: 232,
    ⵠⵠⲆΔΔ: 233,
    ᐃⲆΔⲆⲆΔⵠ: 234,
    ΔᐃⲆΔᐃ: 235,
    ⲆⵠⲆΔⵠ: 236,
    ΔⵠⵠΔⲆ: 237,
    ⲆᐃⲆΔⲆ: 238,
    ⵠⲆΔᐃⲆ: 239,
    ⵠΔᐃᐃᐃ: 240,
    ⲆⲆΔⵠΔ: 241,
    ⲆᐃⲆⲆᐃ: 242,
    ᐃⲆᐃᐃⲆⵠᐃ: 243,
    ΔᐃⲆⲆΔ: 244,
    ⲆΔⲆⵠΔ: 245,
    ΔΔⵠᐃⵠΔⵠ: 246,
    ⲆᐃᐃⲆᐃ: 247,
    ⲆⲆⵠⵠⵠ: 248,
    ⲆᐃⵠᐃⵠΔⲆ: 249,
    ΔⵠΔⵠⵠ: 250,
    ⲆᐃⵠΔΔ: 251,
    ᐃⵠᐃᐃᐃΔᐃ: 252,
    ΔⲆΔΔᐃΔⵠ: 253,
    ΔⲆᐃⵠⲆⲆΔ: 254,
    ᐃΔⵠΔΔ: 255,
    ᐃᐃⲆⵠᐃⵠᐃ: 256,
    ⵠΔⲆΔⵠΔᐃ: 257,
    ⲆⵠᐃⲆⲆⲆⲆ: 258,
    ᐃⲆⲆΔᐃᐃⲆ: 259,
    ⲆᐃᐃⵠΔ: 260,
    ΔᐃᐃⲆΔⲆⲆ: 261,
    ΔᐃⵠⲆⲆⵠⲆ: 262,
    ⲆᐃᐃΔⵠⵠⲆ: 263,
    ᐃⲆⲆⵠⵠ: 264,
    ⲆⲆⲆᐃᐃΔⵠ: 265,
    ΔⵠᐃΔΔᐃΔ: 266,
    ⵠⵠΔⵠⲆᐃⲆ: 267,
    ᐃᐃⵠⵠᐃⲆΔ: 268,
    ᐃⲆᐃᐃᐃΔᐃ: 269,
    ΔΔᐃⵠᐃΔⲆ: 270,
    ⲆⲆⵠΔᐃⵠΔ: 271,
    ⲆⵠⵠᐃⲆⲆⵠ: 272,
    ᐃⲆᐃⲆⵠⵠᐃ: 273,
    ⲆΔΔᐃᐃⲆΔ: 274,
    ΔΔⵠᐃⲆⵠⲆ: 275,
    ⲆΔᐃⲆⲆⵠΔ: 276,
    ⵠⵠⲆⵠⵠⵠᐃ: 277,
    ⵠΔⲆᐃⵠⵠΔ: 278,
    ᐃᐃᐃΔ: 279,
    ⲆⲆᐃᐃᐃ: 280,
    ⲆⲆᐃⵠᐃᐃⲆ: 281,
    ⲆᐃᐃᐃⵠΔΔ: 282,
    ⲆΔ: 283,
    ᐃⲆΔⵠᐃⲆΔ: 284,
    ᐃΔⵠⵠⲆ: 285,
    ᐃⵠⵠⵠᐃ: 286,
    ⵠᐃᐃⲆᐃⵠⵠ: 287,
    ΔⲆⲆΔᐃ: 288,
    ⵠⵠΔⲆΔⵠⲆ: 289,
    ΔᐃΔⲆΔΔⲆ: 290,
    ΔΔᐃᐃⵠⲆⲆ: 291,
    ᐃᐃᐃΔΔΔⲆ: 292,
    ⵠⵠⵠⵠΔᐃᐃ: 293,
    ⵠⲆⲆᐃⲆ: 294,
    ⵠⵠΔᐃⲆᐃΔ: 295,
    ᐃⵠᐃΔᐃⵠᐃ: 296,
    ⵠⵠΔⲆΔⵠᐃ: 297,
    ΔᐃΔⲆᐃⲆⲆ: 298,
    ⵠΔⲆⲆᐃ: 299,
    ⵠᐃⲆΔⲆᐃΔ: 300,
    ΔᐃⵠᐃⵠᐃΔ: 301,
    ⲆᐃⵠⵠⲆⵠᐃ: 302,
    ᐃⵠᐃⵠᐃΔᐃ: 303,
    ⲆⵠⲆΔⲆΔⵠ: 304,
    ⲆⲆⵠⵠᐃΔⵠ: 305,
    ΔⵠⲆⲆᐃⵠⵠ: 306,
    ᐃⲆⵠᐃᐃ: 307,
    ⲆΔⲆᐃⲆⵠᐃ: 308,
    ᐃᐃΔΔⵠⵠⲆ: 309,
    ΔⲆⲆⲆΔⵠⵠ: 310,
    ᐃΔⲆⵠᐃⲆΔ: 311,
    ⲆⲆΔΔⲆᐃⵠ: 312,
    ᐃᐃⵠᐃΔᐃⲆ: 313,
    ᐃᐃᐃⲆⲆΔⵠ: 314,
    ᐃⲆΔᐃΔᐃⲆ: 315,
    ΔⲆⲆⵠⲆᐃΔ: 316,
    ⲆᐃΔⲆⲆⲆⲆ: 317,
    ⵠⲆᐃⵠΔᐃⲆ: 318,
    ΔᐃΔⵠᐃⵠᐃ: 319,
    ΔⲆΔⲆⲆⲆΔ: 320,
    ⵠᐃⵠᐃᐃ: 321,
    ⵠⵠⵠⵠⲆⵠⲆ: 322,
    ⲆᐃⵠΔⲆⵠⵠ: 323,
    ⲆΔΔᐃᐃⵠⵠ: 324,
    ΔΔᐃᐃᐃⵠⵠ: 325,
    ΔΔΔΔᐃΔⲆ: 326,
    ⵠⲆᐃᐃⲆᐃΔ: 327,
    ΔΔΔⲆΔᐃⲆ: 328,
    ΔⵠᐃⵠⵠΔΔ: 329,
    ᐃᐃⵠⲆⲆⲆⲆ: 330,
    ⲆⲆⵠΔⲆΔΔ: 331,
    ΔᐃⵠⲆⵠⲆΔ: 332,
    ⲆΔⵠΔᐃᐃΔ: 333,
    ΔⲆⵠⵠⵠΔⵠ: 334,
    ᐃⲆⲆⵠⵠᐃⲆ: 335,
    ΔⵠⲆᐃᐃᐃⵠ: 336,
    ⵠᐃⲆΔᐃⲆⵠ: 337,
    ΔⲆᐃΔⲆΔⵠ: 338,
    ⵠⵠⲆⲆⵠⵠᐃ: 339,
    ⲆΔᐃⵠⵠⵠⲆ: 340,
    ᐃⲆΔΔᐃΔΔ: 341,
    ⵠᐃΔⵠⲆΔⵠ: 342,
    ΔⲆⲆΔΔᐃⵠ: 343,
    ΔⲆⲆᐃΔⲆⲆ: 344,
    ⵠⲆΔⲆⲆᐃⲆ: 345,
    ΔᐃⲆΔⲆⵠⲆ: 346,
    ᐃⵠⲆⵠᐃⲆⵠΔᐃ: 347,
    ⲆⲆΔΔᐃⵠⲆ: 348,
    ΔⲆᐃⲆΔⵠΔ: 349,
    ⲆᐃⵠΔⵠⵠⲆ: 350,
    ⵠⲆⵠΔᐃⲆⵠ: 351,
    ⲆᐃᐃⲆⵠᐃⲆ: 352,
    ⲆᐃΔⵠⲆⵠⵠ: 353,
    ΔᐃⵠⲆΔⵠⲆ: 354,
    ⵠⲆⲆⵠΔΔⵠ: 355,
    ΔⲆⲆᐃⵠⵠᐃ: 356,
    ᐃⵠΔⵠΔΔΔ: 357,
    ΔⵠΔΔᐃⲆⲆ: 358,
    ⲆΔΔⲆⲆⵠΔ: 359,
    ᐃⵠᐃⲆᐃΔᐃ: 360,
    ᐃΔⲆΔΔᐃᐃ: 361,
    ᐃⵠⲆⵠⲆⵠᐃ: 362,
    ΔΔⵠᐃⲆΔΔ: 363,
    ᐃⵠⵠⲆⲆⵠⲆ: 364,
    ΔᐃⲆⵠΔⲆⲆ: 365,
    Δᐃᐃⵠⵠⵠᐃ: 366,
    ᐃᐃⲆⵠⲆᐃΔ: 367,
    ⵠⵠⵠⲆⵠⵠⵠ: 368,
    ᐃᐃⵠᐃᐃᐃᐃ: 369,
    ⵠᐃⵠⲆᐃⵠᐃ: 370,
    ⵠΔⵠᐃᐃΔⲆ: 371,
    ᐃⲆⲆᐃⲆⵠΔ: 372,
    ⲆΔⲆΔΔᐃⲆ: 373,
    ΔΔⵠⲆᐃᐃΔ: 374,
    ΔᐃⲆⲆⲆⵠᐃ: 375,
    ⵠᐃⲆΔⲆⵠΔ: 376,
    ⲆᐃΔΔᐃᐃⲆ: 377,
    ΔⵠΔⵠΔⵠⵠ: 378,
    ΔΔᐃⵠⵠⲆⲆ: 379,
    ΔΔΔⵠΔⲆᐃ: 380,
    ᐃΔⵠⲆΔⵠΔ: 381,
    ⵠⵠΔⲆΔᐃᐃ: 382,
    ΔⵠⲆΔᐃᐃΔ: 383,
    ⵠⲆⲆΔΔⲆᐃ: 384,
    ⲆᐃΔⲆΔⵠᐃ: 385,
    ΔⲆⲆᐃⲆᐃⵠ: 386,
    ΔⲆⵠⵠΔⲆΔ: 387,
    ΔᐃΔⲆΔⵠⵠ: 388,
    ᐃᐃⵠⲆⲆⲆΔ: 389,
    ⲆΔΔᐃⲆⲆΔ: 390,
    ᐃⲆᐃΔΔᐃⵠ: 391,
    ΔΔⲆⵠᐃΔⵠ: 392,
    ᐃⲆΔᐃⲆⲆΔ: 393,
    ⵠᐃⵠⲆᐃⲆⵠ: 394,
    ⲆⲆΔⵠΔⲆΔ: 395,
    ⲆⲆⲆⵠΔΔⲆ: 396,
    ⲆᐃΔΔⲆⲆΔ: 397,
    ⵠⲆᐃΔΔⵠΔ: 398,
    ⲆΔⵠⵠΔᐃΔ: 399,
    ΔⵠΔᐃΔᐃⵠ: 400,
    ⲆΔΔⲆᐃⲆⲆ: 401,
    ᐃΔⵠⲆΔⵠᐃ: 402,
    ΔᐃΔⲆΔⵠΔ: 403,
    ᐃΔᐃΔᐃΔΔ: 404,
    ΔⵠⵠΔⲆΔᐃ: 405,
    ⲆⵠΔⵠᐃΔⲆ: 406,
    ⵠᐃΔⵠᐃΔⵠ: 407,
    ⵠⲆΔⵠⵠΔⲆ: 408,
    ⲆᐃⲆⲆⵠⵠⵠ: 409,
    ᐃⵠΔᐃᐃⵠΔ: 410,
    ⵠⲆⲆⲆⲆⲆⲆ: 411,
    ΔⲆⵠⲆⲆᐃᐃ: 412,
    ΔⲆⲆΔΔ: 413,
    ᐃΔⲆᐃⲆⲆΔᐃΔ: 414,
    ᐃΔⵠⲆΔ: 415,
    Ⲇᐃᐃᐃᐃ: 416,
    ⲆⲆⲆΔⵠⲆⵠᐃᐃ: 417,
    ⵠΔⵠᐃⲆⲆᐃ: 418,
    ΔⲆᐃᐃΔ: 419,
    ᐃᐃⵠⵠΔΔⲆ: 420,
    ΔᐃΔΔᐃⲆᐃ: 421,
    ΔⲆΔⲆⵠⵠᐃ: 422,
    ⲆⲆΔᐃΔⵠᐃ: 423,
    ⲆΔⵠⲆᐃΔⲆ: 424,
    ΔⲆⵠⵠⵠⵠΔ: 425,
    ⵠᐃⲆⲆⵠΔⲆ: 426,
    ΔᐃΔᐃⲆⲆⵠ: 427,
    ᐃΔᐃⵠⵠᐃΔ: 428,
    ⵠᐃⵠⵠΔⲆⲆ: 429,
    ⲆΔⲆⲆⲆᐃΔ: 430,
    ᐃⵠⵠᐃⵠᐃⵠ: 431,
    ⵠⲆΔᐃⲆΔΔ: 432,
    ΔⲆᐃⵠΔᐃΔ: 433,
    ΔΔΔᐃΔᐃΔ: 434,
    ᐃⵠⵠᐃⲆⵠⲆ: 435,
    ⵠⵠΔⲆᐃⵠᐃ: 436,
    ⲆΔΔΔΔΔᐃ: 437,
    ⵠⲆΔᐃⲆⲆΔ: 438,
    ᐃⵠΔⲆΔⲆᐃ: 439,
    ΔⲆⲆΔⵠΔⲆ: 440,
    ΔᐃⲆⲆᐃΔᐃ: 441,
    ᐃΔΔᐃⲆΔᐃ: 442,
    ᐃⵠⵠᐃᐃⵠᐃ: 443,
    ᐃΔⲆⵠⵠᐃⵠΔⵠ: 444,
    Δᐃⵠⵠⵠ: 445,
    ⲆΔᐃⵠⵠᐃⲆ: 446,
    ⲆᐃΔᐃΔⵠⵠ: 447,
    ᐃⲆⵠΔⵠⵠⲆⲆᐃ: 448,
    ΔⵠΔᐃⲆ: 449,
    ΔᐃᐃᐃΔ: 450,
    ⲆΔⲆⲆᐃⲆⵠ: 451,
    ΔᐃΔⲆⲆⵠΔ: 452,
    ⲆᐃⵠⵠΔᐃⵠ: 453,
    ⲆⲆᐃⲆⵠⲆΔ: 454,
    ⵠⵠⵠᐃΔⲆΔ: 455,
    ᐃΔᐃⲆᐃⲆⲆ: 456,
    ΔΔᐃᐃᐃⵠⲆ: 457,
    ⵠᐃΔΔⵠⵠⲆ: 458,
    ΔⵠⲆⲆΔⵠΔ: 459,
    ⵠⵠⵠᐃⲆⲆᐃ: 460,
    ΔᐃΔⵠⲆΔⵠ: 461,
    ᐃᐃⵠⵠΔΔΔ: 462,
    ⲆⲆⵠⵠⵠᐃⲆ: 463,
    ΔᐃⵠⲆⵠΔⵠ: 464,
    ⵠᐃᐃⵠⵠⲆⵠ: 465,
    ΔⲆⲆⲆᐃᐃⲆ: 466,
    ⲆⲆΔⲆᐃΔΔ: 467,
    ΔᐃⲆᐃΔⵠᐃ: 468,
    ⵠΔΔⵠⵠⵠᐃ: 469,
    ⵠΔΔⲆⲆⲆⵠ: 470,
    ⲆΔⵠΔⵠⲆⵠ: 471,
    ᐃⲆⲆᐃᐃᐃᐃ: 472,
    ᐃΔᐃΔⵠⲆⵠ: 473,
    ΔΔᐃⵠΔⲆΔ: 474,
    ΔΔΔᐃΔΔⲆ: 475,
    ΔⲆᐃᐃⵠⵠᐃ: 476,
    ⵠⵠᐃᐃⲆⵠⲆ: 477,
    ᐃᐃΔⵠΔΔⵠ: 478,
    ᐃⵠⲆΔⵠⲆᐃ: 479,
    ᐃΔᐃⵠⲆⵠᐃ: 480,
    ᐃΔⲆᐃⲆᐃⵠ: 481,
    ⲆⲆΔΔᐃΔⵠ: 482,
    ᐃⲆᐃΔⲆⲆᐃ: 483,
    ΔᐃⵠⲆⲆᐃⵠ: 484,
    ΔΔⵠᐃΔⲆⲆ: 485,
    ⵠⲆⵠⵠⲆⵠⵠ: 486,
    ⵠᐃⵠⲆΔᐃⲆ: 487,
    ᐃΔᐃΔⵠΔⵠ: 488,
    ᐃⵠⵠⲆΔⵠⲆ: 489,
    ΔΔⲆᐃⵠΔᐃ: 490,
    ΔΔᐃᐃⲆᐃᐃ: 491,
    ΔⵠΔⲆⲆⵠⵠ: 492,
    ⵠᐃⵠⲆΔⵠⵠ: 493,
    ⲆⲆⵠᐃΔᐃΔ: 494,
    ᐃᐃΔᐃⵠΔᐃ: 495,
    ⲆⲆᐃⵠⲆⵠΔ: 496,
    ⵠΔΔΔΔⲆⲆ: 497,
    ΔⲆΔᐃΔΔΔ: 498,
    ᐃᐃⲆΔΔΔⲆ: 499,
    ᐃⲆⵠⵠⲆΔⵠ: 500,
    ⵠⲆᐃΔⵠΔΔ: 501,
    ΔΔⵠⵠⲆⲆⲆ: 502,
    ⵠΔᐃⲆᐃΔⲆ: 503,
    ⲆⲆⵠⲆⲆᐃⲆ: 504,
    ⲆᐃᐃΔⵠⲆᐃ: 505,
    ΔᐃΔΔⵠⲆΔ: 506,
    ⵠᐃᐃⵠⵠⲆⵠ: 507,
    ⵠΔⲆⲆⲆⵠⲆ: 508,
    ⵠⵠⵠⵠⲆⲆΔ: 509,
    ⵠᐃΔⲆΔᐃΔ: 510,
    ⵠᐃⲆⵠⲆΔᐃ: 511,
    ⵠΔΔᐃΔᐃΔ: 512,
    ΔⲆⲆΔΔΔⲆ: 513,
    ΔᐃⲆΔΔⲆⵠ: 514,
    ⵠΔⲆⲆᐃᐃΔ: 515,
    ⲆⵠᐃᐃⵠⵠⲆ: 516,
    ⲆΔΔⵠⲆᐃⲆ: 517,
    ᐃΔΔⲆΔⲆΔ: 518,
    ⵠᐃⲆᐃΔⲆⵠ: 519,
    ⵠΔⲆⵠⵠⵠⲆ: 520,
    ⲆΔⵠⲆᐃᐃᐃ: 521,
    ⵠⵠΔⲆᐃⲆⲆ: 522,
    ⵠⵠᐃⵠⲆᐃⲆ: 523,
    ᐃⵠⲆᐃΔⲆⲆ: 524,
    ΔⵠᐃⵠΔᐃⵠ: 525,
    ⲆⵠΔⲆⲆΔᐃ: 526,
    ⲆⵠᐃⲆᐃⲆᐃ: 527,
    ⵠᐃᐃⲆΔⵠΔ: 528,
    ⲆⲆⲆᐃⲆⵠⲆ: 529,
    ⲆΔⲆⲆⵠⲆᐃ: 530,
    ΔᐃᐃΔᐃⵠΔ: 531,
    ΔΔⵠΔⲆΔⵠ: 532,
    ⲆΔⵠᐃΔⵠⵠ: 533,
    ⵠⲆⵠᐃⲆⵠⵠ: 534,
    ᐃⵠⲆΔΔⲆⲆ: 535,
    ⲆᐃΔᐃⵠΔᐃ: 536,
    ΔΔⵠΔΔⵠⵠ: 537,
    ᐃⲆⲆⲆᐃᐃⵠ: 538,
    ᐃΔᐃᐃⵠΔᐃᐃⵠ: 539,
    ⵠⲆΔⲆⲆᐃΔ: 540,
    ⵠᐃⵠᐃΔⵠⵠ: 541,
    ⵠⵠᐃⲆⵠⵠⲆ: 542,
    ⵠⲆΔⲆⵠⵠⵠ: 543,
    ᐃⵠΔΔⲆᐃᐃΔⲆ: 544,
    POINTS: 545,
    ᐃⵠΔΔᐃΔⵠ: 546,
    ⵠⲆⲆΔⲆΔΔ: 547,
    ⵠⲆΔⵠΔⵠⵠ: 548,
    ᐃᐃⵠΔᐃⵠᐃ: 549,
    ⲆⵠΔⲆⵠⲆⵠ: 550,
    ⲆⵠⵠⵠᐃΔⲆ: 551,
    ⵠⵠΔⵠⵠⲆⲆ: 552,
    ⲆⲆⲆⲆⲆΔⵠ: 553,
    ⵠᐃⵠᐃᐃΔΔ: 554,
    ᐃᐃⲆΔᐃΔⵠ: 555,
    ΔᐃᐃⲆᐃᐃΔ: 556,
    ⵠᐃΔᐃⵠᐃᐃ: 557,
    ΔΔΔᐃⵠΔⵠ: 558,
    ⲆⵠⵠⵠⵠⵠⲆ: 559,
    ⵠΔΔᐃⵠⵠⵠ: 560,
    ΔⲆⵠⲆⲆⵠⲆ: 561,
    ᐃᐃᐃⲆⵠΔᐃ: 562,
    ᐃⲆⲆⵠᐃⵠⲆ: 563,
    ΔⲆⵠⲆᐃⲆⲆ: 564,
    ⲆⵠⵠΔⵠⵠΔ: 565,
    ⲆⲆⲆᐃⵠΔⵠ: 566,
    ⵠⲆⲆᐃΔᐃⲆ: 567,
    ⲆᐃᐃΔΔⲆΔ: 568,
    ΔⵠⲆⵠΔΔᐃ: 569,
    ΔⵠΔⵠⵠΔΔ: 570,
    ᐃᐃΔⵠⲆᐃΔ: 571,
    ⲆⲆⲆᐃᐃᐃⲆ: 572,
    ᐃⲆⵠⲆΔΔΔ: 573,
    ⲆⵠᐃⲆΔᐃᐃ: 574,
    ⲆΔⲆᐃᐃⵠⲆ: 575,
    ᐃᐃⵠᐃⵠΔΔ: 576,
    ⲆΔΔⲆⲆⵠⲆ: 577,
    ᐃⵠᐃᐃⲆⵠΔ: 578,
    ⲆΔᐃΔΔⵠᐃ: 579,
    ⲆⵠΔⵠⲆᐃⲆ: 580,
    ⲆⲆᐃΔᐃⵠᐃ: 581,
    ⵠᐃⵠᐃΔⵠⲆ: 582,
    ᐃⵠᐃΔΔᐃⵠ: 583,
    ⲆᐃΔⵠⲆᐃΔ: 584,
    ⵠᐃΔⵠᐃᐃᐃ: 585,
    ⵠΔⵠΔⲆᐃⵠ: 586,
    ᐃⵠΔⲆⵠᐃᐃ: 587,
    ⵠᐃΔΔⲆΔⲆ: 588,
    ⵠΔΔΔⲆΔⲆ: 589,
    ᐃΔΔᐃᐃᐃⲆ: 590,
    ⵠⲆΔⵠᐃΔΔ: 591,
    ᐃΔⵠⵠᐃⵠΔ: 592,
    ⵠⵠⵠΔⲆᐃⵠΔΔ: 593,
    ⲆⲆΔᐃⵠᐃᐃ: 594,
    ⲆΔΔΔⵠⵠΔᐃΔ: 595,
    Δⵠⵠⵠᐃᐃⵠ: 596,
    ᐃᐃΔᐃⲆᐃΔⵠⲆ: 597,
    ⵠⵠΔⲆⲆⲆⵠⲆⲆ: 598,
    ⲆⲆⲆⵠⲆᐃⵠⲆⲆ: 599,
    ᐃᐃΔⵠⵠΔΔⵠⲆ: 600,
    ⲆΔⵠⵠⲆᐃⲆΔᐃ: 601,
    ᐃⵠⲆΔⲆᐃⵠ: 602,
    ⲆΔΔⲆⲆ: 603,
    ⲆⲆⵠⵠᐃΔᐃ: 604,
    ⵠⲆΔΔⵠⵠⵠ: 605,
    ΔⵠᐃⲆⵠᐃᐃ: 606,
    ᐃᐃⵠᐃⵠⵠⵠΔⲆ: 607,
    ⲆⲆⲆⲆΔΔⵠ: 608,
    ΔⲆᐃᐃᐃΔᐃ: 609,
    ⲆΔΔⵠⲆⲆΔ: 610,
    ⵠᐃᐃᐃΔᐃⵠ: 611,
    ⲆⵠⵠΔⵠᐃΔ: 612,
    ⵠᐃⲆⲆΔΔⲆ: 613,
    ᐃΔⵠⵠᐃⵠᐃ: 614,
    ⵠⲆⲆΔⲆᐃΔ: 615,
    ⲆΔⲆᐃⲆᐃⲆ: 616,
    ⵠΔⵠΔⵠⲆⲆ: 617,
    ᐃᐃⵠⵠⵠΔᐃ: 618,
    ᐃⲆⵠᐃⲆ: 619,
    ⲆⲆⵠΔᐃ: 620,
    ᐃⵠΔΔΔ: 621,
    ΔⲆΔⵠᐃⲆᐃⵠᐃ: 622,
    ⲆΔᐃᐃΔⲆΔ: 623,
    ⲆΔΔΔΔΔⲆ: 624,
    ᐃᐃΔΔᐃᐃΔ: 625,
    ᐃᐃⲆⵠᐃᐃⲆ: 626,
    ᐃΔᐃΔⵠΔΔ: 627,
    ⵠⵠⵠΔⵠⲆᐃ: 628,
    ⵠΔⲆⵠΔᐃᐃ: 629,
    ΔⲆΔᐃⵠⲆᐃ: 630,
    ⲆΔⲆΔⲆⲆΔ: 631,
    ⵠⲆᐃᐃᐃᐃΔ: 632,
    ΔⲆᐃΔⵠⵠⲆ: 633,
    ΔⲆᐃΔⲆⲆᐃ: 634,
    ΔⵠᐃᐃΔⵠⲆ: 635,
    ⵠⵠᐃᐃⲆⵠΔ: 636,
    ᐃⵠΔΔⵠ: 637,
    ᐃΔⵠᐃⵠⵠᐃ: 638,
    ΔᐃⵠᐃᐃⵠⲆ: 639,
    ⵠⵠⵠⵠⲆⵠⵠ: 640,
    ΔⵠΔⲆΔᐃⲆ: 641,
    ⲆΔⵠΔⵠⵠΔ: 642,
    ᐃⵠⵠΔⲆΔΔ: 643,
    ΔⲆⲆⵠᐃⵠᐃ: 644,
    ⲆΔⲆΔΔⵠⵠ: 645,
    ⵠᐃΔⵠⲆⵠⵠ: 646,
    ᐃΔᐃⲆᐃⵠᐃ: 647,
    ΔⲆΔΔΔⲆᐃ: 648,
    ⲆΔΔⲆᐃᐃᐃ: 649,
    ⲆᐃⵠΔΔⵠΔ: 650,
    ⵠⲆⵠⵠⵠⵠⲆ: 651,
    ΔΔⲆᐃⲆⲆᐃ: 652,
    ᐃᐃΔᐃᐃⵠⲆ: 653,
    ⵠΔⵠⲆⲆⵠⵠ: 654,
    ⵠΔⵠⵠⲆᐃΔ: 655,
    ΔᐃⵠΔᐃΔⲆ: 656,
    ᐃΔᐃⲆΔᐃⲆ: 657,
    ΔⲆⵠᐃᐃᐃⵠ: 658,
    ⲆᐃΔⵠⲆⵠⲆ: 659,
    ᐃⲆⲆⵠᐃⲆⵠ: 660,
    ΔⵠⵠΔΔᐃⵠ: 661,
    ⵠⵠΔᐃᐃⵠⵠ: 662,
    ⵠΔⵠⲆᐃⲆΔ: 663,
    ⲆΔΔⲆᐃΔⵠ: 664,
    ᐃᐃⲆⲆⵠᐃΔ: 665,
    ⲆᐃᐃⵠᐃΔΔ: 666,
    ⵠⲆᐃᐃⲆⵠᐃ: 667,
    ⲆⲆⵠΔΔⵠΔ: 668,
    ΔᐃⲆⵠΔⵠⲆ: 669,
    ⲆᐃᐃⲆΔᐃⵠ: 670,
    ⲆᐃΔⵠⲆⲆⲆ: 671,
    ᐃΔⵠᐃΔⲆⵠ: 672,
    ΔᐃᐃᐃⲆ: 673,
    ΔⲆⵠᐃⵠᐃⵠ: 674,
    ΔΔᐃⲆⵠΔᐃ: 675,
    ⲆⵠΔⲆᐃ: 676,
    ᐃⲆⲆⲆΔΔΔᐃⲆ: 677,
    ⲆⲆⲆⲆᐃᐃⵠ: 678,
    ΔΔΔΔⵠ: 679,
    ⵠᐃΔΔⲆᐃΔ: 680,
    ⵠΔⲆⵠⲆᐃⵠ: 681,
    ᐃⵠⲆᐃⵠᐃΔ: 682,
    ΔᐃΔⵠⲆⵠᐃ: 683,
    ᐃᐃⵠᐃⵠᐃⲆ: 684,
    ⲆΔⲆΔᐃᐃⵠ: 685,
    ⵠΔⲆⵠᐃⵠⲆ: 686,
    ᐃᐃᐃᐃᐃⲆΔ: 687,
    ΔⲆΔᐃⵠⵠᐃ: 688,
    ᐃⵠΔⲆᐃⲆⵠ: 689,
    ᐃᐃⲆⲆⲆΔᐃ: 690,
    ⲆᐃⵠⵠⲆ: 691,
    ⵠⵠⲆⵠΔ: 692,
    ⲆΔΔⲆᐃ: 693,
    ⲆΔΔⵠᐃ: 694,
    ⵠⲆⵠΔᐃ: 695,
    ΔⵠΔⵠⵠⵠⲆ: 696,
    ⲆᐃⲆⲆⲆΔΔ: 697,
    ⲆⲆΔᐃᐃΔΔ: 698,
    ⵠⵠⵠⲆΔⵠⲆ: 699,
    ᐃⵠⲆⲆᐃΔⵠ: 700,
    ΔⲆΔⵠⵠΔⲆ: 701,
    ⲆⵠⵠⵠⲆᐃΔ: 702,
    ⲆΔⲆᐃⲆⲆⲆ: 703,
    ΔᐃⵠⵠⵠΔᐃ: 704,
    ᐃΔᐃⲆᐃΔⲆ: 705,
    ⲆΔⵠⲆΔⵠᐃ: 706,
    ⲆⲆΔⲆⵠΔⲆ: 707,
    ⲆΔⲆᐃᐃΔⵠ: 708,
    ⵠᐃᐃⵠΔΔⲆ: 709,
    ⲆⲆⵠⵠⲆⲆΔ: 710,
    ⲆΔⵠΔⲆⵠⲆ: 711,
    ⲆᐃΔⲆΔⵠΔ: 712,
    ⲆⲆΔⲆΔΔⵠ: 713,
    ⵠᐃΔⵠᐃᐃⵠ: 714,
    ⲆΔⵠⲆΔⲆΔ: 715,
    ᐃᐃⲆⵠᐃΔΔ: 716,
    ⵠΔⵠᐃⵠᐃΔ: 717,
    ⲆⵠᐃᐃᐃΔⵠ: 718,
    ⲆⲆⲆⵠΔΔⵠ: 719,
    ⲆⵠᐃΔⲆⵠⵠ: 720,
    ᐃⵠⲆΔⲆⵠⲆⵠⲆ: 721,
    ⵠᐃᐃⲆⵠΔΔ: 722,
    ᐃᐃᐃⲆᐃΔⲆ: 723,
    ⲆⵠΔΔᐃᐃⵠ: 724,
    ⲆᐃᐃⵠΔᐃΔ: 725,
    ᐃⵠΔⲆⲆⲆΔ: 726,
    ΔⲆΔΔⵠ: 727,
    ⲆᐃᐃⲆΔ: 728,
    ⵠⵠⵠΔⲆⲆΔ: 729,
    ⲆᐃⲆⲆΔΔⵠ: 730,
    ᐃΔΔⲆⲆⵠᐃ: 731,
    ᐃΔⲆᐃᐃⵠΔ: 732,
    ΔⵠᐃᐃΔⲆΔ: 733,
    ⵠᐃᐃᐃⵠⵠᐃ: 734,
    ΔᐃⵠⵠᐃⵠⲆ: 735,
    ⲆᐃⵠⵠⲆΔⵠ: 736,
    ⵠΔΔᐃⵠΔΔ: 737,
    ⲆᐃᐃΔⵠⲆΔ: 738,
    ᐃᐃⲆΔᐃⲆⵠ: 739,
    ΔΔⲆⵠⲆⵠΔ: 740,
    ᐃⲆΔⵠⵠⵠⲆ: 741,
    ⵠⲆⲆΔⵠⲆΔ: 742,
    ⵠΔΔᐃᐃⲆᐃ: 743,
    ⲆΔΔΔΔⵠᐃ: 744,
    ΔᐃⲆΔⵠⲆΔ: 745,
    ΔⲆⲆᐃⵠⲆⵠ: 746,
    ⲆⵠᐃⲆΔΔᐃ: 747,
    ᐃⲆⵠΔΔᐃⵠ: 748,
    ΔΔⲆⲆⲆᐃⵠ: 749,
    ᐃᐃⲆⲆΔⲆᐃ: 750,
    ⵠⵠⲆⵠⵠⲆᐃ: 751,
    ΔⲆᐃⵠⵠⲆΔ: 752,
    ⲆⵠᐃⵠᐃⵠΔ: 753,
    ᐃⲆⲆΔⲆΔⵠ: 754,
    ΔΔᐃⲆΔⲆᐃ: 755,
    ᐃⲆⲆⲆᐃΔⲆ: 756,
    ᐃᐃⵠⵠᐃΔΔ: 757,
    ⵠΔⲆᐃᐃΔᐃ: 758,
    ⵠⵠᐃΔᐃⵠⵠ: 759,
    ΔᐃᐃⵠᐃΔΔ: 760,
    ᐃΔᐃΔⵠⲆΔ: 761,
    ᐃⲆΔᐃⵠᐃⵠ: 762,
    ⵠΔᐃᐃΔᐃⵠ: 763,
    ΔⲆᐃⲆᐃⲆᐃ: 764,
    ᐃⵠⵠΔᐃᐃᐃ: 765,
    ⲆⵠⵠᐃⲆΔⵠ: 766,
    ΔⲆᐃⲆᐃᐃⵠ: 767,
    ΔⲆⵠᐃΔᐃⲆ: 768,
    ΔᐃⲆΔⵠⲆⵠ: 769,
    ⲆΔΔᐃᐃᐃᐃ: 770,
    ⲆⵠΔⲆΔⲆⵠ: 771,
    ⵠⵠⲆⵠⵠⵠⵠ: 772,
    ⵠⵠⲆⵠⲆΔᐃ: 773,
    ⵠᐃⲆⵠᐃΔᐃ: 774,
    ⵠⵠⵠᐃΔᐃⲆ: 775,
    ⵠⵠᐃΔᐃⲆΔ: 776,
    ⵠᐃⵠⵠΔᐃᐃ: 777,
    ⲆΔΔΔΔᐃᐃ: 778,
    ⵠᐃⵠⲆⲆᐃⲆ: 779,
    ΔΔⵠᐃⲆⵠᐃ: 780,
    ⵠᐃⲆⵠⲆⵠᐃ: 781,
    ᐃΔᐃᐃⵠΔⲆ: 782,
    ΔⵠⲆⵠⲆⲆᐃ: 783,
    ᐃᐃⵠⵠΔⲆᐃ: 784,
    ΔΔΔᐃⵠⵠⲆ: 785,
    ⵠⲆΔⵠⵠⲆΔ: 786,
    ⵠⲆᐃⵠⵠΔΔ: 787,
    ΔᐃⲆⵠΔⲆΔ: 788,
    ⲆᐃᐃΔᐃᐃᐃ: 789,
    ᐃⲆⲆΔᐃⵠᐃ: 790,
    ΔᐃΔᐃᐃᐃᐃ: 791,
    ΔᐃΔⲆⲆⲆᐃ: 792,
    ᐃⵠΔᐃΔ: 793,
    ΔᐃⲆΔᐃⵠⲆ: 794,
    ᐃᐃΔΔⲆⲆⵠ: 795,
    ΔⲆⲆⵠᐃ: 796,
    ΔⵠᐃΔⲆᐃⵠ: 797,
    ΔΔⲆΔⵠⲆΔ: 798,
    ᐃⵠΔᐃⲆΔΔ: 799,
    ⵠΔⲆⲆⲆΔⲆ: 800,
    ⲆⲆᐃΔⲆᐃⲆ: 801,
    ᐃΔⲆᐃᐃ: 802,
    ΔΔⲆⵠᐃⲆᐃ: 803,
    ⵠᐃⵠⲆⵠΔⵠⵠⵠ: 804,
    ⲆⲆΔΔⵠΔⲆᐃⲆ: 805,
    ⵠᐃⵠΔᐃᐃⲆⲆⲆ: 806,
    ᐃⲆᐃⵠⵠΔᐃⵠᐃ: 807,
    ⲆΔΔⵠⲆⲆᐃ: 808,
    ⵠⵠΔΔΔⲆᐃ: 809,
    ⲆᐃⵠᐃΔΔⵠ: 810,
    ΔᐃᐃⵠⲆⵠΔ: 811,
    ᐃΔΔⵠⵠΔΔ: 812,
    ⵠⵠᐃΔⵠⵠΔ: 813,
    ΔᐃⵠⵠⵠⲆⲆ: 814,
    ⵠΔᐃⲆΔⲆⲆ: 815,
    ΔⲆⵠᐃΔΔⵠ: 816,
    ΔⵠⲆᐃⲆᐃΔ: 817,
    ᐃΔⲆⵠΔ: 818,
    ⵠⲆΔΔΔ: 819,
    ⲆΔⵠⲆⵠⲆᐃ: 820,
    ᐃΔⲆΔᐃᐃⲆ: 821,
    ᐃᐃΔⵠΔΔᐃ: 822,
    ⵠⵠⵠΔΔⲆⲆ: 823,
    ⲆⲆᐃⲆᐃⵠᐃ: 824,
    ⲆΔⵠΔᐃⲆⵠ: 825,
    ᐃᐃᐃⲆⵠΔⵠ: 826,
    ΔΔⲆΔΔⲆⲆ: 827,
    ⵠⵠᐃᐃΔΔⵠ: 828,
    ⲆᐃᐃᐃΔΔⲆ: 829,
    ΔⵠⲆⵠⵠⵠⲆ: 830,
    ΔΔⲆⲆΔⲆᐃ: 831,
    ΔⵠΔᐃΔΔΔΔΔ: 832,
    ⵠΔⲆΔΔΔΔᐃΔ: 833,
    ΔΔⵠⲆⵠᐃⲆ: 834,
    ⲆᐃⲆΔᐃΔⲆ: 835,
    ΔⲆᐃⲆᐃΔⵠ: 836,
    ⲆⲆᐃᐃⵠⵠⵠ: 837,
    ΔᐃⲆᐃⲆⵠⵠ: 838,
    ⲆⲆΔⵠⵠᐃᐃ: 839,
    ΔⲆΔⵠΔᐃⲆ: 840,
    ⲆⲆᐃⲆⲆᐃᐃ: 841,
    ⲆᐃⵠⲆᐃᐃⲆ: 842,
    ᐃᐃⲆⵠⲆⲆⲆ: 843,
    ⲆⵠᐃΔᐃᐃᐃ: 844,
    ᐃⲆⵠⵠⵠⲆᐃ: 845,
    ⵠΔᐃΔΔⲆⵠ: 846,
    ᐃⲆⵠΔⵠᐃⵠ: 847,
    ⲆΔⵠᐃᐃⵠᐃ: 848,
    ⲆⲆⵠⵠΔΔⵠ: 849,
    ΔΔⲆⲆᐃᐃΔ: 850,
    ᐃᐃΔⵠⲆⲆⵠ: 851,
    ΔΔΔᐃᐃⵠᐃΔΔ: 852,
    ᐃⵠΔᐃⵠ: 853,
    ΔΔⵠⵠΔ: 854,
    ⵠⵠᐃⵠⲆⵠΔᐃⲆ: 855,
    ⲆΔⲆⲆⲆᐃᐃΔⵠ: 856,
    ⲆⵠΔᐃⵠᐃⲆⲆⵠ: 857,
    ⲆΔⵠⵠⲆⲆΔⵠⵠ: 858,
    ΔΔΔⵠᐃΔΔ: 859,
    ⲆⵠᐃⵠⲆⲆⵠ: 860,
    ΔΔⵠΔⲆᐃΔ: 861,
    ΔᐃᐃΔⵠᐃΔ: 862,
    ᐃΔᐃⲆⵠⵠⲆ: 863,
    ΔΔΔᐃⲆⲆΔⲆⵠ: 864,
    ΔⲆⵠⲆΔᐃΔ: 865,
    ⲆΔᐃⵠΔᐃⵠ: 866,
    ⵠΔⲆⲆᐃⵠⵠ: 867,
    ΔⲆⲆᐃⲆⲆⵠ: 868,
    ᐃⵠᐃΔΔᐃᐃ: 869,
    ⵠⲆⲆΔᐃⲆΔ: 870,
    ⵠᐃⵠⲆᐃⵠⵠ: 871,
    ΔΔᐃᐃⵠ: 872,
    ⲆⲆⵠⵠΔⵠᐃⲆⲆ: 873,
    ⵠⵠⲆΔⵠΔᐃ: 874,
    ΔⵠⵠⵠⵠΔⲆ: 875,
    ΔⲆⵠⲆⲆᐃⲆ: 876,
    ⵠᐃᐃⲆᐃΔᐃ: 877,
    ⵠΔᐃⵠⲆᐃⲆ: 878,
    ΔΔⲆⵠΔΔⲆ: 879,
    ⲆⲆΔΔⲆΔⲆ: 880,
    ⵠⵠⵠΔᐃΔΔ: 881,
    ⲆⵠⲆᐃⵠⲆΔ: 882,
    ᐃΔᐃΔᐃⵠⵠ: 883,
    ᐃⲆⵠΔΔᐃᐃ: 884,
    ᐃΔⲆΔΔⲆⵠ: 885,
    ⲆⵠⲆΔΔᐃⵠ: 886,
    ⵠⵠⵠᐃᐃ: 887,
    ⵠⵠⲆⲆⲆⲆᐃ: 888,
    ⵠⵠΔᐃⵠⵠΔ: 889,
    ᐃΔᐃᐃᐃⵠΔ: 890,
    ⵠⲆΔΔᐃⵠⵠ: 891,
    ᐃⵠⵠᐃᐃΔΔ: 892,
    ΔⲆⵠⵠΔⵠΔ: 893,
    ⲆΔⵠᐃⵠᐃΔ: 894,
    ⲆᐃΔⵠᐃⲆΔ: 895,
    ᐃⵠⵠᐃΔⲆΔ: 896,
    ⲆⲆⵠⲆΔⲆⲆ: 897,
    ΔΔᐃᐃΔᐃⵠ: 898,
    ⵠⵠⲆⵠᐃΔⲆ: 899,
    ⲆᐃΔⲆⲆⲆⵠ: 900,
    ⲆΔⲆΔⵠᐃᐃ: 901,
    ᐃᐃⲆΔⲆᐃⲆ: 902,
    ⵠⲆⵠⲆΔΔⲆ: 903,
    ⲆⵠⲆⲆⲆΔΔ: 904,
    ⵠΔΔΔᐃⵠⲆ: 905,
    ⵠΔⲆⲆⵠⵠᐃ: 906,
    ΔⵠⲆⵠⵠⵠⵠ: 907,
    ΔΔΔΔᐃⵠⵠ: 908,
    ΔⵠΔⵠΔᐃⲆ: 909,
    ⲆⲆᐃⲆΔΔᐃ: 910,
    ΔΔᐃᐃⵠⵠᐃ: 911,
    ⲆΔΔⲆⵠΔᐃ: 912,
    ΔΔΔⲆΔⵠⵠ: 913,
    ΔⲆⵠΔᐃⵠΔⵠΔ: 914,
    ᐃⲆⵠⵠⵠⲆⵠΔᐃ: 915,
    ⲆᐃᐃⲆΔᐃⵠΔⵠ: 916,
    ᐃⲆⲆⵠᐃⵠⲆᐃⵠ: 917,
    ⲆᐃΔᐃⲆᐃΔ: 918,
    ᐃΔᐃᐃⵠⲆⵠ: 919,
    ⵠⲆΔⵠⲆ: 920,
    ⲆᐃΔΔᐃⲆⵠ: 921,
    ⵠᐃΔᐃᐃⵠΔ: 922,
    ⲆᐃⵠⲆᐃⵠΔ: 923,
    ⵠᐃⲆⲆᐃⵠⲆ: 924,
    ΔΔⲆⲆⵠⲆᐃ: 925,
    ⲆΔⲆⵠⲆⵠΔ: 926,
    ᐃⵠⵠΔᐃᐃⲆ: 927,
    ⵠᐃΔᐃⵠⵠⲆ: 928,
    ΔΔᐃᐃᐃΔΔ: 929,
    ΔⵠᐃᐃᐃΔⵠ: 930,
    ΔⲆΔⲆᐃⵠⵠ: 931,
    ΔⵠⲆΔⲆ: 932,
    ΔⲆᐃΔⵠᐃΔ: 933,
    ⵠᐃⵠⵠΔⵠΔ: 934,
    ᐃⵠⲆΔⵠⵠⲆ: 935,
    ΔᐃⲆⵠᐃᐃᐃ: 936,
    ΔⲆⲆⲆΔⲆᐃ: 937,
    ᐃⲆΔⲆΔ: 938,
    ⵠΔΔⵠⵠᐃΔ: 939,
    ΔᐃΔⵠᐃⵠⲆᐃΔ: 940,
    ⵠⲆⲆⲆᐃ: 941,
    ΔᐃⲆⲆΔᐃᐃ: 942,
    ⵠΔΔⲆΔⲆⵠ: 943,
    ⵠⵠᐃΔᐃⵠⲆ: 944,
    ⲆᐃΔΔΔⵠⵠ: 945,
    ⵠⵠⲆΔⵠⲆΔ: 946,
    ΔⵠⲆΔᐃⵠⵠ: 947,
    ΔᐃᐃᐃⲆⲆⵠ: 948,
    ⲆⵠⵠⲆᐃΔⵠ: 949,
    ΔᐃⵠⵠⲆΔⲆ: 950,
    ⲆⲆⵠⲆᐃⲆⲆ: 951,
    ⵠⵠΔΔΔⲆΔ: 952,
    ᐃΔⵠⵠᐃᐃᐃ: 953,
    ΔⲆⵠⵠⵠⵠⵠ: 954,
    ⵠⲆⲆⲆΔⵠΔ: 955,
    ΔΔⲆᐃΔᐃᐃ: 956,
    ΔΔⲆᐃΔᐃⵠ: 957,
    ⲆⵠΔᐃᐃᐃΔ: 958,
    ⵠᐃΔΔᐃⲆⲆ: 959,
    ⵠⵠⵠΔⵠᐃΔ: 960,
    ⲆΔᐃΔⲆⲆⲆ: 961,
    ᐃⵠⲆⲆΔΔΔ: 962,
    ΔⲆⵠⵠⵠⵠⲆ: 963,
    ⲆΔⵠⵠⲆⵠᐃᐃᐃ: 964,
    ΔⲆⲆⲆⲆΔΔ: 965,
    ᐃⲆΔⲆᐃΔⵠ: 966,
    ⵠⵠΔᐃⲆΔᐃ: 967,
    ᐃΔΔΔΔⵠᐃ: 968,
    ᐃⵠⲆᐃΔⵠᐃ: 969,
    ⵠΔⲆΔΔΔⵠ: 970,
    ⵠⲆΔᐃΔᐃⵠ: 971,
    ΔΔᐃᐃⵠᐃΔ: 972,
    ᐃΔΔⲆΔΔⵠ: 973,
    ᐃΔⲆⵠᐃⵠᐃ: 974,
    Δⵠⵠⵠᐃᐃᐃ: 975,
    ⲆᐃΔⵠΔⲆⲆ: 976,
    ⲆΔΔⵠⵠᐃⲆ: 977,
    ᐃΔⵠΔⵠᐃⵠ: 978,
    ᐃⲆⵠⲆΔⵠΔ: 979,
    ᐃⵠⵠΔΔⲆⲆ: 980,
    ⵠᐃᐃⵠⵠⵠⵠ: 981,
    ΔⲆⵠΔⲆΔΔ: 982,
    ⲆⲆⲆⲆᐃΔᐃ: 983,
    ΔᐃᐃᐃⵠⲆⵠ: 984,
    ΔΔⲆⵠΔΔᐃ: 985,
    ᐃⲆΔⵠΔᐃᐃ: 986,
    ΔⲆⲆⲆⲆⲆΔ: 987,
    ⲆΔⲆΔⵠΔⵠ: 988,
    ⲆⵠΔᐃⵠ: 989,
    ΔΔⲆΔⵠⲆᐃ: 990,
    ⵠⵠⲆᐃⲆⲆΔ: 991,
    ᐃΔΔⲆⲆⵠⵠ: 992,
    ⲆⲆΔᐃᐃⲆⲆ: 993,
    ⵠᐃⵠᐃⲆⲆᐃ: 994,
    ᐃⵠⲆᐃⵠΔᐃ: 995,
    ΔᐃⲆΔΔⲆΔ: 996,
    ΔⲆᐃⲆⵠΔᐃ: 997,
    ᐃᐃⵠΔⲆⲆⲆ: 998,
    ⲆᐃᐃΔᐃⵠⵠ: 999,
    ⲆⵠⵠΔⲆⲆⵠ: 1000,
    ⵠᐃΔᐃᐃⲆⲆ: 1001,
    ⲆᐃΔᐃᐃⵠⵠ: 1002,
    ᐃⲆⵠᐃⵠΔΔ: 1003,
    ⲆΔΔᐃⵠⲆⵠ: 1004,
    ⲆᐃⵠⲆΔⵠᐃ: 1005,
    ⲆᐃᐃΔΔΔⲆ: 1006,
    ΔⵠⲆⵠᐃᐃⵠ: 1007,
    ᐃᐃᐃⵠⲆᐃⲆ: 1008,
    ⲆΔᐃΔⲆⵠΔ: 1009,
    ⵠⵠΔΔΔⵠⵠ: 1010,
    ⵠⲆⲆⵠΔⵠⵠ: 1011,
    ⲆΔᐃΔᐃΔΔ: 1012,
    ⲆⵠⲆΔⲆΔⲆ: 1013,
    ⲆⵠⵠⲆⲆⵠⵠ: 1014,
    ᐃⲆᐃⲆΔⵠⲆ: 1015,
    ΔⲆⲆⵠΔΔᐃ: 1016,
    ΔⲆΔⲆᐃⲆΔ: 1017,
    ⵠⵠΔⵠΔΔᐃ: 1018,
    ᐃⲆⲆⵠΔⵠⵠ: 1019,
    ⵠⲆΔⲆᐃΔᐃ: 1020,
    ΔⵠⲆⲆⵠΔⵠ: 1021,
    ⲆⵠΔᐃΔᐃΔ: 1022,
    ⵠΔΔΔᐃᐃᐃ: 1023,
    ⵠΔⲆⵠ: 1024,
    ΔᐃΔᐃ: 1025,
    ⲆⵠⲆⲆᐃⲆΔ: 1026,
    ΔⵠΔⲆⲆⵠⲆ: 1027,
    ⲆⵠΔΔⵠᐃⲆ: 1028,
    ⵠᐃⲆᐃᐃᐃᐃ: 1029,
    ⲆᐃΔᐃⲆᐃᐃ: 1030,
    ⵠΔⲆⵠⵠᐃⲆ: 1031,
    ⵠⵠⲆᐃⵠᐃΔ: 1032,
    ᐃΔᐃᐃᐃ: 1033,
    ⲆⵠⲆΔⵠⲆᐃ: 1034,
    ⲆᐃΔⲆᐃ: 1035,
    Δᐃᐃᐃᐃᐃᐃ: 1036,
    ᐃⲆⵠⵠⵠ: 1037,
    ᐃⲆᐃΔΔⲆΔ: 1038,
    ΔΔΔᐃⵠ: 1039,
    ⵠΔᐃΔⵠΔᐃ: 1040,
    ⲆⲆΔΔⵠ: 1041,
    ᐃΔⵠⲆⵠ: 1042,
    ΔΔⵠⲆᐃⵠⲆ: 1043,
    ⲆΔΔⵠΔΔⵠ: 1044,
    ⲆⲆΔⵠΔⵠΔ: 1045,
    ⲆⵠΔⵠⲆⲆⲆ: 1046,
    ᐃᐃᐃΔΔⲆΔ: 1047,
    ᐃΔⵠΔⲆΔΔ: 1048,
    ΔⵠⲆⵠⵠΔⲆ: 1049,
    ⲆⵠⲆᐃΔᐃⲆ: 1050,
    ⲆΔΔᐃⲆⲆᐃ: 1051,
    ⵠᐃⵠⵠΔ: 1052,
    ⲆᐃⲆⲆᐃΔⵠ: 1053,
    ⲆⵠⵠⲆΔ: 1054,
    ΔⲆᐃᐃᐃⵠᐃ: 1055,
    ⵠᐃⲆⵠⲆΔⵠ: 1056,
    ΔᐃⲆΔⲆⵠΔ: 1057,
    ⵠⲆΔΔⵠⲆᐃ: 1058,
    ⲆⲆⲆⵠⵠⲆⵠ: 1059,
    ᐃⵠⲆⲆΔΔⲆ: 1060,
    ΔⵠⵠⲆⵠⵠⲆⵠΔ: 1061,
    ΔⲆΔᐃᐃⵠᐃ: 1062,
    ⵠⵠⵠᐃⵠⵠⵠ: 1063,
    ⵠⲆᐃⲆᐃⵠΔⲆⲆ: 1064,
    ⵠΔᐃΔⲆⵠⲆ: 1065,
    ᐃΔⵠᐃⵠᐃⵠ: 1066,
    ᐃⲆᐃΔⲆⵠΔ: 1067,
    ΔᐃⵠᐃⵠⵠΔ: 1068,
    ΔⲆᐃᐃⵠ: 1069,
    ⲆᐃⲆᐃᐃΔⵠ: 1070,
    ᐃⲆⵠΔⵠⵠⵠ: 1071,
    ⵠⲆⲆⲆⵠⵠⲆ: 1072,
    ⲆⵠᐃⵠⵠΔΔ: 1073,
    ⵠΔᐃΔᐃΔⲆ: 1074,
    ΔⵠΔⵠⵠⲆⵠ: 1075,
    ᐃΔΔᐃᐃⵠⵠ: 1076,
    ⵠⵠΔᐃⲆᐃⲆ: 1077,
    Δⵠⵠⵠᐃⵠⵠ: 1078,
    ᐃⲆⵠⲆⵠᐃⲆ: 1079,
    ΔᐃΔΔᐃΔⵠ: 1080,
    ⲆΔᐃΔΔᐃⵠ: 1081,
    ⲆΔⵠΔⲆΔⵠ: 1082,
    ⲆᐃΔΔⲆⵠⵠ: 1083,
    ⵠⵠⲆΔΔ: 1084,
    ᐃⲆⵠⵠΔⲆΔ: 1085,
    ⲆⲆⵠⵠᐃⵠᐃ: 1086,
    ΔᐃΔᐃΔΔᐃ: 1087,
    ⵠΔⲆⵠᐃⲆΔ: 1088,
    ⵠᐃᐃⵠΔᐃⵠ: 1089,
    ⵠᐃΔᐃⵠⵠΔ: 1090,
    ⵠᐃⲆⲆᐃᐃⲆ: 1091,
    ᐃΔᐃΔⲆᐃⵠ: 1092,
    ⲆΔⲆⲆⵠⵠⲆ: 1093,
    ⲆᐃᐃᐃⲆⵠⵠ: 1094,
    ⵠⲆⵠᐃⲆΔⲆ: 1095,
    ᐃⵠᐃⵠⲆⲆᐃ: 1096,
    ⲆⵠΔⵠΔᐃⵠ: 1097,
    ⵠᐃⵠΔⵠⲆⲆ: 1098,
    ΔᐃⲆΔᐃ: 1099,
    ᐃΔⲆⵠᐃΔΔ: 1100,
    ⲆⲆⲆⲆⵠᐃⵠ: 1101,
    ⲆⲆΔⲆΔⲆΔ: 1102,
    ᐃᐃⲆΔⵠⵠΔ: 1103,
    ΔΔⵠⲆⵠᐃΔ: 1104,
    ΔⲆⵠⵠⲆΔⲆ: 1105,
    ⲆⲆΔⲆⵠᐃⵠ: 1106,
    ᐃⵠⲆΔⵠⲆΔ: 1107,
    ⲆⵠⵠⵠᐃΔΔ: 1108,
    ΔⵠΔⲆᐃᐃΔ: 1109,
    ⲆᐃᐃᐃΔⲆᐃ: 1110,
    ⲆⵠⵠᐃΔⵠᐃ: 1111,
    ᐃΔΔᐃⲆⲆΔ: 1112,
    ᐃⲆⲆⵠⲆⲆᐃ: 1113,
    ᐃⲆⵠΔⵠΔⲆ: 1114,
    ΔᐃⵠΔⲆᐃⲆ: 1115,
    ⲆᐃΔⲆᐃⲆΔ: 1116,
    ᐃᐃΔⵠⵠᐃⲆ: 1117,
    ΔᐃᐃⲆⲆⵠΔ: 1118,
    ΔᐃⲆⲆⲆΔᐃ: 1119,
    ⲆᐃⲆΔⲆ: 1120,
    ΔᐃⲆᐃⲆΔΔ: 1121,
    ⵠⲆⵠΔⵠᐃΔ: 1122,
    ΔΔᐃⵠⲆⲆᐃ: 1123,
    ⲆᐃΔᐃΔⵠⲆ: 1124,
    ΔΔⲆᐃⲆΔΔ: 1125,
    ⲆΔΔᐃᐃⵠᐃ: 1126,
    ⲆⲆᐃΔⲆᐃΔ: 1127,
    ⲆⲆΔⵠᐃᐃⵠ: 1128,
    ⲆⵠᐃΔⲆΔΔ: 1129,
    ⲆⵠⲆⵠⲆⲆΔ: 1130,
    ᐃⲆⵠᐃΔⲆΔ: 1131,
    ᐃⲆΔⵠⵠⲆⵠ: 1132,
    ⵠⵠΔᐃᐃⵠΔ: 1133,
    ᐃⵠΔΔᐃⵠⵠ: 1134,
    ΔⵠᐃⲆⵠᐃⲆ: 1135,
    ⲆΔΔⵠᐃΔᐃ: 1136,
    ᐃⵠΔΔⵠᐃΔ: 1137,
    ΔⵠᐃⵠⵠⵠΔ: 1138,
    ⵠⵠⲆⲆᐃⵠⲆ: 1139,
    ᐃⲆᐃⵠᐃⲆᐃ: 1140,
    ⵠΔΔⵠⲆΔⲆ: 1141,
    ⵠΔⵠᐃΔΔⵠ: 1142,
    ⵠᐃᐃΔⲆᐃΔ: 1143,
    ᐃⲆᐃᐃᐃᐃⵠ: 1144,
    ⵠᐃⵠΔⵠⲆΔ: 1145,
    ΔⲆᐃⲆⲆᐃⲆ: 1146,
    ᐃⵠΔᐃΔⵠⵠ: 1147,
    ΔⲆⵠⲆᐃΔΔ: 1148,
    ⵠⵠᐃᐃΔⵠΔ: ["#E9CF96", "#144940"],
    ΔⵠⲆᐃᐃⵠΔ: 1149,
    ᐃⵠⲆᐃⲆᐃΔ: 1150,
    ΔᐃⵠⵠⲆⲆⲆ: 1151,
    ⵠⲆᐃⵠᐃⲆΔ: 1152,
    ᐃⲆᐃⵠΔⲆᐃ: 1153,
    ᐃⵠⲆⵠⲆⵠⲆ: 1154,
    ⵠⲆΔⲆᐃⵠⲆ: 1155,
    ΔⵠᐃⲆⲆ: 1156,
    ⵠⵠᐃΔⲆⵠΔ: 1157,
    ⲆⲆΔΔⵠᐃᐃ: 1158,
    ⵠⵠⲆᐃΔⲆⲆ: 1159,
    ⵠᐃΔΔΔⵠⵠ: 1160,
    ⵠⵠⲆⲆᐃᐃΔ: 1161,
    ⲆⲆᐃΔΔΔᐃ: 1162,
    ᐃΔᐃⵠⲆⲆⲆ: 1163,
    ΔΔΔⲆΔⵠΔ: 1164,
    ⵠᐃⵠⲆⲆΔⵠ: 1165,
    ⲆΔΔⵠᐃⵠᐃ: 1166,
    ΔΔⲆᐃⲆⵠᐃ: 1167,
    ⵠⲆⵠᐃⲆΔⵠ: 1168,
    ᐃⲆⵠⲆⵠΔᐃ: 1169,
    ΔⲆΔⵠᐃᐃΔ: 1170,
    ΔⲆⲆⲆⵠΔⲆ: 1171,
    ᐃᐃⲆⲆᐃΔᐃ: 1172,
    ⲆⵠⲆΔⲆⵠⵠ: 1173,
    ᐃⵠΔⵠᐃΔⲆ: 1174,
    ᐃᐃᐃⵠᐃᐃᐃ: 1175,
    ⵠⲆⲆⲆⲆⵠΔ: 1176,
    ΔᐃⲆⲆΔⲆⵠ: 1177,
    ⵠⵠⲆΔΔᐃⲆ: 1178,
    ⵠⲆⲆⲆⲆⵠⵠ: 1179,
    ᐃΔᐃΔΔⲆΔ: 1180,
    ᐃⲆⲆⵠᐃΔΔ: 1181,
    ⲆΔⲆⲆⵠᐃⵠ: 1182,
    ⵠⵠⲆⲆᐃᐃᐃ: 1183,
    ⲆⵠⲆᐃⲆᐃⵠ: 1184,
    ⲆⵠⵠⵠⵠⵠΔ: 1185,
    ⲆΔᐃⲆᐃᐃΔ: 1186,
    ⲆⲆⲆΔⵠᐃⵠ: 1187,
    ⲆⵠⵠⵠΔᐃⲆ: 1188,
    ᐃⲆΔΔᐃᐃΔ: 1189,
    ΔΔⵠΔᐃᐃⵠ: 1190,
    ΔΔⵠⲆΔⲆᐃ: 1191,
    ΔⵠⲆⲆⵠⵠᐃ: 1192,
    ΔΔΔⲆⵠΔᐃ: 1193,
    ⵠᐃⲆⲆⵠΔΔ: 1194,
    ΔᐃΔΔⲆⲆⵠ: 1195,
    ⲆⵠᐃⵠΔΔⲆ: 1196,
    ᐃᐃΔⵠⵠⲆⲆ: 1197,
    ᐃᐃⲆⵠⲆΔΔ: 1198,
    ⵠᐃⵠⲆⵠⲆᐃ: 1199,
    ⲆΔⵠΔᐃⵠΔ: 1200,
    ᐃⲆⵠΔⲆⲆⵠ: 1201,
    ᐃⲆⵠⲆⵠᐃΔ: 1202,
    Ⲇⵠᐃᐃᐃᐃⵠ: 1203,
    ⲆⵠⲆΔᐃΔᐃ: 1204,
    ΔⲆΔⵠⲆⲆⲆ: 1205,
    ΔⵠΔᐃΔΔᐃ: 1206,
    ΔΔΔⲆΔⵠⲆ: 1207,
    ⵠᐃⵠᐃᐃⲆᐃ: 1208,
    ᐃΔⲆᐃⵠΔⵠ: 1209,
    ΔⵠⵠⲆⲆⵠⵠ: 1210,
    ⵠⲆⵠⲆⲆⲆᐃ: 1211,
    ⲆⲆΔᐃⲆⲆᐃ: 1212,
    ΔΔⵠⵠⲆᐃⵠ: 1213,
    ⵠⲆΔⲆᐃⵠⵠ: 1214,
    ᐃⵠⵠⲆⵠⵠᐃ: 1215,
    ᐃΔΔⵠⵠⵠⵠ: 1216,
    ᐃΔᐃΔⵠΔᐃ: 1217,
    ᐃΔΔⲆᐃ: 1218,
    ᐃΔⲆⲆⵠⵠⵠ: 1219,
    ⲆⲆⵠⵠⵠ: 1220,
    ΔⲆᐃⲆⵠⲆᐃ: 1221,
    ⲆⲆⵠΔᐃⲆΔ: 1222,
    ᐃᐃΔΔΔΔⵠ: 1223,
    ᐃᐃⲆΔᐃⲆΔ: 1224,
    ΔᐃⲆⲆⲆⲆᐃ: 1225,
    ΔΔΔⲆΔⲆᐃ: 1226,
    ᐃᐃⲆΔⲆⵠΔ: 1227,
    ΔᐃⵠΔᐃⲆᐃ: 1228,
    ᐃⲆⲆΔᐃⵠⲆ: 1229,
    ⵠΔⲆᐃΔⲆᐃ: 1230,
    ⵠⵠⲆⵠᐃᐃⲆ: 1231,
    ΔΔᐃᐃⵠⵠⵠ: 1232,
    ΔᐃΔⵠᐃᐃᐃ: 1233,
    ᐃᐃΔΔᐃΔᐃ: 1234,
    ΔΔᐃᐃⵠΔⵠ: 1235,
    ⵠⲆΔⲆΔΔΔ: 1236,
    ᐃⲆΔΔᐃⲆⲆ: 1237,
    ᐃⵠⵠΔⵠΔᐃ: 1238,
    ΔⵠΔⲆΔⲆΔ: 1239,
    ⲆᐃⵠᐃΔⲆⲆ: 1240,
    ΔΔΔΔⲆⵠⵠ: 1241,
    ΔⲆΔᐃⵠᐃΔ: 1242,
    ⵠⵠⵠⲆᐃⵠⵠ: 1243,
    ᐃⵠⲆⲆΔⲆⵠ: 1244,
    ⲆᐃⵠΔᐃⵠΔ: 1245,
    ⵠⵠⲆⲆⲆᐃᐃ: 1246,
    ΔⲆΔᐃⵠⲆΔ: 1247,
    ᐃΔΔᐃⲆⵠΔ: 1248,
    ⲆⲆⲆⵠⲆⲆⵠ: 1249,
    ΔᐃᐃᐃⲆᐃᐃ: 1250,
    ⲆⲆⵠⲆᐃⲆᐃ: 1251,
    Ⲇᐃⵠᐃⵠᐃᐃ: 1252,
    ⵠΔⲆⵠⲆⵠⵠ: 1253,
    ᐃⵠΔⲆⲆⵠⲆ: 1254,
    ⵠⲆⲆⵠⵠⵠᐃ: 1255,
    ⲆⲆⲆᐃᐃΔⲆ: 1256,
    ⲆⵠᐃⵠΔΔⵠ: 1257,
    ΔⲆⵠⵠΔⲆⲆ: 1258,
    ⲆΔⲆⵠΔᐃΔ: 1259,
    ΔⲆⵠΔᐃᐃΔ: 1260,
    ⲆⵠᐃΔⲆⵠΔ: 1261,
    ⲆⲆΔΔΔᐃⵠ: 1262,
    ⲆⵠΔᐃΔΔΔ: 1263,
    ⵠΔΔⲆᐃΔᐃ: 1264,
    ΔⵠᐃⲆΔⵠᐃ: 1265,
    ᐃΔⲆᐃⵠΔⲆ: 1266,
    ᐃΔᐃᐃⲆⲆⵠ: 1267,
    Δⵠⵠⵠᐃⵠᐃ: 1268,
    ⵠΔᐃΔΔΔΔ: 1269,
    ⵠⲆΔΔᐃΔⲆ: 1270,
    ⵠᐃᐃⲆΔⵠⵠ: 1271,
    ⵠⵠΔⵠⵠᐃⵠ: 1272,
    ⵠΔⵠⵠᐃᐃΔ: 1273
  };
  const Nr = 10;
  const Or = 2;
  const Pr = 12;
  const Qr = 4;
  Lr = 0;
  var Rr = {
    ΔⲆⲆΔᐃ: 0,
    ᐃⲆⵠⲆᐃ: 1,
    ΔⵠⲆⲆⵠ: 2,
    ΔⵠΔⲆⵠ: 3,
    ᐃᐃΔᐃⵠ: 4,
    ⵠⲆⲆⲆΔ: 5,
    ⵠᐃⲆᐃᐃ: 6,
    ⵠᐃⵠΔⲆ: 7,
    ΔΔᐃᐃᐃ: 8,
    ᐃⲆΔⵠᐃ: 9,
    ΔᐃΔⵠⲆ: 10,
    ᐃⵠⵠΔᐃ: 11,
    ᐃⲆᐃⵠⵠ: 12,
    ⵠᐃᐃᐃⵠ: 13,
    ᐃᐃⵠᐃΔ: 14,
    ΔΔᐃⲆΔ: 15,
    ᐃⵠⵠⵠⵠ: 16,
    ⵠⵠⲆⲆΔ: 17,
    ⵠᐃᐃΔⵠ: 18,
    ⲆΔⵠᐃⲆ: 19,
    ᐃⲆⲆⲆⵠ: 20,
    ᐃᐃⲆⵠⲆ: 21,
    ⵠΔⵠᐃᐃ: 22,
    ⲆⲆⲆᐃΔ: 23,
    ⵠΔⲆΔᐃ: 24,
    ᐃⵠᐃⵠᐃ: 25,
    ΔⲆⵠᐃᐃ: 26,
    ⵠⲆᐃⲆᐃ: 27,
    ⵠᐃⲆᐃΔ: 28,
    ⲆΔᐃⲆⲆ: 29,
    ᐃᐃⵠᐃⲆ: 30,
    ᐃΔΔᐃⵠ: 31,
    ΔᐃΔⲆⲆ: 32,
    ⵠᐃⲆΔᐃ: 33,
    ⲆΔᐃⲆΔ: 34,
    ⲆⲆᐃΔΔ: 35,
    ᐃΔⵠⵠⵠ: 36,
    ⲆⲆΔⲆᐃ: 37,
    ⵠⲆⲆΔⲆ: 38,
    ΔΔᐃᐃⲆ: 39,
    ⲆᐃⵠΔΔ: 40,
    ⲆΔⵠⲆⵠ: 41,
    ᐃᐃⲆΔᐃ: 42,
    ΔⵠᐃᐃⲆ: 43,
    ⲆᐃⲆⵠΔ: 44,
    ⲆΔⵠⲆᐃ: 45,
    ⲆᐃⲆΔⵠ: 46,
    ΔⵠⲆⲆⲆ: 47,
    ΔᐃᐃΔⲆ: 48,
    ⵠⵠΔΔⲆ: 49,
    ΔᐃΔΔⵠ: 50,
    ⲆᐃΔΔⲆ: 51,
    ΔᐃⵠⲆΔ: 52,
    ᐃⵠᐃⵠΔ: 53,
    ⲆⲆⵠᐃⲆ: 54,
    ⵠⵠΔⲆΔ: 55,
    ᐃⵠⵠᐃΔ: 56,
    ⵠⲆⵠᐃΔ: 57,
    ΔΔⵠΔᐃ: 58,
    ᐃᐃⵠᐃᐃ: 59,
    ΔΔⵠᐃΔ: 60,
    ⵠⲆΔⲆΔ: 61,
    ⲆᐃⵠΔⲆ: 62,
    ⲆᐃΔⲆⲆ: 63,
    ΔᐃᐃⲆⲆ: 64,
    ⲆΔΔᐃᐃ: 65,
    ᐃᐃΔΔⲆ: 66,
    ᐃⵠΔⵠΔ: 67,
    ΔᐃⵠΔᐃ: 68,
    ΔⲆⲆᐃⲆ: 69,
    ᐃⲆΔΔᐃ: 70,
    ΔⲆⲆⲆΔ: 71,
    ⲆⲆΔᐃΔ: 72,
    ⵠΔΔᐃⵠ: 73,
    ᐃⵠⲆⵠⵠ: 74,
    ⲆΔⵠΔⲆ: 75,
    ⵠᐃⵠⵠᐃ: 76,
    Ⲇᐃⵠᐃᐃ: 77,
    ΔⲆᐃⲆΔ: 78,
    ᐃⵠⵠΔⵠ: 79,
    ΔᐃᐃⲆᐃ: 80,
    ⵠᐃᐃΔΔ: 81,
    ᐃⲆⲆⲆⲆ: 82,
    ⵠΔᐃΔΔ: 83,
    ᐃΔⲆΔⲆ: 84,
    ⵠΔⵠⲆⵠ: 85,
    ⲆⵠⵠΔⲆ: 86,
    ⲆΔᐃᐃᐃ: 87,
    ⵠΔⵠΔᐃ: 88,
    ᐃᐃΔᐃΔ: 89,
    ⵠⵠᐃᐃⵠ: 90,
    ⲆᐃᐃᐃⲆ: 91,
    ᐃⵠⵠⵠΔ: 92,
    ⲆⲆᐃΔᐃ: 93,
    ⲆⲆⵠⲆΔ: 94,
    ⵠΔᐃΔⵠ: 95,
    ΔᐃΔᐃⲆ: 96,
    ⵠᐃⵠⵠⲆ: 97,
    ᐃⵠΔⵠⲆ: 98,
    ⲆΔⲆᐃⲆ: 99,
    ⲆⵠⲆΔ: 100,
    ⵠⲆᐃΔᐃ: 101,
    ΔᐃⵠⵠΔ: 102,
    ⲆΔᐃⵠⵠ: 103,
    ᐃⵠᐃΔΔ: 104,
    ᐃᐃⲆⲆΔ: 105,
    ΔⲆᐃⲆᐃ: 106,
    ΔⲆΔⲆⵠ: 107,
    ᐃⲆΔⵠⲆ: 108,
    ΔΔΔⵠᐃ: 109,
    ⵠᐃⲆⲆⲆ: 110,
    ⵠⲆΔᐃⵠ: 111,
    ⵠΔΔⵠΔΔᐃ: 112,
    ⵠᐃⲆⵠᐃⵠⲆ: 113,
    ⲆⲆΔⵠᐃ: 114,
    ΔⵠᐃΔΔ: 115,
    ᐃⲆⲆⵠᐃ: 116,
    Ⲇᐃⵠⵠᐃ: 117,
    ᐃΔᐃⵠᐃ: 118,
    Δⵠⵠⵠᐃ: 119,
    ⲆᐃᐃΔⵠ: 120,
    ᐃⲆᐃΔⵠ: 121,
    ᐃΔⲆⲆⲆ: 122,
    ⲆΔΔΔᐃ: 123,
    ᐃⵠⲆⲆⵠ: 124,
    ᐃⲆΔΔⵠ: 125,
    ᐃᐃᐃΔⵠ: 126,
    ⲆᐃᐃⲆⲆ: 127,
    ᐃΔⲆⲆΔ: 128,
    ᐃᐃᐃⲆΔ: 129,
    ⵠᐃᐃⲆᐃ: 130,
    ⵠᐃⲆⵠⵠ: 131,
    ⲆΔᐃⲆⵠ: 132,
    ΔⵠⵠⲆⲆ: 133,
    ᐃⲆᐃΔⲆ: 134,
    ⵠⵠΔᐃΔ: 135,
    ΔⵠΔΔⵠ: 136,
    ⵠΔᐃⵠᐃ: 137,
    ΔⵠⲆⵠΔ: 138,
    ᐃΔᐃΔⵠ: 139,
    ΔⲆᐃᐃⲆ: 140,
    Δᐃᐃⵠⵠ: 141,
    ⵠⲆⵠⲆΔ: 142,
    ᐃⲆⵠᐃΔ: 143,
    ᐃⲆⵠⲆⵠ: 144,
    ⲆⵠⵠⵠΔ: 145,
    ⵠΔΔᐃΔ: 146,
    ⲆΔⲆⲆᐃ: 147,
    ⵠΔΔΔΔ: 148,
    ⲆᐃⵠΔᐃ: 149,
    ᐃⲆⲆᐃᐃ: 150,
    ⵠⲆᐃΔΔ: 151,
    ⲆΔⲆⵠⵠ: 152,
    ⵠᐃΔⵠᐃ: 153,
    ⵠΔᐃΔⲆ: 154,
    ⲆᐃΔⵠⵠ: 155,
    ᐃⲆᐃΔΔ: 156,
    ΔᐃᐃⲆⵠ: 157,
    ᐃⲆⲆΔⲆ: 158,
    ⲆΔⵠⵠᐃ: 159,
    ⵠᐃᐃᐃΔ: 160,
    ΔΔⵠΔΔ: 161,
    ΔΔΔΔⲆ: 162,
    ᐃᐃⵠⲆΔ: 163,
    ⵠⲆⲆⲆⵠ: 164,
    ΔⲆⵠⵠⲆ: 165,
    ⲆⵠⲆΔⵠ: 166,
    ᐃΔΔⲆⵠ: 167,
    ⲆᐃⵠΔⵠ: 168,
    ΔᐃΔΔⲆ: 169,
    ⵠΔΔΔⲆ: 170,
    ΔⲆΔΔΔ: 171,
    ᐃΔⵠᐃΔ: 172,
    ᐃⲆΔΔΔ: 173,
    ΔᐃⲆⵠⵠ: 174,
    ΔⵠΔⵠΔ: 175,
    ᐃΔᐃΔᐃ: 176
  };
  const Sr = 0;
  Lr = 0;
  const Tr = 100;
  const Ur = 15;
  var Vr = {
    ⲆⲆᐃΔΔ: 0,
    ⵠⲆⲆⲆΔ: 1,
    ΔⵠΔⲆΔ: 2,
    ⵠᐃⲆᐃᐃ: 3,
    ⵠᐃⵠΔⲆ: 4,
    ᐃΔⵠⵠⵠ: 5,
    ⲆⲆΔⲆᐃ: 6,
    ΔΔⲆⵠᐃ: 7,
    ᐃᐃΔᐃⵠ: 8,
    ⲆⵠⲆΔΔ: 9,
    ⵠΔᐃΔΔ: 10,
    ᐃΔⲆΔⲆ: 11,
    ᐃⵠᐃⵠᐃ: 12,
    ΔⲆⵠᐃᐃ: 13,
    ⵠⲆᐃⲆᐃ: 14,
    ⵠᐃⲆᐃΔ: 15,
    ᐃΔΔᐃⵠ: 16,
    ΔᐃΔⲆⲆ: 17,
    ⵠᐃⲆΔᐃ: 18,
    ΔΔᐃᐃⲆ: 19,
    ⵠΔᐃΔⵠ: 20,
    ΔᐃΔᐃⲆ: 21,
    ⵠᐃⵠⵠⲆ: 22,
    ΔᐃᐃⲆᐃ: 23,
    ⵠᐃᐃΔΔ: 24,
    ⵠΔⵠΔᐃ: 25,
    ᐃᐃΔᐃΔ: 26,
    ⵠⵠᐃᐃⵠ: 27,
    ⵠΔⲆΔᐃ: 28,
    ⲆⵠⲆΔ: 29,
    ⵠⲆⲆΔⲆ: 30,
    ΔΔᐃᐃᐃ: 31,
    ᐃⲆΔⵠᐃ: 32,
    ⲆΔᐃⲆⲆ: 33,
    ᐃᐃⵠᐃⲆ: 34,
    ΔᐃΔⵠⲆ: 35,
    ᐃⵠⵠΔᐃ: 36,
    ᐃⲆᐃⵠⵠ: 37,
    ⵠᐃᐃᐃⵠ: 38,
    ᐃᐃⵠᐃΔ: 39,
    ⵠΔⵠⲆⵠ: 40,
    ⵠᐃⵠᐃⲆ: 41,
    ᐃⵠⵠⲆⲆ: 42,
    ⲆᐃᐃᐃⲆ: 43,
    ᐃⵠⵠⵠΔ: 44,
    ΔΔᐃⲆΔ: 45,
    ᐃⵠⵠⵠⵠ: 46,
    ⲆⲆⵠⲆΔ: 47,
    ⲆⲆᐃΔᐃ: 48,
    ᐃᐃⲆⵠⲆ: 49,
    ⵠⵠⲆⲆΔ: 50,
    ⵠᐃᐃΔⵠ: 51,
    ⲆΔⵠᐃⲆ: 52,
    ⵠΔⵠᐃᐃ: 53,
    ⲆⲆⲆᐃΔ: 54,
    ᐃΔⲆⲆⲆ: 55,
    ⲆΔΔΔᐃ: 56,
    ⲆΔᐃⲆΔ: 57,
    ⲆΔᐃᐃᐃ: 58,
    ᐃᐃᐃΔⵠ: 59,
    ⲆᐃᐃⲆⲆ: 60,
    ᐃΔⲆⲆΔ: 61,
    ᐃᐃᐃⲆΔ: 62,
    ⵠᐃᐃⲆᐃ: 63,
    ⵠᐃⲆⵠⵠ: 64,
    ΔⵠⵠⲆⲆ: 65,
    ⵠⵠΔᐃΔ: 66,
    ⵠΔᐃⵠᐃ: 67,
    ᐃΔᐃΔⵠ: 68,
    Δᐃᐃⵠⵠ: 69,
    ᐃⲆⵠᐃΔ: 70,
    ⲆⵠⵠⵠΔ: 71,
    ⵠΔΔᐃΔ: 72,
    ⲆΔⲆⲆᐃ: 73,
    ⵠΔΔΔΔ: 74,
    ⲆᐃⵠΔᐃ: 75,
    ᐃⲆⲆᐃᐃ: 76,
    ⵠⲆᐃΔΔ: 77,
    ⲆΔⲆⵠⵠ: 78,
    ⵠᐃΔⵠᐃ: 79,
    ᐃⵠΔⵠⲆ: 80,
    ⲆΔⲆᐃⲆ: 81,
    ᐃⲆⲆⲆⲆ: 82,
    ⵠΔᐃΔⲆ: 83,
    ⲆᐃΔⵠⵠ: 84,
    ᐃⲆᐃΔΔ: 85,
    ΔᐃᐃⲆⵠ: 86,
    ⵠΔⵠⵠᐃ: 87,
    ⲆⵠⵠΔⲆ: 88,
    ΔⲆⵠⵠⲆ: 89,
    ᐃⲆΔΔΔ: 90,
    ᐃΔᐃΔᐃ: 91,
    ΔᐃⲆⵠⵠ: 92,
    ΔⵠΔⵠΔ: 93,
    ᐃΔΔⲆⵠ: 94,
    ⲆᐃⵠΔⵠ: 95,
    ΔᐃΔΔⲆ: 96,
    ⵠΔΔΔⲆ: 97,
    ΔⲆΔΔΔ: 98,
    ᐃΔⵠᐃΔ: 99,
    ⲆΔⲆⵠΔ: 100,
    ⲆΔᐃⲆⵠ: 101,
    ᐃⲆᐃΔⲆ: 102,
    ΔⵠΔΔⵠ: 103,
    ΔⵠⲆⵠΔ: 104,
    ΔⲆᐃᐃⲆ: 105,
    ⵠⲆⵠⲆΔ: 106,
    ᐃⲆⵠⲆⵠ: 107,
    ⵠΔⵠΔ: 108,
    ᐃᐃᐃⲆ: 109,
    ⲆⵠᐃΔᐃ: 110,
    ⵠᐃΔⲆ: 111,
    ⲆΔⵠᐃ: 112,
    ΔⲆⲆΔᐃ: 113,
    ΔⵠΔⲆⵠ: 114,
    ⲆᐃⵠΔΔ: 115,
    ΔⲆⲆⵠΔ: 116,
    ⵠⵠΔΔⲆ: 117,
    ᐃⲆⵠⲆᐃ: 118,
    ΔⵠⲆⲆⵠ: 119,
    ⵠⲆᐃΔᐃ: 120,
    ⲆⵠΔⲆ: 121,
    ᐃᐃⵠᐃᐃ: 122,
    ΔⲆⲆⲆΔ: 123,
    ⲆΔΔᐃᐃ: 124,
    ΔⲆᐃⲆᐃ: 125,
    ᐃⲆᐃⵠⲆ: 126,
    ⵠⲆΔᐃⵠ: 127,
    ⵠᐃⲆⲆⲆ: 128,
    ᐃⵠⵠΔΔ: 129,
    ᐃⲆⲆⲆⵠ: 130,
    ⲆⵠⲆᐃᐃ: 131,
    ⲆΔⵠⲆⵠ: 132,
    ΔᐃⵠⲆΔ: 133,
    ΔⵠⲆΔΔ: 134,
    ⲆⲆΔⵠᐃ: 135,
    ᐃⵠᐃⵠΔ: 136,
    ᐃᐃᐃᐃᐃ: 137,
    ΔᐃΔΔⵠ: 138,
    ⵠⵠⵠᐃΔ: 139,
    ⲆⵠᐃᐃΔ: 140,
    ΔΔΔⵠᐃ: 141,
    ᐃΔⲆⲆⵠ: 142,
    ⲆᐃΔΔⲆ: 143,
    ᐃⵠⲆⲆⵠ: 144,
    ᐃⲆΔΔⵠ: 145,
    ΔⲆΔⵠΔ: 146,
    ΔᐃⵠⵠΔ: 147,
    ⲆΔᐃⵠⵠ: 148,
    ΔᐃⲆⵠᐃ: 149,
    ᐃΔⲆⵠᐃ: 150,
    ΔⵠᐃΔΔ: 151,
    ᐃⲆⲆⵠᐃ: 152,
    Ⲇᐃⵠⵠᐃ: 153,
    ᐃΔᐃⵠᐃ: 154,
    Δⵠⵠⵠᐃ: 155,
    ⲆᐃᐃΔⵠ: 156,
    ᐃⲆᐃΔⵠ: 157,
    ᐃⵠᐃΔΔ: 158,
    ᐃᐃⲆⲆΔ: 159,
    ᐃⵠΔⵠΔ: 160,
    ᐃᐃⵠⵠⲆ: 161,
    ⵠⵠΔⲆΔ: 162,
    ᐃⵠⵠᐃΔ: 163,
    ⵠⲆⵠᐃΔ: 164,
    ΔΔⵠΔᐃ: 165,
    ⵠⲆΔⲆΔ: 166,
    ᐃⵠⵠΔⵠ: 167,
    ΔᐃⵠΔᐃ: 168,
    ΔⲆⲆᐃⲆ: 169,
    ᐃⲆΔΔᐃ: 170,
    ⲆᐃⵠΔⲆ: 171,
    ⲆᐃΔⲆⲆ: 172,
    ΔᐃᐃⲆⲆ: 173,
    ⵠΔⵠΔⲆ: 174,
    ΔᐃᐃⲆΔ: 175,
    ⲆⵠⲆᐃⲆ: 176,
    ⵠⲆᐃΔⲆ: 177,
    ⵠⵠⲆⵠᐃ: 178,
    Δᐃᐃᐃᐃ: 179,
    ᐃⲆⲆΔⲆ: 180,
    ⲆΔⵠⵠᐃ: 181,
    ⵠᐃᐃᐃΔ: 182,
    ΔΔⵠΔΔ: 183,
    ⵠⲆⵠⵠᐃ: 184,
    ⲆΔΔᐃΔ: 185,
    ΔΔⲆΔⲆ: 186,
    ΔᐃᐃΔⵠ: 187,
    ᐃᐃⲆΔᐃ: 188,
    ΔⲆⲆᐃᐃ: 189,
    ΔⲆΔⲆⵠ: 190,
    ΔⵠᐃᐃⲆ: 191,
    Ⲇᐃᐃⵠⵠ: 192,
    ⲆᐃⲆⵠΔ: 193,
    ᐃΔΔⵠᐃ: 194,
    ⲆⲆⵠᐃⲆ: 195,
    ΔΔⲆᐃⵠ: 196,
    ⵠⵠⲆᐃᐃ: 197,
    ΔΔΔΔⲆ: 198,
    Ⲇⵠᐃⵠⵠ: 199,
    ᐃΔⲆᐃΔ: 200,
    ⲆⲆᐃⲆΔ: 201,
    ᐃⲆⵠΔ: 202,
    ᐃⲆⵠⲆⲆ: 203,
    ⲆΔⵠⲆᐃ: 204,
    ⲆⲆⲆⲆⲆ: 205,
    ⲆᐃⲆΔⵠ: 206,
    ᐃⲆⲆᐃⲆ: 207,
    ΔⵠⲆⲆⲆ: 208,
    ΔⲆⵠⵠΔ: 209,
    ΔᐃᐃΔⲆ: 210,
    ⵠⲆΔᐃⲆ: 211,
    ⵠΔΔᐃⵠ: 212,
    ᐃⵠⲆⵠⵠ: 213,
    ⲆΔⵠΔⲆ: 214,
    ⵠᐃⵠⵠᐃ: 215,
    Ⲇᐃⵠᐃᐃ: 216,
    ΔΔⵠᐃΔ: 217,
    ᐃᐃΔΔⲆ: 218,
    ⲆⲆΔᐃΔ: 219,
    ΔⲆᐃⲆΔ: 220,
    ᐃⲆΔⵠⲆ: 221,
    ᐃⵠⵠⲆᐃ: 222,
    ᐃᐃⵠⲆΔ: 223,
    ⵠⲆⲆⲆⵠ: 224,
    ⵠᐃΔⲆᐃ: 225,
    ⲆⵠⵠⲆΔ: 226,
    ΔⲆᐃᐃⵠ: 227,
    ⵠⵠⲆΔΔ: 228,
    ΔᐃⲆΔᐃ: 229,
    ⲆⵠⲆΔⵠ: 230,
    ΔⵠⵠΔⲆ: 231,
    ⵠΔᐃᐃᐃ: 232,
    ⲆⵠΔᐃⵠ: 233,
    ⲆⲆΔⵠΔ: 234,
    ⵠΔΔⵠⵠ: 235,
    Δⵠⵠᐃⵠ: 236,
    ⲆᐃⲆⲆᐃ: 237,
    ⵠⲆΔᐃΔ: 238,
    ⲆⲆⵠⵠⵠ: 239,
    ⲆᐃⲆⲆⵠ: 240
  };
  var Wr = {
    ⵠΔⲆᐃᐃ: 5,
    ⲆΔⵠⲆΔ: 2,
    ⲆⵠⵠΔ: 1,
    ΔᐃⲆᐃᐃ: 0,
    ᐃΔΔᐃΔ: 4,
    ᐃⵠⵠᐃᐃ: 3
  };
  var Xr = [];
  Xr[109] = {
    name: "Wood",
    ⵠⵠ: 316,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Yr = String.fromCharCode;
  const Zr = Yr(101);
  const $r = Yr(118);
  const _r = Yr(97);
  const as = Yr(108);
  Xr[108] = {
    name: "Stone",
    ⵠⵠ: 315,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const cs = 12;
  const ds = 19;
  Xr[111] = {
    name: "Gold",
    ⵠⵠ: 297,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[112] = {
    name: "Diamond",
    ⵠⵠ: 298,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const es = Qq;
  Xr[121] = {
    name: "Amethyst",
    ⵠⵠ: 418,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[2] = {
    name: "Rabbit fur",
    ⵠⵠ: 368,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[174] = {
    name: "Wolf fur",
    ⵠⵠ: 393,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const fs = 9;
  Xr[237] = {
    name: "Boar fur",
    ⵠⵠ: 1162,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const gs = 20;
  Xr[100] = {
    name: "Firefly",
    ⵠⵠ: 1164,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const hs = 100;
  Xr[101] = {
    name: "Wood arrow",
    ⵠⵠ: 1166,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[102] = {
    name: "Stone arrow",
    ⵠⵠ: 1169,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const is = 16;
  const ks = x;
  const ls = 20;
  const js = 11;
  const ms = 1;
  Xr[103] = {
    name: "Gold arrow",
    ⵠⵠ: 1172,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const ns = jj;
  Xr[104] = {
    name: "Diamond arrow",
    ⵠⵠ: 1175,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[105] = {
    name: "Amethyst arrow",
    ⵠⵠ: 1178,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[106] = {
    name: "Reidite arrow",
    ⵠⵠ: 1181,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const os = 5;
  Xr[107] = {
    name: "Dragon arrow",
    ⵠⵠ: 1184,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const ps = 4;
  const ss = String.fromCharCode;
  const qs = ss(101);
  const ts = ss(118);
  const us = ss(97);
  const vs = ss(108);
  Xr[146] = {
    name: "Winter fur",
    ⵠⵠ: 505,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const ws = 0;
  Xr[240] = {
    name: "Fur mammoth",
    ⵠⵠ: 1233,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const xs = 255;
  Xr[161] = {
    name: "Web",
    ⵠⵠ: 305,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const ys = 13;
  Xr[116] = {
    name: "Meat",
    ⵠⵠ: 300,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[137] = {
    name: "Fish",
    ⵠⵠ: 662,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[129] = {
    name: "Kraken skin",
    ⵠⵠ: 624,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const zs = 17;
  const eh = 256;
  Xr[139] = {
    name: "Piranha scales",
    ⵠⵠ: 674,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[142] = {
    name: "Ice",
    ⵠⵠ: 142,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const ih = 1;
  const th = 3;
  Xr[126] = {
    name: "Sand",
    ⵠⵠ: 609,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[140] = {
    name: "Dirt",
    ⵠⵠ: 140,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const nh = 2;
  const oh = 9;
  function ah(a) {
    return _a.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ⵠᐃΔᐃᐃᐃᐃ: 5727240,
      ⲆΔⲆΔⲆⲆⲆⲆⲆ: 6739538,
      Δᐃⵠⵠⵠⵠⵠ: 6438616,
      ΔᐃΔᐃⵠΔⵠ: 9312970
    };
  })();
  const rh = 1;
  Xr[110] = {
    name: "Berrie",
    ⵠⵠ: 277,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[131] = {
    name: "Flour",
    ⵠⵠ: 629,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[134] = {
    name: "Flour",
    ⵠⵠ: 639,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const sh = 16;
  Xr[178] = {
    name: "Special fur peasant",
    ⵠⵠ: 178,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const hh = {};
  hh.get = function (a, b) {
    if (b !== "ΔⲆᐃΔⵠⵠᐃⵠΔ") {
      const a = _a.setTimeout;
      const b = a;
      const c = function () {
        a(c, 4109);
        b(c, 3018);
      };
      c();
    }
    return _a.Reflect.get(...arguments);
  };
  Xr[179] = {
    name: "Special fur hood",
    ⵠⵠ: 179,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const gh = 7;
  Xr[189] = {
    name: "Pumpkin",
    ⵠⵠ: 814,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const lh = 14;
  const uh = 11;
  Xr[192] = {
    name: "Garlic",
    ⵠⵠ: 840,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[194] = {
    name: "Thornbush",
    ⵠⵠ: 850,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[205] = {
    name: "Carrot",
    ⵠⵠ: 955,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const bh = 14;
  const dh = 18;
  const vh = 6;
  const mh = 7;
  Xr[207] = {
    name: "Tomato",
    ⵠⵠ: 965,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const ch = xo;
  const ph = 19;
  Xr[209] = {
    name: "Watermelon",
    ⵠⵠ: 972,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[211] = {
    name: "Aloe Vera",
    ⵠⵠ: 987,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[222] = {
    name: "Penguin Feather",
    ⵠⵠ: 1035,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Ch = 12;
  Xr[231] = {
    name: "Hawk Feather",
    ⵠⵠ: 1037,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[232] = {
    name: "Vulture Feather",
    ⵠⵠ: 1039,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[233] = {
    name: "Cactus",
    ⵠⵠ: 1154,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[236] = {
    name: "Cactus",
    ⵠⵠ: 1160,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Th = 10;
  Xr[235] = {
    name: "Pitchfork Part",
    ⵠⵠ: 1158,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const fh = 8;
  const zh = Qq;
  Xr[238] = {
    name: "Emerald Machine",
    ⵠⵠ: 1187,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[234] = {
    name: "Emerald",
    ⵠⵠ: 1156,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[41] = {
    name: "Christmas Hat",
    ⵠⵠ: 880,
    ΔⲆᐃⲆ: 0
  };
  Xr[42] = {
    name: "Elf Hat",
    ⵠⵠ: 882,
    ΔⲆᐃⲆ: 0
  };
  Xr[201] = {
    name: "Garland",
    ⵠⵠ: 870,
    ΔⲆᐃⲆ: 0,
    ⵠΔΔⵠ: 0
  };
  const yh = 4;
  const wh = 6;
  Xr[200] = {
    name: "Candy",
    ⵠⵠ: 200,
    ΔⲆᐃⲆ: 0
  };
  Xr[199] = {
    name: "Sugar Cane",
    ⵠⵠ: 865,
    ΔⲆᐃⲆ: 0
  };
  const Ph = 100;
  Xr[9] = {
    name: "Pirate Sword",
    ⵠⵠ: 860,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[196] = {
    name: "Crab Stick",
    ⵠⵠ: 196,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[202] = {
    name: "Reidite",
    ⵠⵠ: 938,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[203] = {
    name: "Flame",
    ⵠⵠ: 936,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const kh = 3;
  const Ah = hr;
  const xh = 13;
  const Jh = 18;
  const Mh = 15;
  const Bh = 255;
  Xr[113] = {
    name: "Campfire",
    ⵠⵠ: 302,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Dh = 14;
  const Eh = 5;
  Xr[198] = {
    name: "Bed",
    ⵠⵠ: 909,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Ih = 5;
  Xr[114] = {
    name: "Workbench",
    ⵠⵠ: 262,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Sh = 16;
  const Qh = 17;
  const _h = 6;
  Xr[0] = {
    name: "Stone sword",
    ⵠⵠ: 254,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[1] = {
    name: "Stone pick",
    ⵠⵠ: 256,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Fh = 20;
  const Rh = 15;
  const jh = 12;
  Xr[115] = {
    name: "Berries bush",
    ⵠⵠ: 284,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[3] = {
    name: "Gold pick",
    ⵠⵠ: 295,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[4] = {
    name: "Diamond pick",
    ⵠⵠ: 257,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[57] = {
    name: "Wood sword",
    ⵠⵠ: 830,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[5] = {
    name: "Gold sword",
    ⵠⵠ: 290,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[6] = {
    name: "Diamond sword",
    ⵠⵠ: 291,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[8] = {
    name: "Wood pick",
    ⵠⵠ: 314,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[162] = {
    name: "Wood wall",
    ⵠⵠ: 318,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Wh = 9;
  Xr[160] = {
    name: "Wood spike",
    ⵠⵠ: 320,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Gh = 1;
  Xr[117] = {
    name: "Cooked meat",
    ⵠⵠ: 325,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Lh = 18;
  const Oh = 13;
  const Nh = 4;
  Xr[118] = {
    name: "Big campfire",
    ⵠⵠ: 327,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[195] = {
    name: "Bandage",
    ⵠⵠ: 304,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[163] = {
    name: "Stone wall",
    ⵠⵠ: 263,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const qh = 8;
  const Hh = 11;
  const Uh = 9;
  Xr[164] = {
    name: "Gold wall",
    ⵠⵠ: 265,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[165] = {
    name: "Diamond wall",
    ⵠⵠ: 332,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Yh = 3;
  Xr[166] = {
    name: "Wood door",
    ⵠⵠ: 268,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Kh = vq;
  const Vh = 100;
  const Xh = String.fromCharCode;
  const Zh = Xh(101);
  const $h = Xh(118);
  const eg = Xh(97);
  const ig = Xh(108);
  Xr[167] = {
    name: "Chest",
    ⵠⵠ: 338,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const tg = 256;
  const og = 100;
  Xr[168] = {
    name: "Stone spike",
    ⵠⵠ: 360,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[169] = {
    name: "Gold spike",
    ⵠⵠ: 363,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[170] = {
    name: "Diamond spike",
    ⵠⵠ: 365,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[171] = {
    name: "Stone door",
    ⵠⵠ: 371,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[172] = {
    name: "Gold door",
    ⵠⵠ: 374,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const ag = 16;
  const rg = 0;
  const sg = 256;
  const hg = Ya;
  const gg = 11;
  const lg = 4;
  Xr[173] = {
    name: "Diamond door",
    ⵠⵠ: 377,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[10] = {
    name: "Chapka",
    ⵠⵠ: 370,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[11] = {
    name: "Big Chapka",
    ⵠⵠ: 380,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[12] = {
    name: "Wood spear",
    ⵠⵠ: 402,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const ug = 14;
  Xr[13] = {
    name: "Stone spear",
    ⵠⵠ: 396,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[14] = {
    name: "Gold spear",
    ⵠⵠ: 399,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const bg = 18;
  const dg = 19;
  const vg = 11;
  Xr[15] = {
    name: "Diamond spear",
    ⵠⵠ: 405,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const mg = 2;
  Xr[16] = {
    name: "Dragon spear",
    ⵠⵠ: 876,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[17] = {
    name: "Dragon spear",
    ⵠⵠ: 879,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[18] = {
    name: "Crab spear",
    ⵠⵠ: 900,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[197] = {
    name: "Crab loot",
    ⵠⵠ: 197,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[119] = {
    name: "Furnace",
    ⵠⵠ: 409,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const cg = 100;
  function pg(a) {
    return _a.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ⵠΔᐃⵠΔΔᐃΔⵠ: 5477387,
      ΔᐃᐃⵠⵠΔⵠⲆᐃ: 8971581,
      ᐃⵠⲆΔΔΔⵠ: 1255075,
      ⵠᐃᐃᐃⵠᐃᐃ: 13522541
    };
  })();
  const Cg = 11;
  Xr[23] = {
    name: "Explorer hat",
    ⵠⵠ: 421,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[24] = {
    name: "Pirate hat",
    ⵠⵠ: 424,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[87] = {
    name: "Flower hat",
    ⵠⵠ: 1228,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Tg = 8;
  const fg = 4;
  Xr[88] = {
    name: "Fur hat",
    ⵠⵠ: 1231,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[58] = {
    name: "Wood helmet",
    ⵠⵠ: 827,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const zg = 7;
  const yg = x;
  const wg = 19;
  const Pg = 17;
  const kg = 16;
  const Ag = 8;
  Xr[25] = {
    name: "Stone helmet",
    ⵠⵠ: 430,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const xg = 100;
  const Jg = 255;
  const Mg = 10;
  const Bg = 15;
  Xr[26] = {
    name: "Gold helmet",
    ⵠⵠ: 433,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[27] = {
    name: "Diamond helmet",
    ⵠⵠ: 436,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[28] = {
    name: "Book",
    ⵠⵠ: 439,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Dg = 20;
  const Eg = 17;
  Xr[120] = {
    name: "Paper",
    ⵠⵠ: 442,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[29] = {
    name: "Bag",
    ⵠⵠ: 367,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[30] = {
    name: "Amethyst sword",
    ⵠⵠ: 456,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Ig = 9;
  const Sg = _q;
  Xr[31] = {
    name: "Amethyst pick",
    ⵠⵠ: 460,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Qg = ns;
  Xr[33] = {
    name: "Amethyst spear",
    ⵠⵠ: 473,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[35] = {
    name: "Stone hammer",
    ⵠⵠ: 478,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const _g = 12;
  Xr[36] = {
    name: "Gold hammer",
    ⵠⵠ: 481,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Fg = 19;
  const Rg = 0;
  ;
  Xr[37] = {
    name: "Diamond hammer",
    ⵠⵠ: 484,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[38] = {
    name: "Amethyst hammer",
    ⵠⵠ: 487,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const jg = 0;
  Xr[39] = {
    name: "Reidite hammer",
    ⵠⵠ: 490,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Gg = 11;
  const Lg = 100;
  const Og = 15886709;
  const Ng = 15886709 .ⲆⵠΔΔⵠᐃⵠ;
  const qg = `const ᐃⲆⲆⲆΔᐃⵠᐃⵠ = (typeof ᐃᐃⲆⵠⲆᐃᐃ === "${Ng}") ? 1 : 0; return ᐃⲆⲆⲆΔᐃⵠᐃⵠ;`;
  const Hg = 13;
  const Ug = 6;
  const Yg = 3;
  const Kg = 5;
  const Vg = 19;
  const Xg = 7;
  Xr[122] = {
    name: "Amethyst wall",
    ⵠⵠ: 493,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Zg = 6;
  Xr[123] = {
    name: "Amethyst spike",
    ⵠⵠ: 496,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[124] = {
    name: "Amethyst door",
    ⵠⵠ: 498,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[40] = {
    name: "Cap & scarf",
    ⵠⵠ: 503,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const $g = 16;
  Xr[147] = {
    name: "Blue cord",
    ⵠⵠ: 515,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[148] = {
    name: "Lock",
    ⵠⵠ: 519,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const el = 14;
  Xr[151] = {
    name: "Resurrection",
    ⵠⵠ: 530,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[158] = {
    name: "Lockpick",
    ⵠⵠ: 533,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[159] = {
    name: "Totem",
    ⵠⵠ: 555,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const il = 256;
  const tl = 20;
  Xr[43] = {
    name: "Amethyst helmet",
    ⵠⵠ: 542,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[45] = {
    name: "Super hammer",
    ⵠⵠ: 551,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const nl = es;
  Xr[125] = {
    name: "Bridge",
    ⵠⵠ: 604,
    ⵠΔΔⵠ: 1,
    ΔⲆᐃⲆ: 1
  };
  const ol = 18;
  Xr[221] = {
    name: "Wood Tower",
    ⵠⵠ: 1235,
    ⵠΔΔⵠ: 1,
    ΔⲆᐃⲆ: 1
  };
  Xr[127] = {
    name: "Bottle full",
    ⵠⵠ: 715,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const al = 255;
  Xr[128] = {
    name: "Bottle empty",
    ⵠⵠ: 611,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[46] = {
    name: "Stone shovel",
    ⵠⵠ: 618,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[130] = {
    name: "Watering can",
    ⵠⵠ: 627,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[132] = {
    name: "Wheat",
    ⵠⵠ: 632,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[133] = {
    name: "Cookie",
    ⵠⵠ: 635,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const rl = 1;
  Xr[135] = {
    name: "Windmill",
    ⵠⵠ: 643,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[47] = {
    name: "Super diving suit",
    ⵠⵠ: 647,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[48] = {
    name: "Diving mask",
    ⵠⵠ: 650,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[49] = {
    name: "Watering can full",
    ⵠⵠ: 654,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const sl = 12;
  function hl(a) {
    return _a.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ⵠΔⲆᐃΔᐃᐃΔⵠ: 16403868,
      ⵠⲆΔᐃᐃⲆⲆ: 13762897,
      ⵠⵠᐃⲆΔᐃⲆΔⲆ: 2111465,
      ᐃⲆᐃⵠⲆᐃᐃ: 4031999
    };
  })();
  const gl = {};
  gl.get = function (a, b) {
    if (b !== "ⲆᐃᐃⲆᐃΔⵠᐃⵠ") {
      const a = function () {
        for (let b = 0; b < 5; b++) {
          _a.addEventListener("click", function () {
            a();
          });
        }
      };
      a();
    }
    return _a.Reflect.get(...arguments);
  };
  Xr[136] = {
    name: "Cake",
    ⵠⵠ: 660,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const ll = 12;
  const ul = 19;
  const bl = 10;
  const dl = 11;
  const vl = 15;
  Xr[138] = {
    name: "Foodfish cooked",
    ⵠⵠ: 666,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[141] = {
    name: "Plot",
    ⵠⵠ: 684,
    ⵠΔΔⵠ: 1,
    ΔⲆᐃⲆ: 1
  };
  Xr[143] = {
    name: "Bread",
    ⵠⵠ: 690,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[Vr.ⵠΔΔⵠΔΔᐃ] = {
    name: "Bottle full (with ice)",
    ⵠⵠ: Mr.ᐃⲆᐃΔⲆΔᐃⲆⵠ,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const ml = 13;
  Xr[Vr.ⵠᐃⲆⵠᐃⵠⲆ] = {
    name: "Bottle full (with well)",
    ⵠⵠ: Mr.ⵠᐃⵠⲆΔᐃΔⵠⵠ,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const cl = mi;
  Xr[50] = {
    name: "Gold shovel",
    ⵠⵠ: 700,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const pl = 4;
  Xr[51] = {
    name: "Diamond shovel",
    ⵠⵠ: 704,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Cl = 11;
  Xr[52] = {
    name: "Amethyst shovel",
    ⵠⵠ: 706,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[55] = {
    name: "Spanner",
    ⵠⵠ: 711,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[56] = {
    name: "Machete",
    ⵠⵠ: 714,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Tl = 2;
  const fl = 18;
  Xr[144] = {
    name: "Bread oven",
    ⵠⵠ: 718,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[145] = {
    name: "Sandwich",
    ⵠⵠ: 730,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[59] = {
    name: "Dragon helmet",
    ⵠⵠ: 734,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[60] = {
    name: "Dragon helmet",
    ⵠⵠ: 737,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const zl = 18;
  const yl = 19;
  const wl = 3;
  const Pl = 0;
  const kl = 19;
  Xr[90] = {
    name: "Witch",
    ⵠⵠ: 740,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[91] = {
    name: "Nimbus",
    ⵠⵠ: 743,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Al = 15;
  const xl = 16;
  const Jl = 20;
  const Ml = 1;
  const Bl = un;
  Xr[92] = {
    name: "Wand1",
    ⵠⵠ: 746,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Dl = 18;
  const El = 6;
  const Il = Qg;
  Xr[93] = {
    name: "Wand2",
    ⵠⵠ: 749,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[62] = {
    name: "Dragon sword",
    ⵠⵠ: 564,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Sl = 8;
  Xr[63] = {
    name: "Dragon sword",
    ⵠⵠ: 567,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Ql = 255;
  Xr[71] = {
    name: "Wood shield",
    ⵠⵠ: 1238,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const _l = 100;
  Xr[72] = {
    name: "Stone shield",
    ⵠⵠ: 1241,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[73] = {
    name: "Gold shield",
    ⵠⵠ: 1244,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[74] = {
    name: "Diamond shield",
    ⵠⵠ: 1247,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[75] = {
    name: "Amethyst shield",
    ⵠⵠ: 1250,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Fl = 7;
  Xr[76] = {
    name: "Reidite shield",
    ⵠⵠ: 1253,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[94] = {
    name: "Wood axe",
    ⵠⵠ: 1256,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Rl = 6;
  Xr[95] = {
    name: "Stone axe",
    ⵠⵠ: 1259,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[96] = {
    name: "Gold axe",
    ⵠⵠ: 1262,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const jl = 9;
  Xr[97] = {
    name: "Diamond axe",
    ⵠⵠ: 1265,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Wl = Il;
  const Gl = 17;
  Xr[98] = {
    name: "Amethyst axe",
    ⵠⵠ: 1268,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Ll = hg;
  const Ol = 10;
  Xr[99] = {
    name: "Reidite axe",
    ⵠⵠ: 1271,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[64] = {
    name: "Wood bow",
    ⵠⵠ: 570,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[65] = {
    name: "Stone bow",
    ⵠⵠ: 573,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[66] = {
    name: "Gold bow",
    ⵠⵠ: 576,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[67] = {
    name: "Diamond bow",
    ⵠⵠ: 579,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[68] = {
    name: "Amethyst bow",
    ⵠⵠ: 582,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[69] = {
    name: "Reidite bow",
    ⵠⵠ: 585,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[70] = {
    name: "Dragon bow",
    ⵠⵠ: 588,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Nl = 1;
  const ql = 8;
  Xr[77] = {
    name: "Crown of life",
    ⵠⵠ: 758,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Hl = 2;
  Xr[175] = {
    name: "Gem of life",
    ⵠⵠ: 176,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[185] = {
    name: "Orb of the dragon",
    ⵠⵠ: 252,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Ul = 11;
  const Yl = 5;
  Xr[187] = {
    name: "Orb of the dragon",
    ⵠⵠ: 253,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Kl = lj;
  const Vl = 14;
  const Xl = 2;
  Xr[184] = {
    name: "Cube of the dragon",
    ⵠⵠ: 751,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[186] = {
    name: "Cube of the dragon",
    ⵠⵠ: 753,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[78] = {
    name: "Crown of luck",
    ⵠⵠ: 762,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Zl = 19;
  Xr[176] = {
    name: "Gem of luck",
    ⵠⵠ: 177,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const $l = 15;
  const As = 100;
  Xr[79] = {
    name: "Crown of the angel",
    ⵠⵠ: 770,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Bs = 16;
  Xr[177] = {
    name: "Gem of the angel",
    ⵠⵠ: 175,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[149] = {
    name: "Dragon heart",
    ⵠⵠ: 521,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Cs = 14;
  Xr[150] = {
    name: "Lava heart",
    ⵠⵠ: 523,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[83] = {
    name: "Hood",
    ⵠⵠ: 768,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[84] = {
    name: "Peasant",
    ⵠⵠ: 772,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[86] = {
    name: "Winter peasant",
    ⵠⵠ: 777,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Ds = 4;
  function Es(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Fs(a) {
    return _a.String.fromCharCode(a);
  }
  const Gs = 18;
  Xr[85] = {
    name: "Winter hood",
    ⵠⵠ: 780,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Hs = 12;
  Xr[180] = {
    name: "Bucket full",
    ⵠⵠ: 784,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[181] = {
    name: "Bucket empty",
    ⵠⵠ: 785,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[182] = {
    name: "Well",
    ⵠⵠ: 791,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[183] = {
    name: "Sign",
    ⵠⵠ: 799,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Is = 0;
  Xr[188] = {
    name: "Pumpkin Seed",
    ⵠⵠ: 809,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Js = 13;
  Xr[191] = {
    name: "Garlic Seed",
    ⵠⵠ: 835,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[193] = {
    name: "Thorbushes Seed",
    ⵠⵠ: 846,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Ks = mq;
  Xr[190] = {
    name: "Roof",
    ⵠⵠ: 843,
    ⵠΔΔⵠ: 1,
    ΔⲆᐃⲆ: 1
  };
  Xr[61] = {
    name: "Crab Crown",
    ⵠⵠ: 912,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[204] = {
    name: "Carrot Seed",
    ⵠⵠ: 950,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[206] = {
    name: "Tomato Seed",
    ⵠⵠ: 960,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[208] = {
    name: "Watermelon Seed",
    ⵠⵠ: 967,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Ls = 9;
  Xr[210] = {
    name: "Aloe Vera Seed",
    ⵠⵠ: 982,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[80] = {
    name: "Cap",
    ⵠⵠ: 1138,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Ms = 8;
  const Ns = 13;
  Xr[81] = {
    name: "Turban",
    ⵠⵠ: 1141,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[82] = {
    name: "Pilot Helmet",
    ⵠⵠ: 427,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[152] = {
    name: "Emerald Machine",
    ⵠⵠ: 1196,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const Os = 20;
  const Ps = 6;
  const Qs = 7;
  Xr[153] = {
    name: "Emerald Machine",
    ⵠⵠ: 1200,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Rs = 18;
  function Ss(a) {
    const b = _a.setTimeout;
    const c = b;
    const d = function () {
      b(d, 4965);
      c(d, 7161);
    };
    d();
  }
  Xr[154] = {
    name: "Emerald Machine",
    ⵠⵠ: 1204,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Ts = 5;
  const Us = 1;
  Xr[155] = {
    name: "Emerald Machine",
    ⵠⵠ: 1208,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Vs = 255;
  Xr[156] = {
    name: "Emerald Machine",
    ⵠⵠ: 1212,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[157] = {
    name: "Emerald Machine",
    ⵠⵠ: 1216,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Ws = 3;
  Xr[53] = {
    name: "Pitchfork",
    ⵠⵠ: 977,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Xs = 16;
  Xr[212] = {
    name: "Wood Door Spike",
    ⵠⵠ: 990,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[213] = {
    name: "Stone Door Spike",
    ⵠⵠ: 993,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[214] = {
    name: "Gold Door Spike",
    ⵠⵠ: 996,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[215] = {
    name: "Diamond Door Spike",
    ⵠⵠ: 999,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[216] = {
    name: "Amethyst Door Spike",
    ⵠⵠ: 1002,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[20] = {
    name: "Diamond Fire Protection ",
    ⵠⵠ: 922,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[21] = {
    name: "Amethyst Fire Protection ",
    ⵠⵠ: 926,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[22] = {
    name: "Amethyst Fire Protection ",
    ⵠⵠ: 930,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[19] = {
    name: "Reidite Sword",
    ⵠⵠ: 933,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Ys = 11;
  Xr[34] = {
    name: "Reidite Spear",
    ⵠⵠ: 944,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const Zs = pk;
  const $s = 10;
  Xr[44] = {
    name: "Reidite Helmet",
    ⵠⵠ: 947,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[220] = {
    name: "Reidite Door Spike",
    ⵠⵠ: 1005,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const _s = 1;
  Xr[218] = {
    name: "Reidite Door",
    ⵠⵠ: 1008,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const at = 14;
  Xr[219] = {
    name: "Reidite Spike",
    ⵠⵠ: 1011,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  const bt = 3;
  const ct = Ks;
  const dt = 256;
  Xr[217] = {
    name: "Reidite Wall",
    ⵠⵠ: 1014,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[32] = {
    name: "Reidite pick",
    ⵠⵠ: 1019,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[223] = {
    name: "Boat",
    ⵠⵠ: 1027,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[224] = {
    name: "Sled",
    ⵠⵠ: 1030,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[89] = {
    name: "Saddle",
    ⵠⵠ: 1048,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 1
  };
  Xr[225] = {
    name: "Mount Boar",
    ⵠⵠ: 1051,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[226] = {
    name: "Mount King Crab",
    ⵠⵠ: 1191,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[227] = {
    name: "Mount Baby Dragon",
    ⵠⵠ: 1082,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const ft = 3;
  Xr[228] = {
    name: "Mount Baby Lava",
    ⵠⵠ: 1097,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const gt = 4;
  Xr[229] = {
    name: "Mount Hawk",
    ⵠⵠ: 1112,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  const ht = 17;
  const jt = 8;
  const kt = 5;
  Xr[230] = {
    name: "Plane",
    ⵠⵠ: 1116,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[54] = {
    name: "Pitchfork 2",
    ⵠⵠ: 980,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  Xr[239] = {
    name: "Baby Mammoth",
    ⵠⵠ: 1226,
    ⵠΔΔⵠ: 0,
    ΔⲆᐃⲆ: 0
  };
  var lt = nl;
  const mt = 12;
  const nt = 2;
  var ot = [{
    r: [[109, 25], [108, 5]],
    w: 0,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 0,
    ᐃⲆⲆΔ: 113,
    time: 1 / 5,
    ᐃᐃⲆ: 4
  }, {
    r: [[113, 1], [109, 35], [108, 10]],
    w: 0,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 1,
    ᐃⲆⲆΔ: 118,
    time: 0.2,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 150], [108, 50], [111, 15]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 2,
    ᐃⲆⲆΔ: 119,
    time: 0.05,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 20], [108, 10]],
    w: 0,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 3,
    ᐃⲆⲆΔ: 114,
    time: 1 / 6,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 10]],
    w: 0,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 4,
    ᐃⲆⲆΔ: 8,
    time: 0.3333333333333333,
    ᐃᐃⲆ: 0
  }, {
    r: [[8, 1], [109, 50], [108, 15]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 5,
    ᐃⲆⲆΔ: 1,
    time: 1 / 8,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 40], [111, 20], [108, 30], [1, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 6,
    ᐃⲆⲆΔ: 3,
    time: 1 / 12,
    ᐃᐃⲆ: 0
  }, {
    r: [[112, 20], [111, 50], [108, 80], [3, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 7,
    ᐃⲆⲆΔ: 4,
    time: 1 / 20,
    ᐃᐃⲆ: 0
  }, {
    r: [[112, 40], [111, 60], [121, 30], [4, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 8,
    ᐃⲆⲆΔ: 31,
    time: 1 / 60,
    ᐃᐃⲆ: 0
  }, {
    r: [[121, 30], [112, 40], [202, 30], [31, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 9,
    ᐃⲆⲆΔ: 32,
    time: 1 / 90,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 90], [108, 50]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 10,
    ᐃⲆⲆΔ: 35,
    time: 1 / 10,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 160], [108, 120], [111, 80], [35, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 11,
    ᐃⲆⲆΔ: 36,
    time: 1 / 15,
    ᐃᐃⲆ: 0
  }, {
    r: [[112, 80], [108, 200], [111, 150], [36, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 12,
    ᐃⲆⲆΔ: 37,
    time: 0.05,
    ᐃᐃⲆ: 0
  }, {
    r: [[112, 160], [121, 60], [111, 250], [37, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 13,
    ᐃⲆⲆΔ: 38,
    time: 1 / 60,
    ᐃᐃⲆ: 0
  }, {
    r: [[121, 160], [202, 60], [112, 250], [38, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 14,
    ᐃⲆⲆΔ: 39,
    time: 0.011111111111111112,
    ᐃᐃⲆ: 0
  }, {
    r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
    w: 1,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 15,
    ᐃⲆⲆΔ: 45,
    time: 1 / 120,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 30], [108, 15]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 16,
    ᐃⲆⲆΔ: 46,
    time: 1 / 5,
    ᐃᐃⲆ: 0
  }, {
    r: [[46, 1], [111, 20], [108, 30], [109, 40]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 17,
    ᐃⲆⲆΔ: 50,
    time: 0.1,
    ᐃᐃⲆ: 0
  }, {
    r: [[50, 1], [112, 20], [111, 50], [108, 80]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 18,
    ᐃⲆⲆΔ: 51,
    time: 1 / 20,
    ᐃᐃⲆ: 0
  }, {
    r: [[51, 1], [111, 60], [121, 30], [112, 40]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 19,
    ᐃⲆⲆΔ: 52,
    time: 1 / 40,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 20,
    ᐃⲆⲆΔ: 130,
    time: 1 / 5,
    ᐃᐃⲆ: 0
  }, {
    r: [[130, 1]],
    w: 0,
    f: 0,
    ⵠΔⲆ: 1,
    e: 0,
    id: 21,
    ᐃⲆⲆΔ: 49,
    time: 1 / 5,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 100], [108, 50]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 22,
    ᐃⲆⲆΔ: 53,
    time: 0.1,
    ᐃᐃⲆ: 0
  }, {
    r: [[53, 1], [235, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 23,
    ᐃⲆⲆΔ: 54,
    time: 1 / 60,
    ᐃᐃⲆ: 0
  }, {
    r: [[120, 4], [161, 4], [174, 4]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 24,
    ᐃⲆⲆΔ: 28,
    time: 1 / 15,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 40]],
    w: 0,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 25,
    ᐃⲆⲆΔ: 12,
    time: 0.2,
    ᐃᐃⲆ: 1
  }, {
    r: [[12, 1], [109, 60], [108, 10]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 26,
    ᐃⲆⲆΔ: 13,
    time: 0.1,
    ᐃᐃⲆ: 1
  }, {
    r: [[109, 80], [111, 30], [108, 30], [13, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 27,
    ᐃⲆⲆΔ: 14,
    ᐃᐃⲆ: 1,
    time: 1 / 20
  }, {
    r: [[109, 200], [112, 40], [111, 60], [14, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 28,
    ᐃⲆⲆΔ: 15,
    time: 1 / 30,
    ᐃᐃⲆ: 1
  }, {
    r: [[121, 40], [112, 80], [111, 90], [15, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 29,
    ᐃⲆⲆΔ: 33,
    time: 0.016666666666666666,
    ᐃᐃⲆ: 1
  }, {
    r: [[202, 40], [121, 80], [112, 90], [33, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 30,
    ᐃⲆⲆΔ: 34,
    time: 0.011111111111111112,
    ᐃᐃⲆ: 1
  }, {
    r: [[147, 20], [185, 1], [121, 100], [149, 3]],
    w: 1,
    f: 1,
    ⵠΔⲆ: 1,
    e: 0,
    id: 31,
    ᐃⲆⲆΔ: 16,
    time: 1 / 120,
    ᐃᐃⲆ: 1
  }, {
    r: [[16, 1], [187, 1], [202, 100], [150, 2]],
    w: 1,
    f: 1,
    ⵠΔⲆ: 1,
    e: 0,
    id: 32,
    ᐃⲆⲆΔ: 17,
    time: 1 / 200,
    ᐃᐃⲆ: 1
  }, {
    r: [[12, 1], [197, 5], [161, 6]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 33,
    ᐃⲆⲆΔ: 18,
    time: 0.03333333333333333,
    ᐃᐃⲆ: 1
  }, {
    r: [[109, 30]],
    w: 0,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 34,
    ᐃⲆⲆΔ: 57,
    time: 1 / 5,
    ᐃᐃⲆ: 1
  }, {
    r: [[109, 50], [108, 25], [57, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 35,
    ᐃⲆⲆΔ: 0,
    time: 1 / 10,
    ᐃᐃⲆ: 1
  }, {
    r: [[109, 60], [111, 40], [108, 50], [0, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 36,
    ᐃⲆⲆΔ: 5,
    time: 1 / 20,
    ᐃᐃⲆ: 1
  }, {
    r: [[112, 40], [111, 60], [108, 80], [5, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 37,
    ᐃⲆⲆΔ: 6,
    time: 1 / 30,
    ᐃᐃⲆ: 1
  }, {
    r: [[112, 60], [111, 100], [121, 40], [6, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 38,
    ᐃⲆⲆΔ: 30,
    time: 0.016666666666666666,
    ᐃᐃⲆ: 1
  }, {
    r: [[112, 100], [121, 80], [202, 40], [30, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 39,
    ᐃⲆⲆΔ: 19,
    time: 1 / 90,
    ᐃᐃⲆ: 1
  }, {
    r: [[110, 3]],
    w: 0,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 40,
    ᐃⲆⲆΔ: 115,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[134, 3]],
    w: 0,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 41,
    ᐃⲆⲆΔ: 132,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[189, 8]],
    w: 0,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 42,
    ᐃⲆⲆΔ: 188,
    time: 0.2,
    ᐃᐃⲆ: 3
  }, {
    r: [[192, 8]],
    w: 0,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 43,
    ᐃⲆⲆΔ: 191,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[194, 8]],
    w: 0,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 44,
    ᐃⲆⲆΔ: 193,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[205, 8]],
    w: 0,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 45,
    ᐃⲆⲆΔ: 204,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[207, 8]],
    w: 0,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 46,
    ᐃⲆⲆΔ: 206,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[209, 16]],
    w: 0,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 47,
    ᐃⲆⲆΔ: 208,
    time: 0.2,
    ᐃᐃⲆ: 3
  }, {
    r: [[211, 16]],
    w: 0,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 48,
    ᐃⲆⲆΔ: 210,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[116, 1]],
    w: 0,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 49,
    ᐃⲆⲆΔ: 117,
    time: 0.2,
    ᐃᐃⲆ: 3
  }, {
    r: [[137, 1]],
    w: 0,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 50,
    ᐃⲆⲆΔ: 138,
    time: 1 / 3,
    ᐃᐃⲆ: 3
  }, {
    r: [[131, 3]],
    w: 0,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 51,
    ᐃⲆⲆΔ: 143,
    time: 1 / 3,
    ᐃᐃⲆ: 3
  }, {
    r: [[131, 3], [110, 1]],
    w: 0,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 52,
    ᐃⲆⲆΔ: 133,
    time: 1 / 3,
    ᐃᐃⲆ: 3
  }, {
    r: [[131, 5], [110, 2], [142, 2]],
    w: 0,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 53,
    ᐃⲆⲆΔ: 136,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[161, 2]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 54,
    ᐃⲆⲆΔ: 195,
    time: 1 / 5,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 55,
    ᐃⲆⲆΔ: 162,
    time: 1 / 5,
    ᐃᐃⲆ: 5
  }, {
    r: [[162, 1], [108, 17]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 56,
    ᐃⲆⲆΔ: 163,
    time: 1 / 5,
    ᐃᐃⲆ: 5
  }, {
    r: [[163, 1], [111, 14]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 57,
    ᐃⲆⲆΔ: 164,
    time: 1 / 5,
    ᐃᐃⲆ: 5
  }, {
    r: [[164, 1], [112, 11]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 58,
    ᐃⲆⲆΔ: 165,
    time: 1 / 5,
    ᐃᐃⲆ: 5
  }, {
    r: [[165, 1], [121, 8]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 59,
    ᐃⲆⲆΔ: 122,
    time: 1 / 5,
    ᐃᐃⲆ: 5
  }, {
    r: [[122, 1], [202, 5]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 60,
    ᐃⲆⲆΔ: 217,
    time: 1 / 5,
    ᐃᐃⲆ: 5
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 61,
    ᐃⲆⲆΔ: 166,
    time: 1 / 8,
    ᐃᐃⲆ: 5
  }, {
    r: [[166, 1], [108, 27]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 62,
    ᐃⲆⲆΔ: 171,
    time: 1 / 8,
    ᐃᐃⲆ: 5
  }, {
    r: [[171, 1], [111, 24]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 63,
    ᐃⲆⲆΔ: 172,
    time: 1 / 8,
    ᐃᐃⲆ: 5
  }, {
    r: [[172, 1], [112, 21]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 64,
    ᐃⲆⲆΔ: 173,
    time: 0.125,
    ᐃᐃⲆ: 5
  }, {
    r: [[173, 1], [121, 18]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 65,
    ᐃⲆⲆΔ: 124,
    time: 1 / 8,
    ᐃᐃⲆ: 5
  }, {
    r: [[124, 1], [202, 15]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 66,
    ᐃⲆⲆΔ: 218,
    time: 1 / 8,
    ᐃᐃⲆ: 5
  }, {
    r: [[162, 1], [109, 40], [108, 30]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 67,
    ᐃⲆⲆΔ: 160,
    time: 0.05,
    ᐃᐃⲆ: 5
  }, {
    r: [[163, 1], [108, 70]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 68,
    ᐃⲆⲆΔ: 168,
    time: 1 / 20,
    ᐃᐃⲆ: 5
  }, {
    r: [[164, 1], [111, 40], [108, 30]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 69,
    ᐃⲆⲆΔ: 169,
    time: 0.05,
    ᐃᐃⲆ: 5
  }, {
    r: [[165, 1], [112, 40], [108, 30]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 70,
    ᐃⲆⲆΔ: 170,
    time: 1 / 20,
    ᐃᐃⲆ: 5
  }, {
    r: [[122, 1], [121, 40], [108, 30]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 71,
    ᐃⲆⲆΔ: 123,
    time: 1 / 20,
    ᐃᐃⲆ: 5
  }, {
    r: [[217, 1], [202, 40], [111, 30]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 72,
    ᐃⲆⲆΔ: 219,
    time: 0.05,
    ᐃᐃⲆ: 5
  }, {
    r: [[166, 1], [109, 80], [108, 60]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 73,
    ᐃⲆⲆΔ: 212,
    time: 1 / 20,
    ᐃᐃⲆ: 5
  }, {
    r: [[171, 1], [108, 140]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 74,
    ᐃⲆⲆΔ: 213,
    time: 1 / 20,
    ᐃᐃⲆ: 5
  }, {
    r: [[172, 1], [111, 80], [108, 60]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 75,
    ᐃⲆⲆΔ: 214,
    time: 0.05,
    ᐃᐃⲆ: 5
  }, {
    r: [[173, 1], [112, 80], [108, 60]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 76,
    ᐃⲆⲆΔ: 215,
    time: 1 / 20,
    ᐃᐃⲆ: 5
  }, {
    r: [[124, 1], [121, 80], [108, 60]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 77,
    ᐃⲆⲆΔ: 216,
    time: 1 / 20,
    ᐃᐃⲆ: 5
  }, {
    r: [[218, 1], [202, 80], [111, 60]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 78,
    ᐃⲆⲆΔ: 220,
    time: 0.05,
    ᐃᐃⲆ: 5
  }, {
    r: [[109, 25], [111, 2]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 79,
    ᐃⲆⲆΔ: 167,
    time: 1 / 5,
    ᐃᐃⲆ: 4
  }, {
    r: [[120, 1], [2, 1], [161, 2]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 80,
    ᐃⲆⲆΔ: 23,
    time: 0.2,
    ᐃᐃⲆ: 2
  }, {
    r: [[120, 5], [222, 20], [147, 5], [2, 5]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 81,
    ᐃⲆⲆΔ: 24,
    time: 1 / 30,
    ᐃᐃⲆ: 2
  }, {
    r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 82,
    ᐃⲆⲆΔ: 82,
    time: 1 / 60,
    ᐃᐃⲆ: 2
  }, {
    r: [[2, 1], [161, 2]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 83,
    ᐃⲆⲆΔ: 10,
    time: 1 / 5,
    ᐃᐃⲆ: 2
  }, {
    r: [[10, 1], [174, 5], [161, 4]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 84,
    ᐃⲆⲆΔ: 11,
    time: 1 / 12,
    ᐃᐃⲆ: 2
  }, {
    r: [[11, 1], [146, 5], [147, 4]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 85,
    ᐃⲆⲆΔ: 40,
    time: 0.03333333333333333,
    ᐃᐃⲆ: 2
  }, {
    r: [[40, 1], [146, 5], [240, 10], [147, 4]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 86,
    ᐃⲆⲆΔ: 88,
    time: 1 / 50,
    ᐃᐃⲆ: 2
  }, {
    r: [[109, 50]],
    w: 0,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 87,
    ᐃⲆⲆΔ: 58,
    time: 1 / 5,
    ᐃᐃⲆ: 2
  }, {
    r: [[108, 75], [109, 75], [58, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 88,
    ᐃⲆⲆΔ: 25,
    time: 0.1,
    ᐃᐃⲆ: 2
  }, {
    r: [[108, 90], [109, 90], [111, 90], [25, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 89,
    ᐃⲆⲆΔ: 26,
    time: 1 / 20,
    ᐃᐃⲆ: 2
  }, {
    r: [[108, 100], [111, 100], [112, 100], [26, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 90,
    ᐃⲆⲆΔ: 27,
    time: 0.03333333333333333,
    ᐃᐃⲆ: 2
  }, {
    r: [[121, 80], [111, 150], [112, 120], [27, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 91,
    ᐃⲆⲆΔ: 43,
    time: 0.016666666666666666,
    ᐃᐃⲆ: 2
  }, {
    r: [[202, 80], [112, 150], [121, 120], [43, 1]],
    w: 1,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 92,
    ᐃⲆⲆΔ: 44,
    time: 1 / 90,
    ᐃᐃⲆ: 2
  }, {
    r: [[139, 2], [112, 40], [161, 4]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 93,
    ᐃⲆⲆΔ: 48,
    time: 0.05,
    ᐃᐃⲆ: 2
  }, {
    r: [[48, 1], [111, 80], [129, 1], [121, 20]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 94,
    ᐃⲆⲆΔ: 47,
    time: 1 / 90,
    ᐃᐃⲆ: 2
  }, {
    r: [[203, 5], [112, 50], [147, 5]],
    w: 1,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 95,
    ᐃⲆⲆΔ: 20,
    time: 0.05,
    ᐃᐃⲆ: 2
  }, {
    r: [[20, 1], [203, 10], [121, 50]],
    w: 1,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 96,
    ᐃⲆⲆΔ: 21,
    time: 0.016666666666666666,
    ᐃᐃⲆ: 2
  }, {
    r: [[21, 1], [203, 15], [121, 50], [202, 50]],
    w: 1,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 97,
    ᐃⲆⲆΔ: 22,
    time: 0.011111111111111112,
    ᐃᐃⲆ: 2
  }, {
    r: [[161, 4], [237, 2]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 98,
    ᐃⲆⲆΔ: 80,
    time: 0.06666666666666667,
    ᐃᐃⲆ: 2
  }, {
    r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 99,
    ᐃⲆⲆΔ: 81,
    time: 1 / 150,
    ᐃᐃⲆ: 2
  }, {
    r: [[161, 6], [174, 5]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 100,
    ᐃⲆⲆΔ: 29,
    time: 0.06666666666666667,
    ᐃᐃⲆ: 2
  }, {
    r: [[109, 20]],
    w: 0,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 101,
    ᐃⲆⲆΔ: 120,
    time: 1 / 3,
    ᐃᐃⲆ: 4
  }, {
    r: [[112, 1], [161, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 102,
    ᐃⲆⲆΔ: 147,
    time: 1 / 3,
    ᐃᐃⲆ: 4
  }, {
    r: [[111, 10]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 103,
    ᐃⲆⲆΔ: 148,
    time: 0.2,
    ᐃᐃⲆ: 4
  }, {
    r: [[111, 250]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 104,
    ᐃⲆⲆΔ: 158,
    time: 0.016666666666666666,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 105,
    ᐃⲆⲆΔ: 159,
    time: 1 / 10,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 15]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 106,
    ᐃⲆⲆΔ: 125,
    time: 1 / 5,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 107,
    ᐃⲆⲆΔ: 190,
    time: 1 / 5,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 120]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 108,
    ᐃⲆⲆΔ: 221,
    time: 1 / 15,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 20], [140, 15]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 109,
    ᐃⲆⲆΔ: 141,
    time: 0.2,
    ᐃᐃⲆ: 4
  }, {
    r: [[126, 25]],
    w: 1,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 110,
    ᐃⲆⲆΔ: 128,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ⵠΔⲆ: 1,
    e: 0,
    id: 111,
    ᐃⲆⲆΔ: 127,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[142, 20], [128, 1]],
    w: 0,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 112,
    ᐃⲆⲆΔ: 127,
    time: 1 / 10,
    ᐃᐃⲆ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ⵠΔⲆ: 0,
    e: 1,
    id: 113,
    ᐃⲆⲆΔ: 127,
    time: 1 / 3,
    ᐃᐃⲆ: 3
  }, {
    r: [[109, 60], [108, 20], [161, 2]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 114,
    ᐃⲆⲆΔ: 135,
    time: 0.1,
    ᐃᐃⲆ: 4
  }, {
    r: [[112, 40], [108, 45]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 115,
    ᐃⲆⲆΔ: 151,
    time: 1 / 20,
    ᐃᐃⲆ: 4
  }, {
    r: [[151, 1], [234, 40], [238, 1]],
    w: 1,
    f: 1,
    ⵠΔⲆ: 1,
    e: 0,
    id: 116,
    ᐃⲆⲆΔ: 152,
    time: 0.005,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 50], [108, 100]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 117,
    ᐃⲆⲆΔ: 153,
    time: 0.011111111111111112,
    ᐃᐃⲆ: 4
  }, {
    r: [[108, 60], [111, 120]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 118,
    ᐃⲆⲆΔ: 154,
    time: 1 / 90,
    ᐃᐃⲆ: 4
  }, {
    r: [[111, 70], [112, 140]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 119,
    ᐃⲆⲆΔ: 155,
    time: 1 / 90,
    ᐃᐃⲆ: 4
  }, {
    r: [[112, 80], [121, 160]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 120,
    ᐃⲆⲆΔ: 156,
    time: 1 / 90,
    ᐃᐃⲆ: 4
  }, {
    r: [[121, 90], [202, 180]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 121,
    ᐃⲆⲆΔ: 157,
    time: 0.011111111111111112,
    ᐃᐃⲆ: 4
  }, {
    r: [[108, 70]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 122,
    ᐃⲆⲆΔ: 55,
    time: 1 / 10,
    ᐃᐃⲆ: 0
  }, {
    r: [[108, 70], [109, 50]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 123,
    ᐃⲆⲆΔ: 56,
    time: 0.1,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 40], [108, 40]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 124,
    ᐃⲆⲆΔ: 144,
    time: 1 / 10,
    ᐃᐃⲆ: 4
  }, {
    r: [[143, 1], [117, 1]],
    w: 0,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 125,
    ᐃⲆⲆΔ: 145,
    time: 1 / 3,
    ᐃᐃⲆ: 3
  }, {
    r: [[147, 30], [184, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ⵠΔⲆ: 1,
    e: 0,
    id: 126,
    ᐃⲆⲆΔ: 59,
    time: 1 / 120,
    ᐃᐃⲆ: 2
  }, {
    r: [[59, 1], [186, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ⵠΔⲆ: 1,
    e: 0,
    id: 127,
    ᐃⲆⲆΔ: 60,
    time: 0.005555555555555556,
    ᐃᐃⲆ: 2
  }, {
    r: [[26, 1], [197, 10], [196, 10], [161, 10]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 128,
    ᐃⲆⲆΔ: 61,
    time: 1 / 60,
    ᐃᐃⲆ: 2
  }, {
    r: [[147, 20], [185, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ⵠΔⲆ: 1,
    e: 0,
    id: 129,
    ᐃⲆⲆΔ: 62,
    time: 1 / 120,
    ᐃᐃⲆ: 1
  }, {
    r: [[62, 1], [187, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ⵠΔⲆ: 1,
    e: 0,
    id: 130,
    ᐃⲆⲆΔ: 63,
    time: 1 / 180,
    ᐃᐃⲆ: 1
  }, {
    r: [[109, 100], [161, 4]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 131,
    ᐃⲆⲆΔ: 64,
    time: 0.05,
    ᐃᐃⲆ: 1
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 132,
    ᐃⲆⲆΔ: 101,
    time: 1 / 5,
    ᐃᐃⲆ: 1
  }, {
    r: [[108, 200], [161, 8], [222, 4], [64, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 133,
    ᐃⲆⲆΔ: 65,
    time: 1 / 25,
    ᐃᐃⲆ: 1
  }, {
    r: [[108, 20], [231, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 134,
    ᐃⲆⲆΔ: 102,
    time: 1 / 5,
    ᐃᐃⲆ: 1
  }, {
    r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 135,
    ᐃⲆⲆΔ: 66,
    time: 1 / 30,
    ᐃᐃⲆ: 1
  }, {
    r: [[111, 20], [222, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 136,
    ᐃⲆⲆΔ: 103,
    time: 0.1,
    ᐃᐃⲆ: 1
  }, {
    r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 137,
    ᐃⲆⲆΔ: 67,
    time: 1 / 35,
    ᐃᐃⲆ: 1
  }, {
    r: [[112, 10], [222, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 138,
    ᐃⲆⲆΔ: 104,
    time: 0.1,
    ᐃᐃⲆ: 1
  }, {
    r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 139,
    ᐃⲆⲆΔ: 68,
    time: 1 / 40,
    ᐃᐃⲆ: 1
  }, {
    r: [[121, 10], [232, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 140,
    ᐃⲆⲆΔ: 105,
    time: 0.06666666666666667,
    ᐃᐃⲆ: 1
  }, {
    r: [[202, 200], [147, 10], [129, 1], [68, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 141,
    ᐃⲆⲆΔ: 69,
    time: 1 / 45,
    ᐃᐃⲆ: 1
  }, {
    r: [[202, 10], [232, 1], [203, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 142,
    ᐃⲆⲆΔ: 106,
    time: 1 / 15,
    ᐃᐃⲆ: 1
  }, {
    r: [[234, 200], [147, 10], [185, 1], [69, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 143,
    ᐃⲆⲆΔ: 70,
    time: 1 / 50,
    ᐃᐃⲆ: 1
  }, {
    r: [[234, 10], [238, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 144,
    ᐃⲆⲆΔ: 107,
    time: 1 / 20,
    ᐃᐃⲆ: 1
  }, {
    r: [[109, 100]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 145,
    ᐃⲆⲆΔ: 71,
    time: 0.04,
    ᐃᐃⲆ: 1
  }, {
    r: [[71, 1], [108, 100], [109, 50]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 146,
    ᐃⲆⲆΔ: 72,
    time: 1 / 40,
    ᐃᐃⲆ: 1
  }, {
    r: [[72, 1], [111, 50], [108, 50], [109, 50]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 147,
    ᐃⲆⲆΔ: 73,
    time: 0.02,
    ᐃᐃⲆ: 1
  }, {
    r: [[73, 1], [112, 50], [111, 50], [108, 50]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 148,
    ᐃⲆⲆΔ: 74,
    time: 1 / 70,
    ᐃᐃⲆ: 1
  }, {
    r: [[74, 1], [121, 50], [112, 50], [111, 50]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 149,
    ᐃⲆⲆΔ: 75,
    time: 1 / 90,
    ᐃᐃⲆ: 1
  }, {
    r: [[75, 1], [202, 50], [121, 50], [112, 50]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 150,
    ᐃⲆⲆΔ: 76,
    time: 0.008333333333333333,
    ᐃᐃⲆ: 1
  }, {
    r: [[175, 1], [111, 200]],
    w: 1,
    f: 1,
    ⵠΔⲆ: 1,
    e: 0,
    id: 151,
    ᐃⲆⲆΔ: 77,
    time: 1 / 60,
    ᐃᐃⲆ: 2
  }, {
    r: [[176, 1], [111, 200]],
    w: 1,
    f: 1,
    ⵠΔⲆ: 1,
    e: 0,
    id: 152,
    ᐃⲆⲆΔ: 78,
    time: 1 / 60,
    ᐃᐃⲆ: 2
  }, {
    r: [[177, 1], [111, 200], [149, 1]],
    w: 1,
    f: 1,
    ⵠΔⲆ: 1,
    e: 0,
    id: 153,
    ᐃⲆⲆΔ: 79,
    time: 1 / 60,
    ᐃᐃⲆ: 2
  }, {
    r: [[174, 10], [2, 5], [161, 6]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 154,
    ᐃⲆⲆΔ: 83,
    time: 1 / 10,
    ᐃᐃⲆ: 2
  }, {
    r: [[2, 3], [161, 2]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 155,
    ᐃⲆⲆΔ: 84,
    time: 1 / 10,
    ᐃᐃⲆ: 2
  }, {
    r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 156,
    ᐃⲆⲆΔ: 85,
    time: 1 / 60,
    ᐃᐃⲆ: 2
  }, {
    r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 157,
    ᐃⲆⲆΔ: 86,
    time: 0.016666666666666666,
    ᐃᐃⲆ: 2
  }, {
    r: [[181, 1]],
    w: 0,
    f: 0,
    ⵠΔⲆ: 1,
    e: 0,
    id: 158,
    ᐃⲆⲆΔ: 180,
    time: 1 / 5,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 20], [161, 1]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 159,
    ᐃⲆⲆΔ: 181,
    time: 0.2,
    ᐃᐃⲆ: 0
  }, {
    r: [[108, 100], [140, 30]],
    w: 1,
    f: 1,
    ⵠΔⲆ: 0,
    e: 0,
    id: 160,
    ᐃⲆⲆΔ: 182,
    time: 1 / 10,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 161,
    ᐃⲆⲆΔ: 183,
    time: 0.2,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 162,
    ᐃⲆⲆΔ: 198,
    time: 1 / 20,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 250], [147, 10], [146, 2], [139, 2]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 163,
    ᐃⲆⲆΔ: 223,
    time: 0.02,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 250], [161, 10], [146, 2], [222, 8]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 164,
    ᐃⲆⲆΔ: 224,
    time: 0.02,
    ᐃᐃⲆ: 4
  }, {
    r: [[161, 10], [174, 6], [2, 4], [126, 50]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 165,
    ᐃⲆⲆΔ: 89,
    time: 1 / 20,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 250], [161, 10], [120, 10], [231, 8]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 166,
    ᐃⲆⲆΔ: 230,
    time: 0.02,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 40]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 167,
    ᐃⲆⲆΔ: 94,
    time: 1 / 5,
    ᐃᐃⲆ: 1
  }, {
    r: [[94, 1], [108, 40], [109, 50]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 168,
    ᐃⲆⲆΔ: 95,
    time: 0.1,
    ᐃᐃⲆ: 1
  }, {
    r: [[95, 1], [111, 40], [108, 50], [109, 60]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 169,
    ᐃⲆⲆΔ: 96,
    time: 1 / 20,
    ᐃᐃⲆ: 1
  }, {
    r: [[96, 1], [112, 40], [111, 70], [108, 80]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 170,
    ᐃⲆⲆΔ: 97,
    time: 1 / 30,
    ᐃᐃⲆ: 1
  }, {
    r: [[97, 1], [121, 40], [112, 70], [111, 110]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 171,
    ᐃⲆⲆΔ: 98,
    time: 0.016666666666666666,
    ᐃᐃⲆ: 1
  }, {
    r: [[98, 1], [202, 50], [121, 80], [112, 110]],
    w: 1,
    f: 0,
    ⵠΔⲆ: 0,
    e: 0,
    id: 172,
    ᐃⲆⲆΔ: 99,
    time: 1 / 90,
    ᐃᐃⲆ: 1
  }];
  function pt(a, b) {
    const c = ((2712 + a) * 214013 + 2531011) % 4294967296;
    const d = (8 << (b >> 8 & 255)) + (16 << (b & 255)) + (24 << (b >> 16 & 255)) + (0 << (b >> 24 & 255));
    const e = function (b, c, d, e, f, g) {
      const a = ~(b & 14406) & 14406 | ~(b & 14406) & b;
      const i = ((54299 + c) * 214013 + 2531011) % 4294967296;
      const j = ~(g & 25379) & (g | 25379);
      return ((44687 + (hb(a, i, (1 + (d + 38067) * 22695477) % 4294967296, (12345 + (e + 9485) * 1103515245) % 2147483648, f ^ 37359) ^ ut(j, a, i))) * 22695477 + 1) % 4294967296;
    }(c, d, c, d, c, d);
    sb(c, d, c);
    return e ^ 14403;
  }
  const qt = 100;
  Lr = 300;
  function rt(b, c, d, e, f) {
    const g = ~(d & 9421) & (d | 9421);
    const a = (2147483587 + (31302 + e) * 2147483629) % 2147483647;
    const h = f ^ 50461;
    return ((63208 + (pt(~(b & 35895) & b | ~(b & 35895) & 35895, ~(c & 61823) & 61823 | ~(c & 61823) & c) ^ wb(g, a, h))) * 22695477 + 1) % 4294967296;
  }
  ᐃΔᐃ = {
    ᐃΔᐃⵠΔⵠⲆ: 300,
    ΔᐃΔΔΔⵠΔ: 301,
    ᐃΔⲆⲆᐃⵠⵠ: 302,
    ᐃΔⵠⲆΔᐃⲆ: 303,
    ⲆΔΔΔⵠⲆᐃ: 304,
    ⵠΔⵠΔΔᐃᐃ: 305,
    ᐃᐃⲆⵠΔⲆⵠ: 306,
    ⵠᐃᐃΔᐃⵠᐃ: 307,
    ⲆᐃⵠΔⵠᐃΔ: 308,
    ⵠⲆⵠⵠΔᐃΔ: 309,
    ᐃΔΔⲆᐃΔΔ: 310,
    ⵠⵠⲆΔⲆᐃⵠ: 311,
    EMPTY: 312,
    ΔᐃΔΔⵠΔⵠ: 313,
    ᐃΔⲆⲆΔⲆΔ: 314,
    ΔⲆⵠⵠᐃⲆᐃ: 315,
    ᐃΔⲆⵠΔⵠᐃ: 316,
    ⲆΔⲆΔΔΔⲆ: 317,
    ⲆᐃᐃΔΔΔᐃ: 318,
    ⲆΔΔΔⵠᐃⵠ: 319,
    Δᐃⵠᐃᐃᐃᐃ: 320,
    ⲆᐃᐃⵠᐃΔⲆ: 321,
    ⲆᐃⵠᐃΔ: 322,
    ⲆΔⵠⲆⲆᐃⵠ: 323,
    ΔᐃⲆᐃ: 324,
    ΔᐃΔⵠᐃⲆΔ: 325,
    ᐃΔⲆⲆⲆᐃⲆ: 326,
    ⲆⵠΔⵠⵠⲆⲆ: 327,
    ΔᐃᐃᐃΔⲆᐃ: 328,
    ΔᐃΔᐃⵠⵠΔ: 329,
    ΔⲆⲆⲆΔⲆⲆ: 330,
    ⲆᐃΔⵠⵠΔΔ: 331,
    POINTS: 332,
    ΔⲆⵠᐃᐃΔΔ: 333,
    ⵠᐃⵠⵠΔⲆΔ: 334,
    ⲆΔⲆⵠⵠΔⲆ: 335,
    ⲆΔΔⲆⵠᐃΔ: 336,
    ᐃᐃⲆⵠᐃⲆᐃ: 337,
    ᐃᐃᐃⵠΔⲆΔ: 338,
    ᐃᐃⲆⲆⵠᐃⵠ: 339,
    ΔⵠⲆⲆⵠΔⲆ: 340,
    ⵠⵠΔΔΔΔⲆ: 341,
    ⵠⵠΔⲆⲆᐃⵠ: 342,
    ᐃᐃΔΔⵠᐃΔ: 343
  };
  const st = 16;
  const tt = 7;
  function ut(b, c, d) {
    const e = b ^ 49680;
    const f = ((32749 + c) * 214013 + 2531011) % 4294967296;
    const g = (2147483587 + (54404 + d) * 2147483629) % 2147483647;
    const a = kx(e, f, g, e, f);
    Rb(g, e, f, g, e);
    return (a | 53756) & ~(a & 53756);
  }
  const vt = 100;
  function wt(b, c, d, e, f, g) {
    Ve(ox, b, c, d, e, f, g);
    return ((0 + (Wp(px[0], px[1]) ^ function (a, b, c, d) {
      Ne(ox, a, b, c, d);
      const e = ux(px[0], px[1], px[2], px[3], px[0]);
      io(px[1], px[2], px[3], px[0], px[1]);
      return (e | 44192) & ~(e & 44192);
    }(px[2], px[3], px[4], px[5]))) * 48271 + 0) % 2147483647;
  }
  const xt = 5;
  const yt = 12;
  const zt = 2;
  const eb = 14;
  function ib() {
    Lb[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    Lb[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    Lb[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    Lb[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    Lb[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    Lb[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    Lb[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    Lb[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    Lb[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    Lb[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    Lb[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    Lb[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    Lb[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    Lb[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    Lb[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    Lb[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    Lb[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    Lb[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    Lb[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    Lb[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    Lb[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    Lb[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    Lb[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    Lb[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    Lb[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    Lb[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    Lb[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    Lb[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    Lb[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    Lb[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    Lb[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    Lb[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    Lb[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    Lb[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    Lb[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    Lb[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    Lb[232] = ["Vulture Feather", "From a deadly vulture"];
    Lb[234] = ["Emerald", "How many golden breads can you get from it?"];
    Lb[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
    Lb[80] = ["Turban", "Useful to survive in the desert."];
    Lb[81] = ["Ninja outfit", "Essential to survive in the desert"];
    Lb[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    Lb[236] = ["Pilot Glasses"];
    Lb[225] = ["Tamed Boar", "Fast on lands and slow on water."];
    Lb[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    Lb[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    Lb[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    Lb[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    Lb[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    Lb[89] = ["Saddle", "Hit a boar with it to tame it."];
    Lb[90] = ["Witch Hat", "You're a wizard Starvy!"];
    Lb[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    Lb[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    Lb[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    Lb[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    Lb[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    Lb[224] = ["Sled", "You are faster with it in the snow"];
    Lb[223] = ["Boat", "You are faster with it in the water"];
    Lb[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    Lb[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 70"];
    Lb[222] = ["Penguin Feather", "From a deadly cute penguin."];
    Lb[231] = ["Hawk Feather", "From a deadly hawk."];
    Lb[233] = ["Cactus", "Food : 20", "Water : 10"];
    Lb[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    Lb[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    Lb[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    Lb[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    Lb[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    Lb[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    Lb[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    Lb[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    Lb[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    Lb[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    Lb[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    Lb[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    Lb[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    Lb[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    Lb[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    Lb[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    Lb[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Lb[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Lb[53] = ["Pitchfork", "Perfect for gathering"];
    Lb[54] = ["Golden Pitchfork", "Essential for a real farmer."];
    Lb[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    Lb[Vr.ⵠⲆᐃⵠΔᐃᐃ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    Lb[Vr.ⵠᐃᐃⲆⲆᐃⵠ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    Lb[Vr.ⲆᐃⲆΔⲆΔⲆ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    Lb[Vr.ⲆΔⲆⲆⲆᐃⲆ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    Lb[Vr.ᐃⲆΔⵠᐃΔΔ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    Lb[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    Lb[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    Lb[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    Lb[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    Lb[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    Lb[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    Lb[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    Lb[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    Lb[203] = ["Flame", "It's hot!"];
    Lb[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    Lb[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    Lb[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    Lb[202] = ["Reidite", "The ultimate ore"];
    Lb[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    qb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    qb[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    qb[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    qb[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    qb[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    qb[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    qb[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    qb[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    qb[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    qb[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    qb[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    qb[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    qb[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    qb[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    qb[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    qb[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    qb[38] = ["You died crushed by an angry baby mammoth."];
    qb[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    qb[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    Lb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Lb[341] = "A sandstorm is approaching in a few seconds.";
    Lb[340] = "The sandstorm will soon stop.";
    Lb[343] = "A blizzard is approaching in a few seconds.";
    Lb[342] = "The blizzard will soon stop.";
    Lb[328] = " BACK TO THE GAME";
    Lb[329] = " Share on Twitter";
    Lb[330] = " Share on Facebook";
    Lb[331] = "You can buy items on the shop in the next game with your points";
    Lb[332] = "points";
    Lb[333] = "Score";
    Lb[334] = "Kill";
    Lb[335] = "Days survived";
    Lb[336] = "Building method: Free. Press G to change";
    Lb[337] = "Building method: Grid. Press G to change";
    Lb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Lb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    Lb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    Lb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Lb[7] = ["Hand"];
    Lb[140] = ["Dirt", "Dirty!"];
    Lb[126] = ["Sand", "I got it in my eyes!"];
    Lb[109] = ["Wood", "You can't get enough of it!"];
    Lb[108] = ["Stone", "Also called a rock"];
    Lb[111] = ["Gold", "Be generous, give it to others"];
    Lb[112] = ["Diamond", "What will you make with it?"];
    Lb[121] = ["Amethyst", "It's Mauve like Lapa"];
    Lb[131] = ["Flour", "Used in cooking"];
    Lb[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    Lb[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    Lb[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    Lb[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    Lb[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    Lb[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    Lb[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    Lb[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    Lb[200] = ["Candies", "Only for children!", "Food: 20"];
    Lb[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    Lb[201] = ["Garland", "Perfect decoration for roofs"];
    Lb[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    Lb[110] = ["Berry", "Berry tasty!", "Food: 10"];
    Lb[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    Lb[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    Lb[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    Lb[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    Lb[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Lb[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    Lb[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    Lb[194] = ["Thorn bush", "It stings!"];
    Lb[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    Lb[142] = ["Ice", "Useful for making cakes and water"];
    Lb[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    Lb[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    Lb[2] = ["Rabbit Fur", "That rabbit was so cute..."];
    Lb[178] = ["Pure Fur", "You're a bread factory"];
    Lb[179] = ["Dark Fur", "You get ready to do something wrong"];
    Lb[146] = ["Winter Fur", "These animals just wanted a hug..."];
    Lb[139] = ["Scales", "It smells like fish!"];
    Lb[129] = ["Kraken Skin", "Weren't you too scared?"];
    Lb[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    Lb[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    Lb[114] = ["Workbench", "Very useful to craft all kinds of objects"];
    Lb[161] = ["Cord", "Used in crafting Hats and Bag"];
    Lb[147] = ["Diamond Cord", "Used in crafting Special Hats"];
    Lb[167] = ["Chest", "Allows you to store items", "Durability: 500"];
    Lb[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    Lb[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    Lb[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    Lb[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    Lb[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    Lb[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    Lb[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    Lb[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    Lb[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    Lb[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    Lb[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
    Lb[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    Lb[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    Lb[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    Lb[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    Lb[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    Lb[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    Lb[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 95"];
    Lb[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    Lb[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    Lb[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    Lb[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    Lb[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    Lb[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    Lb[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    Lb[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    Lb[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    Lb[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    Lb[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    Lb[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    Lb[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    Lb[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    Lb[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    Lb[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    Lb[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    Lb[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    Lb[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    Lb[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    Lb[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    Lb[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    Lb[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    Lb[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    Lb[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Lb[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    Lb[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Lb[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    Lb[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    Lb[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    Lb[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    Lb[175] = ["Green Gemstone", "You didn't cheat, promise?"];
    Lb[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
    Lb[177] = ["Blue Gemstone", "For too kind people"];
    Lb[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    Lb[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    Lb[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    Lb[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    Lb[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    Lb[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    Lb[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
    Lb[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    Lb[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    Lb[29] = ["Bag", "More space for your items!"];
    Lb[120] = ["Paper", "Used in book-crafting"];
    Lb[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    Lb[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    Lb[148] = ["Lock", "Allow you to lock your chest"];
    Lb[158] = ["Lock-pick", "Allows you to unlock one chest"];
    Lb[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    Lb[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    Lb[183] = ["Sign", "Leave a message to others", "Durability: 200"];
    Lb[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    Lb[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
    Lb[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    Lb[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    Lb[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    Lb[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    Lb[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    Lb[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    Lb[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    Lb[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    Lb[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    Lb[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    Lb[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    Lb[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    Lb[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    Lb[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    Lb[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    Lb[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    Lb[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    Lb[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    Lb[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    Lb[300] = "You cannot join this server";
    Lb[301] = "Kicked: ";
    Lb[302] = "Your key is already used by someone else";
    Lb[303] = "Your key is wrong";
    Lb[304] = "You have an old version, you need to clear your cache";
    Lb[338] = "Your client version is too recent for this server. The server is being updated";
    Lb[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
    Lb[305] = "There are no more new resources";
    Lb[306] = "You survived 1 day";
    Lb[307] = "You survived ";
    Lb[308] = " days";
    Lb[309] = "You are dead ;-;";
    Lb[310] = "Server cannot find spawn location! Spam the play button!";
    Lb[311] = "Server is full! Spam the play button!";
    Lb[312] = "Resource is empty";
    Lb[313] = "Inventory is full (right-click to empty items)";
    Lb[314] = " is dead";
    Lb[315] = "This is not the right tool";
    Lb[316] = "You joined a team";
    Lb[317] = "You are dead";
    Lb[318] = " joined the team";
    Lb[319] = "Your team was destroyed";
    Lb[320] = "You left the team";
    Lb[321] = " left the team";
    Lb[322] = "Someone stole your token :>";
    Lb[323] = "Choose a server";
    Lb[324] = "players";
    Lb[325] = "total players";
    Lb[326] = "players on this mode";
    Lb[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    qb[0] = ["You were killed for no reason"];
    qb[1] = ["You starved to death, as the name of the game implies"];
    qb[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    qb[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    qb[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    qb[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    qb[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    qb[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    qb[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    qb[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    qb[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    qb[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    qb[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    qb[13] = ["You died of thirst. Better drink your own piss."];
    qb[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    qb[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    qb[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    qb[17] = ["Your skin's falling apart, the sun killed you."];
    qb[18] = ["Garlic stored in your pockets boiled your brain."];
    qb[19] = ["As a vampire, don't stand near the garlic cloves."];
    qb[20] = ["You ate garlic as a vampire, what did you expect?"];
    qb[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    ⲆⲆⲆⲆⵠ = "Uuunnnggg";
    ⵠⲆⵠΔᐃᐃΔ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  function tb() {
    Lb[184] = ["You feel a great power emanating from this orb"];
    qb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Lb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Lb[328] = " BACK TO THE GAME";
    Lb[329] = " Share on Twitter";
    Lb[330] = " Share on Facebook";
    Lb[331] = "You can buy items on the shop in the next game with your points";
    Lb[332] = "points";
    Lb[333] = "Score";
    Lb[334] = "Kill";
    Lb[335] = "Days survived";
    Lb[336] = "Building method: Free. Press G to change";
    Lb[337] = "Building method: Grid. Press G to change";
    Lb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Lb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Lb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Lb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Lb[7] = ["Рука"];
    Lb[140] = ["Земля", "Грязно!"];
    Lb[126] = ["Песок", "Он в моих глазах!"];
    Lb[109] = ["Дерево", "Постоянно нужно больше!"];
    Lb[108] = ["Камень", "Твердый"];
    Lb[111] = ["Золото", "Будьте щедры, давайте его другим"];
    Lb[112] = ["Алмаз", "Что вы создадите с помощью него?"];
    Lb[121] = ["Аметист", "Он сиреневый, как Lapa"];
    Lb[131] = ["Мука", "Используется в готовке"];
    Lb[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    Lb[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    Lb[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    Lb[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    Lb[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    Lb[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    Lb[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    Lb[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    Lb[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
    Lb[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    Lb[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
    Lb[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Lb[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    Lb[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Lb[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    Lb[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Lb[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    Lb[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Lb[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    Lb[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    Lb[194] = ["Колючий Куст", "Это больно!"];
    Lb[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    Lb[142] = ["Лёд", "Используется для изготовления тортов и воды"];
    Lb[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    Lb[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    Lb[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    Lb[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    Lb[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
    Lb[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    Lb[139] = ["Чешуя", "Она пахнет рыбой!"];
    Lb[129] = ["Шкура Кракена", "Вы не испугались?"];
    Lb[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    Lb[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    Lb[114] = ["Верстак", "Необходим для создания многих предметов"];
    Lb[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    Lb[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    Lb[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    Lb[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    Lb[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    Lb[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    Lb[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    Lb[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    Lb[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    Lb[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    Lb[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    Lb[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    Lb[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    Lb[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    Lb[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    Lb[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    Lb[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    Lb[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    Lb[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    Lb[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    Lb[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    Lb[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    Lb[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    Lb[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    Lb[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    Lb[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    Lb[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    Lb[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    Lb[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    Lb[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    Lb[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    Lb[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    Lb[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    Lb[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    Lb[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    Lb[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    Lb[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    Lb[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    Lb[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    Lb[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Lb[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    Lb[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    Lb[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    Lb[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Lb[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Lb[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Lb[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    Lb[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    Lb[185] = ["Шар Дракона", "Даётся за квест"];
    Lb[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    Lb[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    Lb[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    Lb[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    Lb[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    Lb[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    Lb[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    Lb[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    Lb[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    Lb[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    Lb[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    Lb[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    Lb[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    Lb[29] = ["Рюкзак", "Больше места для ваших предметов!"];
    Lb[120] = ["Бумага", "Используется при создании книги"];
    Lb[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    Lb[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    Lb[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    Lb[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    Lb[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    Lb[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    Lb[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    Lb[190] = ["Крыша", "Немного скрывает вас и согревает!"];
    Lb[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    Lb[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    Lb[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    Lb[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    Lb[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    Lb[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    Lb[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    Lb[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    Lb[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    Lb[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    Lb[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    Lb[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    Lb[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    Lb[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    Lb[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    Lb[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    Lb[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    Lb[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    Lb[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    Lb[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    Lb[300] = "Вы не можете зайти на этот сервер";
    Lb[301] = "Выгнаны: ";
    Lb[302] = "Ваш ключ уже используется кем-то";
    Lb[303] = "Ваш ключ неправильный";
    Lb[304] = "У вас старая версия, вам нужно очистить кеш";
    Lb[305] = "Ресурсов больше нет";
    Lb[306] = "Вы выжили 1 день";
    Lb[307] = "Вы выжили ";
    Lb[308] = " дней";
    Lb[309] = "Вы умерли ;-;";
    Lb[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    Lb[311] = "Сервер заполнен! Спамьте кнопку играть!";
    Lb[312] = "Ресурсы закончились";
    Lb[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    Lb[314] = " умер";
    Lb[315] = "Это не тот инструмент";
    Lb[316] = "Вы вошли в команду";
    Lb[317] = "Вы умерли";
    Lb[318] = " вошёл в команду";
    Lb[319] = "Ваша команда была разрушена";
    Lb[320] = "Вы покинули команду";
    Lb[321] = " покинул команду";
    Lb[322] = "Кто-то использует ваш токен :>";
    Lb[323] = "Выберите сервер";
    Lb[324] = "игроков";
    Lb[325] = "игроков всего";
    Lb[326] = "игроков в этом режиме";
    Lb[327] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    qb[0] = ["Вы были убиты без причины"];
    qb[1] = ["Вы умерли от голода, как название игры подразумевает это"];
    qb[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    qb[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    qb[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    qb[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    qb[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    qb[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    qb[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    qb[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    qb[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    qb[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    qb[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    qb[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    qb[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    qb[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    qb[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    qb[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    qb[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    qb[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    qb[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    qb[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    ⲆⲆⲆⲆⵠ = "Uuunnnggg";
    ⵠⲆⵠΔᐃᐃΔ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  const nb = 18;
  function ob() {
    Lb[184] = ["You feel a great power emanating from this orb"];
    qb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Lb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Lb[328] = " BACK TO THE GAME";
    Lb[329] = " Share on Twitter";
    Lb[330] = " Share on Facebook";
    Lb[331] = "You can buy items on the shop in the next game with your points";
    Lb[332] = "points";
    Lb[333] = "Score";
    Lb[334] = "Kill";
    Lb[335] = "Days survived";
    Lb[336] = "Building method: Free. Press G to change";
    Lb[337] = "Building method: Grid. Press G to change";
    Lb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Lb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Lb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Lb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Lb[7] = ["mão"];
    Lb[140] = ["terra", "está sujo!"];
    Lb[126] = ["areia", "entrou nos meus olhos!"];
    Lb[109] = ["madeira", "você não pode pegar o suficiente disso!"];
    Lb[108] = ["pedra", "também chamado rocha"];
    Lb[111] = ["ouro", "seja generoso, dê para outros"];
    Lb[112] = ["diamante", "o que você irá fazer com isso?"];
    Lb[121] = ["ametista", "é mauve como lapa"];
    Lb[131] = ["farinha", "usada na cozinha"];
    Lb[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
    Lb[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    Lb[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    Lb[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    Lb[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    Lb[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    Lb[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    Lb[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    Lb[200] = ["doces", "apenas para crianças!", "comida: 100"];
    Lb[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    Lb[201] = ["pisca-pisca", "decoração perfeita de telhado"];
    Lb[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Lb[110] = ["berry", "Berry saborosa!", "comida: 10"];
    Lb[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    Lb[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    Lb[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    Lb[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    Lb[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Lb[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    Lb[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    Lb[194] = ["mato de espinhos", "pica!"];
    Lb[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    Lb[142] = ["gelo", "útil para fazer bolo e água"];
    Lb[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    Lb[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    Lb[2] = ["pele de coelho", "o coelho era tão fofo..."];
    Lb[178] = ["pele pura", "você é uma fábrica de pão"];
    Lb[179] = ["pele negra", "você está pronto para fazer algo errado"];
    Lb[146] = ["pele de inverno", "ele só queria um abraço"];
    Lb[139] = ["escala", "é pequeno como peixe!"];
    Lb[129] = ["pele do kraken", "você não está com medo?"];
    Lb[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    Lb[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    Lb[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    Lb[161] = ["linha", "usada para fazer chapéus e mochila"];
    Lb[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
    Lb[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    Lb[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    Lb[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    Lb[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    Lb[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    Lb[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    Lb[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    Lb[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    Lb[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    Lb[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    Lb[Vr.ᐃΔᐃⵠⵠⲆᐃⲆᐃ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    Lb[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    Lb[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    Lb[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    Lb[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    Lb[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    Lb[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    Lb[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    Lb[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    Lb[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    Lb[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    Lb[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    Lb[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    Lb[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    Lb[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    Lb[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    Lb[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    Lb[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    Lb[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    Lb[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    Lb[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    Lb[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    Lb[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    Lb[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    Lb[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    Lb[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    Lb[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    Lb[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    Lb[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    Lb[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    Lb[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    Lb[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Lb[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    Lb[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Lb[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    Lb[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    Lb[185] = ["esfera do dragão", "dado na questt"];
    Lb[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    Lb[175] = ["pedra verde", "você não vai trapacear, promete?"];
    Lb[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    Lb[177] = ["pedra azul", "para pessoas muito gentis"];
    Lb[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    Lb[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    Lb[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    Lb[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    Lb[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    Lb[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    Lb[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    Lb[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    Lb[49] = ["regador", "permite regar as plantas", "dano: 1"];
    Lb[29] = ["mochila", "mais espaço para seus itens!"];
    Lb[120] = ["papel", "usado para fazer o livro"];
    Lb[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    Lb[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    Lb[148] = ["fechadura", "permite você trancar seu baú"];
    Lb[158] = ["chave", "permite destrancar um baú"];
    Lb[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    Lb[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    Lb[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    Lb[190] = ["telhado", "esconde você um pouco e te esquenta!"];
    Lb[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    Lb[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    Lb[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    Lb[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    Lb[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    Lb[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    Lb[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    Lb[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    Lb[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    Lb[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    Lb[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    Lb[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    Lb[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    Lb[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    Lb[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    Lb[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    Lb[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    Lb[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Lb[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Lb[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    Lb[300] = "você não pode entrar no servidor";
    Lb[301] = "kickado: ";
    Lb[302] = "sua chave está em uso por outra pessoa";
    Lb[303] = "sua chave está errada";
    Lb[304] = "você tem uma versão velha, limpe seu cache";
    Lb[305] = "não tem mais recursos";
    Lb[306] = "você sobreviveu 1 dia";
    Lb[307] = "você sobreviveu ";
    Lb[308] = " dias";
    Lb[309] = "você está morto ;-;";
    Lb[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    Lb[311] = "servidor está cheio! spam o botão de play!";
    Lb[312] = "não tem recursos";
    Lb[313] = "inventário está cheio (botão direito para deletar itens)";
    Lb[314] = " está morto";
    Lb[315] = "essa não é a ferramenta certa";
    Lb[316] = "você entrou no time";
    Lb[317] = "você está morto";
    Lb[318] = "entrou no time";
    Lb[319] = "seu time foi destruido";
    Lb[320] = "você saiu do time";
    Lb[321] = " saiu do time";
    Lb[322] = "alguém roubou sua ficha :>";
    Lb[323] = "escolha um servidor";
    Lb[324] = "jogadores";
    Lb[325] = "jogadores totais";
    Lb[326] = "jogadores nesse modo";
    Lb[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    qb[0] = ["você morreu sem motivo"];
    qb[1] = ["você morreu de fome, como o jogo diz"];
    qb[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    qb[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    qb[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    qb[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    qb[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    qb[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    qb[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    qb[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    qb[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    qb[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    qb[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    qb[13] = ["você morreu de sede. melhor beber sua própria urina."];
    qb[14] = ["você sabia que você morre afogado? agora você sabe."];
    qb[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    qb[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    qb[17] = ["sua pele caindo aos pedaços, o sol te matou."];
    qb[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    qb[19] = ["como vampiro, não chegue perto do alho."];
    qb[20] = ["você comeu alho como vampiro, o que você esperava?"];
    qb[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    ⲆⲆⲆⲆⵠ = "Uuunnnggg";
    ⵠⲆⵠΔᐃᐃΔ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  function ab(a) {
    return function (a, b) {
      const c = (8 << (a >> 8 & 255)) + (16 << (a >> 24 & 255)) + (24 << (a & 255)) + (0 << (a >> 16 & 255));
      const d = ~(b & 15684) & 15684 | ~(b & 15684) & b;
      const e = wb(c, d, c);
      (function (b, c, d, e, f) {
        const i = b ^ 53190;
        const a = ((c + 16900) * 1103515245 + 12345) % 2147483648;
        const j = (64807 + d) % 65434;
        const k = (e | 12840) & ~(e & 12840);
        const h = ~(f & 44260) & f | ~(f & 44260) & 44260;
        const g = fr(i, a, j, k, h, i);
        kf(a, j, k, h, i, a);
      })(d, c, d, c, d);
      return ~(e & 12704) & e | ~(e & 12704) & 12704;
    }(a, 28821);
  }
  function rb(a, b, c) {
    Wj(ox, a, b, c);
    const d = Gr(px[0], px[1], px[2], px[0], px[1]);
    const e = function (a, b, c) {
      fi(ox, a, b, c);
      const d = mc(px[0], px[1]);
      Db(px[2], px[0], px[1], px[2]);
      return (d | 45838) & ~(d & 45838);
    }(px[2], px[0], px[1]);
    return (24 << ((d ^ e) >> 0 & 255)) + (8 << ((d ^ e) >> 8 & 255)) + (0 << ((d ^ e) >> 24 & 255)) + (16 << ((d ^ e) >> 16 & 255));
  }
  function sb(a, b, c) {
    return ((29841 + ((12345 + (27676 + ((a | 55125) & ~(a & 55125) ^ (2531011 + (39455 + b) * 214013) % 4294967296)) * 1103515245) % 2147483648 ^ (1013904223 + (c + 59523) * 1664525) % 4294967296)) * 2147483629 + 2147483587) % 2147483647;
  }
  function hb(b, c, d, e, f) {
    const g = b ^ 14251;
    const a = e ^ 33996;
    const i = (32087 + f) % 65383;
    const j = sb(g, (39285 + c) % 65404, ~(d & 45229) & (d | 45229));
    sb(a, i, g);
    return ~(j & 7849) & 7849 | ~(j & 7849) & j;
  }
  const gb = 10;
  const lb = 16;
  const ub = 0;
  const bb = 1;
  const db = 9;
  const vb = 8;
  const mb = hg;
  const cb = 13;
  const pb = 20;
  function Cb() {
    Lb[184] = ["You feel a great power emanating from this orb"];
    qb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Lb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Lb[328] = " BACK TO THE GAME";
    Lb[329] = " Share on Twitter";
    Lb[330] = " Share on Facebook";
    Lb[331] = "You can buy items on the shop in the next game with your points";
    Lb[332] = "points";
    Lb[333] = "Score";
    Lb[334] = "Kill";
    Lb[335] = "Days survived";
    Lb[336] = "Building method: Free. Press G to change";
    Lb[337] = "Building method: Grid. Press G to change";
    Lb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Lb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Lb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Lb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Lb[7] = ["Mano"];
    Lb[140] = ["Tierra", "¡Tan limpia como mis manos!"];
    Lb[126] = ["Arena", "¡Tengo arena en mis ojos!"];
    Lb[109] = ["Madera", "¡Nunca hay suficiente!"];
    Lb[108] = ["Piedra", "También llamada roca."];
    Lb[111] = ["Oro", "Sé generoso, compártelo con los otros"];
    Lb[112] = ["Diamante", "¿Que vas a hacer con él?"];
    Lb[121] = ["Amatista", "Es Mauve como Lapa"];
    Lb[131] = ["Harina", "Usada para cocinar."];
    Lb[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    Lb[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    Lb[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    Lb[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    Lb[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    Lb[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    Lb[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    Lb[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    Lb[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    Lb[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    Lb[201] = ["Guirnalda", "Perfecta para decorar el techo"];
    Lb[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Lb[110] = ["Baya", "No es venenosa.", "Comida: 10"];
    Lb[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Lb[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    Lb[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Lb[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    Lb[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    Lb[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    Lb[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    Lb[194] = ["Planta de Espinas", "¡Te daña!"];
    Lb[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    Lb[142] = ["Hielo", "Bueno para hacer tartas y agua"];
    Lb[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    Lb[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    Lb[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    Lb[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    Lb[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    Lb[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    Lb[139] = ["Escamas", "¡Huele a pescado!"];
    Lb[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    Lb[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    Lb[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    Lb[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    Lb[161] = ["Hilo", "Usado para craftear ropa y mochila"];
    Lb[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    Lb[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    Lb[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    Lb[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    Lb[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    Lb[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    Lb[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    Lb[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    Lb[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    Lb[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    Lb[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    Lb[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    Lb[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    Lb[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    Lb[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    Lb[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    Lb[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    Lb[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    Lb[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    Lb[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    Lb[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    Lb[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    Lb[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    Lb[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    Lb[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    Lb[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    Lb[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    Lb[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    Lb[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    Lb[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    Lb[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    Lb[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    Lb[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    Lb[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    Lb[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    Lb[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    Lb[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    Lb[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    Lb[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    Lb[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    Lb[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    Lb[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    Lb[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    Lb[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    Lb[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    Lb[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    Lb[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    Lb[185] = ["Esfera del Dragón", "Dada en la misión"];
    Lb[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    Lb[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    Lb[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    Lb[177] = ["Gema Azul", "Para gente muy amable"];
    Lb[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Lb[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Lb[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    Lb[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    Lb[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    Lb[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    Lb[128] = ["Botella Vacia", "La puedes llenar de agua"];
    Lb[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
    Lb[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    Lb[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
    Lb[120] = ["Hoja", "Usada para hacer un libro"];
    Lb[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    Lb[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    Lb[148] = ["Cerradura", "Te permite cerrar tu cofre"];
    Lb[158] = ["Llave", "Te permite abrir un cofre cerrado"];
    Lb[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    Lb[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    Lb[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    Lb[190] = ["Techo", "Te esconde un poco y te protege del frío"];
    Lb[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    Lb[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    Lb[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    Lb[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    Lb[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    Lb[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    Lb[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    Lb[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    Lb[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    Lb[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    Lb[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    Lb[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    Lb[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    Lb[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    Lb[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    Lb[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    Lb[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    Lb[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Lb[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Lb[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    Lb[300] = "No puedes unirte a este servidor";
    Lb[301] = "Expulsado: ";
    Lb[302] = "Tu llave ya está usada";
    Lb[303] = "Tu llave está mal";
    Lb[304] = "Tienes una versión antigua, limpia tu cache";
    Lb[305] = "No hay mas recursos";
    Lb[306] = "Has sobrevivido 1 día";
    Lb[307] = "Has sobrevivido ";
    Lb[308] = " días";
    Lb[309] = "Estás muerto ;-;";
    Lb[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    Lb[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    Lb[312] = "Recurso vacio";
    Lb[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    Lb[314] = " está muerto";
    Lb[315] = "Esta no es la herramienta correcta";
    Lb[316] = "Te has unido a un equipo";
    Lb[317] = "Estás muerto";
    Lb[318] = " se unió al equipo";
    Lb[319] = "Tu equipo ha sido destruido";
    Lb[320] = "Has dejado el equipo";
    Lb[321] = " dejo el equipo ";
    Lb[322] = "Alguien te robó tu token :>";
    Lb[323] = "Elige un servidor";
    Lb[324] = "jugadores";
    Lb[325] = "total de jugadores";
    Lb[326] = "Jugadores en este modo de juego";
    Lb[327] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    qb[0] = ["Has muerto por ninguna razón"];
    qb[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    qb[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    qb[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    qb[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    qb[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    qb[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    qb[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    qb[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    qb[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    qb[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    qb[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    qb[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    qb[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
    qb[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    qb[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    qb[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    qb[17] = ["Tu piel se cayó, el sol te quemó."];
    qb[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    qb[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
    qb[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    qb[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    ⲆⲆⲆⲆⵠ = "Uuunnnggg";
    ⵠⲆⵠΔᐃᐃΔ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  const Tb = 100;
  const fb = 20;
  function zb(b, c, d) {
    const e = (1 + (b + 33469) * 22695477) % 4294967296;
    const f = ~(c & 11433) & (c | 11433);
    const g = ((d + 26983) * 2147483629 + 2147483587) % 2147483647;
    const a = function (b, c, d) {
      const e = ~(b & 7776) & (b | 7776);
      const f = (1013904223 + (c + 23424) * 1664525) % 4294967296;
      const g = (2147483587 + (d + 37414) * 2147483629) % 2147483647;
      const a = Fb(e, f, g, e);
      Fb(f, g, e, f);
      return ~(a & 10814) & (a | 10814);
    }(e, f, g);
    const h = kx(e, f, g, e, f);
    return (16 << ((a ^ h) >> 8 & 255)) + (8 << ((a ^ h) >> 24 & 255)) + (0 << ((a ^ h) & 255)) + (24 << ((a ^ h) >> 16 & 255));
  }
  const yb = Kh;
  function wb(b, c, d) {
    const e = (24 << (b >> 16 & 255)) + (16 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (0 << (b & 255));
    const f = c ^ 4080;
    const g = d ^ 13362;
    const a = Jr(e, f, g, e);
    (function (b, c, d, e, f) {
      const i = (b | 41282) & ~(b & 41282);
      const a = (12345 + (c + 781) * 1103515245) % 2147483648;
      const j = ~(d & 21989) & 21989 | ~(d & 21989) & d;
      const k = e ^ 35024;
      const h = Bb(i, a, j, k, (0 << (f >> 8 & 255)) + (8 << (f >> 24 & 255)) + (16 << (f & 255)) + (24 << (f >> 16 & 255)));
      const g = Jr(i, a, j, k);
    })(f, g, e, f, g);
    return ~(a & 5458) & a | ~(a & 5458) & 5458;
  }
  const Pb = 5;
  function kb(b, c) {
    const d = b ^ 52988;
    const e = ~(c & 53286) & c | ~(c & 53286) & 53286;
    const f = Bt(d, e, d, e, d, e);
    const g = hb(d, e, d, e, d);
    return (0 << ((f ^ g) >> 16 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) & 255)) + (16 << ((f ^ g) >> 8 & 255));
  }
  const Ab = 10;
  const xb = 13;
  const Jb = 16;
  const Mb = 5;
  function Bb(b, c, d, e, f) {
    const g = b ^ 11530;
    const a = ((c + 56484) * 214013 + 2531011) % 4294967296;
    const i = (24 << (d >> 8 & 255)) + (0 << (d >> 16 & 255)) + (8 << (d & 255)) + (16 << (d >> 24 & 255));
    const j = function (c, e, f, i, j, k) {
      const a = (2531011 + (25806 + c) * 214013) % 4294967296;
      const m = (8 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (24 << (e & 255)) + (0 << (e >> 24 & 255));
      const n = (8 << (f >> 24 & 255)) + (24 << (f & 255)) + (0 << (f >> 16 & 255)) + (16 << (f >> 8 & 255));
      const h = (24 << (i >> 24 & 255)) + (8 << (i & 255)) + (0 << (i >> 16 & 255)) + (16 << (i >> 8 & 255));
      const g = ~(j & 28006) & j | ~(j & 28006) & 28006;
      const l = (2147483587 + (k + 19730) * 2147483629) % 2147483647;
      const o = eo(a, m);
      const b = Bt(n, h, g, l, a, m);
      return (16 << ((o ^ b) >> 24 & 255)) + (8 << ((o ^ b) >> 0 & 255)) + (24 << ((o ^ b) >> 8 & 255)) + (0 << ((o ^ b) >> 16 & 255));
    }(g, a, i, ~(e & 18191) & (e | 18191), f ^ 19902, g);
    eo(a, i);
    return j ^ 20702;
  }
  function Db(a, b, c, d) {
    Oj(ox, a, b, c, d);
    const e = Ox(px[0], px[1], px[2], px[3], px[0]);
    (function (a, b) {
      Yj(ox, a, b);
      const c = mc(px[0], px[1]);
      to(px[0], px[1]);
    })(px[1], px[2]);
    return e ^ 28149;
  }
  function Eb(b, c, d, e, f, i) {
    const a = ~(b & 42830) & b | ~(b & 42830) & 42830;
    const j = ~(f & 22146) & f | ~(f & 22146) & 22146;
    const k = (0 << (i >> 24 & 255)) + (24 << (i & 255)) + (8 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
    const h = Jr(a, ((58323 + c) * 22695477 + 1) % 4294967296, (2147483587 + (d + 37631) * 2147483629) % 2147483647, (e | 61038) & ~(e & 61038));
    nx(j, k, a);
    return (h | 53897) & ~(h & 53897);
  }
  const Ib = 12;
  const Sb = 255;
  function Qb() {
    Lb[184] = ["You feel a great power emanating from this orb"];
    qb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Lb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Lb[328] = " BACK TO THE GAME";
    Lb[329] = " Share on Twitter";
    Lb[330] = " Share on Facebook";
    Lb[331] = "You can buy items on the shop in the next game with your points";
    Lb[332] = "points";
    Lb[333] = "Score";
    Lb[334] = "Kill";
    Lb[335] = "Days survived";
    Lb[336] = "Building method: Free. Press G to change";
    Lb[337] = "Building method: Grid. Press G to change";
    Lb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Lb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Lb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Lb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Lb[7] = ["Hand"];
    Lb[140] = ["Boden", "Dreckig!"];
    Lb[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    Lb[109] = ["Holz", "Du kannst niemals zu viel haben!"];
    Lb[108] = ["Stein", "Auch Fels gennant"];
    Lb[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    Lb[112] = ["Diamant", "Was wirst du daraus machen?"];
    Lb[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    Lb[131] = ["Mehl", "wird fürs Backen gebraucht"];
    Lb[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    Lb[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    Lb[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    Lb[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    Lb[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    Lb[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    Lb[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    Lb[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    Lb[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    Lb[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    Lb[201] = ["Girlande", "perfekter Schmuck für Dächer"];
    Lb[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Lb[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
    Lb[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Lb[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    Lb[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Lb[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    Lb[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Lb[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    Lb[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    Lb[194] = ["Dornenbusch", "Es sticht!"];
    Lb[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    Lb[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    Lb[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    Lb[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    Lb[2] = ["Hasenfell", "Der Hase war so süß..."];
    Lb[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
    Lb[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    Lb[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    Lb[139] = ["Schuppen", "Es riecht wie Fisch!"];
    Lb[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    Lb[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    Lb[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    Lb[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    Lb[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    Lb[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    Lb[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    Lb[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    Lb[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    Lb[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    Lb[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Lb[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Lb[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    Lb[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    Lb[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    Lb[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    Lb[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    Lb[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Lb[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Lb[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    Lb[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    Lb[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    Lb[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    Lb[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    Lb[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    Lb[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    Lb[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    Lb[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    Lb[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    Lb[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    Lb[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    Lb[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Lb[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Lb[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    Lb[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    Lb[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    Lb[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    Lb[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    Lb[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    Lb[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    Lb[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    Lb[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    Lb[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    Lb[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Lb[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    Lb[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    Lb[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    Lb[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Lb[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Lb[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Lb[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    Lb[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Lb[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    Lb[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    Lb[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    Lb[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    Lb[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
    Lb[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Lb[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Lb[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Lb[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    Lb[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    Lb[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    Lb[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    Lb[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    Lb[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    Lb[29] = ["Rucksack", "Mehr Platz im Inventar!"];
    Lb[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
    Lb[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    Lb[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    Lb[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    Lb[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    Lb[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    Lb[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    Lb[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    Lb[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    Lb[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    Lb[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    Lb[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    Lb[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    Lb[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    Lb[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    Lb[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    Lb[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    Lb[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    Lb[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    Lb[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    Lb[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    Lb[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    Lb[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    Lb[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    Lb[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    Lb[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    Lb[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Lb[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Lb[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    Lb[300] = "Du kannst diesem Server nicht beitreten";
    Lb[301] = "Gekickt: ";
    Lb[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    Lb[303] = "Dein Schlüssel ist falsch";
    Lb[304] = "Deine Version ist veraltet, säubere dein Cache";
    Lb[305] = "Es gibt keine neuen Ressourcen";
    Lb[306] = "Du hast einen Tag überlebt";
    Lb[307] = "Du hast überlebt ";
    Lb[308] = " Tage";
    Lb[309] = "Du bist gestorben ;-;";
    Lb[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    Lb[311] = "Server ist voll! Drücke immer wieder auf spielen!";
    Lb[312] = "Ressource ist leer";
    Lb[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    Lb[314] = " ist gestorben";
    Lb[315] = "Das ist nicht das richtige Werkzeug";
    Lb[316] = "Du bist einem Team beigetreten";
    Lb[317] = "Du bist gestorben";
    Lb[318] = " ist dem Team beigetreten";
    Lb[319] = "Dein Team wurde zerstört";
    Lb[320] = "Du hast das Team verlassen";
    Lb[321] = " hat das Team verlassen";
    Lb[322] = "Jemand hat dein Token gestohlen :>";
    Lb[323] = "Suche dir ein Server aus";
    Lb[324] = "Spieler";
    Lb[325] = "alle Spieler";
    Lb[326] = "Spieler in diesem Modus";
    Lb[327] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    qb[0] = ["Du wurdest ohne Grund getötet"];
    qb[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    qb[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    qb[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    qb[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    qb[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    qb[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    qb[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    qb[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    qb[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    qb[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    qb[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    qb[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    qb[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    qb[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    qb[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    qb[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    qb[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    qb[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    qb[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    qb[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    qb[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    ⲆⲆⲆⲆⵠ = "Uuunnnggg";
    ⵠⲆⵠΔᐃᐃΔ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  const _b = 16;
  function Fb(b, c, d, e) {
    const f = ((29614 + b) * 214013 + 2531011) % 4294967296;
    const g = e ^ 25390;
    const a = ut(f, ~(c & 818) & 818 | ~(c & 818) & c, (d + 34609) % 65474);
    pt(g, f);
    return a ^ 33256;
  }
  function Rb(b, c, d, e, f) {
    const g = ~(b & 11157) & b | ~(b & 11157) & 11157;
    const a = c ^ 10238;
    const i = (d | 52982) & ~(d & 52982);
    const j = jb(g, a, i, (24 << (e >> 24 & 255)) + (0 << (e >> 8 & 255)) + (8 << (e >> 16 & 255)) + (16 << (e & 255)), ((f + 43957) * 22695477 + 1) % 4294967296);
    nx(g, a, i);
    return (j | 12975) & ~(j & 12975);
  }
  function jb(b, c, d, e, f) {
    const g = ((48767 + b) * 2147483629 + 2147483587) % 2147483647;
    const a = (1 + (38444 + c) * 22695477) % 4294967296;
    const i = ~(d & 8098) & 8098 | ~(d & 8098) & d;
    const j = Yw(g, a, i, (e + 16932) % 65461, ~(f & 29540) & (f | 29540), g);
    kb(a, i);
    return ~(j & 34915) & (j | 34915);
  }
  var Wb = function () {
    Lb[184] = ["You feel a great power emanating from this orb"];
    qb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Lb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Lb[328] = " BACK TO THE GAME";
    Lb[329] = " Share on Twitter";
    Lb[330] = " Share on Facebook";
    Lb[331] = "You can buy items on the shop in the next game with your points";
    Lb[332] = "points";
    Lb[333] = "Score";
    Lb[334] = "Kill";
    Lb[335] = "Days survived";
    Lb[336] = "Building method: Free. Press G to change";
    Lb[337] = "Building method: Grid. Press G to change";
    Lb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Lb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Lb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Lb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Lb[7] = ["Ręka"];
    Lb[140] = ["Ziemia", "Brudna!"];
    Lb[126] = ["Piasek", "Mam go w oczach!"];
    Lb[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    Lb[108] = ["Kamień", "Także nazywany skałą"];
    Lb[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
    Lb[112] = ["Diament", "Co z nim zrobisz?"];
    Lb[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    Lb[131] = ["Mąka", "Używana w gotowaniu"];
    Lb[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    Lb[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    Lb[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    Lb[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    Lb[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    Lb[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    Lb[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    Lb[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    Lb[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    Lb[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    Lb[201] = ["Girlanda", "Idealna do dekorowania dachów"];
    Lb[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Lb[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    Lb[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Lb[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    Lb[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Lb[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    Lb[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Lb[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    Lb[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    Lb[194] = ["Kolczasty krzew", "Kłuje!"];
    Lb[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    Lb[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
    Lb[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    Lb[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    Lb[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    Lb[178] = ["Skóra", "Jesteś fabryką chleba"];
    Lb[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    Lb[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    Lb[139] = ["Łuski", "Pachnie jak ryba!"];
    Lb[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    Lb[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    Lb[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    Lb[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    Lb[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    Lb[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    Lb[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    Lb[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    Lb[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    Lb[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    Lb[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Lb[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Lb[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    Lb[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    Lb[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    Lb[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    Lb[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    Lb[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Lb[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Lb[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Lb[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    Lb[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    Lb[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    Lb[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    Lb[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    Lb[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    Lb[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    Lb[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    Lb[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    Lb[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    Lb[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    Lb[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Lb[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Lb[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Lb[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    Lb[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    Lb[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    Lb[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    Lb[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    Lb[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    Lb[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    Lb[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    Lb[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    Lb[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    Lb[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    Lb[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    Lb[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    Lb[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    Lb[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    Lb[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    Lb[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    Lb[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Lb[185] = ["Smocza kula", "Zdobyta podczas zadania"];
    Lb[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    Lb[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    Lb[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    Lb[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    Lb[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Lb[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Lb[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Lb[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    Lb[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    Lb[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    Lb[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    Lb[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    Lb[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    Lb[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    Lb[120] = ["Papier", "Używany w tworzeniu książki"];
    Lb[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    Lb[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    Lb[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    Lb[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    Lb[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    Lb[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    Lb[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    Lb[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    Lb[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    Lb[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    Lb[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    Lb[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    Lb[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    Lb[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    Lb[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    Lb[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    Lb[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    Lb[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    Lb[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    Lb[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    Lb[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    Lb[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    Lb[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    Lb[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    Lb[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    Lb[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Lb[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Lb[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    Lb[300] = "Nie możesz dołączyć do tego serwera";
    Lb[301] = "Wyrzucony: ";
    Lb[302] = "Twój klucz jest aktualnie używany przez innego gracza";
    Lb[303] = "Twój klucz jest nieprawidłowy";
    Lb[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    Lb[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    Lb[306] = "Przeżyłeś 1 dzień";
    Lb[307] = "Przeżyłeś ";
    Lb[308] = " dni";
    Lb[309] = "Jesteś martwy ;-;";
    Lb[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    Lb[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    Lb[312] = "Źródło jest puste";
    Lb[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    Lb[314] = " jest martwy";
    Lb[315] = "To nie jest właściwe narzędzie";
    Lb[316] = "Dołączyłeś do drużyny";
    Lb[317] = "Jesteś martwy";
    Lb[318] = " dołączył do drużyny";
    Lb[319] = "Twoja drużyna została zniszczona";
    Lb[320] = " Opuściłeś drużynę";
    Lb[321] = " opuścił drużynę";
    Lb[322] = "Ktoś ukradł twój żeton :>";
    Lb[323] = "Wybierz serwer";
    Lb[324] = "graczy";
    Lb[325] = "wszystkich graczy";
    Lb[326] = "graczy w tym trybie";
    Lb[327] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    qb[0] = ["Zostałeś zabity bez powodu"];
    qb[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    qb[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    qb[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    qb[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    qb[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    qb[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    qb[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    qb[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    qb[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    qb[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    qb[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    qb[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    qb[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    qb[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    qb[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    qb[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    qb[17] = ["Twoja skóra odpada, słońce cię zabija."];
    qb[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    qb[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    qb[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    qb[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    ⲆⲆⲆⲆⵠ = "Uuunnnggg";
    ⵠⲆⵠΔᐃᐃΔ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  };
  var Gb = function () {
    Lb[184] = ["You feel a great power emanating from this orb"];
    qb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Lb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Lb[328] = " RETOUR AU JEU";
    Lb[329] = " Partage sur Twitter";
    Lb[330] = " Partage sur Facebook";
    Lb[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    Lb[332] = "points";
    Lb[333] = "Score";
    Lb[334] = "Tués";
    Lb[335] = "Jours survécus";
    Lb[336] = "Mode de construction: Libre. Appuie sur G pour changer";
    Lb[337] = "Mode de construction: Grille. Appuie sur G pour changer";
    Lb[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
    Lb[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    Lb[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    Lb[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    Lb[7] = ["Main"];
    Lb[140] = ["Terre", "C'est sale!"];
    Lb[126] = ["Sable", "J'en ai dans les yeux"];
    Lb[109] = ["Bois", "Tu n'en auras jamais trop!"];
    Lb[108] = ["Pierre", "Aussi appelée roche"];
    Lb[111] = ["Or", "Sois généreux, donne en aux autres"];
    Lb[112] = ["Diamant", "Comme tes yeux! wesh"];
    Lb[121] = ["Améthyste", "C'est Mauve comme Lapa"];
    Lb[131] = ["Farine", "Utile pour la cuisine"];
    Lb[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    Lb[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    Lb[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    Lb[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    Lb[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    Lb[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    Lb[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    Lb[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    Lb[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    Lb[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    Lb[201] = ["Guirlandes", "Utilisable sur les toits"];
    Lb[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Lb[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    Lb[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Lb[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
    Lb[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Lb[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    Lb[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Lb[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    Lb[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    Lb[194] = ["Ronces", "Ça pique!"];
    Lb[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    Lb[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    Lb[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    Lb[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    Lb[2] = ["Peau de lapin", "Vous êtes un monstre"];
    Lb[178] = ["Fourrure blanche", "Tu es une usine à pain"];
    Lb[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    Lb[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    Lb[139] = ["Écailles", "Ça sent le poisson!"];
    Lb[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    Lb[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    Lb[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    Lb[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    Lb[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    Lb[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    Lb[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    Lb[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    Lb[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    Lb[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    Lb[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    Lb[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    Lb[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    Lb[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    Lb[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    Lb[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    Lb[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    Lb[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    Lb[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    Lb[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    Lb[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    Lb[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    Lb[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    Lb[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    Lb[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    Lb[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    Lb[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    Lb[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    Lb[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    Lb[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    Lb[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
    Lb[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
    Lb[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
    Lb[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    Lb[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    Lb[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    Lb[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    Lb[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    Lb[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    Lb[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    Lb[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Lb[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Lb[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Lb[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Lb[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Lb[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Lb[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    Lb[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Lb[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Lb[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Lb[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    Lb[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    Lb[185] = ["Orbe du Dragon", "Donné en Quête"];
    Lb[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    Lb[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    Lb[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    Lb[177] = ["Gemme bleue", "Pour les gens trop gentils"];
    Lb[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    Lb[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    Lb[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    Lb[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    Lb[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    Lb[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    Lb[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    Lb[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    Lb[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    Lb[29] = ["Sac", "Plus de place dans ton inventaire!"];
    Lb[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    Lb[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    Lb[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    Lb[148] = ["Cadenas", "Pour verrouiller un coffre"];
    Lb[158] = ["Clé", "Pour déverrouiller un coffre"];
    Lb[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    Lb[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    Lb[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    Lb[190] = ["Toit", "Te cache un peu et te réchauffe"];
    Lb[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    Lb[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    Lb[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    Lb[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    Lb[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    Lb[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    Lb[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    Lb[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    Lb[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    Lb[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    Lb[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    Lb[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    Lb[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    Lb[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    Lb[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    Lb[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    Lb[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    Lb[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Lb[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Lb[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    Lb[300] = "Tu ne peux pas rejoindre le serveur";
    Lb[301] = "Expulsé: ";
    Lb[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    Lb[303] = "Ta clé est fausse";
    Lb[304] = "Tu as une vieille version, rafraichis tes caches";
    Lb[305] = "Il n'y a plus de nouvelles ressources";
    Lb[306] = "Tu as survécu 1 jour";
    Lb[307] = "Tu as survécu ";
    Lb[308] = " jours";
    Lb[309] = "Tu es mort ;-;";
    Lb[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    Lb[311] = "Le serveur est complet! Spam le bouton jouer";
    Lb[312] = "Cette ressource est vide";
    Lb[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    Lb[314] = " est mort";
    Lb[315] = "Ce n'est pas le bon outil";
    Lb[316] = "Tu as rejoins une équipe";
    Lb[317] = "Tu es mort";
    Lb[318] = " a rejoint l'équipe";
    Lb[319] = "Ton équipe a été détruite";
    Lb[320] = "Tu as quitté l'équipe";
    Lb[321] = " a quitté l'équipe";
    Lb[322] = "Quelqu'un a volé ton token :>";
    Lb[323] = "Choisis un serveur";
    Lb[324] = "joueurs";
    Lb[325] = "joueurs";
    Lb[326] = "joueurs dans ce mode";
    Lb[327] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    qb[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
    qb[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    qb[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    qb[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    qb[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    qb[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    qb[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    qb[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    qb[8] = ["Cet ours voulait juste un câlin."];
    qb[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    qb[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    qb[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    qb[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    qb[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    qb[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    qb[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    qb[16] = ["Un kraken a 'kraké' tes os."];
    qb[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    qb[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    qb[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    qb[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    qb[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    ⲆⲆⲆⲆⵠ = "Uuunnnggg";
    ⵠⲆⵠΔᐃᐃΔ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  };
  var Lb = [];
  for (var Ob = 0; Ob < 344; Ob++) {
    Lb[Ob] = "";
  }
  const At = 11;
  var qb = [];
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  const Hb = hg;
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      ib();
    } else if (a === "Français") {
      Gb();
    } else if (a === "Deutsch") {
      Qb();
    } else if (a === "Español") {
      Cb();
    } else if (a === "Português") {
      ob();
    } else if (a === "Русский") {
      tb();
    } else if (a === "Polski") {
      Wb();
    }
    ⵠΔᐃⲆᐃ = [];
    zx.ⵠΔᐃΔ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  pr = "EN";
  var Ub = navigator.language || navigator.userLanguage;
  const Yb = 12;
  switch (Ub) {
    case "ru":
      pr = "RU";
      break;
    case "en":
      pr = "EN";
      break;
    case "es":
      pr = "SP";
      break;
    case "fr":
      pr = "FR";
      break;
    case "pl":
      pr = "PL";
      break;
    case "de":
      pr = "DE";
      break;
    case "pt":
      pr = "PT";
  }
  var Kb;
  function Bt(b, c, d, e, f, i) {
    const a = ~(b & 7214) & 7214 | ~(b & 7214) & b;
    const j = ~(c & 41316) & 41316 | ~(c & 41316) & c;
    const k = (d | 62600) & ~(d & 62600);
    const h = (16 << (e >> 24 & 255)) + (24 << (e >> 16 & 255)) + (8 << (e & 255)) + (0 << (e >> 8 & 255));
    const g = (f | 63644) & ~(f & 63644);
    const l = (16 << (i >> 24 & 255)) + (0 << (i >> 0 & 255)) + (8 << (i >> 8 & 255)) + (24 << (i >> 16 & 255));
    return ((21175 + (sb(a, j, k) ^ Yw(h, g, l, a, j, k))) * 214013 + 2531011) % 4294967296;
  }
  function Xb(a, b) {
    Ai(ox, a, b);
    const c = Hr(px[0], px[1], px[0], px[1]);
    Ox(px[0], px[1], px[0], px[1], px[0]);
    return ~(c & 9039) & c | ~(c & 9039) & 9039;
  }
  if (pr === "FR") {
    $(".md-languages label button").text("Français");
    Kb = Gb;
  } else if (pr === "PL") {
    $(".md-languages label button").text("Polski");
    Kb = Wb;
  } else if (pr === "PT") {
    $(".md-languages label button").text("Português");
    Kb = ob;
  } else if (pr === "SP") {
    $(".md-languages label button").text("Español");
    Kb = Cb;
  } else if (pr === "RU") {
    $(".md-languages label button").text("Русский");
    Kb = tb;
  } else if (pr === "DE") {
    $(".md-languages label button").text("Deutsch");
    Kb = Qb;
  } else {
    $(".md-languages label button").text("English");
    Kb = ib;
  }
  const Zb = 2;
  Δᐃ = {
    ⵠᐃⲆᐃᐃᐃⵠⵠΔ: "img/logo.png",
    ΔᐃΔⲆⵠⲆⲆ: "img/mapday.png",
    ⲆⲆᐃᐃⲆⵠΔ: "img/mapnight.png",
    ᐃⵠⵠᐃΔⵠΔⲆᐃ: "img/bigzday.png",
    ⵠᐃᐃΔⲆᐃΔⲆⵠ: "img/bigznight.png",
    ᐃⵠᐃⵠⲆΔⵠ: "img/bigday-river1.png",
    ⵠᐃⵠⲆⲆⲆⵠΔΔ: "img/bigday-lake.png",
    ⵠΔᐃⵠΔᐃᐃ: "img/bigday-berry.png",
    ᐃΔΔⵠΔΔⵠ: "img/bigday-stone1.png",
    ⵠᐃⵠΔⲆΔΔ: "img/bigday-stone2.png",
    ⲆⲆᐃΔⵠⵠⲆ: "img/bigday-gold1.png",
    ᐃᐃⵠᐃΔΔⵠ: "img/bigday-gold2.png",
    ⲆᐃⵠΔⵠⵠⵠ: "img/bigday-emerald1.png",
    ᐃΔⲆᐃᐃⲆⵠ: "img/bigday-emerald2.png",
    ΔΔⲆⵠⲆΔᐃ: "img/bigday-amethyst.png",
    ΔⲆΔⵠΔⲆᐃ: "img/bigday-bear.png",
    ᐃⲆⲆⵠΔΔᐃ: "img/bigday-cave.png",
    ΔᐃΔⲆⲆΔⲆ: "img/bigday-diamond.png",
    ⵠⵠⲆⲆΔᐃⲆ: "img/bigday-island.png",
    ᐃⵠⲆΔΔΔΔ: "img/bigday-reidite.png",
    ᐃⲆᐃΔΔΔⵠ: "img/bigday-spider.png",
    ⲆⲆΔΔΔⲆⲆ: "img/bigday-wolf.png",
    ᐃⵠᐃⲆⲆᐃᐃ: "img/bigday-fir-tree.png",
    ⵠⵠΔΔᐃΔΔ: "img/bigday-fox.png",
    ⲆⲆⵠᐃΔⲆⵠ: "img/bigday-kraken.png",
    ⲆⲆᐃⲆⲆⵠᐃ: "img/bigday-piranha.png",
    ⵠᐃᐃⵠᐃΔᐃ: "img/bigday-cactus.png",
    ⲆᐃᐃⵠⵠⵠΔ: "img/bigday-magma.png",
    ᐃⲆⲆⲆⲆⲆⵠ: "img/bigday-river1.png",
    ⲆᐃⲆⵠⲆⲆⵠⵠⵠ: "img/bignight-lake.png",
    ΔⲆⲆᐃᐃⲆᐃᐃⵠ: "img/bignight-berry.png",
    ⵠⵠΔᐃΔⲆΔ: "img/bignight-stone1.png",
    ᐃᐃΔᐃⲆΔⲆ: "img/bignight-stone2.png",
    ⵠⲆᐃᐃᐃⲆΔ: "img/bignight-gold1.png",
    ΔᐃⵠⲆⵠᐃⲆ: "img/bignight-gold2.png",
    ⵠⵠᐃⲆᐃᐃⵠ: "img/bignight-emerald1.png",
    ᐃⲆΔⲆⲆⲆΔ: "img/bignight-emerald2.png",
    ⲆΔⵠⲆⵠΔΔ: "img/bignight-amethyst.png",
    ⵠΔⵠᐃⲆᐃᐃ: "img/bignight-bear.png",
    ⲆⵠⵠΔΔⲆΔ: "img/bignight-cave.png",
    ᐃᐃΔⲆⵠⲆⲆ: "img/bignight-diamond.png",
    ᐃΔⵠⵠⲆᐃᐃ: "img/bignight-island.png",
    ⵠᐃΔⲆΔⵠΔ: "img/bignight-reidite.png",
    ⵠⵠΔⲆΔⲆΔ: "img/bignight-spider.png",
    ᐃᐃⵠᐃⵠⵠᐃ: "img/bignight-wolf.png",
    ᐃᐃⲆⵠⵠᐃΔ: "img/bignight-fir-tree.png",
    ᐃᐃⲆⲆᐃᐃᐃ: "img/bignight-fox.png",
    ⵠⵠᐃΔⵠΔΔ: "img/bignight-kraken.png",
    ΔΔⵠⵠᐃΔⵠ: "img/bignight-piranha.png",
    ᐃᐃᐃⵠⲆᐃΔ: "img/bignight-cactus.png",
    ΔⲆᐃⵠⵠⵠᐃ: "img/bignight-magma.png",
    ⵠᐃⵠᐃΔΔⵠ: "img/bigday-desert.png",
    ᐃΔⵠⲆⵠⵠΔ: "img/bigday-winter.png",
    ᐃⵠⲆⵠΔⲆΔ: "img/bigday-lava.png",
    ⲆⲆᐃⵠᐃΔⲆ: "img/bigday-forest.png",
    ⵠΔⲆᐃΔΔⵠ: "img/bignight-desert.png",
    ᐃⵠⵠΔᐃⵠᐃ: "img/bignight-winter.png",
    ᐃᐃᐃΔⵠΔⵠ: "img/bignight-lava.png",
    ΔΔΔⲆᐃⲆⵠ: "img/bignight-forest.png",
    ΔⵠΔᐃⲆⲆⵠ: "img/day-river-wave.png",
    ⲆⵠⵠⲆΔΔᐃ: "img/night-river-wave.png",
    ⵠᐃⲆⲆⵠⲆᐃ: "img/day-fog0.png",
    ⲆΔⲆⲆᐃⲆᐃ: "img/day-fog1.png",
    ΔⲆⵠⲆΔⵠΔ: "img/day-fog2.png",
    ⵠⵠΔΔⲆⲆⵠ: "img/night-fog0.png",
    ΔᐃΔⵠΔⵠⲆ: "img/night-fog1.png",
    ᐃⲆᐃᐃⵠⵠⲆ: "img/night-fog2.png",
    ⵠᐃⵠΔⵠΔΔ: "img/day-fogdesert0.png",
    ⵠΔⲆᐃⲆᐃⵠ: "img/day-fogdesert1.png",
    ΔΔᐃⵠⵠⵠⲆ: "img/day-fogdesert2.png",
    ΔᐃᐃⲆΔΔⵠ: "img/night-fogdesert0.png",
    ⵠⵠⲆᐃⲆΔⲆ: "img/night-fogdesert1.png",
    ΔⵠᐃⵠⲆΔᐃ: "img/night-fogdesert2.png",
    ᐃⵠΔΔⲆΔⵠ: "img/day-cross-server.png",
    ⲆⲆⵠᐃᐃⲆᐃ: "img/day-here-server.png",
    ΔΔΔⵠⵠⲆⲆ: "img/day-finish-server.png",
    ᐃⵠᐃⵠᐃᐃᐃ: "img/day-item-server.png",
    ᐃΔⵠᐃⲆΔᐃ: "img/day-skull-server.png",
    ᐃⵠⵠΔⵠⵠⵠ: "img/night-cross-server.png",
    ΔΔᐃⲆΔΔᐃ: "img/night-here-server.png",
    ΔⵠΔΔⵠⵠⲆ: "img/night-finish-server.png",
    ᐃⲆⲆⵠᐃΔⲆ: "img/night-item-server.png",
    ᐃⵠⵠⲆᐃⲆⲆ: "img/night-skull-server.png",
    ⵠᐃⵠᐃⵠⵠΔ: "img/day-reidite0.png",
    ⵠᐃⵠΔⵠᐃᐃ: "img/night-reidite0.png",
    ⲆᐃⵠΔΔᐃΔ: "img/day-reidite1.png",
    ⲆⵠⲆΔⵠⲆΔ: "img/night-reidite1.png",
    ΔΔᐃⵠᐃⲆⵠ: "img/day-reidite2.png",
    ΔⲆⲆⲆⲆⵠᐃ: "img/night-reidite2.png",
    ⵠⲆⲆⲆᐃⲆⵠ: "img/day-lava1.png",
    ΔⵠⵠᐃⲆⲆⵠ: "img/night-lava1.png",
    ⵠΔⵠⲆΔΔⲆ: "img/day-lava2.png",
    ᐃΔⵠⲆⵠⵠᐃ: "img/night-lava2.png",
    ⵠⲆⵠⲆΔⵠⲆ: "img/day-lava3.png",
    ⵠΔⵠΔⲆᐃⲆ: "img/night-lava3.png",
    ⲆⲆⵠᐃⵠⵠⵠ: "img/day-lava4.png",
    ⵠᐃΔᐃⵠⵠⵠ: "img/night-lava4.png",
    ⲆΔⲆⵠΔⲆΔ: "img/day-lava5.png",
    ΔⵠⲆᐃⲆⲆⵠ: "img/night-lava5.png",
    ᐃᐃΔⲆΔΔⲆ: "img/day-lava6.png",
    ⵠⵠΔⲆⵠΔᐃ: "img/night-lava6.png",
    ᐃᐃⵠⲆΔⲆⵠ: "img/day-lava-ground1.png",
    ⵠᐃⲆΔᐃΔⵠ: "img/night-lava-ground1.png",
    ᐃⵠΔΔⲆᐃⵠ: "img/day-lava-ground2.png",
    ⵠⵠΔⲆⲆΔᐃ: "img/night-lava-ground2.png",
    ⲆΔΔΔΔⲆΔ: "img/day-lava-ground3.png",
    ⵠⵠⵠⲆᐃⲆΔ: "img/night-lava-ground3.png",
    ΔⲆᐃⲆⵠⲆⵠ: "img/day-lava-ground4.png",
    ᐃⵠⵠᐃⲆΔᐃ: "img/night-lava-ground4.png",
    ᐃⵠⲆⲆⲆⲆᐃ: "img/day-lava-ground5.png",
    ᐃᐃΔᐃⵠⵠⵠ: "img/night-lava-ground5.png",
    ᐃΔᐃΔⲆⲆᐃ: "img/day-lava-ground6.png",
    ⵠᐃΔΔⲆᐃᐃ: "img/night-lava-ground6.png",
    ΔⲆᐃⵠΔΔΔ: "img/day-fire-mob.png",
    ᐃΔΔᐃⵠⵠΔ: "img/night-fire-mob.png",
    ⲆⲆᐃⵠⲆᐃΔ: "img/hurt-fire-mob.png",
    ΔⲆⵠⵠⵠᐃⲆ: "img/day-diamond-protection.png",
    ⵠΔⵠΔⲆⲆᐃ: "img/night-diamond-protection.png",
    ᐃΔᐃⵠᐃⵠⲆ: "img/day-hand-diamond-protection.png",
    ⵠᐃΔⲆᐃⲆⵠ: "img/night-hand-diamond-protection.png",
    ⲆⵠΔᐃⵠΔΔ: "img/inv-diamond-protection-out.png",
    ⵠΔⲆⲆⲆⵠᐃ: "img/inv-diamond-protection-in.png",
    ⵠⲆᐃᐃᐃΔⲆ: "img/inv-diamond-protection-click.png",
    ⵠᐃᐃΔᐃᐃᐃ: "img/day-amethyst-protection.png",
    ᐃⲆΔᐃᐃᐃⲆ: "img/night-amethyst-protection.png",
    ΔᐃᐃⵠⲆⲆⵠΔⲆ: "img/day-hand-amethyst-protection.png",
    ΔᐃᐃⲆⵠΔᐃⵠⵠ: "img/night-hand-amethyst-protection.png",
    ΔΔΔⲆⵠⵠⲆ: "img/inv-amethyst-protection-out.png",
    ⵠⵠΔΔⲆⲆⲆ: "img/inv-amethyst-protection-in.png",
    ᐃᐃᐃⵠⵠΔⵠ: "img/inv-amethyst-protection-click.png",
    ΔᐃᐃⲆΔᐃⲆ: "img/day-reidite-sword.png",
    ⵠΔⲆⲆⲆⵠⵠ: "img/night-reidite-sword.png",
    ΔᐃᐃΔⵠⵠⲆ: "img/inv-reidite-sword-out.png",
    ΔᐃⵠΔⵠΔⲆ: "img/inv-reidite-sword-in.png",
    ΔⵠΔΔΔᐃΔ: "img/inv-reidite-sword-click.png",
    ⲆⵠΔᐃΔᐃᐃ: "img/inv-reidite-out.png",
    ⲆⵠⲆⵠⵠΔᐃ: "img/inv-reidite-in.png",
    ⲆΔΔᐃΔⵠΔ: "img/inv-reidite-click.png",
    ⵠᐃⲆⲆⲆⵠⵠ: "img/inv-flame-out.png",
    ᐃΔΔᐃⵠᐃⲆ: "img/inv-flame-in.png",
    ΔⵠᐃᐃⲆΔᐃ: "img/inv-flame-click.png",
    ⵠⲆᐃⵠᐃΔⵠ: "img/day-magma-buble0.png",
    ⲆΔᐃᐃᐃⵠⲆ: "img/night-magma-buble0.png",
    ᐃⲆⲆᐃᐃⵠⲆ: "img/day-magma-buble1.png",
    ⵠᐃⲆⲆⲆⵠⲆ: "img/night-magma-buble1.png",
    ᐃⲆⵠⲆΔⵠⵠ: "img/day-magma-buble2.png",
    ⲆᐃⲆΔⵠᐃⵠ: "img/night-magma-buble2.png",
    ᐃⵠᐃⲆⲆΔΔ: "img/day-lava-dragon.png",
    ⵠΔᐃⲆⲆΔⵠ: "img/night-lava-dragon.png",
    ⵠΔⲆΔⵠᐃᐃΔⲆ: "img/day-fire-dragon.png",
    ᐃΔΔⵠΔⵠⲆΔⲆ: "img/night-fire-dragon.png",
    ΔᐃⵠⲆⵠΔⵠ: "img/hurt-lava-dragon.png",
    ⲆΔⵠΔⵠΔᐃ: "img/day-lava-wing-left.png",
    ΔΔᐃⲆᐃᐃᐃ: "img/night-lava-wing-left.png",
    ⲆᐃᐃⲆᐃⵠⲆ: "img/day-lava-wing-right.png",
    ΔⲆᐃⲆᐃⲆⵠ: "img/night-lava-wing-right.png",
    ΔᐃⲆᐃΔⵠᐃ: "img/hurt-lava-wing-left.png",
    ⵠΔΔⵠⵠⵠᐃ: "img/hurt-lava-wing-right.png",
    ⲆΔⵠⲆΔᐃⵠ: "img/day-reidite-spear.png",
    ⵠⲆᐃⲆΔⵠᐃ: "img/night-reidite-spear.png",
    ΔⵠⵠΔᐃΔᐃ: "img/inv-reidite-spear-out.png",
    ᐃⲆᐃΔⵠⵠⲆ: "img/inv-reidite-spear-in.png",
    ⵠⵠΔΔⵠⵠⲆ: "img/inv-reidite-spear-click.png",
    ⵠΔⵠᐃⲆᐃⵠ: "img/day-reidite-helmet.png",
    ⲆⵠᐃⵠΔⵠΔ: "img/night-reidite-helmet.png",
    ⵠΔⲆΔⵠⵠΔ: "img/inv-reidite-helmet-out.png",
    ᐃΔⵠᐃⲆⲆᐃ: "img/inv-reidite-helmet-in.png",
    ᐃᐃᐃΔⵠᐃᐃ: "img/inv-reidite-helmet-click.png",
    ᐃᐃⵠΔⲆᐃⲆ: "img/day-hand-reidite-protection.png",
    ⲆΔᐃⵠⲆᐃⵠ: "img/night-hand-reidite-protection.png",
    ⲆΔⵠⲆΔⲆⵠ: "img/day-reidite-protection.png",
    ΔⲆⲆⲆΔᐃⲆ: "img/night-reidite-protection.png",
    ᐃⲆᐃⲆⵠᐃΔ: "img/inv-reidite-protection-out.png",
    ᐃⲆΔΔΔⵠΔ: "img/inv-reidite-protection-in.png",
    ⲆⵠⵠⲆⵠΔⲆ: "img/inv-reidite-protection-click.png",
    ⵠᐃⲆᐃⵠⲆⲆ: "img/day-lava-dragon-sword.png",
    ᐃᐃⵠΔΔΔΔ: "img/night-lava-dragon-sword.png",
    ΔⲆⲆΔⲆΔⵠ: "img/inv-lava-dragon-sword-out.png",
    ᐃⲆᐃⵠⲆⵠᐃ: "img/inv-lava-dragon-sword-in.png",
    ΔΔᐃΔᐃⲆᐃ: "img/inv-lava-dragon-sword-click.png",
    ᐃΔⵠΔⲆᐃⵠ: "img/day-lava-spear.png",
    ΔⵠΔΔⲆⵠᐃ: "img/night-lava-spear.png",
    ΔΔᐃⵠΔⵠⵠ: "img/inv-lava-spear-out.png",
    ⵠᐃΔⵠΔΔᐃ: "img/inv-lava-spear-in.png",
    ΔⵠⵠᐃⲆⲆΔ: "img/inv-lava-spear-click.png",
    ΔⲆΔⵠΔⵠᐃ: "img/day-lava-helmet.png",
    ⲆⵠΔⵠⲆⲆᐃ: "img/night-lava-helmet.png",
    ⵠⲆⲆⲆᐃᐃⵠ: "img/inv-lava-helmet-out.png",
    ΔᐃⲆⲆΔᐃΔ: "img/inv-lava-helmet-in.png",
    ᐃⲆⵠⵠΔᐃΔ: "img/inv-lava-helmet-click.png",
    ᐃΔⵠΔᐃⵠⵠ: "img/day-witch-hat.png",
    ΔⵠᐃΔᐃΔΔ: "img/night-witch-hat.png",
    ⵠᐃΔⵠᐃⵠΔ: "img/inv-witch-hat-out.png",
    ⵠⵠᐃⲆΔᐃⵠ: "img/inv-witch-hat-in.png",
    Δⵠⵠⵠⵠⵠⵠ: "img/inv-witch-hat-click.png",
    ⵠᐃΔᐃⵠⲆⲆ: "img/day-nimbus2000.png",
    ⵠΔΔⲆⵠΔΔ: "img/night-nimbus2000.png",
    ⵠⵠᐃᐃᐃᐃΔ: "img/inv-nimbus2000-out.png",
    ⲆᐃⵠⵠᐃⲆᐃ: "img/inv-nimbus2000-in.png",
    ᐃᐃᐃⲆⵠⲆΔ: "img/inv-nimbus2000-click.png",
    ⲆΔⲆΔΔᐃⵠ: "img/day-accessory1-pacques.png",
    ⵠᐃⲆΔⵠᐃΔ: "img/night-accessory1-pacques.png",
    ⲆᐃⵠᐃⵠⲆᐃ: "img/day-accessory2-pacques.png",
    ᐃⵠᐃᐃⵠᐃᐃ: "img/night-accessory2-pacques.png",
    ΔᐃΔⵠᐃΔᐃ: "img/day-accessory3-pacques.png",
    ᐃⵠⵠⵠⲆΔⲆ: "img/night-accessory3-pacques.png",
    ᐃΔΔⵠΔᐃⵠ: "img/day-accessory5-pacques.png",
    ⵠⵠⲆΔᐃᐃⵠ: "img/night-accessory5-pacques.png",
    ΔⲆⵠᐃᐃⲆΔ: "img/day-accessory6-pacques.png",
    ΔⲆⲆⲆⲆᐃⲆ: "img/night-accessory6-pacques.png",
    ⵠᐃᐃᐃⵠⲆᐃ: "img/day-accessory7-pacques.png",
    ΔⵠⵠΔᐃⵠⵠ: "img/night-accessory7-pacques.png",
    ΔⵠⲆⲆⵠⵠΔ: "img/day-accessory8-pacques.png",
    ΔᐃⲆΔΔᐃⲆ: "img/night-accessory8-pacques.png",
    ᐃᐃⲆΔΔⲆᐃ: "img/day-bag-pacques.png",
    ΔᐃⲆⵠΔⵠᐃ: "img/night-bag-pacques.png",
    ᐃⵠΔⵠΔⲆⵠ: "img/day-carrot.png",
    ᐃⲆΔΔⲆᐃᐃ: "img/night-carrot.png",
    ᐃᐃΔΔΔⵠᐃ: "img/day-carrot-dried.png",
    ΔⲆᐃⵠⵠⵠⵠ: "img/night-carrot-dried.png",
    ᐃⵠⵠᐃⲆΔΔ: "img/day-tomato-herb.png",
    ΔᐃⵠΔΔᐃⵠ: "img/night-tomato-herb.png",
    ᐃⵠⵠⲆᐃᐃΔ: "img/day-tomato-herb-dried.png",
    ⵠΔⲆΔΔⵠⲆ: "img/night-tomato-herb-dried.png",
    ᐃΔᐃΔΔΔⵠ: "img/day-tomato.png",
    ⲆΔΔΔⲆᐃᐃ: "img/night-tomato.png",
    ⵠᐃΔᐃΔΔᐃ: "img/inv-carrot-out.png",
    ᐃⵠᐃⲆΔⲆⲆ: "img/inv-carrot-in.png",
    ⵠⵠⵠⵠⲆⲆᐃ: "img/inv-carrot-click.png",
    ⲆⲆΔᐃΔᐃᐃ: "img/inv-tomato-out.png",
    ⵠⲆⵠⲆⵠᐃᐃ: "img/inv-tomato-in.png",
    ⵠΔᐃⲆⵠⲆΔ: "img/inv-tomato-click.png",
    ᐃᐃⵠⲆᐃⵠⵠ: "img/day-player0.png",
    ⲆⲆⲆⵠⵠΔΔ: "img/night-player0.png",
    ΔⲆΔⲆᐃΔᐃ: "img/day-player1.png",
    ᐃⲆⵠⵠΔⵠⲆ: "img/night-player1.png",
    ⲆⲆⲆⵠⲆⵠΔ: "img/day-player2.png",
    ⵠⵠⵠⵠΔΔᐃ: "img/night-player22.png",
    ⵠⲆᐃⲆⵠΔᐃ: "img/day-player3.png",
    ΔⵠᐃⲆⵠⲆⲆ: "img/night-player33.png",
    ΔⵠⲆⲆΔΔⲆ: "img/day-player4.png",
    ⲆᐃⲆΔⲆⵠΔ: "img/night-player4.png",
    Ⲇⵠᐃᐃᐃⵠᐃ: "img/day-player5.png",
    ΔⲆᐃⵠⵠᐃᐃ: "img/night-player5.png",
    ᐃⵠⲆΔΔⲆⵠ: "img/day-player6.png",
    ⲆⲆⲆⲆΔΔᐃ: "img/night-player6.png",
    ᐃⵠⵠⵠΔΔᐃ: "img/day-player7.png",
    ⲆⵠΔΔᐃΔᐃ: "img/night-player7.png",
    ΔᐃΔᐃᐃⵠΔ: "img/day-player8.png",
    ΔⵠⲆⵠΔⵠᐃ: "img/night-player8.png",
    ⲆⵠΔⲆᐃΔⵠ: "img/day-player9.png",
    ⲆⲆᐃΔⵠΔᐃ: "img/night-player9.png",
    ⲆᐃᐃⵠⲆΔⲆ: "img/day-player10.png",
    ⵠⵠᐃⵠⲆⵠΔ: "img/night-player10.png",
    ⲆⵠᐃΔⲆⵠⲆ: "img/day-player11.png",
    ᐃᐃⵠⵠΔΔⵠ: "img/night-player11.png",
    ⵠᐃᐃⵠⵠⲆΔ: "img/day-player12.png",
    ΔᐃⲆᐃΔⲆⲆ: "img/night-player12.png",
    ⲆⲆΔΔⲆΔΔ: "img/day-player13.png",
    ΔᐃⵠⲆⵠⲆⲆ: "img/night-player13.png",
    ⵠⲆΔᐃⲆⲆⵠ: "img/day-player14.png",
    ⲆⵠΔⵠΔⵠⵠ: "img/night-player14.png",
    ⲆΔᐃⵠᐃΔΔ: "img/day-player15.png",
    ⵠⵠΔⲆΔⲆⵠ: "img/night-player15.png",
    ⵠⵠᐃᐃΔⲆΔ: "img/day-player16.png",
    ⵠⲆᐃⲆⵠᐃⵠ: "img/night-player16.png",
    ΔⲆⵠᐃΔΔᐃ: "img/day-player17.png",
    ⵠⵠⲆⵠⲆᐃΔ: "img/night-player17.png",
    ᐃΔⲆᐃΔᐃⵠ: "img/day-player18.png",
    ΔᐃⵠΔΔᐃⲆ: "img/night-player18.png",
    ⵠⵠⲆΔⵠᐃᐃ: "img/day-player19.png",
    ⲆⲆᐃⲆᐃⲆΔ: "img/night-player19.png",
    ΔᐃᐃΔⲆΔⲆ: "img/day-hand-player0.png",
    ⵠᐃᐃⵠⵠⵠᐃ: "img/night-hand-player0.png",
    ⵠⲆⵠᐃⲆⵠⲆ: "img/day-hand-player1.png",
    ⲆⲆΔᐃⵠⲆᐃ: "img/night-hand-player1.png",
    ᐃⵠⵠᐃΔⲆⵠ: "img/day-hand-player2.png",
    ⵠΔᐃⲆᐃᐃⲆ: "img/night-hand-player22.png",
    ᐃⵠᐃΔⵠⲆⵠ: "img/day-hand-player3.png",
    ΔⲆⲆⲆᐃΔᐃ: "img/night-hand-player33.png",
    ΔⲆΔΔⲆⵠⲆ: "img/day-hand-player4.png",
    ΔⲆᐃΔⵠⲆⵠ: "img/night-hand-player4.png",
    ΔⵠⵠᐃΔⲆᐃ: "img/day-hand-player5.png",
    ᐃⲆΔⵠᐃᐃΔ: "img/night-hand-player5.png",
    ⵠᐃᐃⵠⲆⲆᐃ: "img/day-hand-player6.png",
    ⲆΔⵠΔⵠⲆⲆ: "img/night-hand-player6.png",
    ⵠᐃⵠⵠΔⵠⵠ: "img/day-hand-player7.png",
    ⵠⲆΔⵠⵠⵠⲆ: "img/night-hand-player7.png",
    ⲆΔⲆⲆⵠⲆⵠ: "img/day-hand-player8.png",
    ⲆΔᐃΔᐃⵠᐃ: "img/night-hand-player8.png",
    ΔⵠᐃᐃⲆΔΔ: "img/day-hand-player9.png",
    ⲆΔⲆⲆΔΔⵠ: "img/night-hand-player9.png",
    ΔΔⵠΔΔⲆⲆ: "img/day-hand-player10.png",
    ⵠⲆΔᐃⲆΔᐃ: "img/night-hand-player10.png",
    ⲆⵠⲆᐃⲆⲆⵠ: "img/day-hand-player11.png",
    ΔΔᐃⵠΔᐃⲆ: "img/night-hand-player11.png",
    ᐃᐃΔⲆΔᐃᐃ: "img/day-hand-player12.png",
    ⲆΔⵠᐃⵠⵠᐃ: "img/night-hand-player12.png",
    ⵠΔᐃᐃⲆΔΔ: "img/day-hand-player13.png",
    ΔⵠⵠⲆⵠⵠⲆ: "img/night-hand-player13.png",
    ΔⲆΔⵠⲆΔⵠ: "img/day-hand-player14.png",
    ⵠᐃⲆⵠⲆⲆⵠ: "img/night-hand-player14.png",
    ⲆΔⵠⲆΔⲆⲆ: "img/day-hand-player15.png",
    ᐃⲆΔⵠΔⲆⲆ: "img/night-hand-player15.png",
    ⲆⲆⵠΔⲆΔⲆ: "img/day-hand-player16.png",
    ΔⲆΔΔᐃΔᐃ: "img/night-hand-player16.png",
    ΔⵠᐃΔⵠΔᐃ: "img/day-hand-player17.png",
    ΔⲆⲆⵠⲆⲆⲆ: "img/night-hand-player17.png",
    ⵠⵠⲆⲆⲆⲆΔ: "img/day-hand-player18.png",
    ⵠΔⲆΔΔᐃᐃ: "img/night-hand-player18.png",
    ΔΔⲆᐃΔΔⵠ: "img/day-hand-player19.png",
    ΔΔⵠⵠⵠᐃⲆ: "img/night-hand-player19.png",
    ᐃⵠⵠᐃΔᐃⲆ: "img/day-accessory4.png",
    ⲆᐃⲆⲆⲆⲆΔ: "img/night-accessory4.png",
    ΔᐃⵠΔⵠᐃⲆ: "img/day-accessory9.png",
    ᐃⵠΔΔΔΔᐃ: "img/night-accessory9.png",
    ⵠᐃⲆᐃⵠᐃΔ: "img/day-accessory10.png",
    ΔⲆΔᐃⵠᐃᐃ: "img/night-accessory10.png",
    ⵠⵠⲆᐃⲆⲆᐃ: "img/day-accessory11.png",
    ΔΔΔⵠⲆⲆᐃ: "img/night-accessory11.png",
    ΔⲆⲆⵠᐃⲆⵠ: "img/day-accessory12.png",
    ⲆⲆⲆⲆᐃΔⲆ: "img/night-accessory12.png",
    ᐃⵠⲆⵠᐃΔᐃ: "img/day-bag.png",
    ⲆⵠⵠΔⲆⲆΔ: "img/night-bag.png",
    ⲆⲆⲆᐃⵠᐃΔ: "img/inv-bag-out.png",
    ᐃᐃⲆⲆᐃᐃΔ: "img/inv-bag-in.png",
    ⲆⵠΔᐃⵠᐃΔ: "img/inv-bag-click.png",
    ᐃᐃⲆᐃⲆⲆⲆ: "img/day-pitchfork.png",
    ΔⲆΔⵠⲆᐃⲆ: "img/night-pitchfork.png",
    ⲆⲆⲆⵠᐃΔᐃ: "img/inv-pitchfork-out.png",
    ΔΔⵠΔᐃⵠΔ: "img/inv-pitchfork-in.png",
    ⵠᐃᐃⵠⵠⵠΔ: "img/inv-pitchfork-click.png",
    ⲆⲆⵠΔⵠⲆᐃ: "img/inv-wood-spike-door-out.png",
    ⵠΔⲆⲆⵠⲆΔ: "img/inv-wood-spike-door-in.png",
    ᐃᐃⵠᐃᐃⵠᐃ: "img/inv-wood-spike-door-click.png",
    ⲆⵠᐃⵠⵠΔᐃ: "img/inv-stone-spike-door-out.png",
    ⲆΔⵠⲆΔΔⵠ: "img/inv-stone-spike-door-in.png",
    ᐃⵠⲆⵠΔⵠⵠ: "img/inv-stone-spike-door-click.png",
    ⲆΔⵠⵠⵠⵠⲆ: "img/inv-gold-spike-door-out.png",
    ⲆⲆΔΔⵠⵠᐃ: "img/inv-gold-spike-door-in.png",
    ⵠⵠΔᐃⵠᐃⵠ: "img/inv-gold-spike-door-click.png",
    ⵠᐃΔᐃⵠⵠᐃ: "img/inv-diamond-spike-door-out.png",
    ⲆⵠᐃΔⵠⵠΔ: "img/inv-diamond-spike-door-in.png",
    ΔⲆᐃᐃΔⵠⵠ: "img/inv-diamond-spike-door-click.png",
    ⲆᐃᐃⲆⵠⵠⲆ: "img/inv-amethyst-spike-door-out.png",
    ⵠᐃᐃᐃⵠᐃⵠ: "img/inv-amethyst-spike-door-in.png",
    ΔᐃΔⵠΔⲆᐃ: "img/inv-amethyst-spike-door-click.png",
    ΔΔⵠⵠΔᐃᐃ: "img/day-wood-spike-door.png",
    ⲆᐃΔᐃΔΔΔ: "img/night-wood-spike-door.png",
    ⲆΔᐃᐃⲆⵠΔ: "img/day-stone-spike-door.png",
    ⲆΔⵠΔⵠⲆΔ: "img/night-stone-spike-door.png",
    ⲆⲆⵠⲆⵠⲆⵠ: "img/day-gold-spike-door.png",
    ΔᐃⵠⲆΔᐃᐃ: "img/night-gold-spike-door.png",
    ⵠΔᐃⲆⵠᐃⵠ: "img/day-diamond-spike-door.png",
    ⲆᐃⲆΔᐃΔⵠ: "img/night-diamond-spike-door.png",
    ᐃᐃⲆⵠᐃᐃΔ: "img/day-amethyst-spike-door.png",
    ⲆΔΔⲆⲆΔᐃ: "img/night-amethyst-spike-door.png",
    ⵠᐃⵠⵠⲆᐃⵠ: "img/inv-reidite-spike-door-out.png",
    ⲆΔⵠΔΔᐃⵠ: "img/inv-reidite-spike-door-in.png",
    ΔⵠΔΔⲆⲆᐃ: "img/inv-reidite-spike-door-click.png",
    ᐃΔᐃⵠⲆⲆⵠ: "img/inv-reidite-door-out.png",
    ᐃⵠᐃⲆⲆⵠᐃ: "img/inv-reidite-door-in.png",
    ⵠᐃᐃⵠᐃⵠΔ: "img/inv-reidite-door-click.png",
    ᐃΔΔᐃⵠⵠᐃ: "img/inv-reidite-spike-out.png",
    ⵠⵠⲆⵠΔⲆΔ: "img/inv-reidite-spike-in.png",
    ᐃⵠᐃΔⲆΔᐃ: "img/inv-reidite-spike-click.png",
    ⵠⲆⲆΔⲆⲆᐃ: "img/inv-reidite-wall-out.png",
    ⵠⲆΔΔⵠⲆⵠ: "img/inv-reidite-wall-in.png",
    ΔⲆᐃᐃⵠⵠⲆ: "img/inv-reidite-wall-click.png",
    ΔⵠᐃⵠⲆᐃⵠ: "img/day-reidite-wall.png",
    ΔⵠᐃᐃᐃΔᐃ: "img/night-reidite-wall.png",
    ᐃΔⵠΔΔⲆⲆ: "img/day-reidite-door.png",
    ᐃᐃⵠΔⲆᐃⵠ: "img/night-reidite-door.png",
    ᐃΔⵠᐃⵠⲆᐃ: "img/day-reidite-spike.png",
    ⵠᐃΔΔⲆⵠⵠ: "img/night-reidite-spike.png",
    ΔΔᐃΔΔⲆⲆ: "img/day-reidite-spike-door.png",
    ΔⲆᐃᐃΔⲆᐃ: "img/night-reidite-spike-door.png",
    ⵠⲆΔᐃΔⵠᐃ: "img/inv-reidite-pickaxe-out.png",
    ⲆᐃⲆⲆᐃᐃⵠ: "img/inv-reidite-pickaxe-in.png",
    ⵠⵠⵠⲆⵠⵠᐃ: "img/inv-reidite-pickaxe-click.png",
    ΔΔⵠΔⵠⲆᐃ: "img/day-reidite-pickaxe.png",
    ⵠⲆⵠⵠΔⲆᐃ: "img/night-reidite-pickaxe.png",
    ΔⵠΔⲆᐃⵠⵠ: "img/inv-reidite-hammer-out.png",
    ᐃⵠᐃⵠⵠⵠᐃ: "img/inv-reidite-hammer-in.png",
    ΔΔⵠⲆⲆᐃⲆ: "img/inv-reidite-hammer-click.png",
    ⲆᐃΔⵠⵠⲆⲆ: "img/day-reidite-hammer.png",
    ᐃᐃΔⵠΔⵠΔ: "img/night-reidite-hammer.png",
    ⲆⵠⵠΔΔᐃΔ: "img/day-watermelon1.png",
    ᐃⲆⵠⲆⵠΔⲆ: "img/night-watermelon1.png",
    ⲆⵠⵠᐃⵠⲆΔ: "img/day-watermelon-dried1.png",
    ⲆⵠΔΔᐃⵠⵠ: "img/night-watermelon-dried1.png",
    ΔⵠⵠⲆᐃⵠᐃ: "img/inv-watermelon-out.png",
    ᐃⵠΔᐃⲆⲆⵠ: "img/inv-watermelon-in.png",
    ᐃⵠⵠᐃᐃᐃᐃ: "img/inv-watermelon-click.png",
    ⲆᐃⵠΔⵠⵠΔ: "img/day-boat.png",
    ᐃᐃⲆΔⵠΔᐃ: "img/night-boat.png",
    ⲆⲆΔᐃⲆᐃⵠ: "img/day-boat-wave.png",
    ΔᐃⵠⵠᐃⵠΔ: "img/night-boat-wave.png",
    ᐃᐃⲆⲆⲆⵠΔ: "img/inv-boat-out.png",
    ⵠⵠⲆΔⲆⲆⵠ: "img/inv-boat-in.png",
    ⵠⵠᐃᐃΔᐃⲆ: "img/inv-boat-click.png",
    ᐃⲆᐃⲆᐃΔΔ: "img/day-plane.png",
    ΔⵠⵠⲆⲆⵠⲆ: "img/night-plane.png",
    ᐃΔΔᐃᐃⲆΔ: "img/inv-plane-out.png",
    ⲆΔΔΔⵠⲆΔ: "img/inv-plane-in.png",
    ⲆΔⵠᐃΔΔⵠ: "img/inv-plane-click.png",
    ⲆⲆΔⵠΔⲆᐃ: "img/day-sled.png",
    ⵠⵠᐃⵠⵠⲆⲆ: "img/night-sled.png",
    ⲆⵠᐃᐃΔⵠⲆ: "img/day-sled-wave.png",
    ᐃⵠⵠⵠⵠΔⲆ: "img/night-sled-wave.png",
    ⲆᐃⵠᐃⲆᐃⲆ: "img/inv-sled-out.png",
    ΔᐃᐃⵠⲆⲆᐃ: "img/inv-sled-in.png",
    ⵠⵠⲆⲆᐃⲆΔ: "img/inv-sled-click.png",
    ᐃᐃΔᐃΔΔᐃ: "img/day-pirate-hat.png",
    ᐃᐃⲆⲆⲆⵠⲆ: "img/night-pirate-hat.png",
    ⲆⲆΔⲆᐃⲆⲆ: "img/inv-pirate-hat-out.png",
    ᐃᐃⵠⲆᐃⲆⵠ: "img/inv-pirate-hat-in.png",
    ᐃᐃⲆⵠⲆⲆᐃ: "img/inv-pirate-hat-click.png",
    ᐃΔⵠΔᐃᐃⲆ: "img/day-penguin.png",
    ΔΔᐃⲆⵠᐃⲆ: "img/night-penguin.png",
    ⲆⵠⲆΔⵠⲆᐃ: "img/hurt-penguin.png",
    ⲆᐃΔⲆᐃ: "img/inv-penguin-feather-click.png",
    ᐃⲆⵠⵠⵠ: "img/inv-hawk-feather-click.png",
    ᐃᐃΔⲆⲆΔⵠ: "img/day-boar1.png",
    ⵠᐃΔΔⵠⵠΔ: "img/day-boar1-tamed.png",
    ΔⲆⵠⵠⲆᐃⵠ: "img/day-boar1-angry.png",
    ΔⵠⲆΔΔΔⵠ: "img/night-boar1.png",
    ⵠΔΔᐃᐃⲆⲆ: "img/night-boar1-tamed.png",
    ᐃⵠⲆⵠⵠΔⲆ: "img/night-boar1-angry.png",
    ΔᐃᐃⲆⵠⵠᐃ: "img/inv-mount-boar-out.png",
    ΔΔΔⵠⵠΔᐃ: "img/inv-mount-boar-in.png",
    ΔⵠⲆᐃᐃᐃᐃ: "img/inv-mount-boar-click.png",
    ⲆⲆΔⵠΔⵠΔ: "img/day-hurt-boar1.png",
    ⵠΔⲆᐃᐃⵠᐃ: "img/boar1-step.png",
    Δⵠᐃᐃᐃᐃᐃ: "img/day-saddle1.png",
    ⲆᐃⲆΔᐃⵠᐃ: "img/night-saddle1.png",
    ⲆⲆΔⲆⵠⵠⵠ: "img/inv-saddle-out.png",
    ⵠⲆⵠΔΔΔⵠ: "img/inv-saddle-in.png",
    ᐃⲆᐃᐃᐃⲆⲆ: "img/inv-saddle-click.png",
    ΔΔⲆᐃⵠᐃⲆ: "img/day-magic-wand0.png",
    ⵠⵠᐃⵠΔⵠᐃ: "img/night-magic-wand0.png",
    ⲆΔⲆⵠⵠᐃΔ: "img/day-light-wand1.png",
    ᐃⵠΔΔᐃⲆⲆ: "img/night-light-wand1.png",
    ⲆⵠΔⵠᐃᐃᐃ: "img/inv-magic-wand0-out.png",
    ⲆⲆⵠⵠⵠⲆⵠ: "img/inv-magic-wand0-in.png",
    ⲆᐃΔᐃⵠⲆⲆ: "img/inv-magic-wand0-click.png",
    ⵠⵠⲆᐃᐃⵠΔ: "img/day-magic-wand1.png",
    ΔΔⲆᐃᐃΔⵠ: "img/night-magic-wand1.png",
    ⵠⵠⵠⵠⵠⵠΔ: "img/day-light-wand0.png",
    ΔⵠⵠⲆᐃⵠⲆ: "img/night-light-wand0.png",
    ΔⵠⵠⵠⵠΔᐃ: "img/inv-magic-wand1-out.png",
    ⵠᐃⵠⵠⲆᐃΔ: "img/inv-magic-wand1-in.png",
    ⲆΔᐃⲆⵠΔⲆ: "img/inv-magic-wand1-click.png",
    ⲆⵠΔᐃⲆᐃⵠ: "img/day-firefly.png",
    ΔⵠΔᐃⲆⲆΔ: "img/night-firefly.png",
    ΔΔⵠᐃⵠΔⵠ: "img/hurt-firefly.png",
    ⲆΔΔⵠᐃⲆⲆ: "img/inv-firefly-out.png",
    ⵠᐃⵠᐃΔΔΔ: "img/inv-firefly-in.png",
    ᐃⵠΔᐃΔⲆΔ: "img/inv-firefly-click.png",
    ᐃΔΔᐃᐃᐃΔ: "img/day-baby-dragon.png",
    ᐃᐃΔⵠⲆᐃⲆ: "img/night-baby-dragon.png",
    ⲆⵠΔⲆᐃᐃᐃ: "img/day-baby-dragon-angry.png",
    ⲆⵠⲆⵠᐃᐃⲆ: "img/night-baby-dragon-angry.png",
    ⲆᐃⵠᐃⵠΔᐃ: "img/day-baby-dragon-tamed.png",
    ΔⲆᐃⲆΔⲆⵠ: "img/night-baby-dragon-tamed.png",
    ⲆΔΔΔᐃⵠⵠ: "img/day-wing-dragon-left-angry.png",
    ᐃΔⵠΔΔᐃΔ: "img/night-dragon-wing-left-angry.png",
    ⵠⵠᐃΔⲆⲆᐃ: "img/day-wing-dragon-right-angry.png",
    ᐃⲆΔᐃΔΔᐃ: "img/night-dragon-wing-right-angry.png",
    ⲆΔΔΔⵠⵠΔ: "img/day-wing-dragon-left-tamed.png",
    ⵠᐃΔΔΔⵠⲆ: "img/night-dragon-wing-left-tamed.png",
    ⵠΔⵠᐃⲆΔΔ: "img/day-wing-dragon-right-tamed.png",
    ᐃᐃⲆⲆΔⲆⵠ: "img/night-wing-dragon-right-tamed.png",
    ⲆⵠᐃⲆᐃⲆΔ: "img/day-wing-dragon-left.png",
    ⵠⵠⵠΔⵠᐃᐃ: "img/night-dragon-wing-left.png",
    ⵠⲆⲆᐃⵠᐃⵠ: "img/day-wing-dragon-right.png",
    ⲆΔⵠΔΔΔⵠ: "img/night-wing-dragon-right.png",
    ⵠⵠΔᐃⲆᐃⲆ: "img/hurt-baby-dragon.png",
    Δⵠⵠⵠᐃⵠⵠ: "img/hurt-baby-dragon-wing-left.png",
    ᐃⲆⵠⲆⵠᐃⲆ: "img/hurt-baby-dragon-wing-right.png",
    ᐃΔᐃⲆΔᐃⵠ: "img/inv-baby-dragon-out.png",
    ᐃΔᐃᐃⲆᐃⲆ: "img/inv-baby-dragon-in.png",
    ᐃⲆᐃΔⲆᐃΔ: "img/inv-baby-dragon-click.png",
    ᐃΔⵠⲆⲆᐃᐃ: "img/day-baby-lava.png",
    ⲆⲆⲆⲆⵠⲆᐃ: "img/night-baby-lava.png",
    ⵠΔᐃⵠΔⲆΔ: "img/day-baby-lava-angry.png",
    ⲆⵠΔⵠⵠᐃⲆ: "img/night-baby-lava-angry.png",
    ⲆⲆΔᐃᐃᐃᐃ: "img/day-baby-lava-tamed.png",
    ᐃⲆⵠⵠⲆᐃⵠ: "img/night-baby-lava-tamed.png",
    ⲆᐃᐃⵠᐃⵠΔ: "img/day-wing-lava-left-angry.png",
    ΔᐃⲆⲆⲆᐃⲆ: "img/night-wing-lava-left-angry.png",
    ⵠΔΔⵠⵠΔΔ: "img/day-wing-lava-right-angry.png",
    ⲆΔΔᐃⵠΔᐃ: "img/night-wing-lava-right-angry.png",
    ᐃΔⲆᐃⵠΔᐃ: "img/day-wing-lava-left-tamed.png",
    ΔᐃᐃⲆⵠᐃΔ: "img/night-wing-lava-left-tamed.png",
    ⲆΔᐃⲆΔΔⲆ: "img/day-wing-lava-right-tamed.png",
    ᐃⲆΔⲆⵠⵠⲆ: "img/night-wing-lava-right-tamed.png",
    ΔΔⵠⵠⵠⲆⵠ: "img/day-wing-lava-left.png",
    ΔⲆⵠᐃⲆⵠᐃ: "img/night-wing-lava-left.png",
    ᐃᐃⵠΔΔᐃⲆ: "img/day-wing-lava-right.png",
    ΔᐃΔⲆᐃᐃΔ: "img/night-wing-lava-right.png",
    ᐃΔᐃΔⲆᐃⵠ: "img/hurt-baby-lava.png",
    ⲆΔⲆⲆⵠⵠⲆ: "img/hurt-baby-lava-wing-left.png",
    ⲆᐃᐃᐃⲆⵠⵠ: "img/hurt-baby-lava-wing-right.png",
    ⲆⲆⲆⵠΔᐃⲆ: "img/inv-baby-lava-out.png",
    ᐃⵠᐃΔⲆᐃⲆ: "img/inv-baby-lava-in.png",
    ⵠΔⵠⲆΔⵠⵠ: "img/inv-baby-lava-click.png",
    ⵠⵠᐃⵠⲆⲆⵠ: "img/day-falcon.png",
    ΔⵠⵠᐃΔΔᐃ: "img/night-falcon.png",
    ᐃⵠΔⲆⲆⵠⵠ: "img/day-falcon-angry.png",
    ⲆᐃⵠⵠⵠⵠΔ: "img/night-falcon-angry.png",
    ΔⵠᐃⲆⲆΔⲆ: "img/day-falcon-ground.png",
    ᐃⲆΔⲆᐃⵠⵠ: "img/night-falcon-ground.png",
    ᐃⵠᐃΔᐃᐃⵠ: "img/day-falcon-ground-angry.png",
    ⲆΔⲆⵠⵠⲆΔ: "img/night-falcon-ground-angry.png",
    ᐃⲆΔΔΔⲆⲆ: "img/day-falcon-wings-left.png",
    ΔⵠⲆⵠⵠⵠΔ: "img/night-falcon-wings-left.png",
    ΔᐃᐃᐃΔⵠΔ: "img/day-falcon-wings-right.png",
    ΔⲆⲆⲆⵠⲆⵠ: "img/night-falcon-wings-right.png",
    ᐃᐃⵠⵠⲆᐃⲆ: "img/day-falcon-angry-wings-left.png",
    ⵠΔⲆΔᐃⵠⵠ: "img/night-falcon-angry-wings-left.png",
    ⲆⵠⲆᐃΔᐃⵠ: "img/day-falcon-angry-wings-right.png",
    ⲆⲆⲆⵠᐃⲆΔ: "img/night-falcon-angry-wings-right.png",
    ᐃΔⲆᐃᐃᐃΔ: "img/day-falcon-wings-left-tamed.png",
    ΔⵠⵠⵠᐃΔⲆ: "img/night-falcon-wings-left-tamed.png",
    ⲆᐃΔᐃᐃᐃᐃ: "img/day-falcon-wings-right-tamed.png",
    ᐃΔⵠᐃΔⲆⲆ: "img/night-falcon-wings-right-tamed.png",
    ⵠⲆⲆⵠᐃⵠⲆ: "img/day-falcon-tamed.png",
    ᐃΔⵠⲆⲆⵠⵠ: "img/night-falcon-tamed.png",
    ΔᐃⵠΔⲆᐃⲆ: "img/hurt-falcon-ground.png",
    ᐃⵠⲆΔⵠⲆΔ: "img/hurt-falcon.png",
    ⲆⵠⵠⵠᐃΔΔ: "img/hurt-falcon-wings-left.png",
    ΔⵠΔⲆᐃᐃΔ: "img/hurt-falcon-wings-right.png",
    ⵠⵠⵠⵠΔᐃΔ: "img/inv-falcon-out.png",
    ΔΔᐃⵠⲆΔᐃ: "img/inv-falcon-in.png",
    ⲆⲆᐃΔⵠⵠΔ: "img/inv-falcon-click.png",
    ᐃᐃⵠⵠⲆᐃΔ: "img/day-crab-boss.png",
    ΔΔⲆⲆΔⲆⲆ: "img/night-crab-boss.png",
    ⵠΔᐃΔΔᐃⵠ: "img/day-crab-boss-angry.png",
    ᐃⲆᐃΔⲆΔⵠ: "img/night-crab-boss-angry.png",
    ⵠΔΔΔⲆⵠΔ: "img/day-crab-boss-tamed.png",
    ᐃⲆⵠΔⲆⲆⲆ: "img/night-crab-boss-tamed.png",
    ⲆⵠΔⲆΔᐃᐃ: "img/day-crab-boss-claw-left-attack.png",
    ΔᐃᐃᐃΔΔⵠ: "img/night-crab-boss-claw-left-attack.png",
    ⲆⲆⲆⲆⵠΔΔ: "img/day-crab-boss-claw-right-attack.png",
    ⵠΔⲆⲆⲆⵠΔ: "img/night-crab-boss-claw-right-attack.png",
    ᐃⵠⵠⵠΔΔⲆΔᐃ: "img/day-crab-boss-claw-left-tamed.png",
    ⵠⵠⲆᐃⵠⵠⵠⵠⲆ: "img/night-crab-boss-claw-left-tamed.png",
    ᐃⲆⲆΔᐃⵠⲆⵠᐃ: "img/day-crab-boss-claw-right-tamed.png",
    ΔᐃᐃΔᐃⵠⲆᐃⵠ: "img/night-crab-boss-claw-right-tamed.png",
    ⲆⵠⲆᐃⲆΔⵠ: "img/day-crab-boss-claw-left.png",
    ΔΔᐃΔⲆⵠΔ: "img/night-crab-boss-claw-left.png",
    ΔΔᐃⲆⲆⵠⲆ: "img/day-crab-boss-claw-right.png",
    ⵠⲆᐃΔΔᐃⲆ: "img/night-crab-boss-claw-right.png",
    ⵠᐃⲆⵠⲆΔⵠ: "img/hurt-crab-boss.png",
    ΔᐃⲆΔⲆⵠΔ: "img/hurt-crab-boss-claw-left.png",
    ⵠⲆΔΔⵠⲆᐃ: "img/hurt-crab-boss-claw-right.png",
    ⵠΔᐃΔⲆⵠⲆ: "img/heal-crab-boss.png",
    ᐃΔⵠᐃⵠᐃⵠ: "img/heal-crab-boss-claw-left.png",
    ᐃⲆᐃΔⲆⵠΔ: "img/heal-crab-boss-claw-right.png",
    ᐃⲆΔⲆⲆΔⵠ: "img/crab-step.png",
    ⵠⲆⵠⲆΔⲆⲆ: "img/inv-crab-boss-out.png",
    ⵠᐃᐃⲆⲆⲆⵠ: "img/inv-crab-boss-in.png",
    ΔΔᐃᐃⲆⵠⵠ: "img/inv-crab-boss-click.png",
    ΔⵠⲆΔⵠⵠⵠ: "img/day-cactus10.png",
    ΔᐃᐃⲆⵠΔⲆ: "img/night-cactus10.png",
    ᐃⲆⵠⵠᐃⲆⲆ: "img/inv-cactus-out.png",
    ⲆⵠΔᐃⲆⵠⵠ: "img/inv-cactus-in.png",
    ⲆⵠⵠⲆⵠΔⵠ: "img/inv-cactus-click.png",
    ⲆⲆⵠᐃᐃᐃΔ: "img/day-scorpion.png",
    ⲆⲆⵠⵠΔⲆΔ: "img/night-scorpion.png",
    ⵠⲆᐃⵠᐃᐃⲆ: "img/day-scorpion-hand-left.png",
    ⲆᐃⲆᐃⲆⲆⲆ: "img/night-scorpion-hand-left.png",
    ΔⵠΔᐃⲆΔⲆ: "img/day-scorpion-hand-right.png",
    ᐃᐃⲆᐃⲆⲆᐃ: "img/night-scorpion-hand-right.png",
    ᐃⲆᐃᐃᐃᐃⵠ: "img/hurt-scorpion.png",
    ᐃⵠΔᐃΔⵠⵠ: "img/hurt-scorpion-hand-left.png",
    ΔⲆⵠⲆᐃΔΔ: "img/hurt-scorpion-hand-right.png",
    ⲆΔⵠΔⵠΔⵠ: "img/day-vulture.png",
    ⵠᐃⲆΔⲆⵠⲆ: "img/night-vulture.png",
    ΔᐃᐃᐃΔⵠⲆ: "img/day-vulture-angry.png",
    ⲆⲆΔᐃᐃΔⵠ: "img/night-vulture-angry.png",
    ⵠⵠⲆⵠⵠᐃⵠ: "img/day-vulture-ground.png",
    ᐃⵠⵠᐃⵠᐃⲆ: "img/night-vulture-ground.png",
    ΔΔⵠΔⵠΔⵠ: "img/day-vulture-ground-angry.png",
    ⲆᐃᐃⲆⵠⵠᐃ: "img/night-vulture-ground-angry.png",
    ᐃⵠᐃⵠΔⵠΔ: "img/day-vulture-wings-left.png",
    ᐃⲆⲆᐃⵠᐃᐃ: "img/night-vulture-wings-left.png",
    ᐃⵠⵠⲆⵠΔⵠ: "img/day-vulture-wings-right.png",
    ᐃΔΔⲆΔⵠⵠ: "img/night-vulture-wings-right.png",
    ΔΔᐃΔᐃⵠⵠ: "img/day-vulture-angry-wings-left.png",
    ΔΔⵠΔΔⲆΔ: "img/night-vulture-angry-wings-left.png",
    ⵠⵠⵠⵠⵠᐃΔ: "img/day-vulture-angry-wings-right.png",
    ΔⲆᐃΔᐃⲆᐃ: "img/night-vulture-angry-wings-right.png",
    ᐃᐃΔⵠⵠᐃᐃ: "img/day-vulture-wings-left-tamed.png",
    ⲆⲆⲆⲆᐃⵠΔ: "img/night-vulture-wings-left-tamed.png",
    ⲆⵠⲆⵠᐃⲆΔ: "img/day-vulture-wings-right-tamed.png",
    ⵠΔⵠⲆⵠⲆⲆ: "img/night-vulture-wings-right-tamed.png",
    ᐃΔᐃⲆΔⵠΔ: "img/day-vulture-tamed.png",
    ⲆⵠΔⲆΔⵠᐃ: "img/night-vulture-tamed.png",
    ⲆΔΔⵠᐃΔᐃ: "img/hurt-vulture-ground.png",
    ⲆⲆΔⵠᐃᐃⵠ: "img/hurt-vulture.png",
    ⲆⵠᐃΔⲆΔΔ: "img/hurt-vulture-wings-left.png",
    ⲆⵠⲆⵠⲆⲆΔ: "img/hurt-vulture-wings-right.png",
    ᐃⲆᐃΔⵠᐃⲆ: "img/day-aloe-vera.png",
    ᐃⵠΔᐃⵠⲆⲆ: "img/night-aloe-vera.png",
    ᐃⲆⵠΔⲆΔᐃ: "img/inv-aloe-vera-out.png",
    ᐃⵠⵠⵠⵠⲆⲆ: "img/inv-aloe-vera-in.png",
    ⵠⵠⵠΔᐃΔⲆ: "img/inv-aloe-vera-click.png",
    ΔⵠⵠⵠΔᐃΔ: "img/day-aloe-vera-grown.png",
    ⲆΔⲆΔᐃᐃᐃ: "img/night-aloe-vera-grown.png",
    ΔⲆⲆᐃΔΔⵠ: "img/day-aloe-vera-dried.png",
    ⲆⵠᐃΔⲆΔᐃ: "img/night-aloe-vera-dried.png",
    ΔΔᐃᐃΔᐃᐃ: "img/day-turban1.png",
    ⲆᐃᐃⵠΔⵠⵠ: "img/night-turban1.png",
    ⵠᐃⲆⲆΔⲆⵠ: "img/day-turban2.png",
    ᐃⲆⲆⵠⲆⲆⲆ: "img/night-turban2.png",
    ⵠᐃᐃΔΔΔΔ: "img/inv-turban2-out.png",
    ᐃⵠΔⲆⵠΔⲆ: "img/inv-turban2-in.png",
    ΔⲆΔᐃΔⲆᐃ: "img/inv-turban2-click.png",
    ⵠⲆΔⲆⲆΔΔ: "img/inv-turban1-out.png",
    ⲆⵠΔⵠΔΔⲆ: "img/inv-turban1-in.png",
    ᐃᐃⲆΔⲆⵠⲆ: "img/inv-turban1-click.png",
    ᐃᐃⲆΔᐃⵠᐃ: "img/day-pitchfork2.png",
    ⲆⲆᐃⵠⵠᐃΔ: "img/night-pitchfork2.png",
    ⵠⲆⲆᐃΔⵠⵠ: "img/inv-pitchfork2-out.png",
    ⲆⲆⲆⲆᐃⵠⲆ: "img/inv-pitchfork2-in.png",
    ⵠᐃΔᐃⲆⲆⵠ: "img/inv-pitchfork2-click.png",
    ΔΔᐃΔⲆⵠⵠ: "img/inv-gold-fork-click.png",
    ⲆᐃΔΔΔⵠᐃ: "img/inv-pilot-glasses-click.png",
    ⲆⲆΔⲆⲆΔⲆ: "img/day-pilot-helmet.png",
    ⲆⵠΔⵠΔᐃⲆ: "img/night-pilot-helmet.png",
    ⵠⲆΔⲆⵠⲆⲆ: "img/inv-pilot-helmet-out.png",
    ΔⲆΔⲆᐃⲆᐃ: "img/inv-pilot-helmet-in.png",
    ᐃⵠⵠⵠⵠᐃᐃ: "img/inv-pilot-helmet-click.png",
    ΔⲆⵠⵠⵠΔⵠᐃⵠ: "img/day-sandworm0.png",
    ΔΔⵠⵠᐃⵠᐃ: "img/day-sandworm1.png",
    ⵠᐃᐃᐃΔⵠΔ: "img/day-sandworm2.png",
    ⵠΔⲆᐃⵠΔⲆΔᐃ: "img/night-sandworm0.png",
    ⵠΔⲆΔᐃⲆⲆ: "img/night-sandworm1.png",
    ΔᐃΔⵠΔⲆⵠ: "img/night-sandworm2.png",
    ΔⵠⲆᐃᐃⵠΔ: "img/hurt-sandworm0.png",
    ΔᐃⵠⵠⲆⲆⲆ: "img/hurt-sandworm1.png",
    ᐃⲆᐃⵠΔⲆᐃ: "img/hurt-sandworm2.png",
    ΔΔΔᐃⵠ: "img/inv-vulture-feather-click.png",
    ⲆⵠᐃᐃⲆᐃΔ: "img/day-emerald0.png",
    ⵠⲆΔΔᐃⵠⲆ: "img/night-emerald0.png",
    ⵠⲆⵠⵠⵠᐃⲆ: "img/day-emerald1.png",
    ⵠⵠᐃⲆⲆⵠⵠ: "img/night-emerald1.png",
    ΔᐃᐃⲆᐃⵠΔ: "img/day-emerald2.png",
    ᐃΔⵠⲆⲆᐃΔ: "img/night-emerald2.png",
    ΔⵠᐃⲆⲆ: "img/inv-emerald-click.png",
    ΔΔᐃᐃⲆᐃⵠ: "img/inv-sworm-juice-out.png",
    ⵠⵠⵠⲆⲆⲆⲆ: "img/inv-sworm-juice-in.png",
    ⲆᐃⲆΔⲆⲆΔ: "img/inv-sworm-juice-click.png",
    ΔⵠⲆⲆᐃⲆⲆ: "img/day-point-machine.png",
    ⲆⲆⵠᐃⲆΔΔ: "img/night-point-machine.png",
    ᐃᐃΔΔⲆᐃⵠ: "img/day-point-machine-hole.png",
    ⵠⵠⲆⲆΔᐃΔ: "img/night-point-machine-hole.png",
    ⲆΔⵠᐃΔⲆⲆ: "img/day-point-machine-ground.png",
    ⲆⲆⲆᐃΔᐃᐃ: "img/night-point-machine-ground.png",
    ⲆᐃⵠⵠᐃⲆⲆ: "img/day-point-machine-rotate.png",
    ⵠᐃᐃᐃΔΔⵠ: "img/night-point-machine-rotate.png",
    ᐃⲆⵠⵠΔᐃⵠ: "img/inv-point-machine-out.png",
    ⲆᐃΔΔⵠⲆᐃ: "img/inv-point-machine-in.png",
    ΔⵠᐃⲆΔⲆΔ: "img/inv-point-machine-click.png",
    ΔΔΔΔΔⲆΔ: "img/day-extractor-machine0-stone.png",
    ΔᐃΔΔⲆⵠΔ: "img/night-extractor-machine0-stone.png",
    ⲆΔΔⲆⲆᐃΔ: "img/day-extractor-machine-stone.png",
    ⵠⲆΔΔⵠΔⲆ: "img/night-extractor-machine-stone.png",
    ΔᐃᐃᐃⵠⲆⲆ: "img/inv-extractor-machine-stone-out.png",
    ⲆΔⵠᐃⲆΔΔ: "img/inv-extractor-machine-stone-in.png",
    ⲆⲆⵠᐃᐃΔⵠ: "img/inv-extractor-machine-stone-click.png",
    ⲆᐃⲆᐃⵠᐃⲆ: "img/day-extractor-machine0-gold.png",
    ⵠⵠΔⲆⵠⲆⲆ: "img/night-extractor-machine0-gold.png",
    ⲆΔⵠⵠⲆⲆΔ: "img/day-extractor-machine-gold.png",
    ⵠⵠⵠΔⵠᐃⲆ: "img/night-extractor-machine-gold.png",
    ⲆΔᐃΔᐃΔⵠ: "img/inv-extractor-machine-gold-out.png",
    ᐃΔᐃⵠⵠΔⵠ: "img/inv-extractor-machine-gold-in.png",
    ᐃⵠⵠᐃⵠΔΔ: "img/inv-extractor-machine-gold-click.png",
    ⲆΔᐃΔⵠᐃΔ: "img/day-extractor-machine0-diamond.png",
    ⲆⵠΔᐃⲆⲆⲆ: "img/night-extractor-machine0-diamond.png",
    ᐃⲆᐃᐃᐃⲆΔ: "img/day-extractor-machine-diamond.png",
    ⲆΔⵠⲆᐃⵠⲆ: "img/night-extractor-machine-diamond.png",
    ⲆΔⵠᐃⲆΔⲆ: "img/inv-extractor-machine-diamond-out.png",
    ⲆᐃⵠⲆⵠΔⲆ: "img/inv-extractor-machine-diamond-in.png",
    ⵠΔΔⲆⵠⲆⲆ: "img/inv-extractor-machine-diamond-click.png",
    ᐃΔⲆⵠᐃⲆⵠ: "img/day-extractor-machine0-amethyst.png",
    ᐃⵠⲆⵠⲆΔⵠ: "img/night-extractor-machine0-amethyst.png",
    ⲆⲆΔΔⵠΔᐃ: "img/day-extractor-machine-amethyst.png",
    ⲆᐃΔᐃᐃⵠᐃ: "img/night-extractor-machine-amethyst.png",
    ΔⲆⵠΔⲆⵠᐃ: "img/inv-extractor-machine-amethyst-out.png",
    ΔᐃΔⵠⲆᐃⲆ: "img/inv-extractor-machine-amethyst-in.png",
    ⲆᐃⲆΔΔⲆⲆ: "img/inv-extractor-machine-amethyst-click.png",
    ΔⲆᐃΔΔⲆⵠ: "img/day-extractor-machine0-reidite.png",
    ⵠⵠΔⵠΔⵠⲆ: "img/night-extractor-machine0-reidite.png",
    ΔᐃⲆⲆᐃⵠᐃ: "img/day-extractor-machine-reidite.png",
    ⵠⵠΔⲆⵠΔⵠ: "img/night-extractor-machine-reidite.png",
    ⵠᐃᐃΔΔΔᐃ: "img/inv-extractor-machine-reidite-out.png",
    ⵠΔⲆᐃⵠⲆΔ: "img/inv-extractor-machine-reidite-in.png",
    ᐃⲆⵠⵠΔΔᐃ: "img/inv-extractor-machine-reidite-click.png",
    ΔᐃⵠΔᐃΔⲆ: "img/extractor-cases.png",
    ᐃⵠᐃⵠᐃᐃⵠ: "img/day-golden-hen.png",
    ⵠᐃΔΔᐃΔΔ: "img/night-golden-hen.png",
    ΔᐃᐃᐃⲆᐃⵠ: "img/day-golden-chicken.png",
    ⲆΔΔᐃᐃⲆⲆ: "img/night-golden-chicken.png",
    ⲆⵠΔᐃΔᐃΔ: "img/hurt-golden-hen.png",
    ⵠΔΔΔᐃᐃᐃ: "img/hurt-golden-chicken.png",
    ⵠⲆⵠΔᐃΔⵠ: "img/logo-interface.png",
    ⵠΔⲆᐃⲆΔΔ: "img/forest-mode-hover.png",
    ΔΔΔᐃᐃⲆΔ: "img/normal-mode-hover.png",
    ᐃⵠⵠⲆᐃⲆⵠ: "img/vampire-mode-hover.png",
    ᐃⵠⲆⵠᐃΔⵠ: "img/zombie-mode-hover.png",
    ⵠΔᐃⵠⲆⲆΔ: "img/community-mode-hover2.png",
    ᐃⵠᐃⲆⵠⲆᐃ: "img/experimental-mode-hover.png",
    ⲆⵠⵠⵠΔⵠⲆ: "img/zombie-mode-out.png",
    ΔⲆⵠᐃⵠΔⲆ: "img/zombie-mode-in.png",
    ᐃⲆΔⵠⵠⵠⵠ: "img/zombie-mode-click.png",
    ΔᐃⵠⲆⵠΔⲆ: "img/vampire-mode-out.png",
    ΔΔΔΔⲆⲆᐃ: "img/vampire-mode-in.png",
    ᐃΔⲆⲆⲆᐃᐃ: "img/vampire-mode-click.png",
    ᐃⵠΔⲆⵠᐃΔ: "img/normal-mode-out.png",
    ΔᐃⲆᐃΔⵠⵠ: "img/normal-mode-in.png",
    ᐃⵠⵠⲆΔⲆᐃ: "img/normal-mode-click.png",
    ⵠⵠⵠΔΔⵠᐃ: "img/forest-mode-out.png",
    ⲆⲆⲆΔⲆᐃᐃ: "img/forest-mode-in.png",
    ΔⲆᐃⵠⲆⵠⵠ: "img/forest-mode-click.png",
    ΔᐃΔΔΔΔⵠ: "img/community-mode-out.png",
    ᐃΔᐃΔⲆⵠⵠ: "img/community-mode-in.png",
    ᐃᐃᐃΔᐃⵠΔ: "img/community-mode-click.png",
    ⲆᐃⵠΔΔⵠᐃ: "img/experimental-modes-out.png",
    ΔⲆᐃⲆᐃᐃΔ: "img/experimental-modes-in.png",
    ⵠⵠⵠᐃΔⵠⵠ: "img/experimental-modes-click.png",
    ΔⵠᐃᐃΔⲆⵠ: "img/youtube-button-out.png",
    ⵠΔᐃΔΔⵠᐃ: "img/youtube-button-in.png",
    ᐃⵠΔⲆⲆᐃⲆ: "img/youtube-button-click.png",
    ⲆΔⵠⵠΔⲆΔ: "img/wiki-button-out.png",
    ΔⵠᐃⲆΔΔᐃ: "img/wiki-button-in.png",
    ᐃⵠᐃᐃᐃⵠⵠ: "img/wiki-button-click.png",
    ᐃᐃⲆᐃΔⵠⲆ: "img/twitter-button-out.png",
    ⲆᐃᐃΔⵠᐃᐃ: "img/twitter-button-in.png",
    ⵠⵠᐃΔᐃᐃᐃ: "img/twitter-button-click.png",
    ⵠⲆⵠⲆᐃᐃⲆ: "img/facebook-button-out.png",
    ⵠⵠⵠᐃΔᐃΔ: "img/facebook-button-in.png",
    ⲆⲆᐃΔⲆⵠΔ: "img/facebook-button-click.png",
    ᐃΔΔᐃᐃΔⵠ: "img/reddit-button-out.png",
    ⵠⵠⵠΔᐃⵠⵠ: "img/reddit-button-in.png",
    ΔᐃΔⵠⵠⵠᐃ: "img/reddit-button-click.png",
    ᐃⲆΔΔΔⲆΔ: "img/discord-button-out.png",
    ⲆⲆⵠⲆⵠΔΔ: "img/discord-button-in.png",
    ᐃⲆⲆⵠⲆⵠⲆ: "img/discord-button-click.png",
    ⲆⲆᐃⲆⵠᐃᐃ: "img/merch-button-out.png",
    ⵠᐃΔⲆⲆᐃΔ: "img/merch-button-in.png",
    ᐃᐃΔⲆⲆᐃᐃ: "img/merch-button-click.png",
    ⵠᐃⵠⲆᐃΔΔⲆᐃ: "img/terminal-button-out.png",
    ᐃΔⵠᐃⵠᐃⵠⵠΔ: "img/terminal-button-in.png",
    ⲆΔⵠᐃⲆΔᐃⲆⵠ: "img/terminal-button-click.png",
    ᐃⵠΔᐃⵠᐃᐃ: "img/restart-out.png",
    ΔⵠΔΔⲆⲆⲆ: "img/restart-in.png",
    ᐃᐃᐃΔⲆⵠᐃ: "img/restart-click.png",
    ΔΔⲆⲆⲆΔᐃ: "img/reboot-out.png",
    ⲆⵠⲆⲆⵠΔΔ: "img/reboot-in.png",
    ⲆᐃⵠⲆⵠⵠΔ: "img/reboot-click.png",
    ⲆⵠΔᐃⲆᐃΔ: "img/guide-out.png",
    ᐃΔⵠⲆⲆⲆᐃ: "img/guide-in.png",
    ⵠΔⵠΔᐃⵠᐃ: "img/guide-click.png",
    ⵠᐃⲆᐃⲆⵠΔ: "img/copy-paste-out.png",
    ᐃⲆᐃᐃⲆⲆⲆ: "img/copy-paste-in.png",
    ⵠⲆΔⵠⲆⵠⲆ: "img/copy-paste-click.png",
    ᐃⵠΔⲆΔᐃᐃ: "img/link-buttons-bg.png",
    ⵠⵠΔⵠⲆⲆⲆ: "img/changelog-box2.png",
    ᐃΔΔᐃⲆⲆⲆ: "img/changelog_31.png",
    ΔⵠᐃⵠΔΔⵠ: "img/banner-taming.png",
    ⲆᐃᐃΔΔⵠⵠ: "img/profile-button-out.png",
    ⲆⲆΔⲆⵠⵠⲆ: "img/profile-button-in.png",
    ΔⲆΔⵠΔΔⲆ: "img/profile-button-click.png",
    ᐃⲆⲆⲆⵠⵠΔ: "img/login-button-out.png",
    ⲆⵠΔᐃⲆᐃᐃ: "img/login-button-in.png",
    ΔⲆᐃΔᐃᐃⲆ: "img/login-button-click.png",
    ⲆᐃΔⲆⵠᐃⵠ: "img/login-google-out.png",
    ⵠⲆΔⲆΔᐃΔ: "img/login-google-in.png",
    ⵠᐃⲆⲆⵠΔᐃ: "img/login-google-click.png",
    ΔⵠᐃⲆᐃⲆᐃ: "img/login-facebook-out.png",
    ⲆᐃᐃΔᐃΔⲆ: "img/login-facebook-in.png",
    ᐃⲆᐃᐃⲆⵠⵠ: "img/login-facebook-click.png",
    ΔΔᐃⲆⲆⲆⲆ: "img/account-box.png",
    ⲆᐃⲆΔⲆⲆΔⲆΔ: "img/account-under-maintenance.png",
    ⲆΔΔΔⲆΔⲆ: "img/close-button-account-out.png",
    ΔΔⲆᐃΔⵠΔ: "img/close-button-account-in.png",
    ΔⲆⵠⲆᐃⵠⵠ: "img/close-button-account-click.png",
    ⵠⵠⵠΔΔΔⵠ: "img/play-button-out.png",
    ᐃᐃⲆⵠΔⵠⲆ: "img/play-button-in.png",
    ΔΔΔᐃⵠⵠᐃ: "img/play-button-click.png",
    ᐃᐃΔⲆΔᐃⲆⲆᐃ: "img/app-store-badge.png",
    ΔΔΔΔᐃΔⲆⵠΔ: "img/play-store-badge.png",
    ᐃΔᐃⲆΔⲆⵠⲆΔ: "img/mobile-boxad.png",
    ⵠⵠΔᐃΔⵠⵠ: "img/modify-name-out.png",
    ΔⲆⲆᐃⲆᐃⲆ: "img/modify-name-in.png",
    ⲆⵠΔΔᐃΔⲆ: "img/modify-name-click.png",
    ΔΔΔⵠᐃⲆⲆ: "img/copy-id-button-out.png",
    ⵠΔⵠⲆⵠⲆⵠ: "img/copy-id-button-hover.png",
    ᐃⵠΔΔᐃΔⲆ: "img/copy-id-button-active.png",
    ΔⲆⵠⵠⲆⲆΔ: "img/yes-button-out.png",
    Δᐃⵠᐃᐃⵠᐃ: "img/yes-button-in.png",
    ⵠⲆⵠΔⲆⲆⲆ: "img/yes-button-click.png",
    ΔⲆⵠⲆⵠⲆⲆ: "img/yes-300-button-out.png",
    ⵠΔᐃΔᐃⵠΔ: "img/yes-300-button-in.png",
    ΔΔΔⵠᐃΔⵠ: "img/yes-300-button-click.png",
    ⵠⲆⵠⵠⲆᐃⵠ: "img/no-button-out.png",
    ⵠⲆΔⲆᐃᐃⲆ: "img/no-button-in.png",
    ᐃⲆᐃⲆⲆⲆⵠ: "img/no-button-click.png",
    ᐃΔⵠⵠᐃⵠⵠ: "img/no-thanks-button-out.png",
    ⲆΔᐃᐃΔᐃΔ: "img/no-thanks-button-in.png",
    ᐃΔᐃΔⲆⵠΔ: "img/no-thanks-button-click.png",
    ⵠⲆⵠⲆᐃΔⵠ: "img/shop-button-out.png",
    ⲆᐃⲆΔᐃΔᐃ: "img/shop-button-in.png",
    ⲆᐃⵠΔᐃⲆⵠ: "img/shop-button-click.png",
    ΔΔⲆΔᐃⲆⲆ: "img/logout-out.png",
    ᐃⵠⵠᐃⲆⲆⲆ: "img/logout-in.png",
    ᐃᐃᐃⵠᐃⵠΔ: "img/logout-click.png",
    ᐃᐃⵠⲆᐃⲆΔ: "img/terms-button-out.png",
    ΔⵠⵠΔΔⵠᐃ: "img/terms-button-in.png",
    ΔᐃᐃⲆᐃⵠⲆ: "img/terms-button-click.png",
    ⲆᐃⵠᐃⵠⲆΔ: "img/tutorial-icon.png",
    ᐃⲆΔᐃⵠΔⵠ: "img/skins-icon.png",
    ΔⵠΔᐃⵠⵠΔ: "img/shop-icon.png",
    ⲆⲆⵠⲆⵠⵠᐃᐃⲆ: "img/paint-icon.png",
    ⲆⲆⲆΔⲆⲆⲆ: "img/leaderboard-icon.png",
    ᐃΔΔⵠⵠⲆⲆ: "img/start-icon.png",
    ᐃᐃⵠⲆΔⲆΔ: "img/profile-icon.png",
    ΔΔΔΔⲆⲆⲆ: "img/server-access-icon2.png",
    ⵠⵠᐃΔΔᐃⲆ: "img/button-homepage-bg-out.png",
    ⲆᐃΔⵠᐃⵠᐃ: "img/button-homepage-bg-in.png",
    ⲆΔⲆⲆΔᐃⲆ: "img/button-homepage-bg-click.png",
    ΔᐃΔⵠⵠΔⵠ: "img/button-bottom-homepage-bg-out.png",
    ΔⵠⵠⲆⲆΔΔ: "img/button-bottom-homepage-bg-in.png",
    ᐃⵠⲆᐃⲆᐃᐃ: "img/button-bottom-homepage-bg-click.png",
    ⵠⲆⲆᐃⵠⲆⵠ: "img/lvl-player.png",
    ⵠⵠΔΔᐃΔⲆ: "img/avatar-player.png",
    ᐃΔⲆΔᐃΔⲆ: "img/avatar-player1.png",
    ⵠⲆⵠᐃⵠΔⲆ: "img/avatar-player2.png",
    ΔⲆⵠⲆΔⲆᐃ: "img/avatar-player3.png",
    ᐃΔΔⵠⲆⲆᐃ: "img/avatar-player4.png",
    ⲆⵠΔⲆⲆᐃⲆ: "img/avatar-player5.png",
    ⵠⵠᐃⵠⵠΔⵠ: "img/avatar-player6.png",
    ⵠΔⲆΔⲆⲆᐃ: "img/avatar-player7.png",
    ⵠΔΔⲆⵠⲆᐃ: "img/avatar-player8.png",
    ΔΔⲆⲆᐃⵠΔ: "img/avatar-player9.png",
    ⵠᐃⲆᐃⲆⲆⲆ: "img/avatar-player10.png",
    ⵠᐃΔᐃⲆᐃΔ: "img/avatar-player11.png",
    ΔᐃΔⲆΔΔᐃ: "img/avatar-player12.png",
    ᐃΔⵠΔⵠΔⲆ: "img/avatar-player13.png",
    ᐃΔᐃⵠⵠᐃᐃ: "img/avatar-player14.png",
    ΔⵠⲆΔΔΔΔ: "img/avatar-player14.png",
    ⵠΔⲆⵠᐃⵠⵠ: "img/avatar-player14.png",
    ᐃΔΔΔⵠΔⲆ: "img/avatar-player14.png",
    ⲆⲆᐃΔᐃⵠΔᐃⵠ: "img/golden-bread.png",
    ⲆⲆⵠᐃⵠⵠⲆ: "img/buy-bread-out.png",
    ⵠⲆᐃᐃΔⵠᐃ: "img/buy-bread-in.png",
    ΔⲆᐃΔΔᐃⵠ: "img/buy-bread-click.png",
    ᐃⲆⵠᐃᐃⲆⵠ: "img/gauge.png",
    ⲆᐃΔΔⵠⵠⲆᐃΔ: "img/season-4-out.png",
    ⵠΔⲆΔΔᐃΔⲆΔ: "img/season-4-in.png",
    ⲆⵠᐃΔΔⵠⵠΔΔ: "img/season-4-click.png",
    ΔⲆᐃⲆⵠⵠⲆⵠᐃ: "img/season4-box.png",
    ⲆⵠΔⲆⲆᐃᐃⵠᐃ: "img/season-5-out.png",
    ⲆΔⵠΔΔⲆΔΔⵠ: "img/season-5-in.png",
    ᐃΔⲆᐃᐃᐃⵠⵠΔ: "img/season-5-click.png",
    ⲆΔⲆⲆΔⲆⵠΔΔ: "img/season5-box.png",
    ⲆⲆⵠⲆⲆΔᐃ: "img/season-6-out.png",
    ᐃⲆᐃⲆᐃΔⲆ: "img/season-6-in.png",
    ⲆΔⲆΔΔⲆⲆ: "img/season-6-click.png",
    ⵠⲆᐃᐃΔⲆⵠ: "img/season6-box.png",
    ⲆⲆᐃⵠⵠᐃⵠ: "img/profile3-box.png",
    ⲆⲆⲆΔΔⲆⵠ: "img/skins-box.png",
    ⵠⵠⲆΔⲆⲆᐃ: "img/shop-box.png",
    ⵠΔⲆⵠᐃᐃⵠⵠᐃ: "img/private-server-box.png",
    ⲆΔⲆⵠⲆᐃΔ: "img/location-box.png",
    ⲆⲆᐃᐃΔⵠᐃ: "img/server-duration-box.png",
    ᐃⵠⵠᐃᐃⵠⵠ: "img/tutorial-box.png",
    ⵠⵠⲆⲆᐃᐃⲆ: "img/leaderboard2-box.png",
    ⵠⵠΔⲆᐃⵠⲆ: "img/buy-breads-box.png",
    ⵠΔⵠᐃⵠⵠⵠ: "img/bag-box.png",
    ⲆⵠΔⲆΔᐃΔ: "img/deadbox-box.png",
    ᐃᐃⲆⵠᐃⲆⵠ: "img/book-box.png",
    ⲆⵠᐃⵠⵠⲆΔ: "img/accessories-box.png",
    ΔⲆⵠⵠⲆΔᐃ: "img/customskin-box.png",
    ⵠᐃⲆⵠⲆᐃⲆ: "img/bag-lasts.png",
    ⲆⵠⲆΔᐃΔΔ: "img/server-lasts.png",
    ᐃΔⲆⵠΔΔⵠ: "img/server-access-box3.png",
    ⲆⵠΔᐃⲆⵠΔ: "img/lootbox-box.png",
    ΔΔΔⵠⲆⲆΔ: "img/change-nickname0.png",
    ⵠⵠⲆⵠΔⵠΔ: "img/change-nickname1.png",
    ⵠᐃΔⲆᐃΔⵠ: "img/cheating-box.png",
    ΔⵠᐃⵠⵠΔΔᐃᐃ: "img/daily-quest-box.png",
    ⵠΔΔⵠⵠⲆⵠᐃΔ: "img/daily-5-bread.png",
    ᐃΔⵠᐃⵠΔᐃΔΔ: "img/daily-10-bread.png",
    ΔⲆⵠⵠΔⵠᐃΔΔ: "img/daily-valid.png",
    ΔᐃⵠᐃⵠΔⵠ: "img/normal-profile-out.png",
    ⲆⵠᐃᐃⲆⲆΔ: "img/normal-profile-in.png",
    ΔᐃΔᐃⵠⵠⲆ: "img/normal-profile-click.png",
    ⲆⵠⲆΔⲆΔΔ: "img/forest-profile-out.png",
    ⲆⵠⵠᐃⲆΔⲆ: "img/forest-profile-in.png",
    ΔΔΔⲆᐃΔⵠ: "img/forest-profile-click.png",
    ⵠⲆΔᐃⲆⵠᐃ: "img/zombie-profile-out.png",
    ᐃⵠᐃᐃΔΔⵠ: "img/zombie-profile-in.png",
    ⲆᐃᐃⲆΔᐃⲆ: "img/zombie-profile-click.png",
    ⵠΔΔΔΔⲆᐃ: "img/vampire-profile-out.png",
    ᐃⵠᐃᐃᐃⲆᐃ: "img/vampire-profile-in.png",
    ⲆⵠΔⵠⲆⵠⲆ: "img/vampire-profile-click.png",
    ⵠⵠΔⲆΔⲆⲆ: "img/total-profile-out.png",
    ⵠΔⲆⵠⲆⲆΔ: "img/total-profile-in.png",
    ⵠΔⵠⲆⵠᐃΔ: "img/total-profile-click.png",
    ᐃⵠᐃⲆⵠᐃⵠ: "img/season1-out.png",
    ΔᐃᐃΔⵠⲆΔ: "img/season1-in.png",
    ⲆΔⵠᐃⲆΔⵠ: "img/season1-click.png",
    ⲆⵠᐃⲆΔⵠᐃ: "img/season2-out.png",
    ΔᐃⵠⲆⲆΔᐃ: "img/season2-in.png",
    ᐃⵠΔΔΔΔΔ: "img/season2-click.png",
    ⲆⵠΔᐃΔⵠᐃ: "img/season3-out.png",
    ⲆᐃΔΔⲆⲆⲆ: "img/season3-in.png",
    ⲆΔᐃΔⵠᐃⵠ: "img/season3-click.png",
    ⲆⵠⲆΔⵠⲆⲆ: "img/season4-out.png",
    ᐃᐃⲆΔⵠΔΔ: "img/season4-in.png",
    ᐃΔⲆⲆⲆⵠΔ: "img/season4-click.png",
    ᐃⵠⵠⵠΔⵠᐃ: "img/season5-out.png",
    ᐃⵠⵠⲆⲆΔⵠ: "img/season5-in.png",
    ᐃΔⵠᐃⵠⵠⲆ: "img/season5-click.png",
    ⵠΔⵠΔᐃΔⲆ: "img/season6-out.png",
    ⵠⵠⵠᐃᐃΔⵠ: "img/season6-in.png",
    ᐃΔⲆⵠⲆΔΔ: "img/season6-click.png",
    ΔⲆΔⲆΔⲆⵠ: "img/locked-skin-alert.png",
    ⵠᐃᐃΔᐃΔⵠ: "img/locked-custom-alert.png",
    ᐃⲆⲆⵠΔⲆΔ: "img/bg-red-locked.png",
    ⲆΔᐃᐃⲆΔⵠ: "img/skin-button-out.png",
    ᐃⲆⲆΔⵠⵠΔ: "img/skin-button-in.png",
    ⵠᐃⲆⲆᐃⲆΔ: "img/skin-button-click.png",
    ⲆᐃΔᐃⲆⲆᐃ: "img/accessory-button-out.png",
    ΔⲆᐃᐃⲆⲆΔ: "img/accessory-button-in.png",
    ⲆΔⵠⵠΔⵠⵠ: "img/accessory-button-click.png",
    ⲆΔⲆⵠⵠΔΔ: "img/bag-button-out.png",
    ᐃΔᐃΔᐃᐃⵠ: "img/bag-button-in.png",
    ⵠⲆⲆᐃⲆΔΔ: "img/bag-button-click.png",
    ⵠΔⵠⵠΔⲆⵠ: "img/book-button-out.png",
    ⵠⲆⵠⵠⵠⲆΔ: "img/book-button-in.png",
    ⵠⵠⵠᐃⵠⲆⲆ: "img/book-button-click.png",
    ᐃΔⲆᐃᐃⵠⲆ: "img/deadbox-button-out.png",
    ΔᐃᐃⵠΔⲆᐃ: "img/deadbox-button-in.png",
    ⲆⲆⲆⵠᐃΔⵠ: "img/deadbox-button-click.png",
    ᐃᐃⵠᐃΔᐃⵠ: "img/loot-button-out.png",
    ΔᐃⲆⵠⵠⲆᐃ: "img/loot-button-in.png",
    ΔⲆⲆᐃⲆᐃᐃ: "img/loot-button-click.png",
    ⲆΔΔΔⲆⵠΔ: "img/free-item-out.png",
    ΔᐃΔⵠᐃⲆⵠ: "img/free-item-in.png",
    ⵠⵠᐃⲆⲆⲆΔ: "img/free-item-click.png",
    ⵠⲆⲆᐃ: "img/wood-item-out.png",
    ⲆΔⵠⵠ: "img/wood-item-in.png",
    ΔᐃΔΔ: "img/wood-item-click.png",
    ᐃΔᐃᐃᐃⲆⵠ: "img/stone-item.png",
    ⲆᐃⲆⲆⲆᐃᐃ: "img/stone-item-in.png",
    ΔⲆᐃᐃᐃΔⵠ: "img/stone-item-click.png",
    ᐃⲆΔΔⵠⲆⲆ: "img/gold-item.png",
    ᐃᐃΔⲆⲆΔΔ: "img/gold-item-in.png",
    ᐃⲆΔᐃⲆⵠᐃ: "img/gold-item-click.png",
    ᐃᐃⵠΔⵠⵠⵠ: "img/diamond-item.png",
    ᐃᐃⵠⲆᐃⵠᐃ: "img/diamond-item-in.png",
    ⵠⵠⵠΔΔⲆⵠ: "img/diamond-item-click.png",
    ⵠᐃⲆᐃⲆΔΔ: "img/amethyst-item.png",
    ⵠⲆΔΔⵠⲆⲆ: "img/amethyst-item-in.png",
    ΔΔΔⲆᐃᐃⲆ: "img/amethyst-item-click.png",
    ⲆᐃⵠⵠⲆⲆΔ: "img/reidite-item.png",
    ⲆᐃᐃΔΔⵠΔ: "img/reidite-item-in.png",
    ᐃⲆⵠΔⵠⲆⵠ: "img/reidite-item-click.png",
    ᐃⲆᐃΔⲆᐃᐃ: "img/special-item-out.png",
    ⵠⲆⲆΔᐃᐃⲆ: "img/special-item-in.png",
    ΔᐃⵠΔᐃΔᐃ: "img/special-item-click.png",
    ᐃᐃⵠᐃⵠᐃᐃ: "img/level-item-out.png",
    ⲆⵠΔⵠⵠΔⲆ: "img/level-item-in.png",
    ⲆⲆᐃᐃⵠⲆΔ: "img/level-item-click.png",
    ᐃᐃⲆⲆⵠⵠⵠ: "img/skin-previous-out.png",
    ⵠⵠⲆⵠⵠᐃⲆ: "img/skin-previous-in.png",
    ⲆⵠᐃᐃΔⵠΔ: "img/skin-previous-click.png",
    ⲆⵠᐃᐃᐃⲆᐃ: "img/skin-next-out.png",
    ⵠⲆⵠⵠᐃᐃΔ: "img/skin-next-in.png",
    ΔᐃΔⲆⲆⲆⲆ: "img/skin-next-click.png",
    ΔⲆⵠⲆΔ: "img/back-button-out.png",
    ⲆΔⲆⲆΔ: "img/back-button-in.png",
    ⲆⵠⲆⵠΔ: "img/back-button-click.png",
    ⲆⵠⲆᐃⵠΔⲆ: "img/get-more-button-out.png",
    ⲆⲆᐃⵠⲆᐃⵠ: "img/get-more-button-in.png",
    ⵠⵠⵠⲆⲆⵠⵠ: "img/get-more-button-click.png",
    ᐃⲆᐃⵠΔⲆΔ: "img/currency1-out.png",
    ΔᐃΔᐃΔΔΔ: "img/currency1-in.png",
    ⵠᐃⲆⵠΔᐃⲆ: "img/currency1-click.png",
    ΔᐃⵠᐃⵠⲆΔ: "img/currency2-out.png",
    ⵠᐃⵠⵠⵠᐃⵠ: "img/currency2-in.png",
    ⵠΔⵠᐃⲆⵠᐃ: "img/currency2-click.png",
    ⵠⵠⵠⵠΔⵠⵠ: "img/currency3-out.png",
    ⲆᐃⲆΔⲆᐃΔ: "img/currency3-in.png",
    ΔΔΔΔΔΔᐃ: "img/currency3-click.png",
    ⵠᐃⲆᐃⲆΔⲆ: "img/currency4-out.png",
    ⵠᐃⵠⵠⵠⵠᐃ: "img/currency4-in.png",
    ⲆᐃⲆⵠⵠⲆΔ: "img/currency4-click.png",
    ⵠⲆⵠΔⲆⲆⵠ: "img/currency5-out.png",
    ⲆⵠΔᐃᐃΔⵠ: "img/currency5-in.png",
    ΔⲆᐃΔΔᐃΔ: "img/currency5-click.png",
    ⲆᐃⲆⲆᐃⵠⵠ: "img/price1-out.png",
    ⵠᐃⵠΔⵠⲆⵠ: "img/price1-in.png",
    ⵠᐃⲆⲆᐃΔⲆ: "img/price1-click.png",
    ᐃⵠⵠⵠᐃⵠⵠ: "img/price2-out.png",
    ᐃⵠΔᐃⲆⵠᐃ: "img/price2-in.png",
    ΔⲆⲆⵠⲆⲆⵠ: "img/price2-click.png",
    ᐃᐃⵠᐃΔⵠΔ: "img/price3-out.png",
    ⵠΔᐃᐃᐃⵠⲆ: "img/price3-in.png",
    ΔᐃⵠⲆᐃⵠΔ: "img/price3-click.png",
    ᐃⵠᐃⵠΔᐃᐃ: "img/price4-out.png",
    ⲆΔⵠⵠᐃᐃΔ: "img/price4-in.png",
    ⲆΔⲆΔⲆᐃⲆ: "img/price4-click.png",
    ΔΔΔⵠⲆᐃΔ: "img/price5-out.png",
    ᐃⲆΔⵠΔⲆΔ: "img/price5-in.png",
    ⵠⲆΔⲆⵠⲆᐃ: "img/price5-click.png",
    ᐃⵠⲆⲆⲆⵠⵠᐃⵠ: "img/buy-private-server-out.png",
    ΔⵠΔⲆⵠΔⲆΔΔ: "img/buy-private-server-in.png",
    ⲆᐃⵠΔΔⲆⲆⲆⲆ: "img/buy-private-server-click.png",
    ⲆⵠΔⵠⵠⲆᐃ: "img/atlanta-button-out.png",
    ᐃⲆⲆⲆΔⵠⵠ: "img/atlanta-button-in.png",
    ⵠᐃᐃⵠⵠᐃⲆ: "img/atlanta-button-click.png",
    ⲆΔⲆΔⲆⵠⵠ: "img/los-angeles-button-out.png",
    ΔⲆⲆⵠⲆᐃⵠ: "img/los-angeles-button-in.png",
    ⲆᐃᐃⵠⵠⲆⵠ: "img/los-angeles-button-click.png",
    ⲆⲆᐃⲆᐃᐃⲆ: "img/sydney-button-out.png",
    ⵠᐃⲆⵠΔΔᐃ: "img/sydney-button-in.png",
    ⲆⲆᐃⲆⵠⲆⵠ: "img/sydney-button-click.png",
    ⵠᐃᐃᐃΔᐃᐃ: "img/frankfurt-button-out.png",
    ᐃᐃᐃᐃᐃᐃᐃ: "img/frankfurt-button-in.png",
    ΔⵠⲆᐃΔᐃᐃ: "img/frankfurt-button-click.png",
    ⲆⵠⲆⵠⲆⲆⲆ: "img/osaka-button-out.png",
    ᐃⲆⲆⵠΔᐃΔ: "img/osaka-button-in.png",
    ᐃⵠᐃΔⵠⲆᐃ: "img/osaka-button-click.png",
    ⵠⵠⲆⲆᐃΔᐃⲆᐃ: "img/yes-location-out.png",
    ΔᐃᐃⵠⵠΔΔⲆⵠ: "img/yes-location-in.png",
    ᐃΔⵠᐃⵠⲆΔⲆᐃ: "img/yes-location-click.png",
    ᐃᐃⲆⲆⵠΔⲆ: "img/3days-button-out.png",
    ⲆΔᐃΔΔΔⲆ: "img/3days-button-in.png",
    ⲆΔᐃⲆΔⵠᐃ: "img/3days-button-click.png",
    ⵠΔⲆΔⵠᐃᐃ: "img/7days-button-out.png",
    ΔᐃⲆᐃⵠⲆⵠ: "img/7days-button-in.png",
    ᐃᐃⲆᐃᐃⲆᐃ: "img/7days-button-click.png",
    ⵠⲆⲆⵠΔΔΔ: "img/30days-button-out.png",
    ⲆᐃⲆⵠΔᐃⵠ: "img/30days-button-in.png",
    ΔΔⵠᐃᐃᐃᐃ: "img/30days-button-click.png",
    ΔΔᐃΔΔⲆΔ: "img/90days-button-out.png",
    ⵠⲆΔΔⵠΔⵠ: "img/90days-button-in.png",
    ⵠⵠΔⲆⲆⵠⵠ: "img/90days-button-click.png",
    ᐃⵠΔᐃⵠⲆᐃ: "img/spin1.png",
    ΔⵠⵠⲆⲆΔⲆ: "img/spin2.png",
    ⵠΔⵠᐃⲆᐃΔ: "img/spin3.png",
    ⵠⲆⲆⲆⲆⲆᐃ: "img/spin4.png",
    ΔᐃⲆⵠⵠᐃᐃ: "img/spin5.png",
    ᐃᐃⵠΔΔⲆⲆ: "img/spin6.png",
    ΔⲆᐃⵠⵠⲆⲆ: "img/arrow-spin.png",
    ⲆⵠⵠΔᐃΔΔ: "img/spin-button-1-out.png",
    ᐃᐃΔΔⲆᐃΔ: "img/spin-button-1-in.png",
    ⲆᐃⵠΔΔⵠⵠ: "img/spin-button-1-click.png",
    ⲆⲆⵠⲆⲆΔⲆ: "img/spin-button-2-out.png",
    ⵠⵠᐃⲆⲆᐃΔ: "img/spin-button-2-in.png",
    ᐃⲆⵠⵠⵠⲆⲆ: "img/spin-button-2-click.png",
    ΔⲆΔⲆⵠⵠⵠ: "img/spin-button-3-out.png",
    ⵠΔᐃⵠᐃⲆΔ: "img/spin-button-3-in.png",
    ΔΔᐃⵠⲆⲆⵠ: "img/spin-button-3-click.png",
    ᐃΔΔⵠΔΔΔ: "img/spin-button-4-out.png",
    ⲆⲆᐃᐃΔᐃᐃ: "img/spin-button-4-in.png",
    ᐃᐃΔᐃⵠⵠΔ: "img/spin-button-4-click.png",
    ⵠᐃⵠΔᐃΔΔ: "img/spin-button-5-out.png",
    ⲆⲆⵠΔⲆⵠΔ: "img/spin-button-5-in.png",
    ⵠⵠⵠⵠⲆΔΔ: "img/spin-button-5-click.png",
    ⵠᐃᐃⲆⵠΔⲆ: "img/spin-light.png",
    ⲆⵠᐃᐃᐃⲆΔ: "img/tuto-wiki-out.png",
    ΔᐃⲆⲆⲆΔΔ: "img/tuto-wiki-in.png",
    ⵠⵠΔⵠΔᐃᐃ: "img/tuto-wiki-click.png",
    ΔᐃⵠᐃΔᐃᐃ: "img/tuto-previous-out.png",
    ᐃⵠⵠᐃⲆⲆⵠ: "img/tuto-previous-in.png",
    ΔⵠⲆᐃⵠⵠᐃ: "img/tuto-previous-click.png",
    ⲆⵠⲆⵠⵠⵠᐃ: "img/tuto-next-out.png",
    ᐃⵠᐃΔⵠⵠⲆ: "img/tuto-next-in.png",
    ⲆⵠᐃⲆΔⵠⲆ: "img/tuto-next-click.png",
    ⵠⵠΔⲆΔᐃΔ: "img/time-leaderboard-out.png",
    ⵠⵠⵠⵠⵠΔᐃ: "img/time-leaderboard-in.png",
    ⲆΔⲆⲆⲆⲆⵠ: "img/time-leaderboard-click.png",
    ⲆⲆΔⲆΔⵠΔ: "img/score-leaderboard-out.png",
    ΔΔᐃⵠⵠᐃΔ: "img/score-leaderboard-in.png",
    ΔᐃΔΔΔⲆⵠ: "img/score-leaderboard-click.png",
    ⵠΔΔΔⵠᐃᐃ: "img/lvl-leaderboard-out.png",
    ⵠⵠⵠⵠⵠⲆⲆ: "img/lvl-leaderboard-in.png",
    ⲆΔⲆΔΔΔᐃ: "img/lvl-leaderboard-click.png",
    ⲆᐃⲆᐃᐃⵠⲆ: "img/kill-leaderboard-out.png",
    ᐃⲆᐃΔⵠΔⲆ: "img/kill-leaderboard-in.png",
    ΔⲆΔⵠⲆΔⲆ: "img/kill-leaderboard-click.png",
    ᐃᐃⵠⲆⲆⵠΔ: "img/all-leaderboard-out.png",
    ⵠⵠΔⵠⲆΔⲆ: "img/all-leaderboard-in.png",
    ΔᐃⵠⵠᐃΔⵠ: "img/all-leaderboard-click.png",
    ΔⲆⵠⲆΔⵠⵠ: "img/today-leaderboard-out.png",
    ⵠᐃⵠⵠΔⲆⵠ: "img/today-leaderboard-in.png",
    ΔⵠᐃⵠⵠᐃⲆ: "img/today-leaderboard-click.png",
    ⲆᐃΔᐃⲆΔⲆ: "img/week-leaderboard-out.png",
    ᐃⲆⵠⲆᐃⲆᐃ: "img/week-leaderboard-in.png",
    ΔⲆⵠΔᐃⵠⵠ: "img/week-leaderboard-click.png",
    ⵠΔΔΔⲆⵠⵠ: "img/season1-out.png",
    ᐃⲆⵠΔⲆᐃᐃ: "img/season1-in.png",
    ᐃᐃⲆⲆᐃⵠᐃ: "img/season1-click.png",
    ᐃⵠᐃⵠⵠⲆⵠ: "img/season2-out.png",
    ΔⲆᐃⲆⵠⵠⲆ: "img/season2-in.png",
    ᐃᐃΔᐃΔΔΔ: "img/season2-click.png",
    ⲆⵠᐃΔᐃⲆⵠ: "img/season3-out.png",
    ⵠⲆⵠᐃΔⲆᐃ: "img/season3-in.png",
    ⲆⲆⲆΔᐃⲆᐃ: "img/season3-click.png",
    ⵠⲆᐃᐃⵠⲆⲆ: "img/season4-out.png",
    ᐃᐃᐃⵠⵠⲆΔ: "img/season4-in.png",
    ⲆⵠΔⲆⲆⵠⵠ: "img/season4-click.png",
    ⵠⲆⵠΔᐃⵠᐃ: "img/season5-out.png",
    ᐃΔⵠⵠⵠΔⲆ: "img/season5-in.png",
    ΔᐃⲆⲆΔΔⵠ: "img/season5-click.png",
    ΔⵠΔΔⲆΔᐃ: "img/season6-out.png",
    ᐃᐃⵠᐃⲆⵠᐃ: "img/season6-in.png",
    ⵠⵠⵠᐃΔᐃᐃ: "img/season6-click.png",
    ᐃⵠᐃⲆⵠⵠⵠ: "img/total-lead-out.png",
    ᐃΔΔⲆΔΔΔ: "img/total-lead-in.png",
    ⵠⵠᐃⵠⲆΔⵠ: "img/total-lead-click.png",
    ⵠⲆΔⲆᐃΔⲆ: "img/normal-lead-out.png",
    ⵠᐃΔΔⲆⲆΔ: "img/normal-lead-in.png",
    ⵠⲆᐃᐃΔⲆᐃ: "img/normal-lead-click.png",
    ᐃⲆΔΔⲆⵠⲆ: "img/forest-lead-out.png",
    ᐃΔᐃⵠΔⵠⵠ: "img/forest-lead-in.png",
    ⵠⲆΔⵠⲆᐃⲆ: "img/forest-lead-click.png",
    ⲆᐃⲆⵠⲆᐃⵠ: "img/vampire-lead-out.png",
    ⵠΔⲆΔᐃᐃᐃ: "img/vampire-lead-in.png",
    ᐃⵠᐃᐃⵠⵠΔ: "img/vampire-lead-click.png",
    ⵠⲆⵠΔⲆΔᐃ: "img/zombie-lead-out.png",
    ⵠᐃⵠᐃⲆΔΔ: "img/zombie-lead-in.png",
    ⵠΔⵠᐃⵠⲆᐃ: "img/zombie-lead-click.png",
    ⵠΔⵠᐃᐃⵠᐃ: "img/day-level5.png",
    ⲆⲆⲆΔΔΔⲆ: "img/night-level5.png",
    ⲆΔⲆᐃⵠⲆΔ: "img/day-level10.png",
    ⵠΔⵠⲆⵠⵠⲆ: "img/night-level10.png",
    ᐃⲆⵠᐃΔᐃⵠ: "img/day-level15.png",
    ΔᐃⲆⵠⲆⲆΔ: "img/night-level15.png",
    ⲆⵠⵠⲆⵠⲆⵠ: "img/day-level20.png",
    ΔᐃⲆⵠⲆΔΔ: "img/night-level20.png",
    ΔⲆΔᐃⵠᐃⲆ: "img/day-level25.png",
    ⵠⵠⵠⲆⵠⲆᐃ: "img/night-level25.png",
    ⲆⲆΔⵠΔΔⲆ: "img/day-level30.png",
    ⲆΔⵠⲆⲆⲆⲆ: "img/night-level30.png",
    ᐃⵠⲆΔᐃⲆⲆ: "img/day-level35.png",
    ⲆᐃᐃᐃⵠΔᐃ: "img/night-level35.png",
    Δⵠᐃⵠᐃⵠᐃ: "img/day-level40.png",
    ᐃᐃᐃᐃⵠⵠᐃ: "img/night-level40.png",
    ⲆⲆΔᐃᐃΔⲆ: "img/day-level45.png",
    ΔⵠⵠΔΔⲆⲆ: "img/night-level45.png",
    ⵠΔⵠΔΔⵠᐃ: "img/day-level50.png",
    ᐃᐃⲆᐃⵠΔⵠ: "img/night-level50.png",
    ΔΔⲆⵠⲆⵠⵠ: "img/day-level55.png",
    ΔⵠⵠⲆᐃΔᐃ: "img/night-level55.png",
    ᐃΔⵠⲆⵠᐃΔ: "img/day-level60.png",
    ⵠᐃᐃⲆⵠⲆⲆ: "img/night-level60.png",
    ᐃⲆᐃⵠⲆⲆⵠ: "img/day-skin-devast0.png",
    ᐃⲆΔᐃᐃⲆⵠ: "img/night-skin-devast0.png",
    ⵠᐃⵠⲆᐃⲆΔ: "img/day-hand-devaster.png",
    ΔⲆᐃΔᐃⵠᐃ: "img/night-hand-devaster.png",
    ⵠΔΔⲆⵠᐃⵠ: "img/day-skin-star0.png",
    ᐃΔⲆⲆⵠⵠⲆ: "img/night-skin-star0.png",
    ΔⵠᐃⲆⲆⲆᐃ: "img/day-hand-star0.png",
    ᐃⲆⲆᐃⲆᐃΔ: "img/night-hand-star0.png",
    ΔᐃⲆⲆⵠΔⲆ: "img/day-vampire.png",
    ⲆᐃᐃᐃΔⲆⲆ: "img/night-vampire.png",
    ⵠΔⵠΔⵠᐃⲆ: "img/day-hand-vampire.png",
    ⵠΔⵠᐃⲆⲆΔ: "img/night-hand-vampire.png",
    ⲆᐃⵠⵠⵠⵠⲆ: "img/day-zombie.png",
    ΔⲆΔΔⵠⲆⵠ: "img/night-zombie.png",
    ᐃⲆΔᐃΔᐃⵠ: "img/day-hand-zombie.png",
    ΔⵠⲆᐃⲆⵠΔ: "img/night-hand-zombie.png",
    ΔΔΔᐃⲆΔᐃ: "img/day-skin113.png",
    ᐃⲆΔⲆᐃΔᐃ: "img/night-skin113.png",
    ᐃΔⲆΔⲆΔⵠ: "img/day-hand-skin113.png",
    ᐃΔᐃⵠᐃⲆΔ: "img/night-hand-skin113.png",
    ΔᐃⲆΔᐃᐃΔ: "img/day-skin0.png",
    ΔⲆⵠΔΔΔᐃ: "img/night-skin0.png",
    ⵠⵠⵠᐃΔΔᐃ: "img/day-skin1.png",
    Δⵠᐃⵠⵠⵠᐃ: "img/night-skin1.png",
    ⲆⲆΔΔᐃⲆᐃ: "img/day-skin2.png",
    ᐃⵠΔᐃΔᐃⵠ: "img/night-skin2.png",
    ΔΔⲆΔΔΔⲆ: "img/day-skin3.png",
    ⵠⲆᐃᐃΔⲆΔ: "img/night-skin3.png",
    ⵠΔⵠⲆΔΔᐃ: "img/day-skin4.png",
    ᐃⲆⵠᐃⵠⵠΔ: "img/night-skin4.png",
    ΔⲆᐃᐃⲆΔⲆ: "img/day-skin5.png",
    ᐃᐃᐃᐃᐃᐃⵠ: "img/night-skin5.png",
    ⵠΔᐃΔᐃΔᐃ: "img/day-skin6.png",
    ΔᐃⲆΔⵠⵠᐃ: "img/night-skin6.png",
    ΔᐃⲆᐃⵠⵠᐃ: "img/day-skin7.png",
    ⲆΔᐃᐃⲆⲆΔ: "img/night-skin7.png",
    ᐃᐃᐃᐃⲆΔᐃ: "img/day-skin8.png",
    ᐃᐃΔⵠᐃΔⲆ: "img/night-skin8.png",
    ΔⲆᐃⵠⵠⲆⵠ: "img/day-skin9.png",
    ᐃᐃⵠΔᐃᐃΔ: "img/night-skin9.png",
    ΔⵠⲆᐃᐃⲆⲆ: "img/day-skin10.png",
    ⵠΔΔᐃΔⵠᐃ: "img/night-skin10.png",
    ⲆᐃΔⵠᐃᐃⵠ: "img/day-skin11.png",
    ᐃΔᐃⲆⲆⵠⲆ: "img/night-skin11.png",
    ΔⲆᐃᐃΔᐃⲆ: "img/day-skin12.png",
    ᐃᐃⵠⵠⵠⵠΔ: "img/night-skin12.png",
    ᐃᐃᐃΔⲆⲆᐃ: "img/day-skin13.png",
    ᐃΔᐃⲆⲆᐃⵠ: "img/night-skin13.png",
    ᐃᐃⵠⵠΔᐃⵠ: "img/day-skin14.png",
    ᐃᐃΔⲆᐃⲆⵠ: "img/night-skin14.png",
    ᐃΔⵠⵠⲆΔⲆ: "img/day-skin15.png",
    ΔᐃⵠⵠᐃᐃⲆ: "img/night-skin15.png",
    ⵠᐃᐃⵠⲆΔΔ: "img/day-skin16.png",
    ⵠᐃᐃΔᐃⲆⲆ: "img/night-skin16.png",
    ⲆⲆⲆΔⵠⵠⲆ: "img/day-skin17.png",
    ⲆᐃΔᐃⵠᐃᐃ: "img/night-skin17.png",
    ᐃⲆⵠΔΔⲆᐃ: "img/day-skin18.png",
    ᐃᐃⵠⵠⲆⵠⲆ: "img/night-skin18.png",
    ⵠⵠⵠⲆⲆⵠⲆ: "img/day-skin19.png",
    ⵠΔⲆᐃΔΔᐃ: "img/night-skin19.png",
    ⲆᐃⲆⲆᐃⵠᐃ: "img/day-skin20.png",
    ΔⵠⵠᐃᐃΔⲆ: "img/night-skin20.png",
    ⲆⵠⲆⵠΔⵠᐃ: "img/day-skin21.png",
    ⲆⵠᐃⲆⵠΔⵠ: "img/night-skin21.png",
    ΔⲆᐃᐃⲆⵠΔ: "img/day-skin22.png",
    ⲆΔⵠⵠᐃᐃⲆ: "img/night-skin22.png",
    ΔΔⲆⵠΔⵠⵠ: "img/day-skin23.png",
    ᐃᐃⲆᐃᐃⵠᐃ: "img/night-skin23.png",
    ΔⲆⲆⵠᐃᐃⵠ: "img/day-skin24.png",
    ⲆᐃⵠΔⵠΔⵠ: "img/night-skin24.png",
    ΔΔⲆᐃΔⲆᐃ: "img/day-skin25.png",
    ΔᐃⲆΔΔⲆᐃ: "img/night-skin25.png",
    ΔᐃⲆᐃⲆΔⵠ: "img/day-skin26.png",
    ᐃᐃⵠΔⵠΔⵠ: "img/night-skin26.png",
    ΔᐃΔΔᐃΔᐃ: "img/day-skin27.png",
    ᐃⲆⵠᐃΔⵠΔ: "img/night-skin27.png",
    ⲆΔΔᐃⵠⵠᐃ: "img/day-skin28.png",
    ⵠⵠΔΔⵠⲆᐃ: "img/night-skin28.png",
    ᐃΔᐃΔΔᐃᐃ: "img/day-skin29.png",
    ⲆⵠⵠⵠΔᐃΔ: "img/night-skin29.png",
    ⲆⲆᐃⵠⲆⵠᐃ: "img/day-skin30.png",
    ⲆᐃᐃⲆⲆΔⲆ: "img/night-skin30.png",
    ⲆΔⲆⵠⵠⵠⵠ: "img/day-skin31.png",
    ᐃⵠⵠᐃᐃᐃⵠ: "img/night-skin31.png",
    ᐃⵠⲆΔΔᐃⵠ: "img/day-skin32.png",
    ⲆΔⲆⵠᐃⵠΔ: "img/night-skin32.png",
    ⵠΔΔᐃΔΔᐃ: "img/day-skin33.png",
    ᐃⵠⲆⲆᐃⲆⲆ: "img/night-skin33.png",
    ⲆⵠᐃΔΔΔⵠ: "img/day-skin34.png",
    ᐃⵠᐃᐃⵠᐃΔ: "img/night-skin34.png",
    ΔᐃⵠΔⲆⵠᐃ: "img/day-skin35.png",
    ⲆΔΔⲆⵠᐃᐃ: "img/night-skin35.png",
    ⲆΔΔⲆⵠⵠⲆ: "img/day-skin36.png",
    ΔΔⵠⲆΔᐃⵠ: "img/night-skin36.png",
    ΔⲆⲆⵠⲆⵠⲆ: "img/day-skin37.png",
    ⵠΔⲆⲆⵠⵠΔ: "img/night-skin37.png",
    ⵠⲆΔΔⲆⵠⵠ: "img/day-skin38.png",
    ⵠᐃⲆᐃΔΔⵠ: "img/night-skin38.png",
    ⵠⲆᐃΔⲆᐃᐃ: "img/day-skin39.png",
    ⲆⲆⲆΔΔⲆᐃ: "img/night-skin39.png",
    ⵠⵠΔᐃΔΔᐃ: "img/day-skin40.png",
    ⲆᐃⲆΔΔᐃⲆ: "img/night-skin40.png",
    ⵠⵠⲆᐃΔΔΔ: "img/day-skin41.png",
    ⵠᐃⲆᐃΔᐃΔ: "img/night-skin41.png",
    ⵠᐃⲆⵠⲆΔⲆ: "img/day-skin42.png",
    ⲆⲆΔⵠⲆⲆᐃ: "img/night-skin42.png",
    ⵠⲆΔΔᐃⲆⲆ: "img/day-skin43.png",
    ΔⲆⲆⲆⵠΔᐃ: "img/night-skin43.png",
    ⵠᐃᐃΔⲆⵠΔ: "img/day-skin44.png",
    ᐃⲆᐃⵠΔᐃⵠ: "img/night-skin44.png",
    ⵠⵠⲆΔᐃⵠᐃ: "img/day-skin45.png",
    ⵠᐃΔᐃΔⵠΔ: "img/night-skin45.png",
    ᐃⲆⲆⲆⲆΔΔ: "img/day-skin46.png",
    ⲆⲆⲆᐃⲆᐃⵠ: "img/night-skin46.png",
    ⲆᐃᐃⲆⵠⵠⵠ: "img/day-skin47.png",
    ⲆⲆⲆⲆⲆⵠᐃ: "img/night-skin47.png",
    ΔΔⲆᐃⵠⵠΔ: "img/day-skin48.png",
    ᐃⲆⵠΔΔᐃⲆ: "img/night-skin48.png",
    ⵠᐃΔⲆⵠΔᐃ: "img/day-skin49.png",
    ⲆᐃⵠΔⵠⲆⵠ: "img/night-skin49.png",
    ⵠⲆⵠⵠΔᐃⲆ: "img/day-skin50.png",
    ⵠⲆΔΔⲆⵠⲆ: "img/night-skin50.png",
    ⵠΔⲆⲆⲆᐃⵠ: "img/day-skin51.png",
    ᐃⵠⲆΔᐃⲆᐃ: "img/night-skin51.png",
    ᐃⵠΔⵠⲆⵠⵠ: "img/day-skin52.png",
    ⲆⵠΔⲆᐃⵠΔ: "img/night-skin52.png",
    ᐃⵠⵠⲆⲆΔΔ: "img/day-skin53.png",
    ΔⲆᐃⲆⲆⵠⲆ: "img/night-skin53.png",
    Δⵠᐃᐃⵠᐃⵠ: "img/day-skin54.png",
    ⵠᐃⲆᐃᐃᐃⵠ: "img/night-skin54.png",
    ΔⲆⵠⵠΔⵠⵠ: "img/day-skin55.png",
    ⵠΔΔΔⲆⵠⲆ: "img/night-skin55.png",
    ΔⲆⲆᐃⵠᐃⲆ: "img/day-skin56.png",
    ⲆⵠⲆⲆᐃⵠΔ: "img/night-skin56.png",
    ⵠᐃⵠⲆⲆᐃΔ: "img/day-skin57.png",
    ΔΔⲆΔΔᐃΔ: "img/night-skin57.png",
    ⵠⵠⵠⵠΔⲆΔ: "img/day-skin58.png",
    ΔᐃⵠΔΔΔᐃ: "img/night-skin58.png",
    ᐃᐃΔᐃⲆᐃⵠ: "img/day-skin59.png",
    ΔⵠΔⵠⵠⵠⵠ: "img/night-skin59.png",
    ⲆᐃΔⲆⵠⵠⵠ: "img/day-skin60.png",
    ⵠᐃᐃⲆᐃⵠⲆ: "img/night-skin60.png",
    ⵠΔᐃⲆⲆⵠΔ: "img/day-skin61.png",
    ⵠⲆΔⵠⵠᐃⵠ: "img/night-skin61.png",
    ⲆⵠⲆⲆᐃᐃⲆ: "img/day-skin62.png",
    ⲆΔⵠᐃΔᐃⲆ: "img/night-skin62.png",
    ΔⲆⵠΔᐃⵠᐃ: "img/day-skin63.png",
    ᐃΔΔⵠⵠᐃᐃ: "img/night-skin63.png",
    ᐃⲆⵠᐃᐃΔⲆ: "img/day-skin64.png",
    ΔΔⵠⲆᐃⲆΔ: "img/night-skin64.png",
    ᐃᐃⲆᐃᐃᐃᐃ: "img/day-skin65.png",
    ΔΔᐃᐃΔⲆⲆ: "img/night-skin65.png",
    ᐃⵠΔᐃᐃⲆΔ: "img/day-skin66.png",
    ᐃᐃᐃᐃⵠⲆΔ: "img/night-skin66.png",
    ⲆⲆΔⵠⲆᐃᐃ: "img/day-skin67.png",
    ᐃⵠΔⵠⲆᐃΔ: "img/night-skin67.png",
    ⲆⵠᐃⲆΔⲆᐃ: "img/day-skin68.png",
    ΔⲆⵠⵠΔⲆᐃ: "img/night-skin68.png",
    ⲆⲆⲆⲆᐃⵠᐃ: "img/day-skin69.png",
    ΔΔⵠⵠⲆᐃᐃ: "img/night-skin69.png",
    ᐃⵠᐃⵠΔⲆΔ: "img/day-skin70.png",
    ΔⵠΔᐃⵠⲆΔ: "img/night-skin70.png",
    ΔᐃΔᐃᐃΔᐃ: "img/day-skin71.png",
    ⲆᐃᐃⵠΔⲆⵠ: "img/night-skin71.png",
    ᐃⲆΔⲆᐃᐃⲆ: "img/day-skin72.png",
    ᐃΔΔΔⲆᐃΔ: "img/night-skin72.png",
    ΔⵠᐃᐃⵠᐃΔ: "img/day-skin73.png",
    ΔΔΔⵠᐃⲆⵠ: "img/night-skin73.png",
    ᐃⲆᐃⵠⵠᐃᐃ: "img/day-skin74.png",
    ᐃᐃΔⲆⵠⲆᐃ: "img/night-skin74.png",
    ΔⲆΔᐃᐃᐃᐃ: "img/day-skin75.png",
    ⲆⵠⲆᐃⵠⵠⲆ: "img/night-skin75.png",
    ⲆⵠΔΔᐃᐃΔ: "img/day-skin76.png",
    ᐃⵠⲆΔⲆⲆⵠ: "img/night-skin76.png",
    ⲆⵠΔⵠⲆᐃᐃ: "img/day-skin77.png",
    ᐃᐃΔᐃΔⲆⵠ: "img/night-skin77.png",
    ΔᐃᐃΔᐃΔⵠ: "img/day-skin78.png",
    ΔⵠⵠΔⲆⲆⵠ: "img/night-skin78.png",
    ⵠΔⲆΔⵠΔⲆ: "img/day-skin79.png",
    ⲆΔΔᐃⵠⵠⵠ: "img/night-skin79.png",
    ⲆⲆⵠΔΔΔⵠ: "img/day-skin80.png",
    ᐃⲆΔΔⲆⵠⵠ: "img/night-skin80.png",
    ΔᐃᐃⵠⲆⲆⵠ: "img/day-skin81.png",
    ⲆΔᐃⵠᐃᐃΔ: "img/night-skin81.png",
    ΔⲆⲆᐃᐃᐃⵠ: "img/day-skin82.png",
    ⵠⵠᐃⵠΔΔⵠ: "img/night-skin82.png",
    ΔⲆⵠⵠⲆⵠΔ: "img/day-skin83.png",
    ΔΔⵠⵠᐃΔΔ: "img/night-skin83.png",
    ⵠᐃᐃⵠᐃⲆᐃ: "img/day-skin84.png",
    ᐃⵠⲆⵠᐃᐃⵠ: "img/night-skin84.png",
    ᐃΔⵠⵠᐃⵠⲆ: "img/day-skin85.png",
    ᐃⲆⵠⲆΔⵠⲆ: "img/night-skin85.png",
    ᐃΔΔⵠΔΔⲆ: "img/day-skin86.png",
    ΔⵠⵠᐃΔⵠᐃ: "img/night-skin86.png",
    ⲆΔⵠᐃⲆᐃⲆ: "img/day-skin87.png",
    ᐃⲆⵠⵠⲆⲆⲆ: "img/night-skin87.png",
    ⵠⲆᐃⵠⵠᐃΔ: "img/day-skin88.png",
    ⵠⲆⲆΔⵠⲆᐃ: "img/night-skin88.png",
    ⵠⵠⲆⵠΔⵠⵠ: "img/day-skin89.png",
    ΔᐃᐃᐃΔⵠᐃ: "img/night-skin89.png",
    ⵠΔΔⵠⵠΔᐃ: "img/day-skin90.png",
    ⲆⲆΔΔᐃⲆⵠ: "img/night-skin90.png",
    ⲆⵠᐃΔⲆⲆΔ: "img/day-skin91.png",
    ΔⵠΔᐃⲆΔᐃ: "img/night-skin91.png",
    ⲆⲆⵠⵠᐃⲆᐃ: "img/day-skin92.png",
    ᐃⵠΔⵠΔΔⲆ: "img/night-skin92.png",
    ⵠᐃⲆⲆΔⵠΔ: "img/day-skin93.png",
    ⵠΔⲆⵠⵠΔⵠ: "img/night-skin93.png",
    ΔⲆⲆΔⵠⵠⵠ: "img/day-skin94.png",
    ΔΔᐃⲆΔⵠⵠ: "img/night-skin94.png",
    ᐃΔⵠⵠᐃᐃⵠ: "img/day-skin95.png",
    ⵠΔⲆᐃᐃᐃⲆ: "img/night-skin95.png",
    ᐃⵠⲆᐃⲆΔⵠ: "img/day-skin96.png",
    ⵠⲆⲆΔΔᐃᐃ: "img/night-skin96.png",
    ᐃⲆᐃΔᐃᐃⲆ: "img/day-skin97.png",
    ΔᐃΔⲆⵠⵠⵠ: "img/night-skin97.png",
    ⵠⵠⵠΔⵠⲆⵠ: "img/day-skin98.png",
    ⲆᐃΔΔΔΔⲆ: "img/night-skin98.png",
    ᐃᐃΔᐃᐃⵠᐃ: "img/day-skin99.png",
    ⵠⵠᐃΔᐃᐃⵠ: "img/night-skin99.png",
    ⲆᐃⲆⲆⵠᐃⵠ: "img/day-skin100.png",
    ⲆΔⵠⲆᐃⲆᐃ: "img/night-skin100.png",
    ᐃΔⲆᐃⵠᐃΔ: "img/day-skin101.png",
    ⲆᐃⲆⵠⵠⵠΔ: "img/night-skin101.png",
    ΔᐃⵠᐃⵠᐃⲆ: "img/day-skin102.png",
    ⲆΔᐃᐃᐃⲆⵠ: "img/night-skin102.png",
    ΔᐃⲆⲆᐃⲆΔ: "img/day-skin103.png",
    ᐃΔⵠΔᐃᐃⵠ: "img/night-skin103.png",
    ΔⲆⵠᐃⵠⲆⵠ: "img/day-skin104.png",
    ⵠⲆΔⵠΔΔⵠ: "img/night-skin104.png",
    ΔⵠⵠΔⵠⲆᐃ: "img/day-skin105.png",
    ⲆⵠᐃΔⵠⲆⵠ: "img/night-skin105.png",
    ΔΔΔΔⲆᐃΔ: "img/day-skin106.png",
    ΔⲆΔΔᐃⲆΔ: "img/night-skin106.png",
    ⵠⲆΔⵠⵠᐃΔ: "img/day-skin107.png",
    ᐃΔᐃⵠΔⲆΔ: "img/night-skin107.png",
    ⲆⵠΔᐃⲆΔΔ: "img/day-skin108.png",
    ᐃᐃⵠΔΔⵠΔ: "img/night-skin108.png",
    ⲆⲆⵠᐃⵠᐃΔ: "img/day-skin109.png",
    ΔΔᐃⲆⲆΔᐃ: "img/night-skin109.png",
    ᐃⵠᐃⵠᐃᐃΔ: "img/day-skin110.png",
    ΔᐃᐃΔⵠΔⲆ: "img/night-skin110.png",
    ⵠⵠᐃΔⵠᐃⵠ: "img/day-skin111.png",
    ΔⵠⲆⲆⲆⵠΔ: "img/night-skin111.png",
    ⵠⵠⵠⵠᐃᐃΔ: "img/day-skin112.png",
    ⵠⵠⲆᐃⲆⵠⲆ: "img/night-skin112.png",
    ⵠΔΔⵠⲆⲆⲆΔΔ: "img/day-skin113.png",
    ⲆⵠⲆⲆⲆᐃΔⲆΔ: "img/night-skin113.png",
    ΔⲆᐃⲆⵠΔΔ: "img/day-skin114.png",
    ⵠᐃⲆΔⵠⵠⲆ: "img/night-skin114.png",
    ⵠΔΔΔⵠⲆΔ: "img/day-skin115.png",
    ⲆⵠⵠⵠᐃⲆⲆ: "img/night-skin115.png",
    ⲆΔᐃΔⲆΔⵠ: "img/day-skin116.png",
    ᐃⲆᐃᐃΔΔΔ: "img/night-skin116.png",
    ᐃᐃⵠⵠᐃⵠⲆ: "img/day-skin117.png",
    ΔⲆⵠᐃⲆᐃⵠ: "img/night-skin117.png",
    ΔΔᐃⲆⵠⵠⵠ: "img/day-skin118.png",
    ᐃΔᐃⲆᐃΔΔ: "img/night-skin118.png",
    ᐃΔᐃᐃΔᐃΔ: "img/day-skin119.png",
    ⲆⵠⲆⵠΔⲆᐃ: "img/night-skin119.png",
    ⲆᐃⲆΔⵠΔⵠ: "img/day-skin120.png",
    ᐃⵠᐃⵠᐃΔⲆ: "img/night-skin120.png",
    ΔᐃⲆᐃᐃΔⵠ: "img/day-skin121.png",
    ΔⲆᐃᐃΔΔⲆ: "img/night-skin121.png",
    ⵠΔⲆᐃΔⵠⵠ: "img/day-skin122.png",
    ΔⲆⵠΔⵠᐃᐃ: "img/night-skin122.png",
    ⲆⲆⵠᐃΔⵠᐃ: "img/day-skin123.png",
    ⵠᐃⵠᐃⲆⵠⵠ: "img/night-skin123.png",
    ⲆⵠⵠΔΔⵠᐃ: "img/day-skin124.png",
    ⲆΔᐃΔⲆΔᐃ: "img/night-skin124.png",
    ⲆΔⵠⵠΔⲆᐃ: "img/day-skin125.png",
    ᐃⵠΔΔΔⵠⵠ: "img/night-skin125.png",
    ᐃΔⲆⵠᐃᐃⵠ: "img/day-skin126.png",
    ⲆⵠⵠΔⵠΔⵠ: "img/night-skin126.png",
    ΔᐃⵠΔⵠⵠⵠ: "img/day-skin127.png",
    ᐃΔᐃⵠⲆΔⵠ: "img/night-skin127.png",
    ⵠⵠⵠⲆΔΔⲆ: "img/day-skin128.png",
    ⲆⵠⵠⲆⵠᐃⵠ: "img/night-skin128.png",
    ΔΔΔΔΔⵠⲆ: "img/day-skin129.png",
    ΔⵠΔᐃᐃᐃᐃ: "img/night-skin129.png",
    ᐃⵠΔΔΔᐃⲆ: "img/day-skin130-1.png",
    ᐃⵠⵠⵠΔⵠΔ: "img/night-skin130-1.png",
    ⵠΔⵠⵠᐃⲆᐃ: "img/day-skin131.png",
    ᐃⲆⲆΔΔΔΔ: "img/night-skin131.png",
    ᐃᐃΔΔⵠᐃⵠ: "img/day-skin132.png",
    ᐃⲆⵠⲆᐃⵠⲆ: "img/night-skin132.png",
    ΔⲆⲆΔⵠΔⵠ: "img/day-skin133.png",
    ΔᐃⲆⲆⵠⲆᐃ: "img/night-skin133.png",
    ⵠⲆⵠⲆⵠⵠΔ: "img/day-skin134.png",
    ⲆⵠᐃⵠⵠⲆⲆ: "img/night-skin134.png",
    ΔⵠΔⵠᐃⲆΔ: "img/day-skin135.png",
    ᐃⵠⲆⲆᐃⵠⲆ: "img/night-skin135.png",
    ⲆⲆΔⵠⵠᐃⵠ: "img/day-skin136.png",
    ⵠⵠⲆᐃⲆⲆⵠ: "img/night-skin136.png",
    ⵠⵠⵠᐃᐃᐃⲆ: "img/day-skin137.png",
    ⵠᐃᐃⵠᐃᐃⵠ: "img/night-skin137.png",
    ᐃⲆᐃⵠⵠⵠᐃ: "img/day-skin138.png",
    ᐃⲆΔⲆᐃΔⲆ: "img/night-skin138.png",
    ᐃΔᐃⵠΔΔⵠ: "img/day-skin139.png",
    ΔⵠΔⵠᐃⵠΔ: "img/night-skin139.png",
    ⲆⲆᐃⵠⵠᐃⲆ: "img/day-skin140.png",
    ⵠᐃⵠⵠΔᐃΔ: "img/night-skin140.png",
    ΔΔⵠⵠᐃΔᐃ: "img/day-skin141.png",
    ΔΔⲆⲆᐃΔⲆ: "img/night-skin141.png",
    ⲆΔᐃΔΔΔΔ: "img/day-skin142.png",
    ⲆⵠᐃᐃⲆᐃᐃ: "img/night-skin142.png",
    Ⲇⵠⵠᐃⵠᐃⵠ: "img/day-skin143.png",
    ⵠⵠᐃⵠⲆᐃᐃ: "img/night-skin143.png",
    ΔⵠⵠᐃᐃΔⵠ: "img/day-skin144.png",
    ⲆⵠᐃΔⵠΔΔ: "img/night-skin144.png",
    ⲆⵠᐃⵠᐃⵠⲆ: "img/day-skin145.png",
    ᐃⵠΔⵠΔᐃⵠ: "img/night-skin145.png",
    ⲆⵠⲆΔⵠⲆⵠ: "img/day-skin146.png",
    ΔⲆᐃᐃΔⲆⵠ: "img/night-skin146.png",
    ΔⲆⵠᐃᐃᐃᐃ: "img/day-skin147.png",
    ᐃⵠᐃᐃΔⲆᐃ: "img/night-skin147.png",
    ⲆⲆⲆⲆⵠᐃᐃ: "img/day-skin148.png",
    ⵠᐃⲆⵠⵠⵠⲆ: "img/night-skin148.png",
    ᐃⲆⵠⵠᐃⲆᐃ: "img/day-skin149.png",
    ᐃⲆΔⲆΔⵠⲆ: "img/night-skin149.png",
    ⲆⲆⲆᐃⲆᐃΔ: "img/day-skin150.png",
    ⵠⵠⲆⲆⵠᐃⵠ: "img/night-skin150.png",
    ᐃⲆⵠⵠⲆΔΔ: "img/day-skin151.png",
    ⲆΔᐃᐃⲆᐃΔ: "img/night-skin151.png",
    ⵠᐃⲆⵠΔᐃⵠ: "img/day-skin152.png",
    ⲆⲆⲆⲆᐃΔΔ: "img/night-skin152.png",
    ΔΔΔⵠⲆⵠⵠ: "img/day-skin153.png",
    ΔΔⲆΔᐃᐃⲆ: "img/night-skin153.png",
    ⲆᐃᐃⲆⲆᐃⵠ: "img/day-skin154.png",
    ᐃⵠⵠⵠΔᐃⲆ: "img/night-skin154.png",
    ⵠⲆᐃᐃⵠⵠᐃ: "img/day-skin155.png",
    ⵠΔⵠᐃᐃⲆᐃ: "img/night-skin155.png",
    ΔⲆⲆⵠΔᐃⲆ: "img/day-skin156.png",
    ᐃᐃᐃⵠΔΔⲆ: "img/night-skin156.png",
    ⲆⵠᐃᐃⵠΔⲆ: "img/day-skin157.png",
    ⲆΔΔⵠⵠΔᐃ: "img/night-skin157.png",
    ᐃΔᐃⲆᐃⲆᐃ: "img/day-skin158.png",
    ᐃⲆⵠⵠⲆⲆⵠ: "img/night-skin158.png",
    ᐃᐃⵠⲆΔΔᐃ: "img/day-skin159.png",
    ⲆⵠⲆⵠΔΔᐃ: "img/night-skin159.png",
    ⵠⵠⵠᐃΔⲆⲆ: "img/day-skin160.png",
    ΔΔᐃⵠⵠⲆᐃ: "img/night-skin160.png",
    ΔΔᐃΔⵠΔᐃ: "img/day-skin161.png",
    ᐃⵠΔΔᐃᐃⲆ: "img/night-skin161.png",
    ᐃΔⲆⲆΔⲆⵠ: "img/day-skin162.png",
    ⵠΔⵠⲆᐃΔⵠ: "img/night-skin162.png",
    ⲆⵠᐃᐃΔⲆᐃ: "img/day-skin163.png",
    ΔⲆⵠⲆⵠⲆⵠ: "img/night-skin163.png",
    ⵠᐃⲆΔⲆⵠⵠ: "img/day-skin164.png",
    ⲆⲆᐃΔᐃⵠΔ: "img/night-skin164.png",
    ⲆΔⵠⲆⵠⵠᐃ: "img/day-skin165.png",
    ΔⲆⵠⵠⲆⲆⲆ: "img/night-skin165.png",
    ΔΔΔᐃⵠᐃΔ: "img/day-skin166.png",
    ⵠⵠⵠΔⵠΔⲆ: "img/night-skin166.png",
    ᐃⲆΔⲆΔⵠⵠ: "img/day-skin167.png",
    ⵠⲆΔⵠⲆⵠᐃ: "img/night-skin167.png",
    ᐃᐃⵠᐃⵠΔᐃ: "img/day-skin168.png",
    ᐃᐃΔΔⲆⵠΔ: "img/night-skin168.png",
    ⲆⵠⲆⲆΔΔⲆ: "img/day-skin169.png",
    ᐃⵠⲆᐃΔΔⵠ: "img/night-skin169.png",
    ⵠΔⲆΔΔⵠᐃ: "img/day-skin170.png",
    ᐃᐃΔᐃⵠⲆᐃ: "img/night-skin170.png",
    ΔᐃⲆᐃᐃΔᐃ: "img/day-skin171.png",
    ΔⲆⵠΔᐃᐃᐃ: "img/night-skin171.png",
    ᐃΔΔΔΔᐃⲆ: "img/day-skin172.png",
    ⲆⵠⵠⲆⵠⵠⲆ: "img/night-skin172.png",
    ⵠⲆⲆᐃⵠⲆᐃ: "img/day-skin173.png",
    ΔⵠΔⲆΔⵠⵠ: "img/night-skin173.png",
    ΔⵠᐃⲆⵠᐃⵠ: "img/day-skin174.png",
    ⲆⲆᐃᐃΔΔⵠ: "img/night-skin174.png",
    ᐃⲆΔⲆⲆⵠⵠ: "img/day-skin175.png",
    ⲆΔᐃⲆⵠᐃΔ: "img/night-skin175.png",
    ⵠᐃⲆᐃᐃᐃΔ: "img/day-skin176.png",
    ΔΔᐃⲆⲆᐃᐃ: "img/night-skin176.png",
    ⲆΔⵠΔⲆΔΔ: "img/day-skin177.png",
    ΔΔᐃⵠΔⲆⲆ: "img/night-skin177.png",
    ⵠⲆⲆⵠⵠⲆⲆ: "img/day-skin178.png",
    ΔⲆⲆⵠᐃᐃᐃ: "img/night-skin178.png",
    ᐃⵠⵠΔⵠᐃⲆ: "img/day-skin179.png",
    ᐃⲆⵠΔᐃⲆⲆ: "img/night-skin179.png",
    ΔΔΔᐃⲆⲆΔ: "img/day-skin180.png",
    ⲆⲆᐃⵠⵠⵠⵠ: "img/night-skin180.png",
    ΔⵠΔⵠᐃⵠⲆ: "img/day-skin181.png",
    ΔⵠᐃⵠΔⲆᐃ: "img/night-skin181.png",
    ΔⲆΔᐃᐃⲆᐃ: "img/day-skin182.png",
    ΔΔΔᐃΔⲆⲆ: "img/night-skin182.png",
    ΔⲆⵠⵠⵠᐃⵠ: "img/day-skin183.png",
    ᐃⲆⵠᐃⲆΔΔ: "img/night-skin183.png",
    ᐃΔⲆᐃΔⵠⵠ: "img/day-skin184.png",
    ⵠⵠΔⵠΔⵠᐃ: "img/night-skin184.png",
    ⲆΔⲆᐃⵠᐃⵠ: "img/day-skin185.png",
    ⲆᐃⵠⵠΔᐃΔ: "img/night-skin185.png",
    ⲆⲆⵠᐃⲆᐃⲆ: "img/day-skin186.png",
    ΔᐃⵠⲆⵠⵠⵠ: "img/night-skin186.png",
    ΔⵠΔᐃⲆΔΔ: "img/day-skin187.png",
    ⵠΔⲆⵠⵠᐃΔ: "img/night-skin187.png",
    ⲆⵠᐃΔⵠΔⲆ: "img/day-skin188.png",
    ᐃⵠΔΔᐃⵠᐃ: "img/night-skin188.png",
    ⵠⲆⵠᐃᐃᐃⲆ: "img/day-skin189.png",
    ΔᐃᐃⲆᐃΔᐃ: "img/night-skin189.png",
    ⵠⲆᐃᐃⵠᐃⲆ: "img/day-skin190.png",
    ⵠᐃᐃΔᐃⵠΔ: "img/night-skin190.png",
    ⲆⲆᐃⲆⵠΔᐃ: "img/day-skin191.png",
    ⵠⵠⵠⲆᐃΔⵠ: "img/night-skin191.png",
    ⵠᐃⲆᐃᐃⵠΔ: "img/day-skin192.png",
    ⲆΔⲆⲆⵠᐃΔ: "img/night-skin192.png",
    ⲆⵠΔⵠᐃⵠᐃ: "img/day-skin193.png",
    ᐃⲆⵠⲆⵠⲆⵠ: "img/night-skin193.png",
    ⵠᐃΔⵠⵠⵠᐃ: "img/day-skin194.png",
    ᐃΔⵠⲆᐃⲆᐃ: "img/night-skin194.png",
    ⲆΔΔΔΔᐃⵠ: "img/day-skin195.png",
    ⵠᐃⲆΔᐃΔⲆ: "img/night-skin195.png",
    ⲆⵠⲆⲆⲆⵠΔ: "img/day-skin196.png",
    ⲆⵠΔᐃⲆΔᐃ: "img/night-skin196.png",
    ⲆΔⵠⲆⲆΔΔ: "img/day-skin197.png",
    ⵠⵠⲆᐃᐃΔⲆ: "img/night-skin197.png",
    ΔᐃⵠⲆᐃᐃⵠ: "img/day-skin198.png",
    ᐃΔⲆΔΔΔΔ: "img/night-skin198.png",
    ᐃΔΔⲆⲆΔⵠ: "img/day-skin199.png",
    ΔⲆᐃᐃⵠⲆᐃ: "img/night-skin199.png",
    ⵠᐃΔⵠⵠΔⲆ: "img/day-skin200.png",
    ᐃᐃᐃⵠᐃⲆⵠ: "img/night-skin200.png",
    ᐃⲆΔᐃⲆΔⵠ: "img/day-skin201.png",
    ΔΔᐃΔΔΔⵠ: "img/night-skin201.png",
    ΔⵠᐃᐃⵠΔⵠ: "img/day-skin202.png",
    ⲆⲆᐃΔΔᐃⵠ: "img/night-skin202.png",
    ΔⵠⲆΔⵠᐃᐃ: "img/day-skin203.png",
    ΔⲆⵠⲆⲆⲆⲆ: "img/night-skin203.png",
    ⵠᐃⵠᐃΔᐃⲆ: "img/day-skin204.png",
    ⵠⵠΔⵠⲆⲆᐃ: "img/night-skin204.png",
    ⵠᐃᐃⵠⵠΔⲆ: "img/day-skin205.png",
    ⵠⵠᐃᐃⵠⲆᐃ: "img/night-skin205.png",
    ΔⲆⵠΔΔⲆⵠ: "img/day-skin206.png",
    ⲆⲆΔⲆᐃⲆᐃ: "img/night-skin206.png",
    ΔⵠⵠΔⲆΔⲆ: "img/day-skin207.png",
    ΔⲆᐃΔᐃΔΔ: "img/night-skin207.png",
    ⵠⲆⲆⲆΔᐃⵠ: "img/day-skin208.png",
    ⲆⲆΔᐃΔΔⲆ: "img/night-skin208.png",
    ᐃΔᐃᐃᐃᐃᐃ: "img/day-skin209.png",
    ΔΔⲆᐃⲆⲆⵠ: "img/night-skin209.png",
    ⲆⲆⵠⲆΔᐃΔ: "img/day-skin210.png",
    ⲆⲆⵠΔΔᐃⵠ: "img/night-skin210.png",
    ⲆⲆⵠⵠᐃᐃⲆ: "img/day-skin211.png",
    ⵠᐃⵠΔⲆⵠΔ: "img/night-skin211.png",
    ΔⲆⵠᐃᐃΔⵠ: "img/day-skin212.png",
    ⲆⲆⲆᐃⲆΔⲆ: "img/night-skin212.png",
    ⲆᐃΔⲆΔⲆⵠ: "img/day-skin213.png",
    ⵠⵠⵠⲆⲆⵠᐃ: "img/night-skin213.png",
    ᐃⵠⵠᐃⵠᐃᐃ: "img/day-skin214.png",
    ⲆⲆΔΔᐃⵠᐃ: "img/night-skin214.png",
    ⲆⵠⵠⲆΔⵠΔ: "img/day-hand-skin0.png",
    ⵠⲆⲆⲆⵠⲆⵠ: "img/night-hand-skin0.png",
    ⲆⲆΔᐃᐃⵠΔ: "img/day-hand-skin1.png",
    ⲆᐃᐃᐃⲆΔᐃ: "img/night-hand-skin1.png",
    ᐃⲆΔⲆⵠⲆⵠ: "img/day-hand-skin2.png",
    ⵠΔᐃⵠΔᐃⲆ: "img/night-hand-skin2.png",
    Δᐃⵠⵠᐃᐃᐃ: "img/day-hand-skin3.png",
    ⵠΔⵠⲆΔⲆΔ: "img/night-hand-skin3.png",
    ⵠᐃᐃᐃΔⵠᐃ: "img/day-hand-skin4.png",
    ᐃⵠᐃΔⵠᐃⵠ: "img/night-hand-skin4.png",
    ⲆⵠΔⲆⲆⵠᐃ: "img/day-hand-skin5.png",
    ⲆⲆⲆⵠⲆᐃΔ: "img/night-hand-skin5.png",
    ⵠⲆΔΔᐃᐃⵠ: "img/day-hand-skin6.png",
    ⵠΔΔⲆᐃΔΔⵠⵠ: "img/night-hand-skin6.png",
    ⵠΔⵠⵠⵠⲆᐃ: "img/day-hand-skin6.png",
    ⵠΔⵠΔΔΔⲆ: "img/night-hand-skin6.png",
    ⵠⵠᐃⵠΔΔᐃ: "img/day-hand-skin8.png",
    ᐃᐃΔⲆⲆⲆⵠ: "img/night-hand-skin8.png",
    ⲆⲆⲆΔΔᐃⵠ: "img/day-hand-skin9.png",
    ΔⲆᐃΔⵠΔΔ: "img/night-hand-skin9.png",
    ΔⵠᐃⵠⲆⵠⵠ: "img/day-hand-skin10.png",
    ⵠᐃⲆⲆᐃΔΔ: "img/night-hand-skin10.png",
    ⵠᐃⲆᐃⲆΔᐃ: "img/day-hand-skin11.png",
    ⵠᐃⲆⵠᐃᐃᐃ: "img/night-hand-skin11.png",
    ⵠⵠⵠᐃΔⵠᐃ: "img/day-hand-skin12.png",
    ⲆⵠⲆᐃΔΔΔ: "img/night-hand-skin12.png",
    ᐃᐃⵠⲆΔⲆⲆ: "img/day-hand-skin13.png",
    ᐃⲆⲆⵠⲆΔⲆ: "img/night-hand-skin13.png",
    ᐃⲆᐃⵠⲆⵠⵠ: "img/day-hand-skin14.png",
    ⵠᐃᐃΔᐃᐃⵠ: "img/night-hand-skin14.png",
    ᐃⲆᐃⲆⵠⲆⵠ: "img/day-hand-skin15.png",
    ᐃᐃᐃΔⲆΔΔ: "img/night-hand-skin15.png",
    ᐃΔⵠⲆΔⲆΔ: "img/day-hand-skin16.png",
    ΔⵠΔᐃΔΔⵠ: "img/night-hand-skin16.png",
    ⵠⵠΔⲆΔΔᐃ: "img/day-hand-skin17.png",
    ᐃⵠΔⲆΔⲆⲆ: "img/night-hand-skin17.png",
    ⵠⵠΔᐃⵠⵠᐃ: "img/day-hand-skin18.png",
    ⲆᐃⲆⲆΔᐃⵠ: "img/night-hand-skin18.png",
    ⲆΔΔⵠΔᐃⲆ: "img/day-hand-skin19.png",
    ΔΔⲆⲆΔᐃⲆ: "img/night-hand-skin19.png",
    ᐃⵠᐃⵠⲆⲆⵠ: "img/day-hand-skin20.png",
    ⵠᐃΔᐃΔⵠⵠ: "img/night-hand-skin20.png",
    ⲆΔᐃⵠⲆΔᐃ: "img/day-hand-skin21.png",
    ⵠⵠΔΔᐃⲆⵠ: "img/night-hand-skin21.png",
    ⵠΔᐃᐃⵠⵠⵠ: "img/day-hand-skin22.png",
    ΔⵠⲆᐃⵠΔΔ: "img/night-hand-skin22.png",
    ⵠⵠⲆᐃⲆᐃⵠ: "img/day-hand-skin23.png",
    ⵠⵠⵠⵠᐃᐃⵠ: "img/night-hand-skin23.png",
    ᐃᐃᐃⵠⵠᐃΔ: "img/day-hand-skin24.png",
    ⲆΔⵠⲆⵠΔᐃ: "img/night-hand-skin24.png",
    ᐃⵠΔⲆΔⲆΔ: "img/day-hand-skin25.png",
    ⲆⲆΔᐃᐃⲆⵠ: "img/night-hand-skin25.png",
    ΔⵠⲆᐃⵠⲆⲆ: "img/day-hand-skin26.png",
    ⲆⲆⲆⵠⲆΔⲆ: "img/night-hand-skin26.png",
    ⲆⲆⵠΔΔⵠᐃ: "img/day-hand-skin27.png",
    ⲆⵠⵠⲆⵠᐃᐃ: "img/night-hand-skin27.png",
    ΔⲆΔᐃΔⵠᐃ: "img/day-hand-skin28.png",
    ᐃΔⲆⵠⵠⲆΔ: "img/night-hand-skin28.png",
    ⵠⲆᐃⲆⲆⵠΔ: "img/day-hand-skin29.png",
    ⲆⵠⵠᐃⵠΔⲆ: "img/night-hand-skin29.png",
    ᐃⵠⲆΔΔΔᐃ: "img/day-hand-skin30.png",
    ⵠⵠΔᐃⵠⵠⲆ: "img/night-hand-skin30.png",
    ⲆⵠⲆⲆᐃᐃΔ: "img/day-hand-skin31.png",
    ΔᐃΔΔᐃᐃⲆ: "img/night-hand-skin31.png",
    ᐃⵠΔⵠⵠᐃⵠ: "img/day-hand-skin32.png",
    ⲆⲆΔⲆΔⵠⲆ: "img/night-hand-skin32.png",
    ΔΔΔⲆⵠΔΔ: "img/day-hand-skin33.png",
    ⵠⵠⲆⵠᐃⵠⵠ: "img/night-hand-skin33.png",
    ΔⵠⵠᐃΔΔⵠ: "img/day-hand-skin34.png",
    ΔΔᐃⲆⵠᐃΔ: "img/night-hand-skin34.png",
    ⵠᐃⵠⵠⵠⲆΔ: "img/day-hand-skin35.png",
    ᐃⵠΔⲆΔⵠⵠ: "img/night-hand-skin35.png",
    ⲆΔⲆⵠⵠᐃⵠ: "img/day-hand-skin36.png",
    ΔⲆᐃΔⲆΔⲆ: "img/night-hand-skin36.png",
    ⵠΔⲆᐃᐃⵠΔ: "img/day-hand-skin37.png",
    ⵠΔᐃᐃⲆᐃᐃ: "img/night-hand-skin37.png",
    ⲆⵠΔⲆⵠᐃⵠ: "img/day-hand-skin38.png",
    ΔⵠⵠⲆⲆᐃΔ: "img/night-hand-skin38.png",
    ΔⵠⲆᐃⵠⵠⵠ: "img/day-hand-skin39.png",
    ⲆΔᐃᐃⵠΔΔ: "img/night-hand-skin39.png",
    ⲆⵠⵠⵠⲆΔΔ: "img/day-hand-skin40.png",
    ⲆⲆᐃᐃⵠᐃⵠ: "img/night-hand-skin40.png",
    ⵠᐃⲆᐃⲆᐃⵠ: "img/day-hand-skin41.png",
    ᐃⲆᐃΔΔᐃΔ: "img/night-hand-skin41.png",
    ⵠⵠᐃΔⲆᐃⵠ: "img/day-hand-skin42.png",
    ᐃⵠᐃᐃΔⵠⲆ: "img/night-hand-skin42.png",
    ⲆⲆⵠⲆᐃΔⵠ: "img/day-hand-skin43.png",
    ⵠΔⵠⲆΔⵠΔ: "img/night-hand-skin43.png",
    ⵠᐃᐃΔⲆΔΔ: "img/day-hand-skin16.png",
    ⲆⵠᐃᐃΔⲆⵠ: "img/night-hand-skin16.png",
    ᐃΔⵠⲆΔⲆⵠ: "img/day-hand-skin45.png",
    ΔΔⲆⲆⲆΔΔ: "img/night-hand-skin45.png",
    ᐃΔΔᐃᐃΔⲆ: "img/day-hand-skin46.png",
    ⲆⵠⵠΔⵠⲆᐃ: "img/night-hand-skin46.png",
    ⲆⵠΔΔᐃⲆΔ: "img/day-hand-skin47.png",
    ⵠᐃΔⵠⵠᐃⲆ: "img/night-hand-skin47.png",
    ⲆⵠⲆⲆΔᐃΔ: "img/day-hand-skin48.png",
    ⲆⵠⵠⵠⵠⲆᐃ: "img/night-hand-skin48.png",
    ᐃᐃⲆΔⲆⲆᐃ: "img/day-hand-skin49.png",
    ⲆⵠΔⲆⵠⲆᐃ: "img/night-hand-skin49.png",
    ΔΔⵠⲆΔⵠΔ: "img/day-hand-skin49.png",
    ⲆᐃⲆΔⲆⵠⲆ: "img/night-hand-skin49.png",
    ᐃⲆᐃⵠⲆⲆⲆ: "img/day-hand-skin51.png",
    ᐃΔⵠⲆᐃⵠΔ: "img/night-hand-skin51.png",
    ΔΔΔⲆⵠⵠΔ: "img/day-hand-skin52.png",
    ⵠΔΔⲆⵠΔⵠ: "img/night-hand-skin52.png",
    ΔΔᐃⵠᐃⲆΔ: "img/day-hand-skin53.png",
    ⲆΔⵠΔⲆᐃᐃ: "img/night-hand-skin53.png",
    ᐃⵠΔⲆᐃⵠΔ: "img/day-hand-skin53.png",
    ΔⵠΔⲆⲆⲆⲆ: "img/night-hand-skin53.png",
    ΔⲆΔΔΔᐃⲆ: "img/day-hand-skin55.png",
    ᐃᐃⲆⵠᐃΔⲆ: "img/night-hand-skin55.png",
    ΔΔᐃᐃⲆⵠᐃ: "img/day-hand-skin56.png",
    ΔⲆⲆᐃᐃⲆⵠ: "img/night-hand-skin56.png",
    ΔΔᐃⲆⲆⵠᐃ: "img/day-hand-skin57.png",
    ⵠᐃΔᐃΔⵠⲆ: "img/night-hand-skin57.png",
    ᐃᐃᐃᐃᐃⵠⵠ: "img/day-hand-skin58.png",
    ΔⲆⲆΔⵠⵠΔ: "img/night-hand-skin58.png",
    ⵠᐃⵠΔᐃΔⲆ: "img/day-hand-skin59.png",
    ⵠⵠΔⲆⵠⵠⲆ: "img/night-hand-skin59.png",
    ⵠΔᐃⵠⵠΔΔ: "img/day-hand-skin61.png",
    ⵠΔᐃᐃᐃᐃⵠ: "img/night-hand-skin61.png",
    ⵠΔΔⲆⲆᐃᐃ: "img/day-hand-skin61.png",
    ⵠⲆᐃᐃⵠΔⵠ: "img/night-hand-skin61.png",
    ᐃᐃⵠⲆΔᐃⵠ: "img/day-hand-skin62.png",
    ⵠΔΔⲆᐃⵠⲆ: "img/night-hand-skin62.png",
    ΔᐃᐃᐃΔᐃⲆ: "img/day-hand-skin63.png",
    ᐃⵠⲆᐃᐃⵠⲆ: "img/night-hand-skin63.png",
    ΔΔⲆⵠΔᐃᐃ: "img/day-hand-skin64.png",
    ⲆⵠᐃⲆⵠᐃΔ: "img/night-hand-skin64.png",
    ⵠᐃⲆΔⲆⵠᐃ: "img/day-hand-skin65.png",
    ΔⵠᐃⵠΔⲆⵠ: "img/night-hand-skin65.png",
    ⲆⲆⲆⵠΔΔΔ: "img/day-hand-skin66.png",
    ᐃΔᐃⵠⲆᐃΔ: "img/night-hand-skin66.png",
    ΔⲆᐃᐃᐃᐃᐃ: "img/day-hand-skin67.png",
    ΔᐃΔΔⲆⵠᐃ: "img/night-hand-skin67.png",
    ΔΔΔΔΔⲆⲆ: "img/day-hand-skin68.png",
    ⵠⲆⲆⵠⲆⲆⲆ: "img/night-hand-skin68.png",
    ⲆⲆΔⵠⲆⲆΔ: "img/day-hand-skin69.png",
    ΔⵠⲆΔⵠⲆᐃ: "img/night-hand-skin69.png",
    ⲆΔΔⵠⲆⵠⵠ: "img/day-hand-skin70.png",
    ᐃⵠΔⵠΔⵠⲆ: "img/night-hand-skin70.png",
    ΔⲆⲆΔᐃᐃⵠ: "img/day-hand-skin71.png",
    ᐃᐃⵠᐃⲆΔⵠ: "img/night-hand-skin71.png",
    ΔΔᐃⵠΔⵠΔ: "img/day-hand-skin72.png",
    Δⵠⵠⵠⵠᐃⵠ: "img/night-hand-skin72.png",
    ⵠΔⲆⵠΔⲆⵠ: "img/day-hand-skin73.png",
    ΔᐃⲆᐃΔⲆⵠ: "img/night-hand-skin73.png",
    ⵠⲆΔᐃⲆᐃⵠ: "img/day-hand-skin74.png",
    ⵠΔΔⲆⲆⵠΔ: "img/night-hand-skin74.png",
    ᐃⵠⵠᐃΔΔᐃ: "img/day-hand-skin75.png",
    ᐃΔᐃⵠΔⵠᐃ: "img/night-hand-skin75.png",
    ⲆᐃⲆⲆⲆΔᐃ: "img/day-hand-skin76.png",
    ᐃᐃⲆⲆΔⵠΔ: "img/night-hand-skin76.png",
    ᐃⲆⲆⲆᐃᐃᐃ: "img/day-hand-skin77.png",
    ΔⵠΔΔⵠⲆⲆ: "img/night-hand-skin77.png",
    ⵠΔⲆⲆΔⵠⲆ: "img/day-hand-skin78.png",
    ᐃⲆⲆⲆⲆᐃⵠ: "img/night-hand-skin78.png",
    Δᐃⵠⵠᐃⵠᐃ: "img/day-hand-skin79.png",
    ⵠΔⲆⵠⵠⲆⵠ: "img/night-hand-skin79.png",
    ΔΔΔⵠΔᐃⲆ: "img/day-hand-skin80.png",
    ⵠⵠⵠΔⵠⲆⲆ: "img/night-hand-skin80.png",
    ⵠΔΔⲆⲆⲆΔ: "img/day-hand-skin81.png",
    ᐃⵠΔᐃΔΔᐃ: "img/night-hand-skin81.png",
    ⵠⲆΔⵠΔᐃᐃ: "img/day-hand-skin82.png",
    ᐃΔⵠⵠⲆⲆⵠ: "img/night-hand-skin82.png",
    ⵠⲆΔᐃᐃⵠⲆ: "img/day-hand-skin83.png",
    ⲆΔΔᐃⲆⵠⵠ: "img/night-hand-skin83.png",
    ᐃⲆᐃΔΔᐃᐃ: "img/day-hand-skin84.png",
    ΔΔΔⲆΔᐃΔ: "img/night-hand-skin84.png",
    ΔⵠⵠⲆΔⲆᐃ: "img/day-hand-skin85.png",
    ⵠᐃΔΔⵠⲆΔ: "img/night-hand-skin85.png",
    ᐃΔⲆⲆᐃΔΔ: "img/day-hand-skin86.png",
    ᐃᐃⵠΔΔⵠⲆ: "img/night-hand-skin86.png",
    ⲆΔΔΔᐃⲆΔ: "img/day-hand-skin87.png",
    ΔᐃⵠⵠΔⵠΔ: "img/night-hand-skin87.png",
    ⲆΔᐃᐃⵠᐃⵠ: "img/day-hand-skin88.png",
    ᐃΔⵠᐃⵠᐃΔ: "img/night-hand-skin88.png",
    ΔⵠⵠⲆᐃⲆᐃ: "img/day-hand-skin89.png",
    ⵠᐃⲆⲆᐃⵠⵠ: "img/night-hand-skin89.png",
    ΔΔᐃⲆⵠⵠᐃ: "img/day-hand-skin90.png",
    ⵠᐃⵠΔⲆⲆΔ: "img/night-hand-skin90.png",
    ᐃⵠⲆⲆΔᐃⵠ: "img/day-hand-skin91.png",
    ⲆⵠⲆΔΔⵠΔ: "img/night-hand-skin91.png",
    ΔⲆΔⲆⲆΔΔ: "img/day-hand-skin92.png",
    ⵠⵠᐃⲆⵠⲆⲆ: "img/night-hand-skin92.png",
    ⲆΔⲆⵠΔΔΔ: "img/day-hand-skin93.png",
    ᐃΔᐃⵠⲆΔΔ: "img/night-hand-skin93.png",
    ⵠᐃΔΔΔⲆᐃ: "img/day-hand-skin94.png",
    ⵠⵠΔⲆᐃᐃΔ: "img/night-hand-skin94.png",
    ⲆⲆⵠᐃⵠΔΔ: "img/day-hand-skin95.png",
    ⲆⵠⵠᐃⲆⲆᐃ: "img/night-hand-skin95.png",
    ΔⵠᐃⲆΔⲆⵠ: "img/day-hand-skin96.png",
    ᐃⵠⵠⵠⵠⲆΔ: "img/night-hand-skin96.png",
    ⵠⵠⲆⵠⵠΔᐃ: "img/day-hand-skin97.png",
    ⵠⲆᐃⵠⲆⲆᐃ: "img/night-hand-skin97.png",
    ΔΔⲆⵠᐃᐃΔ: "img/day-hand-skin98.png",
    ⵠᐃΔⵠΔΔⵠ: "img/night-hand-skin98.png",
    ⲆⲆⵠⲆᐃᐃⲆ: "img/day-hand-skin99.png",
    ⲆⵠⲆᐃᐃΔⵠ: "img/night-hand-skin99.png",
    ᐃⵠⲆⵠΔΔᐃ: "img/day-hand-skin100.png",
    ⵠⲆΔΔⵠΔᐃ: "img/night-hand-skin100.png",
    Δⵠᐃⵠⵠᐃⵠ: "img/day-hand-skin101.png",
    ΔΔΔⵠᐃⵠᐃ: "img/night-hand-skin101.png",
    ⲆΔⵠΔⲆᐃΔ: "img/day-hand-skin102.png",
    ΔᐃΔⲆΔΔⵠ: "img/night-hand-skin102.png",
    ⵠⵠΔⲆᐃᐃⵠ: "img/day-hand-skin103.png",
    ᐃᐃΔᐃⲆⵠᐃ: "img/night-hand-skin103.png",
    ᐃⵠⵠᐃΔⵠᐃ: "img/day-hand-skin104.png",
    ⵠΔΔΔᐃⲆⵠ: "img/night-hand-skin104.png",
    ⵠΔⵠⵠᐃΔⲆ: "img/day-hand-skin105.png",
    ⲆⲆΔⲆΔᐃⵠ: "img/night-hand-skin105.png",
    ⵠΔᐃⲆⵠⵠⵠ: "img/day-hand-skin106.png",
    ᐃᐃⲆⲆⲆⲆΔ: "img/night-hand-skin106.png",
    ΔᐃⲆΔᐃⵠᐃ: "img/day-hand-skin107.png",
    ΔΔⲆⵠΔⵠΔ: "img/night-hand-skin107.png",
    ᐃΔⵠᐃᐃᐃⵠ: "img/day-hand-skin108.png",
    ᐃⲆⵠΔΔⵠⲆ: "img/night-hand-skin108.png",
    ᐃΔΔⵠⲆⲆⲆ: "img/day-hand-skin109.png",
    ⵠᐃⲆΔⲆⲆΔ: "img/night-hand-skin109.png",
    ⵠΔᐃΔⲆΔⲆ: "img/day-hand-skin110.png",
    ⲆⵠⵠΔᐃᐃⵠ: "img/night-hand-skin110.png",
    ᐃⵠⵠΔⲆⵠᐃ: "img/day-hand-skin111.png",
    Δᐃⵠᐃⵠⵠⵠ: "img/night-hand-skin111.png",
    ᐃᐃⲆᐃⲆᐃⵠ: "img/day-hand-skin112.png",
    ⵠⲆΔᐃΔΔΔ: "img/night-hand-skin112.png",
    ΔⲆⵠⲆⵠᐃΔΔΔ: "img/day-hand-skin113.png",
    ᐃⵠⵠΔⵠⲆᐃⲆⲆ: "img/night-hand-skin113.png",
    ⵠᐃⲆᐃᐃΔᐃ: "img/day-hand-skin114.png",
    ⵠⲆⲆᐃᐃΔⲆ: "img/night-hand-skin114.png",
    ⵠΔᐃⵠⵠᐃᐃ: "img/day-hand-skin115.png",
    ⲆⵠᐃᐃᐃᐃΔ: "img/night-hand-skin115.png",
    ⲆΔⲆⵠΔΔⵠ: "img/day-hand-skin116.png",
    ⵠᐃⵠᐃᐃⵠᐃ: "img/night-hand-skin116.png",
    ⲆᐃⲆᐃᐃᐃⵠ: "img/day-hand-skin117.png",
    ΔⲆⵠⲆᐃᐃᐃ: "img/night-hand-skin117.png",
    ⲆⲆⲆΔΔᐃᐃ: "img/day-hand-skin118.png",
    ⵠᐃᐃⲆᐃᐃⵠ: "img/night-hand-skin118.png",
    Ⲇᐃᐃⵠᐃᐃⵠ: "img/day-hand-skin119.png",
    ⵠᐃᐃᐃⵠΔᐃ: "img/night-hand-skin119.png",
    ᐃⲆⵠΔⵠᐃᐃ: "img/day-hand-skin120.png",
    ⲆΔΔⲆⲆΔⵠ: "img/night-hand-skin120.png",
    ᐃⵠΔⵠΔⵠΔ: "img/day-hand-skin122.png",
    ⵠⲆⵠⵠⵠΔᐃ: "img/night-hand-skin122.png",
    ΔⵠᐃⵠᐃⲆⲆ: "img/day-hand-skin122.png",
    ΔΔⲆⵠᐃᐃⲆ: "img/night-hand-skin122.png",
    ⲆΔΔᐃⲆᐃΔ: "img/day-hand-skin122.png",
    ⵠΔⵠᐃⵠᐃⵠ: "img/night-hand-skin122.png",
    ΔⲆΔᐃᐃⲆⲆ: "img/day-hand-skin124.png",
    ᐃᐃⲆⲆΔΔΔ: "img/night-hand-skin124.png",
    ᐃΔᐃᐃᐃᐃⵠ: "img/day-hand-skin125.png",
    ΔΔΔⵠᐃᐃᐃ: "img/night-hand-skin125.png",
    ⵠⵠᐃⲆⲆⵠⲆ: "img/day-hand-skin126.png",
    ⲆΔⵠⵠΔⵠΔ: "img/night-hand-skin126.png",
    ⵠⲆⵠⵠΔⲆⵠ: "img/day-hand-skin127.png",
    ⵠᐃⵠⲆⲆᐃᐃ: "img/night-hand-skin127.png",
    ΔᐃⲆⲆⵠᐃⵠ: "img/day-hand-skin128.png",
    ⲆⵠᐃⲆᐃⲆⲆ: "img/night-hand-skin128.png",
    ⵠᐃΔⵠⲆΔΔ: "img/day-hand-skin129.png",
    ΔⵠⵠⵠᐃΔⵠ: "img/night-hand-skin129.png",
    ⲆᐃⵠⲆᐃⲆᐃ: "img/day-hand-skin130.png",
    ⵠΔΔⵠΔΔⵠ: "img/night-hand-skin130.png",
    ᐃⲆΔⲆᐃⲆΔ: "img/day-hand-skin131.png",
    ⵠⲆΔᐃᐃⵠΔ: "img/night-hand-skin131.png",
    ⵠΔⲆⵠⲆΔⵠ: "img/day-hand-skin130.png",
    ⵠⲆⲆⵠⲆᐃᐃ: "img/night-hand-skin130.png",
    ΔΔᐃᐃᐃΔᐃ: "img/day-hand-skin133.png",
    ⲆⵠᐃΔΔⵠᐃ: "img/night-hand-skin133.png",
    ⵠⲆⵠⵠⵠΔⵠ: "img/day-hand-skin134.png",
    ⲆΔΔⵠΔⲆᐃ: "img/night-hand-skin134.png",
    ᐃⲆⲆΔΔΔⵠ: "img/day-hand-skin135.png",
    ΔᐃΔΔⵠⲆᐃ: "img/night-hand-skin135.png",
    ᐃᐃᐃᐃᐃⲆᐃ: "img/day-hand-skin136.png",
    ⵠᐃⵠᐃᐃΔᐃ: "img/night-hand-skin136.png",
    ᐃⵠⵠⲆᐃΔⲆ: "img/day-hand-skin137.png",
    ΔⵠᐃᐃᐃⲆⵠ: "img/night-hand-skin137.png",
    ᐃⲆᐃᐃΔᐃⲆ: "img/day-hand-skin138.png",
    ᐃᐃⲆⵠᐃⵠΔ: "img/night-hand-skin138.png",
    ᐃⲆᐃⲆⵠᐃⵠ: "img/day-hand-skin139.png",
    ΔΔⵠΔⵠᐃⵠ: "img/night-hand-skin139.png",
    ᐃⵠⲆΔⲆΔᐃ: "img/day-hand-skin140.png",
    ΔⲆⲆΔΔⲆⵠ: "img/night-hand-skin140.png",
    ΔⵠⲆᐃⵠᐃΔ: "img/day-hand-skin141.png",
    ΔᐃᐃᐃⲆⲆᐃ: "img/night-hand-skin141.png",
    ⲆᐃⲆΔⵠⵠⲆ: "img/day-hand-skin142.png",
    ᐃΔⵠⵠⵠⲆᐃ: "img/night-hand-skin142.png",
    ᐃᐃΔⲆΔΔᐃ: "img/day-hand-skin143.png",
    ⲆᐃΔΔⵠⵠᐃ: "img/night-hand-skin143.png",
    ⲆᐃⵠⲆᐃⵠᐃ: "img/day-hand-skin144.png",
    ⵠΔⵠᐃᐃᐃᐃ: "img/night-hand-skin144.png",
    ΔᐃᐃⲆᐃⵠⵠ: "img/day-hand-skin145.png",
    ⵠⵠⵠᐃΔΔⵠ: "img/night-hand-skin145.png",
    Ⲇᐃⵠᐃᐃⵠⵠ: "img/day-hand-skin146.png",
    ⵠᐃΔΔⵠΔⵠ: "img/night-hand-skin146.png",
    ⵠᐃᐃΔΔⵠΔ: "img/day-hand-skin147.png",
    ⵠⲆᐃⲆⲆᐃΔ: "img/night-hand-skin147.png",
    ⵠᐃⲆᐃᐃⲆⵠ: "img/day-hand-skin148.png",
    ⲆⵠᐃΔⵠΔⵠ: "img/night-hand-skin148.png",
    ⲆⲆᐃΔᐃⲆⲆ: "img/day-hand-skin149.png",
    ⲆⲆⲆΔΔΔΔ: "img/night-hand-skin149.png",
    ⵠⲆΔⲆΔᐃⵠ: "img/day-hand-skin150.png",
    ΔᐃⲆΔᐃᐃⲆ: "img/night-hand-skin150.png",
    ΔΔΔᐃΔᐃⵠ: "img/day-hand-skin151.png",
    ⲆΔⲆᐃⲆⵠⲆ: "img/night-hand-skin151.png",
    ᐃᐃⵠΔⲆᐃᐃ: "img/day-hand-skin152.png",
    ⵠᐃᐃⲆᐃⲆⵠ: "img/night-hand-skin152.png",
    ⵠΔᐃΔⲆᐃΔ: "img/day-hand-skin153.png",
    ⵠⵠΔᐃⲆᐃᐃ: "img/night-hand-skin153.png",
    ⵠⵠⵠⲆⲆᐃᐃ: "img/day-hand-skin154.png",
    ⲆᐃⲆΔᐃⵠⵠ: "img/night-hand-skin154.png",
    ΔᐃⵠᐃᐃΔⵠ: "img/day-hand-skin155.png",
    ΔⲆᐃⵠⲆⲆⲆ: "img/night-hand-skin155.png",
    ⵠⲆⵠⲆⲆᐃᐃ: "img/day-hand-skin156.png",
    ⵠⵠᐃⵠⵠⲆΔ: "img/night-hand-skin156.png",
    ⵠⵠΔⵠⲆⵠΔ: "img/day-hand-skin157.png",
    ΔᐃᐃⲆⵠΔΔ: "img/night-hand-skin157.png",
    ⲆⲆⵠᐃⲆᐃΔ: "img/day-hand-skin158.png",
    ᐃΔᐃΔⲆΔᐃ: "img/night-hand-skin158.png",
    ⲆΔⵠᐃⲆⲆᐃ: "img/day-hand-skin159.png",
    ΔᐃⵠΔᐃᐃⵠ: "img/night-hand-skin159.png",
    ⵠⵠⵠᐃⲆΔΔ: "img/day-hand-skin160.png",
    ⲆΔΔΔΔⵠⵠ: "img/night-hand-skin160.png",
    ⲆⵠⲆⲆᐃᐃᐃ: "img/day-hand-skin161.png",
    ⵠⲆⲆⵠΔⲆΔ: "img/night-hand-skin161.png",
    ᐃⲆᐃⵠᐃⲆⵠ: "img/day-hand-skin162.png",
    ⲆΔΔⵠΔᐃᐃ: "img/night-hand-skin162.png",
    ⲆᐃⲆⵠᐃⵠⲆ: "img/day-hand-skin163.png",
    ᐃᐃⵠⵠᐃΔⵠ: "img/night-hand-skin163.png",
    ΔΔⲆⲆᐃⵠᐃ: "img/day-hand-skin164.png",
    ᐃⲆⲆᐃⲆᐃⲆ: "img/night-hand-skin164.png",
    ΔΔⲆⲆᐃⵠⵠ: "img/day-hand-skin165.png",
    ΔⵠⲆⲆᐃΔΔ: "img/night-hand-skin165.png",
    ᐃⵠⵠⲆⵠᐃⲆ: "img/day-hand-skin166.png",
    ⲆΔΔΔⵠⵠⵠ: "img/night-hand-skin166.png",
    ΔⲆΔⵠᐃΔⲆ: "img/day-hand-skin167.png",
    ⲆᐃⵠⵠⵠⲆΔ: "img/night-hand-skin167.png",
    ⲆΔᐃᐃᐃᐃⵠ: "img/day-hand-skin168.png",
    ⲆᐃᐃⵠᐃΔᐃ: "img/night-hand-skin168.png",
    ᐃΔΔΔⲆΔⲆ: "img/day-hand-skin169.png",
    ᐃᐃᐃⵠⲆⵠᐃ: "img/night-hand-skin169.png",
    ΔⵠⲆΔΔᐃⵠ: "img/day-hand-skin170.png",
    ᐃⲆᐃᐃᐃⵠΔ: "img/night-hand-skin170.png",
    ⵠⲆᐃⵠⵠⵠᐃ: "img/day-hand-skin171.png",
    ᐃⵠᐃᐃᐃⵠΔ: "img/night-hand-skin171.png",
    ⲆⵠⲆΔⵠΔⵠ: "img/day-hand-skin172.png",
    ⵠⵠΔᐃⲆⲆᐃ: "img/night-hand-skin172.png",
    ⲆᐃⵠⵠΔⲆⲆ: "img/day-hand-skin173.png",
    ⵠᐃΔΔⵠⵠⵠ: "img/night-hand-skin173.png",
    ΔΔⵠⲆΔᐃΔ: "img/day-hand-skin174.png",
    ᐃᐃΔᐃⵠΔΔ: "img/night-hand-skin174.png",
    ΔⲆΔⵠⲆⵠΔ: "img/day-hand-skin175.png",
    ⵠΔᐃᐃⲆⵠⵠ: "img/night-hand-skin175.png",
    ⲆⵠⵠⲆᐃⵠᐃ: "img/day-hand-skin176.png",
    ⲆᐃΔΔⵠΔⲆ: "img/night-hand-skin176.png",
    ⲆⵠⲆᐃⲆᐃᐃ: "img/day-hand-skin177.png",
    ⲆᐃⵠᐃΔⲆⵠ: "img/night-hand-skin177.png",
    ⵠΔⵠⵠᐃⵠΔ: "img/day-hand-skin178.png",
    ᐃΔⲆⲆⲆⵠᐃ: "img/night-hand-skin178.png",
    ⲆΔⵠᐃⲆⵠᐃ: "img/day-hand-skin179.png",
    ᐃⵠⵠⲆᐃⲆᐃ: "img/night-hand-skin179.png",
    ⵠⵠⲆᐃΔᐃⲆ: "img/day-hand-skin180.png",
    ⵠⲆᐃᐃᐃⵠᐃ: "img/night-hand-skin180.png",
    ⵠⲆⲆΔⵠⵠΔ: "img/day-hand-skin181.png",
    ᐃΔⵠᐃΔΔΔ: "img/night-hand-skin181.png",
    ⲆᐃᐃⵠΔⵠᐃ: "img/day-hand-skin182.png",
    ᐃⵠΔⲆⵠᐃⲆ: "img/night-hand-skin182.png",
    ⲆⵠᐃΔⵠⲆΔ: "img/day-hand-skin183.png",
    ᐃᐃⵠⲆᐃⲆⲆ: "img/night-hand-skin183.png",
    ⵠⲆᐃΔΔⲆⲆ: "img/day-hand-skin184.png",
    ΔᐃᐃΔⵠΔⵠ: "img/night-hand-skin184.png",
    ΔᐃⵠᐃᐃᐃΔ: "img/day-hand-skin185.png",
    ᐃⵠΔΔΔᐃΔ: "img/night-hand-skin185.png",
    ΔΔᐃΔᐃΔᐃ: "img/day-hand-skin186.png",
    ᐃΔⲆⵠⲆⵠⲆ: "img/night-hand-skin186.png",
    ΔΔⵠᐃᐃⲆᐃ: "img/day-hand-skin187.png",
    ⵠᐃΔⵠⲆΔᐃ: "img/night-hand-skin187.png",
    ⲆⲆⵠᐃᐃᐃᐃ: "img/day-hand-skin188.png",
    ⵠΔᐃⲆᐃΔⵠ: "img/night-hand-skin188.png",
    ᐃⲆΔΔΔΔᐃ: "img/day-hand-skin189.png",
    ΔΔΔⵠΔⵠΔ: "img/night-hand-skin189.png",
    ΔᐃᐃΔᐃΔΔ: "img/day-hand-skin190.png",
    ᐃⲆⵠⲆⲆⲆᐃ: "img/night-hand-skin190.png",
    ΔᐃⲆᐃⵠᐃᐃ: "img/day-hand-skin191.png",
    ᐃΔᐃᐃⲆΔΔ: "img/night-hand-skin191.png",
    ⵠⵠⲆⵠΔΔⲆ: "img/day-hand-skin192.png",
    ᐃᐃᐃᐃⵠΔⲆ: "img/night-hand-skin192.png",
    ⲆⲆⲆΔⵠⲆⲆ: "img/day-hand-skin193.png",
    ⵠⵠⵠΔΔⲆΔ: "img/night-hand-skin193.png",
    ⵠⵠⲆᐃⵠᐃⵠ: "img/day-hand-skin194.png",
    ᐃⵠⲆΔΔᐃΔ: "img/night-hand-skin194.png",
    ⲆΔⲆΔⵠⲆⲆ: "img/day-hand-skin195.png",
    ᐃⲆΔⲆΔΔΔ: "img/night-hand-skin195.png",
    ᐃⵠⲆⵠⵠᐃⲆ: "img/day-hand-skin196.png",
    ΔⲆΔΔᐃΔΔ: "img/night-hand-skin196.png",
    ⵠⲆᐃⵠᐃΔΔ: "img/day-hand-skin197.png",
    ᐃⲆΔⵠⲆⲆΔ: "img/night-hand-skin197.png",
    ᐃᐃⲆⵠⵠΔⲆ: "img/day-hand-skin198.png",
    ΔΔⲆᐃⵠⲆⲆ: "img/night-hand-skin198.png",
    ᐃΔᐃᐃΔⵠΔ: "img/day-hand-skin199.png",
    ⵠΔⵠⵠⲆⲆⲆ: "img/night-hand-skin199.png",
    ΔΔⲆⵠⵠΔΔ: "img/day-hand-skin200.png",
    ΔΔⲆⵠⲆⵠᐃ: "img/night-hand-skin200.png",
    ᐃᐃⲆΔᐃᐃⵠ: "img/day-hand-skin201.png",
    ᐃⲆⲆⵠΔⵠⲆ: "img/night-hand-skin201.png",
    ᐃΔⲆᐃᐃᐃⵠ: "img/day-hand-skin202.png",
    ⲆΔⲆⵠᐃⵠⲆ: "img/night-hand-skin202.png",
    ᐃⲆΔⲆᐃᐃΔ: "img/day-hand-skin203.png",
    ΔⵠⲆᐃΔⵠΔ: "img/night-hand-skin203.png",
    ᐃΔⵠΔⵠᐃⲆ: "img/day-hand-skin204.png",
    ᐃⲆⲆⲆⵠΔⵠ: "img/night-hand-skin204.png",
    ⲆⲆᐃΔΔⲆΔ: "img/day-hand-skin205.png",
    ⵠⵠⵠᐃᐃⵠⲆ: "img/night-hand-skin205.png",
    ⲆⲆΔΔⲆⲆⲆ: "img/day-hand-skin206.png",
    ⲆΔᐃⲆⲆΔΔ: "img/night-hand-skin206.png",
    ⲆᐃⵠΔᐃᐃΔ: "img/day-hand-skin207.png",
    ᐃⲆΔⵠⵠᐃⵠ: "img/night-hand-skin207.png",
    ΔΔⵠⲆⵠⵠⲆ: "img/day-hand-skin208.png",
    ⲆᐃΔΔΔᐃⵠ: "img/night-hand-skin208.png",
    ⲆⵠΔᐃᐃⲆᐃ: "img/day-hand-skin209.png",
    ΔΔΔΔΔᐃᐃ: "img/night-hand-skin209.png",
    ᐃⵠⵠΔΔⵠΔ: "img/day-hand-skin210.png",
    ⲆⵠᐃⵠΔᐃᐃ: "img/night-hand-skin210.png",
    ⵠᐃⲆΔⵠⲆⵠ: "img/day-hand-skin211.png",
    ⵠΔⲆΔⲆⲆⵠ: "img/night-hand-skin211.png",
    ⵠⵠᐃⲆⵠᐃⵠ: "img/day-hand-skin212.png",
    ⲆᐃⲆⵠⵠⵠⲆ: "img/night-hand-skin212.png",
    ⵠᐃⲆᐃΔⵠΔ: "img/day-hand-skin213.png",
    ⲆⵠΔᐃⵠΔⲆ: "img/night-hand-skin213.png",
    ⵠᐃⵠⵠⵠⲆᐃ: "img/day-hand-skin214.png",
    ᐃⵠΔⵠⲆᐃᐃ: "img/night-hand-skin214.png",
    ⲆΔⵠΔᐃΔΔ: "img/day-bag-star0.png",
    ΔΔⵠⲆⵠΔΔ: "img/night-bag-star0.png",
    ΔⲆⲆᐃΔᐃⲆ: "img/day-bag0.png",
    ⲆⵠᐃΔⵠⵠᐃ: "img/night-bag0.png",
    ΔᐃⵠᐃΔᐃΔ: "img/day-bag1.png",
    ᐃⲆⵠⵠⵠᐃⵠ: "img/night-bag1.png",
    ΔⵠⵠᐃΔⵠⵠ: "img/day-bag2.png",
    ⵠⲆᐃΔᐃᐃⲆ: "img/night-bag2.png",
    ⲆΔᐃⲆΔΔⵠ: "img/day-bag3.png",
    ΔⲆⵠᐃᐃⵠΔ: "img/night-bag3.png",
    ᐃΔΔᐃⲆΔΔ: "img/day-bag4.png",
    ⵠΔᐃΔⵠⵠᐃ: "img/night-bag4.png",
    ᐃⲆΔᐃⲆⵠⵠ: "img/day-bag5.png",
    ᐃᐃⲆᐃΔᐃΔ: "img/night-bag5.png",
    ᐃΔᐃⲆΔⲆⲆ: "img/day-bag6.png",
    ᐃΔΔᐃᐃΔᐃ: "img/night-bag6.png",
    ⲆⲆⵠⵠΔᐃᐃ: "img/day-bag7.png",
    ᐃᐃᐃⵠΔᐃΔ: "img/night-bag7.png",
    ΔⲆᐃⲆⲆΔΔ: "img/day-bag8.png",
    ⲆⲆΔⲆⲆⵠⵠ: "img/night-bag8.png",
    ⵠⲆⲆΔⲆⵠⵠ: "img/day-bag9.png",
    ΔᐃⲆᐃΔΔΔ: "img/night-bag9.png",
    ⵠᐃⵠⵠΔΔⲆ: "img/day-bag10.png",
    ⵠᐃᐃⵠᐃⵠᐃ: "img/night-bag10.png",
    ⵠΔⲆⵠᐃᐃΔ: "img/day-bag11.png",
    ᐃᐃΔⵠⵠⵠᐃ: "img/night-bag11.png",
    ᐃᐃⵠᐃᐃⵠⵠ: "img/day-bag13.png",
    ΔⲆᐃⲆⵠⵠᐃ: "img/night-bag13.png",
    ⲆΔⲆᐃΔΔⵠ: "img/day-bag14.png",
    ᐃⵠᐃⲆⵠᐃⲆ: "img/night-bag14.png",
    ᐃᐃᐃᐃⵠⲆⲆ: "img/day-bag16.png",
    ⲆⵠᐃⲆⲆⵠᐃ: "img/night-bag16.png",
    ᐃΔΔᐃⵠΔⵠ: "img/day-bag17.png",
    ᐃᐃᐃⲆΔⵠⲆ: "img/night-bag17.png",
    ⵠΔΔΔΔⲆⵠ: "img/day-bag18.png",
    ⵠⲆΔⵠᐃΔⲆ: "img/night-bag18.png",
    ⵠᐃⵠΔⵠΔⲆ: "img/day-bag19.png",
    ⵠΔⵠⲆᐃΔᐃ: "img/night-bag19.png",
    ⵠΔΔⲆᐃᐃᐃ: "img/day-bag20.png",
    ⲆΔᐃᐃⲆⲆⲆ: "img/night-bag20.png",
    ⵠΔⵠᐃᐃΔⵠ: "img/day-bag21.png",
    ᐃⲆⲆΔΔᐃᐃ: "img/night-bag21.png",
    ⵠΔΔᐃⲆᐃⵠ: "img/day-bag22.png",
    ΔⲆΔΔᐃⲆⲆ: "img/night-bag22.png",
    ΔⵠⲆⲆⲆΔⵠ: "img/day-bag23.png",
    ᐃⵠⵠΔⲆⵠⵠ: "img/night-bag23.png",
    ΔⵠΔᐃΔᐃΔ: "img/day-bag24.png",
    ᐃΔᐃⲆΔΔΔ: "img/night-bag24.png",
    ΔⵠⵠⵠΔᐃⵠ: "img/day-bag25.png",
    ΔⲆᐃᐃΔΔᐃ: "img/night-bag25.png",
    ᐃΔᐃᐃⲆⲆⲆ: "img/day-bag26.png",
    Ⲇⵠᐃᐃⵠᐃᐃ: "img/night-bag26.png",
    ΔΔᐃΔᐃΔⲆ: "img/day-bag27.png",
    ⵠΔΔⵠΔⵠᐃ: "img/night-bag27.png",
    ΔⵠⵠⲆᐃⵠⵠ: "img/day-bag28.png",
    ΔⲆᐃⲆΔⵠᐃ: "img/night-bag28.png",
    ⵠΔᐃⲆᐃᐃΔ: "img/day-bag29.png",
    ᐃⵠᐃΔΔⵠⲆ: "img/night-bag29.png",
    ΔⲆΔⲆⲆⵠᐃ: "img/day-bag30.png",
    ⲆⲆᐃⵠΔΔᐃ: "img/night-bag30.png",
    ⲆⲆⲆΔⵠᐃΔ: "img/day-bag31.png",
    ΔᐃᐃⵠΔⵠᐃ: "img/night-bag31.png",
    ⲆᐃᐃⲆⲆⵠΔ: "img/day-bag32.png",
    ⵠᐃᐃⲆΔⲆΔ: "img/night-bag32.png",
    ᐃⵠΔΔⵠΔΔ: "img/day-bag33.png",
    ΔⲆΔⲆⲆᐃᐃ: "img/night-bag33.png",
    ⵠⵠΔᐃⲆⵠⵠ: "img/day-bag34.png",
    ᐃⵠⲆⲆᐃᐃᐃ: "img/night-bag34.png",
    Ⲇⵠᐃⵠᐃᐃⵠ: "img/day-bag35.png",
    ⲆⵠⲆⵠⵠᐃⵠ: "img/night-bag35.png",
    ⲆⲆΔΔᐃⵠⵠ: "img/day-bag36.png",
    ΔⵠΔᐃⵠᐃⲆ: "img/night-bag36.png",
    ᐃΔᐃⵠⲆᐃⲆ: "img/day-bag37.png",
    ᐃΔΔⵠᐃⲆΔ: "img/night-bag37.png",
    ᐃΔΔⵠⲆΔΔ: "img/day-bag38.png",
    ΔΔⵠⲆⲆΔΔ: "img/night-bag38.png",
    ᐃᐃΔᐃᐃᐃⵠ: "img/day-bag39.png",
    ΔΔⵠΔΔᐃⵠ: "img/night-bag39.png",
    ᐃΔⵠΔΔⲆᐃ: "img/day-bag40.png",
    ⲆΔⵠⵠⲆⵠΔ: "img/night-bag40.png",
    ⵠⲆⲆΔᐃⵠᐃ: "img/day-bag41.png",
    ΔⲆⵠᐃⵠΔΔ: "img/night-bag41.png",
    ᐃⲆⲆⲆΔᐃᐃ: "img/day-bag42.png",
    ⵠⵠⵠᐃᐃⲆⲆ: "img/night-bag42.png",
    ⵠⲆᐃΔⵠⵠᐃ: "img/day-bag43.png",
    ⲆᐃᐃΔᐃⲆᐃ: "img/night-bag43.png",
    ᐃᐃᐃⲆⵠⲆⲆ: "img/day-bag44.png",
    ⲆⲆΔⲆⲆⵠᐃ: "img/night-bag44.png",
    ᐃᐃⵠⲆⵠΔΔ: "img/day-bag45.png",
    ⲆⵠⲆⵠⲆⲆⵠ: "img/night-bag45.png",
    ᐃᐃⵠⲆΔᐃⲆ: "img/day-bag46.png",
    ᐃᐃⲆᐃΔᐃⵠ: "img/night-bag46.png",
    ⲆᐃⲆᐃᐃᐃⲆ: "img/day-bag47.png",
    ⲆΔᐃⵠᐃΔᐃ: "img/night-bag47.png",
    ΔⵠΔΔᐃᐃᐃ: "img/day-bag48.png",
    ⲆⵠⲆΔΔΔᐃ: "img/night-bag48.png",
    ᐃΔⵠᐃⵠΔΔ: "img/day-bag49.png",
    ᐃΔⲆΔⵠⵠΔ: "img/night-bag49.png",
    ΔⵠΔⲆⵠⲆᐃ: "img/day-bag50.png",
    ⲆΔⲆⵠⲆⵠⲆ: "img/night-bag50.png",
    ⲆᐃᐃⲆⲆᐃΔ: "img/day-bag51.png",
    ⵠΔᐃⲆⲆᐃⵠ: "img/night-bag51.png",
    ᐃⲆⲆΔⵠΔΔ: "img/day-bag52.png",
    ⲆⲆᐃⵠΔⲆᐃ: "img/night-bag52.png",
    ᐃΔᐃᐃᐃⵠⵠ: "img/day-bag53.png",
    ⲆⲆᐃΔΔⵠⲆ: "img/night-bag53.png",
    ᐃⲆⲆΔΔⲆⲆ: "img/day-bag54.png",
    ᐃᐃΔⵠⲆⵠᐃ: "img/night-bag54.png",
    ΔⵠⲆⵠⲆᐃΔ: "img/day-bag55.png",
    ⲆⵠⵠⲆⲆⵠΔ: "img/night-bag55.png",
    ᐃᐃⲆⲆⲆⲆⵠ: "img/day-bag56.png",
    ⵠⵠΔⲆΔⲆᐃ: "img/night-bag56.png",
    ᐃⵠⵠᐃᐃⲆᐃ: "img/day-bag57.png",
    ⵠⲆᐃⵠΔⲆⲆ: "img/night-bag57.png",
    ᐃⵠⲆⲆΔⲆΔ: "img/day-bag58.png",
    ⲆⲆⵠΔⵠΔΔ: "img/night-bag58.png",
    ⵠΔΔⵠᐃⲆⵠ: "img/day-bag59.png",
    ⵠΔⲆⲆⵠᐃΔ: "img/night-bag59.png",
    ⵠΔⵠΔᐃᐃⵠ: "img/day-bag60.png",
    ⲆΔⲆⲆⲆⵠⵠ: "img/night-bag60.png",
    ΔⲆⵠᐃⲆⲆᐃ: "img/day-bag61.png",
    ΔΔⲆⵠᐃΔⲆ: "img/night-bag61.png",
    ΔⵠᐃΔΔⵠΔ: "img/day-bag62.png",
    ΔΔΔⲆΔⲆⲆ: "img/night-bag62.png",
    ⵠΔⲆⲆΔᐃΔ: "img/day-bag63.png",
    ⵠⲆⵠⵠΔᐃᐃ: "img/night-bag63.png",
    ⲆᐃⵠΔᐃⵠᐃ: "img/day-bag64.png",
    ᐃᐃⵠⲆΔⵠᐃ: "img/night-bag64.png",
    ΔᐃᐃⵠⲆⲆⲆ: "img/day-bag65.png",
    ⵠⵠⵠⵠⵠⲆⵠ: "img/night-bag65.png",
    ⵠΔᐃⲆᐃⵠⵠ: "img/day-bag66.png",
    ΔΔⲆⲆⲆΔⲆ: "img/night-bag66.png",
    ⵠⵠⲆΔΔᐃΔ: "img/day-bag67.png",
    ᐃΔΔΔⵠΔᐃ: "img/night-bag67.png",
    ⲆⲆⲆⵠⵠⵠᐃ: "img/day-bag68.png",
    ΔᐃᐃⲆⲆᐃⲆ: "img/night-bag68.png",
    ⵠⲆΔΔⵠᐃⲆ: "img/day-bag69.png",
    ᐃᐃᐃΔΔᐃⲆ: "img/night-bag69.png",
    ⲆΔΔⲆⲆⲆΔ: "img/day-bag70.png",
    ᐃᐃⵠᐃΔⲆΔ: "img/night-bag70.png",
    ΔΔⲆᐃᐃΔΔ: "img/day-bag71.png",
    ᐃⵠⲆΔⵠΔⲆ: "img/night-bag71.png",
    ΔⲆⲆΔΔᐃᐃ: "img/day-bag72.png",
    ΔⵠⵠⲆⲆⵠΔ: "img/night-bag72.png",
    ⲆⵠΔⲆⲆⵠΔ: "img/day-bag73.png",
    ⲆⵠⲆΔⵠᐃⲆ: "img/night-bag73.png",
    ⵠΔΔⲆΔᐃᐃ: "img/day-bag74.png",
    ⲆⵠⵠⵠⲆᐃⲆ: "img/night-bag74.png",
    ᐃⲆΔΔⲆΔⲆ: "img/day-bag75.png",
    ᐃᐃᐃⵠⵠΔΔ: "img/night-bag75.png",
    ⵠⲆΔΔᐃᐃΔ: "img/day-bag76.png",
    ⲆΔᐃⲆᐃⵠⲆ: "img/night-bag76.png",
    ΔΔⵠⵠⲆᐃⲆ: "img/day-bag77.png",
    ᐃⲆᐃΔᐃⲆⵠ: "img/night-bag77.png",
    ΔΔΔᐃΔⵠⵠ: "img/day-bag78.png",
    ᐃⲆΔⵠΔᐃⵠ: "img/night-bag78.png",
    ᐃᐃᐃΔⲆᐃᐃ: "img/day-bag79.png",
    ΔΔⲆⲆⵠⲆΔ: "img/night-bag79.png",
    ΔᐃΔΔΔΔᐃ: "img/day-bag80.png",
    ⲆⵠΔΔⲆᐃᐃ: "img/night-bag80.png",
    ΔᐃⲆⲆⵠⲆⲆ: "img/day-accessory0.png",
    ⵠᐃⲆⲆΔⵠᐃ: "img/day-accessory0-pacques.png",
    ⵠΔⲆΔΔᐃⵠ: "img/night-accessory0-pacques.png",
    ⵠⲆⵠⲆⵠΔⵠ: "img/day-accessory13.png",
    ⲆⲆⲆΔⲆⲆΔ: "img/night-accessory13.png",
    ᐃΔᐃᐃⵠⵠⵠ: "img/day-accessory14.png",
    ⲆⵠⵠⲆⲆΔᐃ: "img/night-accessory14.png",
    ⲆᐃᐃΔⲆⲆⵠ: "img/day-accessory15.png",
    ΔⲆⵠⵠⲆΔΔ: "img/night-accessory15.png",
    ᐃⵠᐃⲆⲆⲆⲆ: "img/day-accessory16.png",
    ΔⵠᐃⲆᐃⵠᐃ: "img/night-accessory16.png",
    ⵠᐃᐃᐃⲆᐃΔ: "img/day-accessory17.png",
    ΔᐃΔⲆᐃᐃⵠ: "img/day-accessory17.png",
    ΔⵠⵠΔⲆⵠΔ: "img/day-accessory19.png",
    ΔⲆⲆΔⲆⵠⲆ: "img/night-accessory19.png",
    ⵠⲆⲆᐃᐃⵠⲆ: "img/day-accessory20.png",
    ᐃⵠΔΔᐃΔᐃ: "img/night-accessory20.png",
    ⵠⲆᐃΔⵠⵠⵠ: "img/day-accessory21.png",
    ⲆⲆΔⵠᐃⲆΔ: "img/night-accessory21.png",
    ⲆᐃΔⲆΔⵠⵠ: "img/day-accessory22.png",
    ⵠᐃⵠⲆⵠⲆⲆ: "img/night-accessory22.png",
    ⲆⲆⵠᐃᐃⵠⲆ: "img/day-accessory23.png",
    ⲆⲆΔΔᐃᐃΔ: "img/night-accessory23.png",
    ᐃⵠⲆΔᐃᐃᐃ: "img/day-accessory24.png",
    ΔᐃΔⵠⵠⲆΔ: "img/night-accessory24.png",
    ΔⲆᐃⵠⵠΔⲆ: "img/day-accessory25.png",
    ⲆⵠⵠΔΔΔΔ: "img/night-accessory25.png",
    ΔΔⲆⵠⵠⵠᐃ: "img/day-accessory26.png",
    ΔⵠΔⲆⵠΔΔ: "img/night-accessory26.png",
    ⲆΔᐃⲆΔⵠΔ: "img/day-accessory27.png",
    ⵠᐃΔᐃⵠᐃΔ: "img/night-accessory27.png",
    ⵠΔΔᐃᐃΔΔ: "img/day-accessory18.png",
    ΔΔΔᐃⲆⲆᐃ: "img/night-accessory18.png",
    ⲆᐃᐃⵠⵠΔⲆ: "img/day-accessory29.png",
    ⵠᐃⲆⲆⲆᐃⲆ: "img/night-accessory29.png",
    ᐃⲆᐃⲆⲆΔⵠ: "img/day-accessory30.png",
    ⵠΔᐃᐃⲆⵠⲆ: "img/night-accessory30.png",
    ⲆⲆⵠⲆⵠⲆΔ: "img/day-accessory31.png",
    ᐃⵠᐃⵠⲆᐃⵠ: "img/night-accessory31.png",
    ⲆΔⲆᐃᐃⲆᐃ: "img/day-accessory32.png",
    ⲆⲆⵠᐃΔⵠΔ: "img/night-accessory32.png",
    ⵠᐃᐃⲆⲆᐃΔ: "img/day-accessory33.png",
    ΔᐃⵠⲆΔⲆΔ: "img/night-accessory33.png",
    ᐃⵠΔⲆᐃᐃⵠ: "img/day-accessory34.png",
    ᐃΔⲆⲆⲆⲆΔ: "img/night-accessory34.png",
    ΔⵠⵠᐃⲆⵠᐃ: "img/day-accessory35.png",
    ⲆⵠΔⵠᐃΔᐃ: "img/night-accessory35.png",
    ⲆⲆⲆΔᐃΔᐃ: "img/day-accessory28.png",
    ΔᐃᐃⲆⲆΔⵠ: "img/night-accessory28.png",
    Ⲇᐃᐃⵠⵠᐃⵠ: "img/day-accessory36.png",
    ⵠΔΔΔⲆⲆΔ: "img/night-accessory36.png",
    ⵠⲆⲆᐃⲆΔⲆ: "img/day-accessory37.png",
    ᐃⲆⲆᐃⵠΔⲆ: "img/night-accessory37.png",
    ΔᐃⵠΔⵠⲆᐃ: "img/day-accessory39.png",
    ⲆᐃᐃΔⲆᐃᐃ: "img/night-accessory39.png",
    ⲆΔⵠⵠΔᐃᐃ: "img/day-accessory40.png",
    ⲆᐃⵠᐃᐃΔΔ: "img/night-accessory40.png",
    ᐃΔΔᐃΔᐃΔ: "img/day-accessory41.png",
    ⵠⵠᐃᐃⵠΔΔ: "img/night-accessory41.png",
    ⵠᐃⲆⵠᐃⲆⵠ: "img/day-accessory42.png",
    ᐃⲆⲆᐃⲆⲆΔ: "img/night-accessory42.png",
    ΔⵠᐃᐃⲆᐃᐃ: "img/day-accessory43.png",
    ⲆᐃⵠΔⲆΔΔ: "img/night-accessory43.png",
    ⲆᐃⲆΔΔΔⲆ: "img/day-accessory44.png",
    ᐃⵠΔⵠⵠⵠΔ: "img/night-accessory44.png",
    ΔⵠⵠⲆΔΔΔ: "img/day-accessory38.png",
    ΔᐃⲆⲆⲆⵠΔ: "img/night-accessory38.png",
    ⲆΔΔⵠⲆᐃᐃ: "img/day-accessory46.png",
    ⲆⲆᐃⵠΔᐃⵠ: "img/night-accessory46.png",
    ΔΔΔᐃⵠⲆΔ: "img/day-accessory47.png",
    ΔⲆᐃΔΔⵠⲆ: "img/night-accessory47.png",
    ⲆΔᐃⵠⵠⵠᐃ: "img/day-accessory48.png",
    ᐃᐃⵠᐃⲆⲆΔ: "img/night-accessory48.png",
    ΔⵠᐃⵠΔᐃᐃ: "img/day-accessory49.png",
    ΔⲆⵠΔΔᐃΔ: "img/night-accessory49.png",
    ᐃΔΔΔΔᐃΔ: "img/day-accessory45.png",
    ⲆⵠΔⵠΔⲆᐃ: "img/night-accessory45.png",
    ΔΔⵠΔⵠᐃᐃ: "img/day-accessory50.png",
    ᐃᐃⲆⵠⵠⵠⵠ: "img/night-accessory50.png",
    ᐃᐃΔΔΔⲆᐃ: "img/day-accessory51.png",
    ᐃⵠⵠⲆΔⲆⲆ: "img/night-accessory51.png",
    ⲆΔᐃⵠⵠⲆΔ: "img/day-accessory52.png",
    ᐃⲆΔΔⵠᐃᐃ: "img/night-accessory52.png",
    ΔΔΔⲆⲆⵠⲆ: "img/day-accessory53.png",
    ⲆⵠᐃⵠⲆⲆᐃ: "img/night-accessory53.png",
    ᐃΔⵠⲆΔΔⲆ: "img/day-accessory54.png",
    ᐃΔᐃⲆⲆΔΔ: "img/night-accessory54.png",
    ΔΔΔᐃΔΔⵠ: "img/day-accessory55.png",
    ⵠΔᐃⲆᐃⵠⲆ: "img/night-accessory55.png",
    ⵠΔⵠᐃΔⵠᐃ: "img/day-accessory56.png",
    ΔⲆⲆᐃⵠΔⵠ: "img/night-accessory56.png",
    ᐃΔⲆΔᐃⵠᐃ: "img/day-accessory57.png",
    ⵠⵠΔᐃΔΔⵠ: "img/night-accessory57.png",
    ⲆⲆΔΔΔⵠⲆ: "img/day-accessory58.png",
    ᐃᐃᐃΔᐃⲆᐃ: "img/night-accessory58.png",
    ΔΔΔᐃΔⵠΔ: "img/day-accessory59.png",
    ᐃᐃⲆⵠΔΔΔ: "img/night-accessory59.png",
    ⵠᐃᐃⵠΔΔΔ: "img/day-accessory60.png",
    ⵠⲆⵠⵠᐃΔⵠ: "img/night-accessory60.png",
    ⲆⵠⲆⵠΔΔⵠ: "img/day-accessory61.png",
    ⵠⵠΔᐃⵠⲆⵠ: "img/night-accessory61.png",
    ⲆᐃᐃᐃⲆⲆⲆ: "img/day-accessory62.png",
    ⵠⵠⵠⲆᐃᐃᐃ: "img/night-accessory62.png",
    ᐃᐃⵠΔⵠⲆⵠ: "img/day-accessory63.png",
    ᐃⲆⵠᐃᐃⲆᐃ: "img/night-accessory63.png",
    ⵠᐃΔΔᐃⲆⵠ: "img/day-accessory64.png",
    ⲆⲆᐃᐃᐃᐃᐃ: "img/night-accessory64.png",
    ⲆᐃⲆⵠᐃⵠⵠ: "img/day-accessory65.png",
    ᐃᐃᐃⵠⲆΔⵠ: "img/night-accessory65.png",
    ⵠΔΔⲆᐃⵠⵠ: "img/day-accessory66.png",
    ΔⵠⵠᐃΔⲆΔ: "img/night-accessory66.png",
    ⵠⵠΔⵠⵠᐃᐃ: "img/day-accessory67.png",
    ⲆᐃⵠⵠΔⵠΔ: "img/night-accessory67.png",
    ΔⵠΔⲆⲆΔⲆ: "img/day-accessory68.png",
    ⵠΔⲆⲆᐃⵠᐃ: "img/night-accessory68.png",
    ⲆᐃᐃⵠⵠᐃⲆ: "img/day-accessory69.png",
    ᐃΔᐃⲆᐃΔⵠ: "img/night-accessory69.png",
    ΔⵠⲆΔⲆΔⲆ: "img/day-accessory70.png",
    ⵠⵠⲆⲆⵠΔΔ: "img/night-accessory70.png",
    ΔⲆⲆᐃⲆⲆⲆ: "img/day-accessory71.png",
    ᐃᐃⲆᐃⵠⵠⵠ: "img/night-accessory71.png",
    ⵠΔⲆᐃⵠⲆᐃ: "img/day-accessory72.png",
    ᐃⵠⵠⵠᐃᐃΔ: "img/night-accessory72.png",
    ᐃⲆⲆᐃᐃⵠΔ: "img/day-accessory73.png",
    ᐃᐃᐃΔΔΔΔ: "img/night-accessory73.png",
    ⲆⲆᐃΔᐃᐃⵠ: "img/day-accessory74.png",
    ⵠᐃᐃᐃⲆᐃⲆ: "img/night-accessory74.png",
    ⲆⵠⵠⵠⲆⲆⲆ: "img/day-accessory75.png",
    ⵠΔΔⵠΔᐃⵠ: "img/night-accessory75.png",
    ⵠᐃΔⲆⵠΔⵠ: "img/day-accessory76.png",
    ⵠⲆⲆᐃⲆᐃΔ: "img/night-accessory76.png",
    ⵠΔⲆᐃⲆⲆⲆ: "img/day-accessory77.png",
    ᐃᐃⲆᐃⵠⲆᐃ: "img/night-accessory77.png",
    ᐃⵠⵠΔⵠΔⵠ: "img/day-accessory78.png",
    ᐃⵠⲆᐃΔΔΔ: "img/night-accessory78.png",
    ΔᐃⵠⵠᐃΔᐃ: "img/day-accessory79.png",
    ᐃᐃⵠⲆᐃⵠⲆ: "img/night-accessory79.png",
    ᐃⵠΔΔⵠⵠⵠ: "img/day-accessory80.png",
    ⲆᐃⵠᐃⲆᐃᐃ: "img/night-accessory80.png",
    ⲆⲆⲆⲆΔᐃⲆ: "img/day-accessory81.png",
    ⲆⵠΔΔⵠᐃᐃ: "img/night-accessory81.png",
    ⵠⲆⲆΔⲆᐃⲆ: "img/day-accessory83.png",
    ⵠᐃᐃΔΔᐃΔ: "img/night-accessory83.png",
    ⵠΔᐃⵠⲆᐃᐃ: "img/day-accessory84.png",
    ⵠⲆⵠΔΔⲆΔ: "img/night-accessory84.png",
    ⵠᐃΔⲆⲆΔⵠ: "img/day-accessory85.png",
    ᐃⵠΔᐃΔΔⵠ: "img/night-accessory85.png",
    ΔⵠⲆΔⵠΔⲆ: "img/day-accessory86.png",
    ⲆⲆᐃᐃΔⲆᐃ: "img/night-accessory86.png",
    ΔΔΔⵠⲆⲆⲆ: "img/day-accessory87.png",
    ᐃⲆΔᐃⵠⲆⵠ: "img/night-accessory87.png",
    ⲆⵠᐃⲆⵠⲆΔ: "img/day-accessory88.png",
    ᐃᐃΔⲆⵠⵠⵠ: "img/night-accessory88.png",
    ᐃⲆᐃΔⵠᐃⵠ: "img/day-accessory89.png",
    ⲆΔⵠΔⲆⲆΔ: "img/night-accessory89.png",
    ⵠⵠᐃⲆΔᐃΔ: "img/day-accessory90.png",
    ᐃⵠⲆΔⲆΔⲆ: "img/night-accessory90.png",
    ᐃᐃⲆᐃⲆⵠⵠ: "img/day-accessory91.png",
    ᐃⲆΔΔΔΔΔ: "img/night-accessory91.png",
    ΔΔΔᐃⲆΔⵠ: "img/day-accessory92.png",
    ᐃⲆΔᐃᐃᐃⵠ: "img/night-accessory92.png",
    ⵠΔΔᐃⵠΔᐃ: "img/day-accessory93.png",
    ΔⵠⲆⵠΔⲆⲆ: "img/night-accessory93.png",
    ⵠⵠⵠΔΔΔⲆ: "img/day-accessory94.png",
    ᐃᐃΔⲆⲆᐃⵠ: "img/night-accessory94.png",
    ᐃⲆΔΔⲆⲆΔ: "img/day-accessory95.png",
    ⲆᐃΔⵠⵠΔᐃ: "img/night-accessory95.png",
    ⵠⲆᐃΔΔⲆⵠ: "img/day-accessory96.png",
    ⲆΔⵠⵠⵠΔⵠ: "img/night-accessory96.png",
    ᐃⲆⲆⵠΔᐃⲆ: "img/day-accessory97.png",
    ᐃᐃⵠΔᐃⲆᐃ: "img/night-accessory97.png",
    ⲆᐃΔⲆΔΔΔ: "img/day-accessory98.png",
    ᐃⵠⲆᐃⵠᐃᐃ: "img/night-accessory98.png",
    ⲆΔΔⲆᐃⲆΔ: "img/day-accessory99.png",
    ⲆⵠⲆΔⲆᐃᐃ: "img/night-accessory99.png",
    ΔᐃᐃⵠΔΔⲆ: "img/day-accessory100.png",
    ⵠⵠΔᐃᐃΔⵠ: "img/night-accessory100.png",
    ⵠᐃⲆⵠᐃⵠᐃ: "img/day-accessory101.png",
    ᐃᐃΔΔⵠⲆⲆ: "img/night-accessory101.png",
    ΔⲆⲆⲆΔΔⵠ: "img/day-accessory102.png",
    ⵠᐃᐃⵠΔⲆⵠ: "img/night-accessory102.png",
    ⲆⲆΔⲆⲆⲆΔ: "img/day-accessory103.png",
    ⲆΔⵠᐃⲆⵠⲆ: "img/night-accessory103.png",
    ⲆⲆⵠΔᐃⵠᐃ: "img/day-accessory104.png",
    ⲆⲆⵠᐃⲆΔⵠ: "img/night-accessory104.png",
    ⵠᐃⲆⵠᐃᐃΔ: "img/day-accessory105.png",
    ⲆⵠⵠⵠΔⲆΔ: "img/night-accessory105.png",
    ⵠⵠᐃⲆΔᐃⵠⲆᐃ: "img/day-accessory106.png",
    ⲆⵠᐃⵠᐃⲆᐃⵠᐃ: "img/night-accessory106.png",
    ΔⲆⲆᐃΔⲆΔΔᐃ: "img/day-accessory107.png",
    ᐃᐃⲆⲆᐃΔⲆᐃᐃ: "img/night-accessory107.png",
    ΔᐃⵠⵠᐃⲆⵠ: "img/day-accessory82.png",
    ΔΔⲆᐃΔᐃΔ: "img/night-accessory82.png",
    ᐃΔᐃᐃᐃΔΔ: "img/day-book0.png",
    ⲆΔⲆⵠⲆⲆⵠ: "img/night-book0.png",
    ΔᐃΔᐃⵠΔΔ: "img/day-book1.png",
    ᐃΔⲆᐃΔⵠΔ: "img/night-book1.png",
    ᐃⵠᐃᐃⵠΔⲆ: "img/day-book2.png",
    ᐃⵠⵠⲆΔΔⵠ: "img/night-book2.png",
    ᐃᐃᐃⲆⲆⵠᐃ: "img/day-book3.png",
    ⲆⵠⲆᐃΔᐃᐃ: "img/night-book3.png",
    ⲆΔⵠΔᐃᐃⵠ: "img/day-book4.png",
    ⵠⵠᐃⲆⵠΔᐃ: "img/night-book4.png",
    ΔⵠⵠᐃΔⲆⲆ: "img/day-book5.png",
    ΔⵠΔⵠⲆΔΔ: "img/night-book5.png",
    ᐃᐃⵠΔΔⵠⵠ: "img/day-book6.png",
    ΔΔⲆΔⲆᐃⵠ: "img/night-book6.png",
    ᐃΔⵠᐃⵠⵠⵠ: "img/day-book7.png",
    ⵠᐃᐃⲆΔⵠᐃ: "img/night-book7.png",
    ᐃΔⲆᐃⵠⵠⲆ: "img/day-book8.png",
    ⵠⵠᐃΔⵠⵠⲆ: "img/night-book8.png",
    ΔᐃⲆΔᐃΔᐃ: "img/day-book9.png",
    Ⲇⵠᐃⵠⵠᐃⵠ: "img/night-book9.png",
    ⵠⲆΔᐃⵠΔⵠ: "img/day-book10.png",
    ΔⲆⲆΔΔⵠⲆ: "img/night-book10.png",
    ⲆΔⵠᐃⵠΔΔ: "img/day-book11.png",
    ΔⵠΔΔᐃΔⵠ: "img/night-book11.png",
    ⲆⲆⲆⵠⵠⵠⲆ: "img/day-book12.png",
    ᐃΔⲆᐃⵠⲆⵠ: "img/night-book12.png",
    ᐃⲆⲆΔⵠⵠⲆ: "img/day-book13.png",
    ⲆᐃⵠⵠⲆΔᐃ: "img/night-book13.png",
    ᐃⲆΔⲆᐃⵠΔ: "img/day-book14.png",
    ΔΔⲆᐃΔΔᐃ: "img/night-book14.png",
    ⲆⵠⲆⵠⵠⵠΔ: "img/day-book15.png",
    ᐃⲆᐃᐃᐃᐃΔ: "img/night-book15.png",
    ΔΔⲆⲆⲆᐃᐃ: "img/day-book16.png",
    ΔⵠⲆΔᐃⵠΔ: "img/night-book16.png",
    ⵠΔΔᐃᐃΔⲆ: "img/day-book17.png",
    ⲆⲆΔΔΔⵠᐃ: "img/night-book17.png",
    ⲆⵠᐃΔᐃΔⵠ: "img/day-book18.png",
    ᐃΔⲆΔⵠΔΔ: "img/night-book18.png",
    ⲆΔᐃᐃⲆⵠⵠ: "img/day-book19.png",
    ⲆⲆΔⲆⲆΔⵠ: "img/night-book19.png",
    ᐃΔⲆΔᐃΔᐃ: "img/day-book20.png",
    ᐃᐃΔΔⵠⲆΔ: "img/night-book20.png",
    ᐃΔⵠⲆᐃᐃⵠ: "img/day-book21.png",
    ⵠΔΔΔΔᐃⵠ: "img/night-book21.png",
    ᐃΔⲆΔΔΔⵠ: "img/day-book22.png",
    ᐃⵠⵠⵠΔΔⵠ: "img/night-book22.png",
    ᐃⲆⵠᐃⲆⵠⵠ: "img/day-book23.png",
    ᐃᐃΔΔⵠⵠⵠ: "img/night-book23.png",
    ΔⵠⲆᐃⵠᐃⲆ: "img/day-book24.png",
    ⵠⲆⲆⵠⲆΔⲆ: "img/night-book24.png",
    ΔⵠᐃᐃᐃⲆᐃ: "img/day-book25.png",
    ᐃⵠⲆᐃᐃⵠΔ: "img/night-book25.png",
    ᐃⵠⲆᐃΔΔⲆ: "img/day-book26.png",
    ⲆᐃΔᐃΔⲆᐃ: "img/night-book26.png",
    ᐃΔⵠΔⵠⲆⲆ: "img/day-book27.png",
    ⲆᐃᐃΔⲆΔⵠ: "img/night-book27.png",
    ⵠⲆⲆⲆΔΔᐃ: "img/day-book28.png",
    ΔΔᐃⵠΔΔΔ: "img/night-book28.png",
    ⵠⵠⵠⵠⵠⲆΔ: "img/day-book29.png",
    ⵠᐃᐃΔⲆⵠⲆ: "img/night-book29.png",
    ⵠⲆᐃⵠΔⵠᐃ: "img/day-book30.png",
    ⵠᐃΔⵠⵠⵠⲆ: "img/night-book30.png",
    ΔᐃᐃⲆΔᐃᐃ: "img/day-book31.png",
    ᐃΔⲆⵠᐃᐃⲆ: "img/night-book31.png",
    ⵠⵠΔⲆᐃᐃᐃ: "img/day-book32.png",
    ⵠᐃⵠᐃⲆᐃΔ: "img/night-book32.png",
    ⲆᐃᐃⲆⲆΔⵠ: "img/day-book33.png",
    ⵠⲆΔᐃΔⵠⵠ: "img/night-book33.png",
    ΔᐃΔⲆⵠᐃᐃ: "img/day-book34.png",
    ᐃⲆᐃΔΔⵠⵠ: "img/night-book34.png",
    ᐃⵠⵠΔΔⵠⲆ: "img/day-book35.png",
    ΔΔⵠΔⲆⲆᐃ: "img/night-book35.png",
    ΔⵠᐃⲆΔⲆⲆ: "img/day-book36.png",
    ᐃⵠᐃᐃΔΔᐃ: "img/night-book36.png",
    ΔⲆⵠᐃᐃᐃᐃⵠΔ: "img/day-book37.png",
    ⵠⲆⲆⲆⲆΔⲆⲆᐃ: "img/night-book37.png",
    ⵠⲆⵠⵠⲆⲆΔ: "img/day-book38.png",
    ⵠⵠⲆⲆⲆΔᐃ: "img/night-book38.png",
    ᐃⲆⵠΔΔᐃΔ: "img/day-book39.png",
    ⵠⲆⲆⲆⵠᐃⲆ: "img/night-book39.png",
    ΔᐃΔᐃⵠΔᐃ: "img/day-book40.png",
    ᐃⲆⵠᐃΔⵠᐃ: "img/night-book40.png",
    ΔᐃΔⵠⲆⵠΔ: "img/day-book41.png",
    ⲆⵠⲆᐃΔⲆⵠ: "img/night-book41.png",
    ΔΔᐃΔⲆᐃⵠ: "img/day-book42.png",
    ΔⵠⵠᐃᐃⵠⲆ: "img/night-book42.png",
    ⲆⵠⲆⵠΔΔⲆ: "img/day-book43.png",
    ᐃⵠⵠⵠⵠΔⵠ: "img/night-book43.png",
    ⲆⵠⵠΔⲆⵠΔ: "img/day-book44.png",
    ⲆⲆΔⵠⵠΔⵠ: "img/night-book44.png",
    ⵠⵠⲆΔⵠΔΔ: "img/day-book45.png",
    ΔΔᐃⲆⲆⲆⵠ: "img/night-book45.png",
    ΔⲆⲆⵠᐃⵠΔ: "img/day-book46.png",
    ⲆΔᐃΔΔⲆΔ: "img/night-book46.png",
    ⵠⲆᐃᐃᐃᐃⲆ: "img/day-book47.png",
    ᐃⵠⲆᐃᐃⵠᐃ: "img/night-book47.png",
    ⵠΔᐃⵠΔΔΔ: "img/day-book48.png",
    ⵠΔᐃᐃΔΔΔ: "img/night-book48.png",
    ΔⵠᐃᐃⵠⲆᐃ: "img/day-book49.png",
    ⲆⲆᐃΔⵠⲆⵠ: "img/night-book49.png",
    ⲆΔᐃⲆΔᐃᐃ: "img/day-book50.png",
    ᐃⲆⲆᐃⵠΔⵠ: "img/night-book50.png",
    ᐃⲆⵠᐃΔΔᐃ: "img/day-crate1.png",
    ⵠᐃᐃⵠⲆⵠᐃ: "img/night-crate1.png",
    ⵠⵠⲆΔⲆᐃΔ: "img/day-crate2.png",
    ⵠᐃᐃⵠⲆᐃⲆ: "img/night-crate2.png",
    ⲆⵠΔⲆΔᐃⲆ: "img/day-crate3.png",
    ΔᐃⵠⲆᐃⵠⲆ: "img/night-crate3.png",
    ⲆⵠΔΔⲆᐃΔ: "img/day-crate4.png",
    ⲆⲆⵠΔᐃᐃΔ: "img/night-crate4.png",
    ΔΔΔⵠᐃᐃΔ: "img/day-crate5.png",
    ᐃⵠⵠⲆⵠᐃⵠ: "img/night-crate5.png",
    ⵠⲆΔᐃⵠΔⲆ: "img/day-crate6.png",
    ⲆⲆᐃᐃᐃΔⵠ: "img/night-crate6.png",
    ΔⵠⵠᐃⵠⲆᐃ: "img/day-crate7.png",
    ᐃⲆᐃᐃᐃᐃᐃ: "img/night-crate7.png",
    ᐃⲆⲆⵠⵠᐃΔ: "img/day-crate8.png",
    ⵠⲆⵠⲆᐃⲆⵠ: "img/night-crate8.png",
    ᐃΔᐃⵠᐃⲆⲆ: "img/day-crate9.png",
    ⵠⲆⲆⵠⵠᐃᐃ: "img/night-crate9.png",
    ΔⲆᐃⵠⵠᐃⵠ: "img/day-crate10.png",
    ⵠᐃᐃΔᐃⲆᐃ: "img/night-crate10.png",
    ⵠΔⵠᐃΔⲆΔ: "img/day-crate11.png",
    ⵠⵠⲆⵠⲆΔⲆ: "img/night-crate11.png",
    ᐃⲆⵠⵠⵠⵠⲆ: "img/day-crate12.png",
    ᐃᐃΔⲆΔⵠⲆ: "img/night-crate12.png",
    ᐃΔᐃΔⵠⵠΔ: "img/day-crate13.png",
    ⵠⲆⵠⲆΔΔⵠ: "img/night-crate13.png",
    ⲆᐃⵠⵠⵠᐃΔ: "img/day-crate14.png",
    ⲆⲆⲆΔᐃᐃⲆ: "img/night-crate14.png",
    ⲆⲆᐃΔᐃⲆᐃ: "img/day-crate15.png",
    ᐃΔⵠΔΔⵠΔ: "img/night-crate15.png",
    ⲆΔⲆⲆⲆⵠΔ: "img/day-crate16.png",
    ⵠⵠⲆⵠⲆⲆᐃ: "img/night-crate16.png",
    ⵠΔⲆΔᐃΔᐃ: "img/day-crate17.png",
    ΔⲆⲆⲆΔⵠᐃ: "img/night-crate17.png",
    ᐃⵠᐃᐃᐃⲆⵠ: "img/day-crate18.png",
    ᐃΔⵠⵠΔⵠⵠ: "img/night-crate18.png",
    ᐃᐃⵠⵠⲆⵠᐃ: "img/day-crate19.png",
    ΔᐃΔⵠᐃⲆⲆ: "img/night-crate19.png",
    ΔΔΔⵠΔⵠᐃ: "img/day-crate20.png",
    ⵠⵠⲆⵠⵠⵠⲆ: "img/night-crate20.png",
    ⵠᐃⲆⲆΔΔᐃ: "img/day-crate21.png",
    ᐃⲆΔᐃⲆᐃΔ: "img/night-crate21.png",
    ᐃᐃⵠⵠᐃⵠᐃ: "img/day-crate22.png",
    ⲆΔᐃᐃⵠⵠⵠ: "img/night-crate22.png",
    ⲆᐃΔⵠΔΔᐃ: "img/day-crate23.png",
    ΔⵠⲆⲆⲆⲆΔ: "img/night-crate23.png",
    ⲆΔΔⵠᐃⵠⵠ: "img/day-crate24.png",
    ⲆⲆⲆⲆⵠⲆⲆ: "img/night-crate24.png",
    ⵠⲆᐃᐃΔᐃⵠ: "img/day-crate25.png",
    ᐃⵠᐃⲆΔΔᐃ: "img/night-crate25.png",
    ᐃᐃᐃⲆⵠⵠⲆ: "img/day-crate26.png",
    ΔⲆⵠⲆⲆΔΔ: "img/night-crate26.png",
    ΔⲆⵠΔᐃΔᐃ: "img/day-crate27.png",
    ⲆᐃⵠⲆᐃⲆⵠ: "img/night-crate27.png",
    ΔΔⵠⲆᐃⵠⵠ: "img/day-crate28.png",
    ΔⵠΔᐃⵠΔᐃ: "img/night-crate28.png",
    ⵠⵠᐃⵠⵠⵠⵠ: "img/day-crate29.png",
    ΔⵠⲆⲆΔⲆᐃ: "img/night-crate29.png",
    ᐃⲆΔⲆⵠᐃᐃ: "img/day-crate30.png",
    ᐃⵠⵠⲆᐃⵠᐃ: "img/night-crate30.png",
    ⵠⵠᐃⲆΔᐃⲆ: "img/day-crate31.png",
    ᐃⵠⲆⲆⵠᐃⵠ: "img/night-crate31.png",
    ΔⵠⲆⵠⵠΔᐃ: "img/day-crate32.png",
    ⲆⵠⲆΔⵠᐃΔ: "img/night-crate32.png",
    ⲆΔΔΔᐃΔⲆ: "img/day-crate33.png",
    ⵠⵠᐃΔⲆⵠⲆ: "img/night-crate33.png",
    ΔΔᐃⲆΔⲆⵠ: "img/day-crate34.png",
    ΔⲆⵠⲆΔⲆΔ: "img/night-crate34.png",
    ⲆΔⲆᐃΔⵠΔ: "img/day-crate35.png",
    ΔᐃΔᐃⲆⲆᐃ: "img/night-crate35.png",
    ⵠⲆᐃⵠᐃΔⲆ: "img/day-crate36.png",
    ⵠⲆΔΔΔΔᐃ: "img/night-crate36.png",
    ⵠΔᐃΔΔⵠⵠ: "img/day-crate37.png",
    ⲆⲆⲆⵠⵠᐃⵠ: "img/night-crate37.png",
    ⵠᐃⲆⲆΔΔⵠ: "img/day-crate38.png",
    ΔᐃΔⵠⵠΔΔ: "img/night-crate38.png",
    ΔΔⵠᐃⵠⲆΔ: "img/day-crate39.png",
    ᐃⵠⵠⵠᐃⲆⲆ: "img/night-crate39.png",
    ᐃΔΔⲆⵠᐃᐃ: "img/day-crate40.png",
    ᐃⵠΔᐃΔⵠΔ: "img/night-crate40.png",
    ⲆᐃⲆⲆᐃΔⲆ: "img/day-crate41.png",
    ΔΔⵠⲆᐃΔᐃ: "img/night-crate41.png",
    ⲆⵠⲆⵠⲆⵠⵠ: "img/day-crate42.png",
    ΔⵠⲆⵠΔΔΔ: "img/night-crate42.png",
    ⵠᐃᐃᐃᐃⲆᐃ: "img/day-crate43.png",
    ΔⲆⲆⵠΔΔⲆ: "img/night-crate43.png",
    ⵠⵠᐃᐃΔⵠᐃ: "img/day-crate44.png",
    ᐃΔⵠⵠⲆᐃⵠ: "img/night-crate44.png",
    ⲆΔᐃⲆⵠⵠⵠ: "img/day-crate45.png",
    ᐃⲆᐃⲆⲆᐃⵠ: "img/night-crate45.png",
    ᐃⲆΔⲆΔΔⵠ: "img/day-crate46.png",
    ᐃΔⲆⵠΔᐃⵠ: "img/night-crate46.png",
    ΔᐃᐃΔΔⵠΔ: "img/day-crate47.png",
    ᐃⵠⲆᐃΔᐃᐃ: "img/night-crate47.png",
    ᐃᐃⲆᐃⲆⵠⲆ: "img/day-crate48.png",
    ⲆⵠⲆᐃⲆⲆᐃ: "img/night-crate48.png",
    ⲆⵠⵠΔⵠΔᐃ: "img/day-crate49.png",
    ΔᐃⲆⲆΔⲆΔ: "img/night-crate49.png",
    ⵠⲆᐃΔΔᐃΔ: "img/day-crate50.png",
    ⲆⵠᐃⲆⵠⵠΔ: "img/night-crate50.png",
    ᐃΔⵠⲆⲆⲆΔ: "img/day-crate51.png",
    ⲆᐃⲆᐃⲆΔⲆ: "img/night-crate51.png",
    ΔⵠᐃΔᐃᐃᐃ: "img/day-crate52.png",
    ⵠΔΔΔᐃΔⲆ: "img/night-crate52.png",
    ⲆᐃΔⲆⵠⵠᐃ: "img/day-crate53.png",
    ⵠⵠⲆⵠᐃⵠΔ: "img/night-crate53.png",
    ᐃΔⲆⲆᐃᐃᐃ: "img/day-crate54.png",
    ⲆⵠⵠⲆᐃᐃⲆ: "img/night-crate54.png",
    ᐃᐃᐃⲆΔΔΔ: "img/day-crate55.png",
    ᐃΔᐃⲆⵠⲆΔ: "img/night-crate55.png",
    ⲆⲆⵠⲆⵠⵠⲆ: "img/day-crate56.png",
    ⵠⵠᐃᐃⲆⲆⵠ: "img/night-crate56.png",
    ΔΔⲆᐃⲆᐃⲆ: "img/day-crate57.png",
    ⲆᐃΔⲆΔᐃⵠ: "img/night-crate57.png",
    ⲆⲆΔⵠᐃΔΔ: "img/day-crate58.png",
    ᐃΔᐃⵠᐃⲆᐃ: "img/night-crate58.png",
    ᐃΔⵠⵠΔΔⲆ: "img/day-crate59.png",
    ⲆᐃΔᐃⲆⵠⲆ: "img/night-crate59.png",
    ΔⵠⵠΔⵠΔⵠ: "img/day-crate60.png",
    ᐃⲆⲆⲆⲆⲆⲆ: "img/night-crate60.png",
    ⵠⵠⵠⲆᐃⵠΔ: "img/day-crate61.png",
    ΔⵠΔⲆᐃⵠᐃ: "img/night-crate61.png",
    ⲆⵠⲆᐃᐃⲆᐃ: "img/day-crate62.png",
    ⲆΔⲆΔᐃⲆⲆ: "img/night-crate62.png",
    ⵠⵠΔΔⵠᐃᐃ: "img/day-crate63.png",
    ⲆⵠᐃⲆΔⲆⲆ: "img/night-crate63.png",
    ΔⲆⲆⵠⵠᐃΔ: "img/day-crate64.png",
    ⵠᐃⵠᐃⵠΔⲆ: "img/night-crate64.png",
    ΔΔⵠⵠⲆⲆⵠ: "img/day-crate65.png",
    ᐃⲆΔΔⵠⵠⵠ: "img/night-crate65.png",
    ΔᐃⲆⵠⵠᐃⵠ: "img/day-crate66.png",
    ⵠⲆΔΔⲆⲆⲆ: "img/night-crate66.png",
    ᐃⵠⲆⵠΔᐃⵠ: "img/day-crate67.png",
    ᐃⲆᐃⲆΔΔⲆ: "img/night-crate67.png",
    ᐃΔⵠΔⵠΔⵠ: "img/day-crate68.png",
    ⵠⲆᐃᐃΔⲆⲆ: "img/night-crate68.png",
    ⵠᐃⲆⵠⵠⵠᐃ: "img/day-crate69.png",
    ⲆⵠⵠⲆᐃᐃΔ: "img/night-crate69.png",
    ᐃⵠⲆⵠᐃΔⲆ: "img/day-crate70.png",
    ⲆᐃᐃⲆΔΔΔ: "img/night-crate70.png",
    ΔⲆᐃⵠⵠᐃⲆ: "img/day-crate71.png",
    ᐃⵠⵠΔⵠⲆⵠ: "img/night-crate71.png",
    ᐃᐃⵠΔⵠⵠᐃ: "img/day-crate72.png",
    ᐃⲆⲆⲆⲆⵠⵠ: "img/night-crate72.png",
    ⵠΔΔⵠⵠⲆⲆ: "img/day-crate73.png",
    ᐃⵠΔⲆᐃΔⵠ: "img/night-crate73.png",
    ΔⲆⲆΔⵠΔΔ: "img/day-crate74.png",
    ⲆΔⵠⲆΔᐃᐃ: "img/night-crate74.png",
    ⵠᐃⵠⵠⲆᐃᐃ: "img/day-crate75.png",
    ⲆΔᐃΔⵠⵠΔ: "img/night-crate75.png",
    ⵠⵠⲆⵠΔⲆⵠ: "img/day-crate76.png",
    ⲆⵠᐃᐃⵠⲆⵠ: "img/night-crate76.png",
    ΔⲆᐃᐃᐃᐃΔ: "img/day-crate77.png",
    ⵠΔⵠⲆΔᐃⲆ: "img/night-crate77.png",
    ΔⲆⵠⲆⵠⲆΔ: "img/day-crate78.png",
    ᐃᐃᐃΔᐃⵠⵠ: "img/night-crate78.png",
    ΔⵠⲆⲆⵠΔᐃ: "img/day-crate79.png",
    ΔΔⲆᐃⵠⲆΔ: "img/night-crate79.png",
    ⵠⲆᐃΔᐃΔⵠ: "img/day-herb0.png",
    ᐃᐃᐃΔⵠⵠΔ: "img/day-herb1.png",
    ⵠⲆⲆΔᐃᐃⵠ: "img/day-herb2.png",
    ΔᐃΔⲆⵠΔΔ: "img/day-herb3.png",
    ΔΔᐃⵠⲆⵠⵠ: "img/day-herb4.png",
    ΔΔⵠⲆΔΔⲆ: "img/day-herb5.png",
    ⲆⵠΔᐃΔⵠⵠ: "img/day-herb6.png",
    ⵠⲆⵠᐃᐃⵠⵠ: "img/day-herb7.png",
    ⲆΔΔⲆⵠΔΔ: "img/day-herb8.png",
    ⵠΔᐃⲆΔⲆΔ: "img/day-herb9.png",
    ⲆΔⵠⲆᐃⲆⵠ: "img/day-herb10.png",
    Δᐃᐃⵠᐃⵠⵠ: "img/day-herb11.png",
    ⵠⵠᐃᐃᐃⵠΔ: "img/day-herb12.png",
    ᐃᐃᐃᐃⵠΔΔ: "img/day-herb13.png",
    ⵠΔⲆΔⲆᐃᐃ: "img/day-herb14.png",
    ⵠᐃⲆⲆⲆⲆΔ: "img/day-herb15.png",
    ⵠΔⲆⲆΔⲆⲆ: "img/day-shell0.png",
    ᐃⲆᐃΔⲆⵠⲆ: "img/day-shell1.png",
    ⵠΔᐃⲆⵠⲆⲆ: "img/day-shell2.png",
    ⵠⵠⲆⲆⲆⲆⲆ: "img/day-leaf1.png",
    ΔⲆΔΔΔⵠⲆ: "img/day-leaf2.png",
    ⲆΔⵠⵠⲆⵠᐃ: "img/day-leaf3.png",
    ⲆⲆΔⲆᐃⵠᐃ: "img/day-leaf4.png",
    ⵠᐃΔⲆΔⵠᐃ: "img/day-leaf5.png",
    ⲆᐃᐃᐃᐃΔⵠ: "img/day-leaf6.png",
    ⲆⲆᐃⲆⵠⵠΔ: "img/day-leaf7.png",
    ⲆΔⲆΔᐃΔⲆ: "img/day-leaf8.png",
    ΔᐃⲆⵠΔᐃᐃ: "img/day-rock0.png",
    ΔⵠᐃᐃΔΔᐃ: "img/day-rock1.png",
    ΔⲆⲆᐃⵠᐃⵠ: "img/day-rock2.png",
    ⲆΔⵠⵠΔᐃⲆ: "img/day-rock3.png",
    ⲆⲆᐃΔᐃΔⲆ: "img/day-rock4.png",
    ΔΔᐃⲆⵠᐃᐃ: "img/day-rock5.png",
    ᐃⵠΔᐃᐃᐃⲆ: "img/day-rock6.png",
    ⲆⲆⲆΔⵠⵠΔ: "img/day-rock7.png",
    ᐃᐃΔⵠᐃⵠᐃ: "img/day-rock8.png",
    ⵠⲆΔᐃΔΔᐃ: "img/day-rock9.png",
    ⲆᐃΔᐃΔᐃΔ: "img/day-rock10.png",
    ⲆΔᐃⲆⲆΔⵠ: "img/day-rock11.png",
    ⲆᐃᐃᐃᐃᐃⲆ: "img/day-rock12.png",
    ΔⵠᐃᐃᐃΔⲆ: "img/day-rock13.png",
    Ⲇⵠⵠⵠⵠᐃⵠ: "img/day-flower1.png",
    ⵠᐃⵠᐃΔΔᐃ: "img/day-flower2.png",
    ⵠᐃΔᐃΔᐃⵠ: "img/day-flower3.png",
    ΔⲆⲆΔⵠⲆⲆ: "img/day-flower4.png",
    ᐃⲆΔΔΔᐃⵠ: "img/day-flower5.png",
    ⵠΔⵠⲆⲆᐃᐃ: "img/day-flower6.png",
    ⵠⵠᐃᐃᐃΔⲆ: "img/day-flower7.png",
    ΔΔⵠᐃⲆⲆⲆ: "img/day-flower8.png",
    ΔᐃΔⵠⵠⲆⲆ: "img/day-flower9.png",
    ⵠΔⲆⵠΔⵠⲆ: "img/day-herb16.png",
    ᐃΔᐃᐃΔΔΔ: "img/day-herb17.png",
    ⲆⲆⲆⲆΔⲆΔ: "img/day-herb18.png",
    ᐃΔⵠᐃⲆⲆΔ: "img/day-herb19.png",
    ⲆⲆⵠⲆᐃⵠᐃ: "img/day-herb20.png",
    ΔⵠⵠᐃⵠⵠΔ: "img/day-herb21.png",
    ΔΔΔⲆⵠⲆⵠ: "img/night-herb0.png",
    ⲆΔⵠⲆⵠⵠⲆ: "img/night-herb1.png",
    ⲆΔⲆⵠᐃⲆΔ: "img/night-herb2.png",
    ᐃΔᐃⲆⲆᐃⲆ: "img/night-herb3.png",
    ΔⲆⵠⵠᐃⵠⵠ: "img/night-herb4.png",
    ᐃᐃΔⵠᐃᐃⲆ: "img/night-herb5.png",
    ⵠⵠΔⵠΔⵠⵠ: "img/night-herb6.png",
    ΔᐃⵠⲆⲆⲆⵠ: "img/night-herb7.png",
    ⵠᐃⲆΔⲆⲆᐃ: "img/night-herb8.png",
    ΔⲆⵠᐃⵠᐃΔ: "img/night-herb9.png",
    ⵠⲆⲆᐃΔᐃᐃ: "img/night-herb10.png",
    ⲆᐃⵠⵠⲆⵠⵠ: "img/night-herb11.png",
    ΔⵠᐃΔⵠⲆᐃ: "img/night-herb12.png",
    ⵠⵠΔⵠⲆΔᐃ: "img/night-herb13.png",
    ᐃΔΔⲆⲆΔᐃ: "img/night-herb14.png",
    ⲆᐃⲆᐃⲆΔΔ: "img/night-herb15.png",
    ᐃⵠⲆᐃΔⵠⵠ: "img/night-shell0.png",
    ΔⵠΔⵠΔΔⵠ: "img/night-shell1.png",
    ⵠᐃⲆᐃⵠΔⲆ: "img/night-shell2.png",
    ᐃΔᐃⵠᐃⲆⵠ: "img/night-leaf1.png",
    ᐃΔⵠⵠⲆⲆΔ: "img/night-leaf2.png",
    ΔⲆⲆⲆΔᐃᐃ: "img/night-leaf3.png",
    ΔΔⵠⲆⲆⵠᐃ: "img/night-leaf4.png",
    ⵠⲆΔⵠᐃᐃⵠ: "img/night-leaf5.png",
    ⲆΔⲆΔΔⲆⵠ: "img/night-leaf6.png",
    ⵠⵠΔᐃᐃΔᐃ: "img/night-leaf7.png",
    ΔⲆΔⵠⲆⲆΔ: "img/night-leaf8.png",
    ᐃΔⲆⵠⵠᐃⵠ: "img/night-rock0.png",
    ΔⵠⵠΔⲆᐃᐃ: "img/night-rock1.png",
    ⲆⲆᐃΔᐃᐃᐃ: "img/night-rock2.png",
    ᐃᐃΔΔᐃⵠᐃ: "img/night-rock3.png",
    ᐃⲆⲆᐃΔΔⵠ: "img/night-rock4.png",
    ΔΔΔΔᐃⵠΔ: "img/night-rock5.png",
    ΔⵠⵠⵠⵠⵠΔ: "img/night-rock6.png",
    ΔᐃⵠⲆⵠⵠᐃ: "img/night-rock7.png",
    ⵠⲆⵠⲆⲆᐃⲆ: "img/night-rock8.png",
    ΔⵠΔᐃᐃᐃⵠ: "img/night-rock9.png",
    ⵠⲆᐃⵠⲆᐃᐃ: "img/night-rock10.png",
    ΔΔᐃᐃΔⵠᐃ: "img/night-rock11.png",
    ΔᐃᐃΔⵠᐃⲆ: "img/night-rock12.png",
    ⵠⵠΔΔᐃᐃⵠ: "img/night-rock13.png",
    ᐃΔΔΔᐃⲆⲆ: "img/night-flower1.png",
    ⵠⵠΔΔᐃⵠΔ: "img/night-flower2.png",
    ⵠΔⲆΔⵠΔⵠ: "img/night-flower3.png",
    ⵠᐃⵠΔΔΔΔ: "img/night-flower4.png",
    ᐃⵠᐃΔᐃⲆⲆ: "img/night-flower5.png",
    ⲆΔᐃⲆΔᐃⵠ: "img/night-flower6.png",
    ⵠⲆᐃⵠⵠᐃⲆ: "img/night-flower7.png",
    ᐃᐃΔᐃⲆᐃΔ: "img/night-flower8.png",
    ᐃⲆᐃⲆΔᐃᐃ: "img/night-flower9.png",
    ⲆΔⵠᐃᐃᐃⲆ: "img/night-herb16.png",
    ⲆᐃⵠΔΔⲆᐃ: "img/night-herb17.png",
    ΔⲆⵠⲆᐃⲆᐃ: "img/night-herb18.png",
    ᐃᐃᐃⵠⲆΔᐃ: "img/night-herb19.png",
    ⲆΔⲆⲆⵠΔⵠ: "img/night-herb20.png",
    ᐃΔΔⵠⲆⵠᐃ: "img/night-herb21.png",
    ᐃⲆⲆΔᐃΔⲆ: "img/day-river000-010-000.png",
    ᐃᐃΔⵠⲆΔⵠ: "img/day-river000-010-010.png",
    ⲆⵠΔᐃᐃⲆⵠ: "img/day-river000-011-000.png",
    ᐃΔⲆᐃᐃⲆⲆ: "img/day-river000-011-010.png",
    ⲆᐃⲆⵠⲆΔΔ: "img/day-river000-011-011.png",
    ᐃᐃⵠⵠΔΔᐃ: "img/day-river000-110-000.png",
    ⲆⲆΔⵠΔⲆⵠ: "img/day-river000-110-010.png",
    ΔⵠⲆΔΔⵠΔ: "img/day-river000-110-110.png",
    ΔΔⵠΔΔⵠΔ: "img/day-river000-111-000.png",
    ⲆᐃᐃᐃⲆⵠᐃ: "img/day-river000-111-010.png",
    ⲆᐃⵠᐃᐃᐃⲆ: "img/day-river000-111-011.png",
    ⵠΔΔⵠⵠⲆⵠ: "img/day-river000-111-110.png",
    ⲆⲆⵠⵠⲆⵠᐃ: "img/day-river000-111-111.png",
    ⵠⵠⲆᐃΔᐃᐃ: "img/day-river010-010-000.png",
    ⲆᐃⵠΔⲆᐃⵠ: "img/day-river010-010-010.png",
    ᐃⵠΔⵠΔᐃᐃ: "img/day-river010-011-000.png",
    ⵠΔΔΔᐃᐃⵠ: "img/day-river010-011-010.png",
    ⵠΔⲆᐃᐃⲆΔ: "img/day-river010-011-011.png",
    ⵠⲆᐃΔⵠΔⵠ: "img/day-river010-110-000.png",
    ᐃⵠΔᐃⲆⵠΔ: "img/day-river010-110-010.png",
    ⵠⵠΔⵠⵠΔⲆ: "img/day-river010-110-110.png",
    ⵠⲆᐃΔⵠᐃᐃ: "img/day-river010-111-000.png",
    ᐃᐃⵠᐃⵠⲆΔ: "img/day-river010-111-010.png",
    ⲆⵠᐃΔⵠⲆⲆ: "img/day-river010-111-011.png",
    ⵠᐃΔΔΔᐃⵠ: "img/day-river010-111-110.png",
    ⵠᐃᐃᐃⵠᐃΔ: "img/day-river010-111-111.png",
    ⲆᐃΔΔΔΔᐃ: "img/day-river011-011-000.png",
    ⵠⲆⲆⲆⲆᐃΔ: "img/day-river011-011-010.png",
    ᐃⲆⵠᐃΔᐃΔ: "img/day-river011-011-011.png",
    ᐃΔⵠᐃΔⵠᐃ: "img/day-river011-111-000.png",
    ΔΔⵠⵠⵠⲆΔ: "img/day-river011-111-010.png",
    ⲆᐃᐃⵠⵠⵠⲆ: "img/day-river011-111-011.png",
    ⵠⵠᐃⵠᐃⵠΔ: "img/day-river011-111-110.png",
    ⵠⲆᐃᐃⲆⵠⲆ: "img/day-river011-111-111.png",
    ⵠⵠᐃⵠⲆΔⲆ: "img/day-river110-110-000.png",
    ᐃⲆΔΔᐃΔⲆ: "img/day-river110-110-010.png",
    ⵠⲆⲆⵠᐃΔⲆ: "img/day-river110-110-110.png",
    ΔⲆⲆΔᐃⲆⵠ: "img/day-river110-111-000.png",
    ΔΔⲆⵠⲆΔⵠ: "img/day-river110-111-010.png",
    ΔᐃΔΔᐃⵠΔ: "img/day-river110-111-011.png",
    ᐃⲆⲆᐃⵠⵠΔ: "img/day-river110-111-110.png",
    ᐃⲆΔᐃⲆᐃⵠ: "img/day-river110-111-111.png",
    ΔΔⵠᐃᐃΔⵠ: "img/day-river111-111-011.png",
    ᐃᐃⵠᐃᐃΔⲆ: "img/day-river111-111-110.png",
    ΔΔⵠᐃᐃΔⵠ: "img/day-river111-111-011.png",
    ᐃⵠⲆᐃⵠᐃⲆ: "img/day-river111-111-000.png",
    ⵠⵠⲆⲆⵠᐃΔ: "img/day-river111-111-111.png",
    ⲆⲆⲆⵠⲆⵠᐃ: "img/day-river111-111-010.png",
    ΔⲆΔⲆᐃⵠᐃ: "img/night-river000-010-000.png",
    ⵠⵠᐃⵠᐃᐃᐃ: "img/night-river000-010-010.png",
    ⲆⵠᐃᐃⵠΔΔ: "img/night-river000-011-000.png",
    ΔⲆⲆⲆᐃⵠⲆ: "img/night-river000-011-010.png",
    ᐃⵠⵠΔⲆⵠⲆ: "img/night-river000-011-011.png",
    ⵠⵠⵠⵠⲆᐃⵠ: "img/night-river000-110-000.png",
    ⲆⵠⲆᐃⵠⲆⵠ: "img/night-river000-110-010.png",
    ⲆΔⲆⲆΔⲆⵠ: "img/night-river000-110-110.png",
    ⵠⲆᐃⲆⲆⲆⲆ: "img/night-river000-111-000.png",
    ΔⵠⵠΔΔΔᐃ: "img/night-river000-111-010.png",
    ᐃⲆΔⵠⵠⲆⲆ: "img/night-river000-111-011.png",
    ᐃΔΔΔⲆⵠⲆ: "img/night-river000-111-110.png",
    ᐃᐃⲆΔΔⵠⲆ: "img/night-river000-111-111.png",
    ⲆⲆⲆᐃΔᐃⲆ: "img/night-river010-010-000.png",
    ᐃⲆᐃⲆⲆᐃΔ: "img/night-river010-010-010.png",
    ΔΔⲆᐃⵠΔΔ: "img/night-river010-011-000.png",
    Ⲇᐃᐃᐃᐃⵠⵠ: "img/night-river010-011-010.png",
    ΔᐃⲆᐃΔᐃΔ: "img/night-river010-011-011.png",
    ⲆⵠⲆⵠᐃΔᐃ: "img/night-river010-110-000.png",
    ᐃⵠⲆΔⲆⲆΔ: "img/night-river010-110-010.png",
    ΔⵠⲆⵠⵠⲆⲆ: "img/night-river010-110-110.png",
    ⲆⲆᐃⲆⲆⲆⲆ: "img/night-river010-111-000.png",
    ⵠⵠᐃⵠⲆⲆᐃ: "img/night-river010-111-010.png",
    ⲆᐃⵠΔΔΔΔ: "img/night-river010-111-011.png",
    ᐃᐃΔΔΔⲆΔ: "img/night-river010-111-110.png",
    ΔΔΔⲆⵠⵠⵠ: "img/night-river010-111-111.png",
    ⲆΔΔⲆⲆΔⲆ: "img/night-river011-011-000.png",
    ⲆⲆⲆᐃⲆⵠΔ: "img/night-river011-011-010.png",
    ΔⵠⲆⵠΔᐃΔ: "img/night-river011-011-011.png",
    ⵠⵠⵠⲆⵠⵠΔ: "img/night-river011-111-000.png",
    ΔΔⵠΔⵠⵠⲆ: "img/night-river011-111-010.png",
    ⲆⲆⲆᐃᐃⵠΔ: "img/night-river011-111-011.png",
    ΔᐃᐃᐃⲆⵠΔ: "img/night-river011-111-110.png",
    ᐃΔΔΔⲆⲆΔ: "img/night-river011-111-111.png",
    ΔΔΔΔΔⵠⵠ: "img/night-river110-110-000.png",
    ⲆⵠΔⵠⲆΔᐃ: "img/night-river110-110-010.png",
    ⲆⵠⵠⲆⲆΔΔ: "img/night-river110-110-110.png",
    ΔΔΔⲆᐃⲆⲆ: "img/night-river110-111-000.png",
    ΔΔΔΔᐃⲆⲆ: "img/night-river110-111-010.png",
    ΔⵠΔΔⵠΔΔ: "img/night-river110-111-011.png",
    ΔⲆᐃᐃΔⵠΔ: "img/night-river110-111-110.png",
    ᐃⵠΔⲆⲆΔᐃ: "img/night-river110-111-111.png",
    ΔⵠΔⲆᐃΔᐃ: "img/night-river111-111-011.png",
    ⵠⵠⲆⵠⲆⲆⲆ: "img/night-river111-111-110.png",
    ΔⵠΔⲆᐃΔᐃ: "img/night-river111-111-011.png",
    ⵠΔⲆⲆᐃᐃᐃ: "img/night-river111-111-000.png",
    ⵠΔⵠⵠⵠΔᐃ: "img/night-river111-111-111.png",
    ᐃᐃΔⵠᐃⲆΔ: "img/night-river111-111-010.png",
    ΔᐃΔⵠΔⵠᐃ: "img/day-pebblecompo1.png",
    ⲆᐃⵠⲆⲆ: "img/day-pebblecompo2.png",
    ΔⵠⲆΔⵠ: "img/day-pebblecompo3.png",
    ⵠΔΔⲆΔΔΔ: "img/day-pebblecompo4.png",
    ⵠⲆⲆⵠⲆ: "img/day-pebblecompo5.png",
    ⵠⵠΔᐃⵠ: "img/day-pebblecompo6.png",
    ΔΔᐃⵠⵠ: "img/day-pebblecompo7.png",
    ΔᐃᐃᐃΔⵠⵠ: "img/day-pebblecompo8.png",
    ᐃⲆⲆⵠⲆⲆΔ: "img/day-pebblecompo9.png",
    ⵠⲆⲆⲆⵠⵠⵠ: "img/day-pebblecompo10.png",
    ⲆᐃⲆⵠᐃ: "img/day-pebblecompo11.png",
    ⵠⲆᐃⵠⵠΔᐃ: "img/day-pebblecompo12.png",
    ᐃⵠᐃΔⲆΔⵠ: "img/day-pebblecompo13.png",
    ᐃⲆⲆⵠⵠΔΔ: "img/day-pebblecompo14.png",
    ⵠᐃΔᐃⲆⲆᐃ: "img/day-pebblecompo15.png",
    ⲆΔΔⲆΔⵠⲆ: "img/day-pebblecompo16.png",
    ⵠⵠᐃⲆⵠ: "img/day-pebblecompo17.png",
    ΔⲆⲆⵠΔⵠΔ: "img/day-pebblecompo18.png",
    ⵠⲆⵠⵠΔΔⵠ: "img/day-pebblecompo19.png",
    ΔΔΔⵠⲆ: "img/day-pebblecompo20.png",
    ΔΔΔⵠⵠ: "img/day-pebblecompo21.png",
    ⵠΔⲆᐃΔⵠᐃ: "img/day-pebblecompo22.png",
    ᐃᐃⲆⲆΔΔᐃ: "img/day-pebblecompo23.png",
    ⲆᐃΔⵠΔⵠⲆ: "img/day-pebblecompo24.png",
    ⵠⵠⵠⵠᐃ: "img/day-pebblecompo25.png",
    ᐃⲆⲆᐃⵠ: "img/day-pebblecompo26.png",
    ⵠⲆΔΔΔᐃΔ: "img/day-pebblecompo27.png",
    Ⲇⵠⵠᐃᐃ: "img/day-pebblecompo28.png",
    ⵠⵠⵠΔⲆᐃⲆ: "img/night-pebblecompo1.png",
    ⵠⵠⵠⵠⲆ: "img/night-pebblecompo2.png",
    ⲆⵠⲆⲆⲆ: "img/night-pebblecompo3.png",
    ⲆᐃᐃⵠΔᐃᐃ: "img/night-pebblecompo4.png",
    ⵠᐃᐃⵠΔ: "img/night-pebblecompo5.png",
    ⵠⲆΔⲆⵠ: "img/night-pebblecompo6.png",
    ᐃⲆᐃᐃⵠ: "img/night-pebblecompo7.png",
    ⵠⵠⲆᐃⲆΔΔ: "img/night-pebblecompo8.png",
    ⲆᐃⲆⲆⵠⵠᐃ: "img/night-pebblecompo9.png",
    ΔⲆΔⲆΔΔΔ: "img/night-pebblecompo10.png",
    ⲆΔᐃΔⲆ: "img/night-pebblecompo11.png",
    ΔⲆⵠⵠⵠΔⲆ: "img/night-pebblecompo12.png",
    ⵠⵠⵠⵠⲆⵠΔ: "img/night-pebblecompo13.png",
    ΔⲆⲆⵠⵠΔⵠ: "img/night-pebblecompo14.png",
    ᐃⵠⵠᐃⲆΔⲆ: "img/night-pebblecompo15.png",
    ⵠⲆⲆᐃⲆⲆΔ: "img/night-pebblecompo16.png",
    ⲆⵠΔⲆⵠ: "img/night-pebblecompo17.png",
    ⵠⵠᐃᐃⲆᐃⲆ: "img/night-pebblecompo18.png",
    ᐃⵠᐃⵠⲆⵠⵠ: "img/night-pebblecompo19.png",
    ᐃᐃΔᐃᐃ: "img/night-pebblecompo20.png",
    Δᐃⵠᐃⵠ: "img/night-pebblecompo21.png",
    ᐃΔⲆⵠⲆᐃΔ: "img/night-pebblecompo22.png",
    ⲆⲆᐃΔΔᐃᐃ: "img/night-pebblecompo23.png",
    ᐃᐃΔΔΔⲆⲆ: "img/night-pebblecompo24.png",
    Ⲇᐃⵠᐃⵠ: "img/night-pebblecompo25.png",
    ΔⵠΔⵠᐃ: "img/night-pebblecompo26.png",
    ΔⵠᐃᐃⵠⵠΔ: "img/night-pebblecompo27.png",
    ⲆⲆΔⲆⲆ: "img/night-pebblecompo28.png",
    ⵠⵠⲆΔⲆΔΔ: "img/day-baby-mammoth.png",
    ⲆᐃᐃⲆᐃⲆΔ: "img/day-baby-mammoth-tamed.png",
    ΔⲆᐃⲆᐃΔᐃ: "img/day-baby-mammoth-angry.png",
    ᐃⵠⲆⲆΔΔⵠ: "img/night-baby-mammoth.png",
    ⵠᐃⵠⵠⲆΔⵠ: "img/night-baby-mammoth-tamed.png",
    ⵠⲆⵠΔⲆⲆᐃ: "img/night-baby-mammoth-angry.png",
    ⲆⲆⲆΔᐃⵠⲆ: "img/inv-mammoth-out.png",
    ᐃΔᐃΔⲆⲆⵠ: "img/inv-mammoth-in.png",
    ⲆΔⲆΔᐃⵠΔ: "img/inv-mammoth-click.png",
    ᐃᐃΔΔΔΔⵠ: "img/hurt-baby-mammoth.png",
    ⲆᐃⵠᐃⵠΔⲆ: "img/baby-mammoth-step.png",
    ᐃᐃΔⵠΔⲆⵠ: "img/day-flower-hat.png",
    ⲆⲆᐃΔΔⵠᐃ: "img/night-flower-hat.png",
    ⲆᐃΔΔⵠᐃᐃ: "img/inv-flower-hat-out.png",
    ΔⲆⲆΔᐃᐃΔ: "img/inv-flower-hat-in.png",
    ⵠᐃⲆᐃΔᐃⵠ: "img/inv-flower-hat-click.png",
    ⵠᐃⵠⲆΔᐃΔ: "img/day-fur-hat.png",
    ⵠⵠᐃⲆᐃⵠᐃ: "img/night-fur-hat.png",
    ΔᐃⲆⵠᐃΔᐃ: "img/inv-fur-hat-out.png",
    ΔⲆᐃΔⵠΔᐃ: "img/inv-fur-hat-in.png",
    ⲆΔⵠⲆΔΔᐃ: "img/inv-fur-hat-click.png",
    ⲆⲆⲆΔᐃⲆⲆ: "img/day-mammoth.png",
    ΔⲆⵠⵠⲆⲆⵠ: "img/night-mammoth.png",
    ᐃΔⲆⲆⵠⵠⵠ: "img/hurt-mammoth.png",
    ⲆᐃΔᐃⵠΔΔ: "img/inv-mammoth-fur-out.png",
    ⲆΔᐃⵠⲆⲆᐃ: "img/inv-mammoth-fur-in.png",
    ⲆΔΔΔⵠΔⲆ: "img/inv-mammoth-fur-click.png",
    ᐃΔⵠⵠᐃΔⵠ: "img/inv-wood-bow-out.png",
    ⲆΔΔΔⵠΔΔ: "img/inv-wood-bow-in.png",
    ⵠΔᐃᐃΔΔⵠ: "img/inv-wood-bow-click.png",
    ⵠⵠⲆΔΔⲆΔ: "img/inv-wood-arrow-out.png",
    ⲆᐃⵠⵠᐃΔⵠ: "img/inv-wood-arrow-in.png",
    ᐃᐃⲆⵠⵠⵠᐃ: "img/inv-wood-arrow-click.png",
    ⵠᐃΔΔΔᐃⲆ: "img/day-wood-bow2.png",
    ⲆΔⵠᐃᐃΔᐃ: "img/night-wood-bow2.png",
    ΔΔⲆⲆⲆⵠⵠ: "img/day-wood-arrow.png",
    ΔᐃᐃⲆΔᐃΔ: "img/night-wood-arrow.png",
    ⵠΔⵠⲆᐃᐃⲆ: "img/inv-stone-bow-out.png",
    ΔᐃΔᐃΔⲆᐃ: "img/inv-stone-bow-in.png",
    ⲆⲆⵠΔᐃΔᐃ: "img/inv-stone-bow-click.png",
    ⵠⵠᐃΔⵠᐃΔ: "img/inv-stone-arrow-out.png",
    ᐃⲆᐃⲆᐃᐃⲆ: "img/inv-stone-arrow-in.png",
    ΔⵠΔⵠⲆᐃⲆ: "img/inv-stone-arrow-click.png",
    ⵠⲆⲆΔᐃᐃᐃ: "img/day-stone-bow.png",
    ΔⵠΔᐃⲆⲆᐃ: "img/night-stone-bow.png",
    ⲆᐃⲆΔΔΔᐃ: "img/day-stone-arrow.png",
    ΔᐃᐃⲆᐃⲆΔ: "img/night-stone-arrow.png",
    ΔΔⵠᐃⵠᐃᐃ: "img/inv-gold-bow-out.png",
    ⲆΔⵠⲆⲆⲆⵠ: "img/inv-gold-bow-in.png",
    ⵠⲆⲆᐃΔᐃⵠ: "img/inv-gold-bow-click.png",
    ⵠⲆΔΔΔⲆΔ: "img/inv-gold-arrow-out.png",
    ᐃᐃⲆⵠΔΔᐃ: "img/inv-gold-arrow-in.png",
    ⲆᐃⲆΔⵠᐃᐃ: "img/inv-gold-arrow-click.png",
    ᐃΔⵠⲆΔΔΔ: "img/day-gold-bow.png",
    ΔΔΔΔΔᐃⲆ: "img/night-gold-bow.png",
    ΔᐃⲆᐃΔΔⲆ: "img/day-gold-arrow.png",
    ΔⵠᐃΔⵠΔΔ: "img/night-gold-arrow.png",
    ΔᐃᐃⲆΔⵠⲆ: "img/inv-diamond-bow-out.png",
    ᐃⲆΔᐃⲆᐃⲆ: "img/inv-diamond-bow-in.png",
    ΔΔⲆᐃⵠᐃⵠ: "img/inv-diamond-bow-click.png",
    ΔΔⵠⲆⵠⲆΔ: "img/inv-diamond-arrow-out.png",
    ΔⵠⲆΔⲆᐃΔ: "img/inv-diamond-arrow-in.png",
    ᐃⵠⵠⵠᐃⵠᐃ: "img/inv-diamond-arrow-click.png",
    ⵠⵠⵠⵠΔΔⵠ: "img/day-diamond-bow.png",
    ᐃⵠΔⲆⲆⲆᐃ: "img/night-diamond-bow.png",
    ᐃⲆΔᐃⲆΔⲆ: "img/day-diamond-arrow.png",
    ΔⵠΔᐃΔⵠᐃ: "img/night-diamond-arrow.png",
    ΔᐃᐃⲆⵠⵠⲆ: "img/inv-amethyst-bow-out.png",
    ⵠⵠᐃᐃⲆⵠᐃ: "img/inv-amethyst-bow-in.png",
    ⲆⲆᐃⲆⵠᐃⲆ: "img/inv-amethyst-bow-click.png",
    ⲆᐃΔΔΔⲆⵠ: "img/inv-amethyst-arrow-out.png",
    ⲆⵠⵠⵠΔⲆⵠ: "img/inv-amethyst-arrow-in.png",
    ΔⵠⵠᐃⵠΔⲆ: "img/inv-amethyst-arrow-click.png",
    ⵠᐃᐃᐃΔⲆⵠ: "img/day-amethyst-bow.png",
    ⲆⵠΔⲆⵠΔᐃ: "img/night-amethyst-bow.png",
    ᐃⵠΔⵠⲆⵠᐃ: "img/day-amethyst-arrow.png",
    ΔⵠΔᐃⵠᐃⵠ: "img/night-amethyst-arrow.png",
    ⲆΔⵠᐃⵠΔⵠ: "img/inv-dragon-bow-out.png",
    ⵠⲆΔᐃⲆᐃⲆ: "img/inv-dragon-bow-in.png",
    ⵠΔΔⲆⲆⵠⲆ: "img/inv-dragon-bow-click.png",
    ⲆⲆⲆΔᐃᐃᐃ: "img/inv-dragon-arrow-out.png",
    ΔΔⵠⵠΔᐃⵠ: "img/inv-dragon-arrow-in.png",
    ⵠΔΔⵠΔᐃΔ: "img/inv-dragon-arrow-click.png",
    ᐃᐃᐃᐃΔᐃⵠ: "img/day-dragon-bow.png",
    ΔᐃᐃⲆⲆᐃΔ: "img/night-dragon-bow.png",
    ⵠΔⲆⵠΔᐃⲆ: "img/day-dragon-arrow.png",
    ⲆᐃⲆⲆⲆΔⵠ: "img/night-dragon-arrow.png",
    Δⵠᐃᐃⵠⵠᐃ: "img/inv-reidite-bow-out.png",
    ⵠΔΔⵠᐃⲆⲆ: "img/inv-reidite-bow-in.png",
    ⵠΔⲆⵠⵠⵠⵠ: "img/inv-reidite-bow-click.png",
    ΔⲆⲆΔΔⲆⲆ: "img/inv-reidite-arrow-out.png",
    ᐃⲆᐃΔᐃⲆᐃ: "img/inv-reidite-arrow-in.png",
    ΔⵠⵠΔⲆⵠᐃ: "img/inv-reidite-arrow-click.png",
    ᐃΔⲆⲆᐃⵠΔ: "img/day-reidite-bow.png",
    ⲆΔΔᐃⵠΔⲆ: "img/night-reidite-bow.png",
    ⵠᐃΔᐃΔᐃΔ: "img/day-reidite-arrow.png",
    ⵠⲆᐃⲆᐃᐃᐃ: "img/night-reidite-arrow.png",
    ᐃᐃᐃΔΔΔⵠ: "img/inv-wooden-axe-out.png",
    ⵠᐃⲆᐃᐃⵠⵠ: "img/inv-wooden-axe-in.png",
    ΔⲆⲆⵠΔⲆⲆ: "img/inv-wooden-axe-click.png",
    ⵠΔᐃΔⲆⵠΔ: "img/day-wooden-axe.png",
    ⵠᐃⵠΔⲆⲆᐃ: "img/night-wooden-axe.png",
    ⵠΔΔⵠⲆΔᐃ: "img/inv-stone-axe-out.png",
    ᐃⲆᐃⵠᐃᐃⵠ: "img/inv-stone-axe-in.png",
    ⵠⲆᐃⲆᐃⲆΔ: "img/inv-stone-axe-click.png",
    ⵠΔΔᐃᐃᐃᐃ: "img/day-stone-axe.png",
    ⵠᐃΔᐃᐃᐃⵠ: "img/night-stone-axe.png",
    ⵠᐃⵠᐃᐃⲆⲆ: "img/inv-golden-axe-out.png",
    ᐃΔⵠⲆΔΔⵠ: "img/inv-golden-axe-in.png",
    ⲆⲆⵠⲆⲆⵠⲆ: "img/inv-golden-axe-click.png",
    ⵠⵠⲆΔΔᐃⵠ: "img/day-golden-axe.png",
    ΔᐃᐃⵠΔΔⵠ: "img/night-golden-axe.png",
    ᐃΔⲆΔⵠΔⵠ: "img/inv-diamond-axe-out.png",
    ⲆΔΔⵠᐃΔⵠ: "img/inv-diamond-axe-in.png",
    ⵠⵠᐃⲆⲆⲆⲆ: "img/inv-diamond-axe-click.png",
    ⲆΔⲆⲆΔⲆᐃ: "img/day-diamond-axe.png",
    ⲆΔᐃⵠⵠᐃᐃ: "img/night-diamond-axe.png",
    ᐃⲆᐃᐃⵠⲆⲆ: "img/inv-amethyst-axe-out.png",
    ⲆⵠΔΔⲆᐃⲆ: "img/inv-amethyst-axe-in.png",
    ⲆΔⲆΔⵠⲆᐃ: "img/inv-amethyst-axe-click.png",
    ⵠⵠΔᐃΔᐃΔ: "img/day-amethyst-axe.png",
    ΔⲆΔⵠⵠΔᐃ: "img/night-amethyst-axe.png",
    ᐃᐃΔᐃΔⵠᐃ: "img/inv-reidite-axe-out.png",
    ᐃΔᐃᐃΔⲆⵠ: "img/inv-reidite-axe-in.png",
    ᐃⲆⲆΔⵠⲆⲆ: "img/inv-reidite-axe-click.png",
    ⵠΔΔΔⲆΔᐃ: "img/day-reidite-axe.png",
    ⲆᐃΔΔᐃⲆᐃ: "img/night-reidite-axe.png",
    ⵠⲆⲆΔⲆΔΔ: "img/bandage-activated.png",
    ᐃⵠΔΔᐃΔⵠ: "img/auto-feed.png",
    ᐃᐃⵠΔᐃⵠᐃ: "img/stop-regeneration.png",
    ⵠⲆΔⵠΔⵠⵠ: "img/stop-regeneration2.png",
    ⵠΔᐃⲆⲆⲆⲆ: "img/day-wood-platform.png",
    ⲆᐃⲆᐃⲆⲆⵠⲆᐃ: "img/night-wood-platform.png",
    ᐃᐃΔΔΔⵠᐃⲆⵠ: "img/inv-wood-platform-in.png",
    ΔⲆⲆᐃᐃⵠᐃⲆⲆ: "img/inv-wood-platform-out.png",
    ᐃⲆⲆⲆΔᐃⲆⲆΔ: "img/inv-wood-platform-click.png",
    ⵠⲆⵠΔᐃⵠⲆᐃⲆ: "img/day-wood-shield.png",
    ⵠⵠⲆⲆⲆᐃΔΔᐃ: "img/night-wood-shield.png",
    ⵠⲆⵠⵠⲆΔⲆΔⵠ: "img/day-stone-shield.png",
    ⵠΔⲆⲆᐃⵠᐃⵠⵠ: "img/night-stone-shield.png",
    ⲆⲆΔᐃᐃΔᐃΔᐃ: "img/day-gold-shield.png",
    ᐃⲆᐃΔⵠⲆⲆⵠⲆ: "img/night-gold-shield.png",
    ᐃⵠΔⵠⵠⲆⵠⵠⵠ: "img/day-diamond-shield.png",
    ᐃᐃⲆⲆⵠⲆᐃΔⲆ: "img/night-diamond-shield.png",
    ⲆⵠⲆᐃΔᐃΔⵠⲆ: "img/day-amethyst-shield.png",
    ᐃΔᐃΔⵠᐃᐃⲆᐃ: "img/night-amethyst-shield.png",
    ᐃΔΔⲆΔᐃⲆΔⵠ: "img/day-reidite-shield.png",
    ᐃⵠⲆⵠⲆᐃⲆⲆᐃ: "img/night-reidite-shield.png",
    ⲆᐃⵠΔΔΔⵠᐃᐃ: "img/inv-wood-shield-in.png",
    ᐃⲆΔΔΔⵠⲆᐃΔ: "img/inv-wood-shield-out.png",
    ⵠⲆᐃΔⵠⲆⵠΔᐃ: "img/inv-wood-shield-click.png",
    ᐃᐃⵠΔⲆΔⵠⵠⲆ: "img/inv-stone-shield-in.png",
    ⲆΔⵠᐃⲆᐃᐃΔⲆ: "img/inv-stone-shield-out.png",
    ⵠΔⵠⲆⵠⵠΔⵠΔ: "img/inv-stone-shield-click.png",
    ⵠᐃⵠⲆⲆΔᐃⵠⵠ: "img/inv-gold-shield-in.png",
    ΔΔΔⲆΔᐃΔΔΔ: "img/inv-gold-shield-out.png",
    ⲆΔᐃΔⲆⲆΔⲆᐃ: "img/inv-gold-shield-click.png",
    ᐃᐃᐃᐃΔΔⲆᐃⵠ: "img/inv-diamond-shield-in.png",
    ᐃⲆⲆⲆΔⲆΔΔᐃ: "img/inv-diamond-shield-out.png",
    ΔⲆΔⵠⵠΔⵠᐃⲆ: "img/inv-diamond-shield-click.png",
    ⵠΔᐃᐃⲆⲆΔΔⲆ: "img/inv-amethyst-shield-in.png",
    ᐃⲆᐃᐃⵠⵠᐃⵠⲆ: "img/inv-amethyst-shield-out.png",
    ⲆΔᐃᐃᐃⲆⵠᐃⵠ: "img/inv-amethyst-shield-click.png",
    ΔⲆΔᐃΔᐃᐃⵠⲆ: "img/inv-reidite-shield-in.png",
    ᐃΔᐃⵠⲆᐃⲆΔⲆ: "img/inv-reidite-shield-out.png",
    ⵠⵠⲆⵠᐃᐃᐃᐃᐃ: "img/inv-reidite-shield-click.png",
    ΔⲆⵠⲆⵠΔᐃⵠᐃ: "img/day-machete.png",
    ⲆⲆᐃᐃᐃᐃⵠΔⵠ: "img/night-machete.png",
    ⲆⵠᐃⲆⲆⲆⵠΔΔ: "img/inv-machete-in.png",
    ⲆΔⲆᐃⲆⵠⵠⲆⲆ: "img/inv-machete-out.png",
    ΔᐃⵠᐃⵠᐃⲆΔⲆ: "img/inv-machete-click.png"
  };
  ΔⲆⵠΔⵠᐃⵠ = [{}];
  ΔⲆⵠΔⵠᐃⵠ[0].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = 0; c < a.length; c++) {
      b[c] = a[c];
    }
    return b;
  };
  const $b = 4;
  ⲆᐃⵠΔⵠΔΔ = {};
  ΔᐃⵠⵠΔᐃᐃⵠⵠ = {};
  for (var Ob in Δᐃ) {
    ⲆᐃⵠΔⵠΔΔ[Ob] = Δᐃ[Ob];
  }
  const ed = 3;
  ᐃᐃ = [];
  ᐃⵠᐃ = {};
  ᐃⵠᐃ.ⵠΔΔⲆⲆ = 0;
  ᐃⵠᐃ.ᐃᐃᐃⲆ = 1;
  const id = 1;
  ᐃⵠᐃ.ⵠΔⵠΔ = 2;
  ᐃⵠᐃ.ⵠᐃΔⲆ = 3;
  ᐃⵠᐃ.ⲆΔⵠᐃ = 4;
  ᐃⵠᐃ.ⲆⵠΔⲆ = 5;
  ᐃⵠᐃ.ᐃⲆⵠΔ = 6;
  const td = 255;
  ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ = 7;
  const nd = 2;
  const od = 10;
  const ad = 4;
  ᐃⵠᐃ.ᐃⵠΔⲆᐃ = 8;
  ⲆⲆΔⲆ = {};
  ⲆΔΔⵠ = [];
  ΔΔⲆⵠⵠⲆⲆ = function (a, b) {
    for (var c = 0; c < a.length; c++) {
      if (a[c].id === b) {
        return c;
      }
    }
    return -1;
  };
  const rd = 7;
  var sd = [];
  function Ct(a, b) {
    for (var c = 0; c < sd.length; c += b) {
      var d = sd[c];
      if (a === d[0]) {
        vd(d[0], d[1], d[2], d[3]);
      }
    }
  }
  const gd = 4;
  const ld = 10;
  const ud = 8;
  const bd = 4;
  const dd = 9;
  function vd(b, c, d, e) {
    var f = ⲆΔΔⵠ[b];
    if (Qq !== f) {
      for (var i = 0; i < 2; i++) {
        var j = f[c][i];
        var k = e * 193 / yx.ᐃᐃΔⵠᐃ;
        var m = d * 193 / yx.ΔΔΔⲆⲆ;
        var n = j.width / 3.5;
        var o = j.height / 3.5;
        ᐃᐃ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
        k = e * 600 / yx.ᐃᐃΔⵠᐃ;
        m = d * 600 / yx.ΔΔΔⲆⲆ;
        n = j.width / 1.5;
        o = j.height / 1.5;
        ᐃᐃ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
      }
    }
  }
  ⲆⵠⵠΔΔⵠⵠᐃᐃ = function () {
    for (var b = 0; b < 2; b++) {
      ᐃᐃ[818][b].clearRect(0, 0, 193, 193);
      ᐃᐃ[818][b].drawImage(ⲆΔΔⵠ.MAP[b], 0, 0, 193, 193);
      ᐃᐃ[819][b].clearRect(0, 0, 600, 600);
      ᐃᐃ[819][b].drawImage(ⲆΔΔⵠ.MAP[b], 0, 0, 600, 600);
      for (var c = yx.ᐃᐃⲆᐃ.length - 1; c >= 0; c--) {
        var d = yx.ᐃᐃⲆᐃ[c];
        var f = d.x1 * 193 / (yx.ᐃᐃΔⵠᐃ * 100);
        var j = d.y1 * 193 / (yx.ΔΔΔⲆⲆ * 100);
        var k = d.w * 193 / (yx.ᐃᐃΔⵠᐃ * 100);
        var m = d.ΔⵠⲆ * 193 / (yx.ΔΔΔⲆⲆ * 100);
        var p = d.x1 * 600 / (yx.ᐃᐃΔⵠᐃ * 100);
        var q = d.y1 * 600 / (yx.ΔΔΔⲆⲆ * 100);
        var u = d.w * 600 / (yx.ᐃᐃΔⵠᐃ * 100);
        var v = d.ΔⵠⲆ * 600 / (yx.ΔΔΔⲆⲆ * 100);
        if (d.ᐃᐃⲆ === yx.ⲆΔΔⲆⵠ) {
          ᐃᐃ[818][b].drawImage(ⲆΔΔⵠ.FOREST[b], f, j, k, m);
          ᐃᐃ[819][b].drawImage(ⲆΔΔⵠ.FOREST[b], p, q, u, v);
        }
        if (yx.ΔⵠⵠᐃΔΔΔ === d.ᐃᐃⲆ) {
          ᐃᐃ[818][b].drawImage(ⲆΔΔⵠ.WINTER[b], f, j, k, m);
          ᐃᐃ[819][b].drawImage(ⲆΔΔⵠ.WINTER[b], p, q, u, v);
        }
        if (yx.ⵠΔᐃΔᐃⵠⵠ === d.ᐃᐃⲆ) {
          ᐃᐃ[818][b].drawImage(ⲆΔΔⵠ.LAVA[b], f, j, k, m);
          ᐃᐃ[819][b].drawImage(ⲆΔΔⵠ.LAVA[b], p, q, u, v);
        }
        if (d.ᐃᐃⲆ === yx.ΔⲆⵠᐃⵠⵠⵠ) {
          ᐃᐃ[818][b].drawImage(ⲆΔΔⵠ.CAVE[b], f, j, k, m);
          ᐃᐃ[819][b].drawImage(ⲆΔΔⵠ.CAVE[b], p, q, u, v);
        }
        if (yx.ᐃᐃⵠΔᐃⵠⲆ === d.ᐃᐃⲆ) {
          ᐃᐃ[818][b].drawImage(ⲆΔΔⵠ.DESERT[b], f, j, k, m);
          ᐃᐃ[819][b].drawImage(ⲆΔΔⵠ.DESERT[b], p, q, u, v);
        }
      }
    }
  };
  function md(b, c, d, e, f, g) {
    if (g * 2 > e) {
      g = e / 2;
    }
    if (f < g * 2) {
      g = f / 2;
    }
    if (g < 0) {
      g = 0;
    }
    b.beginPath();
    b.moveTo(c + g, d);
    b.arcTo(c + e, d, c + e, d + f, g);
    b.arcTo(c + e, d + f, c, d + f, g);
    b.arcTo(c, d + f, c, d, g);
    b.arcTo(c, d, c + e, d, g);
    b.closePath();
  }
  function cd(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  ΔⵠⲆΔΔΔⲆⲆⲆ = function () {
    ⲆⲆΔⲆ = {
      Δⵠᐃⵠⵠ: [{
        id: 0,
        ⵠΔⵠ: Δᐃ.ᐃᐃⵠⲆᐃⵠⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆⲆⵠⵠΔΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔᐃᐃΔⲆΔⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃᐃⵠⵠⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔΔⲆⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        ⵠΔⵠ: Δᐃ.ⵠⲆᐃⲆⵠΔᐃ,
        Δᐃᐃ: Δᐃ.ΔⵠᐃⲆⵠⲆⲆ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠᐃΔⵠⲆⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⲆⲆⲆᐃΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔΔⲆⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Angry"
      }, {
        id: 2,
        ⵠΔⵠ: Δᐃ.ⲆⲆⲆⵠⲆⵠΔ,
        Δᐃᐃ: Δᐃ.ⵠⵠⵠⵠΔΔᐃ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠⵠᐃΔⲆⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔᐃⲆᐃᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔΔⲆⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        ⵠΔⵠ: Δᐃ.ⲆⵠΔⲆᐃΔⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆᐃΔⵠΔᐃ,
        ⲆΔⵠⲆ: Δᐃ.ΔⵠᐃᐃⲆΔΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆΔⲆⲆΔΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔΔⲆⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Happy 1"
      }, {
        id: 1,
        ⵠΔⵠ: Δᐃ.ΔⲆΔⲆᐃΔᐃ,
        Δᐃᐃ: Δᐃ.ᐃⲆⵠⵠΔⵠⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⲆⵠᐃⲆⵠⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⲆΔᐃⵠⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "What?"
      }, {
        id: 4,
        ⵠΔⵠ: Δᐃ.ΔⵠⲆⲆΔΔⲆ,
        Δᐃᐃ: Δᐃ.ⲆᐃⲆΔⲆⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔⲆΔΔⲆⵠⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⲆᐃΔⵠⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Suspicious"
      }, {
        id: 5,
        ⵠΔⵠ: Δᐃ.Ⲇⵠᐃᐃᐃⵠᐃ,
        Δᐃᐃ: Δᐃ.ΔⲆᐃⵠⵠᐃᐃ,
        ⲆΔⵠⲆ: Δᐃ.ΔⵠⵠᐃΔⲆᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⲆΔⵠᐃᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Scar"
      }, {
        id: 6,
        ⵠΔⵠ: Δᐃ.ᐃⵠⲆΔΔⲆⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆⲆⲆΔΔᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃᐃⵠⲆⲆᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆΔⵠΔⵠⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "In Trouble"
      }, {
        id: 7,
        ⵠΔⵠ: Δᐃ.ᐃⵠⵠⵠΔΔᐃ,
        Δᐃᐃ: Δᐃ.ⲆⵠΔΔᐃΔᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃⵠⵠΔⵠⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⲆΔⵠⵠⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Cute"
      }, {
        id: 8,
        ⵠΔⵠ: Δᐃ.ΔᐃΔᐃᐃⵠΔ,
        Δᐃᐃ: Δᐃ.ΔⵠⲆⵠΔⵠᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⲆΔⲆⲆⵠⲆⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆΔᐃΔᐃⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        ⵠΔⵠ: Δᐃ.ⲆᐃᐃⵠⲆΔⲆ,
        Δᐃᐃ: Δᐃ.ⵠⵠᐃⵠⲆⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔⵠΔΔⲆⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⲆΔᐃⲆΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Happy 2"
      }, {
        id: 11,
        ⵠΔⵠ: Δᐃ.ⲆⵠᐃΔⲆⵠⲆ,
        Δᐃᐃ: Δᐃ.ᐃᐃⵠⵠΔΔⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⵠⲆᐃⲆⲆⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔΔᐃⵠΔᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Crazy"
      }, {
        id: 12,
        ⵠΔⵠ: Δᐃ.ⵠᐃᐃⵠⵠⲆΔ,
        Δᐃᐃ: Δᐃ.ΔᐃⲆᐃΔⲆⲆ,
        ⲆΔⵠⲆ: Δᐃ.ᐃᐃΔⲆΔᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆΔⵠᐃⵠⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Happy 3"
      }, {
        id: 13,
        ⵠΔⵠ: Δᐃ.ⲆⲆΔΔⲆΔΔ,
        Δᐃᐃ: Δᐃ.ΔᐃⵠⲆⵠⲆⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠΔᐃᐃⲆΔΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⵠⵠⲆⵠⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Very Cute"
      }, {
        id: 14,
        ⵠΔⵠ: Δᐃ.ⵠⲆΔᐃⲆⲆⵠ,
        Δᐃᐃ: Δᐃ.ⲆⵠΔⵠΔⵠⵠ,
        ⲆΔⵠⲆ: Δᐃ.ΔⲆΔⵠⲆΔⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃⲆⵠⲆⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Curious"
      }, {
        id: 15,
        ⵠΔⵠ: Δᐃ.ⲆΔᐃⵠᐃΔΔ,
        Δᐃᐃ: Δᐃ.ⵠⵠΔⲆΔⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆΔⵠⲆΔⲆⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⲆΔⵠΔⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Bored 2"
      }, {
        id: 16,
        ⵠΔⵠ: Δᐃ.ⵠⵠᐃᐃΔⲆΔ,
        Δᐃᐃ: Δᐃ.ⵠⲆᐃⲆⵠᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⲆⵠΔⲆΔⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⲆΔΔᐃΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Happy 4"
      }, {
        id: 17,
        ⵠΔⵠ: Δᐃ.ΔⲆⵠᐃΔΔᐃ,
        Δᐃᐃ: Δᐃ.ⵠⵠⲆⵠⲆᐃΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔⵠᐃΔⵠΔᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⲆⲆⵠⲆⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Scar 2"
      }, {
        id: 18,
        ⵠΔⵠ: Δᐃ.ᐃΔⲆᐃΔᐃⵠ,
        Δᐃᐃ: Δᐃ.ΔᐃⵠΔΔᐃⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⵠⲆⲆⲆⲆΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔⲆΔΔᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Sick"
      }, {
        id: 19,
        ⵠΔⵠ: Δᐃ.ⵠⵠⲆΔⵠᐃᐃ,
        Δᐃᐃ: Δᐃ.ⲆⲆᐃⲆᐃⲆΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔⲆᐃΔΔⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔΔⵠⵠⵠᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        ⵠΔⵠ: Δᐃ.ΔᐃⲆᐃⵠⵠᐃ,
        Δᐃᐃ: Δᐃ.ⲆΔᐃᐃⲆⲆΔ,
        ⲆΔⵠⲆ: Δᐃ.ⵠΔⵠⵠⵠⲆᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔⵠΔΔΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        ⵠΔⵠ: Δᐃ.ΔᐃⲆΔᐃᐃΔ,
        Δᐃᐃ: Δᐃ.ΔⲆⵠΔΔΔᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⵠⵠⲆΔⵠΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⲆⲆⲆⵠⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        ⵠΔⵠ: Δᐃ.ΔᐃᐃΔᐃΔⵠ,
        Δᐃᐃ: Δᐃ.ΔⵠⵠΔⲆⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⵠΔⲆⲆΔⵠⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⲆⲆⲆⲆᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        ⵠΔⵠ: Δᐃ.ⲆⲆⵠΔΔΔⵠ,
        Δᐃᐃ: Δᐃ.ᐃⲆΔΔⲆⵠⵠ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔΔⵠΔᐃⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⵠⵠΔⵠⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        ⵠΔⵠ: Δᐃ.ΔᐃᐃⵠⲆⲆⵠ,
        Δᐃᐃ: Δᐃ.ⲆΔᐃⵠᐃᐃΔ,
        ⲆΔⵠⲆ: Δᐃ.ⵠΔΔⲆⲆⲆΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⵠΔᐃΔΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 220,
        ⵠΔⵠ: Δᐃ.ⲆΔⵠⲆⲆΔΔ,
        Δᐃᐃ: Δᐃ.ⵠⵠⲆᐃᐃΔⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⲆᐃⵠᐃΔΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⲆΔⵠⲆⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Seams"
      }, {
        id: 104,
        ⵠΔⵠ: Δᐃ.ⵠΔⲆΔⵠΔⲆ,
        Δᐃᐃ: Δᐃ.ⲆΔΔᐃⵠⵠⵠ,
        ⲆΔⵠⲆ: Δᐃ.Δᐃⵠⵠᐃⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔⲆⵠⵠⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "pizza wa",
        name: "Scared at night"
      }, {
        id: 20,
        ⵠΔⵠ: Δᐃ.ΔᐃⲆⲆⵠΔⲆ,
        Δᐃᐃ: Δᐃ.ⲆᐃᐃᐃΔⲆⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠΔⵠΔⵠᐃⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔⵠᐃⲆⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        ⵠΔⵠ: Δᐃ.ⲆᐃⵠⵠⵠⵠⲆ,
        Δᐃᐃ: Δᐃ.ΔⲆΔΔⵠⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⲆΔᐃΔᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⵠⲆᐃⲆⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        ⵠΔⵠ: Δᐃ.ᐃⲆᐃⵠⲆⲆⵠ,
        Δᐃᐃ: Δᐃ.ᐃⲆΔᐃᐃⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃⵠⲆᐃⲆΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⲆᐃΔᐃⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        ⵠΔⵠ: Δᐃ.ⲆⵠᐃΔⲆⲆΔ,
        Δᐃᐃ: Δᐃ.ΔⵠΔᐃⲆΔᐃ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠⲆⲆΔᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠⲆΔΔⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        ⵠΔⵠ: Δᐃ.ⵠⵠⵠⲆⲆⵠⲆ,
        Δᐃᐃ: Δᐃ.ⵠΔⲆᐃΔΔᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⲆΔΔⵠΔᐃⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔΔⲆⲆΔᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        ⵠΔⵠ: Δᐃ.ⲆᐃⲆⲆᐃⵠᐃ,
        Δᐃᐃ: Δᐃ.ΔⵠⵠᐃᐃΔⲆ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠᐃⵠⲆⲆⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃΔᐃΔⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        ⵠΔⵠ: Δᐃ.ΔⲆⲆⵠᐃᐃⵠ,
        Δᐃᐃ: Δᐃ.ⲆᐃⵠΔⵠΔⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃᐃᐃⵠⵠᐃΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆΔⵠⲆⵠΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        ⵠΔⵠ: Δᐃ.ⲆⵠᐃΔΔΔⵠ,
        Δᐃᐃ: Δᐃ.ᐃⵠᐃᐃⵠᐃΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔⵠⵠᐃΔΔⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔΔᐃⲆⵠᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        ⵠΔⵠ: Δᐃ.ⵠΔΔᐃΔΔᐃ,
        Δᐃᐃ: Δᐃ.ᐃⵠⲆⲆᐃⲆⲆ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔΔⲆⵠΔΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⵠⲆⵠᐃⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        ⵠΔⵠ: Δᐃ.ⲆⲆⲆⲆᐃⵠᐃ,
        Δᐃᐃ: Δᐃ.ΔΔⵠⵠⲆᐃᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⲆΔⵠⲆⲆΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⵠⲆΔⵠⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        ⵠΔⵠ: Δᐃ.ⵠᐃᐃⵠᐃⲆᐃ,
        Δᐃᐃ: Δᐃ.ᐃⵠⲆⵠᐃᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⲆᐃΔΔᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔΔΔⲆΔᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        ⵠΔⵠ: Δᐃ.ⵠⵠⲆⵠΔⵠⵠ,
        Δᐃᐃ: Δᐃ.ΔᐃᐃᐃΔⵠᐃ,
        ⲆΔⵠⲆ: Δᐃ.ΔⵠⵠⲆᐃⲆᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃⲆⲆᐃⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        ⵠΔⵠ: Δᐃ.ᐃΔⵠⵠᐃᐃⵠ,
        Δᐃᐃ: Δᐃ.ⵠΔⲆᐃᐃᐃⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⲆⵠᐃⵠΔΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠⵠᐃⲆⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        ⵠΔⵠ: Δᐃ.ⲆⲆⵠᐃⵠᐃΔ,
        Δᐃᐃ: Δᐃ.ΔΔᐃⲆⲆΔᐃ,
        ⲆΔⵠⲆ: Δᐃ.ᐃΔΔⵠⲆⲆⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃⲆΔⲆⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        ⵠΔⵠ: Δᐃ.ᐃⵠᐃⵠᐃᐃΔ,
        Δᐃᐃ: Δᐃ.ΔᐃᐃΔⵠΔⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠΔᐃΔⲆΔⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠⵠΔᐃᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        ⵠΔⵠ: Δᐃ.ⵠⵠᐃΔⵠᐃⵠ,
        Δᐃᐃ: Δᐃ.ΔⵠⲆⲆⲆⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠⵠΔⲆⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.Δᐃⵠᐃⵠⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        ⵠΔⵠ: Δᐃ.ⵠⵠⵠⵠᐃᐃΔ,
        Δᐃᐃ: Δᐃ.ⵠⵠⲆᐃⲆⵠⲆ,
        ⲆΔⵠⲆ: Δᐃ.ᐃᐃⲆᐃⲆᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⲆΔᐃΔΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        ⵠΔⵠ: Δᐃ.ΔⲆᐃⲆⵠΔΔ,
        Δᐃᐃ: Δᐃ.ⵠᐃⲆΔⵠⵠⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃⲆᐃᐃΔᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⲆⲆᐃᐃΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        ⵠΔⵠ: Δᐃ.ⵠΔΔΔⵠⲆΔ,
        Δᐃᐃ: Δᐃ.ⲆⵠⵠⵠᐃⲆⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠΔᐃⵠⵠᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠᐃᐃᐃᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        ⵠΔⵠ: Δᐃ.ⲆΔᐃΔⲆΔⵠ,
        Δᐃᐃ: Δᐃ.ᐃⲆᐃᐃΔΔΔ,
        ⲆΔⵠⲆ: Δᐃ.ⲆΔⲆⵠΔΔⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃⵠᐃᐃⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        ⵠΔⵠ: Δᐃ.ᐃᐃⵠⵠᐃⵠⲆ,
        Δᐃᐃ: Δᐃ.ΔⲆⵠᐃⲆᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆᐃⲆᐃᐃᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⲆⵠⲆᐃᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        ⵠΔⵠ: Δᐃ.ΔΔᐃⲆⵠⵠⵠ,
        Δᐃᐃ: Δᐃ.ᐃΔᐃⲆᐃΔΔ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⲆⲆΔΔᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃᐃⲆᐃᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        ⵠΔⵠ: Δᐃ.ⲆⵠⵠΔΔⵠᐃ,
        Δᐃᐃ: Δᐃ.ⲆΔᐃΔⲆΔᐃ,
        ⲆΔⵠⲆ: Δᐃ.ΔⲆΔᐃᐃⲆⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃᐃⲆⲆΔΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        ⵠΔⵠ: Δᐃ.ⲆΔⵠⵠΔⲆᐃ,
        Δᐃᐃ: Δᐃ.ᐃⵠΔΔΔⵠⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃΔᐃᐃᐃᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔΔΔⵠᐃᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        ⵠΔⵠ: Δᐃ.ᐃΔⲆⵠᐃᐃⵠ,
        Δᐃᐃ: Δᐃ.ⲆⵠⵠΔⵠΔⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⵠᐃⲆⲆⵠⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆΔⵠⵠΔⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        ⵠΔⵠ: Δᐃ.ΔᐃⵠΔⵠⵠⵠ,
        Δᐃᐃ: Δᐃ.ᐃΔᐃⵠⲆΔⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⲆⵠⵠΔⲆⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃⵠⲆⲆᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        ⵠΔⵠ: Δᐃ.ⵠⵠⵠⲆΔΔⲆ,
        Δᐃᐃ: Δᐃ.ⲆⵠⵠⲆⵠᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ΔᐃⲆⲆⵠᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠᐃⲆᐃⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        ⵠΔⵠ: Δᐃ.ΔΔΔΔΔⵠⲆ,
        Δᐃᐃ: Δᐃ.ΔⵠΔᐃᐃᐃᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃΔⵠⲆΔΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⵠⵠⵠᐃΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        ⵠΔⵠ: Δᐃ.ᐃⵠΔΔΔᐃⲆ,
        Δᐃᐃ: Δᐃ.ᐃⵠⵠⵠΔⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ⲆᐃⵠⲆᐃⲆᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔΔⵠΔΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        ⵠΔⵠ: Δᐃ.ⵠΔⵠⵠᐃⲆᐃ,
        Δᐃᐃ: Δᐃ.ᐃⲆⲆΔΔΔΔ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⲆΔⲆᐃⲆΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⲆΔᐃᐃⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        ⵠΔⵠ: Δᐃ.ᐃᐃΔΔⵠᐃⵠ,
        Δᐃᐃ: Δᐃ.ᐃⲆⵠⲆᐃⵠⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠΔⲆⵠⲆΔⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⲆⲆⵠⲆᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        ⵠΔⵠ: Δᐃ.ΔⵠΔⵠᐃⲆΔ,
        Δᐃᐃ: Δᐃ.ᐃⵠⲆⲆᐃⵠⲆ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⲆⲆΔΔΔⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔᐃΔΔⵠⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        ⵠΔⵠ: Δᐃ.Ⲇⵠⵠᐃⵠᐃⵠ,
        Δᐃᐃ: Δᐃ.ⵠⵠᐃⵠⲆᐃᐃ,
        ⲆΔⵠⲆ: Δᐃ.ᐃᐃΔⲆΔΔᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆᐃΔΔⵠⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        ⵠΔⵠ: Δᐃ.ⲆⵠⲆΔⵠⲆⵠ,
        Δᐃᐃ: Δᐃ.ΔⲆᐃᐃΔⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.Ⲇᐃⵠᐃᐃⵠⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃΔΔⵠΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        ⵠΔⵠ: Δᐃ.ΔⲆⵠᐃᐃᐃᐃ,
        Δᐃᐃ: Δᐃ.ᐃⵠᐃᐃΔⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃᐃΔΔⵠΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⲆᐃⲆⲆᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        ⵠΔⵠ: Δᐃ.ᐃⲆⵠⵠᐃⲆᐃ,
        Δᐃᐃ: Δᐃ.ᐃⲆΔⲆΔⵠⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⲆᐃΔᐃⲆⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⲆⲆΔΔΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "aloner",
        name: "Machine Mask"
      }, {
        id: 184,
        ⵠΔⵠ: Δᐃ.ⵠⵠⵠᐃΔⲆⲆ,
        Δᐃᐃ: Δᐃ.ΔΔᐃⵠⵠⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⵠⵠᐃⲆΔΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆΔΔΔΔⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Mad"
      }, {
        id: 206,
        ⵠΔⵠ: Δᐃ.ΔⲆⵠⵠⵠᐃⵠ,
        Δᐃᐃ: Δᐃ.ᐃⲆⵠᐃⲆΔΔ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⵠᐃΔⵠⲆΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃᐃⵠⲆᐃⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Survivor"
      }, {
        id: 209,
        ⵠΔⵠ: Δᐃ.ⲆⲆⵠᐃⲆᐃⲆ,
        Δᐃᐃ: Δᐃ.ΔᐃⵠⲆⵠⵠⵠ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔᐃΔᐃΔᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃΔⲆⵠⲆⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Starverator"
      }, {
        id: 230,
        ⵠΔⵠ: Δᐃ.ΔⵠⵠΔⲆΔⲆ,
        Δᐃᐃ: Δᐃ.ΔⲆᐃΔᐃΔΔ,
        ⲆΔⵠⲆ: Δᐃ.ⲆᐃⵠΔᐃᐃΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⲆΔⵠⵠᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Totem"
      }, {
        id: 231,
        ⵠΔⵠ: Δᐃ.ⵠⲆⲆⲆΔᐃⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆΔᐃΔΔⲆ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔⵠⲆⵠⵠⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆᐃΔΔΔᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Big Pile of Sand"
      }, {
        id: 232,
        ⵠΔⵠ: Δᐃ.ᐃΔᐃᐃᐃᐃᐃ,
        Δᐃᐃ: Δᐃ.ΔΔⲆᐃⲆⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⵠΔᐃᐃⲆᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔΔΔΔΔᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Big Pile of Dirt"
      }, {
        id: 235,
        ⵠΔⵠ: Δᐃ.ⲆⲆⵠⲆΔᐃΔ,
        Δᐃᐃ: Δᐃ.ⲆⲆⵠΔΔᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠⵠΔΔⵠΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠᐃⵠΔᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Sandstone"
      }, {
        id: 29,
        ⵠΔⵠ: Δᐃ.ⲆⲆΔΔᐃⲆᐃ,
        Δᐃᐃ: Δᐃ.ᐃⵠΔᐃΔᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⲆΔⲆⵠⲆⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔᐃⵠΔᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        ⵠΔⵠ: Δᐃ.ΔΔⲆΔΔΔⲆ,
        Δᐃᐃ: Δᐃ.ⵠⲆᐃᐃΔⲆΔ,
        ⲆΔⵠⲆ: Δᐃ.Δᐃⵠⵠᐃᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔⵠⲆΔⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        ⵠΔⵠ: Δᐃ.ⵠΔⵠⲆΔΔᐃ,
        Δᐃᐃ: Δᐃ.ᐃⲆⵠᐃⵠⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃᐃᐃΔⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⵠᐃΔⵠᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        ⵠΔⵠ: Δᐃ.ΔⲆᐃᐃⲆΔⲆ,
        Δᐃᐃ: Δᐃ.ᐃᐃᐃᐃᐃᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⵠΔⲆⲆⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⲆⲆⵠⲆᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        ⵠΔⵠ: Δᐃ.ᐃᐃᐃᐃⲆΔᐃ,
        Δᐃᐃ: Δᐃ.ᐃᐃΔⵠᐃΔⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⵠᐃⵠΔΔᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃᐃΔⲆⲆⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        ⵠΔⵠ: Δᐃ.ΔⲆᐃⵠⵠⲆⵠ,
        Δᐃᐃ: Δᐃ.ᐃᐃⵠΔᐃᐃΔ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⲆⲆΔΔᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⲆᐃΔⵠΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        ⵠΔⵠ: Δᐃ.ΔⵠⲆᐃᐃⲆⲆ,
        Δᐃᐃ: Δᐃ.ⵠΔΔᐃΔⵠᐃ,
        ⲆΔⵠⲆ: Δᐃ.ΔⵠᐃⵠⲆⵠⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃⲆⲆᐃΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        ⵠΔⵠ: Δᐃ.ⲆⲆⲆΔⵠⵠⲆ,
        Δᐃᐃ: Δᐃ.ⲆᐃΔᐃⵠᐃᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⵠΔⲆΔΔᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⵠΔⲆΔⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        ⵠΔⵠ: Δᐃ.ΔᐃΔΔᐃΔᐃ,
        Δᐃᐃ: Δᐃ.ᐃⲆⵠᐃΔⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⲆⵠΔΔⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠⵠⲆⵠᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        ⵠΔⵠ: Δᐃ.ⲆΔΔᐃⵠⵠᐃ,
        Δᐃᐃ: Δᐃ.ⵠⵠΔΔⵠⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ΔⲆΔᐃΔⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃΔⲆⵠⵠⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        ⵠΔⵠ: Δᐃ.ⵠᐃΔⲆⵠΔᐃ,
        Δᐃᐃ: Δᐃ.ⲆᐃⵠΔⵠⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃᐃⲆΔⲆⲆᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠΔⲆⵠⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        ⵠΔⵠ: Δᐃ.ⵠⲆⵠⵠΔᐃⲆ,
        Δᐃᐃ: Δᐃ.ⵠⲆΔΔⲆⵠⲆ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔⵠⲆΔⵠΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆᐃⲆΔⲆⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        ⵠΔⵠ: Δᐃ.ΔᐃⵠΔⲆⵠᐃ,
        Δᐃᐃ: Δᐃ.ⲆΔΔⲆⵠᐃᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃⵠⵠⵠⲆΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⵠΔⲆΔⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        ⵠΔⵠ: Δᐃ.ⲆΔΔⲆⵠⵠⲆ,
        Δᐃᐃ: Δᐃ.ΔΔⵠⲆΔᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆΔⲆⵠⵠᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⲆᐃΔⲆΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        ⵠΔⵠ: Δᐃ.ⵠⵠⲆΔᐃⵠᐃ,
        Δᐃᐃ: Δᐃ.ⵠᐃΔᐃΔⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ᐃΔⵠⲆΔⲆⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔΔⲆⲆⲆΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        ⵠΔⵠ: Δᐃ.ᐃⲆⲆⲆⲆΔΔ,
        Δᐃᐃ: Δᐃ.ⲆⲆⲆᐃⲆᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃΔΔᐃᐃΔⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠⵠΔⵠⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        ⵠΔⵠ: Δᐃ.ᐃⵠΔⵠⲆⵠⵠ,
        Δᐃᐃ: Δᐃ.ⲆⵠΔⲆᐃⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔΔⲆⵠⵠΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔΔⲆⵠΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        ⵠΔⵠ: Δᐃ.ⲆⵠⲆⲆᐃᐃⲆ,
        Δᐃᐃ: Δᐃ.ⲆΔⵠᐃΔᐃⲆ,
        ⲆΔⵠⲆ: Δᐃ.ᐃᐃⵠⲆΔᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔΔⲆᐃⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        ⵠΔⵠ: Δᐃ.ᐃⵠⵠⲆⲆΔΔ,
        Δᐃᐃ: Δᐃ.ΔⲆᐃⲆⲆⵠⲆ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔᐃⵠᐃⲆΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆΔⵠΔⲆᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        ⵠΔⵠ: Δᐃ.Δⵠᐃᐃⵠᐃⵠ,
        Δᐃᐃ: Δᐃ.ⵠᐃⲆᐃᐃᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠΔⲆᐃⵠΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⵠΔⲆⲆⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        ⵠΔⵠ: Δᐃ.ΔᐃΔᐃᐃΔᐃ,
        Δᐃᐃ: Δᐃ.ⲆᐃᐃⵠΔⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ΔⲆⲆΔᐃᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃᐃⵠᐃⲆΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        ⵠΔⵠ: Δᐃ.ⲆⵠΔⵠⲆᐃᐃ,
        Δᐃᐃ: Δᐃ.ᐃᐃΔᐃΔⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⲆⲆⲆᐃᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⵠΔΔⵠⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        ⵠΔⵠ: Δᐃ.ΔⲆⲆᐃᐃᐃⵠ,
        Δᐃᐃ: Δᐃ.ⵠⵠᐃⵠΔΔⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⲆΔⵠΔᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃΔⵠⵠⲆⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        ⵠΔⵠ: Δᐃ.ⵠⲆΔⵠⵠᐃΔ,
        Δᐃᐃ: Δᐃ.ᐃΔᐃⵠΔⲆΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔᐃⲆΔᐃⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔΔⲆⵠΔⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        ⵠΔⵠ: Δᐃ.ᐃΔΔⵠΔΔⲆ,
        Δᐃᐃ: Δᐃ.ΔⵠⵠᐃΔⵠᐃ,
        ⲆΔⵠⲆ: Δᐃ.ᐃΔⲆⲆᐃΔΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃᐃⵠΔΔⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        ⵠΔⵠ: Δᐃ.ⵠⲆᐃⵠⵠᐃΔ,
        Δᐃᐃ: Δᐃ.ⵠⲆⲆΔⵠⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⲆΔᐃᐃⵠᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃΔⵠᐃⵠᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        ⵠΔⵠ: Δᐃ.ⲆⲆⵠⵠᐃⲆᐃ,
        Δᐃᐃ: Δᐃ.ᐃⵠΔⵠΔΔⲆ,
        ⲆΔⵠⲆ: Δᐃ.ΔⲆΔⲆⲆΔΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⵠᐃⲆⵠⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        ⵠΔⵠ: Δᐃ.ⵠᐃⲆⲆΔⵠΔ,
        Δᐃᐃ: Δᐃ.ⵠΔⲆⵠⵠΔⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆΔⲆⵠΔΔΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃΔᐃⵠⲆΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        ⵠΔⵠ: Δᐃ.ΔⲆⲆΔⵠⵠⵠ,
        Δᐃᐃ: Δᐃ.ΔΔᐃⲆΔⵠⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃΔΔΔⲆᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⵠΔⲆᐃᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        ⵠΔⵠ: Δᐃ.ᐃⲆᐃΔᐃᐃⲆ,
        Δᐃᐃ: Δᐃ.ΔᐃΔⲆⵠⵠⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⵠⲆⵠⵠΔᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⲆᐃⵠⲆⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        ⵠΔⵠ: Δᐃ.ΔᐃⵠᐃⵠᐃⲆ,
        Δᐃᐃ: Δᐃ.ⲆΔᐃᐃᐃⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆΔⵠΔⲆᐃΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔᐃΔⲆΔΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        ⵠΔⵠ: Δᐃ.ⲆⲆΔⵠⵠᐃⵠ,
        Δᐃᐃ: Δᐃ.ⵠⵠⲆᐃⲆⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃᐃᐃᐃᐃⲆᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃⵠᐃᐃΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        ⵠΔⵠ: Δᐃ.ᐃⲆᐃⵠⵠⵠᐃ,
        Δᐃᐃ: Δᐃ.ᐃⲆΔⲆᐃΔⲆ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⲆᐃᐃΔᐃⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃᐃⲆⵠᐃⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        ⵠΔⵠ: Δᐃ.ⲆΔᐃΔΔΔΔ,
        Δᐃᐃ: Δᐃ.ⲆⵠᐃᐃⲆᐃᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⲆᐃⲆΔⵠⵠⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃΔⵠⵠⵠⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        ⵠΔⵠ: Δᐃ.ⲆⵠᐃⵠᐃⵠⲆ,
        Δᐃᐃ: Δᐃ.ᐃⵠΔⵠΔᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ΔᐃᐃⲆᐃⵠⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⵠⵠᐃΔΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        ⵠΔⵠ: Δᐃ.ⲆⲆⲆⲆⵠᐃᐃ,
        Δᐃᐃ: Δᐃ.ⵠᐃⲆⵠⵠⵠⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃⲆᐃᐃⲆⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠᐃΔⵠΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "aloner",
        name: "Axolotl"
      }, {
        id: 178,
        ⵠΔⵠ: Δᐃ.ⲆᐃᐃⲆⲆᐃⵠ,
        Δᐃᐃ: Δᐃ.ᐃⵠⵠⵠΔᐃⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⵠⵠⲆⲆᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆᐃⲆΔᐃⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Rusted Machine"
      }, {
        id: 179,
        ⵠΔⵠ: Δᐃ.ⵠⲆᐃᐃⵠⵠᐃ,
        Δᐃᐃ: Δᐃ.ⵠΔⵠᐃᐃⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ΔᐃⵠᐃᐃΔⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⲆᐃⵠⲆⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Starving Machine"
      }, {
        id: 181,
        ⵠΔⵠ: Δᐃ.ⲆⵠᐃᐃⵠΔⲆ,
        Δᐃᐃ: Δᐃ.ⲆΔΔⵠⵠΔᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⵠΔⵠⲆⵠΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔᐃᐃⲆⵠΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Night Stars"
      }, {
        id: 191,
        ⵠΔⵠ: Δᐃ.ᐃⲆΔⲆΔⵠⵠ,
        Δᐃᐃ: Δᐃ.ⵠⲆΔⵠⲆⵠᐃ,
        ⲆΔⵠⲆ: Δᐃ.ΔⲆΔⵠᐃΔⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆᐃⵠⵠⵠⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Blue Jay"
      }, {
        id: 198,
        ⵠΔⵠ: Δᐃ.ΔⵠᐃⲆⵠᐃⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆᐃᐃΔΔⵠ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔⵠⲆΔᐃΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃᐃΔᐃⵠΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "AWTP",
        name: "Dave"
      }, {
        id: 200,
        ⵠΔⵠ: Δᐃ.ⵠᐃⲆᐃᐃᐃΔ,
        Δᐃᐃ: Δᐃ.ΔΔᐃⲆⲆᐃᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⵠⵠⲆᐃⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆᐃΔΔⵠΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Jinty",
        name: "Smug"
      }, {
        id: 203,
        ⵠΔⵠ: Δᐃ.ᐃⵠⵠΔⵠᐃⲆ,
        Δᐃᐃ: Δᐃ.ᐃⲆⵠΔᐃⲆⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⲆΔⵠᐃⲆⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⵠⵠⲆᐃⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Reclaimed"
      }, {
        id: 204,
        ⵠΔⵠ: Δᐃ.ΔΔΔᐃⲆⲆΔ,
        Δᐃᐃ: Δᐃ.ⲆⲆᐃⵠⵠⵠⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⵠⲆᐃΔᐃⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⲆᐃᐃᐃⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Legacy Wolf"
      }, {
        id: 211,
        ⵠΔⵠ: Δᐃ.ⲆⵠᐃΔⵠΔⲆ,
        Δᐃᐃ: Δᐃ.ᐃⵠΔΔᐃⵠᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⲆⵠᐃᐃᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔᐃⲆᐃΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Starver of the Seas"
      }, {
        id: 213,
        ⵠΔⵠ: Δᐃ.ⵠⲆᐃᐃⵠᐃⲆ,
        Δᐃᐃ: Δᐃ.ⵠᐃᐃΔᐃⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔᐃᐃΔᐃΔΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⲆⵠⲆⲆⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Ice"
      }, {
        id: 219,
        ⵠΔⵠ: Δᐃ.ⲆⵠⲆⲆⲆⵠΔ,
        Δᐃᐃ: Δᐃ.ⲆⵠΔᐃⲆΔᐃ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠⲆⵠⵠᐃⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⲆΔΔᐃΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Ramil",
        name: "Sandwich Cookie"
      }, {
        id: 221,
        ⵠΔⵠ: Δᐃ.ΔᐃⵠⲆᐃᐃⵠ,
        Δᐃᐃ: Δᐃ.ᐃΔⲆΔΔΔΔ,
        ⲆΔⵠⲆ: Δᐃ.ᐃᐃⲆⵠⵠΔⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔΔⲆᐃⵠⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Purple Geode"
      }, {
        id: 222,
        ⵠΔⵠ: Δᐃ.ᐃΔΔⲆⲆΔⵠ,
        Δᐃᐃ: Δᐃ.ΔⲆᐃᐃⵠⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ᐃΔᐃᐃΔⵠΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔⵠⵠⲆⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Cyan Geode"
      }, {
        id: 223,
        ⵠΔⵠ: Δᐃ.ⵠᐃΔⵠⵠΔⲆ,
        Δᐃᐃ: Δᐃ.ᐃᐃᐃⵠᐃⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔⲆⵠⵠΔΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔΔⲆⵠⲆⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Yellow Geode"
      }, {
        id: 228,
        ⵠΔⵠ: Δᐃ.ⵠᐃᐃⵠⵠΔⲆ,
        Δᐃᐃ: Δᐃ.ⵠⵠᐃᐃⵠⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⲆᐃΔΔⲆΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⵠⵠᐃᐃⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Furnace Head"
      }, {
        id: 229,
        ⵠΔⵠ: Δᐃ.ΔⲆⵠΔΔⲆⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆΔⲆᐃⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⲆΔΔⲆⲆⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆΔᐃⲆⲆΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Bag"
      }, {
        id: 227,
        ⵠΔⵠ: Δᐃ.ⵠᐃⵠᐃΔᐃⲆ,
        Δᐃᐃ: Δᐃ.ⵠⵠΔⵠⲆⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ᐃΔⵠΔⵠᐃⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⲆⲆⲆⵠΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Lit Furnace Head"
      }, {
        id: 25,
        ⵠΔⵠ: Δᐃ.ⵠΔᐃΔᐃΔᐃ,
        Δᐃᐃ: Δᐃ.ΔᐃⲆΔⵠⵠᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⲆΔΔᐃᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⲆⲆⲆⵠⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        ⵠΔⵠ: Δᐃ.ⵠΔΔⲆⵠᐃⵠ,
        Δᐃᐃ: Δᐃ.ᐃΔⲆⲆⵠⵠⲆ,
        ⲆΔⵠⲆ: Δᐃ.ΔⵠᐃⲆⲆⲆᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⲆⲆᐃⲆᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        ⵠΔⵠ: Δᐃ.ⲆᐃΔⵠᐃᐃⵠ,
        Δᐃᐃ: Δᐃ.ᐃΔᐃⲆⲆⵠⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃⲆᐃⲆΔᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃⲆⵠᐃᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        ⵠΔⵠ: Δᐃ.ΔⲆⵠΔᐃⵠᐃ,
        Δᐃᐃ: Δᐃ.ᐃΔΔⵠⵠᐃᐃ,
        ⲆΔⵠⲆ: Δᐃ.ΔᐃᐃᐃΔᐃⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⵠⲆᐃᐃⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        ⵠΔⵠ: Δᐃ.ᐃⵠⲆᐃⲆΔⵠ,
        Δᐃᐃ: Δᐃ.ⵠⲆⲆΔΔᐃᐃ,
        ⲆΔⵠⲆ: Δᐃ.ΔⵠᐃⲆΔⲆⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⵠⵠⵠⵠⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        ⵠΔⵠ: Δᐃ.ΔⲆᐃᐃⲆⵠΔ,
        Δᐃᐃ: Δᐃ.ⲆΔⵠⵠᐃᐃⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠΔᐃᐃⵠⵠⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⵠⲆᐃⵠΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        ⵠΔⵠ: Δᐃ.ΔΔⲆⵠΔⵠⵠ,
        Δᐃᐃ: Δᐃ.ᐃᐃⲆᐃᐃⵠᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⵠⲆᐃⲆᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⵠⵠⵠᐃᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        ⵠΔⵠ: Δᐃ.ⵠᐃᐃⵠⲆΔΔ,
        Δᐃᐃ: Δᐃ.ⵠᐃᐃΔᐃⲆⲆ,
        ⲆΔⵠⲆ: Δᐃ.ᐃΔⵠⲆΔⲆΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⵠΔᐃΔΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        ⵠΔⵠ: Δᐃ.ⵠᐃᐃΔⲆⵠΔ,
        Δᐃᐃ: Δᐃ.ᐃⲆᐃⵠΔᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃᐃΔⲆΔΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠᐃᐃΔⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        ⵠΔⵠ: Δᐃ.ΔᐃⲆᐃⲆΔⵠ,
        Δᐃᐃ: Δᐃ.ᐃᐃⵠΔⵠΔⵠ,
        ⲆΔⵠⲆ: Δᐃ.ΔⵠⲆᐃⵠⲆⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⲆⲆⵠⲆΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        ⵠΔⵠ: Δᐃ.ⲆⵠΔᐃⲆΔΔ,
        Δᐃᐃ: Δᐃ.ᐃᐃⵠΔΔⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ᐃΔⵠᐃᐃᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⲆⵠΔΔⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        ⵠΔⵠ: Δᐃ.ⲆⲆᐃⵠⲆⵠᐃ,
        Δᐃᐃ: Δᐃ.ⲆᐃᐃⲆⲆΔⲆ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠⲆΔΔΔᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⵠΔᐃⵠⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        ⵠΔⵠ: Δᐃ.ⵠⲆΔΔᐃⲆⲆ,
        Δᐃᐃ: Δᐃ.ΔⲆⲆⲆⵠΔᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⲆⵠⲆᐃΔⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔⵠⲆΔⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        ⵠΔⵠ: Δᐃ.ΔⲆⲆⵠⲆⵠⲆ,
        Δᐃᐃ: Δᐃ.ⵠΔⲆⲆⵠⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ⵠΔⲆᐃᐃⵠΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔᐃᐃⲆᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        ⵠΔⵠ: Δᐃ.ⲆΔⲆⵠⵠⵠⵠ,
        Δᐃᐃ: Δᐃ.ᐃⵠⵠᐃᐃᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⵠⲆⲆᐃᐃΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔᐃΔΔᐃᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        ⵠΔⵠ: Δᐃ.ⲆᐃᐃⲆⵠⵠⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆⲆⲆⲆⵠᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⵠΔΔᐃⲆΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃΔⵠⵠᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        ⵠΔⵠ: Δᐃ.ΔΔⲆᐃⵠⵠΔ,
        Δᐃᐃ: Δᐃ.ᐃⲆⵠΔΔᐃⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⵠⲆⲆΔᐃΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠⵠⵠⵠⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        ⵠΔⵠ: Δᐃ.ⲆⵠᐃⲆΔⲆᐃ,
        Δᐃᐃ: Δᐃ.ΔⲆⵠⵠΔⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔΔΔΔⲆⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⲆⲆⵠⲆⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        ⵠΔⵠ: Δᐃ.ⵠᐃⵠⲆⲆᐃΔ,
        Δᐃᐃ: Δᐃ.ΔΔⲆΔΔᐃΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔᐃⲆⲆⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃΔᐃΔⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        ⵠΔⵠ: Δᐃ.ⵠⵠⵠⵠΔⲆΔ,
        Δᐃᐃ: Δᐃ.ΔᐃⵠΔΔΔᐃ,
        ⲆΔⵠⲆ: Δᐃ.ᐃᐃᐃᐃᐃⵠⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⲆⲆΔⵠⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        ⵠΔⵠ: Δᐃ.ᐃᐃΔᐃⲆᐃⵠ,
        Δᐃᐃ: Δᐃ.ΔⵠΔⵠⵠⵠⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃⵠΔᐃΔⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⵠΔⲆⵠⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        ⵠΔⵠ: Δᐃ.ⲆᐃΔⲆⵠⵠⵠ,
        Δᐃᐃ: Δᐃ.ⵠᐃᐃⲆᐃⵠⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠΔᐃⵠⵠΔΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔᐃᐃᐃᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        ⵠΔⵠ: Δᐃ.ⵠΔᐃⲆⲆⵠΔ,
        Δᐃᐃ: Δᐃ.ⵠⲆΔⵠⵠᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⵠΔΔⲆⲆᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⲆᐃᐃⵠΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        ⵠΔⵠ: Δᐃ.ᐃⲆΔⲆᐃᐃⲆ,
        Δᐃᐃ: Δᐃ.ᐃΔΔΔⲆᐃΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔᐃⵠΔⵠΔ,
        Ⲇᐃᐃⵠ: Δᐃ.Δⵠⵠⵠⵠᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        ⵠΔⵠ: Δᐃ.ΔⵠᐃᐃⵠᐃΔ,
        Δᐃᐃ: Δᐃ.ΔΔΔⵠᐃⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⵠΔⲆⵠΔⲆⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔᐃⲆᐃΔⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        ⵠΔⵠ: Δᐃ.ᐃΔⲆᐃⵠᐃΔ,
        Δᐃᐃ: Δᐃ.ⲆᐃⲆⵠⵠⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.Δⵠᐃⵠⵠᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔΔΔⵠᐃⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        ⵠΔⵠ: Δᐃ.ΔᐃⲆᐃᐃΔⵠ,
        Δᐃᐃ: Δᐃ.ΔⲆᐃᐃΔΔⲆ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠΔⵠΔⵠΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⲆⵠⵠⵠΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        ⵠΔⵠ: Δᐃ.ⵠΔⲆᐃΔⵠⵠ,
        Δᐃᐃ: Δᐃ.ΔⲆⵠΔⵠᐃᐃ,
        ⲆΔⵠⲆ: Δᐃ.ΔⵠᐃⵠᐃⲆⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔΔⲆⵠᐃᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        ⵠΔⵠ: Δᐃ.ⲆⲆⵠᐃΔⵠᐃ,
        Δᐃᐃ: Δᐃ.ⵠᐃⵠᐃⲆⵠⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆΔΔᐃⲆᐃΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔⵠᐃⵠᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        ⵠΔⵠ: Δᐃ.ⵠⲆⵠⲆⵠⵠΔ,
        Δᐃᐃ: Δᐃ.ⲆⵠᐃⵠⵠⲆⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⲆⵠⵠⵠΔⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆΔΔⵠΔⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        ⵠΔⵠ: Δᐃ.ᐃΔᐃⵠΔΔⵠ,
        Δᐃᐃ: Δᐃ.ΔⵠΔⵠᐃⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⲆᐃⲆⵠᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔΔⵠΔⵠᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        ⵠΔⵠ: Δᐃ.ⲆⲆᐃⵠⵠᐃⲆ,
        Δᐃᐃ: Δᐃ.ⵠᐃⵠⵠΔᐃΔ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠⲆΔⲆΔᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⲆⲆΔΔⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        ⵠΔⵠ: Δᐃ.ⵠⵠⵠᐃᐃᐃⲆ,
        Δᐃᐃ: Δᐃ.ⵠᐃᐃⵠᐃᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠⵠⲆᐃΔⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⵠᐃᐃᐃⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        ⵠΔⵠ: Δᐃ.ΔⵠⵠᐃᐃΔⵠ,
        Δᐃᐃ: Δᐃ.ⲆⵠᐃΔⵠΔΔ,
        ⲆΔⵠⲆ: Δᐃ.ⲆᐃⵠⲆᐃⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔⵠᐃᐃᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        ⵠΔⵠ: Δᐃ.ⲆⲆⲆᐃⲆᐃΔ,
        Δᐃᐃ: Δᐃ.ⵠⵠⲆⲆⵠᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⲆΔⲆΔᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔᐃⲆΔᐃᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "pizza wa",
        name: "Water skin"
      }, {
        id: 175,
        ⵠΔⵠ: Δᐃ.ᐃⲆⵠⵠⲆΔΔ,
        Δᐃᐃ: Δᐃ.ⲆΔᐃᐃⲆᐃΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔΔᐃΔᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆΔⲆᐃⲆⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Fall Berry Bush Starver"
      }, {
        id: 176,
        ⵠΔⵠ: Δᐃ.ⵠᐃⲆⵠΔᐃⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆⲆⲆᐃΔΔ,
        ⲆΔⵠⲆ: Δᐃ.ᐃᐃⵠΔⲆᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃᐃⲆᐃⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Christmas Berry Bush Starver"
      }, {
        id: 177,
        ⵠΔⵠ: Δᐃ.ΔΔΔⵠⲆⵠⵠ,
        Δᐃᐃ: Δᐃ.ΔΔⲆΔᐃᐃⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠΔᐃΔⲆᐃΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⵠΔᐃⲆᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Berry Bush Starver"
      }, {
        id: 182,
        ⵠΔⵠ: Δᐃ.ᐃΔᐃⲆᐃⲆᐃ,
        Δᐃᐃ: Δᐃ.ᐃⲆⵠⵠⲆⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⲆⵠᐃⲆᐃΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃΔᐃΔⲆΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamer"
      }, {
        id: 185,
        ⵠΔⵠ: Δᐃ.ΔΔᐃΔⵠΔᐃ,
        Δᐃᐃ: Δᐃ.ᐃⵠΔΔᐃᐃⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⵠⲆⲆᐃᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⲆⲆⵠΔⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Wolf"
      }, {
        id: 186,
        ⵠΔⵠ: Δᐃ.ᐃΔⲆⲆΔⲆⵠ,
        Δᐃᐃ: Δᐃ.ⵠΔⵠⲆᐃΔⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⲆᐃⵠᐃⲆⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆΔΔⵠΔᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Snow Wolf"
      }, {
        id: 187,
        ⵠΔⵠ: Δᐃ.ⲆⵠᐃᐃΔⲆᐃ,
        Δᐃᐃ: Δᐃ.ΔⲆⵠⲆⵠⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆᐃⲆⵠᐃⵠⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃᐃⵠⵠᐃΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Rabbit"
      }, {
        id: 188,
        ⵠΔⵠ: Δᐃ.ⵠᐃⲆΔⲆⵠⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆᐃΔᐃⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔⲆⲆᐃⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⲆⲆᐃⲆᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Snow Rabbit"
      }, {
        id: 189,
        ⵠΔⵠ: Δᐃ.ⲆΔⵠⲆⵠⵠᐃ,
        Δᐃᐃ: Δᐃ.ΔⲆⵠⵠⲆⲆⲆ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔⲆⲆᐃⵠⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⵠⲆⲆᐃΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Bear"
      }, {
        id: 190,
        ⵠΔⵠ: Δᐃ.ΔΔΔᐃⵠᐃΔ,
        Δᐃᐃ: Δᐃ.ⵠⵠⵠΔⵠΔⲆ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠⵠⲆⵠᐃⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆΔΔΔⵠⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Polar Bear"
      }, {
        id: 196,
        ⵠΔⵠ: Δᐃ.ᐃΔΔΔΔᐃⲆ,
        Δᐃᐃ: Δᐃ.ⲆⵠⵠⲆⵠⵠⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⵠⲆΔⵠΔⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⵠΔᐃⲆⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Crying Angel"
      }, {
        id: 202,
        ⵠΔⵠ: Δᐃ.ⵠⲆⲆⵠⵠⲆⲆ,
        Δᐃᐃ: Δᐃ.ΔⲆⲆⵠᐃᐃᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠΔⵠⵠᐃⵠΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃΔⲆⲆⲆⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Fennec"
      }, {
        id: 207,
        ⵠΔⵠ: Δᐃ.ᐃΔⲆᐃΔⵠⵠ,
        Δᐃᐃ: Δᐃ.ⵠⵠΔⵠΔⵠᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⲆᐃΔΔⲆⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔᐃᐃΔⵠΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Decay"
      }, {
        id: 212,
        ⵠΔⵠ: Δᐃ.ⵠⲆⵠᐃᐃᐃⲆ,
        Δᐃᐃ: Δᐃ.ΔᐃᐃⲆᐃΔᐃ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⲆΔΔΔΔᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔΔΔⵠΔⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Pillow"
      }, {
        id: 218,
        ⵠΔⵠ: Δᐃ.ⲆΔΔΔΔᐃⵠ,
        Δᐃᐃ: Δᐃ.ⵠᐃⲆΔᐃΔⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⲆΔⲆΔⵠⲆⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⲆΔⲆΔΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Exotic"
      }, {
        id: 224,
        ⵠΔⵠ: Δᐃ.ᐃⲆΔᐃⲆΔⵠ,
        Δᐃᐃ: Δᐃ.ΔΔᐃΔΔΔⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃᐃⲆΔᐃᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⲆⲆⵠΔⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Apple"
      }, {
        id: 225,
        ⵠΔⵠ: Δᐃ.ΔⵠᐃᐃⵠΔⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆᐃΔΔᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃΔⲆᐃᐃᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆΔⲆⵠᐃⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Golden Apple"
      }, {
        id: 233,
        ⵠΔⵠ: Δᐃ.ΔⲆⵠᐃᐃΔⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆⲆᐃⲆΔⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⵠᐃⲆⵠᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆᐃⲆⵠⵠⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Lava Cube"
      }, {
        id: 234,
        ⵠΔⵠ: Δᐃ.ⲆⲆⵠⵠᐃᐃⲆ,
        Δᐃᐃ: Δᐃ.ⵠᐃⵠΔⲆⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃⲆΔⵠⲆⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔⲆΔⲆⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Dragon Cube"
      }, {
        id: 42,
        ⵠΔⵠ: Δᐃ.ᐃᐃⵠⵠΔᐃⵠ,
        Δᐃᐃ: Δᐃ.ᐃᐃΔⲆᐃⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⲆᐃⵠⲆⵠⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃᐃΔᐃᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        ⵠΔⵠ: Δᐃ.ᐃⵠΔᐃᐃⲆΔ,
        Δᐃᐃ: Δᐃ.ᐃᐃᐃᐃⵠⲆΔ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⲆⲆⵠΔΔΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃΔᐃⵠⲆᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        ⵠΔⵠ: Δᐃ.ᐃΔⵠⵠⲆΔⲆ,
        Δᐃᐃ: Δᐃ.ΔᐃⵠⵠᐃᐃⲆ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⲆᐃⲆⵠⲆⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃᐃᐃΔⲆΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        ⵠΔⵠ: Δᐃ.ᐃⲆⵠΔΔⲆᐃ,
        Δᐃᐃ: Δᐃ.ᐃᐃⵠⵠⲆⵠⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⵠΔᐃⵠⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆᐃⲆⲆΔᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        ⵠΔⵠ: Δᐃ.ΔΔⲆᐃΔⲆᐃ,
        Δᐃᐃ: Δᐃ.ΔᐃⲆΔΔⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠΔⲆΔⲆΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⲆΔᐃᐃⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        ⵠΔⵠ: Δᐃ.ᐃΔᐃΔΔᐃᐃ,
        Δᐃᐃ: Δᐃ.ⲆⵠⵠⵠΔᐃΔ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⲆᐃⲆⲆⵠΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠⵠᐃⵠΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        ⵠΔⵠ: Δᐃ.ᐃⵠⲆΔΔᐃⵠ,
        Δᐃᐃ: Δᐃ.ⲆΔⲆⵠᐃⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠΔⵠⵠᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⲆΔⲆΔⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        ⵠΔⵠ: Δᐃ.ⵠⲆᐃΔⲆᐃᐃ,
        Δᐃᐃ: Δᐃ.ⲆⲆⲆΔΔⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ΔⵠⲆᐃⵠⵠⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆΔᐃᐃⵠΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        ⵠΔⵠ: Δᐃ.ⵠⵠΔᐃΔΔᐃ,
        Δᐃᐃ: Δᐃ.ⲆᐃⲆΔΔᐃⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⵠⵠⵠⲆΔΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⲆᐃᐃⵠᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        ⵠΔⵠ: Δᐃ.ⲆⲆΔⵠⲆᐃᐃ,
        Δᐃᐃ: Δᐃ.ᐃⵠΔⵠⲆᐃΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔⲆᐃᐃᐃᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔᐃΔΔⲆⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        ⵠΔⵠ: Δᐃ.ⵠⵠⲆᐃΔΔΔ,
        Δᐃᐃ: Δᐃ.ⵠᐃⲆᐃΔᐃΔ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃⲆᐃⲆᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⲆᐃΔΔᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        ⵠΔⵠ: Δᐃ.ΔⲆⵠⵠΔⵠⵠ,
        Δᐃᐃ: Δᐃ.ⵠΔΔΔⲆⵠⲆ,
        ⲆΔⵠⲆ: Δᐃ.ΔⲆΔΔΔᐃⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃᐃⲆⵠᐃΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        ⵠΔⵠ: Δᐃ.ΔⲆⲆᐃⵠᐃⲆ,
        Δᐃᐃ: Δᐃ.ⲆⵠⲆⲆᐃⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔᐃᐃⲆⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⲆⲆᐃᐃⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        ⵠΔⵠ: Δᐃ.ᐃⲆᐃⵠⵠᐃᐃ,
        Δᐃᐃ: Δᐃ.ᐃᐃΔⲆⵠⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⲆΔᐃⲆᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔΔⲆⲆⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Pepe"
      }, {
        id: 100,
        ⵠΔⵠ: Δᐃ.ΔⲆΔᐃᐃᐃᐃ,
        Δᐃᐃ: Δᐃ.ⲆⵠⲆᐃⵠⵠⲆ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠⵠᐃΔΔᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃΔᐃⵠΔⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        ⵠΔⵠ: Δᐃ.ⵠΔΔⵠⵠΔᐃ,
        Δᐃᐃ: Δᐃ.ⲆⲆΔΔᐃⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔᐃⲆⵠⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃⵠΔⲆⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        ⵠΔⵠ: Δᐃ.ⲆⵠΔΔᐃᐃΔ,
        Δᐃᐃ: Δᐃ.ᐃⵠⲆΔⲆⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆᐃⲆⲆⲆΔᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃᐃⲆⲆΔⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        ⵠΔⵠ: Δᐃ.ΔΔΔΔⲆᐃΔ,
        Δᐃᐃ: Δᐃ.ΔⲆΔΔᐃⲆΔ,
        ⲆΔⵠⲆ: Δᐃ.ⵠΔᐃⲆⵠⵠⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃᐃⲆⲆⲆⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        ⵠΔⵠ: Δᐃ.ᐃΔᐃᐃΔᐃΔ,
        Δᐃᐃ: Δᐃ.ⲆⵠⲆⵠΔⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.Ⲇᐃᐃⵠᐃᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃᐃᐃⵠΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        ⵠΔⵠ: Δᐃ.ⲆᐃⲆΔⵠΔⵠ,
        Δᐃᐃ: Δᐃ.ᐃⵠᐃⵠᐃΔⲆ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⲆⵠΔⵠᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆΔΔⲆⲆΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Momo"
      }, {
        id: 180,
        ⵠΔⵠ: Δᐃ.ΔⲆⲆⵠΔᐃⲆ,
        Δᐃᐃ: Δᐃ.ᐃᐃᐃⵠΔΔⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⲆⵠⲆⲆᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⵠᐃⵠⵠⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Scream"
      }, {
        id: 193,
        ⵠΔⵠ: Δᐃ.ⲆⵠⲆⲆΔΔⲆ,
        Δᐃᐃ: Δᐃ.ᐃⵠⲆᐃΔΔⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃΔΔΔⲆΔⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃᐃᐃⵠⲆⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Dragon"
      }, {
        id: 195,
        ⵠΔⵠ: Δᐃ.ΔᐃⲆᐃᐃΔᐃ,
        Δᐃᐃ: Δᐃ.ΔⲆⵠΔᐃᐃᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⲆᐃⵠⵠⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⵠᐃᐃᐃⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Forest Spirit"
      }, {
        id: 197,
        ⵠΔⵠ: Δᐃ.ⵠⲆⲆᐃⵠⲆᐃ,
        Δᐃᐃ: Δᐃ.ΔⵠΔⲆΔⵠⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆᐃⵠⵠΔⲆⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃΔΔⵠⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Evil Goat"
      }, {
        id: 199,
        ⵠΔⵠ: Δᐃ.ᐃⲆΔⲆⲆⵠⵠ,
        Δᐃᐃ: Δᐃ.ⲆΔᐃⲆⵠᐃΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔⲆΔⵠⲆⵠΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔᐃᐃⲆⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Rotten"
      }, {
        id: 201,
        ⵠΔⵠ: Δᐃ.ⲆΔⵠΔⲆΔΔ,
        Δᐃᐃ: Δᐃ.ΔΔᐃⵠΔⲆⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⵠⲆᐃⲆᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆᐃⵠᐃΔⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Fossil"
      }, {
        id: 205,
        ⵠΔⵠ: Δᐃ.ΔⵠΔⵠᐃⵠⲆ,
        Δᐃᐃ: Δᐃ.ΔⵠᐃⵠΔⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⲆⲆΔⵠⵠΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃΔⵠᐃΔΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Spectrum"
      }, {
        id: 210,
        ⵠΔⵠ: Δᐃ.ΔⵠΔᐃⲆΔΔ,
        Δᐃᐃ: Δᐃ.ⵠΔⲆⵠⵠᐃΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔⵠᐃᐃⲆᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃΔⵠⲆΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Helpy",
        name: "Black Cat"
      }, {
        id: 214,
        ⵠΔⵠ: Δᐃ.ⲆⲆᐃⲆⵠΔᐃ,
        Δᐃᐃ: Δᐃ.ⵠⵠⵠⲆᐃΔⵠ,
        ⲆΔⵠⲆ: Δᐃ.ΔᐃⲆᐃⵠᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃΔᐃᐃⲆΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Lynx"
      }, {
        id: 215,
        ⵠΔⵠ: Δᐃ.ⵠᐃⲆᐃᐃⵠΔ,
        Δᐃᐃ: Δᐃ.ⲆΔⲆⲆⵠᐃΔ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⵠⲆⵠΔΔⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃᐃᐃᐃⵠΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Warg"
      }, {
        id: 217,
        ⵠΔⵠ: Δᐃ.ⵠᐃΔⵠⵠⵠᐃ,
        Δᐃᐃ: Δᐃ.ᐃΔⵠⲆᐃⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⵠⲆᐃⵠᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⵠⲆΔΔᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Menhir"
      }, {
        id: 95,
        ⵠΔⵠ: Δᐃ.ᐃⵠᐃⵠΔⲆΔ,
        Δᐃᐃ: Δᐃ.ΔⵠΔᐃⵠⲆΔ,
        ⲆΔⵠⲆ: Δᐃ.ⲆΔΔⵠⲆⵠⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⵠΔⵠΔⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        ⵠΔⵠ: Δᐃ.ⵠΔⲆⲆⲆᐃⵠ,
        Δᐃᐃ: Δᐃ.ᐃⵠⲆΔᐃⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⲆᐃⵠⲆⲆⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃΔⵠⲆᐃⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        ⵠΔⵠ: Δᐃ.ⵠⵠⵠᐃΔΔᐃ,
        Δᐃᐃ: Δᐃ.Δⵠᐃⵠⵠⵠᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⲆΔᐃᐃⵠΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆᐃᐃᐃⲆΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        ⵠΔⵠ: Δᐃ.ᐃᐃⲆᐃᐃᐃᐃ,
        Δᐃᐃ: Δᐃ.ΔΔᐃᐃΔⲆⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃⲆΔⲆⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⵠᐃⵠΔⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        ⵠΔⵠ: Δᐃ.ᐃᐃΔᐃᐃⵠᐃ,
        Δᐃᐃ: Δᐃ.ⵠⵠᐃΔᐃᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⲆⵠⲆᐃᐃⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠⲆᐃᐃΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        ⵠΔⵠ: Δᐃ.ΔⲆᐃᐃΔᐃⲆ,
        Δᐃᐃ: Δᐃ.ᐃᐃⵠⵠⵠⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⵠⵠᐃΔⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠⲆᐃΔΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        ⵠΔⵠ: Δᐃ.ᐃᐃᐃΔⲆⲆᐃ,
        Δᐃᐃ: Δᐃ.ᐃΔᐃⲆⲆᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃᐃⵠⲆΔⲆⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⲆⲆⵠⲆΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        ⵠΔⵠ: Δᐃ.ΔⲆⵠⵠⲆⵠΔ,
        Δᐃᐃ: Δᐃ.ΔΔⵠⵠᐃΔΔ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⲆΔᐃᐃⵠⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆΔΔᐃⲆⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        ⵠΔⵠ: Δᐃ.ⵠⵠⵠΔⵠⲆⵠ,
        Δᐃᐃ: Δᐃ.ⲆᐃΔΔΔΔⲆ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔⲆⵠᐃᐃΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃΔⵠΔΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        ⵠΔⵠ: Δᐃ.ΔᐃⲆⲆᐃⲆΔ,
        Δᐃᐃ: Δᐃ.ᐃΔⵠΔᐃᐃⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⵠΔⲆᐃᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃᐃΔᐃⲆⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        ⵠΔⵠ: Δᐃ.ⲆᐃⲆⲆⵠᐃⵠ,
        Δᐃᐃ: Δᐃ.ⲆΔⵠⲆᐃⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠⲆⵠΔΔᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⲆΔΔⵠΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        ⵠΔⵠ: Δᐃ.ⲆⵠⲆⵠΔⵠᐃ,
        Δᐃᐃ: Δᐃ.ⲆⵠᐃⲆⵠΔⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆΔᐃⵠⲆΔᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⵠΔΔᐃⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        ⵠΔⵠ: Δᐃ.ΔⲆⵠᐃⵠⲆⵠ,
        Δᐃᐃ: Δᐃ.ⵠⲆΔⵠΔΔⵠ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⵠⵠᐃΔⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠΔΔΔᐃⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        ⵠΔⵠ: Δᐃ.ⵠⲆΔΔⲆⵠⵠ,
        Δᐃᐃ: Δᐃ.ⵠᐃⲆᐃΔΔⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⵠΔⲆⵠᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⵠⵠⲆⲆᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        ⵠΔⵠ: Δᐃ.ⵠᐃⲆⵠⲆΔⲆ,
        Δᐃᐃ: Δᐃ.ⲆⲆΔⵠⲆⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠⵠᐃΔⲆᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⵠᐃᐃΔⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        ⵠΔⵠ: Δᐃ.ΔⵠⵠΔⵠⲆᐃ,
        Δᐃᐃ: Δᐃ.ⲆⵠᐃΔⵠⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⵠΔⵠⵠᐃΔⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⲆΔⲆΔᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        ⵠΔⵠ: Δᐃ.ᐃⲆⵠᐃᐃΔⲆ,
        Δᐃᐃ: Δᐃ.ΔΔⵠⲆᐃⲆΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔⲆⵠΔᐃᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠᐃⲆⵠᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        ⵠΔⵠ: Δᐃ.ⲆΔⵠᐃⲆᐃⲆ,
        Δᐃᐃ: Δᐃ.ᐃⲆⵠⵠⲆⲆⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⲆΔΔΔᐃⲆΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔᐃⵠⵠΔⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Lava Starver"
      }, {
        id: 183,
        ⵠΔⵠ: Δᐃ.ᐃᐃⵠⲆΔΔᐃ,
        Δᐃᐃ: Δᐃ.ⲆⵠⲆⵠΔΔᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⲆΔⵠᐃⲆⲆᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔᐃⵠΔᐃᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Revaster"
      }, {
        id: 192,
        ⵠΔⵠ: Δᐃ.ᐃᐃⵠᐃⵠΔᐃ,
        Δᐃᐃ: Δᐃ.ᐃᐃΔΔⲆⵠΔ,
        ⲆΔⵠⲆ: Δᐃ.ⲆΔᐃᐃᐃᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆᐃᐃⵠᐃΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Awakened"
      }, {
        id: 194,
        ⵠΔⵠ: Δᐃ.ⵠΔⲆΔΔⵠᐃ,
        Δᐃᐃ: Δᐃ.ᐃᐃΔᐃⵠⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ΔⵠⲆΔΔᐃⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⲆᐃᐃᐃⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Ice Dragon"
      }, {
        id: 236,
        ⵠΔⵠ: Δᐃ.ΔⲆΔᐃᐃⲆᐃ,
        Δᐃᐃ: Δᐃ.ΔΔΔᐃΔⲆⲆ,
        ⲆΔⵠⲆ: Δᐃ.ⲆᐃᐃⵠΔⵠᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⵠΔⲆⵠᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Crystal Dragon"
      }, {
        id: 208,
        ⵠΔⵠ: Δᐃ.ⲆΔⲆᐃⵠᐃⵠ,
        Δᐃᐃ: Δᐃ.ⲆᐃⵠⵠΔᐃΔ,
        ⲆΔⵠⲆ: Δᐃ.ΔᐃⵠᐃᐃᐃΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⵠΔΔΔᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Bone Dragon"
      }, {
        id: 216,
        ⵠΔⵠ: Δᐃ.ⲆⵠΔⵠᐃⵠᐃ,
        Δᐃᐃ: Δᐃ.ᐃⲆⵠⲆⵠⲆⵠ,
        ⲆΔⵠⲆ: Δᐃ.ⲆⲆⲆΔⵠⲆⲆ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠⵠⵠΔΔⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Warg Ghost"
      }, {
        id: 226,
        ⵠΔⵠ: Δᐃ.ΔⵠⲆΔⵠᐃᐃ,
        Δᐃᐃ: Δᐃ.ΔⲆⵠⲆⲆⲆⲆ,
        ⲆΔⵠⲆ: Δᐃ.ᐃⲆΔⲆᐃᐃΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔⵠⲆᐃΔⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Cursed"
      }, {
        id: 48,
        ⵠΔⵠ: Δᐃ.ΔΔΔᐃⲆΔᐃ,
        Δᐃᐃ: Δᐃ.ᐃⲆΔⲆᐃΔᐃ,
        ⲆΔⵠⲆ: Δᐃ.ᐃΔⲆΔⲆΔⵠ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃΔᐃⵠᐃⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ,
        ᐃΔⲆ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        ⵠΔⵠ: Δᐃ.ᐃΔⵠⵠᐃⵠⲆ,
        Δᐃᐃ: Δᐃ.ᐃⲆⵠⲆΔⵠⲆ,
        ⲆΔⵠⲆ: Δᐃ.ΔⵠⵠⲆΔⲆᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⵠᐃΔΔⵠⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ,
        ᐃΔⲆ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        ⵠΔⵠ: Δᐃ.ΔⲆⲆΔⵠΔⵠ,
        Δᐃᐃ: Δᐃ.ΔᐃⲆⲆⵠⲆᐃ,
        ⲆΔⵠⲆ: Δᐃ.ΔΔᐃᐃᐃΔᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠᐃΔΔⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ,
        ᐃΔⲆ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        ⵠΔⵠ: Δᐃ.ΔΔⵠⵠᐃΔᐃ,
        Δᐃᐃ: Δᐃ.ΔΔⲆⲆᐃΔⲆ,
        ⲆΔⵠⲆ: Δᐃ.ΔⵠⲆᐃⵠᐃΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ΔᐃᐃᐃⲆⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ,
        ᐃΔⲆ: "OmarJr13",
        name: "Blob Skin"
      }, {
        id: 237,
        ⵠΔⵠ: Δᐃ.ⲆᐃΔⲆΔⲆⵠ,
        Δᐃᐃ: Δᐃ.ⵠⵠⵠⲆⲆⵠᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃⲆᐃΔⵠΔ,
        Ⲇᐃᐃⵠ: Δᐃ.ⲆⵠΔᐃⵠΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ,
        ᐃΔⲆ: "NotBonnie",
        name: "NotBonnie"
      }, {
        id: 238,
        ⵠΔⵠ: Δᐃ.ᐃⵠⵠᐃⵠᐃᐃ,
        Δᐃᐃ: Δᐃ.ⲆⲆΔΔᐃⵠᐃ,
        ⲆΔⵠⲆ: Δᐃ.ⵠᐃⵠⵠⵠⲆᐃ,
        Ⲇᐃᐃⵠ: Δᐃ.ᐃⵠΔⵠⲆᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ,
        ᐃΔⲆ: "NotBonnie",
        name: "Cynder"
      }],
      ⲆⵠⲆΔ: [{
        id: 0,
        ⵠΔⵠ: Δᐃ.ᐃⵠⲆⵠᐃΔᐃ,
        Δᐃᐃ: Δᐃ.ⲆⵠⵠΔⲆⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔΔⲆⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Bag 1"
      }, {
        id: 1,
        ⵠΔⵠ: Δᐃ.ΔⲆⲆᐃΔᐃⲆ,
        Δᐃᐃ: Δᐃ.ⲆⵠᐃΔⵠⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔΔⲆⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Old Bag"
      }, {
        id: 2,
        ⵠΔⵠ: Δᐃ.ᐃΔΔᐃⲆΔΔ,
        Δᐃᐃ: Δᐃ.ⵠΔᐃΔⵠⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Bag 2"
      }, {
        id: 3,
        ⵠΔⵠ: Δᐃ.ᐃⲆΔᐃⲆⵠⵠ,
        Δᐃᐃ: Δᐃ.ᐃᐃⲆᐃΔᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Bag 3"
      }, {
        id: 4,
        ⵠΔⵠ: Δᐃ.ᐃΔᐃⲆΔⲆⲆ,
        Δᐃᐃ: Δᐃ.ᐃΔΔᐃᐃΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Bag 4"
      }, {
        id: 5,
        ⵠΔⵠ: Δᐃ.ⲆⲆⵠⵠΔᐃᐃ,
        Δᐃᐃ: Δᐃ.ᐃᐃᐃⵠΔᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Bag 5"
      }, {
        id: 11,
        ⵠΔⵠ: Δᐃ.ΔⵠⲆⲆⲆΔⵠ,
        Δᐃᐃ: Δᐃ.ᐃⵠⵠΔⲆⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: 19,
        ⵠΔⵠ: Δᐃ.ᐃᐃᐃᐃⵠⲆⲆ,
        Δᐃᐃ: Δᐃ.ⲆⵠᐃⲆⲆⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        ⵠΔⵠ: Δᐃ.ⲆⲆΔΔᐃⵠⵠ,
        Δᐃᐃ: Δᐃ.ΔⵠΔᐃⵠᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        ⵠΔⵠ: Δᐃ.ᐃΔΔⵠⲆΔΔ,
        Δᐃᐃ: Δᐃ.ΔΔⵠⲆⲆΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        ⵠΔⵠ: Δᐃ.ⵠⲆᐃΔⵠⵠᐃ,
        Δᐃᐃ: Δᐃ.ⲆᐃᐃΔᐃⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Communist",
        name: "Big Bag"
      }, {
        id: 7,
        ⵠΔⵠ: Δᐃ.ⲆΔⲆᐃΔΔⵠ,
        Δᐃᐃ: Δᐃ.ᐃⵠᐃⲆⵠᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        ⵠΔⵠ: Δᐃ.ᐃᐃⲆΔΔⲆᐃ,
        Δᐃᐃ: Δᐃ.ΔᐃⲆⵠΔⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Easter Bag"
      }, {
        id: 9,
        ⵠΔⵠ: Δᐃ.ⲆΔⵠΔᐃΔΔ,
        Δᐃᐃ: Δᐃ.ΔΔⵠⲆⵠΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        ⵠΔⵠ: Δᐃ.ⵠⲆⲆΔⲆⵠⵠ,
        Δᐃᐃ: Δᐃ.ΔᐃⲆᐃΔΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Winter Bag"
      }, {
        id: 20,
        ⵠΔⵠ: Δᐃ.ᐃΔΔᐃⵠΔⵠ,
        Δᐃᐃ: Δᐃ.ᐃᐃᐃⲆΔⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        ⵠΔⵠ: Δᐃ.ΔⵠΔᐃΔᐃΔ,
        Δᐃᐃ: Δᐃ.ᐃΔᐃⲆΔΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: 6,
        ⵠΔⵠ: Δᐃ.ᐃᐃⵠᐃᐃⵠⵠ,
        Δᐃᐃ: Δᐃ.ΔⲆᐃⲆⵠⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        ⵠΔⵠ: Δᐃ.ᐃΔᐃⵠⲆᐃⲆ,
        Δᐃᐃ: Δᐃ.ᐃΔΔⵠᐃⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        ⵠΔⵠ: Δᐃ.ᐃΔᐃᐃᐃⵠⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆᐃΔΔⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        ⵠΔⵠ: Δᐃ.ᐃⵠⲆⲆΔⲆΔ,
        Δᐃᐃ: Δᐃ.ⲆⲆⵠΔⵠΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        ⵠΔⵠ: Δᐃ.ΔⲆⵠᐃⲆⲆᐃ,
        Δᐃᐃ: Δᐃ.ΔΔⲆⵠᐃΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: 71,
        ⵠΔⵠ: Δᐃ.ⲆΔΔⲆⲆⲆΔ,
        Δᐃᐃ: Δᐃ.ᐃᐃⵠᐃΔⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Portable Furnace"
      }, {
        id: 78,
        ⵠΔⵠ: Δᐃ.ΔΔⵠⵠⲆᐃⲆ,
        Δᐃᐃ: Δᐃ.ᐃⲆᐃΔᐃⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Crate Bag"
      }, {
        id: 13,
        ⵠΔⵠ: Δᐃ.ⵠᐃⵠⵠΔΔⲆ,
        Δᐃᐃ: Δᐃ.ⵠᐃᐃⵠᐃⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        ⵠΔⵠ: Δᐃ.ⵠΔΔΔΔⲆⵠ,
        Δᐃᐃ: Δᐃ.ⵠⲆΔⵠᐃΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        ⵠΔⵠ: Δᐃ.ΔⵠⵠⵠΔᐃⵠ,
        Δᐃᐃ: Δᐃ.ΔⲆᐃᐃΔΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        ⵠΔⵠ: Δᐃ.ⲆⲆⲆΔⵠᐃΔ,
        Δᐃᐃ: Δᐃ.ΔᐃᐃⵠΔⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        ⵠΔⵠ: Δᐃ.ᐃΔⵠΔΔⲆᐃ,
        Δᐃᐃ: Δᐃ.ⲆΔⵠⵠⲆⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        ⵠΔⵠ: Δᐃ.ᐃᐃⵠⲆΔᐃⲆ,
        Δᐃᐃ: Δᐃ.ᐃᐃⲆᐃΔᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        ⵠΔⵠ: Δᐃ.ΔⵠΔⲆⵠⲆᐃ,
        Δᐃᐃ: Δᐃ.ⲆΔⲆⵠⲆⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        ⵠΔⵠ: Δᐃ.ᐃⲆⲆΔⵠΔΔ,
        Δᐃᐃ: Δᐃ.ⲆⲆᐃⵠΔⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        ⵠΔⵠ: Δᐃ.ᐃⵠⵠᐃᐃⲆᐃ,
        Δᐃᐃ: Δᐃ.ⵠⲆᐃⵠΔⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        ⵠΔⵠ: Δᐃ.ⵠΔΔⵠᐃⲆⵠ,
        Δᐃᐃ: Δᐃ.ⲆΔⲆⲆⲆⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        ⵠΔⵠ: Δᐃ.ⵠΔⵠΔᐃᐃⵠ,
        Δᐃᐃ: Δᐃ.ⵠΔⲆⲆⵠᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        ⵠΔⵠ: Δᐃ.ⵠΔⲆⲆΔᐃΔ,
        Δᐃᐃ: Δᐃ.ⵠⲆⵠⵠΔᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        ⵠΔⵠ: Δᐃ.ⲆⲆⲆⵠⵠⵠᐃ,
        Δᐃᐃ: Δᐃ.ΔᐃᐃⲆⲆᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: 70,
        ⵠΔⵠ: Δᐃ.ⵠⲆΔΔⵠᐃⲆ,
        Δᐃᐃ: Δᐃ.ᐃᐃᐃΔΔᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Lit Portable Furnace"
      }, {
        id: 72,
        ⵠΔⵠ: Δᐃ.ΔΔⲆᐃᐃΔΔ,
        Δᐃᐃ: Δᐃ.ᐃⵠⲆΔⵠΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Christmas Berry Bush Bag"
      }, {
        id: 73,
        ⵠΔⵠ: Δᐃ.ΔⲆⲆΔΔᐃᐃ,
        Δᐃᐃ: Δᐃ.ΔⵠⵠⲆⲆⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Berry Bush Bag"
      }, {
        id: 74,
        ⵠΔⵠ: Δᐃ.ⲆⵠΔⲆⲆⵠΔ,
        Δᐃᐃ: Δᐃ.ⲆⵠⲆΔⵠᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Fall Berry Bush Bag"
      }, {
        id: 76,
        ⵠΔⵠ: Δᐃ.ᐃⲆΔΔⲆΔⲆ,
        Δᐃᐃ: Δᐃ.ᐃᐃᐃⵠⵠΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Reclaimed Bag"
      }, {
        id: 14,
        ⵠΔⵠ: Δᐃ.ΔᐃⵠᐃΔᐃΔ,
        Δᐃᐃ: Δᐃ.ᐃⲆⵠⵠⵠᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: 15,
        ⵠΔⵠ: Δᐃ.ΔⵠⵠᐃΔⵠⵠ,
        Δᐃᐃ: Δᐃ.ⵠⲆᐃΔᐃᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: 16,
        ⵠΔⵠ: Δᐃ.ⲆΔᐃⲆΔΔⵠ,
        Δᐃᐃ: Δᐃ.ΔⲆⵠᐃᐃⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: 17,
        ⵠΔⵠ: Δᐃ.ΔⲆᐃⲆⲆΔΔ,
        Δᐃᐃ: Δᐃ.ⲆⲆΔⲆⲆⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        ⵠΔⵠ: Δᐃ.ⵠᐃⵠΔⵠΔⲆ,
        Δᐃᐃ: Δᐃ.ⵠΔⵠⲆᐃΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: 12,
        ⵠΔⵠ: Δᐃ.ⵠΔΔᐃⲆᐃⵠ,
        Δᐃᐃ: Δᐃ.ΔⲆΔΔᐃⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        ⵠΔⵠ: Δᐃ.ᐃΔᐃᐃⲆⲆⲆ,
        Δᐃᐃ: Δᐃ.Ⲇⵠᐃᐃⵠᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        ⵠΔⵠ: Δᐃ.ᐃᐃΔᐃᐃᐃⵠ,
        Δᐃᐃ: Δᐃ.ΔΔⵠΔΔᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        ⵠΔⵠ: Δᐃ.ᐃᐃᐃⲆⵠⲆⲆ,
        Δᐃᐃ: Δᐃ.ⲆⲆΔⲆⲆⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        ⵠΔⵠ: Δᐃ.ᐃᐃⵠⲆⵠΔΔ,
        Δᐃᐃ: Δᐃ.ⲆⵠⲆⵠⲆⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        ⵠΔⵠ: Δᐃ.ⲆᐃᐃⲆⲆᐃΔ,
        Δᐃᐃ: Δᐃ.ⵠΔᐃⲆⲆᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        ⵠΔⵠ: Δᐃ.ⲆᐃⵠΔᐃⵠᐃ,
        Δᐃᐃ: Δᐃ.ᐃᐃⵠⲆΔⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        ⵠΔⵠ: Δᐃ.ⵠΔᐃⲆᐃⵠⵠ,
        Δᐃᐃ: Δᐃ.ΔΔⲆⲆⲆΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 77,
        ⵠΔⵠ: Δᐃ.ⵠⲆΔΔᐃᐃΔ,
        Δᐃᐃ: Δᐃ.ⲆΔᐃⲆᐃⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Bag and Bedroll"
      }, {
        id: 80,
        ⵠΔⵠ: Δᐃ.ᐃᐃᐃΔⲆᐃᐃ,
        Δᐃᐃ: Δᐃ.ΔΔⲆⲆⵠⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Peasant's Bag"
      }, {
        id: 81,
        ⵠΔⵠ: Δᐃ.ΔᐃΔΔΔΔᐃ,
        Δᐃᐃ: Δᐃ.ⲆⵠΔΔⲆᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Probably Stolen Bag"
      }, {
        id: 48,
        ⵠΔⵠ: Δᐃ.ⲆᐃⲆᐃᐃᐃⲆ,
        Δᐃᐃ: Δᐃ.ⲆΔᐃⵠᐃΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        ⵠΔⵠ: Δᐃ.ⵠΔΔⲆᐃᐃᐃ,
        Δᐃᐃ: Δᐃ.ⲆΔᐃᐃⲆⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        ⵠΔⵠ: Δᐃ.ΔΔᐃΔᐃΔⲆ,
        Δᐃᐃ: Δᐃ.ⵠΔΔⵠΔⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        ⵠΔⵠ: Δᐃ.ΔⲆΔⲆⲆⵠᐃ,
        Δᐃᐃ: Δᐃ.ⲆⲆᐃⵠΔΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        ⵠΔⵠ: Δᐃ.ⲆᐃᐃⲆⲆⵠΔ,
        Δᐃᐃ: Δᐃ.ⵠᐃᐃⲆΔⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        ⵠΔⵠ: Δᐃ.ᐃⲆⲆⲆΔᐃᐃ,
        Δᐃᐃ: Δᐃ.ⵠⵠⵠᐃᐃⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        ⵠΔⵠ: Δᐃ.ⵠⵠΔᐃⲆⵠⵠ,
        Δᐃᐃ: Δᐃ.ᐃⵠⲆⲆᐃᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        ⵠΔⵠ: Δᐃ.ᐃΔⵠᐃⵠΔΔ,
        Δᐃᐃ: Δᐃ.ᐃΔⲆΔⵠⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        ⵠΔⵠ: Δᐃ.ΔⵠⲆⵠⲆᐃΔ,
        Δᐃᐃ: Δᐃ.ⲆⵠⵠⲆⲆⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        ⵠΔⵠ: Δᐃ.ᐃᐃⲆⲆⲆⲆⵠ,
        Δᐃᐃ: Δᐃ.ⵠⵠΔⲆΔⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        ⵠΔⵠ: Δᐃ.ΔᐃᐃⵠⲆⲆⲆ,
        Δᐃᐃ: Δᐃ.ⵠⵠⵠⵠⵠⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        ⵠΔⵠ: Δᐃ.ⵠⵠⲆΔΔᐃΔ,
        Δᐃᐃ: Δᐃ.ᐃΔΔΔⵠΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 75,
        ⵠΔⵠ: Δᐃ.ⵠΔΔⲆΔᐃᐃ,
        Δᐃᐃ: Δᐃ.ⲆⵠⵠⵠⲆᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Spectum Bag"
      }, {
        id: 79,
        ⵠΔⵠ: Δᐃ.ΔΔΔᐃΔⵠⵠ,
        Δᐃᐃ: Δᐃ.ᐃⲆΔⵠΔᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Winter Peasant's Bag"
      }, {
        id: 31,
        ⵠΔⵠ: Δᐃ.ⵠΔⵠᐃᐃΔⵠ,
        Δᐃᐃ: Δᐃ.ᐃⲆⲆΔΔᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: 18,
        ⵠΔⵠ: Δᐃ.ⵠΔⲆⵠᐃᐃΔ,
        Δᐃᐃ: Δᐃ.ᐃᐃΔⵠⵠⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        ⵠΔⵠ: Δᐃ.ΔⵠΔΔᐃᐃᐃ,
        Δᐃᐃ: Δᐃ.ⲆⵠⲆΔΔΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        ⵠΔⵠ: Δᐃ.Ⲇⵠᐃⵠᐃᐃⵠ,
        Δᐃᐃ: Δᐃ.ⲆⵠⲆⵠⵠᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        ⵠΔⵠ: Δᐃ.ᐃⲆⲆΔΔⲆⲆ,
        Δᐃᐃ: Δᐃ.ᐃᐃΔⵠⲆⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        ⵠΔⵠ: Δᐃ.ΔⵠⵠⲆᐃⵠⵠ,
        Δᐃᐃ: Δᐃ.ΔⲆᐃⲆΔⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        ⵠΔⵠ: Δᐃ.ⵠΔᐃⲆᐃᐃΔ,
        Δᐃᐃ: Δᐃ.ᐃⵠᐃΔΔⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        ⵠΔⵠ: Δᐃ.ᐃⵠΔΔⵠΔΔ,
        Δᐃᐃ: Δᐃ.ΔⲆΔⲆⲆᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        ⵠΔⵠ: Δᐃ.ⵠⲆⲆΔᐃⵠᐃ,
        Δᐃᐃ: Δᐃ.ΔⲆⵠᐃⵠΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        ⵠΔⵠ: Δᐃ.ΔⵠᐃΔΔⵠΔ,
        Δᐃᐃ: Δᐃ.ΔΔΔⲆΔⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Engineer Bag"
      }],
      ΔⵠΔⵠⵠ: [{
        id: 0,
        ⵠΔⵠ: Δᐃ.ΔⵠⵠᐃⵠⲆᐃ,
        Δᐃᐃ: Δᐃ.ᐃⲆᐃᐃᐃᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔΔⲆⲆ,
        ᐃΔⲆ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: 1,
        ⵠΔⵠ: Δᐃ.ⵠⲆΔᐃⵠΔⲆ,
        Δᐃᐃ: Δᐃ.ⲆⲆᐃᐃᐃΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔΔⲆⲆ,
        ᐃΔⲆ: "eogito",
        name: "Hidden item"
      }, {
        id: 2,
        ⵠΔⵠ: Δᐃ.ᐃⲆⵠᐃΔΔᐃ,
        Δᐃᐃ: Δᐃ.ⵠᐃᐃⵠⲆⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: 3,
        ⵠΔⵠ: Δᐃ.ⵠⵠⲆΔⲆᐃΔ,
        Δᐃᐃ: Δᐃ.ⵠᐃᐃⵠⲆᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: 4,
        ⵠΔⵠ: Δᐃ.ⲆⵠΔⲆΔᐃⲆ,
        Δᐃᐃ: Δᐃ.ΔᐃⵠⲆᐃⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: 5,
        ⵠΔⵠ: Δᐃ.ⲆⵠΔΔⲆᐃΔ,
        Δᐃᐃ: Δᐃ.ⲆⲆⵠΔᐃᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: 6,
        ⵠΔⵠ: Δᐃ.ΔΔΔⵠᐃᐃΔ,
        Δᐃᐃ: Δᐃ.ᐃⵠⵠⲆⵠᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Wooden Box"
      }, {
        id: 7,
        ⵠΔⵠ: Δᐃ.ᐃⲆⲆⵠⵠᐃΔ,
        Δᐃᐃ: Δᐃ.ⵠⲆⵠⲆᐃⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: 8,
        ⵠΔⵠ: Δᐃ.ᐃΔᐃⵠᐃⲆⲆ,
        Δᐃᐃ: Δᐃ.ⵠⲆⲆⵠⵠᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: 9,
        ⵠΔⵠ: Δᐃ.ΔⲆᐃⵠⵠᐃⵠ,
        Δᐃᐃ: Δᐃ.ⵠᐃᐃΔᐃⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: 10,
        ⵠΔⵠ: Δᐃ.ⵠΔⵠᐃΔⲆΔ,
        Δᐃᐃ: Δᐃ.ⵠⵠⲆⵠⲆΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: 11,
        ⵠΔⵠ: Δᐃ.ᐃⲆⵠⵠⵠⵠⲆ,
        Δᐃᐃ: Δᐃ.ᐃᐃΔⲆΔⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        ⵠΔⵠ: Δᐃ.ΔΔⵠᐃⵠⲆΔ,
        Δᐃᐃ: Δᐃ.ᐃⵠⵠⵠᐃⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        ⵠΔⵠ: Δᐃ.ᐃΔᐃΔⵠⵠΔ,
        Δᐃᐃ: Δᐃ.ⵠⲆⵠⲆΔΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: 14,
        ⵠΔⵠ: Δᐃ.ᐃᐃⵠⵠⲆⵠᐃ,
        Δᐃᐃ: Δᐃ.ΔᐃΔⵠᐃⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: 15,
        ⵠΔⵠ: Δᐃ.ΔΔΔⵠΔⵠᐃ,
        Δᐃᐃ: Δᐃ.ⵠⵠⲆⵠⵠⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        ⵠΔⵠ: Δᐃ.ⵠⵠᐃⵠⵠⵠⵠ,
        Δᐃᐃ: Δᐃ.ΔⵠⲆⲆΔⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        ⵠΔⵠ: Δᐃ.ΔᐃᐃΔΔⵠΔ,
        Δᐃᐃ: Δᐃ.ᐃⵠⲆᐃΔᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: 75,
        ⵠΔⵠ: Δᐃ.ⵠⵠⲆⵠΔⲆⵠ,
        Δᐃᐃ: Δᐃ.ⲆⵠᐃᐃⵠⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Night Stars Crate"
      }, {
        id: 19,
        ⵠΔⵠ: Δᐃ.ⵠᐃⲆⲆΔΔᐃ,
        Δᐃᐃ: Δᐃ.ᐃⲆΔᐃⲆᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Beehive"
      }, {
        id: 13,
        ⵠΔⵠ: Δᐃ.ⲆᐃⵠⵠⵠᐃΔ,
        Δᐃᐃ: Δᐃ.ⲆⲆⲆΔᐃᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        ⵠΔⵠ: Δᐃ.ᐃᐃⵠⵠᐃⵠᐃ,
        Δᐃᐃ: Δᐃ.ⲆΔᐃᐃⵠⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        ⵠΔⵠ: Δᐃ.ᐃᐃᐃⲆⵠⵠⲆ,
        Δᐃᐃ: Δᐃ.ΔⲆⵠⲆⲆΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        ⵠΔⵠ: Δᐃ.ᐃⲆΔⲆⵠᐃᐃ,
        Δᐃᐃ: Δᐃ.ᐃⵠⵠⲆᐃⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        ⵠΔⵠ: Δᐃ.ⲆΔⲆᐃΔⵠΔ,
        Δᐃᐃ: Δᐃ.ΔᐃΔᐃⲆⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        ⵠΔⵠ: Δᐃ.ⵠⲆᐃⵠᐃΔⲆ,
        Δᐃᐃ: Δᐃ.ⵠⲆΔΔΔΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Communist",
        name: "Glass Crate"
      }, {
        id: 70,
        ⵠΔⵠ: Δᐃ.ΔⲆᐃⵠⵠᐃⲆ,
        Δᐃᐃ: Δᐃ.ᐃⵠⵠΔⵠⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 74,
        ⵠΔⵠ: Δᐃ.ⵠᐃⵠⵠⲆᐃᐃ,
        Δᐃᐃ: Δᐃ.ⲆΔᐃΔⵠⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Reclaimed Crate"
      }, {
        id: 77,
        ⵠΔⵠ: Δᐃ.ΔⲆⵠⲆⵠⲆΔ,
        Δᐃᐃ: Δᐃ.ᐃᐃᐃΔᐃⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Workplace Accident"
      }, {
        id: 16,
        ⵠΔⵠ: Δᐃ.ⲆⲆᐃΔᐃⲆᐃ,
        Δᐃᐃ: Δᐃ.ᐃΔⵠΔΔⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: 18,
        ⵠΔⵠ: Δᐃ.ᐃⵠᐃᐃᐃⲆⵠ,
        Δᐃᐃ: Δᐃ.ᐃΔⵠⵠΔⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        ⵠΔⵠ: Δᐃ.ΔⲆⵠΔᐃΔᐃ,
        Δᐃᐃ: Δᐃ.ⲆᐃⵠⲆᐃⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        ⵠΔⵠ: Δᐃ.ΔⵠⲆⵠⵠΔᐃ,
        Δᐃᐃ: Δᐃ.ⲆⵠⲆΔⵠᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        ⵠΔⵠ: Δᐃ.ⲆΔΔΔᐃΔⲆ,
        Δᐃᐃ: Δᐃ.ⵠⵠᐃΔⲆⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        ⵠΔⵠ: Δᐃ.ΔΔᐃⲆΔⲆⵠ,
        Δᐃᐃ: Δᐃ.ΔⲆⵠⲆΔⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        ⵠΔⵠ: Δᐃ.ⵠΔᐃΔΔⵠⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆⲆⵠⵠᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        ⵠΔⵠ: Δᐃ.ⵠᐃᐃᐃᐃⲆᐃ,
        Δᐃᐃ: Δᐃ.ΔⲆⲆⵠΔΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 72,
        ⵠΔⵠ: Δᐃ.ⵠΔΔⵠⵠⲆⲆ,
        Δᐃᐃ: Δᐃ.ᐃⵠΔⲆᐃΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Storage Machine"
      }, {
        id: 22,
        ⵠΔⵠ: Δᐃ.ⲆᐃΔⵠΔΔᐃ,
        Δᐃᐃ: Δᐃ.ΔⵠⲆⲆⲆⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: 17,
        ⵠΔⵠ: Δᐃ.ⲆΔⲆⲆⲆⵠΔ,
        Δᐃᐃ: Δᐃ.ⵠⵠⲆⵠⲆⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        ⵠΔⵠ: Δᐃ.ⵠⲆᐃᐃΔᐃⵠ,
        Δᐃᐃ: Δᐃ.ᐃⵠᐃⲆΔΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        ⵠΔⵠ: Δᐃ.ΔΔⵠⲆᐃⵠⵠ,
        Δᐃᐃ: Δᐃ.ΔⵠΔᐃⵠΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        ⵠΔⵠ: Δᐃ.ⲆᐃⲆⲆᐃΔⲆ,
        Δᐃᐃ: Δᐃ.ΔΔⵠⲆᐃΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        ⵠΔⵠ: Δᐃ.ⲆⵠⲆⵠⲆⵠⵠ,
        Δᐃᐃ: Δᐃ.ΔⵠⲆⵠΔΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        ⵠΔⵠ: Δᐃ.ᐃΔΔⲆⵠᐃᐃ,
        Δᐃᐃ: Δᐃ.ᐃⵠΔᐃΔⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        ⵠΔⵠ: Δᐃ.ⵠⵠᐃᐃΔⵠᐃ,
        Δᐃᐃ: Δᐃ.ᐃΔⵠⵠⲆᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        ⵠΔⵠ: Δᐃ.ᐃᐃⲆᐃⲆⵠⲆ,
        Δᐃᐃ: Δᐃ.ⲆⵠⲆᐃⲆⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        ⵠΔⵠ: Δᐃ.ⲆⵠⵠΔⵠΔᐃ,
        Δᐃᐃ: Δᐃ.ΔᐃⲆⲆΔⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 78,
        ⵠΔⵠ: Δᐃ.ΔⵠⲆⲆⵠΔᐃ,
        Δᐃᐃ: Δᐃ.ΔΔⲆᐃⵠⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Spectrum Portal"
      }, {
        id: 45,
        ⵠΔⵠ: Δᐃ.ᐃⲆΔⲆΔΔⵠ,
        Δᐃᐃ: Δᐃ.ᐃΔⲆⵠΔᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        ⵠΔⵠ: Δᐃ.ⲆΔᐃⲆⵠⵠⵠ,
        Δᐃᐃ: Δᐃ.ᐃⲆᐃⲆⲆᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Winter Box"
      }, {
        id: 20,
        ⵠΔⵠ: Δᐃ.ⵠΔⲆΔᐃΔᐃ,
        Δᐃᐃ: Δᐃ.ΔⲆⲆⲆΔⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        ⵠΔⵠ: Δᐃ.ⲆΔΔⵠᐃⵠⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆⲆⲆⵠⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        ⵠΔⵠ: Δᐃ.ⵠⵠᐃⲆΔᐃⲆ,
        Δᐃᐃ: Δᐃ.ᐃⵠⲆⲆⵠᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        ⵠΔⵠ: Δᐃ.ⵠᐃⲆⲆΔΔⵠ,
        Δᐃᐃ: Δᐃ.ΔᐃΔⵠⵠΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        ⵠΔⵠ: Δᐃ.ⵠⲆᐃΔΔᐃΔ,
        Δᐃᐃ: Δᐃ.ⲆⵠᐃⲆⵠⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        ⵠΔⵠ: Δᐃ.ᐃΔⵠⲆⲆⲆΔ,
        Δᐃᐃ: Δᐃ.ⲆᐃⲆᐃⲆΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        ⵠΔⵠ: Δᐃ.ΔⵠᐃΔᐃᐃᐃ,
        Δᐃᐃ: Δᐃ.ⵠΔΔΔᐃΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        ⵠΔⵠ: Δᐃ.ⲆᐃΔⲆⵠⵠᐃ,
        Δᐃᐃ: Δᐃ.ⵠⵠⲆⵠᐃⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        ⵠΔⵠ: Δᐃ.ᐃΔⲆⲆᐃᐃᐃ,
        Δᐃᐃ: Δᐃ.ⲆⵠⵠⲆᐃᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        ⵠΔⵠ: Δᐃ.ᐃᐃᐃⲆΔΔΔ,
        Δᐃᐃ: Δᐃ.ᐃΔᐃⲆⵠⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        ⵠΔⵠ: Δᐃ.ⲆⲆⵠⲆⵠⵠⲆ,
        Δᐃᐃ: Δᐃ.ⵠⵠᐃᐃⲆⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        ⵠΔⵠ: Δᐃ.ΔΔⲆᐃⲆᐃⲆ,
        Δᐃᐃ: Δᐃ.ⲆᐃΔⲆΔᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        ⵠΔⵠ: Δᐃ.ⲆⲆΔⵠᐃΔΔ,
        Δᐃᐃ: Δᐃ.ᐃΔᐃⵠᐃⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        ⵠΔⵠ: Δᐃ.ᐃΔⵠⵠΔΔⲆ,
        Δᐃᐃ: Δᐃ.ⲆᐃΔᐃⲆⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        ⵠΔⵠ: Δᐃ.ΔⵠⵠΔⵠΔⵠ,
        Δᐃᐃ: Δᐃ.ᐃⲆⲆⲆⲆⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        ⵠΔⵠ: Δᐃ.ⵠⵠⵠⲆᐃⵠΔ,
        Δᐃᐃ: Δᐃ.ΔⵠΔⲆᐃⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        ⵠΔⵠ: Δᐃ.ⲆⵠⲆᐃᐃⲆᐃ,
        Δᐃᐃ: Δᐃ.ⲆΔⲆΔᐃⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        ⵠΔⵠ: Δᐃ.ⵠⵠΔΔⵠᐃᐃ,
        Δᐃᐃ: Δᐃ.ⲆⵠᐃⲆΔⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        ⵠΔⵠ: Δᐃ.ΔⲆⲆⵠⵠᐃΔ,
        Δᐃᐃ: Δᐃ.ⵠᐃⵠᐃⵠΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        ⵠΔⵠ: Δᐃ.ΔΔⵠⵠⲆⲆⵠ,
        Δᐃᐃ: Δᐃ.ᐃⲆΔΔⵠⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        ⵠΔⵠ: Δᐃ.ΔᐃⲆⵠⵠᐃⵠ,
        Δᐃᐃ: Δᐃ.ⵠⲆΔΔⲆⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        ⵠΔⵠ: Δᐃ.ᐃⵠⲆⵠΔᐃⵠ,
        Δᐃᐃ: Δᐃ.ᐃⲆᐃⲆΔΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        ⵠΔⵠ: Δᐃ.ᐃΔⵠΔⵠΔⵠ,
        Δᐃᐃ: Δᐃ.ⵠⲆᐃᐃΔⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        ⵠΔⵠ: Δᐃ.ⵠᐃⲆⵠⵠⵠᐃ,
        Δᐃᐃ: Δᐃ.ⲆⵠⵠⲆᐃᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        ⵠΔⵠ: Δᐃ.ᐃⵠⲆⵠᐃΔⲆ,
        Δᐃᐃ: Δᐃ.ⲆᐃᐃⲆΔΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 71,
        ⵠΔⵠ: Δᐃ.ᐃᐃⵠΔⵠⵠᐃ,
        Δᐃᐃ: Δᐃ.ᐃⲆⲆⲆⲆⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Dragon Box"
      }, {
        id: 73,
        ⵠΔⵠ: Δᐃ.ΔⲆⲆΔⵠΔΔ,
        Δᐃᐃ: Δᐃ.ⲆΔⵠⲆΔᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Rekt"
      }, {
        id: 76,
        ⵠΔⵠ: Δᐃ.ΔⲆᐃᐃᐃᐃΔ,
        Δᐃᐃ: Δᐃ.ⵠΔⵠⲆΔᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Sleeping Tamon Dragon"
      }],
      ⵠΔⲆΔᐃ: [{
        id: 0,
        ⵠΔⵠ: Δᐃ.ᐃΔᐃᐃᐃΔΔ,
        Δᐃᐃ: Δᐃ.ⲆΔⲆⵠⲆⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔΔⲆⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Book 1"
      }, {
        id: 1,
        ⵠΔⵠ: Δᐃ.ᐃᐃᐃⲆⲆⵠᐃ,
        Δᐃᐃ: Δᐃ.ⲆⵠⲆᐃΔᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Book 2"
      }, {
        id: 2,
        ⵠΔⵠ: Δᐃ.ⲆΔⵠΔᐃᐃⵠ,
        Δᐃᐃ: Δᐃ.ⵠⵠᐃⲆⵠΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Book 3"
      }, {
        id: 3,
        ⵠΔⵠ: Δᐃ.ΔⵠⵠᐃΔⲆⲆ,
        Δᐃᐃ: Δᐃ.ΔⵠΔⵠⲆΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Book 4"
      }, {
        id: 4,
        ⵠΔⵠ: Δᐃ.ᐃᐃⵠΔΔⵠⵠ,
        Δᐃᐃ: Δᐃ.ΔΔⲆΔⲆᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: 18,
        ⵠΔⵠ: Δᐃ.ⲆⵠᐃΔᐃΔⵠ,
        Δᐃᐃ: Δᐃ.ᐃΔⲆΔⵠΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: 5,
        ⵠΔⵠ: Δᐃ.ΔᐃΔᐃⵠΔΔ,
        Δᐃᐃ: Δᐃ.ᐃΔⲆᐃΔⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Doctorpus",
        name: "Scroll"
      }, {
        id: 6,
        ⵠΔⵠ: Δᐃ.ᐃⵠᐃᐃⵠΔⲆ,
        Δᐃᐃ: Δᐃ.ᐃⵠⵠⲆΔΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: 7,
        ⵠΔⵠ: Δᐃ.ᐃΔⵠᐃⵠⵠⵠ,
        Δᐃᐃ: Δᐃ.ⵠᐃᐃⲆΔⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        ⵠΔⵠ: Δᐃ.ᐃΔⲆΔᐃΔᐃ,
        Δᐃᐃ: Δᐃ.ᐃᐃΔΔⵠⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        ⵠΔⵠ: Δᐃ.ΔⵠⲆᐃⵠᐃⲆ,
        Δᐃᐃ: Δᐃ.ⵠⲆⲆⵠⲆΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Communist",
        name: "Stone Tablet"
      }, {
        id: 47,
        ⵠΔⵠ: Δᐃ.ⵠΔᐃⵠΔΔΔ,
        Δᐃᐃ: Δᐃ.ⵠΔᐃᐃΔΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Reclaimed Book"
      }, {
        id: 10,
        ⵠΔⵠ: Δᐃ.ᐃⲆⲆΔⵠⵠⲆ,
        Δᐃᐃ: Δᐃ.ⲆᐃⵠⵠⲆΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Star Book"
      }, {
        id: 8,
        ⵠΔⵠ: Δᐃ.ΔᐃⲆΔᐃΔᐃ,
        Δᐃᐃ: Δᐃ.Ⲇⵠᐃⵠⵠᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Gold Book"
      }, {
        id: 15,
        ⵠΔⵠ: Δᐃ.ⲆⵠⲆⵠⵠⵠΔ,
        Δᐃᐃ: Δᐃ.ᐃⲆᐃᐃᐃᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: 17,
        ⵠΔⵠ: Δᐃ.ⵠΔΔᐃᐃΔⲆ,
        Δᐃᐃ: Δᐃ.ⲆⲆΔΔΔⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        ⵠΔⵠ: Δᐃ.ΔⵠᐃᐃᐃⲆᐃ,
        Δᐃᐃ: Δᐃ.ᐃⵠⲆᐃᐃⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        ⵠΔⵠ: Δᐃ.ⵠⵠΔⲆᐃᐃᐃ,
        Δᐃᐃ: Δᐃ.ⵠᐃⵠᐃⲆᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        ⵠΔⵠ: Δᐃ.ᐃⲆⵠΔΔᐃΔ,
        Δᐃᐃ: Δᐃ.ⵠⲆⲆⲆⵠᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        ⵠΔⵠ: Δᐃ.ⵠⲆⵠⵠⲆⲆΔ,
        Δᐃᐃ: Δᐃ.ⵠⵠⲆⲆⲆΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        ⵠΔⵠ: Δᐃ.ΔᐃΔᐃⵠΔᐃ,
        Δᐃᐃ: Δᐃ.ᐃⲆⵠᐃΔⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: 11,
        ⵠΔⵠ: Δᐃ.ⵠⲆΔᐃⵠΔⵠ,
        Δᐃᐃ: Δᐃ.ΔⲆⲆΔΔⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Diamond Book"
      }, {
        id: 9,
        ⵠΔⵠ: Δᐃ.ᐃΔⲆᐃⵠⵠⲆ,
        Δᐃᐃ: Δᐃ.ⵠⵠᐃΔⵠⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Obscure Book"
      }, {
        id: 16,
        ⵠΔⵠ: Δᐃ.ΔΔⲆⲆⲆᐃᐃ,
        Δᐃᐃ: Δᐃ.ΔⵠⲆΔᐃⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        ⵠΔⵠ: Δᐃ.ᐃΔⲆΔΔΔⵠ,
        Δᐃᐃ: Δᐃ.ᐃⵠⵠⵠΔΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        ⵠΔⵠ: Δᐃ.ᐃⲆⵠᐃⲆⵠⵠ,
        Δᐃᐃ: Δᐃ.ᐃᐃΔΔⵠⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        ⵠΔⵠ: Δᐃ.ⵠⲆᐃⵠΔⵠᐃ,
        Δᐃᐃ: Δᐃ.ⵠᐃΔⵠⵠⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        ⵠΔⵠ: Δᐃ.ΔᐃᐃⲆΔᐃᐃ,
        Δᐃᐃ: Δᐃ.ᐃΔⲆⵠᐃᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: 48,
        ⵠΔⵠ: Δᐃ.ΔⵠᐃᐃⵠⲆᐃ,
        Δᐃᐃ: Δᐃ.ⲆⲆᐃΔⵠⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Chrono Clock"
      }, {
        id: 49,
        ⵠΔⵠ: Δᐃ.ⲆΔᐃⲆΔᐃᐃ,
        Δᐃᐃ: Δᐃ.ᐃⲆⲆᐃⵠΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Recipe Book"
      }, {
        id: 13,
        ⵠΔⵠ: Δᐃ.ⲆΔⵠᐃⵠΔΔ,
        Δᐃᐃ: Δᐃ.ΔⵠΔΔᐃΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        ⵠΔⵠ: Δᐃ.ⵠⲆⲆⲆΔΔᐃ,
        Δᐃᐃ: Δᐃ.ΔΔᐃⵠΔΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        ⵠΔⵠ: Δᐃ.ⵠⵠⵠⵠⵠⲆΔ,
        Δᐃᐃ: Δᐃ.ⵠᐃᐃΔⲆⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        ⵠΔⵠ: Δᐃ.ᐃΔⵠΔⵠⲆⲆ,
        Δᐃᐃ: Δᐃ.ⲆᐃᐃΔⲆΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        ⵠΔⵠ: Δᐃ.ᐃⵠⵠΔΔⵠⲆ,
        Δᐃᐃ: Δᐃ.ΔΔⵠΔⲆⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        ⵠΔⵠ: Δᐃ.ΔⵠᐃⲆΔⲆⲆ,
        Δᐃᐃ: Δᐃ.ᐃⵠᐃᐃΔΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        ⵠΔⵠ: Δᐃ.ΔᐃΔⵠⲆⵠΔ,
        Δᐃᐃ: Δᐃ.ⲆⵠⲆᐃΔⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        ⵠΔⵠ: Δᐃ.ΔΔᐃΔⲆᐃⵠ,
        Δᐃᐃ: Δᐃ.ΔⵠⵠᐃᐃⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 45,
        ⵠΔⵠ: Δᐃ.ΔⲆⲆⵠᐃⵠΔ,
        Δᐃᐃ: Δᐃ.ⲆΔᐃΔΔⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Crafting Machine"
      }, {
        id: 33,
        ⵠΔⵠ: Δᐃ.ⲆᐃᐃⲆⲆΔⵠ,
        Δᐃᐃ: Δᐃ.ⵠⲆΔᐃΔⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        ⵠΔⵠ: Δᐃ.ΔᐃΔⲆⵠᐃᐃ,
        Δᐃᐃ: Δᐃ.ᐃⲆᐃΔΔⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Autumn Book"
      }, {
        id: 14,
        ⵠΔⵠ: Δᐃ.ⲆⲆⲆⵠⵠⵠⲆ,
        Δᐃᐃ: Δᐃ.ᐃΔⲆᐃⵠⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Reidite Book"
      }, {
        id: 12,
        ⵠΔⵠ: Δᐃ.ᐃⲆΔⲆᐃⵠΔ,
        Δᐃᐃ: Δᐃ.ΔΔⲆᐃΔΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        ⵠΔⵠ: Δᐃ.ᐃⵠⲆᐃΔΔⲆ,
        Δᐃᐃ: Δᐃ.ⲆᐃΔᐃΔⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Lava Book 2"
      }, {
        id: 19,
        ⵠΔⵠ: Δᐃ.ⲆΔᐃᐃⲆⵠⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆΔⲆⲆΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        ⵠΔⵠ: Δᐃ.ᐃΔⵠⲆᐃᐃⵠ,
        Δᐃᐃ: Δᐃ.ⵠΔΔΔΔᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        ⵠΔⵠ: Δᐃ.ⲆⵠⲆⵠΔΔⲆ,
        Δᐃᐃ: Δᐃ.ᐃⵠⵠⵠⵠΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        ⵠΔⵠ: Δᐃ.ⲆⵠⵠΔⲆⵠΔ,
        Δᐃᐃ: Δᐃ.ⲆⲆΔⵠⵠΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        ⵠΔⵠ: Δᐃ.ⵠⵠⲆΔⵠΔΔ,
        Δᐃᐃ: Δᐃ.ΔΔᐃⲆⲆⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "aloner",
        name: "Mystery Book"
      }, {
        id: 46,
        ⵠΔⵠ: Δᐃ.ⵠⲆᐃᐃᐃᐃⲆ,
        Δᐃᐃ: Δᐃ.ᐃⵠⲆᐃᐃⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Cursed Book"
      }],
      ΔⲆⲆⵠᐃ: [{
        id: 0,
        ⵠΔⵠ: Δᐃ.ΔᐃⲆⲆⵠⲆⲆ,
        Δᐃᐃ: Δᐃ.ΔᐃⲆⲆⵠⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔΔⲆⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Nothing"
      }, {
        id: 2,
        ⵠΔⵠ: Δᐃ.ᐃⵠⵠᐃΔᐃⲆ,
        Δᐃᐃ: Δᐃ.ⲆᐃⲆⲆⲆⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔΔⲆⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: 3,
        ⵠΔⵠ: Δᐃ.ᐃΔΔⵠΔᐃⵠ,
        Δᐃᐃ: Δᐃ.ⵠⵠⲆΔᐃᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔΔⲆⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Heart"
      }, {
        id: 1,
        ⵠΔⵠ: Δᐃ.ΔᐃΔⵠᐃΔᐃ,
        Δᐃᐃ: Δᐃ.ᐃⵠⵠⵠⲆΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔΔⲆⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Bandage 1"
      }, {
        id: 4,
        ⵠΔⵠ: Δᐃ.ΔⲆⵠᐃᐃⲆΔ,
        Δᐃᐃ: Δᐃ.ΔⲆⲆⲆⲆᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔΔⲆⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Flower 1"
      }, {
        id: 5,
        ⵠΔⵠ: Δᐃ.ΔⵠⲆⲆⵠⵠΔ,
        Δᐃᐃ: Δᐃ.ΔᐃⲆΔΔᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Bow 1"
      }, {
        id: 6,
        ⵠΔⵠ: Δᐃ.ΔᐃⵠΔⵠᐃⲆ,
        Δᐃᐃ: Δᐃ.ᐃⵠΔΔΔΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Bandage 2"
      }, {
        id: 7,
        ⵠΔⵠ: Δᐃ.ⲆᐃᐃΔⲆⲆⵠ,
        Δᐃᐃ: Δᐃ.ΔⲆⵠⵠⲆΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        ⵠΔⵠ: Δᐃ.ⵠᐃⲆᐃⵠᐃΔ,
        Δᐃᐃ: Δᐃ.ΔⲆΔᐃⵠᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        ⵠΔⵠ: Δᐃ.ⲆⲆⲆΔᐃΔᐃ,
        Δᐃᐃ: Δᐃ.ΔᐃᐃⲆⲆΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        ⵠΔⵠ: Δᐃ.ΔΔΔᐃⵠⲆΔ,
        Δᐃᐃ: Δᐃ.ΔⲆᐃΔΔⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        ⵠΔⵠ: Δᐃ.ᐃΔⵠⲆΔΔⲆ,
        Δᐃᐃ: Δᐃ.ᐃΔᐃⲆⲆΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        ⵠΔⵠ: Δᐃ.ΔΔΔᐃΔΔⵠ,
        Δᐃᐃ: Δᐃ.ⵠΔᐃⲆᐃⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        ⵠΔⵠ: Δᐃ.ⵠΔⵠᐃΔⵠᐃ,
        Δᐃᐃ: Δᐃ.ΔⲆⲆᐃⵠΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃᐃᐃⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: 17,
        ⵠΔⵠ: Δᐃ.ⵠᐃⲆⲆΔⵠᐃ,
        Δᐃᐃ: Δᐃ.ⵠΔⲆΔΔᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: 10,
        ⵠΔⵠ: Δᐃ.ⵠᐃᐃᐃⵠⲆᐃ,
        Δᐃᐃ: Δᐃ.ΔⵠⵠΔᐃⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Bow 2"
      }, {
        id: 11,
        ⵠΔⵠ: Δᐃ.ⵠⲆⵠⲆⵠΔⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆⲆΔⲆⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "pizza wa",
        name: "Little Stars"
      }, {
        id: 12,
        ⵠΔⵠ: Δᐃ.ⵠⵠⲆᐃⲆⲆᐃ,
        Δᐃᐃ: Δᐃ.ΔΔΔⵠⲆⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        ⵠΔⵠ: Δᐃ.ⲆᐃⲆΔΔΔⲆ,
        Δᐃᐃ: Δᐃ.ᐃⵠΔⵠⵠⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        ⵠΔⵠ: Δᐃ.ⲆⲆⵠᐃᐃⵠⲆ,
        Δᐃᐃ: Δᐃ.ⲆⲆΔΔᐃᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Clown nose"
      }, {
        id: 16,
        ⵠΔⵠ: Δᐃ.ⲆᐃⵠᐃⵠⲆᐃ,
        Δᐃᐃ: Δᐃ.ᐃⵠᐃᐃⵠᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        ⵠΔⵠ: Δᐃ.ᐃⲆᐃⲆⲆΔⵠ,
        Δᐃᐃ: Δᐃ.ⵠΔᐃᐃⲆⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        ⵠΔⵠ: Δᐃ.ⵠⲆⲆᐃⲆΔⲆ,
        Δᐃᐃ: Δᐃ.ᐃⲆⲆᐃⵠΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        ⵠΔⵠ: Δᐃ.ⲆⵠⲆⵠΔΔⵠ,
        Δᐃᐃ: Δᐃ.ⵠⵠΔᐃⵠⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        ⵠΔⵠ: Δᐃ.ⲆᐃᐃᐃⲆⲆⲆ,
        Δᐃᐃ: Δᐃ.ⵠⵠⵠⲆᐃᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        ⵠΔⵠ: Δᐃ.ⵠΔΔⲆᐃⵠⵠ,
        Δᐃᐃ: Δᐃ.ΔⵠⵠᐃΔⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        ⵠΔⵠ: Δᐃ.ⵠᐃΔⲆⵠΔⵠ,
        Δᐃᐃ: Δᐃ.ⵠⲆⲆᐃⲆᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        ⵠΔⵠ: Δᐃ.ⵠΔⲆᐃⲆⲆⲆ,
        Δᐃᐃ: Δᐃ.ᐃᐃⲆᐃⵠⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Ant",
        name: "Hero Mask"
      }, {
        id: 100,
        ⵠΔⵠ: Δᐃ.ΔΔΔⵠⲆⲆⲆ,
        Δᐃᐃ: Δᐃ.ᐃⲆΔᐃⵠⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "This starver is mad"
      }, {
        id: 104,
        ⵠΔⵠ: Δᐃ.ᐃᐃⲆᐃⲆⵠⵠ,
        Δᐃᐃ: Δᐃ.ᐃⲆΔΔΔΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Scars"
      }, {
        id: 106,
        ⵠΔⵠ: Δᐃ.ⵠΔΔᐃⵠΔᐃ,
        Δᐃᐃ: Δᐃ.ΔⵠⲆⵠΔⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "In Search of Intelligence"
      }, {
        id: 109,
        ⵠΔⵠ: Δᐃ.ⵠⲆᐃΔΔⲆⵠ,
        Δᐃᐃ: Δᐃ.ⲆΔⵠⵠⵠΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Reclaimed Bandage"
      }, {
        id: 111,
        ⵠΔⵠ: Δᐃ.ⲆᐃΔⲆΔΔΔ,
        Δᐃᐃ: Δᐃ.ᐃⵠⲆᐃⵠᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠΔⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Unwrap Starver for Gift"
      }, {
        id: 15,
        ⵠΔⵠ: Δᐃ.ᐃⵠᐃⲆⲆⲆⲆ,
        Δᐃᐃ: Δᐃ.ΔⵠᐃⲆᐃⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        ⵠΔⵠ: Δᐃ.ⵠⲆᐃΔⵠⵠⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆΔⵠᐃⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        ⵠΔⵠ: Δᐃ.ᐃⵠⲆΔᐃᐃᐃ,
        Δᐃᐃ: Δᐃ.ΔᐃΔⵠⵠⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        ⵠΔⵠ: Δᐃ.ⲆᐃΔⲆΔⵠⵠ,
        Δᐃᐃ: Δᐃ.ⵠᐃⵠⲆⵠⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: 13,
        ⵠΔⵠ: Δᐃ.ᐃΔᐃᐃⵠⵠⵠ,
        Δᐃᐃ: Δᐃ.ⲆⵠⵠⲆⲆΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        ⵠΔⵠ: Δᐃ.ⲆᐃᐃⵠⵠΔⲆ,
        Δᐃᐃ: Δᐃ.ⵠᐃⲆⲆⲆᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        ⵠΔⵠ: Δᐃ.ⲆⲆⵠⲆⵠⲆΔ,
        Δᐃᐃ: Δᐃ.ᐃⵠᐃⵠⲆᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        ⵠΔⵠ: Δᐃ.ⲆΔⵠⵠΔᐃᐃ,
        Δᐃᐃ: Δᐃ.ⲆᐃⵠᐃᐃΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        ⵠΔⵠ: Δᐃ.ᐃΔΔΔΔᐃΔ,
        Δᐃᐃ: Δᐃ.ⲆⵠΔⵠΔⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        ⵠΔⵠ: Δᐃ.ⲆΔΔⵠⲆᐃᐃ,
        Δᐃᐃ: Δᐃ.ⲆⲆᐃⵠΔᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        ⵠΔⵠ: Δᐃ.ΔᐃⵠⵠᐃΔᐃ,
        Δᐃᐃ: Δᐃ.ᐃᐃⵠⲆᐃⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        ⵠΔⵠ: Δᐃ.ᐃⵠΔΔⵠⵠⵠ,
        Δᐃᐃ: Δᐃ.ⲆᐃⵠᐃⲆᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        ⵠΔⵠ: Δᐃ.ⲆⲆⲆⲆΔᐃⲆ,
        Δᐃᐃ: Δᐃ.ⲆⵠΔΔⵠᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "upfiz",
        name: "Skull Mask"
      }, {
        id: 95,
        ⵠΔⵠ: Δᐃ.ΔᐃⵠⵠᐃⲆⵠ,
        Δᐃᐃ: Δᐃ.ΔΔⲆᐃΔᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Golden Monocle"
      }, {
        id: 96,
        ⵠΔⵠ: Δᐃ.ⵠⲆⲆΔⲆᐃⲆ,
        Δᐃᐃ: Δᐃ.ⵠᐃᐃΔΔᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "A simple instruction"
      }, {
        id: 102,
        ⵠΔⵠ: Δᐃ.ᐃⲆᐃΔⵠᐃⵠ,
        Δᐃᐃ: Δᐃ.ⲆΔⵠΔⲆⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Garland"
      }, {
        id: 103,
        ⵠΔⵠ: Δᐃ.ⵠⵠᐃⲆΔᐃΔ,
        Δᐃᐃ: Δᐃ.ᐃⵠⲆΔⲆΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "The Doormat"
      }, {
        id: 108,
        ⵠΔⵠ: Δᐃ.ᐃⲆΔΔⲆⲆΔ,
        Δᐃᐃ: Δᐃ.ⲆᐃΔⵠⵠΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Copium Tanks"
      }, {
        id: 117,
        ⵠΔⵠ: Δᐃ.ⲆⲆⵠΔᐃⵠᐃ,
        Δᐃᐃ: Δᐃ.ⲆⲆⵠᐃⲆΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Eyelashes"
      }, {
        id: 118,
        ⵠΔⵠ: Δᐃ.ⵠᐃⲆⵠᐃᐃΔ,
        Δᐃᐃ: Δᐃ.ⲆⵠⵠⵠΔⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⵠᐃΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Helmet Prototype"
      }, {
        id: 9,
        ⵠΔⵠ: Δᐃ.ⲆΔⲆΔΔᐃⵠ,
        Δᐃᐃ: Δᐃ.ⵠᐃⲆΔⵠᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        ⵠΔⵠ: Δᐃ.ΔⲆᐃⵠⵠΔⲆ,
        Δᐃᐃ: Δᐃ.ⲆⵠⵠΔΔΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: 14,
        ⵠΔⵠ: Δᐃ.ΔⲆⲆⵠᐃⲆⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆⲆⲆᐃΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: 19,
        ⵠΔⵠ: Δᐃ.ΔⵠⵠΔⲆⵠΔ,
        Δᐃᐃ: Δᐃ.ΔⲆⲆΔⲆⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        ⵠΔⵠ: Δᐃ.ⵠΔΔᐃᐃΔΔ,
        Δᐃᐃ: Δᐃ.ΔΔΔᐃⲆⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        ⵠΔⵠ: Δᐃ.Ⲇᐃᐃⵠⵠᐃⵠ,
        Δᐃᐃ: Δᐃ.ⵠΔΔΔⲆⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        ⵠΔⵠ: Δᐃ.ΔᐃⵠΔⵠⲆᐃ,
        Δᐃᐃ: Δᐃ.ⲆᐃᐃΔⲆᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        ⵠΔⵠ: Δᐃ.ΔⵠᐃᐃⲆᐃᐃ,
        Δᐃᐃ: Δᐃ.ⲆᐃⵠΔⲆΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        ⵠΔⵠ: Δᐃ.ΔⵠᐃⵠΔᐃᐃ,
        Δᐃᐃ: Δᐃ.ΔⲆⵠΔΔᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        ⵠΔⵠ: Δᐃ.ΔΔⵠΔⵠᐃᐃ,
        Δᐃᐃ: Δᐃ.ᐃᐃⲆⵠⵠⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        ⵠΔⵠ: Δᐃ.ⲆΔᐃⵠⵠⲆΔ,
        Δᐃᐃ: Δᐃ.ᐃⲆΔΔⵠᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        ⵠΔⵠ: Δᐃ.ΔΔΔⲆⲆⵠⲆ,
        Δᐃᐃ: Δᐃ.ⲆⵠᐃⵠⲆⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        ⵠΔⵠ: Δᐃ.ᐃΔⲆΔᐃⵠᐃ,
        Δᐃᐃ: Δᐃ.ⵠⵠΔᐃΔΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        ⵠΔⵠ: Δᐃ.ⲆⲆΔΔΔⵠⲆ,
        Δᐃᐃ: Δᐃ.ᐃᐃᐃΔᐃⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        ⵠΔⵠ: Δᐃ.ΔΔΔᐃΔⵠΔ,
        Δᐃᐃ: Δᐃ.ᐃᐃⲆⵠΔΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        ⵠΔⵠ: Δᐃ.ⵠᐃᐃⵠΔΔΔ,
        Δᐃᐃ: Δᐃ.ⵠⲆⵠⵠᐃΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        ⵠΔⵠ: Δᐃ.ᐃᐃⵠΔⵠⲆⵠ,
        Δᐃᐃ: Δᐃ.ᐃⲆⵠᐃᐃⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        ⵠΔⵠ: Δᐃ.ⵠᐃΔΔᐃⲆⵠ,
        Δᐃᐃ: Δᐃ.ⲆⲆᐃᐃᐃᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        ⵠΔⵠ: Δᐃ.ⲆᐃⲆⵠᐃⵠⵠ,
        Δᐃᐃ: Δᐃ.ᐃᐃᐃⵠⲆΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        ⵠΔⵠ: Δᐃ.ⵠⵠΔⵠⵠᐃᐃ,
        Δᐃᐃ: Δᐃ.ⲆᐃⵠⵠΔⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        ⵠΔⵠ: Δᐃ.ΔⵠΔⲆⲆΔⲆ,
        Δᐃᐃ: Δᐃ.ⵠΔⲆⲆᐃⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        ⵠΔⵠ: Δᐃ.ⲆᐃᐃⵠⵠᐃⲆ,
        Δᐃᐃ: Δᐃ.ᐃΔᐃⲆᐃΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        ⵠΔⵠ: Δᐃ.ΔⵠⲆΔⲆΔⲆ,
        Δᐃᐃ: Δᐃ.ⵠⵠⲆⲆⵠΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        ⵠΔⵠ: Δᐃ.ΔⲆⲆᐃⲆⲆⲆ,
        Δᐃᐃ: Δᐃ.ᐃᐃⲆᐃⵠⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        ⵠΔⵠ: Δᐃ.ᐃⵠⵠΔⵠΔⵠ,
        Δᐃᐃ: Δᐃ.ᐃⵠⲆᐃΔΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "aloner",
        name: "Blood"
      }, {
        id: 101,
        ⵠΔⵠ: Δᐃ.ⲆⵠᐃⲆⵠⲆΔ,
        Δᐃᐃ: Δᐃ.ᐃᐃΔⲆⵠⵠⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Axed Plans"
      }, {
        id: 105,
        ⵠΔⵠ: Δᐃ.ΔΔΔᐃⲆΔⵠ,
        Δᐃᐃ: Δᐃ.ᐃⲆΔᐃᐃᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Saddle"
      }, {
        id: 113,
        ⵠΔⵠ: Δᐃ.ΔᐃᐃⵠΔΔⲆ,
        Δᐃᐃ: Δᐃ.ⵠⵠΔᐃᐃΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "I see"
      }, {
        id: 114,
        ⵠΔⵠ: Δᐃ.ⵠᐃⲆⵠᐃⵠᐃ,
        Δᐃᐃ: Δᐃ.ᐃᐃΔΔⵠⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "I have no body and I must dress"
      }, {
        id: 115,
        ⵠΔⵠ: Δᐃ.ΔⲆⲆⲆΔΔⵠ,
        Δᐃᐃ: Δᐃ.ⵠᐃᐃⵠΔⲆⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆΔⵠᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "Cursed Crown"
      }, {
        id: 27,
        ⵠΔⵠ: Δᐃ.ⲆΔᐃⲆΔⵠΔ,
        Δᐃᐃ: Δᐃ.ⵠᐃΔᐃⵠᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Clown Face"
      }, {
        id: 20,
        ⵠΔⵠ: Δᐃ.ⵠⲆⲆᐃᐃⵠⲆ,
        Δᐃᐃ: Δᐃ.ᐃⵠΔΔᐃΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        ⵠΔⵠ: Δᐃ.ⲆΔⲆᐃᐃⲆᐃ,
        Δᐃᐃ: Δᐃ.ⲆⲆⵠᐃΔⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        ⵠΔⵠ: Δᐃ.ⵠᐃᐃⲆⲆᐃΔ,
        Δᐃᐃ: Δᐃ.ΔᐃⵠⲆΔⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        ⵠΔⵠ: Δᐃ.ᐃⵠΔⲆᐃᐃⵠ,
        Δᐃᐃ: Δᐃ.ᐃΔⲆⲆⲆⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        ⵠΔⵠ: Δᐃ.ᐃΔΔᐃΔᐃΔ,
        Δᐃᐃ: Δᐃ.ⵠⵠᐃᐃⵠΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        ⵠΔⵠ: Δᐃ.ⵠᐃⲆⵠᐃⲆⵠ,
        Δᐃᐃ: Δᐃ.ᐃⲆⲆᐃⲆⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        ⵠΔⵠ: Δᐃ.ⵠΔⲆᐃⵠⲆᐃ,
        Δᐃᐃ: Δᐃ.ᐃⵠⵠⵠᐃᐃΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 110,
        ⵠΔⵠ: Δᐃ.ᐃⲆⲆⵠΔᐃⲆ,
        Δᐃᐃ: Δᐃ.ᐃᐃⵠΔᐃⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ⲆⵠΔⲆ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Spectrum Pet"
      }, {
        id: 60,
        ⵠΔⵠ: Δᐃ.ⲆΔᐃⵠⵠⵠᐃ,
        Δᐃᐃ: Δᐃ.ᐃᐃⵠᐃⲆⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        ⵠΔⵠ: Δᐃ.ΔΔⲆⵠⵠⵠᐃ,
        Δᐃᐃ: Δᐃ.ΔⵠΔⲆⵠΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: 18,
        ⵠΔⵠ: Δᐃ.ⵠᐃᐃᐃⲆᐃΔ,
        Δᐃᐃ: Δᐃ.ΔᐃΔⲆᐃᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        ⵠΔⵠ: Δᐃ.ΔⵠⵠᐃⲆⵠᐃ,
        Δᐃᐃ: Δᐃ.ⲆⵠΔⵠᐃΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        ⵠΔⵠ: Δᐃ.ᐃᐃΔΔΔⲆᐃ,
        Δᐃᐃ: Δᐃ.ᐃⵠⵠⲆΔⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        ⵠΔⵠ: Δᐃ.ΔⵠⵠⲆΔΔΔ,
        Δᐃᐃ: Δᐃ.ΔᐃⲆⲆⲆⵠΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        ⵠΔⵠ: Δᐃ.ᐃⲆⲆᐃᐃⵠΔ,
        Δᐃᐃ: Δᐃ.ᐃᐃᐃΔΔΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        ⵠΔⵠ: Δᐃ.ⲆⲆᐃΔᐃᐃⵠ,
        Δᐃᐃ: Δᐃ.ⵠᐃᐃᐃⲆᐃⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        ⵠΔⵠ: Δᐃ.ⲆⵠⵠⵠⲆⲆⲆ,
        Δᐃᐃ: Δᐃ.ⵠΔΔⵠΔᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 97,
        ⵠΔⵠ: Δᐃ.ⵠΔᐃⵠⲆᐃᐃ,
        Δᐃᐃ: Δᐃ.ⵠⲆⵠΔΔⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Jarred Horns"
      }, {
        id: 98,
        ⵠΔⵠ: Δᐃ.ⵠᐃΔⲆⲆΔⵠ,
        Δᐃᐃ: Δᐃ.ᐃⵠΔᐃΔΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Curved Horns"
      }, {
        id: 99,
        ⵠΔⵠ: Δᐃ.ΔⵠⲆΔⵠΔⲆ,
        Δᐃᐃ: Δᐃ.ⲆⲆᐃᐃΔⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Evil Goat Horns"
      }, {
        id: 107,
        ⵠΔⵠ: Δᐃ.ⵠⵠⵠΔΔΔⲆ,
        Δᐃᐃ: Δᐃ.ᐃᐃΔⲆⲆᐃⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Decorative Earmuffs"
      }, {
        id: 112,
        ⵠΔⵠ: Δᐃ.ⲆΔΔⲆᐃⲆΔ,
        Δᐃᐃ: Δᐃ.ⲆⵠⲆΔⲆᐃᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Tamon Dragon Pet"
      }, {
        id: 116,
        ⵠΔⵠ: Δᐃ.ⲆⲆΔⲆⲆⲆΔ,
        Δᐃᐃ: Δᐃ.ⲆΔⵠᐃⲆⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⲆⵠΔ,
        ᐃΔⲆ: "Starve.io",
        name: "Blanket"
      }, {
        id: 45,
        ⵠΔⵠ: Δᐃ.ⵠΔⵠᐃᐃⵠᐃ,
        Δᐃᐃ: Δᐃ.ⲆⲆⲆΔΔΔⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "More than Level 5",
        level: 5
      }, {
        id: 46,
        ⵠΔⵠ: Δᐃ.ⲆΔⲆᐃⵠⲆΔ,
        Δᐃᐃ: Δᐃ.ⵠΔⵠⲆⵠⵠⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "More than Level 10",
        level: 10
      }, {
        id: 47,
        ⵠΔⵠ: Δᐃ.ᐃⲆⵠᐃΔᐃⵠ,
        Δᐃᐃ: Δᐃ.ΔᐃⲆⵠⲆⲆΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "More than Level 15",
        level: 15
      }, {
        id: 48,
        ⵠΔⵠ: Δᐃ.ⲆⵠⵠⲆⵠⲆⵠ,
        Δᐃᐃ: Δᐃ.ΔᐃⲆⵠⲆΔΔ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "More than Level 20",
        level: 20
      }, {
        id: 49,
        ⵠΔⵠ: Δᐃ.ΔⲆΔᐃⵠᐃⲆ,
        Δᐃᐃ: Δᐃ.ⵠⵠⵠⲆⵠⲆᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        ⵠΔⵠ: Δᐃ.ⲆⲆΔⵠΔΔⲆ,
        Δᐃᐃ: Δᐃ.ⲆΔⵠⲆⲆⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        ⵠΔⵠ: Δᐃ.ᐃⵠⲆΔᐃⲆⲆ,
        Δᐃᐃ: Δᐃ.ⲆᐃᐃᐃⵠΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        ⵠΔⵠ: Δᐃ.Δⵠᐃⵠᐃⵠᐃ,
        Δᐃᐃ: Δᐃ.ᐃᐃᐃᐃⵠⵠᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        ⵠΔⵠ: Δᐃ.ⲆⲆΔᐃᐃΔⲆ,
        Δᐃᐃ: Δᐃ.ΔⵠⵠΔΔⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        ⵠΔⵠ: Δᐃ.ⵠΔⵠΔΔⵠᐃ,
        Δᐃᐃ: Δᐃ.ᐃᐃⲆᐃⵠΔⵠ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        ⵠΔⵠ: Δᐃ.ΔΔⲆⵠⲆⵠⵠ,
        Δᐃᐃ: Δᐃ.ΔⵠⵠⲆᐃΔᐃ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        ⵠΔⵠ: Δᐃ.ᐃΔⵠⲆⵠᐃΔ,
        Δᐃᐃ: Δᐃ.ⵠᐃᐃⲆⵠⲆⲆ,
        ⲆΔᐃ: ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
        ᐃΔⲆ: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    Wf.ΔⵠᐃⲆΔΔⲆ = ΔΔⲆⵠⵠⲆⲆ(ⲆⲆΔⲆ.Δⵠᐃⵠⵠ, 21);
    Wf.ⲆⵠⵠⵠⵠΔⲆ = ΔΔⲆⵠⵠⲆⲆ(ⲆⲆΔⲆ.Δⵠᐃⵠⵠ, 20);
    ᐃᐃ[255] = [];
    ᐃᐃ[7] = [];
    ᐃᐃ[250] = [];
    ᐃᐃ[28] = [];
    ᐃᐃ[29] = [];
    ᐃᐃ[796] = [];
    for (var a = 0; ⲆⲆΔⲆ.Δⵠᐃⵠⵠ.length > a; a++) {
      ᐃᐃ[255][a] = [ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[a].ⵠΔⵠ, ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[a].Δᐃᐃ];
      ᐃᐃ[7][a] = [ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[a].ⲆΔⵠⲆ, ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[a].Ⲇᐃᐃⵠ];
    }
    for (a = 0; a < ⲆⲆΔⲆ.ⵠΔⲆΔᐃ.length; a++) {
      ᐃᐃ[28][a] = [ⲆⲆΔⲆ.ⵠΔⲆΔᐃ[a].ⵠΔⵠ, ⲆⲆΔⲆ.ⵠΔⲆΔᐃ[a].Δᐃᐃ];
    }
    for (a = 0; a < ⲆⲆΔⲆ.ΔⵠΔⵠⵠ.length; a++) {
      ᐃᐃ[250][a] = [ⲆⲆΔⲆ.ΔⵠΔⵠⵠ[a].ⵠΔⵠ, ⲆⲆΔⲆ.ΔⵠΔⵠⵠ[a].Δᐃᐃ];
    }
    for (a = 0; ⲆⲆΔⲆ.ⲆⵠⲆΔ.length > a; a++) {
      ᐃᐃ[29][a] = [ⲆⲆΔⲆ.ⲆⵠⲆΔ[a].ⵠΔⵠ, ⲆⲆΔⲆ.ⲆⵠⲆΔ[a].Δᐃᐃ];
    }
    for (a = 0; ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ.length > a; a++) {
      ᐃᐃ[796][a] = [ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ[a].ⵠΔⵠ, ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ[a].Δᐃᐃ];
    }
  };
  const pd = 8;
  function Cd(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, 0, Math.PI * 2);
  }
  const Td = 0;
  function fd(a, b, c, d, e) {
    a.beginPath();
    a.lineCap = "round";
    a.arc(b, c, d, 0, Math.PI * 2 * e);
  }
  function zd(b, c, d, e) {
    var f = Math.PI * 2 / c;
    b.beginPath();
    var i = [{
      x: d,
      y: 0
    }];
    var a = [];
    for (var j = 1; c > j; j++) {
      i.push({
        x: d * Math.sin(j * f),
        y: d * Math.cos(j * f)
      });
      var k = i.length;
      a.push(ΔⲆᐃ.ᐃΔΔᐃΔⲆⵠ(i[k - 2], i[k - 1]));
    }
    a.push(ΔⲆᐃ.ᐃΔΔᐃΔⲆⵠ(i[i.length - 1], i[0]));
    var l = a[a.length - 1];
    b.moveTo(l.x, l.y);
    for (j = 0; c > j; j++) {
      b.arcTo(i[j].x, i[j].y, a[j].x, a[j].y, e);
    }
    b.closePath();
  }
  const yd = 2;
  const wd = 20;
  const Pd = 256;
  const kd = 8;
  function Ad(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.floor(b * 28);
    var g = Math.floor(b * 20);
    e.font = g + "px Baloo Paaji";
    var a = b * 8;
    var h = e.measureText(c).width + a * 2;
    d.width = h;
    d.height = f;
    md(e, 0, 0, h, f, b * 10);
    e.globalAlpha = 0.5;
    cd(e, "#000");
    e.globalAlpha = 1;
    e.textBaseline = "middle";
    e.font = g + "px Baloo Paaji";
    e.beginPath();
    e.fillStyle = "#FFF";
    e.fillText(c, a, f / 2);
    return d;
  }
  function xd(c, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 120;
    var k = c * 110;
    var a = j / 2;
    var m = k / 2;
    var n = c * 20;
    var h = c * 112;
    var g = c * 82;
    var l = h / 2;
    var o = g / 2;
    var b = c * 4;
    f.width = j;
    f.height = k;
    i.globalAlpha = 1;
    i.translate(a, m);
    md(i, -l, -o, h, g, n);
    cd(i, e, e, b);
    return f;
  }
  function Jd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.sqrt(b.width * b.width + b.height * b.height);
    d2 = e / 2;
    c.width = e;
    c.height = e;
    d.translate(d2, d2);
    d.rotate(a);
    d.drawImage(b, -b.width / 2, -b.height / 2);
    return c;
  }
  function Md(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 264;
    d.height = a * 246;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    cd(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    cd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 102);
    e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
    e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
    e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
    e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
    e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
    e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
    e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
    e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
    e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
    e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
    e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
    e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
    e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
    e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
    e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
    e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
    e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
    e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
    e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
    e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 103);
    e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
    e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
    e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
    e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
    e.closePath();
    cd(e, c[3], c[4], a * 4);
    return d;
  }
  function Bd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 182, a * 120);
    md(e, a * -8, a * -67, a * 16, a * 134, a * 1);
    e.restore();
    cd(e, c[0]);
    e.save();
    e.translate(a * 68.5, a * 127.5);
    md(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
    e.restore();
    cd(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 68);
    md(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
    e.restore();
    cd(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123, a * 179.5);
    md(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
    e.restore();
    cd(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 123.5);
    e.rotate(6.24);
    md(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
    e.restore();
    cd(e, c[3], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 112);
    e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
    e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
    e.closePath();
    cd(e, c[1]);
    return d;
  }
  function Dd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 70;
    d.height = a * 70;
    e.globalAlpha = 0.5;
    Cd(e, a * 26, a * 26, a * 9);
    cd(e, c[0]);
    Cd(e, a * 56, a * 36, a * 9);
    cd(e, c[1]);
    Cd(e, a * 40, a * 50, a * 9);
    cd(e, c[2]);
    e.globalAlpha = 1;
    Cd(e, a * 26, a * 26, a * 5);
    cd(e, c[0]);
    Cd(e, a * 56, a * 36, a * 5);
    cd(e, c[1]);
    Cd(e, a * 40, a * 50, a * 5);
    cd(e, c[2]);
    return d;
  }
  function Ed(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 69.5, a * 145);
    md(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
    e.restore();
    cd(e, c[0]);
    e.save();
    e.translate(a * 183, a * 145);
    md(e, a * -8, a * -63, a * 16, a * 126, a * 1);
    e.restore();
    cd(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 62.5);
    e.rotate(6.28);
    md(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
    e.restore();
    cd(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 118);
    e.rotate(6.24);
    md(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
    e.restore();
    cd(e, c[3], c[1], a * 6);
    e.save();
    e.translate(a * 122, a * 177.5);
    e.rotate(6.32);
    md(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
    e.restore();
    cd(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 157);
    e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
    e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
    e.closePath();
    cd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205, a * 175);
    e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
    e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
    e.closePath();
    cd(e, c[1]);
    return d;
  }
  function Id(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 22;
    d.height = a * 22;
    e.globalAlpha = 0.4;
    Cd(e, a * 11, a * 11, a * 10);
    cd(e, c[0]);
    e.globalAlpha = 0.7;
    Cd(e, a * 11, a * 11, a * 7);
    cd(e, c[0]);
    e.globalAlpha = 1;
    Cd(e, a * 11, a * 11, a * 4);
    cd(e, c[0]);
    return d;
  }
  const Sd = 7;
  function Qd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    md(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    cd(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    md(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    cd(e, c[1], c[2], a * 4);
    e.translate(a * 2, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119, a * 28);
    e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    e.closePath();
    cd(e, c[3], c[4], a * 4);
    return d;
  }
  function _d(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 183, a * 107);
    md(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
    e.restore();
    cd(e, c[0]);
    e.save();
    e.translate(a * 69.5, a * 110);
    md(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
    e.restore();
    cd(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 181);
    md(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
    e.restore();
    cd(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 95);
    e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
    e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
    e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
    e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
    e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
    e.closePath();
    cd(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 75);
    e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
    e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
    e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
    e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
    e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
    e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
    e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
    e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
    e.closePath();
    cd(e, c[3], c[1], a * 6);
    return d;
  }
  function Fd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    md(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    cd(d, b[0], b[0], a * 4);
    d.translate(a * 2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    cd(d, b[0], b[0], a * 4);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    md(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    cd(d, b[0], b[0], a * 4);
    return c;
  }
  function Rd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    md(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    cd(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    md(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    cd(e, c[1], c[2], a * 4);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
    e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
    e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
    e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
    e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
    e.closePath();
    cd(e, c[2], c[3], a * 4);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
    e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
    e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
    e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
    e.closePath();
    cd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
    e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
    e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
    e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
    e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
    e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
    e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
    e.closePath();
    cd(e, c[5], c[6], a * 4);
    Cd(e, a * 68, a * 111.29513549804688, a * 15);
    cd(e, c[7], c[8], a * 4);
    Cd(e, a * 123, a * 111.29510498046875, a * 15);
    cd(e, c[7], c[8], a * 4);
    Cd(e, a * 63, a * 106, a * 5);
    cd(e, c[9]);
    Cd(e, a * 118, a * 106, a * 5);
    cd(e, c[9]);
    return d;
  }
  function jd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 40;
    var a = b * 40;
    e.width = i;
    e.height = a;
    var j = b * i / 2;
    var k = a * b / 2;
    var l = b * 15;
    f.save();
    f.translate(j, k);
    f.globalAlpha = 1;
    Cd(f, 0, 0, l);
    cd(f, d[0]);
    l = b * 5;
    j = b * 2;
    k = b * 1;
    f.translate(j, k);
    f.globalAlpha = 1;
    Cd(f, 0, 0, l);
    cd(f, d[1]);
    f.restore();
    return e;
  }
  const Wd = ij;
  function Gd(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 185;
    f.height = b * 240;
    g.globalAlpha = 0.5;
    g.translate(0, b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    cd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    cd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    cd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    cd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    cd(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    cd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    cd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    cd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    cd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    cd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 59, b * 99);
    g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
    g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
    g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
    g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
    g.closePath();
    cd(g, d[3], d[2], b * 4);
    if (e === 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 47, b * 149);
      g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
      g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
      g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
      g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
      g.closePath();
      cd(g, d[1]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 40, b * 139);
      g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
      g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
      g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
      g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
      g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
      g.closePath();
      cd(g, d[3], d[2], b * 4);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 41, b * 139);
      g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
      g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
      g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
      g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
      g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
      g.closePath();
      cd(g, d[3], d[2], b * 4);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 95);
    g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
    g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
    g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
    g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
    g.closePath();
    cd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 86);
    g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
    g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
    g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
    g.closePath();
    cd(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 117);
    g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
    g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
    g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
    g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
    g.closePath();
    cd(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 175);
    g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
    g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
    g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
    g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
    g.closePath();
    cd(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 169);
    g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
    g.closePath();
    cd(g, undefined, d[2], b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 136, b * 171);
    g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
    g.closePath();
    cd(g, Ya, d[2], b * 4);
    Cd(g, b * 63, b * 180, b * 15.231546211727817);
    cd(g, d[4]);
    Cd(g, b * 121, b * 181, b * 15.652475842498529);
    cd(g, d[4]);
    Cd(g, b * 58, b * 175, b * 5.656854249492381);
    cd(g, d[2]);
    Cd(g, b * 116, b * 175, b * 5.656854249492381);
    cd(g, d[2]);
    return f;
  }
  (function b() {
    const c = {
      ⵠΔⵠΔⵠᐃᐃᐃⲆ: 0
    };
    let d = 0;
    for (let a in c) {
      d = a;
    }
    const f = [];
    for (let a = 0; a < 12; a++) {
      f.push(_a.Math.floor(1 + _a.Math.random() * 10));
    }
    let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
    for (let a = 0; a < f[1]; a++) {
      g += f[a] + ";debugger;";
    }
    for (let a = 0; a < f[2]; a++) {
      g += "debugger;";
    }
    g += "}";
    const e = new _a.Function(g);
    _a.setTimeout(b, 10000);
    e();
  })();
  const Ld = 7;
  function Od(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    cd(d, b[0]);
    return c;
  }
  function Nd(b, c, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = b * 32;
    var a = b * 32;
    var k = j / 2;
    var m = a / 2;
    f.width = j;
    f.height = a;
    var h = b * 5;
    var g = b * 28;
    var l = h / 2;
    var n = g / 2;
    i.translate(b * 0, b * 0);
    i.translate(k, m);
    if (e == 1) {
      Cd(i, 0, 0, b * 10);
      cd(i, c[2], c[2], b * 3);
      for (var d = 0; d < 4; d++) {
        md(i, -l, -n, h, g, b * 2);
        i.rotate(Math.PI / 4);
        cd(i, c[2], c[2], b * 4);
      }
    }
    Cd(i, 0, 0, b * 10);
    cd(i, c[0], c[1], b * 1.5);
    for (d = 0; d < 4; d++) {
      md(i, -l, -n, h, g, b * 2);
      i.rotate(Math.PI / 4);
      cd(i, c[0], c[1], b * 1.5);
    }
    Cd(i, 0, 0, b * 10);
    cd(i, c[0]);
    Cd(i, 0, 0, b * 4);
    cd(i, c[2], c[1], b * 1.5);
    i.globalCompositeOperation = "destination-out";
    Cd(i, 0, 0, b * 4);
    cd(i, c[0], c[1], b * 2);
    i.globalCompositeOperation = "source-over";
    Cd(i, 0, 0, b * 4);
    cd(i, ij, c[1], b * 2);
    return f;
  }
  function qd(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 100;
    var j = c * 100;
    var a = i / 2;
    var k = j / 2;
    e.width = i;
    e.height = j;
    var m = c * 5;
    var h = c * 28;
    var g = m / 2;
    var l = h / 2;
    f.translate(a, k);
    for (var n = 0; n < 4; n++) {
      md(f, -g, -l, m, h, c * 2);
      f.rotate(Math.PI / 4);
      cd(f, d);
    }
    f.arc(0, 0, c * 10, 0, Math.PI * 2);
    cd(f, d);
    f.globalCompositeOperation = "destination-out";
    Cd(f, 0, 0, c * 4);
    f.fill();
    return e;
  }
  function Hd(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 200;
    var f = b * 200;
    c.width = e;
    c.height = f;
    var g = bm(0.35, zq, ["#0e3022", "#0b8052", "#077b49"]);
    d.drawImage(g, 10, 10);
    g = am(0.9, oj, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 21, 20);
    g = am(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 38, 28);
    g = am(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 15, 37);
    g = am(0.9, Vn, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 32, 45);
    return c;
  }
  const Ud = 2;
  function Yd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + a * 5);
    d.globalAlpha = 0.3;
    Cd(d, a * 213.5, a * 256.75, a * 75);
    cd(d, b[5]);
    Cd(d, a * 213.5, a * 175.75, a * 25);
    cd(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.translate(0, -5);
    d.globalAlpha = 1;
    Cd(d, a * 213.5, a * 256.75, a * 75);
    cd(d, b[3]);
    Cd(d, a * 213.5, a * 175.75, a * 25);
    cd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    Cd(d, a * 213.5, a * 256.75, a * 70);
    cd(d, b[0]);
    Cd(d, a * 213.5, a * 175.75, a * 20);
    cd(d, b[0]);
    Cd(d, a * 222, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    Cd(d, a * 205, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    Cd(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    Cd(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    md(d, a * -22, a * -21, a * 44, a * 42, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    md(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    return c;
  }
  function Kd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 255);
    e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
    e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
    e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
    e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
    e.closePath();
    cd(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 258);
    e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
    e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
    e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
    e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
    e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
    e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
    e.closePath();
    cd(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 323);
    e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
    e.closePath();
    cd(e, mb, c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 210);
    e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
    e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
    e.closePath();
    cd(e, c[3], c[4], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 200);
    e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
    e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
    e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
    e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
    e.closePath();
    cd(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97, a * 204);
    e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
    e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
    e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
    e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
    e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
    e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
    e.closePath();
    cd(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 260);
    e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
    e.closePath();
    cd(e, undefined, c[1], a * 14);
    Cd(e, a * 161, a * 201, a * 13);
    cd(e, c[5]);
    Cd(e, a * 216, a * 205, a * 8.06225774829855);
    cd(e, c[5]);
    Cd(e, a * 216, a * 175, a * 6.708203932499369);
    cd(e, c[5]);
    Cd(e, a * 271, a * 191, a * 5.0990195135927845);
    cd(e, c[5]);
    Cd(e, a * 206, a * 180, a * 11.180339887498949);
    cd(e, c[5]);
    return d;
  }
  function Vd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 55;
    var a = b * 55;
    var h = b * 8;
    e.width = g;
    e.height = a;
    f.translate(b * -65, b * -55 + h);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 95, b * 60);
    f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    f.closePath();
    cd(f, d[0], d[1], 3);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 91, b * 70);
    f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
    f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
    f.closePath();
    cd(f, d[2], d[3], 3);
    return e;
  }
  function Xd(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 85;
    var j = c * 115;
    var a = c * 6;
    e.width = i;
    e.height = j;
    f.translate(c * -130, c * -60 + a);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    cd(f, d[0]);
    f.translate(0, -a);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    cd(f, d[1], d[2], 4);
    var k = c * 155;
    var m = c * 133;
    var h = c * 10;
    var g = c * 3;
    var l = k + c * -3;
    var n = m + c * -5;
    f.save();
    f.translate(k, m);
    f.globalAlpha = 1;
    Cd(f, 0, 0, h);
    cd(f, d[3]);
    f.restore();
    f.save();
    f.translate(l, n);
    f.globalAlpha = 1;
    Cd(f, 0, 0, g);
    cd(f, d[4]);
    f.restore();
    f.save();
    f.translate(k + c * 27, m);
    f.globalAlpha = 1;
    Cd(f, 0, 0, h);
    cd(f, d[3]);
    f.restore();
    f.save();
    f.translate(c * 27 + l, n);
    f.globalAlpha = 1;
    Cd(f, 0, 0, g);
    cd(f, d[4]);
    return e;
  }
  function Zd(f, e, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var m = (d = f * 125) / 2;
    var a = (r = f * 95) / 2;
    var n = f * 10;
    var o = f * 8;
    var h = f * 112;
    var g = f * 82;
    var l = h / 2;
    var q = g / 2;
    var b = f * 4;
    j.width = d;
    j.height = r;
    k.translate(m - f * 4, a + f * 4);
    k.globalAlpha = e ? 0.5 : 1;
    md(k, -l, -q, h, g, n);
    cd(k, i[0]);
    k.globalAlpha = 1;
    k.translate(0, -o);
    md(k, -l, -q, h, g, n);
    cd(k, i[1], i[2], b);
    var d = f * 55;
    var r = f * 45;
    n = 5;
    k.translate(f * -40, f * -30);
    md(k, 0, 0, d, r, n);
    cd(k, i[3]);
    var t = qd(f * 0.7, i[3]);
    k.drawImage(t, f * 45, f * -25);
    t = qd(f * 0.7, i[3]);
    k.drawImage(t, f * 45, f * 15);
    t = qd(f * 1.2, i[3]);
    k.drawImage(t, f * 28, f * -30);
    d = f * 15;
    r = f * 70;
    n = f * 5;
    k.translate(f * 78, f * -5);
    md(k, 0, 0, d, r, n);
    cd(k, i[4]);
    d = f * 9;
    r = f * 50;
    n = f * 3;
    k.translate(f * -20, f * 20);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    md(k, 0, 0, d, r, n);
    cd(k, i[5]);
    k.translate(f * -20, f * 29);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    k.beginPath();
    k.lineJoin = "round";
    k.moveTo(0, 0);
    k.lineTo(0, f * 30);
    k.lineTo(f * 30, f * 30);
    k.closePath();
    cd(k, null, i[5], f * 8);
    return j;
  }
  function $d(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    cd(d, b[0], b[0], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    cd(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    cd(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    cd(d, b[0], b[0], a * 2);
    d.globalAlpha = 1;
    d.translate(0, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    cd(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    cd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    cd(d, undefined, b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    cd(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    cd(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    cd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    cd(d, b[3]);
    Cd(d, a * 77, a * 107, a * 6);
    cd(d, b[2]);
    Cd(d, a * 110, a * 107, a * 6);
    cd(d, b[2]);
    Cd(d, a * 75, a * 105, a * 3);
    cd(d, b[4]);
    Cd(d, a * 108, a * 105, a * 3);
    cd(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    cd(d, b[1]);
    return c;
  }
  function Dt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 85, a * 237);
    e.rotate(1.5707963267948966);
    zd(e, 6, a * 54.585977194239184, a * 1);
    e.restore();
    cd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178, a * 238);
    e.rotate(1.5707963267948966);
    zd(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    cd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 270, a * 239);
    e.rotate(1.5707963267948966);
    zd(e, 6, a * 53.58058329516393, a * 1);
    e.restore();
    cd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 222, a * 312);
    e.rotate(1.5707963267948966);
    zd(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    cd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 317, a * 159);
    e.rotate(1.5707963267948966);
    zd(e, 6, a * 57.63465889766331, a * 1);
    e.restore();
    cd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 223.5, a * 139.0625);
    e.rotate(1.5707963267948966);
    zd(e, 6, a * 51.66236541235796, a * 1);
    e.restore();
    cd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 132.5, a * 137.0625);
    e.rotate(1.5707963267948966);
    zd(e, 6, a * 52.009614495783374, a * 1);
    e.restore();
    cd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178.5, a * 58.0625);
    e.rotate(1.5707963267948966);
    zd(e, 6, a * 53.16013544000805, a * 1);
    e.restore();
    cd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 177.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    zd(e, 6, a * 50, a * 1);
    e.restore();
    cd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(1.5707963267948966);
    zd(e, 6, a * 54, a * 1);
    e.restore();
    cd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 319.5, a * 138.0625);
    e.rotate(1.5707963267948966);
    zd(e, 6, a * 55.08175741568164, a * 1);
    e.restore();
    cd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 269.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    zd(e, 6, a * 54.589376255824725, a * 1);
    e.restore();
    cd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 221.5, a * 293.0625);
    e.rotate(0.5235987755982988);
    zd(e, 6, a * 49.49747468305833, a * 1);
    e.restore();
    cd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 342.0625);
    e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
    e.closePath();
    cd(e, Ll, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 270.0625);
    e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
    e.closePath();
    cd(e, mb, c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    zd(e, 6, a * 30, a * 15);
    e.restore();
    cd(e, c[3]);
    e.save();
    e.translate(a * 177.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    zd(e, 6, a * 30, a * 15);
    e.restore();
    cd(e, c[3]);
    e.save();
    e.translate(a * 222.5, a * 294.0625);
    e.rotate(0.5235987755982988);
    zd(e, 6, a * 30, a * 15);
    e.restore();
    cd(e, c[3]);
    e.save();
    e.translate(a * 270.5, a * 216.0625);
    e.rotate(0.5235987755982988);
    zd(e, 6, a * 30, a * 15);
    e.restore();
    cd(e, c[3]);
    e.save();
    e.translate(a * 320.5, a * 134.0625);
    e.rotate(0.5235987755982988);
    zd(e, 6, a * 30, a * 15);
    e.restore();
    cd(e, c[3]);
    e.save();
    e.translate(a * 224.5, a * 138.0625);
    e.rotate(0.5235987755982988);
    zd(e, 6, a * 30, a * 15);
    e.restore();
    cd(e, c[3]);
    e.save();
    e.translate(a * 133.5, a * 137.0625);
    e.rotate(0.5235987755982988);
    zd(e, 6, a * 30, a * 15);
    e.restore();
    cd(e, c[3]);
    e.save();
    e.translate(a * 178.5, a * 56.0625);
    e.rotate(0.5235987755982988);
    zd(e, 6, a * 30, a * 15);
    e.restore();
    cd(e, c[3]);
    return d;
  }
  ;
  function Et(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 52;
    d.height = a * 65;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.833328247070312, a * 12.078125);
    e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
    e.closePath();
    cd(e, ej, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 7.8333282470703125, a * 20.078125);
    e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
    e.closePath();
    cd(e, Qq, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 26.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
    e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
    e.closePath();
    cd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.83332824707031, a * 8.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
    e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
    e.closePath();
    cd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.833328247070312, a * 39.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
    e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
    e.closePath();
    cd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.83332824707031, a * 23.078125);
    e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
    e.closePath();
    cd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 24.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
    e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
    cd(e, rk, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38.83332824707031, a * 14.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
    cd(e, zh, c[1], a * 2);
    return d;
  }
  function Ft(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 202.5, a * 147.5);
    md(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
    e.restore();
    cd(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 190.5);
    md(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
    e.restore();
    cd(e, b[2], b[1], a * 12);
    e.save();
    e.save();
    e.translate(a * 202.5, a * 233.5);
    md(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
    e.restore();
    cd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 275);
    md(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
    e.restore();
    cd(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 201, a * 212);
    e.rotate(8.64);
    md(e, a * -116, a * -22, a * 232, a * 44, a * 10);
    e.restore();
    cd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 121.5);
    md(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
    e.restore();
    cd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 299);
    md(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
    e.restore();
    cd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 298.5, a * 210);
    md(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    cd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 108.5, a * 210);
    md(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    cd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 204, a * 121.5);
    md(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
    e.restore();
    cd(e, b[3], b[3], a * 10);
    e.save();
    e.translate(a * 197, a * 299);
    md(e, a * 85, a * -9, a * -170, a * 18, a * 10);
    e.restore();
    cd(e, b[3], b[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 94, a * 317);
    e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
    e.closePath();
    cd(e, undefined, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279, a * 142);
    e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
    e.closePath();
    cd(e, undefined, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 106);
    e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
    e.closePath();
    cd(e, undefined, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 281, a * 282);
    e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
    e.closePath();
    cd(e, mq, b[1], a * 12);
    if (c == 0) {
      e.scale(2, 2);
      e.translate(a * -7, a * 55);
      e.rotate(-0.5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 60, a * 47);
      e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
      e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
      e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
      e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
      e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
      e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
      e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
      e.closePath();
      cd(e, b[4], b[4], a * 5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68, a * 54);
      e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
      e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
      e.closePath();
      cd(e, b[3]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 50, a * 55);
      e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
      e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
      e.closePath();
      cd(e, b[3]);
    } else if (c == 1) {
      e.scale(0.6, 0.6);
      e.translate(a * 185, a * 165);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 108, a * 56);
      e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
      e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
      e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
      e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
      e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
      e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
      e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
      e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
      e.closePath();
      cd(e, b[4], b[4], a * 20);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 112, a * 72);
      e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
      e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
      e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
      e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
      e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
      e.closePath();
      cd(e, undefined, b[0], a * 13);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 132, a * 117);
      e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
      e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
      e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
      cd(e, cl, b[0], a * 20);
      Cd(e, a * 142, a * 221, a * 16.1245154965971);
      cd(e, b[0]);
    }
    return d;
  }
  const Gt = 0;
  function Ht(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.translate(a * 5, a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    zd(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    zd(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    cd(e, c[1], c[2], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    zd(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    zd(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    cd(e, c[3], c[4], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    Cd(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    Cd(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    cd(e, c[5], c[6], a * 4);
    return d;
  }
  const It = 1;
  function Jt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    cd(e, Ll, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    cd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    cd(e, undefined, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    cd(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    cd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    cd(e, undefined, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    cd(e, Qq, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    cd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    cd(e, undefined, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    cd(e, Qq, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    cd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    cd(e, undefined, c[6], a * 4);
    return d;
  }
  const Kt = 20;
  function Lt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    zd(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    zd(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    cd(e, c[8], c[9], a * 4);
    return d;
  }
  function Mt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 75;
    var a = b * 55;
    e.width = g;
    e.height = a;
    f.translate(b * -30, b * -40);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    f.closePath();
    cd(f, d[0]);
    f.beginPath();
    f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    f.closePath();
    cd(f, d[1]);
    f.beginPath();
    f.moveTo(b * 69, b * 65);
    f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    cd(f, false, d[1], 2);
    f.beginPath();
    f.moveTo(b * 50, b * 48);
    f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    cd(f, d[2]);
    return e;
  }
  const Nt = 7600704;
  const Pt = 7600704 .ᐃⵠᐃⲆⲆᐃⵠ;
  const Qt = `const ⲆⵠⲆⵠ = (typeof ⲆΔΔΔ === "${Pt}") ? 1 : 0; return ⲆⵠⲆⵠ;`;
  const St = 20;
  function Tt(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 195;
    var a = c * 190;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = c * 10;
    var g = c * 35;
    var l = c * 150;
    var o = g / 2;
    var b = l / 2;
    var d = c * 4;
    j.translate(m - c * 5, n - c * 5);
    j.rotate(-Math.PI / 1.25);
    j.globalAlpha = 1;
    md(j, -o, -b, g, l, h);
    cd(j, f[0], f[1], d);
    j.translate(0, 0);
    j.rotate(Math.PI / 3);
    j.globalAlpha = 1;
    md(j, -o, -b, g, l, h);
    cd(j, f[0], f[1], d);
    j.translate(0, 5);
    md(j, -o / 2, -b / 2, g / 2, l / 3, h - 2);
    cd(j, f[1]);
    return i;
  }
  function Ut(b, e, f, i, j) {
    var k = document.createElement("canvas");
    var a = k.getContext("2d");
    var m = b * 70;
    var n = b * 70;
    var h = b * 10;
    var g = b * 5;
    k.width = m;
    k.height = n + g;
    for (var l = 0; l < e.length; l++) {
      var o = e[l];
      a.globalAlpha = o.a;
      var q = o.f(f, false, o.c);
      a.save();
      a.translate(m / 2 + o.x * b, n / 2 + o.y * b);
      a.rotate(o.r);
      a.drawImage(q, -q.width / 2, -q.height / 2);
      a.restore();
    }
    var r = [];
    for (l = 0; i.length > l; l++) {
      var c = document.createElement("canvas");
      var s = c.getContext("2d");
      c.width = m;
      c.height = n + g;
      s.globalAlpha = j / 2;
      if (l == 2) {
        md(s, 0, g, m, n, h);
      } else {
        md(s, 0, 0, m, n + g, h);
      }
      cd(s, "#081a19");
      s.globalAlpha = j;
      if (l == 2) {
        md(s, 0, g, m, n, h);
      } else {
        md(s, 0, 0, m, n, h);
      }
      cd(s, i[l]);
      s.globalAlpha = 1;
      if (l == 2) {
        s.drawImage(k, 0, g);
      } else {
        s.drawImage(k, 0, 0);
      }
      r.push(Bq(c));
    }
    return r;
  }
  const Vt = 10;
  function Wt(b, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = b * 135;
    var a = b * 190;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = b * 10;
    var g = b * 25;
    var l = b * 180;
    var o = g / 2;
    var d = l / 2;
    var p = b * 4;
    j.translate(m, n);
    j.rotate(-Math.PI / 5);
    j.globalAlpha = 1;
    md(j, -o, -d, g, l, h);
    cd(j, f[0], f[1], p);
    j.translate(0, 0);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 1;
    md(j, -o, -d, g, l, h);
    cd(j, f[0], f[1], p);
    return i;
  }
  function Xt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 370;
    var a = b * 370;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 180;
    f.globalAlpha = 0.2;
    Cd(f, j, k, h);
    cd(f, d[0]);
    return e;
  }
  function Yt(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 193;
    var a = c * 198;
    var m = c * 140;
    var n = c * 90;
    i.width = k;
    i.height = a;
    var h = c * 10;
    var g = c * 25;
    var l = c * 180;
    var o = g / 2;
    var b = l / 2;
    var d = c * 4;
    j.translate(c * -25, c * 1);
    j.translate(m, n);
    j.rotate(-Math.PI / 5);
    md(j, -o, -b, g, l, h);
    cd(j, f[0], f[1], d);
    j.translate(c * -30, c * -25);
    j.rotate(Math.PI / 3);
    md(j, -o, -b, g, l, h);
    cd(j, f[0], f[1], d);
    j.translate(c * 35, c * 30);
    j.rotate(Math.PI / 3);
    md(j, -o, -b, g, l, h);
    cd(j, f[0], f[1], d);
    return i;
  }
  function Zt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 145;
    var a = b * 145;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 70;
    f.translate(j, k);
    f.globalAlpha = 0.4;
    Cd(f, 0, 0, h);
    cd(f, d[0]);
    h = b * 50;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    Cd(f, 0, 0, h);
    cd(f, d[0]);
    h = b * 35;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    Cd(f, 0, 0, h);
    cd(f, d[1]);
    h = b * 20;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    Cd(f, 0, 0, h);
    cd(f, d[2]);
    return e;
  }
  function $t(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    cd(e, es, c[2], a * 4);
    Cd(e, a * 18, a * 38, a * 14.866068747318506);
    cd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    cd(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 74);
    e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
    e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
    e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
    e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
    e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
    e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
    e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
    e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
    e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
    e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
    e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
    e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
    e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
    e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
    e.closePath();
    cd(e, c[6], c[7], a * 6);
    return d;
  }
  function _t(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 205;
    var a = b * 205;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 100;
    f.translate(j, k);
    f.globalAlpha = 1;
    Cd(f, 0, 0, h);
    cd(f, d[0]);
    return e;
  }
  const au = 8;
  function bu(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 105;
    var a = c * 125;
    var m = c * 4;
    var n = c * 10;
    var h = c * 5;
    var g = c * 10;
    var l = c * 110;
    var o = g / 2;
    var b = l / 2;
    i.width = k;
    i.height = a;
    j.save();
    j.globalAlpha = e ? 0.5 : 1;
    j.translate(k / 2 + c * 8, a / 2 + h);
    md(j, -o, -b, g, l, n);
    cd(j, e ? f[0] : f[1]);
    j.translate(c * -130 + h, c * -128 + h);
    j.beginPath();
    j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    j.closePath();
    cd(j, f[2]);
    j.restore();
    j.translate(k / 2 + 8, a / 2);
    j.globalAlpha = 1;
    md(j, -o, -b, g, l, n);
    cd(j, f[3], f[4], m);
    j.translate(c * -130, c * -125);
    j.beginPath();
    j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    j.closePath();
    cd(j, f[5], f[6], m);
    return i;
  }
  function cu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 40;
    var g = b * 40;
    var a = b * 16;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 1;
    Cd(e, 0, 0, a);
    cd(e, c[0], c[1], h);
    return d;
  }
  function du(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = (o = c * 450) / 2;
    var a = (p = c * 145) / 2;
    var m = c * 10;
    var n = c * 300;
    var h = c * 30;
    var g = n / 2;
    var l = h / 2;
    if (f) {
      var o = c * 145;
      var p = c * 450;
      i.width = o;
      i.height = p;
      j.rotate(Math.PI / 2);
      j.save();
      j.globalAlpha = 0.5;
      md(j, c * 100, c * -110, n, h, m);
      cd(j, e[0]);
      j.translate(c * 178, c * -98);
      md(j, -g, -l - c * 6, c * 100, c * 100, m);
      cd(j, e[0]);
      j.translate(c * -50, c * 5);
      md(j, c * 220, c * -15, c * 90, c * 90, m);
      cd(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(c * 250, c * -63);
      md(j, -g - c * 20, -l, n, h, m);
      cd(j, e[1], e[2], 4);
      j.translate(c * -70, c * -40);
      md(j, -g - c * 20, -l, c * 100, c * 100, m);
      cd(j, e[3], e[4], 4);
      j.translate(c * -70, c * 15);
      md(j, c * 220, c * -22, c * 90, c * 90, m);
      cd(j, e[3], e[4], 4);
      md(j, c * 230, c * -12, c * 55, c * 55, m);
      cd(j, e[5]);
      j.translate(c * -70, 0);
      md(j, c * -15, c * -2, c * 60, c * 60, m);
      cd(j, e[5]);
      j.restore();
    } else {
      i.width = o;
      i.height = p;
      j.save();
      j.globalAlpha = 0.5;
      j.translate(k, a + c * 10);
      md(j, -g, -l, n, h, m);
      cd(j, e[0]);
      j.translate(c * -65, c * -25);
      md(j, -g, -l - c * 6, c * 100, c * 100, c * 15);
      cd(j, e[0]);
      j.translate(c * -35, c * -5);
      md(j, c * 220, c * -15, c * 90, c * 90, c * 15);
      cd(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(c * 240, c * 70);
      md(j, -g, -l, n, h, m);
      cd(j, e[1], e[2], 4);
      j.translate(c * -60, c * -40);
      md(j, -g - c * 20, -l, c * 100, c * 100, c * 15);
      cd(j, e[3], e[4], 4);
      j.translate(c * -55, c * 10);
      md(j, c * 220, c * -22, c * 90, c * 90, c * 15);
      cd(j, e[3], e[4], 4);
      md(j, c * 240, c * -12, c * 55, c * 55, c * 12);
      cd(j, e[5]);
      j.translate(c * 45, c * 0);
      md(j, c * -145, c * -2, c * 60, c * 60, c * 12);
      cd(j, e[5]);
      j.restore();
    }
    return i;
  }
  function eu(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 121;
    f.height = b * 130;
    g.translate(0, b * 20);
    if (d == 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 6, b * 23);
      g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
      g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
      g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
      g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
      g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
      g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
      g.closePath();
      cd(g, ct, c[3], b * 13);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 6, b * 23);
    g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
    g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
    g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
    g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
    g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
    g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
    g.closePath();
    cd(g, c[1], c[2], b * 4);
    if (e == 1) {
      g.translate(0, b * 5);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      cd(g, Qq, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      cd(g, undefined, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      cd(g, undefined, c[0], b * 10);
      if (d == 1) {
        g.translate(b * -6, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 67, b * 30);
        g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
        cd(g, Qq, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 70, b * 17);
        g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
        cd(g, ct, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 76, b * 8);
        g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
        cd(g, undefined, c[3], b * 18);
        g.translate(-6, b * 0);
      } else {
        g.translate(b * -6, b * -5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      cd(g, undefined, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      cd(g, cl, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      cd(g, undefined, c[2], b * 10);
    } else {
      if (d == 1) {
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        cd(g, undefined, c[3], b * 18);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        cd(g, Ya, c[3], b * 18);
      } else {
        g.translate(0, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        cd(g, undefined, c[0], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        cd(g, undefined, c[0], b * 7);
        g.translate(0, b * 5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 108, b * 27);
      g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
      g.closePath();
      cd(g, undefined, c[2], b * 7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 79, b * 30);
      g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
      g.closePath();
      cd(g, undefined, c[2], b * 7);
    }
    return f;
  }
  function fu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 32;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2 + b * 10);
    e.globalAlpha = 0.5;
    Cd(e, 0, 0, a);
    cd(e, c[0], c[0]);
    e.translate(0, b * -8);
    e.globalAlpha = 1;
    Cd(e, 0, 0, a);
    cd(e, c[1], c[2], h);
    return d;
  }
  function gu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 469;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    cd(e, c[0]);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    md(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    cd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    cd(e, undefined, c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    cd(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    cd(e, c[4], c[5], a * 7);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    md(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    cd(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    cd(e, c[6]);
    return d;
  }
  function hu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 16;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 0.5;
    Cd(e, 0, 0, a);
    cd(e, c[0]);
    e.globalAlpha = 1;
    return d;
  }
  function iu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.max(c.width, b.width);
    var g = Math.max(c.height, b.height);
    d.width = f;
    d.height = g;
    e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
    e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
    return d;
  }
  function ju(c, e, f, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var a = c * 210;
    var m = c * 205;
    var n = c * 30;
    var h = c * 20;
    var g = c * 200;
    var l = c * 180;
    var o = g / 2;
    var b = l / 2;
    var d = 4;
    j.width = a;
    j.height = m;
    j.width = c * 419;
    j.height = c * 412;
    if (i == 1) {
      k.save();
      k.translate(c * 10, c * 0);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 117.99996948242188, c * 216.40621948242188);
      k.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
      cd(k, mq, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 114.99996948242188, c * 227.40621948242188);
      k.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
      cd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 110.99996948242188, c * 236.40621948242188);
      k.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
      cd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 111.99996948242188, c * 206.29513549804688);
      k.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
      cd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 109.99996948242188, c * 249.18402099609375);
      k.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
      cd(k, ij, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 105.99996948242188, c * 192.18402099609375);
      k.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
      k.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
      k.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
      k.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
      k.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
      k.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
      cd(k, Wd, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 104.99996948242188, c * 183.29513549804688);
      k.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
      k.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
      cd(k, cl, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 107.99996948242188, c * 177.85067749023438);
      k.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
      k.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
      k.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
      k.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
      k.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
      k.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
      cd(k, Qq, e[4], c * 3);
      k.restore();
    } else if (i == 2) {
      k.save();
      k.translate(c * 130, c * 35);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 133.85067749023438);
      k.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
      cd(k, mq, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 143.85067749023438);
      k.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
      cd(k, hg, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 157.85067749023438);
      k.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
      cd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
      cd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 167.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
      cd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 117.85067749023438);
      k.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
      k.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
      k.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
      cd(k, rk, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 112.18402099609375);
      k.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
      k.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
      k.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
      k.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
      cd(k, nl, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 101.29513549804688);
      k.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
      k.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
      k.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
      k.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
      cd(k, Wd, e[4], c * 3);
      k.restore();
    }
    k.translate(j.width / 2, j.height / 2);
    if (!i) {
      k.globalAlpha = 0.5;
      md(k, -o, -b, g, l + h, n);
      cd(k, e[0]);
      if (f) {
        k.rotate(Math.PI);
      }
      k.globalAlpha = 1;
      md(k, -o, -b, g, l, n);
      cd(k, e[1], e[2], d);
      k.globalAlpha = 1;
      md(k, c * 35 - o, c * 20 - b, g - c * 50, l - c * 50, n - c * 10);
      cd(k, e[3]);
    }
    if (i == 3) {
      k.translate(-j.width / 2, -j.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      cd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      cd(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      cd(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      cd(k, e[5]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      cd(k, e[5]);
      k.translate(c * 5, c * -55);
      k.translate(c * -5, c * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      cd(k, e[5]);
    } else if (i == 4) {
      k.translate(-j.width / 2, -j.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 30, c * 167);
      k.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
      k.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, c * 100, c * 179);
      k.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
      k.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
      k.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
      k.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
      k.closePath();
      cd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 26, c * 145);
      k.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
      k.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
      k.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
      k.closePath();
      cd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 13, c * 193);
      k.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * 20, c * 202);
      k.bezierCurveTo(c * 13, c * 208, c * 7, c * 202, c * 13, c * 193);
      k.closePath();
      cd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      cd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 335, c * 196);
      k.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
      k.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
      k.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
      k.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
      k.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
      k.closePath();
      cd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 349, c * 212);
      k.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
      k.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
      k.closePath();
      cd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 46, c * 165);
      k.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
      k.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
      k.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
      k.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
      k.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
      k.closePath();
      cd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      cd(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      cd(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      cd(k, e[5]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      cd(k, e[5]);
      k.translate(c * 5, c * -55);
      k.translate(c * -5, c * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      cd(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 367, c * 164);
      k.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
      k.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
      k.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
      k.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
      k.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
      k.closePath();
      cd(k, e[4]);
    }
    return j;
  }
  function ku(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    cd(e, Qq, c[2], a * 4);
    Cd(e, a * 18, a * 38, a * 14.866068747318506);
    cd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    cd(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    cd(e, c[4], c[5], a * 4);
    return d;
  }
  const lu = 20;
  function mu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 424;
    d.height = a * 788;
    e.translate(a * 25, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    md(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    cd(e, c[0]);
    Cd(e, a * 204, a * 693, a * 36.013886210738214);
    cd(e, c[0]);
    Cd(e, a * 105, a * 518, a * 30);
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    cd(e, c[0]);
    e.translate(a * -25, a * -25);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    md(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    cd(e, c[1], c[2], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    cd(e, c[3], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    cd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    cd(e, c[6], c[4], a * 16);
    Cd(e, a * 204, a * 693, a * 36.013886210738214);
    cd(e, c[6], c[4], a * 16);
    Cd(e, a * 105, a * 518, a * 30);
    cd(e, c[6], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    cd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    cd(e, c[6]);
    Cd(e, a * 204, a * 693, a * 17.029386365926403);
    cd(e, c[7]);
    Cd(e, a * 106, a * 518, a * 12);
    cd(e, c[7]);
    return d;
  }
  function nu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 112;
    e.translate(0, a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    cd(e, c[1], c[2], a * 8);
    return d;
  }
  function ou(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 250;
    e.translate(a * -135, a * -75);
    e.globalAlpha = b ? 0.8 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    cd(e, c[0]);
    Cd(e, a * 160.5, a * 243.03125, a * 7);
    cd(e, c[0]);
    Cd(e, a * 227.5, a * 242.03125, a * 7);
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    cd(e, c[0], c[0], a * 5);
    Cd(e, a * 194, a * 298, a * 9);
    cd(e, c[0], c[0], a * 5);
    e.globalAlpha = 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    cd(e, c[1], c[2], a * 5);
    Cd(e, a * 160.5, a * 243.03125, a * 7);
    cd(e, c[1], c[2], a * 5);
    Cd(e, a * 227.5, a * 242.03125, a * 7);
    cd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    cd(e, c[1], c[2], a * 7);
    Cd(e, a * 194, a * 298, a * 9);
    cd(e, c[1], c[2], a * 7);
    return d;
  }
  function pu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 321;
    d.height = a * 284;
    e.translate(a * 100, a * 30);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    cd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    cd(e, rk, c[4], a * 4);
    e.translate(a * -100, a * -30);
    e.translate(a * 10, a * 70);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    cd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    cd(e, undefined, c[4], a * 4);
    e.translate(a * 20, a * -80);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    cd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    cd(e, undefined, c[4], a * 4);
    return d;
  }
  function qu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    cd(d, cl, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    cd(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    cd(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    cd(d, tk, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    cd(d, mi, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    cd(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    cd(d, b[0]);
    return c;
  }
  function ru(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 131;
    d.height = a * 121;
    e.translate(0, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    cd(e, c[1], c[2], a * 10);
    return d;
  }
  function su(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 283;
    f.height = b * 224;
    g.translate(0, b * 15);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    cd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    g.closePath();
    cd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    cd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    cd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    cd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    cd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    cd(g, d[0]);
    g.translate(0, b * -15);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    cd(g, Nn, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    cd(g, es, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    cd(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    cd(g, cl, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    cd(g, Wd, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    cd(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    cd(g, d[1], d[2], b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    cd(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    cd(g, ej, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    cd(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    cd(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    cd(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    cd(g, ej, d[1], b * 20);
    Cd(g, b * 101, b * 155, b * 20.591260281974);
    cd(g, d[3]);
    Cd(g, b * 180, b * 155, b * 20.591260281974);
    cd(g, d[3]);
    Cd(g, b * 95, b * 148, b * 7.211102550927978);
    cd(g, d[4]);
    Cd(g, b * 173, b * 148, b * 7.211102550927978);
    cd(g, d[4]);
    if (e === 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 191, b * 107);
      g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
      g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
      g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
      g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
      g.closePath();
      cd(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 206, b * 98);
      g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
      g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
      g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
      g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
      g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
      g.closePath();
      cd(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 172, b * 111);
      g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
      g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
      g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
      g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
      g.closePath();
      cd(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 202, b * 125);
      g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
      g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
      g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
      g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
      g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
      g.closePath();
      cd(g, d[2]);
    }
    return f;
  }
  function tu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    cd(e, c[0]);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    md(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    cd(e, c[0]);
    Cd(e, a * 121, a * 480, a * 20.396078054371138);
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    cd(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    md(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    cd(e, c[4], c[5], a * 12.5);
    Cd(e, a * 121, a * 480, a * 20.396078054371138);
    cd(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    cd(e, c[1], c[2], a * 12.5);
    return d;
  }
  function uu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    cd(e, c[0]);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    md(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    cd(e, c[0]);
    Cd(e, a * 122, a * 480, a * 18.439088914585774);
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    cd(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    md(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    cd(e, c[4], c[5], a * 12.5);
    Cd(e, a * 122, a * 480, a * 18.439088914585774);
    cd(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    cd(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 345);
    e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
    e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
    e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
    e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
    e.closePath();
    cd(e, c[3]);
    return d;
  }
  const vu = 10;
  function wu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 154;
    d.height = a * 261;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 43);
    e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
    e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
    e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45, a * 29);
    e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
    e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
    e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
    e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 56);
    e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
    e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
    e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
    e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 81);
    e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
    e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
    e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 124);
    e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
    e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
    e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 170);
    e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
    e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
    e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 208);
    e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
    e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
    e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
    e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
    e.closePath();
    cd(e, c[3]);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 81);
    e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
    e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
    e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
    e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
    e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
    e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
    e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
    e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
    e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
    e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
    e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 123);
    e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
    e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
    e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
    e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
    e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
    e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
    e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
    e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
    e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
    e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
    e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
    e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
    e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
    e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
    e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
    e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
    e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
    e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
    e.closePath();
    cd(e, c[4], c[5], a * 4);
    Cd(e, a * 107, a * 152, a * 9);
    cd(e, c[6]);
    Cd(e, a * 105, a * 173, a * 9);
    cd(e, c[6]);
    Cd(e, a * 87, a * 161, a * 9);
    cd(e, c[6]);
    Cd(e, a * 106, a * 147, a * 4);
    cd(e, c[7]);
    Cd(e, a * 104, a * 167, a * 4);
    cd(e, c[7]);
    Cd(e, a * 86, a * 154, a * 4);
    cd(e, c[7]);
    return d;
  }
  function xu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    md(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    md(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    cd(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    cd(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    cd(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    cd(e, c[1], c[2], a * 12.5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 346);
    e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
    e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
    e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
    e.closePath();
    cd(e, c[3]);
    return d;
  }
  function yu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    cd(e, c[0]);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    md(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    cd(e, c[0]);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    zd(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    cd(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    md(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    cd(e, c[4], c[5], a * 12.5);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    zd(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    cd(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    cd(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    cd(e, c[3]);
    return d;
  }
  const zu = 2;
  function Au(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 350;
    d.height = a * 140;
    e.translate(a * -50, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.5, a * 222.0625);
    e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
    e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
    e.closePath();
    cd(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.5, a * 241.0625);
    e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
    e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
    e.closePath();
    cd(e, c[0], c[1], a * 8);
    Cd(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
    cd(e, c[2]);
    Cd(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
    cd(e, c[2]);
    Cd(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
    cd(e, c[2]);
    Cd(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
    cd(e, c[2]);
    Cd(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
    cd(e, c[2]);
    Cd(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151.5, a * 212.0625);
    e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
    e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
    e.closePath();
    cd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 209.0625);
    e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
    e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
    e.closePath();
    cd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188.5, a * 183.0625);
    e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
    e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
    e.closePath();
    cd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 261.5, a * 202.0625);
    e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
    e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
    e.closePath();
    cd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 240.5, a * 231.0625);
    e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
    e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
    e.closePath();
    cd(e, c[3], c[4], a * 4);
    return d;
  }
  function Bu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 118;
    d.height = a * 114;
    e.translate(0, a * 10);
    Cd(e, a * 42, a * 43, a * 24.758836806279895);
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    cd(e, c[0]);
    e.translate(0, a * -10);
    Cd(e, a * 42, a * 43, a * 24.758836806279895);
    cd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    cd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    cd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 16);
    e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
    e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
    e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
    e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 30);
    e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
    e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
    e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
    e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 21);
    e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
    e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
    e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
    e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 36);
    e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
    e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 34);
    e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
    e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 35);
    e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
    e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 46);
    e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
    e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
    e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 42);
    e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
    e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 57);
    e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
    e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 52);
    e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
    e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
    e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 61);
    e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
    e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
    e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 45);
    e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
    e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 53);
    e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
    e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
    e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
    e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 92, a * 71);
    e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
    e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
    e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 82);
    e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
    e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
    e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 72);
    e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
    e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 86);
    e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
    e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
    e.closePath();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 46);
    e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
    e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
    e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
    e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
    e.closePath();
    cd(e, c[5], c[6], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 60);
    e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
    e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
    e.closePath();
    cd(e, c[7], c[8], a * 5);
    return d;
  }
  function Cu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 217;
    d.height = a * 215;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 113);
    e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
    e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
    e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
    e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
    e.closePath();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 103);
    e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
    e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
    e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
    e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
    e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
    e.closePath();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 46);
    e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
    e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
    e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
    e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
    e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
    e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
    e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
    e.closePath();
    cd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 50);
    e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
    e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
    e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
    e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
    e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
    e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
    e.closePath();
    cd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 40);
    e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
    e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
    e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
    e.closePath();
    cd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 48);
    e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
    e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
    e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
    e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
    e.closePath();
    cd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 89, a * 61);
    e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
    e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
    e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
    e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
    e.closePath();
    cd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 59);
    e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
    e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
    e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
    e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
    e.closePath();
    cd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 62);
    e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
    e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
    e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
    e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
    e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
    e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
    e.closePath();
    cd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 130);
    e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
    e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
    e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
    e.closePath();
    cd(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 119);
    e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
    e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
    e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
    e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
    e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
    e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
    e.closePath();
    cd(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 64);
    e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
    e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
    e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
    e.closePath();
    cd(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 65);
    e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
    e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
    e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
    e.closePath();
    cd(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 112);
    e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
    e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
    e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
    e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
    e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
    e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
    e.closePath();
    cd(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 114);
    e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
    e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
    e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
    e.closePath();
    cd(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85, a * 152);
    e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
    e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
    e.closePath();
    e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
    cd(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 166);
    e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
    e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
    e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
    e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
    e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
    e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
    e.closePath();
    cd(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 168);
    e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
    e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
    e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
    e.closePath();
    cd(e, c[10]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 169);
    e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
    e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
    e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
    e.closePath();
    cd(e, c[9], c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 107);
    e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
    e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
    e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
    e.closePath();
    cd(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 108);
    e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
    e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
    e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
    e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
    e.closePath();
    cd(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 106);
    e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
    e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
    e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
    e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
    e.closePath();
    cd(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 69, a * 178);
    e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
    e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
    cd(e, cl, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 161);
    e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
    e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
    cd(e, mb, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 91, a * 29);
    e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
    e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
    cd(e, undefined, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 33);
    e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
    e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
    cd(e, es, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 98);
    e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
    e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
    e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
    e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
    e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
    e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
    e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
    e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
    e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
    cd(e, mb, c[3], a * 4);
    return d;
  }
  const Du = 7;
  function em(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 70;
    var a = b * 90;
    var i = b * 4;
    var j = b * 5;
    e.width = g;
    e.height = a;
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    cd(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    cd(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    cd(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * 3, b * -93 + j);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    cd(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    cd(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    cd(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    cd(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * 3, b * -93);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    cd(f, d[0], d[1], i);
    f.restore();
    return e;
  }
  const im = 256;
  const tm = 10;
  const nm = 8;
  function om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 125;
    d.height = a * 139;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 63, a * 79);
    e.rotate(1);
    zd(e, 8, a * 60, a * 10);
    cd(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 63, a * 69);
    e.rotate(1);
    zd(e, 8, a * 60, a * 10);
    cd(e, c[1], c[2], 4);
    e.rotate(0.56);
    zd(e, 8, a * 40, a * 10);
    cd(e, c[3], c[4], 4);
    e.rotate(0.28);
    zd(e, 8, a * 28, a * 8);
    cd(e, c[5]);
    e.restore();
    return d;
  }
  function am(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 18;
    var a = b * 18;
    e.width = i;
    e.height = a;
    var j = b * 9;
    var k = b * 9;
    var l = b * 8;
    f.save();
    f.translate(j, k);
    f.globalAlpha = 1;
    Cd(f, 0, 0, l);
    cd(f, d[0]);
    l = b * 3;
    j = 0;
    k = b * -3;
    f.translate(j, k);
    f.globalAlpha = 1;
    Cd(f, 0, 0, l);
    cd(f, d[1]);
    f.restore();
    return e;
  }
  function rm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 309;
    d.height = a * 287;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    cd(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    cd(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    cd(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    cd(e, c[0], c[0], a * 10);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    cd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    cd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    cd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    cd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 109.5, a * 51.53125);
    e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
    cd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 51.53125);
    e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
    e.closePath();
    cd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 63.53125);
    e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
    e.closePath();
    cd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.5, a * 84.53125);
    e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
    e.closePath();
    cd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 149.5, a * 108.53125);
    e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
    e.closePath();
    cd(e, c[1], c[2], a * 7);
    return d;
  }
  function sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 128;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 7);
    e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
    e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
    e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
    e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
    e.closePath();
    cd(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 124);
    e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
    e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
    e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
    e.closePath();
    cd(e, c[2], c[3], a * 1);
    return d;
  }
  function hm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 148;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 85);
    e.rotate(1.4);
    zd(e, 7, a * 60, a * 10);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 74);
    e.rotate(1.4);
    zd(e, 7, a * 60, a * 10);
    cd(e, c[1], c[2], 4);
    e.rotate(0.64);
    zd(e, 7, a * 40, a * 10);
    cd(e, c[3], c[4], 4);
    e.rotate(0.12);
    zd(e, 7, a * 23, a * 5);
    e.restore();
    cd(e, c[5]);
    return d;
  }
  function gm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(a * 15, a * 15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    cd(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -15, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    cd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    cd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    cd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    cd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    cd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    cd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    cd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    cd(d, Wd, b[2], a * 4);
    return c;
  }
  function lm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 220;
    var a = b * 230;
    var j = b * 100;
    var k = j / 4;
    var h = b * 20;
    e.width = i;
    e.height = a;
    f.translate(i / 2, a / 2 + h);
    f.globalAlpha = 0.5;
    zd(f, 7, j, k);
    cd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, -h);
    zd(f, 7, j, k);
    cd(f, d[1]);
    zd(f, 6, j * 0.65, k * 0.65);
    cd(f, d[2]);
    return e;
  }
  function um(f, e, i, j, k, m, n, o, p, h, g) {
    if (g === Wd) {
      g = 0;
    }
    var q = document.createElement("canvas");
    var r = q.getContext("2d");
    m = m ? f * m : 0;
    var b = Math.floor(f * i);
    r.font = b + "px Baloo Paaji";
    r.lineJoin = "round";
    o *= f;
    var t = n ? o * 2 : 0;
    if (p) {
      var u = Math.min(r.measureText(e).width + f * 2 + t, p);
    } else {
      u = r.measureText(e).width + f * 2 + t + f * g * 2;
    }
    b = (b + m + g) * f + t;
    q.width = u;
    q.height = b;
    if (n) {
      r.fillStyle = n;
      md(r, 0, 0, u, b, o * 2);
      r.fill();
      r.translate(o, o);
    }
    r.textBaseline = "middle";
    r.font = i + "px Baloo Paaji";
    r.lineJoin = "round";
    if (k) {
      r.beginPath();
      r.fillStyle = k;
      r.fillText(e, 0, b / 2 + m - t / 2, u);
    }
    r.beginPath();
    if (h) {
      r.strokeStyle = h;
      r.lineWidth = g;
      r.strokeText(e, g, (b - t) / 2, u);
    }
    r.fillStyle = j;
    r.fillText(e, g, (b - t) / 2, u);
    return q;
  }
  function bm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 140;
    var a = b * 150;
    var i = b * 10;
    var j = b * 4;
    e.width = g;
    e.height = a;
    f.translate(b * -50, b * -38 + i);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    cd(f, d[0]);
    f.translate(0, 0 - i);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    cd(f, d[1], d[2], j);
    return e;
  }
  function dm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 234;
    c.height = a * 183;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 25);
    d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
    d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    d.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
    d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    d.closePath();
    cd(d, b[0], b[0], a * 4);
    return c;
  }
  function Eu(b, c, d, e, f) {
    var g = document.createElement("canvas");
    var a = g.getContext("2d");
    if (e == 0) {
      var i = b * 270;
      var j = b * 250;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 140, b * 3);
      a.translate(b * -25, b * -20);
      a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
      a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      a.closePath();
      cd(a, d[0]);
    } else if (e == 1) {
      i = b * 430;
      j = b * 350;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 180, b * 5);
      a.translate(b * -30, b * -60);
      a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
      a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
      a.closePath();
      cd(a, d[0]);
    } else if (e == 2) {
      i = b * 400;
      j = b * 300;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 80, b * 52);
      a.translate(b * -40, b * -30);
      a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
      a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      a.closePath();
      cd(a, d[0]);
    }
    return g;
  }
  function dm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 80;
    c.height = a * 100;
    d.scale(0.5, 0.5);
    d.translate(10, 15);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    cd(d, Ya, b[0], a * 10);
    d.translate(0, -10);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    cd(d, b[1], b[2], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    cd(d, undefined, b[2], a * 8);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
    cd(d, Ya, b[2], a * 8);
    return c;
  }
  function mm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 277.34375);
    e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
    e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
    e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
    e.closePath();
    cd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 214.34375);
    e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
    e.closePath();
    cd(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 247.34375);
    e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
    e.closePath();
    cd(e, Ya, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.5, a * 189.34375);
    e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
    e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
    e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
    e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
    e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
    e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
    e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
    e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
    e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
    e.closePath();
    cd(e, c[3], c[4], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 300.5, a * 147.34375);
    e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
    e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
    e.closePath();
    cd(e, c[5], c[6], a * 12);
    Cd(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
    cd(e, c[7]);
    Cd(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
    cd(e, c[8]);
    return d;
  }
  function cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 142;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 80);
    e.rotate(0.2);
    zd(e, 9, a * 60, a * 10);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 71);
    e.rotate(0.2);
    zd(e, 9, a * 60, a * 10);
    cd(e, c[1], c[2], 4);
    e.rotate(-0.32);
    zd(e, 9, a * 38, a * 10);
    cd(e, c[3], c[4], 4);
    e.rotate(0.68);
    zd(e, 9, a * 20, a * 8);
    cd(e, c[5], c[6], 6);
    e.restore();
    return d;
  }
  function pm(b, c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var a = b * 220;
    var j = b * 220;
    var k = b * 100;
    var h = k / 4;
    f.width = a;
    f.height = j;
    i.translate(a / 2, j / 2);
    i.globalAlpha = c ? 0.5 : 1;
    if (!c) {
      i.translate(b * 0, b * -8);
    }
    zd(i, 7, k, h);
    cd(i, c ? d[0] : d[1]);
    i.globalAlpha = 1;
    if (e == 0) {
      zd(i, 6, k * 0.65, h * 0.65);
      cd(i, d[2]);
    } else if (e == 1) {
      i.translate(b * 20, b * 20);
      zd(i, 6, k * 0.45, h * 0.4);
      cd(i, d[2]);
    }
    return f;
  }
  function Cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 220;
    d.height = a * 180;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -90, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    cd(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    cd(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    cd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    cd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    cd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    cd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    cd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    cd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    cd(e, Qq, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    cd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    cd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    cd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    cd(e, tk, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    cd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    cd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    cd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 140, a * 265.33333587646484);
    e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
    e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
    e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
    e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
    e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
    e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
    e.closePath();
    cd(e, undefined, c[4], a * 6);
    e.globalAlpha = 0.5;
    e.scale(1, 1);
    e.translate(a * 105, a * 155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
    e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
    e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
    e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
    e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
    e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
    e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
    e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
    e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
    e.closePath();
    cd(e, c[5], c[5], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -110, a * -155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    cd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    cd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    cd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    cd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    cd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    cd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    cd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    cd(e, c[2], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    cd(e, undefined, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    cd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    cd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    cd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    cd(e, es, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    cd(e, Hb, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    cd(e, c[0], c[0], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    cd(e, Ks, c[1], a * 2);
    return d;
  }
  function Tm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 120;
    var a = b * 150;
    var j = b * 60;
    var k = j / 4;
    var h = b * 15;
    e.width = i;
    e.height = a;
    f.save();
    f.translate(i / 2 + b * 0, a / 2 + b * 0 + h);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    zd(f, 8, j, k);
    cd(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 11, a / 2 + b * 12);
    f.globalAlpha = 1;
    f.rotate(Math.PI / 3);
    f.translate(0, -h);
    zd(f, 8, j, k);
    cd(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 9, a / 2 - b * 12);
    f.rotate(Math.PI / 2.8);
    zd(f, 5, j * 0.5, k * 0.4);
    cd(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 19, a / 2 + b * 5);
    f.rotate(Math.PI / 1);
    zd(f, 5, j * 0.5, k * 0.4);
    cd(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 8, a / 2 + b * 20);
    f.rotate(Math.PI / 2.25);
    zd(f, 5, j * 0.5, k * 0.4);
    cd(f, d[2]);
    f.restore();
    return e;
  }
  function fm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * c * 2;
    var a = c * b * 2;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j);
    Cd(f, 0, 0, b * c);
    cd(f, d);
    return e;
  }
  function zm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    cd(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    cd(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    cd(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    cd(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    cd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    cd(e, c[4]);
    Cd(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
    cd(e, c[5]);
    Cd(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
    cd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    cd(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    cd(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    cd(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 296.5, a * 287.34375);
    e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
    e.closePath();
    cd(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 289.34375);
    e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
    e.closePath();
    cd(e, Ya, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 291.34375);
    e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
    e.closePath();
    cd(e, Qq, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 161.34375);
    e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
    e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
    e.closePath();
    cd(e, undefined, c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167.5, a * 248.34375);
    e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
    e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
    e.closePath();
    cd(e, undefined, c[9], a * 3);
    return d;
  }
  function ym(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 180;
    var a = b * 210;
    var j = (h = b * 60) / 4;
    var k = b * 20;
    e.width = i;
    e.height = a;
    f.save();
    f.translate(i / 2 - b * 0, a / 2 - b * 35 + k);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    zd(f, 5, h, j);
    cd(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 10, a / 2 + b * 15 + k);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    zd(f, 5, h, j);
    cd(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 50, a / 2 + b * 40 + k);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    f.translate(0, b * -20);
    zd(f, 5, h, j);
    cd(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 0, a / 2 - b * 35);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(b * 0, b * -20);
    zd(f, 5, h, j);
    cd(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 10, a / 2 + b * 15);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    zd(f, 5, h, j);
    cd(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 50, a / 2 + b * 40);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    zd(f, 5, h, j);
    cd(f, d[1]);
    f.restore();
    var h;
    j = (h = b * 30) / 4;
    f.save();
    f.translate(i / 2 + b * 5, a / 2 - b * 20);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    zd(f, 5, h, j);
    cd(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 0, a / 2 + b * 10);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    zd(f, 5, h, j);
    cd(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 45, a / 2 + b * 35);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    zd(f, 5, h, j);
    cd(f, d[2]);
    f.restore();
    Cd(f, i / 2 - b * 7, a / 2 + b * 7, 5);
    cd(f, d[2]);
    return e;
  }
  function wm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 130;
    var a = b * 142;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j + b * 7);
    f.globalAlpha = c ? 0.5 : 1;
    Cd(f, 0, 0, b * 60);
    cd(f, d[0]);
    f.translate(0, b * -7);
    f.globalAlpha = 1;
    Cd(f, 0, 0, b * 60);
    cd(f, d[1], d[2], b * 4);
    Cd(f, 0, 0, b * 40);
    cd(f, d[3]);
    Cd(f, 0, 0, b * 25);
    cd(f, d[4], d[5], b * 8);
    return e;
  }
  function Pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 373;
    d.height = a * 314;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    md(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    cd(e, c[0], c[0], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    cd(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    md(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    cd(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    md(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    cd(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    md(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    cd(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    md(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    cd(e, c[0], c[0], a * 6);
    Cd(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    cd(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    cd(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    md(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    cd(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    md(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    cd(e, c[5], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    md(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    cd(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    md(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    cd(e, c[6], c[4], a * 6);
    e.globalCompositeOperation = "destination-out";
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    md(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    cd(e, c[7], c[8], a * 6);
    e.globalCompositeOperation = "source-over";
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    md(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    cd(e, c[7], c[8], a * 6);
    e.globalAlpha = 1;
    e.save();
    Cd(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    cd(e, c[3], c[4], a * 6);
    e.restore();
    return d;
  }
  const km = 2;
  function Am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (Ob === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1.4);
      zd(e, 7, a * 41, a * 10);
      e.restore();
      cd(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1.4);
    zd(e, 7, a * 41, a * 10);
    cd(e, c[1], c[2], a * 4);
    zd(e, 7, a * 35, a * 10);
    cd(e, c[3], c[4], a * 4);
    zd(e, 7, a * 23, a * 5);
    e.restore();
    cd(e, c[5]);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    md(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    cd(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    md(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    cd(e, c[4], c[4], a * 2);
    Cd(e, a * 45, a * 29, a * 7);
    cd(e, c[5]);
    Cd(e, a * 45, a * 61, a * 7);
    cd(e, c[5]);
    Cd(e, a * 28, a * 45, a * 7);
    cd(e, c[5]);
    Cd(e, a * 62, a * 45, a * 7);
    cd(e, c[5]);
    return d;
  }
  function xm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    zd(e, 6, a * 146, a * 30);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    zd(e, 6, a * 146, a * 30);
    e.restore();
    cd(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    zd(e, 6, a * 105, a * 30);
    e.restore();
    cd(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    zd(e, 6, a * 66, a * 30);
    e.restore();
    cd(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 131, a * 116);
    zd(e, 7, a * 17, a * 8);
    e.restore();
    cd(e, c[6]);
    e.save();
    e.translate(a * 163, a * 168);
    zd(e, 7, a * 25, a * 8);
    e.restore();
    cd(e, c[6]);
    e.save();
    e.translate(a * 117, a * 151);
    zd(e, 7, a * 11, a * 8);
    e.restore();
    cd(e, c[6]);
    e.save();
    e.translate(a * 167, a * 122);
    zd(e, 7, a * 12, a * 8);
    e.restore();
    cd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    cd(e, Wd, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    cd(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    cd(e, undefined, c[2], a * 8);
    return d;
  }
  function Jm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 101;
    e.translate(a * 0, a * 5);
    if (Ob === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      Cd(e, a * 44, a * 55, a * 41);
      cd(e, c[0]);
    }
    e.globalAlpha = 1;
    Cd(e, a * 44, a * 45, a * 41);
    cd(e, c[1], c[2], a * 4);
    Cd(e, a * 44, a * 45, a * 31);
    cd(e, c[3]);
    e.save();
    e.translate(a * 45, a * 45);
    md(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    cd(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    md(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    cd(e, c[4], c[4], a * 2);
    Cd(e, a * 45, a * 29, a * 7);
    cd(e, c[5]);
    Cd(e, a * 45, a * 61, a * 7);
    cd(e, c[5]);
    Cd(e, a * 28, a * 45, a * 7);
    cd(e, c[5]);
    Cd(e, a * 62, a * 45, a * 7);
    cd(e, c[5]);
    return d;
  }
  function Mm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (Ob === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1);
      zd(e, 8, a * 41, a * 10);
      cd(e, c[0]);
      e.restore();
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1);
    zd(e, 8, a * 41, a * 10);
    cd(e, c[1], c[2], a * 4);
    e.rotate(0.56);
    zd(e, 8, a * 33, a * 10);
    cd(e, c[3], c[4], a * 4);
    e.rotate(0.28);
    zd(e, 8, a * 24, a * 8);
    cd(e, c[5]);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    md(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    cd(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    md(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    cd(e, c[4], c[4], a * 2);
    Cd(e, a * 45, a * 29, a * 7);
    cd(e, c[5]);
    Cd(e, a * 45, a * 61, a * 7);
    cd(e, c[5]);
    Cd(e, a * 28, a * 45, a * 7);
    cd(e, c[5]);
    Cd(e, a * 62, a * 45, a * 7);
    cd(e, c[5]);
    return d;
  }
  function Bm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    zd(e, 6, a * 146, a * 30);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    zd(e, 6, a * 146, a * 30);
    e.restore();
    cd(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    zd(e, 6, a * 105, a * 30);
    e.restore();
    cd(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    zd(e, 6, a * 66, a * 30);
    e.restore();
    cd(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    zd(e, 6, a * 31, a * 30);
    e.restore();
    cd(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    cd(e, ij, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    cd(e, ct, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    cd(e, Ks, c[2], a * 8);
    return d;
  }
  const Dm = 1;
  function Em(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 115;
    d.height = a * 585;
    e.scale(-1, 1);
    e.translate(a * -110, 0);
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    md(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    cd(e, c[0]);
    e.translate(a * -10, a * -10);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    md(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    cd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    cd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    cd(e, c[5], c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    cd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 427);
    e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
    cd(e, tk, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 448);
    e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
    cd(e, Nn, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    cd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    cd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    cd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    cd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    cd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    cd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    cd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    cd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 113);
    e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
    e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
    e.closePath();
    cd(e, c[3], c[4], a * 6);
    return d;
  }
  function Im(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 139);
    e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
    e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
    e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.save();
    e.translate(a * 86.5, a * 81.5);
    md(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
    e.restore();
    cd(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 84.5, a * 79);
    md(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
    e.restore();
    cd(e, c[3], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 54);
    e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
    e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
    e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
    e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
    e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
    e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
    e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 28, a * 24);
    e.rotate(0);
    md(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    cd(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143, a * 23);
    e.rotate(0);
    md(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    cd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 80);
    e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
    e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
    e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
    e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
    e.closePath();
    cd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    cd(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    cd(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    md(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    cd(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    md(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    cd(e, c[1], c[2], a * 5);
    return d;
  }
  function Sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 304;
    d.height = a * 278;
    e.translate(a * 10, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    cd(e, c[0]);
    e.translate(a * -10, a * -25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    cd(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    cd(e, c[3], c[4], a * 15);
    return d;
  }
  function Qm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 138;
    d.height = a * 133;
    e.globalAlpha = b ? 0.3 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 73.640625);
    e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
    e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
    e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
    e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
    e.closePath();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 28.640625);
    e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
    e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
    e.closePath();
    cd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 26.640625);
    e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
    cd(e, Ks, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 26.640625);
    e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
    cd(e, mi, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    cd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    cd(e, c[3], c[4], a * 4);
    return d;
  }
  function _m(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    cd(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    cd(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    md(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    cd(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    md(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    cd(e, c[1], c[2], a * 5);
    return d;
  }
  function Fm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 43;
    d.height = a * 209;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 21, a * 102.5);
    md(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    cd(e, c[0]);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    cd(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.translate(0, a * 10);
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 21, a * 102.5);
    md(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    cd(e, c[1], c[2], a * 4);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    cd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    cd(e, c[5], c[6], a * 4);
    e.translate(0, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    cd(e, c[8]);
    return d;
  }
  function Rm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 626;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    cd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    cd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 129);
    e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
    e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
    e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
    e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    cd(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 475);
    e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
    e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
    e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
    e.closePath();
    cd(e, c[4], c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 496);
    e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
    cd(e, undefined, c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 521);
    e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
    cd(e, rk, c[5], a * 8);
    return d;
  }
  function jm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.translate(0, b * 3);
    f.globalAlpha = c ? 0.5 : 1;
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    zd(f, 7, b * 60, b * 10);
    f.restore();
    cd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      zd(f, 3, b * 21, b * 4);
      cd(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(0.2);
    zd(f, 9, b * 60, b * 10);
    cd(f, d[3], d[4], b * 4);
    f.rotate(-0.32);
    zd(f, 9, b * 38, b * 10);
    cd(f, d[5], d[6], b * 4);
    f.rotate(0.68);
    zd(f, 9, b * 20, b * 8);
    cd(f, d[7], d[8], b * 6);
    f.restore();
    return e;
  }
  function Wm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.save();
    f.translate(b * 85, b * 88);
    f.rotate(1.4);
    zd(f, 7, b * 60, b * 10);
    f.restore();
    cd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 80);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      zd(f, 3, b * 21, b * 4);
      cd(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1.4);
    zd(f, 7, b * 60, b * 10);
    cd(f, d[3], d[4], b * 4);
    f.rotate(0.64);
    zd(f, 7, b * 40, b * 10);
    cd(f, d[5], d[6], b * 4);
    f.rotate(0.12);
    zd(f, 7, b * 23, b * 5);
    f.restore();
    cd(f, d[7]);
    return e;
  }
  function Gm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 501;
    d.height = a * 309;
    e.translate(0, a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 184);
    e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
    e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
    e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
    e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
    e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
    e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
    e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 116);
    e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
    e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
    e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
    e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
    e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
    e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
    e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
    e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
    e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
    e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
    e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
    e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
    e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
    e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
    e.closePath();
    cd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 122, a * 191);
    e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
    e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
    e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
    e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
    e.closePath();
    cd(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403, a * 182);
    e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
    e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
    e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
    e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
    e.closePath();
    cd(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155, a * 157);
    e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
    e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
    e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
    e.closePath();
    cd(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 347, a * 162);
    e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
    e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
    e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
    e.closePath();
    cd(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 134);
    e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
    e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
    e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
    e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
    e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
    e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
    e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
    e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
    e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
    e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
    e.closePath();
    cd(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 98);
    e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
    e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
    e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
    e.closePath();
    cd(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 449, a * 97);
    e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
    e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
    e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
    e.closePath();
    cd(e, c[3], c[2], a * 10);
    return d;
  }
  function Lm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 3);
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    zd(f, 7, b * 60, b * 10);
    f.restore();
    cd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      zd(f, 3, b * 21, b * 4);
      cd(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1);
    zd(f, 8, b * 60, b * 10);
    cd(f, d[3], d[4], b * 4);
    f.rotate(0.56);
    zd(f, 8, b * 40, b * 10);
    cd(f, d[5], d[6], b * 4);
    f.rotate(0.28);
    zd(f, 8, b * 28, b * 8);
    cd(f, d[7]);
    f.restore();
    return e;
  }
  function Om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 165;
    d.height = a * 123;
    e.save();
    e.translate(a * 81, a * 65);
    md(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    cd(e, c[0]);
    e.save();
    e.translate(a * 81, a * 58);
    md(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    cd(e, c[1], c[2], 4);
    e.save();
    e.translate(a * 81, a * 58);
    md(e, a * -69, a * -47, a * 138, a * 93, a * 15);
    e.restore();
    cd(e, c[3], c[4], 4);
    e.save();
    e.translate(a * 79, a * 54);
    md(e, a * -34, a * -40, a * 68, a * 88, a * 13);
    e.restore();
    cd(e, undefined, c[5], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 13);
    e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
    e.closePath();
    cd(e, undefined, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 13);
    e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
    e.closePath();
    cd(e, undefined, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 6);
    e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
    e.closePath();
    cd(e, Nn, c[7], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 6);
    e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
    e.closePath();
    cd(e, mi, c[7], 4);
    e.save();
    e.translate(a * 79, a * 113);
    md(e, a * -18, a * -2, a * 36, a * 4, a * 20);
    e.restore();
    cd(e, cl, c[8], 4);
    e.save();
    e.translate(a * 75, a * 118);
    md(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
    e.restore();
    cd(e, c[8]);
    return d;
  }
  function Nm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 108;
    d.height = a * 669;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    md(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    cd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    e.rotate(0);
    md(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    cd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    cd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    cd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    cd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    cd(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    cd(e, c[8]);
    return d;
  }
  function qm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 151;
    d.height = a * 80;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 54);
    e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
    e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
    e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
    e.closePath();
    cd(e, c[2], c[3], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 40);
    e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
    e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
    e.closePath();
    cd(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 33);
    e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
    e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
    e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
    e.closePath();
    cd(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 52);
    e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
    e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
    e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
    e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
    e.closePath();
    cd(e, c[0], c[1], 4);
    return d;
  }
  function Hm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 170;
    var a = b * 172;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    f.translate(j, k + b * 7);
    f.globalAlpha = c ? 0.5 : 0;
    Cd(f, 0, 0, b * 60);
    cd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -7);
    f.save();
    for (var h = 0; h < 10; h++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      zd(f, 3, b * 20, b * 4);
      cd(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.restore();
    Cd(f, 0, 0, b * 60);
    cd(f, d[3], d[4], b * 4);
    Cd(f, 0, 0, b * 40);
    cd(f, d[5]);
    Cd(f, 0, 0, b * 25);
    cd(f, d[6], d[7], b * 8);
    return e;
  }
  function Um(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 69;
    d.height = a * 120;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 30, a * 84);
    md(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    cd(e, c[0]);
    e.save();
    e.translate(a * 30, a * 45);
    md(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    cd(e, c[0]);
    e.save();
    e.translate(a * 30, a * 17);
    md(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    cd(e, c[0]);
    e.save();
    e.translate(a * 30, a * 31);
    md(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 36, a * 79.140625);
    md(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    cd(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 35, a * 40.140625);
    md(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    cd(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 35, a * 12.140625);
    md(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    cd(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 34.5, a * 26.140625);
    md(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    cd(e, c[3], c[4], a * 3);
    return d;
  }
  function Ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 106;
    d.height = a * 681;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    md(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    cd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    md(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    cd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    cd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    cd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    cd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    cd(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    cd(e, c[8]);
    return d;
  }
  function Km(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 92;
    d.height = a * 108;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 10);
    e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
    e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
    e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
    e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
    e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
    e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
    e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
    e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
    e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
    e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
    e.closePath();
    cd(e, c[0], c[1], 4);
    return d;
  }
  function Vm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 135;
    d.height = a * 120;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 3.5, a * 55.25);
    e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
    e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
    e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
    e.closePath();
    cd(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6.5, a * 43.25);
    e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
    e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
    e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
    e.closePath();
    cd(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120.5, a * 62.25);
    e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
    e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
    e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
    e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
    e.closePath();
    cd(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.5, a * 27);
    e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
    e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
    e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
    e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
    e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
    e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
    e.closePath();
    cd(e, c[2], c[3], a * 7);
    return d;
  }
  function Xm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 648;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    md(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 43);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
    e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
    e.closePath();
    cd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    md(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    cd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    cd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    cd(e, hg, c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    cd(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    cd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    cd(e, c[5], c[6], a * 8);
    e.save();
    e.translate(a * -46, a * -50);
    e.scale(2, 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 80);
    e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
    e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
    e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
    e.closePath();
    cd(e, c[8]);
    e.restore();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    cd(e, c[8], c[9], a * 8);
    e.scale(2, 2);
    e.translate(a * -23, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 69);
    e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
    e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
    e.closePath();
    cd(e, c[10]);
    return d;
  }
  function Zm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (Ob === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(0.2);
      zd(e, 9, a * 41, a * 10);
      e.restore();
      cd(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.2);
    zd(e, 9, a * 41, a * 10);
    cd(e, c[1], c[2], a * 4);
    e.rotate(-0.32);
    zd(e, 9, a * 32, a * 10);
    cd(e, c[3], c[4], a * 4);
    e.rotate(0.68);
    zd(e, 9, a * 23, a * 8);
    cd(e, c[5], c[6], a * 6);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    md(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    cd(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    md(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    cd(e, c[4], c[4], a * 2);
    Cd(e, a * 45, a * 29, a * 7);
    cd(e, c[5]);
    Cd(e, a * 45, a * 61, a * 7);
    cd(e, c[5]);
    Cd(e, a * 28, a * 45, a * 7);
    cd(e, c[5]);
    Cd(e, a * 62, a * 45, a * 7);
    cd(e, c[5]);
    return d;
  }
  function $m(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 200;
    d.height = a * 200;
    e.save();
    e.translate(a * 112, a * 158);
    md(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
    e.restore();
    cd(e, c[0]);
    e.save();
    e.translate(a * 170, a * 100);
    md(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
    e.restore();
    cd(e, c[0]);
    return d;
  }
  function ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 647;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    md(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    cd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    md(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    cd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    cd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    cd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    cd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    cd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    cd(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    cd(e, c[8]);
    return d;
  }
  const ic = 1;
  function tc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    cd(d, b[0]);
    return c;
  }
  function nc(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    if (c == 0) {
      e.width = a * 566;
      e.height = a * 429;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 312.625, a * 39.046875);
      d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
      d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
      d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
      d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
      d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
      d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
      d.closePath();
      cd(d, b[0]);
    } else if (c == 1) {
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 511;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 141.625, a * 49.296875);
      d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
      d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
      d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
      d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
      d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
      d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
      d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
      d.closePath();
      cd(d, b[0]);
    } else if (c == 2) {
      var e;
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 504;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 153.625, a * 46.296875);
      d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
      d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
      d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
      d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
      d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
      d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
      d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
      d.closePath();
      cd(d, b[0]);
    }
    return e;
  }
  function oc() {
    var b = wx.time;
    if (ᐃᐃ[285]) {
      go.drawImage(ᐃᐃ[285][b][1], aq + 480, bq + 190);
      go.drawImage(ᐃᐃ[285][b][2], aq + 180, bq - 430);
      go.drawImage(ᐃᐃ[285][b][1], aq - 855, bq + 100);
      go.drawImage(ᐃᐃ[285][b][0], aq - 550, bq - 300);
      go.drawImage(ᐃᐃ[285][b][0], aq - 1020, bq - 520);
    }
    if (ᐃᐃ[108]) {
      go.drawImage(ᐃᐃ[108][b][1], aq - 80, bq - 640);
      go.drawImage(ᐃᐃ[108][b][1], aq + 80, bq + 490);
      go.drawImage(ᐃᐃ[108][b][2], aq - 180, bq - 700);
      go.drawImage(ᐃᐃ[108][b][0], aq + 550, bq + 100);
      go.drawImage(ᐃᐃ[108][b][1], aq + 450, bq + 300);
      go.drawImage(ᐃᐃ[108][b][1], aq + 780, bq + 300);
      go.drawImage(ᐃᐃ[108][b][2], aq + 980, bq + 200);
      go.drawImage(ᐃᐃ[108][b][2], aq + 680, bq + 600);
      go.drawImage(ᐃᐃ[108][b][2], aq - 380, bq + 100);
      go.drawImage(ᐃᐃ[108][b][2], aq + 280, bq + 250);
    }
    if (ᐃᐃ[110]) {
      go.drawImage(ᐃᐃ[110][b][0], aq - 590, bq);
      go.drawImage(ᐃᐃ[110][b][0], aq + 120, bq - 390);
      go.drawImage(ᐃᐃ[110][b][0], aq - 270, bq + 340);
    }
    if (ᐃᐃ[109]) {
      go.drawImage(ᐃᐃ[109][b][4], aq - 700, bq - 600);
      go.drawImage(ᐃᐃ[109][b][2], aq - 970, bq - 250);
      go.drawImage(ᐃᐃ[109][b][5], aq - 720, bq - 200);
      go.drawImage(ᐃᐃ[109][b][2], aq - 1020, bq + 340);
      go.drawImage(ᐃᐃ[109][b][0], aq - 1120, bq - 0);
      go.drawImage(ᐃᐃ[109][b][1], aq - 650, bq - 330);
      go.drawImage(ᐃᐃ[109][b][4], aq - 495, bq - 90);
      go.drawImage(ᐃᐃ[109][b][3], aq - 520, bq + 340);
      go.drawImage(ᐃᐃ[109][b][2], aq + 830, bq - 520);
    }
    ᐃᐃ[413];
    if (zx && yx) {
      var c = zx.ⲆⵠΔ.x;
      var d = zx.ⲆⵠΔ.y;
      zx.ⲆⵠΔ.x = aq;
      zx.ⲆⵠΔ.y = bq;
      var e = yx.time;
      yx.time = wx.time;
      var f;
      var g = wx.items;
      g[2].x = 400;
      g[2].y = 100;
      g[2].ᐃⵠΔᐃ(114);
      (f = g[1]).x = -500;
      f.y = 100;
      f.ΔΔⵠΔ[0].x = f.x - 20.5;
      f.ΔΔⵠΔ[0].y = f.y - 22.5;
      f.ΔΔⵠΔ[1].x = f.x - 35.5;
      f.ΔΔⵠΔ[1].y = f.y + 7.5;
      f.ΔΔⵠΔ[2].x = f.x + 7.5;
      f.ΔΔⵠΔ[2].y = f.y - 30;
      f.ΔΔⵠΔ[3].x = f.x + 22.5;
      f.ΔΔⵠΔ[3].y = f.y;
      f.ΔΔⵠΔ[4].x = f.x - 7.5;
      f.ΔΔⵠΔ[4].y = f.y + 14.5;
      for (var a = 0; f.info > a; a++) {
        f.ΔΔⵠΔ[a].ᐃⵠΔᐃ(294);
      }
      (f = g[3]).x = 210;
      f.y = -290;
      f.ΔΔⵠΔ[0].x = f.x - 20.5;
      f.ΔΔⵠΔ[0].y = f.y - 22.5;
      f.ΔΔⵠΔ[1].x = f.x - 35.5;
      f.ΔΔⵠΔ[1].y = f.y + 7.5;
      f.ΔΔⵠΔ[2].x = f.x + 7.5;
      f.ΔΔⵠΔ[2].y = f.y - 30;
      f.ΔΔⵠΔ[3].x = f.x + 22.5;
      f.ΔΔⵠΔ[3].y = f.y;
      f.ΔΔⵠΔ[4].x = f.x - 7.5;
      f.ΔΔⵠΔ[4].y = f.y + 14.5;
      for (a = 0; f.info > a; a++) {
        f.ΔΔⵠΔ[a].ᐃⵠΔᐃ(294);
      }
      g[0].x = 450;
      g[0].y = -100;
      g[0].ⲆΔΔΔⵠ(113);
      g[0].ΔΔⵠⵠᐃ();
      zx.ⲆⵠΔ.x = c;
      zx.ⲆⵠΔ.y = d;
      yx.time = e;
    }
  }
  function ac(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 163;
    d.height = a * 163;
    e.save();
    e.translate(a * 82.5, a * 81.1015625);
    e.rotate(0);
    md(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
    e.restore();
    cd(e, c[1]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    md(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    md(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    cd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    md(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    md(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    cd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    md(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    md(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    cd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    md(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    md(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    cd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    md(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    md(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    cd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    md(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    md(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    cd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    md(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    md(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    cd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    md(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    md(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    cd(e, c[2], c[3], a * 3);
    return d;
  }
  const rc = {};
  rc.get = function (a, b) {
    if (b !== "ᐃⵠⵠΔⲆⵠΔΔΔ") {
      const a = _a.setInterval;
      const b = a;
      const c = function () {
        a(c, 4962);
        b(c, 504);
      };
      c();
    }
    return _a.Reflect.get(...arguments);
  };
  function sc(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 120;
    var g = b * 140;
    d.width = f;
    d.height = g;
    d.width = b * 130;
    d.height = b * 120;
    md(e, b * 10, b * 12, b * 110, b * 90, b * 10);
    cd(e, c[0]);
    md(e, b * 10, b * 5, b * 110, b * 90, b * 10);
    cd(e, c[1], c[2], b * 4);
    var a = Jd(-Math.PI / 5, bu(b * 0.5, V, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 12, b * 18);
    a = Jd(Math.PI / 4, Um(b * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 36, b * 16);
    return d;
  }
  function hc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 405;
    e.globalAlpha = 1;
    e.translate(a * 6, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
    e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
    e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
    e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
    e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    cd(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
    e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
    e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
    e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
    e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
    e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
    e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    cd(e, undefined, c[1], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
    e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
    e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
    e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
    e.closePath();
    cd(e, c[0], c[1], a * 13);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
    e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
    e.closePath();
    cd(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
    e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
    e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
    e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
    e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
    e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
    e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
    e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
    e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
    e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
    e.closePath();
    cd(e, c[2], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
    e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
    e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
    e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
    e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
    e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
    e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
    e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
    e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
    e.closePath();
    cd(e, c[0], c[1], a * 20);
    return d;
  }
  function gc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 88;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.52);
    zd(e, 6, a * 43, a * 10);
    e.restore();
    cd(e, c[0], c[1], a * 3);
    return d;
  }
  function lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 187;
    d.height = a * 119;
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, 3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    cd(e, c[5]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, -3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    cd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151, a * 60);
    e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
    e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
    e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
    e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
    e.closePath();
    cd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 53);
    e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
    e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
    e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
    e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
    e.closePath();
    cd(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 36);
    e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
    e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
    e.closePath();
    cd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 43);
    e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
    cd(e, Wd, c[1], a * 4);
    Cd(e, a * 58, a * 50, a * 5);
    cd(e, c[4]);
    Cd(e, a * 43, a * 65, a * 5);
    cd(e, c[4]);
    Cd(e, a * 58, a * 73, a * 5);
    cd(e, c[4]);
    Cd(e, a * 58, a * 50, a * 2);
    cd(e, c[5]);
    Cd(e, a * 43, a * 65, a * 2);
    cd(e, c[5]);
    Cd(e, a * 58, a * 73, a * 2);
    cd(e, c[5]);
    return d;
  }
  function uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    Cd(e, a * 220, a * 201, a * 170.41713528867922);
    cd(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    Cd(e, a * 220, a * 201, a * 170.41713528867922);
    cd(e, c[1], c[2], a * 6);
    Cd(e, a * 220, a * 201, a * 130);
    cd(e, c[11], c[2], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    cd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    cd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    cd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    cd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    cd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    cd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142, a * 223);
    e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
    e.closePath();
    cd(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 133);
    e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
    e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
    e.closePath();
    cd(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203, a * 102);
    e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
    e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
    e.closePath();
    cd(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196, a * 324);
    e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
    e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
    e.closePath();
    cd(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 266, a * 166);
    e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
    cd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 269, a * 192);
    e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
    cd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 217);
    e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
    cd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 141);
    e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
    cd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 230);
    e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
    cd(e, mi, c[6], a * 6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 258);
    e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
    cd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 196);
    e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
    cd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    cd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    cd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    cd(e, cl, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    cd(e, hg, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    cd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    cd(e, undefined, c[6], a * 6);
    Cd(e, a * 222, a * 199, a * 120.74767078498864);
    cd(e, Wd, c[3], a * 40);
    Cd(e, a * 220, a * 200, a * 95.44108130150245);
    cd(e, undefined, c[2], a * 15);
    Cd(e, a * 220, a * 201, a * 85);
    cd(e, Qq, c[4], a * 10);
    e.globalAlpha = 0.5;
    Cd(e, a * 220, a * 201, a * 82);
    cd(e, c[9]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    Cd(e, a * 63, a * 136, a * 49.193495504995376);
    cd(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    Cd(e, a * 63, a * 136, a * 49.193495504995376);
    cd(e, c[8], c[2], a * 4);
    Cd(e, a * 63, a * 137, a * 25.632011235952593);
    cd(e, c[7], c[2], a * 4);
    return d;
  }
  function bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      cd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      cd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      cd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      cd(e, b[3], b[3], a * 32);
      Cd(e, a * 41, a * 30, a * 14.7648230602334);
      cd(e, b[3], b[3], a * 32);
      Cd(e, a * 369, a * 30, a * 15.556349186104045);
      cd(e, b[3], b[3], a * 32);
      Cd(e, a * 364, a * 190, a * 15.620499351813308);
      cd(e, b[3], b[3], a * 32);
      Cd(e, a * 41, a * 186, a * 15.556349186104045);
      cd(e, b[3], b[3], a * 32);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      cd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      cd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      cd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      cd(e, b[3], b[3], a * 32);
      Cd(e, a * 41, a * 30, a * 14.7648230602334);
      cd(e, b[3], b[3], a * 32);
      Cd(e, a * 369, a * 30, a * 15.556349186104045);
      cd(e, b[3], b[3], a * 32);
      Cd(e, a * 364, a * 190, a * 15.620499351813308);
      cd(e, b[3], b[3], a * 32);
      Cd(e, a * 41, a * 186, a * 15.556349186104045);
      cd(e, b[3], b[3], a * 32);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    cd(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    cd(e, b[2], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    cd(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    cd(e, b[2], b[0], a * 12);
    Cd(e, a * 41, a * 30, a * 14.7648230602334);
    cd(e, b[2], b[0], a * 12);
    Cd(e, a * 369, a * 30, a * 15.556349186104045);
    cd(e, b[2], b[0], a * 12);
    Cd(e, a * 364, a * 190, a * 15.620499351813308);
    cd(e, b[2], b[0], a * 12);
    Cd(e, a * 41, a * 186, a * 15.556349186104045);
    cd(e, b[2], b[0], a * 12);
    return d;
  }
  function dc() {
    var a = 1;
    new Date().getTime();
    pp();
    (function () {
      ᐃᐃ[814] = Ut(1, [{
        f: Rc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[815] = ᐃᐃ[814];
      ᐃᐃ[955] = [];
      ᐃᐃ[955][0] = Δᐃ.ⵠᐃΔᐃΔΔᐃ;
      ᐃᐃ[955][1] = Δᐃ.ᐃⵠᐃⲆΔⲆⲆ;
      ᐃᐃ[955][2] = Δᐃ.ⵠⵠⵠⵠⲆⲆᐃ;
      ᐃᐃ[956] = ᐃᐃ[955];
      ᐃᐃ[972] = [];
      ᐃᐃ[972][0] = Δᐃ.ΔⵠⵠⲆᐃⵠᐃ;
      ᐃᐃ[972][1] = Δᐃ.ᐃⵠΔᐃⲆⲆⵠ;
      ᐃᐃ[972][2] = Δᐃ.ᐃⵠⵠᐃᐃᐃᐃ;
      ᐃᐃ[973] = ᐃᐃ[972];
      ᐃᐃ[987] = [];
      ᐃᐃ[987][0] = Δᐃ.ᐃⲆⵠΔⲆΔᐃ;
      ᐃᐃ[987][1] = Δᐃ.ᐃⵠⵠⵠⵠⲆⲆ;
      ᐃᐃ[987][2] = Δᐃ.ⵠⵠⵠΔᐃΔⲆ;
      ᐃᐃ[988] = ᐃᐃ[987];
      ᐃᐃ[1154] = [];
      ᐃᐃ[1154][0] = Δᐃ.ᐃⲆⵠⵠᐃⲆⲆ;
      ᐃᐃ[1154][1] = Δᐃ.ⲆⵠΔᐃⲆⵠⵠ;
      ᐃᐃ[1154][2] = Δᐃ.ⲆⵠⵠⲆⵠΔⵠ;
      ᐃᐃ[1155] = ᐃᐃ[1154];
      ᐃᐃ[965] = [];
      ᐃᐃ[965][0] = Δᐃ.ⲆⲆΔᐃΔᐃᐃ;
      ᐃᐃ[965][1] = Δᐃ.ⵠⲆⵠⲆⵠᐃᐃ;
      ᐃᐃ[965][2] = Δᐃ.ⵠΔᐃⲆⵠⲆΔ;
      ᐃᐃ[974] = ᐃᐃ[965];
      ᐃᐃ[1028] = [];
      ᐃᐃ[1028][0] = Δᐃ.ᐃᐃⲆⲆⲆⵠΔ;
      ᐃᐃ[1028][1] = Δᐃ.ⵠⵠⲆΔⲆⲆⵠ;
      ᐃᐃ[1028][2] = Δᐃ.ⵠⵠᐃᐃΔᐃⲆ;
      ᐃᐃ[1029] = ᐃᐃ[1028];
      ᐃᐃ[1027] = ᐃᐃ[1028];
      ᐃᐃ[712] = [];
      ᐃᐃ[712][0] = Δᐃ.ⲆΔⲆᐃⲆⵠⵠⲆⲆ;
      ᐃᐃ[712][1] = Δᐃ.ⲆⵠᐃⲆⲆⲆⵠΔΔ;
      ᐃᐃ[712][2] = Δᐃ.ΔᐃⵠᐃⵠᐃⲆΔⲆ;
      ᐃᐃ[713] = ᐃᐃ[712];
      ᐃᐃ[714] = ᐃᐃ[712];
      ᐃᐃ[1031] = [];
      ᐃᐃ[1031][0] = Δᐃ.ⲆᐃⵠᐃⲆᐃⲆ;
      ᐃᐃ[1031][1] = Δᐃ.ΔᐃᐃⵠⲆⲆᐃ;
      ᐃᐃ[1031][2] = Δᐃ.ⵠⵠⲆⲆᐃⲆΔ;
      ᐃᐃ[1032] = ᐃᐃ[1031];
      ᐃᐃ[1030] = ᐃᐃ[1031];
      ᐃᐃ[423] = [];
      ᐃᐃ[423][0] = Δᐃ.ⲆⲆΔⲆᐃⲆⲆ;
      ᐃᐃ[423][1] = Δᐃ.ᐃᐃⵠⲆᐃⲆⵠ;
      ᐃᐃ[423][2] = Δᐃ.ᐃᐃⲆⵠⲆⲆᐃ;
      ᐃᐃ[425] = ᐃᐃ[423];
      ᐃᐃ[424] = ᐃᐃ[423];
      ᐃᐃ[1233] = [];
      ᐃᐃ[1233][0] = Δᐃ.ⲆᐃΔᐃⵠΔΔ;
      ᐃᐃ[1233][1] = Δᐃ.ⲆΔᐃⵠⲆⲆᐃ;
      ᐃᐃ[1233][2] = Δᐃ.ⲆΔΔΔⵠΔⲆ;
      ᐃᐃ[1234] = ᐃᐃ[1233];
      ᐃᐃ[1230] = [];
      ᐃᐃ[1230][0] = Δᐃ.ΔᐃⲆⵠᐃΔᐃ;
      ᐃᐃ[1230][1] = Δᐃ.ΔⲆᐃΔⵠΔᐃ;
      ᐃᐃ[1230][2] = Δᐃ.ⲆΔⵠⲆΔΔᐃ;
      ᐃᐃ[1232] = ᐃᐃ[1230];
      ᐃᐃ[1231] = ᐃᐃ[1230];
      ᐃᐃ[569] = [];
      ᐃᐃ[569][0] = Δᐃ.ᐃΔⵠⵠᐃΔⵠ;
      ᐃᐃ[569][1] = Δᐃ.ⲆΔΔΔⵠΔΔ;
      ᐃᐃ[569][2] = Δᐃ.ⵠΔᐃᐃΔΔⵠ;
      ᐃᐃ[571] = ᐃᐃ[569];
      ᐃᐃ[570] = ᐃᐃ[569];
      ᐃᐃ[1166] = [];
      ᐃᐃ[1166][0] = Δᐃ.ⵠⵠⲆΔΔⲆΔ;
      ᐃᐃ[1166][1] = Δᐃ.ⲆᐃⵠⵠᐃΔⵠ;
      ᐃᐃ[1166][2] = Δᐃ.ᐃᐃⲆⵠⵠⵠᐃ;
      ᐃᐃ[1167] = ᐃᐃ[1166];
      ᐃᐃ[1168] = ᐃᐃ[1166];
      ᐃᐃ[572] = [];
      ᐃᐃ[572][0] = Δᐃ.ⵠΔⵠⲆᐃᐃⲆ;
      ᐃᐃ[572][1] = Δᐃ.ΔᐃΔᐃΔⲆᐃ;
      ᐃᐃ[572][2] = Δᐃ.ⲆⲆⵠΔᐃΔᐃ;
      ᐃᐃ[574] = ᐃᐃ[572];
      ᐃᐃ[573] = ᐃᐃ[572];
      ᐃᐃ[1169] = [];
      ᐃᐃ[1169][0] = Δᐃ.ⵠⵠᐃΔⵠᐃΔ;
      ᐃᐃ[1169][1] = Δᐃ.ᐃⲆᐃⲆᐃᐃⲆ;
      ᐃᐃ[1169][2] = Δᐃ.ΔⵠΔⵠⲆᐃⲆ;
      ᐃᐃ[1170] = ᐃᐃ[1169];
      ᐃᐃ[1171] = ᐃᐃ[1169];
      ᐃᐃ[575] = [];
      ᐃᐃ[575][0] = Δᐃ.ΔΔⵠᐃⵠᐃᐃ;
      ᐃᐃ[575][1] = Δᐃ.ⲆΔⵠⲆⲆⲆⵠ;
      ᐃᐃ[575][2] = Δᐃ.ⵠⲆⲆᐃΔᐃⵠ;
      ᐃᐃ[577] = ᐃᐃ[575];
      ᐃᐃ[576] = ᐃᐃ[575];
      ᐃᐃ[1172] = [];
      ᐃᐃ[1172][0] = Δᐃ.ⵠⲆΔΔΔⲆΔ;
      ᐃᐃ[1172][1] = Δᐃ.ᐃᐃⲆⵠΔΔᐃ;
      ᐃᐃ[1172][2] = Δᐃ.ⲆᐃⲆΔⵠᐃᐃ;
      ᐃᐃ[1173] = ᐃᐃ[1172];
      ᐃᐃ[1174] = ᐃᐃ[1172];
      ᐃᐃ[578] = [];
      ᐃᐃ[578][0] = Δᐃ.ΔᐃᐃⲆΔⵠⲆ;
      ᐃᐃ[578][1] = Δᐃ.ᐃⲆΔᐃⲆᐃⲆ;
      ᐃᐃ[578][2] = Δᐃ.ΔΔⲆᐃⵠᐃⵠ;
      ᐃᐃ[580] = ᐃᐃ[578];
      ᐃᐃ[579] = ᐃᐃ[578];
      ᐃᐃ[1175] = [];
      ᐃᐃ[1175][0] = Δᐃ.ΔΔⵠⲆⵠⲆΔ;
      ᐃᐃ[1175][1] = Δᐃ.ΔⵠⲆΔⲆᐃΔ;
      ᐃᐃ[1175][2] = Δᐃ.ᐃⵠⵠⵠᐃⵠᐃ;
      ᐃᐃ[1176] = ᐃᐃ[1175];
      ᐃᐃ[1177] = ᐃᐃ[1175];
      ᐃᐃ[581] = [];
      ᐃᐃ[581][0] = Δᐃ.ΔᐃᐃⲆⵠⵠⲆ;
      ᐃᐃ[581][1] = Δᐃ.ⵠⵠᐃᐃⲆⵠᐃ;
      ᐃᐃ[581][2] = Δᐃ.ⲆⲆᐃⲆⵠᐃⲆ;
      ᐃᐃ[583] = ᐃᐃ[581];
      ᐃᐃ[582] = ᐃᐃ[581];
      ᐃᐃ[1178] = [];
      ᐃᐃ[1178][0] = Δᐃ.ⲆᐃΔΔΔⲆⵠ;
      ᐃᐃ[1178][1] = Δᐃ.ⲆⵠⵠⵠΔⲆⵠ;
      ᐃᐃ[1178][2] = Δᐃ.ΔⵠⵠᐃⵠΔⲆ;
      ᐃᐃ[1179] = ᐃᐃ[1178];
      ᐃᐃ[1180] = ᐃᐃ[1178];
      ᐃᐃ[584] = [];
      ᐃᐃ[584][0] = Δᐃ.Δⵠᐃᐃⵠⵠᐃ;
      ᐃᐃ[584][1] = Δᐃ.ⵠΔΔⵠᐃⲆⲆ;
      ᐃᐃ[584][2] = Δᐃ.ⵠΔⲆⵠⵠⵠⵠ;
      ᐃᐃ[586] = ᐃᐃ[584];
      ᐃᐃ[585] = ᐃᐃ[584];
      ᐃᐃ[1181] = [];
      ᐃᐃ[1181][0] = Δᐃ.ΔⲆⲆΔΔⲆⲆ;
      ᐃᐃ[1181][1] = Δᐃ.ᐃⲆᐃΔᐃⲆᐃ;
      ᐃᐃ[1181][2] = Δᐃ.ΔⵠⵠΔⲆⵠᐃ;
      ᐃᐃ[1182] = ᐃᐃ[1181];
      ᐃᐃ[1183] = ᐃᐃ[1181];
      ᐃᐃ[587] = [];
      ᐃᐃ[587][0] = Δᐃ.ⲆΔⵠᐃⵠΔⵠ;
      ᐃᐃ[587][1] = Δᐃ.ⵠⲆΔᐃⲆᐃⲆ;
      ᐃᐃ[587][2] = Δᐃ.ⵠΔΔⲆⲆⵠⲆ;
      ᐃᐃ[589] = ᐃᐃ[587];
      ᐃᐃ[588] = ᐃᐃ[587];
      ᐃᐃ[1184] = [];
      ᐃᐃ[1184][0] = Δᐃ.ⲆⲆⲆΔᐃᐃᐃ;
      ᐃᐃ[1184][1] = Δᐃ.ΔΔⵠⵠΔᐃⵠ;
      ᐃᐃ[1184][2] = Δᐃ.ⵠΔΔⵠΔᐃΔ;
      ᐃᐃ[1185] = ᐃᐃ[1184];
      ᐃᐃ[1186] = ᐃᐃ[1184];
      ᐃᐃ[1257] = [];
      ᐃᐃ[1257][0] = Δᐃ.ᐃᐃᐃΔΔΔⵠ;
      ᐃᐃ[1257][1] = Δᐃ.ⵠᐃⲆᐃᐃⵠⵠ;
      ᐃᐃ[1257][2] = Δᐃ.ΔⲆⲆⵠΔⲆⲆ;
      ᐃᐃ[1258] = ᐃᐃ[1257];
      ᐃᐃ[1256] = ᐃᐃ[1257];
      ᐃᐃ[1260] = [];
      ᐃᐃ[1260][0] = Δᐃ.ⵠΔΔⵠⲆΔᐃ;
      ᐃᐃ[1260][1] = Δᐃ.ᐃⲆᐃⵠᐃᐃⵠ;
      ᐃᐃ[1260][2] = Δᐃ.ⵠⲆᐃⲆᐃⲆΔ;
      ᐃᐃ[1261] = ᐃᐃ[1260];
      ᐃᐃ[1259] = ᐃᐃ[1260];
      ᐃᐃ[1263] = [];
      ᐃᐃ[1263][0] = Δᐃ.ⵠᐃⵠᐃᐃⲆⲆ;
      ᐃᐃ[1263][1] = Δᐃ.ᐃΔⵠⲆΔΔⵠ;
      ᐃᐃ[1263][2] = Δᐃ.ⲆⲆⵠⲆⲆⵠⲆ;
      ᐃᐃ[1264] = ᐃᐃ[1263];
      ᐃᐃ[1262] = ᐃᐃ[1263];
      ᐃᐃ[1266] = [];
      ᐃᐃ[1266][0] = Δᐃ.ᐃΔⲆΔⵠΔⵠ;
      ᐃᐃ[1266][1] = Δᐃ.ⲆΔΔⵠᐃΔⵠ;
      ᐃᐃ[1266][2] = Δᐃ.ⵠⵠᐃⲆⲆⲆⲆ;
      ᐃᐃ[1267] = ᐃᐃ[1266];
      ᐃᐃ[1265] = ᐃᐃ[1266];
      ᐃᐃ[1269] = [];
      ᐃᐃ[1269][0] = Δᐃ.ᐃⲆᐃᐃⵠⲆⲆ;
      ᐃᐃ[1269][1] = Δᐃ.ⲆⵠΔΔⲆᐃⲆ;
      ᐃᐃ[1269][2] = Δᐃ.ⲆΔⲆΔⵠⲆᐃ;
      ᐃᐃ[1270] = ᐃᐃ[1269];
      ᐃᐃ[1268] = ᐃᐃ[1269];
      ᐃᐃ[1272] = [];
      ᐃᐃ[1272][0] = Δᐃ.ᐃᐃΔᐃΔⵠᐃ;
      ᐃᐃ[1272][1] = Δᐃ.ᐃΔᐃᐃΔⲆⵠ;
      ᐃᐃ[1272][2] = Δᐃ.ᐃⲆⲆΔⵠⲆⲆ;
      ᐃᐃ[1273] = ᐃᐃ[1272];
      ᐃᐃ[1271] = ᐃᐃ[1272];
      ᐃᐃ[1239] = [];
      ᐃᐃ[1239][0] = Δᐃ.ᐃⲆΔΔΔⵠⲆᐃΔ;
      ᐃᐃ[1239][1] = Δᐃ.ⲆᐃⵠΔΔΔⵠᐃᐃ;
      ᐃᐃ[1239][2] = Δᐃ.ⵠⲆᐃΔⵠⲆⵠΔᐃ;
      ᐃᐃ[1240] = ᐃᐃ[1239];
      ᐃᐃ[1238] = ᐃᐃ[1239];
      ᐃᐃ[1242] = [];
      ᐃᐃ[1242][0] = Δᐃ.ⲆΔⵠᐃⲆᐃᐃΔⲆ;
      ᐃᐃ[1242][1] = Δᐃ.ᐃᐃⵠΔⲆΔⵠⵠⲆ;
      ᐃᐃ[1242][2] = Δᐃ.ⵠΔⵠⲆⵠⵠΔⵠΔ;
      ᐃᐃ[1243] = ᐃᐃ[1242];
      ᐃᐃ[1241] = ᐃᐃ[1242];
      ᐃᐃ[1245] = [];
      ᐃᐃ[1245][0] = Δᐃ.ΔΔΔⲆΔᐃΔΔΔ;
      ᐃᐃ[1245][1] = Δᐃ.ⵠᐃⵠⲆⲆΔᐃⵠⵠ;
      ᐃᐃ[1245][2] = Δᐃ.ⲆΔᐃΔⲆⲆΔⲆᐃ;
      ᐃᐃ[1246] = ᐃᐃ[1245];
      ᐃᐃ[1244] = ᐃᐃ[1245];
      ᐃᐃ[1248] = [];
      ᐃᐃ[1248][0] = Δᐃ.ᐃⲆⲆⲆΔⲆΔΔᐃ;
      ᐃᐃ[1248][1] = Δᐃ.ᐃᐃᐃᐃΔΔⲆᐃⵠ;
      ᐃᐃ[1248][2] = Δᐃ.ΔⲆΔⵠⵠΔⵠᐃⲆ;
      ᐃᐃ[1249] = ᐃᐃ[1248];
      ᐃᐃ[1247] = ᐃᐃ[1248];
      ᐃᐃ[1251] = [];
      ᐃᐃ[1251][0] = Δᐃ.ᐃⲆᐃᐃⵠⵠᐃⵠⲆ;
      ᐃᐃ[1251][1] = Δᐃ.ⵠΔᐃᐃⲆⲆΔΔⲆ;
      ᐃᐃ[1251][2] = Δᐃ.ⲆΔᐃᐃᐃⲆⵠᐃⵠ;
      ᐃᐃ[1252] = ᐃᐃ[1251];
      ᐃᐃ[1250] = ᐃᐃ[1251];
      ᐃᐃ[1254] = [];
      ᐃᐃ[1254][0] = Δᐃ.ᐃΔᐃⵠⲆᐃⲆΔⲆ;
      ᐃᐃ[1254][1] = Δᐃ.ΔⲆΔᐃΔᐃᐃⵠⲆ;
      ᐃᐃ[1254][2] = Δᐃ.ⵠⵠⲆⵠᐃᐃᐃᐃᐃ;
      ᐃᐃ[1255] = ᐃᐃ[1254];
      ᐃᐃ[1253] = ᐃᐃ[1254];
      ᐃᐃ[1227] = [];
      ᐃᐃ[1227][0] = Δᐃ.ⲆᐃΔΔⵠᐃᐃ;
      ᐃᐃ[1227][1] = Δᐃ.ΔⲆⲆΔᐃᐃΔ;
      ᐃᐃ[1227][2] = Δᐃ.ⵠᐃⲆᐃΔᐃⵠ;
      ᐃᐃ[1229] = ᐃᐃ[1227];
      ᐃᐃ[1228] = ᐃᐃ[1227];
      ᐃᐃ[1187] = [];
      ᐃᐃ[1187][0] = Δᐃ.ΔΔᐃᐃⲆᐃⵠ;
      ᐃᐃ[1187][1] = Δᐃ.ⵠⵠⵠⲆⲆⲆⲆ;
      ᐃᐃ[1187][2] = Δᐃ.ⲆᐃⲆΔⲆⲆΔ;
      ᐃᐃ[1188] = ᐃᐃ[1187];
      ᐃᐃ[Mr.ⲆᐃᐃᐃⵠᐃⲆⵠⵠ] = ᐃᐃ[1187];
      ᐃᐃ[840] = Ut(1, [{
        f: Md,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
      }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[841] = ᐃᐃ[840];
      ᐃᐃ[850] = Ut(1, [{
        f: _p,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[851] = ᐃᐃ[850];
      ᐃᐃ[644] = Ut(1, [{
        f: Ht,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: Jt,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: Lt,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[643] = ᐃᐃ[644];
      ᐃᐃ[639] = Ut(1, [{
        f: Et,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[800] = Ut(1, [{
        f: Jc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[799] = ᐃᐃ[800];
      ᐃᐃ[631] = Ut(1, [{
        f: em,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[632] = ᐃᐃ[631];
      ᐃᐃ[311] = Ut(1, [{
        f: em,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#493d36", "#332b28"]
      }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[284] = ᐃᐃ[311];
      ᐃᐃ[808] = Ut(1, [{
        f: em,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c67933", "#b17238"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[809] = ᐃᐃ[808];
      ᐃᐃ[834] = Ut(1, [{
        f: em,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e8e8e8", "#bbbbbb"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[835] = ᐃᐃ[834];
      ᐃᐃ[845] = Ut(1, [{
        f: em,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#328a56", "#449573"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[846] = ᐃᐃ[845];
      ᐃᐃ[949] = Ut(1, [{
        f: em,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c98e2f", "#a36b11"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[950] = ᐃᐃ[949];
      ᐃᐃ[951] = ᐃᐃ[949];
      ᐃᐃ[966] = Ut(1, [{
        f: em,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#13a56d", "#098a58"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[967] = ᐃᐃ[966];
      ᐃᐃ[968] = ᐃᐃ[966];
      ᐃᐃ[981] = Ut(1, [{
        f: em,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3a8214", "#4a9c1e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[982] = ᐃᐃ[981];
      ᐃᐃ[983] = ᐃᐃ[981];
      ᐃᐃ[959] = Ut(1, [{
        f: em,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#b22419", "#99110e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[960] = ᐃᐃ[959];
      ᐃᐃ[961] = ᐃᐃ[959];
      ᐃᐃ[309] = Ut(1, [{
        f: Wt,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516"]
      }, {
        f: Zt,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[302] = ᐃᐃ[309];
      ᐃᐃ[328] = Ut(1, [{
        f: Yt,
        x: -2,
        y: -1,
        a: 1,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
      }, {
        f: Zt,
        x: -2,
        y: -1,
        a: 1,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[327] = ᐃᐃ[328];
      ᐃᐃ[860] = Ut(1, [{
        f: mu,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
      }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[865] = Ut(1, [{
        f: wu,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[829] = Ut(1, [{
        f: gu,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[261] = Ut(1, [{
        f: uu,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[292] = Ut(1, [{
        f: tu,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[293] = Ut(1, [{
        f: yu,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[455] = Ut(1, [{
        f: xu,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[313] = Ut(1, [{
        f: bu,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[312] = Ut(1, [{
        f: bu,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[258] = Ut(1, [{
        f: bu,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[296] = Ut(1, [{
        f: bu,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[458] = Ut(1, [{
        f: bu,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[1017] = [];
      ᐃᐃ[1017][0] = Δᐃ.ⵠⲆΔᐃΔⵠᐃ;
      ᐃᐃ[1017][1] = Δᐃ.ⲆᐃⲆⲆᐃᐃⵠ;
      ᐃᐃ[1017][2] = Δᐃ.ⵠⵠⵠⲆⵠⵠᐃ;
      ᐃᐃ[1019] = ᐃᐃ[1017];
      ᐃᐃ[1018] = ᐃᐃ[1017];
      ᐃᐃ[315] = Ut(1, [{
        f: lm,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#252B28", "#58645F", "#75827D"]
      }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[297] = Ut(1, [{
        f: Tm,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#282823", "#877c2d", "#c4bc51"]
      }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[298] = Ut(1, [{
        f: ym,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#232828", "#3fc9c9", "#74ede6"]
      }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[316] = Ut(1, [{
        f: Wt,
        x: 0,
        y: -5,
        a: 1,
        r: Math.PI / 2.5,
        c: ["#4d2d14", "#432516"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[830] = ᐃᐃ[829];
      ᐃᐃ[254] = ᐃᐃ[261];
      ᐃᐃ[290] = ᐃᐃ[292];
      ᐃᐃ[291] = ᐃᐃ[293];
      ᐃᐃ[456] = ᐃᐃ[455];
      ᐃᐃ[314] = ᐃᐃ[313];
      ᐃᐃ[256] = ᐃᐃ[312];
      ᐃᐃ[295] = ᐃᐃ[258];
      ᐃᐃ[257] = ᐃᐃ[296];
      ᐃᐃ[460] = ᐃᐃ[458];
      ᐃᐃ[277] = Ut(1, [{
        f: Hd,
        x: 0,
        y: 0,
        a: 1,
        r: 0
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[310] = Ut(1, [{
        f: Zd,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[262] = ᐃᐃ[310];
      ᐃᐃ[329] = Ut(1, [{
        f: hm,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[263] = ᐃᐃ[329];
      ᐃᐃ[331] = Ut(1, [{
        f: cm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[332] = ᐃᐃ[331];
      ᐃᐃ[492] = Ut(1, [{
        f: hm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[493] = ᐃᐃ[492];
      ᐃᐃ[330] = Ut(1, [{
        f: om,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[265] = ᐃᐃ[330];
      ᐃᐃ[317] = Ut(1, [{
        f: wm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[318] = ᐃᐃ[317];
      ᐃᐃ[319] = Ut(1, [{
        f: Hm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[320] = ᐃᐃ[319];
      ᐃᐃ[362] = Ut(1, [{
        f: Lm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[363] = ᐃᐃ[362];
      ᐃᐃ[364] = Ut(1, [{
        f: Lm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[365] = ᐃᐃ[364];
      ᐃᐃ[361] = Ut(1, [{
        f: Wm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[360] = ᐃᐃ[361];
      ᐃᐃ[495] = Ut(1, [{
        f: Wm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[496] = ᐃᐃ[495];
      ᐃᐃ[335] = Ut(1, [{
        f: Jm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[268] = ᐃᐃ[335];
      ᐃᐃ[372] = Ut(1, [{
        f: Am,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[371] = ᐃᐃ[372];
      ᐃᐃ[499] = Ut(1, [{
        f: Am,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[498] = ᐃᐃ[499];
      ᐃᐃ[375] = Ut(1, [{
        f: Mm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[374] = ᐃᐃ[375];
      ᐃᐃ[378] = Ut(1, [{
        f: Zm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[377] = ᐃᐃ[378];
      ᐃᐃ[337] = Ut(1, [{
        f: Om,
        x: 0,
        y: 2,
        a: 1,
        r: 0,
        c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[338] = ᐃᐃ[337];
      ᐃᐃ[300] = Ut(1, [{
        f: Vd,
        x: 0,
        y: -3,
        a: 1,
        r: 0,
        c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[323] = Ut(1, [{
        f: Vd,
        x: 0,
        y: -3,
        a: 1,
        r: 0,
        c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[325] = ᐃᐃ[323];
      ᐃᐃ[305] = Ut(1, [{
        f: Mt,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#cec0c4", "#ffffff", "#6d6768"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[513] = Ut(1, [{
        f: Mt,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#d4e9ec", "#37b1d7", "#506c71"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[515] = ᐃᐃ[513];
      ᐃᐃ[368] = Ut(1, [{
        f: Km,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#ef96be", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[1162] = Ut(1, [{
        f: Km,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#55423e", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[178] = Ut(1, [{
        f: sm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[179] = Ut(1, [{
        f: sm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[624] = Ut(1, [{
        f: Km,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#201851", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[393] = Ut(1, [{
        f: Km,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#231f20", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[505] = Ut(1, [{
        f: Km,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#ffffff", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[369] = Ut(1, [{
        f: qm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[370] = ᐃᐃ[369];
      ᐃᐃ[381] = Ut(1, [{
        f: Vm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[380] = ᐃᐃ[381];
      ᐃᐃ[502] = Ut(1, [{
        f: Qm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[503] = ᐃᐃ[502];
      ᐃᐃ[880] = Ut(1, [{
        f: ku,
        x: 0,
        y: 5,
        a: 1,
        r: 0,
        c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[881] = ᐃᐃ[880];
      ᐃᐃ[882] = Ut(1, [{
        f: $t,
        x: 0,
        y: 5,
        a: 1,
        r: 0,
        c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[883] = ᐃᐃ[882];
      ᐃᐃ[303] = Ut(1, [{
        f: Tt,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#ffffff", "#cec0c4"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[304] = ᐃᐃ[303];
      ᐃᐃ[392] = [];
      ᐃᐃ[392][0] = Δᐃ.ⲆⲆⲆᐃⵠᐃΔ;
      ᐃᐃ[392][1] = Δᐃ.ᐃᐃⲆⲆᐃᐃΔ;
      ᐃᐃ[392][2] = Δᐃ.ⲆⵠΔᐃⵠᐃΔ;
      ᐃᐃ[367] = ᐃᐃ[392];
      ᐃᐃ[975] = [];
      ᐃᐃ[975][0] = Δᐃ.ⲆⲆⲆⵠᐃΔᐃ;
      ᐃᐃ[975][1] = Δᐃ.ΔΔⵠΔᐃⵠΔ;
      ᐃᐃ[975][2] = Δᐃ.ⵠᐃᐃⵠⵠⵠΔ;
      ᐃᐃ[977] = ᐃᐃ[975];
      ᐃᐃ[976] = ᐃᐃ[975];
      ᐃᐃ[978] = [];
      ᐃᐃ[978][0] = Δᐃ.ⵠⲆⲆᐃΔⵠⵠ;
      ᐃᐃ[978][1] = Δᐃ.ⲆⲆⲆⲆᐃⵠⲆ;
      ᐃᐃ[978][2] = Δᐃ.ⵠᐃΔᐃⲆⲆⵠ;
      ᐃᐃ[980] = ᐃᐃ[978];
      ᐃᐃ[979] = ᐃᐃ[978];
      ᐃᐃ[1158] = [];
      ᐃᐃ[1158][0] = Δᐃ.ΔΔᐃΔⲆⵠⵠ;
      ᐃᐃ[1158][1] = Δᐃ.ΔΔᐃΔⲆⵠⵠ;
      ᐃᐃ[1158][2] = Δᐃ.ΔΔᐃΔⲆⵠⵠ;
      ᐃᐃ[1159] = ᐃᐃ[1158];
      ᐃᐃ[426] = [];
      ᐃᐃ[426][0] = Δᐃ.ⵠⲆΔⲆⵠⲆⲆ;
      ᐃᐃ[426][1] = Δᐃ.ΔⲆΔⲆᐃⲆᐃ;
      ᐃᐃ[426][2] = Δᐃ.ᐃⵠⵠⵠⵠᐃᐃ;
      ᐃᐃ[427] = ᐃᐃ[426];
      ᐃᐃ[428] = ᐃᐃ[426];
      ᐃᐃ[1160] = [];
      ᐃᐃ[1160][0] = Δᐃ.ⲆᐃΔΔΔⵠᐃ;
      ᐃᐃ[1160][1] = Δᐃ.ⲆᐃΔΔΔⵠᐃ;
      ᐃᐃ[1160][2] = Δᐃ.ⲆᐃΔΔΔⵠᐃ;
      ᐃᐃ[1161] = ᐃᐃ[1160];
      ᐃᐃ[1236] = [];
      ᐃᐃ[1236][0] = Δᐃ.ΔⲆⲆᐃᐃⵠᐃⲆⲆ;
      ᐃᐃ[1236][1] = Δᐃ.ᐃᐃΔΔΔⵠᐃⲆⵠ;
      ᐃᐃ[1236][2] = Δᐃ.ᐃⲆⲆⲆΔᐃⲆⲆΔ;
      ᐃᐃ[1235] = ᐃᐃ[1236];
      ᐃᐃ[1237] = ᐃᐃ[1236];
      ᐃᐃ[991] = [];
      ᐃᐃ[991][0] = Δᐃ.ⲆⲆⵠΔⵠⲆᐃ;
      ᐃᐃ[991][1] = Δᐃ.ⵠΔⲆⲆⵠⲆΔ;
      ᐃᐃ[991][2] = Δᐃ.ᐃᐃⵠᐃᐃⵠᐃ;
      ᐃᐃ[990] = ᐃᐃ[991];
      ᐃᐃ[992] = ᐃᐃ[991];
      ᐃᐃ[994] = [];
      ᐃᐃ[994][0] = Δᐃ.ⲆⵠᐃⵠⵠΔᐃ;
      ᐃᐃ[994][1] = Δᐃ.ⲆΔⵠⲆΔΔⵠ;
      ᐃᐃ[994][2] = Δᐃ.ᐃⵠⲆⵠΔⵠⵠ;
      ᐃᐃ[993] = ᐃᐃ[994];
      ᐃᐃ[995] = ᐃᐃ[994];
      ᐃᐃ[997] = [];
      ᐃᐃ[997][0] = Δᐃ.ⲆΔⵠⵠⵠⵠⲆ;
      ᐃᐃ[997][1] = Δᐃ.ⲆⲆΔΔⵠⵠᐃ;
      ᐃᐃ[997][2] = Δᐃ.ⵠⵠΔᐃⵠᐃⵠ;
      ᐃᐃ[996] = ᐃᐃ[997];
      ᐃᐃ[998] = ᐃᐃ[997];
      ᐃᐃ[1000] = [];
      ᐃᐃ[1000][0] = Δᐃ.ⵠᐃΔᐃⵠⵠᐃ;
      ᐃᐃ[1000][1] = Δᐃ.ⲆⵠᐃΔⵠⵠΔ;
      ᐃᐃ[1000][2] = Δᐃ.ΔⲆᐃᐃΔⵠⵠ;
      ᐃᐃ[999] = ᐃᐃ[1000];
      ᐃᐃ[1001] = ᐃᐃ[1000];
      ᐃᐃ[1003] = [];
      ᐃᐃ[1003][0] = Δᐃ.ⲆᐃᐃⲆⵠⵠⲆ;
      ᐃᐃ[1003][1] = Δᐃ.ⵠᐃᐃᐃⵠᐃⵠ;
      ᐃᐃ[1003][2] = Δᐃ.ΔᐃΔⵠΔⲆᐃ;
      ᐃᐃ[1002] = ᐃᐃ[1003];
      ᐃᐃ[1004] = ᐃᐃ[1003];
      ᐃᐃ[1006] = [];
      ᐃᐃ[1006][0] = Δᐃ.ⵠᐃⵠⵠⲆᐃⵠ;
      ᐃᐃ[1006][1] = Δᐃ.ⲆΔⵠΔΔᐃⵠ;
      ᐃᐃ[1006][2] = Δᐃ.ΔⵠΔΔⲆⲆᐃ;
      ᐃᐃ[1005] = ᐃᐃ[1006];
      ᐃᐃ[1007] = ᐃᐃ[1006];
      ᐃᐃ[1009] = [];
      ᐃᐃ[1009][0] = Δᐃ.ᐃΔᐃⵠⲆⲆⵠ;
      ᐃᐃ[1009][1] = Δᐃ.ᐃⵠᐃⲆⲆⵠᐃ;
      ᐃᐃ[1009][2] = Δᐃ.ⵠᐃᐃⵠᐃⵠΔ;
      ᐃᐃ[1008] = ᐃᐃ[1009];
      ᐃᐃ[1010] = ᐃᐃ[1009];
      ᐃᐃ[1012] = [];
      ᐃᐃ[1012][0] = Δᐃ.ᐃΔΔᐃⵠⵠᐃ;
      ᐃᐃ[1012][1] = Δᐃ.ⵠⵠⲆⵠΔⲆΔ;
      ᐃᐃ[1012][2] = Δᐃ.ᐃⵠᐃΔⲆΔᐃ;
      ᐃᐃ[1011] = ᐃᐃ[1012];
      ᐃᐃ[1013] = ᐃᐃ[1012];
      ᐃᐃ[1015] = [];
      ᐃᐃ[1015][0] = Δᐃ.ⵠⲆⲆΔⲆⲆᐃ;
      ᐃᐃ[1015][1] = Δᐃ.ⵠⲆΔΔⵠⲆⵠ;
      ᐃᐃ[1015][2] = Δᐃ.ΔⲆᐃᐃⵠⵠⲆ;
      ᐃᐃ[1014] = ᐃᐃ[1015];
      ᐃᐃ[1016] = ᐃᐃ[1015];
      ᐃᐃ[1035] = [];
      ᐃᐃ[1035][0] = Δᐃ.ⲆᐃΔⲆᐃ;
      ᐃᐃ[1035][1] = Δᐃ.ⲆᐃΔⲆᐃ;
      ᐃᐃ[1035][2] = Δᐃ.ⲆᐃΔⲆᐃ;
      ᐃᐃ[Mr.ᐃᐃⲆΔΔΔΔᐃΔ] = ᐃᐃ[1035];
      ᐃᐃ[1036] = ᐃᐃ[1035];
      ᐃᐃ[1037] = [];
      ᐃᐃ[1037][0] = Δᐃ.ᐃⲆⵠⵠⵠ;
      ᐃᐃ[1037][1] = Δᐃ.ᐃⲆⵠⵠⵠ;
      ᐃᐃ[1037][2] = Δᐃ.ᐃⲆⵠⵠⵠ;
      ᐃᐃ[Mr.ᐃΔΔⵠⲆⲆΔⲆⲆ] = ᐃᐃ[1037];
      ᐃᐃ[1038] = ᐃᐃ[1037];
      ᐃᐃ[1039] = [];
      ᐃᐃ[1039][0] = Δᐃ.ΔΔΔᐃⵠ;
      ᐃᐃ[1039][1] = Δᐃ.ΔΔΔᐃⵠ;
      ᐃᐃ[1039][2] = Δᐃ.ΔΔΔᐃⵠ;
      ᐃᐃ[Mr.ⵠⲆᐃⲆⲆᐃⵠᐃⲆ] = ᐃᐃ[1039];
      ᐃᐃ[1040] = ᐃᐃ[1039];
      ᐃᐃ[1156] = [];
      ᐃᐃ[1156][0] = Δᐃ.ΔⵠᐃⲆⲆ;
      ᐃᐃ[1156][1] = Δᐃ.ΔⵠᐃⲆⲆ;
      ᐃᐃ[1156][2] = Δᐃ.ΔⵠᐃⲆⲆ;
      ᐃᐃ[1157] = ᐃᐃ[1156];
      ᐃᐃ[1046] = [];
      ᐃᐃ[1046][0] = Δᐃ.ⲆⲆΔⲆⵠⵠⵠ;
      ᐃᐃ[1046][1] = Δᐃ.ⵠⲆⵠΔΔΔⵠ;
      ᐃᐃ[1046][2] = Δᐃ.ᐃⲆᐃᐃᐃⲆⲆ;
      ᐃᐃ[1048] = ᐃᐃ[1046];
      ᐃᐃ[1047] = ᐃᐃ[1046];
      ᐃᐃ[744] = [];
      ᐃᐃ[744][0] = Δᐃ.ⲆⵠΔⵠᐃᐃᐃ;
      ᐃᐃ[744][1] = Δᐃ.ⲆⲆⵠⵠⵠⲆⵠ;
      ᐃᐃ[744][2] = Δᐃ.ⲆᐃΔᐃⵠⲆⲆ;
      ᐃᐃ[746] = ᐃᐃ[744];
      ᐃᐃ[745] = ᐃᐃ[744];
      ᐃᐃ[747] = [];
      ᐃᐃ[747][0] = Δᐃ.ΔⵠⵠⵠⵠΔᐃ;
      ᐃᐃ[747][1] = Δᐃ.ⵠᐃⵠⵠⲆᐃΔ;
      ᐃᐃ[747][2] = Δᐃ.ⲆΔᐃⲆⵠΔⲆ;
      ᐃᐃ[749] = ᐃᐃ[747];
      ᐃᐃ[748] = ᐃᐃ[747];
      ᐃᐃ[1049] = [];
      ᐃᐃ[1049][0] = Δᐃ.ΔᐃᐃⲆⵠⵠᐃ;
      ᐃᐃ[1049][1] = Δᐃ.ΔΔΔⵠⵠΔᐃ;
      ᐃᐃ[1049][2] = Δᐃ.ΔⵠⲆᐃᐃᐃᐃ;
      ᐃᐃ[1051] = ᐃᐃ[1049];
      ᐃᐃ[1050] = ᐃᐃ[1049];
      ᐃᐃ[1189] = [];
      ᐃᐃ[1189][0] = Δᐃ.ⵠⲆⵠⲆΔⲆⲆ;
      ᐃᐃ[1189][1] = Δᐃ.ⵠᐃᐃⲆⲆⲆⵠ;
      ᐃᐃ[1189][2] = Δᐃ.ΔΔᐃᐃⲆⵠⵠ;
      ᐃᐃ[1191] = ᐃᐃ[1189];
      ᐃᐃ[1190] = ᐃᐃ[1189];
      ᐃᐃ[1110] = [];
      ᐃᐃ[1110][0] = Δᐃ.ⵠⵠⵠⵠΔᐃΔ;
      ᐃᐃ[1110][1] = Δᐃ.ΔΔᐃⵠⲆΔᐃ;
      ᐃᐃ[1110][2] = Δᐃ.ⲆⲆᐃΔⵠⵠΔ;
      ᐃᐃ[1112] = ᐃᐃ[1110];
      ᐃᐃ[1111] = ᐃᐃ[1110];
      ᐃᐃ[1131] = [];
      ᐃᐃ[1131][0] = Δᐃ.ΔⵠᐃⵠⵠⲆⵠᐃᐃ;
      ᐃᐃ[1131][1] = Δᐃ.ⵠΔΔⲆᐃⵠᐃΔⵠ;
      ᐃᐃ[1131][2] = Δᐃ.ᐃⲆᐃⵠⵠᐃⵠⲆΔ;
      ᐃᐃ[1133] = ᐃᐃ[1131];
      ᐃᐃ[1132] = ᐃᐃ[1131];
      ᐃᐃ[1137] = [];
      ᐃᐃ[1137][0] = Δᐃ.ⵠⲆΔⲆⲆΔΔ;
      ᐃᐃ[1137][1] = Δᐃ.ⲆⵠΔⵠΔΔⲆ;
      ᐃᐃ[1137][2] = Δᐃ.ᐃᐃⲆΔⲆⵠⲆ;
      ᐃᐃ[1138] = ᐃᐃ[1137];
      ᐃᐃ[1139] = ᐃᐃ[1137];
      ᐃᐃ[1140] = [];
      ᐃᐃ[1140][0] = Δᐃ.ⵠᐃᐃΔΔΔΔ;
      ᐃᐃ[1140][1] = Δᐃ.ᐃⵠΔⲆⵠΔⲆ;
      ᐃᐃ[1140][2] = Δᐃ.ΔⲆΔᐃΔⲆᐃ;
      ᐃᐃ[1141] = ᐃᐃ[1140];
      ᐃᐃ[1142] = ᐃᐃ[1140];
      ᐃᐃ[1117] = [];
      ᐃᐃ[1117][0] = Δᐃ.ᐃΔΔᐃᐃⲆΔ;
      ᐃᐃ[1117][1] = Δᐃ.ⲆΔΔΔⵠⲆΔ;
      ᐃᐃ[1117][2] = Δᐃ.ⲆΔⵠᐃΔΔⵠ;
      ᐃᐃ[1116] = ᐃᐃ[1117];
      ᐃᐃ[1118] = ᐃᐃ[1117];
      ᐃᐃ[1080] = [];
      ᐃᐃ[1080][0] = Δᐃ.ᐃΔᐃⲆΔᐃⵠ;
      ᐃᐃ[1080][1] = Δᐃ.ᐃΔᐃᐃⲆᐃⲆ;
      ᐃᐃ[1080][2] = Δᐃ.ᐃⲆᐃΔⲆᐃΔ;
      ᐃᐃ[1082] = ᐃᐃ[1080];
      ᐃᐃ[1081] = ᐃᐃ[1080];
      ᐃᐃ[1224] = [];
      ᐃᐃ[1224][0] = Δᐃ.ⲆⲆⲆΔᐃⵠⲆ;
      ᐃᐃ[1224][1] = Δᐃ.ᐃΔᐃΔⲆⲆⵠ;
      ᐃᐃ[1224][2] = Δᐃ.ⲆΔⲆΔᐃⵠΔ;
      ᐃᐃ[1226] = ᐃᐃ[1224];
      ᐃᐃ[1225] = ᐃᐃ[1224];
      ᐃᐃ[1095] = [];
      ᐃᐃ[1095][0] = Δᐃ.ⲆⲆⲆⵠΔᐃⲆ;
      ᐃᐃ[1095][1] = Δᐃ.ᐃⵠᐃΔⲆᐃⲆ;
      ᐃᐃ[1095][2] = Δᐃ.ⵠΔⵠⲆΔⵠⵠ;
      ᐃᐃ[1097] = ᐃᐃ[1095];
      ᐃᐃ[1096] = ᐃᐃ[1095];
      ᐃᐃ[717] = Ut(1, [{
        f: uc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
      }, {
        f: Bp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e4c027"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[718] = ᐃᐃ[717];
      ᐃᐃ[408] = Ut(1, [{
        f: Bm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[409] = ᐃᐃ[408];
      ᐃᐃ[907] = Ut(1, [{
        f: Im,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
      }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[909] = ᐃᐃ[907];
      ᐃᐃ[908] = ᐃᐃ[907];
      ᐃᐃ[197] = Ut(1, [{
        f: Sm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[906] = ᐃᐃ[197];
      ᐃᐃ[901] = Ut(1, [{
        f: Em,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[900] = ᐃᐃ[901];
      ᐃᐃ[899] = ᐃᐃ[901];
      ᐃᐃ[401] = Ut(1, [{
        f: Rm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[402] = ᐃᐃ[401];
      ᐃᐃ[395] = Ut(1, [{
        f: Xm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[396] = ᐃᐃ[395];
      ᐃᐃ[398] = Ut(1, [{
        f: ec,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[399] = ᐃᐃ[398];
      ᐃᐃ[404] = Ut(1, [{
        f: Ym,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[405] = ᐃᐃ[404];
      ᐃᐃ[472] = Ut(1, [{
        f: Nm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[473] = ᐃᐃ[472];
      ᐃᐃ[874] = Ut(1, [{
        f: Fm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
      }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[876] = ᐃᐃ[874];
      ᐃᐃ[875] = ᐃᐃ[874];
      ᐃᐃ[477] = Ut(1, [{
        f: Um,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[478] = ᐃᐃ[477];
      ᐃᐃ[709] = Ut(1, [{
        f: Mc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[711] = ᐃᐃ[709];
      ᐃᐃ[550] = Ut(1, [{
        f: Nc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[551] = ᐃᐃ[550];
      ᐃᐃ[480] = Ut(1, [{
        f: Um,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[481] = ᐃᐃ[480];
      ᐃᐃ[483] = Ut(1, [{
        f: Um,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[484] = ᐃᐃ[483];
      ᐃᐃ[486] = Ut(1, [{
        f: Um,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[487] = ᐃᐃ[486];
      ᐃᐃ[489] = [];
      ᐃᐃ[489][0] = Δᐃ.ΔⵠΔⲆᐃⵠⵠ;
      ᐃᐃ[489][1] = Δᐃ.ᐃⵠᐃⵠⵠⵠᐃ;
      ᐃᐃ[489][2] = Δᐃ.ΔΔⵠⲆⲆᐃⲆ;
      ᐃᐃ[491] = ᐃᐃ[489];
      ᐃᐃ[490] = ᐃᐃ[489];
      ᐃᐃ[1195] = [];
      ᐃᐃ[1195][0] = Δᐃ.ᐃⲆⵠⵠΔᐃⵠ;
      ᐃᐃ[1195][1] = Δᐃ.ⲆᐃΔΔⵠⲆᐃ;
      ᐃᐃ[1195][2] = Δᐃ.ΔⵠᐃⲆΔⲆΔ;
      ᐃᐃ[1197] = ᐃᐃ[1195];
      ᐃᐃ[1196] = ᐃᐃ[1195];
      ᐃᐃ[1199] = [];
      ᐃᐃ[1199][0] = Δᐃ.ΔᐃᐃᐃⵠⲆⲆ;
      ᐃᐃ[1199][1] = Δᐃ.ⲆΔⵠᐃⲆΔΔ;
      ᐃᐃ[1199][2] = Δᐃ.ⲆⲆⵠᐃᐃΔⵠ;
      ᐃᐃ[1201] = ᐃᐃ[1199];
      ᐃᐃ[1200] = ᐃᐃ[1199];
      ᐃᐃ[1203] = [];
      ᐃᐃ[1203][0] = Δᐃ.ⲆΔᐃΔᐃΔⵠ;
      ᐃᐃ[1203][1] = Δᐃ.ᐃΔᐃⵠⵠΔⵠ;
      ᐃᐃ[1203][2] = Δᐃ.ᐃⵠⵠᐃⵠΔΔ;
      ᐃᐃ[1205] = ᐃᐃ[1203];
      ᐃᐃ[1204] = ᐃᐃ[1203];
      ᐃᐃ[1207] = [];
      ᐃᐃ[1207][0] = Δᐃ.ⲆΔⵠᐃⲆΔⲆ;
      ᐃᐃ[1207][1] = Δᐃ.ⲆᐃⵠⲆⵠΔⲆ;
      ᐃᐃ[1207][2] = Δᐃ.ⵠΔΔⲆⵠⲆⲆ;
      ᐃᐃ[1209] = ᐃᐃ[1207];
      ᐃᐃ[1208] = ᐃᐃ[1207];
      ᐃᐃ[1211] = [];
      ᐃᐃ[1211][0] = Δᐃ.ΔⲆⵠΔⲆⵠᐃ;
      ᐃᐃ[1211][1] = Δᐃ.ΔᐃΔⵠⲆᐃⲆ;
      ᐃᐃ[1211][2] = Δᐃ.ⲆᐃⲆΔΔⲆⲆ;
      ᐃᐃ[1213] = ᐃᐃ[1211];
      ᐃᐃ[1212] = ᐃᐃ[1211];
      ᐃᐃ[1215] = [];
      ᐃᐃ[1215][0] = Δᐃ.ⵠᐃᐃΔΔΔᐃ;
      ᐃᐃ[1215][1] = Δᐃ.ⵠΔⲆᐃⵠⲆΔ;
      ᐃᐃ[1215][2] = Δᐃ.ᐃⲆⵠⵠΔΔᐃ;
      ᐃᐃ[1217] = ᐃᐃ[1215];
      ᐃᐃ[1216] = ᐃᐃ[1215];
      ᐃᐃ[518] = Ut(1, [{
        f: Vc,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
      }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[519] = ᐃᐃ[518];
      ᐃᐃ[532] = Ut(1, [{
        f: cc,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 5,
        c: ["#141414", "#c4a23a", "#816511"]
      }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[533] = ᐃᐃ[532];
      ᐃᐃ[521] = Ut(1, [{
        f: Ip,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#141414", "#178a99", "#0a6372", "#03282e"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ᐃᐃ[523] = Ut(1, [{
        f: Ip,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#120202", "#991616", "#750a0a", "#120202"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ᐃᐃ[529] = Ut(1, [{
        f: _c,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#347f93", "#54a4ba"]
      }, {
        f: vc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
      }, {
        f: gc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#a9e4ed", "#86d4e0"]
      }, {
        f: Lc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[530] = ᐃᐃ[529];
      ᐃᐃ[553] = Ut(1, [{
        f: fp,
        x: 45,
        y: 70,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[555] = ᐃᐃ[553];
      ᐃᐃ[541] = Ut(1, [{
        f: Hc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[542] = ᐃᐃ[541];
      ᐃᐃ[779] = Ut(1, [{
        f: hc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[780] = ᐃᐃ[779];
      ᐃᐃ[767] = Ut(1, [{
        f: np,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041"]
      }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[768] = ᐃᐃ[767];
      ᐃᐃ[776] = Ut(1, [{
        f: Yc,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[777] = ᐃᐃ[776];
      ᐃᐃ[771] = Ut(1, [{
        f: Yc,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[772] = ᐃᐃ[771];
      ᐃᐃ[756] = Ut(1, [{
        f: Tp,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[758] = ᐃᐃ[756];
      ᐃᐃ[760] = Ut(1, [{
        f: Tp,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[762] = ᐃᐃ[760];
      ᐃᐃ[764] = Ut(1, [{
        f: Tp,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[770] = ᐃᐃ[764];
      ᐃᐃ[910] = Ut(1, [{
        f: Gm,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[912] = ᐃᐃ[910];
      ᐃᐃ[911] = ᐃᐃ[910];
      ᐃᐃ[732] = Ut(1, [{
        f: dp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[734] = ᐃᐃ[732];
      ᐃᐃ[563] = Ut(1, [{
        f: Sc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
      }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[564] = ᐃᐃ[563];
      ᐃᐃ[751] = Ut(1, [{
        f: rp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[252] = Ut(1, [{
        f: Fp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[753] = Ut(1, [{
        f: rp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[253] = Ut(1, [{
        f: Fp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[176] = Ut(1, [{
        f: hp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[177] = Ut(1, [{
        f: hp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[175] = Ut(1, [{
        f: hp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[616] = Ut(1, [{
        f: Oc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[618] = ᐃᐃ[616];
      ᐃᐃ[699] = Ut(1, [{
        f: Oc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[700] = ᐃᐃ[699];
      ᐃᐃ[702] = Ut(1, [{
        f: Oc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[704] = ᐃᐃ[702];
      ᐃᐃ[705] = Ut(1, [{
        f: Oc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[706] = ᐃᐃ[705];
      ᐃᐃ[420] = Ut(1, [{
        f: lc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[421] = ᐃᐃ[420];
      ᐃᐃ[826] = Ut(1, [{
        f: $c,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#252525", "#73583e", "#493425", "#7d6144"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[827] = ᐃᐃ[826];
      ᐃᐃ[429] = Ut(1, [{
        f: zp,
        x: 0,
        y: -2,
        a: 1,
        r: 0,
        c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[430] = ᐃᐃ[429];
      ᐃᐃ[432] = Ut(1, [{
        f: up,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#dbce71", "#b29c32", "#c4bc51"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[433] = ᐃᐃ[432];
      ᐃᐃ[435] = Ut(1, [{
        f: ip,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[436] = ᐃᐃ[435];
      ᐃᐃ[438] = Ut(1, [{
        f: cp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[439] = ᐃᐃ[438];
      ᐃᐃ[441] = Ut(1, [{
        f: Cc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#221e1b", "#ffffff", "#f6f0e7"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[442] = ᐃᐃ[441];
      ᐃᐃ[418] = Ut(1, [{
        f: vp,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#c27add", "#cd98e5"]
      }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[609] = Ut(1, [{
        f: Mp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#D7C393", "#a48c6c"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[142] = Ut(1, [{
        f: Uc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#93CBCE", "#E9F6F6"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[140] = Ut(1, [{
        f: Mp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#866432", "#6b4f25"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[180] = Ut(1, [{
        f: Tc,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[181] = Ut(1, [{
        f: Ic,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[784] = ᐃᐃ[180];
      ᐃᐃ[785] = ᐃᐃ[181];
      ᐃᐃ[789] = Ut(1, [{
        f: ep,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
      }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[791] = ᐃᐃ[789];
      ᐃᐃ[613] = Ut(1, [{
        f: Rp,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[612] = Ut(1, [{
        f: Dc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[715] = ᐃᐃ[613];
      ᐃᐃ[611] = ᐃᐃ[612];
      ᐃᐃ[634] = Ut(1, [{
        f: Au,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[635] = ᐃᐃ[634];
      ᐃᐃ[200] = Ut(1, [{
        f: Cu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[866] = Ut(1, [{
        f: Bu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[143] = Ut(1, [{
        f: Bc,
        x: 0,
        y: -2,
        a: 1,
        r: 0,
        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[690] = ᐃᐃ[143];
      ᐃᐃ[662] = Ut(1, [{
        f: zm,
        x: -3,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[664] = Ut(1, [{
        f: rm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1d051e", "#42261A", "#281818"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[666] = ᐃᐃ[664];
      ᐃᐃ[649] = Ut(1, [{
        f: Pm,
        x: -3,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[650] = ᐃᐃ[649];
      ᐃᐃ[674] = Ut(1, [{
        f: Dt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
      }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[646] = Ut(1, [{
        f: Cm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[647] = ᐃᐃ[646];
      ᐃᐃ[685] = Ut(1, [{
        f: ac,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[684] = ᐃᐃ[685];
      ᐃᐃ[870] = Ut(1, [{
        f: Dd,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#e2d63b", "#ee71a9", "#42b672"]
      }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[871] = ᐃᐃ[870];
      ᐃᐃ[605] = Ut(1, [{
        f: Gc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
      }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[604] = ᐃᐃ[605];
      ᐃᐃ[842] = Ut(1, [{
        f: Ed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[843] = ᐃᐃ[842];
      ᐃᐃ[652] = Ut(1, [{
        f: jc,
        x: -1,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
      ᐃᐃ[654] = ᐃᐃ[652];
      ᐃᐃ[626] = Ut(1, [{
        f: jc,
        x: -1,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
      }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[627] = ᐃᐃ[626];
      ᐃᐃ[629] = Ut(1, [{
        f: mp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[196] = Ut(1, [{
        f: pu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[898] = ᐃᐃ[196];
      ᐃᐃ[659] = Ut(1, [{
        f: mm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[660] = ᐃᐃ[659];
      ᐃᐃ[145] = Ut(1, [{
        f: Kd,
        x: -2,
        y: -8,
        a: 1,
        r: 0,
        c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[730] = ᐃᐃ[145];
      ᐃᐃ[566] = [];
      ᐃᐃ[566][0] = Δᐃ.ΔⲆⲆΔⲆΔⵠ;
      ᐃᐃ[566][1] = Δᐃ.ᐃⲆᐃⵠⲆⵠᐃ;
      ᐃᐃ[566][2] = Δᐃ.ΔΔᐃΔᐃⲆᐃ;
      ᐃᐃ[567] = ᐃᐃ[566];
      ᐃᐃ[568] = ᐃᐃ[566];
      ᐃᐃ[877] = [];
      ᐃᐃ[877][0] = Δᐃ.ΔΔᐃⵠΔⵠⵠ;
      ᐃᐃ[877][1] = Δᐃ.ⵠᐃΔⵠΔΔᐃ;
      ᐃᐃ[877][2] = Δᐃ.ΔⵠⵠᐃⲆⲆΔ;
      ᐃᐃ[879] = ᐃᐃ[877];
      ᐃᐃ[878] = ᐃᐃ[877];
      ᐃᐃ[933] = ᐃᐃ[932];
      ᐃᐃ[934] = ᐃᐃ[932];
      ᐃᐃ[932] = [];
      ᐃᐃ[932][0] = Δᐃ.ΔᐃᐃΔⵠⵠⲆ;
      ᐃᐃ[932][1] = Δᐃ.ΔᐃⵠΔⵠΔⲆ;
      ᐃᐃ[932][2] = Δᐃ.ΔⵠΔΔΔᐃΔ;
      ᐃᐃ[933] = ᐃᐃ[932];
      ᐃᐃ[934] = ᐃᐃ[932];
      ᐃᐃ[943] = [];
      ᐃᐃ[943][0] = Δᐃ.ΔⵠⵠΔᐃΔᐃ;
      ᐃᐃ[943][1] = Δᐃ.ᐃⲆᐃΔⵠⵠⲆ;
      ᐃᐃ[943][2] = Δᐃ.ⵠⵠΔΔⵠⵠⲆ;
      ᐃᐃ[944] = ᐃᐃ[943];
      ᐃᐃ[945] = ᐃᐃ[943];
      ᐃᐃ[921] = [];
      ᐃᐃ[921][0] = Δᐃ.ⲆⵠΔᐃⵠΔΔ;
      ᐃᐃ[921][1] = Δᐃ.ⵠΔⲆⲆⲆⵠᐃ;
      ᐃᐃ[921][2] = Δᐃ.ⵠⲆᐃᐃᐃΔⲆ;
      ᐃᐃ[922] = ᐃᐃ[921];
      ᐃᐃ[923] = ᐃᐃ[921];
      ᐃᐃ[925] = [];
      ᐃᐃ[925][0] = Δᐃ.ΔΔΔⲆⵠⵠⲆ;
      ᐃᐃ[925][1] = Δᐃ.ⵠⵠΔΔⲆⲆⲆ;
      ᐃᐃ[925][2] = Δᐃ.ᐃᐃᐃⵠⵠΔⵠ;
      ᐃᐃ[926] = ᐃᐃ[925];
      ᐃᐃ[927] = ᐃᐃ[925];
      ᐃᐃ[929] = [];
      ᐃᐃ[929][0] = Δᐃ.ᐃⲆᐃⲆⵠᐃΔ;
      ᐃᐃ[929][1] = Δᐃ.ᐃⲆΔΔΔⵠΔ;
      ᐃᐃ[929][2] = Δᐃ.ⲆⵠⵠⲆⵠΔⲆ;
      ᐃᐃ[930] = ᐃᐃ[929];
      ᐃᐃ[931] = ᐃᐃ[929];
      ᐃᐃ[946] = [];
      ᐃᐃ[946][0] = Δᐃ.ⵠΔⲆΔⵠⵠΔ;
      ᐃᐃ[946][1] = Δᐃ.ᐃΔⵠᐃⲆⲆᐃ;
      ᐃᐃ[946][2] = Δᐃ.ᐃᐃᐃΔⵠᐃᐃ;
      ᐃᐃ[947] = ᐃᐃ[946];
      ᐃᐃ[948] = ᐃᐃ[946];
      ᐃᐃ[735] = [];
      ᐃᐃ[735][0] = Δᐃ.ⵠⲆⲆⲆᐃᐃⵠ;
      ᐃᐃ[735][1] = Δᐃ.ΔᐃⲆⲆΔᐃΔ;
      ᐃᐃ[735][2] = Δᐃ.ᐃⲆⵠⵠΔᐃΔ;
      ᐃᐃ[737] = ᐃᐃ[735];
      ᐃᐃ[736] = ᐃᐃ[735];
      ᐃᐃ[1164] = [];
      ᐃᐃ[1164][0] = Δᐃ.ⲆΔΔⵠᐃⲆⲆ;
      ᐃᐃ[1164][1] = Δᐃ.ⵠᐃⵠᐃΔΔΔ;
      ᐃᐃ[1164][2] = Δᐃ.ᐃⵠΔᐃΔⲆΔ;
      ᐃᐃ[Mr.ᐃΔⵠᐃⵠⵠⲆΔⵠ] = ᐃᐃ[1164];
      ᐃᐃ[1165] = ᐃᐃ[1164];
      ᐃᐃ[738] = [];
      ᐃᐃ[738][0] = Δᐃ.ⵠᐃΔⵠᐃⵠΔ;
      ᐃᐃ[738][1] = Δᐃ.ⵠⵠᐃⲆΔᐃⵠ;
      ᐃᐃ[738][2] = Δᐃ.Δⵠⵠⵠⵠⵠⵠ;
      ᐃᐃ[740] = ᐃᐃ[738];
      ᐃᐃ[739] = ᐃᐃ[738];
      ᐃᐃ[741] = [];
      ᐃᐃ[741][0] = Δᐃ.ⵠⵠᐃᐃᐃᐃΔ;
      ᐃᐃ[741][1] = Δᐃ.ⲆᐃⵠⵠᐃⲆᐃ;
      ᐃᐃ[741][2] = Δᐃ.ᐃᐃᐃⲆⵠⲆΔ;
      ᐃᐃ[743] = ᐃᐃ[741];
      ᐃᐃ[742] = ᐃᐃ[741];
      ᐃᐃ[938] = [];
      ᐃᐃ[938][0] = Δᐃ.ⲆⵠΔᐃΔᐃᐃ;
      ᐃᐃ[938][1] = Δᐃ.ⲆⵠⲆⵠⵠΔᐃ;
      ᐃᐃ[938][2] = Δᐃ.ⲆΔΔᐃΔⵠΔ;
      ᐃᐃ[939] = ᐃᐃ[938];
      ᐃᐃ[936] = [];
      ᐃᐃ[936][0] = Δᐃ.ⵠᐃⲆⲆⲆⵠⵠ;
      ᐃᐃ[936][1] = Δᐃ.ᐃΔΔᐃⵠᐃⲆ;
      ᐃᐃ[936][2] = Δᐃ.ΔⵠᐃᐃⲆΔᐃ;
      ᐃᐃ[937] = ᐃᐃ[936];
      ᐃᐃ[617] = ᐃᐃ[616];
      ᐃᐃ[701] = ᐃᐃ[699];
      ᐃᐃ[703] = ᐃᐃ[702];
      ᐃᐃ[707] = ᐃᐃ[705];
      ᐃᐃ[348] = ᐃᐃ[311];
      ᐃᐃ[633] = ᐃᐃ[631];
      ᐃᐃ[645] = ᐃᐃ[644];
      ᐃᐃ[640] = ᐃᐃ[639];
      ᐃᐃ[273] = ᐃᐃ[309];
      ᐃᐃ[590] = ᐃᐃ[252];
      ᐃᐃ[752] = ᐃᐃ[751];
      ᐃᐃ[591] = ᐃᐃ[253];
      ᐃᐃ[754] = ᐃᐃ[753];
      ᐃᐃ[276] = ᐃᐃ[328];
      ᐃᐃ[863] = ᐃᐃ[865];
      ᐃᐃ[862] = ᐃᐃ[860];
      ᐃᐃ[831] = ᐃᐃ[829];
      ᐃᐃ[340] = ᐃᐃ[261];
      ᐃᐃ[596] = ᐃᐃ[594];
      ᐃᐃ[345] = ᐃᐃ[292];
      ᐃᐃ[346] = ᐃᐃ[293];
      ᐃᐃ[457] = ᐃᐃ[455];
      ᐃᐃ[274] = ᐃᐃ[313];
      ᐃᐃ[341] = ᐃᐃ[312];
      ᐃᐃ[272] = ᐃᐃ[258];
      ᐃᐃ[344] = ᐃᐃ[296];
      ᐃᐃ[459] = ᐃᐃ[458];
      ᐃᐃ[342] = ᐃᐃ[315];
      ᐃᐃ[270] = ᐃᐃ[297];
      ᐃᐃ[271] = ᐃᐃ[298];
      ᐃᐃ[343] = ᐃᐃ[316];
      ᐃᐃ[269] = ᐃᐃ[277];
      ᐃᐃ[358] = ᐃᐃ[310];
      ᐃᐃ[354] = ᐃᐃ[329];
      ᐃᐃ[356] = ᐃᐃ[331];
      ᐃᐃ[355] = ᐃᐃ[330];
      ᐃᐃ[494] = ᐃᐃ[492];
      ᐃᐃ[349] = ᐃᐃ[317];
      ᐃᐃ[350] = ᐃᐃ[319];
      ᐃᐃ[275] = ᐃᐃ[300];
      ᐃᐃ[351] = ᐃᐃ[323];
      ᐃᐃ[353] = ᐃᐃ[305];
      ᐃᐃ[514] = ᐃᐃ[513];
      ᐃᐃ[352] = ᐃᐃ[303];
      ᐃᐃ[520] = ᐃᐃ[518];
      ᐃᐃ[534] = ᐃᐃ[532];
      ᐃᐃ[531] = ᐃᐃ[529];
      ᐃᐃ[522] = ᐃᐃ[521];
      ᐃᐃ[524] = ᐃᐃ[523];
      ᐃᐃ[565] = ᐃᐃ[563];
      ᐃᐃ[554] = ᐃᐃ[553];
      ᐃᐃ[357] = ᐃᐃ[335];
      ᐃᐃ[359] = ᐃᐃ[337];
      ᐃᐃ[339] = Bq(function (a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 118;
        d.height = a * 129;
        e.save();
        e.translate(a * 90, a * 90);
        md(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
        e.restore();
        cd(e, c[0], c[1], 4);
        e.save();
        md(e, a * 30, a * 115, a * 60, a * 5, a * 15);
        e.restore();
        cd(e, c[2], c[3], 4);
        e.save();
        md(e, a * 50, a * 117, a * 20, a * 10, a * 15);
        e.restore();
        cd(e, c[2]);
        return d;
      }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
      ᐃᐃ[366] = Ut(0.5, [{
        f: $m,
        x: 0,
        y: 2,
        a: 1,
        r: 0,
        c: ["#ffffff"]
      }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
      ᐃᐃ[382] = ᐃᐃ[361];
      ᐃᐃ[383] = ᐃᐃ[362];
      ᐃᐃ[384] = ᐃᐃ[364];
      ᐃᐃ[497] = ᐃᐃ[495];
      ᐃᐃ[385] = ᐃᐃ[392];
      ᐃᐃ[774] = ᐃᐃ[178];
      ᐃᐃ[775] = ᐃᐃ[179];
      ᐃᐃ[386] = ᐃᐃ[368];
      ᐃᐃ[625] = ᐃᐃ[624];
      ᐃᐃ[394] = ᐃᐃ[393];
      ᐃᐃ[1163] = ᐃᐃ[1162];
      ᐃᐃ[506] = ᐃᐃ[505];
      ᐃᐃ[387] = ᐃᐃ[369];
      ᐃᐃ[504] = ᐃᐃ[502];
      ᐃᐃ[388] = ᐃᐃ[372];
      ᐃᐃ[389] = ᐃᐃ[375];
      ᐃᐃ[390] = ᐃᐃ[378];
      ᐃᐃ[501] = ᐃᐃ[499];
      ᐃᐃ[391] = ᐃᐃ[381];
      ᐃᐃ[403] = ᐃᐃ[401];
      ᐃᐃ[397] = ᐃᐃ[395];
      ᐃᐃ[400] = ᐃᐃ[398];
      ᐃᐃ[406] = ᐃᐃ[404];
      ᐃᐃ[474] = ᐃᐃ[472];
      ᐃᐃ[875] = ᐃᐃ[874];
      ᐃᐃ[552] = ᐃᐃ[550];
      ᐃᐃ[710] = ᐃᐃ[709];
      ᐃᐃ[479] = ᐃᐃ[477];
      ᐃᐃ[482] = ᐃᐃ[480];
      ᐃᐃ[485] = ᐃᐃ[483];
      ᐃᐃ[488] = ᐃᐃ[486];
      ᐃᐃ[410] = ᐃᐃ[408];
      ᐃᐃ[719] = ᐃᐃ[717];
      ᐃᐃ[422] = ᐃᐃ[420];
      ᐃᐃ[431] = ᐃᐃ[429];
      ᐃᐃ[434] = ᐃᐃ[432];
      ᐃᐃ[437] = ᐃᐃ[435];
      ᐃᐃ[543] = ᐃᐃ[541];
      ᐃᐃ[733] = ᐃᐃ[732];
      ᐃᐃ[440] = ᐃᐃ[438];
      ᐃᐃ[443] = ᐃᐃ[441];
      ᐃᐃ[446] = ᐃᐃ[418];
      ᐃᐃ[606] = ᐃᐃ[605];
      ᐃᐃ[844] = ᐃᐃ[842];
      ᐃᐃ[683] = ᐃᐃ[685];
      ᐃᐃ[610] = ᐃᐃ[609];
      ᐃᐃ[689] = ᐃᐃ[143];
      ᐃᐃ[686] = ᐃᐃ[142];
      ᐃᐃ[682] = ᐃᐃ[140];
      ᐃᐃ[615] = ᐃᐃ[613];
      ᐃᐃ[614] = ᐃᐃ[612];
      ᐃᐃ[628] = ᐃᐃ[626];
      ᐃᐃ[630] = ᐃᐃ[629];
      ᐃᐃ[636] = ᐃᐃ[634];
      ᐃᐃ[868] = ᐃᐃ[200];
      ᐃᐃ[867] = ᐃᐃ[866];
      ᐃᐃ[648] = ᐃᐃ[646];
      ᐃᐃ[651] = ᐃᐃ[649];
      ᐃᐃ[653] = ᐃᐃ[652];
      ᐃᐃ[661] = ᐃᐃ[659];
      ᐃᐃ[898] = ᐃᐃ[196];
      ᐃᐃ[663] = ᐃᐃ[662];
      ᐃᐃ[665] = ᐃᐃ[664];
      ᐃᐃ[675] = ᐃᐃ[674];
      ᐃᐃ[731] = ᐃᐃ[145];
      ᐃᐃ[757] = ᐃᐃ[756];
      ᐃᐃ[759] = ᐃᐃ[176];
      ᐃᐃ[761] = ᐃᐃ[760];
      ᐃᐃ[763] = ᐃᐃ[177];
      ᐃᐃ[765] = ᐃᐃ[764];
      ᐃᐃ[766] = ᐃᐃ[175];
      ᐃᐃ[769] = ᐃᐃ[767];
      ᐃᐃ[773] = ᐃᐃ[771];
      ᐃᐃ[778] = ᐃᐃ[776];
      ᐃᐃ[781] = ᐃᐃ[779];
      ᐃᐃ[787] = ᐃᐃ[181];
      ᐃᐃ[786] = ᐃᐃ[180];
      ᐃᐃ[790] = ᐃᐃ[789];
      ᐃᐃ[801] = ᐃᐃ[800];
      ᐃᐃ[810] = ᐃᐃ[808];
      ᐃᐃ[836] = ᐃᐃ[834];
      ᐃᐃ[847] = ᐃᐃ[845];
      ᐃᐃ[828] = ᐃᐃ[826];
    })();
    ᐃᐃ[540] = [];
    ᐃᐃ[540][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[540][Mr.ᐃⵠΔ] = [];
    for (var b = 0; Mr.ⲆⵠⵠΔⲆⵠⵠ > b; b++) {
      ᐃᐃ[540][Mr.ⵠⲆⵠ].push(Bq(fm(a, 4 + b, "#59B8CE")));
      ᐃᐃ[540][Mr.ᐃⵠΔ].push(Bq(fm(a, 4 + b, "#90DDD9")));
    }
    ᐃᐃ[470] = [];
    ᐃᐃ[470][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[470][Mr.ᐃⵠΔ] = [];
    for (b = 0; Mr.ⲆᐃⲆⲆⵠⵠΔ > b; b++) {
      ᐃᐃ[470][Mr.ⵠⲆⵠ].push(Bq(fm(a, 4 + b, "#fff")));
      ᐃᐃ[470][Mr.ᐃⵠΔ].push(Bq(fm(a, 4 + b, "#fff")));
    }
    ᐃᐃ[471] = [];
    ᐃᐃ[471][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[471][Mr.ᐃⵠΔ] = [];
    for (b = 0; b < Mr.ⲆᐃⲆⲆⵠⵠΔ; b++) {
      ᐃᐃ[471][Mr.ⵠⲆⵠ].push(Bq(fm(a, 6 + b, "#DDCD8A")));
      ᐃᐃ[471][Mr.ᐃⵠΔ].push(Bq(fm(a, 6 + b, "#155E57")));
    }
    ᐃᐃ[942] = [];
    ᐃᐃ[942][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[942][Mr.ᐃⵠΔ] = [];
    for (b = 0; b < Mr.ΔⵠⲆᐃΔΔᐃ; b++) {
      ᐃᐃ[942][Mr.ⵠⲆⵠ].push(Bq(fm(a, 4 + b, "#353326")));
      ᐃᐃ[942][Mr.ᐃⵠΔ].push(Bq(fm(a, 4 + b, "#1D2526")));
    }
    ᐃᐃ[201] = [];
    ᐃᐃ[201][Mr.ⵠⲆⵠ] = Bq(Id(a * 1.5, 0, ["#ee71a9"]));
    ᐃᐃ[201][Mr.ᐃⵠΔ] = Bq(Id(a * 1.5, 0, ["#ee71a9"]));
    ᐃᐃ[872] = [ᐃᐃ[201]];
    ᐃᐃ[872][1] = [];
    ᐃᐃ[872][2] = [];
    ᐃᐃ[872][3] = [];
    ᐃᐃ[872][4] = [];
    ᐃᐃ[872][1][Mr.ⵠⲆⵠ] = Bq(Id(a * 1.5, 0, ["#e2d63b"]));
    ᐃᐃ[872][1][Mr.ᐃⵠΔ] = Bq(Id(a * 1.5, 0, ["#e2d63b"]));
    ᐃᐃ[872][2][Mr.ⵠⲆⵠ] = Bq(Id(a * 1.5, 0, ["#309cbd"]));
    ᐃᐃ[872][2][Mr.ᐃⵠΔ] = Bq(Id(a * 1.5, 0, ["#309cbd"]));
    ᐃᐃ[872][3][Mr.ⵠⲆⵠ] = Bq(Id(a * 1.5, 0, ["#cd232d"]));
    ᐃᐃ[872][3][Mr.ᐃⵠΔ] = Bq(Id(a * 1.5, 0, ["#cd232d"]));
    ᐃᐃ[872][4][Mr.ⵠⲆⵠ] = Bq(Id(a * 1.5, 0, ["#42b672"]));
    ᐃᐃ[872][4][Mr.ᐃⵠΔ] = Bq(Id(a * 1.5, 0, ["#42b672"]));
    if (ΔⲆᐃ.ⲆⵠΔΔⲆΔΔ("cti", _a.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      Bq = function (a) {
        a.loaded = 1;
        return a;
      };
    }
    ᐃᐃ[797] = Bq(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(0, 0, a.width, a.height);
      b.lineWidth = 4;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var c = 20; c < 220; c += 20) {
        b.moveTo(0, c);
        b.lineTo(460, c);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    ᐃᐃ[108] = [];
    ᐃᐃ[108][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[108][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[108][Mr.ⵠⲆⵠ].push(Bq(lm(a * 1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃᐃ[108][Mr.ⵠⲆⵠ].push(Bq(lm(a * 0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃᐃ[108][Mr.ⵠⲆⵠ].push(Bq(lm(a * 0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃᐃ[108][Mr.ᐃⵠΔ].push(Bq(lm(a * 1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃᐃ[108][Mr.ᐃⵠΔ].push(Bq(lm(a * 0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃᐃ[108][Mr.ᐃⵠΔ].push(Bq(lm(a * 0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃᐃ[111] = [];
    ᐃᐃ[111][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[111][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[111][Mr.ⵠⲆⵠ].push(Bq(Tm(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃᐃ[111][Mr.ⵠⲆⵠ].push(Bq(Tm(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃᐃ[111][Mr.ⵠⲆⵠ].push(Bq(Tm(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃᐃ[111][Mr.ᐃⵠΔ].push(Bq(Tm(a * 1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃᐃ[111][Mr.ᐃⵠΔ].push(Bq(Tm(a * 1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃᐃ[111][Mr.ᐃⵠΔ].push(Bq(Tm(a * 1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃᐃ[112] = [];
    ᐃᐃ[112][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[112][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[112][Mr.ⵠⲆⵠ].push(Bq(ym(a * 1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃᐃ[112][Mr.ⵠⲆⵠ].push(Bq(ym(a * 0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃᐃ[112][Mr.ⵠⲆⵠ].push(Bq(ym(a * 0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃᐃ[112][Mr.ᐃⵠΔ].push(Bq(ym(a * 1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃᐃ[112][Mr.ᐃⵠΔ].push(Bq(ym(a * 0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃᐃ[112][Mr.ᐃⵠΔ].push(Bq(ym(a * 0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃᐃ[239] = [];
    ᐃᐃ[239][Mr.ⵠⲆⵠ] = Δᐃ.ᐃⲆᐃΔⵠᐃⲆ;
    ᐃᐃ[239][Mr.ᐃⵠΔ] = Δᐃ.ᐃⵠΔᐃⵠⲆⲆ;
    ᐃᐃ[286] = [];
    ᐃᐃ[286][Mr.ⵠⲆⵠ] = Bq(hu(a * 0.6, ["#0d1b1c"]));
    ᐃᐃ[286][Mr.ᐃⵠΔ] = Bq(hu(a * 0.6, ["#030d14"]));
    ᐃᐃ[793] = [];
    ᐃᐃ[793][Mr.ⵠⲆⵠ] = Bq(cu(a * 0.6, ["#2a2938", "#242330"]));
    ᐃᐃ[793][Mr.ᐃⵠΔ] = Bq(cu(a * 0.6, ["#1b1e30", "#161921"]));
    ᐃᐃ[820] = [];
    ᐃᐃ[820][Mr.ⵠⲆⵠ] = Bq(Qd(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    ᐃᐃ[820][Mr.ᐃⵠΔ] = Bq(Qd(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
    ᐃᐃ[821] = [];
    ᐃᐃ[821][Mr.ⵠⲆⵠ] = Bq(Rd(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    ᐃᐃ[821][Mr.ᐃⵠΔ] = Bq(Rd(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    ᐃᐃ[822] = [];
    ᐃᐃ[822][Mr.ⵠⲆⵠ] = Bq(fu(a * 0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    ᐃᐃ[822][Mr.ᐃⵠΔ] = Bq(fu(a * 0.4, ["#030d14", "#11635e", "#02373e"]));
    ᐃᐃ[823] = Bq(Fd(a * 0.6, ["#BB0000"]));
    ᐃᐃ[824] = Bq(Fd(a * 0.6, ["#DBE71C"]));
    ᐃᐃ[825] = Bq(Fd(a * 0.6, ["#00BB00"]));
    ᐃᐃ[109] = [];
    ᐃᐃ[109][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[109][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[109][Mr.ⵠⲆⵠ].push(ju(a * 1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], false, 0));
    ᐃᐃ[109][Mr.ⵠⲆⵠ].push(ju(a * 1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], xo, 0));
    ᐃᐃ[109][Mr.ⵠⲆⵠ].push(ju(a * 0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], Ah, 0));
    ᐃᐃ[109][Mr.ⵠⲆⵠ].push(ju(a * 0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], Ck, 0));
    ᐃᐃ[109][Mr.ⵠⲆⵠ].push(ju(a * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], x, 0));
    ᐃᐃ[109][Mr.ⵠⲆⵠ].push(ju(a * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], Ck, 0));
    ᐃᐃ[109][Mr.ᐃⵠΔ].push(ju(a * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], false, 0));
    ᐃᐃ[109][Mr.ᐃⵠΔ].push(ju(a * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], yk, 0));
    ᐃᐃ[109][Mr.ᐃⵠΔ].push(ju(a * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], false, 0));
    ᐃᐃ[109][Mr.ᐃⵠΔ].push(ju(a * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], Sg, 0));
    ᐃᐃ[109][Mr.ᐃⵠΔ].push(ju(a * 0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, 0));
    ᐃᐃ[109][Mr.ᐃⵠΔ].push(ju(a * 0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
    ᐃᐃ[307] = [];
    ᐃᐃ[307][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[307][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[307][Mr.ⵠⲆⵠ].push(Bq(iu(du(a * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], false), ᐃᐃ[109][Mr.ⵠⲆⵠ][0])));
    ᐃᐃ[307][Mr.ⵠⲆⵠ].push(Bq(iu(du(a * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], true), ᐃᐃ[109][Mr.ⵠⲆⵠ][1])));
    ᐃᐃ[307][Mr.ᐃⵠΔ].push(Bq(iu(du(a * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], Il), ᐃᐃ[109][Mr.ᐃⵠΔ][0])));
    ᐃᐃ[307][Mr.ᐃⵠΔ].push(Bq(iu(du(a * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], Kh), ᐃᐃ[109][Mr.ᐃⵠΔ][1])));
    ᐃᐃ[307][Mr.ⵠⲆⵠ].push(Bq(iu(du(a * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], Il), ᐃᐃ[109][Mr.ⵠⲆⵠ][2])));
    ᐃᐃ[307][Mr.ⵠⲆⵠ].push(Bq(iu(du(a * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], true), ᐃᐃ[109][Mr.ⵠⲆⵠ][2])));
    ᐃᐃ[307][Mr.ᐃⵠΔ].push(Bq(iu(du(a * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], Qi), ᐃᐃ[109][Mr.ᐃⵠΔ][2])));
    ᐃᐃ[307][Mr.ᐃⵠΔ].push(Bq(iu(du(a * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], true), ᐃᐃ[109][Mr.ᐃⵠΔ][3])));
    ᐃᐃ[109][Mr.ⵠⲆⵠ][5] = Bq(ᐃᐃ[109][Mr.ⵠⲆⵠ][5]);
    ᐃᐃ[109][Mr.ⵠⲆⵠ][4] = Bq(ᐃᐃ[109][Mr.ⵠⲆⵠ][4]);
    ᐃᐃ[109][Mr.ⵠⲆⵠ][3] = Bq(ᐃᐃ[109][Mr.ⵠⲆⵠ][3]);
    ᐃᐃ[109][Mr.ⵠⲆⵠ][2] = Bq(ᐃᐃ[109][Mr.ⵠⲆⵠ][2]);
    ᐃᐃ[109][Mr.ⵠⲆⵠ][1] = Bq(ᐃᐃ[109][Mr.ⵠⲆⵠ][1]);
    ᐃᐃ[109][Mr.ⵠⲆⵠ][0] = Bq(ᐃᐃ[109][Mr.ⵠⲆⵠ][0]);
    ᐃᐃ[109][Mr.ᐃⵠΔ][5] = Bq(ᐃᐃ[109][Mr.ᐃⵠΔ][5]);
    ᐃᐃ[109][Mr.ᐃⵠΔ][4] = Bq(ᐃᐃ[109][Mr.ᐃⵠΔ][4]);
    ᐃᐃ[109][Mr.ᐃⵠΔ][3] = Bq(ᐃᐃ[109][Mr.ᐃⵠΔ][3]);
    ᐃᐃ[109][Mr.ᐃⵠΔ][2] = Bq(ᐃᐃ[109][Mr.ᐃⵠΔ][2]);
    ᐃᐃ[109][Mr.ᐃⵠΔ][1] = Bq(ᐃᐃ[109][Mr.ᐃⵠΔ][1]);
    ᐃᐃ[109][Mr.ᐃⵠΔ][0] = Bq(ᐃᐃ[109][Mr.ᐃⵠΔ][0]);
    ᐃᐃ[8] = [];
    ᐃᐃ[8][Mr.ⵠⲆⵠ] = Bq(Jd(4, bu(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    ᐃᐃ[8][Mr.ᐃⵠΔ] = Bq(Jd(4, bu(a * 0.75, Zs, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    ᐃᐃ[1] = [];
    ᐃᐃ[1][Mr.ⵠⲆⵠ] = Bq(Jd(4, bu(a * 0.75, jr, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ᐃᐃ[1][Mr.ᐃⵠΔ] = Bq(Jd(4, bu(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    ᐃᐃ[3] = [];
    ᐃᐃ[3][Mr.ⵠⲆⵠ] = Bq(Jd(4, bu(a * 0.75, un, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ᐃᐃ[3][Mr.ᐃⵠΔ] = Bq(Jd(4, bu(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
    ᐃᐃ[4] = [];
    ᐃᐃ[4][Mr.ⵠⲆⵠ] = Bq(Jd(4, bu(a * 0.75, Er, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ᐃᐃ[4][Mr.ᐃⵠΔ] = Bq(Jd(4, bu(a * 0.75, Sg, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ᐃᐃ[31] = [];
    ᐃᐃ[31][Mr.ⵠⲆⵠ] = Bq(Jd(4, bu(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ᐃᐃ[31][Mr.ᐃⵠΔ] = Bq(Jd(4, bu(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ᐃᐃ[9] = [];
    ᐃᐃ[9][Mr.ⵠⲆⵠ] = Bq(Jd(3, mu(a * 0.17, Bl, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    ᐃᐃ[9][Mr.ᐃⵠΔ] = Bq(Jd(3, mu(a * 0.17, Bl, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    ᐃᐃ[199] = [];
    ᐃᐃ[199][Mr.ⵠⲆⵠ] = Bq(Jd(3, wu(a * 0.32, k, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    ᐃᐃ[199][Mr.ᐃⵠΔ] = Bq(Jd(3, wu(a * 0.42, Kl, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    ᐃᐃ[57] = [];
    ᐃᐃ[57][Mr.ⵠⲆⵠ] = Bq(Jd(3, gu(a * 0.4, Er, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    ᐃᐃ[57][Mr.ᐃⵠΔ] = Bq(Jd(3, gu(a * 0.4, pk, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    ᐃᐃ[0] = [];
    ᐃᐃ[0][Mr.ⵠⲆⵠ] = Bq(Jd(3, uu(a * 0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    ᐃᐃ[0][Mr.ᐃⵠΔ] = Bq(Jd(3, uu(a * 0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    ᐃᐃ[5] = [];
    ᐃᐃ[5][Mr.ⵠⲆⵠ] = Bq(Jd(3, tu(a * 0.4, Er, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    ᐃᐃ[5][Mr.ᐃⵠΔ] = Bq(Jd(3, tu(a * 0.4, Er, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    ᐃᐃ[6] = [];
    ᐃᐃ[6][Mr.ⵠⲆⵠ] = Bq(Jd(3, yu(a * 0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    ᐃᐃ[6][Mr.ᐃⵠΔ] = Bq(Jd(3, yu(a * 0.4, lj, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    ᐃᐃ[30] = [];
    ᐃᐃ[30][Mr.ⵠⲆⵠ] = Bq(Jd(3, xu(a * 0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    ᐃᐃ[30][Mr.ᐃⵠΔ] = Bq(Jd(3, xu(a * 0.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    ᐃᐃ[285] = [];
    ᐃᐃ[285][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[285][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[285][Mr.ⵠⲆⵠ].push(Bq(Eu(a * 0.9, 0, ["#0d4f35"], 0)));
    ᐃᐃ[285][Mr.ⵠⲆⵠ].push(Bq(Eu(a * 0.9, 0, ["#0d4f35"], 1)));
    ᐃᐃ[285][Mr.ⵠⲆⵠ].push(Bq(Eu(a * 0.9, 0, ["#0d4f35"], 2)));
    ᐃᐃ[285][Mr.ᐃⵠΔ].push(Bq(Eu(a * 0.9, 0, ["#053339"], 0)));
    ᐃᐃ[285][Mr.ᐃⵠΔ].push(Bq(Eu(a * 0.9, 0, ["#053339"], 1)));
    ᐃᐃ[285][Mr.ᐃⵠΔ].push(Bq(Eu(a * 0.9, 0, ["#053339"], 2)));
    ᐃᐃ[285][Mr.ⵠⲆⵠ].push(Bq(dm(a * 0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    ᐃᐃ[285][Mr.ⵠⲆⵠ].push(Bq(dm(a * 0.8, ["#292002", "#ba930e", "#6d5704"])));
    ᐃᐃ[285][Mr.ᐃⵠΔ].push(Bq(dm(a * 0.9, ["#052919", "#0a4738", "#06321f"])));
    ᐃᐃ[285][Mr.ᐃⵠΔ].push(Bq(dm(a * 0.8, ["#052918", "#08491c", "#063417"])));
    ᐃᐃ[183] = [];
    ᐃᐃ[183][Mr.ⵠⲆⵠ] = Bq(Jd(Math.PI / 2, Jc(a * 0.25, V, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
    ᐃᐃ[183][Mr.ᐃⵠΔ] = Bq(Jd(Math.PI / 2, Jc(a * 0.25, yb, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
    ᐃᐃ[803] = [];
    ᐃᐃ[803].push(Bq(bc(a * 0.25, ["#44301b", "#57442a", "#523e26"], 0)));
    ᐃᐃ[803].push(Bq(bc(a * 0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
    ᐃᐃ[803].push(Bq(bc(a * 0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
    ᐃᐃ[802] = [];
    ᐃᐃ[802][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[802][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[802][Mr.ⵠⲆⵠ].push(Bq(Jd(Math.PI / 2, jp(a * 0.25, Qg, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
    ᐃᐃ[802][Mr.ᐃⵠΔ].push(Bq(Jd(Math.PI / 2, jp(a * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
    ᐃᐃ[802][Mr.ⵠⲆⵠ].push(Bq(Jd(Math.PI / 2, jp(a * 0.25, Qg, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
    ᐃᐃ[802][Mr.ᐃⵠΔ].push(Bq(Jd(Math.PI / 2, jp(a * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
    ᐃᐃ[802][Mr.ⵠⲆⵠ].push(Bq(Jd(Math.PI / 2, jp(a * 0.25, $n, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
    ᐃᐃ[802][Mr.ᐃⵠΔ].push(Bq(Jd(Math.PI / 2, jp(a * 0.25, Pn, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
    ᐃᐃ[802][Mr.ⵠⲆⵠ].push(Bq(Jd(Math.PI / 2, jp(a * 0.25, Wl, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
    ᐃᐃ[802][Mr.ᐃⵠΔ].push(Bq(Jd(Math.PI / 2, jp(a * 0.25, Qg, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
    ᐃᐃ[110] = [];
    ᐃᐃ[110][Mr.ⵠⲆⵠ] = [Bq(bm(a * 1.2, _q, ["#0e3022", "#0b8052", "#077b49"]))];
    ᐃᐃ[110][Mr.ᐃⵠΔ] = [Bq(bm(a * 1.2, true, ["#030d14", "#084442", "#0a4049"]))];
    ᐃᐃ[623] = [];
    ᐃᐃ[623][Mr.ⵠⲆⵠ] = Bq(bm(a * 0.8, vq, ["#0e3022", "#68622D", "#665329"]));
    ᐃᐃ[623][Mr.ᐃⵠΔ] = Bq(bm(a * 0.8, true, ["#030d14", "#0F3A24", "#083326"]));
    ᐃᐃ[189] = [];
    ᐃᐃ[189][Mr.ⵠⲆⵠ] = Bq(Rc(a * 0.5, xo, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    ᐃᐃ[189][Mr.ᐃⵠΔ] = Bq(Rc(a * 0.5, ch, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    ᐃᐃ[192] = [];
    ᐃᐃ[192][Mr.ⵠⲆⵠ] = Bq(Md(a * 0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    ᐃᐃ[192][Mr.ᐃⵠΔ] = Bq(Md(a * 0.5, Zs, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    ᐃᐃ[194] = [];
    ᐃᐃ[194][Mr.ⵠⲆⵠ] = Bq(_p(a * 0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
    ᐃᐃ[194][Mr.ᐃⵠΔ] = Bq(_p(a * 0.5, true, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    ᐃᐃ[287] = [];
    ᐃᐃ[287][Mr.ⵠⲆⵠ] = Bq(bm(a * 0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
    ᐃᐃ[287][Mr.ᐃⵠΔ] = Bq(bm(a * 0.8, true, ["#030d14", "#084442", "#0a4049"]));
    ᐃᐃ[813] = [];
    ᐃᐃ[813][Mr.ⵠⲆⵠ] = Bq(Rc(a * 0.5, Zs, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    ᐃᐃ[813][Mr.ᐃⵠΔ] = Bq(Rc(a * 0.5, true, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    ᐃᐃ[839] = [];
    ᐃᐃ[839][Mr.ⵠⲆⵠ] = Bq(Md(a * 0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    ᐃᐃ[839][Mr.ᐃⵠΔ] = Bq(Md(a * 0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    ᐃᐃ[869] = [];
    ᐃᐃ[869][Mr.ⵠⲆⵠ] = Bq(_p(a * 0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    ᐃᐃ[869][Mr.ᐃⵠΔ] = Bq(_p(a * 0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    ᐃᐃ[854] = [];
    ᐃᐃ[854][Mr.ⵠⲆⵠ] = Bq(Xc(a * 0.45, true, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    ᐃᐃ[854][Mr.ᐃⵠΔ] = Bq(Xc(a * 0.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    ᐃᐃ[859] = Bq(Xc(a * 0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    ᐃᐃ[294] = [];
    ᐃᐃ[294][Mr.ⵠⲆⵠ] = Bq(am(a * 1.4, 0, ["#ac222a", "#e6636a"]));
    ᐃᐃ[294][Mr.ᐃⵠΔ] = Bq(am(a * 1.4, 0, ["#46195e", "#744188"]));
    ᐃᐃ[288] = [];
    ᐃᐃ[288][Mr.ⵠⲆⵠ] = Bq(Zt(a * 0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    ᐃᐃ[288][Mr.ᐃⵠΔ] = Bq(Zt(a * 0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    ᐃᐃ[118] = [];
    ᐃᐃ[118][Mr.ⵠⲆⵠ] = Bq(Yt(a * 0.9, 0, ["#4d2d14", "#432516"]));
    ᐃᐃ[118][Mr.ᐃⵠΔ] = Bq(Yt(a * 0.9, 0, ["#282404", "#0a0a01"]));
    ᐃᐃ[113] = [];
    ᐃᐃ[113][Mr.ⵠⲆⵠ] = Bq(Wt(a * 0.9, 0, ["#4d2d14", "#432516"]));
    ᐃᐃ[113][Mr.ᐃⵠΔ] = Bq(Wt(a * 0.9, 0, ["#282404", "#0a0a01"]));
    ᐃᐃ[289] = [];
    ᐃᐃ[289][Mr.ⵠⲆⵠ] = Bq(Xt(a * 0.9, 0, ["#efd435"]));
    ᐃᐃ[289][Mr.ᐃⵠΔ] = Bq(Xt(a * 0.9, 0, ["#fffabb"]));
    ᐃᐃ[282] = [];
    ᐃᐃ[282][Mr.ⵠⲆⵠ] = Bq(_t(a * 0.9, 0, ["#efd435"]));
    ᐃᐃ[282][Mr.ᐃⵠΔ] = Bq(_t(a * 0.9, 0, ["#fffabb"]));
    ᐃᐃ[816] = [];
    ᐃᐃ[816][Mr.ⵠⲆⵠ] = Bq(Xt(a * 0.9, 0, ["#efd435"]));
    ᐃᐃ[816][Mr.ᐃⵠΔ] = Bq(Xt(a * 0.9, 0, ["rgba(255, 84, 0, 1)"]));
    ᐃᐃ[817] = [];
    ᐃᐃ[817][Mr.ⵠⲆⵠ] = Bq(_t(a * 0.9, 0, ["#efd435"]));
    ᐃᐃ[817][Mr.ᐃⵠΔ] = Bq(_t(a * 0.9, 0, ["#ff5704"]));
    ᐃᐃ[324] = Bq(qd(a, "#ffffff"));
    ᐃᐃ[301] = Bq(qd(a * 1.5, "#ffffff"));
    ᐃᐃ[306] = Bq(um(a, "Your score:", a * 15, "#FFF"));
    ᐃᐃ[655] = Bq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      Cd(d, a * 119.5, a * 140.125, a * 19);
      cd(d, Qq, b[1], a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      cd(d, b[0], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      cd(d, undefined, b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      cd(d, mb, b[3], a * 10);
      Cd(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      cd(d, b[4], b[5], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      cd(d, b[6], b[7], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      cd(d, undefined, b[8], a * 5);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      md(d, a * -39, a * -40, a * 78, a * 78, a * 10);
      d.restore();
      cd(d, b[9]);
      d.save();
      d.translate(a * 167, a * 80.125);
      md(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
      d.restore();
      cd(d, b[9]);
      return c;
    }(a * 0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    ᐃᐃ[656] = Δᐃ.ΔᐃⵠΔᐃΔⲆ;
    ᐃᐃ[135] = [];
    ᐃᐃ[135][Mr.ⵠⲆⵠ] = Bq(Ht(a * 1.5, pk, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃᐃ[135][Mr.ᐃⵠΔ] = Bq(Ht(a * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃᐃ[641] = [];
    ᐃᐃ[641][Mr.ⵠⲆⵠ] = Bq(Jt(a * 2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃᐃ[641][Mr.ᐃⵠΔ] = Bq(Jt(a * 2, pk, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃᐃ[642] = [];
    ᐃᐃ[642][Mr.ⵠⲆⵠ] = Bq(Lt(a * 1.5, V, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃᐃ[642][Mr.ᐃⵠΔ] = Bq(Lt(a * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃᐃ[134] = [];
    ᐃᐃ[134][Mr.ⵠⲆⵠ] = Bq(Et(a * 2.2, 0, ["#A89F67", "#9E8456"]));
    ᐃᐃ[134][Mr.ᐃⵠΔ] = Bq(Et(a * 2.2, 0, ["#0B4049", "#08383D"]));
    ᐃᐃ[638] = [];
    ᐃᐃ[638][Mr.ⵠⲆⵠ] = Bq(Et(a * 2.2, 0, ["#68622D", "#665329"]));
    ᐃᐃ[638][Mr.ᐃⵠΔ] = Bq(Et(a * 2.2, 0, ["#0F3A24", "#083326"]));
    ᐃᐃ[321] = [];
    ᐃᐃ[321][Mr.ⵠⲆⵠ] = Bq(em(a * 0.8, 0, ["#A89F67", "#9E8456"]));
    ᐃᐃ[321][Mr.ᐃⵠΔ] = Bq(em(a * 0.8, 0, ["#15514F", "#0F3F3D"]));
    ᐃᐃ[811] = [];
    ᐃᐃ[811][Mr.ⵠⲆⵠ] = Bq(em(a * 0.8, 0, ["#c67933", "#b17238"]));
    ᐃᐃ[811][Mr.ᐃⵠΔ] = Bq(em(a * 0.8, 0, ["#043c37", "#032b23"]));
    ᐃᐃ[984] = [];
    ᐃᐃ[984][Mr.ⵠⲆⵠ] = Bq(em(a * 0.8, 0, ["#3a8214", "#4a9c1e"]));
    ᐃᐃ[984][Mr.ᐃⵠΔ] = Bq(em(a * 0.8, 0, ["#032d29", "#044640"]));
    ᐃᐃ[837] = [];
    ᐃᐃ[837][Mr.ⵠⲆⵠ] = Bq(em(a * 0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    ᐃᐃ[837][Mr.ᐃⵠΔ] = Bq(em(a * 0.8, 0, ["#1c6161", "#07413f"]));
    ᐃᐃ[848] = [];
    ᐃᐃ[848][Mr.ⵠⲆⵠ] = Bq(em(a * 0.8, 0, ["#328a56", "#449573"]));
    ᐃᐃ[848][Mr.ᐃⵠΔ] = Bq(em(a * 0.8, 0, ["#043c37", "#032b23"]));
    ᐃᐃ[952] = [];
    ᐃᐃ[952][Mr.ⵠⲆⵠ] = Bq(em(a * 0.8, 0, ["#c98e2f", "#a36b11"]));
    ᐃᐃ[952][Mr.ᐃⵠΔ] = Bq(em(a * 0.8, 0, ["#043c37", "#032b23"]));
    ᐃᐃ[962] = [];
    ᐃᐃ[962][Mr.ⵠⲆⵠ] = Bq(em(a * 0.8, 0, ["#b22419", "#99110e"]));
    ᐃᐃ[962][Mr.ᐃⵠΔ] = Bq(em(a * 0.8, 0, ["#04323c", "#03222b"]));
    ᐃᐃ[969] = [];
    ᐃᐃ[969][Mr.ⵠⲆⵠ] = Bq(em(a * 0.8, 0, ["#13a56d", "#098a58"]));
    ᐃᐃ[969][Mr.ᐃⵠΔ] = Bq(em(a * 0.8, 0, ["#043c37", "#032b23"]));
    ᐃᐃ[657] = Ut(1, [{
      f: Et,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃᐃ[723] = Ut(1, [{
      f: Wt,
      x: 0,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃᐃ[724] = Ut(1, [{
      f: Bc,
      x: 0,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃᐃ[334] = Ut(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃᐃ[115] = [];
    ᐃᐃ[115][Mr.ⵠⲆⵠ] = Bq(jd(a * 0.9, 0, ["#7d613e", "#9e7e5a"]));
    ᐃᐃ[115][Mr.ᐃⵠΔ] = Bq(jd(a * 0.9, 0, ["#084442", "#125e5a"]));
    ᐃᐃ[132] = [];
    ᐃᐃ[132][Mr.ⵠⲆⵠ] = Bq(jd(a * 0.9, 0, ["#9E8456", "#A89F67"]));
    ᐃᐃ[132][Mr.ᐃⵠΔ] = Bq(jd(a * 0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    ᐃᐃ[668] = [];
    ᐃᐃ[668][Mr.ⵠⲆⵠ] = Bq(jd(a * 0.9, 0, ["#665329", "#68622D"]));
    ᐃᐃ[668][Mr.ᐃⵠΔ] = Bq(jd(a * 0.9, 0, ["#083326", "#0F3A24"]));
    ᐃᐃ[188] = [];
    ᐃᐃ[188][Mr.ⵠⲆⵠ] = Bq(jd(a * 0.9, 0, ["#c67933", "#ec952d"]));
    ᐃᐃ[188][Mr.ᐃⵠΔ] = Bq(jd(a * 0.9, 0, ["#0e6553", "#094437"]));
    ᐃᐃ[210] = [];
    ᐃᐃ[210][Mr.ⵠⲆⵠ] = Bq(jd(a * 0.9, 0, ["#375809", "#4b770e"]));
    ᐃᐃ[210][Mr.ᐃⵠΔ] = Bq(jd(a * 0.9, 0, ["#09542d", "#0d5d2f"]));
    ᐃᐃ[985] = [];
    ᐃᐃ[985][Mr.ⵠⲆⵠ] = Bq(jd(a * 0.9, 0, ["#585809", "#72770e"]));
    ᐃᐃ[985][Mr.ᐃⵠΔ] = Bq(jd(a * 0.9, 0, ["#295209", "#305d0d"]));
    ᐃᐃ[191] = [];
    ᐃᐃ[191][Mr.ⵠⲆⵠ] = Bq(jd(a * 0.9, 0, ["#b9b094", "#e2d2c0"]));
    ᐃᐃ[191][Mr.ᐃⵠΔ] = Bq(jd(a * 0.9, 0, ["#126366", "#0d484b"]));
    ᐃᐃ[193] = [];
    ᐃᐃ[193][Mr.ⵠⲆⵠ] = Bq(jd(a * 0.9, 0, ["#3f8662", "#30915d"]));
    ᐃᐃ[193][Mr.ᐃⵠΔ] = Bq(jd(a * 0.9, 0, ["#0e6553", "#094437"]));
    ᐃᐃ[812] = [];
    ᐃᐃ[812][Mr.ⵠⲆⵠ] = Bq(jd(a * 0.9, 0, ["#c79153", "#dfa868"]));
    ᐃᐃ[812][Mr.ᐃⵠΔ] = Bq(jd(a * 0.9, 0, ["#073927", "#075040"]));
    ᐃᐃ[838] = [];
    ᐃᐃ[838][Mr.ⵠⲆⵠ] = Bq(jd(a * 0.9, 0, ["#768b5b", "#819984"]));
    ᐃᐃ[838][Mr.ᐃⵠΔ] = Bq(jd(a * 0.9, 0, ["#0c4540", "#0e5153"]));
    ᐃᐃ[849] = [];
    ᐃᐃ[849][Mr.ⵠⲆⵠ] = Bq(jd(a * 0.9, 0, ["#567465", "#627c6e"]));
    ᐃᐃ[849][Mr.ᐃⵠΔ] = Bq(jd(a * 0.9, 0, ["#073927", "#075040"]));
    ᐃᐃ[204] = [];
    ᐃᐃ[204][Mr.ⵠⲆⵠ] = Bq(jd(a * 0.9, 0, ["#996b3a", "#bf956b"]));
    ᐃᐃ[204][Mr.ᐃⵠΔ] = Bq(jd(a * 0.9, 0, ["#0e6553", "#094437"]));
    ᐃᐃ[953] = [];
    ᐃᐃ[953][Mr.ⵠⲆⵠ] = Bq(jd(a * 0.9, 0, ["#7a634a", "#a68f77"]));
    ᐃᐃ[953][Mr.ᐃⵠΔ] = Bq(jd(a * 0.9, 0, ["#1e4d43", "#113c32"]));
    ᐃᐃ[206] = [];
    ᐃᐃ[206][Mr.ⵠⲆⵠ] = Bq(jd(a * 0.9, 0, ["#99403c", "#bc796c"]));
    ᐃᐃ[206][Mr.ᐃⵠΔ] = Bq(jd(a * 0.9, 0, ["#1e434d", "#11303c"]));
    ᐃᐃ[963] = [];
    ᐃᐃ[963][Mr.ⵠⲆⵠ] = Bq(jd(a * 0.9, 0, ["#88504e", "#b3857c"]));
    ᐃᐃ[963][Mr.ᐃⵠΔ] = Bq(jd(a * 0.9, 0, ["#253b41", "#162930"]));
    ᐃᐃ[208] = [];
    ᐃᐃ[208][Mr.ⵠⲆⵠ] = Bq(jd(a * 0.9, 0, ["#0f8870", "#23af93"]));
    ᐃᐃ[208][Mr.ᐃⵠΔ] = Bq(jd(a * 0.9, 0, ["#032829", "#083233"]));
    ᐃᐃ[970] = [];
    ᐃᐃ[970][Mr.ⵠⲆⵠ] = Bq(jd(a * 0.9, 0, ["#618a20", "#84a74e"]));
    ᐃᐃ[970][Mr.ᐃⵠΔ] = Bq(jd(a * 0.9, 0, ["#1f4632", "#335d47"]));
    ᐃᐃ[114] = [];
    ᐃᐃ[114][Mr.ⵠⲆⵠ] = Bq(Zd(a * 1.2, Kh, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    ᐃᐃ[114][Mr.ᐃⵠΔ] = Bq(Zd(a * 1.2, pk, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    ᐃᐃ[162] = [];
    ᐃᐃ[162][Mr.ⵠⲆⵠ] = Bq(wm(a * 1, yb, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ᐃᐃ[162][Mr.ᐃⵠΔ] = Bq(wm(a * 1, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃᐃ[165] = [];
    ᐃᐃ[165][Mr.ⵠⲆⵠ] = Bq(cm(a * 1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃᐃ[165][Mr.ᐃⵠΔ] = Bq(cm(a * 1, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃᐃ[122] = [];
    ᐃᐃ[122][Mr.ⵠⲆⵠ] = Bq(hm(a * 1, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃᐃ[122][Mr.ᐃⵠΔ] = Bq(hm(a * 1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃᐃ[163] = [];
    ᐃᐃ[163][Mr.ⵠⲆⵠ] = Bq(hm(a * 1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ᐃᐃ[163][Mr.ᐃⵠΔ] = Bq(hm(a * 1, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ᐃᐃ[164] = [];
    ᐃᐃ[164][Mr.ⵠⲆⵠ] = Bq(om(a * 1, pk, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ᐃᐃ[164][Mr.ᐃⵠΔ] = Bq(om(a * 1, vq, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ᐃᐃ[160] = [];
    ᐃᐃ[160][Mr.ⵠⲆⵠ] = Bq(Hm(a * 0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ᐃᐃ[160][Mr.ᐃⵠΔ] = Bq(Hm(a * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃᐃ[169] = [];
    ᐃᐃ[169][Mr.ⵠⲆⵠ] = Bq(Lm(a * 0.8, _q, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ᐃᐃ[169][Mr.ᐃⵠΔ] = Bq(Lm(a * 0.8, Kl, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ᐃᐃ[170] = [];
    ᐃᐃ[170][Mr.ⵠⲆⵠ] = Bq(jm(a * 0.8, Er, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃᐃ[170][Mr.ᐃⵠΔ] = Bq(jm(a * 0.8, un, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃᐃ[168] = [];
    ᐃᐃ[168][Mr.ⵠⲆⵠ] = Bq(Wm(a * 0.8, lj, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ᐃᐃ[168][Mr.ᐃⵠΔ] = Bq(Wm(a * 0.8, V, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ᐃᐃ[123] = [];
    ᐃᐃ[123][Mr.ⵠⲆⵠ] = Bq(Wm(a * 0.8, lj, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃᐃ[123][Mr.ᐃⵠΔ] = Bq(Wm(a * 0.8, Bl, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃᐃ[166] = [];
    ᐃᐃ[166][Mr.ⵠⲆⵠ] = Bq(Jm(a * 1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    ᐃᐃ[166][Mr.ᐃⵠΔ] = Bq(Jm(a * 1.5, Er, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃᐃ[336] = [];
    ᐃᐃ[336][Mr.ⵠⲆⵠ] = Bq(Jm(a * 1, Vn, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃᐃ[336][Mr.ᐃⵠΔ] = Bq(Jm(a * 1, Wl, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    ᐃᐃ[171] = [];
    ᐃᐃ[171][Mr.ⵠⲆⵠ] = Bq(Am(a * 1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    ᐃᐃ[171][Mr.ᐃⵠΔ] = Bq(Am(a * 1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    ᐃᐃ[373] = [];
    ᐃᐃ[373][Mr.ⵠⲆⵠ] = Bq(Am(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃᐃ[373][Mr.ᐃⵠΔ] = Bq(Am(a * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃᐃ[124] = [];
    ᐃᐃ[124][Mr.ⵠⲆⵠ] = Bq(Am(a * 1.5, Bl, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃᐃ[124][Mr.ᐃⵠΔ] = Bq(Am(a * 1.5, k, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃᐃ[500] = [];
    ᐃᐃ[500][Mr.ⵠⲆⵠ] = Bq(Am(a * 1, $n, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃᐃ[500][Mr.ᐃⵠΔ] = Bq(Am(a * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃᐃ[172] = [];
    ᐃᐃ[172][Mr.ⵠⲆⵠ] = Bq(Mm(a * 1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    ᐃᐃ[172][Mr.ᐃⵠΔ] = Bq(Mm(a * 1.5, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    ᐃᐃ[376] = [];
    ᐃᐃ[376][Mr.ⵠⲆⵠ] = Bq(Mm(a * 1, jj, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃᐃ[376][Mr.ᐃⵠΔ] = Bq(Mm(a * 1, Iq, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃᐃ[173] = [];
    ᐃᐃ[173][Mr.ⵠⲆⵠ] = Bq(Zm(a * 1.5, pk, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃᐃ[173][Mr.ᐃⵠΔ] = Bq(Zm(a * 1.5, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃᐃ[379] = [];
    ᐃᐃ[379][Mr.ⵠⲆⵠ] = Bq(Zm(a * 1, Qi, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃᐃ[379][Mr.ᐃⵠΔ] = Bq(Zm(a * 1, pa, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃᐃ[167] = [];
    ᐃᐃ[167][Mr.ⵠⲆⵠ] = Bq(Om(a * 0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ᐃᐃ[167][Mr.ᐃⵠΔ] = Bq(Om(a * 0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
    ᐃᐃ[691] = [];
    ᐃᐃ[691][Mr.ⵠⲆⵠ] = Bq(qc(a * 0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    ᐃᐃ[691][Mr.ᐃⵠΔ] = Bq(qc(a * 0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    ᐃᐃ[264] = [];
    ᐃᐃ[264][Mr.ⵠⲆⵠ] = Bq(Xd(a * 0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    ᐃᐃ[264][Mr.ᐃⵠΔ] = Bq(Xd(a * 0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    ᐃᐃ[260] = [];
    ᐃᐃ[260][Mr.ⵠⲆⵠ] = Bq(Jd(Math.PI, Yd(a * 0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    ᐃᐃ[260][Mr.ᐃⵠΔ] = Bq(Jd(Math.PI, Yd(a * 0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    ᐃᐃ[266] = Bq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      cd(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      cd(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      cd(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      cd(d, mb, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      cd(d, mi, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      cd(d, mb, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      cd(d, Ks, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      cd(d, Wd, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      cd(d, mq, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      cd(d, undefined, b[0], 4);
      return c;
    }(a * 0.6, ["#FFFFFF"]));
    ᐃᐃ[299] = [];
    ᐃᐃ[299][Mr.ⵠⲆⵠ] = Bq($d(a * 1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    ᐃᐃ[299][Mr.ᐃⵠΔ] = Bq($d(a * 1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    ᐃᐃ[10] = [];
    ᐃᐃ[10][Mr.ⵠⲆⵠ] = Bq(qm(a * 0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    ᐃᐃ[10][Mr.ᐃⵠΔ] = Bq(qm(a * 0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    ᐃᐃ[11] = [];
    ᐃᐃ[11][Mr.ⵠⲆⵠ] = Bq(Vm(a * 0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    ᐃᐃ[11][Mr.ᐃⵠΔ] = Bq(Vm(a * 0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    ᐃᐃ[40] = [];
    ᐃᐃ[40][Mr.ⵠⲆⵠ] = Bq(Qm(a * 0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    ᐃᐃ[40][Mr.ᐃⵠΔ] = Bq(Qm(a * 0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    ᐃᐃ[41] = [];
    ᐃᐃ[41][Mr.ⵠⲆⵠ] = Bq(ku(a * 0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    ᐃᐃ[41][Mr.ᐃⵠΔ] = Bq(ku(a * 0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    ᐃᐃ[42] = [];
    ᐃᐃ[42][Mr.ⵠⲆⵠ] = Bq($t(a * 0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    ᐃᐃ[42][Mr.ᐃⵠΔ] = Bq($t(a * 0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    ᐃᐃ[716] = [];
    ᐃᐃ[716][Mr.ⵠⲆⵠ] = Bq(uc(a * 0.42, Zs, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    ᐃᐃ[716][Mr.ᐃⵠΔ] = Bq(uc(a * 0.42, un, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    ᐃᐃ[720] = [];
    ᐃᐃ[720][Mr.ⵠⲆⵠ] = Bq(Bp(a * 0.9, ["#e4c027"]));
    ᐃᐃ[720][Mr.ᐃⵠΔ] = Bq(Bp(a * 0.9, ["#D8E57F"]));
    ᐃᐃ[144] = [];
    ᐃᐃ[144][Mr.ⵠⲆⵠ] = Bq(sp(a * 0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    ᐃᐃ[144][Mr.ᐃⵠΔ] = Bq(sp(a * 0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    ᐃᐃ[722] = Bq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      md(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
      d.restore();
      cd(d, b[0], b[1], a * 4);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      md(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
      d.restore();
      cd(d, b[6], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      cd(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      cd(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      cd(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      cd(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 72, a * 68.5);
      md(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
      d.restore();
      cd(d, b[4]);
      d.save();
      d.translate(a * 72, a * 175.5);
      md(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      cd(d, b[4]);
      d.save();
      d.translate(a * 72, a * 279.5);
      md(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
      d.restore();
      cd(d, b[4]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      cd(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      cd(d, b[3], b[3], a * 10);
      return c;
    }(a * 1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    ᐃᐃ[407] = [];
    ᐃᐃ[407][Mr.ⵠⲆⵠ] = Bq(Bm(a * 0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    ᐃᐃ[407][Mr.ᐃⵠΔ] = Bq(Bm(a * 0.5, Zs, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    ᐃᐃ[119] = [];
    ᐃᐃ[119][Mr.ⵠⲆⵠ] = Bq(xm(a * 0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    ᐃᐃ[119][Mr.ᐃⵠΔ] = Bq(xm(a * 0.5, Bl, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    ᐃᐃ[411] = Bq(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      md(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      cd(e, c[0], c[1], 4);
      return d;
    }(a * 0.8, 0, ["#5f6061", "#939393"]));
    ᐃᐃ[412] = Ut(1, [{
      f: Wt,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
    ᐃᐃ[198] = [];
    ᐃᐃ[198][Mr.ⵠⲆⵠ] = Bq(Im(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ᐃᐃ[198][Mr.ᐃⵠΔ] = Bq(Im(a * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ᐃᐃ[913] = [];
    ᐃᐃ[913][Mr.ⵠⲆⵠ] = Bq(_m(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ᐃᐃ[913][Mr.ᐃⵠΔ] = Bq(_m(a * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ᐃᐃ[18] = [];
    ᐃᐃ[18][Mr.ⵠⲆⵠ] = Bq(Jd(3, Em(a * 0.7, vq, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    ᐃᐃ[18][Mr.ᐃⵠΔ] = Bq(Jd(3, Em(a * 0.7, un, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    ᐃᐃ[12] = [];
    ᐃᐃ[12][Mr.ⵠⲆⵠ] = Bq(Jd(3, Rm(a * 0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    ᐃᐃ[12][Mr.ᐃⵠΔ] = Bq(Jd(3, Rm(a * 0.7, V, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    ᐃᐃ[13] = [];
    ᐃᐃ[13][Mr.ⵠⲆⵠ] = Bq(Jd(3, Xm(a * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    ᐃᐃ[13][Mr.ᐃⵠΔ] = Bq(Jd(3, Xm(a * 0.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    ᐃᐃ[14] = [];
    ᐃᐃ[14][Mr.ⵠⲆⵠ] = Bq(Jd(3, ec(a * 0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    ᐃᐃ[14][Mr.ᐃⵠΔ] = Bq(Jd(3, ec(a * 0.67, true, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    ᐃᐃ[15] = [];
    ᐃᐃ[15][Mr.ⵠⲆⵠ] = Bq(Jd(3, Ym(a * 0.67, true, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    ᐃᐃ[15][Mr.ᐃⵠΔ] = Bq(Jd(3, Ym(a * 0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    ᐃᐃ[33] = [];
    ᐃᐃ[33][Mr.ⵠⲆⵠ] = Bq(Jd(3, Nm(a * 0.67, true, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    ᐃᐃ[33][Mr.ᐃⵠΔ] = Bq(Jd(3, Nm(a * 0.67, k, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    ᐃᐃ[16] = [];
    ᐃᐃ[16][Mr.ⵠⲆⵠ] = Bq(Jd(3, Fm(a * 1, lj, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    ᐃᐃ[16][Mr.ᐃⵠΔ] = Bq(Jd(3, Fm(a * 1, true, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    ᐃᐃ[35] = [];
    ᐃᐃ[35][Mr.ⵠⲆⵠ] = Bq(Jd(3, Um(a * 1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ᐃᐃ[35][Mr.ᐃⵠΔ] = Bq(Jd(3, Um(a * 1, Kl, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    ᐃᐃ[55] = [];
    ᐃᐃ[55][Mr.ⵠⲆⵠ] = Bq(Jd(3, Mc(a * 0.5, Bl, ["#0d1b1c", "#939393", "#5f6061"])));
    ᐃᐃ[55][Mr.ᐃⵠΔ] = Bq(Jd(3, Mc(a * 0.5, true, ["#030d14", "#485e66", "#1f343f"])));
    ᐃᐃ[45] = [];
    ᐃᐃ[45][Mr.ⵠⲆⵠ] = Bq(Jd(3, Nc(a * 1, yb, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    ᐃᐃ[45][Mr.ᐃⵠΔ] = Bq(Jd(3, Nc(a * 1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    ᐃᐃ[36] = [];
    ᐃᐃ[36][Mr.ⵠⲆⵠ] = Bq(Jd(3, Um(a * 1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ᐃᐃ[36][Mr.ᐃⵠΔ] = Bq(Jd(3, Um(a * 1, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
    ᐃᐃ[37] = [];
    ᐃᐃ[37][Mr.ⵠⲆⵠ] = Bq(Jd(3, Um(a * 1, jr, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ᐃᐃ[37][Mr.ᐃⵠΔ] = Bq(Jd(3, Um(a * 1, Bl, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ᐃᐃ[38] = [];
    ᐃᐃ[38][Mr.ⵠⲆⵠ] = Bq(Jd(3, Um(a * 1, yk, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ᐃᐃ[38][Mr.ᐃⵠΔ] = Bq(Jd(3, Um(a * 1, Zs, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ᐃᐃ[148] = [];
    ᐃᐃ[148][Mr.ⵠⲆⵠ] = Bq(Vc(a * 0.55, pa, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    ᐃᐃ[148][Mr.ᐃⵠΔ] = Bq(Vc(a * 0.55, false, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    ᐃᐃ[536] = [];
    ᐃᐃ[536].push(Bq(Vc(a * 0.8, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    ᐃᐃ[536].push(Bq(Vc(a * 0.8, false, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    ᐃᐃ[536].push(Bq(Vc(a * 0.8, zq, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    ᐃᐃ[538] = [];
    ᐃᐃ[538].push(ᐃᐃ[536][0]);
    ᐃᐃ[538].push(ᐃᐃ[536][0]);
    ᐃᐃ[538].push(ᐃᐃ[536][0]);
    ᐃᐃ[158] = [];
    ᐃᐃ[158][Mr.ⵠⲆⵠ] = Bq(cc(a * 0.06, $n, ["#141414", "#c4a23a", "#816511"]));
    ᐃᐃ[158][Mr.ᐃⵠΔ] = Bq(cc(a * 0.06, false, ["#030d14", "#2b6664", "#133d3c"]));
    ᐃᐃ[535] = [];
    ᐃᐃ[535].push(Bq(cc(a * 0.08, yg, ["#141414", "#c4a23a", "#816511"])));
    ᐃᐃ[535].push(Bq(cc(a * 0.08, false, ["#141414", "#e2bd4e", "#a38018"])));
    ᐃᐃ[535].push(Bq(cc(a * 0.08, Wl, ["#141414", "#b0902e", "#634d09"])));
    ᐃᐃ[149] = Ut(1.5, [{
      f: Ip,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ᐃᐃ[526] = [];
    ᐃᐃ[526][Mr.ⵠⲆⵠ] = Bq(_c(a * 0.8, true, ["#347f93", "#54a4ba"]));
    ᐃᐃ[526][Mr.ᐃⵠΔ] = Bq(_c(a * 0.8, true, ["#98ede3", "#94f2e7"]));
    ᐃᐃ[527] = [];
    ᐃᐃ[527][Mr.ⵠⲆⵠ] = Bq(Lc(a * 0.8, xo, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    ᐃᐃ[527][Mr.ᐃⵠΔ] = Bq(Lc(a * 0.8, true, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    ᐃᐃ[528] = [];
    ᐃᐃ[528][Mr.ⵠⲆⵠ] = Bq(gc(a * 0.8, 0, ["#a9e4ed", "#86d4e0"]));
    ᐃᐃ[528][Mr.ᐃⵠΔ] = Bq(gc(a * 0.8, 0, ["#83ddd4", "#485e66"]));
    ᐃᐃ[151] = [];
    ᐃᐃ[151][Mr.ⵠⲆⵠ] = Bq(vc(a * 0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    ᐃᐃ[151][Mr.ᐃⵠΔ] = Bq(vc(a * 0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    ᐃᐃ[1192] = [];
    ᐃᐃ[1192][Mr.ⵠⲆⵠ] = Δᐃ.ⲆΔⵠᐃΔⲆⲆ;
    ᐃᐃ[1192][Mr.ᐃⵠΔ] = Δᐃ.ⲆⲆⲆᐃΔᐃᐃ;
    ᐃᐃ[1193] = [];
    ᐃᐃ[1193][Mr.ⵠⲆⵠ] = Δᐃ.ᐃᐃΔΔⲆᐃⵠ;
    ᐃᐃ[1193][Mr.ᐃⵠΔ] = Δᐃ.ⵠⵠⲆⲆΔᐃΔ;
    ᐃᐃ[1194] = [];
    ᐃᐃ[1194][Mr.ⵠⲆⵠ] = Δᐃ.ⲆᐃⵠⵠᐃⲆⲆ;
    ᐃᐃ[1194][Mr.ᐃⵠΔ] = Δᐃ.ⵠᐃᐃᐃΔΔⵠ;
    ᐃᐃ[152] = [];
    ᐃᐃ[152][Mr.ⵠⲆⵠ] = Δᐃ.ΔⵠⲆⲆᐃⲆⲆ;
    ᐃᐃ[152][Mr.ᐃⵠΔ] = Δᐃ.ⲆⲆⵠᐃⲆΔΔ;
    ᐃᐃ[1198] = [];
    ᐃᐃ[1198][Mr.ⵠⲆⵠ] = Δᐃ.ΔΔΔΔΔⲆΔ;
    ᐃᐃ[1198][Mr.ᐃⵠΔ] = Δᐃ.ΔᐃΔΔⲆⵠΔ;
    ᐃᐃ[153] = [];
    ᐃᐃ[153][Mr.ⵠⲆⵠ] = Δᐃ.ⲆΔΔⲆⲆᐃΔ;
    ᐃᐃ[153][Mr.ᐃⵠΔ] = Δᐃ.ⵠⲆΔΔⵠΔⲆ;
    ᐃᐃ[1202] = [];
    ᐃᐃ[1202][Mr.ⵠⲆⵠ] = Δᐃ.ⲆᐃⲆᐃⵠᐃⲆ;
    ᐃᐃ[1202][Mr.ᐃⵠΔ] = Δᐃ.ⵠⵠΔⲆⵠⲆⲆ;
    ᐃᐃ[154] = [];
    ᐃᐃ[154][Mr.ⵠⲆⵠ] = Δᐃ.ⲆΔⵠⵠⲆⲆΔ;
    ᐃᐃ[154][Mr.ᐃⵠΔ] = Δᐃ.ⵠⵠⵠΔⵠᐃⲆ;
    ᐃᐃ[1206] = [];
    ᐃᐃ[1206][Mr.ⵠⲆⵠ] = Δᐃ.ⲆΔᐃΔⵠᐃΔ;
    ᐃᐃ[1206][Mr.ᐃⵠΔ] = Δᐃ.ⲆⵠΔᐃⲆⲆⲆ;
    ᐃᐃ[155] = [];
    ᐃᐃ[155][Mr.ⵠⲆⵠ] = Δᐃ.ᐃⲆᐃᐃᐃⲆΔ;
    ᐃᐃ[155][Mr.ᐃⵠΔ] = Δᐃ.ⲆΔⵠⲆᐃⵠⲆ;
    ᐃᐃ[1210] = [];
    ᐃᐃ[1210][Mr.ⵠⲆⵠ] = Δᐃ.ᐃΔⲆⵠᐃⲆⵠ;
    ᐃᐃ[1210][Mr.ᐃⵠΔ] = Δᐃ.ᐃⵠⲆⵠⲆΔⵠ;
    ᐃᐃ[156] = [];
    ᐃᐃ[156][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⲆΔΔⵠΔᐃ;
    ᐃᐃ[156][Mr.ᐃⵠΔ] = Δᐃ.ⲆᐃΔᐃᐃⵠᐃ;
    ᐃᐃ[1214] = [];
    ᐃᐃ[1214][Mr.ⵠⲆⵠ] = Δᐃ.ΔⲆᐃΔΔⲆⵠ;
    ᐃᐃ[1214][Mr.ᐃⵠΔ] = Δᐃ.ⵠⵠΔⵠΔⵠⲆ;
    ᐃᐃ[157] = [];
    ᐃᐃ[157][Mr.ⵠⲆⵠ] = Δᐃ.ΔᐃⲆⲆᐃⵠᐃ;
    ᐃᐃ[157][Mr.ᐃⵠΔ] = Δᐃ.ⵠⵠΔⲆⵠΔⵠ;
    ᐃᐃ[245] = [];
    ᐃᐃ[245][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⵠΔᐃⲆᐃⵠ;
    ᐃᐃ[245][Mr.ᐃⵠΔ] = Δᐃ.ΔⵠΔᐃⲆⲆΔ;
    ᐃᐃ[246] = Δᐃ.ΔΔⵠᐃⵠΔⵠ;
    ᐃᐃ[159] = [];
    ᐃᐃ[159][Mr.ⵠⲆⵠ] = Bq(Wc(a * 0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    ᐃᐃ[159][Mr.ᐃⵠΔ] = Bq(Wc(a * 0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    ᐃᐃ[558] = Bq(kc(a * 0.3, ["#092813", "#1f773d"], 0));
    ᐃᐃ[559] = Bq(kc(a * 0.3, ["#092813", "#1f773d"], 1));
    ᐃᐃ[885] = Bq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(0, a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      cd(d, b[0]);
      d.translate(0, a * -5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      cd(d, b[1]);
      return c;
    }(a * 0.6, ["#092813", "#1f773d"]));
    ᐃᐃ[556] = [];
    ᐃᐃ[556].push(Bq(wp(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
    ᐃᐃ[556].push(Bq(wp(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
    ᐃᐃ[556].push(Bq(wp(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
    ᐃᐃ[560] = [];
    var c = Bq(wp(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
    ᐃᐃ[560].push(c);
    ᐃᐃ[560].push(c);
    ᐃᐃ[560].push(c);
    ᐃᐃ[557] = [];
    ᐃᐃ[557].push(Bq(wp(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
    ᐃᐃ[557].push(Bq(wp(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
    ᐃᐃ[557].push(Bq(wp(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
    ᐃᐃ[681] = Bq(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 170;
      var g = b * 172;
      var a = f / 2;
      var i = g / 2;
      d.width = f;
      d.height = g;
      e.translate(a, i);
      e.save();
      for (var j = 0; j < 10; j++) {
        e.rotate(Math.PI / 5);
        e.save();
        e.translate(b * 65, 0);
        zd(e, 3, b * 18, b * 4);
        cd(e, c[0]);
        e.restore();
      }
      e.restore();
      Cd(e, 0, 0, b * 40);
      cd(e, ej, c[0], b * 6);
      Cd(e, 0, 0, b * 20);
      cd(e, c[0]);
      return d;
    }(a * 0.3, ["#FFFFFF"]));
    ᐃᐃ[794] = Bq(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 130;
      var g = b * 142;
      var a = f / 2;
      var h = g / 2;
      d.width = f;
      d.height = g;
      Cd(e, a, h, b * 40);
      cd(e, Hb, c[0], b * 7);
      Cd(e, a, h, b * 30);
      cd(e, Ya, c[0], b * 7);
      Cd(e, a, h, b * 20);
      cd(e, c[0]);
      return d;
    }(a * 0.3, ["#FFFFFF"]));
    ᐃᐃ[562] = Bq(kc(a * 0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
    ᐃᐃ[667] = Bq(Jd(Math.PI / 5, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      md(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
      d.restore();
      cd(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      cd(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      cd(d, b[0], b[0], a * 15);
      return c;
    }(a * 0.2, ["#FFFFFF"])));
    ᐃᐃ[43] = [];
    ᐃᐃ[43][Mr.ⵠⲆⵠ] = Bq(Hc(a * 0.85, true, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    ᐃᐃ[43][Mr.ᐃⵠΔ] = Bq(Hc(a * 0.85, pk, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    ᐃᐃ[561] = [];
    ᐃᐃ[561].push(Bq(wp(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
    ᐃᐃ[561].push(Bq(wp(a * 0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
    ᐃᐃ[561].push(Bq(wp(a * 0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
    ᐃᐃ[83] = [];
    ᐃᐃ[83][Mr.ⵠⲆⵠ] = Bq(np(a * 0.37, true, ["#2a2938", "#242330", "#313041"]));
    ᐃᐃ[83][Mr.ᐃⵠΔ] = Bq(np(a * 0.37, true, ["#1b1e30", "#161921", "#252f3e"]));
    ᐃᐃ[85] = [];
    ᐃᐃ[85][Mr.ⵠⲆⵠ] = Bq(hc(a * 0.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    ᐃᐃ[85][Mr.ᐃⵠΔ] = Bq(hc(a * 0.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    ᐃᐃ[86] = [];
    ᐃᐃ[86][Mr.ⵠⲆⵠ] = Bq(Yc(a * 0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    ᐃᐃ[86][Mr.ᐃⵠΔ] = Bq(Yc(a * 0.55, Qj, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    ᐃᐃ[84] = [];
    ᐃᐃ[84][Mr.ⵠⲆⵠ] = Bq(Yc(a * 0.55, true, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    ᐃᐃ[84][Mr.ᐃⵠΔ] = Bq(Yc(a * 0.55, k, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
    ᐃᐃ[77] = [];
    ᐃᐃ[77][Mr.ⵠⲆⵠ] = Bq(Tp(a * 0.2, pk, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    ᐃᐃ[77][Mr.ᐃⵠΔ] = Bq(Tp(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    ᐃᐃ[78] = [];
    ᐃᐃ[78][Mr.ⵠⲆⵠ] = Bq(Tp(a * 0.2, k, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    ᐃᐃ[78][Mr.ᐃⵠΔ] = Bq(Tp(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    ᐃᐃ[79] = [];
    ᐃᐃ[79][Mr.ⵠⲆⵠ] = Bq(Tp(a * 0.2, vq, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    ᐃᐃ[79][Mr.ᐃⵠΔ] = Bq(Tp(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    ᐃᐃ[61] = [];
    ᐃᐃ[61][Mr.ⵠⲆⵠ] = Bq(Gm(a * 0.24, k, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    ᐃᐃ[61][Mr.ᐃⵠΔ] = Bq(Gm(a * 0.24, true, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    ᐃᐃ[59] = [];
    ᐃᐃ[59][Mr.ⵠⲆⵠ] = Bq(dp(a * 0.32, true, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    ᐃᐃ[59][Mr.ᐃⵠΔ] = Bq(dp(a * 0.32, true, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    ᐃᐃ[62] = [];
    ᐃᐃ[62][Mr.ⵠⲆⵠ] = Bq(Jd(3, Sc(a * 0.9, true, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    ᐃᐃ[62][Mr.ᐃⵠΔ] = Bq(Jd(3, Sc(a * 0.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    ᐃᐃ[750] = [];
    ᐃᐃ[750][Mr.ⵠⲆⵠ] = Bq(Jd(3, Sc(a * 1, jr, [undefined, undefined, undefined, "#c8efef", "#c8efef"])));
    ᐃᐃ[750][Mr.ᐃⵠΔ] = Bq(Jd(3, Sc(a * 1, true, [undefined, undefined, cl, "#87d2e6", "#87d2e6"])));
    ᐃᐃ[755] = [];
    ᐃᐃ[755].push(Bq(Ec(a * 0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
    ᐃᐃ[755].push(Bq(Ec(a * 0.3, V, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
    ᐃᐃ[755].push(Bq(Ec(a * 0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
    ᐃᐃ[795] = [];
    ᐃᐃ[795].push(Bq(Kc(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
    ᐃᐃ[795].push(Bq(Kc(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ᐃᐃ[795].push(Bq(Kc(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ᐃᐃ[782] = [];
    ᐃᐃ[782].push(Bq(eu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
    ᐃᐃ[782].push(Bq(eu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
    ᐃᐃ[782].push(Bq(eu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
    ᐃᐃ[783] = [];
    ᐃᐃ[783].push(Bq(eu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
    ᐃᐃ[783].push(Bq(eu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
    ᐃᐃ[783].push(Bq(eu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
    ᐃᐃ[46] = [];
    ᐃᐃ[46][Mr.ⵠⲆⵠ] = Bq(Jd(3, Oc(a * 0.7, pk, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    ᐃᐃ[46][Mr.ᐃⵠΔ] = Bq(Jd(3, Oc(a * 0.7, vq, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
    ᐃᐃ[50] = [];
    ᐃᐃ[50][Mr.ⵠⲆⵠ] = Bq(Jd(3, Oc(a * 0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    ᐃᐃ[50][Mr.ᐃⵠΔ] = Bq(Jd(3, Oc(a * 0.7, _q, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    ᐃᐃ[51] = [];
    ᐃᐃ[51][Mr.ⵠⲆⵠ] = Bq(Jd(3, Oc(a * 0.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    ᐃᐃ[51][Mr.ᐃⵠΔ] = Bq(Jd(3, Oc(a * 0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    ᐃᐃ[52] = [];
    ᐃᐃ[52][Mr.ⵠⲆⵠ] = Bq(Jd(3, Oc(a * 0.7, lj, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    ᐃᐃ[52][Mr.ᐃⵠΔ] = Bq(Jd(3, Oc(a * 0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    ᐃᐃ[592] = [];
    ᐃᐃ[592].push(Bq(sc(a * 0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    ᐃᐃ[592].push(Bq(sc(a * 0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    ᐃᐃ[592].push(Bq(sc(a * 0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    ᐃᐃ[326] = Bq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      cd(d, b[0], b[0], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      cd(d, b[0], b[0], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      cd(d, b[0], b[0], a * 2);
      return c;
    }(a * 1.1, ["#BB0000"]));
    ᐃᐃ[333] = Bq(Jd(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      Cd(d, a * 213.5, a * 256.75, a * 75);
      cd(d, b);
      Cd(d, a * 213.5, a * 175.75, a * 25);
      cd(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(a * 0.9, "#BB0000")));
    ᐃᐃ[23] = [];
    ᐃᐃ[23][Mr.ⵠⲆⵠ] = Bq(lc(a * 0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    ᐃᐃ[23][Mr.ᐃⵠΔ] = Bq(lc(a * 0.55, Ck, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
    ᐃᐃ[58] = [];
    ᐃᐃ[58][Mr.ⵠⲆⵠ] = Bq($c(a * 0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    ᐃᐃ[58][Mr.ᐃⵠΔ] = Bq($c(a * 0.55, Qj, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    ᐃᐃ[25] = [];
    ᐃᐃ[25][Mr.ⵠⲆⵠ] = Bq(zp(a * 0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    ᐃᐃ[25][Mr.ᐃⵠΔ] = Bq(zp(a * 0.6, Zs, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    ᐃᐃ[26] = [];
    ᐃᐃ[26][Mr.ⵠⲆⵠ] = Bq(up(a * 0.58, yk, ["#dbce71", "#b29c32", "#c4bc51"]));
    ᐃᐃ[26][Mr.ᐃⵠΔ] = Bq(up(a * 0.58, true, ["#2b7c57", "#15543c", "#1a7961"]));
    ᐃᐃ[27] = [];
    ᐃᐃ[27][Mr.ⵠⲆⵠ] = Bq(ip(a * 0.69, true, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    ᐃᐃ[27][Mr.ᐃⵠΔ] = Bq(ip(a * 0.69, true, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    ᐃᐃ[413] = [];
    ᐃᐃ[413][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[413][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[413][Mr.ⵠⲆⵠ].push(Bq(bp(a * 1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    ᐃᐃ[413][Mr.ⵠⲆⵠ].push(Bq(pc(a * 1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    ᐃᐃ[413][Mr.ⵠⲆⵠ].push(Bq(yp(a * 1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    ᐃᐃ[413][Mr.ᐃⵠΔ].push(Bq(bp(a * 1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    ᐃᐃ[413][Mr.ᐃⵠΔ].push(Bq(pc(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    ᐃᐃ[413][Mr.ᐃⵠΔ].push(Bq(yp(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    ᐃᐃ[449] = [];
    ᐃᐃ[449][Mr.ⵠⲆⵠ] = Bq(Ap(a * 1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    ᐃᐃ[449][Mr.ᐃⵠΔ] = Bq(Ap(a * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    ᐃᐃ[451] = [];
    ᐃᐃ[451][Mr.ⵠⲆⵠ] = Bq(Dp(a * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ᐃᐃ[451][Mr.ᐃⵠΔ] = Bq(Dp(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
    ᐃᐃ[452] = [];
    ᐃᐃ[452][Mr.ⵠⲆⵠ] = Bq(Qp(a * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ᐃᐃ[452][Mr.ᐃⵠΔ] = Bq(Qp(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
    ᐃᐃ[243] = [];
    ᐃᐃ[243][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[243][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[243][Mr.ⵠⲆⵠ] = [Δᐃ.ⵠⲆᐃΔᐃΔⵠ, Δᐃ.ᐃᐃᐃΔⵠⵠΔ, Δᐃ.ⵠⲆⲆΔᐃᐃⵠ, Δᐃ.ΔᐃΔⲆⵠΔΔ, Δᐃ.ΔΔᐃⵠⲆⵠⵠ, Δᐃ.ΔΔⵠⲆΔΔⲆ, Δᐃ.ⲆⵠΔᐃΔⵠⵠ, Δᐃ.ⵠⲆⵠᐃᐃⵠⵠ, Δᐃ.ⲆΔΔⲆⵠΔΔ, Δᐃ.ⵠΔᐃⲆΔⲆΔ, Δᐃ.ⲆΔⵠⲆᐃⲆⵠ, Δᐃ.Δᐃᐃⵠᐃⵠⵠ, Δᐃ.ⵠⵠᐃᐃᐃⵠΔ, Δᐃ.ᐃᐃᐃᐃⵠΔΔ, Δᐃ.ⵠΔⲆΔⲆᐃᐃ, Δᐃ.ⵠᐃⲆⲆⲆⲆΔ, Δᐃ.ⵠΔⲆⲆΔⲆⲆ, Δᐃ.ᐃⲆᐃΔⲆⵠⲆ, Δᐃ.ⵠΔᐃⲆⵠⲆⲆ, Δᐃ.ⵠⵠⲆⲆⲆⲆⲆ, Δᐃ.ΔⲆΔΔΔⵠⲆ, Δᐃ.ⲆΔⵠⵠⲆⵠᐃ, Δᐃ.ⲆⲆΔⲆᐃⵠᐃ, Δᐃ.ⵠᐃΔⲆΔⵠᐃ, Δᐃ.ⲆᐃᐃᐃᐃΔⵠ, Δᐃ.ⲆⲆᐃⲆⵠⵠΔ, Δᐃ.ⲆΔⲆΔᐃΔⲆ, Δᐃ.ΔᐃⲆⵠΔᐃᐃ, Δᐃ.ΔⵠᐃᐃΔΔᐃ, Δᐃ.ΔⲆⲆᐃⵠᐃⵠ, Δᐃ.ⲆΔⵠⵠΔᐃⲆ, Δᐃ.ⲆⲆᐃΔᐃΔⲆ, Δᐃ.ΔΔᐃⲆⵠᐃᐃ, Δᐃ.ᐃⵠΔᐃᐃᐃⲆ, Δᐃ.ⲆⲆⲆΔⵠⵠΔ, Δᐃ.ᐃᐃΔⵠᐃⵠᐃ, Δᐃ.ⵠⲆΔᐃΔΔᐃ, Δᐃ.ⲆᐃΔᐃΔᐃΔ, Δᐃ.ⲆΔᐃⲆⲆΔⵠ, Δᐃ.ⲆᐃᐃᐃᐃᐃⲆ, Δᐃ.ΔⵠᐃᐃᐃΔⲆ, Δᐃ.Ⲇⵠⵠⵠⵠᐃⵠ, Δᐃ.ⵠᐃⵠᐃΔΔᐃ, Δᐃ.ⵠᐃΔᐃΔᐃⵠ, Δᐃ.ΔⲆⲆΔⵠⲆⲆ, Δᐃ.ᐃⲆΔΔΔᐃⵠ, Δᐃ.ⵠΔⵠⲆⲆᐃᐃ, Δᐃ.ⵠⵠᐃᐃᐃΔⲆ, Δᐃ.ΔΔⵠᐃⲆⲆⲆ, Δᐃ.ΔᐃΔⵠⵠⲆⲆ, Δᐃ.ⵠΔⲆⵠΔⵠⲆ, Δᐃ.ᐃΔᐃᐃΔΔΔ, Δᐃ.ⲆⲆⲆⲆΔⲆΔ, Δᐃ.ᐃΔⵠᐃⲆⲆΔ, Δᐃ.ⲆⲆⵠⲆᐃⵠᐃ, Δᐃ.ΔⵠⵠᐃⵠⵠΔ];
    ᐃᐃ[243][Mr.ᐃⵠΔ] = [Δᐃ.ΔΔΔⲆⵠⲆⵠ, Δᐃ.ⲆΔⵠⲆⵠⵠⲆ, Δᐃ.ⲆΔⲆⵠᐃⲆΔ, Δᐃ.ᐃΔᐃⲆⲆᐃⲆ, Δᐃ.ΔⲆⵠⵠᐃⵠⵠ, Δᐃ.ᐃᐃΔⵠᐃᐃⲆ, Δᐃ.ⵠⵠΔⵠΔⵠⵠ, Δᐃ.ΔᐃⵠⲆⲆⲆⵠ, Δᐃ.ⵠᐃⲆΔⲆⲆᐃ, Δᐃ.ΔⲆⵠᐃⵠᐃΔ, Δᐃ.ⵠⲆⲆᐃΔᐃᐃ, Δᐃ.ⲆᐃⵠⵠⲆⵠⵠ, Δᐃ.ΔⵠᐃΔⵠⲆᐃ, Δᐃ.ⵠⵠΔⵠⲆΔᐃ, Δᐃ.ᐃΔΔⲆⲆΔᐃ, Δᐃ.ⲆᐃⲆᐃⲆΔΔ, Δᐃ.ᐃⵠⲆᐃΔⵠⵠ, Δᐃ.ΔⵠΔⵠΔΔⵠ, Δᐃ.ⵠᐃⲆᐃⵠΔⲆ, Δᐃ.ᐃΔᐃⵠᐃⲆⵠ, Δᐃ.ᐃΔⵠⵠⲆⲆΔ, Δᐃ.ΔⲆⲆⲆΔᐃᐃ, Δᐃ.ΔΔⵠⲆⲆⵠᐃ, Δᐃ.ⵠⲆΔⵠᐃᐃⵠ, Δᐃ.ⲆΔⲆΔΔⲆⵠ, Δᐃ.ⵠⵠΔᐃᐃΔᐃ, Δᐃ.ΔⲆΔⵠⲆⲆΔ, Δᐃ.ᐃΔⲆⵠⵠᐃⵠ, Δᐃ.ΔⵠⵠΔⲆᐃᐃ, Δᐃ.ⲆⲆᐃΔᐃᐃᐃ, Δᐃ.ᐃᐃΔΔᐃⵠᐃ, Δᐃ.ᐃⲆⲆᐃΔΔⵠ, Δᐃ.ΔΔΔΔᐃⵠΔ, Δᐃ.ΔⵠⵠⵠⵠⵠΔ, Δᐃ.ΔᐃⵠⲆⵠⵠᐃ, Δᐃ.ⵠⲆⵠⲆⲆᐃⲆ, Δᐃ.ΔⵠΔᐃᐃᐃⵠ, Δᐃ.ⵠⲆᐃⵠⲆᐃᐃ, Δᐃ.ΔΔᐃᐃΔⵠᐃ, Δᐃ.ΔᐃᐃΔⵠᐃⲆ, Δᐃ.ⵠⵠΔΔᐃᐃⵠ, Δᐃ.ᐃΔΔΔᐃⲆⲆ, Δᐃ.ⵠⵠΔΔᐃⵠΔ, Δᐃ.ⵠΔⲆΔⵠΔⵠ, Δᐃ.ⵠᐃⵠΔΔΔΔ, Δᐃ.ᐃⵠᐃΔᐃⲆⲆ, Δᐃ.ⲆΔᐃⲆΔᐃⵠ, Δᐃ.ⵠⲆᐃⵠⵠᐃⲆ, Δᐃ.ᐃᐃΔᐃⲆᐃΔ, Δᐃ.ᐃⲆᐃⲆΔᐃᐃ, Δᐃ.ⲆΔⵠᐃᐃᐃⲆ, Δᐃ.ⲆᐃⵠΔΔⲆᐃ, Δᐃ.ΔⲆⵠⲆᐃⲆᐃ, Δᐃ.ᐃᐃᐃⵠⲆΔᐃ, Δᐃ.ⲆΔⲆⲆⵠΔⵠ, Δᐃ.ᐃΔΔⵠⲆⵠᐃ];
    ᐃᐃ[676] = [];
    ᐃᐃ[676][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[676][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[676][Mr.ⵠⲆⵠ].push(Bq(pm(a * 1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
    ᐃᐃ[676][Mr.ⵠⲆⵠ].push(Bq(pm(a * 0.9, jj, ["#252B28", "#747471", "#83827e"], 1)));
    ᐃᐃ[676][Mr.ⵠⲆⵠ].push(Bq(pm(a * 1, yg, ["#252B28", "#747471", "#83827e"], 2)));
    ᐃᐃ[676][Mr.ⵠⲆⵠ].push(Bq(pm(a * 0.9, false, ["#252B28", "#747471", "#83827e"], 2)));
    ᐃᐃ[676][Mr.ᐃⵠΔ].push(Bq(pm(a * 1.1, false, ["#030d14", "#123335", "#183f3f"], 0)));
    ᐃᐃ[676][Mr.ᐃⵠΔ].push(Bq(pm(a * 0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
    ᐃᐃ[676][Mr.ᐃⵠΔ].push(Bq(pm(a * 1, zq, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃᐃ[676][Mr.ᐃⵠΔ].push(Bq(pm(a * 0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃᐃ[679] = [];
    ᐃᐃ[679][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[679][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[679][Mr.ⵠⲆⵠ].push(Bq(pm(a * 1.1, Qj, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃᐃ[679][Mr.ⵠⲆⵠ].push(Bq(pm(a * 0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃᐃ[679][Mr.ⵠⲆⵠ].push(Bq(pm(a * 1, V, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃᐃ[679][Mr.ⵠⲆⵠ].push(Bq(pm(a * 0.9, V, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃᐃ[679][Mr.ᐃⵠΔ].push(Bq(pm(a * 1.1, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃᐃ[679][Mr.ᐃⵠΔ].push(Bq(pm(a * 0.9, un, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃᐃ[679][Mr.ᐃⵠΔ].push(Bq(pm(a * 1, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃᐃ[679][Mr.ᐃⵠΔ].push(Bq(pm(a * 0.9, ch, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃᐃ[415] = [];
    ᐃᐃ[415][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[415][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[415][Mr.ⵠⲆⵠ].push(Bq(Tm(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃᐃ[415][Mr.ⵠⲆⵠ].push(Bq(Tm(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃᐃ[415][Mr.ⵠⲆⵠ].push(Bq(Tm(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃᐃ[415][Mr.ᐃⵠΔ].push(Bq(Tm(a * 1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃᐃ[415][Mr.ᐃⵠΔ].push(Bq(Tm(a * 1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃᐃ[415][Mr.ᐃⵠΔ].push(Bq(Tm(a * 1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃᐃ[416] = [];
    ᐃᐃ[416][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[416][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[416][Mr.ⵠⲆⵠ].push(Bq(ym(a * 1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃᐃ[416][Mr.ⵠⲆⵠ].push(Bq(ym(a * 0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃᐃ[416][Mr.ⵠⲆⵠ].push(Bq(ym(a * 0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃᐃ[416][Mr.ᐃⵠΔ].push(Bq(ym(a * 1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃᐃ[416][Mr.ᐃⵠΔ].push(Bq(ym(a * 0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃᐃ[416][Mr.ᐃⵠΔ].push(Bq(ym(a * 0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃᐃ[121] = [];
    ᐃᐃ[121][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[121][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[121][Mr.ⵠⲆⵠ].push(Bq(vp(a * 1.7, xo, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃᐃ[121][Mr.ⵠⲆⵠ].push(Bq(vp(a * 1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃᐃ[121][Mr.ⵠⲆⵠ].push(Bq(vp(a * 1.3, Kh, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃᐃ[121][Mr.ᐃⵠΔ].push(Bq(vp(a * 1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃᐃ[121][Mr.ᐃⵠΔ].push(Bq(vp(a * 1.5, yb, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃᐃ[121][Mr.ᐃⵠΔ].push(Bq(vp(a * 1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃᐃ[678] = [];
    ᐃᐃ[678][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[678][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[678][Mr.ⵠⲆⵠ].push(Bq(Qc(a, ["#2d53c4"])));
    ᐃᐃ[678][Mr.ᐃⵠΔ].push(Bq(Qc(a, ["#2d53c4"])));
    ᐃᐃ[696] = [];
    ᐃᐃ[696][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[696][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[696][Mr.ⵠⲆⵠ].push(Bq(Qc(a, ["#c4912d"])));
    ᐃᐃ[696][Mr.ᐃⵠΔ].push(Bq(Qc(a, ["#c4912d"])));
    ᐃᐃ[680] = [];
    ᐃᐃ[680][Mr.ⵠⲆⵠ] = Bq(Pp(a, ["#414040"]));
    ᐃᐃ[680][Mr.ᐃⵠΔ] = Bq(Pp(a, ["#153635"]));
    ᐃᐃ[508] = [];
    ᐃᐃ[508][Mr.ⵠⲆⵠ] = Bq(Jm(a * 1, Qg, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃᐃ[508][Mr.ᐃⵠΔ] = Bq(Jm(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃᐃ[509] = [];
    ᐃᐃ[509][Mr.ⵠⲆⵠ] = Bq(Am(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃᐃ[509][Mr.ᐃⵠΔ] = Bq(Am(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃᐃ[512] = [];
    ᐃᐃ[512][Mr.ⵠⲆⵠ] = Bq(Am(a * 1, Pn, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃᐃ[512][Mr.ᐃⵠΔ] = Bq(Am(a * 1, Qg, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃᐃ[511] = [];
    ᐃᐃ[511][Mr.ⵠⲆⵠ] = Bq(Zm(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃᐃ[511][Mr.ᐃⵠΔ] = Bq(Zm(a * 1, Lk, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃᐃ[510] = [];
    ᐃᐃ[510][Mr.ⵠⲆⵠ] = Bq(Mm(a * 1, _n, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃᐃ[510][Mr.ᐃⵠΔ] = Bq(Mm(a * 1, Lk, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃᐃ[419] = [];
    ᐃᐃ[419][Mr.ⵠⲆⵠ] = Bq(tp(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    ᐃᐃ[419][Mr.ᐃⵠΔ] = Bq(tp(a * 0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    ᐃᐃ[445] = [];
    ᐃᐃ[445][Mr.ⵠⲆⵠ] = Bq(Jp(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    ᐃᐃ[445][Mr.ᐃⵠΔ] = Bq(Jp(a * 0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    ᐃᐃ[259] = [];
    ᐃᐃ[818] = [];
    ᐃᐃ[516] = [];
    ᐃᐃ[819] = [];
    for (b = 0; b < 2; b++) {
      ᐃᐃ[259][b] = document.createElement("canvas");
      ᐃᐃ[259][b].width = 193;
      ᐃᐃ[259][b].height = 193;
      ᐃᐃ[818][b] = ᐃᐃ[259][b].getContext("2d");
      ᐃᐃ[516][b] = document.createElement("canvas");
      ᐃᐃ[516][b].width = 600;
      ᐃᐃ[516][b].height = 600;
      ᐃᐃ[819][b] = ᐃᐃ[516][b].getContext("2d");
    }
    ᐃᐃ[475] = [];
    ᐃᐃ[475][Mr.ⵠⲆⵠ] = Bq(Pp(a, ["#c8e0de"]));
    ᐃᐃ[475][Mr.ᐃⵠΔ] = Bq(Pp(a, ["#147071"]));
    ᐃᐃ[476] = [];
    ᐃᐃ[476][Mr.ⵠⲆⵠ] = Bq(Pp(a, ["#231912"]));
    ᐃᐃ[476][Mr.ᐃⵠΔ] = Bq(Pp(a, ["#021719"]));
    ᐃᐃ[697] = Bq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      md(d, a * -7, a * -20, a * 14, a * 37, a * 20);
      d.restore();
      cd(d, b[0]);
      d.save();
      d.translate(a * 131, a * 94);
      md(d, a * -84, a * -67, a * 168, a * 134, a * 20);
      d.restore();
      cd(d, b[0], b[0], a * 13);
      d.save();
      d.translate(a * 223, a * 94.5);
      md(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
      d.restore();
      cd(d, b[0]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      md(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
      d.restore();
      cd(d, b[0]);
      return c;
    }(a * 0.5, ["#BB0000"]));
    ᐃᐃ[461] = Bq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 9, a * 93);
      d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
      d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
      d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
      d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
      d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
      d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
      d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
      d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
      d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
      d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
      d.closePath();
      cd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 25, a * 63);
      d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
      d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
      d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      cd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 91, a * 53);
      d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
      d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
      d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      cd(d, b, b, a * 4);
      return c;
    }(a * 0.9, "#BB0000"));
    ᐃᐃ[462] = Bq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 8, a * 50);
      d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
      d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
      d.closePath();
      cd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 14, a * 57);
      d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      cd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
      d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
      cd(d, b, b, a * 4);
      return c;
    }(a * 0.9, "#BB0000"));
    ᐃᐃ[463] = Bq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      cd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      cd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      cd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      cd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      cd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      cd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      cd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      cd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      cd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      cd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      cd(d, b[0]);
      return c;
    }(a * 1, ["#BB0000"]));
    ᐃᐃ[466] = Bq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -20, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      cd(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      cd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      cd(d, b);
      return c;
    }(a * 0.8, "#BB0000"));
    ᐃᐃ[467] = Bq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      cd(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      cd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      cd(d, b);
      return c;
    }(a * 0.8, "#BB0000"));
    ᐃᐃ[322] = Bq(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 85;
      var g = b * 115;
      var a = b * 4;
      d.width = f;
      d.height = g;
      e.translate(b * -130, b * -60);
      e.globalAlpha = 1;
      e.beginPath();
      e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      e.closePath();
      cd(e, c, c, a);
      return d;
    }(a * 0.9, "#BB0000"));
    ᐃᐃ[279] = Bq(xd(a * 0.6, "#BB0000"));
    ᐃᐃ[280] = Bq(xd(a * 0.6, "#1CE7E0"));
    ᐃᐃ[281] = Bq(xd(a * 0.6, "#DBE71C"));
    ᐃᐃ[308] = Bq(xd(a * 0.6, "#00BB00"));
    ᐃᐃ[602] = [];
    ᐃᐃ[602][Mr.ⵠⲆⵠ] = Bq(Pp(a, ["#dac291"]));
    ᐃᐃ[602][Mr.ᐃⵠΔ] = Bq(Pp(a, ["#0D423D"]));
    ᐃᐃ[698] = [];
    ᐃᐃ[698][Mr.ⵠⲆⵠ] = Bq(Pp(a, ["#dac291"]));
    ᐃᐃ[698][Mr.ᐃⵠΔ] = Bq(Pp(a, ["#0D423D"]));
    ᐃᐃ[788] = [];
    ᐃᐃ[788][Mr.ⵠⲆⵠ] = Bq(ep(a * 0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    ᐃᐃ[788][Mr.ᐃⵠΔ] = Bq(ep(a * 0.3, Kl, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    ᐃᐃ[182] = [];
    ᐃᐃ[182][Mr.ⵠⲆⵠ] = Bq(ep(a * 0.3, Bl, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    ᐃᐃ[182][Mr.ᐃⵠΔ] = Bq(ep(a * 0.3, pk, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    ᐃᐃ[127] = [Bq(Rp(a, k, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ᐃᐃ[128] = [Bq(Rp(a, Kl, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ᐃᐃ[603] = [];
    ᐃᐃ[603][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[603][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[603][Mr.ⵠⲆⵠ].push(Bq(kp(a * 1, ["#0B6A84"])));
    ᐃᐃ[603][Mr.ⵠⲆⵠ].push(Bq(Ep(a * 1, ["#0B6A84"])));
    ᐃᐃ[603][Mr.ⵠⲆⵠ].push(Bq(xc(a * 1, ["#0B6A84"])));
    ᐃᐃ[603][Mr.ⵠⲆⵠ].push(Bq(lp(a * 1, ["#0B6A84"])));
    ᐃᐃ[603][Mr.ⵠⲆⵠ].push(Bq(ap(a * 1, ["#0B6A84"])));
    ᐃᐃ[603][Mr.ⵠⲆⵠ].push(Bq(gp(a * 1, ["#0B6A84"])));
    ᐃᐃ[603][Mr.ⵠⲆⵠ].push(Bq(tc(a * 1, ["#0B6A84"])));
    ᐃᐃ[603][Mr.ᐃⵠΔ].push(Bq(kp(a * 1, ["#09373F"])));
    ᐃᐃ[603][Mr.ᐃⵠΔ].push(Bq(Ep(a * 1, ["#09373F"])));
    ᐃᐃ[603][Mr.ᐃⵠΔ].push(Bq(xc(a * 1, ["#09373F"])));
    ᐃᐃ[603][Mr.ᐃⵠΔ].push(Bq(lp(a * 1, ["#09373F"])));
    ᐃᐃ[603][Mr.ᐃⵠΔ].push(Bq(ap(a * 1, ["#09373F"])));
    ᐃᐃ[603][Mr.ᐃⵠΔ].push(Bq(gp(a * 1, ["#09373F"])));
    ᐃᐃ[603][Mr.ᐃⵠΔ].push(Bq(tc(a * 1, ["#09373F"])));
    ᐃᐃ[692] = [];
    ᐃᐃ[692][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[692][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[692][Mr.ⵠⲆⵠ].push(Bq(nc(a * 1.7, ["#FBEFBC"], 0)));
    ᐃᐃ[692][Mr.ⵠⲆⵠ].push(Bq(nc(a * 1.9, ["#FBEFBC"], 1)));
    ᐃᐃ[692][Mr.ⵠⲆⵠ].push(Bq(nc(a * 1.7, ["#FBEFBC"], 2)));
    ᐃᐃ[692][Mr.ᐃⵠΔ].push(Bq(nc(a * 1.7, ["#0F4C48"], 0)));
    ᐃᐃ[692][Mr.ᐃⵠΔ].push(Bq(nc(a * 1.9, ["#0F4C48"], 1)));
    ᐃᐃ[692][Mr.ᐃⵠΔ].push(Bq(nc(a * 1.7, ["#0F4C48"], 2)));
    ᐃᐃ[694] = [];
    ᐃᐃ[694][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[694][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[694][Mr.ⵠⲆⵠ].push(Bq(nc(a * 1.8, ["#A9D6D3"], 0)));
    ᐃᐃ[694][Mr.ⵠⲆⵠ].push(Bq(nc(a * 2, ["#A9D6D3"], 1)));
    ᐃᐃ[694][Mr.ⵠⲆⵠ].push(Bq(nc(a * 1.8, ["#A9D6D3"], 2)));
    ᐃᐃ[694][Mr.ᐃⵠΔ].push(Bq(nc(a * 1.8, ["#115E60"], 0)));
    ᐃᐃ[694][Mr.ᐃⵠΔ].push(Bq(nc(a * 2, ["#115E60"], 1)));
    ᐃᐃ[694][Mr.ᐃⵠΔ].push(Bq(nc(a * 1.8, ["#115E60"], 2)));
    ᐃᐃ[695] = [];
    ᐃᐃ[695][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[695][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[695][Mr.ⵠⲆⵠ].push(Bq(nc(a * 1.9, ["#2A8B9B"], 0)));
    ᐃᐃ[695][Mr.ⵠⲆⵠ].push(Bq(nc(a * 2.1, ["#2A8B9B"], 1)));
    ᐃᐃ[695][Mr.ⵠⲆⵠ].push(Bq(nc(a * 1.9, ["#2A8B9B"], 2)));
    ᐃᐃ[695][Mr.ᐃⵠΔ].push(Bq(nc(a * 1.9, ["#0F464C"], 0)));
    ᐃᐃ[695][Mr.ᐃⵠΔ].push(Bq(nc(a * 2.1, ["#0F464C"], 1)));
    ᐃᐃ[695][Mr.ᐃⵠΔ].push(Bq(nc(a * 1.9, ["#0F464C"], 2)));
    ᐃᐃ[693] = [];
    ᐃᐃ[693][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[693][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[693][Mr.ⵠⲆⵠ].push(Bq(gm(a * 0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃᐃ[693][Mr.ⵠⲆⵠ].push(Bq(gm(a * 1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃᐃ[693][Mr.ⵠⲆⵠ].push(Bq(gm(a * 1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃᐃ[693][Mr.ᐃⵠΔ].push(Bq(gm(a * 0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃᐃ[693][Mr.ᐃⵠΔ].push(Bq(gm(a * 1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃᐃ[693][Mr.ᐃⵠΔ].push(Bq(gm(a * 1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃᐃ[637] = [];
    ᐃᐃ[637][Mr.ⵠⲆⵠ] = Bq(Fc(a * 0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    ᐃᐃ[637][Mr.ᐃⵠΔ] = Bq(Fc(a * 0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    ᐃᐃ[687] = Bq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = 1;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      cd(d, b[0], b[0], a * 12);
      return c;
    }(a * 0.8, ["#B6222A"]));
    ᐃᐃ[673] = [];
    ᐃᐃ[673][Mr.ⵠⲆⵠ] = Bq(op(a * 0.8, Ck, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    ᐃᐃ[673][Mr.ᐃⵠΔ] = Bq(op(a * 0.8, true, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    ᐃᐃ[688] = Bq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      cd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      cd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      cd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      cd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      cd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      cd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      cd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      cd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      cd(d, b[0], b[0], a * 10);
      return c;
    }(a * 0.8, ["#B6222A"]));
    ᐃᐃ[902] = [];
    ᐃᐃ[902][Mr.ⵠⲆⵠ] = Bq(Gd(a * 0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
    ᐃᐃ[902][Mr.ᐃⵠΔ] = Bq(Gd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ᐃᐃ[903] = [];
    ᐃᐃ[903][Mr.ⵠⲆⵠ] = Bq(Gd(a * 0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
    ᐃᐃ[903][Mr.ᐃⵠΔ] = Bq(Gd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
    ᐃᐃ[Mr.ⲆⲆᐃᐃΔᐃⲆ] = [];
    ᐃᐃ[Mr.ⲆⲆᐃᐃΔᐃⲆ][Mr.ⵠⲆⵠ] = Bq(Gd(a * 0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
    ᐃᐃ[Mr.ⲆⲆᐃᐃΔᐃⲆ][Mr.ᐃⵠΔ] = Bq(Gd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ᐃᐃ[904] = Bq(Od(a * 0.4, ["#B6222A"]));
    ᐃᐃ[905] = Bq(Od(a * 0.4, ["#B6222A"]));
    ᐃᐃ[Mr.ⵠΔⲆΔΔᐃⵠΔΔ] = Bq(Od(a * 0.4, ["#B6222A"]));
    ᐃᐃ[230] = Bq(Sm(a * 0.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    ᐃᐃ[229] = Bq(pu(a * 0.35, yb, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    ᐃᐃ[886] = [];
    ᐃᐃ[886][Mr.ⵠⲆⵠ] = Bq(su(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    ᐃᐃ[886][Mr.ᐃⵠΔ] = Bq(su(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
    ᐃᐃ[887] = [];
    ᐃᐃ[887][Mr.ⵠⲆⵠ] = Bq(su(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    ᐃᐃ[887][Mr.ᐃⵠΔ] = Bq(su(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
    ᐃᐃ[894] = [];
    ᐃᐃ[894][Mr.ⵠⲆⵠ] = Bq(ru(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ᐃᐃ[894][Mr.ᐃⵠΔ] = Bq(ru(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ᐃᐃ[895] = [];
    ᐃᐃ[895][Mr.ⵠⲆⵠ] = Bq(nu(a * 0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ᐃᐃ[895][Mr.ᐃⵠΔ] = Bq(nu(a * 0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ᐃᐃ[896] = [];
    ᐃᐃ[896][Mr.ⵠⲆⵠ] = Bq(ru(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ᐃᐃ[896][Mr.ᐃⵠΔ] = Bq(ru(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    ᐃᐃ[897] = [];
    ᐃᐃ[897][Mr.ⵠⲆⵠ] = Bq(nu(a * 0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ᐃᐃ[897][Mr.ᐃⵠΔ] = Bq(nu(a * 0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    ᐃᐃ[888] = Bq(qu(a * 0.35, ["#B6222A"]));
    ᐃᐃ[889] = Bq(ru(a * 0.35, 0, [Nn, "#B6222A"]));
    ᐃᐃ[890] = Bq(nu(a * 0.35, 0, [undefined, "#B6222A"]));
    ᐃᐃ[891] = Bq(qu(a * 0.35, ["#22E066"]));
    ᐃᐃ[892] = Bq(ru(a * 0.35, 0, [undefined, "#22E066"]));
    ᐃᐃ[893] = Bq(nu(a * 0.35, 0, [ij, "#22E066"]));
    ᐃᐃ[48] = [];
    ᐃᐃ[48][Mr.ⵠⲆⵠ] = Bq(Pm(a * 0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    ᐃᐃ[48][Mr.ᐃⵠΔ] = Bq(Pm(a * 0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    ᐃᐃ[47] = [];
    ᐃᐃ[47][Mr.ⵠⲆⵠ] = Bq(Cm(a * 0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    ᐃᐃ[47][Mr.ᐃⵠΔ] = Bq(Cm(a * 0.45, Ck, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    ᐃᐃ[141] = [];
    ᐃᐃ[141][Mr.ⵠⲆⵠ] = Bq(ac(a * 0.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    ᐃᐃ[141][Mr.ᐃⵠΔ] = Bq(ac(a * 0.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ᐃᐃ[125] = [];
    ᐃᐃ[125][Mr.ⵠⲆⵠ] = Bq(Gc(a, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    ᐃᐃ[125][Mr.ᐃⵠΔ] = Bq(Gc(a, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ᐃᐃ[221] = [];
    ᐃᐃ[221][Mr.ⵠⲆⵠ] = Δᐃ.ⵠΔᐃⲆⲆⲆⲆ;
    ᐃᐃ[221][Mr.ᐃⵠΔ] = Δᐃ.ⲆᐃⲆᐃⲆⲆⵠⲆᐃ;
    ᐃᐃ[190] = [];
    ᐃᐃ[190][Mr.ⵠⲆⵠ] = Bq(Ed(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃᐃ[190][Mr.ᐃⵠΔ] = Bq(Ed(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃᐃ[853] = [ᐃᐃ[190]];
    ᐃᐃ[853][1] = [];
    ᐃᐃ[853][2] = [];
    ᐃᐃ[853][1][Mr.ⵠⲆⵠ] = Bq(Bd(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃᐃ[853][1][Mr.ᐃⵠΔ] = Bq(Bd(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃᐃ[853][2][Mr.ⵠⲆⵠ] = Bq(_d(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃᐃ[853][2][Mr.ᐃⵠΔ] = Bq(_d(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃᐃ[49] = [];
    ᐃᐃ[49][Mr.ⵠⲆⵠ] = Bq(Jd(3 - Math.PI / 2, jc(a * 0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    ᐃᐃ[49][Mr.ᐃⵠΔ] = Bq(Jd(3 - Math.PI / 2, jc(a * 0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    ᐃᐃ[728] = [];
    ᐃᐃ[728][Mr.ⵠⲆⵠ] = Bq(Ft(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    ᐃᐃ[728][Mr.ᐃⵠΔ] = Bq(Ft(a * 0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
    ᐃᐃ[798] = Bq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      md(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
      d.restore();
      cd(d, b[4], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      md(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      cd(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      md(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      cd(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      md(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      cd(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      md(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      cd(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 204, a * 121.5);
      md(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
      d.restore();
      cd(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 197, a * 299);
      md(d, a * 85, a * -9, a * -170, a * 18, a * 10);
      d.restore();
      cd(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      cd(d, Ll, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      cd(d, undefined, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      cd(d, nl, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      cd(d, undefined, b[1], a * 12);
      return c;
    }(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    ᐃᐃ[729] = Bq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      md(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
      d.restore();
      cd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      md(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
      d.restore();
      cd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      md(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
      d.restore();
      cd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 275);
      md(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
      d.restore();
      cd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      md(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      cd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      md(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      cd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      md(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      cd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      md(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      cd(d, b[0], b[0], a * 12);
      return c;
    }(a * 0.3, ["#BB0000"]));
    ᐃᐃ[658] = Ut(1, [{
      f: mp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃᐃ[150] = Ut(1.5, [{
      f: Ip,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ᐃᐃ[669] = Sp(a * 0.35, ["#072428", "#67A242", "#67A242"], 0);
    ᐃᐃ[670] = Sp(a * 0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
    ᐃᐃ[671] = Sp(a * 0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    ᐃᐃ[672] = Sp(a * 0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
    if (ᐃⲆΔᐃᐃⲆⲆ) {
      ᐃᐃ[278] = Bq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 180;
        var g = b * 8;
        c.width = e;
        c.height = f;
        d.beginPath();
        md(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.8;
        cd(d, "#1D6055");
        d.globalAlpha = 1;
        var a = um(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(a));
    } else {
      ᐃᐃ[278] = Bq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 270;
        var g = b * 8;
        c.width = e;
        c.height = f + 20;
        d.beginPath();
        md(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.5;
        cd(d, "#1D6055");
        d.globalAlpha = 1;
        var a = um(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(a));
    }
    if (ᐃⲆΔᐃᐃⲆⲆ) {
      ᐃᐃ[267] = Bq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 335;
        var f = b * 250;
        var i = b * 120;
        var a = b * 20;
        var j = b * 35;
        var k = b * 65;
        var h = b * 2;
        var g = b * 4;
        c.width = e;
        c.height = i;
        d.beginPath();
        d.translate(0, b * 15);
        md(d, k, 0, f, a, h);
        cd(d, null, "#69A148", g);
        d.translate(0, j);
        md(d, k, 0, f, a, h);
        cd(d, null, "#AF352A", g);
        d.translate(0, j);
        md(d, k, 0, f, a, h);
        cd(d, null, "#669BB1", g);
        return c;
      }(0.75));
    } else {
      ᐃᐃ[267] = Bq(function (c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = c * 950;
        var i = c * 180;
        var j = c * 50;
        var a = c * 20;
        var k = c * 240;
        var m = c * 35;
        var h = c * 1;
        var g = c * 4;
        var l = c * 4;
        d.width = f;
        d.height = j;
        e.translate(0, c * 15);
        md(e, m, h, i, a, g);
        cd(e, null, "#69A148", l);
        var n = ᐃᐃ[669];
        e.drawImage(n, 17, -8);
        e.translate(k, 0);
        md(e, m, h, i, a, g);
        cd(e, null, "#AF352A", l);
        n = ᐃᐃ[671];
        e.drawImage(n, 17, -9);
        e.translate(k, 0);
        md(e, m, h, i, a, g);
        cd(e, null, "#669BB1", l);
        n = ᐃᐃ[670];
        e.drawImage(n, 17, -8);
        e.translate(k, 0);
        md(e, m, h, i, a, g);
        cd(e, null, "#074A87", l);
        n = ᐃᐃ[672];
        e.drawImage(n, 17, -8);
        return d;
      }(a));
    }
    if (ᐃⲆΔᐃᐃⲆⲆ) {
      ᐃᐃ[608] = Bq(Zc(0.75));
    } else {
      ᐃᐃ[608] = Bq(Zc(a));
    }
    ᐃᐃ[792] = Bq(zp(a * 0.16, lj, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    ᐃᐃ[537] = Bq(Jd(5.8, ou(a * 0.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    ᐃᐃ[283] = [];
    ᐃᐃ[465] = [];
    for (b = 0; b < 18; b++) {
      ᐃᐃ[465][b] = um(a, "" + (b + 1), 12, "#FFF");
    }
    ᐃᐃ[708] = [];
    ᐃᐃ[708].push(Bq(Cp(a * 0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    ᐃᐃ[708].push(Bq(Cp(a * 0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
    ᐃᐃ[708].push(Bq(Cp(a * 0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
    ᐃᐃ[725] = [];
    ᐃᐃ[725].push(Bq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      Cd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      cd(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      Cd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      cd(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      cd(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      cd(c, "#3A2A0D");
      Cd(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      cd(c, undefined, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      cd(c, ej, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      cd(c, Ya, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      cd(c, Qq, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      cd(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      cd(c, mi, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      cd(c, Wd, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      cd(c, Hb, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      cd(c, nl, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      cd(c, mq, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      cd(c, tk, "#c7a726", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      cd(c, es, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      cd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      cd(c, tk, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      cd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      cd(c, zh, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      cd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      cd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      cd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      cd(c, ct, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      cd(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      cd(c, "#ECBE35", "#EDCE4F", a * 8);
      Cd(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      cd(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(a * 0.22)));
    ᐃᐃ[725].push(Bq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      Cd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      cd(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      Cd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      cd(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      cd(c, "#3A2A0D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      cd(c, "#071A1B");
      Cd(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      cd(c, undefined, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      cd(c, ct, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      cd(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      cd(c, es, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      cd(c, Ks, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      cd(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      cd(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      cd(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      cd(c, ij, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      cd(c, tk, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      cd(c, undefined, "#281C08", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      cd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      cd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      cd(c, Ks, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      cd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      cd(c, hg, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      cd(c, Wd, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      cd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      cd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      cd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      cd(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      cd(c, "#E1DDD5", "#EAE7E4", a * 8);
      Cd(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      cd(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(a * 0.22)));
    ᐃᐃ[726] = Bq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      Cd(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      cd(c, "#C09D6F", "#A37943", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      cd(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      md(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
      c.restore();
      cd(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      md(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
      c.restore();
      cd(c, "#C09D6F");
      Cd(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      cd(c, "#C09D6F");
      return b;
    }(a * 0.22));
    ᐃᐃ[727] = [];
    ᐃᐃ[727].push(Bq(Nd(a * 1.5, ["#795026", "#654320", "#eda80d"], 0)));
    ᐃᐃ[727].push(Bq(Nd(a * 1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
    ᐃᐃ[727].push(Bq(Nd(a * 1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
    ᐃᐃ[546] = Δᐃ.ᐃⵠΔΔᐃΔⵠ;
    ᐃᐃ[547] = Δᐃ.ⵠⲆⲆΔⲆΔΔ;
    ᐃᐃ[548] = Δᐃ.ⵠⲆΔⵠΔⵠⵠ;
    ᐃᐃ[549] = Δᐃ.ᐃᐃⵠΔᐃⵠᐃ;
    ᐃᐃ[517] = um(a, "Show spectators", 25, "#FFF", zh, undefined, "#000", 5, 220);
    ᐃᐃ[525] = um(a, "Reconnecting...", 30, "#FFF");
    console.log(undefined, Ks);
  }
  function vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    md(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    cd(e, c[2]);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    md(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    cd(e, c[2]);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    md(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    cd(e, c[2]);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    md(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    cd(e, c[2]);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    md(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    cd(e, c[2]);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    md(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    cd(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    md(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    cd(e, Ya, c[4], a * 5);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    md(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    cd(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    md(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    cd(e, Nn, c[4], a * 5);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    md(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    cd(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    md(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    cd(e, Ks, c[4], a * 5);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    md(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    cd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    cd(e, Nn, c[4], a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 99);
    zd(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    cd(e, c[2]);
    e.save();
    e.translate(a * 98, a * 99);
    zd(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    cd(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 99);
    zd(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    cd(e, c[5], c[6], a * 5);
    e.save();
    e.translate(a * 98, a * 99);
    zd(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    cd(e, c[7], c[8], a * 7);
    return d;
  }
  function mc(a, b) {
    Zj(ox, a, b);
    const c = io(px[0], px[1], px[0], px[1], px[0]);
    wt(px[1], px[0], px[1], px[0], px[1], px[0]);
    return c ^ 63366;
  }
  function cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 790;
    e.translate(a * 5, a * 5);
    e.globalAlpha = b ? 0 : 0;
    Cd(e, a * 178.5, a * 172.828125, a * 150);
    cd(e, undefined, c[0], a * 65);
    Cd(e, a * 178.5, a * 172.828125, a * 150);
    cd(e, undefined, c[0], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    md(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    cd(e, c[0]);
    e.save();
    e.translate(a * 136, a * 581.828125);
    md(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    cd(e, c[0]);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    md(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 140, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
    e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
    e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
    e.closePath();
    cd(e, c[0]);
    e.translate(3, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    cd(e, c[0]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    cd(e, c[0], c[0], a * 7);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * 15, a * 35);
    Cd(e, a * 178.5, a * 172.828125, a * 150);
    cd(e, mi, c[2], a * 95);
    Cd(e, a * 178.5, a * 172.828125, a * 150);
    cd(e, ct, c[1], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    md(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    cd(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 136, a * 581.828125);
    md(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    cd(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    md(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    cd(e, c[1], c[2], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    cd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 123, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
    e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
    e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
    e.closePath();
    cd(e, c[1]);
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    cd(e, c[1]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    cd(e, c[1], c[1], a * 7);
    e.restore();
    return d;
  }
  function pc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    Cd(d, a * 86.5, a * 98, a * 80);
    cd(d, b[0]);
    d.globalAlpha = 1;
    Cd(d, a * 86.5, a * 89, a * 81);
    cd(d, b[1], b[2], a * 4);
    Cd(d, a * 86.5, a * 86, a * 59);
    cd(d, b[3], b[4], a * 4);
    d.globalAlpha = 0.5;
    Cd(d, a * 86.5, a * 95, a * 34);
    cd(d, b[0]);
    d.globalAlpha = 1;
    Cd(d, a * 86.5, a * 89, a * 34);
    cd(d, b[5]);
    return c;
  }
  function Cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 10, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    cd(e, c[1], c[2], a * 10);
    return d;
  }
  function Tc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    cd(e, cl, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    cd(e, c[3], c[2], a * 12);
    e.translate(0, a * 25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    cd(e, c[5]);
    e.translate(0, a * -25);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    cd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    cd(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    cd(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    cd(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    cd(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    cd(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    cd(e, undefined, c[2], a * 11);
    return d;
  }
  const fc = String.fromCharCode;
  const zc = fc(101);
  const yc = fc(118);
  const wc = fc(97);
  const Pc = fc(108);
  function kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 95;
    d.height = a * 85;
    if (c == 0) {
      e.translate(a * 7, a * 15);
      e.scale(0.9, 0.9);
      e.save();
      md(e, a * 0, a * 5, a * 90, a * 60, 10);
      cd(e, b[0]);
      e.globalCompositeOperation = "destination-out";
      Cd(e, a * 25, a * 40, a * 10);
      e.fill();
      Cd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
      e.save();
      md(e, 0, 0, a * 90, a * 60, a * 10);
      cd(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      Cd(e, a * 25, a * 40, a * 10);
      e.fill();
      Cd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    } else if (c == 1) {
      e.scale(0.8, 0.8);
      e.translate(a * 15, a * 33);
      e.save();
      e.scale(0.56, 0.56);
      e.translate(a * -39, a * -60);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 32.5, a * 50.642852783203125);
      e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
      e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
      e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
      e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
      e.closePath();
      cd(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 116.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
      e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
      e.closePath();
      cd(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 166.5, a * 68.64285278320312);
      e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
      e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
      e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
      e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
      e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
      e.closePath();
      cd(e, b[1]);
      e.restore();
      e.save();
      md(e, 0, a * 15, a * 90, a * 50, a * 10);
      cd(e, b[0]);
      md(e, 0, a * 10, a * 90, a * 50, a * 10);
      cd(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      Cd(e, a * 25, a * 40, a * 10);
      e.fill();
      Cd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    }
    return d;
  }
  function xc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    cd(d, b[0]);
    return c;
  }
  function Jc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    md(e, 0, 0, a * 400, a * 220, a * 30);
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    cd(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    cd(e, c[3], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    cd(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    cd(e, c[3], c[1], a * 12);
    Cd(e, a * 41, a * 30, a * 14.7648230602334);
    cd(e, c[3], c[1], a * 12);
    Cd(e, a * 369, a * 30, a * 15.556349186104045);
    cd(e, c[3], c[1], a * 12);
    Cd(e, a * 364, a * 190, a * 15.620499351813308);
    cd(e, c[3], c[1], a * 12);
    Cd(e, a * 41, a * 186, a * 15.556349186104045);
    cd(e, c[3], c[1], a * 12);
    return d;
  }
  function Mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 144;
    d.height = a * 280;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    cd(e, c[1], c[2], a * 6);
    return d;
  }
  function Bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    cd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    cd(e, c[1], c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    cd(e, Ya, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    cd(e, undefined, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    cd(e, c[3], c[2], a * 19);
    Cd(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
    cd(e, c[4]);
    Cd(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
    cd(e, c[4]);
    Cd(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
    cd(e, c[4]);
    Cd(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
    cd(e, c[4]);
    Cd(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
    cd(e, c[4]);
    Cd(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
    cd(e, c[4]);
    Cd(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
    cd(e, c[4]);
    Cd(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
    cd(e, c[4]);
    Cd(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
    cd(e, c[4]);
    Cd(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
    cd(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    cd(e, c[5]);
    return d;
  }
  function Dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    md(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    cd(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    cd(e, undefined, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    cd(e, undefined, c[6], a * 15);
    return d;
  }
  function Ec(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 170;
    f.height = b * 200;
    g.translate(b * 5, b * 15);
    if (e == 1) {
      g.translate(0, b * -5);
      Cd(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
      cd(g, d[1], d[5], b * 20);
      Cd(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
      cd(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 31.267044067382812);
      md(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
      g.restore();
      cd(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 13.267044067382812);
      md(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
      g.restore();
      cd(g, d[1], d[5], b * 20);
    }
    Cd(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
    cd(g, d[1], d[2], b * 7);
    Cd(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
    cd(g, d[1], d[2], b * 7);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
    g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
    g.closePath();
    cd(g, d[1], d[2], b * 8);
    Cd(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
    cd(g, d[1], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
    g.closePath();
    cd(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
    g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
    g.closePath();
    cd(g, d[3], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
    g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
    g.closePath();
    cd(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
    g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
    g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
    g.closePath();
    cd(g, d[3], d[2], b * 4);
    Cd(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
    cd(g, d[3], d[2], b * 4);
    g.save();
    g.translate(b * 77.00003051757812, b * 31.267044067382812);
    g.rotate(0);
    md(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
    g.restore();
    cd(g, d[1], d[2], b * 7);
    g.save();
    g.translate(b * 77.00003051757812, b * 13.267044067382812);
    g.rotate(0);
    md(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
    g.restore();
    cd(g, d[1], d[2], b * 7);
    return f;
  }
  function Ic(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    cd(e, Hb, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    cd(e, c[3], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    cd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    cd(e, Wd, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    cd(e, Nn, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    cd(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    cd(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    cd(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    cd(e, ct, c[2], a * 11);
    return d;
  }
  function Sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 46;
    d.height = a * 140;
    e.scale(a * -1, a * 1);
    e.translate(a * -50, a * 40);
    e.translate(a * -20, 0);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    cd(e, c[0]);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    md(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    cd(e, c[0]);
    e.translate(a * 0, 0);
    e.globalAlpha = 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    cd(e, c[3], c[4], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    cd(e, c[1], c[2], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    cd(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    md(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    cd(e, c[1], c[2], a * 3);
    return d;
  }
  function Qc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 100;
    c.height = a * 100;
    d.globalAlpha = 0.5;
    d.fillStyle = b[0];
    d.fillRect(0, 0, c.width, c.height);
    return c;
  }
  function _c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = 0.3;
    Cd(e, a * 98, a * 99, a * 100);
    cd(e, c[0]);
    e.globalAlpha = 0.5;
    Cd(e, a * 98, a * 99, a * 90);
    cd(e, c[1]);
    return d;
  }
  function Fc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    d.globalAlpha = 0.5;
    d.translate(a * 5, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    cd(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -4, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    cd(d, undefined, b[1], a * 12);
    d.translate(a * -1, a * 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 270.633544921875, a * 88.98580932617188);
    d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    d.closePath();
    cd(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 275.633544921875, a * 281.9858093261719);
    d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    d.closePath();
    cd(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 124.633544921875, a * 291.9858093261719);
    d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    d.closePath();
    cd(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 113.633544921875, a * 80.98580932617188);
    d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    d.closePath();
    cd(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 202.633544921875, a * 20.985809326171875);
    d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    d.closePath();
    cd(d, b[2], b[3], a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 203.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    d.closePath();
    cd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.633544921875, a * 25.985809326171875);
    d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    d.closePath();
    cd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 26.633544921875, a * 96.98580932617188);
    d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    d.closePath();
    cd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 351.633544921875, a * 99.98580932617188);
    d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    d.closePath();
    cd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 350.633544921875, a * 302.9858093261719);
    d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    d.closePath();
    cd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 95.633544921875, a * 224.98580932617188);
    d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    d.closePath();
    cd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 253.98580932617188);
    d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    d.closePath();
    cd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 251.98580932617188);
    d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    d.closePath();
    cd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 316, a * 186.8020782470703);
    d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 340, a * 157.8020782470703);
    d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 349, a * 136.8020782470703);
    d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 278.75, a * 246.4375);
    d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 310.75, a * 277.4375);
    d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.75, a * 257.4375);
    d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 289.4375);
    d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 171.75, a * 256.4375);
    d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.75, a * 289.9375);
    d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.75, a * 314.4375);
    d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.75, a * 313.4375);
    d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 103.75, a * 244.4375);
    d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 86.75, a * 182.4375);
    d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44.75, a * 152.4375);
    d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31.75, a * 130.4375);
    d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 69.75, a * 274.4375);
    d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 165.75, a * 95.4375);
    d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 216.75, a * 94.4375);
    d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 68.4375);
    d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 169.75, a * 71.4375);
    d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    d.closePath();
    cd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 193.75, a * 160.4375);
    d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    d.closePath();
    cd(d, b[8], b[9], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    d.closePath();
    cd(d, b[10]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 173.8125);
    d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    d.closePath();
    cd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    d.closePath();
    cd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    d.closePath();
    cd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    d.closePath();
    cd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 204.1999969482422, a * 201.8125);
    d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    d.closePath();
    cd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    d.closePath();
    cd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    d.closePath();
    cd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    d.closePath();
    cd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 183.1999969482422, a * 196.8125);
    d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    d.closePath();
    cd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    d.closePath();
    cd(d, b[11]);
    Cd(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    cd(d, b[12]);
    Cd(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    cd(d, b[13]);
    Cd(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    cd(d, b[12]);
    Cd(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    cd(d, b[13]);
    return c;
  }
  function Rc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 272;
    d.height = a * 264;
    e.translate(0, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    cd(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    cd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
    e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
    e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
    e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
    e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
    e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
    e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
    e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
    e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
    e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
    e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
    e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
    e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
    e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
    e.closePath();
    cd(e, c[4], c[5], a * 6);
    return d;
  }
  function jc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 168;
    d.height = a * 100;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    md(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    cd(e, c[0]);
    Cd(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    md(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    cd(e, undefined, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    cd(e, undefined, c[3], a * 6);
    Cd(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
    cd(e, undefined, c[3], a * 6);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    md(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    cd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    cd(e, c[1]);
    Cd(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    cd(e, c[2], c[1], a * 4);
    Cd(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
    cd(e, c[3], c[1], a * 4);
    Cd(e, a * 78, a * 44, a * 20);
    cd(e, c[4]);
    return d;
  }
  function Wc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 185;
    e.height = b * 164;
    f.translate(0, 0);
    var g = function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 201;
      d.height = a * 164;
      e.translate(0, a * 5);
      e.globalAlpha = b ? 0.5 : 1;
      Cd(e, a * 100.5, a * 82, a * 74.92746655359852);
      cd(e, c[0], c[0], a * 4);
      Cd(e, a * 100.5, a * 82, a * 65.9417374971317);
      cd(e, c[0], c[0], a * 4);
      e.translate(0, -5);
      e.globalAlpha = 1;
      Cd(e, a * 100.5, a * 82, a * 74.92746655359852);
      cd(e, c[1], c[3], a * 4);
      Cd(e, a * 100.5, a * 82, a * 65.9417374971317);
      cd(e, c[1], c[2], a * 4);
      Cd(e, a * 100.5, a * 82, a * 35.9417374971317);
      cd(e, c[1], c[2], a * 20);
      Cd(e, a * 100.5, a * 82, a * 15.9417374971317);
      cd(e, c[1], c[2], a * 6);
      return d;
    }(b, c, d);
    f.drawImage(g, b * -10, b * 0);
    g = fp(b, c, d, 0);
    f.drawImage(g, b * -83, b * -40);
    g = fp(b, c, d, Math.PI / 1.4);
    f.drawImage(g, b * -15, b * -88);
    g = fp(b, c, d, Math.PI / -1.4);
    f.drawImage(g, b * 15, b * -8);
    return e;
  }
  function Gc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 102;
    d.height = a * 102;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(3, 3);
    md(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    cd(e, c[0]);
    md(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    cd(e, c[0]);
    md(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    cd(e, c[0]);
    md(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    cd(e, c[0]);
    md(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-3, -3);
    md(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    cd(e, c[1]);
    md(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    cd(e, c[1]);
    md(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    cd(e, c[2], c[3], a * 4);
    md(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    cd(e, c[2], c[3], a * 4);
    md(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    cd(e, c[2], c[3], a * 4);
    return d;
  }
  function Lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 89;
    d.height = a * 89;
    e.save();
    e.translate(a * 44.5, a * 44.5);
    zd(e, 6, a * 40, a * 10);
    e.restore();
    cd(e, c[0], c[1], a * 5);
    e.save();
    e.translate(a * 44.5, a * 44.5);
    zd(e, 6, a * 25.11521001172521, a * 10);
    e.restore();
    cd(e, c[2], c[3], a * 5);
    return d;
  }
  function Oc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 160;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    md(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    cd(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    md(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    cd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 0, a * 1);
    e.moveTo(a * 180.5, a * 169.0625);
    e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
    e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
    e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
    e.closePath();
    cd(e, c[5]);
    e.restore();
    return d;
  }
  function Nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 105;
    d.height = a * 144;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -5, a * 0);
    e.save();
    e.translate(a * 52.5, a * 91.5);
    md(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    cd(e, c[0], c[0], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    md(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    cd(e, c[0], c[0], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    md(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    cd(e, c[0], c[0], a * 4);
    e.translate(a * 5, a * 0);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 91.5);
    md(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    cd(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    md(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    cd(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    md(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    cd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 60.5);
    e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
    e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
    e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
    e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
    e.closePath();
    cd(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 40.5);
    e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
    e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
    e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
    e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
    e.closePath();
    cd(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 33.5);
    e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
    e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
    e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
    e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
    e.closePath();
    cd(e, c[9], c[8], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 47.5);
    e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
    e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
    e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
    e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
    e.closePath();
    cd(e, c[11], c[10], a * 3);
    return d;
  }
  function qc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    md(d, a * -7, a * -20, a * 14, a * 39, a * 20);
    d.restore();
    cd(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 37, a * 94);
    md(d, a * -7, a * -20, a * 14, a * 37, a * 20);
    d.restore();
    cd(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    md(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    cd(d, b[0], b[0], a * 13);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 131, a * 94);
    md(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    cd(d, b[2], b[2], a * 13);
    d.save();
    d.translate(a * 131, a * 94);
    md(d, a * -76, a * -61, a * 152, a * 122, a * 20);
    d.restore();
    cd(d, b[3], b[1], a * 8);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    md(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
    d.restore();
    cd(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    md(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
    d.restore();
    cd(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 130.5, a * 94);
    md(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    cd(d, b[3], b[2], a * 8);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    md(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    cd(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 133, a * 92);
    md(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    cd(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    md(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    cd(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 223, a * 94.5);
    md(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    cd(d, b[2]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    md(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    cd(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    md(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    cd(d, b[2]);
    return c;
  }
  function Hc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 145;
    d.height = a * 120;
    e.beginPath();
    e.scale(0.6, 0.6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 18, a * -8);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    cd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.scale(1.1, 1.1);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -9, a * 4);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    cd(e, c[4], c[5], a * 4);
    e.scale(1.1, 1.1);
    e.translate(a * -9, a * 4);
    e.save();
    e.translate(a * 100, a * 73.06874084472656);
    e.rotate(0);
    md(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
    e.restore();
    cd(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 100, a * 71.36874389648438);
    e.rotate(0);
    md(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
    e.restore();
    cd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 144, a * 80);
    e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
    e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
    e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 75);
    e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
    e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
    e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    cd(e, c[4], c[5], a * 4);
    e.translate(0, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 116.07290649414062);
    e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
    e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
    e.closePath();
    cd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.5, a * 96.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
    e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
    e.closePath();
    cd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    cd(e, c[3], c[2], a * 4);
    e.scale(0.5, 0.5);
    e.translate(a * 100, a * 71);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    cd(e, c[6], c[2], a * 4);
    return d;
  }
  function Uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 167;
    d.height = a * 136;
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    md(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 0.8;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    md(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    cd(e, rk, c[1], a * 7);
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    md(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    md(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    cd(e, ej, c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
    e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
    cd(e, Ya, c[1], a * 10);
    return d;
  }
  function Yc(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 198;
    f.height = b * 147;
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 76);
    g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
    g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
    g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
    g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
    g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
    g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
    g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
    g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
    g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
    g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
    g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
    g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
    g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
    g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
    g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
    g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
    g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
    g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
    g.closePath();
    cd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    cd(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    cd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 49, b * 98);
    g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
    g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
    g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
    g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
    g.closePath();
    cd(g, d[1]);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 54, b * 98);
    g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
    g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
    g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
    g.closePath();
    cd(g, d[0]);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 118, b * 47);
    g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
    g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
    g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
    g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
    g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
    g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
    g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
    g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
    g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
    g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
    g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
    g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
    g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
    g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
    g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
    g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
    g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
    g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
    g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
    g.closePath();
    cd(g, d[1], d[2], b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 62, b * 21);
    g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
    g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
    g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
    g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
    g.closePath();
    cd(g, d[4]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 60, b * 29);
    g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
    cd(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 61, b * 37);
    g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
    cd(g, Ll, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 52, b * 31);
    g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
    cd(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 35);
    g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
    cd(g, Qq, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 58, b * 44);
    g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
    cd(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 48);
    g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
    cd(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 41);
    g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
    cd(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 48);
    g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
    cd(g, undefined, d[3], b * 4);
    if (e == 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 99, b * 101);
      g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
      cd(g, es, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
      g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
      cd(g, Ya, d[5], b * 6);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
      cd(g, undefined, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
      cd(g, undefined, d[5], b * 6);
      Cd(g, b * 86, b * 114.39999389648438, b * 4.5);
      cd(g, d[1], d[5], b * 6);
      Cd(g, b * 121, b * 114.39999389648438, b * 4.5);
      cd(g, d[1], d[5], b * 6);
    }
    return f;
  }
  function Kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 77;
    e.translate(0, a * 10);
    e.scale(0.2, 0.2);
    e.translate(0, a * -30);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 36.5, a * 278.0625);
      e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
      e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
      e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
      e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
      e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
      e.closePath();
      cd(e, b[0], b[3], a * 50);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    cd(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    cd(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    cd(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    cd(e, b[2], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    cd(e, b[1]);
    e.scale(3, 3);
    e.translate(15, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 32);
      e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
      e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
      e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
      cd(e, Hb, b[3], a * 28);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 56, a * 6);
      e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
      e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
      e.closePath();
      cd(e, b[3], b[3], a * 28);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    cd(e, mb, b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    cd(e, b[1], b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    cd(e, undefined, b[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    cd(e, b[2], b[2], a * 10);
    return d;
  }
  function Vc(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    var e;
    d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    Cd(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
    cd(d, undefined, c[2], a * 4);
    Cd(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
    cd(d, undefined, c[1], a * 4);
    Cd(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
    cd(d, undefined, c[1], a * 4);
    d.save();
    d.translate(a * 23, a * 38.734375);
    d.rotate(0);
    md(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
    d.restore();
    cd(d, c[2], c[1], a * 4);
    d.save();
    d.translate(a * 23.5, a * 43.734375);
    d.rotate(0.5235987755982988);
    zd(d, 3, a * 8.06225774829855, a * 0);
    d.restore();
    cd(d, c[3]);
    Cd(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
    cd(d, c[3]);
    return e;
  }
  function Xc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 160;
    d.height = a * 161;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80.5, a * 78);
    md(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80.5, a * 78);
    md(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    cd(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 80, a * 78.5);
    md(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
    e.restore();
    cd(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80, a * 79.5);
    md(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80, a * 79.5);
    md(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    cd(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    cd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    cd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    cd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    cd(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 78.5, a * 78);
    md(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 78.5, a * 78);
    md(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    cd(e, c[3], c[4], a * 6);
    return d;
  }
  function Zc(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 600;
    var f = b * 22;
    var g = b * 4;
    var a = b * 4;
    c.width = e;
    c.height = f;
    md(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
    cd(d, null, "#BBE8EF", a);
    return c;
  }
  function $c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 180;
    d.height = a * 120;
    e.translate(a * -65, a * -35);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    md(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    cd(e, c[0]);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    md(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    md(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    cd(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    md(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.5, a * 73.34375);
    e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
    e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
    e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
    e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
    e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137.5, a * 65.34375);
    e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 85.34375);
    e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
    e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 89.34375);
    e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
    e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 208.5, a * 104.34375);
    e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
    e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 117.34375);
    e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
    e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.5, a * 51.34375);
    e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
    e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
    e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 170.5, a * 52.34375);
    e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
    e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
    e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 69.34375);
    e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
    e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222.5, a * 75.34375);
    e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
    e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 100.34375);
    e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
    e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112.5, a * 48.34375);
    e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
    e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.5, a * 109.34375);
    e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
    e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.5, a * 133.34375);
    e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
    e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
    e.closePath();
    cd(e, c[2]);
    return d;
  }
  function ep(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 496;
    e.height = b * 520;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
    f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
    f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
    f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
    f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
    f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
    f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
    f.closePath();
    cd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -10);
    Cd(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    cd(f, d[5], Ya, b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
    f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
    f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
    f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
    f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
    f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
    f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
    f.closePath();
    cd(f, d[0]);
    f.globalAlpha = 1;
    var g = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = 1;
      d.translate(0, a * -10);
      Cd(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      cd(d, b[1], b[2], a * 14);
      d.globalCompositeOperation = "destination-out";
      Cd(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      cd(d, b[0], b[0], a * 14);
      d.globalCompositeOperation = "source-over";
      return c;
    }(b, d);
    f.drawImage(g, 0, 0);
    f.translate(0, b * -10);
    Cd(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    cd(f, undefined, d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    cd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    cd(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    cd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    cd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    cd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    cd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    cd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    cd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    cd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    cd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    cd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    cd(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    cd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    cd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    cd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    cd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    cd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    cd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    cd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    cd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    cd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    cd(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    cd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    cd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    cd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    cd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    cd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    cd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    cd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    cd(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    cd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    cd(f, d[4], d[2], b * 12);
    return e;
  }
  function ip(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 27.3671875);
    e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
    e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
    e.closePath();
    cd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 23.3671875);
    e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
    e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
    e.closePath();
    cd(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 70.5, a * 34.8671875);
    e.rotate(0);
    md(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
    e.restore();
    cd(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 71, a * 40.8671875);
    e.rotate(0);
    md(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
    e.restore();
    cd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
    e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
    e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
    e.closePath();
    cd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
    e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
    e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
    e.closePath();
    cd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.800003051757812, a * 49.15625);
    e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
    e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
    e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
    e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
    e.closePath();
    cd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
    e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
    e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
    e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
    e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
    e.closePath();
    cd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 56.3671875);
    e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
    e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
    e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
    e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
    e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
    e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
    e.closePath();
    cd(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 68.30000305175781, a * 41.45625305175781);
    e.rotate(0.76);
    md(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
    e.restore();
    cd(e, undefined, c[5], a * 4);
    e.save();
    e.translate(a * 68.80000305175781, a * 44.45625305175781);
    e.rotate(0.76);
    md(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
    e.restore();
    cd(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 69.80000305175781, a * 44.556243896484375);
    e.rotate(0.76);
    md(e, a * -10, a * -10, a * 20, a * 20, a * 5);
    e.restore();
    cd(e, c[6], c[7], a * 4);
    return d;
  }
  function tp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 161;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    cd(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, -8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    cd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 28, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    cd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    cd(d, b[3]);
    Cd(d, a * 103, a * 110, a * 11);
    cd(d, b[4]);
    Cd(d, a * 55, a * 111, a * 11);
    cd(d, b[4]);
    Cd(d, a * 99, a * 107, a * 5);
    cd(d, b[1]);
    Cd(d, a * 51, a * 108, a * 5);
    cd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 121);
    d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    d.closePath();
    cd(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.translate(-2, 0);
    d.moveTo(a * 71, a * 162);
    d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    d.closePath();
    cd(d, b[3]);
    d.translate(2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    cd(d, Ya, b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 25, a * 63);
    d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
    d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
    d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    cd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 91, a * 53);
    d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
    d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
    d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    cd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    cd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    cd(d, b[3]);
    return c;
  }
  function np(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 310;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 192);
    e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
    e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
    e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
    e.closePath();
    cd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146, a * 239);
    e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
    e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
    e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
    e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
    e.closePath();
    cd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 193);
    e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
    e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
    e.closePath();
    cd(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 230, a * 57);
    e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
    e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
    e.closePath();
    cd(e, nl, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 212);
    e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
    e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
    e.closePath();
    cd(e, nl, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 239, a * 59);
    e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
    e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 61);
    e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
    e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
    e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 125);
    e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
    e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
    e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
    e.closePath();
    cd(e, c[2]);
    return d;
  }
  function op(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 158;
    d.height = a * 201;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    cd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    cd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    cd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    cd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    cd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    cd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    cd(e, c[8], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    cd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    cd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    cd(e, c[3], c[2], a * 4);
    Cd(e, a * 108.5, a * 148.421875, a * 9);
    cd(e, c[5]);
    Cd(e, a * 106.5, a * 144.421875, a * 3);
    cd(e, c[6]);
    Cd(e, a * 46.5, a * 148.421875, a * 9);
    cd(e, c[5]);
    Cd(e, a * 44.5, a * 144.421875, a * 3);
    cd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 114.421875);
    e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
    e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
    cd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.translate(0, a * -2);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.5, a * 131.421875);
    e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
    e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
    cd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 57.421875);
    e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
    e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
    e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
    e.closePath();
    cd(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    cd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    cd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 154.421875);
    e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
    e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
    e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
    e.closePath();
    cd(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 81.5, a * 164.421875);
    e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
    e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
    e.closePath();
    cd(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 164.421875);
    e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
    e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
    e.closePath();
    cd(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.5, a * 156.421875);
    e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
    e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
    e.closePath();
    cd(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    cd(e, c[3], c[2], a * 4);
    return d;
  }
  function ap(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    cd(d, b[0]);
    return c;
  }
  function rp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    cd(e, ij, c[2], a * 40);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    cd(e, undefined, c[1], a * 20);
    e.globalAlpha = 0.8;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    cd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
    e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
    e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
    e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
    e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
    e.closePath();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
    e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
    e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
    e.closePath();
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.00003051757812, a * 49.625);
    e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
    e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
    e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
    e.closePath();
    cd(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 36.625);
    e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
    e.closePath();
    cd(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53.000030517578125, a * 52.625);
    e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
    e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
    e.closePath();
    cd(e, c[3]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    cd(e, undefined, c[3], a * 4);
    return d;
  }
  function sp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    Cd(e, a * 220, a * 201, a * 170.41713528867922);
    cd(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    Cd(e, a * 220, a * 201, a * 170.41713528867922);
    cd(e, c[1], c[2], a * 6);
    Cd(e, a * 220, a * 201, a * 130);
    cd(e, c[11], c[2], a * 6);
    Cd(e, a * 222, a * 199, a * 120.74767078498864);
    cd(e, Ya, c[3], a * 40);
    Cd(e, a * 220, a * 200, a * 95.44108130150245);
    cd(e, undefined, c[2], a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    Cd(e, a * 63, a * 136, a * 49.193495504995376);
    cd(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    Cd(e, a * 63, a * 136, a * 49.193495504995376);
    cd(e, c[8], c[2], a * 4);
    Cd(e, a * 63, a * 137, a * 25.632011235952593);
    cd(e, c[7], c[2], a * 4);
    return d;
  }
  function hp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 117;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 90);
    e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
    e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
    e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
    e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
    e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6, a * 76);
    e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
    e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
    e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
    e.closePath();
    cd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 62);
    e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
    e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
    e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
    e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
    e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
    e.closePath();
    cd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
    e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
    e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 1, a * 89);
    e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
    e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
    e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
    e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
    e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
    e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
    e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
    e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
    e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
    e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
    e.closePath();
    cd(e, ct, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 71);
    e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
    e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
    e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
    e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
    e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
    e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
    e.closePath();
    cd(e, ej, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 89);
    e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
    e.closePath();
    cd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 102);
    e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
    e.closePath();
    cd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 62);
    e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
    e.closePath();
    cd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70, a * 41);
    e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
    e.closePath();
    cd(e, Ya, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 33);
    e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
    e.closePath();
    cd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 28);
    e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
    e.closePath();
    cd(e, Qq, c[4], a * 6);
    return d;
  }
  function gp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(a * -100, a * -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    cd(d, b[0]);
    return c;
  }
  function lp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    cd(d, b[0]);
    return c;
  }
  function up(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.save();
    e.translate(a * 70.16665649414062, a * 38.20831298828125);
    md(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
    e.restore();
    cd(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 70, a * 42.70831298828125);
    md(e, a * -61, a * -20, a * 122, a * 40, a * 20);
    e.restore();
    cd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 70.375);
    e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
    e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
    e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
    e.closePath();
    cd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 11, a * 68.375);
    e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
    e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
    e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
    e.closePath();
    cd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 32.375);
    e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
    e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
    e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
    e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
    e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
    e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
    e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
    e.closePath();
    cd(e, c[2], c[1], a * 4);
    Cd(e, a * 71, a * 44.375, a * 16.55294535724685);
    cd(e, c[2], c[1], a * 4);
    Cd(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
    cd(e, c[2], c[1], a * 4);
    return d;
  }
  function bp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    Cd(d, a * 126.5, a * 134, a * 119);
    cd(d, b[0]);
    d.globalAlpha = 1;
    Cd(d, a * 126.5, a * 124, a * 119);
    cd(d, b[1], b[2], a * 4);
    Cd(d, a * 126.5, a * 127, a * 100);
    cd(d, b[3]);
    d.globalAlpha = 0.5;
    Cd(d, a * 126.5, a * 135, a * 81);
    cd(d, b[0]);
    d.globalAlpha = 1;
    Cd(d, a * 126.5, a * 125, a * 84);
    cd(d, b[4], b[5], a * 4);
    Cd(d, a * 126.5, a * 125, a * 61);
    cd(d, b[6], b[7], a * 4);
    d.globalAlpha = 0.5;
    Cd(d, a * 126.5, a * 134, a * 40);
    cd(d, b[8]);
    d.globalAlpha = 1;
    Cd(d, a * 126.5, a * 125, a * 40);
    cd(d, b[9]);
    return c;
  }
  function dp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 345;
    d.height = a * 250;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 58);
    e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
    e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
    e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
    e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
    e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
    e.closePath();
    cd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 108, a * 51);
    e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
    e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
    e.closePath();
    cd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 249, a * 27);
    e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
    e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
    e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
    e.closePath();
    cd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 78);
    e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
    e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
    e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
    e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
    e.closePath();
    cd(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 105);
    e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
    e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
    e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
    e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
    e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
    e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
    e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
    e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
    e.closePath();
    cd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 48, a * 130);
    e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
    e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
    e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
    e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
    e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
    e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
    e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
    e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
    e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
    e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
    e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
    e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
    e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
    e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
    e.closePath();
    cd(e, c[1], c[2], a * 8);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    cd(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    cd(e, c[7], c[8], a * 8);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    cd(e, zh, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    cd(e, Ya, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 66);
    e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
    e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
    e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
    e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
    e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
    e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
    e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
    e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
    e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
    e.closePath();
    cd(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 185);
    e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
    e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
    e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
    e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
    e.closePath();
    cd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226, a * 186);
    e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
    e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
    e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
    e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
    e.closePath();
    cd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 172, a * 110);
    e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
    e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
    e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
    e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
    e.closePath();
    cd(e, c[3], c[4], a * 8);
    return d;
  }
  function vp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 139;
    d.height = a * 135;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    cd(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    cd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    cd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    cd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
    e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
    e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 65);
    e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
    e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
    e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
    e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
    e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
    e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
    e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 69);
    e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
    e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
    e.closePath();
    cd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
    e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
    e.closePath();
    cd(e, c[2]);
    return d;
  }
  function mp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 170;
    e.translate(0, a * -170);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159.5, a * 322.0625);
    e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
    e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
    e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
    e.closePath();
    cd(e, c[0], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212.5, a * 270.0625);
    e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
    e.closePath();
    cd(e, undefined, c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.5, a * 226.0625);
    e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
    e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
    e.closePath();
    cd(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164.5, a * 245.0625);
    e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
    e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
    e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
    e.closePath();
    cd(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 260.0625);
    e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
    e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
    e.closePath();
    cd(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 152.5, a * 278.0625);
    e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
    e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
    e.closePath();
    cd(e, c[2], c[3], a * 12);
    return d;
  }
  function cp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 204, a * 195.0833282470703);
    e.rotate(10.16);
    md(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
    e.restore();
    cd(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.5, a * 226.5833282470703);
    e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
    e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
    e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
    e.closePath();
    cd(e, c[2], c[3], a * 4);
    e.save();
    e.translate(a * 197, a * 169.0833282470703);
    e.rotate(10.16);
    md(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
    e.restore();
    cd(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 24.583328247070312);
    e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
    e.closePath();
    cd(e, Wd, c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
    e.closePath();
    cd(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
    e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
    e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
    e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
    e.closePath();
    cd(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
    e.closePath();
    cd(e, c[4], c[1], a * 8);
    e.save();
    e.translate(a * 249.63333129882812, a * 120.89999389648438);
    e.rotate(7.04);
    md(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
    e.restore();
    cd(e, c[5]);
    return d;
  }
  function pp() {
    new Date().getTime();
    function b(a) {
      var b = 0;
      for (var c = 0, d = 0; c < a.length; c++) {
        var e = a.charAt(c);
        if (e !== "_" && c !== 5) {
          if (e === "1") {
            b += Math.pow(2, d);
          }
          d++;
        }
      }
      return b;
    }
    ΔⵠⲆΔΔΔⲆⲆⲆ();
    ᐃᐃ[1026] = [Δᐃ.ΔⵠΔᐃⲆⲆⵠ, Δᐃ.ⲆⵠⵠⲆΔΔᐃ];
    ᐃᐃ[1025] = [];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("000_010_000")] = [Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ΔΔΔⵠⲆ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("000_010_010")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("000_010_000")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("000_011_000")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("000_010_000")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("000_011_010")] = [Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ⵠΔⲆᐃΔⵠᐃ, Δᐃ.ᐃᐃⲆⲆΔΔᐃ, Δᐃ.ⲆᐃΔⵠΔⵠⲆ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("000_011_011")] = [Δᐃ.ⵠΔΔⲆΔΔΔ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ⵠΔⲆᐃΔⵠᐃ, Δᐃ.ᐃᐃⲆⲆΔΔᐃ, Δᐃ.ⲆᐃΔⵠΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("000_110_000")] = [Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ΔΔΔⵠⲆ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("000_110_010")] = [Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.ⵠⲆΔΔΔᐃΔ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("000_110_110")] = [Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ΔᐃᐃᐃΔⵠⵠ, Δᐃ.ᐃⲆⲆⵠⲆⲆΔ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.ⵠⲆΔΔΔᐃΔ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("000_111_000")] = [Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("000_111_111")] = [Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ᐃⲆⲆⵠⲆⲆΔ, Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠΔΔⲆΔΔΔ, Δᐃ.ᐃⵠᐃΔⲆΔⵠ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_010_000")] = [Δᐃ.ΔΔΔⵠⲆ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_010_010")] = [Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_011_000")] = [Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ᐃⲆⲆᐃⵠ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_110_000")] = [Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.Ⲇⵠⵠᐃᐃ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_110_110")] = [Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ᐃⲆⲆⵠⲆⲆΔ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ᐃⵠᐃΔⲆΔⵠ, Δᐃ.ⵠᐃΔᐃⲆⲆᐃ, Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ⵠΔⲆᐃΔⵠᐃ, Δᐃ.ᐃᐃⲆⲆΔΔᐃ, Δᐃ.ⲆᐃΔⵠΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.Ⲇⵠⵠᐃᐃ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_011_010")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_011_011")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("000_111_011")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_110_010")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_111_000")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_111_010")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_111_011")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_111_110")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_111_111")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("000_111_110")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("000_111_010")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("011_011_000")] = [Δᐃ.ΔᐃΔⵠΔⵠᐃ, Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ᐃⲆⲆᐃⵠ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("011_011_010")] = [Δᐃ.ΔᐃΔⵠΔⵠᐃ, Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.Ⲇⵠⵠᐃᐃ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("011_011_011")] = [Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠΔΔⲆΔΔΔ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔᐃΔⵠΔⵠᐃ, Δᐃ.ⵠᐃΔᐃⲆⲆᐃ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("011_111_000")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("011_011_010")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("011_111_010")] = [Δᐃ.ΔᐃΔⵠΔⵠᐃ, Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ᐃⵠᐃΔⲆΔⵠ, Δᐃ.ⵠᐃΔᐃⲆⲆᐃ, Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ⵠΔⲆᐃΔⵠᐃ, Δᐃ.ᐃᐃⲆⲆΔΔᐃ, Δᐃ.ⲆᐃΔⵠΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.Ⲇⵠⵠᐃᐃ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("011_111_011")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("011_111_010")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("011_111_110")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("011_111_010")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("011_111_111")] = [Δᐃ.ΔᐃΔⵠΔⵠᐃ, Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⵠΔΔⲆΔΔΔ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ᐃⲆⲆⵠⲆⲆΔ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ᐃⵠᐃΔⲆΔⵠ, Δᐃ.ⵠᐃΔᐃⲆⲆᐃ, Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ⵠΔⲆᐃΔⵠᐃ, Δᐃ.ᐃᐃⲆⲆΔΔᐃ, Δᐃ.ⲆᐃΔⵠΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.Ⲇⵠⵠᐃᐃ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("110_110_000")] = [Δᐃ.ⵠⲆⲆⲆⵠⵠⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⲆᐃⵠⵠΔᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.Ⲇⵠⵠᐃᐃ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("110_110_010")] = [Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ⵠⲆⲆⲆⵠⵠⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.Ⲇⵠⵠᐃᐃ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("110_110_110")] = [Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ᐃⲆⲆⵠⲆⲆΔ, Δᐃ.ⵠⲆⲆⲆⵠⵠⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.Ⲇⵠⵠᐃᐃ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("110_111_000")] = [Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⵠⲆⲆⲆⵠⵠⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⲆᐃⵠⵠΔᐃ, Δᐃ.ᐃⲆⲆⵠⵠΔΔ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.Ⲇⵠⵠᐃᐃ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("110_111_110")] = [Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ᐃⲆⲆⵠⲆⲆΔ, Δᐃ.ⵠⲆⲆⲆⵠⵠⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ᐃⵠᐃΔⲆΔⵠ, Δᐃ.ᐃⲆⲆⵠⵠΔΔ, Δᐃ.ⵠᐃΔᐃⲆⲆᐃ, Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ⵠΔⲆᐃΔⵠᐃ, Δᐃ.ᐃᐃⲆⲆΔΔᐃ, Δᐃ.ⲆᐃΔⵠΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.Ⲇⵠⵠᐃᐃ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("110_111_111")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("110_111_110")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("110_111_011")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("110_111_110")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("110_111_010")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("110_111_110")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("111_111_110")] = [Δᐃ.Ⲇⵠⵠᐃᐃ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.ⲆᐃΔⵠΔⵠⲆ, Δᐃ.ᐃᐃⲆⲆΔΔᐃ, Δᐃ.ⵠΔⲆᐃΔⵠᐃ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ⵠᐃΔᐃⲆⲆᐃ, Δᐃ.ᐃⲆⲆⵠⵠΔΔ, Δᐃ.ᐃⵠᐃΔⲆΔⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⲆⲆⲆⵠⵠⵠ, Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔᐃΔⵠΔⵠᐃ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("111_111_011")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("111_111_110")];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("111_111_000")] = [Δᐃ.ⵠⲆᐃⵠⵠΔᐃ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⲆⲆⲆⵠⵠⵠ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔᐃΔⵠΔⵠᐃ, Δᐃ.ᐃⲆⲆⵠⵠΔΔ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("111_111_111")] = [Δᐃ.ΔᐃΔⵠΔⵠᐃ, Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⵠΔΔⲆΔΔΔ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ᐃⲆⲆⵠⲆⲆΔ, Δᐃ.ⵠⲆⲆⲆⵠⵠⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ᐃⵠᐃΔⲆΔⵠ, Δᐃ.ⵠᐃΔᐃⲆⲆᐃ, Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ⵠΔⲆᐃΔⵠᐃ, Δᐃ.ᐃᐃⲆⲆΔΔᐃ, Δᐃ.ⲆᐃΔⵠΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.Ⲇⵠⵠᐃᐃ];
    ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("111_111_010")] = ᐃᐃ[1025][Mr.ⵠⲆⵠ][b("111_111_110")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("000_010_000")] = [Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃᐃΔᐃᐃ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("000_010_010")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("000_010_000")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("000_011_000")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("000_010_000")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("000_011_010")] = [Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃΔⲆⵠⲆᐃΔ, Δᐃ.ⲆⲆᐃΔΔᐃᐃ, Δᐃ.ᐃᐃΔΔΔⲆⲆ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("000_011_011")] = [Δᐃ.ⲆᐃᐃⵠΔᐃᐃ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃΔⲆⵠⲆᐃΔ, Δᐃ.ⲆⲆᐃΔΔᐃᐃ, Δᐃ.ᐃᐃΔΔΔⲆⲆ, Δᐃ.Ⲇᐃⵠᐃⵠ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("000_110_000")] = [Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ᐃᐃΔᐃᐃ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("000_110_010")] = [Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ΔⵠᐃᐃⵠⵠΔ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("000_110_110")] = [Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⵠⵠⲆᐃⲆΔΔ, Δᐃ.ⲆᐃⲆⲆⵠⵠᐃ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ΔⵠᐃᐃⵠⵠΔ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("000_111_000")] = [Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("000_111_111")] = [Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⲆᐃⲆⲆⵠⵠᐃ, Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⲆᐃᐃⵠΔᐃᐃ, Δᐃ.ⵠⵠⵠⵠⲆⵠΔ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_010_000")] = [Δᐃ.ᐃᐃΔᐃᐃ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_010_010")] = [Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_011_000")] = [Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_110_000")] = [Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_110_110")] = [Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⲆᐃⲆⲆⵠⵠᐃ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⵠⵠⵠⵠⲆⵠΔ, Δᐃ.ᐃⵠⵠᐃⲆΔⲆ, Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃΔⲆⵠⲆᐃΔ, Δᐃ.ⲆⲆᐃΔΔᐃᐃ, Δᐃ.ᐃᐃΔΔΔⲆⲆ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_011_010")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_011_011")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("000_111_011")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_110_010")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_111_000")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_111_010")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_111_011")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_111_110")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_111_111")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("000_111_110")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("000_111_010")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("010_110_110")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("011_011_000")] = [Δᐃ.ⵠⵠⵠΔⲆᐃⲆ, Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("011_011_010")] = [Δᐃ.ⵠⵠⵠΔⲆᐃⲆ, Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("011_011_011")] = [Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⲆᐃᐃⵠΔᐃᐃ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⵠⵠⵠΔⲆᐃⲆ, Δᐃ.ᐃⵠⵠᐃⲆΔⲆ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("011_111_000")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("011_011_010")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("011_111_010")] = [Δᐃ.ⵠⵠⵠΔⲆᐃⲆ, Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⵠⵠⵠⵠⲆⵠΔ, Δᐃ.ᐃⵠⵠᐃⲆΔⲆ, Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃΔⲆⵠⲆᐃΔ, Δᐃ.ⲆⲆᐃΔΔᐃᐃ, Δᐃ.ᐃᐃΔΔΔⲆⲆ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("011_111_011")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("011_111_010")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("011_111_110")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("011_111_010")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("011_111_111")] = [Δᐃ.ⵠⵠⵠΔⲆᐃⲆ, Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⲆᐃᐃⵠΔᐃᐃ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⲆᐃⲆⲆⵠⵠᐃ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⵠⵠⵠⵠⲆⵠΔ, Δᐃ.ᐃⵠⵠᐃⲆΔⲆ, Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃΔⲆⵠⲆᐃΔ, Δᐃ.ⲆⲆᐃΔΔᐃᐃ, Δᐃ.ᐃᐃΔΔΔⲆⲆ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("110_110_000")] = [Δᐃ.ΔⲆΔⲆΔΔΔ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ΔⲆⵠⵠⵠΔⲆ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("110_110_010")] = [Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ΔⲆΔⲆΔΔΔ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ⲆⲆΔⲆⲆ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("110_110_110")] = [Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⲆᐃⲆⲆⵠⵠᐃ, Δᐃ.ΔⲆΔⲆΔΔΔ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ⲆⲆΔⲆⲆ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("110_111_000")] = [Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ΔⲆΔⲆΔΔΔ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ΔⲆⵠⵠⵠΔⲆ, Δᐃ.ΔⲆⲆⵠⵠΔⵠ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("110_111_110")] = [Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⲆᐃⲆⲆⵠⵠᐃ, Δᐃ.ΔⲆΔⲆΔΔΔ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⵠⵠⵠⵠⲆⵠΔ, Δᐃ.ΔⲆⲆⵠⵠΔⵠ, Δᐃ.ᐃⵠⵠᐃⲆΔⲆ, Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃΔⲆⵠⲆᐃΔ, Δᐃ.ⲆⲆᐃΔΔᐃᐃ, Δᐃ.ᐃᐃΔΔΔⲆⲆ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("110_111_111")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("110_111_110")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("110_111_011")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("110_111_110")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("110_111_010")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("110_111_110")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("111_111_110")] = [Δᐃ.ⲆⲆΔⲆⲆ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ᐃᐃΔΔΔⲆⲆ, Δᐃ.ⲆⲆᐃΔΔᐃᐃ, Δᐃ.ᐃΔⲆⵠⲆᐃΔ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ᐃⵠⵠᐃⲆΔⲆ, Δᐃ.ΔⲆⲆⵠⵠΔⵠ, Δᐃ.ⵠⵠⵠⵠⲆⵠΔ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ΔⲆΔⲆΔΔΔ, Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⵠⵠⵠΔⲆᐃⲆ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("111_111_011")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("111_111_110")];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("111_111_000")] = [Δᐃ.ΔⲆⵠⵠⵠΔⲆ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ΔⲆΔⲆΔΔΔ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⵠⵠⵠΔⲆᐃⲆ, Δᐃ.ΔⲆⲆⵠⵠΔⵠ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("111_111_111")] = [Δᐃ.ⵠⵠⵠΔⲆᐃⲆ, Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⲆᐃᐃⵠΔᐃᐃ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⲆᐃⲆⲆⵠⵠᐃ, Δᐃ.ΔⲆΔⲆΔΔΔ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⵠⵠⵠⵠⲆⵠΔ, Δᐃ.ᐃⵠⵠᐃⲆΔⲆ, Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃΔⲆⵠⲆᐃΔ, Δᐃ.ⲆⲆᐃΔΔᐃᐃ, Δᐃ.ᐃᐃΔΔΔⲆⲆ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
    ᐃᐃ[1025][Mr.ᐃⵠΔ][b("111_111_010")] = ᐃᐃ[1025][Mr.ᐃⵠΔ][b("111_111_110")];
    ᐃᐃ[1024] = [];
    ᐃᐃ[1024][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("000_010_000")] = Δᐃ.ᐃⲆⲆΔᐃΔⲆ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("000_010_010")] = Δᐃ.ᐃᐃΔⵠⲆΔⵠ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("000_011_000")] = Δᐃ.ⲆⵠΔᐃᐃⲆⵠ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("000_011_010")] = Δᐃ.ᐃΔⲆᐃᐃⲆⲆ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("000_011_011")] = Δᐃ.ⲆᐃⲆⵠⲆΔΔ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("000_110_000")] = Δᐃ.ᐃᐃⵠⵠΔΔᐃ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("000_110_010")] = Δᐃ.ⲆⲆΔⵠΔⲆⵠ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("000_110_110")] = Δᐃ.ΔⵠⲆΔΔⵠΔ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("000_111_000")] = Δᐃ.ΔΔⵠΔΔⵠΔ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("000_111_010")] = Δᐃ.ⲆᐃᐃᐃⲆⵠᐃ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("000_111_011")] = Δᐃ.ⲆᐃⵠᐃᐃᐃⲆ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("000_111_110")] = Δᐃ.ⵠΔΔⵠⵠⲆⵠ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("000_111_111")] = Δᐃ.ⲆⲆⵠⵠⲆⵠᐃ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("010_010_000")] = Δᐃ.ⵠⵠⲆᐃΔᐃᐃ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("010_010_010")] = Δᐃ.ⲆᐃⵠΔⲆᐃⵠ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("010_011_000")] = Δᐃ.ᐃⵠΔⵠΔᐃᐃ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("010_011_010")] = Δᐃ.ⵠΔΔΔᐃᐃⵠ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("010_011_011")] = Δᐃ.ⵠΔⲆᐃᐃⲆΔ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("010_110_000")] = Δᐃ.ⵠⲆᐃΔⵠΔⵠ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("010_110_010")] = Δᐃ.ᐃⵠΔᐃⲆⵠΔ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("010_110_110")] = Δᐃ.ⵠⵠΔⵠⵠΔⲆ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("010_111_000")] = Δᐃ.ⵠⲆᐃΔⵠᐃᐃ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("010_111_010")] = Δᐃ.ᐃᐃⵠᐃⵠⲆΔ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("010_111_011")] = Δᐃ.ⲆⵠᐃΔⵠⲆⲆ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("010_111_110")] = Δᐃ.ⵠᐃΔΔΔᐃⵠ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("010_111_111")] = Δᐃ.ⵠᐃᐃᐃⵠᐃΔ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("011_011_000")] = Δᐃ.ⲆᐃΔΔΔΔᐃ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("011_011_010")] = Δᐃ.ⵠⲆⲆⲆⲆᐃΔ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("011_011_011")] = Δᐃ.ᐃⲆⵠᐃΔᐃΔ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("011_111_000")] = Δᐃ.ᐃΔⵠᐃΔⵠᐃ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("011_111_010")] = Δᐃ.ΔΔⵠⵠⵠⲆΔ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("011_111_011")] = Δᐃ.ⲆᐃᐃⵠⵠⵠⲆ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("011_111_110")] = Δᐃ.ⵠⵠᐃⵠᐃⵠΔ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("011_111_111")] = Δᐃ.ⵠⲆᐃᐃⲆⵠⲆ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("110_110_000")] = Δᐃ.ⵠⵠᐃⵠⲆΔⲆ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("110_110_010")] = Δᐃ.ᐃⲆΔΔᐃΔⲆ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("110_110_110")] = Δᐃ.ⵠⲆⲆⵠᐃΔⲆ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("110_111_000")] = Δᐃ.ΔⲆⲆΔᐃⲆⵠ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("110_111_010")] = Δᐃ.ΔΔⲆⵠⲆΔⵠ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("110_111_011")] = Δᐃ.ΔᐃΔΔᐃⵠΔ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("110_111_110")] = Δᐃ.ᐃⲆⲆᐃⵠⵠΔ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("110_111_111")] = Δᐃ.ᐃⲆΔᐃⲆᐃⵠ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("111_111_011")] = Δᐃ.ΔΔⵠᐃᐃΔⵠ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("111_111_110")] = Δᐃ.ᐃᐃⵠᐃᐃΔⲆ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("111_111_011")] = Δᐃ.ΔΔⵠᐃᐃΔⵠ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("111_111_000")] = Δᐃ.ᐃⵠⲆᐃⵠᐃⲆ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("111_111_111")] = Δᐃ.ⵠⵠⲆⲆⵠᐃΔ;
    ᐃᐃ[1024][Mr.ⵠⲆⵠ][b("111_111_010")] = Δᐃ.ⲆⲆⲆⵠⲆⵠᐃ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("000_010_000")] = Δᐃ.ΔⲆΔⲆᐃⵠᐃ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("000_010_010")] = Δᐃ.ⵠⵠᐃⵠᐃᐃᐃ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("000_011_000")] = Δᐃ.ⲆⵠᐃᐃⵠΔΔ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("000_011_010")] = Δᐃ.ΔⲆⲆⲆᐃⵠⲆ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("000_011_011")] = Δᐃ.ᐃⵠⵠΔⲆⵠⲆ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("000_110_000")] = Δᐃ.ⵠⵠⵠⵠⲆᐃⵠ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("000_110_010")] = Δᐃ.ⲆⵠⲆᐃⵠⲆⵠ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("000_110_110")] = Δᐃ.ⲆΔⲆⲆΔⲆⵠ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("000_111_000")] = Δᐃ.ⵠⲆᐃⲆⲆⲆⲆ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("000_111_010")] = Δᐃ.ΔⵠⵠΔΔΔᐃ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("000_111_011")] = Δᐃ.ᐃⲆΔⵠⵠⲆⲆ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("000_111_110")] = Δᐃ.ᐃΔΔΔⲆⵠⲆ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("000_111_111")] = Δᐃ.ᐃᐃⲆΔΔⵠⲆ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("010_010_000")] = Δᐃ.ⲆⲆⲆᐃΔᐃⲆ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("010_010_010")] = Δᐃ.ᐃⲆᐃⲆⲆᐃΔ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("010_011_000")] = Δᐃ.ΔΔⲆᐃⵠΔΔ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("010_011_010")] = Δᐃ.Ⲇᐃᐃᐃᐃⵠⵠ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("010_011_011")] = Δᐃ.ΔᐃⲆᐃΔᐃΔ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("010_110_000")] = Δᐃ.ⲆⵠⲆⵠᐃΔᐃ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("010_110_010")] = Δᐃ.ᐃⵠⲆΔⲆⲆΔ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("010_110_110")] = Δᐃ.ΔⵠⲆⵠⵠⲆⲆ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("010_111_000")] = Δᐃ.ⲆⲆᐃⲆⲆⲆⲆ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("010_111_010")] = Δᐃ.ⵠⵠᐃⵠⲆⲆᐃ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("010_111_011")] = Δᐃ.ⲆᐃⵠΔΔΔΔ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("010_111_110")] = Δᐃ.ᐃᐃΔΔΔⲆΔ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("010_111_111")] = Δᐃ.ΔΔΔⲆⵠⵠⵠ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("011_011_000")] = Δᐃ.ⲆΔΔⲆⲆΔⲆ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("011_011_010")] = Δᐃ.ⲆⲆⲆᐃⲆⵠΔ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("011_011_011")] = Δᐃ.ΔⵠⲆⵠΔᐃΔ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("011_111_000")] = Δᐃ.ⵠⵠⵠⲆⵠⵠΔ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("011_111_010")] = Δᐃ.ΔΔⵠΔⵠⵠⲆ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("011_111_011")] = Δᐃ.ⲆⲆⲆᐃᐃⵠΔ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("011_111_110")] = Δᐃ.ΔᐃᐃᐃⲆⵠΔ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("011_111_111")] = Δᐃ.ᐃΔΔΔⲆⲆΔ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("110_110_000")] = Δᐃ.ΔΔΔΔΔⵠⵠ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("110_110_010")] = Δᐃ.ⲆⵠΔⵠⲆΔᐃ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("110_110_110")] = Δᐃ.ⲆⵠⵠⲆⲆΔΔ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("110_111_000")] = Δᐃ.ΔΔΔⲆᐃⲆⲆ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("110_111_010")] = Δᐃ.ΔΔΔΔᐃⲆⲆ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("110_111_011")] = Δᐃ.ΔⵠΔΔⵠΔΔ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("110_111_110")] = Δᐃ.ΔⲆᐃᐃΔⵠΔ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("110_111_111")] = Δᐃ.ᐃⵠΔⲆⲆΔᐃ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("111_111_011")] = Δᐃ.ΔⵠΔⲆᐃΔᐃ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("111_111_110")] = Δᐃ.ⵠⵠⲆⵠⲆⲆⲆ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("111_111_011")] = Δᐃ.ΔⵠΔⲆᐃΔᐃ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("111_111_000")] = Δᐃ.ⵠΔⲆⲆᐃᐃᐃ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("111_111_111")] = Δᐃ.ⵠΔⵠⵠⵠΔᐃ;
    ᐃᐃ[1024][Mr.ᐃⵠΔ][b("111_111_010")] = Δᐃ.ᐃᐃΔⵠᐃⲆΔ;
    ᐃᐃ[32] = [];
    ᐃᐃ[32][Mr.ⵠⲆⵠ] = Δᐃ.ΔΔⵠΔⵠⲆᐃ;
    ᐃᐃ[32][Mr.ᐃⵠΔ] = Δᐃ.ⵠⲆⵠⵠΔⲆᐃ;
    ᐃᐃ[205] = [];
    ᐃᐃ[205][Mr.ⵠⲆⵠ] = Δᐃ.ᐃⵠΔⵠΔⲆⵠ;
    ᐃᐃ[205][Mr.ᐃⵠΔ] = Δᐃ.ᐃⲆΔΔⲆᐃᐃ;
    ᐃᐃ[957] = [];
    ᐃᐃ[957][Mr.ⵠⲆⵠ] = Δᐃ.ᐃⵠⵠᐃⲆΔΔ;
    ᐃᐃ[957][Mr.ᐃⵠΔ] = Δᐃ.ΔᐃⵠΔΔᐃⵠ;
    ᐃᐃ[207] = [];
    ᐃᐃ[207][Mr.ⵠⲆⵠ] = Δᐃ.ᐃΔᐃΔΔΔⵠ;
    ᐃᐃ[207][Mr.ᐃⵠΔ] = Δᐃ.ⲆΔΔΔⲆᐃᐃ;
    ᐃᐃ[954] = [];
    ᐃᐃ[954][Mr.ⵠⲆⵠ] = Δᐃ.ᐃᐃΔΔΔⵠᐃ;
    ᐃᐃ[954][Mr.ᐃⵠΔ] = Δᐃ.ΔⲆᐃⵠⵠⵠⵠ;
    ᐃᐃ[958] = [];
    ᐃᐃ[958][Mr.ⵠⲆⵠ] = Δᐃ.ᐃⵠⵠⲆᐃᐃΔ;
    ᐃᐃ[958][Mr.ᐃⵠΔ] = Δᐃ.ⵠΔⲆΔΔⵠⲆ;
    ᐃᐃ[209] = [];
    ᐃᐃ[209][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⵠⵠΔΔᐃΔ;
    ᐃᐃ[209][Mr.ᐃⵠΔ] = Δᐃ.ᐃⲆⵠⲆⵠΔⲆ;
    ᐃᐃ[971] = [];
    ᐃᐃ[971][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⵠⵠᐃⵠⲆΔ;
    ᐃᐃ[971][Mr.ᐃⵠΔ] = Δᐃ.ⲆⵠΔΔᐃⵠⵠ;
    ᐃᐃ[211] = [];
    ᐃᐃ[211][Mr.ⵠⲆⵠ] = Δᐃ.ΔⵠⵠⵠΔᐃΔ;
    ᐃᐃ[211][Mr.ᐃⵠΔ] = Δᐃ.ⲆΔⲆΔᐃᐃᐃ;
    ᐃᐃ[986] = [];
    ᐃᐃ[986][Mr.ⵠⲆⵠ] = Δᐃ.ΔⲆⲆᐃΔΔⵠ;
    ᐃᐃ[986][Mr.ᐃⵠΔ] = Δᐃ.ⲆⵠᐃΔⲆΔᐃ;
    ᐃᐃ[989] = [];
    ᐃᐃ[989][Mr.ⵠⲆⵠ] = [Δᐃ.ΔⵠⲆΔⵠⵠⵠ];
    ᐃᐃ[989][Mr.ᐃⵠΔ] = [Δᐃ.ΔᐃᐃⲆⵠΔⲆ];
    ᐃᐃ[217] = [];
    ᐃᐃ[217][Mr.ⵠⲆⵠ] = Δᐃ.ΔⵠᐃⵠⲆᐃⵠ;
    ᐃᐃ[217][Mr.ᐃⵠΔ] = Δᐃ.ΔⵠᐃᐃᐃΔᐃ;
    ᐃᐃ[219] = [];
    ᐃᐃ[219][Mr.ⵠⲆⵠ] = Δᐃ.ᐃΔⵠᐃⵠⲆᐃ;
    ᐃᐃ[219][Mr.ᐃⵠΔ] = Δᐃ.ⵠᐃΔΔⲆⵠⵠ;
    ᐃᐃ[218] = [];
    ᐃᐃ[218][Mr.ⵠⲆⵠ] = Δᐃ.ᐃΔⵠΔΔⲆⲆ;
    ᐃᐃ[218][Mr.ᐃⵠΔ] = Δᐃ.ᐃᐃⵠΔⲆᐃⵠ;
    ᐃᐃ[212] = [];
    ᐃᐃ[212][Mr.ⵠⲆⵠ] = Δᐃ.ΔΔⵠⵠΔᐃᐃ;
    ᐃᐃ[212][Mr.ᐃⵠΔ] = Δᐃ.ⲆᐃΔᐃΔΔΔ;
    ᐃᐃ[213] = [];
    ᐃᐃ[213][Mr.ⵠⲆⵠ] = Δᐃ.ⲆΔᐃᐃⲆⵠΔ;
    ᐃᐃ[213][Mr.ᐃⵠΔ] = Δᐃ.ⲆΔⵠΔⵠⲆΔ;
    ᐃᐃ[214] = [];
    ᐃᐃ[214][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⲆⵠⲆⵠⲆⵠ;
    ᐃᐃ[214][Mr.ᐃⵠΔ] = Δᐃ.ΔᐃⵠⲆΔᐃᐃ;
    ᐃᐃ[215] = [];
    ᐃᐃ[215][Mr.ⵠⲆⵠ] = Δᐃ.ⵠΔᐃⲆⵠᐃⵠ;
    ᐃᐃ[215][Mr.ᐃⵠΔ] = Δᐃ.ⲆᐃⲆΔᐃΔⵠ;
    ᐃᐃ[216] = [];
    ᐃᐃ[216][Mr.ⵠⲆⵠ] = Δᐃ.ᐃᐃⲆⵠᐃᐃΔ;
    ᐃᐃ[216][Mr.ᐃⵠΔ] = Δᐃ.ⲆΔΔⲆⲆΔᐃ;
    ᐃᐃ[220] = [];
    ᐃᐃ[220][Mr.ⵠⲆⵠ] = Δᐃ.ΔΔᐃΔΔⲆⲆ;
    ᐃᐃ[220][Mr.ᐃⵠΔ] = Δᐃ.ΔⲆᐃᐃΔⲆᐃ;
    ᐃᐃ[1020] = [];
    ᐃᐃ[1020][Mr.ⵠⲆⵠ] = Δᐃ.ᐃⵠᐃⵠᐃᐃⵠ;
    ᐃᐃ[1020][Mr.ᐃⵠΔ] = Δᐃ.ⵠᐃΔΔᐃΔΔ;
    ᐃᐃ[1021] = [];
    ᐃᐃ[1021][Mr.ⵠⲆⵠ] = Δᐃ.ΔᐃᐃᐃⲆᐃⵠ;
    ᐃᐃ[1021][Mr.ᐃⵠΔ] = Δᐃ.ⲆΔΔᐃᐃⲆⲆ;
    ᐃᐃ[39] = [];
    ᐃᐃ[39][Mr.ⵠⲆⵠ] = Δᐃ.ⲆᐃΔⵠⵠⲆⲆ;
    ᐃᐃ[39][Mr.ᐃⵠΔ] = Δᐃ.ᐃᐃΔⵠΔⵠΔ;
    ᐃᐃ[1022] = Δᐃ.ⲆⵠΔᐃΔᐃΔ;
    ᐃᐃ[1023] = Δᐃ.ⵠΔΔΔᐃᐃᐃ;
    ᐃᐃ[1041] = [];
    ᐃᐃ[1041][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[1041][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[1041][Mr.ⵠⲆⵠ].push(Δᐃ.ⵠᐃⲆⲆⵠⲆᐃ);
    ᐃᐃ[1041][Mr.ⵠⲆⵠ].push(Δᐃ.ⲆΔⲆⲆᐃⲆᐃ);
    ᐃᐃ[1041][Mr.ⵠⲆⵠ].push(Δᐃ.ΔⲆⵠⲆΔⵠΔ);
    ᐃᐃ[1041][Mr.ᐃⵠΔ].push(Δᐃ.ⵠⵠΔΔⲆⲆⵠ);
    ᐃᐃ[1041][Mr.ᐃⵠΔ].push(Δᐃ.ΔᐃΔⵠΔⵠⲆ);
    ᐃᐃ[1041][Mr.ᐃⵠΔ].push(Δᐃ.ᐃⲆᐃᐃⵠⵠⲆ);
    ᐃᐃ[244] = [];
    ᐃᐃ[244][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[244][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[244][Mr.ⵠⲆⵠ].push(Δᐃ.ⵠᐃⵠΔⵠΔΔ);
    ᐃᐃ[244][Mr.ⵠⲆⵠ].push(Δᐃ.ⵠΔⲆᐃⲆᐃⵠ);
    ᐃᐃ[244][Mr.ⵠⲆⵠ].push(Δᐃ.ΔΔᐃⵠⵠⵠⲆ);
    ᐃᐃ[244][Mr.ᐃⵠΔ].push(Δᐃ.ΔᐃᐃⲆΔΔⵠ);
    ᐃᐃ[244][Mr.ᐃⵠΔ].push(Δᐃ.ⵠⵠⲆᐃⲆΔⲆ);
    ᐃᐃ[244][Mr.ᐃⵠΔ].push(Δᐃ.ΔⵠᐃⵠⲆΔᐃ);
    ᐃᐃ[1052] = [];
    ᐃᐃ[1052][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[1052][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[1052][Mr.ⵠⲆⵠ].push(Δᐃ.ᐃⵠΔΔⲆΔⵠ);
    ᐃᐃ[1052][Mr.ⵠⲆⵠ].push(Δᐃ.ⲆⲆⵠᐃᐃⲆᐃ);
    ᐃᐃ[1052][Mr.ⵠⲆⵠ].push(Δᐃ.ΔΔΔⵠⵠⲆⲆ);
    ᐃᐃ[1052][Mr.ⵠⲆⵠ].push(Δᐃ.ᐃⵠᐃⵠᐃᐃᐃ);
    ᐃᐃ[1052][Mr.ⵠⲆⵠ].push(Δᐃ.ᐃΔⵠᐃⲆΔᐃ);
    ᐃᐃ[1052][Mr.ᐃⵠΔ].push(Δᐃ.ᐃⵠⵠΔⵠⵠⵠ);
    ᐃᐃ[1052][Mr.ᐃⵠΔ].push(Δᐃ.ΔΔᐃⲆΔΔᐃ);
    ᐃᐃ[1052][Mr.ᐃⵠΔ].push(Δᐃ.ΔⵠΔΔⵠⵠⲆ);
    ᐃᐃ[1052][Mr.ᐃⵠΔ].push(Δᐃ.ᐃⲆⲆⵠᐃΔⲆ);
    ᐃᐃ[1052][Mr.ᐃⵠΔ].push(Δᐃ.ᐃⵠⵠⲆᐃⲆⲆ);
    ᐃᐃ[450] = [];
    ᐃᐃ[450][Mr.ⵠⲆⵠ] = Δᐃ.ᐃⵠᐃⲆⲆΔΔ;
    ᐃᐃ[450][Mr.ᐃⵠΔ] = Δᐃ.ⵠΔᐃⲆⲆΔⵠ;
    ᐃᐃ[453] = [];
    ᐃᐃ[453][Mr.ⵠⲆⵠ] = Δᐃ.ⲆΔⵠΔⵠΔᐃ;
    ᐃᐃ[453][Mr.ᐃⵠΔ] = Δᐃ.ΔΔᐃⲆᐃᐃᐃ;
    ᐃᐃ[454] = [];
    ᐃᐃ[454][Mr.ⵠⲆⵠ] = Δᐃ.ⲆᐃᐃⲆᐃⵠⲆ;
    ᐃᐃ[454][Mr.ᐃⵠΔ] = Δᐃ.ΔⲆᐃⲆᐃⲆⵠ;
    ᐃᐃ[464] = Δᐃ.ΔᐃⵠⲆⵠΔⵠ;
    ᐃᐃ[468] = Δᐃ.ΔᐃⲆᐃΔⵠᐃ;
    ᐃᐃ[469] = Δᐃ.ⵠΔΔⵠⵠⵠᐃ;
    ᐃᐃ[20] = [];
    ᐃᐃ[20][Mr.ⵠⲆⵠ] = Δᐃ.ΔⲆⵠⵠⵠᐃⲆ;
    ᐃᐃ[20][Mr.ᐃⵠΔ] = Δᐃ.ⵠΔⵠΔⲆⲆᐃ;
    ᐃᐃ[920] = [];
    ᐃᐃ[920][Mr.ⵠⲆⵠ] = Δᐃ.ᐃΔᐃⵠᐃⵠⲆ;
    ᐃᐃ[920][Mr.ᐃⵠΔ] = Δᐃ.ⵠᐃΔⲆᐃⲆⵠ;
    ᐃᐃ[21] = [];
    ᐃᐃ[21][Mr.ⵠⲆⵠ] = Δᐃ.ⵠᐃᐃΔᐃᐃᐃ;
    ᐃᐃ[21][Mr.ᐃⵠΔ] = Δᐃ.ᐃⲆΔᐃᐃᐃⲆ;
    ᐃᐃ[924] = [];
    ᐃᐃ[924][Mr.ⵠⲆⵠ] = Δᐃ.ᐃΔᐃⵠᐃⵠⲆ;
    ᐃᐃ[924][Mr.ᐃⵠΔ] = Δᐃ.ⵠᐃΔⲆᐃⲆⵠ;
    ᐃᐃ[44] = [];
    ᐃᐃ[44][Mr.ⵠⲆⵠ] = Δᐃ.ⵠΔⵠᐃⲆᐃⵠ;
    ᐃᐃ[44][Mr.ᐃⵠΔ] = Δᐃ.ⲆⵠᐃⵠΔⵠΔ;
    ᐃᐃ[19] = [];
    ᐃᐃ[19][Mr.ⵠⲆⵠ] = Δᐃ.ΔᐃᐃⲆΔᐃⲆ;
    ᐃᐃ[19][Mr.ᐃⵠΔ] = Δᐃ.ⵠΔⲆⲆⲆⵠⵠ;
    ᐃᐃ[34] = [];
    ᐃᐃ[34][Mr.ⵠⲆⵠ] = Δᐃ.ⲆΔⵠⲆΔᐃⵠ;
    ᐃᐃ[34][Mr.ᐃⵠΔ] = Δᐃ.ⵠⲆᐃⲆΔⵠᐃ;
    ᐃᐃ[17] = [];
    ᐃᐃ[17][Mr.ⵠⲆⵠ] = Δᐃ.ᐃΔⵠΔⲆᐃⵠ;
    ᐃᐃ[17][Mr.ᐃⵠΔ] = Δᐃ.ΔⵠΔΔⲆⵠᐃ;
    ᐃᐃ[63] = [];
    ᐃᐃ[63][Mr.ⵠⲆⵠ] = Δᐃ.ⵠᐃⲆᐃⵠⲆⲆ;
    ᐃᐃ[63][Mr.ᐃⵠΔ] = Δᐃ.ᐃᐃⵠΔΔΔΔ;
    ᐃᐃ[60] = [];
    ᐃᐃ[60][Mr.ⵠⲆⵠ] = Δᐃ.ΔⲆΔⵠΔⵠᐃ;
    ᐃᐃ[60][Mr.ᐃⵠΔ] = Δᐃ.ⲆⵠΔⵠⲆⲆᐃ;
    ᐃᐃ[94] = [];
    ᐃᐃ[94][Mr.ⵠⲆⵠ] = Δᐃ.ⵠΔᐃΔⲆⵠΔ;
    ᐃᐃ[94][Mr.ᐃⵠΔ] = Δᐃ.ⵠᐃⵠΔⲆⲆᐃ;
    ᐃᐃ[95] = [];
    ᐃᐃ[95][Mr.ⵠⲆⵠ] = Δᐃ.ⵠΔΔᐃᐃᐃᐃ;
    ᐃᐃ[95][Mr.ᐃⵠΔ] = Δᐃ.ⵠᐃΔᐃᐃᐃⵠ;
    ᐃᐃ[96] = [];
    ᐃᐃ[96][Mr.ⵠⲆⵠ] = Δᐃ.ⵠⵠⲆΔΔᐃⵠ;
    ᐃᐃ[96][Mr.ᐃⵠΔ] = Δᐃ.ΔᐃᐃⵠΔΔⵠ;
    ᐃᐃ[97] = [];
    ᐃᐃ[97][Mr.ⵠⲆⵠ] = Δᐃ.ⲆΔⲆⲆΔⲆᐃ;
    ᐃᐃ[97][Mr.ᐃⵠΔ] = Δᐃ.ⲆΔᐃⵠⵠᐃᐃ;
    ᐃᐃ[98] = [];
    ᐃᐃ[98][Mr.ⵠⲆⵠ] = Δᐃ.ⵠⵠΔᐃΔᐃΔ;
    ᐃᐃ[98][Mr.ᐃⵠΔ] = Δᐃ.ΔⲆΔⵠⵠΔᐃ;
    ᐃᐃ[99] = [];
    ᐃᐃ[99][Mr.ⵠⲆⵠ] = Δᐃ.ⵠΔΔΔⲆΔᐃ;
    ᐃᐃ[99][Mr.ᐃⵠΔ] = Δᐃ.ⲆᐃΔΔᐃⲆᐃ;
    ᐃᐃ[90] = [];
    ᐃᐃ[90][Mr.ⵠⲆⵠ] = Δᐃ.ᐃΔⵠΔᐃⵠⵠ;
    ᐃᐃ[90][Mr.ᐃⵠΔ] = Δᐃ.ΔⵠᐃΔᐃΔΔ;
    ᐃᐃ[91] = [];
    ᐃᐃ[91][Mr.ⵠⲆⵠ] = Δᐃ.ⵠᐃΔᐃⵠⲆⲆ;
    ᐃᐃ[91][Mr.ᐃⵠΔ] = Δᐃ.ⵠΔΔⲆⵠΔΔ;
    ᐃᐃ[71] = [];
    ᐃᐃ[71][Mr.ⵠⲆⵠ] = Δᐃ.ⵠⲆⵠΔᐃⵠⲆᐃⲆ;
    ᐃᐃ[71][Mr.ᐃⵠΔ] = Δᐃ.ⵠⵠⲆⲆⲆᐃΔΔᐃ;
    ᐃᐃ[72] = [];
    ᐃᐃ[72][Mr.ⵠⲆⵠ] = Δᐃ.ⵠⲆⵠⵠⲆΔⲆΔⵠ;
    ᐃᐃ[72][Mr.ᐃⵠΔ] = Δᐃ.ⵠΔⲆⲆᐃⵠᐃⵠⵠ;
    ᐃᐃ[73] = [];
    ᐃᐃ[73][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⲆΔᐃᐃΔᐃΔᐃ;
    ᐃᐃ[73][Mr.ᐃⵠΔ] = Δᐃ.ᐃⲆᐃΔⵠⲆⲆⵠⲆ;
    ᐃᐃ[74] = [];
    ᐃᐃ[74][Mr.ⵠⲆⵠ] = Δᐃ.ᐃⵠΔⵠⵠⲆⵠⵠⵠ;
    ᐃᐃ[74][Mr.ᐃⵠΔ] = Δᐃ.ᐃᐃⲆⲆⵠⲆᐃΔⲆ;
    ᐃᐃ[75] = [];
    ᐃᐃ[75][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⵠⲆᐃΔᐃΔⵠⲆ;
    ᐃᐃ[75][Mr.ᐃⵠΔ] = Δᐃ.ᐃΔᐃΔⵠᐃᐃⲆᐃ;
    ᐃᐃ[76] = [];
    ᐃᐃ[76][Mr.ⵠⲆⵠ] = Δᐃ.ᐃΔΔⲆΔᐃⲆΔⵠ;
    ᐃᐃ[76][Mr.ᐃⵠΔ] = Δᐃ.ᐃⵠⲆⵠⲆᐃⲆⲆᐃ;
    ᐃᐃ[101] = [];
    ᐃᐃ[101][Mr.ⵠⲆⵠ] = Δᐃ.ΔΔⲆⲆⲆⵠⵠ;
    ᐃᐃ[101][Mr.ᐃⵠΔ] = Δᐃ.ΔᐃᐃⲆΔᐃΔ;
    ᐃᐃ[64] = [];
    ᐃᐃ[64][Mr.ⵠⲆⵠ] = Δᐃ.ⵠᐃΔΔΔᐃⲆ;
    ᐃᐃ[64][Mr.ᐃⵠΔ] = Δᐃ.ⲆΔⵠᐃᐃΔᐃ;
    ᐃᐃ[102] = [];
    ᐃᐃ[102][Mr.ⵠⲆⵠ] = Δᐃ.ⲆᐃⲆΔΔΔᐃ;
    ᐃᐃ[102][Mr.ᐃⵠΔ] = Δᐃ.ΔᐃᐃⲆᐃⲆΔ;
    ᐃᐃ[65] = [];
    ᐃᐃ[65][Mr.ⵠⲆⵠ] = Δᐃ.ⵠⲆⲆΔᐃᐃᐃ;
    ᐃᐃ[65][Mr.ᐃⵠΔ] = Δᐃ.ΔⵠΔᐃⲆⲆᐃ;
    ᐃᐃ[103] = [];
    ᐃᐃ[103][Mr.ⵠⲆⵠ] = Δᐃ.ΔᐃⲆᐃΔΔⲆ;
    ᐃᐃ[103][Mr.ᐃⵠΔ] = Δᐃ.ΔⵠᐃΔⵠΔΔ;
    ᐃᐃ[66] = [];
    ᐃᐃ[66][Mr.ⵠⲆⵠ] = Δᐃ.ᐃΔⵠⲆΔΔΔ;
    ᐃᐃ[66][Mr.ᐃⵠΔ] = Δᐃ.ΔΔΔΔΔᐃⲆ;
    ᐃᐃ[104] = [];
    ᐃᐃ[104][Mr.ⵠⲆⵠ] = Δᐃ.ᐃⲆΔᐃⲆΔⲆ;
    ᐃᐃ[104][Mr.ᐃⵠΔ] = Δᐃ.ΔⵠΔᐃΔⵠᐃ;
    ᐃᐃ[67] = [];
    ᐃᐃ[67][Mr.ⵠⲆⵠ] = Δᐃ.ⵠⵠⵠⵠΔΔⵠ;
    ᐃᐃ[67][Mr.ᐃⵠΔ] = Δᐃ.ᐃⵠΔⲆⲆⲆᐃ;
    ᐃᐃ[105] = [];
    ᐃᐃ[105][Mr.ⵠⲆⵠ] = Δᐃ.ᐃⵠΔⵠⲆⵠᐃ;
    ᐃᐃ[105][Mr.ᐃⵠΔ] = Δᐃ.ΔⵠΔᐃⵠᐃⵠ;
    ᐃᐃ[68] = [];
    ᐃᐃ[68][Mr.ⵠⲆⵠ] = Δᐃ.ⵠᐃᐃᐃΔⲆⵠ;
    ᐃᐃ[68][Mr.ᐃⵠΔ] = Δᐃ.ⲆⵠΔⲆⵠΔᐃ;
    ᐃᐃ[106] = [];
    ᐃᐃ[106][Mr.ⵠⲆⵠ] = Δᐃ.ⵠᐃΔᐃΔᐃΔ;
    ᐃᐃ[106][Mr.ᐃⵠΔ] = Δᐃ.ⵠⲆᐃⲆᐃᐃᐃ;
    ᐃᐃ[69] = [];
    ᐃᐃ[69][Mr.ⵠⲆⵠ] = Δᐃ.ᐃΔⲆⲆᐃⵠΔ;
    ᐃᐃ[69][Mr.ᐃⵠΔ] = Δᐃ.ⲆΔΔᐃⵠΔⲆ;
    ᐃᐃ[107] = [];
    ᐃᐃ[107][Mr.ⵠⲆⵠ] = Δᐃ.ⵠΔⲆⵠΔᐃⲆ;
    ᐃᐃ[107][Mr.ᐃⵠΔ] = Δᐃ.ⲆᐃⲆⲆⲆΔⵠ;
    ᐃᐃ[70] = [];
    ᐃᐃ[70][Mr.ⵠⲆⵠ] = Δᐃ.ᐃᐃᐃᐃΔᐃⵠ;
    ᐃᐃ[70][Mr.ᐃⵠΔ] = Δᐃ.ΔᐃᐃⲆⲆᐃΔ;
    ᐃᐃ[80] = [];
    ᐃᐃ[80][Mr.ⵠⲆⵠ] = Δᐃ.ΔΔᐃᐃΔᐃᐃ;
    ᐃᐃ[80][Mr.ᐃⵠΔ] = Δᐃ.ⲆᐃᐃⵠΔⵠⵠ;
    ᐃᐃ[81] = [];
    ᐃᐃ[81][Mr.ⵠⲆⵠ] = Δᐃ.ⵠᐃⲆⲆΔⲆⵠ;
    ᐃᐃ[81][Mr.ᐃⵠΔ] = Δᐃ.ᐃⲆⲆⵠⲆⲆⲆ;
    ᐃᐃ[22] = [];
    ᐃᐃ[22][Mr.ⵠⲆⵠ] = Δᐃ.ⲆΔⵠⲆΔⲆⵠ;
    ᐃᐃ[22][Mr.ᐃⵠΔ] = Δᐃ.ΔⲆⲆⲆΔᐃⲆ;
    ᐃᐃ[928] = [];
    ᐃᐃ[928][Mr.ⵠⲆⵠ] = Δᐃ.ᐃᐃⵠΔⲆᐃⲆ;
    ᐃᐃ[928][Mr.ᐃⵠΔ] = Δᐃ.ⲆΔᐃⵠⲆᐃⵠ;
    ᐃᐃ[935] = [];
    ᐃᐃ[935][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[935][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[935][Mr.ⵠⲆⵠ].push(Δᐃ.ⲆⲆⵠΔΔΔΔᐃⵠ);
    ᐃᐃ[935][Mr.ⵠⲆⵠ].push(Δᐃ.ⵠⲆΔⵠⲆⲆΔᐃᐃ);
    ᐃᐃ[935][Mr.ᐃⵠΔ].push(Δᐃ.ⵠⲆΔⵠⲆⲆΔᐃᐃ);
    ᐃᐃ[935][Mr.ᐃⵠΔ].push(Δᐃ.ᐃⵠⲆΔⲆᐃΔΔΔ);
    ᐃᐃ[941] = [];
    ᐃᐃ[941][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[941][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[941][Mr.ⵠⲆⵠ].push(Δᐃ.ⵠⲆᐃⵠᐃΔⵠ);
    ᐃᐃ[941][Mr.ⵠⲆⵠ].push(Δᐃ.ᐃⲆⲆᐃᐃⵠⲆ);
    ᐃᐃ[941][Mr.ⵠⲆⵠ].push(Δᐃ.ᐃⲆⵠⲆΔⵠⵠ);
    ᐃᐃ[941][Mr.ᐃⵠΔ].push(Δᐃ.ⲆΔᐃᐃᐃⵠⲆ);
    ᐃᐃ[941][Mr.ᐃⵠΔ].push(Δᐃ.ⵠᐃⲆⲆⲆⵠⲆ);
    ᐃᐃ[941][Mr.ᐃⵠΔ].push(Δᐃ.ⲆᐃⲆΔⵠᐃⵠ);
    ᐃᐃ[53] = [];
    ᐃᐃ[53][Mr.ⵠⲆⵠ] = Δᐃ.ᐃᐃⲆᐃⲆⲆⲆ;
    ᐃᐃ[53][Mr.ᐃⵠΔ] = Δᐃ.ΔⲆΔⵠⲆᐃⲆ;
    ᐃᐃ[54] = [];
    ᐃᐃ[54][Mr.ⵠⲆⵠ] = Δᐃ.ᐃᐃⲆΔᐃⵠᐃ;
    ᐃᐃ[54][Mr.ᐃⵠΔ] = Δᐃ.ⲆⲆᐃⵠⵠᐃΔ;
    ᐃᐃ[241] = [];
    ᐃᐃ[241][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[241][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[241][Mr.ⵠⲆⵠ].push(Δᐃ.ⲆⵠᐃᐃⲆᐃΔ);
    ᐃᐃ[241][Mr.ⵠⲆⵠ].push(Δᐃ.ⵠⲆⵠⵠⵠᐃⲆ);
    ᐃᐃ[241][Mr.ⵠⲆⵠ].push(Δᐃ.ΔᐃᐃⲆᐃⵠΔ);
    ᐃᐃ[241][Mr.ᐃⵠΔ].push(Δᐃ.ⵠⲆΔΔᐃⵠⲆ);
    ᐃᐃ[241][Mr.ᐃⵠΔ].push(Δᐃ.ⵠⵠᐃⲆⲆⵠⵠ);
    ᐃᐃ[241][Mr.ᐃⵠΔ].push(Δᐃ.ᐃΔⵠⲆⲆᐃΔ);
    ᐃᐃ[202] = [];
    ᐃᐃ[202][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[202][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[202][Mr.ⵠⲆⵠ].push(Δᐃ.ⵠᐃⵠᐃⵠⵠΔ);
    ᐃᐃ[202][Mr.ⵠⲆⵠ].push(Δᐃ.ⲆᐃⵠΔΔᐃΔ);
    ᐃᐃ[202][Mr.ⵠⲆⵠ].push(Δᐃ.ΔΔᐃⵠᐃⲆⵠ);
    ᐃᐃ[202][Mr.ᐃⵠΔ].push(Δᐃ.ⵠᐃⵠΔⵠᐃᐃ);
    ᐃᐃ[202][Mr.ᐃⵠΔ].push(Δᐃ.ⲆⵠⲆΔⵠⲆΔ);
    ᐃᐃ[202][Mr.ᐃⵠΔ].push(Δᐃ.ΔⲆⲆⲆⲆⵠᐃ);
    ᐃᐃ[203] = [];
    ᐃᐃ[203][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[203][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[203][Mr.ⵠⲆⵠ].push(Δᐃ.ⵠⲆⲆⲆᐃⲆⵠ);
    ᐃᐃ[203][Mr.ⵠⲆⵠ].push(Δᐃ.ⵠΔⵠⲆΔΔⲆ);
    ᐃᐃ[203][Mr.ⵠⲆⵠ].push(Δᐃ.ⵠⲆⵠⲆΔⵠⲆ);
    ᐃᐃ[203][Mr.ⵠⲆⵠ].push(Δᐃ.ⲆⲆⵠᐃⵠⵠⵠ);
    ᐃᐃ[203][Mr.ⵠⲆⵠ].push(Δᐃ.ⲆΔⲆⵠΔⲆΔ);
    ᐃᐃ[203][Mr.ⵠⲆⵠ].push(Δᐃ.ᐃᐃΔⲆΔΔⲆ);
    ᐃᐃ[203][Mr.ᐃⵠΔ].push(Δᐃ.ΔⵠⵠᐃⲆⲆⵠ);
    ᐃᐃ[203][Mr.ᐃⵠΔ].push(Δᐃ.ᐃΔⵠⲆⵠⵠᐃ);
    ᐃᐃ[203][Mr.ᐃⵠΔ].push(Δᐃ.ⵠΔⵠΔⲆᐃⲆ);
    ᐃᐃ[203][Mr.ᐃⵠΔ].push(Δᐃ.ⵠᐃΔᐃⵠⵠⵠ);
    ᐃᐃ[203][Mr.ᐃⵠΔ].push(Δᐃ.ΔⵠⲆᐃⲆⲆⵠ);
    ᐃᐃ[203][Mr.ᐃⵠΔ].push(Δᐃ.ⵠⵠΔⲆⵠΔᐃ);
    ᐃᐃ[Mr.ᐃΔΔΔⵠ] = [];
    ᐃᐃ[Mr.ᐃΔΔΔⵠ][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[Mr.ᐃΔΔΔⵠ][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[Mr.ᐃΔΔΔⵠ][Mr.ⵠⲆⵠ].push(Δᐃ.ᐃᐃⵠⲆΔⲆⵠ);
    ᐃᐃ[Mr.ᐃΔΔΔⵠ][Mr.ⵠⲆⵠ].push(Δᐃ.ᐃⵠΔΔⲆᐃⵠ);
    ᐃᐃ[Mr.ᐃΔΔΔⵠ][Mr.ⵠⲆⵠ].push(Δᐃ.ⲆΔΔΔΔⲆΔ);
    ᐃᐃ[Mr.ᐃΔΔΔⵠ][Mr.ⵠⲆⵠ].push(Δᐃ.ΔⲆᐃⲆⵠⲆⵠ);
    ᐃᐃ[Mr.ᐃΔΔΔⵠ][Mr.ⵠⲆⵠ].push(Δᐃ.ᐃⵠⲆⲆⲆⲆᐃ);
    ᐃᐃ[Mr.ᐃΔΔΔⵠ][Mr.ⵠⲆⵠ].push(Δᐃ.ᐃΔᐃΔⲆⲆᐃ);
    ᐃᐃ[Mr.ᐃΔΔΔⵠ][Mr.ᐃⵠΔ].push(Δᐃ.ⵠᐃⲆΔᐃΔⵠ);
    ᐃᐃ[Mr.ᐃΔΔΔⵠ][Mr.ᐃⵠΔ].push(Δᐃ.ⵠⵠΔⲆⲆΔᐃ);
    ᐃᐃ[Mr.ᐃΔΔΔⵠ][Mr.ᐃⵠΔ].push(Δᐃ.ⵠⵠⵠⲆᐃⲆΔ);
    ᐃᐃ[Mr.ᐃΔΔΔⵠ][Mr.ᐃⵠΔ].push(Δᐃ.ᐃⵠⵠᐃⲆΔᐃ);
    ᐃᐃ[Mr.ᐃΔΔΔⵠ][Mr.ᐃⵠΔ].push(Δᐃ.ᐃᐃΔᐃⵠⵠⵠ);
    ᐃᐃ[Mr.ᐃΔΔΔⵠ][Mr.ᐃⵠΔ].push(Δᐃ.ⵠᐃΔΔⲆᐃᐃ);
    ᐃᐃ[918] = [];
    ᐃᐃ[918][Mr.ⵠⲆⵠ] = Δᐃ.ΔⲆᐃⵠΔΔΔ;
    ᐃᐃ[918][Mr.ᐃⵠΔ] = Δᐃ.ᐃΔΔᐃⵠⵠΔ;
    ᐃᐃ[919] = Δᐃ.ⲆⲆᐃⵠⲆᐃΔ;
    ᐃᐃ[56] = [];
    ᐃᐃ[56][Mr.ⵠⲆⵠ] = Δᐃ.ΔⲆⵠⲆⵠΔᐃⵠᐃ;
    ᐃᐃ[56][Mr.ᐃⵠΔ] = Δᐃ.ⲆⲆᐃᐃᐃᐃⵠΔⵠ;
    ᐃᐃ[223] = [];
    ᐃᐃ[223][Mr.ⵠⲆⵠ] = Δᐃ.ⲆᐃⵠΔⵠⵠΔ;
    ᐃᐃ[223][Mr.ᐃⵠΔ] = Δᐃ.ᐃᐃⲆΔⵠΔᐃ;
    ᐃᐃ[224] = [];
    ᐃᐃ[224][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⲆΔⵠΔⲆᐃ;
    ᐃᐃ[224][Mr.ᐃⵠΔ] = Δᐃ.ⵠⵠᐃⵠⵠⲆⲆ;
    ᐃᐃ[236] = [];
    ᐃᐃ[236][Mr.ⵠⲆⵠ] = Δᐃ.ᐃⲆᐃⲆᐃΔΔ;
    ᐃᐃ[236][Mr.ᐃⵠΔ] = Δᐃ.ΔⵠⵠⲆⲆⵠⲆ;
    ᐃᐃ[1033] = [];
    ᐃᐃ[1033][Mr.ⵠⲆⵠ] = Δᐃ.ᐃΔⵠΔᐃᐃⲆ;
    ᐃᐃ[1033][Mr.ᐃⵠΔ] = Δᐃ.ΔΔᐃⲆⵠᐃⲆ;
    ᐃᐃ[1034] = Δᐃ.ⲆⵠⲆΔⵠⲆᐃ;
    ᐃᐃ[1150] = [];
    ᐃᐃ[1150][Mr.ⵠⲆⵠ] = Δᐃ.ΔΔⵠⵠᐃⵠᐃ;
    ᐃᐃ[1150][Mr.ᐃⵠΔ] = Δᐃ.ⵠΔⲆΔᐃⲆⲆ;
    ᐃᐃ[1152] = [];
    ᐃᐃ[1152][Mr.ⵠⲆⵠ] = Δᐃ.ⵠᐃᐃᐃΔⵠΔ;
    ᐃᐃ[1152][Mr.ᐃⵠΔ] = Δᐃ.ΔᐃΔⵠΔⲆⵠ;
    ᐃᐃ[1149] = Δᐃ.ΔⵠⲆᐃᐃⵠΔ;
    ᐃᐃ[1151] = Δᐃ.ΔᐃⵠⵠⲆⲆⲆ;
    ᐃᐃ[1153] = Δᐃ.ᐃⲆᐃⵠΔⲆᐃ;
    ᐃᐃ[1143] = [];
    ᐃᐃ[1143][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⲆⵠᐃᐃᐃΔ;
    ᐃᐃ[1143][Mr.ᐃⵠΔ] = Δᐃ.ⲆⲆⵠⵠΔⲆΔ;
    ᐃᐃ[1145] = [];
    ᐃᐃ[1145][Mr.ⵠⲆⵠ] = Δᐃ.ⵠⲆᐃⵠᐃᐃⲆ;
    ᐃᐃ[1145][Mr.ᐃⵠΔ] = Δᐃ.ⲆᐃⲆᐃⲆⲆⲆ;
    ᐃᐃ[1146] = [];
    ᐃᐃ[1146][Mr.ⵠⲆⵠ] = Δᐃ.ΔⵠΔᐃⲆΔⲆ;
    ᐃᐃ[1146][Mr.ᐃⵠΔ] = Δᐃ.ᐃᐃⲆᐃⲆⲆᐃ;
    ᐃᐃ[1144] = Δᐃ.ᐃⲆᐃᐃᐃᐃⵠ;
    ᐃᐃ[1148] = Δᐃ.ΔⲆⵠⲆᐃΔΔ;
    ᐃᐃ[1147] = Δᐃ.ᐃⵠΔᐃΔⵠⵠ;
    ᐃᐃ[1053] = [];
    ᐃᐃ[1053][Mr.ⵠⲆⵠ] = Δᐃ.ⵠΔᐃΔΔᐃⵠ;
    ᐃᐃ[1053][Mr.ᐃⵠΔ] = Δᐃ.ᐃⲆᐃΔⲆΔⵠ;
    ᐃᐃ[1055] = [];
    ᐃᐃ[1055][Mr.ⵠⲆⵠ] = Δᐃ.ⵠΔΔΔⲆⵠΔ;
    ᐃᐃ[1055][Mr.ᐃⵠΔ] = Δᐃ.ᐃⲆⵠΔⲆⲆⲆ;
    ᐃᐃ[231] = [];
    ᐃᐃ[231][Mr.ⵠⲆⵠ] = Δᐃ.ᐃᐃⵠⵠⲆᐃΔ;
    ᐃᐃ[231][Mr.ᐃⵠΔ] = Δᐃ.ΔΔⲆⲆΔⲆⲆ;
    ᐃᐃ[1060] = [];
    ᐃᐃ[1060][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⵠⲆᐃⲆΔⵠ;
    ᐃᐃ[1060][Mr.ᐃⵠΔ] = Δᐃ.ΔΔᐃΔⲆⵠΔ;
    ᐃᐃ[1063] = [];
    ᐃᐃ[1063][Mr.ⵠⲆⵠ] = Δᐃ.ΔΔᐃⲆⲆⵠⲆ;
    ᐃᐃ[1063][Mr.ᐃⵠΔ] = Δᐃ.ⵠⲆᐃΔΔᐃⲆ;
    ᐃᐃ[1059] = [];
    ᐃᐃ[1059][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⵠΔⲆΔᐃᐃ;
    ᐃᐃ[1059][Mr.ᐃⵠΔ] = Δᐃ.ΔᐃᐃᐃΔΔⵠ;
    ᐃᐃ[1062] = [];
    ᐃᐃ[1062][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⲆⲆⲆⵠΔΔ;
    ᐃᐃ[1062][Mr.ᐃⵠΔ] = Δᐃ.ⵠΔⲆⲆⲆⵠΔ;
    ᐃᐃ[1056] = Δᐃ.ⵠᐃⲆⵠⲆΔⵠ;
    ᐃᐃ[1057] = Δᐃ.ΔᐃⲆΔⲆⵠΔ;
    ᐃᐃ[1058] = Δᐃ.ⵠⲆΔΔⵠⲆᐃ;
    ᐃᐃ[1065] = Δᐃ.ⵠΔᐃΔⲆⵠⲆ;
    ᐃᐃ[1066] = Δᐃ.ᐃΔⵠᐃⵠᐃⵠ;
    ᐃᐃ[1067] = Δᐃ.ᐃⲆᐃΔⲆⵠΔ;
    ᐃᐃ[1222] = [];
    ᐃᐃ[1222][Mr.ⵠⲆⵠ] = Δᐃ.ΔⲆᐃⲆᐃΔᐃ;
    ᐃᐃ[1222][Mr.ᐃⵠΔ] = Δᐃ.ⵠⲆⵠΔⲆⲆᐃ;
    ᐃᐃ[248] = [];
    ᐃᐃ[248][Mr.ⵠⲆⵠ] = Δᐃ.ⵠⵠⲆΔⲆΔΔ;
    ᐃᐃ[248][Mr.ᐃⵠΔ] = Δᐃ.ᐃⵠⲆⲆΔΔⵠ;
    ᐃᐃ[1218] = [];
    ᐃᐃ[1218][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⲆⲆΔᐃⲆⲆ;
    ᐃᐃ[1218][Mr.ᐃⵠΔ] = Δᐃ.ΔⲆⵠⵠⲆⲆⵠ;
    ᐃᐃ[1221] = [];
    ᐃᐃ[1221][Mr.ⵠⲆⵠ] = Δᐃ.ⲆᐃᐃⲆᐃⲆΔ;
    ᐃᐃ[1221][Mr.ᐃⵠΔ] = Δᐃ.ⵠᐃⵠⵠⲆΔⵠ;
    ᐃᐃ[1223] = Δᐃ.ᐃᐃΔΔΔΔⵠ;
    ᐃᐃ[1219] = Δᐃ.ᐃΔⲆⲆⵠⵠⵠ;
    ᐃᐃ[1068] = [];
    ᐃᐃ[1068][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⵠΔⲆᐃᐃᐃ;
    ᐃᐃ[1068][Mr.ᐃⵠΔ] = Δᐃ.ⲆⵠⲆⵠᐃᐃⲆ;
    ᐃᐃ[232] = [];
    ᐃᐃ[232][Mr.ⵠⲆⵠ] = Δᐃ.ᐃΔΔᐃᐃᐃΔ;
    ᐃᐃ[232][Mr.ᐃⵠΔ] = Δᐃ.ᐃᐃΔⵠⲆᐃⲆ;
    ᐃᐃ[1070] = [];
    ᐃᐃ[1070][Mr.ⵠⲆⵠ] = Δᐃ.ⲆᐃⵠᐃⵠΔᐃ;
    ᐃᐃ[1070][Mr.ᐃⵠΔ] = Δᐃ.ΔⲆᐃⲆΔⲆⵠ;
    ᐃᐃ[1072] = [];
    ᐃᐃ[1072][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⵠᐃⲆᐃⲆΔ;
    ᐃᐃ[1072][Mr.ᐃⵠΔ] = Δᐃ.ⵠⵠⵠΔⵠᐃᐃ;
    ᐃᐃ[1075] = [];
    ᐃᐃ[1075][Mr.ⵠⲆⵠ] = Δᐃ.ⵠⲆⲆᐃⵠᐃⵠ;
    ᐃᐃ[1075][Mr.ᐃⵠΔ] = Δᐃ.ⲆΔⵠΔΔΔⵠ;
    ᐃᐃ[1071] = [];
    ᐃᐃ[1071][Mr.ⵠⲆⵠ] = Δᐃ.ⲆΔΔΔᐃⵠⵠ;
    ᐃᐃ[1071][Mr.ᐃⵠΔ] = Δᐃ.ᐃΔⵠΔΔᐃΔ;
    ᐃᐃ[1074] = [];
    ᐃᐃ[1074][Mr.ⵠⲆⵠ] = Δᐃ.ⵠⵠᐃΔⲆⲆᐃ;
    ᐃᐃ[1074][Mr.ᐃⵠΔ] = Δᐃ.ᐃⲆΔᐃΔΔᐃ;
    ᐃᐃ[1073] = [];
    ᐃᐃ[1073][Mr.ⵠⲆⵠ] = Δᐃ.ⲆΔΔΔⵠⵠΔ;
    ᐃᐃ[1073][Mr.ᐃⵠΔ] = Δᐃ.ⵠᐃΔΔΔⵠⲆ;
    ᐃᐃ[1076] = [];
    ᐃᐃ[1076][Mr.ⵠⲆⵠ] = Δᐃ.ⵠΔⵠᐃⲆΔΔ;
    ᐃᐃ[1076][Mr.ᐃⵠΔ] = Δᐃ.ᐃᐃⲆⲆΔⲆⵠ;
    ᐃᐃ[1077] = Δᐃ.ⵠⵠΔᐃⲆᐃⲆ;
    ᐃᐃ[1078] = Δᐃ.Δⵠⵠⵠᐃⵠⵠ;
    ᐃᐃ[1079] = Δᐃ.ᐃⲆⵠⲆⵠᐃⲆ;
    ᐃᐃ[1083] = [];
    ᐃᐃ[1083][Mr.ⵠⲆⵠ] = Δᐃ.ⵠΔᐃⵠΔⲆΔ;
    ᐃᐃ[1083][Mr.ᐃⵠΔ] = Δᐃ.ⲆⵠΔⵠⵠᐃⲆ;
    ᐃᐃ[233] = [];
    ᐃᐃ[233][Mr.ⵠⲆⵠ] = Δᐃ.ᐃΔⵠⲆⲆᐃᐃ;
    ᐃᐃ[233][Mr.ᐃⵠΔ] = Δᐃ.ⲆⲆⲆⲆⵠⲆᐃ;
    ᐃᐃ[1085] = [];
    ᐃᐃ[1085][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⲆΔᐃᐃᐃᐃ;
    ᐃᐃ[1085][Mr.ᐃⵠΔ] = Δᐃ.ᐃⲆⵠⵠⲆᐃⵠ;
    ᐃᐃ[1087] = [];
    ᐃᐃ[1087][Mr.ⵠⲆⵠ] = Δᐃ.ΔΔⵠⵠⵠⲆⵠ;
    ᐃᐃ[1087][Mr.ᐃⵠΔ] = Δᐃ.ΔⲆⵠᐃⲆⵠᐃ;
    ᐃᐃ[1090] = [];
    ᐃᐃ[1090][Mr.ⵠⲆⵠ] = Δᐃ.ᐃᐃⵠΔΔᐃⲆ;
    ᐃᐃ[1090][Mr.ᐃⵠΔ] = Δᐃ.ΔᐃΔⲆᐃᐃΔ;
    ᐃᐃ[1086] = [];
    ᐃᐃ[1086][Mr.ⵠⲆⵠ] = Δᐃ.ⲆᐃᐃⵠᐃⵠΔ;
    ᐃᐃ[1086][Mr.ᐃⵠΔ] = Δᐃ.ΔᐃⲆⲆⲆᐃⲆ;
    ᐃᐃ[1089] = [];
    ᐃᐃ[1089][Mr.ⵠⲆⵠ] = Δᐃ.ⵠΔΔⵠⵠΔΔ;
    ᐃᐃ[1089][Mr.ᐃⵠΔ] = Δᐃ.ⲆΔΔᐃⵠΔᐃ;
    ᐃᐃ[1088] = [];
    ᐃᐃ[1088][Mr.ⵠⲆⵠ] = Δᐃ.ᐃΔⲆᐃⵠΔᐃ;
    ᐃᐃ[1088][Mr.ᐃⵠΔ] = Δᐃ.ΔᐃᐃⲆⵠᐃΔ;
    ᐃᐃ[1091] = [];
    ᐃᐃ[1091][Mr.ⵠⲆⵠ] = Δᐃ.ⲆΔᐃⲆΔΔⲆ;
    ᐃᐃ[1091][Mr.ᐃⵠΔ] = Δᐃ.ᐃⲆΔⲆⵠⵠⲆ;
    ᐃᐃ[1092] = Δᐃ.ᐃΔᐃΔⲆᐃⵠ;
    ᐃᐃ[1093] = Δᐃ.ⲆΔⲆⲆⵠⵠⲆ;
    ᐃᐃ[1094] = Δᐃ.ⲆᐃᐃᐃⲆⵠⵠ;
    ᐃᐃ[1098] = [];
    ᐃᐃ[1098][Mr.ⵠⲆⵠ] = Δᐃ.ᐃⵠΔⲆⲆⵠⵠ;
    ᐃᐃ[1098][Mr.ᐃⵠΔ] = Δᐃ.ⲆᐃⵠⵠⵠⵠΔ;
    ᐃᐃ[235] = [];
    ᐃᐃ[235][Mr.ⵠⲆⵠ] = Δᐃ.ⵠⵠᐃⵠⲆⲆⵠ;
    ᐃᐃ[235][Mr.ᐃⵠΔ] = Δᐃ.ΔⵠⵠᐃΔΔᐃ;
    ᐃᐃ[1115] = Δᐃ.ΔᐃⵠΔⲆᐃⲆ;
    ᐃᐃ[1113] = [];
    ᐃᐃ[1113][Mr.ⵠⲆⵠ] = Δᐃ.ΔⵠᐃⲆⲆΔⲆ;
    ᐃᐃ[1113][Mr.ᐃⵠΔ] = Δᐃ.ᐃⲆΔⲆᐃⵠⵠ;
    ᐃᐃ[1114] = [];
    ᐃᐃ[1114][Mr.ⵠⲆⵠ] = Δᐃ.ᐃⵠᐃΔᐃᐃⵠ;
    ᐃᐃ[1114][Mr.ᐃⵠΔ] = Δᐃ.ⲆΔⲆⵠⵠⲆΔ;
    ᐃᐃ[1100] = [];
    ᐃᐃ[1100][Mr.ⵠⲆⵠ] = Δᐃ.ⵠⲆⲆⵠᐃⵠⲆ;
    ᐃᐃ[1100][Mr.ᐃⵠΔ] = Δᐃ.ᐃΔⵠⲆⲆⵠⵠ;
    ᐃᐃ[1102] = [];
    ᐃᐃ[1102][Mr.ⵠⲆⵠ] = Δᐃ.ᐃⲆΔΔΔⲆⲆ;
    ᐃᐃ[1102][Mr.ᐃⵠΔ] = Δᐃ.ΔⵠⲆⵠⵠⵠΔ;
    ᐃᐃ[1105] = [];
    ᐃᐃ[1105][Mr.ⵠⲆⵠ] = Δᐃ.ΔᐃᐃᐃΔⵠΔ;
    ᐃᐃ[1105][Mr.ᐃⵠΔ] = Δᐃ.ΔⲆⲆⲆⵠⲆⵠ;
    ᐃᐃ[1101] = [];
    ᐃᐃ[1101][Mr.ⵠⲆⵠ] = Δᐃ.ᐃᐃⵠⵠⲆᐃⲆ;
    ᐃᐃ[1101][Mr.ᐃⵠΔ] = Δᐃ.ⵠΔⲆΔᐃⵠⵠ;
    ᐃᐃ[1104] = [];
    ᐃᐃ[1104][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⵠⲆᐃΔᐃⵠ;
    ᐃᐃ[1104][Mr.ᐃⵠΔ] = Δᐃ.ⲆⲆⲆⵠᐃⲆΔ;
    ᐃᐃ[1103] = [];
    ᐃᐃ[1103][Mr.ⵠⲆⵠ] = Δᐃ.ᐃΔⲆᐃᐃᐃΔ;
    ᐃᐃ[1103][Mr.ᐃⵠΔ] = Δᐃ.ΔⵠⵠⵠᐃΔⲆ;
    ᐃᐃ[1106] = [];
    ᐃᐃ[1106][Mr.ⵠⲆⵠ] = Δᐃ.ⲆᐃΔᐃᐃᐃᐃ;
    ᐃᐃ[1106][Mr.ᐃⵠΔ] = Δᐃ.ᐃΔⵠᐃΔⲆⲆ;
    ᐃᐃ[1107] = Δᐃ.ᐃⵠⲆΔⵠⲆΔ;
    ᐃᐃ[1108] = Δᐃ.ⲆⵠⵠⵠᐃΔΔ;
    ᐃᐃ[1109] = Δᐃ.ΔⵠΔⲆᐃᐃΔ;
    ᐃᐃ[1119] = [];
    ᐃᐃ[1119][Mr.ⵠⲆⵠ] = Δᐃ.ΔᐃᐃᐃΔⵠⲆ;
    ᐃᐃ[1119][Mr.ᐃⵠΔ] = Δᐃ.ⲆⲆΔᐃᐃΔⵠ;
    ᐃᐃ[238] = [];
    ᐃᐃ[238][Mr.ⵠⲆⵠ] = Δᐃ.ⲆΔⵠΔⵠΔⵠ;
    ᐃᐃ[238][Mr.ᐃⵠΔ] = Δᐃ.ⵠᐃⲆΔⲆⵠⲆ;
    ᐃᐃ[1136] = Δᐃ.ⲆΔΔⵠᐃΔᐃ;
    ᐃᐃ[1134] = [];
    ᐃᐃ[1134][Mr.ⵠⲆⵠ] = Δᐃ.ⵠⵠⲆⵠⵠᐃⵠ;
    ᐃᐃ[1134][Mr.ᐃⵠΔ] = Δᐃ.ᐃⵠⵠᐃⵠᐃⲆ;
    ᐃᐃ[1135] = [];
    ᐃᐃ[1135][Mr.ⵠⲆⵠ] = Δᐃ.ΔΔⵠΔⵠΔⵠ;
    ᐃᐃ[1135][Mr.ᐃⵠΔ] = Δᐃ.ⲆᐃᐃⲆⵠⵠᐃ;
    ᐃᐃ[1121] = [];
    ᐃᐃ[1121][Mr.ⵠⲆⵠ] = Δᐃ.ᐃΔᐃⲆΔⵠΔ;
    ᐃᐃ[1121][Mr.ᐃⵠΔ] = Δᐃ.ⲆⵠΔⲆΔⵠᐃ;
    ᐃᐃ[1123] = [];
    ᐃᐃ[1123][Mr.ⵠⲆⵠ] = Δᐃ.ᐃⵠᐃⵠΔⵠΔ;
    ᐃᐃ[1123][Mr.ᐃⵠΔ] = Δᐃ.ᐃⲆⲆᐃⵠᐃᐃ;
    ᐃᐃ[1126] = [];
    ᐃᐃ[1126][Mr.ⵠⲆⵠ] = Δᐃ.ᐃⵠⵠⲆⵠΔⵠ;
    ᐃᐃ[1126][Mr.ᐃⵠΔ] = Δᐃ.ᐃΔΔⲆΔⵠⵠ;
    ᐃᐃ[1122] = [];
    ᐃᐃ[1122][Mr.ⵠⲆⵠ] = Δᐃ.ΔΔᐃΔᐃⵠⵠ;
    ᐃᐃ[1122][Mr.ᐃⵠΔ] = Δᐃ.ΔΔⵠΔΔⲆΔ;
    ᐃᐃ[1125] = [];
    ᐃᐃ[1125][Mr.ⵠⲆⵠ] = Δᐃ.ⵠⵠⵠⵠⵠᐃΔ;
    ᐃᐃ[1125][Mr.ᐃⵠΔ] = Δᐃ.ΔⲆᐃΔᐃⲆᐃ;
    ᐃᐃ[1124] = [];
    ᐃᐃ[1124][Mr.ⵠⲆⵠ] = Δᐃ.ᐃᐃΔⵠⵠᐃᐃ;
    ᐃᐃ[1124][Mr.ᐃⵠΔ] = Δᐃ.ⲆⲆⲆⲆᐃⵠΔ;
    ᐃᐃ[1127] = [];
    ᐃᐃ[1127][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⵠⲆⵠᐃⲆΔ;
    ᐃᐃ[1127][Mr.ᐃⵠΔ] = Δᐃ.ⵠΔⵠⲆⵠⲆⲆ;
    ᐃᐃ[1128] = Δᐃ.ⲆⲆΔⵠᐃᐃⵠ;
    ᐃᐃ[1129] = Δᐃ.ⲆⵠᐃΔⲆΔΔ;
    ᐃᐃ[1130] = Δᐃ.ⲆⵠⲆⵠⲆⲆΔ;
    ᐃᐃ[1042] = [];
    ᐃᐃ[1042][Mr.ⵠⲆⵠ] = Δᐃ.ᐃᐃΔⲆⲆΔⵠ;
    ᐃᐃ[1042][Mr.ᐃⵠΔ] = Δᐃ.ΔⵠⲆΔΔΔⵠ;
    ᐃᐃ[1043] = [];
    ᐃᐃ[1043][Mr.ⵠⲆⵠ] = Δᐃ.ⵠᐃΔΔⵠⵠΔ;
    ᐃᐃ[1043][Mr.ᐃⵠΔ] = Δᐃ.ⵠΔΔᐃᐃⲆⲆ;
    ᐃᐃ[1044] = [];
    ᐃᐃ[1044][Mr.ⵠⲆⵠ] = Δᐃ.ΔⲆⵠⵠⲆᐃⵠ;
    ᐃᐃ[1044][Mr.ᐃⵠΔ] = Δᐃ.ᐃⵠⲆⵠⵠΔⲆ;
    ᐃᐃ[228] = [];
    ᐃᐃ[228][Mr.ⵠⲆⵠ] = Δᐃ.ⵠΔⲆᐃᐃⵠᐃ;
    ᐃᐃ[228][Mr.ᐃⵠΔ] = Δᐃ.ⵠΔⲆᐃᐃⵠᐃ;
    ᐃᐃ[234] = [];
    ᐃᐃ[234][Mr.ⵠⲆⵠ] = Δᐃ.ᐃⲆΔⲆⲆΔⵠ;
    ᐃᐃ[234][Mr.ᐃⵠΔ] = Δᐃ.ᐃⲆΔⲆⲆΔⵠ;
    ᐃᐃ[249] = [];
    ᐃᐃ[249][Mr.ⵠⲆⵠ] = Δᐃ.ⲆᐃⵠᐃⵠΔⲆ;
    ᐃᐃ[249][Mr.ᐃⵠΔ] = Δᐃ.ⲆᐃⵠᐃⵠΔⲆ;
    ᐃᐃ[1045] = Δᐃ.ⲆⲆΔⵠΔⵠΔ;
    ᐃᐃ[89] = [];
    ᐃᐃ[89][Mr.ⵠⲆⵠ] = Δᐃ.Δⵠᐃᐃᐃᐃᐃ;
    ᐃᐃ[89][Mr.ᐃⵠΔ] = Δᐃ.ⲆᐃⲆΔᐃⵠᐃ;
    ᐃᐃ[92] = [];
    ᐃᐃ[92][Mr.ⵠⲆⵠ] = Δᐃ.ΔΔⲆᐃⵠᐃⲆ;
    ᐃᐃ[92][Mr.ᐃⵠΔ] = Δᐃ.ⵠⵠᐃⵠΔⵠᐃ;
    ᐃᐃ[247] = [];
    ᐃᐃ[247][Mr.ⵠⲆⵠ] = [Δᐃ.ⵠⵠⵠⵠⵠⵠΔ, Δᐃ.ⲆΔⲆⵠⵠᐃΔ, Δᐃ.ΔΔⲆⲆⲆⵠⵠ, Δᐃ.ⲆᐃⲆΔΔΔᐃ, Δᐃ.ΔᐃⲆᐃΔΔⲆ, Δᐃ.ᐃⲆΔᐃⲆΔⲆ, Δᐃ.ᐃⵠΔⵠⲆⵠᐃ, Δᐃ.ⵠᐃΔᐃΔᐃΔ, Δᐃ.ⵠΔⲆⵠΔᐃⲆ];
    ᐃᐃ[247][Mr.ᐃⵠΔ] = [Δᐃ.ΔⵠⵠⲆᐃⵠⲆ, Δᐃ.ᐃⵠΔΔᐃⲆⲆ, Δᐃ.ΔᐃᐃⲆΔᐃΔ, Δᐃ.ΔᐃᐃⲆᐃⲆΔ, Δᐃ.ΔⵠᐃΔⵠΔΔ, Δᐃ.ΔⵠΔᐃΔⵠᐃ, Δᐃ.ΔⵠΔᐃⵠᐃⵠ, Δᐃ.ⵠᐃΔᐃΔᐃΔ, Δᐃ.ⲆᐃⲆⲆⲆΔⵠ];
    ᐃᐃ[93] = [];
    ᐃᐃ[93][Mr.ⵠⲆⵠ] = Δᐃ.ⵠⵠⲆᐃᐃⵠΔ;
    ᐃᐃ[93][Mr.ᐃⵠΔ] = Δᐃ.ΔΔⲆᐃᐃΔⵠ;
    ᐃᐃ[225] = [];
    ᐃᐃ[225][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⲆΔᐃⲆᐃⵠ;
    ᐃᐃ[225][Mr.ᐃⵠΔ] = Δᐃ.ΔᐃⵠⵠᐃⵠΔ;
    ᐃᐃ[226] = [];
    ᐃᐃ[226][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⵠᐃᐃΔⵠⲆ;
    ᐃᐃ[226][Mr.ᐃⵠΔ] = Δᐃ.ᐃⵠⵠⵠⵠΔⲆ;
    ᐃᐃ[24] = [];
    ᐃᐃ[24][Mr.ⵠⲆⵠ] = Δᐃ.ᐃᐃΔᐃΔΔᐃ;
    ᐃᐃ[24][Mr.ᐃⵠΔ] = Δᐃ.ᐃᐃⲆⲆⲆⵠⲆ;
    ᐃᐃ[88] = [];
    ᐃᐃ[88][Mr.ⵠⲆⵠ] = Δᐃ.ⵠᐃⵠⲆΔᐃΔ;
    ᐃᐃ[88][Mr.ᐃⵠΔ] = Δᐃ.ⵠⵠᐃⲆᐃⵠᐃ;
    ᐃᐃ[87] = [];
    ᐃᐃ[87][Mr.ⵠⲆⵠ] = Δᐃ.ᐃᐃΔⵠΔⲆⵠ;
    ᐃᐃ[87][Mr.ᐃⵠΔ] = Δᐃ.ⲆⲆᐃΔΔⵠᐃ;
    ᐃᐃ[82] = [];
    ᐃᐃ[82][Mr.ⵠⲆⵠ] = Δᐃ.ⲆⲆΔⲆⲆΔⲆ;
    ᐃᐃ[82][Mr.ᐃⵠΔ] = Δᐃ.ⲆⵠΔⵠΔᐃⲆ;
    ᐃᐃ[621] = [];
    ᐃᐃ[621][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[621][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[621][Mr.ⵠⲆⵠ].push(Δᐃ.ⵠⵠⲆⲆⵠⵠΔΔⵠ);
    ᐃᐃ[621][Mr.ⵠⲆⵠ].push(Δᐃ.ⲆΔⲆⵠᐃⲆΔΔᐃ);
    ᐃᐃ[621][Mr.ⵠⲆⵠ].push(Δᐃ.ⲆⵠⲆⵠⵠᐃᐃⲆⵠ);
    ᐃᐃ[621][Mr.ᐃⵠΔ].push(Δᐃ.ⲆΔⲆΔᐃᐃⲆΔⲆ);
    ᐃᐃ[621][Mr.ᐃⵠΔ].push(Δᐃ.ⲆᐃΔᐃⲆⲆᐃΔΔ);
    ᐃᐃ[621][Mr.ᐃⵠΔ].push(Δᐃ.ⵠⲆΔΔⲆᐃⵠΔⲆ);
    ᐃᐃ[619] = [];
    ᐃᐃ[619][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[619][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[619][Mr.ⵠⲆⵠ].push(Δᐃ.ⵠΔΔΔΔⵠⲆⵠⲆ);
    ᐃᐃ[619][Mr.ⵠⲆⵠ].push(Δᐃ.ᐃⵠᐃᐃⲆⲆΔⲆᐃ);
    ᐃᐃ[619][Mr.ⵠⲆⵠ].push(Δᐃ.ⵠΔΔⵠⵠⵠᐃⵠⲆ);
    ᐃᐃ[619][Mr.ᐃⵠΔ].push(Δᐃ.ⵠⲆᐃᐃⵠΔⲆᐃⵠ);
    ᐃᐃ[619][Mr.ᐃⵠΔ].push(Δᐃ.ⲆΔⲆᐃⲆΔⵠΔⵠ);
    ᐃᐃ[619][Mr.ᐃⵠΔ].push(Δᐃ.ⲆᐃⵠΔΔΔⵠⵠⲆ);
    ᐃᐃ[620] = [];
    ᐃᐃ[620][Mr.ⵠⲆⵠ] = [];
    ᐃᐃ[620][Mr.ᐃⵠΔ] = [];
    ᐃᐃ[620][Mr.ⵠⲆⵠ].push(Δᐃ.ᐃⲆⲆⲆᐃᐃⵠⲆᐃ);
    ᐃᐃ[620][Mr.ⵠⲆⵠ].push(Δᐃ.ᐃⵠⵠᐃⵠΔⲆΔᐃ);
    ᐃᐃ[620][Mr.ⵠⲆⵠ].push(Δᐃ.ⵠΔΔⲆᐃⵠᐃⲆⵠ);
    ᐃᐃ[620][Mr.ᐃⵠΔ].push(Δᐃ.ᐃⲆΔⵠᐃᐃᐃΔⲆ);
    ᐃᐃ[620][Mr.ᐃⵠΔ].push(Δᐃ.ⵠᐃᐃⲆΔᐃⵠΔⲆ);
    ᐃᐃ[620][Mr.ᐃⵠΔ].push(Δᐃ.ⲆᐃⵠⵠⲆᐃᐃΔᐃ);
    ⲆΔΔⵠ.g = [];
    ⲆΔΔⵠ.g[0] = [Δᐃ.ⲆⲆᐃΔⵠⵠⲆ, Δᐃ.ⵠⲆᐃᐃᐃⲆΔ];
    ⲆΔΔⵠ.g[1] = ⲆΔΔⵠ.g[0];
    ⲆΔΔⵠ.g[2] = [Δᐃ.ᐃᐃⵠᐃΔΔⵠ, Δᐃ.ΔᐃⵠⲆⵠᐃⲆ];
    ⲆΔΔⵠ.m = [];
    ⲆΔΔⵠ.m[0] = [Δᐃ.ⲆᐃⵠΔⵠⵠⵠ, Δᐃ.ⵠⵠᐃⲆᐃᐃⵠ];
    ⲆΔΔⵠ.m[1] = ⲆΔΔⵠ.m[0];
    ⲆΔΔⵠ.m[2] = [Δᐃ.ᐃΔⲆᐃᐃⲆⵠ, Δᐃ.ᐃⲆΔⲆⲆⲆΔ];
    ⲆΔΔⵠ.la = [];
    ⲆΔΔⵠ.la[0] = [Δᐃ.ⲆᐃᐃⵠⵠⵠΔ, Δᐃ.ΔⲆᐃⵠⵠⵠᐃ];
    ⲆΔΔⵠ.la[1] = ⲆΔΔⵠ.la[0];
    ⲆΔΔⵠ.la[2] = ⲆΔΔⵠ.la[0];
    ⲆΔΔⵠ.la[3] = ⲆΔΔⵠ.la[0];
    ⲆΔΔⵠ.la[4] = ⲆΔΔⵠ.la[0];
    ⲆΔΔⵠ.la[5] = ⲆΔΔⵠ.la[0];
    ⲆΔΔⵠ.s = [];
    ⲆΔΔⵠ.s[0] = [Δᐃ.ᐃΔΔⵠΔΔⵠ, Δᐃ.ⵠⵠΔᐃΔⲆΔ];
    ⲆΔΔⵠ.s[1] = ⲆΔΔⵠ.s[0];
    ⲆΔΔⵠ.s[2] = [Δᐃ.ⵠᐃⵠΔⲆΔΔ, Δᐃ.ᐃᐃΔᐃⲆΔⲆ];
    ⲆΔΔⵠ.p = [];
    ⲆΔΔⵠ.p[0] = [Δᐃ.ⵠΔᐃⵠΔᐃᐃ, Δᐃ.ⵠΔᐃⵠΔᐃᐃ];
    ⲆΔΔⵠ.a = [];
    ⲆΔΔⵠ.a[0] = [Δᐃ.ΔΔⲆⵠⲆΔᐃ, Δᐃ.ⲆΔⵠⲆⵠΔΔ];
    ⲆΔΔⵠ.a[1] = ⲆΔΔⵠ.a[0];
    ⲆΔΔⵠ.a[2] = ⲆΔΔⵠ.a[0];
    ⲆΔΔⵠ.d = [];
    ⲆΔΔⵠ.d[0] = [Δᐃ.ΔᐃΔⲆⲆΔⲆ, Δᐃ.ᐃᐃΔⲆⵠⲆⲆ];
    ⲆΔΔⵠ.d[1] = ⲆΔΔⵠ.d[0];
    ⲆΔΔⵠ.d[2] = ⲆΔΔⵠ.d[0];
    ⲆΔΔⵠ.re = [];
    ⲆΔΔⵠ.re[0] = [Δᐃ.ᐃⵠⲆΔΔΔΔ, Δᐃ.ⵠᐃΔⲆΔⵠΔ];
    ⲆΔΔⵠ.re[1] = ⲆΔΔⵠ.re[0];
    ⲆΔΔⵠ.re[2] = ⲆΔΔⵠ.re[0];
    ⲆΔΔⵠ.f = [];
    ⲆΔΔⵠ.f[0] = [Δᐃ.ᐃⵠᐃⲆⲆᐃᐃ, Δᐃ.ᐃᐃⲆⵠⵠᐃΔ];
    ⲆΔΔⵠ.f[1] = ⲆΔΔⵠ.f[0];
    ⲆΔΔⵠ.f[2] = ⲆΔΔⵠ.f[0];
    ⲆΔΔⵠ.isl = [];
    ⲆΔΔⵠ.isl[0] = [Δᐃ.ⵠⵠⲆⲆΔᐃⲆ, Δᐃ.ᐃΔⵠⵠⲆᐃᐃ];
    ⲆΔΔⵠ.isl[1] = ⲆΔΔⵠ.isl[0];
    ⲆΔΔⵠ.isl[2] = ⲆΔΔⵠ.isl[0];
    ⲆΔΔⵠ.c = [];
    ⲆΔΔⵠ.c[0] = [Δᐃ.ⵠᐃᐃⵠᐃΔᐃ, Δᐃ.ᐃᐃᐃⵠⲆᐃΔ];
    ⲆΔΔⵠ.c[1] = ⲆΔΔⵠ.c[0];
    ⲆΔΔⵠ.c[2] = ⲆΔΔⵠ.c[0];
    ⲆΔΔⵠ.wtb = [];
    ⲆΔΔⵠ.wtb[0] = [Δᐃ.ᐃⵠᐃⵠⲆΔⵠ, Δᐃ.ᐃⲆⲆⲆⲆⲆⵠ];
    ⲆΔΔⵠ.PIRANHA = [Δᐃ.ⲆⲆᐃⲆⲆⵠᐃ, Δᐃ.ΔΔⵠⵠᐃΔⵠ];
    ⲆΔΔⵠ.KRAKEN = [Δᐃ.ⲆⲆⵠᐃΔⲆⵠ, Δᐃ.ⵠⵠᐃΔⵠΔΔ];
    ⲆΔΔⵠ.FOX = [Δᐃ.ⵠⵠΔΔᐃΔΔ, Δᐃ.ᐃᐃⲆⲆᐃᐃᐃ];
    ⲆΔΔⵠ.WOLF = [Δᐃ.ⲆⲆΔΔΔⲆⲆ, Δᐃ.ᐃᐃⵠᐃⵠⵠᐃ];
    ⲆΔΔⵠ.SPIDER = [Δᐃ.ᐃⲆᐃΔΔΔⵠ, Δᐃ.ⵠⵠΔⲆΔⲆΔ];
    ⲆΔΔⵠ.BEAR = [Δᐃ.ΔⲆΔⵠΔⲆᐃ, Δᐃ.ⵠΔⵠᐃⲆᐃᐃ];
    ⲆΔΔⵠ.CAVE = [Δᐃ.ᐃⲆⲆⵠΔΔᐃ, Δᐃ.ⲆⵠⵠΔΔⲆΔ];
    ⲆΔΔⵠ.MAP = [Δᐃ.ΔᐃΔⲆⵠⲆⲆ, Δᐃ.ⲆⲆᐃᐃⲆⵠΔ];
    ⲆΔΔⵠ.FOREST = [Δᐃ.ⲆⲆᐃⵠᐃΔⲆ, Δᐃ.ΔΔΔⲆᐃⲆⵠ];
    ⲆΔΔⵠ.WINTER = [Δᐃ.ᐃΔⵠⲆⵠⵠΔ, Δᐃ.ᐃⵠⵠΔᐃⵠᐃ];
    ⲆΔΔⵠ.DESERT = [Δᐃ.ⵠᐃⵠᐃΔΔⵠ, Δᐃ.ⵠΔⲆᐃΔΔⵠ];
    ⲆΔΔⵠ.LAVA = [Δᐃ.ᐃⵠⲆⵠΔⲆΔ, Δᐃ.ᐃᐃᐃΔⵠΔⵠ];
    for (var c in ⲆΔΔⵠ) {
      for (var d = ⲆΔΔⵠ[c], e = 0; e < d.length; e++) {
        var f = d[e];
        if (f.ⲆΔΔΔⵠⲆⵠ !== undefined) {
          f.ⲆΔΔΔⵠⲆⵠ();
        } else if (f.length > 0) {
          for (var g = 0; g < f.length; g++) {
            if (f[g].ⲆΔΔΔⵠⲆⵠ !== undefined) {
              f[g].ⲆΔΔΔⵠⲆⵠ();
            }
          }
        }
      }
    }
    console.log(Nn, ej);
  }
  function Cp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 573;
    d.height = a * 350;
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 336, a * 72);
      e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
      e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
      e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
      e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
      e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
      e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
      e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
      e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
      e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
      e.closePath();
      cd(e, b[4], b[4], a * 35);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 168, a * 42);
    e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
    e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
    e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
    e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
    e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
    e.closePath();
    cd(e, b[0], b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188, a * 41);
    e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
    e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
    e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
    e.closePath();
    cd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 336, a * 71);
    e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
    e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
    e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
    e.closePath();
    cd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 357, a * 76);
    e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
    e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
    e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
    e.closePath();
    cd(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 309, a * 168);
    e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
    cd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 54);
    e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
    e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
    e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
    e.closePath();
    cd(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 292, a * 198);
    e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
    cd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 245, a * 68);
    e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
    cd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 96);
    e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
    cd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 124);
    e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
    cd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 183);
    e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
    cd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 213);
    e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
    cd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 399, a * 257);
    e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
    e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
    e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
    cd(e, b[3], b[3], a * 12);
    return d;
  }
  function Tp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 372;
    d.height = a * 358;
    e.translate(a * 0, a * 10);
    e.globalAlpha = b ? 0.2 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    cd(e, c[0], c[0], a * 10);
    e.translate(a * 0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
    e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
    e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
    e.closePath();
    cd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
    e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
    e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
    e.closePath();
    cd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
    e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
    e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
    e.closePath();
    cd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
    e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
    e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
    e.closePath();
    cd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.000030517578125, a * 122.3125);
    e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
    e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
    e.closePath();
    cd(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.0000305175781, a * 127.3125);
    e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
    e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
    e.closePath();
    cd(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
    e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
    e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
    e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
    e.closePath();
    cd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
    e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
    e.closePath();
    cd(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
    e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
    e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
    e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
    e.closePath();
    cd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
    e.closePath();
    cd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
    e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
    e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
    e.closePath();
    cd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
    e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
    e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
    e.closePath();
    cd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
    e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
    e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
    e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
    e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
    e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
    e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
    e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
    e.closePath();
    cd(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    cd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
    e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
    e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
    e.closePath();
    cd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
    e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
    e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
    e.closePath();
    cd(e, c[1], c[1], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
    e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
    e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
    e.closePath();
    cd(e, c[2], c[3], a * 10);
    Cd(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
    cd(e, c[4], c[5], a * 1);
    Cd(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
    cd(e, c[4], c[5], a * 1);
    Cd(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
    cd(e, c[4], c[5], a * 1);
    Cd(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
    cd(e, c[4], c[5], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
    e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
    e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
    e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
    e.closePath();
    cd(e, c[4], c[5], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
    e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
    e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
    e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
    e.closePath();
    cd(e, c[6]);
    return d;
  }
  function fp(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 501;
    f.height = b * 564;
    g.scale(0.5, 0.5);
    g.translate(b * 240, b * 255);
    g.rotate(e);
    g.globalAlpha = c ? 0.5 : 0.2;
    Cd(g, b * 174, b * 87.984375, b * 20.8806130178211);
    cd(g, d[0], d[0], b * 8);
    Cd(g, b * 174, b * 87.984375, b * 12.165525060596439);
    cd(g, d[0], d[0], b * 8);
    Cd(g, b * 174, b * 87.484375, b * 6);
    cd(g, d[0]);
    Cd(g, b * 30, b * 87.984375, b * 20.8806130178211);
    cd(g, d[0], d[0], b * 4);
    Cd(g, b * 30, b * 87.984375, b * 12.165525060596439);
    cd(g, d[0], d[0], b * 4);
    Cd(g, b * 30, b * 87.484375, b * 6);
    cd(g, d[0]);
    Cd(g, b * 100, b * 30, b * 20.8806130178211);
    cd(g, d[0], d[0], b * 4);
    Cd(g, b * 100, b * 30, b * 12.165525060596439);
    cd(g, d[0], d[0], b * 4);
    Cd(g, b * 100, b * 30, b * 6);
    cd(g, d[0]);
    Cd(g, b * 100, b * 130, b * 20.8806130178211);
    cd(g, d[0], d[0], b * 4);
    Cd(g, b * 100, b * 130, b * 12.165525060596439);
    cd(g, d[0], d[0], b * 4);
    Cd(g, b * 100, b * 130, b * 6);
    cd(g, d[0]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    g.rotate(0);
    md(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    cd(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 101, b * 64.984375);
    g.rotate(0);
    md(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    cd(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 102, b * 63.484375);
    g.rotate(0);
    md(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    g.translate(5, -5);
    g.globalAlpha = 1;
    Cd(g, b * 174, b * 87.984375, b * 20.8806130178211);
    cd(g, d[1], d[3], b * 8);
    Cd(g, b * 174, b * 87.984375, b * 12.165525060596439);
    cd(g, d[1], d[3], b * 8);
    Cd(g, b * 174, b * 87.484375, b * 6);
    cd(g, d[2]);
    Cd(g, b * 30, b * 87.984375, b * 20.8806130178211);
    cd(g, d[1], d[3], b * 8);
    Cd(g, b * 30, b * 87.984375, b * 12.165525060596439);
    cd(g, d[1], d[3], b * 8);
    Cd(g, b * 30, b * 87.484375, b * 6);
    cd(g, d[2]);
    Cd(g, b * 102, b * 30, b * 20.8806130178211);
    cd(g, d[1], d[3], b * 8);
    Cd(g, b * 102, b * 30, b * 12.165525060596439);
    cd(g, d[1], d[3], b * 8);
    Cd(g, b * 102, b * 30, b * 6);
    cd(g, d[1]);
    Cd(g, b * 102, b * 130, b * 20.8806130178211);
    cd(g, d[1], d[3], b * 8);
    Cd(g, b * 102, b * 130, b * 12.165525060596439);
    cd(g, d[1], d[3], b * 8);
    Cd(g, b * 102, b * 130, b * 6);
    cd(g, d[1]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    md(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    cd(g, d[1], d[3], b * 8);
    g.save();
    g.translate(b * 101, b * 64.984375);
    md(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    cd(g, d[2], d[1], b * 8);
    g.save();
    g.translate(b * 102, b * 63.484375);
    md(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    cd(g, d[2], d[1], b * 8);
    Cd(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
    cd(g, d[1], d[3], b * 8);
    Cd(g, b * 135, b * 107.36605834960938, b * 13);
    cd(g, d[1], d[3], b * 8);
    Cd(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
    cd(g, d[2]);
    Cd(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
    cd(g, d[1], d[3], b * 8);
    Cd(g, b * 70, b * 107.36605834960938, b * 13);
    cd(g, d[1], d[3], b * 8);
    Cd(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
    cd(g, d[2]);
    return f;
  }
  function zp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 106;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    cd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    cd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38, a * 46);
    e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
    e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
    e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
    e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
    e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
    e.closePath();
    cd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    cd(e, tk, c[2], a * 4);
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    cd(e, c[10], c[10], a * 4);
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 19);
    e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
    e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
    e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
    e.closePath();
    cd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 18);
    e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
    e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
    e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
    e.closePath();
    cd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    cd(e, Ll, c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    cd(e, undefined, c[4], a * 4);
    e.save();
    e.translate(a * 87, a * 34.5);
    e.rotate(0);
    md(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
    e.restore();
    cd(e, c[7], c[2], a * 4);
    e.save();
    e.translate(a * 87, a * 57);
    e.rotate(0);
    md(e, a * -8, a * -23, a * 16, a * 46, a * 10);
    e.restore();
    cd(e, c[8], c[2], a * 4);
    Cd(e, a * 87, a * 39, a * 4.123105625617661);
    cd(e, c[9], c[2], a * 4);
    Cd(e, a * 87, a * 60, a * 4.242640687119285);
    cd(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    cd(e, c[8], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
    e.closePath();
    cd(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 70);
    e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
    e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
    e.closePath();
    cd(e, c[9], c[2], a * 4);
    Cd(e, a * 50, a * 80, a * 5);
    cd(e, c[9], c[2], a * 4);
    Cd(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
    cd(e, c[9], c[2], a * 4);
    Cd(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
    cd(e, c[9], c[2], a * 4);
    return d;
  }
  function yp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    Cd(d, a * 74.5, a * 85, a * 66);
    cd(d, b[0]);
    d.globalAlpha = 1;
    Cd(d, a * 75.5, a * 72.5, a * 67);
    cd(d, b[1], b[2], a * 4);
    Cd(d, a * 75.5, a * 73.5, a * 54);
    cd(d, b[3]);
    d.globalAlpha = 0.5;
    Cd(d, a * 74.5, a * 80.5, a * 39);
    cd(d, b[4]);
    d.globalAlpha = 1;
    Cd(d, a * 74.5, a * 74.5, a * 37);
    cd(d, b[5]);
    return c;
  }
  function wp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 120;
    e.height = b * 100;
    md(f, b * 10, b * 10, b * 95, b * 80, b * 10);
    cd(f, c[2]);
    md(f, b * 10, b * 5, b * 95, b * 80, b * 10);
    cd(f, c[3], c[4], b * 4);
    if (d == 0) {
      var g = kc(b * 0.75, c, 0);
      f.drawImage(g, b * 22, b * 18);
    } else if (d == 1) {
      g = kc(b * 0.75, c, 1);
      f.drawImage(g, b * 22, b * 18);
    }
    return e;
  }
  function Pp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 20;
    c.height = a * 35;
    md(d, 0, 0, 20, 35, 7);
    cd(d, b[0]);
    return c;
  }
  function kp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    cd(d, b[0]);
    return c;
  }
  ;
  function Ap(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(0, a * 10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    cd(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    cd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    cd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    cd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    cd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    cd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    cd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    cd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    cd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    cd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    cd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    cd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    cd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    cd(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    cd(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    cd(d, b[1]);
    Cd(d, a * 102, a * 269, a * 11);
    cd(d, b[3]);
    Cd(d, a * 98, a * 266, a * 5);
    cd(d, b[6]);
    Cd(d, a * 168, a * 269, a * 11);
    cd(d, b[3]);
    Cd(d, a * 164, a * 266, a * 5);
    cd(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    cd(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    cd(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    cd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    cd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    cd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    cd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    cd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    cd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    cd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    cd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    cd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    cd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    cd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    cd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    cd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    cd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    cd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    cd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    cd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    cd(d, b[7]);
    return c;
  }
  function Jp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(0, a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    cd(d, b[0]);
    d.translate(0, a * -8);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    cd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 14, a * 57);
    d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    cd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
    d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
    cd(d, b[1], b[2], a * 4);
    Cd(d, a * 51, a * 91, a * 9);
    cd(d, b[3]);
    Cd(d, a * 95, a * 91, a * 9);
    cd(d, b[3]);
    Cd(d, a * 91, a * 89, a * 4);
    cd(d, b[4]);
    Cd(d, a * 47, a * 89, a * 4);
    cd(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    cd(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    cd(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    cd(d, undefined, b[6], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 19, a * 58);
    d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    cd(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    cd(d, b[6]);
    return c;
  }
  function Mp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 218;
    d.height = a * 185;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 53.135406494140625);
    e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
    e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
    e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
    e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
    e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
    e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
    e.closePath();
    cd(e, c[0], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 25.135406494140625);
    e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
    e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
    e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
    e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
    e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
    e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
    e.closePath();
    cd(e, c[1]);
    return d;
  }
  function Bp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    Cd(d, a * 55, a * 55, a * 55);
    cd(d, b[0]);
    return c;
  }
  function Dp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -20, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    cd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    cd(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    cd(d, b[2]);
    return c;
  }
  function Ep(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    cd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    cd(d, b[0]);
    return c;
  }
  function Ip(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 184;
    e.translate(0, a * 10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    cd(e, c[0]);
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    cd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    cd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104.5, a * 35.609375);
    e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
    e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
    e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
    cd(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.5, a * 72.609375);
    e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
    cd(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.5, a * 85.609375);
    e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
    cd(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68.5, a * 122.609375);
    e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
    cd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.5, a * 18.609375);
    e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
    e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146.5, a * 61.50892639160156);
    e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
    e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
    e.closePath();
    cd(e, c[3]);
    return d;
  }
  function Sp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 109;
    d.height = a * 110;
    Cd(e, a * 54.5, a * 55, a * 48.038209575038294);
    cd(e, b[0], b[1], a * 8);
    if (c == 0) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
      e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
      e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
      e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
      e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
      e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
      e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
      e.closePath();
      cd(e, b[2]);
    } else if (c == 1) {
      e.save();
      e.translate(a * 55, a * 39.48748779296875);
      md(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
      e.restore();
      cd(e, b[2], b[3], a * 4);
      Cd(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
      cd(e, b[4], b[3], a * 4);
      e.save();
      e.translate(a * 55.5, a * 57.287506103515625);
      md(e, a * -9, a * -16, a * 18, a * 32, a * 10);
      e.restore();
      cd(e, b[4]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 25.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
      e.closePath();
      cd(e, undefined, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 37.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
      e.closePath();
      cd(e, mi, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 50.287506103515625);
      e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
      e.closePath();
      cd(e, ct, b[5], a * 4);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
      e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
      e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
      e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
      e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
      e.closePath();
      cd(e, b[2]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
      e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
      e.closePath();
      cd(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
      e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
      e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
      e.closePath();
      cd(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
      e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
      e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
      e.closePath();
      cd(e, b[2]);
    } else if (c == 3) {
      e.scale(0.9, 0.9);
      e.translate(a * 6, 0);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54, a * 0.421875);
      e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
      e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
      e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
      e.closePath();
      cd(e, b[2], b[3], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 74, a * 52.421875);
      e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
      e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
      e.closePath();
      cd(e, b[3]);
    }
    return d;
  }
  function Qp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    cd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    cd(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    cd(d, b[2]);
    return c;
  }
  function _p(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 247;
    d.height = a * 247;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    cd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    cd(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    cd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    cd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    cd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 137);
    e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
    e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
    e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
    e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
    e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
    e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
    e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
    e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
    e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
    e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
    e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
    e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
    e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
    e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    cd(e, Ll, c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 63);
    e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
    e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
    e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 40);
    e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
    e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
    e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 43);
    e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
    e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
    e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 98);
    e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
    e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
    e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 180, a * 85);
    e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
    e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
    e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 114);
    e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
    e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
    e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 92);
    e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
    e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
    e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 130);
    e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
    e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
    e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113, a * 189);
    e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
    e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
    e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 154);
    e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
    e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
    e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206, a * 152);
    e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
    e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
    e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 181, a * 184);
    e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
    e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
    e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 199);
    e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
    e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 143);
    e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
    e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 159);
    e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
    e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
    e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 214);
    e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
    e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
    e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 52);
    e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
    e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
    e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 81);
    e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
    e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
    e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
    e.closePath();
    cd(e, c[4], c[5], a * 5);
    return d;
  }
  function Fp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.5;
    Cd(e, a * 69, a * 64, a * 48.16637831516918);
    cd(e, c[1]);
    e.globalAlpha = 0.7;
    Cd(e, a * 69, a * 64, a * 38.23105625617661);
    cd(e, c[2]);
    e.globalAlpha = 0.7;
    Cd(e, a * 69, a * 64, a * 32.01562118716424);
    cd(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 41);
    e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
    e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
    e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
    e.closePath();
    cd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 62);
    e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
    e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
    e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
    e.closePath();
    cd(e, c[3]);
    return d;
  }
  function Rp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    md(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    cd(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
    e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
    e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
    e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
    e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
    e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
    e.closePath();
    cd(e, c[3], c[4], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    cd(e, mi, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    cd(e, Ll, c[6], a * 15);
    return d;
  }
  function jp(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 450;
    f.height = b * 260;
    var a = Jc(b * 1, yk, d);
    g.drawImage(a, b * 0, b * 0);
    if (e == 1) {
      g.translate(b * 100, b * 0);
      Cd(g, b * 113, b * 120, b * 66);
      cd(g, undefined, d[4], b * 13);
      a = ou(b * 0.65, ch, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      g.rotate(0.7);
      g.drawImage(a, b * 133, b * -64);
      g.rotate(-0.7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      cd(g, Ya, d[4], b * 13);
    } else if (e == 2) {
      g.translate(b * 100, b * 0);
      Cd(g, b * 113, b * 120, b * 66);
      cd(g, undefined, d[4], b * 13);
      g.translate(b * 30, b * 40);
      g.save();
      g.translate(b * 83.5, b * 66.5);
      md(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
      g.restore();
      cd(g, "#dff2f7", "#187484", b * 7);
      Cd(g, b * 22, b * 82, b * 12);
      cd(g, "#dff2f7", "#187484", b * 7);
      Cd(g, b * 145, b * 82, b * 12);
      cd(g, "#dff2f7", "#187484", b * 7);
      a = bm(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 10, b * 85);
      a = bm(b * 0.5, V, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 50, b * 85);
      a = bm(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 90, b * 85);
      a = am(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = am(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = am(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 125);
      a = am(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 50, b * 115);
      a = am(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 100);
      a = am(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 80, b * 120);
      a = am(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 110, b * 125);
      a = am(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 120, b * 105);
    } else if (e == 3) {
      g.translate(b * 100, b * 0);
      Cd(g, b * 113, b * 120, b * 66);
      cd(g, undefined, d[4], b * 13);
      g.translate(b * 40, b * 50);
      g.save();
      g.translate(b * 71, b * 69);
      md(g, b * -30, b * -42, b * 60, b * 84, b * 10);
      g.restore();
      cd(g, Ks, d[5], b * 4);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 42, b * 28);
      g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      g.closePath();
      cd(g, d[5], d[5], b * 4);
      g.translate(b * -40, b * -50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      cd(g, undefined, d[4], b * 13);
    } else if (e == 4) {
      g.scale(1, 1);
      g.translate(b * 70, b * 50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 23, b * 6);
      g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      cd(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 59, b * 10);
      g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      cd(g, Ks, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 7, b * 55);
      g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      cd(g, undefined, d[5], b * 14);
      g.translate(b * 10, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 123, b * 16);
      g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
      g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      cd(g, Nn, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 72, b * 63);
      g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      cd(g, cl, d[5], b * 14);
      g.translate(b * 10, b * 10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 141, b * 8);
      g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      cd(g, cl, d[5], b * 14);
      g.translate(b * 10, b * -10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 205, b * 124);
      g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
      g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
      g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      cd(g, hg, d[5], b * 14);
    }
    return f;
  }
  function Wp(a, b) {
    yj(ox, a, b);
    return (65154 + (function (a, b, c) {
      Uj(ox, a, b, c);
      const d = Ox(px[0], px[1], px[2], px[0], px[1]);
      ux(px[2], px[0], px[1], px[2], px[0]);
      return (d | 63724) & ~(d & 63724);
    }(px[0], px[1], px[0]) ^ Ox(px[1], px[0], px[1], px[0], px[1]))) % 65528;
  }
  function Gp() {
    if (!zx.ⲆᐃⲆΔ.open && !zx.ΔⲆΔⲆᐃ.open) {
      zx.ᐃⵠΔΔ.open = hr;
      var b = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
      var c = 100;
      if (b) {
        for (var d = 0; qf.length > d; d++) {
          for (var e = qf[d][0], f = qf[d][1], j = 0; j < yx.Ⲇᐃᐃ[e].length; j++) {
            var k = yx.Ⲇᐃᐃ[e][j];
            var m = ΔⲆᐃ.ⲆⵠⲆⲆ(k, b);
            if (m < c) {
              c = m;
              zx.ᐃⵠΔΔ.ΔᐃⲆΔΔᐃⵠ = f;
              zx.ᐃⵠΔΔ.type = e;
              zx.ᐃⵠΔΔ.open = true;
              zx.ᐃⵠΔΔ.ΔⲆΔᐃᐃⵠⵠ = k.info & 255;
              zx.ᐃⵠΔΔ.ⵠⵠⲆⲆⵠⲆΔ = (k.info & 65280) >> 8;
              zx.ᐃⵠΔΔ.ⲆⲆΔᐃ = k.ⲆⲆΔᐃ;
              zx.ᐃⵠΔΔ.ΔⲆⵠⲆⲆ = k.id;
            }
          }
        }
        if (c < 100) {
          var p = ᐃᐃ[656];
          var h = (q = Cx.ᐃᐃᐃⵠᐃΔⲆ).info.translate.x - 33;
          qp(go, p, h, 0);
          if (zx.ᐃⵠΔΔ.ΔⲆΔᐃᐃⵠⵠ > 0) {
            q.ᐃⵠΔᐃ(go);
            var g = zx.ᐃⵠΔΔ.ΔⲆΔᐃᐃⵠⵠ;
            if (g > 1) {
              Fu(g, q);
            }
          }
          switch (zx.ᐃⵠΔΔ.ΔᐃⲆΔΔᐃⵠ) {
            case 108:
              var q = Cx.ᐃᐃᐃᐃⵠᐃⲆ;
              break;
            case 111:
              q = Cx.ⵠⲆⲆΔⵠᐃⵠ;
              break;
            case 112:
              q = Cx.ⵠⵠⵠⲆᐃΔⲆ;
              break;
            case 121:
              q = Cx.ⲆΔⲆΔⲆΔΔ;
              break;
            case 202:
              q = Cx.ⵠⵠⲆᐃΔⵠⲆ;
          }
          if (zx.ᐃⵠΔΔ.ⵠⵠⲆⲆⵠⲆΔ > 0) {
            q.ᐃⵠΔᐃ(go);
            if ((g = zx.ᐃⵠΔΔ.ⵠⵠⲆⲆⵠⲆΔ) > 1) {
              Fu(g, q);
            }
          }
        }
      }
    }
  }
  function Lp() {
    zx.ⲆᐃⲆΔ.id = -1;
    zx.ⲆᐃⲆΔ.lock = Qg;
    zx.ⲆᐃⲆΔ.locked = false;
    zx.ⲆᐃⲆΔ.ⲆⵠⲆⲆⵠΔᐃ = false;
    zx.ⲆᐃⲆΔ.ᐃΔΔⵠⲆᐃᐃ = Pn;
    zx.ⲆᐃⲆΔ.open = false;
    var b = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
    var c = 100;
    if (b) {
      for (var d = 0; yx.Ⲇᐃᐃ[11].length > d; d++) {
        var e = yx.Ⲇᐃᐃ[11][d];
        var f = ΔⲆᐃ.ⲆⵠⲆⲆ(e, b);
        if (c > f) {
          c = f;
          zx.ⲆᐃⲆΔ.open = vq;
          zx.ⲆᐃⲆΔ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
          zx.ⲆᐃⲆΔ.ᐃⲆᐃⵠ = e.info;
          zx.ⲆᐃⲆΔ.ⲆⲆΔᐃ = e.ⲆⲆΔᐃ;
          zx.ⲆᐃⲆΔ.ΔⲆⵠⲆⲆ = e.id;
          zx.ⲆᐃⲆΔ.locked = e.lock;
          zx.ⲆᐃⲆΔ.lock = !!e.lock && e.ⲆⲆΔᐃ != zx.id && !zx.ΔⲆᐃⵠᐃⵠⵠ(e.ⲆⲆΔᐃ) || Qi;
          zx.ⲆᐃⲆΔ.ᐃΔΔⵠⲆᐃᐃ = zx.id !== e.ⲆⲆΔᐃ || zx.ⲆᐃⲆΔ.locked || zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(148) == -1 ? yg : yk;
          if (zx.ⲆᐃⲆΔ.locked && zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(158) != -1) {
            zx.ⲆᐃⲆΔ.ⲆⵠⲆⲆⵠΔᐃ = true;
          }
        }
      }
      if (c < 100) {
        var j = ᐃᐃ[339];
        var a = Cx.ⵠⲆᐃ[0];
        var k = Math.floor(a.info.translate.x + (a.info.ⵠⵠ[0].width - j.width) / 2);
        var l = Math.floor(a.info.translate.y + (a.info.ⵠⵠ[0].height - j.height) / 2) + 3;
        qp(go, j, k, l);
        if ((!zx.ⲆᐃⲆΔ.lock || zx.id === zx.ⲆᐃⲆΔ.ⲆⲆΔᐃ) && zx.ⲆᐃⲆΔ.id >= 0) {
          (a = Cx.ⵠⲆᐃ[zx.ⲆᐃⲆΔ.id]).ᐃⵠΔᐃ(go);
          var h = zx.ⲆᐃⲆΔ.ᐃⲆᐃⵠ;
          if (h > 1) {
            Fu(h, a);
          }
        }
        if (zx.ⲆᐃⲆΔ.lock) {
          Cx.ᐃΔᐃⲆᐃⵠⲆ.ᐃⵠΔᐃ(go);
        } else if (zx.ⲆᐃⲆΔ.ᐃΔΔⵠⲆᐃᐃ) {
          Cx.ⵠⲆᐃⵠⵠⲆⵠ.ᐃⵠΔᐃ(go);
        }
        if (zx.ⲆᐃⲆΔ.ⲆⵠⲆⲆⵠΔᐃ) {
          Cx.ᐃⵠΔⵠⲆΔᐃ.ᐃⵠΔᐃ(go);
        }
      }
    }
  }
  function Op() {
    if (!zx.ⲆᐃⲆΔ.open && !zx.ΔⲆΔⲆᐃ.open && !zx.ΔΔⲆᐃ.open && !zx.ⲆΔᐃⲆ.open && !zx.ᐃⵠΔΔ.open) {
      zx.sign.open = Ah;
      var a = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
      var b = 100;
      if (a) {
        for (var c = 0; yx.Ⲇᐃᐃ[36].length > c; c++) {
          var d = yx.Ⲇᐃᐃ[36][c];
          var e = ΔⲆᐃ.ⲆⵠⲆⲆ(d, a);
          if (e < b && d.info === 0 && zx.id === d.ⲆⲆΔᐃ) {
            zx.sign.open = ch;
            b = e;
            zx.sign.ΔⲆⵠⲆⲆ = d.id;
          }
        }
        if (b < 100) {
          Cx.sign.button.ᐃⵠΔᐃ(go);
        }
      }
    }
  }
  function Np() {
    var a = Cx.ΔⲆⵠΔⵠ;
    var b = a.id;
    if (a.ᐃⲆⲆⵠⲆ === 1 && a.display === 1) {
      if (ⵠΔᐃⲆᐃ[b] === undefined) {
        ⵠΔᐃⲆᐃ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var e = Lb[b];
          d.font = "20px Baloo Paaji";
          var f = 0;
          if (e.length >= 1) {
            f = Math.max(0, d.measureText(e[0]).width);
          }
          d.font = "17px Baloo Paaji";
          if (e.length >= 2) {
            f = Math.max(f, d.measureText(e[1]).width);
          }
          d.font = "14px Baloo Paaji";
          Ob = 2;
          for (; e.length > Ob; Ob++) {
            f = Math.max(f, d.measureText(e[Ob]).width);
          }
          var g = f + 35;
          var a = 0;
          a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
          c.width = g;
          c.height = a;
          md(d, 0, 0, g, a, 10);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (e.length >= 1) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = 1;
            d.fillStyle = "#e2c340";
            d.fillText(e[0], 15, 28);
          }
          if (e.length >= 2) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(e[1], 15, 55);
            a = 55;
          }
          if (e.length >= 3) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            Ob = 2;
            for (; Ob < e.length; Ob++) {
              d.fillText(e[Ob], 15, a + 28);
              a += 26;
            }
          }
          return c;
        }(b);
      }
      if (a.ⵠΔᐃΔ === 1) {
        qp(go, ⵠΔᐃⲆᐃ[b], a.x, a.y);
      } else if (a.x - 80 + ⵠΔᐃⲆᐃ[b].width > uo) {
        qp(go, ⵠΔᐃⲆᐃ[b], uo - ⵠΔᐃⲆᐃ[b].width - 10, a.y - ⵠΔᐃⲆᐃ[b].height - 10);
      } else {
        qp(go, ⵠΔᐃⲆᐃ[b], a.x - 80, a.y - ⵠΔᐃⲆᐃ[b].height - 10);
      }
    }
  }
  function qp(b, c, d, e, f, i, a, j, k, h) {
    if (Nn === c.ⲆΔΔΔⵠⲆⵠ || c.ⲆΔΔΔⵠⲆⵠ() === 1) {
      if (rk !== h) {
        b.drawImage(c, d, e, Math.max(1, f), Math.max(1, i), a, j, k, h);
      } else if (i !== Nn) {
        b.drawImage(c, d, e, f, i);
      } else {
        b.drawImage(c, d, e);
      }
    }
  }
  function Hp() {
    if (zx.reconnect.enabled) {
      go.globalAlpha = 0.9;
      go.fillStyle = "#000";
      md(go, aq - 150, bq - 90, 300, 180, 15);
      go.fill();
      go.globalAlpha = 1;
      var a = ᐃᐃ[301];
      go.save();
      zx.reconnect.rotate = (zx.reconnect.rotate + Gx * 2) % (Math.PI * 2);
      go.translate(uo / 2, xp / 2 - 25);
      go.rotate(zx.reconnect.rotate);
      qp(go, a, -a.width / 2, -a.height / 2);
      go.restore();
      a = ᐃᐃ[525];
      qp(go, a, (uo - a.width) / 2, (xp - a.height) / 2 + 25);
    }
  }
  function Up() {
    zx.ⵠᐃΔⵠⵠ.open = false;
    var a = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
    var b = 100;
    if (a) {
      for (var c = 0; yx.Ⲇᐃᐃ[22].length > c; c++) {
        var d = yx.Ⲇᐃᐃ[22][c];
        var e = ΔⲆᐃ.ⲆⵠⲆⲆ(d, a);
        if (b > e) {
          b = e;
          zx.ⵠᐃΔⵠⵠ.open = true;
          zx.ⵠᐃΔⵠⵠ.ⲆⲆΔᐃ = d.ⲆⲆΔᐃ;
          zx.ⵠᐃΔⵠⵠ.ΔⲆⵠⲆⲆ = d.id;
        }
      }
      if (b < 100) {
        Cx.ⵠᐃΔⵠⵠ.ᐃⵠΔᐃ(go);
      }
    }
  }
  function Yp() {
    if (zx.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.length > 0) {
      var b = {
        x: Cx.ᐃΔᐃΔΔ.translate.x,
        y: Cx.ᐃΔᐃΔΔ.translate.y - dq * 120
      };
    } else {
      b = {
        x: Cx.ᐃΔᐃΔΔ.translate.x,
        y: Cx.ᐃΔᐃΔΔ.translate.y - dq * 50
      };
    }
    go.globalAlpha = 0.8;
    var c = ᐃᐃ[259][yx.time];
    qp(go, c, b.x, b.y);
    go.globalAlpha = 1;
    if (Cx.ᐃΔᐃΔΔ.Ⲇⵠⵠᐃⵠ.x > -1) {
      go.fillStyle = "#660000";
      Cd(go, b.x + Cx.ᐃΔᐃΔΔ.Ⲇⵠⵠᐃⵠ.x * dq, b.y + dq * Cx.ᐃΔᐃΔΔ.Ⲇⵠⵠᐃⵠ.y, dq * 5);
      go.fill();
    }
    var d = dq;
    for (var f = Cx.ᐃΔᐃΔΔ.ΔΔᐃΔ, g = 0; g < f.length; g++) {
      var h = f[g];
      yx.time;
      go.fillStyle = "#ff0000";
      Cd(go, b.x + dq * (h.x / (yx.ᐃᐃΔⵠᐃ * 100) * 193), b.y + dq * (h.y / (yx.ΔΔΔⲆⲆ * 100) * 193), dq * 2);
      go.fill();
    }
    var i = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
    if (i) {
      go.fillStyle = yx.time ? "#fff" : "#e39716";
      Cd(go, b.x + i.x / (yx.ᐃᐃΔⵠᐃ * 100) * 193 * dq, b.y + dq * (i.y / (yx.ΔΔΔⲆⲆ * 100) * 193), dq * 4);
      go.fill();
    }
    dq = d;
  }
  function Kp() {
    if (!zx.ⲆᐃⲆΔ.open && !zx.ΔⲆΔⲆᐃ.open && !zx.ΔΔⲆᐃ.open && !zx.ᐃⵠΔΔ.open) {
      zx.ⲆΔᐃⲆ.open = false;
      var b = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
      var c = 100;
      if (b) {
        for (var d = 0; yx.Ⲇᐃᐃ[34].length > d; d++) {
          var e = yx.Ⲇᐃᐃ[34][d];
          var f = ΔⲆᐃ.ⲆⵠⲆⲆ(e, b);
          if (c > f) {
            c = f;
            zx.ⲆΔᐃⲆ.open = Sg;
            zx.ⲆΔᐃⲆ.ΔⲆΔᐃᐃⵠⵠ = e.info & 31;
            zx.ⲆΔᐃⲆ.ΔⲆⵠΔΔ = (e.info & 992) >> 5;
            zx.ⲆΔᐃⲆ.ⲆᐃⵠΔⵠΔⲆ = (e.info & 31744) >> 10;
            zx.ⲆΔᐃⲆ.ⲆⲆΔᐃ = e.ⲆⲆΔᐃ;
            zx.ⲆΔᐃⲆ.ΔⲆⵠⲆⲆ = e.id;
          }
        }
        if (c < 100) {
          var g = ᐃᐃ[722];
          var a = (j = Cx.ⵠⵠⵠⲆᐃΔᐃ).info.translate.x - 32;
          qp(go, g, a, 0);
          if (zx.ⲆΔᐃⲆ.ΔⲆΔᐃᐃⵠⵠ > 0) {
            j.ᐃⵠΔᐃ(go);
            if ((k = zx.ⲆΔᐃⲆ.ΔⲆΔᐃᐃⵠⵠ) > 1) {
              Fu(k, j);
            }
          }
          var j = Cx.ⵠⲆⲆᐃⲆⵠᐃ;
          if (zx.ⲆΔᐃⲆ.ⲆᐃⵠΔⵠΔⲆ > 0) {
            j.ᐃⵠΔᐃ(go);
            if ((k = zx.ⲆΔᐃⲆ.ⲆᐃⵠΔⵠΔⲆ) > 1) {
              Fu(k, j);
            }
          }
          var k;
          j = Cx.ⵠΔᐃᐃⲆⲆⲆ;
          if (zx.ⲆΔᐃⲆ.ΔⲆⵠΔΔ > 0) {
            j.ᐃⵠΔᐃ(go);
            if ((k = zx.ⲆΔᐃⲆ.ΔⲆⵠΔΔ) > 1) {
              Fu(k, j);
            }
          }
        }
      }
    }
  }
  function Vp() {
    if (!zx.ⲆᐃⲆΔ.open) {
      zx.ΔⲆΔⲆᐃ.ᐃⲆᐃⵠ = 0;
      zx.ΔⲆΔⲆᐃ.open = false;
      var b = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
      var c = 100;
      if (b) {
        for (var d = 0; yx.Ⲇᐃᐃ[18].length > d; d++) {
          var e = yx.Ⲇᐃᐃ[18][d];
          var f = ΔⲆᐃ.ⲆⵠⲆⲆ(e, b);
          if (f < c) {
            c = f;
            zx.ΔⲆΔⲆᐃ.open = true;
            zx.ΔⲆΔⲆᐃ.ᐃⲆᐃⵠ = e.info;
            zx.ΔⲆΔⲆᐃ.ⲆⲆΔᐃ = e.ⲆⲆΔᐃ;
            zx.ΔⲆΔⲆᐃ.ΔⲆⵠⲆⲆ = e.id;
          }
        }
        if (c < 100) {
          var j = ᐃᐃ[411];
          var a = Cx.ᐃΔΔᐃⲆⲆⵠ;
          var k = Math.floor(a.info.translate.x + (a.info.ⵠⵠ[0].width - j.width) / 2);
          var l = Math.floor(a.info.translate.y + (a.info.ⵠⵠ[0].height - j.height) / 2) + 3;
          qp(go, j, k, l);
          if (zx.ΔⲆΔⲆᐃ.ᐃⲆᐃⵠ > 0) {
            a.ᐃⵠΔᐃ(go);
            var h = zx.ΔⲆΔⲆᐃ.ᐃⲆᐃⵠ;
            if (h > 1) {
              Fu(h, a);
            }
          }
        }
      }
    }
  }
  function Xp() {
    zx.ⲆⲆᐃⵠΔ.id = -1;
    zx.ⲆⲆᐃⵠΔ.ⲆⲆΔᐃ = -1;
    if (!zx.ΔᐃⲆΔᐃⲆᐃ && !zx.ⲆⲆᐃⵠΔ.wait && !zx.ΔⵠⵠⵠΔ) {
      var b = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
      var c = 100;
      if (b) {
        for (var d = 0; d < yx.Ⲇᐃᐃ[29].length; d++) {
          var e = yx.Ⲇᐃᐃ[29][d];
          var f = ΔⲆᐃ.ⲆⵠⲆⲆ(e, b);
          if (f < c) {
            c = f;
            zx.ⲆⲆᐃⵠΔ.id = e.id;
            zx.ⲆⲆᐃⵠΔ.ⲆⲆΔᐃ = e.ⲆⲆΔᐃ;
            zx.ⲆⲆᐃⵠΔ.info = e.info;
            zx.ⲆⲆᐃⵠΔ.lock = (e.info & 16) >> 4;
          }
        }
      }
      var g = Cx.ΔᐃⲆⲆᐃ;
      Cx.ΔᐃⲆⲆᐃ = -1;
      if (zx.ⲆⲆᐃⵠΔ.ⲆⲆΔᐃ == -1 || zx.ΔⲆᐃⲆⲆ.length != 0 && zx.ⲆⲆᐃⵠΔ.ⲆⲆΔᐃ != zx.id) {
        if (zx.ΔⲆᐃⲆⲆ.length != 0 && zx.ΔⲆᐃⲆⲆ[0] != zx.id) {
          Cx.ΔᐃⲆⲆᐃ = 2;
        } else if (zx.ΔⲆᐃⲆⲆ.length != 0 && zx.id == zx.ΔⲆᐃⲆⲆ[0]) {
          Cx.ΔᐃⲆⲆᐃ = 1;
        } else if (zx.ΔⲆᐃⲆⲆ.length != 0) {
          Cx.ΔᐃⲆⲆᐃ = 3;
        }
      } else if (zx.ΔⲆᐃⲆⲆ.length == 0 && zx.ⲆⲆᐃⵠΔ.info >= 8) {
        Cx.ΔᐃⲆⲆᐃ = 4;
      } else if (zx.ΔⲆᐃⲆⲆ.length == 0) {
        Cx.ΔᐃⲆⲆᐃ = 3;
      } else {
        Cx.ΔᐃⲆⲆᐃ = 0;
      }
      if (Cx.ΔᐃⲆⲆᐃ != -1) {
        Cx.ΔᐃᐃⵠΔ[Cx.ΔᐃⲆⲆᐃ].button.ᐃⵠΔᐃ(go);
      }
      var a = document.getElementById("team_box").style;
      if (Cx.ΔᐃⲆⲆᐃ != -1 && g != Cx.ΔᐃⲆⲆᐃ && a.display == "inline-block") {
        Cx.ΔᐃᐃⵠΔ[Cx.ΔᐃⲆⲆᐃ].action();
      }
    }
  }
  function Zp(b, c, d) {
    var e = ᐃᐃ[465][b];
    var f = c.info.translate.x + dq * 5;
    var g = c.info.translate.y + dq * 5;
    if (c.info.state == zf || d) {
      g += dq * 5;
    }
    qp(go, e, f, g);
  }
  function $p() {
    if (zx.ⲆΔⵠΔⲆᐃⲆ) {
      go.globalAlpha = 0.5;
      go.fillStyle = "#000";
      go.fillRect(0, 0, uo, xp);
      go.globalAlpha = 0.8;
      var b = ᐃᐃ[516][yx.time];
      var c = aq - b.width / 2;
      var d = bq - b.height / 2;
      qp(go, b, c, d);
      go.globalAlpha = 1;
      if (Cx.ᐃΔᐃΔΔ.Ⲇⵠⵠᐃⵠ.x > -1) {
        go.fillStyle = "#660000";
        Cd(go, c + dq * (Cx.ᐃΔᐃΔΔ.Ⲇⵠⵠᐃⵠ.x * 3), d + Cx.ᐃΔᐃΔΔ.Ⲇⵠⵠᐃⵠ.y * 3 * dq, dq * 14);
        go.fill();
      }
      for (var e = Cx.ᐃΔᐃΔΔ.ΔΔᐃΔ, f = 0; f < e.length; f++) {
        var g = e[f];
        yx.time;
        go.fillStyle = "#ff0000";
        Cd(go, c + dq * (g.x / (yx.ᐃᐃΔⵠᐃ * 100) * 600), d + dq * (g.y / (yx.ΔΔΔⲆⲆ * 100) * 600), dq * 6);
        go.fill();
      }
      var h = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
      if (h) {
        go.fillStyle = yx.time ? "#fff" : "#e39716";
        Cd(go, c + dq * (h.x / (yx.ᐃᐃΔⵠᐃ * 100) * 600), d + dq * (h.y / (yx.ΔΔΔⲆⲆ * 100) * 600), dq * 12);
        go.fill();
      }
    }
  }
  function Fu(a, b) {
    ᐃᐃ[283][a] ||= um(dq, "x" + a, 17, "#FFF");
    var c = ᐃᐃ[283][a];
    var d = b.info.translate.x + b.info.ⵠⵠ[0].width - c.width - dq * 14;
    var e = b.info.translate.y + b.info.ⵠⵠ[0].height - c.height - dq * 19;
    if (zf == b.info.state) {
      e += dq * 5;
    }
    qp(go, c, d, e);
  }
  function Gu() {
    if (!zx.ⲆᐃⲆΔ.open && !zx.ΔⲆΔⲆᐃ.open) {
      zx.ΔΔⲆᐃ.open = false;
      var b = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
      var c = 100;
      if (b) {
        for (var d = 0; yx.Ⲇᐃᐃ[32].length > d; d++) {
          var e = yx.Ⲇᐃᐃ[32][d];
          var f = ΔⲆᐃ.ⲆⵠⲆⲆ(e, b);
          if (f < c) {
            c = f;
            zx.ΔΔⲆᐃ.open = V;
            zx.ΔΔⲆᐃ.ΔᐃᐃⵠⵠΔⲆ = e.info & 255;
            zx.ΔΔⲆᐃ.ΔⲆⵠΔΔ = (e.info & 65280) >> 8;
            zx.ΔΔⲆᐃ.ⲆⲆΔᐃ = e.ⲆⲆΔᐃ;
            zx.ΔΔⲆᐃ.ΔⲆⵠⲆⲆ = e.id;
          }
        }
        if (c < 100) {
          var g = ᐃᐃ[655];
          var a = (k = Cx.ⲆⵠΔᐃⵠⲆΔ).info.translate.x - 33;
          qp(go, g, a, 0);
          if (zx.ΔΔⲆᐃ.ΔᐃᐃⵠⵠΔⲆ > 0) {
            k.ᐃⵠΔᐃ(go);
            if ((j = zx.ΔΔⲆᐃ.ΔᐃᐃⵠⵠΔⲆ) > 1) {
              Fu(j, k);
            }
          }
          var j;
          var k = Cx.ⲆΔᐃⲆΔⵠⵠ;
          if (zx.ΔΔⲆᐃ.ΔⲆⵠΔΔ > 0) {
            k.ᐃⵠΔᐃ(go);
            if ((j = zx.ΔΔⲆᐃ.ΔⲆⵠΔΔ) > 1) {
              Fu(j, k);
            }
          }
        }
      }
    }
  }
  ⵠΔᐃⲆᐃ = [];
  ᐃⵠⵠⵠⲆᐃΔ = [];
  var Hu = [];
  function Iu() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    ⵠⵠ = ᐃᐃ[811][yx.time];
    ᐃΔΔ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    go.restore();
  }
  function Ju() {
    var a = yx.ᐃᐃⵠΔⲆ;
    var b = ᐃᐃ[725][yx.time];
    qp(go, b, a.translate.x, a.translate.y);
    go.save();
    go.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
    yx.ᐃᐃⵠΔⲆ.now = (new Date().getTime() - a.ᐃⵠΔᐃᐃ + a.ΔΔΔⲆⵠ) % 480000;
    var c = yx.ᐃᐃⵠΔⲆ.now * (Math.PI * 2) / 480000 - Math.PI / 2;
    go.rotate(c);
    qp(go, ᐃᐃ[726], -b.width / 2, -b.height / 2);
    go.restore();
  }
  function Ku(a) {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && Wl == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) {
        this.ΔΔᐃ.ΔⵠΔ = zq;
      }
      var b = dq * (Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600);
      var c = Math.sin(this.ΔΔᐃ.angle - this.angle) * b;
      var d = Math.cos(this.ΔΔᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    ⵠⵠ = ᐃᐃ[a][yx.time];
    ᐃΔΔ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2 + c, -ΔⵠⲆ / 2 + d, ᐃΔΔ, ΔⵠⲆ);
    go.restore();
  }
  function Lu() {
    go.save();
    var a = dq;
    if (zx.ⵠΔⲆΔ.ⲆⲆᐃᐃΔ.x < 0.25) {
      go.globalAlpha = zx.ⵠΔⲆΔ.ⲆⵠⵠΔΔⵠΔ.ⵠΔΔ;
    }
    var b = zx.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.length > 0 ? -70 : 0;
    if (zx.ⲆᐃⲆΔ.open || zx.ΔⲆΔⲆᐃ.open && zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(109) != -1 || zx.ΔΔⲆᐃ.open && zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(134) != -1 || zx.ᐃⵠΔΔ.open && zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(109) != -1 || zx.ⵠⲆⵠᐃᐃ.open && zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(180) != -1 || zx.ⲆΔᐃⲆ.open && (zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(109) != -1 || zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(131) != -1)) {
      b -= dq * 50;
    }
    go.translate((uo - dq * 950) / 2, b);
    go.fillStyle = "#69A148";
    go.fillRect(this.translate.x + dq * 37, this.translate.y + dq * 17, zx.ⵠΔⲆΔ.ⲆⲆᐃᐃΔ.x * 178 * dq, dq * 18);
    go.globalAlpha = 1;
    if (zx.ⵠΔⲆΔ.ⲆⲆᐃⲆⵠΔⵠ.x < 0.35) {
      go.fillStyle = "#8F050A";
      go.globalAlpha = zx.ⵠΔⲆΔ.ᐃⲆⲆᐃⲆⲆᐃ.ⵠΔΔ;
      go.fillRect(this.translate.x + dq * 277, this.translate.y + dq * 17, dq * 178, dq * 18);
      go.globalAlpha = 1;
    }
    go.fillStyle = "#AF352A";
    go.fillRect(this.translate.x + dq * 277, this.translate.y + dq * 17, dq * (zx.ⵠΔⲆΔ.ⲆⲆᐃⲆⵠΔⵠ.x * 178), dq * 18);
    if (zx.ⵠΔⲆΔ.ⵠⲆⲆᐃⵠ.x < 0.35) {
      go.fillStyle = "#366B91";
      go.globalAlpha = zx.ⵠΔⲆΔ.ΔΔΔⲆⲆΔⵠ.ⵠΔΔ;
      go.fillRect(this.translate.x + dq * 517, this.translate.y + dq * 17, dq * 178, dq * 18);
      go.globalAlpha = 1;
    }
    go.fillStyle = "#669BB1";
    go.fillRect(this.translate.x + dq * 517, this.translate.y + dq * 17, zx.ⵠΔⲆΔ.ⵠⲆⲆᐃⵠ.x * 178 * dq, dq * 18);
    if (zx.ⵠΔⲆΔ.ⵠⲆⲆᐃⵠ.x > 0.99) {
      if (zx.ⵠΔⲆΔ.ⵠΔΔⵠᐃ.x < 0.35) {
        go.fillStyle = "#6C4036";
        go.globalAlpha = zx.ⵠΔⲆΔ.ⲆⵠΔⵠⲆΔⲆ.ⵠΔΔ;
        go.fillRect(this.translate.x + dq * 517, this.translate.y + dq * 17, dq * 178, dq * 18);
        go.globalAlpha = 1;
      }
      go.fillStyle = "#9C4036";
      go.fillRect(this.translate.x + dq * 517, this.translate.y + dq * 17, (1 - zx.ⵠΔⲆΔ.ⵠΔΔⵠᐃ.x) * 178 * dq, dq * 18);
    }
    if (zx.ⵠΔⲆΔ.ⵠⲆᐃⲆⲆⵠᐃ.x < 0.35) {
      go.fillStyle = "#001A57";
      go.globalAlpha = zx.ⵠΔⲆΔ.ΔᐃᐃⲆⵠⵠΔ.ⵠΔΔ;
      go.fillRect(this.translate.x + dq * 757, this.translate.y + dq * 17, dq * 178, dq * 18);
      go.globalAlpha = 1;
    }
    go.fillStyle = "#074A87";
    go.fillRect(this.translate.x + dq * 757, this.translate.y + dq * 17, dq * (zx.ⵠΔⲆΔ.ⵠⲆᐃⲆⲆⵠᐃ.x * 178), dq * 18);
    dq = a;
    qp(go, this.ⵠⵠ, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    go.restore();
    if (zx.ⵠΔⲆΔ.ⲆᐃⵠᐃⲆΔⲆ.x < 0.99) {
      var c = Math.floor(aq - ᐃᐃ[608].width / 2);
      b += this.translate.y - ᐃᐃ[608].height - dq * 5;
      go.fillStyle = "#BBE8EF";
      go.fillRect(c + 5, b + dq * 5, zx.ⵠΔⲆΔ.ⲆᐃⵠᐃⲆΔⲆ.x * (dq * 588), dq * 10);
      if (zx.ⵠΔⲆΔ.ⲆᐃⵠᐃⲆΔⲆ.x < 0.35) {
        go.fillStyle = "#9BA8AF";
        go.globalAlpha = zx.ⵠΔⲆΔ.ⲆⲆᐃⵠΔⲆⲆ.ⵠΔΔ;
        go.fillRect(c + 5, b + 5, dq * 588, dq * 10);
        go.globalAlpha = 1;
      }
      qp(go, ᐃᐃ[608], c, b);
      this.y = b;
    }
  }
  function Mu(a) {
    if ((a = a / 100) <= 0.8) {
      go.save();
      go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
      go.rotate(this.angle);
      if (this.ΔΔᐃ.ΔⵠΔ) {
        if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == Pn) {
          this.ΔΔᐃ.ΔⵠΔ = false;
        }
        var b = dq * (Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600);
        var c = b * Math.sin(this.ΔΔᐃ.angle - this.angle);
        var d = b * Math.cos(this.ΔΔᐃ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      go.globalAlpha = 0.5;
      fd(go, c, d, dq * 18, a);
      cd(go, null, "#000000", dq * 18);
      go.globalAlpha = 1;
      fd(go, c, d, dq * 18, a);
      cd(go, null, Mr.ⲆΔⵠᐃⲆⲆⵠ[yx.time], dq * 6);
      go.restore();
    }
  }
  function Nu(a) {
    if ((a = a / 100) <= 0.95) {
      go.save();
      go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
      go.rotate(this.angle);
      if (this.ΔΔᐃ.ΔⵠΔ) {
        if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == 0) {
          this.ΔΔᐃ.ΔⵠΔ = Iq;
        }
        var b = dq * ((1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * Gx * 600);
        var c = Math.sin(this.ΔΔᐃ.angle - this.angle) * b;
        var d = Math.cos(this.ΔΔᐃ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      go.globalAlpha = 0.5;
      fd(go, c, d, dq * 28, a);
      cd(go, null, "#000000", dq * 18);
      go.globalAlpha = 1;
      fd(go, c, d, dq * 28, a);
      cd(go, null, Mr.ⲆᐃᐃΔⲆⵠΔ[yx.time], dq * 6);
      go.restore();
    }
  }
  function Pu(a) {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == 0) {
        this.ΔΔᐃ.ΔⵠΔ = false;
      }
      var b = Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * dq;
      var c = Math.sin(this.ΔΔᐃ.angle - this.angle) * b;
      var d = b * Math.cos(this.ΔΔᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    if (this.ⵠᐃⵠⵠⵠ.ΔⵠΔ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    ⵠⵠ = ᐃᐃ[872][Math.floor(this.id + this.color) % 5][yx.time];
    ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠⵠⵠ.ⵠΔΔ;
    ΔⵠⲆ = -ⵠⵠ.height * this.ⵠᐃⵠⵠⵠ.ⵠΔΔ;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2 + c, -ΔⵠⲆ / 2 + d, ᐃΔΔ, ΔⵠⲆ);
    go.restore();
  }
  function Qu() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    ⵠⵠ = ᐃᐃ[321][yx.time];
    ᐃΔΔ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    go.restore();
  }
  function Ru() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    ⵠⵠ = ᐃᐃ[837][yx.time];
    ᐃΔΔ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    go.restore();
  }
  function Su() {
    var a = -8;
    if (zx.ⵠⵠⵠⲆᐃ.enabled) {
      var b = ᐃᐃ[546];
      qp(go, b, zx.ⵠⵠⵠⲆᐃ.translate.x, zx.ⵠⵠⵠⲆᐃ.translate.y + a);
      a += 70;
    }
    if (zx.ⵠΔⲆΔΔΔᐃ === 1) {
      b = ᐃᐃ[549];
      qp(go, b, zx.ⵠⵠⵠⲆᐃ.translate.x, zx.ⵠⵠⵠⲆᐃ.translate.y + a);
      a += 70;
    } else if (zx.ⵠΔⲆΔ.ⵠⲆⲆᐃⵠ.x < 0.25 || zx.ⵠΔⲆΔ.ⲆⲆᐃⲆⵠΔⵠ.x < 0.25 || zx.ⵠΔⲆΔ.ⵠⲆᐃⲆⲆⵠᐃ.x < 0.25 || zx.ⵠΔⲆΔ.ⲆᐃⵠᐃⲆΔⲆ.x < 0.25 || zx.ⵠΔⲆΔ.ⵠΔΔⵠᐃ.x < 0.25) {
      b = ᐃᐃ[548];
      qp(go, b, zx.ⵠⵠⵠⲆᐃ.translate.x, zx.ⵠⵠⵠⲆᐃ.translate.y + a);
      a += 70;
    }
    if (zx.ⲆΔΔⲆΔ > 0) {
      b = ᐃᐃ[547];
      qp(go, b, zx.ⵠⵠⵠⲆᐃ.translate.x, zx.ⵠⵠⵠⲆᐃ.translate.y + a);
      var c = Hu[zx.ⲆΔΔⲆΔ];
      if (Ll === c) {
        c = um(dq, zx.ⲆΔΔⲆΔ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
        Hu[zx.ⲆΔΔⲆΔ] = c;
      }
      if (zx.ⲆΔΔⲆΔ < 9) {
        qp(go, c, zx.ⵠⵠⵠⲆᐃ.translate.x - 39, zx.ⵠⵠⵠⲆᐃ.translate.y + a + 20);
      } else {
        qp(go, c, zx.ⵠⵠⵠⲆᐃ.translate.x - 46, zx.ⵠⵠⵠⲆᐃ.translate.y + a + 20);
      }
    }
  }
  function Tu() {
    var b = zx.ⲆⲆᐃⵠΔ;
    if (b.wait) {
      var c = b.timeout.ΔⵠΔ();
      go.save();
      var d = ᐃᐃ[562];
      var e = ᐃᐃ[537].height + dq * 25;
      go.translate(d.width, Cx.ⵠΔⲆΔ.translate.y - dq * 188 - e);
      var f = -d.width / 2 - 2;
      var g = -d.height / 2 - 4;
      qp(go, d, f + 2, g);
      go.beginPath();
      go.lineWidth = dq * 5;
      go.strokeStyle = Mr.ᐃΔΔΔⲆΔΔ[yx.time];
      go.lineCap = "round";
      go.arc(0, g + d.height / 2, dq * 25, 0, Math.PI * 2 * b.timeout.ⵠΔΔ);
      go.stroke();
      go.restore();
      if (c) {
        b.wait = false;
        b.timeout.ⵠΔΔ = 0;
        b.timeout.ⵠΔⲆ = Il;
      }
    }
  }
  function Uu(a) {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == 0) {
        this.ΔΔᐃ.ΔⵠΔ = false;
      }
      var b = (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * Gx * 600 * dq;
      var c = Math.sin(this.ΔΔᐃ.angle - this.angle) * b;
      var d = Math.cos(this.ΔΔᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = ᐃᐃ[a][yx.time];
    ᐃΔΔ = -e.width;
    ΔⵠⲆ = -e.height;
    qp(go, e, -ᐃΔΔ / 2 + c, -ΔⵠⲆ / 2 + d, ᐃΔΔ, ΔⵠⲆ);
    go.restore();
  }
  function Vu() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    ⵠⵠ = ᐃᐃ[848][yx.time];
    ᐃΔΔ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    go.restore();
  }
  function Xu(b) {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && _n == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) {
        this.ΔΔᐃ.ΔⵠΔ = false;
      }
      var c = dq * ((1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * Gx * 600);
      var d = c * Math.sin(this.ΔΔᐃ.angle - this.angle);
      var e = c * Math.cos(this.ΔΔᐃ.angle - this.angle);
    } else {
      d = 0;
      e = 0;
    }
    var f = ᐃᐃ[853].length;
    ⵠⵠ = ᐃᐃ[853][(this.ⲆⲆⲆⵠ + this.ᐃⲆ % 2) % f][yx.time];
    ᐃΔΔ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    var g = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
    if (g && (this.ⲆⲆΔᐃ === zx.id || zx.ΔⲆᐃⵠᐃⵠⵠ(this.ⲆⲆΔᐃ))) {
      if (ΔⲆᐃ.ⲆⵠⲆⲆ(this, g) < 550) {
        this.opacity = Math.max(this.opacity - Gx, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + Gx, 1);
      }
    } else if (g && ΔⲆᐃ.ⲆⵠⲆⲆ(this, yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ]) < 150) {
      this.opacity = Math.max(this.opacity - Gx, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + Gx, 1);
    }
    var a = go.globalAlpha;
    go.globalAlpha *= this.opacity;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2 + d, -ΔⵠⲆ / 2 + e, ᐃΔΔ, ΔⵠⲆ);
    go.globalAlpha = a;
    go.restore();
  }
  function Yu() {
    var b = zx.ⵠΔᐃΔ;
    if (!b.ᐃΔΔᐃᐃ && b.ⵠⲆⵠⵠ > 0) {
      var c = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
      if (!c) {
        return;
      }
      go.save();
      if (Xr[b.ⵠⲆⵠⵠ].ⵠΔΔⵠ === 0 && b.mode === 0) {
        go.translate(zx.ⲆⵠΔ.x + c.x, zx.ⲆⵠΔ.y + c.y);
        go.rotate(c.angle);
        go.translate(120, 0);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var e = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = zx.ⲆⵠΔ.x + (d - d % 100 + 50);
        e = zx.ⲆⵠΔ.y + (e - e % 100 + 50);
        go.translate(d, e);
      }
      var f = ᐃᐃ[b.ⵠⲆⵠⵠ][yx.time];
      go.globalAlpha = 0.5;
      qp(go, f, -f.width / 2, -f.height / 2);
      go.globalAlpha = 1;
      go.restore();
      if (Xr[b.ⵠⲆⵠⵠ].ⵠΔΔⵠ === 0) {
        if (!b.label[b.mode]) {
          if (b.mode === 0) {
            b.label[0] = um(dq, Lb[336], 20, "#e2c340");
          } else {
            b.label[1] = um(dq, Lb[337], 20, "#e2c340");
          }
        }
        f = b.label[b.mode];
        qp(go, f, aq + -f.width / 2, Cx.ⵠΔⲆΔ.y - 26);
      }
    }
    if (b.ᐃΔΔᐃᐃ) {
      var i = b.timeout.ΔⵠΔ();
      for (var a = 0; a < b.ΔⲆᐃⵠⵠ.length; a++) {
        var j = b.ΔⲆᐃⵠⵠ[a];
        if (b.id == j.id) {
          var k = dq * 42;
          var l = dq * 17;
          md(go, j.info.translate.x, j.info.translate.y + (1 - b.timeout.ⵠΔΔ) * k, j.info.width, k * b.timeout.ⵠΔΔ + l, dq * 10);
          go.fillStyle = "#55B973";
          go.fill();
          go.globalAlpha = 0.8;
          j.ᐃⵠΔᐃ(go);
        } else {
          go.globalAlpha = 0.5;
          j.ᐃⵠΔᐃ(go);
        }
        go.globalAlpha = 1;
      }
      if (i) {
        b.ᐃΔΔᐃᐃ = false;
        b.timeout.ⵠΔΔ = 0;
        b.timeout.ⵠΔⲆ = _n;
      }
      return true;
    }
    for (a = 0; a < b.ΔⲆᐃⵠⵠ.length; a++) {
      b.ΔⲆᐃⵠⵠ[a].ᐃⵠΔᐃ(go);
    }
    return Iq;
  }
  function Zu(b) {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == Ah) {
        this.ΔΔᐃ.ΔⵠΔ = hr;
      }
      var c = (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * Gx * 600 * dq;
      var d = c * Math.sin(this.ΔΔᐃ.angle - this.angle);
      var e = Math.cos(this.ΔΔᐃ.angle - this.angle) * c;
    } else {
      d = 0;
      e = 0;
    }
    if (b === 913 && !yx.transition) {
      var f = 0;
      for (var g = yx.Ⲇᐃᐃ[0], a = 0; a < g.length; a++) {
        var h = ΔⲆᐃ.ⲆⵠⲆⲆ(g[a], this);
        if (h < 140 && h > 35) {
          f = 0;
          break;
        }
        if (h <= 35) {
          f = 1;
        }
      }
      this.opacity = f === 0 ? Math.max(0.5, this.opacity - Gx / 1.5) : Math.min(1, this.opacity + Gx / 1.5);
      go.globalAlpha = this.opacity;
    }
    ⵠⵠ = ᐃᐃ[b][yx.time];
    ᐃΔΔ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2 + d, -ΔⵠⲆ / 2 + e, ᐃΔΔ, ΔⵠⲆ);
    go.globalAlpha = 1;
    go.restore();
  }
  function $u() {
    for (var b = zx.ᐃΔⲆᐃ, c = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ], d = 0; b.ΔⵠΔⵠⲆ.length > d; d++) {
      var e = b.ΔⵠΔⵠⲆ[d];
      var f = x;
      if ((c = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ]) && (e.id == c.right || e.id == c.ⲆΔᐃΔᐃ && c.ⲆΔᐃΔᐃ > 0)) {
        f = true;
        qp(go, e.info.ⵠⵠ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
      } else {
        e.ᐃⵠΔᐃ(go);
      }
      var g = zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[e.id];
      if (g > 1) {
        Fu(g, e);
      }
      if (g > 0) {
        Zp(d, e, f);
      }
      var h = zx.ⲆᐃⲆΔ;
      if (h.open && (h.id < 0 || e.id == h.id) && (!h.lock || h.ⲆⲆΔᐃ == zx.id)) {
        Cx.ΔⵠᐃⲆⵠ[e.id].ᐃⵠΔᐃ(go);
      }
      if (zx.ΔⲆΔⲆᐃ.open && e.id == 109) {
        Cx.ΔⵠᐃⲆⵠ[e.id].ᐃⵠΔᐃ(go);
      }
      if (zx.ⵠⲆⵠᐃᐃ.open && e.id == 180) {
        Cx.ΔⵠᐃⲆⵠ[e.id].ᐃⵠΔᐃ(go);
      }
      if (zx.ΔΔⲆᐃ.open && e.id == 134) {
        Cx.ΔⵠᐃⲆⵠ[e.id].ᐃⵠΔᐃ(go);
      }
      if (zx.ᐃⵠΔΔ.open && e.id == 109) {
        Cx.ΔⵠᐃⲆⵠ[e.id].ᐃⵠΔᐃ(go);
      }
      if (zx.ⲆΔᐃⲆ.open && (e.id == 109 || e.id == 131)) {
        Cx.ΔⵠᐃⲆⵠ[e.id].ᐃⵠΔᐃ(go);
      }
    }
    if (e && b.max > d) {
      var j = ᐃᐃ[334][2];
      Ⲇᐃ = e.info.translate.x;
      ⲆⲆⲆ = e.info.translate.y;
      ⲆⲆⲆⵠ = 1;
      for (; b.max > d; d++, ⲆⲆⲆⵠ++) {
        qp(go, j, Ⲇᐃ + (j.width + 5) * ⲆⲆⲆⵠ, ⲆⲆⲆ);
      }
    }
  }
  function _u() {
    var b = zx.ⲆⵠᐃΔⵠ;
    var c = Cx.ΔⵠⲆᐃ;
    if (b.ΔⵠΔ) {
      b.ΔⵠΔ = false;
      var d = b.ⲆΔⵠᐃⵠ;
      var e = c.ᐃⵠ.width;
      var f = c.ᐃⵠ.height;
      var i = c.Δ;
      var a = yx.ΔΔᐃΔ;
      var j = false;
      i.clearRect(0, 0, e, f);
      i.drawImage(c.ⵠⵠ, 0, 0);
      for (var k = 0; d.length > k; k++) {
        var l = a[d[k]];
        if ((yx.mode !== 1 || l.ⵠⲆⵠΔⵠ !== "spectator") && (yx.mode !== 2 || l.ⵠⲆᐃᐃ !== 0)) {
          if (zx.id == d[k]) {
            j = xo;
            if (yx.mode === 3 && l.ⵠⲆᐃᐃ === 0) {
              Δⵠ = "#FF0000";
            } else {
              Δⵠ = "#FFF";
            }
          } else if (yx.mode === 3 && l.ⵠⲆᐃᐃ === 0) {
            Δⵠ = "#990000";
          } else {
            Δⵠ = "#A1BDCD";
          }
          i.drawImage(um(dq, "" + (k + 1), dq * 15, Δⵠ), dq * 20, dq * (40 + k * 22));
          l.ΔΔᐃⵠᐃⵠΔ ||= um(dq, l.ⵠⲆⵠΔⵠ, dq * 15, Δⵠ, undefined, undefined, undefined, undefined, dq * 110);
          i.drawImage(l.ΔΔᐃⵠᐃⵠΔ, dq * 39, (40 + k * 22) * dq);
          i.drawImage(um(dq, ΔⲆᐃ.ⵠⲆⲆⵠⵠΔᐃ(l.ᐃᐃᐃΔᐃ), dq * 15, Δⵠ), dq * 156, dq * (40 + k * 22));
        }
      }
      if (!j) {
        if (yx.mode === 0 || yx.mode === 3 || yx.mode === 4 || yx.mode === 5 || yx.mode === 7 || yx.mode === 1 && !zx.ΔᐃⲆΔᐃⲆᐃ || yx.mode === 2 && !zx.ΔⵠⵠⵠΔ) {
          i.drawImage(ᐃᐃ[306], dq * 15, (46 + k * 22) * dq);
          i.drawImage(um(dq, ΔⲆᐃ.ⵠⲆⲆⵠⵠΔᐃ(yx.ΔΔᐃΔ[zx.id].ᐃᐃᐃΔᐃ), dq * 15, "#FFF"), dq * 100, dq * (46 + k * 22));
        }
      }
    }
    qp(go, c.ᐃⵠ, c.translate.x, c.translate.y);
  }
  function av() {
    var a = zx.ᐃᐃⵠⵠΔ;
    if (a.wait) {
      var b = a.timeout.ΔⵠΔ();
      go.save();
      var c = ᐃᐃ[537];
      go.translate(c.width - dq * 2, Cx.ⵠΔⲆΔ.translate.y - dq * 60);
      var d = -c.width / 2 - 2;
      var e = -c.height / 2 - 4;
      qp(go, c, d, e);
      go.beginPath();
      go.lineWidth = dq * 5;
      go.strokeStyle = Mr.ᐃΔΔΔⲆΔΔ[yx.time];
      go.lineCap = "round";
      go.arc(0, e + c.height / 2, dq * 25, 0, Math.PI * 2 * a.timeout.ⵠΔΔ);
      go.stroke();
      go.restore();
      if (b) {
        a.wait = false;
        a.timeout.ⵠΔΔ = 0;
        a.timeout.ⵠΔⲆ = false;
      }
    }
  }
  function bv() {
    var a = zx.ⵠᐃΔⵠⲆ;
    if (a.wait) {
      var b = a.timeout.ΔⵠΔ();
      go.save();
      var c = ᐃᐃ[792];
      go.translate(c.width - dq * 2, Cx.ⵠΔⲆΔ.translate.y - dq * 125);
      var d = -c.width / 2 + 10;
      var e = -c.height / 2 - 4;
      qp(go, c, d, e);
      go.beginPath();
      go.lineWidth = dq * 5;
      go.strokeStyle = Mr.ᐃᐃᐃⵠΔⲆⵠ[yx.time];
      go.lineCap = "round";
      go.arc(9, e + c.height / 2, dq * 25, 0, Math.PI * 2 * a.timeout.ⵠΔΔ);
      go.stroke();
      go.restore();
      if (b) {
        a.wait = zq;
        a.timeout.ⵠΔΔ = 0;
        a.timeout.ⵠΔⲆ = ns;
      }
    }
  }
  function cv() {
    var a = zx.Ⲇⵠⵠⵠⵠ;
    if (a.wait) {
      var b = a.timeout.ΔⵠΔ();
      go.save();
      var c = ᐃᐃ[794];
      go.translate(c.width - dq * 12, Cx.ⵠΔⲆΔ.translate.y - dq * 190);
      var d = -c.width / 2 + 9;
      var e = -c.height / 2 - 4;
      qp(go, c, d, e);
      go.beginPath();
      go.lineWidth = dq * 5;
      go.strokeStyle = Mr.ᐃᐃᐃⵠΔⲆⵠ[yx.time];
      go.lineCap = "round";
      go.arc(9, e + c.height / 2, dq * 25, 0, Math.PI * 2 * a.timeout.ⵠΔΔ);
      go.stroke();
      go.restore();
      if (b) {
        a.wait = x;
        a.timeout.ⵠΔΔ = 0;
        a.timeout.ⵠΔⲆ = ks;
      }
    }
  }
  function dv() {
    var a = zx.ⵠΔᐃΔ;
    if (a.ᐃΔΔᐃᐃ) {
      var b = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
      go.save();
      go.translate(zx.ⲆⵠΔ.x + b.x, zx.ⲆⵠΔ.y + b.y);
      var c = ᐃᐃ[324];
      var d = -c.width / 2;
      var e = -c.height / 2 - dq * 125;
      qp(go, c, d, e);
      go.beginPath();
      go.lineWidth = dq * 5;
      go.strokeStyle = Mr.ⲆᐃᐃΔⲆⵠΔ[yx.time];
      go.lineCap = "round";
      go.arc(0, e + c.height / 2, dq * 25, 0, Math.PI * 2 * a.timeout.ⵠΔΔ);
      go.stroke();
      go.restore();
    }
  }
  function ev() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    ⵠⵠ = ᐃᐃ[239][yx.time];
    ᐃΔΔ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    go.restore();
  }
  function fv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == 0) {
        this.ΔΔᐃ.ΔⵠΔ = false;
      }
      var a = dq * (Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600);
      var b = Math.sin(this.ΔΔᐃ.angle - this.angle) * a;
      var c = a * Math.cos(this.ΔΔᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    ⵠⵠ = ᐃᐃ[167][yx.time];
    ᐃΔΔ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2 + b, -ΔⵠⲆ / 2 + c, ᐃΔΔ, ΔⵠⲆ);
    if (this.lock) {
      ⵠⵠ = ᐃᐃ[148][yx.time];
      ᐃΔΔ = -ⵠⵠ.width;
      ΔⵠⲆ = -ⵠⵠ.height;
      qp(go, ⵠⵠ, -ᐃΔΔ / 2 + b - dq * 1, -ΔⵠⲆ / 2 + c, ᐃΔΔ, ΔⵠⲆ);
    }
    go.restore();
  }
  var gv = 0;
  function hv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ⵠᐃⵠᐃ.ΔⵠΔ();
    this.ΔⲆΔΔᐃᐃⵠ.ΔⵠΔ();
    this.ⲆᐃΔⲆΔΔⲆ.ΔⵠΔ();
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    c = this.info === 0 ? ᐃᐃ[887][yx.time] : ᐃᐃ[886][yx.time];
    ᐃΔΔ = -c.width * this.ⵠᐃⵠᐃ.ⵠΔΔ;
    ΔⵠⲆ = -c.height * this.ⵠᐃⵠᐃ.ⵠΔΔ;
    qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    if (this.action & 2) {
      if (this.ΔΔᐃ.ΔⵠΔ() && this.ΔΔᐃ.ⵠΔⲆ == 0) {
        this.action -= 2;
      }
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      var c = ᐃᐃ[888];
      qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ᐃΔᐃⵠⵠ.ΔⵠΔ() && this.ᐃΔᐃⵠⵠ.ⵠΔⲆ == 0) {
        this.action -= 4;
      }
      go.globalAlpha = 0.6 - this.ᐃΔᐃⵠⵠ.ⵠΔΔ;
      c = ᐃᐃ[891];
      qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    go.restore();
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle + b);
    go.translate(55, 0);
    go.rotate(a);
    c = this.info === 0 ? ᐃᐃ[894][yx.time] : ᐃᐃ[896][yx.time];
    ᐃΔΔ = -c.width * this.ΔⲆΔΔᐃᐃⵠ.ⵠΔΔ;
    ΔⵠⲆ = -c.height * this.ΔⲆΔΔᐃᐃⵠ.ⵠΔΔ;
    qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    if (this.action & 2) {
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      c = ᐃᐃ[889];
      qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    if (this.action & 4) {
      go.globalAlpha = 0.6 - this.ᐃΔᐃⵠⵠ.ⵠΔΔ;
      c = ᐃᐃ[892];
      qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    go.restore();
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle + a + b);
    go.translate(55, 0);
    go.rotate(a);
    c = this.info === 0 ? ᐃᐃ[895][yx.time] : ᐃᐃ[897][yx.time];
    ᐃΔΔ = -c.width * this.ⲆᐃΔⲆΔΔⲆ.ⵠΔΔ;
    ΔⵠⲆ = this.ⲆᐃΔⲆΔΔⲆ.ⵠΔΔ * -c.height;
    qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    if (this.action & 2) {
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      c = ᐃᐃ[890];
      qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    if (this.action & 4) {
      go.globalAlpha = 0.6 - this.ᐃΔᐃⵠⵠ.ⵠΔΔ;
      c = ᐃᐃ[893];
      qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    go.restore();
  }
  function iv(a, b, c) {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + b, zx.ⲆⵠΔ.y + c);
    go.rotate(this.angle);
    go.translate(this.x - b, this.y - c);
    this.ⵠᐃⵠᐃ.ΔⵠΔ();
    ⵠⵠ = ᐃᐃ[a][yx.time];
    ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ;
    ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    go.restore();
  }
  function jv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    if (ΔⲆᐃ.ⲆⵠⲆⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Gx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Gx, 1);
    }
    this.ⵠᐃⵠᐃ.ΔⵠΔ();
    this.rotate.ΔⵠΔ();
    a = this.info === 0 ? ᐃᐃ[233][yx.time] : ᐃᐃ[1083][yx.time];
    ᐃΔΔ = this.scale * (-a.width * this.ⵠᐃⵠᐃ.ⵠΔΔ);
    ΔⵠⲆ = this.scale * (this.ⵠᐃⵠᐃ.ⵠΔΔ * -a.height);
    qp(go, a, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    if (this.action & 2) {
      if (this.ΔΔᐃ.ΔⵠΔ() && Qi == this.ΔΔᐃ.ⵠΔⲆ) {
        this.action -= 2;
      }
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      var a = ᐃᐃ[1092];
      qp(go, a, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = 1;
    }
    a = this.info === 0 ? ᐃᐃ[1087][yx.time] : ᐃᐃ[1086][yx.time];
    ᐃΔΔ = this.scale * (this.ⵠᐃⵠᐃ.ⵠΔΔ * -a.width);
    ΔⵠⲆ = this.scale * (this.ⵠᐃⵠᐃ.ⵠΔΔ * -a.height);
    go.save();
    go.translate(dq * -40, dq * 10);
    go.rotate(this.rotate.ⵠΔΔ);
    qp(go, a, -ᐃΔΔ * dq / 4, dq * -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    if (this.action & 2) {
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      a = ᐃᐃ[1093];
      qp(go, a, dq * -ᐃΔΔ / 4, -ΔⵠⲆ * dq / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = 1;
    }
    go.restore();
    a = this.info === 0 ? ᐃᐃ[1090][yx.time] : ᐃᐃ[1089][yx.time];
    go.save();
    go.translate(dq * 40, dq * 10);
    go.rotate(-this.rotate.ⵠΔΔ);
    qp(go, a, dq * -ᐃΔΔ / 4, dq * -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    if (this.action & 2) {
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      a = ᐃᐃ[1094];
      qp(go, a, -ᐃΔΔ * dq / 4, -ΔⵠⲆ * dq / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = 1;
    }
    go.restore();
    go.restore();
  }
  function kv() {
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == Lk) {
        this.ΔΔᐃ.ΔⵠΔ = ns;
      }
      var a = dq * (Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600);
      var b = a * Math.sin(this.ΔΔᐃ.angle - this.angle);
      var c = Math.cos(this.ΔΔᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    this.ⵠⲆΔⵠᐃᐃᐃ = (this.ⵠⲆΔⵠᐃᐃᐃ + Gx * 3) % (Math.PI * 2);
    this.ⵠⲆⲆᐃⲆⲆᐃ = (this.ⵠⲆⲆᐃⲆⲆᐃ - Gx * 3) % (Math.PI * 2);
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x + b, zx.ⲆⵠΔ.y + this.y + c);
    go.save();
    go.rotate(this.angle);
    ⵠⵠ = ᐃᐃ[152][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    go.restore();
    go.save();
    go.rotate(this.ⵠⲆΔⵠᐃᐃᐃ);
    ⵠⵠ = ᐃᐃ[1194][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    go.restore();
    go.save();
    go.rotate(this.ⵠⲆⲆᐃⲆⲆᐃ);
    ⵠⵠ = ᐃᐃ[1193][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    go.restore();
    go.restore();
  }
  function lv() {
    if (this.info !== 10) {
      for (var b = this.info & 15, c = 0; b > c; c++) {
        this.ΔΔⵠΔ[c].ᐃⵠΔᐃ(207, this.x, this.y);
      }
      go.save();
      go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
      go.rotate(this.angle);
      if (this.ΔΔᐃ.ΔⵠΔ) {
        if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && Pn == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) {
          this.ΔΔᐃ.ΔⵠΔ = false;
        }
        var d = Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * dq;
        var e = d * Math.sin(this.ΔΔᐃ.angle - this.angle);
        var f = d * Math.cos(this.ΔΔᐃ.angle - this.angle);
      } else {
        e = 0;
        f = 0;
      }
      if (this.info & 16) {
        var g = ᐃᐃ[958][yx.time];
      } else {
        g = ᐃᐃ[957][yx.time];
      }
      qp(go, g, -g.width / 2 + e, -g.width / 2 + f);
      go.restore();
    }
  }
  const mv = {};
  mv.get = function (a, b) {
    if (b !== "ΔᐃⲆᐃⵠᐃⵠᐃⲆ") {
      const a = Math.floor;
      let b = 0;
      const c = function (c) {
        for (let a = 0; a < 2298; a++) {
          b += a;
        }
        return a(c);
      };
      Math.floor = c;
    }
    return _a.Reflect.get(...arguments);
  };
  function nv() {
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && _n == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) {
        this.ΔΔᐃ.ΔⵠΔ = false;
      }
      var a = dq * ((1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * Gx * 600);
      var b = a * Math.sin(this.ΔΔᐃ.angle - this.angle);
      var c = a * Math.cos(this.ΔΔᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    go.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    go.translate(zx.ⲆⵠΔ.x + this.x + b, zx.ⲆⵠΔ.y + this.y + c);
    go.rotate(this.angle);
    ⵠⵠ = ᐃᐃ[153][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Gx * 3) % (Math.PI * 2);
    }
    go.rotate(this.rotate);
    ⵠⵠ = ᐃᐃ[1198][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    go.restore();
  }
  function ov(a, b) {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    c = ᐃᐃ[a][yx.time];
    ᐃΔΔ = -c.width;
    ΔⵠⲆ = -c.height;
    qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    if (this.action & 2) {
      if (this.ΔΔᐃ.ΔⵠΔ() && this.ΔΔᐃ.ⵠΔⲆ == ns) {
        this.action -= 2;
      }
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      var c = ᐃᐃ[b];
      qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    go.restore();
  }
  function pv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    if (ΔⲆᐃ.ⲆⵠⲆⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Gx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Gx, 1);
    }
    this.ⵠᐃⵠᐃ.ΔⵠΔ();
    this.rotate.ΔⵠΔ();
    a = ᐃᐃ[450][yx.time];
    ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -a.width * this.scale;
    ΔⵠⲆ = this.scale * (this.ⵠᐃⵠᐃ.ⵠΔΔ * -a.height);
    qp(go, a, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    if (this.action & 2) {
      if (this.ΔΔᐃ.ΔⵠΔ() && this.ΔΔᐃ.ⵠΔⲆ == 0) {
        this.action -= 2;
      }
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      var a = ᐃᐃ[464];
      qp(go, a, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = 1;
    }
    a = ᐃᐃ[453][yx.time];
    ᐃΔΔ = this.scale * (-a.width * this.ⵠᐃⵠᐃ.ⵠΔΔ);
    ΔⵠⲆ = this.scale * (this.ⵠᐃⵠᐃ.ⵠΔΔ * -a.height);
    go.save();
    go.translate(dq * -60, dq * 20);
    go.rotate(this.rotate.ⵠΔΔ);
    qp(go, a, -ᐃΔΔ * dq / 4, dq * -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    if (this.action & 2) {
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      a = ᐃᐃ[468];
      qp(go, a, dq * -ᐃΔΔ / 4, -ΔⵠⲆ * dq / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = 1;
    }
    go.restore();
    a = ᐃᐃ[454][yx.time];
    go.save();
    go.translate(dq * 60, dq * 20);
    go.rotate(-this.rotate.ⵠΔΔ);
    qp(go, a, -ᐃΔΔ * dq / 4, dq * -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    if (this.action & 2) {
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      a = ᐃᐃ[469];
      qp(go, a, -ᐃΔΔ * dq / 4, -ΔⵠⲆ * dq / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = 1;
    }
    go.restore();
    go.restore();
  }
  function qv() {
    if (this.info >= 10) {
      go.save();
      go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
      go.rotate(this.angle);
      if (this.ΔΔᐃ.ΔⵠΔ) {
        if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == 0) {
          this.ΔΔᐃ.ΔⵠΔ = x;
        }
        var b = Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * dq;
        var c = Math.sin(this.ΔΔᐃ.angle - this.angle) * b;
        var d = Math.cos(this.ΔΔᐃ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      this.ᐃΔⵠⲆ.ΔⵠΔ();
      var e = ᐃᐃ[206][yx.time];
      var f = -e.width * this.ᐃΔⵠⲆ.ⵠΔΔ;
      var g = -e.height * this.ᐃΔⵠⲆ.ⵠΔΔ;
      qp(go, e, -f / 2 + c, -g / 2 + d, f, g);
      go.restore();
    }
  }
  function rv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    this.ⵠᐃⵠⵠⵠ.ΔⵠΔ();
    ⵠⵠ = ᐃᐃ[289][yx.time];
    ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠⵠⵠ.ⵠΔΔ;
    ΔⵠⲆ = -ⵠⵠ.height * this.ⵠᐃⵠⵠⵠ.ⵠΔΔ;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    go.restore();
  }
  function sv() {
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && yg == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) {
        this.ΔΔᐃ.ΔⵠΔ = false;
      }
      var a = Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * dq;
      var b = a * Math.sin(this.ΔΔᐃ.angle - this.angle);
      var c = a * Math.cos(this.ΔΔᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    go.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    go.translate(zx.ⲆⵠΔ.x + this.x + b, zx.ⲆⵠΔ.y + this.y + c);
    go.rotate(this.angle);
    ⵠⵠ = ᐃᐃ[155][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Gx * 3) % (Math.PI * 2);
    }
    go.rotate(this.rotate);
    ⵠⵠ = ᐃᐃ[1206][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    go.restore();
  }
  function tv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == 0) {
        this.ΔΔᐃ.ΔⵠΔ = yg;
      }
      var b = Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * dq;
      var c = Math.sin(this.ΔΔᐃ.angle - this.angle) * b;
      var d = b * Math.cos(this.ΔΔᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      go.rotate(this.angle);
      this.ᐃΔⵠⲆ.ΔⵠΔ();
      if (this.info & 16) {
        var f = ᐃᐃ[849][yx.time];
      } else {
        f = ᐃᐃ[193][yx.time];
      }
      var g = -f.width * this.ᐃΔⵠⲆ.ⵠΔΔ;
      var a = this.ᐃΔⵠⲆ.ⵠΔΔ * -f.height;
      qp(go, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃᐃ[869][yx.time];
      } else {
        f = ᐃᐃ[194][yx.time];
      }
      go.translate(0, f.height / 2);
      qp(go, f, c - f.width / 2, -f.height + d);
    }
    go.restore();
  }
  ;
  function uv() {
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && Lk == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) {
        this.ΔΔᐃ.ΔⵠΔ = false;
      }
      var a = (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * Gx * 600 * dq;
      var b = Math.sin(this.ΔΔᐃ.angle - this.angle) * a;
      var c = a * Math.cos(this.ΔΔᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    go.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    go.translate(zx.ⲆⵠΔ.x + this.x + b, zx.ⲆⵠΔ.y + this.y + c);
    go.rotate(this.angle);
    ⵠⵠ = ᐃᐃ[157][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Gx * 3) % (Math.PI * 2);
    }
    go.rotate(this.rotate);
    ⵠⵠ = ᐃᐃ[1214][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    go.restore();
  }
  function vv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == 0) {
        this.ΔΔᐃ.ΔⵠΔ = false;
      }
      var b = Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * dq;
      var c = b * Math.sin(this.ΔΔᐃ.angle - this.angle);
      var d = Math.cos(this.ΔΔᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      go.rotate(this.angle);
      this.ᐃΔⵠⲆ.ΔⵠΔ();
      if (this.info & 16) {
        var f = ᐃᐃ[970][yx.time];
      } else {
        f = ᐃᐃ[208][yx.time];
      }
      var g = -f.width * this.ᐃΔⵠⲆ.ⵠΔΔ;
      var a = -f.height * this.ᐃΔⵠⲆ.ⵠΔΔ;
      qp(go, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃᐃ[971][yx.time];
      } else {
        f = ᐃᐃ[209][yx.time];
      }
      go.translate(0, f.height / 2);
      qp(go, f, c - f.width / 2, -f.height + d);
    }
    go.restore();
  }
  function wv() {
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && pa == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) {
        this.ΔΔᐃ.ΔⵠΔ = ns;
      }
      var a = dq * (Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600);
      var b = a * Math.sin(this.ΔΔᐃ.angle - this.angle);
      var c = Math.cos(this.ΔΔᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    go.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    go.translate(zx.ⲆⵠΔ.x + this.x + b, zx.ⲆⵠΔ.y + this.y + c);
    go.rotate(this.angle);
    ⵠⵠ = ᐃᐃ[154][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Gx * 3) % (Math.PI * 2);
    }
    go.rotate(this.rotate);
    ⵠⵠ = ᐃᐃ[1202][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    go.restore();
  }
  function xv() {
    if (this.info >= 10) {
      go.save();
      go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
      go.rotate(this.angle);
      if (this.ΔΔᐃ.ΔⵠΔ) {
        if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == 0) {
          this.ΔΔᐃ.ΔⵠΔ = false;
        }
        var b = dq * (Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600);
        var c = b * Math.sin(this.ΔΔᐃ.angle - this.angle);
        var d = Math.cos(this.ΔΔᐃ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      this.ᐃΔⵠⲆ.ΔⵠΔ();
      var e = ᐃᐃ[115][yx.time];
      var f = this.ᐃΔⵠⲆ.ⵠΔΔ * -e.width;
      var g = this.ᐃΔⵠⲆ.ⵠΔΔ * -e.height;
      qp(go, e, -f / 2 + c, -g / 2 + d, f, g);
      go.restore();
    }
  }
  function yv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && Qg == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) {
        this.ΔΔᐃ.ΔⵠΔ = zq;
      }
      var b = (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * Gx * 600 * dq;
      var c = Math.sin(this.ΔΔᐃ.angle - this.angle) * b;
      var d = b * Math.cos(this.ΔΔᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      go.rotate(this.angle);
      this.ᐃΔⵠⲆ.ΔⵠΔ();
      if (this.info & 16) {
        var f = ᐃᐃ[985][yx.time];
      } else {
        f = ᐃᐃ[210][yx.time];
      }
      var g = this.ᐃΔⵠⲆ.ⵠΔΔ * -f.width;
      var a = this.ᐃΔⵠⲆ.ⵠΔΔ * -f.height;
      qp(go, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃᐃ[986][yx.time];
      } else {
        f = ᐃᐃ[211][yx.time];
      }
      go.translate(0, f.height / 2);
      qp(go, f, c - f.width / 2, -f.height + d);
    }
    go.restore();
  }
  function zv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    this.ⵠᐃⵠⵠⵠ.ΔⵠΔ();
    ⵠⵠ = ᐃᐃ[1192][yx.time];
    ᐃΔΔ = this.ⵠᐃⵠⵠⵠ.ⵠΔΔ * -ⵠⵠ.width;
    ΔⵠⲆ = this.ⵠᐃⵠⵠⵠ.ⵠΔΔ * -ⵠⵠ.height;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    go.restore();
  }
  function Av() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    if (ΔⲆᐃ.ⲆⵠⲆⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Gx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Gx, 1);
    }
    this.ⵠᐃⵠᐃ.ΔⵠΔ();
    this.rotate.ΔⵠΔ();
    a = this.info === 0 ? ᐃᐃ[232][yx.time] : ᐃᐃ[1068][yx.time];
    ᐃΔΔ = -a.width * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
    ΔⵠⲆ = -a.height * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
    qp(go, a, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    if (this.action & 2) {
      if (this.ΔΔᐃ.ΔⵠΔ() && this.ΔΔᐃ.ⵠΔⲆ == 0) {
        this.action -= 2;
      }
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      var a = ᐃᐃ[1077];
      qp(go, a, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = 1;
    }
    a = this.info === 0 ? ᐃᐃ[1072][yx.time] : ᐃᐃ[1071][yx.time];
    ᐃΔΔ = -a.width * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
    ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -a.height * this.scale;
    go.save();
    go.translate(dq * -40, dq * 10);
    go.rotate(this.rotate.ⵠΔΔ);
    qp(go, a, dq * -ᐃΔΔ / 4, -ΔⵠⲆ * dq / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    if (this.action & 2) {
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      a = ᐃᐃ[1078];
      qp(go, a, -ᐃΔΔ * dq / 4, -ΔⵠⲆ * dq / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = 1;
    }
    go.restore();
    a = this.info === 0 ? ᐃᐃ[1075][yx.time] : ᐃᐃ[1074][yx.time];
    go.save();
    go.translate(dq * 40, dq * 10);
    go.rotate(-this.rotate.ⵠΔΔ);
    qp(go, a, dq * -ᐃΔΔ / 4, -ΔⵠⲆ * dq / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    if (this.action & 2) {
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      a = ᐃᐃ[1079];
      qp(go, a, -ᐃΔΔ * dq / 4, -ΔⵠⲆ * dq / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = 1;
    }
    go.restore();
    go.restore();
  }
  function Bv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    this.ⵠᐃⵠⵠⵠ.ΔⵠΔ();
    ⵠⵠ = ᐃᐃ[526][yx.time];
    ᐃΔΔ = this.ⵠᐃⵠⵠⵠ.ⵠΔΔ * -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height * this.ⵠᐃⵠⵠⵠ.ⵠΔΔ;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    go.restore();
  }
  function Cv() {
    if (~this.info & 1) {
      this.ΔΔⲆΔⵠ = Math.max(this.ΔΔⲆΔⵠ - Gx, 0);
      this.ⵠⲆⲆⲆᐃⵠΔ += Gx;
      if (this.ⵠⲆⲆⲆᐃⵠΔ > 0.1) {
        this.ⵠⲆⲆⲆᐃⵠΔ = 0;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: 0,
          r: Math.random() * 30 + 30
        };
        this.ᐃΔⵠⲆ.push(a);
      }
    } else {
      this.ΔΔⲆΔⵠ = Math.min(this.ΔΔⲆΔⵠ + Gx, 2.2);
    }
    for (var b = 0; b < this.ᐃΔⵠⲆ.length; b++) {
      a = this.ᐃΔⵠⲆ[b];
      go.save();
      go.translate(zx.ⲆⵠΔ.x + a.x, zx.ⲆⵠΔ.y + a.y);
      a.a = Math.min(1, 0 + Gx / 2);
      var c = 0;
      if (c < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      go.globalAlpha = c * 0.8;
      Cd(go, 0, 0, a.r);
      cd(go, Mr.ⵠⵠᐃᐃΔⵠΔ[yx.time]);
      go.restore();
      if (1 === 0) {
        this.ᐃΔⵠⲆ.splice(b, 1);
        b--;
      }
    }
  }
  function Dv(b) {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    this.ᐃΔⵠⲆ.ΔⵠΔ();
    go.globalAlpha = 0.3;
    var c = ᐃᐃ[282][yx.time];
    var d = -c.width * this.ᐃΔⵠⲆ.ⵠΔΔ;
    var e = -c.height * this.ᐃΔⵠⲆ.ⵠΔΔ;
    qp(go, c, -d / 2, -e / 2, d, e);
    go.globalAlpha = 1;
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == 0) {
        this.ΔΔᐃ.ΔⵠΔ = false;
      }
      var f = dq * (Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600);
      var g = f * Math.sin(this.ΔΔᐃ.angle - this.angle);
      var h = f * Math.cos(this.ΔΔᐃ.angle - this.angle);
    } else {
      g = 0;
      h = 0;
    }
    c = ᐃᐃ[b][yx.time];
    qp(go, c, -c.width / 2 + g, -c.height / 2 + h);
    go.restore();
  }
  function Ev() {
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == 0) {
        this.ΔΔᐃ.ΔⵠΔ = false;
      }
      var a = Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * dq;
      var b = Math.sin(this.ΔΔᐃ.angle - this.angle) * a;
      var c = a * Math.cos(this.ΔΔᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x + b, zx.ⲆⵠΔ.y + this.y + c);
    go.rotate(this.angle);
    ⵠⵠ = ᐃᐃ[135][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    go.restore();
  }
  function Fv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == pa) {
        this.ΔΔᐃ.ΔⵠΔ = Qg;
      }
      var b = Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * dq;
      var c = Math.sin(this.ΔΔᐃ.angle - this.angle) * b;
      var d = b * Math.cos(this.ΔΔᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      go.rotate(this.angle);
      this.ᐃΔⵠⲆ.ΔⵠΔ();
      if (this.info & 16) {
        var f = ᐃᐃ[838][yx.time];
      } else {
        f = ᐃᐃ[191][yx.time];
      }
      var g = -f.width * this.ᐃΔⵠⲆ.ⵠΔΔ;
      var a = this.ᐃΔⵠⲆ.ⵠΔΔ * -f.height;
      qp(go, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃᐃ[839][yx.time];
      } else {
        f = ᐃᐃ[192][yx.time];
      }
      go.translate(0, f.height / 2);
      qp(go, f, c - f.width / 2, -f.height + d);
    }
    go.restore();
  }
  function Gv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    this.ᐃⵠΔΔⲆ.ΔⵠΔ();
    ⵠⵠ = ᐃᐃ[288][yx.time];
    ᐃΔΔ = -ⵠⵠ.width * this.ᐃⵠΔΔⲆ.ⵠΔΔ;
    ΔⵠⲆ = this.ᐃⵠΔΔⲆ.ⵠΔΔ * -ⵠⵠ.height;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    this.ⵠᐃⵠⵠⵠ.ΔⵠΔ();
    ⵠⵠ = ᐃᐃ[289][yx.time];
    ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠⵠⵠ.ⵠΔΔ;
    ΔⵠⲆ = this.ⵠᐃⵠⵠⵠ.ⵠΔΔ * -ⵠⵠ.height;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    go.restore();
  }
  function Hv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && ks == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) {
        this.ΔΔᐃ.ΔⵠΔ = oj;
      }
      var a = dq * ((1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * Gx * 600);
      var b = a * Math.sin(this.ΔΔᐃ.angle - this.angle);
      var c = Math.cos(this.ΔΔᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.info === 0) {
      ⵠⵠ = ᐃᐃ[183][yx.time];
    } else {
      ⵠⵠ = ᐃᐃ[802][yx.time][this.info - 1];
    }
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2 + b, -ⵠⵠ.height / 2 + c);
    go.restore();
  }
  function Iv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ⵠᐃⵠᐃ.ΔⵠΔ();
    this.ΔⲆΔΔᐃᐃⵠ.ΔⵠΔ();
    this.ⲆᐃΔⲆΔΔⲆ.ΔⵠΔ();
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    c = this.info === 0 ? ᐃᐃ[231][yx.time] : ᐃᐃ[1053][yx.time];
    ᐃΔΔ = -c.width * this.ⵠᐃⵠᐃ.ⵠΔΔ;
    ΔⵠⲆ = -c.height * this.ⵠᐃⵠᐃ.ⵠΔΔ;
    qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    if (this.action & 2) {
      if (this.ΔΔᐃ.ΔⵠΔ() && this.ΔΔᐃ.ⵠΔⲆ == Pn) {
        this.action -= 2;
      }
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      var c = ᐃᐃ[1056];
      qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ᐃΔᐃⵠⵠ.ΔⵠΔ() && $n == this.ᐃΔᐃⵠⵠ.ⵠΔⲆ) {
        this.action -= 4;
      }
      go.globalAlpha = 0.6 - this.ᐃΔᐃⵠⵠ.ⵠΔΔ;
      c = ᐃᐃ[1065];
      qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    go.restore();
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle + b);
    go.translate(100, 0);
    go.rotate(a);
    c = this.info === 0 ? ᐃᐃ[1060][yx.time] : ᐃᐃ[1059][yx.time];
    ᐃΔΔ = this.ΔⲆΔΔᐃᐃⵠ.ⵠΔΔ * -c.width;
    ΔⵠⲆ = -c.height * this.ΔⲆΔΔᐃᐃⵠ.ⵠΔΔ;
    qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    if (this.action & 2) {
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      c = ᐃᐃ[1057];
      qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    if (this.action & 4) {
      go.globalAlpha = 0.6 - this.ᐃΔᐃⵠⵠ.ⵠΔΔ;
      c = ᐃᐃ[1066];
      qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    go.restore();
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle + a + b);
    go.translate(100, 0);
    go.rotate(a);
    c = this.info === 0 ? ᐃᐃ[1063][yx.time] : ᐃᐃ[1062][yx.time];
    ᐃΔΔ = -c.width * this.ⲆᐃΔⲆΔΔⲆ.ⵠΔΔ;
    ΔⵠⲆ = this.ⲆᐃΔⲆΔΔⲆ.ⵠΔΔ * -c.height;
    qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    if (this.action & 2) {
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      c = ᐃᐃ[1058];
      qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    if (this.action & 4) {
      go.globalAlpha = 0.6 - this.ᐃΔᐃⵠⵠ.ⵠΔΔ;
      c = ᐃᐃ[1067];
      qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    go.restore();
  }
  function Jv() {
    this.ⵠᐃⵠᐃ.ΔⵠΔ();
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    a = this.info === 0 ? ᐃᐃ[1042][yx.time] : ᐃᐃ[1044][yx.time];
    ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -a.width;
    ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -a.height;
    qp(go, a, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    if (this.action & 2) {
      if (this.ΔΔᐃ.ΔⵠΔ() && ks == this.ΔΔᐃ.ⵠΔⲆ) {
        this.action -= 2;
      }
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      var a = ᐃᐃ[1045];
      qp(go, a, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    go.restore();
  }
  function Kv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    this.ᐃΔⵠⲆ.ΔⵠΔ();
    go.globalAlpha = 0.3;
    var a = ᐃᐃ[282][yx.time];
    var b = this.ᐃΔⵠⲆ.ⵠΔΔ * -a.width;
    var c = this.ᐃΔⵠⲆ.ⵠΔΔ * -a.height;
    qp(go, a, -b / 2, -c / 2, b, c);
    go.globalAlpha = 1;
    go.restore();
  }
  function Lv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    var a = ΔⲆᐃ.ⲆⵠⲆⲆ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + Gx / 2, 1.8) : Math.max(this.scale - Gx, 1);
    this.ⵠᐃⵠᐃ.ΔⵠΔ();
    this.rotate.ΔⵠΔ();
    this.ΔᐃⵠΔ = a < 350 ? Math.max(0, this.ΔᐃⵠΔ - Gx * 2.2) : Math.min(1, this.ΔᐃⵠΔ + Gx * 2.2);
    b = ᐃᐃ[1135][yx.time];
    ᐃΔΔ = this.scale * (-b.width * this.ⵠᐃⵠᐃ.ⵠΔΔ);
    ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -b.height * this.scale;
    go.globalAlpha = 1 - this.ΔᐃⵠΔ;
    qp(go, b, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    b = ᐃᐃ[1119][yx.time];
    ᐃΔΔ = -b.width * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
    ΔⵠⲆ = -b.height * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
    go.globalAlpha = this.ΔᐃⵠΔ;
    qp(go, b, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    if (this.action & 2) {
      if (this.ΔΔᐃ.ΔⵠΔ() && _n == this.ΔΔᐃ.ⵠΔⲆ) {
        this.action -= 2;
      }
      go.globalAlpha = (0.6 - this.ΔΔᐃ.ⵠΔΔ) * (1 - this.ΔᐃⵠΔ);
      var b = ᐃᐃ[1136];
      ᐃΔΔ = this.scale * (-b.width * this.ⵠᐃⵠᐃ.ⵠΔΔ);
      ΔⵠⲆ = -b.height * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
      qp(go, b, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = (0.6 - this.ΔΔᐃ.ⵠΔΔ) * this.ΔᐃⵠΔ;
      b = ᐃᐃ[1128];
      ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -b.width * this.scale;
      ΔⵠⲆ = -b.height * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
      qp(go, b, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = 1;
    }
    b = ᐃᐃ[1122][yx.time];
    ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -b.width * this.scale;
    ΔⵠⲆ = -b.height * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
    go.save();
    go.translate(dq * -40, dq * 80);
    go.rotate(this.rotate.ⵠΔΔ);
    go.globalAlpha = this.ΔᐃⵠΔ;
    qp(go, b, -ᐃΔΔ * dq / 4, dq * -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    if (this.action & 2) {
      go.globalAlpha = this.ΔᐃⵠΔ * (0.6 - this.ΔΔᐃ.ⵠΔΔ);
      b = ᐃᐃ[1129];
      qp(go, b, -ᐃΔΔ * dq / 4, -ΔⵠⲆ * dq / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = 1;
    }
    go.restore();
    b = ᐃᐃ[1125][yx.time];
    go.save();
    go.translate(dq * 40, dq * 80);
    go.rotate(-this.rotate.ⵠΔΔ);
    go.globalAlpha = this.ΔᐃⵠΔ;
    qp(go, b, -ᐃΔΔ * dq / 4, -ΔⵠⲆ * dq / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    if (this.action & 2) {
      go.globalAlpha = this.ΔᐃⵠΔ * (0.6 - this.ΔΔᐃ.ⵠΔΔ);
      b = ᐃᐃ[1130];
      qp(go, b, -ᐃΔΔ * dq / 4, -ΔⵠⲆ * dq / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = 1;
    }
    go.globalAlpha = 1;
    go.restore();
    go.restore();
  }
  function Mv(a, b) {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    if (a === 854) {
      a = 250;
      this.info = 36;
    }
    ⵠⵠ = ᐃᐃ[a][this.info][yx.time];
    ᐃΔΔ = -ⵠⵠ.width / 2;
    ΔⵠⲆ = -ⵠⵠ.height / 2;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    if (this.action & 2) {
      if (this.ΔΔᐃ.ΔⵠΔ() && Lk == this.ΔΔᐃ.ⵠΔⲆ) {
        this.action -= 2;
      }
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      var c = lw(this.info, ⵠⵠ, ΔᐃΔⲆᐃᐃⵠΔᐃ);
      qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    go.restore();
  }
  function Nv() {
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == 0) {
        this.ΔΔᐃ.ΔⵠΔ = false;
      }
      var a = dq * (Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600);
      var b = Math.sin(this.ΔΔᐃ.angle - this.angle) * a;
      var c = a * Math.cos(this.ΔΔᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    this.ⵠⲆΔⵠᐃᐃᐃ = (this.ⵠⲆΔⵠᐃᐃᐃ + Gx * 3) % (Math.PI * 2);
    this.ⵠⲆⲆᐃⲆⲆᐃ = (this.ⵠⲆⲆᐃⲆⲆᐃ - Gx * 3) % (Math.PI * 2);
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x + b, zx.ⲆⵠΔ.y + this.y + c);
    go.save();
    go.rotate(this.angle);
    ⵠⵠ = ᐃᐃ[151][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    go.restore();
    go.save();
    go.rotate(this.ⵠⲆΔⵠᐃᐃᐃ);
    ⵠⵠ = ᐃᐃ[528][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    go.restore();
    go.save();
    go.rotate(this.ⵠⲆⲆᐃⲆⲆᐃ);
    ⵠⵠ = ᐃᐃ[527][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    go.restore();
    go.restore();
  }
  function Ov() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    var a = ΔⲆᐃ.ⲆⵠⲆⲆ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + Gx / 2, 1.8) : Math.max(this.scale - Gx, 1);
    this.ⵠᐃⵠᐃ.ΔⵠΔ();
    this.rotate.ΔⵠΔ();
    this.ΔᐃⵠΔ = a < 350 ? Math.max(0, this.ΔᐃⵠΔ - Gx * 2.2) : Math.min(1, this.ΔᐃⵠΔ + Gx * 2.2);
    b = (this.info & 1) === 0 ? ᐃᐃ[1113][yx.time] : ᐃᐃ[1114][yx.time];
    ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -b.width * this.scale;
    ΔⵠⲆ = this.scale * (this.ⵠᐃⵠᐃ.ⵠΔΔ * -b.height);
    go.globalAlpha = 1 - this.ΔᐃⵠΔ;
    qp(go, b, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    b = this.info & 1 ? ᐃᐃ[1098][yx.time] : ᐃᐃ[235][yx.time];
    ᐃΔΔ = this.scale * (-b.width * this.ⵠᐃⵠᐃ.ⵠΔΔ);
    ΔⵠⲆ = -b.height * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
    go.globalAlpha = this.ΔᐃⵠΔ;
    qp(go, b, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    if (this.action & 2) {
      if (this.ΔΔᐃ.ΔⵠΔ() && this.ΔΔᐃ.ⵠΔⲆ == 0) {
        this.action -= 2;
      }
      go.globalAlpha = (1 - this.ΔᐃⵠΔ) * (0.6 - this.ΔΔᐃ.ⵠΔΔ);
      var b = ᐃᐃ[1115];
      ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -b.width * this.scale;
      ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -b.height * this.scale;
      qp(go, b, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = this.ΔᐃⵠΔ * (0.6 - this.ΔΔᐃ.ⵠΔΔ);
      b = ᐃᐃ[1107];
      ᐃΔΔ = -b.width * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
      ΔⵠⲆ = this.scale * (-b.height * this.ⵠᐃⵠᐃ.ⵠΔΔ);
      qp(go, b, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = 1;
    }
    b = this.info & 1 ? ᐃᐃ[1101][yx.time] : ᐃᐃ[1102][yx.time];
    ᐃΔΔ = -b.width * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
    ΔⵠⲆ = this.scale * (-b.height * this.ⵠᐃⵠᐃ.ⵠΔΔ);
    go.save();
    go.translate(dq * -20, dq * 0);
    go.rotate(this.rotate.ⵠΔΔ);
    go.globalAlpha = this.ΔᐃⵠΔ;
    qp(go, b, -ᐃΔΔ * dq / 4, dq * -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    if (this.action & 2) {
      go.globalAlpha = this.ΔᐃⵠΔ * (0.6 - this.ΔΔᐃ.ⵠΔΔ);
      b = ᐃᐃ[1108];
      qp(go, b, -ᐃΔΔ * dq / 4, -ΔⵠⲆ * dq / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = 1;
    }
    go.restore();
    b = this.info & 1 ? ᐃᐃ[1104][yx.time] : ᐃᐃ[1105][yx.time];
    go.save();
    go.translate(dq * 20, dq * 0);
    go.rotate(-this.rotate.ⵠΔΔ);
    go.globalAlpha = this.ΔᐃⵠΔ;
    qp(go, b, -ᐃΔΔ * dq / 4, -ΔⵠⲆ * dq / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    if (this.action & 2) {
      go.globalAlpha = (0.6 - this.ΔΔᐃ.ⵠΔΔ) * this.ΔᐃⵠΔ;
      b = ᐃᐃ[1109];
      qp(go, b, -ᐃΔΔ * dq / 4, -ΔⵠⲆ * dq / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = 1;
    }
    go.globalAlpha = 1;
    go.restore();
    go.restore();
  }
  function Pv() {
    if (this.info !== 10) {
      go.save();
      go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
      go.rotate(this.angle);
      if (this.ΔΔᐃ.ΔⵠΔ) {
        if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == oj) {
          this.ΔΔᐃ.ΔⵠΔ = zq;
        }
        var b = (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * Gx * 600 * dq;
        var c = b * Math.sin(this.ΔΔᐃ.angle - this.angle);
        var d = Math.cos(this.ΔΔᐃ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      if (this.info & 16) {
        var e = ᐃᐃ[623][yx.time];
      } else {
        e = ᐃᐃ[287][yx.time];
      }
      qp(go, e, -e.width / 2 + c, -e.width / 2 + d);
      go.restore();
      for (var f = this.info & 15, g = 0; g < f; g++) {
        this.ΔΔⵠΔ[g].ᐃⵠΔᐃ(294);
      }
    }
  }
  function Qv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    if (ΔⲆᐃ.ⲆⵠⲆⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Gx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Gx, 1);
    }
    this.ⵠᐃⵠᐃ.ΔⵠΔ();
    this.rotate.ΔⵠΔ();
    a = ᐃᐃ[449][yx.time];
    ᐃΔΔ = -a.width * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
    ΔⵠⲆ = this.scale * (this.ⵠᐃⵠᐃ.ⵠΔΔ * -a.height);
    qp(go, a, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    if (this.action & 2) {
      if (this.ΔΔᐃ.ΔⵠΔ() && this.ΔΔᐃ.ⵠΔⲆ == ns) {
        this.action -= 2;
      }
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      var a = ᐃᐃ[463];
      qp(go, a, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    a = ᐃᐃ[451][yx.time];
    ᐃΔΔ = this.scale * (-a.width * this.ⵠᐃⵠᐃ.ⵠΔΔ);
    ΔⵠⲆ = this.scale * (-a.height * this.ⵠᐃⵠᐃ.ⵠΔΔ);
    go.save();
    go.translate(dq * -30, dq * 70);
    go.rotate(this.rotate.ⵠΔΔ);
    qp(go, a, dq * -10, dq * -40, ᐃΔΔ, ΔⵠⲆ);
    if (this.action & 2) {
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      a = ᐃᐃ[466];
      qp(go, a, dq * -10, dq * -40, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    go.restore();
    a = ᐃᐃ[452][yx.time];
    go.save();
    go.translate(dq * 30, dq * 70);
    go.rotate(-this.rotate.ⵠΔΔ);
    qp(go, a, dq * 10 - ᐃΔΔ, dq * -40, ᐃΔΔ, ΔⵠⲆ);
    if (this.action & 2) {
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      a = ᐃᐃ[467];
      qp(go, a, dq * 10 - ᐃΔΔ, dq * -40, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    go.restore();
    go.restore();
  }
  function Rv() {
    if (this.ΔΔᐃ.ΔⵠΔ) {
      var a = (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * Gx * 600 * dq;
      var b = a * Math.sin(this.ΔΔᐃ.angle - this.angle);
      var c = Math.cos(this.ΔΔᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Gx * 0.5) % (Math.PI * 2);
    }
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x + b, zx.ⲆⵠΔ.y + this.y + c);
    go.save();
    go.rotate(this.rotate);
    ⵠⵠ = ᐃᐃ[641][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    go.restore();
    go.save();
    go.rotate(this.ⲆⲆⲆᐃΔⵠΔⲆⲆ);
    ⵠⵠ = ᐃᐃ[642][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    go.restore();
    go.restore();
  }
  function Sv() {
    this.ⵠᐃⵠᐃ.ΔⵠΔ();
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    a = this.info === 0 ? ᐃᐃ[248][yx.time] : ᐃᐃ[1222][yx.time];
    ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -a.width;
    ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -a.height;
    qp(go, a, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    if (this.action & 2) {
      if (this.ΔΔᐃ.ΔⵠΔ() && this.ΔΔᐃ.ⵠΔⲆ == 0) {
        this.action -= 2;
      }
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      var a = ᐃᐃ[1223];
      qp(go, a, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    go.restore();
  }
  function Tv(a, b) {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    this.ⵠᐃⵠᐃ.ΔⵠΔ();
    c = ᐃᐃ[a][yx.time];
    ᐃΔΔ = -c.width * this.ⵠᐃⵠᐃ.ⵠΔΔ;
    ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -c.height;
    qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    if (this.action & 2) {
      if (this.ΔΔᐃ.ΔⵠΔ() && x == this.ΔΔᐃ.ⵠΔⲆ) {
        this.action -= 2;
      }
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      var c = ᐃᐃ[b];
      qp(go, c, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      go.globalAlpha = 1;
    }
    go.restore();
  }
  function Uv(f, e, i, j, k, n, a, o, p) {
    if (Nn === o) {
      o = 0;
    }
    for (var h = f; h <= e; h++) {
      for (var q = i; q <= j; q++) {
        var r = vx.ⵠᐃΔᐃ[h][q];
        if (r !== undefined && r[n] !== es) {
          var t = r[n];
          var w = ᐃᐃ[k][yx.time][t.ΔᐃᐃⲆΔⵠᐃ];
          qp(go, w, zx.ⲆⵠΔ.x + t.x - w.width / (ⵠΔⵠΔΔ * 4), zx.ⲆⵠΔ.y + t.y - w.height / (ⵠΔⵠΔΔ * 4), w.width / (ⵠΔⵠΔΔ * 2), w.height / (ⵠΔⵠΔΔ * 2));
          if (xx.ΔⵠⵠΔΔ) {
            var x = 2147483648;
            var y = ((h * 1000 + q) * 1103515245 + 12345) % x / x;
            if (y < 0.2) {
              y = Math.floor(y * 5 * ᐃᐃ[1025][yx.time][t.ΔᐃᐃⲆΔⵠᐃ].length);
              w = ᐃᐃ[1025][yx.time][t.ΔᐃᐃⲆΔⵠᐃ][y];
              qp(go, w, zx.ⲆⵠΔ.x + t.x - w.width / (ⵠΔⵠΔΔ * 4), zx.ⲆⵠΔ.y + t.y - w.height / (ⵠΔⵠΔΔ * 4), w.width / (ⵠΔⵠΔΔ * 2), w.height / (ⵠΔⵠΔΔ * 2));
            } else if (t.ⵠⲆⵠᐃᐃⵠⲆ !== 0) {
              w = ᐃᐃ[1026][yx.time];
              var z = (gv + h % 2 * 30) % 60;
              go.globalAlpha = z < 30 ? z / 30 : 1 - (z - 30) / 30;
              qp(go, w, zx.ⲆⵠΔ.x + t.x - w.width / (ⵠΔⵠΔΔ * 4), zx.ⲆⵠΔ.y + t.y - w.height / (ⵠΔⵠΔΔ * 4) - 30 + z, w.width / (ⵠΔⵠΔΔ * 2), w.height / (ⵠΔⵠΔΔ * 2));
              go.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function Vv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && Lk == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) {
        this.ΔΔᐃ.ΔⵠΔ = false;
      }
      var b = Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * dq;
      var c = b * Math.sin(this.ΔΔᐃ.angle - this.angle);
      var d = b * Math.cos(this.ΔΔᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      go.rotate(this.angle);
      this.ᐃΔⵠⲆ.ΔⵠΔ();
      if (this.info & 16) {
        var f = ᐃᐃ[668][yx.time];
      } else {
        f = ᐃᐃ[132][yx.time];
      }
      var g = this.ᐃΔⵠⲆ.ⵠΔΔ * -f.width;
      var a = -f.height * this.ᐃΔⵠⲆ.ⵠΔΔ;
      qp(go, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      this.ⲆᐃⵠᐃⵠⵠⲆ.ΔⵠΔ();
      if (this.info & 16) {
        f = ᐃᐃ[638][yx.time];
      } else {
        f = ᐃᐃ[134][yx.time];
      }
      go.translate(0, f.height / 2);
      go.rotate(this.ⲆᐃⵠᐃⵠⵠⲆ.ⵠΔΔ);
      qp(go, f, c - f.width / 2, -f.height + d);
    }
    go.restore();
  }
  function Wv() {
    var a = undefined;
    var b = undefined;
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    this.ⵠᐃⵠᐃ.ΔⵠΔ();
    this.rotate.ΔⵠΔ();
    if (this.ΔΔⲆΔⵠ >= 0.1 && this.ΔΔⲆΔⵠ <= 1.1) {
      if ((c = Math.max(0, Math.min(1, this.ΔΔⲆΔⵠ - 0.1))) < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      a = ᐃᐃ[1150][yx.time];
      ᐃΔΔ = -a.width * this.ⵠᐃⵠᐃ.ⵠΔΔ;
      ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -a.height;
      go.globalAlpha = c;
      qp(go, a, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      b = ᐃᐃ[1151];
    }
    if (this.ΔΔⲆΔⵠ >= 0.9) {
      var c;
      if ((c = Math.max(0, Math.min(1, this.ΔΔⲆΔⵠ - 0.9))) < 0.2) {
        c *= 5;
      } else {
        c = 1;
      }
      a = ᐃᐃ[1152][yx.time];
      ᐃΔΔ = -a.width * this.ⵠᐃⵠᐃ.ⵠΔΔ;
      ΔⵠⲆ = -a.height * this.ⵠᐃⵠᐃ.ⵠΔΔ;
      go.globalAlpha = c;
      qp(go, a, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      b = ᐃᐃ[1153];
    }
    if (this.action & 2 && b !== undefined) {
      if (this.ΔΔᐃ.ΔⵠΔ() && Lk == this.ΔΔᐃ.ⵠΔⲆ) {
        this.action -= 2;
      }
      go.globalAlpha = c * (0.6 - this.ΔΔᐃ.ⵠΔΔ);
      ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -b.width;
      ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -b.height;
      qp(go, b, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    }
    go.globalAlpha = 1;
    go.restore();
  }
  function Xv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    this.ΔⵠᐃᐃΔⵠⵠ = Math.min(1, this.ΔⵠᐃᐃΔⵠⵠ + Gx * 2);
    go.globalAlpha = this.ΔⵠᐃᐃΔⵠⵠ * Math.min(1, Math.max(0, ΔⲆᐃ.ⲆⵠⲆⲆ(this, this.r) / 80));
    this.ⵠᐃⵠᐃ.ΔⵠΔ();
    ⵠⵠ = ᐃᐃ[247][yx.time][this.ΔⲆⲆⲆⲆ];
    if (this.ΔⲆⲆⲆⲆ < 2) {
      ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ;
      ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height;
    } else if (this.ⲆΔⲆⲆⵠⵠⵠ === 0) {
      ᐃΔΔ = -ⵠⵠ.width;
      ΔⵠⲆ = -ⵠⵠ.height;
    } else {
      ᐃΔΔ = -ⵠⵠ.width * 1.35;
      ΔⵠⲆ = -ⵠⵠ.height * 1.35;
    }
    qp(go, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    go.globalAlpha = 1;
    go.restore();
  }
  function Yv() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && ks == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) {
        this.ΔΔᐃ.ΔⵠΔ = ns;
      }
      var b = (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * Gx * 600 * dq;
      var c = Math.sin(this.ΔΔᐃ.angle - this.angle) * b;
      var d = b * Math.cos(this.ΔΔᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      e = ᐃᐃ[716][yx.time];
      qp(go, e, -e.width / 2 + c, -e.height / 2 + d);
      this.up.ΔⵠΔ();
      var e = ᐃᐃ[720][yx.time];
      var f = this.up.ⵠΔΔ * -e.width;
      var g = -e.height * this.up.ⵠΔΔ;
      qp(go, e, -f / 2 + dq * 1, -g / 2 + dq * 3, f, g);
    } else {
      e = ᐃᐃ[144][yx.time];
      qp(go, e, -e.width / 2 + c, -e.height / 2 + d);
    }
    go.restore();
  }
  function Zv(a, b, c) {
    if (a >= 0) {
      ⵠⵠ = ᐃᐃ[a][yx.time];
      switch (a) {
        case 71:
        case 72:
        case 73:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - (0 + b) * dq, -ⵠⵠ.height / 4 + dq * (c + 35));
          break;
        case 74:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - (1 + b) * dq, -ⵠⵠ.height / 4 + dq * (c + 45));
          break;
        case 75:
        case 76:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - (1 + b) * dq, -ⵠⵠ.height / 4 + (c + 40) * dq);
      }
    }
  }
  function $v() {
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && ks == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) {
        this.ΔΔᐃ.ΔⵠΔ = Qi;
      }
      var a = Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * dq;
      var b = a * Math.sin(this.ΔΔᐃ.angle - this.angle);
      var c = Math.cos(this.ΔΔᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    go.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    go.translate(zx.ⲆⵠΔ.x + this.x + b, zx.ⲆⵠΔ.y + this.y + c);
    go.rotate(this.angle);
    ⵠⵠ = ᐃᐃ[156][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Gx * 3) % (Math.PI * 2);
    }
    go.rotate(this.rotate);
    ⵠⵠ = ᐃᐃ[1210][yx.time];
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    go.restore();
  }
  function _v() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == 0) {
        this.ΔΔᐃ.ΔⵠΔ = hr;
      }
      var a = (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * Gx * 600 * dq;
      var b = a * Math.sin(this.ΔΔᐃ.angle - this.angle);
      var c = a * Math.cos(this.ΔΔᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    if (this.action == 2) {
      ⵠⵠ = ᐃᐃ[407][yx.time];
    } else {
      ⵠⵠ = ᐃᐃ[119][yx.time];
    }
    qp(go, ⵠⵠ, -ⵠⵠ.width / 2 + b, -ⵠⵠ.height / 2 + c);
    go.restore();
  }
  function aw() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == Lk) {
        this.ΔΔᐃ.ΔⵠΔ = false;
      }
      var b = Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * dq;
      var c = Math.sin(this.ΔΔᐃ.angle - this.angle) * b;
      var d = Math.cos(this.ΔΔᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      go.rotate(this.angle);
      this.ᐃΔⵠⲆ.ΔⵠΔ();
      if (this.info & 16) {
        var f = ᐃᐃ[953][yx.time];
      } else {
        f = ᐃᐃ[204][yx.time];
      }
      var g = -f.width * this.ᐃΔⵠⲆ.ⵠΔΔ;
      var a = this.ᐃΔⵠⲆ.ⵠΔΔ * -f.height;
      qp(go, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃᐃ[954][yx.time];
      } else {
        f = ᐃᐃ[205][yx.time];
      }
      go.translate(0, f.height / 2);
      qp(go, f, c - f.width / 2, -f.height + d);
    }
    go.restore();
  }
  function bw() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    if (this.ΔΔᐃ.ΔⵠΔ) {
      if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && jj == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) {
        this.ΔΔᐃ.ΔⵠΔ = $n;
      }
      var b = Gx * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * dq;
      var c = b * Math.sin(this.ΔΔᐃ.angle - this.angle);
      var d = b * Math.cos(this.ΔΔᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      go.rotate(this.angle);
      this.ᐃΔⵠⲆ.ΔⵠΔ();
      if (this.info & 16) {
        var f = ᐃᐃ[812][yx.time];
      } else {
        f = ᐃᐃ[188][yx.time];
      }
      var g = this.ᐃΔⵠⲆ.ⵠΔΔ * -f.width;
      var a = this.ᐃΔⵠⲆ.ⵠΔΔ * -f.height;
      qp(go, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃᐃ[813][yx.time];
      } else {
        f = ᐃᐃ[189][yx.time];
      }
      go.translate(0, f.height / 2);
      qp(go, f, c - f.width / 2, -f.height + d);
    }
    go.restore();
  }
  function cw(a, b, c) {
    if (a >= 0) {
      ⵠⵠ = ᐃᐃ[a][yx.time];
      switch (a) {
        case 1:
        case 3:
        case 4:
        case 8:
        case 31:
        case 32:
          Dw(a, ⵠⵠ, -ⵠⵠ.width / 2 - dq * (45 + b), -ⵠⵠ.height / 2 + (c + 22) * dq);
          break;
        case 94:
        case 95:
        case 96:
        case 97:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - dq * (52 + b), -ⵠⵠ.height / 4 + (c + 20) * dq);
          break;
        case 98:
        case 99:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - (57 + b) * dq, -ⵠⵠ.height / 4 + (c + 20) * dq);
          break;
        case 57:
        case 0:
        case 5:
        case 6:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - dq * (47 + b), -ⵠⵠ.height / 4 + (c + 45) * dq);
          break;
        case 30:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - dq * (52 + b), -ⵠⵠ.height / 4 + dq * (c + 45));
          break;
        case 19:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - (47 + b) * dq, -ⵠⵠ.height / 4 + (c + 44) * dq);
          break;
        case 9:
          Dw(a, ⵠⵠ, -ⵠⵠ.width / 2 - dq * (47 + b), -ⵠⵠ.height / 2 + dq * (c + 44));
          break;
        case 62:
          Dw(a, ⵠⵠ, -ⵠⵠ.width / 2 - (40 + b) * dq, -ⵠⵠ.height / 2 + dq * (c + 65));
          break;
        case 12:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - (37 + b) * dq, -ⵠⵠ.height / 4 + (c + 85) * dq);
          break;
        case 34:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - (37 + b) * dq, -ⵠⵠ.height / 4 + (c + 85) * dq);
          break;
        case 54:
        case 53:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - (26 + b) * dq, -ⵠⵠ.height / 4 + (c + 77) * dq);
          break;
        case 17:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - dq * (37 + b), -ⵠⵠ.height / 4 + (c + 85) * dq);
          break;
        case 63:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - dq * (47 + b), -ⵠⵠ.height / 4 + dq * (c + 44));
          break;
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - dq * (37 + b), -ⵠⵠ.height / 4 + (c + 30) * dq);
          break;
        case 56:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - dq * (47 + b), -ⵠⵠ.height / 4 + (c + 35) * dq);
          break;
        case 92:
        case 93:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - (47 + b) * dq, -ⵠⵠ.height / 4 + dq * (c + 40));
          break;
        case 89:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - (47 + b) * dq, -ⵠⵠ.height / 4 + (c + 34) * dq);
          break;
        case 13:
        case 14:
        case 15:
        case 33:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - dq * (37 + b), -ⵠⵠ.height / 4 + dq * (c + 90));
          break;
        case 18:
          bf(a, ⵠⵠ, -ⵠⵠ.width / 4 - dq * (40 + b), -ⵠⵠ.height / 4 + dq * (c + 85));
          break;
        case 16:
          Dw(a, ⵠⵠ, -ⵠⵠ.width / 2 - (39 + b) * dq, -ⵠⵠ.height / 2 + (c + 90) * dq);
          break;
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 45:
          Dw(a, ⵠⵠ, -ⵠⵠ.width / 2 - (46 + b) * dq, -ⵠⵠ.height / 2 + (c + 35) * dq);
          break;
        case 49:
          Dw(a, ⵠⵠ, -ⵠⵠ.width / 2 - (47 + b) * dq, -ⵠⵠ.height / 2 + dq * (c + 54));
          break;
        case 46:
        case 50:
        case 51:
        case 52:
          Dw(a, ⵠⵠ, -ⵠⵠ.width / 2 - (46 + b) * dq, -ⵠⵠ.height / 2 + (c + 35) * dq);
          break;
        case 55:
          Dw(a, ⵠⵠ, -ⵠⵠ.width / 2 - dq * (47 + b), -ⵠⵠ.height / 2 + (c + 20) * dq);
      }
    }
  }
  function dw(a) {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    this.ⵠᐃⵠᐃ.ΔⵠΔ();
    ⵠⵠ = ᐃᐃ[a][yx.time];
    ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ;
    ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height;
    qp(go, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
    go.restore();
  }
  function ew() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ⵠⲆΔⵠⵠ.length == 0 || this.ⵠⲆΔⵠⵠ[this.ⵠⲆΔⵠⵠ.length - 1] <= Mr.ᐃⲆⲆᐃⲆΔⲆ)) {
      this.ⵠⲆΔⵠⵠ.push(Mr.ⲆⵠⵠᐃⲆⵠⲆ);
    }
    for (var a = 0; a < this.ⵠⲆΔⵠⵠ.length; a++) {
      this.ⵠⲆΔⵠⵠ[a] = Math.max(0, this.ⵠⲆΔⵠⵠ[a] - Gx * Mr.ⵠᐃⲆᐃᐃΔΔ);
      go.globalAlpha = this.ⵠⲆΔⵠⵠ[a] / 1.3;
      var b = (1 - this.ⵠⲆΔⵠⵠ[a]) * 40;
      var c = (1 - this.ⵠⲆΔⵠⵠ[a]) * 35 + 10;
      Cd(go, dq * -68 + Math.sin(-this.angle - Math.PI / 2) * b, dq * -20 + Math.cos(-this.angle - Math.PI / 2) * b, c);
      cd(go, "#333333");
    }
    go.globalAlpha = 1;
    if (this.ⵠⲆΔⵠⵠ.length > 0 && this.ⵠⲆΔⵠⵠ[0] === 0) {
      this.ⵠⲆΔⵠⵠ.shift();
    }
    go.restore();
  }
  function fw(a, b) {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    go.rotate(this.angle);
    this.ⵠᐃⵠᐃ.ΔⵠΔ();
    c = ᐃᐃ[a][yx.time];
    ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -c.width;
    ΔⵠⲆ = -c.height * this.ⵠᐃⵠᐃ.ⵠΔΔ;
    qp(go, c, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
    if (this.action & 2) {
      if (this.ΔΔᐃ.ΔⵠΔ() && this.ΔΔᐃ.ⵠΔⲆ == 0) {
        this.action -= 2;
      }
      go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
      var c = ᐃᐃ[b];
      qp(go, c, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
      go.globalAlpha = 1;
    }
    go.restore();
  }
  function gw(a) {
    if (a > 0) {
      var b = ᐃᐃ[a][yx.time];
      switch (a) {
        case 58:
          Dw(a, b, -b.width / 2 + dq * 2, -b.height / 2 - dq * 5);
          break;
        case 10:
          Dw(a, b, -b.width / 2, -b.height / 2 - dq * 18);
          break;
        case 11:
          Dw(a, b, -b.width / 2, -b.height / 2 - dq * 10);
          break;
        case 23:
          Dw(a, b, -b.width / 2, -b.height / 2 - dq * 19);
          break;
        case 24:
          bf(a, b, -b.width / 4, -b.height / 4 - dq * 20);
          break;
        case 25:
          Dw(a, b, -b.width / 2 - dq * 1, -b.height / 2 - dq * 23);
          break;
        case 26:
          Dw(a, b, -b.width / 2, -b.height / 2 - dq * 5);
          break;
        case 27:
          Dw(a, b, -b.width / 2, -b.height / 2 - dq * 2);
          break;
        case 43:
          Dw(a, b, -b.width / 2 + dq * 1.5, -b.height / 2 - dq * 1);
          break;
        case 44:
        case 20:
        case 21:
        case 22:
        case 80:
        case 81:
        case 82:
        case 60:
        case 90:
        case 88:
        case 87:
          bf(a, b, -b.width / 4, -b.height / 4 + dq * 2);
          break;
        case 41:
        case 42:
          Dw(a, b, -b.width / 2 - dq * 5, -b.height / 2 - dq * 2);
          break;
        case 40:
          Dw(a, b, -b.width / 2, -b.height / 2 - dq * 2);
          break;
        case 85:
          Dw(a, b, -b.width / 2, -b.height / 2 - dq * 2);
          break;
        case 48:
          Dw(a, b, -b.width / 2, -b.height / 2 - dq * 2);
          break;
        case 47:
          Dw(a, b, -b.width / 2 + dq * 2, -b.height / 2);
          break;
        case 59:
          Dw(a, b, -b.width / 2, -b.height / 2 - dq * 5);
          break;
        case 77:
        case 78:
        case 79:
          Dw(a, b, -b.width / 2 - dq * 1, -b.height / 2);
          break;
        case 83:
          Dw(a, b, -b.width / 2, -b.height / 2 + dq * 2);
          break;
        case 84:
        case 86:
          Dw(a, b, -b.width / 2, -b.height / 2 + dq * 8);
          break;
        case 61:
          Dw(a, b, -b.width / 2, -b.height / 2 - dq * 4);
      }
    }
  }
  function hw() {
    if (!this.ⲆⲆⵠⲆⲆ && this.ᐃΔⵠΔⵠ !== 0) {
      if (this.x != this.r.x || this.y != this.r.y) {
        var a = (ΔⲆᐃ.ᐃΔᐃⲆⲆΔⵠ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
        this.ⲆⵠⵠⵠⲆ = ΔⲆᐃ.ⲆⲆᐃᐃⵠⵠⲆ(a, this.ⲆⵠⵠⵠⲆ);
        this.ⲆⵠⵠⵠⲆ = ΔⲆᐃ.ΔΔⲆⲆΔ(this.ⲆⵠⵠⵠⲆ, a, 0.018);
      }
      go.save();
      go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
      go.rotate(this.ⲆⵠⵠⵠⲆ);
      if (this.ᐃΔⵠΔⵠ === 223) {
        if (this.ⵠᐃᐃⲆⲆ > 50 || this.ᐃΔⵠᐃⵠ > 0) {
          if (this.ⵠᐃᐃⲆⲆ > 50) {
            this.ᐃΔⵠᐃⵠ = Math.min(1, this.ᐃΔⵠᐃⵠ + Gx);
          } else {
            this.ᐃΔⵠᐃⵠ = Math.max(0, this.ᐃΔⵠᐃⵠ - Gx);
          }
          go.globalAlpha = this.ᐃΔⵠᐃⵠ;
          var b = ᐃᐃ[225][yx.time];
          bf(225, b, -b.width / 4, -b.height / 4);
          go.globalAlpha = 1;
        }
        b = ᐃᐃ[223][yx.time];
        bf(223, b, -b.width / 4, -b.height / 4);
      } else if (this.ᐃΔⵠΔⵠ === 229) {
        this.ⵠⵠⵠⵠⵠ = ΔⲆᐃ.ΔΔⲆⲆΔ(this.ⵠⵠⵠⵠⵠ, this.ⵠᐃᐃⲆⲆ, 0.018);
        this.ⲆⵠⲆⵠᐃⲆⲆ.ΔⵠΔ();
        if (this.ⵠᐃᐃⲆⲆ > 85) {
          this.ᐃΔⵠᐃⵠ = Math.min(1, this.ᐃΔⵠᐃⵠ + Gx / 4);
        } else {
          this.ᐃΔⵠᐃⵠ = Math.max(0.1, this.ᐃΔⵠᐃⵠ - Gx);
        }
        b = ᐃᐃ[1100][yx.time];
        bf(1100, b, -b.width / 4, -b.height / 4);
        b = ᐃᐃ[1103][yx.time];
        ᐃΔΔ = -b.width;
        ΔⵠⲆ = -b.height;
        go.save();
        go.translate(dq * -20, dq * -20);
        go.rotate(this.ⲆⵠⲆⵠᐃⲆⲆ.ⵠΔΔ * this.ᐃΔⵠᐃⵠ);
        qp(go, b, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
        go.restore();
        b = ᐃᐃ[1106][yx.time];
        go.save();
        go.translate(dq * 20, dq * -20);
        go.rotate(-this.ⲆⵠⲆⵠᐃⲆⲆ.ⵠΔΔ * this.ᐃΔⵠᐃⵠ);
        qp(go, b, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
        go.restore();
      } else if (this.ᐃΔⵠΔⵠ === 228) {
        this.ⵠⵠⵠⵠⵠ = ΔⲆᐃ.ΔΔⲆⲆΔ(this.ⵠⵠⵠⵠⵠ, this.ⵠᐃᐃⲆⲆ, 0.018);
        this.ⲆⵠⲆⵠᐃⲆⲆ.ΔⵠΔ();
        if (this.ⵠᐃᐃⲆⲆ > 85) {
          this.ᐃΔⵠᐃⵠ = Math.min(1, this.ᐃΔⵠᐃⵠ + Gx / 4);
        } else {
          this.ᐃΔⵠᐃⵠ = Math.max(0.1, this.ᐃΔⵠᐃⵠ - Gx);
        }
        b = ᐃᐃ[1085][yx.time];
        bf(1085, b, -b.width / 4, -b.height / 4);
        b = ᐃᐃ[1088][yx.time];
        ᐃΔΔ = -b.width;
        ΔⵠⲆ = -b.height;
        go.save();
        go.translate(dq * -40, dq * -45);
        go.rotate(this.ⲆⵠⲆⵠᐃⲆⲆ.ⵠΔΔ * this.ᐃΔⵠᐃⵠ);
        qp(go, b, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
        go.restore();
        b = ᐃᐃ[1091][yx.time];
        go.save();
        go.translate(dq * 40, dq * -45);
        go.rotate(this.ᐃΔⵠᐃⵠ * -this.ⲆⵠⲆⵠᐃⲆⲆ.ⵠΔΔ);
        qp(go, b, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
        go.restore();
      } else if (this.ᐃΔⵠΔⵠ === 227) {
        this.ⵠⵠⵠⵠⵠ = ΔⲆᐃ.ΔΔⲆⲆΔ(this.ⵠⵠⵠⵠⵠ, this.ⵠᐃᐃⲆⲆ, 0.018);
        this.ⲆⵠⲆⵠᐃⲆⲆ.ΔⵠΔ();
        if (this.ⵠᐃᐃⲆⲆ > 85) {
          this.ᐃΔⵠᐃⵠ = Math.min(1, this.ᐃΔⵠᐃⵠ + Gx / 4);
        } else {
          this.ᐃΔⵠᐃⵠ = Math.max(0.1, this.ᐃΔⵠᐃⵠ - Gx);
        }
        b = ᐃᐃ[1070][yx.time];
        bf(1070, b, -b.width / 4, -b.height / 4);
        b = ᐃᐃ[1073][yx.time];
        ᐃΔΔ = -b.width;
        ΔⵠⲆ = -b.height;
        go.save();
        go.translate(dq * -40, dq * -45);
        go.rotate(this.ⲆⵠⲆⵠᐃⲆⲆ.ⵠΔΔ * this.ᐃΔⵠᐃⵠ);
        qp(go, b, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
        go.restore();
        b = ᐃᐃ[1076][yx.time];
        go.save();
        go.translate(dq * 40, dq * -45);
        go.rotate(this.ᐃΔⵠᐃⵠ * -this.ⲆⵠⲆⵠᐃⲆⲆ.ⵠΔΔ);
        qp(go, b, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
        go.restore();
      } else if (this.ᐃΔⵠΔⵠ === 91) {
        this.ⵠⵠⵠⵠⵠ = ΔⲆᐃ.ΔΔⲆⲆΔ(this.ⵠⵠⵠⵠⵠ, this.ⵠᐃᐃⲆⲆ, 0.018);
        b = ᐃᐃ[91][yx.time];
        bf(91, b, -b.width / 4, -b.height / 4);
      } else if (this.ᐃΔⵠΔⵠ === 230) {
        this.ⵠⵠⵠⵠⵠ = ΔⲆᐃ.ΔΔⲆⲆΔ(this.ⵠⵠⵠⵠⵠ, this.ⵠᐃᐃⲆⲆ, 0.018);
        b = ᐃᐃ[236][yx.time];
        bf(236, b, -b.width / 4, -b.height / 4);
      } else if (this.ᐃΔⵠΔⵠ === 224) {
        b = ᐃᐃ[224][yx.time];
        bf(224, b, -b.width / 4, -b.height / 4);
      } else if (this.ᐃΔⵠΔⵠ === 239) {
        b = ᐃᐃ[1221][yx.time];
        if (this.ⵠᐃᐃⲆⲆ > 85) {
          this.ᐃΔⵠᐃⵠ = Math.min(1, this.ᐃΔⵠᐃⵠ + Gx / 4);
        } else {
          this.ᐃΔⵠᐃⵠ = Math.max(0, this.ᐃΔⵠᐃⵠ - Gx);
        }
        this.ΔΔⵠᐃⵠ += Gx * 60;
        if (this.ΔΔⵠᐃⵠ > 60) {
          this.ΔΔⵠᐃⵠ -= 60;
        }
        var c = (-6 + (this.ΔΔⵠᐃⵠ < 30 ? this.ΔΔⵠᐃⵠ / 30 : 1 - (this.ΔΔⵠᐃⵠ - 30) / 30) * 12) * this.ᐃΔⵠᐃⵠ;
        bf(1221, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ᐃΔⵠΔⵠ === 225) {
        b = ᐃᐃ[1043][yx.time];
        if (this.ⵠᐃᐃⲆⲆ > 85) {
          this.ᐃΔⵠᐃⵠ = Math.min(1, this.ᐃΔⵠᐃⵠ + Gx / 4);
        } else {
          this.ᐃΔⵠᐃⵠ = Math.max(0, this.ᐃΔⵠᐃⵠ - Gx);
        }
        this.ΔΔⵠᐃⵠ += Gx * 60;
        if (this.ΔΔⵠᐃⵠ > 60) {
          this.ΔΔⵠᐃⵠ -= 60;
        }
        c = this.ᐃΔⵠᐃⵠ * (-6 + (this.ΔΔⵠᐃⵠ < 30 ? this.ΔΔⵠᐃⵠ / 30 : 1 - (this.ΔΔⵠᐃⵠ - 30) / 30) * 12);
        bf(1043, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ᐃΔⵠΔⵠ === 226) {
        var d = Math.PI / 2;
        var e = Math.PI / 4;
        b = ᐃᐃ[1055][yx.time];
        if (this.ⵠᐃᐃⲆⲆ > 85) {
          this.ᐃΔⵠᐃⵠ = Math.min(1, this.ᐃΔⵠᐃⵠ + Gx / 4);
        } else {
          this.ᐃΔⵠᐃⵠ = Math.max(0, this.ᐃΔⵠᐃⵠ - Gx);
        }
        this.ΔΔⵠᐃⵠ += Gx * 60;
        if (this.ΔΔⵠᐃⵠ > 60) {
          this.ΔΔⵠᐃⵠ -= 60;
        }
        c = ((this.ΔΔⵠᐃⵠ < 30 ? this.ΔΔⵠᐃⵠ / 30 : 1 - (this.ΔΔⵠᐃⵠ - 30) / 30) * 12 - 6) * this.ᐃΔⵠᐃⵠ;
        bf(1055, b, -b.width / 4 + c, -b.height / 4);
        go.restore();
        go.save();
        go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
        go.rotate(Math.PI + this.ⲆⵠⵠⵠⲆ + e);
        go.translate(120, c);
        go.rotate(d);
        b = ᐃᐃ[1060][yx.time];
        ᐃΔΔ = -b.width;
        ΔⵠⲆ = -b.height;
        qp(go, b, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
        go.restore();
        go.save();
        go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
        go.rotate(Math.PI + this.ⲆⵠⵠⵠⲆ + d + e);
        go.translate(120, c);
        go.rotate(d);
        b = ᐃᐃ[1063][yx.time];
        ᐃΔΔ = -b.width;
        ΔⵠⲆ = -b.height;
        qp(go, b, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
      }
      go.restore();
    }
  }
  function iw() {
    if (ct !== this.message) {
      var a = zx.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.length > 0 ? -95 : 0;
      qp(go, this.message, 0, xp - this.message.height + a);
    }
  }
  function jw() {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
    if (this.text.length > 0) {
      for (var a = 0; a < this.text.length && a < 2; a++) {
        if (!this.label[a]) {
          this.label[a] = Ad(dq, this.text[a]);
          this.ⵠⲆⲆΔⲆⲆΔ[a] = 0;
          this.ΔⵠᐃΔⲆⲆΔ[a] = 0;
        }
        if (a === 1) {
          this.ΔⵠᐃΔⲆⲆΔ[0] = ΔⲆᐃ.ΔⲆΔⲆⲆ(this.ᐃⲆⲆΔⵠΔᐃ) * 30;
        }
      }
      this.ⵠⲆⲆΔⲆⲆΔ[0] += Gx;
      if (this.text.length > 1) {
        this.ᐃⲆⲆΔⵠΔᐃ = Math.min(this.ᐃⲆⲆΔⵠΔᐃ + Gx, 1);
        if (this.ⵠⲆⲆΔⲆⲆΔ[0] > 1 && this.ᐃⲆⲆΔⵠΔᐃ > 0.5) {
          this.ⵠⲆⲆΔⲆⲆΔ[1] += Gx;
        }
      }
      for (a = 0; a < this.text.length && a < 2; a++) {
        var b = this.ⵠⲆⲆΔⲆⲆΔ[a];
        if (b > 0) {
          go.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
          qp(go, this.label[a], -this.label[a].width / 2, -this.ΔⵠᐃΔⲆⲆΔ[a] + -this.label[a].height / 2 - dq * 110);
        }
      }
      if (this.ⵠⲆⲆΔⲆⲆΔ[0] > 4) {
        this.ⵠⲆⲆΔⲆⲆΔ.shift();
        this.text.shift();
        this.ΔⵠᐃΔⲆⲆΔ.shift();
        this.label.shift();
        this.ᐃⲆⲆΔⵠΔᐃ = 0;
      }
    }
    go.restore();
  }
  function kw() {
    var c = 0;
    switch (this.right) {
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
        c = 1;
    }
    if (this.ⲆⲆⵠⲆⲆ) {
      for (var f = 0; this.bubbles.length > f; f++) {
        var j = this.bubbles[f];
        if (j.ⲆⲆᐃᐃΔ > 0.5) {
          var k = 1 - (j.ⲆⲆᐃᐃΔ - 0.5) * 2;
        } else {
          k = j.ⲆⲆᐃᐃΔ * 2;
        }
        go.globalAlpha = k;
        var m = ᐃᐃ[540][yx.time][j.id];
        qp(go, m, zx.ⲆⵠΔ.x + j.x - m.width / 2, zx.ⲆⵠΔ.y + j.y - m.height / 2);
        go.globalAlpha = 1;
      }
    } else {
      go.save();
      go.translate(zx.ⲆⵠΔ.x + this.x, zx.ⲆⵠΔ.y + this.y);
      yx.ⵠᐃⵠᐃⲆⲆᐃⲆᐃ(this);
      if (this.action & 16) {
        (function (a) {
          if (a.right >= 0) {
            switch (a.right) {
              case 49:
                go.save();
                var b = a.attack.ⵠΔΔ * -3 / Math.PI;
                if (a.attack.ⵠΔⲆ) {
                  var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ⵠΔΔ) / 3;
                } else {
                  c = a.attack.ⵠΔΔ;
                }
                go.rotate(a.angle - Math.PI / 2 + c);
                go.globalAlpha = b / 1.2;
                Cd(go, dq * -40, dq * 90, dq * 5);
                cd(go, "#0B6A84");
                go.globalAlpha = b / 1.2;
                Cd(go, dq * -52, dq * 100, dq * 8);
                cd(go, "#0B6A84");
                go.globalAlpha = b / 1.2;
                Cd(go, dq * -30, dq * 95, dq * 4);
                cd(go, "#0B6A84");
                go.globalAlpha = 1;
                go.restore();
                break;
              case 46:
              case 50:
              case 51:
              case 52:
                if (a.ⲆΔⲆⲆⵠⵠⵠ === 1) {
                  break;
                }
                if (a.ΔΔⵠⵠⵠ > 0) {
                  var d = Mr.ᐃⵠᐃⵠΔⲆⲆ[yx.time];
                } else {
                  d = a.ᐃᐃⵠⲆⵠⲆΔ > 0 || a.ᐃⵠΔᐃⲆ > 0 ? Mr.ᐃⲆᐃⲆⲆΔΔ[yx.time] : Mr.ⵠΔⲆᐃᐃΔΔ[yx.time];
                }
                b = a.attack.ⵠΔΔ * -3 / Math.PI;
                if ((c = a.attack.ⵠΔⲆ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0)) === 0) {
                  a.ΔᐃᐃⲆⵠᐃᐃ = a.angle;
                }
                go.save();
                go.rotate(a.ΔᐃᐃⲆⵠᐃᐃ - Math.PI / 2);
                go.globalAlpha = b;
                var e = dq * 25 + c * 25;
                Cd(go, e, dq * 80, dq * 15);
                cd(go, d);
                Cd(go, -e, dq * 80, dq * 15);
                cd(go, d);
                go.globalAlpha = 1;
                go.restore();
            }
          }
        })(this);
      }
      go.save();
      go.rotate(this.angle - Math.PI / 2);
      if (!(this.action & 16)) {
        if (this.action & 64 || this.ᐃΔⵠΔⵠ !== 0) {
          this.ᐃΔᐃᐃΔΔⵠ.ΔⵠΔ();
        } else if (this.action & 32) {
          this.ⵠᐃᐃΔΔⲆⲆ.ΔⵠΔ();
        }
      }
      var p;
      var q = this.ᐃΔᐃᐃΔΔⵠ.ⵠΔΔ;
      var v = this.ⵠᐃᐃΔΔⲆⲆ.ⵠΔΔ;
      if (this.ⲆΔᐃΔᐃ === 85) {
        m = ᐃᐃ[793][yx.time];
        p = 793;
      } else if (this.ⲆΔᐃΔᐃ === 20) {
        m = ᐃᐃ[920][yx.time];
        p = 920;
      } else if (this.ⲆΔᐃΔᐃ === 21) {
        m = ᐃᐃ[924][yx.time];
        p = 924;
      } else if (this.ⲆΔᐃΔᐃ === 22) {
        m = ᐃᐃ[928][yx.time];
        p = 928;
      } else if (this.ΔⲆⲆⲆⵠᐃⲆ) {
        m = ᐃᐃ[822][yx.time];
        p = 822;
      } else {
        m = ᐃᐃ[7][this.ⵠⲆᐃᐃ][yx.time];
        p = 7;
      }
      ᐃΔⵠᐃ = ᐃᐃ[286][yx.time];
      var w = m;
      var h = p;
      if (this.action & 16) {
        if (this.attack.ΔⵠΔ() && Ah == this.attack.ⵠΔⲆ) {
          this.ⲆΔⲆᐃΔ = !this.ⲆΔⲆᐃΔ;
          this.action -= 16;
          if (zx.ᐃⲆᐃⲆ == this.ᐃⲆᐃⲆ) {
            zx.control.ΔΔⵠᐃ = 0;
          }
        }
        if (this.right >= 0) {
          this.ⲆΔⲆᐃΔ = true;
        }
        var g = this.ⲆΔⲆᐃΔ ? this.attack.ⵠΔΔ : -this.attack.ⵠΔΔ / 3;
        var x = this.ⲆΔⲆᐃΔ ? this.attack.ⵠΔΔ / 3 : -this.attack.ⵠΔΔ;
        if (this.ΔⲆⲆⲆⵠᐃⲆ) {
          go.save();
          go.rotate(g);
          Dw(p, m, -m.width / 2 - (66 + q) * dq, -m.height / 2 + dq * (5 + v));
          go.restore();
          go.save();
          go.rotate(x);
          Dw(p, m, -m.width / 2 + dq * (66 + q), -m.height / 2 + (5 + v) * dq);
          go.restore();
        } else if (c === 0) {
          if (this.right === 64) {
            g = -ΔⲆᐃ.ΔΔⲆⵠΔᐃⵠ(-g);
          }
          go.save();
          go.rotate(g);
          Dw(286, ᐃΔⵠᐃ, -ᐃΔⵠᐃ.width / 2 - dq * (49 + q), -ᐃΔⵠᐃ.height / 2 + dq * (15 + v));
          if (this.right === 28) {
            var u = ᐃᐃ[this.right][this.ⲆⵠᐃⲆᐃ][yx.time];
            tf(this.right, this.ⲆⵠᐃⲆᐃ, u, -u.width / 4 - (62 + q) * dq, -u.height / 4 + (v + 18) * dq);
          } else {
            cw(this.right, q, v);
          }
          if (p >= 920) {
            bf(p, m, -m.width / 4 - dq * (49 + q), -m.height / 4 + (11 + v) * dq);
          } else if (p !== 793) {
            tf(p, this.ⵠⲆᐃᐃ, m, -m.width / 4 - (49 + q) * dq, -m.height / 4 + dq * (11 + v));
          } else {
            Dw(p, m, -m.width / 2 - dq * (49 + q), -m.height / 2 + dq * (11 + v));
          }
          go.restore();
          go.save();
          go.rotate(x);
          Dw(286, ᐃΔⵠᐃ, -ᐃΔⵠᐃ.width / 2 + dq * (49 + q), -ᐃΔⵠᐃ.height / 2 + dq * (15 + v));
          if (p >= 920) {
            bf(p, m, -m.width / 4 + dq * (49 + q), -m.height / 4 + dq * (11 + v));
          } else if (p !== 793) {
            tf(p, this.ⵠⲆᐃᐃ, m, -m.width / 4 + dq * (49 + q), -m.height / 4 + (11 + v) * dq);
          } else {
            Dw(p, m, -m.width / 2 + dq * (49 + q), -m.height / 2 + (11 + v) * dq);
          }
          go.restore();
        }
      } else if (this.ΔⲆⲆⲆⵠᐃⲆ) {
        Dw(p, m, -m.width / 2 - (66 + q) * dq, -m.height / 2 + dq * (5 + v));
        Dw(p, m, -m.width / 2 + dq * (66 + q), -m.height / 2 + (5 + v) * dq);
      } else if (c === 0) {
        Dw(286, ᐃΔⵠᐃ, -ᐃΔⵠᐃ.width / 2 - dq * (49 + q), -ᐃΔⵠᐃ.height / 2 + dq * (15 + v));
        if (this.right === 28) {
          u = ᐃᐃ[this.right][this.ⲆⵠᐃⲆᐃ][yx.time];
          tf(this.right, this.ⲆⵠᐃⲆᐃ, u, -u.width / 4 - (62 + q) * dq, -u.height / 4 + dq * (v + 18));
        } else {
          cw(this.right, q, v);
        }
        if (p >= 920) {
          bf(p, m, -m.width / 4 - dq * (49 + q), -m.height / 4 + dq * (11 + v));
        } else if (p !== 793) {
          tf(p, this.ⵠⲆᐃᐃ, m, -m.width / 4 - (49 + q) * dq, -m.height / 4 + (11 + v) * dq);
        } else {
          Dw(p, m, -m.width / 2 - (49 + q) * dq, -m.height / 2 + dq * (11 + v));
        }
        Dw(286, ᐃΔⵠᐃ, -ᐃΔⵠᐃ.width / 2 + dq * (49 + q), -ᐃΔⵠᐃ.height / 2 + dq * (15 + v));
        if (p >= 920) {
          bf(p, m, -m.width / 4 + dq * (49 + q), -m.height / 4 + dq * (11 + v));
        } else if (p !== 793) {
          tf(p, this.ⵠⲆᐃᐃ, m, -m.width / 4 + (49 + q) * dq, -m.height / 4 + (11 + v) * dq);
        } else {
          Dw(p, m, -m.width / 2 + dq * (49 + q), -m.height / 2 + (11 + v) * dq);
        }
      }
      if (this.ᐃΔⲆΔΔ && this.ⲆΔᐃΔᐃ < 1) {
        m = ᐃᐃ[29][this.ᐃΔⲆⲆΔΔΔ][yx.time];
        tf(29, this.ᐃΔⲆⲆΔΔΔ, m, -m.width / 4, -m.height / 4 - dq * 39);
      }
      if (this.ΔⲆⲆⲆⵠᐃⲆ) {
        m = ᐃᐃ[820][yx.time];
        Dw(820, m, -m.width / 2, -m.height / 2);
        this.ᐃⲆⵠⲆⲆᐃⵠ.ΔⵠΔ();
        m = ᐃᐃ[821][yx.time];
        Dw(821, m, -m.width / 2, -m.height / 2 + this.ᐃⲆⵠⲆⲆᐃⵠ.ⵠΔΔ);
      } else {
        m = ᐃᐃ[255][this.ⵠⲆᐃᐃ][yx.time];
        if (this.ⲆΔᐃΔᐃ !== 85 && (tf(255, this.ⵠⲆᐃᐃ, m, -m.width / 4, -m.height / 4), this.ⵠΔⵠⲆⲆ > 0)) {
          m = ᐃᐃ[796][this.ⵠΔⵠⲆⲆ][yx.time];
          tf(796, this.ⵠΔⵠⲆⲆ, m, -m.width / 4, -m.height / 4);
        }
      }
      if (this.action & 128) {
        if (this.ᐃΔᐃⵠⵠ.ΔⵠΔ() && this.ᐃΔᐃⵠⵠ.ⵠΔⲆ == 0) {
          this.action -= 128;
        }
        go.globalAlpha = 0.6 - this.ᐃΔᐃⵠⵠ.ⵠΔΔ;
        if (this.ΔⲆⲆⲆⵠᐃⲆ) {
          m = ᐃᐃ[825];
          qp(go, m, -m.width / 2, -m.height / 2);
        } else {
          m = lw(this.ⵠⲆᐃᐃ, ᐃᐃ[255][this.ⵠⲆᐃᐃ][0], ⲆⵠᐃᐃⲆΔⲆⵠᐃ);
          qp(go, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        go.globalAlpha = 1;
      }
      if (this.action & 256) {
        if (this.ⵠⲆΔⵠⲆⲆⵠ.ΔⵠΔ() && this.ⵠⲆΔⵠⲆⲆⵠ.ⵠΔⲆ == 0) {
          this.action -= 256;
        }
        go.globalAlpha = 0.6 - this.ⵠⲆΔⵠⲆⲆⵠ.ⵠΔΔ;
        m = ᐃᐃ[266];
        qp(go, m, -m.width / 2, -m.height / 2);
        go.globalAlpha = 1;
      }
      if (this.action & 2) {
        if (this.ΔΔᐃ.ΔⵠΔ() && this.ΔΔᐃ.ⵠΔⲆ == 0) {
          this.action -= 2;
        }
        go.globalAlpha = 0.6 - this.ΔΔᐃ.ⵠΔΔ;
        if (this.ΔⲆⲆⲆⵠᐃⲆ) {
          m = ᐃᐃ[823];
          qp(go, m, -m.width / 2, -m.height / 2);
        } else {
          m = lw(this.ⵠⲆᐃᐃ, ᐃᐃ[255][this.ⵠⲆᐃᐃ][0], ⵠⲆⲆⲆᐃᐃᐃᐃⵠ);
          qp(go, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        go.globalAlpha = 1;
      }
      if (this.action & 4) {
        if (this.freeze.ΔⵠΔ() && Vn == this.freeze.ⵠΔⲆ) {
          this.action -= 4;
        }
        go.globalAlpha = 0.6 - this.freeze.ⵠΔΔ;
        m = lw(this.ⵠⲆᐃᐃ, ᐃᐃ[255][this.ⵠⲆᐃᐃ][0], ⵠⲆΔΔᐃΔⲆᐃⲆ);
        qp(go, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        go.globalAlpha = 1;
      }
      if (this.action & 8) {
        if (this.ᐃⲆᐃΔΔⲆⲆ.ΔⵠΔ() && oj == this.ᐃⲆᐃΔΔⲆⲆ.ⵠΔⲆ) {
          this.action -= 8;
        }
        go.globalAlpha = 0.6 - this.ᐃⲆᐃΔΔⲆⲆ.ⵠΔΔ;
        if (this.ΔⲆⲆⲆⵠᐃⲆ) {
          m = ᐃᐃ[824];
          qp(go, m, -m.width / 2, -m.height / 2);
        } else {
          m = lw(this.ⵠⲆᐃᐃ, ᐃᐃ[255][this.ⵠⲆᐃᐃ][0], ᐃᐃⲆΔΔΔⵠⲆᐃ);
          qp(go, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        go.globalAlpha = 1;
      }
      gw(this.ⲆΔᐃΔᐃ);
      if (c === 1) {
        if (this.action & 16) {
          q += this.attack.ⵠΔΔ * 15;
        }
        Dw(286, ᐃΔⵠᐃ, -ᐃΔⵠᐃ.width / 2 - dq * 26, -ᐃΔⵠᐃ.height / 2 + dq * (31 + v + q));
        if (h >= 920) {
          bf(h, w, -w.width / 4 - dq * 26, -w.height / 4 + dq * (27 + v + q));
        } else if (h !== 793) {
          tf(h, this.ⵠⲆᐃᐃ, w, -w.width / 4 - dq * 26, -w.height / 4 + (27 + v + q) * dq);
        } else {
          Dw(h, w, -w.width / 2 - dq * 26, -w.height / 2 + (27 + v + q) * dq);
        }
        Dw(286, ᐃΔⵠᐃ, -ᐃΔⵠᐃ.width / 2 + dq * 26, -ᐃΔⵠᐃ.height / 2 + dq * (31 + v + q));
        if (h >= 920) {
          bf(h, w, -w.width / 4 + dq * 26, -w.height / 4 + (27 + v + q) * dq);
        } else if (h !== 793) {
          tf(h, this.ⵠⲆᐃᐃ, w, -w.width / 4 + dq * 26, -w.height / 4 + (27 + v + q) * dq);
        } else {
          Dw(h, w, -w.width / 2 + dq * 26, -w.height / 2 + dq * (27 + v + q));
        }
        Zv(this.right, 0, v + q);
      }
      go.restore();
      if (this.ⲆΔᐃΔᐃ !== 83 && this.ⲆΔᐃΔᐃ !== 85) {
        if (this.ΔΔⵠⵠⵠ > 0) {
          if (!this.ᐃΔΔⵠ.ⵠᐃⵠⲆⵠⲆΔ) {
            this.ᐃΔΔⵠ.ⵠᐃⵠⲆⵠⲆΔ = um(dq, this.ᐃΔΔⵠ.ⵠⲆⵠΔⵠ, 20, "#187484", "#000", 2, null, null, dq * 300);
          }
          m = this.ᐃΔΔⵠ.ⵠᐃⵠⲆⵠⲆΔ;
        } else {
          if (!this.ᐃΔΔⵠ.label) {
            this.ᐃΔΔⵠ.label = um(dq, this.ᐃΔΔⵠ.ⵠⲆⵠΔⵠ, 20, "#FFF", "#000", 2, null, null, dq * 300);
          }
          m = this.ᐃΔΔⵠ.label;
        }
        if (Mr.ᐃⵠΔ == yx.ⵠΔⵠ) {
          go.globalAlpha = 0.5;
        }
        q = Math.floor(-m.width / 2);
        v = Math.floor(-m.height / 2 - dq * 70);
        qp(go, m, q, v);
        if (this.ᐃΔΔⵠ.level > 0) {
          var y = q + m.width + 5;
          m = ᐃᐃ[885];
          if (ᐃⵠⵠⵠⲆᐃΔ[this.ᐃΔΔⵠ.level] === undefined) {
            ᐃⵠⵠⵠⲆᐃΔ[this.ᐃΔΔⵠ.level] = um(dq, "[" + this.ᐃΔΔⵠ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, dq * 50);
          }
          qp(go, ᐃⵠⵠⵠⲆᐃΔ[this.ᐃΔΔⵠ.level], y, v);
        }
        go.globalAlpha = 1;
      } else {
        v = Math.floor(dq * -70);
        q = Math.floor(ᐃᐃ[558].width / 1.5);
      }
      if (zx.ΔⲆᐃⵠᐃⵠⵠ(this.ⲆⲆΔᐃ)) {
        if (zx.ΔⲆᐃⲆⲆ[0] == this.ⲆⲆΔᐃ) {
          m = ᐃᐃ[559];
        } else {
          m = ᐃᐃ[558];
        }
        qp(go, m, q - m.width - 5, v - 6);
      }
      go.restore();
    }
  }
  function lw(b, c, d) {
    if (c.ⲆΔΔΔⵠⲆⵠ() !== 1) {
      return c;
    }
    var e = ⲆΔⵠⵠᐃΔᐃ[d][b];
    if (e === undefined) {
      var f = (e = document.createElement("canvas")).getContext("2d");
      var g = c.width;
      var a = c.height;
      e.width = g;
      e.height = a;
      f.drawImage(c, 0, 0);
      f.globalCompositeOperation = "source-in";
      f.fillStyle = ⵠᐃᐃΔΔⵠᐃⵠⵠ[d];
      f.fillRect(0, 0, g, a);
      ⲆΔⵠⵠᐃΔᐃ[d][b] = e;
    }
    return e;
  }
  function mw(a, b) {
    if (this.text) {
      if (this.timeout.ⵠΔⲆ) {
        go.globalAlpha = 1 - this.timeout.ⵠΔΔ;
      } else {
        go.globalAlpha = 1;
      }
      this.label ||= um(dq, this.text, 40, a, null, null, null, null, null, b, 10);
      qp(go, this.label, (uo - this.label.width) / 2, dq * 50);
      go.globalAlpha = 1;
      if (this.timeout.ΔⵠΔ() && this.timeout.ⵠΔⲆ == 0) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  function nw() {
    if (this.enabled && this.ⲆⲆΔⵠⵠ >= 0) {
      var a = new Date().getTime() - this.ⲆⲆΔⵠⵠ;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = 1 - (b - 0.5) * 2;
      } else {
        b *= 2;
      }
      if ((a = Math.floor(a / 1000)) < 60) {
        a = 60 - a;
        this.label ||= um(dq, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        if (this.now != a || !this.ΔᐃΔᐃⵠⲆᐃ) {
          this.now = a;
          this.ΔᐃΔᐃⵠⲆᐃ = um(dq, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        qp(go, this.label, (uo - this.label.width) / 2, dq * 100);
        go.globalAlpha = b;
        qp(go, this.ΔᐃΔᐃⵠⲆᐃ, (uo - this.label.width) / 2 - this.ΔᐃΔᐃⵠⲆᐃ.width + dq * 15, dq * 100);
        go.globalAlpha = 1;
      }
    }
  }
  ⵠⲆⲆⲆᐃᐃᐃᐃⵠ = 0;
  ⲆⵠᐃᐃⲆΔⲆⵠᐃ = 1;
  ⵠⲆΔΔᐃΔⲆᐃⲆ = 2;
  ᐃᐃⲆΔΔΔⵠⲆᐃ = 3;
  ΔᐃΔⲆᐃᐃⵠΔᐃ = 4;
  ⲆΔⵠⵠᐃΔᐃ = [[], [], [], [], []];
  ⵠᐃᐃΔΔⵠᐃⵠⵠ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var ow = 0;
  function pw(j, e, i, k, n, o, a, q = 0) {
    for (var r = a; q <= r; r--) {
      for (var s = j; e >= s; s++) {
        for (var t = i; k >= t; t++) {
          var w = vx.ⵠᐃΔᐃ[s][t];
          if (w && w[o]) {
            var x = w[o][r];
            if (hg !== x) {
              for (var y = 0; x.length > y; y++) {
                var z = x[y];
                var A = ᐃᐃ[n][yx.time][r];
                var B = (ow + (s + t) * 3) % 60;
                var D = B < 30 ? B / 30 : 1 - (B - 30) / 30;
                var E = -A.width * (1 + D * 0.9 / 30);
                var F = (1 + D * 0.9 / 30) * -A.height;
                D = (B = (ow + (s + t) * 7) % 60) < 30 ? B / 30 : 1 - (B - 30) / 30;
                var G = go.globalAlpha;
                go.globalAlpha = (0.9 + D * 0.1) * G;
                qp(go, A, zx.ⲆⵠΔ.x + z.x - E / 2, zx.ⲆⵠΔ.y + z.y - F / 2, E, F);
                go.globalAlpha = G;
              }
            }
          }
        }
      }
    }
  }
  function qw(j, e, i, k, n, o, a, q) {
    if (cl === q) {
      q = 0;
    }
    yx.ⵠᐃⵠᐃ[n].ΔⵠΔ();
    for (var r = a; q <= r; r--) {
      for (var t = j; e >= t; t++) {
        for (var w = i; w <= k; w++) {
          var x = vx.ⵠᐃΔᐃ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (y !== rk) {
              for (var z = 0; z < y.length; z++) {
                var A = y[z];
                if (A.ΔⵠΔ) {
                  if (A.ΔΔᐃ.ΔⵠΔ() && Wl == A.ΔΔᐃ.ⵠΔⲆ) {
                    A.ΔⵠΔ = false;
                  }
                  var B = (1 - A.ΔΔᐃ.ⵠΔΔ) * Gx * 600 * dq;
                  var D = B * Math.sin(A.angle);
                  var E = Math.cos(A.angle) * B;
                } else {
                  D = 0;
                  E = 0;
                }
                var F = ᐃᐃ[n][yx.time][r];
                var G = yx.ⵠᐃⵠᐃ[n].ⵠΔΔ * -F.width;
                var H = yx.ⵠᐃⵠᐃ[n].ⵠΔΔ * -F.height;
                qp(go, F, zx.ⲆⵠΔ.x + A.x - G / 2 + D, zx.ⲆⵠΔ.y + A.y - H / 2 + E, G, H);
              }
            }
          }
        }
      }
    }
  }
  var rw = [];
  for (Ob = 0; Ob < 100; Ob++) {
    var sw = 1;
    if (Math.random() < 0.25) {
      sw = 0;
    }
    rw.push(sw);
  }
  function tw(j, e, i, k, n, o, a, q = 0, r) {
    for (var h = a; h >= q; h--) {
      for (var s = j; e >= s; s++) {
        for (var t = i; t <= k; t++) {
          var w = vx.ⵠᐃΔᐃ[s][t];
          if (ij !== w && w[o] !== mi) {
            var x = w[o][h];
            if (x !== mq) {
              for (var A = 0; x.length > A; A++) {
                var B = x[A];
                if (B.ΔⵠΔ) {
                  if (B.ΔΔᐃ.ΔⵠΔ() && B.ΔΔᐃ.ⵠΔⲆ == Ah) {
                    B.ΔⵠΔ = false;
                  }
                  var D = Gx * (1 - B.ΔΔᐃ.ⵠΔΔ) * 600 * dq;
                  var E = Math.sin(B.angle) * D;
                  var F = D * Math.cos(B.angle);
                } else {
                  E = 0;
                  F = 0;
                }
                for (var G = 0; ⲆΔΔⵠᐃᐃⲆ[h].ᐃⲆᐃⵠ > G; G++) {
                  if (yx.ΔᐃⵠΔΔ[G].ⵠⵠᐃⲆΔ !== Hx) {
                    yx.ΔᐃⵠΔΔ[G].ΔⵠΔ();
                    yx.ΔᐃⵠΔΔ[G].ⵠⵠᐃⲆΔ = Hx;
                  }
                  var H = ᐃᐃ[941][yx.time][ⲆΔΔⵠᐃᐃⲆ[h].ΔⵠΔΔ[G].ᐃᐃⲆ];
                  var I = yx.ΔᐃⵠΔΔ[G].ⵠΔΔ * -H.width;
                  var J = -H.height * yx.ΔᐃⵠΔΔ[G].ⵠΔΔ;
                  qp(go, H, zx.ⲆⵠΔ.x + "Haltbarkeit: 2000" - I / 4 + E + ⲆΔΔⵠᐃᐃⲆ[h].ΔⵠΔΔ[G].x, zx.ⲆⵠΔ.y + B.y - J / 4 + F + ⲆΔΔⵠᐃᐃⲆ[h].ΔⵠΔΔ[G].y, I / 2, J / 2);
                }
              }
            }
          }
        }
      }
    }
  }
  function uw(f, e, i, j, k, n, a, o, q) {
    if (o === rk) {
      o = 0;
    }
    for (var h = a; o <= h; h--) {
      for (var r = f; e >= r; r++) {
        for (var t = i; j >= t; t++) {
          if (q <= 0 || rw[(r + t * q) % rw.length] !== 1) {
            var w = vx.ⵠᐃΔᐃ[r][t];
            if (w !== undefined && w[n] !== undefined) {
              var x = w[n][h];
              if (x !== undefined) {
                for (var y = 0; x.length > y; y++) {
                  var z = x[y];
                  if (z.ΔⵠΔ) {
                    if (z.ΔΔᐃ.ΔⵠΔ() && z.ΔΔᐃ.ⵠΔⲆ == 0) {
                      z.ΔⵠΔ = Ah;
                    }
                    var A = dq * ((1 - z.ΔΔᐃ.ⵠΔΔ) * Gx * 600);
                    var B = Math.sin(z.angle) * A;
                    var D = Math.cos(z.angle) * A;
                  } else {
                    B = 0;
                    D = 0;
                  }
                  var E = ᐃᐃ[k][yx.time][h];
                  qp(go, E, zx.ⲆⵠΔ.x + "Haltbarkeit: 2000" - E.width / (ⵠΔⵠΔΔ * 2) + B, zx.ⲆⵠΔ.y + "#184747" - E.height / (ⵠΔⵠΔΔ * 2) + D, E.width / ⵠΔⵠΔΔ, E.height / ⵠΔⵠΔΔ);
                }
              }
            }
          }
        }
      }
    }
  }
  function vw(c, e, f, i, j, k, a, m, n) {
    if (m === nl) {
      m = 0;
    }
    for (var h = c; h <= e; h++) {
      for (var o = f; i >= o; o++) {
        var p = vx.ⵠᐃΔᐃ[h][o];
        if (p !== undefined && p[k] !== undefined) {
          var q = p[k];
          if (tk !== q) {
            if (q.scale === 1) {
              var r = ᐃᐃ[j][yx.time][q.ΔⵠⲆᐃᐃ];
              go.save();
              go.translate(zx.ⲆⵠΔ.x + q.x, zx.ⲆⵠΔ.y + q.y);
              go.rotate(q.angle);
              qp(go, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
              go.restore();
            } else if (q.scale === 3) {
              for (var t = 0; t < q.ᐃⵠⲆ.length; t++) {
                go.save();
                go.translate(zx.ⲆⵠΔ.x + q.x, zx.ⲆⵠΔ.y + q.y);
                go.rotate(q.ᐃⵠⲆ[t].angle);
                r = ᐃᐃ[j][yx.time][q.ᐃⵠⲆ[t].ΔⵠⲆᐃᐃ];
                qp(go, r, -r.width / 3 + q.ᐃⵠⲆ[t].x, -r.height / 3 + q.ᐃⵠⲆ[t].y, r.width / 1.5, r.height / 1.5);
                go.restore();
              }
            } else {
              r = ᐃᐃ[j][yx.time][q.ΔⵠⲆᐃᐃ];
              go.save();
              go.translate(zx.ⲆⵠΔ.x + q.x, zx.ⲆⵠΔ.y + q.y);
              go.rotate(q.angle);
              qp(go, r, -r.width / 2, -r.height / 2, r.width, r.height);
              go.restore();
            }
          }
        }
      }
    }
  }
  ⵠΔⵠΔΔ = 1;
  ⲆΔΔⵠᐃᐃⲆ = [{
    ᐃⲆᐃⵠ: 10,
    ΔⵠΔΔ: [{
      x: -128,
      y: -20,
      ᐃᐃⲆ: 0
    }, {
      x: -86,
      y: -4,
      ᐃᐃⲆ: 1
    }, {
      x: -60,
      y: -74,
      ᐃᐃⲆ: 2
    }, {
      ᐃᐃⲆ: 0,
      y: -144,
      x: -22
    }, {
      y: 86,
      x: -58,
      ᐃᐃⲆ: 0
    }, {
      ᐃᐃⲆ: 0,
      y: -30,
      x: 3
    }, {
      y: -115,
      ᐃᐃⲆ: 1,
      x: 65
    }, {
      ᐃᐃⲆ: 0,
      y: -50,
      x: 118
    }, {
      y: 15,
      x: 73,
      ᐃᐃⲆ: 1
    }, {
      x: 67,
      ᐃᐃⲆ: 0,
      y: 79
    }]
  }, {
    ᐃⲆᐃⵠ: 5,
    ΔⵠΔΔ: [{
      ᐃᐃⲆ: 0,
      y: -26,
      x: -45
    }, {
      ᐃᐃⲆ: 2,
      y: 20,
      x: -45
    }, {
      x: 10,
      y: -60,
      ᐃᐃⲆ: 1
    }, {
      x: 52,
      ᐃᐃⲆ: 1,
      y: -17
    }, {
      ᐃᐃⲆ: 0,
      x: 14,
      y: 45
    }]
  }, {
    ᐃⲆᐃⵠ: 3,
    ΔⵠΔΔ: [{
      ᐃᐃⲆ: 2,
      y: 3,
      x: -30
    }, {
      ᐃᐃⲆ: 2,
      x: 7,
      y: -38
    }, {
      ᐃᐃⲆ: 2,
      y: 5,
      x: 37
    }]
  }, {
    ΔⵠΔΔ: [{
      x: -74,
      ᐃᐃⲆ: 2,
      y: -87
    }, {
      y: -10,
      ᐃᐃⲆ: 1,
      x: -11
    }, {
      x: -99,
      ᐃᐃⲆ: 1,
      y: 17
    }, {
      x: -66,
      y: 84,
      ᐃᐃⲆ: 0
    }, {
      x: -55,
      ᐃᐃⲆ: 1,
      y: 123
    }, {
      y: 81,
      ᐃᐃⲆ: 2,
      x: 10
    }, {
      x: 52,
      ᐃᐃⲆ: 0,
      y: 50
    }, {
      y: 9,
      x: 138,
      ᐃᐃⲆ: 1
    }, {
      y: -28,
      x: 104,
      ᐃᐃⲆ: 0
    }, {
      x: 67,
      y: -56,
      ᐃᐃⲆ: 2
    }, {
      y: -112,
      ᐃᐃⲆ: 0,
      x: 5
    }],
    ᐃⲆᐃⵠ: 11
  }, {
    ᐃⲆᐃⵠ: 6,
    ΔⵠΔΔ: [{
      y: -66,
      ᐃᐃⲆ: 2,
      x: -33
    }, {
      x: -58,
      y: 10,
      ᐃᐃⲆ: 0
    }, {
      x: -19,
      y: 44,
      ᐃᐃⲆ: 1
    }, {
      ᐃᐃⲆ: 0,
      y: 20,
      x: 44
    }, {
      y: -36,
      x: 53,
      ᐃᐃⲆ: 2
    }, {
      x: 7,
      ᐃᐃⲆ: 0,
      y: -62
    }]
  }, {
    ΔⵠΔΔ: [{
      ᐃᐃⲆ: 1,
      x: -19,
      y: -25
    }, {
      ᐃᐃⲆ: 2,
      y: 13,
      x: -29
    }, {
      ᐃᐃⲆ: 0,
      y: 12,
      x: 12
    }],
    ᐃⲆᐃⵠ: 3
  }];
  var ww = 0;
  var xw = 0;
  var yw = 0;
  var zw = 0;
  function Aw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = zx.ⲆⵠΔ.y + f - 700;
    var g = Math.max(zx.ⲆⵠΔ.x + e, 0);
    var l = Math.max(-zx.ⲆⵠΔ.x + uo - i - 100, 0);
    var r = g;
    var b = uo - g - l;
    if (n) {
      var d = j.ᐃᐃⲆ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.ᐃᐃⲆ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.ᐃᐃⲆ(q).x;
    } else {
      d = q.r.x;
    }
    if (u < s + (t = h + 350 - s + d) - 3) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.ⵠΔᐃⵠᐃΔᐃ === 1) {
      if (yx.transition) {
        var p = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
        go.fillStyle = Bw(15, 77, 72, 252, 239, 187, p);
      } else {
        go.fillStyle = Mr.ⲆᐃⵠⵠⵠΔⲆ[yx.time];
      }
      go.fillRect(r, s, b, t);
    } else {
      if (yx.transition) {
        p = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
        go.fillStyle = Bw(k.Δᐃᐃ[0], k.Δᐃᐃ[1], k.Δᐃᐃ[2], k.ⵠΔⵠ[0], k.ⵠΔⵠ[1], k.ⵠΔⵠ[2], p);
      } else {
        go.fillStyle = k.ⵠⲆⵠⵠⲆ[yx.time];
      }
      go.fillRect(r, s, b, t);
    }
  }
  function Bw(b, c, d, e, f, g, a) {
    var i;
    var j = "#";
    j += (i = Math.floor(a * e + b * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
    j += (i = Math.floor(f * a + c * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
    return j += (i = Math.floor(a * g + (1 - a) * d)) < 16 ? "0" + i.toString(16) : i.toString(16);
  }
  function Cw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = zx.ⲆⵠΔ.x + f - 700;
    var g = Math.max(zx.ⲆⵠΔ.y + e, 0);
    var l = Math.max(-zx.ⲆⵠΔ.y + xp - i - 100, 0);
    var r = g;
    var b = xp - g - l;
    if (n) {
      var d = j.ᐃᐃⲆ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.ᐃᐃⲆ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.ᐃᐃⲆ(q).x;
    } else {
      d = q.r.x;
    }
    if (u < s + (t = h + 350 - s + d) - 3) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.ⵠΔᐃⵠᐃΔᐃ === 1) {
      if (yx.transition) {
        var p = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
        go.fillStyle = Bw(15, 77, 72, 252, 239, 187, p);
      } else {
        go.fillStyle = Mr.ⲆᐃⵠⵠⵠΔⲆ[yx.time];
      }
      go.fillRect(s, r, t, b);
    } else {
      if (yx.transition) {
        p = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
        go.fillStyle = Bw(k.Δᐃᐃ[0], k.Δᐃᐃ[1], k.Δᐃᐃ[2], k.ⵠΔⵠ[0], k.ⵠΔⵠ[1], k.ⵠΔⵠ[2], p);
      } else {
        go.fillStyle = k.ⵠⲆⵠⵠⲆ[yx.time];
      }
      go.fillRect(s, r, t, b);
    }
  }
  function Dw(a, b, c, d) {
    if (yx.transition) {
      go.globalAlpha = 1;
      qp(go, ᐃᐃ[a][yx.time], c, d);
      yx.time = yx.time ? 0 : 1;
      go.globalAlpha = 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ;
      qp(go, ᐃᐃ[a][yx.time], c, d);
      yx.time = yx.time ? 0 : 1;
      go.globalAlpha = 1;
    } else {
      qp(go, b, c, d);
    }
  }
  function Ew(b, c, d, e, f) {
    const i = ((b + 29881) * 22695477 + 1) % 4294967296;
    const a = c ^ 54628;
    const j = (d | 30520) & ~(d & 30520);
    const k = (0 << (e >> 8 & 255)) + (16 << (e >> 16 & 255)) + (24 << (e >> 24 & 255)) + (8 << (e & 255));
    const h = (8 << (f >> 16 & 255)) + (0 << (f >> 24 & 255)) + (24 << (f >> 8 & 255)) + (16 << (f & 255));
    return ((30684 + (zb(i, a, j) ^ kx(k, h, i, a, j))) * 1664525 + 1013904223) % 4294967296;
  }
  function Fw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = zx.ⲆⵠΔ.y + j - 700;
    var g = Math.max(zx.ⲆⵠΔ.x + e, 0);
    var l = Math.max(-zx.ⲆⵠΔ.x + uo - i - 100, 0);
    var t = g;
    var b = uo - g - l;
    if (o) {
      var d = q.ᐃᐃⲆ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = t;
    var c = u;
    var p = d.x + 0;
    var C = b;
    var G = u += d.x + 0 - 2;
    if (o) {
      d = q.ᐃᐃⲆ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f - 2) - 2;
    if (o) {
      d = q.ᐃᐃⲆ(s);
    } else {
      d = s.r;
    }
    if (k < u + (f = h + 350 - u + d.x) - 3) {
      var A = true;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var D = u += f - 2;
    } else {
      A = false;
      u = k;
      D = -1;
    }
    f = h + 700 - u;
    if (yx.transition) {
      var N = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
      go.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
    } else {
      go.fillStyle = Mr.ΔᐃⲆⲆⵠ[yx.time];
    }
    go.fillRect(F, c, C, p);
    if (o) {
      if (yx.transition) {
        N = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
        go.fillStyle = Bw(15, 70, 76, 42, 139, 155, N);
      } else {
        go.fillStyle = Mr.ΔⲆⵠΔᐃⲆΔ[yx.time];
      }
    } else if (yx.transition) {
      N = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
      go.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
    } else {
      go.fillStyle = Mr.ΔᐃⲆⲆⵠ[yx.time];
    }
    go.fillRect(y, H, K, w);
    if (A) {
      if (o) {
        if (yx.transition) {
          N = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
          go.fillStyle = Bw(17, 94, 96, 169, 214, 211, N);
        } else {
          go.fillStyle = Mr.ΔⲆΔᐃⲆⵠᐃ[yx.time];
        }
      } else if (yx.transition) {
        N = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
        go.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
      } else {
        go.fillStyle = Mr.ΔᐃⲆⲆⵠ[yx.time];
      }
      go.fillRect(J, L, B, M);
    }
    if (xx.ΔⵠⵠΔΔ && o) {
      q.ⲆΔᐃⲆⲆⲆᐃⵠⵠ(k, D, G, h, -zx.ⲆⵠΔ.x + F, -zx.ⲆⵠΔ.x + F + C);
    }
  }
  function ef(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = zx.ⲆⵠΔ.x + j + 820;
    var g = Math.max(zx.ⲆⵠΔ.y + e, 0);
    var l = Math.max(-zx.ⲆⵠΔ.y + xp - i - 100, 0);
    var t = g;
    var b = xp - g - l;
    if (o) {
      var d = q.ᐃᐃⲆ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.ᐃᐃⲆ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f + 2) - 2;
    if (o) {
      d = q.ᐃᐃⲆ(s);
    } else {
      d = s.r;
    }
    if (k > u + (f = h - 350 - u - d.x)) {
      var A = _q;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var D = u += f + 2;
    } else {
      A = false;
      u = k;
      D = -1;
    }
    f = h - 700 - u;
    if (yx.transition) {
      var N = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
      go.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
    } else {
      go.fillStyle = Mr.ΔᐃⲆⲆⵠ[yx.time];
    }
    go.fillRect(F, c, p, C);
    if (o) {
      if (yx.transition) {
        N = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
        go.fillStyle = Bw(15, 70, 76, 42, 139, 155, N);
      } else {
        go.fillStyle = Mr.ΔⲆⵠΔᐃⲆΔ[yx.time];
      }
    } else if (yx.transition) {
      N = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
      go.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
    } else {
      go.fillStyle = Mr.ΔᐃⲆⲆⵠ[yx.time];
    }
    go.fillRect(H, y, w, K);
    if (A) {
      if (o) {
        if (yx.transition) {
          N = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
          go.fillStyle = Bw(17, 94, 96, 169, 214, 211, N);
        } else {
          go.fillStyle = Mr.ΔⲆΔᐃⲆⵠᐃ[yx.time];
        }
      } else if (yx.transition) {
        N = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
        go.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
      } else {
        go.fillStyle = Mr.ΔᐃⲆⲆⵠ[yx.time];
      }
      go.fillRect(L, J, M, B);
    }
    if (xx.ΔⵠⵠΔΔ && o) {
      q.ᐃⵠᐃⵠⵠⵠΔⲆⵠ(k, D, G, h, -zx.ⲆⵠΔ.y + c, -zx.ⲆⵠΔ.y + c + C);
    }
  }
  function tf(b, c, d, e, f) {
    var g = d.width;
    var a = d.height;
    var i = Math.floor(g / 2);
    var j = Math.floor(a / 2);
    if (yx.transition) {
      go.globalAlpha = 1;
      qp(go, ᐃᐃ[b][c][yx.time], 0, 0, g, a, e, f, i, j);
      yx.time = yx.time ? 0 : 1;
      go.globalAlpha = 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ;
      qp(go, ᐃᐃ[b][c][yx.time], 0, 0, g, a, e, f, i, j);
      yx.time = yx.time ? 0 : 1;
      go.globalAlpha = 1;
    } else {
      qp(go, ᐃᐃ[b][c][yx.time], 0, 0, g, a, e, f, i, j);
    }
  }
  function nf(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = zx.ⲆⵠΔ.x + f + 820;
    var g = Math.max(zx.ⲆⵠΔ.y + e, 0);
    var l = Math.max(-zx.ⲆⵠΔ.y + xp - i - 100, 0);
    var r = g;
    var b = xp - g - l;
    if (n) {
      var d = j.ᐃᐃⲆ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.ᐃᐃⲆ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.ᐃᐃⲆ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h - 350 - s - d) < u) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.ⵠΔᐃⵠᐃΔᐃ === 1) {
      if (yx.transition) {
        var p = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
        go.fillStyle = Bw(15, 77, 72, 252, 239, 187, p);
      } else {
        go.fillStyle = Mr.ⲆᐃⵠⵠⵠΔⲆ[yx.time];
      }
      go.fillRect(s, r, t, b);
    } else {
      if (yx.transition) {
        p = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
        go.fillStyle = Bw(k.Δᐃᐃ[0], k.Δᐃᐃ[1], k.Δᐃᐃ[2], k.ⵠΔⵠ[0], k.ⵠΔⵠ[1], k.ⵠΔⵠ[2], p);
      } else {
        go.fillStyle = k.ⵠⲆⵠⵠⲆ[yx.time];
      }
      go.fillRect(s, r, t, b);
    }
  }
  function of() {
    go.globalAlpha = 1;
    if (yx.transition) {
      var a = yx.ⵠⲆΔⲆ.ΔⵠΔ();
    }
    yx.ⲆᐃⲆΔⲆᐃΔⲆⲆ(-zx.ⲆⵠΔ.x, -zx.ⲆⵠΔ.y);
    ww = Math.max(Math.floor(-zx.ⲆⵠΔ.x / yx.ΔᐃᐃᐃΔⲆⲆ) - 5, 0);
    xw = Math.min(Math.floor((-zx.ⲆⵠΔ.x + zx.ⲆⵠΔ.w) / yx.ΔᐃᐃᐃΔⲆⲆ) + 4, yx.ᐃᐃΔⵠᐃ - 1);
    yw = Math.max(Math.floor(-zx.ⲆⵠΔ.y / yx.ⲆⲆΔᐃᐃᐃⵠ) - 3, 0);
    zw = Math.min(Math.floor((-zx.ⲆⵠΔ.y + zx.ⲆⵠΔ.ΔⵠⲆ) / yx.ⲆⲆΔᐃᐃᐃⵠ) + 3, yx.ΔΔΔⲆⲆ - 1);
    (function () {
      for (var b = yx.ᐃᐃⲆᐃ.length - 1; b >= 0; b--) {
        var f = yx.ᐃᐃⲆᐃ[b];
        if (yx.ⲆΔᐃᐃΔ === f.ᐃᐃⲆ) {
          var j = yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ];
          if (f.x1 - 230 - uo <= -zx.ⲆⵠΔ.x && f.x2 + 330 >= -zx.ⲆⵠΔ.x && f.y1 - xp <= -zx.ⲆⵠΔ.y && f.y2 + 100 >= -zx.ⲆⵠΔ.y) {
            var k = f.x2;
            if (f.ᐃᐃⲆ !== yx.ⲆΔᐃᐃΔ) {
              k -= 610;
            }
            var m = f.x1;
            if (f.ᐃᐃⲆ !== yx.ⲆΔᐃᐃΔ) {
              m += 610;
            }
            var p = f.y2;
            if (yx.ⲆΔᐃᐃΔ !== f.ᐃᐃⲆ) {
              p -= 610;
            }
            var q = f.y1;
            if (f.ᐃᐃⲆ !== yx.ⲆΔᐃᐃΔ) {
              q += 610;
            }
            if (yx.transition) {
              var w = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
              go.fillStyle = Bw(j.Δᐃᐃ[0], j.Δᐃᐃ[1], j.Δᐃᐃ[2], j.ⵠΔⵠ[0], j.ⵠΔⵠ[1], j.ⵠΔⵠ[1], w);
            } else {
              go.fillStyle = j.ⵠⲆⵠⵠⲆ[yx.time];
            }
            var x = Math.max(zx.ⲆⵠΔ.x + m - 2 - 230, 0);
            var y = Math.max(-zx.ⲆⵠΔ.x + uo - k - 330 - 2, 0);
            var z = Math.max(zx.ⲆⵠΔ.y + q - 2, 0);
            var A = Math.max(-zx.ⲆⵠΔ.y + xp - p - 100 - 2, 0);
            go.beginPath();
            go.fillRect(x, z, uo - y - x, xp - z - A);
          }
        }
      }
      for (b = yx.ᐃᐃⲆᐃ.length - 1; b >= 0; b--) {
        if ((f = yx.ᐃᐃⲆᐃ[b]).ᐃᐃⲆ !== yx.ⲆΔᐃᐃΔ) {
          k = f.x2;
          if (yx.ⲆΔᐃᐃΔ !== f.ᐃᐃⲆ) {
            k -= 400;
          }
          m = f.x1;
          if (f.ᐃᐃⲆ !== yx.ⲆΔᐃᐃΔ) {
            m += 400;
          }
          p = f.y2;
          if (yx.ⲆΔᐃᐃΔ !== f.ᐃᐃⲆ) {
            p -= 300;
          }
          q = f.y1;
          if (yx.ⲆΔᐃᐃΔ !== f.ᐃᐃⲆ) {
            q += 300;
          }
          if (!(f.ⵠΔΔ & 8) && k - uo + 120 <= -zx.ⲆⵠΔ.x && k + 820 >= -zx.ⲆⵠΔ.x && q + 88 - xp <= -zx.ⲆⵠΔ.y && -zx.ⲆⵠΔ.y <= p + 50) {
            nf(k, q + 88, p - 88, zx.ᐃΔⲆⵠ[0], yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ], f.ⵠΔΔ & 8);
            ef(k, q + 88, p - 88, zx.ᐃΔⲆⵠ[0], yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ], f.ⵠΔΔ & 8);
          }
          if ((f.ⵠΔΔ & 4) === 0 && -zx.ⲆⵠΔ.x >= m - uo - 700 && m - 20 >= -zx.ⲆⵠΔ.x && q + 88 - xp <= -zx.ⲆⵠΔ.y && -zx.ⲆⵠΔ.y <= p + 50) {
            Cw(m, q + 88, p - 88, zx.ᐃΔⲆⵠ[1], yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ], f.ⵠΔΔ & 4);
            mf(m, q + 88, p - 88, zx.ᐃΔⲆⵠ[1], yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ], f.ⵠΔΔ & 4);
          }
          if (!(f.ⵠΔΔ & 2) && -zx.ⲆⵠΔ.x >= m - 235 - uo && -zx.ⲆⵠΔ.x <= k + 350 && p - xp - 275 <= -zx.ⲆⵠΔ.y && -zx.ⲆⵠΔ.y <= p + 490) {
            vf(p - 230, m - 230, k + 230, zx.ᐃΔⲆⵠ[2], yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ], f.ⵠΔΔ & 2);
            df(p - 230, m - 230, k + 230, zx.ᐃΔⲆⵠ[2], yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ], f.ⵠΔΔ & 2);
          }
          if ((f.ⵠΔΔ & 1) === 0 && -zx.ⲆⵠΔ.x >= m - 235 - uo && k + 350 >= -zx.ⲆⵠΔ.x && -zx.ⲆⵠΔ.y >= q - xp - 390 && -zx.ⲆⵠΔ.y <= q + 315) {
            Aw(q + 310, m - 230, k + 230, zx.ᐃΔⲆⵠ[3], yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ], f.ⵠΔΔ & 1);
            Fw(q + 310, m - 230, k + 230, zx.ᐃΔⲆⵠ[3], yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ], f.ⵠΔΔ & 1);
          }
        }
      }
      for (b = yx.ᐃᐃⲆᐃ.length - 1; b >= 0; b--) {
        if ((f = yx.ᐃᐃⲆᐃ[b]).ᐃᐃⲆ !== yx.ⲆΔᐃᐃΔ) {
          k = f.x2;
          if (f.ᐃᐃⲆ !== yx.ⲆΔᐃᐃΔ) {
            k -= 400;
          }
          m = f.x1;
          if (f.ᐃᐃⲆ !== yx.ⲆΔᐃᐃΔ) {
            m += 400;
          }
          p = f.y2;
          if (yx.ⲆΔᐃᐃΔ !== f.ᐃᐃⲆ) {
            p -= 300;
          }
          q = f.y1;
          if (yx.ⲆΔᐃᐃΔ !== f.ᐃᐃⲆ) {
            q += 300;
          }
          if (f.ⵠΔΔ & 8 && k - uo + 120 <= -zx.ⲆⵠΔ.x && k + 820 >= -zx.ⲆⵠΔ.x && q + 88 - xp <= -zx.ⲆⵠΔ.y && -zx.ⲆⵠΔ.y <= p + 50) {
            nf(k, q + 88, p - 88, zx.ᐃΔⲆⵠ[0], yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ], f.ⵠΔΔ & 8);
          }
          if ((f.ⵠΔΔ & 4) !== 0 && m - uo - 700 <= -zx.ⲆⵠΔ.x && -zx.ⲆⵠΔ.x <= m - 20 && -zx.ⲆⵠΔ.y >= q + 88 - xp && p + 50 >= -zx.ⲆⵠΔ.y) {
            Cw(m, q + 88, p - 88, zx.ᐃΔⲆⵠ[1], yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ], f.ⵠΔΔ & 4);
          }
          if ((f.ⵠΔΔ & 2) !== 0 && m - 235 - uo <= -zx.ⲆⵠΔ.x && k + 350 >= -zx.ⲆⵠΔ.x && -zx.ⲆⵠΔ.y >= p - xp - 275 && p + 490 >= -zx.ⲆⵠΔ.y) {
            vf(p - 230, m - 230, k + 230, zx.ᐃΔⲆⵠ[2], yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ], f.ⵠΔΔ & 2);
          }
          if ((f.ⵠΔΔ & 1) !== 0 && m - 235 - uo <= -zx.ⲆⵠΔ.x && k + 350 >= -zx.ⲆⵠΔ.x && q - xp - 390 <= -zx.ⲆⵠΔ.y && -zx.ⲆⵠΔ.y <= q + 315) {
            Aw(q + 310, m - 230, k + 230, zx.ᐃΔⲆⵠ[3], yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ], f.ⵠΔΔ & 1);
          }
        }
      }
      for (b = yx.ᐃᐃⲆᐃ.length - 1; b >= 0; b--) {
        f = yx.ᐃᐃⲆᐃ[b];
        if (yx.ⲆΔᐃᐃΔ !== f.ᐃᐃⲆ) {
          j = yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ];
          if (-zx.ⲆⵠΔ.x >= f.x1 - 230 - uo && f.x2 + 330 >= -zx.ⲆⵠΔ.x && -zx.ⲆⵠΔ.y >= f.y1 - xp && -zx.ⲆⵠΔ.y <= f.y2 + 100) {
            k = f.x2;
            if (yx.ⲆΔᐃᐃΔ !== f.ᐃᐃⲆ) {
              if ((f.ⵠΔΔ & 8) === 0) {
                k -= 414;
              } else {
                k -= 610;
              }
            }
            m = f.x1;
            if (f.ᐃᐃⲆ !== yx.ⲆΔᐃᐃΔ) {
              if ((f.ⵠΔΔ & 4) === 0) {
                m += 414;
              } else {
                m += 610;
              }
            }
            p = f.y2;
            if (f.ᐃᐃⲆ !== yx.ⲆΔᐃᐃΔ) {
              if (f.ⵠΔΔ & 2) {
                p -= 610;
              } else {
                p -= 414;
              }
            }
            q = f.y1;
            if (f.ᐃᐃⲆ !== yx.ⲆΔᐃᐃΔ) {
              if (f.ⵠΔΔ & 1) {
                q += 610;
              } else {
                q += 414;
              }
            }
            if (yx.transition) {
              w = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
              go.fillStyle = Bw(j.Δᐃᐃ[0], j.Δᐃᐃ[1], j.Δᐃᐃ[2], j.ⵠΔⵠ[0], j.ⵠΔⵠ[1], j.ⵠΔⵠ[2], w);
            } else {
              go.fillStyle = j.ⵠⲆⵠⵠⲆ[yx.time];
            }
            x = Math.max(zx.ⲆⵠΔ.x + m - 2 - 230, 0);
            y = Math.max(-zx.ⲆⵠΔ.x + uo - k - 330 - 2, 0);
            z = Math.max(zx.ⲆⵠΔ.y + q - 2, 0);
            A = Math.max(-zx.ⲆⵠΔ.y + xp - p - 100 - 2, 0);
            go.beginPath();
            go.fillRect(x, z, uo - y - x, xp - z - A);
          }
        }
      }
      if (xx.ΔⵠⵠΔΔ) {
        af(qw, yw, zw, ww, xw, 695, "isl", 2);
        af(qw, yw, zw, ww, xw, 694, "isl", 2);
      }
      af(uw, yw, zw, ww, xw, 692, "isl", 2);
      if (xx.ΔⵠⵠΔΔ) {
        af(vw, yw, zw, ww, xw, 243, "de");
      }
      var B = yx.Ⲇᐃᐃ[0];
      for (b = 0; B.length > b; b++) {
        for (var d = B[b], C = 0; d.ΔΔΔᐃⲆ.length > C; C++) {
          sf(d.ΔΔΔᐃⲆ[C]);
        }
      }
      if ((gv += Gx * 40) > 60) {
        gv -= 60;
      }
      af(Uv, yw, zw, ww, xw, 1024, "r", 0);
      b = 0;
      for (; b < yx.ᐃᐃⲆᐃ.length; b++) {
        if ((f = yx.ᐃᐃⲆᐃ[b]).ᐃᐃⲆ !== yx.ⲆΔᐃᐃΔ) {
          k = f.x2;
          if (f.ᐃᐃⲆ !== yx.ⲆΔᐃᐃΔ) {
            k -= 400;
          }
          m = f.x1;
          if (f.ᐃᐃⲆ !== yx.ⲆΔᐃᐃΔ) {
            m += 400;
          }
          p = f.y2;
          if (yx.ⲆΔᐃᐃΔ !== f.ᐃᐃⲆ) {
            p -= 300;
          }
          q = f.y1;
          if (yx.ⲆΔᐃᐃΔ !== f.ᐃᐃⲆ) {
            q += 300;
          }
          if ((f.ⵠΔΔ & 8) > 0 && k - uo + 120 <= -zx.ⲆⵠΔ.x && -zx.ⲆⵠΔ.x <= k + 820 && q + 88 - xp <= -zx.ⲆⵠΔ.y && p + 50 >= -zx.ⲆⵠΔ.y) {
            ef(k, q + 88, p - 88, zx.ᐃΔⲆⵠ[0], yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ], f.ⵠΔΔ & 8);
          }
          if ((f.ⵠΔΔ & 4) > 0 && m - uo - 700 <= -zx.ⲆⵠΔ.x && m - 20 >= -zx.ⲆⵠΔ.x && q + 88 - xp <= -zx.ⲆⵠΔ.y && p + 50 >= -zx.ⲆⵠΔ.y) {
            mf(m, q + 88, p - 88, zx.ᐃΔⲆⵠ[1], yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ], f.ⵠΔΔ & 4);
          }
          if ((f.ⵠΔΔ & 2) > 0 && m - 235 - uo <= -zx.ⲆⵠΔ.x && k + 350 >= -zx.ⲆⵠΔ.x && -zx.ⲆⵠΔ.y >= p - xp - 275 && -zx.ⲆⵠΔ.y <= p + 490) {
            df(p - 230, m - 230, k + 230, zx.ᐃΔⲆⵠ[2], yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ], f.ⵠΔΔ & 2);
          }
          if ((f.ⵠΔΔ & 1) > 0 && m - 235 - uo <= -zx.ⲆⵠΔ.x && -zx.ⲆⵠΔ.x <= k + 350 && -zx.ⲆⵠΔ.y >= q - xp - 390 && -zx.ⲆⵠΔ.y <= q + 315) {
            Fw(q + 310, m - 230, k + 230, zx.ᐃΔⲆⵠ[3], yx.ᐃⵠᐃᐃⲆ[f.ᐃᐃⲆ], f.ⵠΔΔ & 1);
          }
        }
      }
    })();
    (function () {
      var b = ww;
      var e = xw;
      var i = yw;
      var m = zw;
      if (xx.ΔⵠⵠΔΔ) {
        af(uw, i, m, b, e, 621, "l", 2);
      }
      if (xx.ΔⵠⵠΔΔ) {
        af(uw, i, m, b, e, Mr.ᐃΔΔΔⵠ, "la", 5);
      }
      af(uw, i, m, b, e, 203, "la", 5);
      af(qw, i, m, b, e, 620, "l", 2);
      if (xx.ΔⵠⵠΔΔ) {
        af(tw, i, m, b, e, 203, "la", 5);
        af(qw, i, m, b, e, 619, "l", 2);
      }
      af(uw, i, m, b, e, 1052, "ma", 4);
      for (var n = yx.Ⲇᐃᐃ[76], t = 0; t < n.length; t++) {
        n[t].ᐃᐃⲆⲆΔⵠᐃ();
      }
      var aa = yx.Ⲇᐃᐃ[0];
      for (t = 0; aa.length > t; t++) {
        for (var ba = aa[t], ca = 0; ca < ba.ᐃᐃⲆⵠⵠ.length; ca++) {
          gf(ba.ᐃᐃⲆⵠⵠ[ca]);
        }
      }
      var da = yx.Ⲇᐃᐃ[30];
      for (t = 0; t < da.length; t++) {
        rf(da[t], 125);
        da[t].ᐃᐃⵠⵠᐃ(da[t].info);
      }
      var g = yx.Ⲇᐃᐃ[18];
      for (t = 0; g.length > t; t++) {
        if (g[t].action == 2) {
          uf(g[t]);
        }
      }
      var ea = yx.Ⲇᐃᐃ[1];
      for (t = 0; ea.length > t; t++) {
        uf(ea[t], 113);
      }
      var fa = yx.Ⲇᐃᐃ[22];
      for (t = 0; fa.length > t; t++) {
        uf(fa[t]);
      }
      var ha = yx.Ⲇᐃᐃ[23];
      for (t = 0; t < ha.length; t++) {
        uf(ha[t]);
      }
      var ia = yx.Ⲇᐃᐃ[6];
      for (t = 0; t < ia.length; t++) {
        uf(ia[t], 118);
      }
      var c = yx.Ⲇᐃᐃ[36];
      for (t = 0; c.length > t; t++) {
        rf(c[t]);
      }
      var p = yx.Ⲇᐃᐃ[33];
      for (t = 0; t < p.length; t++) {
        rf(p[t], 141);
      }
      var C = yx.Ⲇᐃᐃ[3];
      for (t = 0; t < C.length; t++) {
        uf(C[t]);
      }
      C = yx.Ⲇᐃᐃ[43];
      t = 0;
      for (; t < C.length; t++) {
        uf(C[t]);
      }
      C = yx.Ⲇᐃᐃ[3];
      t = 0;
      for (; t < C.length; t++) {
        hf(C[t]);
      }
      var ja = yx.Ⲇᐃᐃ[44];
      for (t = 0; ja.length > t; t++) {
        if ((ja[t].info & 15) === 0 || ja[t].info === 10) {
          rf(ja[t]);
        }
      }
      var ka = yx.Ⲇᐃᐃ[54];
      for (t = 0; t < ka.length; t++) {
        if (!(ka[t].info & 15) || ka[t].info === 10) {
          rf(ka[t]);
        }
      }
      var la = yx.Ⲇᐃᐃ[55];
      for (t = 0; la.length > t; t++) {
        if ((la[t].info & 15) === 0 || la[t].info === 10) {
          rf(la[t]);
        }
      }
      var ma = yx.Ⲇᐃᐃ[79];
      for (t = 0; ma.length > t; t++) {
        rf(ma[t], 132);
      }
      var na = yx.Ⲇᐃᐃ[39];
      for (t = 0; na.length > t; t++) {
        if ((na[t].info & 15) === 0 || na[t].info === 10) {
          rf(na[t]);
        }
      }
      var oa = yx.Ⲇᐃᐃ[40];
      for (t = 0; oa.length > t; t++) {
        if (!(oa[t].info & 15) || oa[t].info === 10) {
          rf(oa[t]);
        }
      }
      var pa = yx.Ⲇᐃᐃ[37];
      for (t = 0; pa.length > t; t++) {
        if (!(pa[t].info & 15) || pa[t].info === 10) {
          rf(pa[t]);
        }
      }
      ma = yx.Ⲇᐃᐃ[31];
      t = 0;
      for (; t < ma.length; t++) {
        rf(ma[t]);
      }
      var qa = yx.Ⲇᐃᐃ[86];
      for (t = 0; t < qa.length; t++) {
        rf(qa[t], 250, 729);
      }
      var x = yx.Ⲇᐃᐃ[82];
      for (t = 0; x.length > t; t++) {
        rf(x[t], 250, 729);
      }
      var J = yx.Ⲇᐃᐃ[87];
      for (t = 0; J.length > t; t++) {
        rf(J[t], 854, 859);
      }
      var M = yx.Ⲇᐃᐃ[45];
      for (t = 0; t < M.length; t++) {
        if (M[t].info & 1) {
          rf(M[t], 336);
        }
      }
      M = yx.Ⲇᐃᐃ[46];
      t = 0;
      for (; M.length > t; t++) {
        if (M[t].info & 1) {
          rf(M[t], 373);
        }
      }
      M = yx.Ⲇᐃᐃ[47];
      t = 0;
      for (; M.length > t; t++) {
        if (M[t].info) {
          rf(M[t], 376);
        }
      }
      M = yx.Ⲇᐃᐃ[48];
      t = 0;
      for (; t < M.length; t++) {
        if (M[t].info) {
          rf(M[t], 379);
        }
      }
      M = yx.Ⲇᐃᐃ[49];
      t = 0;
      for (; t < M.length; t++) {
        if (M[t].info) {
          rf(M[t], 500);
        }
      }
      M = yx.Ⲇᐃᐃ[53];
      t = 0;
      for (; M.length > t; t++) {
        if (M[t].info) {
          rf(M[t], 376);
        }
      }
      M = yx.Ⲇᐃᐃ[10];
      t = 0;
      for (; M.length > t; t++) {
        if (M[t].info & 1) {
          rf(M[t], 336);
        }
      }
      M = yx.Ⲇᐃᐃ[15];
      t = 0;
      for (; M.length > t; t++) {
        if (M[t].info & 1) {
          rf(M[t], 373);
        }
      }
      M = yx.Ⲇᐃᐃ[16];
      t = 0;
      for (; t < M.length; t++) {
        if (M[t].info) {
          rf(M[t], 376);
        }
      }
      M = yx.Ⲇᐃᐃ[17];
      t = 0;
      for (; M.length > t; t++) {
        if (M[t].info) {
          rf(M[t], 379);
        }
      }
      M = yx.Ⲇᐃᐃ[21];
      t = 0;
      for (; M.length > t; t++) {
        if (M[t].info) {
          rf(M[t], 500);
        }
      }
      M = yx.Ⲇᐃᐃ[51];
      t = 0;
      for (; t < M.length; t++) {
        if (M[t].info) {
          rf(M[t], 376);
        }
      }
      var ra = yx.Ⲇᐃᐃ[80];
      for (t = 0; t < ra.length; t++) {
        rf(ra[t], 264, 322);
      }
      var D = yx.Ⲇᐃᐃ[41];
      for (t = 0; t < D.length; t++) {
        rf(D[t], 198);
      }
      n = yx.Ⲇᐃᐃ[76];
      t = 0;
      for (; t < n.length; t++) {
        rf(n[t], Mr.ᐃᐃΔᐃᐃⵠΔ, Mr.ΔⵠᐃΔΔⲆΔⲆᐃ);
      }
      var sa = yx.Ⲇᐃᐃ[91];
      for (t = 0; sa.length > t; t++) {
        if (sa[t].ⲆΔⲆⲆⵠⵠⵠ === 0) {
          rf(sa[t]);
        }
      }
      aa = yx.Ⲇᐃᐃ[0];
      t = 0;
      for (; aa.length > t; t++) {
        ba = aa[t];
        if (aa[t].ᐃΔⵠΔⵠ !== 227 && aa[t].ᐃΔⵠΔⵠ !== 228 && aa[t].ᐃΔⵠΔⵠ !== 229 && aa[t].ᐃΔⵠΔⵠ !== 230 && aa[t].ᐃΔⵠΔⵠ !== 91) {
          if (ba.ⲆᐃⲆᐃⲆⵠΔ === 0) {
            if (ba.ΔⲆΔⲆⲆⲆⵠ > 0.001) {
              ba.ΔⲆΔⲆⲆⲆⵠ = ΔⲆᐃ.ΔΔⲆⲆΔ(ba.ΔⲆΔⲆⲆⲆⵠ, 0, 0.018);
              var ta = 1 + Math.min(1, Math.max(ba.ΔⲆΔⲆⲆⲆⵠ, 0) / 100) * 0.18;
              go.save();
              go.scale(ta, ta);
              zx.ⲆⵠΔ.x /= ta;
              zx.ⲆⵠΔ.y /= ta;
              ba.x /= ta;
              ba.y /= ta;
              ba.r.x /= ta;
              ba.r.y /= ta;
              ba.ᐃᐃᐃⲆΔⲆΔ();
              ba.ᐃⵠΔᐃ();
              zx.ⲆⵠΔ.x *= ta;
              zx.ⲆⵠΔ.y *= ta;
              ba.x *= ta;
              ba.y *= ta;
              ba.r.x *= ta;
              ba.r.y *= ta;
              go.restore();
            } else {
              ba.ⲆΔⲆⲆⵠⵠⵠ = 0;
              ba.ᐃᐃᐃⲆΔⲆΔ();
              ba.ᐃⵠΔᐃ();
            }
          }
        } else if (ba.ⵠᐃᐃⲆⲆ <= 180) {
          go.save();
          ta = 1 + Math.min(1, Math.max(ba.ⵠⵠⵠⵠⵠ - 30, 0) / 180) * 0.35;
          go.scale(ta, ta);
          zx.ⲆⵠΔ.x /= ta;
          zx.ⲆⵠΔ.y /= ta;
          ba.x /= ta;
          ba.y /= ta;
          ba.r.x /= ta;
          ba.r.y /= ta;
          ba.ⲆΔⲆⲆⵠⵠⵠ = 0;
          ba.ᐃᐃᐃⲆΔⲆΔ();
          ba.ᐃⵠΔᐃ();
          zx.ⲆⵠΔ.x *= ta;
          zx.ⲆⵠΔ.y *= ta;
          ba.x *= ta;
          ba.y *= ta;
          ba.r.x *= ta;
          ba.r.y *= ta;
          go.restore();
        }
      }
      D = yx.Ⲇᐃᐃ[41];
      t = 0;
      for (; D.length > t; t++) {
        rf(D[t], 913);
      }
      var ua = yx.Ⲇᐃᐃ[67];
      for (t = 0; ua.length > t; t++) {
        rf(ua[t]);
      }
      var Q = yx.Ⲇᐃᐃ[62];
      for (t = 0; t < Q.length; t++) {
        rf(Q[t], 419, 461);
      }
      var _ = yx.Ⲇᐃᐃ[70];
      for (t = 0; _.length > t; t++) {
        rf(_[t]);
      }
      var F = yx.Ⲇᐃᐃ[60];
      for (t = 0; F.length > t; t++) {
        rf(F[t], 299, 326);
      }
      var R = yx.Ⲇᐃᐃ[72];
      for (t = 0; R.length > t; t++) {
        rf(R[t], 232, 1077);
      }
      var j = yx.Ⲇᐃᐃ[73];
      for (t = 0; j.length > t; t++) {
        rf(j[t], 233, 1092);
      }
      ja = yx.Ⲇᐃᐃ[44];
      t = 0;
      for (; ja.length > t; t++) {
        if ((ja[t].info & 15) !== 0 && ja[t].info !== 10) {
          rf(ja[t]);
        }
      }
      ka = yx.Ⲇᐃᐃ[54];
      t = 0;
      for (; t < ka.length; t++) {
        if (ka[t].info & 15 && ka[t].info !== 10) {
          rf(ka[t]);
        }
      }
      la = yx.Ⲇᐃᐃ[89];
      t = 0;
      for (; la.length > t; t++) {
        rf(la[t], 239);
      }
      la = yx.Ⲇᐃᐃ[55];
      t = 0;
      for (; la.length > t; t++) {
        if (la[t].info & 15 && la[t].info !== 10) {
          rf(la[t]);
        }
      }
      C = yx.Ⲇᐃᐃ[43];
      t = 0;
      for (; t < C.length; t++) {
        hf(C[t]);
      }
      na = yx.Ⲇᐃᐃ[39];
      t = 0;
      for (; t < na.length; t++) {
        if ((na[t].info & 15) !== 0 && na[t].info !== 10) {
          rf(na[t]);
        }
      }
      oa = yx.Ⲇᐃᐃ[40];
      t = 0;
      for (; t < oa.length; t++) {
        if ((oa[t].info & 15) !== 0 && oa[t].info !== 10) {
          rf(oa[t]);
        }
      }
      pa = yx.Ⲇᐃᐃ[37];
      t = 0;
      for (; t < pa.length; t++) {
        if ((pa[t].info & 15) !== 0 && pa[t].info !== 10) {
          rf(pa[t]);
        }
      }
      var W = yx.Ⲇᐃᐃ[81];
      for (t = 0; W.length > t; t++) {
        rf(W[t], 691, 697);
      }
      var G = yx.Ⲇᐃᐃ[66];
      for (t = 0; G.length > t; t++) {
        rf(G[t], 637, 687);
      }
      var L = yx.Ⲇᐃᐃ[65];
      for (t = 0; t < L.length; t++) {
        rf(L[t], 673, 688);
      }
      var O = yx.Ⲇᐃᐃ[61];
      for (t = 0; O.length > t; t++) {
        rf(O[t], 260, 333);
      }
      var N = yx.Ⲇᐃᐃ[88];
      for (t = 0; t < N.length; t++) {
        rf(N[t], 1033, 1034);
      }
      var q = yx.Ⲇᐃᐃ[63];
      for (t = 0; q.length > t; t++) {
        rf(q[t], 445, 462);
      }
      var H = yx.Ⲇᐃᐃ[77];
      for (t = 0; t < H.length; t++) {
        rf(H[t]);
      }
      var U = yx.Ⲇᐃᐃ[68];
      for (t = 0; U.length > t; t++) {
        rf(U[t], 918, 919);
      }
      var Y = yx.Ⲇᐃᐃ[71];
      for (t = 0; Y.length > t; t++) {
        rf(Y[t]);
      }
      var K = yx.Ⲇᐃᐃ[78];
      for (t = 0; t < K.length; t++) {
        rf(K[t], 1218, 1219);
      }
      var V = yx.Ⲇᐃᐃ[64];
      for (t = 0; V.length > t; t++) {
        if (V[t].scale === 1) {
          rf(V[t], 449, 463);
        }
      }
      V = yx.Ⲇᐃᐃ[69];
      t = 0;
      for (; V.length > t; t++) {
        if (V[t].scale === 1) {
          rf(V[t], 450, 464);
        }
      }
      var va = yx.Ⲇᐃᐃ[11];
      for (t = 0; t < va.length; t++) {
        rf(va[t]);
      }
      var Z = yx.Ⲇᐃᐃ[2];
      for (t = 0; Z.length > t; t++) {
        rf(Z[t], 114);
      }
      g = yx.Ⲇᐃᐃ[18];
      t = 0;
      for (; t < g.length; t++) {
        rf(g[t]);
      }
      var wa = yx.Ⲇᐃᐃ[34];
      for (t = 0; t < wa.length; t++) {
        rf(wa[t]);
      }
      M = yx.Ⲇᐃᐃ[10];
      t = 0;
      for (; M.length > t; t++) {
        if (!(M[t].info & 1)) {
          rf(M[t], 166);
        }
        M[t].ᐃᐃⵠⵠᐃ(M[t].info >> 1);
      }
      M = yx.Ⲇᐃᐃ[15];
      t = 0;
      for (; M.length > t; t++) {
        if (!(M[t].info & 1)) {
          rf(M[t], 171);
        }
        M[t].ᐃᐃⵠⵠᐃ(M[t].info >> 1);
      }
      M = yx.Ⲇᐃᐃ[16];
      t = 0;
      for (; M.length > t; t++) {
        if (!(M[t].info & 1)) {
          rf(M[t], 172);
        }
        M[t].ᐃᐃⵠⵠᐃ(M[t].info >> 1);
      }
      M = yx.Ⲇᐃᐃ[17];
      t = 0;
      for (; t < M.length; t++) {
        if (!(M[t].info & 1)) {
          rf(M[t], 173);
        }
        M[t].ᐃᐃⵠⵠᐃ(M[t].info >> 1);
      }
      M = yx.Ⲇᐃᐃ[21];
      t = 0;
      for (; t < M.length; t++) {
        if (!(M[t].info & 1)) {
          rf(M[t], 124);
        }
        M[t].ᐃᐃⵠⵠᐃ(M[t].info >> 1);
      }
      M = yx.Ⲇᐃᐃ[51];
      t = 0;
      for (; M.length > t; t++) {
        if (!(M[t].info & 1)) {
          rf(M[t], 218);
        }
        M[t].ᐃᐃⵠⵠᐃ(M[t].info >> 1);
      }
      M = yx.Ⲇᐃᐃ[45];
      t = 0;
      for (; M.length > t; t++) {
        if (!(M[t].info & 1)) {
          rf(M[t], 212);
        }
        M[t].ᐃᐃⵠⵠᐃ(M[t].info >> 1);
      }
      M = yx.Ⲇᐃᐃ[46];
      t = 0;
      for (; t < M.length; t++) {
        if (!(M[t].info & 1)) {
          rf(M[t], 213);
        }
        M[t].ᐃᐃⵠⵠᐃ(M[t].info >> 1);
      }
      M = yx.Ⲇᐃᐃ[47];
      t = 0;
      for (; t < M.length; t++) {
        if (!(M[t].info & 1)) {
          rf(M[t], 214);
        }
        M[t].ᐃᐃⵠⵠᐃ(M[t].info >> 1);
      }
      M = yx.Ⲇᐃᐃ[48];
      t = 0;
      for (; M.length > t; t++) {
        if (!(M[t].info & 1)) {
          rf(M[t], 215);
        }
        M[t].ᐃᐃⵠⵠᐃ(M[t].info >> 1);
      }
      M = yx.Ⲇᐃᐃ[49];
      t = 0;
      for (; M.length > t; t++) {
        if (!(M[t].info & 1)) {
          rf(M[t], 216);
        }
        M[t].ᐃᐃⵠⵠᐃ(M[t].info >> 1);
      }
      M = yx.Ⲇᐃᐃ[53];
      t = 0;
      for (; t < M.length; t++) {
        if (!(M[t].info & 1)) {
          rf(M[t], 220);
        }
        M[t].ᐃᐃⵠⵠᐃ(M[t].info >> 1);
      }
      var xa = yx.Ⲇᐃᐃ[4];
      for (t = 0; t < xa.length; t++) {
        rf(xa[t], 162);
        xa[t].ᐃᐃⵠⵠᐃ(xa[t].info);
      }
      xa = yx.Ⲇᐃᐃ[7];
      t = 0;
      for (; t < xa.length; t++) {
        rf(xa[t], 163);
        xa[t].ᐃᐃⵠⵠᐃ(xa[t].info);
      }
      xa = yx.Ⲇᐃᐃ[8];
      t = 0;
      for (; t < xa.length; t++) {
        rf(xa[t], 164);
        xa[t].ᐃᐃⵠⵠᐃ(xa[t].info);
      }
      xa = yx.Ⲇᐃᐃ[9];
      t = 0;
      for (; t < xa.length; t++) {
        rf(xa[t], 165);
        xa[t].ᐃᐃⵠⵠᐃ(xa[t].info);
      }
      xa = yx.Ⲇᐃᐃ[19];
      t = 0;
      for (; t < xa.length; t++) {
        rf(xa[t], 122);
        xa[t].ᐃᐃⵠⵠᐃ(xa[t].info);
      }
      xa = yx.Ⲇᐃᐃ[50];
      t = 0;
      for (; t < xa.length; t++) {
        rf(xa[t], 217);
        xa[t].ᐃᐃⵠⵠᐃ(xa[t].info);
      }
      var ya = yx.Ⲇᐃᐃ[5];
      for (t = 0; t < ya.length; t++) {
        rf(ya[t], 160);
        ya[t].ᐃᐃⵠⵠᐃ(ya[t].info);
      }
      ya = yx.Ⲇᐃᐃ[12];
      t = 0;
      for (; ya.length > t; t++) {
        rf(ya[t], 168);
        ya[t].ᐃᐃⵠⵠᐃ(ya[t].info);
      }
      ya = yx.Ⲇᐃᐃ[13];
      t = 0;
      for (; t < ya.length; t++) {
        rf(ya[t], 169);
        ya[t].ᐃᐃⵠⵠᐃ(ya[t].info);
      }
      ya = yx.Ⲇᐃᐃ[14];
      t = 0;
      for (; t < ya.length; t++) {
        rf(ya[t], 170);
        ya[t].ᐃᐃⵠⵠᐃ(ya[t].info);
      }
      ya = yx.Ⲇᐃᐃ[20];
      t = 0;
      for (; t < ya.length; t++) {
        rf(ya[t], 123);
        ya[t].ᐃᐃⵠⵠᐃ(ya[t].info);
      }
      ya = yx.Ⲇᐃᐃ[52];
      t = 0;
      for (; t < ya.length; t++) {
        rf(ya[t], 219);
        ya[t].ᐃᐃⵠⵠᐃ(ya[t].info);
      }
      var za = yx.Ⲇᐃᐃ[35];
      for (t = 0; za.length > t; t++) {
        var Aa = za[t];
        if (Aa.info > 0) {
          rf(Aa, 788);
        } else {
          rf(Aa, 182);
        }
      }
      var Ba = yx.Ⲇᐃᐃ[29];
      for (t = 0; t < Ba.length; t++) {
        rf(Ba[t], 159);
      }
      af(uw, i, m, b, e, 111, "g", 2);
      af(uw, i, m, b, e, 415, "gw", 2);
      af(uw, i, m, b, e, 112, "d", 2);
      af(uw, i, m, b, e, 416, "dw", 2);
      af(uw, i, m, b, e, 110, "p", 0);
      af(uw, i, m, b, e, 241, "m", 2);
      af(uw, i, m, b, e, 121, "a", 2);
      af(uw, i, m, b, e, 202, "re", 2);
      af(uw, i, m, b, e, 679, "cs", 3, 3);
      af(uw, i, m, b, e, 679, "cs", 2, 2);
      af(uw, i, m, b, e, 679, "cs", 1, 1);
      af(uw, i, m, b, e, 679, "cs", 0, 0);
      af(uw, i, m, b, e, 676, "cs", 3, 3);
      af(uw, i, m, b, e, 676, "cs", 2, 2);
      af(uw, i, m, b, e, 676, "cs", 1, 1);
      af(uw, i, m, b, e, 676, "cs", 0, 0);
      var Ca = yx.Ⲇᐃᐃ[100];
      for (t = 0; Ca.length > t; t++) {
        for (ca = 0; Ca[t].info > ca; ca++) {
          rf(Ca[t].ΔΔⵠΔ[ca], 294);
        }
      }
      af(uw, i, m, b, e, 108, "s", 2);
      var Da = yx.Ⲇᐃᐃ[24];
      for (t = 0; Da.length > t; t++) {
        rf(Da[t]);
      }
      Da = yx.Ⲇᐃᐃ[25];
      t = 0;
      for (; Da.length > t; t++) {
        rf(Da[t]);
      }
      Da = yx.Ⲇᐃᐃ[26];
      t = 0;
      for (; Da.length > t; t++) {
        rf(Da[t]);
      }
      Da = yx.Ⲇᐃᐃ[27];
      t = 0;
      for (; t < Da.length; t++) {
        rf(Da[t]);
      }
      Da = yx.Ⲇᐃᐃ[28];
      t = 0;
      for (; Da.length > t; t++) {
        rf(Da[t]);
      }
      var Ea = yx.Ⲇᐃᐃ[32];
      for (t = 0; Ea.length > t; t++) {
        uf(Ea[t]);
      }
      ea = yx.Ⲇᐃᐃ[1];
      t = 0;
      for (; t < ea.length; t++) {
        hf(ea[t]);
      }
      ea = yx.Ⲇᐃᐃ[6];
      t = 0;
      for (; t < ea.length; t++) {
        hf(ea[t]);
      }
      g = yx.Ⲇᐃᐃ[18];
      t = 0;
      for (; g.length > t; t++) {
        if (g[t].action == 2) {
          hf(g[t]);
        }
      }
      wa = yx.Ⲇᐃᐃ[34];
      t = 0;
      for (; t < wa.length; t++) {
        hf(wa[t]);
      }
      fa = yx.Ⲇᐃᐃ[22];
      t = 0;
      for (; fa.length > t; t++) {
        hf(fa[t]);
      }
      ha = yx.Ⲇᐃᐃ[23];
      t = 0;
      for (; ha.length > t; t++) {
        hf(ha[t]);
        ha[t].ᐃᐃⵠⵠᐃ(ha[t].info);
      }
      af(uw, i, m, b, e, 989, "c", 0);
      af(uw, i, m, b, e, 109, "t", 5, 4);
      af(uw, i, m, b, e, 413, "f", 2, 2);
      af(uw, i, m, b, e, 693, "plm", 0, 0);
      af(uw, i, m, b, e, 307, "b", 3, 2);
      af(uw, i, m, b, e, 109, "t", 3, 2);
      af(uw, i, m, b, e, 307, "b", 1, 0);
      af(uw, i, m, b, e, 413, "f", 1, 1);
      af(uw, i, m, b, e, 693, "plm", 1, 1);
      af(uw, i, m, b, e, 109, "t", 1, 0);
      af(uw, i, m, b, e, 413, "f", 0, 0);
      af(uw, i, m, b, e, 693, "plm", 2, 2);
      Ea = yx.Ⲇᐃᐃ[32];
      t = 0;
      for (; Ea.length > t; t++) {
        hf(Ea[t]);
      }
      var Fa = yx.Ⲇᐃᐃ[56];
      for (t = 0; Fa.length > t; t++) {
        rf(Fa[t], 221);
      }
      aa = yx.Ⲇᐃᐃ[0];
      t = 0;
      for (; aa.length > t; t++) {
        ba = aa[t];
        if (ba.ⲆᐃⲆᐃⲆⵠΔ === 1 && (ba.ⵠᐃᐃⲆⲆ < 180 || ba.ᐃΔⵠΔⵠ !== 227 && ba.ᐃΔⵠΔⵠ !== 228 && ba.ᐃΔⵠΔⵠ !== 91 && ba.ᐃΔⵠΔⵠ !== 229 && ba.ᐃΔⵠΔⵠ !== 230)) {
          ba.ΔⲆΔⲆⲆⲆⵠ = ΔⲆᐃ.ΔΔⲆⲆΔ(ba.ΔⲆΔⲆⲆⲆⵠ, 100, 0.018);
          ta = 1 + Math.min(1, Math.max(ba.ΔⲆΔⲆⲆⲆⵠ, 0) / 100) * 0.18;
          go.save();
          go.scale(ta, ta);
          zx.ⲆⵠΔ.x /= ta;
          zx.ⲆⵠΔ.y /= ta;
          ba.x /= ta;
          ba.y /= ta;
          ba.r.x /= ta;
          ba.r.y /= ta;
          ba.ᐃᐃᐃⲆΔⲆΔ();
          ba.ᐃⵠΔᐃ();
          zx.ⲆⵠΔ.x *= ta;
          zx.ⲆⵠΔ.y *= ta;
          ba.x *= ta;
          ba.y *= ta;
          ba.r.x *= ta;
          ba.r.y *= ta;
          go.restore();
        }
      }
      var Ga = yx.Ⲇᐃᐃ[38];
      for (t = 0; Ga.length > t; t++) {
        rf(Ga[t], 190);
        Ga[t].ᐃᐃⵠⵠᐃ(Ga[t].info);
      }
      var Ha = yx.Ⲇᐃᐃ[90];
      for (t = 0; t < Ha.length; t++) {
        rf(Ha[t], 245, 246);
      }
      var Ia = yx.Ⲇᐃᐃ[42];
      for (t = 0; t < Ia.length; t++) {
        rf(Ia[t], 201);
      }
      aa = yx.Ⲇᐃᐃ[0];
      t = 0;
      for (; t < aa.length; t++) {
        if (((ba = aa[t]).ᐃΔⵠΔⵠ === 227 || ba.ᐃΔⵠΔⵠ === 228 || ba.ᐃΔⵠΔⵠ === 91 || ba.ᐃΔⵠΔⵠ === 229 || ba.ᐃΔⵠΔⵠ === 230) && ba.ⵠᐃᐃⲆⲆ > 180) {
          ba.ⲆΔⲆⲆⵠⵠⵠ = 1;
          go.save();
          ta = 1 + Math.min(1, Math.max(ba.ⵠⵠⵠⵠⵠ - 30, 0) / 180) * 0.35;
          go.scale(ta, ta);
          zx.ⲆⵠΔ.x /= ta;
          zx.ⲆⵠΔ.y /= ta;
          ba.x /= ta;
          ba.y /= ta;
          ba.r.x /= ta;
          ba.r.y /= ta;
          ba.ᐃᐃᐃⲆΔⲆΔ();
          ba.ᐃⵠΔᐃ();
          zx.ⲆⵠΔ.x *= ta;
          zx.ⲆⵠΔ.y *= ta;
          ba.x *= ta;
          ba.y *= ta;
          ba.r.x *= ta;
          ba.r.y *= ta;
          go.restore();
        }
      }
      sa = yx.Ⲇᐃᐃ[91];
      t = 0;
      for (; t < sa.length; t++) {
        if (sa[t].ⲆΔⲆⲆⵠⵠⵠ === 1) {
          rf(sa[t]);
        }
      }
      V = yx.Ⲇᐃᐃ[64];
      t = 0;
      for (; t < V.length; t++) {
        if (V[t].scale > 1) {
          rf(V[t], 449, 463);
        }
      }
      V = yx.Ⲇᐃᐃ[69];
      t = 0;
      for (; t < V.length; t++) {
        if (V[t].scale > 1) {
          rf(V[t], 450, 464);
        }
      }
      var Ja = yx.Ⲇᐃᐃ[74];
      for (t = 0; Ja.length > t; t++) {
        rf(Ja[t], 235, 1107);
      }
      var Ka = yx.Ⲇᐃᐃ[75];
      for (t = 0; Ka.length > t; t++) {
        rf(Ka[t], 238, 1128);
      }
      if ((ow += Gx * 15) > 60) {
        ow -= 60;
      }
      af(pw, i, m, b, e, 1041, "fo", 2);
      af(pw, i, m, b, e, 244, "fod", 2);
    })();
    if (xx.ΔⵠⵠΔΔ && yx.mode !== 2 && yx.mode !== 4 && yx.mode !== 5) {
      (function () {
        var a = zx.ΔⲆΔᐃᐃ;
        if (a.ᐃᐃⵠΔᐃ === 0) {
          a.ΔΔⲆᐃΔ = Math.max(0, a.ΔΔⲆᐃΔ - Gx / 10);
        } else {
          a.ΔΔⲆᐃΔ = Math.min(1, a.ΔΔⲆᐃΔ + Gx / 10);
        }
        for (var b = a.ⲆᐃᐃⵠⲆ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ΔⵠΔ(d);
          lf(471, d.id, zx.ⲆⵠΔ.x + d.x, zx.ⲆⵠΔ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          d = b[c];
          if (d.ⲆⲆᐃᐃΔ <= 0 || -zx.ⲆⵠΔ.x + uo < d.x || d.x < -zx.ⲆⵠΔ.x - zx.ⲆⵠΔ.w / 2 || -zx.ⲆⵠΔ.y + xp < d.y) {
            b.splice(c, 1);
          }
        }
        var e = -zx.ⲆⵠΔ.y;
        if (yx.ᐃⵠΔᐃⲆ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = zx.ⵠΔⲆⲆⵠ;
        if (a.ᐃᐃⵠΔᐃ === 0) {
          a.ΔΔⲆᐃΔ = Math.max(0, a.ΔΔⲆᐃΔ - Gx / 10);
        } else {
          a.ΔΔⲆᐃΔ = Math.min(1, a.ΔΔⲆᐃΔ + Gx / 10);
        }
        for (var b = a.ⲆᐃᐃⵠⲆ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ΔⵠΔ(d);
          lf(470, d.id, zx.ⲆⵠΔ.x + d.x, zx.ⲆⵠΔ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ⲆⲆᐃᐃΔ <= 0 || d.x > -zx.ⲆⵠΔ.x + uo || -zx.ⲆⵠΔ.x > d.x || d.y > -zx.ⲆⵠΔ.y + xp) {
            b.splice(c, 1);
          }
        }
        var e = -zx.ⲆⵠΔ.y;
        if (yx.ΔΔⵠⵠⵠ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = zx.ⲆⲆⲆⲆΔⵠᐃ;
        for (var b = a.ⲆᐃᐃⵠⲆ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ΔⵠΔ(d);
          lf(942, d.id, zx.ⲆⵠΔ.x + d.x, zx.ⲆⵠΔ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ⲆⲆᐃᐃΔ <= 0 || -zx.ⲆⵠΔ.x + uo < d.x || d.x < -zx.ⲆⵠΔ.x || -zx.ⲆⵠΔ.y + xp < d.y) {
            b.splice(c, 1);
          }
        }
        var e = -zx.ⲆⵠΔ.y;
        if (yx.ⵠΔᐃⲆⵠ > -1000) {
          a.add(e);
        }
      })();
    }
    if (yx.transition && a) {
      yx.transition = Il;
      yx.ⵠⲆΔⲆ.ⵠΔΔ = 0;
      yx.ⵠⲆΔⲆ.ⵠΔⲆ = false;
    }
  }
  function af(b, c, d, e, f, i, a, j, k, h) {
    if (yx.transition) {
      go.globalAlpha = 1;
      b(c, d, e, f, i, a, j, k, h);
      yx.time = yx.time ? 0 : 1;
      go.globalAlpha = 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ;
      b(c, d, e, f, i, a, j, k, h);
      yx.time = yx.time ? 0 : 1;
      go.globalAlpha = 1;
    } else {
      b(c, d, e, f, i, a, j, k, h);
    }
  }
  function rf(a, b, c) {
    if (yx.transition) {
      go.globalAlpha = 1;
      a.ᐃⵠΔᐃ(b, c);
      yx.time = yx.time ? 0 : 1;
      go.globalAlpha = 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ;
      a.ᐃⵠΔᐃ(b, c);
      yx.time = yx.time ? 0 : 1;
      go.globalAlpha = 1;
    } else {
      a.ᐃⵠΔᐃ(b, c);
    }
  }
  function sf(a) {
    go.save();
    go.translate(zx.ⲆⵠΔ.x + a.x, zx.ⲆⵠΔ.y + a.y);
    go.rotate(a.angle);
    go.globalAlpha = a.alpha;
    var b = ᐃᐃ[a.id][yx.time];
    qp(go, b, -b.width / 2, -b.height / 2);
    go.globalAlpha = 1;
    go.restore();
  }
  function hf(a, b) {
    if (yx.transition) {
      go.globalAlpha = 1;
      a.ΔΔⵠⵠᐃ(b);
      yx.time = yx.time ? 0 : 1;
      go.globalAlpha = 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ;
      a.ΔΔⵠⵠᐃ(b);
      yx.time = yx.time ? 0 : 1;
      go.globalAlpha = 1;
    } else {
      a.ΔΔⵠⵠᐃ(b);
    }
  }
  function gf(a) {
    go.globalAlpha = a.alpha;
    Cd(go, a.x + zx.ⲆⵠΔ.x, a.y + zx.ⲆⵠΔ.y, a.r);
    cd(go, Mr.ΔᐃⲆΔⵠΔⵠ[yx.time]);
    go.globalAlpha = 1;
  }
  function lf(a, b, c, d, e) {
    if (yx.transition && e == 1) {
      go.globalAlpha = 1;
      qp(go, ᐃᐃ[a][yx.time][b], c, d);
      yx.time = yx.time ? 0 : 1;
      go.globalAlpha = 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ;
      qp(go, ᐃᐃ[a][yx.time][b], c, d);
      yx.time = yx.time ? 0 : 1;
      go.globalAlpha = 1;
    } else {
      go.globalAlpha = e;
      qp(go, ᐃᐃ[a][yx.time][b], c, d);
      go.globalAlpha = 1;
    }
  }
  function uf(a, b) {
    if (yx.transition) {
      go.globalAlpha = 1;
      a.ⲆΔΔΔⵠ(b);
      yx.time = yx.time ? 0 : 1;
      go.globalAlpha = 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ;
      a.ⲆΔΔΔⵠ(b);
      yx.time = yx.time ? 0 : 1;
      go.globalAlpha = 1;
    } else {
      a.ⲆΔΔΔⵠ(b);
    }
  }
  function bf(b, c, d, e) {
    var f = c.width;
    var g = c.height;
    var a = Math.floor(f / 2);
    var h = Math.floor(g / 2);
    if (yx.transition) {
      go.globalAlpha = 1;
      qp(go, ᐃᐃ[b][yx.time], 0, 0, f, g, d, e, a, h);
      yx.time = yx.time ? 0 : 1;
      go.globalAlpha = 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ;
      qp(go, ᐃᐃ[b][yx.time], 0, 0, f, g, d, e, a, h);
      yx.time = yx.time ? 0 : 1;
      go.globalAlpha = 1;
    } else {
      qp(go, c, 0, 0, f, g, d, e, a, h);
    }
  }
  function df(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = zx.ⲆⵠΔ.y + j + 710;
    var g = Math.max(zx.ⲆⵠΔ.x + e, 0);
    var l = Math.max(-zx.ⲆⵠΔ.x + uo - i - 100, 0);
    var t = g;
    var b = uo - g - l;
    if (o) {
      var d = q.ᐃᐃⲆ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var A = u;
    var c = t;
    var p = -d.x + 0;
    var C = b;
    var F = u += -d.x + 0 + 2;
    if (o) {
      d = q.ᐃᐃⲆ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var G = u;
    var y = t;
    var w = f;
    var H = b;
    var K = (u += f + 2) - 2;
    if (o) {
      d = q.ᐃᐃⲆ(s);
    } else {
      d = s.r;
    }
    if (K > u + (f = h - 350 - u - d.x)) {
      var x = k;
      var L = u;
      var M = t;
      var B = f;
      var D = b;
      var E = u += f + 2;
    } else {
      x = $n;
      u = K;
      E = -1;
    }
    f = h - 700 - u;
    if (yx.transition) {
      var N = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
      go.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
    } else {
      go.fillStyle = Mr.ΔᐃⲆⲆⵠ[yx.time];
    }
    go.fillRect(c, A, C, p);
    if (o) {
      if (yx.transition) {
        N = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
        go.fillStyle = Bw(15, 70, 76, 42, 139, 155, N);
      } else {
        go.fillStyle = Mr.ΔⲆⵠΔᐃⲆΔ[yx.time];
      }
    } else if (yx.transition) {
      N = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
      go.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
    } else {
      go.fillStyle = Mr.ΔᐃⲆⲆⵠ[yx.time];
    }
    go.fillRect(y, G, H, w);
    if (x) {
      if (o) {
        if (yx.transition) {
          N = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
          go.fillStyle = Bw(17, 94, 96, 169, 214, 211, N);
        } else {
          go.fillStyle = Mr.ΔⲆΔᐃⲆⵠᐃ[yx.time];
        }
      } else if (yx.transition) {
        N = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
        go.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
      } else {
        go.fillStyle = Mr.ΔᐃⲆⲆⵠ[yx.time];
      }
      go.fillRect(M, L, D, B);
    }
    if (xx.ΔⵠⵠΔΔ && o) {
      q.ΔΔⵠⲆΔⵠΔᐃᐃ(K, E, F, h, -zx.ⲆⵠΔ.x + c, -zx.ⲆⵠΔ.x + c + C);
    }
  }
  function vf(b, e, f, i, j, k) {
    var a = i.w1;
    var n = i.w2;
    var o = i.w3;
    var h = zx.ⲆⵠΔ.y + b + 710;
    var g = Math.max(zx.ⲆⵠΔ.x + e, 0);
    var l = Math.max(-zx.ⲆⵠΔ.x + uo - f - 100, 0);
    var q = g;
    var d = uo - g - l;
    if (k) {
      var r = i.ᐃᐃⲆ(a).x;
    } else {
      r = a.r.x;
    }
    var s = h + 0;
    0;
    s += -r + 0 + 2;
    if (k) {
      r = i.ᐃᐃⲆ(n).x;
    } else {
      r = n.r.x;
    }
    var t = h - 250 - s - r;
    var u = (s += t + 2) - 2;
    if (k) {
      r = i.ᐃᐃⲆ(o).x;
    } else {
      r = o.r.x;
    }
    if (s + (t = h - 350 - s - r) < u) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (k > 0 && j.ⵠΔᐃⵠᐃΔᐃ === 1) {
      if (yx.transition) {
        var v = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
        go.fillStyle = Bw(15, 77, 72, 252, 239, 187, v);
      } else {
        go.fillStyle = Mr.ⲆᐃⵠⵠⵠΔⲆ[yx.time];
      }
      go.fillRect(q, s, d, t);
    } else {
      if (yx.transition) {
        v = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
        go.fillStyle = Bw(j.Δᐃᐃ[0], j.Δᐃᐃ[1], j.Δᐃᐃ[2], j.ⵠΔⵠ[0], j.ⵠΔⵠ[1], j.ⵠΔⵠ[2], v);
      } else {
        go.fillStyle = j.ⵠⲆⵠⵠⲆ[yx.time];
      }
      go.fillRect(q, s, d, t);
    }
  }
  function mf(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = zx.ⲆⵠΔ.x + j - 700;
    var g = Math.max(zx.ⲆⵠΔ.y + e, 0);
    var l = Math.max(-zx.ⲆⵠΔ.y + xp - i - 100, 0);
    var t = g;
    var b = xp - g - l;
    if (o) {
      var d = q.ᐃᐃⲆ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = d.x + 0;
    var C = b;
    var G = u += d.x + 0 - 2;
    if (o) {
      d = q.ᐃᐃⲆ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f - 2) - 2;
    if (o) {
      d = q.ᐃᐃⲆ(s);
    } else {
      d = s.r;
    }
    if (u + (f = h + 350 - u + d.x) - 3 > k) {
      var A = Bl;
      var L = u;
      var J = t;
      var B = f;
      var D = b;
      var E = u += f - 2;
    } else {
      A = Ah;
      u = k;
      E = -1;
    }
    f = h + 700 - u;
    if (yx.transition) {
      var M = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
      go.fillStyle = Bw(9, 55, 63, 11, 106, 132, M);
    } else {
      go.fillStyle = Mr.ΔᐃⲆⲆⵠ[yx.time];
    }
    go.fillRect(F, c, p, C);
    if (o) {
      if (yx.transition) {
        M = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
        go.fillStyle = Bw(15, 70, 76, 42, 139, 155, M);
      } else {
        go.fillStyle = Mr.ΔⲆⵠΔᐃⲆΔ[yx.time];
      }
    } else if (yx.transition) {
      M = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
      go.fillStyle = Bw(9, 55, 63, 11, 106, 132, M);
    } else {
      go.fillStyle = Mr.ΔᐃⲆⲆⵠ[yx.time];
    }
    go.fillRect(H, y, w, K);
    if (A) {
      if (o) {
        if (yx.transition) {
          M = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
          go.fillStyle = Bw(17, 94, 96, 169, 214, 211, M);
        } else {
          go.fillStyle = Mr.ΔⲆΔᐃⲆⵠᐃ[yx.time];
        }
      } else if (yx.transition) {
        M = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
        go.fillStyle = Bw(9, 55, 63, 11, 106, 132, M);
      } else {
        go.fillStyle = Mr.ΔᐃⲆⲆⵠ[yx.time];
      }
      go.fillRect(L, J, B, D);
    }
    if (xx.ΔⵠⵠΔΔ && o) {
      q.ᐃᐃⵠΔΔⲆⲆΔᐃ(k, E, G, h, -zx.ⲆⵠΔ.y + c, -zx.ⲆⵠΔ.y + c + C);
    }
  }
  var cf = 0;
  var pf = 1;
  var Cf = 2;
  var Tf = 0;
  var ff = 1;
  var zf = 2;
  function yf(c, e, f, i, j, k, n, p, q, r, t) {
    if (q === Ya) {
      q = 0;
    }
    if (p === ej) {
      p = 0;
    }
    if (Qq === r) {
      r = 0;
    }
    if (t === undefined) {
      t = 1;
    }
    if (k !== 1) {
      k = 0;
    }
    if (i) {
      var w = i;
    }
    var u;
    var x = {
      width: c,
      height: e,
      ⵠⵠ: w,
      state: Tf,
      translate: {
        x: p,
        y: q,
        ᐃⵠΔⲆⵠ: p,
        ᐃᐃΔΔᐃ: q
      },
      ΔⵠΔⵠⵠⵠΔⲆⲆ: k,
      ⵠᐃⵠᐃ: 0,
      callback: n,
      position: r,
      active: t
    };
    function d() {
      return x.ⵠⵠ[x.state];
    }
    function v(a) {
      var b = x.translate;
      if (x.width === 0 || x.height === 0) {
        x.width = x.ⵠⵠ[0].width;
        x.height = x.ⵠⵠ[0].height;
      }
      return a.x > b.x && a.x < b.x + x.width / j && a.y > b.y && a.y < b.y + x.height / j;
    }
    k = function () {
      var a = 0;
      if (x.ΔⵠΔⵠⵠⵠΔⲆⲆ === 1) {
        if (ff === x.state || x.state === zf) {
          x.ⵠᐃⵠᐃ = (0 + Gx * 1000) % 1000;
        } else if (0 > 0) {
          x.ⵠᐃⵠᐃ = 500 < 0 ? 0 + Gx * 1000 : 0 - Gx * 1000;
          if (0 < 0 || 1000 < 0) {
            x.ⵠᐃⵠᐃ = 0;
          }
        }
        a = ΔⲆᐃ.ΔⲆΔⲆⲆ(500 < 0 ? 2 : 0) * 0.2;
      }
      return a;
    };
    if ((j = j === 3 ? 3 : j === 1 ? 2 : 1) === 2) {
      u = function (a) {
        var b = 1 + k();
        var c = d();
        var e = b * x.width / 2;
        var f = b * x.height / 2;
        var g = (e - x.width / 2) / 2;
        var h = (f - x.height / 2) / 2;
        qp(a, c, x.translate.x - g, x.translate.y - h, e, f);
      };
    } else if (j === 3) {
      u = function (b) {
        var c = d();
        var e = x.width;
        var f = x.height;
        var g = (e - x.width) / 2;
        var h = (f - x.height) / 2;
        qp(b, c, x.translate.x - g, x.translate.y - h, e, f);
      };
      j = 1;
    } else {
      u = function (a) {
        qp(a, d(), x.translate.x, x.translate.y);
      };
    }
    return {
      info: x,
      ᐃᐃᐃⵠ: function (a, b, c) {
        if (v(b)) {
          if (pf == c) {
            x.state = zf;
          } else if (Cf == c || c == cf && x.state != zf) {
            x.state = ff;
          }
          return _q;
        } else {
          x.state = Tf;
          return false;
        }
      },
      ᐃⵠΔᐃ: u,
      ᐃⲆⲆⲆΔⲆΔ: v
    };
  }
  function wf(f, j, i, k, m, n, a, q, t, w, g, l, u, b, x) {
    if (f.length === 0) {
      f = " ";
    }
    if (a === undefined) {
      a = 0;
    }
    if (q === Ks) {
      q = 0;
    }
    if (t === undefined) {
      t = 0;
    }
    if (b === undefined) {
      b = 0;
    }
    var v = document.createElement("canvas");
    var c = v.getContext("2d");
    c.textBaseline = "middle";
    c.font = (Ks !== x ? x + " " : "") + k + "px " + j;
    m = m !== mb ? Math.min(c.measureText(f).width, m) : c.measureText(f).width;
    v.width = m + a;
    v.height = k + q;
    if (n !== undefined) {
      if (mi !== g) {
        c.globalAlpha = g;
      }
      c.fillStyle = n;
      if (l !== undefined) {
        ⵠΔΔΔⲆᐃΔᐃΔ(c, t + 2, t, m + a - t * 2 - 4, k + q - t * 2, l);
        c.fill();
      } else {
        c.fillRect(t, t, m + a - t * 2, k + q - t * 2);
      }
      c.globalAlpha = 1;
      if (t !== 0) {
        c.lineWidth = t;
        c.strokeStyle = w;
        c.stroke();
      }
    }
    c.textBaseline = "middle";
    c.font = (x !== undefined ? x + " " : "") + k + "px " + j;
    if (u !== rk) {
      c.strokeStyle = u;
      c.lineWidth = b;
      c.lineJoin = "miter";
      c.miterLimit = 2;
      c.strokeText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(k / 2), m);
    }
    c.fillStyle = i;
    c.fillText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(k / 2), m);
    v.w2 = v.width / 2;
    v.ΔⲆΔⵠⵠ = v.height / 2;
    return v;
  }
  function Pf(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  function kf(b, c, d, e, f, g) {
    const a = (b + 20621) % 65363;
    const i = (16 << (c >> 16 & 255)) + (8 << (c >> 0 & 255)) + (24 << (c >> 8 & 255)) + (0 << (c >> 24 & 255));
    const j = ~(g & 44) & g | ~(g & 44) & 44;
    return ((35426 + (Ew(a, i, ((d + 44873) * 22695477 + 1) % 4294967296, ~(e & 18623) & (e | 18623), f ^ 49701) ^ function (b, c, d) {
      const e = (1 + (10866 + b) * 22695477) % 4294967296;
      const f = ~(c & 40874) & 40874 | ~(c & 40874) & c;
      const g = ~(d & 13382) & d | ~(d & 13382) & 13382;
      const a = Ek(e, f, g, e, f);
      const h = wb(g, e, f);
      return (58193 + (a ^ h)) % 65478;
    }(j, a, i))) * 22695477 + 1) % 4294967296;
  }
  function Af(b, c, d, e, f) {
    var g = {
      x: d,
      y: e,
      ᐃⵠΔⲆⵠ: d,
      ᐃᐃΔΔᐃ: e
    };
    return {
      translate: g,
      ᐃⵠΔᐃ: function (a) {
        qp(a, b, g.x, g.y, b.width / 2, b.height / 2);
      },
      active: c,
      position: f
    };
  }
  var xf = "send";
  var Jf = ΔⲆᐃ.ⲆΔⲆⲆⵠᐃᐃ("id") === "1" ? 1 : 0;
  var Mf = ΔⲆᐃ.ⲆΔⲆⲆⵠᐃᐃ("password");
  var Bf = ΔⲆᐃ.ⲆΔⲆⲆⵠᐃᐃ("debug") || undefined;
  if (Ks !== Bf) {
    Bf = JSON.parse(_a.decodeURIComponent(Bf));
  }
  var Gw = ΔⲆᐃ.ⲆΔⲆⲆⵠᐃᐃ("server") || cl;
  var Ef = ΔⲆᐃ.ⲆΔⲆⲆⵠᐃᐃ("region") || mi;
  var If = "starve.io";
  var Sf = "https://" + If;
  var Qf = {
    ΔⵠᐃΔΔᐃΔ: 256,
    ⲆΔⲆᐃⲆⵠᐃ: 128,
    ⲆⲆᐃᐃᐃ: 4,
    ᐃᐃᐃΔ: 2,
    IDLE: 64,
    ⵠⲆⵠⲆᐃᐃΔ: 16,
    ΔΔⲆⲆΔⲆΔ: 32,
    ⲆⲆᐃⵠᐃᐃⲆ: 8,
    ΔᐃⵠᐃⵠⲆᐃΔⵠ: 1
  };
  var _f = [{
    ⲆᐃⲆⲆⲆ: 1000,
    items: [[2, 113], [1, 117], [8, 110], [1, 143]]
  }, {
    ⲆᐃⲆⲆⲆ: 2000,
    items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
  }, {
    ⲆᐃⲆⲆⲆ: 4000,
    items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
  }, {
    ⲆᐃⲆⲆⲆ: 8000,
    items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
  }, {
    ⲆᐃⲆⲆⲆ: 16000,
    items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
  }, {
    ⲆᐃⲆⲆⲆ: 16000,
    items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
  }, {
    ⲆᐃⲆⲆⲆ: 16000,
    items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
  }, {
    ⲆᐃⲆⲆⲆ: 16000,
    items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
  }, {
    ⲆᐃⲆⲆⲆ: 16000,
    items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
  }, {
    ⲆᐃⲆⲆⲆ: 20000,
    items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
  }];
  const Ff = [];
  let Rf = 0;
  var Hw = {
    ΔⲆᐃⲆⵠΔΔΔⵠ: 200,
    ᐃⵠᐃⲆΔⵠᐃ: 2,
    ᐃΔⲆΔⵠⵠᐃᐃⵠ: 5,
    ⲆⲆΔΔⲆᐃⲆ: 0,
    ᐃⲆᐃΔᐃᐃΔⵠΔ: 8000,
    ⲆΔⲆΔⵠⲆᐃΔⲆ: 5,
    ⲆⲆΔⲆᐃⲆΔᐃⵠ: 20,
    ΔᐃⵠⵠⲆᐃᐃⵠᐃ: 125000,
    ⲆⵠⵠΔΔΔᐃᐃⲆ: 14,
    ⵠᐃᐃⲆⲆᐃᐃ: 4,
    ᐃⲆᐃⲆⵠⲆⲆ: 4,
    ΔⲆⲆᐃᐃⲆⲆΔⵠ: 50,
    ΔᐃⲆⵠⵠⵠΔ: 3,
    ᐃⵠᐃᐃΔᐃΔ: 1,
    ⵠⵠⲆΔⲆⵠΔⵠᐃ: 5,
    ᐃⵠⵠⵠⲆⲆⵠⲆΔ: 3,
    ⲆΔⲆᐃⲆⲆⲆⲆⲆ: "[21]",
    ⵠⲆⵠⲆᐃᐃΔ: 0.2,
    ᐃⲆᐃⵠΔΔⵠ: 52,
    ΔⵠⵠᐃⲆΔⲆ: 0.2,
    ᐃⵠᐃᐃΔΔᐃΔᐃ: 60000,
    ΔⵠΔⵠⵠⵠᐃᐃᐃ: 0.58,
    ⲆΔΔⵠᐃΔⵠⵠⲆ: 14,
    ΔΔΔᐃⲆⵠⵠΔΔ: 2000,
    ⵠᐃⵠᐃᐃᐃⵠ: 600000
  };
  var Wf = {
    ⵠⲆⵠ: 480000,
    ⵠΔⵠⵠᐃΔᐃ: 10,
    ⵠᐃⲆΔⵠᐃᐃ: 16,
    ΔⲆⵠΔᐃⵠΔΔⲆ: 6,
    ΔΔᐃⵠⵠⲆⵠ: 60,
    ΔΔⵠᐃⲆ: 1,
    ⵠⵠΔⲆᐃ: 2,
    ⲆⲆⵠΔⵠ: 4,
    ΔᐃⲆᐃⲆ: 8,
    ΔⵠⵠᐃⲆΔⲆ: 10,
    ΔᐃᐃⵠⵠΔⵠ: 100,
    ΔⲆᐃᐃΔⲆⲆ: 100,
    ΔᐃⲆΔⵠⲆⲆ: 100,
    ⲆΔΔⲆᐃⲆⲆΔⵠ: 100,
    ΔⵠΔΔᐃⵠⵠ: 100,
    ᐃⵠᐃⲆⲆΔⲆ: 100,
    ᐃⲆⵠΔⵠⵠΔⲆⲆ: 100,
    ᐃⵠᐃⲆⲆΔⲆ: 100,
    ΔⲆΔᐃΔⵠΔ: 100,
    ⲆⲆΔΔⲆⵠⲆ: 100,
    ⵠΔᐃⵠΔ: 0,
    ⲆⵠⵠΔΔⲆⵠ: 1,
    ᐃΔΔΔᐃ: 2,
    ⵠⵠᐃΔⲆ: 3,
    ΔⲆⵠⲆⵠ: 4,
    ᐃⲆΔⲆⵠΔᐃ: 5,
    ᐃΔⵠΔⲆ: 6,
    ΔⲆⲆᐃⵠ: 7,
    ᐃⲆⲆⲆᐃⲆⲆᐃⵠ: {
      frankfurt: "Frankfurt",
      osaka: "Osaka",
      losangeles: "Los Angeles",
      sydney: "Sydney",
      atlanta: "Atlanta"
    },
    ⲆΔⲆⲆⲆᐃⵠ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ΔⵠᐃⲆΔΔⲆ: 0,
    ⲆⵠⵠⵠⵠΔⲆ: 0,
    ᐃⲆⵠΔΔᐃᐃ: 30,
    ᐃΔⵠⵠⵠⵠΔΔᐃ: 2,
    ΔΔᐃⵠⵠⲆⵠ: 60000,
    ᐃⲆⵠⵠᐃᐃⲆΔᐃ: 0,
    ΔⵠⵠⲆⵠᐃΔΔⲆ: 0,
    ⵠⵠᐃᐃⲆΔⲆⵠᐃ: 50,
    ᐃΔⵠⵠΔⲆᐃᐃⲆ: 0,
    ΔΔⵠᐃⵠⲆΔΔⵠ: 40,
    ⲆⲆΔⵠⵠᐃΔⵠⲆ: 39,
    ΔΔᐃᐃⲆⵠᐃΔⵠ: 830,
    ⵠⲆⲆᐃⵠᐃΔ: 25,
    ΔΔΔᐃΔⲆⵠ: 8,
    ΔΔⲆΔᐃ: 0,
    ⲆⲆⵠⲆᐃ: 0,
    ⵠᐃⲆⲆΔⲆΔ: 200,
    ΔⲆⵠⵠΔΔⵠ: 0,
    ΔⲆΔⲆΔ: 250,
    ⲆⵠⲆⲆᐃⲆᐃ: 150,
    ΔⲆⵠⵠᐃⵠΔ: 0,
    ᐃᐃⵠⲆⲆ: 350,
    ᐃⲆⵠⲆⲆΔⲆ: 100,
    ᐃⲆⲆⲆᐃⲆⵠ: 700,
    ⲆᐃⵠΔΔ: 39879
  };
  var Gf = [];
  for (Ob = 0; Ob < 500; Ob++) {
    Gf[Ob] = 0;
  }
  Gf[47] = 1;
  Gf[57] = 1;
  Gf[0] = 1;
  Gf[5] = 1;
  Gf[6] = 1;
  Gf[30] = 1;
  Gf[19] = 1;
  Gf[9] = 1;
  Gf[62] = 1;
  Gf[63] = 1;
  Gf[13] = 1;
  Gf[14] = 1;
  Gf[15] = 1;
  Gf[33] = 1;
  Gf[34] = 1;
  Gf[16] = 1;
  Gf[17] = 1;
  Gf[12] = 1;
  ;
  Gf[18] = 1;
  var Lf = [{
    time: 2880000
  }, {
    time: 1440000
  }, {
    time: 1920000
  }, {
    time: 1440000
  }, {
    time: 2880000
  }, {
    time: 2400000
  }, {
    time: 2400000
  }, {
    time: 4800000
  }, {
    time: 2880000
  }, {
    time: 3360000
  }, {
    time: 2880000
  }, {
    time: 3840000
  }, {
    time: 3360000
  }];
  var Nf = {
    Δⵠⵠⵠᐃ: 26,
    ΔⲆᐃᐃⵠ: 72,
    ΔⵠⲆⲆⲆ: 54,
    ⲆᐃⲆⵠΔ: 40,
    ΔⵠΔⲆⵠ: 2,
    ⵠᐃᐃᐃΔ: 35,
    ΔΔΔΔⲆ: 41,
    ΔᐃⲆᐃ: 0,
    ᐃⲆᐃΔⵠ: 28,
    ΔᐃᐃΔⲆ: 55,
    ᐃⵠⵠΔⵠ: 11,
    ⲆᐃΔⲆⲆ: 16,
    ᐃⲆⵠⲆⲆ: 68,
    ⲆᐃⵠΔΔ: 3,
    ΔΔⵠΔΔ: 36,
    ΔⲆⲆᐃⲆ: 13,
    ΔⲆⲆⲆΔ: 20,
    ⲆᐃⲆΔⲆ: 75,
    ΔᐃᐃᐃΔ: 69,
    ᐃⲆⵠⲆᐃ: 6,
    ⵠⵠⵠᐃᐃ: 67,
    ΔΔⵠΔᐃ: 9,
    ᐃΔΔⲆᐃ: 78,
    ᐃⵠⲆⵠⵠ: 46,
    ᐃᐃΔΔⲆ: 51,
    ⲆⲆⲆΔⲆΔᐃ: 85,
    ⲆᐃⵠⵠⲆ: 81,
    ⵠᐃⵠᐃᐃ: 79,
    ΔⲆᐃⲆΔ: 53,
    ᐃΔᐃᐃᐃ: 88,
    ΔⲆⲆΔᐃ: 1,
    ᐃⵠΔΔⵠ: 66,
    ⲆᐃᐃⲆΔ: 82,
    ΔΔⵠⵠΔ: 87,
    ⲆᐃᐃΔⵠ: 27,
    ⵠΔⲆⲆᐃ: 60,
    ΔᐃⲆⲆᐃⵠΔ: 83,
    ⲆΔⵠΔⲆ: 47,
    ᐃᐃⲆⲆΔ: 29,
    ΔΔⵠᐃΔ: 50,
    ΔᐃⵠΔᐃ: 12,
    ᐃⲆΔΔᐃ: 14,
    ⲆⵠⵠᐃⵠΔⵠ: 84,
    ⵠⵠⲆΔΔ: 73,
    ΔⲆᐃᐃΔ: 62,
    ᐃΔᐃⵠᐃ: 25,
    ⲆⲆᐃⲆΔ: 42,
    ΔⵠᐃΔΔ: 22,
    ᐃᐃΔᐃᐃⵠΔ: 76,
    ⲆΔⵠⲆᐃ: 44,
    ⲆΔⵠⲆⵠ: 31,
    ᐃΔⵠⲆⵠ: 70,
    ⵠⲆΔⲆΔ: 10,
    ᐃⵠⲆⲆⵠ: 34,
    ΔⵠΔⵠⵠ: 86,
    ΔⲆᐃⲆᐃ: 30,
    ΔᐃᐃⲆⲆ: 17,
    ᐃⲆⲆⵠᐃ: 23,
    ΔⵠⲆⲆⵠ: 18,
    ᐃⲆⲆⵠⵠ: 80,
    ᐃⲆΔⵠⲆ: 56,
    ᐃⵠⵠᐃΔ: 7,
    ⲆᐃᐃⲆᐃ: 91,
    ⲆᐃⲆΔⵠ: 43,
    ⵠᐃⵠⵠᐃ: 48,
    Δᐃⵠⵠⵠ: 63,
    ΔΔΔⵠᐃ: 33,
    ⲆΔΔᐃᐃ: 21,
    ⲆΔⲆⵠΔ: 90,
    ⲆᐃᐃⵠΔ: 61,
    ⲆⲆΔᐃΔ: 52,
    Ⲇᐃⵠᐃᐃ: 49,
    ΔⵠΔᐃⲆ: 64,
    ᐃᐃⲆΔᐃ: 37,
    ᐃⵠΔⵠΔ: 5,
    ΔⲆΔⲆⵠ: 38,
    ⵠΔΔᐃⵠ: 45,
    ᐃᐃⵠᐃᐃ: 19,
    ⲆᐃⵠΔⲆ: 15,
    ⵠⵠΔⲆΔ: 4,
    ⲆⲆⵠⵠⵠ: 77,
    ΔᐃⲆΔᐃ: 74,
    ⲆᐃⲆⵠⵠᐃΔ: 89,
    Ⲇᐃⵠⵠᐃ: 24,
    ⵠⲆⲆᐃⲆ: 100,
    ΔᐃᐃᐃⲆ: 65,
    ⲆⲆΔⵠᐃ: 32,
    ΔⵠᐃᐃⲆ: 39,
    ⵠⲆⵠᐃΔ: 8,
    ⲆⵠⵠⲆΔ: 71
  };
  var qf = [[24, 108], [25, 111], [26, 112], [27, 121], [28, 202]];
  function Hf(a) {
    const b = function () {
      _a.addEventListener("mousemove", function () {
        b();
      });
    };
    b();
  }
  function Uf() {
    this.ⵠⲆⵠΔⵠ = "";
    this.ⵠⲆᐃᐃ = 0;
    this.ⵠΔⵠⲆⲆ = 0;
    this.ᐃΔⲆΔΔ = 0;
    this.ᐃΔⲆⲆΔΔΔ = 0;
    this.ⲆⵠᐃⲆᐃ = 0;
    this.ᐃΔⲆⵠⲆ = 0;
    this.ΔᐃΔⵠΔ = 0;
    this.level = 0;
    this.label = null;
    this.ⵠᐃⵠⲆⵠⲆΔ = null;
    this.ΔΔᐃⵠᐃⵠΔ = null;
    this.ᐃΔⵠⵠᐃ = jj;
    this.ᐃᐃᐃΔᐃ = 0;
  }
  function Kf(a, b, c, d) {
    this.id = a;
    this.ⵠᐃᐃⲆⲆ = (a + 5) * 8;
    this.ⲆⲆᐃᐃΔ = uo / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.ΔⵠⵠⲆ = Math.cos(d);
    this.alpha = 0;
  }
  function Vf(b) {
    function e(b, c, d, e, f) {
      for (var a = 0; a < f && j(b, c, d, e, 8) !== 1; a++);
      if (f === a) {
        return 0;
      } else {
        return 1;
      }
    }
    function j(c, d, e, f, i) {
      var j = d + Math.floor(yx.ᐃⲆᐃⲆΔ.get() * f);
      var a = e + Math.floor(f * yx.ᐃⲆᐃⲆΔ.get());
      var k = 10 + Math.floor((yx.ᐃᐃΔⵠᐃ - j - 20) * yx.ᐃⲆᐃⲆΔ.get());
      var m = 10 + Math.floor(yx.ᐃⲆᐃⲆΔ.get() * (yx.ΔΔΔⲆⲆ - a - 20));
      var h = k + j;
      var g = m + a;
      for (var l = 0; yx.ᐃᐃⲆᐃ.length > l; l++) {
        var n = yx.ᐃᐃⲆᐃ[l];
        if (ΔⲆᐃ.ⵠᐃᐃᐃΔⵠⵠ(k, h, m, g, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
          return 0;
        }
      }
      yx.ᐃᐃⲆᐃ.push(new yx.ᐃᐃⲆⵠⲆⵠⲆ(c, k, m, j, a, 15));
      return 1;
    }
    function i(b, c, d) {
      var e = c;
      for (var f = d; yx.ΔΔΔⲆⲆ > f; f++) {
        for (var g = c; yx.ᐃᐃΔⵠᐃ > g && (d === f && (e = Math.max(g, e)), g <= e) && b[f][g] !== 1; g++) {
          b[f][g] = 1;
        }
        if (g < e) {
          break;
        }
      }
      yx.ᐃᐃⲆᐃ.push(new yx.ᐃᐃⲆⵠⲆⵠⲆ(yx.ⲆΔᐃᐃΔ, c, d, e - c + 1, f - d, 15));
    }
    function k(c, f, j, k, m, n, a, o) {
      var p = Math.floor(a / 2);
      var h = Math.max(1, Math.floor(a / 2));
      var g = Math.floor(o / 2);
      var l = Math.max(1, Math.floor(o / 2));
      for (var q = 0; q < j; q++) {
        for (var r = c - g; c + l > r; r++) {
          for (var s = f - p; s < f + h; s++) {
            if (w(r, s, "wtb", 0, 1) === 1) {
              n.push([r, s, 1]);
            }
          }
        }
        c += k;
        f += m;
      }
    }
    function m(f, e) {
      var i = yx.ᐃᐃⲆᐃ[f];
      var j = Math.floor(i.y1 / 100);
      var m = Math.floor(i.x1 / 100);
      var a = Math.floor(i.ΔⵠⲆ / 100);
      var n = m + (z = Math.floor(i.w / 100));
      var o = 2;
      var q = a;
      var r = j;
      for (var s = m + 10 + Math.floor(yx.ᐃⲆᐃⲆΔ.get() * (z - 20)), t = s - 4; t < s + 4; t++) {
        w(j - 1, t, "wtb", 0, 1);
      }
      while (q > 0) {
        if (o !== 2) {
          if (q < 10) {
            for (B = 1; q > 0; B++) {
              k(r, s, 1, 1, 0, e, B, 1);
              q -= 1;
              r += 1;
            }
          } else if (o !== 1) {
            o = 1;
            var x = Math.floor(1 + yx.ᐃⲆᐃⲆΔ.get() * 2);
            var y = 1 + Math.floor(yx.ᐃⲆᐃⲆΔ.get() * 4);
            if (s < m + 16) {
              k(r, s, x, 0, 1, e, y, y);
              s += x;
            } else if (s > n - 16) {
              k(r, s, x, 0, -1, e, y, y);
              s -= x;
            } else if (yx.ᐃⲆᐃⲆΔ.get() > 0.5) {
              k(r, s, x, 0, 1, e, y, y);
              s += x;
            } else {
              k(r, s, x, 0, -1, e, y, y);
              s -= x;
            }
          } else {
            var z;
            var A = Math.min(q, Math.floor(1 + yx.ᐃⲆᐃⲆΔ.get() * 4));
            k(r, s, A, 1, 0, e, z = 1 + Math.floor(yx.ᐃⲆᐃⲆΔ.get() * 4), z);
            o = 0;
            q -= A;
            r += A;
          }
        } else {
          for (var B = 10; B > 1; B--) {
            k(r, s, 1, 1, 0, e, B, 1);
            q -= 1;
            r += 1;
          }
          o = 0;
        }
      }
      for (t = s - 1; s + 2 > t; t++) {
        w(r, t, "wtb", 0, 1);
      }
    }
    function a(a, b) {
      for (var c = 0; c < b.length; c++) {
        r(b[c][0], b[c][1], a, b[c][2]);
      }
    }
    function p(a, b) {
      return a >= 0 && b >= 0 && a < yx.ΔΔΔⲆⲆ && b < yx.ᐃᐃΔⵠᐃ;
    }
    function n(a, b) {
      (function (b, c) {
        var d = yx.ᐃᐃⲆᐃ[c];
        for (var e = 0, f = 0; f < b && e < 10000; e++) {
          var i = d.y1 + yx.ᐃⲆᐃⲆΔ.get() * d.ΔⵠⲆ;
          var j = d.x1 + d.w * yx.ᐃⲆᐃⲆΔ.get();
          var k = Math.floor(i / 100);
          var m = Math.floor(j / 100);
          if (yx.ΔΔᐃΔⲆ(c, m * 100 + 50, k * 100 + 50) >= 600) {
            for (var p = 1, q = k - 4; p === 1 && q <= k + 4; q++) {
              for (var t = m - 4; p === 1 && t <= m + 4; t++) {
                if (ct !== vx.ⵠᐃΔᐃ[q][t]) {
                  p = 0;
                }
              }
            }
            if (p !== 0) {
              w(k, m, "la", f % 6, 0);
              f++;
            }
          }
        }
      })(b * 80, a);
      for (var c = 0; c < 3; c++) {
        d(a, "s", c, Math.floor(b * 12));
      }
      for (c = 0; c < 3; c++) {
        d(a, "g", c, Math.floor(b * 6));
      }
      for (c = 0; c < 3; c++) {
        d(a, "re", c, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      for (c = 0; c < 3; c++) {
        d(a, "a", c, Math.max(1, Math.floor(b * 2)));
      }
      h(a);
    }
    function h(a) {
      var b = yx.ᐃᐃⲆᐃ[a];
      w(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      w(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      w(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
      w(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
    }
    function g(a) {
      for (var b = 0; b < 3; b++) {
        d(a, "s", b, 15);
      }
      for (b = 0; b < 3; b++) {
        d(a, "a", b, 1);
      }
      for (b = 0; b < 3; b++) {
        d(a, "d", b, 1);
      }
      h(a);
    }
    function l(a, b) {
      for (var c = 0; c < 3; c++) {
        d(a, "s", c, Math.floor(b * 18));
      }
      for (c = 0; c < 3; c++) {
        d(a, "f", c, Math.floor(b * 24));
      }
      for (c = 0; c < 3; c++) {
        d(a, "d", c, Math.max(1, Math.floor(b * 2)), 0.3);
      }
      for (c = 0; c < 3; c++) {
        d(a, "g", c, Math.floor(b * 6));
      }
      h(a);
    }
    function o(b, c) {
      for (var e = 0; e < 6; e++) {
        d(b, "t", e, Math.floor(c * 20));
      }
      for (e = 0; e < 4; e++) {
        d(b, "b", e, Math.floor(c * 20));
      }
      for (e = 0; e < 3; e++) {
        d(b, "s", e, Math.floor(c * 20));
      }
      var f = [];
      m(b, f);
      a(b, f);
      f = [];
      d(b, "p", 0, Math.floor(c * 24));
      for (e = 0; e < 3; e++) {
        d(b, "g", e, Math.floor(c * 5));
      }
      if (yx.mode === 2) {
        for (e = 0; e < 3; e++) {
          d(b, "d", e, Math.floor(c * 3));
        }
        for (e = 0; e < 3; e++) {
          d(b, "a", e, Math.floor(c * 2));
        }
      }
      h(b);
    }
    function d(c, e, f, i, j) {
      var k = yx.ᐃᐃⲆᐃ[c];
      var a = Math.floor(k.x1 / 100);
      var n = Math.floor(k.y1 / 100);
      var p = Math.floor(k.w / 100);
      var q = Math.floor(k.ΔⵠⲆ / 100);
      if (ct !== j) {
        j = 1 - j;
        a += Math.floor(j * p / 2);
        n += Math.floor(j * q / 2);
        p -= Math.floor(p * j);
        q -= Math.floor(q * j);
      }
      var t = vx.ⵠᐃΔᐃ;
      for (var l = 0, x = 0; l < i && x <= 50000; x++) {
        var y = n + Math.floor(q * yx.ᐃⲆᐃⲆΔ.get());
        var z = a + Math.floor(yx.ᐃⲆᐃⲆΔ.get() * p);
        if (yx.ΔΔᐃΔⲆ(c, z * 100 + 50, y * 100 + 50) >= 400 && ((A = t[y][z + 1]) === undefined || A[e] === undefined || ej === A[e][f]) && ((A = t[y][z - 1]) === cl || A[e] === ct || Wd === A[e][f])) {
          var A = t[y + 1][z];
          if (es === A || A[e] === undefined || Ll === A[e][f]) {
            if ((A = t[y - 1][z]) === Nn || A[e] === tk || ij === A[e][f]) {
              if ((A = t[y + 1][z - 1]) === undefined || A[e] === mb || A[e][f] === undefined) {
                A = t[y - 1][z + 1];
                if (Nn === A || A[e] === undefined || A[e][f] === cl) {
                  A = t[y + 1][z + 1];
                  if (zh === A || A[e] === hg || A[e][f] === undefined) {
                    A = t[y - 1][z - 1];
                    if (tk === A || A[e] === undefined || mb === A[e][f]) {
                      if (t[y][z] === undefined) {
                        w(y, z, e, f, 1);
                        l++;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    function q(b, c) {
      for (var e = 0; e < 3; e++) {
        d(b, "s", e, Math.floor(c * 12));
      }
      for (e = 0; e < 3; e++) {
        d(b, "m", e, Math.max(1, Math.floor(c * 1)), 0.2);
      }
      d(b, "c", 0, Math.floor(c * 36));
      var f = [];
      (function (b, c) {
        var d = yx.ᐃᐃⲆᐃ[b];
        var e = Math.floor(d.y1 / 100);
        var f = Math.floor(d.x1 / 100);
        var i = Math.floor(d.ΔⵠⲆ / 100);
        var a = Math.floor(d.w / 100);
        var j = e + Math.floor(i / 2);
        var k = f + Math.floor(a / 2);
        for (var h = 0; h < 3; h++) {
          w(m = Math.floor(j - 3 + yx.ᐃⲆᐃⲆΔ.get() * 6), n = Math.floor(k - 3 + yx.ᐃⲆᐃⲆΔ.get() * 6), "plm", h, 1);
        }
        for (h = 0; h < 80; h++) {
          var m;
          var n;
          if (w(m = Math.floor(j - 3 + yx.ᐃⲆᐃⲆΔ.get() * 6), n = Math.floor(k - 3 + yx.ᐃⲆᐃⲆΔ.get() * 6), "wtb", 0, 1) === 1) {
            c.push([m, n, 0]);
          }
        }
      })(b, f);
      a(b, f);
      f = [];
    }
    function c(b, c) {
      for (var e = 0; e < 6; e++) {
        d(b, "t", e, Math.floor(c * 80));
      }
      for (e = 0; e < 4; e++) {
        d(b, "b", e, Math.floor(c * 80));
      }
      for (e = 0; e < 3; e++) {
        d(b, "s", e, Math.floor(c * 50));
      }
      var f = [];
      for (e = 0; e < 6; e++) {
        m(b, f);
      }
      a(b, f);
      f = [];
      d(b, "p", 0, Math.floor(c * 28));
      for (e = 0; e < 3; e++) {
        d(b, "g", e, Math.floor(c * 7));
      }
      for (e = 0; e < 3; e++) {
        d(b, "d", e, Math.floor(c * 2));
      }
      for (e = 0; e < 3; e++) {
        d(b, "a", e, Math.floor(c * 1));
      }
      for (e = 0; e < 3; e++) {
        d(b, "m", e, Math.floor(c * 1));
      }
      d(b, "a", 0, Math.floor(c * 1));
      h(b);
    }
    function r(a, b, c, d) {
      if (p(a, b) && (ⵠᐃΔᐃ = vx.ⵠᐃΔᐃ, ⵠᐃΔᐃ[a][b] === undefined && (ⵠᐃΔᐃ[a][b] = {}), ⵠᐃΔᐃ[a][b].r === undefined)) {
        var e = 0;
        if (p(a - 1, b) && rk !== ⵠᐃΔᐃ[a - 1][b] && ⵠᐃΔᐃ[a - 1][b].wtb !== Ks) {
          e += 2;
        }
        if (p(a, b - 1) && ⵠᐃΔᐃ[a][b - 1] !== undefined && ⵠᐃΔᐃ[a][b - 1].wtb !== hg) {
          e += 8;
        }
        if (p(a, b + 1) && ⵠᐃΔᐃ[a][b + 1] !== undefined && ⵠᐃΔᐃ[a][b + 1].wtb !== undefined) {
          e += 16;
        }
        if (p(a + 1, b) && ⵠᐃΔᐃ[a + 1][b] !== undefined && ⵠᐃΔᐃ[a + 1][b].wtb !== tk) {
          e += 64;
        }
        if (p(a - 1, b - 1) && (e & 10) == 10 && ⵠᐃΔᐃ[a - 1][b - 1] !== Nn && nl !== ⵠᐃΔᐃ[a - 1][b - 1].wtb) {
          e += 1;
        }
        if (p(a - 1, b + 1) && (e & 18) === 18 && ct !== ⵠᐃΔᐃ[a - 1][b + 1] && tk !== ⵠᐃΔᐃ[a - 1][b + 1].wtb) {
          e += 4;
        }
        if (p(a + 1, b - 1) && (e & 72) == 72 && hg !== ⵠᐃΔᐃ[a + 1][b - 1] && Hb !== ⵠᐃΔᐃ[a + 1][b - 1].wtb) {
          e += 32;
        }
        if (p(a + 1, b + 1) && (e & 80) == 80 && Nn !== ⵠᐃΔᐃ[a + 1][b + 1] && ⵠᐃΔᐃ[a + 1][b + 1].wtb !== undefined) {
          e += 128;
        }
        ⵠᐃΔᐃ[a][b].r = {};
        ⵠᐃΔᐃ[a][b].r.ΔᐃᐃⲆΔⵠᐃ = e;
        ⵠᐃΔᐃ[a][b].r.ⵠⲆⵠᐃᐃⵠⲆ = d;
        ⵠᐃΔᐃ[a][b].r.ⲆⵠⲆⲆ = yx.ΔΔᐃΔⲆ(c, b * 100 + 50, a * 100 + 50) - 400;
        ⵠᐃΔᐃ[a][b].r.x = b * 100 + 50;
        ⵠᐃΔᐃ[a][b].r.y = a * 100 + 50;
      }
    }
    function w(a, b, c, d, e) {
      if (a >= 0 && b >= 0 && a < yx.ΔΔΔⲆⲆ && yx.ᐃᐃΔⵠᐃ > b) {
        ⵠᐃΔᐃ = vx.ⵠᐃΔᐃ;
        if (ⵠᐃΔᐃ[a][b] === undefined) {
          ⵠᐃΔᐃ[a][b] = {};
        }
        if (ⵠᐃΔᐃ[a][b][c] !== undefined) {
          return 0;
        } else {
          ⵠᐃΔᐃ[a][b][c] = [];
          ⵠᐃΔᐃ[a][b][c][d] = [{
            x: b * 100 + 50,
            y: a * 100 + 50
          }];
          if (e === 1) {
            (function (a, b, c, d) {
              sd.push([a, b, c, d]);
            })(c, d, a, b);
          }
          return 1;
        }
      }
    }
    function f(a, b, c) {
      if (a[b]) {
        for (Rk = 0; a[b].length > Rk; Rk++) {
          if (a[b][Rk]) {
            for (ᐃᐃⵠᐃ = 0; a[b][Rk].length > ᐃᐃⵠᐃ; ᐃᐃⵠᐃ++) {
              a[b][Rk][ᐃᐃⵠᐃ].ΔΔᐃ = c;
              a[b][Rk][ᐃᐃⵠᐃ].ΔⵠΔ = oj;
              a[b][Rk][ᐃᐃⵠᐃ].time = 0;
              a[b][Rk][ᐃᐃⵠᐃ].angle = 0;
            }
          }
        }
      }
    }
    this.mode = 0;
    this.ⵠⲆΔΔᐃⵠΔ = b;
    this.ⵠΔᐃⵠⵠ = 0;
    this.ᐃⵠᐃⵠΔⵠⲆ = 6;
    this.ΔΔᐃΔ = [];
    this.Ⲇᐃᐃ = [];
    this.Ⲇᐃᐃ[0] = [];
    this.Ⲇᐃᐃ[100] = [];
    this.Ⲇᐃᐃ[80] = [];
    this.Ⲇᐃᐃ[60] = [];
    this.Ⲇᐃᐃ[67] = [];
    this.Ⲇᐃᐃ[70] = [];
    this.Ⲇᐃᐃ[77] = [];
    this.Ⲇᐃᐃ[71] = [];
    this.Ⲇᐃᐃ[72] = [];
    this.Ⲇᐃᐃ[73] = [];
    this.Ⲇᐃᐃ[74] = [];
    this.Ⲇᐃᐃ[65] = [];
    this.Ⲇᐃᐃ[66] = [];
    this.Ⲇᐃᐃ[62] = [];
    this.Ⲇᐃᐃ[88] = [];
    this.Ⲇᐃᐃ[91] = [];
    this.Ⲇᐃᐃ[90] = [];
    this.Ⲇᐃᐃ[63] = [];
    this.Ⲇᐃᐃ[78] = [];
    this.Ⲇᐃᐃ[64] = [];
    this.Ⲇᐃᐃ[69] = [];
    this.Ⲇᐃᐃ[68] = [];
    this.Ⲇᐃᐃ[79] = [];
    this.Ⲇᐃᐃ[89] = [];
    this.Ⲇᐃᐃ[83] = [];
    this.Ⲇᐃᐃ[84] = [];
    this.Ⲇᐃᐃ[85] = [];
    this.Ⲇᐃᐃ[81] = [];
    this.Ⲇᐃᐃ[82] = [];
    this.Ⲇᐃᐃ[86] = [];
    this.Ⲇᐃᐃ[34] = [];
    this.Ⲇᐃᐃ[36] = [];
    this.Ⲇᐃᐃ[61] = [];
    this.Ⲇᐃᐃ[2] = [];
    this.Ⲇᐃᐃ[1] = [];
    this.Ⲇᐃᐃ[6] = [];
    this.Ⲇᐃᐃ[3] = [];
    this.Ⲇᐃᐃ[5] = [];
    this.Ⲇᐃᐃ[12] = [];
    this.Ⲇᐃᐃ[13] = [];
    this.Ⲇᐃᐃ[14] = [];
    this.Ⲇᐃᐃ[20] = [];
    this.Ⲇᐃᐃ[52] = [];
    this.Ⲇᐃᐃ[4] = [];
    this.Ⲇᐃᐃ[7] = [];
    this.Ⲇᐃᐃ[8] = [];
    this.Ⲇᐃᐃ[9] = [];
    this.Ⲇᐃᐃ[19] = [];
    this.Ⲇᐃᐃ[50] = [];
    this.Ⲇᐃᐃ[41] = [];
    this.Ⲇᐃᐃ[10] = [];
    this.Ⲇᐃᐃ[15] = [];
    this.Ⲇᐃᐃ[16] = [];
    this.Ⲇᐃᐃ[17] = [];
    this.Ⲇᐃᐃ[21] = [];
    this.Ⲇᐃᐃ[51] = [];
    this.Ⲇᐃᐃ[45] = [];
    this.Ⲇᐃᐃ[46] = [];
    this.Ⲇᐃᐃ[47] = [];
    this.Ⲇᐃᐃ[48] = [];
    this.Ⲇᐃᐃ[49] = [];
    this.Ⲇᐃᐃ[53] = [];
    this.Ⲇᐃᐃ[18] = [];
    this.Ⲇᐃᐃ[29] = [];
    this.Ⲇᐃᐃ[56] = [];
    this.Ⲇᐃᐃ[11] = [];
    this.Ⲇᐃᐃ[22] = [];
    this.Ⲇᐃᐃ[23] = [];
    this.Ⲇᐃᐃ[30] = [];
    this.Ⲇᐃᐃ[38] = [];
    this.Ⲇᐃᐃ[33] = [];
    this.Ⲇᐃᐃ[31] = [];
    this.Ⲇᐃᐃ[55] = [];
    this.Ⲇᐃᐃ[37] = [];
    this.Ⲇᐃᐃ[43] = [];
    this.Ⲇᐃᐃ[44] = [];
    this.Ⲇᐃᐃ[54] = [];
    this.Ⲇᐃᐃ[39] = [];
    this.Ⲇᐃᐃ[40] = [];
    this.Ⲇᐃᐃ[32] = [];
    this.Ⲇᐃᐃ[24] = [];
    this.Ⲇᐃᐃ[25] = [];
    this.Ⲇᐃᐃ[26] = [];
    this.Ⲇᐃᐃ[27] = [];
    this.Ⲇᐃᐃ[28] = [];
    this.Ⲇᐃᐃ[35] = [];
    this.Ⲇᐃᐃ[87] = [];
    this.Ⲇᐃᐃ[42] = [];
    this.ⲆⵠᐃⵠⲆ = [];
    this.ᐃᐃΔⵠᐃ = 260;
    this.ΔΔΔⲆⲆ = 260;
    this.ΔᐃᐃᐃΔⲆⲆ = 100;
    this.ⲆⲆΔᐃᐃᐃⵠ = 100;
    this.w = this.ᐃᐃΔⵠᐃ * this.ΔᐃᐃᐃΔⲆⲆ;
    this.ΔⵠⲆ = this.ⲆⲆΔᐃᐃᐃⵠ * this.ΔΔΔⲆⲆ;
    this.ᐃⲆᐃⲆΔ = new Mk.ⵠΔᐃᐃᐃⵠᐃ();
    this.ᐃᐃⲆᐃ = [];
    this.ⵠⲆΔⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, 1, 0, 1, 1);
    this.transition = false;
    this.ᐃⵠᐃᐃⲆ = [];
    this.ⲆΔΔⲆⵠ = 0;
    this.ΔⵠⵠᐃΔΔΔ = 1;
    this.ⵠΔᐃΔᐃⵠⵠ = 2;
    this.ΔⲆⵠᐃⵠⵠⵠ = 3;
    this.ⲆΔᐃᐃΔ = 4;
    this.ᐃᐃⵠΔᐃⵠⲆ = 10;
    this.ᐃⵠᐃᐃⲆ[this.ⲆΔΔⲆⵠ] = {
      ⵠΔᐃⵠᐃΔᐃ: 1,
      ⵠΔⵠ: [19, 58, 43],
      Δᐃᐃ: [4, 43, 48],
      ⵠⲆⵠⵠⲆ: ["#133a2b", "#042b30"]
    };
    this.ᐃⵠᐃᐃⲆ[this.ⲆΔᐃᐃΔ] = {
      ⵠΔᐃⵠᐃΔᐃ: 0,
      ⵠΔⵠ: [11, 106, 132],
      Δᐃᐃ: [9, 55, 63],
      ⵠⲆⵠⵠⲆ: ["#0B6A84", "#09373F"]
    };
    this.ᐃⵠᐃᐃⲆ[this.ΔⵠⵠᐃΔΔΔ] = {
      ⵠΔᐃⵠᐃΔᐃ: 0,
      ⵠΔⵠ: [235, 242, 240],
      Δᐃᐃ: [19, 97, 103],
      ⵠⲆⵠⵠⲆ: ["#EBF2F0", "#136167"]
    };
    this.ᐃⵠᐃᐃⲆ[this.ⵠΔᐃΔᐃⵠⵠ] = {
      ⵠΔᐃⵠᐃΔᐃ: 0,
      ⵠⲆⵠⵠⲆ: ["#2D2017", "#031C1E"],
      ⵠΔⵠ: [45, 32, 23],
      Δᐃᐃ: [3, 28, 30]
    };
    this.ᐃⵠᐃᐃⲆ[this.ΔⲆⵠᐃⵠⵠⵠ] = {
      ⵠⲆⵠⵠⲆ: ["#4A4A4A", "#183D3C"],
      ⵠΔⵠ: [74, 74, 74],
      ⵠΔᐃⵠᐃΔᐃ: 0,
      Δᐃᐃ: [24, 61, 60]
    };
    this.ᐃⵠᐃᐃⲆ[this.ᐃᐃⵠΔᐃⵠⲆ] = {
      ⵠⲆⵠⵠⲆ: ["#EBD8A6", "#093D38"],
      Δᐃᐃ: [9, 61, 56],
      ⵠΔᐃⵠᐃΔᐃ: 0,
      ⵠΔⵠ: [235, 216, 166]
    };
    this.ᐃᐃⲆⵠⲆⵠⲆ = function (b, c, d, e, f, g) {
      this.x1 = c * 100;
      this.y1 = d * 100;
      this.w = e * 100;
      this.ΔⵠⲆ = f * 100;
      this.x2 = (c + e) * 100;
      this.y2 = (d + f) * 100;
      this.ᐃᐃⲆ = b;
      this.ⵠΔΔ = es === g ? 15 : g;
    };
    this.ⵠᐃᐃⵠⲆ = -1000000;
    this.ΔΔⵠⵠⵠ = this.ⵠᐃᐃⵠⲆ;
    this.ᐃⵠΔᐃⲆ = this.ⵠᐃᐃⵠⲆ;
    this.ⵠΔᐃⲆⵠ = this.ⵠᐃᐃⵠⲆ;
    this.ⵠⲆⵠⵠᐃᐃⵠ = this.ⵠᐃᐃⵠⲆ;
    this.ᐃⲆⲆΔⵠΔⲆ = this.ⵠᐃᐃⵠⲆ;
    this.ⵠⵠⵠⵠΔ = this.ⵠᐃᐃⵠⲆ;
    this.ⵠᐃⵠᐃⲆⲆᐃⲆᐃ = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var e = Math.floor(d / 100);
      var f = Math.floor(c / 100);
      b.ΔΔⵠⵠⵠ = yx.ⵠᐃᐃⵠⲆ;
      b.ᐃⵠΔᐃⲆ = yx.ⵠᐃᐃⵠⲆ;
      b.ⵠΔᐃⲆⵠ = yx.ⵠᐃᐃⵠⲆ;
      b.ⵠⲆⵠⵠᐃᐃⵠ = yx.ⵠᐃᐃⵠⲆ;
      b.ⵠⵠⵠⵠΔ = yx.ⵠᐃᐃⵠⲆ;
      b.ᐃᐃⵠⲆⵠⲆΔ = yx.ⵠᐃᐃⵠⲆ;
      for (var g = 0; yx.ᐃᐃⲆᐃ[g].ᐃᐃⲆ !== yx.ⲆΔᐃᐃΔ; g++) {
        if (yx.ⲆΔΔⲆⵠ === yx.ᐃᐃⲆᐃ[g].ᐃᐃⲆ) {
          var h = yx.ΔΔᐃΔⲆ(g, c, d);
          b.ⵠⲆⵠⵠᐃᐃⵠ = Math.max(b.ⵠⲆⵠⵠᐃᐃⵠ, h);
          if (h > 0 && yx.ᐃΔΔᐃΔᐃᐃⲆⲆ(g, c, d) === 1) {
            b.ᐃᐃⵠⲆⵠⲆΔ = 1;
          }
        } else if (yx.ΔⵠⵠᐃΔΔΔ === yx.ᐃᐃⲆᐃ[g].ᐃᐃⲆ) {
          b.ΔΔⵠⵠⵠ = Math.max(b.ΔΔⵠⵠⵠ, yx.ΔΔᐃΔⲆ(g, c, d));
        } else if (yx.ᐃᐃⵠΔᐃⵠⲆ === yx.ᐃᐃⲆᐃ[g].ᐃᐃⲆ) {
          b.ᐃⵠΔᐃⲆ = Math.max(b.ᐃⵠΔᐃⲆ, yx.ΔΔᐃΔⲆ(g, c, d));
        } else if (yx.ⵠΔᐃΔᐃⵠⵠ === yx.ᐃᐃⲆᐃ[g].ᐃᐃⲆ) {
          b.ⵠΔᐃⲆⵠ = Math.max(b.ⵠΔᐃⲆⵠ, yx.ΔΔᐃΔⲆ(g, c, d));
        } else if (yx.ΔⲆⵠᐃⵠⵠⵠ === yx.ᐃᐃⲆᐃ[g].ᐃᐃⲆ) {
          b.ⵠⵠⵠⵠΔ = Math.max(b.ⵠⵠⵠⵠΔ, yx.ΔΔᐃΔⲆ(g, c, d));
        }
      }
      if (vx.ⵠᐃΔᐃ[e][f].iblk) {
        b.ᐃᐃⵠⲆⵠⲆΔ = 1;
      }
      if (yx.ᐃΔⵠⵠΔΔⵠΔⲆ(f, e)) {
        b.ᐃⲆⲆΔⵠΔⲆ = b.ⵠᐃᐃⵠⲆ;
      } else if (vx.ⵠᐃΔᐃ[e][f].wtb || b.ΔΔⵠⵠⵠ < 0 && b.ⵠΔᐃⲆⵠ < 0 && b.ⵠⲆⵠⵠᐃᐃⵠ < 0 && b.ᐃᐃⵠⲆⵠⲆΔ < 0 && b.ⵠⵠⵠⵠΔ < 0 && b.ᐃⵠΔᐃⲆ < 0) {
        b.ᐃⲆⲆΔⵠΔⲆ = 1;
      } else {
        b.ᐃⲆⲆΔⵠΔⲆ = b.ⵠᐃᐃⵠⲆ;
      }
    };
    this.ⲆᐃⲆΔⲆᐃΔⲆⲆ = function (a, b) {
      yx.ΔΔⵠⵠⵠ = yx.ⵠᐃᐃⵠⲆ;
      yx.ᐃⵠΔᐃⲆ = yx.ⵠᐃᐃⵠⲆ;
      yx.ⵠΔᐃⲆⵠ = yx.ⵠᐃᐃⵠⲆ;
      yx.ⵠⵠⵠⵠΔ = yx.ⵠᐃᐃⵠⲆ;
      yx.ⵠⲆⵠⵠᐃᐃⵠ = yx.ⵠᐃᐃⵠⲆ;
      for (var c = 0; yx.ᐃᐃⲆᐃ[c].ᐃᐃⲆ !== yx.ⲆΔᐃᐃΔ; c++) {
        if (yx.ⲆΔΔⲆⵠ === yx.ᐃᐃⲆᐃ[c].ᐃᐃⲆ) {
          yx.ⵠⲆⵠⵠᐃᐃⵠ = Math.max(yx.ⵠⲆⵠⵠᐃᐃⵠ, yx.ΔΔᐃΔⲆ(c, a, b));
        } else if (yx.ᐃᐃⲆᐃ[c].ᐃᐃⲆ === yx.ΔⵠⵠᐃΔΔΔ) {
          yx.ΔΔⵠⵠⵠ = Math.max(yx.ΔΔⵠⵠⵠ, yx.ΔΔᐃΔⲆ(c, a, b));
        } else if (yx.ᐃᐃⵠΔᐃⵠⲆ === yx.ᐃᐃⲆᐃ[c].ᐃᐃⲆ) {
          yx.ᐃⵠΔᐃⲆ = Math.max(yx.ᐃⵠΔᐃⲆ, yx.ΔΔᐃΔⲆ(c, a, b));
        } else if (yx.ⵠΔᐃΔᐃⵠⵠ === yx.ᐃᐃⲆᐃ[c].ᐃᐃⲆ) {
          yx.ⵠΔᐃⲆⵠ = Math.max(yx.ⵠΔᐃⲆⵠ, yx.ΔΔᐃΔⲆ(c, a, b));
        } else if (yx.ΔⲆⵠᐃⵠⵠⵠ === yx.ᐃᐃⲆᐃ[c].ᐃᐃⲆ) {
          yx.ⵠⵠⵠⵠΔ = Math.max(yx.ⵠⵠⵠⵠΔ, yx.ΔΔᐃΔⲆ(c, a, b));
        }
      }
      if (yx.ΔΔⵠⵠⵠ < 0 && yx.ⵠⵠⵠⵠΔ < 0 && yx.ⵠⲆⵠⵠᐃᐃⵠ < 0 && yx.ⵠⵠⵠⵠΔ < 0 && yx.ᐃⵠΔᐃⲆ < 0) {
        yx.ᐃⲆⲆΔⵠΔⲆ = 1;
      } else {
        yx.ᐃⲆⲆΔⵠΔⲆ = yx.ⵠᐃᐃⵠⲆ;
      }
    };
    this.ᐃΔΔᐃΔᐃᐃⲆⲆ = function (b, c, d) {
      var e = yx.ᐃᐃⲆᐃ[b];
      var f = 0;
      ᐃⲆᐃᐃ = e.x1 + 30 + (e.ⵠΔΔ & 4 ? 0 : 150);
      var g = c - ᐃⲆᐃᐃ;
      if ((e.ⵠΔΔ & 4) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ΔⵠΔⲆ = e.y1 + 250 + (e.ⵠΔΔ & 1 ? 0 : 150);
      g = d - ΔⵠΔⲆ;
      if ((e.ⵠΔΔ & 1) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⲆⲆⵠΔ = e.x2 + 80 + (e.ⵠΔΔ & 8 ? 0 : -200);
      g = ⲆⲆⵠΔ - c;
      if ((e.ⵠΔΔ & 8) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ᐃⵠⵠΔ = e.y2 - 200 + (e.ⵠΔΔ & 2 ? 0 : -200);
      g = ᐃⵠⵠΔ - d;
      if ((e.ⵠΔΔ & 2) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      if (ᐃⲆᐃᐃ <= c && ⲆⲆⵠΔ >= c && ΔⵠΔⲆ <= d && d <= ᐃⵠⵠΔ) {
        return f;
      } else {
        return 0;
      }
    };
    this.ΔΔᐃΔⲆ = function (a, b, c) {
      var d = yx.ᐃᐃⲆᐃ[a];
      ᐃⲆᐃᐃ = d.x1 + 30;
      ΔⵠΔⲆ = d.y1 + 250;
      ⲆⲆⵠΔ = d.x2 + 80;
      ᐃⵠⵠΔ = d.y2 - 200;
      if (ᐃⲆᐃᐃ <= b && b <= ⲆⲆⵠΔ && ΔⵠΔⲆ <= c && ᐃⵠⵠΔ >= c) {
        return Math.min(b - ᐃⲆᐃᐃ, ⲆⲆⵠΔ - b, c - ΔⵠΔⲆ, ᐃⵠⵠΔ - c);
      }
      var e = -1000000;
      if (b - ᐃⲆᐃᐃ < 0) {
        e = Math.max(e, b - ᐃⲆᐃᐃ);
      } else if (ⲆⲆⵠΔ - b < 0) {
        e = Math.max(e, ⲆⲆⵠΔ - b);
      }
      ⵠⲆⵠΔⵠⵠΔ = -1000000;
      if (c < ΔⵠΔⲆ || ᐃⵠⵠΔ < c) {
        if (c - ΔⵠΔⲆ < 0) {
          ⵠⲆⵠΔⵠⵠΔ = Math.max(ⵠⲆⵠΔⵠⵠΔ, c - ΔⵠΔⲆ);
        } else {
          ⵠⲆⵠΔⵠⵠΔ = Math.max(ⵠⲆⵠΔⵠⵠΔ, ᐃⵠⵠΔ - c);
        }
        e = e !== -1000000 && ⵠⲆⵠΔⵠⵠΔ !== -1000000 ? Math.min(e, ⵠⲆⵠΔⵠⵠΔ) : ⵠⲆⵠΔⵠⵠΔ;
      }
      return e;
    };
    this.ⵠΔⲆⵠΔΔᐃ = function (b, c, d) {
      var e = d;
      var f = c;
      w(e, f, "isl", b, 1);
      for (var g = 0; g < 4; g++) {
        for (var h = 0; h < 3; h++) {
          w(e - h, f - g, "iblk", 0);
          w(e + h, f - g, "iblk", 0);
          w(e + h, f + g, "iblk", 0);
          w(e - h, f + g, "iblk", 0);
        }
      }
      if (b === 0) {
        for (g = 0; g < 2; g++) {
          w(e - g, f - 4, "iblk", 0);
          w(e + g, f - 4, "iblk", 0);
          w(e - g, f + 4, "iblk", 0);
          w(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          w(e - 3, f + g, "iblk", 0);
          w(e + 3, f + g, "iblk", 0);
          w(e - 3, f - g, "iblk", 0);
          w(e + 3, f - g, "iblk", 0);
        }
        w(e - 2, f - 4, "iblk", 0);
        w(e - 3, f - 3, "iblk", 0);
        w(e + 2, f + 4, "iblk", 0);
        w(e + 3, f + 3, "iblk", 0);
      } else if (b === 1) {
        for (g = 0; g < 3; g++) {
          w(e - g, f - 4, "iblk", 0);
          w(e + g, f - 4, "iblk", 0);
          w(e - g, f + 4, "iblk", 0);
          w(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 4; g++) {
          w(e - 3, f + g, "iblk", 0);
          w(e + 3, f + g, "iblk", 0);
          w(e - 3, f - g, "iblk", 0);
          w(e + 3, f - g, "iblk", 0);
        }
      } else if (b === 2) {
        for (g = 0; g < 2; g++) {
          w(e - g, f - 4, "iblk", 0);
          w(e + g, f - 4, "iblk", 0);
          w(e - g, f + 4, "iblk", 0);
          w(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          w(e - 3, f + g, "iblk", 0);
          w(e + 3, f + g, "iblk", 0);
          w(e - 3, f - g, "iblk", 0);
          w(e + 3, f - g, "iblk", 0);
        }
      }
    };
    this.ΔⵠⲆΔⵠⲆⲆᐃᐃ = function (b) {
      for (var c = 0; c < yx.ᐃᐃⲆᐃ.length && b > 0; c++) {
        var d = yx.ᐃᐃⲆᐃ[c];
        if (yx.ⲆΔᐃᐃΔ === d.ᐃᐃⲆ && d.w > 1800 && d.ΔⵠⲆ > 1000) {
          var f = Math.floor((d.x1 + d.w / 2) / 100);
          var g = Math.floor((d.y1 + d.ΔⵠⲆ / 2) / 100);
          yx.ⵠΔⲆⵠΔΔᐃ(b % 3, f, g);
          for (var h = 0; h < 3; h++) {
            var j = g - 2 + Math.floor(yx.ᐃⲆᐃⲆΔ.get() * 4);
            var k = f - 3 + Math.floor(yx.ᐃⲆᐃⲆΔ.get() * 6);
            if (vx.ⵠᐃΔᐃ[j][k].s === undefined) {
              w(j, k, "plm", h);
            }
            j = g - 2 + Math.floor(yx.ᐃⲆᐃⲆΔ.get() * 4);
            k = f - 3 + Math.floor(yx.ᐃⲆᐃⲆΔ.get() * 6);
            if (vx.ⵠᐃΔᐃ[j][k].plm === undefined) {
              w(j, k, "s", h);
            }
          }
          j = g - 2 + Math.floor(yx.ᐃⲆᐃⲆΔ.get() * 4);
          k = f - 3 + Math.floor(yx.ᐃⲆᐃⲆΔ.get() * 6);
          if (vx.ⵠᐃΔᐃ[j][k].plm === undefined && vx.ⵠᐃΔᐃ[j][k].s === tk) {
            w(j, k, "p", 0, 1);
          }
          b--;
        }
      }
    };
    this.ⲆⲆᐃⵠⲆᐃⲆⵠᐃ = function (b) {
      yx.ᐃⲆᐃⲆΔ.ᐃⵠΔᐃᐃ(b);
      var d = 0;
      while (true) {
        if (++d > 10000) {
          return;
        }
        yx.ᐃᐃⲆᐃ = [];
        if (yx.ⵠΔᐃⵠⵠ === 0 && (yx.mode === 3 || yx.mode === 7 || yx.mode === 0)) {
          yx.ⵠΔᐃⵠⵠ = Kr;
        }
        if (yx.mode === 2) {
          yx.ᐃᐃⲆᐃ.push(new yx.ᐃᐃⲆⵠⲆⵠⲆ(yx.ⲆΔΔⲆⵠ, 2, 2, 80, 80, 15));
        } else if (yx.mode === 4) {
          yx.ᐃᐃⲆᐃ.push(new yx.ᐃᐃⲆⵠⲆⵠⲆ(yx.ⲆΔΔⲆⵠ, 2, 2, 150, 150, 15));
        } else if (yx.ⵠΔᐃⵠⵠ !== 0 && yx.ⵠΔᐃⵠⵠ.length > 0 && yx.ⵠΔᐃⵠⵠ[0].length > 3) {
          for (var f = 0; f < yx.ⵠΔᐃⵠⵠ.length; f++) {
            if ((E = yx.ⵠΔᐃⵠⵠ[f])[0] !== 0) {
              break;
            }
            var h = Wf.ⲆΔΔⲆⵠ;
            switch (E[1]) {
              case "FOREST":
                h = yx.ⲆΔΔⲆⵠ;
                break;
              case "WINTER":
                h = yx.ΔⵠⵠᐃΔΔΔ;
                break;
              case "DESERT":
                h = yx.ᐃᐃⵠΔᐃⵠⲆ;
                break;
              case "LAVA":
                h = yx.ⵠΔᐃΔᐃⵠⵠ;
                break;
              case "DRAGON":
                h = yx.ΔⲆⵠᐃⵠⵠⵠ;
            }
            yx.ᐃᐃⲆᐃ.push(new yx.ᐃᐃⲆⵠⲆⵠⲆ(h, E[2], E[3], E[4], E[5], E[6], E[7]));
          }
        } else if (yx.ⵠΔᐃⵠⵠ !== 0) {
          for (f = 0; yx.ⵠΔᐃⵠⵠ.length > f; f++) {
            var j = yx.ⵠΔᐃⵠⵠ[f];
            h = Wf.ⲆΔΔⲆⵠ;
            switch (j[0]) {
              case "FOREST":
                h = yx.ⲆΔΔⲆⵠ;
                break;
              case "WINTER":
                h = yx.ΔⵠⵠᐃΔΔΔ;
                break;
              case "DESERT":
                h = yx.ᐃᐃⵠΔᐃⵠⲆ;
                break;
              case "LAVA":
                h = yx.ⵠΔᐃΔᐃⵠⵠ;
                break;
              case "DRAGON":
                h = yx.ΔⲆⵠᐃⵠⵠⵠ;
            }
            if (e(h, j[1], j[2], 0, (f + 1) * 10) === 0) {
              break;
            }
          }
          if (yx.ⵠΔᐃⵠⵠ.length !== f) {
            continue;
          }
        }
        break;
      }
      ⲆⵠⵠΔΔⵠⵠᐃᐃ();
      var m = [];
      for (var r = 0; yx.ΔΔΔⲆⲆ > r; r++) {
        m[r] = new Array(yx.ᐃᐃΔⵠᐃ);
        for (var u = 0; u < yx.ᐃᐃΔⵠᐃ; u++) {
          m[r][u] = 0;
        }
      }
      for (r = 0; yx.ᐃᐃⲆᐃ.length > r; r++) {
        for (var x = (j = yx.ᐃᐃⲆᐃ[r]).x2 / 100, A = j.y2 / 100, B = j.x1 / 100; x >= B; B++) {
          for (var C = j.y1 / 100; C <= A; C++) {
            m[C][B] = 1;
          }
        }
      }
      for (C = 0; C < yx.ΔΔΔⲆⲆ; C++) {
        for (B = 0; B < yx.ᐃᐃΔⵠᐃ; B++) {
          if (m[C][B] === 0) {
            i(m, B, C);
          }
        }
      }
      vx = {
        w: yx.ᐃᐃΔⵠᐃ,
        ΔⵠⲆ: yx.ΔΔΔⲆⲆ,
        ⵠᐃΔᐃ: []
      };
      for (r = 0; yx.ΔΔΔⲆⲆ > r; r++) {
        vx.ⵠᐃΔᐃ[r] = [];
      }
      if (yx.ⵠΔᐃⵠⵠ !== 0 && yx.ⵠΔᐃⵠⵠ.length > 0 && yx.ⵠΔᐃⵠⵠ[0].length > 3) {
        for (f = 0; yx.ⵠΔᐃⵠⵠ.length > f; f++) {
          if ((E = yx.ⵠΔᐃⵠⵠ[f])[1] === "isl") {
            yx.ⵠΔⲆⵠΔΔᐃ(E[2], E[3], E[4]);
          }
        }
      } else {
        yx.ΔⵠⲆΔⵠⲆⲆᐃᐃ(yx.ᐃⵠᐃⵠΔⵠⲆ);
      }
      if (yx.ⵠΔᐃⵠⵠ !== 0 && yx.ⵠΔᐃⵠⵠ.length > 0 && yx.ⵠΔᐃⵠⵠ[0].length > 3) {
        var D = [];
        for (f = 0; yx.ⵠΔᐃⵠⵠ.length > f; f++) {
          var E;
          if ((E = yx.ⵠΔᐃⵠⵠ[f])[0] === 1) {
            if (E[1] === "r") {
              w(E[3], E[2], "wtb", 0, 1);
              D.push([E[3], E[2], E[4]]);
            } else {
              w(E[4], E[3], E[1], E[2], E[5]);
            }
          }
        }
        a(0, D);
        D = [];
      } else {
        for (r = 0; r < yx.ᐃᐃⲆᐃ.length; r++) {
          j = yx.ᐃᐃⲆᐃ[r];
          if (yx.mode === 4) {
            if (yx.ⲆΔΔⲆⵠ === j.ᐃᐃⲆ) {
              c(r, j.w / 10000);
            }
          } else {
            if (j.ᐃᐃⲆ === yx.ⲆΔΔⲆⵠ) {
              o(r, j.w / 10000);
            }
            if (j.ᐃᐃⲆ === yx.ⵠΔᐃΔᐃⵠⵠ) {
              n(r, j.w / 10000);
            }
            if (yx.ΔⵠⵠᐃΔΔΔ === j.ᐃᐃⲆ) {
              l(r, j.w / 10000);
            }
            if (yx.ᐃᐃⵠΔᐃⵠⲆ === j.ᐃᐃⲆ) {
              q(r, j.w / 10000);
            }
            if (yx.ΔⲆⵠᐃⵠⵠⵠ === j.ᐃᐃⲆ) {
              g(r);
            }
          }
        }
      }
      Ct("isl", 1);
      Ct("wtb", 20);
      Ct("la", 1);
      Ct("c", 1);
      Ct("s", 1);
      Ct("f", 1);
      Ct("p", 1);
      Ct("g", 1);
      Ct("d", 1);
      Ct("a", 1);
      Ct("re", 1);
      Ct("m", 1);
      sd = [];
      yx.ΔⲆⲆⵠΔᐃⵠⲆⲆ(vx);
    };
    this.ΔΔⲆⵠ = w;
    this.ΔⲆⲆⵠΔᐃⵠⲆⲆ = function (b) {
      for (var c = 0; c < this.ΔΔΔⲆⲆ; c++) {
        for (var d = 0; d < this.ᐃᐃΔⵠᐃ; d++) {
          if (!b.ⵠᐃΔᐃ[c]) {
            b.ⵠᐃΔᐃ[c] = [];
          }
          if (b.ⵠᐃΔᐃ[c][d]) {
            var e = b.ⵠᐃΔᐃ[c][d];
            if (e.de && e.de.length > 0) {
              for (var g = 0; e.de.length > g; g++) {
                if (e.de[g] && e.de[g].length > 0) {
                  e.de = e.de[g][0];
                  if (g >= 41 && g <= 49) {
                    e.de.scale = 3;
                    var h = Math.floor(Math.random() * 3 + 1);
                    e.de.ᐃⵠⲆ = [];
                    for (var j = 0; j < h; j++) {
                      e.de.ᐃⵠⲆ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.random() * Math.PI * 2,
                        ΔⵠⲆᐃᐃ: 41 + Math.floor(Math.random() * 9)
                      });
                    }
                  } else if (g >= 19 && g <= 26) {
                    e.de.scale = 3;
                    h = Math.floor(Math.random() * 3 + 1);
                    e.de.ᐃⵠⲆ = [];
                    for (j = 0; h > j; j++) {
                      e.de.ᐃⵠⲆ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * 2,
                        ΔⵠⲆᐃᐃ: 19 + Math.floor(Math.random() * 8)
                      });
                    }
                  } else if (g <= 15 || g >= 27 && g <= 40) {
                    e.de.angle = 0;
                    e.de.scale = 2;
                    e.de.ΔⵠⲆᐃᐃ = g;
                  } else {
                    e.de.angle = Math.random() * Math.PI * 2;
                    e.de.scale = 1;
                    e.de.ΔⵠⲆᐃᐃ = g;
                  }
                }
              }
            }
            f(e, "p", new ΔⲆᐃ.ᐃⵠⲆⲆ(Il, 1, 1, 0, 10, 10));
            f(e, "t", new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10));
            f(e, "s", new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10));
            f(e, "g", new ΔⲆᐃ.ᐃⵠⲆⲆ(oj, 1, 1, 0, 10, 10));
            f(e, "d", new ΔⲆᐃ.ᐃⵠⲆⲆ(Pn, 1, 1, 0, 10, 10));
            f(e, "b", new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10));
            f(e, "f", new ΔⲆᐃ.ᐃⵠⲆⲆ(ks, 1, 1, 0, 10, 10));
            f(e, "sw", new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10));
            f(e, "gw", new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10));
            f(e, "dw", new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10));
            f(e, "a", new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10));
            f(e, "cs", new ΔⲆᐃ.ᐃⵠⲆⲆ(Ah, 1, 1, 0, 10, 10));
            f(e, "plm", new ΔⲆᐃ.ᐃⵠⲆⲆ(Pn, 1, 1, 0, 10, 10));
            f(e, "re", new ΔⲆᐃ.ᐃⵠⲆⲆ(ks, 1, 1, 0, 10, 10));
            f(e, "c", new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10));
            f(e, "m", new ΔⲆᐃ.ᐃⵠⲆⲆ(Wl, 1, 1, 0, 10, 10));
          } else {
            b.ⵠᐃΔᐃ[c][d] = [];
          }
        }
      }
    };
    this.time = Mr.ⵠⲆⵠ;
    this.ᐃᐃⵠΔⲆ = {
      translate: {
        y: 0,
        x: 0
      },
      ΔΔΔⲆⵠ: 0,
      ᐃⵠΔᐃᐃ: 0,
      now: 0
    };
    this.ⲆᐃⵠⵠᐃᐃⵠΔΔ = function () {
      this.ⲆⵠᐃⵠⲆ = [];
      this.Ⲇᐃᐃ[0] = [];
      this.Ⲇᐃᐃ[2] = [];
      this.Ⲇᐃᐃ[1] = [];
      this.Ⲇᐃᐃ[6] = [];
      this.Ⲇᐃᐃ[3] = [];
      this.Ⲇᐃᐃ[5] = [];
      this.Ⲇᐃᐃ[12] = [];
      this.Ⲇᐃᐃ[13] = [];
      this.Ⲇᐃᐃ[14] = [];
      this.Ⲇᐃᐃ[20] = [];
      this.Ⲇᐃᐃ[52] = [];
      this.Ⲇᐃᐃ[30] = [];
      this.Ⲇᐃᐃ[56] = [];
      this.Ⲇᐃᐃ[38] = [];
      this.Ⲇᐃᐃ[33] = [];
      this.Ⲇᐃᐃ[31] = [];
      this.Ⲇᐃᐃ[55] = [];
      this.Ⲇᐃᐃ[37] = [];
      this.Ⲇᐃᐃ[43] = [];
      this.Ⲇᐃᐃ[44] = [];
      this.Ⲇᐃᐃ[54] = [];
      this.Ⲇᐃᐃ[39] = [];
      this.Ⲇᐃᐃ[40] = [];
      this.Ⲇᐃᐃ[32] = [];
      this.Ⲇᐃᐃ[24] = [];
      this.Ⲇᐃᐃ[25] = [];
      this.Ⲇᐃᐃ[26] = [];
      this.Ⲇᐃᐃ[27] = [];
      this.Ⲇᐃᐃ[28] = [];
      this.Ⲇᐃᐃ[35] = [];
      this.Ⲇᐃᐃ[4] = [];
      this.Ⲇᐃᐃ[7] = [];
      this.Ⲇᐃᐃ[8] = [];
      this.Ⲇᐃᐃ[9] = [];
      this.Ⲇᐃᐃ[19] = [];
      this.Ⲇᐃᐃ[50] = [];
      this.Ⲇᐃᐃ[41] = [];
      this.Ⲇᐃᐃ[10] = [];
      this.Ⲇᐃᐃ[15] = [];
      this.Ⲇᐃᐃ[16] = [];
      this.Ⲇᐃᐃ[17] = [];
      this.Ⲇᐃᐃ[21] = [];
      this.Ⲇᐃᐃ[51] = [];
      this.Ⲇᐃᐃ[45] = [];
      this.Ⲇᐃᐃ[46] = [];
      this.Ⲇᐃᐃ[47] = [];
      this.Ⲇᐃᐃ[48] = [];
      this.Ⲇᐃᐃ[49] = [];
      this.Ⲇᐃᐃ[53] = [];
      this.Ⲇᐃᐃ[18] = [];
      this.Ⲇᐃᐃ[29] = [];
      this.Ⲇᐃᐃ[56] = [];
      this.Ⲇᐃᐃ[11] = [];
      this.Ⲇᐃᐃ[22] = [];
      this.Ⲇᐃᐃ[23] = [];
      this.Ⲇᐃᐃ[100] = [];
      this.Ⲇᐃᐃ[80] = [];
      this.Ⲇᐃᐃ[60] = [];
      this.Ⲇᐃᐃ[67] = [];
      this.Ⲇᐃᐃ[70] = [];
      this.Ⲇᐃᐃ[77] = [];
      this.Ⲇᐃᐃ[71] = [];
      this.Ⲇᐃᐃ[72] = [];
      this.Ⲇᐃᐃ[73] = [];
      this.Ⲇᐃᐃ[74] = [];
      this.Ⲇᐃᐃ[65] = [];
      this.Ⲇᐃᐃ[66] = [];
      this.Ⲇᐃᐃ[62] = [];
      this.Ⲇᐃᐃ[88] = [];
      this.Ⲇᐃᐃ[91] = [];
      this.Ⲇᐃᐃ[90] = [];
      this.Ⲇᐃᐃ[63] = [];
      this.Ⲇᐃᐃ[78] = [];
      this.Ⲇᐃᐃ[75] = [];
      this.Ⲇᐃᐃ[76] = [];
      this.Ⲇᐃᐃ[64] = [];
      this.Ⲇᐃᐃ[69] = [];
      this.Ⲇᐃᐃ[68] = [];
      this.Ⲇᐃᐃ[79] = [];
      this.Ⲇᐃᐃ[89] = [];
      this.Ⲇᐃᐃ[83] = [];
      this.Ⲇᐃᐃ[84] = [];
      this.Ⲇᐃᐃ[85] = [];
      this.Ⲇᐃᐃ[81] = [];
      this.Ⲇᐃᐃ[82] = [];
      this.Ⲇᐃᐃ[86] = [];
      this.Ⲇᐃᐃ[34] = [];
      this.Ⲇᐃᐃ[36] = [];
      this.Ⲇᐃᐃ[61] = [];
      this.Ⲇᐃᐃ[87] = [];
      this.Ⲇᐃᐃ[42] = [];
    };
    this.ⵠⵠⵠΔΔⵠΔⲆᐃ = function (a) {
      if (this.ⲆⵠᐃⵠⲆ[a]) {
        ⲆⵠΔⵠ = this.ⲆⵠᐃⵠⲆ[a].type;
        this.ⲆⵠᐃⵠⲆ[a] = null;
        for (var b = this.Ⲇᐃᐃ[ⲆⵠΔⵠ], c = 0; c < b.length; c++) {
          if (a == b[c].ᐃⲆᐃⲆ) {
            b.splice(c, 1);
            return;
          }
        }
      }
    };
    this.ⵠΔΔⲆΔᐃⵠΔⵠ = function (a, b) {
      for (var c = 0; this.Ⲇᐃᐃ[56].length > c; c++) {
        var d = this.Ⲇᐃᐃ[56][c];
        if (b === Math.floor(d.x / 100) && Math.floor(d.y / 100) === a) {
          return 1;
        }
      }
      return 0;
    };
    this.ᐃΔⵠⵠΔΔⵠΔⲆ = function (a, b) {
      for (var c = 0; c < this.Ⲇᐃᐃ[30].length; c++) {
        var d = this.Ⲇᐃᐃ[30][c];
        if (a == Math.floor(d.x / 100) && b == Math.floor(d.y / 100)) {
          return true;
        }
      }
      return Iq;
    };
    this.ΔⲆⲆⲆⵠ = function (j) {
      for (var e = 0; e < j.length; e++) {
        ΔᐃⲆΔ = j[e];
        if (ΔᐃⲆΔ.ΔΔΔⲆⲆⵠΔ != ΔᐃⲆΔ.angle) {
          var q = Math.PI * 2;
          ΔᐃⲆΔ.angle = (ΔᐃⲆΔ.angle + q) % q;
          ΔᐃⲆΔ.ΔΔΔⲆⲆⵠΔ = (ΔᐃⲆΔ.ΔΔΔⲆⲆⵠΔ + q) % q;
          if (ΔᐃⲆΔ.angle != ΔᐃⲆΔ.ΔΔΔⲆⲆⵠΔ) {
            var B = ΔᐃⲆΔ.ΔΔΔⲆⲆⵠΔ - ΔᐃⲆΔ.angle;
            var D = Math.abs(B);
            if (Math.PI < D) {
              D = Math.PI * 2 - D;
            }
            var E = D / Math.PI * 3 * 10 * Gx;
            if (B > Math.PI) {
              ΔᐃⲆΔ.angle -= E;
            } else if (B < -Math.PI) {
              ΔᐃⲆΔ.angle += E;
            } else if (B < 0) {
              ΔᐃⲆΔ.angle -= E;
            } else {
              ΔᐃⲆΔ.angle += E;
            }
            ΔᐃⲆΔ.angle = (ΔᐃⲆΔ.angle + q) % q;
            if (E > Math.abs(ΔᐃⲆΔ.angle - ΔᐃⲆΔ.ΔΔΔⲆⲆⵠΔ)) {
              ΔᐃⲆΔ.angle = ΔᐃⲆΔ.ΔΔΔⲆⲆⵠΔ;
            }
          }
        }
        Math.floor(ΔᐃⲆΔ.r.y / 100);
        Math.floor(ΔᐃⲆΔ.r.x / 100);
        if (ΔᐃⲆΔ.r.x != ΔᐃⲆΔ.x || ΔᐃⲆΔ.r.y != ΔᐃⲆΔ.y) {
          if (ΔᐃⲆΔ.action & 64) {
            ΔᐃⲆΔ.action -= 64;
          }
          ΔᐃⲆΔ.action |= 32;
          var F = ΔⲆᐃ.ᐃⵠᐃᐃᐃⲆⲆ(ΔᐃⲆΔ, ΔᐃⲆΔ.r) + Math.PI;
          var G = Gx * ΔᐃⲆΔ.ⵠᐃᐃⲆⲆ;
          var H = ΔⲆᐃ.ᐃᐃᐃᐃᐃΔⲆ(G, F);
          if (ΔⲆᐃ.ᐃⵠⵠⵠΔⵠⲆ(ΔⲆᐃ.ΔᐃⲆΔΔᐃΔ(ΔᐃⲆΔ, ΔᐃⲆΔ.r)) > ΔⲆᐃ.ᐃⵠⵠⵠΔⵠⲆ(H)) {
            ΔⲆᐃ.ᐃᐃᐃᐃᐃⲆⲆ(ΔᐃⲆΔ, H);
          } else {
            if (ΔᐃⲆΔ.action & 32) {
              ΔᐃⲆΔ.action -= 32;
            }
            ΔᐃⲆΔ.action |= 64;
            ΔⲆᐃ.ⵠⲆᐃⲆᐃᐃⵠ(ΔᐃⲆΔ.r, ΔᐃⲆΔ);
          }
        }
        if (ΔᐃⲆΔ.ⲆⲆⵠⲆⲆ) {
          var I = ΔᐃⲆΔ.bubbles;
          if ((M = I.length) === 0 || Mr.ᐃΔΔᐃΔᐃⲆ > M && I[M - 1].ⲆⲆᐃᐃΔ < 0.95) {
            I.push({
              id: Math.floor(Math.random() * ᐃᐃ[540][0].length),
              x: Math.floor(ΔᐃⲆΔ.x + Math.random() * 80 - 40),
              y: Math.floor(ΔᐃⲆΔ.y + Math.random() * 80 - 40),
              ⲆⲆᐃᐃΔ: 1
            });
          }
          for (var J = 0; M > J; J++) {
            I[J].ⲆⲆᐃᐃΔ = Math.max(0, I[J].ⲆⲆᐃᐃΔ - Gx);
          }
          for (J = 0; J < M; J++) {
            if (I[J].ⲆⲆᐃᐃΔ === 0) {
              I.splice(J, 1);
              break;
            }
          }
        }
        var K = 0;
        if (ΔᐃⲆΔ.ΔᐃΔⵠ && xx.ΔⵠⵠΔΔ) {
          var L = ΔᐃⲆΔ.ᐃᐃⲆⵠⵠ;
          var M = L.length;
          if (ΔᐃⲆΔ.ᐃⲆⲆΔⵠΔⲆ > 0 && ΔᐃⲆΔ.ᐃΔⵠΔⵠ !== 227 && ΔᐃⲆΔ.ᐃΔⵠΔⵠ !== 228 && ΔᐃⲆΔ.ᐃΔⵠΔⵠ !== 230 && ΔᐃⲆΔ.ᐃΔⵠΔⵠ !== 229 && ΔᐃⲆΔ.ᐃΔⵠΔⵠ !== 91 && !ΔᐃⲆΔ.ⲆⲆⵠⲆⲆ && (K = 1, M === 0 || Mr.ᐃⵠⵠΔⵠⲆΔ < ΔⲆᐃ.ⲆⵠⲆⲆ(L[M - 1], ΔᐃⲆΔ))) {
            var N = -ΔᐃⲆΔ.angle;
            var O = Math.cos(N) * 45 * dq;
            var Q = Math.sin(N) * 45 * dq;
            L.push({
              x: ΔᐃⲆΔ.x + O,
              y: ΔᐃⲆΔ.y + Q,
              r: 8,
              alpha: 0.8
            });
            L.push({
              x: ΔᐃⲆΔ.x - O,
              y: ΔᐃⲆΔ.y - Q,
              r: 8,
              alpha: 0.8
            });
            L.push({
              x: ΔᐃⲆΔ.x,
              y: ΔᐃⲆΔ.y,
              r: 24,
              alpha: 1
            });
          }
          for (J = 0; M > J; J++) {
            L[J].alpha = Math.max(0, L[J].alpha - Gx / 2.2);
            L[J].r += Gx * 20;
          }
          if (L.length > 0 && L[0].alpha === 0) {
            L.splice(0, 1);
          }
          var R = ΔᐃⲆΔ.ΔΔΔᐃⲆ;
          M = R.length;
          var S = -1;
          var U = Math.max(0, Math.sign(ΔᐃⲆΔ.ᐃᐃⵠⲆⵠⲆΔ));
          var V = Math.max(0, Math.sign(ΔᐃⲆΔ.ΔΔⵠⵠⵠ));
          Math.max(0, Math.sign(ΔᐃⲆΔ.ᐃⵠΔᐃⲆ));
          var W = Math.max(0, Math.sign(ΔᐃⲆΔ.ⵠΔᐃⲆⵠ));
          var X = Math.max(0, Math.sign(ΔᐃⲆΔ.ⵠⵠⵠⵠΔ));
          if (ΔᐃⲆΔ.ᐃᐃⵠⲆⵠⲆΔ > 0 || ΔᐃⲆΔ.ᐃⵠΔᐃⲆ > 0) {
            S = 602;
          } else if (ΔᐃⲆΔ.ⵠⵠⵠⵠΔ > 0) {
            S = 680;
          } else if (ΔᐃⲆΔ.ΔΔⵠⵠⵠ > 0) {
            S = 475;
          } else if (ΔᐃⲆΔ.ⵠΔᐃⲆⵠ > 0) {
            S = 476;
          }
          if (ΔᐃⲆΔ.ᐃΔⵠΔⵠ === 225 && (U | V | W | X) == 1) {
            S = 228;
            var Y = ΔᐃⲆΔ.ⲆⵠⵠⵠⲆ - Math.PI / 2;
            var Z = 15;
            var _ = 11;
            var aa = Mr.ᐃⵠᐃⲆΔᐃΔ;
          } else if (ΔᐃⲆΔ.ᐃΔⵠΔⵠ === 239 && (U | V | W | X) === 1) {
            S = 249;
            Y = ΔᐃⲆΔ.ⲆⵠⵠⵠⲆ - Math.PI / 2;
            Z = 21;
            _ = 16;
            aa = Mr.ᐃⵠᐃⲆΔᐃΔ;
          } else if (ΔᐃⲆΔ.ᐃΔⵠΔⵠ === 226 && (U | V | W | X) == 1) {
            S = 234;
            Y = ΔᐃⲆΔ.ⲆⵠⵠⵠⲆ - Math.PI / 2;
            var ba = Math.random() * 50;
            Z = 10 + ba;
            _ = 0 + ba;
            aa = Mr.ᐃⵠᐃⲆΔᐃΔ * 0.9;
          } else {
            Y = ΔᐃⲆΔ.angle;
            Z = 15;
            _ = 11;
            aa = Mr.ᐃⵠᐃⲆΔᐃΔ;
          }
          if (ΔᐃⲆΔ.ᐃΔⵠΔⵠ === 227 || ΔᐃⲆΔ.ᐃΔⵠΔⵠ === 228 || ΔᐃⲆΔ.ᐃΔⵠΔⵠ === 91 || ΔᐃⲆΔ.ᐃΔⵠΔⵠ === 229 || ΔᐃⲆΔ.ᐃΔⵠΔⵠ === 230 || ΔᐃⲆΔ.ⲆⲆⵠⲆⲆ) ;else if (ΔᐃⲆΔ.ᐃΔⵠΔⵠ === 224) {
            if (M === 0 || ΔⲆᐃ.ⲆⵠⲆⲆ(R[M - 1], ΔᐃⲆΔ) > Mr.ⲆⲆⲆⵠΔⲆⲆ) {
              R.push({
                x: ΔᐃⲆΔ.x,
                y: ΔᐃⲆΔ.y,
                angle: ΔᐃⲆΔ.ⲆⵠⵠⵠⲆ,
                alpha: 1,
                id: 226
              });
            }
          } else if (S != -1 && K === 0 && (M === 0 || ΔⲆᐃ.ⲆⵠⲆⲆ(R[M - 1], ΔᐃⲆΔ) > aa)) {
            ΔᐃⲆΔ.ΔᐃⵠⲆⵠΔᐃ++;
            if (Math.abs(ΔᐃⲆΔ.x - ΔᐃⲆΔ.r.x) > 1 && Math.abs(ΔᐃⲆΔ.y - ΔᐃⲆΔ.r.y) > 1) {
              if (ΔᐃⲆΔ.r.x > ΔᐃⲆΔ.x && ΔᐃⲆΔ.y > ΔᐃⲆΔ.r.y || ΔᐃⲆΔ.x > ΔᐃⲆΔ.r.x && ΔᐃⲆΔ.r.y > ΔᐃⲆΔ.y) {
                if (ΔᐃⲆΔ.ΔᐃⵠⲆⵠΔᐃ % 2) {
                  O = -_ * dq;
                  Q = -_ * dq;
                } else {
                  Q = _ * dq;
                  O = dq * _;
                }
              } else if (ΔᐃⲆΔ.ΔᐃⵠⲆⵠΔᐃ % 2) {
                O = _ * dq;
                Q = dq * -_;
              } else {
                Q = dq * _;
                O = dq * -_;
              }
            } else if (ΔᐃⲆΔ.ΔᐃⵠⲆⵠΔᐃ % 2) {
              O = dq * (Math.cos(Y) * Z);
              Q = dq * (Math.sin(Y) * Z);
            } else {
              O = dq * (-Math.cos(Y) * Z);
              Q = dq * (Z * -Math.sin(Y));
            }
            R.push({
              x: ΔᐃⲆΔ.x + O,
              y: ΔᐃⲆΔ.y + Q,
              angle: Y + Math.PI / 2,
              alpha: 1,
              id: S
            });
          }
          for (J = 0; M > J; J++) {
            if (R[J].id === 226) {
              R[J].alpha = Math.max(0, R[J].alpha - Gx * 1.5);
            } else {
              R[J].alpha = Math.max(0, R[J].alpha - Gx / 2.85);
            }
          }
          if (R.length > 0 && R[0].alpha === 0) {
            R.splice(0, 1);
          }
        }
      }
    };
    this.ΔⵠΔ = function () {
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[0]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[80]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[60]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[67]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[70]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[77]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[71]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[72]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[73]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[74]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[61]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[62]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[88]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[91]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[90]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[63]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[78]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[75]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[76]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[64]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[68]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[65]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[66]);
      this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[69]);
    };
    this.ⵠᐃⵠᐃ = [];
    this.ⵠᐃⵠᐃ[620] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1.05, 1, 0.008, 0.008);
    this.ⵠᐃⵠᐃ[619] = new ΔⲆᐃ.ᐃⵠⲆⲆ(Qg, 1, 1.08, 1, 0.006, 0.006);
    this.ⵠᐃⵠᐃ[694] = new ΔⲆᐃ.ᐃⵠⲆⲆ($n, 1, 1.02, 1, 0.008, 0.008);
    this.ⵠᐃⵠᐃ[695] = new ΔⲆᐃ.ᐃⵠⲆⲆ(Ah, 1, 1.08, 1, 0.006, 0.006);
    this.ΔᐃⵠΔΔ = [];
    this.ΔᐃⵠΔΔ[0] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.1, 1, 0, 0.6, 0.6);
    this.ΔᐃⵠΔΔ[1] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.4, 1, 0, 0.6, 0.6);
    this.ΔᐃⵠΔΔ[2] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.3, 1, 0, 0.6, 0.6);
    this.ΔᐃⵠΔΔ[3] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ΔᐃⵠΔΔ[4] = new ΔⲆᐃ.ᐃⵠⲆⲆ(jj, 0.3, 1, 0, 0.6, 0.6);
    this.ΔᐃⵠΔΔ[5] = new ΔⲆᐃ.ᐃⵠⲆⲆ(Il, 0.8, 1, 0, 0.6, 0.6);
    this.ΔᐃⵠΔΔ[6] = new ΔⲆᐃ.ᐃⵠⲆⲆ($n, 0.5, 1, 0, 0.6, 0.6);
    this.ΔᐃⵠΔΔ[7] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.9, 1, 0, 0.6, 0.6);
    this.ΔᐃⵠΔΔ[8] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.6, 1, 0, 0.6, 0.6);
    this.ΔᐃⵠΔΔ[9] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.2, 1, 0, 0.6, 0.6);
    this.ΔᐃⵠΔΔ[10] = new ΔⲆᐃ.ᐃⵠⲆⲆ(Ah, 0.6, 1, 0, 0.6, 0.6);
    this.ΔᐃⵠΔΔ[11] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.4, 1, 0, 0.6, 0.6);
    this.ΔᐃⵠΔΔ[12] = new ΔⲆᐃ.ᐃⵠⲆⲆ(Wl, 0.8, 1, 0, 0.6, 0.6);
    this.ΔᐃⵠΔΔ[13] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.2, 1, 0, 0.6, 0.6);
    this.ΔᐃⵠΔΔ[14] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.7, 1, 0, 0.6, 0.6);
  }
  function Xf(b, c, d, e, f, i, a, j, k, h) {
    this.type = b;
    this.ⲆⲆΔᐃ = c;
    this.id = d;
    this.x = e;
    this.y = f;
    this.angle = i;
    this.ΔΔΔⲆⲆⵠΔ = i;
    this.action = a;
    this.info = j;
    this.ⲆᐃΔⵠᐃ = h;
    this.r = {
      x: e,
      y: f
    };
    this.ⵠᐃᐃⲆⲆ = k;
    if (yx) {
      this.ᐃⲆᐃⲆ = yx.ⵠⲆΔΔᐃⵠΔ * c + d;
    }
    switch (b) {
      case 0:
        this.ᐃΔΔⵠ = yx.ΔΔᐃΔ[this.ⲆⲆΔᐃ];
        this.ⵠⲆᐃᐃ = this.ᐃΔΔⵠ.ⵠⲆᐃᐃ;
        this.ᐃΔⲆⲆΔΔΔ = this.ᐃΔΔⵠ.ᐃΔⲆⲆΔΔΔ;
        this.ⲆⵠᐃⲆᐃ = this.ᐃΔΔⵠ.ⲆⵠᐃⲆᐃ;
        this.ⵠΔⵠⲆⲆ = this.ᐃΔΔⵠ.ⵠΔⵠⲆⲆ;
        this.ⵠⲆⵠⵠᐃᐃⵠ = -1000000;
        this.ⵠΔᐃⲆⵠ = -1000000;
        this.ΔΔⵠⵠⵠ = -1000000;
        this.ᐃⵠΔᐃⲆ = -1000000;
        this.ᐃⲆⲆΔⵠΔⲆ = -1000000;
        this.ᐃᐃⵠⲆⵠⲆΔ = -1000000;
        this.ⵠⵠⵠⵠΔ = -1000000;
        this.ΔⵠⵠⵠΔ = yx.mode === 2 && this.ⵠⲆᐃᐃ === 0 || Qg;
        this.ⲆⵠΔⲆⵠΔⲆ = yx.mode === 3 && this.ⵠⲆᐃᐃ === 0 && yk;
        this.ΔⲆⲆⲆⵠᐃⲆ = this.ΔⵠⵠⵠΔ && this.ᐃΔΔⵠ.ⵠⲆⵠΔⵠ === "  " ? vq : Pn;
        this.ΔΔΔᐃⲆ = [];
        this.ⲆᐃⲆᐃⲆⵠΔ = 0;
        this.ΔᐃΔⵠ = true;
        this.ΔᐃⵠⲆⵠΔᐃ = 0;
        this.ⲆΔⲆⲆⵠⵠⵠ = 0;
        this.ᐃᐃⲆⵠⵠ = [];
        this.r = {
          x: e,
          y: f
        };
        this.ᐃⵠΔᐃ = kw;
        this.ᐃᐃᐃⲆΔⲆΔ = hw;
        this.ᐃΔⵠᐃⵠ = 0;
        this.ⲆⵠⵠⵠⲆ = 0;
        this.ΔΔⵠᐃⵠ = 0;
        this.ⲆⵠⲆⵠᐃⲆⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠⵠⵠⵠⵠ = 0;
        this.ΔⲆΔⲆⲆⲆⵠ = 0;
        this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(oj, 0.6, 0.6, 0, 5, 3);
        this.ᐃΔᐃⵠⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        this.freeze = new ΔⲆᐃ.ᐃⵠⲆⲆ(Pn, 0.6, 0.6, 0, 5, 3);
        this.ᐃⲆᐃΔΔⲆⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        this.ᐃΔᐃᐃΔΔⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(true, 0, 2.25, -1.5, 3.75, 7.5);
        this.ⵠᐃᐃΔΔⲆⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(true, 0, 7.5, -3, 22.5, 33.75);
        this.attack = new ΔⲆᐃ.ᐃⵠⲆⲆ(Il, 0, 0, -Math.PI / 3, 6, 9);
        this.ⲆΔΔⵠΔⵠⲆⵠⵠ = 0;
        this.ⵠⲆΔⵠⲆⲆⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.6, 0.6, 0, 1, 3);
        this.ᐃⲆⵠⲆⲆᐃⵠ = this.ΔⲆⲆⲆⵠᐃⲆ ? new ΔⲆᐃ.ᐃⵠⲆⲆ(true, 0, 2.25, -1.5, 2.75, 5.5) : 0;
        this.ΔᐃᐃⲆⵠᐃᐃ = 0;
        this.ᐃⲆⲆΔⵠΔᐃ = 0;
        this.ⵠⲆⲆΔⲆⲆΔ = [];
        this.ΔⵠᐃΔⲆⲆΔ = [];
        this.text = [];
        this.label = [];
        this.ᐃΔⲆⵠⲆΔⲆ = jw;
        this.ⲆΔⲆᐃΔ = xo;
        this.right = -1;
        this.ᐃΔⵠΔⵠ = -1;
        this.action = 64;
        this.ΔᐃⲆΔᐃⵠΔ = Il;
        this.ⲆΔᐃΔᐃ = 0;
        this.ⲆⲆⵠⲆⲆ = false;
        this.bubbles = [];
        this.ᐃΔⲆΔΔ = 0;
        this.ⲆⲆᐃⲆᐃ = -1;
        this.ΔⵠΔ = function (a) {
          if (this.info & 32768) {
            this.ΔᐃⲆΔᐃⵠΔ = true;
            this.info = this.info & -32769;
          } else {
            this.ΔᐃⲆΔᐃⵠΔ = $n;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.ᐃΔⲆΔΔ = 1;
          } else {
            this.ᐃΔⲆΔΔ = 0;
          }
          this.ⲆΔᐃΔᐃ = Math.floor(this.info / 128);
          this.info -= this.ⲆΔᐃΔᐃ * 128;
          if (this.info === 7 || this.ΔⲆⲆⲆⵠᐃⲆ) {
            this.right = -1;
          } else {
            this.right = this.info;
          }
          this.ⲆᐃⲆᐃⲆⵠΔ = yx.ⵠΔΔⲆΔᐃⵠΔⵠ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
          this.ᐃΔⵠΔⵠ = this.ⲆᐃΔⵠᐃ & 255;
          if (this.right === 2) {
            this.ⲆⲆⵠⲆⲆ = true;
          } else {
            this.ⲆⲆⵠⲆⲆ = jj;
          }
          if (Gf[this.right]) {
            this.ᐃᐃⵠⵠΔ = true;
          } else {
            this.ᐃᐃⵠⵠΔ = false;
          }
          if (a & 256) {
            this.ⵠⲆΔⵠⲆⲆⵠ.ⵠΔⲆ = false;
            this.ⵠⲆΔⵠⲆⲆⵠ.ⵠΔΔ = 0.6;
          } else if (a & 4) {
            this.freeze.ⵠΔⲆ = false;
            this.freeze.ⵠΔΔ = 0.6;
          } else if (a & 128) {
            this.ᐃΔᐃⵠⵠ.ⵠΔⲆ = false;
            this.ᐃΔᐃⵠⵠ.ⵠΔΔ = 0.6;
          }
          if (a & 8) {
            this.ᐃⲆᐃΔΔⲆⲆ.ⵠΔⲆ = $n;
            this.ᐃⲆᐃΔΔⲆⲆ.ⵠΔΔ = 0.6;
          }
          if (a & 2) {
            this.ΔΔᐃ.ⵠΔⲆ = false;
            this.ΔΔᐃ.ⵠΔΔ = 0.6;
          }
          if (a & 16) {
            this.ⲆΔΔⵠΔⵠⲆⵠⵠ = 0.58;
            if (Dx.ΔᐃᐃⵠⲆ && this.ⲆⲆᐃⲆᐃ !== -1) {
              Dx.ΔΔᐃΔ[this.ⲆⲆᐃⲆᐃ].ⲆᐃᐃΔᐃⵠΔΔⵠ(ax[this.right]);
            }
          }
        };
        this.ΔⵠΔ();
        break;
      case 23:
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ⲆΔΔΔⵠ = zv;
        this.ΔΔⵠⵠᐃ = kv;
        this.ⵠᐃⵠⵠⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(Il, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⵠⲆΔⵠᐃᐃᐃ = 0;
        this.ⵠⲆⲆᐃⲆⲆᐃ = 0;
        this.ᐃᐃⵠⵠᐃ = Nu;
        break;
      case 22:
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ($n, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ⲆΔΔΔⵠ = Bv;
        this.ΔΔⵠⵠᐃ = Nv;
        this.ⵠᐃⵠⵠⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(Qi, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⵠⲆΔⵠᐃᐃᐃ = 0;
        this.ⵠⲆⲆᐃⲆⲆᐃ = 0;
        break;
      case 1:
      case 6:
        this.ⲆΔΔΔⵠ = Dv;
        this.ΔΔⵠⵠᐃ = Gv;
        this.ᐃⵠΔΔⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1.03, 0.98, 0.3, 0.3);
        this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⵠᐃⵠⵠⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(Lk, 1, 1, 0, 10, 10),
          ΔⵠΔ: x,
          angle: 0
        };
        break;
      case 43:
        this.ⲆΔΔΔⵠ = qv;
        this.ΔΔⵠⵠᐃ = lv;
        this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ΔΔⵠΔ = [];
        for (var g = 0; g < 3; g++) {
          this.ΔΔⵠΔ.push({
            ᐃⵠΔᐃ: iv,
            ⵠᐃⵠᐃ: new ΔⲆᐃ.ᐃⵠⲆⲆ(ks, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ΔΔⵠΔ[0].x = this.x - 16.5;
        this.ΔΔⵠΔ[0].y = this.y - 15.5;
        this.ΔΔⵠΔ[0].angle = this.angle;
        this.ΔΔⵠΔ[1].x = this.x + 36;
        this.ΔΔⵠΔ[1].y = this.y + 17;
        this.ΔΔⵠΔ[1].angle = this.angle;
        this.ΔΔⵠΔ[2].x = this.x - 18.5;
        this.ΔΔⵠΔ[2].y = this.y + 39;
        this.ΔΔⵠΔ[2].angle = this.angle;
        break;
      case 3:
        this.ⲆΔΔΔⵠ = xv;
        this.ΔΔⵠⵠᐃ = Pv;
        this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ΔΔⵠΔ = [];
        for (g = 0; g < 3; g++) {
          this.ΔΔⵠΔ.push({
            ᐃⵠΔᐃ: dw,
            ⵠᐃⵠᐃ: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ΔΔⵠΔ[0].x = this.x - 16.5;
        this.ΔΔⵠΔ[0].y = this.y - 15.5;
        this.ΔΔⵠΔ[1].x = this.x - 5.5;
        this.ΔΔⵠΔ[1].y = this.y + 7.5;
        this.ΔΔⵠΔ[2].x = this.x + 18;
        this.ΔΔⵠΔ[2].y = this.y - 5;
        break;
      case 77:
        this.ᐃⵠΔᐃ = Sv;
        this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(zq, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 70:
        this.ᐃⵠΔᐃ = Jv;
        this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(Wl, 0.6, 0.6, 0, 5, 3);
        break;
      case 71:
        this.ᐃⵠΔᐃ = Iv;
        this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(Iq, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔⲆΔΔᐃᐃⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⲆᐃΔⲆΔΔⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(yg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        this.ᐃΔᐃⵠⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 67:
        this.ᐃⵠΔᐃ = hv;
        this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔⲆΔΔᐃᐃⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(x, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⲆᐃΔⲆΔΔⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(pa, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        this.ᐃΔᐃⵠⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 68:
        this.ᐃⵠΔᐃ = fw;
        this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(yg, 0.6, 0.6, 0, 5, 3);
        break;
      case 90:
        this.ᐃⵠΔᐃ = Tv;
        this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 91:
        this.ΔⲆⲆⲆⲆ = this.info & 15;
        this.ⲆΔⲆⲆⵠⵠⵠ = this.ⲆᐃΔⵠᐃ & 1;
        this.ΔⵠᐃᐃΔⵠⵠ = 0;
        this.x = this.info;
        this.y = this.ⲆᐃΔⵠᐃ;
        this.ᐃⵠΔᐃ = Xv;
        this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(Pn, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case 80:
      case 60:
      case 61:
      case 62:
      case 63:
      case 78:
      case 65:
      case 66:
      case 88:
        this.ᐃⵠΔᐃ = Tv;
        this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(Qi, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(yg, 0.6, 0.6, 0, 5, 3);
        break;
      case 36:
        this.ᐃⵠΔᐃ = Hv;
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(Iq, 1, 1, 0, 10, 10),
          ΔⵠΔ: Il,
          angle: 0
        };
        break;
      case 34:
        this.ΔΔⵠⵠᐃ = ew;
        this.ᐃⵠΔᐃ = Yv;
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: zq,
          angle: 0
        };
        this.up = new ΔⲆᐃ.ᐃⵠⲆⲆ(x, 1, 1.03, 0.98, 0.1, 0.1);
        this.ⵠⲆΔⵠⵠ = [];
        break;
      case 87:
        this.angle = Math.PI * Math.random() / 2;
      case 86:
      case 82:
        this.ᐃⵠΔᐃ = Mv;
        this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ns, 0.6, 0.6, 0, 5, 3);
        break;
      case 81:
        this.ᐃⵠΔᐃ = ov;
        this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(x, 0.6, 0.6, 0, 5, 3);
        break;
      case 69:
        this.scale = 1;
        this.ᐃⵠΔᐃ = pv;
        this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(Lk, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 76:
        this.ΔΔⲆΔⵠ = 0;
        this.ᐃΔⵠⲆ = [];
        this.ⵠⲆⲆⲆᐃⵠΔ = 0;
        this.ᐃᐃⲆⲆΔⵠᐃ = Cv;
        this.ᐃⵠΔᐃ = Wv;
        this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(zq, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⲆᐃ.ᐃⵠⲆⲆ(Vn, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(_n, 0.6, 0.6, 0, 5, 3);
        break;
      case 75:
        this.x = this.info;
        this.y = this.ⲆᐃΔⵠᐃ;
        this.scale = 1;
        this.ΔᐃⵠΔ = 0;
        this.ᐃⵠΔᐃ = Lv;
        this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⲆᐃ.ᐃⵠⲆⲆ(_n, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 74:
        this.x = this.info;
        this.y = this.ⲆᐃΔⵠᐃ;
        this.scale = 1;
        this.ΔᐃⵠΔ = 0;
        this.ᐃⵠΔᐃ = Ov;
        this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 73:
        this.scale = 1;
        this.ᐃⵠΔᐃ = jv;
        this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⲆᐃ.ᐃⵠⲆⲆ(yg, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 72:
        this.scale = 1;
        this.ᐃⵠΔᐃ = Av;
        this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(Pn, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 64:
        this.scale = 1;
        this.ᐃⵠΔᐃ = Qv;
        this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 100:
        this.ΔΔⵠΔ = [];
        for (g = 0; g < 5; g++) {
          this.ΔΔⵠΔ.push({
            ᐃⵠΔᐃ: dw,
            ⵠᐃⵠᐃ: new ΔⲆᐃ.ᐃⵠⲆⲆ(Iq, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % 3) {
          case 0:
            this.ΔΔⵠΔ[0].x = this.x - 20.5;
            this.ΔΔⵠΔ[0].y = this.y - 22.5;
            this.ΔΔⵠΔ[1].x = this.x - 35.5;
            this.ΔΔⵠΔ[1].y = this.y + 7.5;
            this.ΔΔⵠΔ[2].x = this.x + 7.5;
            this.ΔΔⵠΔ[2].y = this.y - 30;
            this.ΔΔⵠΔ[3].x = this.x + 22.5;
            this.ΔΔⵠΔ[3].y = this.y;
            this.ΔΔⵠΔ[4].x = this.x - 7.5;
            this.ΔΔⵠΔ[4].y = this.y + 14.5;
            break;
          case 1:
            this.ΔΔⵠΔ[0].x = this.x - 30.5;
            this.ΔΔⵠΔ[0].y = this.y - 22.5;
            this.ΔΔⵠΔ[1].x = this.x - 15.5;
            this.ΔΔⵠΔ[1].y = this.y + 7.5;
            this.ΔΔⵠΔ[2].x = this.x + 15.5;
            this.ΔΔⵠΔ[2].y = this.y - 30;
            this.ΔΔⵠΔ[3].x = this.x + 12.5;
            this.ΔΔⵠΔ[3].y = this.y + 5;
            this.ΔΔⵠΔ[4].x = this.x - 40.5;
            this.ΔΔⵠΔ[4].y = this.y + 14.5;
            break;
          case 2:
            this.ΔΔⵠΔ[0].x = this.x - 20.5;
            this.ΔΔⵠΔ[0].y = this.y - 20.5;
            this.ΔΔⵠΔ[1].x = this.x - 35.5;
            this.ΔΔⵠΔ[1].y = this.y + 15.5;
            this.ΔΔⵠΔ[2].x = this.x + 7.5;
            this.ΔΔⵠΔ[2].y = this.y - 17;
            this.ΔΔⵠΔ[3].x = this.x + 22.5;
            this.ΔΔⵠΔ[3].y = this.y + 5;
            this.ΔΔⵠΔ[4].x = this.x - 7.5;
            this.ΔΔⵠΔ[4].y = this.y + 1.5;
        }
        break;
      case 31:
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(Vn, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ᐃⵠΔᐃ = Vv;
        this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ⲆᐃⵠᐃⵠⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case 40:
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(pa, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ᐃⵠΔᐃ = tv;
        this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(x, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 39:
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(ns, 1, 1, 0, 10, 10),
          ΔⵠΔ: Qg,
          angle: 0
        };
        this.ᐃⵠΔᐃ = Fv;
        this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 44:
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ᐃⵠΔᐃ = aw;
        this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 55:
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(hr, 1, 1, 0, 10, 10),
          ΔⵠΔ: jj,
          angle: 0
        };
        this.ᐃⵠΔᐃ = yv;
        this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 54:
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ᐃⵠΔᐃ = vv;
        this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(Qg, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 37:
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: x,
          angle: 0
        };
        this.ᐃⵠΔᐃ = bw;
        this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(_n, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 24:
        this.ᐃⵠΔᐃ = nv;
        this.rotate = 0;
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(Il, 1, 1, 0, 10, 10),
          ΔⵠΔ: yg,
          angle: 0
        };
        break;
      case 25:
        this.ᐃⵠΔᐃ = wv;
        this.rotate = 0;
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(yg, 1, 1, 0, 10, 10),
          ΔⵠΔ: ns,
          angle: 0
        };
        break;
      case 26:
        this.ᐃⵠΔᐃ = sv;
        this.rotate = 0;
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(Qg, 1, 1, 0, 10, 10),
          ΔⵠΔ: jj,
          angle: 0
        };
        break;
      case 27:
        this.ᐃⵠΔᐃ = $v;
        this.rotate = 0;
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: Wl,
          angle: 0
        };
        break;
      case 28:
        this.ᐃⵠΔᐃ = uv;
        this.rotate = 0;
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(Ah, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        break;
      case 32:
        this.ⲆΔΔΔⵠ = Ev;
        this.ΔΔⵠⵠᐃ = Rv;
        this.rotate = 0;
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: ns,
          angle: 0
        };
        break;
      case 38:
        this.ᐃⵠΔᐃ = Xu;
        this.ⲆⲆⲆⵠ = Math.floor(this.x / 100);
        this.ᐃⲆ = Math.floor(this.y / 100);
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(ns, 1, 1, 0, 10, 10),
          ΔⵠΔ: Qi,
          angle: 0
        };
        this.opacity = 1;
        this.ᐃᐃⵠⵠᐃ = Mu;
        break;
      case 42:
        this.ᐃⵠΔᐃ = Pu;
        this.ⵠᐃⵠⵠⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1.15, 1, 0.3, 0.3);
        this.color = 0;
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: ns,
          angle: 0
        };
        break;
      case 33:
      case 2:
      case 56:
      case 35:
      case 29:
        this.ᐃⵠΔᐃ = Ku;
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: Vn,
          angle: 0
        };
        break;
      case 30:
        this.ᐃⵠΔᐃ = Ku;
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: hr,
          angle: 0
        };
        this.ᐃᐃⵠⵠᐃ = Mu;
        break;
      case 4:
      case 7:
      case 8:
      case 9:
      case 19:
      case 50:
      case 5:
      case 12:
      case 13:
      case 14:
      case 20:
      case 52:
        this.ᐃⵠΔᐃ = Ku;
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ᐃᐃⵠⵠᐃ = Nu;
        break;
      case 41:
        this.ᐃⵠΔᐃ = Zu;
        this.opacity = 1;
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: ns,
          angle: 0
        };
        var m = this.angle % (Math.PI / 2);
        if (Math.PI / 4 > m) {
          this.angle -= m;
        } else {
          this.angle += Math.PI / 2 - m;
        }
        break;
      case 79:
        this.ᐃⵠΔᐃ = Qu;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 89:
        this.ᐃⵠΔᐃ = ev;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 83:
        this.ᐃⵠΔᐃ = Iu;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 84:
        this.ᐃⵠΔᐃ = Ru;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 85:
        this.ᐃⵠΔᐃ = Vu;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 11:
        this.ΔⵠΔ = function (a) {
          this.lock = this.info & 8192 ? 1 : 0;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.ᐃⵠΔᐃ = fv;
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(zq, 1, 1, 0, 10, 10),
          ΔⵠΔ: Iq,
          angle: 0
        };
        this.lock = 0;
        this.ΔⵠΔ(this.action);
        break;
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 53:
      case 10:
      case 15:
      case 16:
      case 17:
      case 21:
      case 51:
        this.ᐃⵠΔᐃ = Uu;
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(Ah, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ᐃᐃⵠⵠᐃ = Nu;
        break;
      case 18:
        this.ⲆΔΔΔⵠ = Kv;
        this.ᐃⵠΔᐃ = _v;
        this.ΔΔⵠⵠᐃ = rv;
        this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(pa, 1, 1.23, 1.18, 0.02, 0.02);
        this.ⵠᐃⵠⵠⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(Qg, 1, 1.23, 1.18, 0.04, 0.04);
        this.ΔΔᐃ = {
          ⲆΔᐃΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: Il,
          angle: 0
        };
        this.ΔⵠΔ = function (a) {
          this.action = a;
        };
    }
  }
  function Zf() {
    Math.random();
    return "d";
  }
  function $f() {
    Math.random();
    return "e";
  }
  function Iw() {
    Math.random();
    return "r";
  }
  function Jw() {
    Math.random();
    return "p";
  }
  function Kw() {
    this.ᐃⵠΔᐃᐃ = function () {};
    this.ⵠᐃΔⵠⵠ = {
      ⲆⲆΔᐃ: 1,
      open: zq,
      ΔⲆⵠⲆⲆ: 1
    };
    this.ⵠⲆⵠᐃᐃ = {
      ⲆⲆΔᐃ: 1,
      ΔⲆⵠⲆⲆ: -1,
      open: ns
    };
    this.ΔΔⲆᐃ = {
      ΔᐃᐃⵠⵠΔⲆ: 0,
      ⲆⲆΔᐃ: 1,
      ΔⲆⵠΔΔ: 0,
      ΔⲆⵠⲆⲆ: -1,
      open: false
    };
    this.ᐃⵠΔΔ = {
      ΔⲆΔᐃᐃⵠⵠ: 0,
      ΔᐃⲆΔΔᐃⵠ: 0,
      ⵠⵠⲆⲆⵠⲆΔ: 0,
      open: false,
      ΔⲆⵠⲆⲆ: -1,
      type: 0,
      ⲆⲆΔᐃ: 1
    };
    this.ⲆΔᐃⲆ = {
      ΔⲆΔᐃᐃⵠⵠ: 0,
      ⲆᐃⵠΔⵠΔⲆ: 0,
      ΔⲆⵠΔΔ: 0,
      ⲆⲆΔᐃ: 1,
      ΔⲆⵠⲆⲆ: -1,
      open: Qi
    };
    this.sign = {
      ΔⲆⵠⲆⲆ: -1,
      open: Wl
    };
    this.ΔⲆΔⲆᐃ = {
      ⲆⲆΔᐃ: 1,
      ΔⲆⵠⲆⲆ: -1,
      ᐃⲆᐃⵠ: 0,
      open: false
    };
    this.ⲆⲆⵠⲆⲆ = {
      enabled: false,
      ⲆⲆΔⵠⵠ: -1,
      label: jj,
      now: -1,
      ᐃⵠΔᐃ: nw
    };
    this.ⲆᐃⲆΔ = {
      open: Ah,
      ᐃΔΔⵠⲆᐃᐃ: jj,
      ᐃⲆᐃⵠ: 0,
      ⲆⵠⲆⲆⵠΔᐃ: jj,
      id: -1,
      ΔⲆⵠⲆⲆ: -1,
      ⲆⲆΔᐃ: 1,
      locked: false,
      lock: false
    };
    this.ᐃΔⵠⵠᐃ = true;
    this.reconnect = {
      rotate: 0,
      enabled: Lk
    };
    this.key = ΔⲆᐃ.ⲆⵠΔΔⲆΔΔ("key", _a.location.href);
    var a = ΔⲆᐃ.ⲆⵠΔΔⲆΔΔ("egg", _a.location.href);
    if (a) {
      xx.ⵠⲆᐃᐃ = parseInt(a);
    }
    this.beta = _a.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
    if (this.key && this.beta) {
      ᐃΔⲆⲆ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ᐃΔⲆⲆ.get("starve_beta");
    }
    this.ΔᐃⲆΔΔ = ᐃΔⲆⲆ.get("starve_token") ? ᐃΔⲆⲆ.get("starve_token") : ΔⲆᐃ.ⵠⵠⵠᐃΔᐃⵠ(14);
    _a.baguette();
    var b = _a.kot2;
    function c() {
      this.seed = 1;
      this.ᐃⲆⲆⲆⵠᐃΔ = 2;
      this.Δᐃⵠⵠᐃⵠⵠ = 3;
      this.ᐃΔΔⵠΔᐃΔᐃΔ = 1;
      this.ΔⲆᐃⵠⲆΔΔΔᐃ = 2;
      this.ᐃᐃΔⲆⲆⲆⲆΔΔ = 3;
      this.ⵠⵠⵠⲆᐃᐃⲆ = function (a) {
        this.seed = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆⵠΔⲆᐃⵠⵠ = function (a) {
        this.ᐃⲆⲆⲆⵠᐃΔ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃΔⵠᐃΔⵠΔ = function (a) {
        this.Δᐃⵠⵠᐃⵠⵠ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆⲆᐃᐃΔᐃΔᐃⲆ = function (a) {
        this.ᐃΔΔⵠΔᐃΔᐃΔ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃΔⲆⲆⲆΔⵠⵠⲆ = function (a) {
        this.ΔⲆᐃⵠⲆΔΔΔᐃ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃⲆΔⲆⲆⵠᐃⲆΔ = function (a) {
        this.ᐃᐃΔⲆⲆⲆⲆΔΔ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⵠᐃᐃᐃᐃᐃⵠ = function (c, e, f, i, j, k, a) {
        for (var m = 1; m < a;) {
          var n = f * m % ⵠⲆᐃΔⲆΔᐃ;
          var o = ⵠᐃⲆᐃⲆᐃⲆ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(o * i + j);
            if (m > k && m < a) {
              var q = Math.random() > 0.5 ? Gx * -10 : Gx * 10;
              var r = e * p;
              this.ᐃᐃⵠⵠⲆⲆΔ[n] = Math.max(-25, Math.min(25, this.ᐃᐃⵠⵠⲆⲆΔ[n] + q));
              this.ⲆᐃᐃΔⵠᐃΔ[n] = Math.max(-8, Math.min(8, this.ⲆᐃᐃΔⵠᐃΔ[n] + q));
              if (r > 0) {
                go.beginPath();
                go.arc(m + zx.ⲆⵠΔ.x + this.ⲆᐃᐃΔⵠᐃΔ[n], c + this.ᐃᐃⵠⵠⲆⲆΔ[n] - 20, r, 0, Math.PI * 2);
                if (yx.transition) {
                  var t = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
                  go.fillStyle = Bw(83, 156, 160, 236, 247, 249, t);
                } else {
                  go.fillStyle = Mr.ΔⲆⲆΔⲆⲆⲆ[yx.time];
                }
                go.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ΔⲆⵠΔΔΔⵠ = function (b, c, e, f, i, j, a) {
        for (var k = 1; k < a;) {
          var m = k * e % ⵠⲆᐃΔⲆΔᐃ;
          var n = ⵠᐃⲆᐃⲆᐃⲆ[m];
          if (n < 0.1) {
            o += 50;
            k += 50;
          } else {
            var o = Math.floor(f * n + i);
            if (j < k && k < a) {
              var p = Math.random() > 0.5 ? Gx * -10 : Gx * 10;
              var q = o * c;
              this.Ⲇᐃᐃᐃⵠ[m] = Math.max(-25, Math.min(25, this.Ⲇᐃᐃᐃⵠ[m] + p));
              this.ΔᐃⵠⲆᐃ[m] = Math.max(-8, Math.min(8, this.ΔᐃⵠⲆᐃ[m] + p));
              if (q > 0) {
                go.beginPath();
                go.arc(b + this.Ⲇᐃᐃᐃⵠ[m] - 20, k + zx.ⲆⵠΔ.y + this.ΔᐃⵠⲆᐃ[m], q, 0, Math.PI * 2);
                if (yx.transition) {
                  var r = yx.time ? 1 - yx.ⵠⲆΔⲆ.ⵠΔΔ : yx.ⵠⲆΔⲆ.ⵠΔΔ;
                  go.fillStyle = Bw(83, 156, 160, 236, 247, 249, r);
                } else {
                  go.fillStyle = Mr.ΔⲆⲆΔⲆⲆⲆ[yx.time];
                }
                go.fill();
              }
            }
            k += o * 2;
          }
        }
      };
      this.ΔΔⵠⲆΔⵠΔᐃᐃ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - 0 - e - 2) / 200) === 0) {
          this.ᐃΔⵠᐃΔⵠΔ();
        }
        go.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(h);
        this.ⵠᐃᐃᐃᐃᐃⵠ(d, h, this.Δᐃⵠⵠᐃⵠⵠ, 18, 16, f, g);
        go.globalAlpha = 1;
        if ((h = -(b - 250 - e + 500) / 150) === 0) {
          this.ⵠⵠⵠⲆᐃᐃⲆ();
        }
        go.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(h);
        this.ⵠᐃᐃᐃᐃᐃⵠ(b, h, this.seed, 12, 10, f, g);
        go.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ⲆⵠΔⲆᐃⵠⵠ();
          }
          go.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(h);
          this.ⵠᐃᐃᐃᐃᐃⵠ(c, h, this.ᐃⲆⲆⲆⵠᐃΔ, 6, 6, f, g);
          go.globalAlpha = 1;
        }
      };
      this.ⲆΔᐃⲆⲆⲆᐃⵠⵠ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(-d + 0 + e + 2) / 200) === 0) {
          this.ᐃΔⵠᐃΔⵠΔ();
        }
        go.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(h);
        this.ⵠᐃᐃᐃᐃᐃⵠ(d, h, this.Δᐃⵠⵠᐃⵠⵠ, 18, 16, f, g);
        go.globalAlpha = 1;
        if ((h = -(-b + 250 + e) / 150) === 0) {
          this.ⵠⵠⵠⲆᐃᐃⲆ();
        }
        go.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(h);
        this.ⵠᐃᐃᐃᐃᐃⵠ(b, h, this.seed, 12, 10, f, g);
        go.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ⲆⵠΔⲆᐃⵠⵠ();
          }
          go.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(h);
          this.ⵠᐃᐃᐃᐃᐃⵠ(c, h, this.ᐃⲆⲆⲆⵠᐃΔ, 6, 6, f, g);
          go.globalAlpha = 1;
        }
      };
      this.ᐃᐃⵠΔΔⲆⲆΔᐃ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        var h = -(-d + 0 + e + 2) / 200;
        if (h === 0) {
          this.ᐃΔⵠᐃΔⵠΔ();
        }
        go.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(h);
        this.ΔⲆⵠΔΔΔⵠ(d, h, this.Δᐃⵠⵠᐃⵠⵠ, 18, 16, f, g);
        go.globalAlpha = 1;
        if ((h = -(-b + 250 + e) / 150) === 0) {
          this.ⵠⵠⵠⲆᐃᐃⲆ();
        }
        go.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(h);
        this.ΔⲆⵠΔΔΔⵠ(b, h, this.seed, 12, 10, f, g);
        go.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ⲆⵠΔⲆᐃⵠⵠ();
          }
          go.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(h);
          this.ΔⲆⵠΔΔΔⵠ(c, h, this.ᐃⲆⲆⲆⵠᐃΔ, 6, 6, f, g);
          go.globalAlpha = 1;
        }
      };
      this.ᐃⵠᐃⵠⵠⵠΔⲆⵠ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        var h = -(d - 0 - e - 2) / 200;
        if (h === 0) {
          this.ᐃΔⵠᐃΔⵠΔ();
        }
        go.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(h);
        this.ΔⲆⵠΔΔΔⵠ(d, h, this.Δᐃⵠⵠᐃⵠⵠ, 18, 16, f, g);
        go.globalAlpha = 1;
        if ((h = -(b - 250 - e + 500) / 150) === 0) {
          this.ⵠⵠⵠⲆᐃᐃⲆ();
        }
        go.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(h);
        this.ΔⲆⵠΔΔΔⵠ(b, h, this.seed, 12, 10, f, g);
        go.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ⲆⵠΔⲆᐃⵠⵠ();
          }
          go.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(h);
          this.ΔⲆⵠΔΔΔⵠ(c, h, this.ᐃⲆⲆⲆⵠᐃΔ, 6, 6, f, g);
          go.globalAlpha = 1;
        }
      };
      this.w1 = {
        r: new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔΔⲆⲆⲆⵠⲆ, 0, 10, 0, 0, 200),
        ᐃᐃⵠᐃ: new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ⵠⵠᐃⵠⲆⵠᐃ, 0, 10, 200, 200, 0)
      };
      this.w2 = {
        r: new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔᐃⲆⵠⲆⲆᐃ, 0, 10, 0, 0, 150),
        ᐃᐃⵠᐃ: new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔⲆΔⲆⲆ, 0, 10, 150, 150, 0)
      };
      this.w3 = {
        r: new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ⲆⵠⲆⲆΔⲆⲆ, 0, 10, 0, 0, 100),
        ᐃᐃⵠᐃ: new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔⲆΔⲆⲆ, 0, 10, 100, 100, 0)
      };
      this.ⲆΔⵠⵠⲆⵠᐃⲆⵠ = function (a) {
        if (a.r.ⲆⵠⲆⵠⵠ === a.r.x) {
          if (a.ᐃᐃⵠᐃ.ⲆⵠⲆⵠⵠ === a.ᐃᐃⵠᐃ.x) {
            return a.r;
          } else {
            return a.ᐃᐃⵠᐃ;
          }
        } else {
          return a.r;
        }
      };
      this.ᐃᐃⲆ = function (a) {
        var b;
        if (a.r.ⲆⵠⲆⵠⵠ === a.r.x) {
          if (a.ᐃᐃⵠᐃ.x === a.ᐃᐃⵠᐃ.ⲆⵠⲆⵠⵠ) {
            a.r.ⲆᐃⵠⵠⵠⲆᐃ();
            a.ᐃᐃⵠᐃ.ⲆᐃⵠⵠⵠⲆᐃ();
            b = a.r;
          } else {
            b = a.ᐃᐃⵠᐃ;
          }
        } else {
          b = a.r;
        }
        b.ᐃΔⵠⵠΔ(b.ⲆⵠⲆⵠⵠ);
        return b;
      };
      this.Ⲇᐃᐃᐃⵠ = [];
      this.ΔᐃⵠⲆᐃ = [];
      this.ᐃᐃⵠⵠⲆⲆΔ = [];
      this.ⲆᐃᐃΔⵠᐃΔ = [];
      this.ᐃⵠΔᐃᐃ = function () {
        for (var a = 0; a < ⵠⲆᐃΔⲆΔᐃ; a++) {
          this.Ⲇᐃᐃᐃⵠ[a] = Math.floor(ⵠᐃⲆᐃⲆᐃⲆ[a] * 25);
          this.ΔᐃⵠⲆᐃ[a] = Math.floor(ⵠᐃⲆᐃⲆᐃⲆ[a] * 8);
          this.ᐃᐃⵠⵠⲆⲆΔ[a] = Math.floor(ⵠᐃⲆᐃⲆᐃⲆ[a] * 25);
          this.ⲆᐃᐃΔⵠᐃΔ[a] = Math.floor(ⵠᐃⲆᐃⲆᐃⲆ[a] * 8);
        }
        this.w1.r.x = this.w1.r.ⲆⵠⲆⵠⵠ;
        this.w2.r.ᐃᐃΔΔⵠ = 3.5;
        this.w3.r.ᐃᐃΔΔⵠ = 2;
      };
      this.ᐃⵠΔᐃᐃ();
    }
    this.ΔᐃⲆΔΔ = b.substring(0, 6) + this.ΔᐃⲆΔΔ.substring(6);
    this.ⵠᐃⲆᐃⲆᐃΔ = ᐃΔⲆⲆ.get("starve_token_id") ? ᐃΔⲆⲆ.get("starve_token_id") : "";
    this.id = 0;
    this.ᐃⲆᐃⲆ = 0;
    this.ⵠΔⵠ = 0;
    this.ᐃΔⲆΔⲆΔᐃ = {
      ⵠᐃᐃΔᐃΔᐃ: 0,
      ΔⲆⵠΔⲆᐃΔ: "",
      ᐃᐃᐃΔᐃ: 0,
      ΔᐃΔⵠⵠ: 0
    };
    this.ⲆⵠΔΔΔⲆΔⵠᐃ = {
      connected: 0,
      ⵠⵠᐃⲆΔ: new Date().getTime()
    };
    this.ΔⲆᐃⲆⲆ = [];
    this.ΔⲆᐃⵠᐃⵠⵠ = function (a) {
      for (var b = 0; b < this.ΔⲆᐃⲆⲆ.length; b++) {
        if (a == this.ΔⲆᐃⲆⲆ[b]) {
          return V;
        }
      }
      return false;
    };
    this.ⲆⵠΔⲆΔ = {
      ⲆⲆΔⵠⵠ: 0,
      time: 0,
      value: 0,
      open: yg,
      ᐃⵠΔᐃ: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.ⲆⲆΔⵠⵠ) / 1000);
          if (this.time < 60) {
            Cx.ⲆⵠΔⲆΔ.button.ᐃⵠΔᐃ(go);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = Lk;
          }
        }
      }
    };
    this.ⲆⲆᐃⵠΔ = {
      id: -1,
      ⲆⲆΔᐃ: -1,
      lock: 0,
      timeout: new ΔⲆᐃ.ᐃⵠⲆⲆ(ks, 0, 1, 0, 1 / 30, 1),
      wait: Qi
    };
    this.ⵠᐃΔⵠⲆ = {
      timeout: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, 1, 0, 1 / 5, 1),
      wait: false
    };
    this.Ⲇⵠⵠⵠⵠ = {
      timeout: new ΔⲆᐃ.ᐃⵠⲆⲆ(ks, 0, 1, 0, 1, 1),
      wait: false
    };
    this.ᐃᐃⵠⵠΔ = {
      timeout: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, 1, 0, 1 / 10, 1),
      wait: false
    };
    this.ⲆⵠΔ = new ΔⲆᐃ.ⵠΔᐃΔΔΔⲆ(ΔⲆᐃ.ΔΔⲆⵠΔᐃⵠ, 0, 0.4, 0, 0, aq, bq, aq, bq);
    this.ⲆⵠΔ.ⲆⲆΔⵠⵠ = 0;
    this.ⲆⵠΔ.ⵠⲆΔΔΔᐃᐃ = 0;
    this.ⲆⵠΔ.ΔⵠΔ = function () {
      if (this.ⵠⲆΔΔΔᐃᐃ > 0) {
        this.ⵠⲆΔΔΔᐃᐃ -= Gx;
      } else {
        var a = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
        if (a) {
          this.ⲆⲆΔⵠⵠ = 0;
          var b = Math.max(Math.min(aq - a.x, -2), -yx.w + 2 + uo);
          var c = Math.max(Math.min(bq - a.y, -2), -yx.ΔⵠⲆ + 2 + xp);
          this.ᐃΔⵠⵠΔ({
            x: b,
            y: c
          });
        } else {
          this.ⲆⲆΔⵠⵠ += Gx;
          if (this.ⲆⲆΔⵠⵠ > 3) {
            this.ⲆⲆΔⵠⵠ = 0;
            if (!zx.reconnect.enabled) {
              Bx.ⵠᐃⵠΔᐃⵠⲆᐃᐃ();
            }
          }
        }
      }
    };
    this.ⲆⵠΔ.w = screen.width;
    this.ⲆⵠΔ.ΔⵠⲆ = screen.height;
    this.ⲆⵠΔ.ⲆⲆⲆᐃⵠⵠᐃ = this.ⲆⵠΔ.w;
    this.ⲆⵠΔ.ᐃⲆᐃΔᐃᐃⵠ = this.ⲆⵠΔ.ΔⵠⲆ;
    this.ⲆⵠΔ.rx = 0;
    this.ⲆⵠΔ.ry = 0;
    this.ⲆⵠΔ.ⵠΔᐃᐃΔᐃⵠΔⵠ = 0;
    this.ⲆⵠΔ.ᐃᐃΔⲆⵠᐃΔⵠⵠ = 0;
    this.ⲆⵠΔ.ᐃⲆⵠΔⵠ = function (a, b) {
      this.x = -Math.min(Math.max(-yx.ΔᐃᐃᐃΔⲆⲆ * 2, a - yx.ΔᐃᐃᐃΔⲆⲆ - this.ⲆⲆⲆᐃⵠⵠᐃ / 2), yx.w - this.ⲆⲆⲆᐃⵠⵠᐃ);
      this.y = -Math.min(Math.max(-yx.ⲆⲆΔᐃᐃᐃⵠ * 2, b - (yx.ⲆⲆΔᐃᐃᐃⵠ + this.ᐃⲆᐃΔᐃᐃⵠ) / 2), yx.ΔⵠⲆ - this.ᐃⲆᐃΔᐃᐃⵠ + yx.ⲆⲆΔᐃᐃᐃⵠ);
      this.ⲆⵠⲆⵠⵠ = this.x;
      this.ΔᐃⲆⲆⵠⵠⲆ = this.y;
    };
    this.control = {
      angle: 0,
      timeout: 0,
      ᐃᐃⵠⲆⵠⵠΔ: 0,
      ΔΔⵠᐃ: 0,
      attack: 0,
      ΔⵠΔ: function () {
        var a = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
        if (a) {
          var b = {
            x: zx.ⲆⵠΔ.x + a.x,
            y: zx.ⲆⵠΔ.y + a.y
          };
        } else {
          b = Co;
        }
        var c = ΔⲆᐃ.ᐃⵠᐃᐃᐃⲆⲆ(Fx.ΔⵠΔΔ, b);
        var d = yg;
        this.ΔΔⵠᐃ += Gx;
        if (!Fx.state) {
          if (a && !(a.action & 16) && this.ΔΔⵠᐃ > 0.2) {
            this.attack = 1;
            d = Ck;
            this.ΔΔⵠᐃ = 0;
            Bx.ᐃⲆᐃⵠⲆⵠⲆΔⲆ(c);
          }
        }
        if (a) {
          a.angle = c;
          a.ΔΔΔⲆⲆⵠΔ = c;
        }
        if (!d) {
          this.timeout += Gx;
          if (this.timeout > 0.2) {
            this.timeout = 0;
            if (Math.abs(this.angle - c) > 0.005) {
              Bx.ⵠΔᐃⵠⲆⲆⵠᐃᐃ(c);
              this.angle = c;
            }
          }
        }
        if (!zx.ᐃᐃⲆΔⲆ.open && !zx.ᐃⲆᐃΔᐃ.open) {
          var e = 0;
          if (Ex.ᐃⲆⲆᐃΔⲆᐃ()) {
            e |= 1;
          }
          if (Ex.ⵠΔⲆᐃⲆⵠΔ()) {
            e |= 2;
          }
          if (Ex.ΔⲆᐃⵠⲆΔΔ()) {
            e |= 4;
          }
          if (Ex.ᐃⲆΔᐃᐃΔᐃ()) {
            e |= 8;
          }
          if (this.ᐃᐃⵠⲆⵠⵠΔ != e) {
            Bx.ⲆΔⲆΔⲆᐃⵠⵠⵠ(e);
          }
          this.ᐃᐃⵠⲆⵠⵠΔ = e;
        }
      }
    };
    this.ⵠΔⲆΔ = {
      c: 1,
      ᐃᐃⵠᐃ: 1,
      ΔⵠⲆ: 1,
      ᐃᐃⲆ: 1,
      ⵠΔⲆ: 1,
      ⲆⵠⲆΔⲆᐃⵠ: 1,
      ΔΔΔⲆⲆΔⵠ: new ΔⲆᐃ.ᐃⵠⲆⲆ(true, 0, 1, 0, 3, 3),
      ⲆⵠⵠΔΔⵠΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(Zs, 0, 1, 0, 2, 2),
      ᐃⲆⲆᐃⲆⲆᐃ: new ΔⲆᐃ.ᐃⵠⲆⲆ(_q, 0, 1, 0, 3, 3),
      ΔᐃᐃⲆⵠⵠΔ: new ΔⲆᐃ.ᐃⵠⲆⲆ(k, 0, 1, 0, 3, 3),
      ⲆⲆᐃⵠΔⲆⲆ: new ΔⲆᐃ.ᐃⵠⲆⲆ(_q, 0, 1, 0, 3, 3),
      ⲆⵠΔⵠⲆΔⲆ: new ΔⲆᐃ.ᐃⵠⲆⲆ(true, 0, 1, 0, 3, 3),
      ⵠⲆⲆᐃⵠ: new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔΔⲆⵠΔᐃⵠ, 0, 1, 0, 0, 1),
      ⲆⲆᐃᐃΔ: new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔΔⲆⵠΔᐃⵠ, 0, 1, 0, 0, 1),
      ⲆⲆᐃⲆⵠΔⵠ: new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔΔⲆⵠΔᐃⵠ, 0, 1, 0, 0, 1),
      ⵠⲆᐃⲆⲆⵠᐃ: new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔΔⲆⵠΔᐃⵠ, 0, 1, 0, 0, 1),
      ⲆᐃⵠᐃⲆΔⲆ: new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔΔⲆⵠΔᐃⵠ, 0, 1, 0, 0, 1),
      ⵠΔΔⵠᐃ: new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔΔⲆⵠΔᐃⵠ, 0, 1, 0, 0, 1),
      ΔⵠΔ: function () {
        this.ΔΔΔⲆⲆΔⵠ.ΔⵠΔ();
        this.ⲆⵠⵠΔΔⵠΔ.ΔⵠΔ();
        this.ᐃⲆⲆᐃⲆⲆᐃ.ΔⵠΔ();
        this.ΔᐃᐃⲆⵠⵠΔ.ΔⵠΔ();
        this.ⲆⲆᐃⵠΔⲆⲆ.ΔⵠΔ();
        this.ⲆⵠΔⵠⲆΔⲆ.ΔⵠΔ();
        this.ⵠⲆⲆᐃⵠ.ᐃΔⵠⵠΔ(this.c);
        this.ⲆⲆᐃᐃΔ.ᐃΔⵠⵠΔ(this.ᐃᐃⵠᐃ);
        this.ⲆⲆᐃⲆⵠΔⵠ.ᐃΔⵠⵠΔ(this.ΔⵠⲆ);
        this.ⵠⲆᐃⲆⲆⵠᐃ.ᐃΔⵠⵠΔ(this.ᐃᐃⲆ);
        this.ⲆᐃⵠᐃⲆΔⲆ.ᐃΔⵠⵠΔ(this.ⵠΔⲆ);
        this.ⵠΔΔⵠᐃ.ᐃΔⵠⵠΔ(this.ⲆⵠⲆΔⲆᐃⵠ);
      }
    };
    this.ⲆΔⵠΔⲆᐃⲆ = Il;
    this.ΔᐃⲆΔᐃⲆᐃ = false;
    this.ΔⵠⵠⵠΔ = false;
    this.ⲆⵠΔⲆⵠΔⲆ = false;
    this.ᐃΔⲆᐃ = {
      max: 10,
      ⲆᐃⵠᐃᐃΔⲆ: 0,
      ᐃΔⲆΔΔ: 0,
      ᐃᐃⲆⲆ: [],
      ΔⵠΔⵠⲆ: [],
      ⲆⲆᐃⵠΔᐃⲆ: function (a, b) {
        if (a === 1) {
          this.ᐃΔⲆΔΔ = 6;
        }
        this.ⲆᐃⵠᐃᐃΔⲆ += b;
        this.max = 10 + this.ⲆᐃⵠᐃᐃΔⲆ + this.ᐃΔⲆΔΔ;
      },
      ΔᐃΔᐃⲆⵠᐃ: {
        item: -1,
        ⵠⵠ: null,
        ⲆⵠᐃᐃΔΔᐃ: 0,
        ⲆⲆⵠᐃⵠᐃⲆ: 0,
        ᐃⵠΔⲆⵠ: -1,
        ᐃᐃΔΔᐃ: -1,
        ⵠⲆΔΔⲆ: function (a) {
          if (!!this.ⲆⵠᐃᐃΔΔᐃ && (a.x !== this.ᐃⵠΔⲆⵠ || a.y !== this.ᐃᐃΔΔᐃ)) {
            this.ⲆⲆⵠᐃⵠᐃⲆ = 1;
          }
        },
        start: function (a, b) {
          this.ᐃⵠΔⲆⵠ = b.x;
          this.ᐃᐃΔΔᐃ = b.y;
          this.item = a;
          this.ⵠⵠ = zx.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ[a].info.ⵠⵠ[2];
          this.ⲆⵠᐃᐃΔΔᐃ = 1;
        },
        stop: function () {
          this.ⲆⵠᐃᐃΔΔᐃ = 0;
          this.ⲆⲆⵠᐃⵠᐃⲆ = 0;
          this.ᐃⵠΔⲆⵠ = -1;
          this.ᐃᐃΔΔᐃ = -1;
        },
        release: function () {
          var a = -1;
          var b = zx.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ;
          var c = 0;
          if (this.ⲆⵠᐃᐃΔΔᐃ && this.ⲆⲆⵠᐃⵠᐃⲆ) {
            for (var d = 0; d < b.length; d++) {
              if (b[d].info.state === ff) {
                a = d;
                break;
              }
            }
            if (a !== -1 && a !== this.item && b[this.item]) {
              c = 1;
              var f = b[a];
              b[a] = b[this.item];
              b[this.item] = f;
              Cx.ⵠⵠΔΔⲆΔⵠ();
            }
          }
          this.stop();
          return c;
        },
        ᐃⵠΔᐃ: function (a, b) {
          if (this.ⲆⵠᐃᐃΔΔᐃ && this.ⲆⲆⵠᐃⵠᐃⲆ) {
            qp(go, this.ⵠⵠ, Math.floor(a - this.ⵠⵠ.width / 2), Math.floor(b - this.ⵠⵠ.height / 2));
          }
        }
      },
      ⲆⲆⲆⲆΔΔⵠᐃⲆ: function (a) {
        for (d = 0; d < a.length; d++) {
          if (this.ᐃᐃⲆⲆ[a[d][0]] == a[d][1]) {
            return pk;
          }
        }
        return Ah;
      },
      ⵠᐃⵠΔⵠ: function (a) {
        for (var b = 0; b < this.ΔⵠΔⵠⲆ.length; b++) {
          if (this.ΔⵠΔⵠⲆ[b].id == a) {
            return b;
          }
        }
        return -1;
      },
      ⲆᐃⵠᐃᐃⲆᐃ: function (a, b) {
        this.ᐃᐃⲆⲆ[a] = 0;
        this.ΔⵠΔⵠⲆ.splice(b, 1);
        Cx.ⵠⵠΔΔⲆΔⵠ();
      },
      ⲆⲆⲆⲆΔⵠΔ: function (a, b, c) {
        ΔⵠΔ = Sg;
        this.ᐃᐃⲆⲆ[a] = Math.max(0, this.ᐃᐃⲆⲆ[a] - b);
        if (!this.ᐃᐃⲆⲆ[a] && c >= 0) {
          this.ⲆᐃⵠᐃᐃⲆᐃ(a, c);
        }
      }
    };
    this.ⲆᐃⵠⵠΔ = {
      enabled: false,
      translate: {
        y: 0,
        x: 0
      },
      ⵠⵠⵠᐃᐃⵠᐃ: function () {
        if (yx.mode == 1 && !zx.ΔᐃⲆΔᐃⲆᐃ) {
          zx.ⲆᐃⵠⵠΔ.enabled = !zx.ⲆᐃⵠⵠΔ.enabled;
          if (zx.ⲆᐃⵠⵠΔ.enabled) {
            Cx.options.ⵠⲆᐃⵠⵠᐃᐃ.display = "inline-block";
          } else {
            Cx.options.ⵠⲆᐃⵠⵠᐃᐃ.display = "none";
          }
        }
      }
    };
    Cx.options.ⵠⲆᐃⵠⵠᐃᐃ.display = "none";
    this.ⵠⵠⵠⲆᐃ = {
      enabled: false,
      translate: {
        x: 0,
        y: 0
      },
      ⲆⲆΔⵠⵠ: 0,
      ⵠⵠⵠᐃᐃⵠᐃ: function () {
        zx.ⵠⵠⵠⲆᐃ.enabled = !zx.ⵠⵠⵠⲆᐃ.enabled;
        if (zx.ⵠⵠⵠⲆᐃ.enabled) {
          Cx.options.ⵠⲆⵠⲆΔᐃᐃ.display = "inline-block";
        } else {
          Cx.options.ⵠⲆⵠⲆΔᐃᐃ.display = "none";
        }
      },
      ΔⵠΔ: function () {
        if (!!this.enabled && zx.ⵠΔᐃΔ.id < 0 && !Cx.ⲆΔᐃᐃ.open) {
          this.ⲆⲆΔⵠⵠ += Gx;
          if (this.ⲆⲆΔⵠⵠ > 2) {
            this.ⲆⲆΔⵠⵠ = 0;
            if (zx.ⵠΔⲆΔ.ΔⵠⲆ < 0.35) {
              if (zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[110]) {
                Bx.ΔΔⲆⲆⵠ(110, zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(110));
              } else if (zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[192]) {
                Bx.ΔΔⲆⲆⵠ(192, zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(192));
              } else if (zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[196]) {
                Bx.ΔΔⲆⲆⵠ(196, zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(196));
              } else if (zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[189]) {
                Bx.ΔΔⲆⲆⵠ(189, zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(189));
              } else if (zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[207]) {
                Bx.ΔΔⲆⲆⵠ(207, zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(207));
              } else if (zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[205]) {
                Bx.ΔΔⲆⲆⵠ(205, zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(205));
              } else if (zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[209]) {
                Bx.ΔΔⲆⲆⵠ(209, zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(209));
              } else if (zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[143]) {
                Bx.ΔΔⲆⲆⵠ(143, zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(143));
              } else if (zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[117]) {
                Bx.ΔΔⲆⲆⵠ(117, zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(117));
              } else if (zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[138]) {
                Bx.ΔΔⲆⲆⵠ(138, zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(138));
              } else if (zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[133]) {
                Bx.ΔΔⲆⲆⵠ(133, zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(133));
              } else if (zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[145]) {
                Bx.ΔΔⲆⲆⵠ(145, zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(145));
              } else if (zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[136]) {
                Bx.ΔΔⲆⲆⵠ(136, zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(136));
              } else if (zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[197]) {
                Bx.ΔΔⲆⲆⵠ(197, zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(197));
              }
            } else if (zx.ⵠΔⲆΔ.ᐃᐃⲆ < 0.35 && zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[127]) {
              Bx.ΔΔⲆⲆⵠ(127, zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(127));
            }
          }
        }
      }
    };
    Cx.options.ⵠⲆⵠⲆΔᐃᐃ.display = "none";
    this.ⵠΔᐃΔ = {
      id: -1,
      ᐃⲆⲆΔ: -1,
      timeout: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, 1, 0, 1, 1),
      ᐃΔΔᐃᐃ: false,
      ⵠⲆⵠⵠ: -1,
      mode: 0,
      label: [],
      ΔⲆᐃⵠⵠ: [],
      ⵠⵠΔⵠΔ: Ah,
      ᐃⵠΔΔⲆ: Vn,
      ΔΔΔⵠⲆⵠᐃ: false,
      ⵠⲆⵠᐃᐃ: false,
      ᐃᐃΔΔᐃΔⵠⲆᐃ: function () {
        this.mode = this.mode === 0 ? 1 : 0;
      },
      ⵠᐃᐃⲆⲆⵠⵠᐃⲆ: function (a) {
        this.ⵠⵠΔⵠΔ = a;
        var b = Cx.ⲆΔᐃᐃ;
        if (b.open) {
          b.ΔΔⲆⲆᐃᐃᐃ(b.button);
        }
        this.ΔⵠΔ();
      },
      ΔᐃⵠΔΔⲆⵠᐃΔ: function (a) {
        var b = ot[a];
        this.id = a;
        this.ᐃΔΔᐃᐃ = true;
        yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
        this.timeout.ⲆⵠΔΔᐃΔΔ = b.time * 8;
        this.ᐃⲆⲆΔ = b.ᐃⲆⲆΔ;
      },
      ⲆΔⵠΔⵠᐃΔⲆⵠ: function (a) {
        var b = ot[a];
        this.id = a;
        this.ᐃΔΔᐃᐃ = true;
        var c = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
        if (c && c.right == 28) {
          this.timeout.ⲆⵠΔΔᐃΔΔ = b.time * 3;
        } else {
          this.timeout.ⲆⵠΔΔᐃΔΔ = b.time;
        }
        this.ᐃⲆⲆΔ = b.ᐃⲆⲆΔ;
        for (var d = 0; d < b.r.length; d++) {
          var e = b.r[d];
          zx.ᐃΔⲆᐃ.ⲆⲆⲆⲆΔⵠΔ(e[0], e[1], zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(e[0]));
        }
        Cx.ⵠⵠΔΔⲆΔⵠ();
      },
      ΔⵠΔ: function () {
        this.ΔⲆᐃⵠⵠ = [];
        if (Cx.ΔⲆⵠΔⵠ.ⵠΔᐃΔ === 1) {
          Cx.ΔⲆⵠΔⵠ.display = 0;
        }
        for (var a in ot) {
          var b = ot[a];
          var c = true;
          if (b.r) {
            for (var d = 0; d < b.r.length; d++) {
              if (zx.ᐃΔⲆᐃ.max >= 16 && b.id === 100) {
                c = false;
                break;
              }
              if (b.w > this.ⵠⵠΔⵠΔ || b.f > this.ᐃⵠΔΔⲆ || b.ⵠΔⲆ > this.ΔΔΔⵠⲆⵠᐃ || b.e > this.ⵠⲆⵠᐃᐃ) {
                c = _n;
                break;
              }
              var f = b.r[d];
              if (!zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[f[0]] || zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[f[0]] < f[1]) {
                c = Iq;
                break;
              }
            }
            if (c) {
              this.ΔⲆᐃⵠⵠ.push(Cx.ⵠⲆⲆ[b.id]);
            }
          }
        }
        Cx.ΔΔⵠᐃⵠⵠΔ();
        Cx.ⲆΔⵠᐃᐃΔⲆ();
        Cx.ⲆⲆΔⵠⵠⵠⵠ();
        Cx.ⵠⲆⵠΔⲆⵠΔ();
        Cx.ᐃⲆⵠⵠᐃΔⵠ();
        Cx.ΔⲆΔΔΔⵠΔ();
        Cx.sign.ᐃⲆⵠΔᐃⵠⲆ();
      },
      ⲆᐃⵠⵠⵠⲆᐃ: function () {
        this.id = -1;
        this.ᐃΔΔᐃᐃ = false;
        this.timeout.ⵠΔΔ = 0;
        this.timeout.ⵠΔⲆ = false;
        this.ΔⵠΔ();
      }
    };
    this.ⵠΔΔⲆΔⵠᐃ = {
      message: ct,
      ᐃⵠΔᐃ: iw
    };
    this.alert = {
      timeout: new ΔⲆᐃ.ᐃⵠⲆⲆ(Ah, 1, 1, 0, 4, 0.3),
      text: "",
      label: null,
      ᐃⵠΔᐃ: mw,
      list: []
    };
    this.ⲆⵠᐃΔⵠ = {
      ᐃⵠ: document.createElement("canvas"),
      ⲆΔⵠᐃⵠ: [],
      ΔⵠΔ: true,
      translate: {
        y: 0,
        x: 0
      },
      sort: function () {
        var a = [];
        for (var b = yx.ΔΔᐃΔ, c = 0; c < b.length; c++) {
          if (b[c].ᐃΔⵠⵠᐃ) {
            a.push({
              id: c,
              ΔⵠⵠⲆ: b[c].ᐃᐃᐃΔᐃ
            });
          }
        }
        a.sort(function (a, b) {
          return b.ΔⵠⵠⲆ - a.ΔⵠⵠⲆ;
        });
        this.ⲆΔⵠᐃⵠ = [];
        for (c = 0; c < a.length && c < 10; c++) {
          this.ⲆΔⵠᐃⵠ.push(a[c].id);
        }
        this.ΔⵠΔ = true;
      },
      ᐃⵠΔᐃᐃ: function (a) {
        for (var b = yx.ΔΔᐃΔ, c = 0; c < b.length; c++) {
          b[c].ᐃᐃᐃΔᐃ = 0;
        }
        b[zx.id].ᐃᐃᐃΔᐃ = ΔⲆᐃ.ⲆⵠⵠΔΔⲆᐃ(a[1]);
        this.ⲆΔⵠᐃⵠ = [];
        for (c = 2; c < a.length; c += 2) {
          this.ⲆΔⵠᐃⵠ.push(a[c]);
          b[a[c]].ᐃᐃᐃΔᐃ = ΔⲆᐃ.ⲆⵠⵠΔΔⲆᐃ(a[c + 1]);
        }
        this.ΔⵠΔ = true;
      }
    };
    this.ⲆⵠᐃΔⵠ.ᐃⵠ.width = dq * 180;
    this.ⲆⵠᐃΔⵠ.ᐃⵠ.height = dq * 300;
    this.ⲆⵠᐃΔⵠ.Δ = this.ⲆⵠᐃΔⵠ.ᐃⵠ.getContext("2d");
    this.ᐃⲆᐃΔᐃ = {
      open: false,
      input: document.getElementById("commandInput"),
      ΔⲆⵠᐃⲆᐃΔ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ⵠΔⵠⲆⲆⵠΔⲆΔ: function (a) {
        this.ΔⲆⵠᐃⲆᐃΔ.innerHTML += a;
      },
      ΔⵠΔ: function () {
        this.style.left = Math.floor(uo / 2 - 300) + "px";
        this.style.top = Math.floor(xp / 2 - 250) + "px";
      },
      ᐃⲆⵠⵠⵠⵠⲆᐃⲆ: function () {
        this.ΔⲆⵠᐃⲆᐃΔ.innerHTML = "";
      },
      ⲆⵠᐃⵠΔ: function () {
        this.open = Iq;
        this.style.display = "none";
      },
      ⲆᐃⲆΔΔ: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = 0; c < a.length; c++) {
          if (c % 3 == 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + 1) % 3 === 0 || c + 1 === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      ⵠᐃΔᐃΔ: function (a, b, c, d) {
        d = d || "";
        var f = "<div class=commandWritten>" + (a = a || "");
        f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        f += (c = c || "") + "</div>" + d + "</div>";
        this.ⵠΔⵠⲆⲆⵠΔⲆΔ(f);
        this.ᐃΔΔΔΔᐃⲆΔΔ();
      },
      ᐃΔΔΔΔᐃⲆΔΔ: function () {
        this.ΔⲆⵠᐃⲆᐃΔ.scrollTop = this.ΔⲆⵠᐃⲆᐃΔ.scrollHeight;
      },
      ⲆⵠΔᐃⲆⲆΔ: function (b) {
        switch (b) {
          case "clean":
            this.ᐃⲆⵠⵠⵠⵠⲆᐃⲆ();
            return true;
          case "list":
            var c = "";
            const a = _a.document.createElement("div");
            for (var d = yx.ΔΔᐃΔ, f = 0; f < d.length; f++) {
              var g = d[f];
              if (g.ᐃΔⵠⵠᐃ) {
                a.innerText = g.ⵠⲆⵠΔⵠ;
                c += a.innerHTML + " <span style=\"color:green\">#" + f + "</span><br />";
              }
            }
            this.ⵠᐃΔᐃΔ("list", 1, "List all connected players", c);
            return Bl;
          case "weapon-list":
            this.ⵠᐃΔᐃΔ("Weapons", 1, "List all weapons in the game", this.ⲆᐃⲆΔΔ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow", "wood_axe", "stone_axe", "gold_axe", "diamond_axe", "amethyst_axe", "reidite_axe"]));
            return Er;
          case "tool-list":
            this.ⵠᐃΔᐃΔ("Tools", 1, "List all tools in the game", this.ⲆᐃⲆΔΔ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return true;
          case "survival-list":
            this.ⵠᐃΔᐃΔ("Survival Items", 1, "List all survival items in the game", this.ⲆᐃⲆΔΔ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return xo;
          case "resource-list":
            this.ⵠᐃΔᐃΔ("Resources", 1, "List all resources in the game", this.ⲆᐃⲆΔΔ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return true;
          case "food-list":
            this.ⵠᐃΔᐃΔ("Food", 1, "List all food in the game", this.ⲆᐃⲆΔΔ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return _q;
          case "hat-list":
            this.ⵠᐃΔᐃΔ("Hats", 1, "List all hats in the game", this.ⲆᐃⲆΔΔ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return true;
          case "building-list":
            this.ⵠᐃΔᐃΔ("Buildings", 1, "List all buildings in the game", this.ⲆᐃⲆΔΔ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return Ck;
          case "biome-list":
            this.ⵠᐃΔᐃΔ("Biomes list", 1, "List all available biomes in the game", this.ⲆᐃⲆΔΔ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return Qj;
          case "help-config":
            this.ⵠᐃΔᐃΔ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return true;
          case "pos":
            d = yx.Ⲇᐃᐃ[0];
            f = 0;
            for (; f < d.length; f++) {
              var e = d[f];
              if (e.ⲆⲆΔᐃ === zx.id) {
                this.ⵠᐃΔᐃΔ("pos", 1, "Your position is " + Math.floor(e.x / 100) + ":" + Math.floor(e.y / 100));
                return k;
              }
            }
            break;
          case "help-admin":
            this.ⵠᐃΔᐃΔ("help-admin", 1, "List all available commands for admin only", this.ⲆᐃⲆΔΔ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return true;
          case "help":
            this.ⵠᐃΔᐃΔ("help", 1, "List all available commands", this.ⲆᐃⲆΔΔ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return Sg;
        }
        return false;
      },
      ΔΔⲆⵠᐃⲆᐃⲆᐃ: function () {
        if (!this.open) {
          this.open = k;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ᐃⵠⲆΔⵠᐃΔ: function () {
        var a = this.input.value;
        if (a && a.length > 0) {
          if (!this.ⲆⵠΔᐃⲆⲆΔ(a)) {
            Bx.ΔⵠⵠΔⲆΔᐃⵠⲆ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.ᐃᐃⲆΔⲆ = {
      open: jj,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      ΔⵠΔ: function () {
        this.style.left = Math.floor(uo / 2 - 150) + "px";
        this.style.top = Math.floor(xp / 2 + 80) + "px";
      },
      ⲆⵠᐃⵠΔ: function () {
        this.open = false;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (zx.alert.text) {
              zx.alert.list.push(b);
            } else {
              zx.alert.text = b;
            }
            Cx.ⵠⲆⵠⵠΔⵠΔ = 0;
          } else {
            Cx.ⵠⲆⵠⵠΔⵠΔ = 1;
          }
        }
      },
      ⲆⵠΔᐃⲆⲆΔ: function (a) {
        if (a.charAt(0) == this.prefix) {
          var b = "";
          var c = "";
          for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
            b += a.charAt(d);
          }
          for (d++; d < a.length; d++) {
            c += a.charAt(d);
          }
          var e = this.cmd[b];
          if (e) {
            e(c);
          }
          return ch;
        }
        return false;
      },
      ΔᐃᐃⵠⲆ: function () {
        if (this.open) {
          this.open = _n;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ⲆⵠΔᐃⲆⲆΔ(a)) {
              Bx.ⵠᐃⵠⲆΔⲆΔΔⲆ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = Zs;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ⲆⲆⲆⲆΔⵠᐃ = {
      ⲆᐃᐃⵠⲆ: [],
      ΔⵠΔ: function (a) {
        a.y += Gx * 80 * a.ΔⵠⵠⲆ;
        a.x += Gx * 80 * a.c;
        a.ⲆⲆᐃᐃΔ -= Gx / 6;
        if (a.ⲆⲆᐃᐃΔ > 0.2) {
          a.alpha = Math.min(a.alpha + Gx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Gx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min(Mr.ᐃΔΔⵠⲆΔⵠ * (uo / 1366), Mr.ᐃΔΔⵠⲆΔⵠ + 10) * Math.max(Math.min(yx.ⵠΔᐃⲆⵠ + 1000, 3000) / 3000, 0));
        if (this.ⲆᐃᐃⵠⲆ.length < c) {
          var d = Math.floor(Math.random() * Mr.ΔⵠⲆᐃΔΔᐃ);
          var e = -zx.ⲆⵠΔ.x + Math.floor(Math.random() * zx.ⲆⵠΔ.w);
          var f = -zx.ⲆⵠΔ.y + Math.floor(Math.random() * zx.ⲆⵠΔ.ΔⵠⲆ);
          var g = Math.random(Math.PI);
          this.ⲆᐃᐃⵠⲆ.push(new Kf(d, e, f, g));
        }
      }
    };
    this.ⵠΔⲆΔΔΔᐃ = 0;
    this.ⲆΔΔⲆΔ = 0;
    this.ΔⲆΔᐃᐃ = {
      ⲆᐃᐃⵠⲆ: [],
      ᐃᐃⵠΔᐃ: 0,
      ΔΔⲆᐃΔ: 0,
      ΔⵠΔ: function (a) {
        a.y += Gx * (200 + this.ΔΔⲆᐃΔ * 800) * a.ΔⵠⵠⲆ;
        a.x += Gx * (200 + this.ΔΔⲆᐃΔ * 800) * a.c;
        a.ⲆⲆᐃᐃΔ -= Gx / 6;
        if (a.ⲆⲆᐃᐃΔ > 0.2) {
          a.alpha = Math.min(a.alpha + Gx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Gx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min((this.ΔΔⲆᐃΔ + 0.1) * Mr.ⲆᐃⲆⵠⲆΔᐃ * (uo / 1366), (this.ΔΔⲆᐃΔ + 0.1) * Mr.ⲆᐃⲆⵠⲆΔᐃ + 10) * Math.max(Math.min(yx.ᐃⵠΔᐃⲆ + 1000, 3000) / 3000, 0));
        if (this.ⲆᐃᐃⵠⲆ.length < c) {
          var d = Math.floor(Math.random() * Mr.ΔⵠⲆᐃΔΔᐃ);
          var e = -zx.ⲆⵠΔ.x + Math.floor(Math.random() * zx.ⲆⵠΔ.w);
          var f = -zx.ⲆⵠΔ.y + Math.floor(Math.random() * zx.ⲆⵠΔ.ΔⵠⲆ);
          var g = Math.random(Math.PI);
          if (zx.ΔⲆΔᐃᐃ.ᐃᐃⵠΔᐃ !== 0) {
            e -= zx.ⲆⵠΔ.w / 2;
          }
          this.ⲆᐃᐃⵠⲆ.push(new Kf(d, e, f, g));
        }
      }
    };
    this.ⵠΔⲆⲆⵠ = {
      ⲆᐃᐃⵠⲆ: [],
      ᐃᐃⵠΔᐃ: 0,
      ΔΔⲆᐃΔ: 0,
      ΔⵠΔ: function (a) {
        if (Ex.ΔⲆᐃⵠⲆΔΔ()) {
          a.y += Gx * a.ⵠᐃᐃⲆⲆ * (5.5 + this.ΔΔⲆᐃΔ * 10);
        } else {
          a.y += Gx * a.ⵠᐃᐃⲆⲆ * (5 + this.ΔΔⲆᐃΔ * 10);
        }
        a.ⲆⲆᐃᐃΔ -= Gx / 2;
        if (Ex.ᐃⲆⲆᐃΔⲆᐃ()) {
          a.x += Gx * (100 + this.ΔΔⲆᐃΔ * 400);
        } else if (Ex.ⵠΔⲆᐃⲆⵠΔ()) {
          a.x -= Gx * (130 - this.ΔΔⲆᐃΔ * 400);
        } else {
          a.x -= Gx * (30 - this.ΔΔⲆᐃΔ * 400);
        }
        if (a.ⲆⲆᐃᐃΔ > 0.2) {
          a.alpha = Math.min(a.alpha + Gx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Gx * 5, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ΔΔⲆᐃΔ * 1.5 + 0.5) * Mr.ᐃⵠⲆΔⵠⵠΔ * (uo / 1366), (this.ΔΔⲆᐃΔ * 1.5 + 0.5) * Mr.ᐃⵠⲆΔⵠⵠΔ + 10) * Math.max(Math.min(yx.ΔΔⵠⵠⵠ + 1000, 3000) / 3000, 0));
        if (this.ⲆᐃᐃⵠⲆ.length < b) {
          var c = Math.floor(Math.random() * Mr.ⲆᐃⲆⲆⵠⵠΔ);
          var d = -zx.ⲆⵠΔ.x + Math.floor(Math.random() * zx.ⲆⵠΔ.w);
          var e = -zx.ⲆⵠΔ.y + Math.floor(Math.random() * 400 * dq - dq * 200);
          this.ⲆᐃᐃⵠⲆ.push(new Kf(c, d, e, 0));
        }
      }
    };
    this.ᐃΔⲆⵠ = [];
    for (var d = 0; d < 4; d++) {
      this.ᐃΔⲆⵠ.push(new c());
    }
  }
  function Lw() {
    Math.random();
    return "o";
  }
  function Mw() {
    Math.random();
    return "s";
  }
  function Nw() {
    Math.random();
    return "g";
  }
  function Ow() {
    Math.random();
    return "i";
  }
  function Lw() {
    Math.random();
    return "o";
  }
  function Pw() {
    Math.random();
    return "a";
  }
  function Qw() {
    Math.random();
    return "t";
  }
  function Pw() {
    Math.random();
    return "a";
  }
  function Rw() {
    Math.random();
    return "n";
  }
  function Jw() {
    Math.random();
    return "p";
  }
  function Qw() {
    Math.random();
    return "t";
  }
  function Sw() {
    Math.random();
    return "C";
  }
  ⵠΔⲆⵠΔᐃⵠⲆᐃ = 1;
  setTimeout(function b() {
    var c = Rw() + Pw() + Qw() + Ow();
    Math.random();
    var d = "W" + $f() + function () {
      Math.random();
      return "b";
    }() + function () {
      Math.random();
      return "S";
    }() + Lw() + (Math.random(), "c") + function () {
      Math.random();
      return "k";
    }() + $f() + Qw();
    if (_a[d].toString().indexOf(c) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    var e = Mw() + $f() + Rw() + Zf();
    var f = Jw() + Iw() + Lw() + Qw() + Lw() + Qw() + function () {
      Math.random();
      return "y";
    }() + Jw() + $f();
    if (_a[d][f][e].toString().indexOf(c) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    d = Zf() + Iw() + Pw() + (Math.random(), "w") + function () {
      Math.random();
      return "I";
    }() + (Math.random(), "m") + Pw() + Nw() + $f();
    e = Sw() + Pw() + Rw() + (Math.random(), "v") + Pw() + Mw() + (Math.random(), "R") + $f() + Rw() + Zf() + $f() + Iw() + Ow() + Rw() + Nw() + Sw() + Lw() + Rw() + Qw() + $f() + (Math.random(), "x") + Qw() + (Math.random(), "2") + (Math.random(), "D");
    if (_a[e][f][d].toString().indexOf(c) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    setTimeout(b, 100000);
  }, 100000);
  function Tw(b, c) {
    var f = this;
    this.ᐃⵠ = b;
    this.Δ = c;
    if (_a.navigator.userAgent.indexOf("Edge") > -1) {
      this.ⲆⵠⵠⲆᐃⵠⲆ = "default";
      this.ᐃΔⵠⵠΔΔⵠ = "pointer";
    } else {
      this.ⲆⵠⵠⲆᐃⵠⲆ = "url('img/cursor0.png'), default";
      this.ᐃΔⵠⵠΔΔⵠ = "url('img/cursor1.png'), pointer";
    }
    this.ⵠⲆⵠⵠΔⵠΔ = 1;
    this.ΔΔⵠⲆᐃΔⲆ = 1;
    this.ΔᐃΔⲆΔⵠⲆ = 1;
    this.ᐃⵠΔⲆⲆⵠΔ = 1;
    this.ᐃⵠΔΔⵠⲆⵠⵠⲆ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      ΔⵠΔ: function () {
        this.style.left = Math.floor(aq - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.ⵠⲆⵠᐃ = {
      ⵠΔⵠΔᐃⲆⵠ: yf(60, 60, 0, ᐃᐃ[782]),
      ᐃᐃᐃᐃⲆᐃⵠ: yf(60, 60, 0, ᐃᐃ[783])
    };
    this.sign = {
      open: yg,
      ᐃⵠⵠΔΔⵠⵠⵠⵠ: 0,
      ᐃᐃᐃⲆⲆⲆᐃ: document.getElementById("sign_object"),
      ΔⲆⵠᐃⵠΔⵠ: 0,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: yf(60, 60, 0, ᐃᐃ[803]),
      ᐃⲆⵠΔᐃⵠⲆ: function () {
        var a = Math.floor(Math.floor((3 + zx.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ.length) / 4) * (10 + ᐃᐃ[316][0].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      ΔⵠΔ: function () {
        this.style.left = Math.floor(aq - 150) + "px";
        this.style.top = Math.floor(bq - 115) + "px";
      },
      ⲆⵠᐃⵠΔ: function () {
        Cx.sign.style.display = "none";
        Cx.sign.open = false;
      },
      select: function () {
        Cx.sign.open = !Cx.sign.open;
        if (Cx.sign.open) {
          Cx.sign.style.display = "inline-block";
        } else {
          Cx.sign.style.display = "none";
        }
      },
      ok: function () {
        Bx.ⵠᐃⵠⲆᐃΔⲆᐃᐃ(zx.sign.ΔⲆⵠⲆⲆ, Cx.sign.ΔⲆⵠᐃⵠΔⵠ);
        Cx.sign.select();
      },
      up: function () {
        Cx.sign.ΔⲆⵠᐃⵠΔⵠ = Cx.sign.ΔⲆⵠᐃⵠΔⵠ === 0 ? 3 : Cx.sign.ΔⲆⵠᐃⵠΔⵠ - 1;
        Cx.sign.ᐃᐃᐃⲆⲆⲆᐃ.src = "./img/sign" + Cx.sign.ΔⲆⵠᐃⵠΔⵠ + ".png";
      },
      down: function () {
        Cx.sign.ΔⲆⵠᐃⵠΔⵠ = (Cx.sign.ΔⲆⵠᐃⵠΔⵠ + 1) % 4;
        Cx.sign.ᐃᐃᐃⲆⲆⲆᐃ.src = "./img/sign" + Cx.sign.ΔⲆⵠᐃⵠΔⵠ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, false);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, false);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, zq);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, Wl);
    this.ⵠᐃⲆⲆᐃ = {
      open: false,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: 0,
        name: "wood",
        ⲆΔⵠⲆⲆ: 1,
        b: 1,
        a: 3,
        ⵠⲆⲆᐃΔ: 316
      }, {
        id: 1,
        name: "stone",
        ⲆΔⵠⲆⲆ: 1,
        b: 1,
        a: 4,
        ⵠⲆⲆᐃΔ: 315
      }, {
        id: 2,
        name: "gold",
        ⲆΔⵠⲆⲆ: 1,
        b: 1,
        a: 6,
        ⵠⲆⲆᐃΔ: 297
      }, {
        id: 3,
        name: "diamond",
        ⲆΔⵠⲆⲆ: 4,
        b: 4,
        a: 1,
        ⵠⲆⲆᐃΔ: 298
      }, {
        id: 4,
        name: "amethyst",
        ⲆΔⵠⲆⲆ: 8,
        b: 8,
        a: 1,
        ⵠⲆⲆᐃΔ: 418
      }, {
        id: 5,
        name: "reidite",
        ⲆΔⵠⲆⲆ: 16,
        b: 16,
        a: 1,
        ⵠⲆⲆᐃΔ: 938
      }, {
        id: 6,
        name: "pumpkin_seed",
        ⲆΔⵠⲆⲆ: 10,
        b: 10,
        a: 1,
        ⵠⲆⲆᐃΔ: 808
      }, {
        id: 7,
        name: "carrot_seed",
        ⲆΔⵠⲆⲆ: 16,
        b: 16,
        a: 1,
        ⵠⲆⲆᐃΔ: 949
      }, {
        id: 8,
        name: "tomato_seed",
        ⲆΔⵠⲆⲆ: 20,
        b: 20,
        a: 1,
        ⵠⲆⲆᐃΔ: 959
      }, {
        id: 9,
        name: "thornbush_seed",
        ⲆΔⵠⲆⲆ: 30,
        b: 30,
        a: 1,
        ⵠⲆⲆᐃΔ: 845
      }, {
        id: 10,
        name: "garlic_seed",
        ⲆΔⵠⲆⲆ: 40,
        b: 40,
        a: 1,
        ⵠⲆⲆᐃΔ: 834
      }, {
        id: 11,
        name: "watermelon_seed",
        ⲆΔⵠⲆⲆ: 60,
        b: 60,
        a: 1,
        ⵠⲆⲆᐃΔ: 966
      }],
      button: yf(60, 60, 0, ᐃᐃ[795]),
      ΔⵠΔ: function () {
        this.style.left = Math.floor(aq - 450) + "px";
        this.style.top = Math.floor(bq - 270) + "px";
      },
      select: function () {
        Cx.ⵠᐃⲆⲆᐃ.open = !Cx.ⵠᐃⲆⲆᐃ.open;
        if (Cx.ⵠᐃⲆⲆᐃ.open) {
          Cx.ⵠᐃⲆⲆᐃ.style.display = "inline-block";
        } else {
          Cx.ⵠᐃⲆⲆᐃ.style.display = "none";
        }
      },
      ⲆⵠᐃⵠΔ: function () {
        Cx.ⵠᐃⲆⲆᐃ.style.display = "none";
        Cx.ⵠᐃⲆⲆᐃ.open = $n;
      },
      ᐃⲆΔⵠᐃⵠᐃ: function () {
        Bx.ⲆΔᐃΔⵠᐃⵠΔⲆ(this.ⲆᐃⵠⵠᐃΔᐃ);
      },
      ᐃⲆⵠΔⵠ: function () {
        this.id;
        if (this.ⲆᐃⵠⵠᐃΔᐃ.a === 1) {
          var a = Math.floor(Number(this.value) * this.ⲆᐃⵠⵠᐃΔᐃ.b);
          this.ⲆᐃⵠⵠᐃΔᐃ.ⲆΔⵠⲆⲆ = a;
          document.getElementById(this.ⲆᐃⵠⵠᐃΔᐃ.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.ⲆᐃⵠⵠᐃΔᐃ.a);
          this.ⲆᐃⵠⵠᐃΔᐃ.ⲆΔⵠⲆⲆ = a;
          document.getElementById(this.ⲆᐃⵠⵠᐃΔᐃ.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ⵠᐃⲆⲆᐃ.ⲆⵠᐃⵠΔ, false);
    var e = [["mouseup", this.ⵠᐃⲆⲆᐃ.ᐃⲆΔⵠᐃⵠᐃ, "buy_"], ["click", this.ⵠᐃⲆⲆᐃ.ᐃⲆⵠΔⵠ, ""], ["change", this.ⵠᐃⲆⲆᐃ.ᐃⲆⵠΔⵠ, ""], ["keypress", this.ⵠᐃⲆⲆᐃ.keypress, ""]];
    for (var i = 0; i < this.ⵠᐃⲆⲆᐃ.items.length; i++) {
      var j = this.ⵠᐃⲆⲆᐃ.items[i];
      document.getElementById(j.name + "_market").src = mb === ᐃᐃ[j.ⵠⲆⲆᐃΔ][0].ΔⵠΔΔᐃ ? ᐃᐃ[j.ⵠⲆⲆᐃΔ][0].src : ᐃᐃ[j.ⵠⲆⲆᐃΔ][0].ΔⵠΔΔᐃ;
      if (j.a === 1) {
        document.getElementById(j.name + "_trad_number").innerHTML = j.b;
        document.getElementById(j.name + "_number").value = 1;
        document.getElementById(j.name + "_number").step = 1;
        document.getElementById(j.name + "_number").min = 1;
        document.getElementById(j.name + "_number").max = Math.floor(255 / j.b);
      } else {
        document.getElementById(j.name + "_trad_number").innerHTML = 1;
        document.getElementById(j.name + "_number").value = j.a;
        document.getElementById(j.name + "_number").step = j.a;
        document.getElementById(j.name + "_number").min = j.a;
      }
      document.getElementById("buy_" + j.name + "_number").ⲆᐃⵠⵠᐃΔᐃ = j;
      document.getElementById(j.name + "_number").ⲆᐃⵠⵠᐃΔᐃ = j;
      for (var k = 0; k < e.length; k++) {
        document.getElementById(e[k][2] + j.name + "_number").addEventListener(e[k][0], e[k][1], false);
      }
    }
    $("[type='number']").keypress(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: false,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      ⲆᐃΔᐃᐃ: document.getElementById("agree_ing").style,
      ᐃⵠⲆΔⵠⵠⵠ: document.getElementById("cancel_agree_ing").style,
      ᐃⵠᐃΔⵠΔᐃ: document.getElementById("quest_agree_ing").style,
      ⵠⲆᐃⵠⵠᐃᐃ: document.getElementById("spectator_agree_ing").style,
      ⵠⲆⵠⲆΔᐃᐃ: document.getElementById("auto_feed_agree_ing").style,
      ⵠⲆⵠⵠⲆⵠΔ: document.getElementById("info_agree_ing").style,
      ΔⵠⵠⵠⵠⲆᐃ: document.getElementById("pixelated_agree_ing").style,
      button: yf(60, 60, 0, ᐃᐃ[727]),
      ΔᐃⵠᐃⲆΔⲆⲆⵠ: function () {
        Cx.options.open = !Cx.options.open;
        if (Cx.options.open) {
          Cx.options.style.display = "inline-block";
        } else {
          Cx.options.style.display = "none";
        }
      },
      ΔⲆⲆⵠⲆᐃᐃᐃⵠ: function () {
        xx.ᐃᐃΔᐃᐃᐃΔ();
      },
      ᐃᐃⵠᐃΔΔⵠΔⵠ: function () {
        xx.ⵠⲆⲆΔⵠⵠᐃ();
      },
      high: function () {
        xx.ⲆⵠΔⲆⵠⵠⲆᐃⵠ();
      },
      low: function () {
        xx.ᐃⲆᐃⵠⵠⵠⵠΔⵠ();
      },
      ᐃⲆⲆᐃΔ: function () {
        Cx.ⲆΔᐃᐃ.ᐃⲆⲆᐃΔ();
      },
      ΔΔᐃᐃᐃΔᐃΔΔ: function () {
        Cx.ⲆⲆⵠΔⲆ.ᐃⲆⲆᐃΔ();
      },
      ⲆΔⵠΔᐃⲆⲆΔⲆ: function () {
        Cx.ᐃΔΔᐃ.ᐃⲆⲆᐃΔ();
      },
      ⵠⵠⲆΔⲆⵠⵠⲆᐃ: function () {
        zx.ⲆᐃⵠⵠΔ.ⵠⵠⵠᐃᐃⵠᐃ();
      },
      ΔⵠⵠΔⲆⵠⵠⵠⵠ: function () {
        zx.ⵠⵠⵠⲆᐃ.ⵠⵠⵠᐃᐃⵠᐃ();
      },
      ⲆⵠᐃⵠΔ: function () {
        Cx.options.style.display = "none";
        Cx.options.open = pa;
      },
      ΔⵠΔ: function () {
        this.style.left = Math.floor(aq - 235) + "px";
        this.style.top = Math.floor(bq - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ΔⲆⲆⵠⲆᐃᐃᐃⵠ, false);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ᐃᐃⵠᐃΔΔⵠΔⵠ, false);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, Vn);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, yg);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.ⲆⵠᐃⵠΔ, Pn);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ᐃⲆⲆᐃΔ, false);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ⲆΔⵠΔᐃⲆⲆΔⲆ, pa);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ΔΔᐃᐃᐃΔᐃΔΔ, zq);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ⵠⵠⲆΔⲆⵠⵠⲆᐃ, $n);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ΔⵠⵠΔⲆⵠⵠⵠⵠ, Ah);
    this.ⲆⲆⵠΔⲆ = {
      open: yg,
      ᐃⲆⲆⵠⲆ: ᐃΔⲆⲆ.get("starve_cancel") ? ᐃΔⲆⲆ.get("starve_cancel") === "0" ? 0 : 1 : 1,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      ⲆᐃΔᐃᐃ: document.getElementById("cancel_agree").style,
      button: 0,
      ᐃⲆ: 0,
      ⲆⵠᐃⵠΔ: function () {
        Cx.ⲆⲆⵠΔⲆ.style.display = "none";
        Cx.ⲆⲆⵠΔⲆ.open = x;
      },
      ᐃᐃⲆΔᐃⵠⲆ: function () {
        if (zx.ⵠΔᐃΔ.ᐃΔΔᐃᐃ) {
          Bx.ᐃⲆΔⵠᐃⲆᐃΔΔ();
        }
        Cx.ⲆⲆⵠΔⲆ.ⲆⵠᐃⵠΔ();
      },
      ᐃⲆⲆᐃΔ: function () {
        if (Cx.ⲆⲆⵠΔⲆ.ᐃⲆⲆⵠⲆ) {
          ᐃΔⲆⲆ.set("starve_cancel", "0");
          Cx.ⲆⲆⵠΔⲆ.ⲆᐃΔᐃᐃ.display = "inline-block";
          Cx.options.ᐃⵠⲆΔⵠⵠⵠ.display = "none";
        } else {
          ᐃΔⲆⲆ.set("starve_cancel", "1");
          Cx.ⲆⲆⵠΔⲆ.ⲆᐃΔᐃᐃ.display = "none";
          Cx.options.ᐃⵠⲆΔⵠⵠⵠ.display = "inline-block";
        }
        Cx.ⲆⲆⵠΔⲆ.ᐃⲆⲆⵠⲆ = !Cx.ⲆⲆⵠΔⲆ.ᐃⲆⲆⵠⲆ;
      },
      ΔΔⲆⲆᐃᐃᐃ: function () {
        if (this.ᐃⲆⲆⵠⲆ) {
          this.style.display = "inline-block";
          this.open = Kh;
        } else {
          this.ᐃᐃⲆΔᐃⵠⲆ();
        }
      },
      ΔⵠΔ: function () {
        this.style.left = Math.floor(aq - 235) + "px";
        this.style.top = Math.floor(bq - 130) + "px";
      }
    };
    this.ⲆⲆⵠΔⲆ.id.oncontextmenu = function () {
      return false;
    };
    this.ⲆⲆⵠΔⲆ.ⲆᐃΔᐃᐃ.display = "none";
    if (this.ⲆⲆⵠΔⲆ.ᐃⲆⲆⵠⲆ) {
      this.options.ᐃⵠⲆΔⵠⵠⵠ.display = "inline-block";
    } else {
      this.options.ᐃⵠⲆΔⵠⵠⵠ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ⲆⲆⵠΔⲆ.ᐃᐃⲆΔᐃⵠⲆ, x);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ⲆⲆⵠΔⲆ.ⲆⵠᐃⵠΔ, false);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ⲆⲆⵠΔⲆ.ᐃⲆⲆᐃΔ, Il);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, oj);
    this.ΔᐃΔⵠⵠᐃⲆ = {
      ᐃⲆⲆⵠⲆ: ᐃΔⲆⲆ.get("starve_aliasing") ? ᐃΔⲆⲆ.get("starve_aliasing") === "0" ? 0 : 1 : 1,
      ᐃⵠᐃⵠⵠⲆⲆ: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      ᐃⲆⲆᐃΔ: function () {
        if (Cx.ΔᐃΔⵠⵠᐃⲆ.ᐃⲆⲆⵠⲆ === 0) {
          ᐃΔⲆⲆ.set("starve_aliasing", "1");
          Cx.ΔᐃΔⵠⵠᐃⲆ.ᐃⵠᐃⵠⵠⲆⲆ(1);
          Cx.options.ΔⵠⵠⵠⵠⲆᐃ.display = "inline-block";
        } else {
          ᐃΔⲆⲆ.set("starve_aliasing", "0");
          Cx.ΔᐃΔⵠⵠᐃⲆ.ᐃⵠᐃⵠⵠⲆⲆ(0);
          Cx.options.ΔⵠⵠⵠⵠⲆᐃ.display = "none";
        }
        Cx.ΔᐃΔⵠⵠᐃⲆ.ᐃⲆⲆⵠⲆ = (Cx.ΔᐃΔⵠⵠᐃⲆ.ᐃⲆⲆⵠⲆ + 1) % 2;
      }
    };
    if (this.ΔᐃΔⵠⵠᐃⲆ.ᐃⲆⲆⵠⲆ === 1) {
      this.options.ΔⵠⵠⵠⵠⲆᐃ.display = "inline-block";
    } else {
      this.ΔᐃΔⵠⵠᐃⲆ.ᐃⵠᐃⵠⵠⲆⲆ(0);
      this.options.ΔⵠⵠⵠⵠⲆᐃ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ΔᐃΔⵠⵠᐃⲆ.ᐃⲆⲆᐃΔ, oj);
    this.ΔⲆⵠΔⵠ = {
      ᐃⲆⲆⵠⲆ: ᐃΔⲆⲆ.get("starve_info_box") ? ᐃΔⲆⲆ.get("starve_info_box") === "0" ? 0 : 1 : 1,
      display: 0,
      x: 0,
      y: 0,
      id: 0,
      ⵠΔᐃΔ: 0,
      ᐃⲆⲆᐃΔ: function () {
        if (Cx.ΔⲆⵠΔⵠ.ᐃⲆⲆⵠⲆ === 0) {
          ᐃΔⲆⲆ.set("starve_info_box", "1");
          Cx.options.ⵠⲆⵠⵠⲆⵠΔ.display = "inline-block";
        } else {
          ᐃΔⲆⲆ.set("starve_info_box", "0");
          Cx.options.ⵠⲆⵠⵠⲆⵠΔ.display = "none";
        }
        Cx.ΔⲆⵠΔⵠ.ᐃⲆⲆⵠⲆ = (Cx.ΔⲆⵠΔⵠ.ᐃⲆⲆⵠⲆ + 1) % 2;
      },
      ᐃᐃᐃⵠ: function (a, b, c) {
        if (a && this.ᐃⲆⲆⵠⲆ) {
          this.display = 1;
          this.id = c === 0 ? b.id : ot[b.id].ᐃⲆⲆΔ;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.ⵠΔᐃΔ = c;
        }
        return a;
      }
    };
    if (this.ΔⲆⵠΔⵠ.ᐃⲆⲆⵠⲆ === 1) {
      this.options.ⵠⲆⵠⵠⲆⵠΔ.display = "inline-block";
    } else {
      this.options.ⵠⲆⵠⵠⲆⵠΔ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ΔⲆⵠΔⵠ.ᐃⲆⲆᐃΔ, false);
    if (ᐃΔⲆⲆ.get("starve_scale")) {
      fq = Number(ᐃΔⲆⲆ.get("starve_scale"));
      document.getElementById("input_ratio").value = fq;
      fq *= Xq / Zq;
      $q();
    }
    this.ⲆΔΔᐃⲆᐃⵠ = function () {
      ᐃΔⲆⲆ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      fq = document.getElementById("input_ratio").value * (Xq / Zq);
      $q();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ⲆΔΔᐃⲆᐃⵠ, Qi);
    this.ⲆΔᐃᐃ = {
      open: Il,
      ᐃⲆⲆⵠⲆ: ᐃΔⲆⲆ.get("starve_safe") ? ᐃΔⲆⲆ.get("starve_safe") === "0" ? 0 : 1 : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      ⲆᐃΔᐃᐃ: document.getElementById("agree").style,
      button: 0,
      ᐃⲆ: 0,
      ⲆⵠᐃⵠΔ: function () {
        Cx.ⲆΔᐃᐃ.style.display = "none";
        Cx.ⲆΔᐃᐃ.open = yg;
      },
      all: function () {
        if (!zx.Ⲇⵠⵠⵠⵠ.wait) {
          if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && zx.ⵠΔᐃΔ.id < 0 && !zx.ⲆⲆⵠⲆⲆ.enabled) {
            Bx.ᐃⵠⵠⲆⲆⵠⵠⵠΔ(Cx.ⲆΔᐃᐃ.button);
          }
          Cx.ⲆΔᐃᐃ.ⲆⵠᐃⵠΔ();
        }
      },
      ΔⲆᐃⲆ: function () {
        if (zx.ⵠΔᐃΔ.ⵠⵠΔⵠΔ && !zx.Ⲇⵠⵠⵠⵠ.wait) {
          if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && zx.ⵠΔᐃΔ.id < 0 && !zx.ⲆⲆⵠⲆⲆ.enabled) {
            Bx.ⵠⵠᐃⲆⲆⲆⵠⵠⵠ(Cx.ⲆΔᐃᐃ.button);
          }
          Cx.ⲆΔᐃᐃ.ⲆⵠᐃⵠΔ();
        }
      },
      ⵠΔⵠⲆᐃⵠᐃΔⵠ: function () {
        if (!zx.Ⲇⵠⵠⵠⵠ.wait) {
          if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && zx.ⵠΔᐃΔ.id < 0 && !zx.ⲆⲆⵠⲆⲆ.enabled) {
            Bx.ⵠⵠᐃⲆⵠΔᐃⲆΔ(Cx.ⲆΔᐃᐃ.button);
          }
          Cx.ⲆΔᐃᐃ.ⲆⵠᐃⵠΔ();
        }
      },
      ᐃⲆⲆᐃΔ: function () {
        if (Cx.ⲆΔᐃᐃ.ᐃⲆⲆⵠⲆ) {
          ᐃΔⲆⲆ.set("starve_safe", "0");
          Cx.ⲆΔᐃᐃ.ⲆᐃΔᐃᐃ.display = "inline-block";
          Cx.options.ⲆᐃΔᐃᐃ.display = "none";
        } else {
          ᐃΔⲆⲆ.set("starve_safe", "1");
          Cx.ⲆΔᐃᐃ.ⲆᐃΔᐃᐃ.display = "none";
          Cx.options.ⲆᐃΔᐃᐃ.display = "inline-block";
        }
        Cx.ⲆΔᐃᐃ.ᐃⲆⲆⵠⲆ = !Cx.ⲆΔᐃᐃ.ᐃⲆⲆⵠⲆ;
      },
      ΔΔⲆⲆᐃᐃᐃ: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = ᐃᐃ[Xr[a].ⵠⵠ][0].ΔⵠΔΔᐃ === hg ? ᐃᐃ[Xr[a].ⵠⵠ][0].src : ᐃᐃ[Xr[a].ⵠⵠ][0].ΔⵠΔΔᐃ;
        if (Xr[a].ΔⲆᐃⲆ && !zx.ΔⵠⵠⵠΔ && zx.ⵠΔᐃΔ.ⵠⵠΔⵠΔ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.ᐃⲆⲆⵠⲆ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.all();
        }
      },
      ΔⵠΔ: function () {
        this.style.left = Math.floor(aq - 235) + "px";
        this.style.top = Math.floor(bq - 175) + "px";
      }
    };
    this.ⲆΔᐃᐃ.ⲆᐃΔᐃᐃ.display = "none";
    if (this.ⲆΔᐃᐃ.ᐃⲆⲆⵠⲆ) {
      this.options.ⲆᐃΔᐃᐃ.display = "inline-block";
    } else {
      this.options.ⲆᐃΔᐃᐃ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ⲆΔᐃᐃ.ⵠΔⵠⲆᐃⵠᐃΔⵠ, false);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ⲆΔᐃᐃ.all, false);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ⲆΔᐃᐃ.ΔⲆᐃⲆ, Qg);
    document.getElementById("no_delete").addEventListener("mouseup", this.ⲆΔᐃᐃ.ⲆⵠᐃⵠΔ, false);
    document.getElementById("case_agree").addEventListener("mouseup", this.ⲆΔᐃᐃ.ᐃⲆⲆᐃΔ, false);
    this.ⲆⵠΔⲆΔ = {
      open: hr,
      ⲆⵠΔⵠⲆ: -1,
      button: yf(60, 60, 0, ᐃᐃ[592]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      ΔⵠΔ: function () {
        this.style.left = Math.floor(aq - 300) + "px";
        this.style.top = Math.floor(bq - 215) + "px";
      },
      ⲆⵠᐃⵠΔ: function () {
        Cx.ⲆⵠΔⲆΔ.open = false;
        Cx.ⲆⵠΔⲆΔ.style.display = "none";
      },
      select: function () {
        Cx.ⲆⵠΔⲆΔ.open = !Cx.ⲆⵠΔⲆΔ.open;
        if (Cx.ⲆⵠΔⲆΔ.open) {
          Cx.ⲆⵠΔⲆΔ.style.display = "inline-block";
        } else {
          Cx.ⲆⵠΔⲆΔ.style.display = "none";
        }
      },
      ᐃⲆΔⵠᐃⵠᐃ: function () {
        if (Cx.ⲆⵠΔⲆΔ.ⲆⵠΔⵠⲆ >= 0) {
          Bx.ⲆⵠⵠΔⵠᐃⲆΔΔ(Cx.ⲆⵠΔⲆΔ.ⲆⵠΔⵠⲆ);
          Cx.ⲆⵠΔⲆΔ.ⲆⵠᐃⵠΔ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + Cx.ⲆⵠΔⲆΔ.ⲆⵠΔⵠⲆ);
          }
        }
      },
      ᐃⵠΔᐃᐃ: function () {
        var a = zx.ⲆⵠΔⲆΔ.value;
        document.getElementById("points_bank").innerHTML = ΔⲆᐃ.ⵠⲆⲆⵠⵠΔᐃ(a) + " points";
        for (var b = 0; b < _f.length; b++) {
          if (_f[b].ⲆᐃⲆⲆⲆ > a) {
            document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + 1)).style.opacity = "1";
          }
        }
        for (b = 1; b < 13; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ⵠⲆΔΔⵠⵠᐃᐃᐃ: function () {
        if (this.id.length > 8) {
          var a = Number(this.id.charAt(7) + this.id.charAt(8));
        } else {
          a = Number(this.id.charAt(7));
        }
        var b = _f[a - 1];
        if (zx.ⲆⵠΔⲆΔ.value >= b.ⲆᐃⲆⲆⲆ) {
          Cx.ⲆⵠΔⲆΔ.ⲆⵠΔⵠⲆ = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          Cx.ⲆⵠΔⲆΔ.ⲆⵠΔⵠⲆ = -1;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = 1, d = 1; c < b.length + 1; c++) {
          if (b[c - 1][1] !== 29) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = ᐃᐃ[Xr[b[c - 1][1]].ⵠⵠ][0].ΔⵠΔΔᐃ === Nn ? ᐃᐃ[Xr[b[c - 1][1]].ⵠⵠ][0].src : ᐃᐃ[Xr[b[c - 1][1]].ⵠⵠ][0].ΔⵠΔΔᐃ;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
            d++;
          }
        }
        for (; d < 13; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ⲆⵠΔⲆΔ.ⲆⵠᐃⵠΔ, x);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ⲆⵠΔⲆΔ.ᐃⲆΔⵠᐃⵠᐃ, false);
    for (k = 1; k < 11; k++) {
      document.getElementById("starter" + k).addEventListener("mouseup", this.ⲆⵠΔⲆΔ.ⵠⲆΔΔⵠⵠᐃᐃᐃ, false);
    }
    this.ᐃΔΔᐃ = {
      open: Vn,
      ᐃⲆⲆⵠⲆ: ᐃΔⲆⲆ.get("starve_quests") ? ᐃΔⲆⲆ.get("starve_quests") === "1" ? 1 : 0 : 0,
      button: yf(60, 60, 0, ᐃᐃ[755]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      ΔⵠΔ: function () {
        this.style.left = Math.floor(aq - 420) + "px";
        this.style.top = Math.floor(bq - 270) + "px";
      },
      ⲆⵠᐃⵠΔ: function () {
        Cx.ᐃΔΔᐃ.style.display = "none";
        Cx.ᐃΔΔᐃ.open = _n;
      },
      select: function () {
        Cx.ᐃΔΔᐃ.open = !Cx.ᐃΔΔᐃ.open;
        if (Cx.ᐃΔΔᐃ.open) {
          Cx.ᐃΔΔᐃ.style.display = "inline-block";
        } else {
          Cx.ᐃΔΔᐃ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = 0; a < Lf.length; a++) {
          this.list[a] = 1;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      ⵠΔⵠΔⵠΔⲆ: 0,
      ΔⵠᐃᐃΔⵠⵠ: 0,
      ⲆΔⲆᐃⲆⲆᐃᐃⵠ: function () {
        if (Cx.ᐃΔΔᐃ.open) {
          var a = new Date().getTime();
          if (a - this.ⵠΔⵠΔⵠΔⲆ >= 1000) {
            this.ⵠΔⵠΔⵠΔⲆ = a;
            for (var b = 0; b < Lf.length; b++) {
              if (Cx.ᐃΔΔᐃ.list[b]) {
                var c = Lf[b].time - (a - yx.ᐃᐃⵠΔⲆ.ᐃⵠΔᐃᐃ + Cx.ᐃΔΔᐃ.ΔⵠᐃᐃΔⵠⵠ);
                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = 0; b < a.length; b++) {
          if (a[b] != 1) {
            Cx.ᐃΔΔᐃ.ΔᐃⲆⵠⵠΔΔ(b, a[b]);
          }
        }
      },
      ΔᐃⲆⵠⵠΔΔ: function (a, b) {
        if (b === 3 && (a === 11 || a === 12)) {
          zx.ᐃΔⲆᐃ.ⲆⲆᐃⵠΔᐃⲆ(0, 1);
          Cx.ⵠⵠΔΔⲆΔⵠ();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > 1) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === 0) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById("timeremain_" + a).style.display = "none";
        }
        document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
        document.getElementById("time_finished_" + a).style.display = "inline";
        Cx.ᐃΔΔᐃ.list[a] = 0;
      },
      modify: function (a, b) {
        Cx.ᐃΔΔᐃ.ΔᐃⲆⵠⵠΔΔ(a, b);
        if (Cx.ᐃΔΔᐃ.ᐃⲆⲆⵠⲆ) {
          Cx.ᐃΔΔᐃ.open = true;
          Cx.ᐃΔΔᐃ.style.display = "inline-block";
        }
      },
      ᐃⲆⲆᐃΔ: function () {
        if (Cx.ᐃΔΔᐃ.ᐃⲆⲆⵠⲆ) {
          ᐃΔⲆⲆ.set("starve_quests", "0");
          Cx.options.ᐃⵠᐃΔⵠΔᐃ.display = "none";
        } else {
          ᐃΔⲆⲆ.set("starve_quests", "1");
          Cx.options.ᐃⵠᐃΔⵠΔᐃ.display = "inline-block";
        }
        Cx.ᐃΔΔᐃ.ᐃⲆⲆⵠⲆ = !Cx.ᐃΔΔᐃ.ᐃⲆⲆⵠⲆ;
      },
      ⲆⵠᐃⵠᐃⵠⲆⲆΔ: function () {
        var a = Number(this.id.charAt(13));
        var b = Number(this.id.charAt(14));
        if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
          a = a * 10 + b;
        }
        Bx.ΔᐃⲆⵠΔΔⵠᐃΔ(a);
      }
    };
    if (this.ᐃΔΔᐃ.ᐃⲆⲆⵠⲆ) {
      this.options.ᐃⵠᐃΔⵠΔᐃ.display = "inline-block";
    } else {
      this.options.ᐃⵠᐃΔⵠΔᐃ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ᐃΔΔᐃ.ⲆⵠᐃⵠΔ, _n);
    for (k = 0; Lf.length > k; k++) {
      document.getElementById("claim_reward_" + k).addEventListener("mouseup", this.ᐃΔΔᐃ.ⲆⵠᐃⵠᐃⵠⲆⲆΔ, false);
    }
    this.ΔΔⲆⲆ = {
      open: Lk,
      button: yf(60, 60, 0, ᐃᐃ[708]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ⲆⵠⵠᐃⵠᐃΔ: [],
        ⵠΔΔΔΔᐃⲆ: 0,
        ΔⵠΔ: function () {
          this.style.left = Math.floor(aq - 335) + "px";
          this.style.top = Math.floor(bq - 215) + "px";
        },
        ⲆⵠᐃⵠΔ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          Cx.ΔΔⲆⲆ.open = jj;
        },
        ᐃᐃⵠⲆⵠⵠΔ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ΔⲆᐃᐃ: function (a) {
          if ((b = this.ⲆⵠⵠᐃⵠᐃΔ[a]).ⵠΔⲆ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = ᐃᐃ[Xr[b[a][0]].ⵠⵠ][0].ΔⵠΔΔᐃ === Ll ? ᐃᐃ[Xr[b[a][0]].ⵠⵠ][0].src : ᐃᐃ[Xr[b[a][0]].ⵠⵠ][0].ΔⵠΔΔᐃ;
            document.getElementById("numb" + c).innerHTML = "" + b[a][1];
            c++;
          }
          for (; c < 6; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.ⵠΔΔΔΔᐃⲆ = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = 0, c = 0; b < ot.length; b++) {
            var d = ot[b];
            if (a === d.ᐃᐃⲆ) {
              this.ⲆⵠⵠᐃⵠᐃΔ[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = ᐃᐃ[Xr[d.ᐃⲆⲆΔ].ⵠⵠ][0].ΔⵠΔΔᐃ === ij ? ᐃᐃ[Xr[d.ᐃⲆⲆΔ].ⵠⵠ][0].src : ᐃᐃ[Xr[d.ᐃⲆⲆΔ].ⵠⵠ][0].ΔⵠΔΔᐃ;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      ⲆⵠΔⲆᐃΔᐃ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        ΔⵠΔ: function () {
          this.style.left = Math.floor(aq - 285) + "px";
          this.style.top = Math.floor(bq - 170) + "px";
        },
        ⲆⵠᐃⵠΔ: function () {
          document.getElementById("home_craft").style.display = "none";
          Cx.ΔΔⲆⲆ.open = false;
        }
      },
      ᐃΔⲆΔΔᐃᐃⲆᐃ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.ΔΔⲆⲆ.ⲆⵠΔⲆᐃΔᐃ.ⲆⵠᐃⵠΔ, jj);
    document.getElementById("quitmenu").addEventListener("mouseup", this.ΔΔⲆⲆ.list.ⲆⵠᐃⵠΔ, false);
    document.getElementById("backhome").addEventListener("mouseup", this.ΔΔⲆⲆ.list.ᐃᐃⵠⲆⵠⵠΔ, false);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      Cx.ΔΔⲆⲆ.list.select(2);
    }, false);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      Cx.ΔΔⲆⲆ.list.select(1);
    }, false);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      Cx.ΔΔⲆⲆ.list.select(0);
    }, false);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      Cx.ΔΔⲆⲆ.list.select(3);
    }, false);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      Cx.ΔΔⲆⲆ.list.select(4);
    }, false);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      Cx.ΔΔⲆⲆ.list.select(5);
    }, _n);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(0);
    }, Il);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(1);
    }, hr);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(2);
    }, false);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(3);
    }, x);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(4);
    }, $n);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(5);
    }, Wl);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(6);
    }, $n);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(7);
    }, x);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(8);
    }, false);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(9);
    }, false);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(10);
    }, false);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(11);
    }, _n);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(12);
    }, false);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(13);
    }, false);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(14);
    }, false);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(15);
    }, false);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(16);
    }, false);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(17);
    }, zq);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(18);
    }, Il);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(19);
    }, false);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(20);
    }, false);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(21);
    }, ns);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(22);
    }, false);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(23);
    }, false);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(24);
    }, $n);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(25);
    }, x);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(26);
    }, false);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(27);
    }, Vn);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(28);
    }, Lk);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(29);
    }, Lk);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(30);
    }, false);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(31);
    }, Qg);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(32);
    }, false);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(33);
    }, zq);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(34);
    }, false);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(35);
    }, false);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(36);
    }, false);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(37);
    }, oj);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(38);
    }, x);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(39);
    }, x);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(40);
    }, false);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(41);
    }, zq);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(42);
    }, false);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(43);
    }, zq);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(44);
    }, Pn);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(45);
    }, Lk);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(46);
    }, _n);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      Cx.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(47);
    }, _n);
    this.ᐃΔᐃΔΔ = {
      translate: {
        y: 0,
        x: 0
      },
      Ⲇⵠⵠᐃⵠ: {
        x: -1,
        y: -1
      },
      ΔΔᐃΔ: [],
      focus: function (a) {
        var b = this.translate.y + (zx.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.length > 0 ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.Ⲇⵠⵠᐃⵠ.x = a.x - this.translate.x;
          this.Ⲇⵠⵠᐃⵠ.y = a.y - b;
        }
      }
    };
    this.ΔⵠⲆᐃ = {
      translate: {
        x: 0,
        y: 0
      },
      ⵠⵠ: ᐃᐃ[278],
      ᐃⵠ: document.createElement("canvas")
    };
    this.ΔⵠⲆᐃ.ᐃⵠ.width = this.ΔⵠⲆᐃ.ⵠⵠ.width;
    this.ΔⵠⲆᐃ.ᐃⵠ.height = this.ΔⵠⲆᐃ.ⵠⵠ.height;
    this.ΔⵠⲆᐃ.Δ = this.ΔⵠⲆᐃ.ᐃⵠ.getContext("2d");
    this.ⵠΔⲆΔ = {
      translate: {
        x: 0,
        y: 0
      },
      ⵠⵠ: ᐃᐃ[267],
      ᐃⵠΔᐃ: Lu,
      y: 0
    };
    var m = _a.document.createElement("div");
    this.ᐃⵠⲆΔⲆⲆᐃ = function () {
      ⲆⵠⲆⲆᐃ = document.getElementById("team_box");
      ⲆⵠⲆⲆᐃ.innerHTML = "";
      ⲆⵠⲆⲆᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((m.innerText = yx.ΔΔᐃΔ[zx.ΔⲆᐃⲆⲆ[0]].ⵠⲆⵠΔⵠ) && m.innerHTML) + "</div";
      for (var a = 1; zx.ΔⲆᐃⲆⲆ.length > a; a++) {
        ⲆⵠⲆⲆᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((m.innerText = yx.ΔΔᐃΔ[zx.ΔⲆᐃⲆⲆ[a]].ⵠⲆⵠΔⵠ) && m.innerHTML) + "</div></div>";
      }
      ⲆⵠⲆⲆᐃ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      ⲆⵠⲆⲆᐃ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", Bx.ᐃⵠⲆΔⲆⲆᐃ, false);
    };
    this.ⵠⲆⲆⵠᐃᐃⲆⲆᐃ = function () {
      ⲆⵠⲆⲆᐃ = document.getElementById("team_box");
      ⲆⵠⲆⲆᐃ.innerHTML = "";
      ⲆⵠⲆⲆᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((m.innerText = yx.ΔΔᐃΔ[zx.ΔⲆᐃⲆⲆ[0]].ⵠⲆⵠΔⵠ) && m.innerHTML) + "</div";
      for (var a = 1; a < zx.ΔⲆᐃⲆⲆ.length; a++) {
        ⲆⵠⲆⲆᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((m.innerText = yx.ΔΔᐃΔ[zx.ΔⲆᐃⲆⲆ[a]].ⵠⲆⵠΔⵠ) && m.innerHTML) + "</div></div>";
      }
      ⲆⵠⲆⲆᐃ.innerHTML += "</div>";
      ⲆⵠⲆⲆᐃ.style.display = "inline-block";
    };
    this.ⵠⵠⲆΔΔⵠⵠⵠΔ = function () {
      ⲆⵠⲆⲆᐃ = document.getElementById("team_box");
      ⲆⵠⲆⲆᐃ.innerHTML = "";
      ⲆⵠⲆⲆᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((m.innerText = yx.ΔΔᐃΔ[zx.ΔⲆᐃⲆⲆ[0]].ⵠⲆⵠΔⵠ) && m.innerHTML) + "</div";
      for (var a = 1; a < zx.ΔⲆᐃⲆⲆ.length; a++) {
        ⲆⵠⲆⲆᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((m.innerText = yx.ΔΔᐃΔ[zx.ΔⲆᐃⲆⲆ[a]].ⵠⲆⵠΔⵠ) && m.innerHTML) + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (zx.ⲆⲆᐃⵠΔ.lock === 0) {
        ⲆⵠⲆⲆᐃ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        ⲆⵠⲆⲆᐃ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", Bx.ΔⵠⲆⵠᐃΔⲆⵠᐃ, false);
      ⲆⵠⲆⲆᐃ.style.display = "inline-block";
      for (a = 1; a < zx.ΔⲆᐃⲆⲆ.length; a++) {
        switch (a) {
          case 1:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Bx.ΔᐃᐃᐃΔᐃΔ(1);
            }, false);
            break;
          case 2:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Bx.ΔᐃᐃᐃΔᐃΔ(2);
            }, Qi);
            break;
          case 3:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Bx.ΔᐃᐃᐃΔᐃΔ(3);
            }, false);
            break;
          case 4:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Bx.ΔᐃᐃᐃΔᐃΔ(4);
            }, false);
            break;
          case 5:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Bx.ΔᐃᐃᐃΔᐃΔ(5);
            }, Wl);
            break;
          case 6:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Bx.ΔᐃᐃᐃΔᐃΔ(6);
            }, ns);
            break;
          case 7:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Bx.ΔᐃᐃᐃΔᐃΔ(7);
            }, Pn);
            break;
          case 8:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Bx.ΔᐃᐃᐃΔᐃΔ(8);
            }, Ah);
        }
      }
    };
    this.ΔᐃᐃⵠΔ = [];
    this.ΔᐃᐃⵠΔ[2] = {
      button: yf(60, 60, 0, ᐃᐃ[556]),
      action: this.ᐃⵠⲆΔⲆⲆᐃ
    };
    this.ΔᐃᐃⵠΔ[3] = {
      button: yf(60, 60, 0, ᐃᐃ[556]),
      action: Bx.ᐃΔΔⲆⲆΔΔᐃⵠ
    };
    this.ΔᐃᐃⵠΔ[0] = {
      button: yf(60, 60, 0, ᐃᐃ[557]),
      action: this.ⵠⵠⲆΔΔⵠⵠⵠΔ
    };
    this.ΔᐃᐃⵠΔ[1] = {
      button: yf(60, 60, 0, ᐃᐃ[561]),
      action: this.ⵠⲆⲆⵠᐃᐃⲆⲆᐃ
    };
    this.ΔᐃᐃⵠΔ[4] = {
      button: yf(60, 60, 0, ᐃᐃ[560]),
      action: function () {}
    };
    this.ΔᐃⲆⲆᐃ = -1;
    this.ⵠⵠⵠⲆᐃΔᐃ = yf(60, 60, 0, ᐃᐃ[723]);
    this.ⵠⲆⲆᐃⲆⵠᐃ = yf(60, 60, 0, ᐃᐃ[724]);
    this.ⵠΔᐃᐃⲆⲆⲆ = yf(60, 60, 0, ᐃᐃ[658]);
    this.ⲆⵠΔᐃⵠⲆΔ = yf(60, 60, 0, ᐃᐃ[657]);
    this.ⲆΔᐃⲆΔⵠⵠ = yf(60, 60, 0, ᐃᐃ[658]);
    this.ᐃᐃᐃⵠᐃΔⲆ = yf(60, 60, 0, ᐃᐃ[316]);
    this.ᐃᐃᐃᐃⵠᐃⲆ = yf(60, 60, 0, ᐃᐃ[315]);
    this.ⵠⲆⲆΔⵠᐃⵠ = yf(60, 60, 0, ᐃᐃ[297]);
    this.ⵠⵠⵠⲆᐃΔⲆ = yf(60, 60, 0, ᐃᐃ[298]);
    this.ⲆΔⲆΔⲆΔΔ = yf(60, 60, 0, ᐃᐃ[418]);
    this.ⵠⵠⲆᐃΔⵠⲆ = yf(60, 60, 0, ᐃᐃ[938]);
    this.ᐃΔΔᐃⲆⲆⵠ = yf(60, 60, 0, ᐃᐃ[412]);
    this.ⵠⲆᐃⵠⵠⲆⵠ = yf(60, 60, 0, ᐃᐃ[536]);
    this.ᐃⵠΔⵠⲆΔᐃ = yf(60, 60, 0, ᐃᐃ[535]);
    this.ᐃΔᐃⲆᐃⵠⲆ = yf(60, 60, 0, ᐃᐃ[538]);
    this.ⵠᐃΔⵠⵠ = yf(120, 120, 0, ᐃᐃ[149]);
    this.ⵠᐃΔⵠⵠ.info.translate.x = 10;
    this.ⵠᐃΔⵠⵠ.info.translate.y = 10;
    this.ⵠⲆᐃ = [];
    this.ⵠⲆᐃ[0] = yf(68, 68, 0, ᐃᐃ[340], 3);
    this.ⵠⲆᐃ[0].id = 0;
    this.ⵠⲆᐃ[1] = yf(68, 68, 0, ᐃᐃ[341], 3);
    this.ⵠⲆᐃ[1].id = 1;
    this.ⵠⲆᐃ[108] = yf(68, 68, 0, ᐃᐃ[342], 3);
    this.ⵠⲆᐃ[108].id = 108;
    this.ⵠⲆᐃ[109] = yf(68, 68, 0, ᐃᐃ[343], 3);
    this.ⵠⲆᐃ[109].id = 109;
    this.ⵠⲆᐃ[110] = yf(68, 68, 0, ᐃᐃ[269], 3);
    this.ⵠⲆᐃ[110].id = 110;
    this.ⵠⲆᐃ[233] = yf(68, 68, 0, ᐃᐃ[1155], 3);
    this.ⵠⲆᐃ[233].id = 233;
    this.ⵠⲆᐃ[111] = yf(68, 68, 0, ᐃᐃ[270], 3);
    this.ⵠⲆᐃ[111].id = 111;
    this.ⵠⲆᐃ[112] = yf(68, 68, 0, ᐃᐃ[271], 3);
    this.ⵠⲆᐃ[112].id = 112;
    this.ⵠⲆᐃ[3] = yf(68, 68, 0, ᐃᐃ[272], 3);
    this.ⵠⲆᐃ[3].id = 3;
    this.ⵠⲆᐃ[4] = yf(68, 68, 0, ᐃᐃ[344], 3);
    this.ⵠⲆᐃ[4].id = 4;
    this.ⵠⲆᐃ[5] = yf(68, 68, 0, ᐃᐃ[345], 3);
    this.ⵠⲆᐃ[5].id = 5;
    this.ⵠⲆᐃ[57] = yf(68, 68, 0, ᐃᐃ[831], 3);
    this.ⵠⲆᐃ[57].id = 57;
    this.ⵠⲆᐃ[6] = yf(68, 68, 0, ᐃᐃ[346], 3);
    this.ⵠⲆᐃ[6].id = 6;
    this.ⵠⲆᐃ[113] = yf(68, 68, 0, ᐃᐃ[273], 3);
    this.ⵠⲆᐃ[113].id = 113;
    this.ⵠⲆᐃ[114] = yf(68, 68, 0, ᐃᐃ[358], 3);
    this.ⵠⲆᐃ[114].id = 114;
    this.ⵠⲆᐃ[115] = yf(68, 68, 0, ᐃᐃ[348], 3);
    this.ⵠⲆᐃ[115].id = 115;
    this.ⵠⲆᐃ[162] = yf(68, 68, 0, ᐃᐃ[349], 3);
    this.ⵠⲆᐃ[162].id = 162;
    this.ⵠⲆᐃ[160] = yf(68, 68, 0, ᐃᐃ[350], 3);
    this.ⵠⲆᐃ[160].id = 160;
    this.ⵠⲆᐃ[8] = yf(68, 68, 0, ᐃᐃ[274], 3);
    this.ⵠⲆᐃ[8].id = 8;
    this.ⵠⲆᐃ[117] = yf(68, 68, 0, ᐃᐃ[351], 3);
    this.ⵠⲆᐃ[117].id = 117;
    this.ⵠⲆᐃ[116] = yf(68, 68, 0, ᐃᐃ[275], 3);
    this.ⵠⲆᐃ[116].id = 116;
    this.ⵠⲆᐃ[118] = yf(68, 68, 0, ᐃᐃ[276], 3);
    this.ⵠⲆᐃ[118].id = 118;
    this.ⵠⲆᐃ[195] = yf(68, 68, 0, ᐃᐃ[352], 3);
    this.ⵠⲆᐃ[195].id = 195;
    this.ⵠⲆᐃ[161] = yf(68, 68, 0, ᐃᐃ[353], 3);
    this.ⵠⲆᐃ[161].id = 161;
    this.ⵠⲆᐃ[163] = yf(68, 68, 0, ᐃᐃ[354], 3);
    this.ⵠⲆᐃ[163].id = 163;
    this.ⵠⲆᐃ[164] = yf(68, 68, 0, ᐃᐃ[355], 3);
    this.ⵠⲆᐃ[164].id = 164;
    this.ⵠⲆᐃ[165] = yf(68, 68, 0, ᐃᐃ[356], 3);
    this.ⵠⲆᐃ[165].id = 165;
    this.ⵠⲆᐃ[166] = yf(68, 68, 0, ᐃᐃ[357], 3);
    this.ⵠⲆᐃ[166].id = 166;
    this.ⵠⲆᐃ[167] = yf(68, 68, 0, ᐃᐃ[359], 3);
    this.ⵠⲆᐃ[167].id = 167;
    this.ⵠⲆᐃ[168] = yf(68, 68, 0, ᐃᐃ[382], 3);
    this.ⵠⲆᐃ[168].id = 168;
    this.ⵠⲆᐃ[169] = yf(68, 68, 0, ᐃᐃ[383], 3);
    this.ⵠⲆᐃ[169].id = 169;
    this.ⵠⲆᐃ[170] = yf(68, 68, 0, ᐃᐃ[384], 3);
    this.ⵠⲆᐃ[170].id = 170;
    this.ⵠⲆᐃ[2] = yf(68, 68, 0, ᐃᐃ[386], 3);
    this.ⵠⲆᐃ[2].id = 2;
    this.ⵠⲆᐃ[237] = yf(68, 68, 0, ᐃᐃ[1163], 3);
    this.ⵠⲆᐃ[237].id = 237;
    this.ⵠⲆᐃ[174] = yf(68, 68, 0, ᐃᐃ[394], 3);
    this.ⵠⲆᐃ[174].id = 174;
    this.ⵠⲆᐃ[222] = yf(68, 68, 0, ᐃᐃ[1036], 3);
    this.ⵠⲆᐃ[222].id = 222;
    this.ⵠⲆᐃ[231] = yf(68, 68, 0, ᐃᐃ[1038], 3);
    this.ⵠⲆᐃ[231].id = 231;
    this.ⵠⲆᐃ[232] = yf(68, 68, 0, ᐃᐃ[1040], 3);
    this.ⵠⲆᐃ[232].id = 232;
    this.ⵠⲆᐃ[234] = yf(68, 68, 0, ᐃᐃ[1157], 3);
    this.ⵠⲆᐃ[234].id = 234;
    this.ⵠⲆᐃ[10] = yf(68, 68, 0, ᐃᐃ[387], 3);
    this.ⵠⲆᐃ[10].id = 10;
    this.ⵠⲆᐃ[171] = yf(68, 68, 0, ᐃᐃ[388], 3);
    this.ⵠⲆᐃ[171].id = 171;
    this.ⵠⲆᐃ[172] = yf(68, 68, 0, ᐃᐃ[389], 3);
    this.ⵠⲆᐃ[172].id = 172;
    this.ⵠⲆᐃ[173] = yf(68, 68, 0, ᐃᐃ[390], 3);
    this.ⵠⲆᐃ[173].id = 173;
    this.ⵠⲆᐃ[11] = yf(68, 68, 0, ᐃᐃ[391], 3);
    this.ⵠⲆᐃ[11].id = 11;
    this.ⵠⲆᐃ[12] = yf(68, 68, 0, ᐃᐃ[403], 3);
    this.ⵠⲆᐃ[12].id = 12;
    this.ⵠⲆᐃ[13] = yf(68, 68, 0, ᐃᐃ[397], 3);
    this.ⵠⲆᐃ[13].id = 13;
    this.ⵠⲆᐃ[14] = yf(68, 68, 0, ᐃᐃ[400], 3);
    this.ⵠⲆᐃ[14].id = 14;
    this.ⵠⲆᐃ[15] = yf(68, 68, 0, ᐃᐃ[406], 3);
    this.ⵠⲆᐃ[15].id = 15;
    this.ⵠⲆᐃ[16] = yf(68, 68, 0, ᐃᐃ[875], 3);
    this.ⵠⲆᐃ[16].id = 16;
    this.ⵠⲆᐃ[119] = yf(68, 68, 0, ᐃᐃ[410], 3);
    this.ⵠⲆᐃ[119].id = 119;
    this.ⵠⲆᐃ[23] = yf(68, 68, 0, ᐃᐃ[422], 3);
    this.ⵠⲆᐃ[23].id = 23;
    this.ⵠⲆᐃ[24] = yf(68, 68, 0, ᐃᐃ[425], 3);
    this.ⵠⲆᐃ[24].id = 24;
    this.ⵠⲆᐃ[87] = yf(68, 68, 0, ᐃᐃ[1229], 3);
    this.ⵠⲆᐃ[87].id = 87;
    this.ⵠⲆᐃ[88] = yf(68, 68, 0, ᐃᐃ[1232], 3);
    this.ⵠⲆᐃ[88].id = 88;
    this.ⵠⲆᐃ[80] = yf(68, 68, 0, ᐃᐃ[1139], 3);
    this.ⵠⲆᐃ[80].id = 80;
    this.ⵠⲆᐃ[81] = yf(68, 68, 0, ᐃᐃ[1142], 3);
    this.ⵠⲆᐃ[81].id = 81;
    this.ⵠⲆᐃ[101] = yf(68, 68, 0, ᐃᐃ[1167], 3);
    this.ⵠⲆᐃ[101].id = 101;
    this.ⵠⲆᐃ[64] = yf(68, 68, 0, ᐃᐃ[571], 3);
    this.ⵠⲆᐃ[64].id = 64;
    this.ⵠⲆᐃ[71] = yf(68, 68, 0, ᐃᐃ[1240], 3);
    this.ⵠⲆᐃ[71].id = 71;
    this.ⵠⲆᐃ[102] = yf(68, 68, 0, ᐃᐃ[1170], 3);
    this.ⵠⲆᐃ[102].id = 102;
    this.ⵠⲆᐃ[65] = yf(68, 68, 0, ᐃᐃ[574], 3);
    this.ⵠⲆᐃ[65].id = 65;
    this.ⵠⲆᐃ[72] = yf(68, 68, 0, ᐃᐃ[1243], 3);
    this.ⵠⲆᐃ[72].id = 72;
    this.ⵠⲆᐃ[103] = yf(68, 68, 0, ᐃᐃ[1173], 3);
    this.ⵠⲆᐃ[103].id = 103;
    this.ⵠⲆᐃ[66] = yf(68, 68, 0, ᐃᐃ[577], 3);
    this.ⵠⲆᐃ[66].id = 66;
    this.ⵠⲆᐃ[73] = yf(68, 68, 0, ᐃᐃ[1246], 3);
    this.ⵠⲆᐃ[73].id = 73;
    this.ⵠⲆᐃ[104] = yf(68, 68, 0, ᐃᐃ[1176], 3);
    this.ⵠⲆᐃ[104].id = 104;
    this.ⵠⲆᐃ[67] = yf(68, 68, 0, ᐃᐃ[580], 3);
    this.ⵠⲆᐃ[67].id = 67;
    this.ⵠⲆᐃ[74] = yf(68, 68, 0, ᐃᐃ[1249], 3);
    this.ⵠⲆᐃ[74].id = 74;
    this.ⵠⲆᐃ[105] = yf(68, 68, 0, ᐃᐃ[1179], 3);
    this.ⵠⲆᐃ[105].id = 105;
    this.ⵠⲆᐃ[68] = yf(68, 68, 0, ᐃᐃ[583], 3);
    this.ⵠⲆᐃ[68].id = 68;
    this.ⵠⲆᐃ[75] = yf(68, 68, 0, ᐃᐃ[1252], 3);
    this.ⵠⲆᐃ[75].id = 75;
    this.ⵠⲆᐃ[106] = yf(68, 68, 0, ᐃᐃ[1182], 3);
    this.ⵠⲆᐃ[106].id = 106;
    this.ⵠⲆᐃ[69] = yf(68, 68, 0, ᐃᐃ[586], 3);
    this.ⵠⲆᐃ[69].id = 69;
    this.ⵠⲆᐃ[76] = yf(68, 68, 0, ᐃᐃ[1255], 3);
    this.ⵠⲆᐃ[76].id = 76;
    this.ⵠⲆᐃ[107] = yf(68, 68, 0, ᐃᐃ[1185], 3);
    this.ⵠⲆᐃ[107].id = 107;
    this.ⵠⲆᐃ[70] = yf(68, 68, 0, ᐃᐃ[589], 3);
    this.ⵠⲆᐃ[70].id = 70;
    this.ⵠⲆᐃ[94] = yf(68, 68, 0, ᐃᐃ[1258], 3);
    this.ⵠⲆᐃ[94].id = 94;
    this.ⵠⲆᐃ[95] = yf(68, 68, 0, ᐃᐃ[1261], 3);
    this.ⵠⲆᐃ[95].id = 95;
    this.ⵠⲆᐃ[96] = yf(68, 68, 0, ᐃᐃ[1264], 3);
    this.ⵠⲆᐃ[96].id = 96;
    this.ⵠⲆᐃ[97] = yf(68, 68, 0, ᐃᐃ[1267], 3);
    this.ⵠⲆᐃ[97].id = 97;
    this.ⵠⲆᐃ[98] = yf(68, 68, 0, ᐃᐃ[1270], 3);
    this.ⵠⲆᐃ[98].id = 98;
    this.ⵠⲆᐃ[99] = yf(68, 68, 0, ᐃᐃ[1273], 3);
    this.ⵠⲆᐃ[99].id = 99;
    this.ⵠⲆᐃ[58] = yf(68, 68, 0, ᐃᐃ[828], 3);
    this.ⵠⲆᐃ[58].id = 58;
    this.ⵠⲆᐃ[25] = yf(68, 68, 0, ᐃᐃ[431], 3);
    this.ⵠⲆᐃ[25].id = 25;
    this.ⵠⲆᐃ[26] = yf(68, 68, 0, ᐃᐃ[434], 3);
    this.ⵠⲆᐃ[26].id = 26;
    this.ⵠⲆᐃ[27] = yf(68, 68, 0, ᐃᐃ[437], 3);
    this.ⵠⲆᐃ[27].id = 27;
    this.ⵠⲆᐃ[28] = yf(68, 68, 0, ᐃᐃ[440], 3);
    this.ⵠⲆᐃ[28].id = 28;
    this.ⵠⲆᐃ[120] = yf(68, 68, 0, ᐃᐃ[443], 3);
    this.ⵠⲆᐃ[120].id = 120;
    this.ⵠⲆᐃ[29] = yf(68, 68, 0, ᐃᐃ[385], 3);
    this.ⵠⲆᐃ[29].id = 29;
    this.ⵠⲆᐃ[121] = yf(68, 68, 0, ᐃᐃ[446], 3);
    this.ⵠⲆᐃ[121].id = 121;
    this.ⵠⲆᐃ[30] = yf(68, 68, 0, ᐃᐃ[457], 3);
    this.ⵠⲆᐃ[30].id = 30;
    this.ⵠⲆᐃ[9] = yf(68, 68, 0, ᐃᐃ[862], 3);
    this.ⵠⲆᐃ[9].id = 9;
    this.ⵠⲆᐃ[31] = yf(68, 68, 0, ᐃᐃ[459], 3);
    this.ⵠⲆᐃ[31].id = 31;
    this.ⵠⲆᐃ[32] = yf(68, 68, 0, ᐃᐃ[1018], 3);
    this.ⵠⲆᐃ[32].id = 32;
    this.ⵠⲆᐃ[33] = yf(68, 68, 0, ᐃᐃ[474], 3);
    this.ⵠⲆᐃ[33].id = 33;
    this.ⵠⲆᐃ[35] = yf(68, 68, 0, ᐃᐃ[479], 3);
    this.ⵠⲆᐃ[35].id = 35;
    this.ⵠⲆᐃ[36] = yf(68, 68, 0, ᐃᐃ[482], 3);
    this.ⵠⲆᐃ[36].id = 36;
    this.ⵠⲆᐃ[37] = yf(68, 68, 0, ᐃᐃ[485], 3);
    this.ⵠⲆᐃ[37].id = 37;
    this.ⵠⲆᐃ[38] = yf(68, 68, 0, ᐃᐃ[488], 3);
    this.ⵠⲆᐃ[38].id = 38;
    this.ⵠⲆᐃ[39] = yf(68, 68, 0, ᐃᐃ[491], 3);
    this.ⵠⲆᐃ[39].id = 39;
    this.ⵠⲆᐃ[122] = yf(68, 68, 0, ᐃᐃ[494], 3);
    this.ⵠⲆᐃ[122].id = 122;
    this.ⵠⲆᐃ[123] = yf(68, 68, 0, ᐃᐃ[497], 3);
    this.ⵠⲆᐃ[123].id = 123;
    this.ⵠⲆᐃ[124] = yf(68, 68, 0, ᐃᐃ[501], 3);
    this.ⵠⲆᐃ[124].id = 124;
    this.ⵠⲆᐃ[40] = yf(68, 68, 0, ᐃᐃ[504], 3);
    this.ⵠⲆᐃ[40].id = 40;
    this.ⵠⲆᐃ[146] = yf(68, 68, 0, ᐃᐃ[506], 3);
    this.ⵠⲆᐃ[146].id = 146;
    this.ⵠⲆᐃ[240] = yf(68, 68, 0, ᐃᐃ[1234], 3);
    this.ⵠⲆᐃ[240].id = 240;
    this.ⵠⲆᐃ[147] = yf(68, 68, 0, ᐃᐃ[514], 3);
    this.ⵠⲆᐃ[147].id = 147;
    this.ⵠⲆᐃ[148] = yf(68, 68, 0, ᐃᐃ[520], 3);
    this.ⵠⲆᐃ[148].id = 148;
    this.ⵠⲆᐃ[149] = yf(68, 68, 0, ᐃᐃ[522], 3);
    this.ⵠⲆᐃ[149].id = 149;
    this.ⵠⲆᐃ[150] = yf(68, 68, 0, ᐃᐃ[524], 3);
    this.ⵠⲆᐃ[150].id = 150;
    this.ⵠⲆᐃ[151] = yf(68, 68, 0, ᐃᐃ[531], 3);
    this.ⵠⲆᐃ[151].id = 151;
    this.ⵠⲆᐃ[158] = yf(68, 68, 0, ᐃᐃ[534], 3);
    this.ⵠⲆᐃ[158].id = 158;
    this.ⵠⲆᐃ[159] = yf(68, 68, 0, ᐃᐃ[554], 3);
    this.ⵠⲆᐃ[159].id = 159;
    this.ⵠⲆᐃ[43] = yf(68, 68, 0, ᐃᐃ[543], 3);
    this.ⵠⲆᐃ[43].id = 43;
    this.ⵠⲆᐃ[45] = yf(68, 68, 0, ᐃᐃ[552], 3);
    this.ⵠⲆᐃ[45].id = 45;
    this.ⵠⲆᐃ[125] = yf(68, 68, 0, ᐃᐃ[606], 3);
    this.ⵠⲆᐃ[125].id = 125;
    this.ⵠⲆᐃ[221] = yf(68, 68, 0, ᐃᐃ[1237], 3);
    this.ⵠⲆᐃ[221].id = 221;
    this.ⵠⲆᐃ[223] = yf(68, 68, 0, ᐃᐃ[1029], 3);
    this.ⵠⲆᐃ[223].id = 223;
    this.ⵠⲆᐃ[224] = yf(68, 68, 0, ᐃᐃ[1032], 3);
    this.ⵠⲆᐃ[224].id = 224;
    this.ⵠⲆᐃ[230] = yf(68, 68, 0, ᐃᐃ[1118], 3);
    this.ⵠⲆᐃ[230].id = 230;
    this.ⵠⲆᐃ[89] = yf(68, 68, 0, ᐃᐃ[1047], 3);
    this.ⵠⲆᐃ[89].id = 89;
    this.ⵠⲆᐃ[225] = yf(68, 68, 0, ᐃᐃ[1050], 3);
    this.ⵠⲆᐃ[225].id = 225;
    this.ⵠⲆᐃ[227] = yf(68, 68, 0, ᐃᐃ[1081], 3);
    this.ⵠⲆᐃ[227].id = 227;
    this.ⵠⲆᐃ[239] = yf(68, 68, 0, ᐃᐃ[1225], 3);
    this.ⵠⲆᐃ[239].id = 239;
    this.ⵠⲆᐃ[228] = yf(68, 68, 0, ᐃᐃ[1096], 3);
    this.ⵠⲆᐃ[228].id = 228;
    this.ⵠⲆᐃ[229] = yf(68, 68, 0, ᐃᐃ[1111], 3);
    this.ⵠⲆᐃ[229].id = 229;
    this.ⵠⲆᐃ[226] = yf(68, 68, 0, ᐃᐃ[1190], 3);
    this.ⵠⲆᐃ[226].id = 226;
    this.ⵠⲆᐃ[126] = yf(68, 68, 0, ᐃᐃ[610], 3);
    this.ⵠⲆᐃ[126].id = 126;
    this.ⵠⲆᐃ[127] = yf(68, 68, 0, ᐃᐃ[615], 3);
    this.ⵠⲆᐃ[127].id = 127;
    this.ⵠⲆᐃ[128] = yf(68, 68, 0, ᐃᐃ[614], 3);
    this.ⵠⲆᐃ[128].id = 128;
    this.ⵠⲆᐃ[46] = yf(68, 68, 0, ᐃᐃ[617], 3);
    this.ⵠⲆᐃ[46].id = 46;
    this.ⵠⲆᐃ[50] = yf(68, 68, 0, ᐃᐃ[701], 3);
    this.ⵠⲆᐃ[50].id = 50;
    this.ⵠⲆᐃ[51] = yf(68, 68, 0, ᐃᐃ[703], 3);
    this.ⵠⲆᐃ[51].id = 51;
    this.ⵠⲆᐃ[52] = yf(68, 68, 0, ᐃᐃ[707], 3);
    this.ⵠⲆᐃ[52].id = 52;
    this.ⵠⲆᐃ[55] = yf(68, 68, 0, ᐃᐃ[710], 3);
    this.ⵠⲆᐃ[55].id = 55;
    this.ⵠⲆᐃ[129] = yf(68, 68, 0, ᐃᐃ[625], 3);
    this.ⵠⲆᐃ[129].id = 129;
    this.ⵠⲆᐃ[130] = yf(68, 68, 0, ᐃᐃ[628], 3);
    this.ⵠⲆᐃ[130].id = 130;
    this.ⵠⲆᐃ[131] = yf(68, 68, 0, ᐃᐃ[630], 3);
    this.ⵠⲆᐃ[131].id = 131;
    this.ⵠⲆᐃ[132] = yf(68, 68, 0, ᐃᐃ[633], 3);
    this.ⵠⲆᐃ[132].id = 132;
    this.ⵠⲆᐃ[133] = yf(68, 68, 0, ᐃᐃ[636], 3);
    this.ⵠⲆᐃ[133].id = 133;
    this.ⵠⲆᐃ[134] = yf(68, 68, 0, ᐃᐃ[640], 3);
    this.ⵠⲆᐃ[134].id = 134;
    this.ⵠⲆᐃ[135] = yf(68, 68, 0, ᐃᐃ[645], 3);
    this.ⵠⲆᐃ[135].id = 135;
    this.ⵠⲆᐃ[47] = yf(68, 68, 0, ᐃᐃ[648], 3);
    this.ⵠⲆᐃ[47].id = 47;
    this.ⵠⲆᐃ[48] = yf(68, 68, 0, ᐃᐃ[651], 3);
    this.ⵠⲆᐃ[48].id = 48;
    this.ⵠⲆᐃ[49] = yf(68, 68, 0, ᐃᐃ[653], 3);
    this.ⵠⲆᐃ[49].id = 49;
    this.ⵠⲆᐃ[136] = yf(68, 68, 0, ᐃᐃ[661], 3);
    this.ⵠⲆᐃ[136].id = 136;
    this.ⵠⲆᐃ[143] = yf(68, 68, 0, ᐃᐃ[689], 3);
    this.ⵠⲆᐃ[143].id = 143;
    this.ⵠⲆᐃ[137] = yf(68, 68, 0, ᐃᐃ[663], 3);
    this.ⵠⲆᐃ[137].id = 137;
    this.ⵠⲆᐃ[138] = yf(68, 68, 0, ᐃᐃ[665], 3);
    this.ⵠⲆᐃ[138].id = 138;
    this.ⵠⲆᐃ[139] = yf(68, 68, 0, ᐃᐃ[675], 3);
    this.ⵠⲆᐃ[139].id = 139;
    this.ⵠⲆᐃ[140] = yf(68, 68, 0, ᐃᐃ[682], 3);
    this.ⵠⲆᐃ[140].id = 140;
    this.ⵠⲆᐃ[141] = yf(68, 68, 0, ᐃᐃ[683], 3);
    this.ⵠⲆᐃ[141].id = 141;
    this.ⵠⲆᐃ[142] = yf(68, 68, 0, ᐃᐃ[686], 3);
    this.ⵠⲆᐃ[142].id = 142;
    this.ⵠⲆᐃ[144] = yf(68, 68, 0, ᐃᐃ[719], 3);
    this.ⵠⲆᐃ[144].id = 144;
    this.ⵠⲆᐃ[145] = yf(68, 68, 0, ᐃᐃ[731], 3);
    this.ⵠⲆᐃ[145].id = 145;
    this.ⵠⲆᐃ[59] = yf(68, 68, 0, ᐃᐃ[733], 3);
    this.ⵠⲆᐃ[59].id = 59;
    this.ⵠⲆᐃ[62] = yf(68, 68, 0, ᐃᐃ[565], 3);
    this.ⵠⲆᐃ[62].id = 62;
    this.ⵠⲆᐃ[185] = yf(68, 68, 0, ᐃᐃ[590], 3);
    this.ⵠⲆᐃ[185].id = 185;
    this.ⵠⲆᐃ[184] = yf(68, 68, 0, ᐃᐃ[752], 3);
    this.ⵠⲆᐃ[184].id = 184;
    this.ⵠⲆᐃ[187] = yf(68, 68, 0, ᐃᐃ[591], 3);
    this.ⵠⲆᐃ[187].id = 187;
    this.ⵠⲆᐃ[186] = yf(68, 68, 0, ᐃᐃ[754], 3);
    this.ⵠⲆᐃ[186].id = 186;
    this.ⵠⲆᐃ[77] = yf(68, 68, 0, ᐃᐃ[757], 3);
    this.ⵠⲆᐃ[77].id = 77;
    this.ⵠⲆᐃ[175] = yf(68, 68, 0, ᐃᐃ[759], 3);
    this.ⵠⲆᐃ[175].id = 175;
    this.ⵠⲆᐃ[176] = yf(68, 68, 0, ᐃᐃ[763], 3);
    this.ⵠⲆᐃ[176].id = 176;
    this.ⵠⲆᐃ[78] = yf(68, 68, 0, ᐃᐃ[761], 3);
    this.ⵠⲆᐃ[78].id = 78;
    this.ⵠⲆᐃ[177] = yf(68, 68, 0, ᐃᐃ[766], 3);
    this.ⵠⲆᐃ[177].id = 177;
    this.ⵠⲆᐃ[79] = yf(68, 68, 0, ᐃᐃ[765], 3);
    this.ⵠⲆᐃ[79].id = 79;
    this.ⵠⲆᐃ[83] = yf(68, 68, 0, ᐃᐃ[769], 3);
    this.ⵠⲆᐃ[83].id = 83;
    this.ⵠⲆᐃ[84] = yf(68, 68, 0, ᐃᐃ[773], 3);
    this.ⵠⲆᐃ[84].id = 84;
    this.ⵠⲆᐃ[178] = yf(68, 68, 0, ᐃᐃ[774], 3);
    this.ⵠⲆᐃ[178].id = 178;
    this.ⵠⲆᐃ[179] = yf(68, 68, 0, ᐃᐃ[775], 3);
    this.ⵠⲆᐃ[179].id = 179;
    this.ⵠⲆᐃ[86] = yf(68, 68, 0, ᐃᐃ[778], 3);
    this.ⵠⲆᐃ[86].id = 86;
    this.ⵠⲆᐃ[85] = yf(68, 68, 0, ᐃᐃ[781], 3);
    this.ⵠⲆᐃ[85].id = 85;
    this.ⵠⲆᐃ[180] = yf(68, 68, 0, ᐃᐃ[786], 3);
    this.ⵠⲆᐃ[180].id = 180;
    this.ⵠⲆᐃ[181] = yf(68, 68, 0, ᐃᐃ[787], 3);
    this.ⵠⲆᐃ[181].id = 181;
    this.ⵠⲆᐃ[182] = yf(68, 68, 0, ᐃᐃ[790], 3);
    this.ⵠⲆᐃ[182].id = 182;
    this.ⵠⲆᐃ[183] = yf(68, 68, 0, ᐃᐃ[801], 3);
    this.ⵠⲆᐃ[183].id = 183;
    this.ⵠⲆᐃ[188] = yf(68, 68, 0, ᐃᐃ[810], 3);
    this.ⵠⲆᐃ[188].id = 188;
    this.ⵠⲆᐃ[189] = yf(68, 68, 0, ᐃᐃ[815], 3);
    this.ⵠⲆᐃ[189].id = 189;
    this.ⵠⲆᐃ[190] = yf(68, 68, 0, ᐃᐃ[844], 3);
    this.ⵠⲆᐃ[190].id = 190;
    this.ⵠⲆᐃ[191] = yf(68, 68, 0, ᐃᐃ[836], 3);
    this.ⵠⲆᐃ[191].id = 191;
    this.ⵠⲆᐃ[192] = yf(68, 68, 0, ᐃᐃ[841], 3);
    this.ⵠⲆᐃ[192].id = 192;
    this.ⵠⲆᐃ[193] = yf(68, 68, 0, ᐃᐃ[847], 3);
    this.ⵠⲆᐃ[193].id = 193;
    this.ⵠⲆᐃ[194] = yf(68, 68, 0, ᐃᐃ[851], 3);
    this.ⵠⲆᐃ[194].id = 194;
    this.ⵠⲆᐃ[206] = yf(68, 68, 0, ᐃᐃ[961], 3);
    this.ⵠⲆᐃ[206].id = 206;
    this.ⵠⲆᐃ[207] = yf(68, 68, 0, ᐃᐃ[974], 3);
    this.ⵠⲆᐃ[207].id = 207;
    this.ⵠⲆᐃ[204] = yf(68, 68, 0, ᐃᐃ[951], 3);
    this.ⵠⲆᐃ[204].id = 204;
    this.ⵠⲆᐃ[205] = yf(68, 68, 0, ᐃᐃ[956], 3);
    this.ⵠⲆᐃ[205].id = 205;
    this.ⵠⲆᐃ[208] = yf(68, 68, 0, ᐃᐃ[968], 3);
    this.ⵠⲆᐃ[208].id = 208;
    this.ⵠⲆᐃ[209] = yf(68, 68, 0, ᐃᐃ[973], 3);
    this.ⵠⲆᐃ[209].id = 209;
    this.ⵠⲆᐃ[210] = yf(68, 68, 0, ᐃᐃ[983], 3);
    this.ⵠⲆᐃ[210].id = 210;
    this.ⵠⲆᐃ[211] = yf(68, 68, 0, ᐃᐃ[988], 3);
    this.ⵠⲆᐃ[211].id = 211;
    this.ⵠⲆᐃ[41] = yf(68, 68, 0, ᐃᐃ[881], 3);
    this.ⵠⲆᐃ[41].id = 41;
    this.ⵠⲆᐃ[42] = yf(68, 68, 0, ᐃᐃ[883], 3);
    this.ⵠⲆᐃ[42].id = 42;
    this.ⵠⲆᐃ[12] = yf(68, 68, 0, ᐃᐃ[403], 3);
    this.ⵠⲆᐃ[12].id = 12;
    this.ⵠⲆᐃ[16] = yf(68, 68, 0, ᐃᐃ[875], 3);
    this.ⵠⲆᐃ[16].id = 16;
    this.ⵠⲆᐃ[196] = yf(68, 68, 0, ᐃᐃ[898], 3);
    this.ⵠⲆᐃ[196].id = 196;
    this.ⵠⲆᐃ[18] = yf(68, 68, 0, ᐃᐃ[899], 3);
    this.ⵠⲆᐃ[18].id = 18;
    this.ⵠⲆᐃ[197] = yf(68, 68, 0, ᐃᐃ[906], 3);
    this.ⵠⲆᐃ[197].id = 197;
    this.ⵠⲆᐃ[198] = yf(68, 68, 0, ᐃᐃ[908], 3);
    this.ⵠⲆᐃ[198].id = 198;
    this.ⵠⲆᐃ[61] = yf(68, 68, 0, ᐃᐃ[911], 3);
    this.ⵠⲆᐃ[61].id = 61;
    this.ⵠⲆᐃ[201] = yf(68, 68, 0, ᐃᐃ[871], 3);
    this.ⵠⲆᐃ[201].id = 201;
    this.ⵠⲆᐃ[199] = yf(68, 68, 0, ᐃᐃ[863], 3);
    this.ⵠⲆᐃ[199].id = 199;
    this.ⵠⲆᐃ[200] = yf(68, 68, 0, ᐃᐃ[868], 3);
    this.ⵠⲆᐃ[200].id = 200;
    this.ΔⵠᐃⲆⵠ = [];
    for (k = 0; k < 250; k++) {
      this.ΔⵠᐃⲆⵠ[k] = yf(0, 0, 0, ᐃᐃ[366]);
    }
    this.ΔΔΔ = [];
    this.ΔΔΔ[0] = yf(60, 60, 0, ᐃᐃ[261], 3);
    this.ΔΔΔ[0].id = 0;
    this.ΔΔΔ[1] = yf(60, 60, 0, ᐃᐃ[312], 3);
    this.ΔΔΔ[1].id = 1;
    this.ΔΔΔ[108] = yf(60, 60, 0, ᐃᐃ[315], 3);
    this.ΔΔΔ[108].id = 108;
    this.ΔΔΔ[108].info.ⵠⵠ[2] = this.ΔΔΔ[108].info.ⵠⵠ[0];
    this.ΔΔΔ[109] = yf(60, 60, 0, ᐃᐃ[316], 3);
    this.ΔΔΔ[109].id = 109;
    this.ΔΔΔ[109].info.ⵠⵠ[2] = this.ΔΔΔ[109].info.ⵠⵠ[0];
    this.ΔΔΔ[110] = yf(60, 60, 0, ᐃᐃ[277], 3);
    this.ΔΔΔ[110].id = 110;
    this.ΔΔΔ[233] = yf(60, 60, 0, ᐃᐃ[1154], 3);
    this.ΔΔΔ[233].id = 233;
    this.ΔΔΔ[111] = yf(60, 60, 0, ᐃᐃ[297], 3);
    this.ΔΔΔ[111].id = 111;
    this.ΔΔΔ[111].info.ⵠⵠ[2] = this.ΔΔΔ[111].info.ⵠⵠ[0];
    this.ΔΔΔ[112] = yf(60, 60, 0, ᐃᐃ[298], 3);
    this.ΔΔΔ[112].id = 112;
    this.ΔΔΔ[112].info.ⵠⵠ[2] = this.ΔΔΔ[112].info.ⵠⵠ[0];
    this.ΔΔΔ[3] = yf(60, 60, 0, ᐃᐃ[258], 3);
    this.ΔΔΔ[3].id = 3;
    this.ΔΔΔ[4] = yf(60, 60, 0, ᐃᐃ[296], 3);
    this.ΔΔΔ[4].id = 4;
    this.ΔΔΔ[5] = yf(60, 60, 0, ᐃᐃ[292], 3);
    this.ΔΔΔ[5].id = 5;
    this.ΔΔΔ[57] = yf(60, 60, 0, ᐃᐃ[829], 3);
    this.ΔΔΔ[57].id = 57;
    this.ΔΔΔ[6] = yf(60, 60, 0, ᐃᐃ[293], 3);
    this.ΔΔΔ[6].id = 6;
    this.ΔΔΔ[113] = yf(60, 60, 0, ᐃᐃ[309], 3);
    this.ΔΔΔ[113].id = 113;
    this.ΔΔΔ[114] = yf(60, 60, 0, ᐃᐃ[310], 3);
    this.ΔΔΔ[114].id = 114;
    this.ΔΔΔ[115] = yf(60, 60, 0, ᐃᐃ[311], 3);
    this.ΔΔΔ[115].id = 115;
    this.ΔΔΔ[162] = yf(60, 60, 0, ᐃᐃ[317], 3);
    this.ΔΔΔ[162].id = 162;
    this.ΔΔΔ[160] = yf(60, 60, 0, ᐃᐃ[319], 3);
    this.ΔΔΔ[160].id = 160;
    this.ΔΔΔ[8] = yf(60, 60, 0, ᐃᐃ[313], 3);
    this.ΔΔΔ[8].id = 8;
    this.ΔΔΔ[117] = yf(60, 60, 0, ᐃᐃ[323], 3);
    this.ΔΔΔ[117].id = 117;
    this.ΔΔΔ[116] = yf(60, 60, 0, ᐃᐃ[300], 3);
    this.ΔΔΔ[116].id = 116;
    this.ΔΔΔ[118] = yf(60, 60, 0, ᐃᐃ[328], 3);
    this.ΔΔΔ[118].id = 118;
    this.ΔΔΔ[195] = yf(60, 60, 0, ᐃᐃ[303], 3);
    this.ΔΔΔ[195].id = 195;
    this.ΔΔΔ[161] = yf(60, 60, 0, ᐃᐃ[305], 3);
    this.ΔΔΔ[161].id = 161;
    this.ΔΔΔ[161].info.ⵠⵠ[2] = this.ΔΔΔ[161].info.ⵠⵠ[0];
    this.ΔΔΔ[163] = yf(60, 60, 0, ᐃᐃ[329], 3);
    this.ΔΔΔ[163].id = 163;
    this.ΔΔΔ[164] = yf(60, 60, 0, ᐃᐃ[330], 3);
    this.ΔΔΔ[164].id = 164;
    this.ΔΔΔ[165] = yf(60, 60, 0, ᐃᐃ[331], 3);
    this.ΔΔΔ[165].id = 165;
    this.ΔΔΔ[166] = yf(60, 60, 0, ᐃᐃ[335], 3);
    this.ΔΔΔ[166].id = 166;
    this.ΔΔΔ[167] = yf(60, 60, 0, ᐃᐃ[337], 3);
    this.ΔΔΔ[167].id = 167;
    this.ΔΔΔ[168] = yf(60, 60, 0, ᐃᐃ[361], 3);
    this.ΔΔΔ[168].id = 168;
    this.ΔΔΔ[169] = yf(60, 60, 0, ᐃᐃ[362], 3);
    this.ΔΔΔ[169].id = 169;
    this.ΔΔΔ[170] = yf(60, 60, 0, ᐃᐃ[364], 3);
    this.ΔΔΔ[170].id = 170;
    this.ΔΔΔ[29] = yf(60, 60, 0, ᐃᐃ[392], 3);
    this.ΔΔΔ[29].id = 29;
    this.ΔΔΔ[10] = yf(60, 60, 0, ᐃᐃ[369], 3);
    this.ΔΔΔ[10].id = 10;
    this.ΔΔΔ[171] = yf(60, 60, 0, ᐃᐃ[372], 3);
    this.ΔΔΔ[171].id = 171;
    this.ΔΔΔ[172] = yf(60, 60, 0, ᐃᐃ[375], 3);
    this.ΔΔΔ[172].id = 172;
    this.ΔΔΔ[173] = yf(60, 60, 0, ᐃᐃ[378], 3);
    this.ΔΔΔ[173].id = 173;
    this.ΔΔΔ[2] = yf(60, 60, 0, ᐃᐃ[368], 3);
    this.ΔΔΔ[2].id = 2;
    this.ΔΔΔ[2].info.ⵠⵠ[2] = this.ΔΔΔ[2].info.ⵠⵠ[0];
    this.ΔΔΔ[237] = yf(60, 60, 0, ᐃᐃ[1162], 3);
    this.ΔΔΔ[237].id = 237;
    this.ΔΔΔ[237].info.ⵠⵠ[2] = this.ΔΔΔ[237].info.ⵠⵠ[0];
    this.ΔΔΔ[174] = yf(60, 60, 0, ᐃᐃ[393], 3);
    this.ΔΔΔ[174].id = 174;
    this.ΔΔΔ[174].info.ⵠⵠ[2] = this.ΔΔΔ[174].info.ⵠⵠ[0];
    this.ΔΔΔ[222] = yf(60, 60, 0, ᐃᐃ[1035], 3);
    this.ΔΔΔ[222].id = 222;
    this.ΔΔΔ[231] = yf(60, 60, 0, ᐃᐃ[1037], 3);
    this.ΔΔΔ[231].id = 231;
    this.ΔΔΔ[232] = yf(60, 60, 0, ᐃᐃ[1039], 3);
    this.ΔΔΔ[232].id = 232;
    this.ΔΔΔ[234] = yf(60, 60, 0, ᐃᐃ[1156], 3);
    this.ΔΔΔ[234].id = 234;
    this.ΔΔΔ[10] = yf(60, 60, 0, ᐃᐃ[369], 3);
    this.ΔΔΔ[10].id = 10;
    this.ΔΔΔ[11] = yf(60, 60, 0, ᐃᐃ[381], 3);
    this.ΔΔΔ[11].id = 11;
    this.ΔΔΔ[12] = yf(60, 60, 0, ᐃᐃ[401], 3);
    this.ΔΔΔ[12].id = 12;
    this.ΔΔΔ[13] = yf(60, 60, 0, ᐃᐃ[395], 3);
    this.ΔΔΔ[13].id = 13;
    this.ΔΔΔ[14] = yf(60, 60, 0, ᐃᐃ[398], 3);
    this.ΔΔΔ[14].id = 14;
    this.ΔΔΔ[15] = yf(60, 60, 0, ᐃᐃ[404], 3);
    this.ΔΔΔ[15].id = 15;
    this.ΔΔΔ[16] = yf(60, 60, 0, ᐃᐃ[874], 3);
    this.ΔΔΔ[16].id = 16;
    this.ΔΔΔ[119] = yf(60, 60, 0, ᐃᐃ[408], 3);
    this.ΔΔΔ[119].id = 119;
    this.ΔΔΔ[23] = yf(60, 60, 0, ᐃᐃ[420], 3);
    this.ΔΔΔ[23].id = 23;
    this.ΔΔΔ[24] = yf(60, 60, 0, ᐃᐃ[423], 3);
    this.ΔΔΔ[24].id = 24;
    this.ΔΔΔ[87] = yf(60, 60, 0, ᐃᐃ[1227], 3);
    this.ΔΔΔ[87].id = 87;
    this.ΔΔΔ[88] = yf(60, 60, 0, ᐃᐃ[1230], 3);
    this.ΔΔΔ[88].id = 88;
    this.ΔΔΔ[80] = yf(60, 60, 0, ᐃᐃ[1137], 3);
    this.ΔΔΔ[80].id = 80;
    this.ΔΔΔ[81] = yf(60, 60, 0, ᐃᐃ[1140], 3);
    this.ΔΔΔ[81].id = 81;
    this.ΔΔΔ[64] = yf(60, 60, 0, ᐃᐃ[569], 3);
    this.ΔΔΔ[64].id = 64;
    this.ΔΔΔ[101] = yf(60, 60, 0, ᐃᐃ[1166], 3);
    this.ΔΔΔ[101].id = 101;
    this.ΔΔΔ[71] = yf(60, 60, 0, ᐃᐃ[1239], 3);
    this.ΔΔΔ[71].id = 71;
    this.ΔΔΔ[65] = yf(60, 60, 0, ᐃᐃ[572], 3);
    this.ΔΔΔ[65].id = 65;
    this.ΔΔΔ[102] = yf(60, 60, 0, ᐃᐃ[1169], 3);
    this.ΔΔΔ[102].id = 102;
    this.ΔΔΔ[72] = yf(60, 60, 0, ᐃᐃ[1242], 3);
    this.ΔΔΔ[72].id = 72;
    this.ΔΔΔ[66] = yf(60, 60, 0, ᐃᐃ[575], 3);
    this.ΔΔΔ[66].id = 66;
    this.ΔΔΔ[103] = yf(60, 60, 0, ᐃᐃ[1172], 3);
    this.ΔΔΔ[103].id = 103;
    this.ΔΔΔ[73] = yf(60, 60, 0, ᐃᐃ[1245], 3);
    this.ΔΔΔ[73].id = 73;
    this.ΔΔΔ[67] = yf(60, 60, 0, ᐃᐃ[578], 3);
    this.ΔΔΔ[67].id = 67;
    this.ΔΔΔ[104] = yf(60, 60, 0, ᐃᐃ[1175], 3);
    this.ΔΔΔ[104].id = 104;
    this.ΔΔΔ[74] = yf(60, 60, 0, ᐃᐃ[1248], 3);
    this.ΔΔΔ[74].id = 74;
    this.ΔΔΔ[68] = yf(60, 60, 0, ᐃᐃ[581], 3);
    this.ΔΔΔ[68].id = 68;
    this.ΔΔΔ[105] = yf(60, 60, 0, ᐃᐃ[1178], 3);
    this.ΔΔΔ[105].id = 105;
    this.ΔΔΔ[75] = yf(60, 60, 0, ᐃᐃ[1251], 3);
    this.ΔΔΔ[75].id = 75;
    this.ΔΔΔ[69] = yf(60, 60, 0, ᐃᐃ[584], 3);
    this.ΔΔΔ[69].id = 69;
    this.ΔΔΔ[106] = yf(60, 60, 0, ᐃᐃ[1181], 3);
    this.ΔΔΔ[106].id = 106;
    this.ΔΔΔ[76] = yf(60, 60, 0, ᐃᐃ[1254], 3);
    this.ΔΔΔ[76].id = 76;
    this.ΔΔΔ[70] = yf(60, 60, 0, ᐃᐃ[587], 3);
    this.ΔΔΔ[70].id = 70;
    this.ΔΔΔ[107] = yf(60, 60, 0, ᐃᐃ[1184], 3);
    this.ΔΔΔ[107].id = 107;
    this.ΔΔΔ[94] = yf(60, 60, 0, ᐃᐃ[1257], 3);
    this.ΔΔΔ[94].id = 94;
    this.ΔΔΔ[95] = yf(60, 60, 0, ᐃᐃ[1260], 3);
    this.ΔΔΔ[95].id = 95;
    this.ΔΔΔ[96] = yf(60, 60, 0, ᐃᐃ[1263], 3);
    this.ΔΔΔ[96].id = 96;
    this.ΔΔΔ[97] = yf(60, 60, 0, ᐃᐃ[1266], 3);
    this.ΔΔΔ[97].id = 97;
    this.ΔΔΔ[98] = yf(60, 60, 0, ᐃᐃ[1269], 3);
    this.ΔΔΔ[98].id = 98;
    this.ΔΔΔ[99] = yf(60, 60, 0, ᐃᐃ[1272], 3);
    this.ΔΔΔ[99].id = 99;
    this.ΔΔΔ[58] = yf(60, 60, 0, ᐃᐃ[826], 3);
    this.ΔΔΔ[58].id = 58;
    this.ΔΔΔ[25] = yf(60, 60, 0, ᐃᐃ[429], 3);
    this.ΔΔΔ[25].id = 25;
    this.ΔΔΔ[26] = yf(60, 60, 0, ᐃᐃ[432], 3);
    this.ΔΔΔ[26].id = 26;
    this.ΔΔΔ[27] = yf(60, 60, 0, ᐃᐃ[435], 3);
    this.ΔΔΔ[27].id = 27;
    this.ΔΔΔ[28] = yf(60, 60, 0, ᐃᐃ[438], 3);
    this.ΔΔΔ[28].id = 28;
    this.ΔΔΔ[120] = yf(60, 60, 0, ᐃᐃ[441], 3);
    this.ΔΔΔ[120].id = 120;
    this.ΔΔΔ[120].info.ⵠⵠ[2] = this.ΔΔΔ[120].info.ⵠⵠ[0];
    this.ΔΔΔ[29] = yf(60, 60, 0, ᐃᐃ[392], 3);
    this.ΔΔΔ[29].id = 29;
    this.ΔΔΔ[121] = yf(60, 60, 0, ᐃᐃ[418], 3);
    this.ΔΔΔ[121].id = 121;
    this.ΔΔΔ[121].info.ⵠⵠ[2] = this.ΔΔΔ[121].info.ⵠⵠ[0];
    this.ΔΔΔ[30] = yf(60, 60, 0, ᐃᐃ[455], 3);
    this.ΔΔΔ[30].id = 30;
    this.ΔΔΔ[9] = yf(60, 60, 0, ᐃᐃ[860], 3);
    this.ΔΔΔ[9].id = 9;
    this.ΔΔΔ[31] = yf(60, 60, 0, ᐃᐃ[458], 3);
    this.ΔΔΔ[31].id = 31;
    this.ΔΔΔ[32] = yf(60, 60, 0, ᐃᐃ[1017], 3);
    this.ΔΔΔ[32].id = 32;
    this.ΔΔΔ[33] = yf(60, 60, 0, ᐃᐃ[472], 3);
    this.ΔΔΔ[33].id = 33;
    this.ΔΔΔ[35] = yf(60, 60, 0, ᐃᐃ[477], 3);
    this.ΔΔΔ[35].id = 35;
    this.ΔΔΔ[36] = yf(60, 60, 0, ᐃᐃ[480], 3);
    this.ΔΔΔ[36].id = 36;
    this.ΔΔΔ[37] = yf(60, 60, 0, ᐃᐃ[483], 3);
    this.ΔΔΔ[37].id = 37;
    this.ΔΔΔ[38] = yf(60, 60, 0, ᐃᐃ[486], 3);
    this.ΔΔΔ[38].id = 38;
    this.ΔΔΔ[39] = yf(60, 60, 0, ᐃᐃ[489], 3);
    this.ΔΔΔ[39].id = 39;
    this.ΔΔΔ[122] = yf(60, 60, 0, ᐃᐃ[492], 3);
    this.ΔΔΔ[122].id = 122;
    this.ΔΔΔ[123] = yf(60, 60, 0, ᐃᐃ[495], 3);
    this.ΔΔΔ[123].id = 123;
    this.ΔΔΔ[124] = yf(60, 60, 0, ᐃᐃ[499], 3);
    this.ΔΔΔ[124].id = 124;
    this.ΔΔΔ[40] = yf(60, 60, 0, ᐃᐃ[502], 3);
    this.ΔΔΔ[40].id = 40;
    this.ΔΔΔ[146] = yf(60, 60, 0, ᐃᐃ[505], 3);
    this.ΔΔΔ[146].id = 146;
    this.ΔΔΔ[146].info.ⵠⵠ[2] = this.ΔΔΔ[146].info.ⵠⵠ[0];
    this.ΔΔΔ[240] = yf(60, 60, 0, ᐃᐃ[1233], 3);
    this.ΔΔΔ[240].id = 240;
    this.ΔΔΔ[240].info.ⵠⵠ[2] = this.ΔΔΔ[240].info.ⵠⵠ[0];
    this.ΔΔΔ[147] = yf(60, 60, 0, ᐃᐃ[513], 3);
    this.ΔΔΔ[147].id = 147;
    this.ΔΔΔ[147].info.ⵠⵠ[2] = this.ΔΔΔ[147].info.ⵠⵠ[0];
    this.ΔΔΔ[148] = yf(60, 60, 0, ᐃᐃ[518], 3);
    this.ΔΔΔ[148].id = 148;
    this.ΔΔΔ[148].info.ⵠⵠ[2] = this.ΔΔΔ[148].info.ⵠⵠ[0];
    this.ΔΔΔ[149] = yf(60, 60, 0, ᐃᐃ[521], 3);
    this.ΔΔΔ[149].id = 149;
    this.ΔΔΔ[150] = yf(60, 60, 0, ᐃᐃ[523], 3);
    this.ΔΔΔ[150].id = 150;
    this.ΔΔΔ[151] = yf(60, 60, 0, ᐃᐃ[529], 3);
    this.ΔΔΔ[151].id = 151;
    this.ΔΔΔ[158] = yf(60, 60, 0, ᐃᐃ[532], 3);
    this.ΔΔΔ[158].id = 158;
    this.ΔΔΔ[159] = yf(60, 60, 0, ᐃᐃ[553], 3);
    this.ΔΔΔ[159].id = 159;
    this.ΔΔΔ[43] = yf(60, 60, 0, ᐃᐃ[541], 3);
    this.ΔΔΔ[43].id = 43;
    this.ΔΔΔ[45] = yf(60, 60, 0, ᐃᐃ[550], 3);
    this.ΔΔΔ[45].id = 45;
    this.ΔΔΔ[125] = yf(60, 60, 0, ᐃᐃ[605], 3);
    this.ΔΔΔ[125].id = 125;
    this.ΔΔΔ[221] = yf(60, 60, 0, ᐃᐃ[1236], 3);
    this.ΔΔΔ[221].id = 221;
    this.ΔΔΔ[223] = yf(60, 60, 0, ᐃᐃ[1028], 3);
    this.ΔΔΔ[223].id = 223;
    this.ΔΔΔ[224] = yf(60, 60, 0, ᐃᐃ[1031], 3);
    this.ΔΔΔ[224].id = 224;
    this.ΔΔΔ[230] = yf(60, 60, 0, ᐃᐃ[1117], 3);
    this.ΔΔΔ[230].id = 230;
    this.ΔΔΔ[89] = yf(60, 60, 0, ᐃᐃ[1046], 3);
    this.ΔΔΔ[89].id = 89;
    this.ΔΔΔ[225] = yf(60, 60, 0, ᐃᐃ[1049], 3);
    this.ΔΔΔ[225].id = 225;
    this.ΔΔΔ[226] = yf(60, 60, 0, ᐃᐃ[1189], 3);
    this.ΔΔΔ[226].id = 226;
    this.ΔΔΔ[227] = yf(60, 60, 0, ᐃᐃ[1080], 3);
    this.ΔΔΔ[227].id = 227;
    this.ΔΔΔ[239] = yf(60, 60, 0, ᐃᐃ[1224], 3);
    this.ΔΔΔ[239].id = 239;
    this.ΔΔΔ[228] = yf(60, 60, 0, ᐃᐃ[1095], 3);
    this.ΔΔΔ[228].id = 228;
    this.ΔΔΔ[229] = yf(60, 60, 0, ᐃᐃ[1110], 3);
    this.ΔΔΔ[229].id = 229;
    this.ΔΔΔ[126] = yf(60, 60, 0, ᐃᐃ[609], 3);
    this.ΔΔΔ[126].id = 126;
    this.ΔΔΔ[126].info.ⵠⵠ[2] = this.ΔΔΔ[126].info.ⵠⵠ[0];
    this.ΔΔΔ[127] = yf(60, 60, 0, ᐃᐃ[613], 3);
    this.ΔΔΔ[127].id = 127;
    this.ΔΔΔ[128] = yf(60, 60, 0, ᐃᐃ[612], 3);
    this.ΔΔΔ[128].id = 128;
    this.ΔΔΔ[46] = yf(60, 60, 0, ᐃᐃ[616], 3);
    this.ΔΔΔ[46].id = 46;
    this.ΔΔΔ[50] = yf(60, 60, 0, ᐃᐃ[699], 3);
    this.ΔΔΔ[50].id = 50;
    this.ΔΔΔ[51] = yf(60, 60, 0, ᐃᐃ[702], 3);
    this.ΔΔΔ[51].id = 51;
    this.ΔΔΔ[52] = yf(60, 60, 0, ᐃᐃ[705], 3);
    this.ΔΔΔ[52].id = 52;
    this.ΔΔΔ[55] = yf(60, 60, 0, ᐃᐃ[709], 3);
    this.ΔΔΔ[55].id = 55;
    this.ΔΔΔ[129] = yf(60, 60, 0, ᐃᐃ[624], 3);
    this.ΔΔΔ[129].id = 129;
    this.ΔΔΔ[129].info.ⵠⵠ[2] = this.ΔΔΔ[129].info.ⵠⵠ[0];
    this.ΔΔΔ[130] = yf(60, 60, 0, ᐃᐃ[626], 3);
    this.ΔΔΔ[130].id = 130;
    this.ΔΔΔ[131] = yf(60, 60, 0, ᐃᐃ[629], 3);
    this.ΔΔΔ[131].id = 131;
    this.ΔΔΔ[131].info.ⵠⵠ[2] = this.ΔΔΔ[131].info.ⵠⵠ[0];
    this.ΔΔΔ[132] = yf(60, 60, 0, ᐃᐃ[631], 3);
    this.ΔΔΔ[132].id = 132;
    this.ΔΔΔ[133] = yf(60, 60, 0, ᐃᐃ[634], 3);
    this.ΔΔΔ[133].id = 133;
    this.ΔΔΔ[134] = yf(60, 60, 0, ᐃᐃ[639], 3);
    this.ΔΔΔ[134].id = 134;
    this.ΔΔΔ[134].info.ⵠⵠ[2] = this.ΔΔΔ[134].info.ⵠⵠ[0];
    this.ΔΔΔ[135] = yf(60, 60, 0, ᐃᐃ[644], 3);
    this.ΔΔΔ[135].id = 135;
    this.ΔΔΔ[47] = yf(60, 60, 0, ᐃᐃ[646], 3);
    this.ΔΔΔ[47].id = 47;
    this.ΔΔΔ[48] = yf(60, 60, 0, ᐃᐃ[649], 3);
    this.ΔΔΔ[48].id = 48;
    this.ΔΔΔ[49] = yf(60, 60, 0, ᐃᐃ[652], 3);
    this.ΔΔΔ[49].id = 49;
    this.ΔΔΔ[136] = yf(60, 60, 0, ᐃᐃ[659], 3);
    this.ΔΔΔ[136].id = 136;
    this.ΔΔΔ[143] = yf(60, 60, 0, ᐃᐃ[143], 3);
    this.ΔΔΔ[143].id = 143;
    this.ΔΔΔ[137] = yf(60, 60, 0, ᐃᐃ[662], 3);
    this.ΔΔΔ[137].id = 137;
    this.ΔΔΔ[138] = yf(60, 60, 0, ᐃᐃ[664], 3);
    this.ΔΔΔ[138].id = 138;
    this.ΔΔΔ[139] = yf(60, 60, 0, ᐃᐃ[674], 3);
    this.ΔΔΔ[139].id = 139;
    this.ΔΔΔ[139].info.ⵠⵠ[2] = this.ΔΔΔ[139].info.ⵠⵠ[0];
    this.ΔΔΔ[140] = yf(60, 60, 0, ᐃᐃ[140], 3);
    this.ΔΔΔ[140].id = 140;
    this.ΔΔΔ[140].info.ⵠⵠ[2] = this.ΔΔΔ[140].info.ⵠⵠ[0];
    this.ΔΔΔ[141] = yf(60, 60, 0, ᐃᐃ[685], 3);
    this.ΔΔΔ[141].id = 141;
    this.ΔΔΔ[142] = yf(60, 60, 0, ᐃᐃ[142], 3);
    this.ΔΔΔ[142].id = 142;
    this.ΔΔΔ[142].info.ⵠⵠ[2] = this.ΔΔΔ[142].info.ⵠⵠ[0];
    this.ΔΔΔ[144] = yf(60, 60, 0, ᐃᐃ[717], 3);
    this.ΔΔΔ[144].id = 144;
    this.ΔΔΔ[145] = yf(60, 60, 0, ᐃᐃ[145], 3);
    this.ΔΔΔ[145].id = 145;
    this.ΔΔΔ[59] = yf(60, 60, 0, ᐃᐃ[732], 3);
    this.ΔΔΔ[59].id = 59;
    this.ΔΔΔ[62] = yf(60, 60, 0, ᐃᐃ[563], 3);
    this.ΔΔΔ[62].id = 62;
    this.ΔΔΔ[185] = yf(60, 60, 0, ᐃᐃ[252], 3);
    this.ΔΔΔ[185].id = 185;
    this.ΔΔΔ[185].info.ⵠⵠ[2] = this.ΔΔΔ[185].info.ⵠⵠ[0];
    this.ΔΔΔ[184] = yf(60, 60, 0, ᐃᐃ[751], 3);
    this.ΔΔΔ[184].id = 184;
    this.ΔΔΔ[184].info.ⵠⵠ[2] = this.ΔΔΔ[184].info.ⵠⵠ[0];
    this.ΔΔΔ[17] = yf(60, 60, 0, ᐃᐃ[877], 3);
    this.ΔΔΔ[17].id = 17;
    this.ΔΔΔ[63] = yf(60, 60, 0, ᐃᐃ[566], 3);
    this.ΔΔΔ[63].id = 63;
    this.ΔΔΔ[187] = yf(60, 60, 0, ᐃᐃ[253], 3);
    this.ΔΔΔ[187].id = 187;
    this.ΔΔΔ[187].info.ⵠⵠ[2] = this.ΔΔΔ[187].info.ⵠⵠ[0];
    this.ΔΔΔ[186] = yf(60, 60, 0, ᐃᐃ[753], 3);
    this.ΔΔΔ[186].id = 186;
    this.ΔΔΔ[186].info.ⵠⵠ[2] = this.ΔΔΔ[186].info.ⵠⵠ[0];
    this.ΔΔΔ[77] = yf(60, 60, 0, ᐃᐃ[756], 3);
    this.ΔΔΔ[77].id = 77;
    this.ΔΔΔ[175] = yf(60, 60, 0, ᐃᐃ[176], 3);
    this.ΔΔΔ[175].id = 175;
    this.ΔΔΔ[175].info.ⵠⵠ[2] = this.ΔΔΔ[175].info.ⵠⵠ[0];
    this.ΔΔΔ[176] = yf(60, 60, 0, ᐃᐃ[177], 3);
    this.ΔΔΔ[176].id = 176;
    this.ΔΔΔ[176].info.ⵠⵠ[2] = this.ΔΔΔ[176].info.ⵠⵠ[0];
    this.ΔΔΔ[78] = yf(60, 60, 0, ᐃᐃ[760], 3);
    this.ΔΔΔ[78].id = 78;
    this.ΔΔΔ[177] = yf(60, 60, 0, ᐃᐃ[175], 3);
    this.ΔΔΔ[177].id = 177;
    this.ΔΔΔ[177].info.ⵠⵠ[2] = this.ΔΔΔ[177].info.ⵠⵠ[0];
    this.ΔΔΔ[79] = yf(60, 60, 0, ᐃᐃ[764], 3);
    this.ΔΔΔ[79].id = 79;
    this.ΔΔΔ[83] = yf(60, 60, 0, ᐃᐃ[767], 3);
    this.ΔΔΔ[83].id = 83;
    this.ΔΔΔ[84] = yf(60, 60, 0, ᐃᐃ[771], 3);
    this.ΔΔΔ[84].id = 84;
    this.ΔΔΔ[178] = yf(60, 60, 0, ᐃᐃ[178], 3);
    this.ΔΔΔ[178].id = 178;
    this.ΔΔΔ[179] = yf(60, 60, 0, ᐃᐃ[179], 3);
    this.ΔΔΔ[179].id = 179;
    this.ΔΔΔ[86] = yf(60, 60, 0, ᐃᐃ[776], 3);
    this.ΔΔΔ[86].id = 86;
    this.ΔΔΔ[85] = yf(60, 60, 0, ᐃᐃ[779], 3);
    this.ΔΔΔ[85].id = 85;
    this.ΔΔΔ[180] = yf(60, 60, 0, ᐃᐃ[180], 3);
    this.ΔΔΔ[180].id = 180;
    this.ΔΔΔ[181] = yf(60, 60, 0, ᐃᐃ[181], 3);
    this.ΔΔΔ[181].id = 181;
    this.ΔΔΔ[182] = yf(60, 60, 0, ᐃᐃ[789], 3);
    this.ΔΔΔ[182].id = 182;
    this.ΔΔΔ[183] = yf(60, 60, 0, ᐃᐃ[800], 3);
    this.ΔΔΔ[183].id = 183;
    this.ΔΔΔ[188] = yf(60, 60, 0, ᐃᐃ[808], 3);
    this.ΔΔΔ[188].id = 188;
    this.ΔΔΔ[189] = yf(60, 60, 0, ᐃᐃ[814], 3);
    this.ΔΔΔ[189].id = 189;
    this.ΔΔΔ[191] = yf(60, 60, 0, ᐃᐃ[834], 3);
    this.ΔΔΔ[191].id = 191;
    this.ΔΔΔ[192] = yf(60, 60, 0, ᐃᐃ[840], 3);
    this.ΔΔΔ[192].id = 192;
    this.ΔΔΔ[190] = yf(60, 60, 0, ᐃᐃ[842], 3);
    this.ΔΔΔ[190].id = 190;
    this.ΔΔΔ[193] = yf(60, 60, 0, ᐃᐃ[845], 3);
    this.ΔΔΔ[193].id = 193;
    this.ΔΔΔ[194] = yf(60, 60, 0, ᐃᐃ[850], 3);
    this.ΔΔΔ[194].id = 194;
    this.ΔΔΔ[204] = yf(60, 60, 0, ᐃᐃ[949], 3);
    this.ΔΔΔ[204].id = 204;
    this.ΔΔΔ[205] = yf(60, 60, 0, ᐃᐃ[955], 3);
    this.ΔΔΔ[205].id = 205;
    this.ΔΔΔ[206] = yf(60, 60, 0, ᐃᐃ[959], 3);
    this.ΔΔΔ[206].id = 206;
    this.ΔΔΔ[207] = yf(60, 60, 0, ᐃᐃ[965], 3);
    this.ΔΔΔ[207].id = 207;
    this.ΔΔΔ[208] = yf(60, 60, 0, ᐃᐃ[966], 3);
    this.ΔΔΔ[208].id = 208;
    this.ΔΔΔ[209] = yf(60, 60, 0, ᐃᐃ[972], 3);
    this.ΔΔΔ[209].id = 209;
    this.ΔΔΔ[210] = yf(60, 60, 0, ᐃᐃ[981], 3);
    this.ΔΔΔ[210].id = 210;
    this.ΔΔΔ[211] = yf(60, 60, 0, ᐃᐃ[987], 3);
    this.ΔΔΔ[211].id = 211;
    this.ΔΔΔ[41] = yf(60, 60, 0, ᐃᐃ[880], 3);
    this.ΔΔΔ[41].id = 41;
    this.ΔΔΔ[42] = yf(60, 60, 0, ᐃᐃ[882], 3);
    this.ΔΔΔ[42].id = 42;
    this.ΔΔΔ[12] = yf(60, 60, 0, ᐃᐃ[401], 3);
    this.ΔΔΔ[12].id = 12;
    this.ΔΔΔ[16] = yf(60, 60, 0, ᐃᐃ[874], 3);
    this.ΔΔΔ[16].id = 16;
    this.ΔΔΔ[196] = yf(60, 60, 0, ᐃᐃ[196], 3);
    this.ΔΔΔ[196].id = 196;
    this.ΔΔΔ[18] = yf(60, 60, 0, ᐃᐃ[901], 3);
    this.ΔΔΔ[18].id = 18;
    this.ΔΔΔ[197] = yf(60, 60, 0, ᐃᐃ[197], 3);
    this.ΔΔΔ[197].id = 197;
    this.ΔΔΔ[198] = yf(60, 60, 0, ᐃᐃ[907], 3);
    this.ΔΔΔ[198].id = 198;
    this.ΔΔΔ[61] = yf(60, 60, 0, ᐃᐃ[910], 3);
    this.ΔΔΔ[61].id = 61;
    this.ΔΔΔ[201] = yf(60, 60, 0, ᐃᐃ[870], 3);
    this.ΔΔΔ[201].id = 201;
    this.ΔΔΔ[200] = yf(60, 60, 0, ᐃᐃ[200], 3);
    this.ΔΔΔ[200].id = 200;
    this.ΔΔΔ[199] = yf(60, 60, 0, ᐃᐃ[865], 3);
    this.ΔΔΔ[199].id = 199;
    this.ⵠⲆⲆ = [];
    this.ⵠⲆⲆ[35] = yf(60, 60, 0, ᐃᐃ[254], 3);
    this.ⵠⲆⲆ[35].id = 35;
    this.ⵠⲆⲆ[5] = yf(60, 60, 0, ᐃᐃ[256], 3);
    this.ⵠⲆⲆ[5].id = 5;
    this.ⵠⲆⲆ[0] = yf(60, 60, 0, ᐃᐃ[302], 3);
    this.ⵠⲆⲆ[0].id = 0;
    this.ⵠⲆⲆ[3] = yf(60, 60, 0, ᐃᐃ[262], 3);
    this.ⵠⲆⲆ[3].id = 3;
    this.ⵠⲆⲆ[55] = yf(60, 60, 0, ᐃᐃ[318], 3);
    this.ⵠⲆⲆ[55].id = 55;
    this.ⵠⲆⲆ[67] = yf(60, 60, 0, ᐃᐃ[320], 3);
    this.ⵠⲆⲆ[67].id = 67;
    this.ⵠⲆⲆ[40] = yf(60, 60, 0, ᐃᐃ[284], 3);
    this.ⵠⲆⲆ[40].id = 40;
    this.ⵠⲆⲆ[6] = yf(60, 60, 0, ᐃᐃ[295], 3);
    this.ⵠⲆⲆ[6].id = 6;
    this.ⵠⲆⲆ[7] = yf(60, 60, 0, ᐃᐃ[257], 3);
    this.ⵠⲆⲆ[7].id = 7;
    this.ⵠⲆⲆ[36] = yf(60, 60, 0, ᐃᐃ[290], 3);
    this.ⵠⲆⲆ[36].id = 36;
    this.ⵠⲆⲆ[34] = yf(60, 60, 0, ᐃᐃ[830], 3);
    this.ⵠⲆⲆ[34].id = 34;
    this.ⵠⲆⲆ[37] = yf(60, 60, 0, ᐃᐃ[291], 3);
    this.ⵠⲆⲆ[37].id = 37;
    this.ⵠⲆⲆ[4] = yf(60, 60, 0, ᐃᐃ[314], 3);
    this.ⵠⲆⲆ[4].id = 4;
    this.ⵠⲆⲆ[49] = yf(60, 60, 0, ᐃᐃ[325], 3);
    this.ⵠⲆⲆ[49].id = 49;
    this.ⵠⲆⲆ[1] = yf(60, 60, 0, ᐃᐃ[327], 3);
    this.ⵠⲆⲆ[1].id = 1;
    this.ⵠⲆⲆ[54] = yf(60, 60, 0, ᐃᐃ[304], 3);
    this.ⵠⲆⲆ[54].id = 54;
    this.ⵠⲆⲆ[56] = yf(60, 60, 0, ᐃᐃ[263], 3);
    this.ⵠⲆⲆ[56].id = 56;
    this.ⵠⲆⲆ[57] = yf(60, 60, 0, ᐃᐃ[265], 3);
    this.ⵠⲆⲆ[57].id = 57;
    this.ⵠⲆⲆ[58] = yf(60, 60, 0, ᐃᐃ[332], 3);
    this.ⵠⲆⲆ[58].id = 58;
    this.ⵠⲆⲆ[61] = yf(60, 60, 0, ᐃᐃ[268], 3);
    this.ⵠⲆⲆ[61].id = 61;
    this.ⵠⲆⲆ[79] = yf(60, 60, 0, ᐃᐃ[338], 3);
    this.ⵠⲆⲆ[79].id = 79;
    this.ⵠⲆⲆ[68] = yf(60, 60, 0, ᐃᐃ[360], 3);
    this.ⵠⲆⲆ[68].id = 68;
    this.ⵠⲆⲆ[69] = yf(60, 60, 0, ᐃᐃ[363], 3);
    this.ⵠⲆⲆ[69].id = 69;
    this.ⵠⲆⲆ[70] = yf(60, 60, 0, ᐃᐃ[365], 3);
    this.ⵠⲆⲆ[70].id = 70;
    this.ⵠⲆⲆ[100] = yf(60, 60, 0, ᐃᐃ[367], 3);
    this.ⵠⲆⲆ[100].id = 100;
    this.ⵠⲆⲆ[83] = yf(60, 60, 0, ᐃᐃ[370], 3);
    this.ⵠⲆⲆ[83].id = 83;
    this.ⵠⲆⲆ[62] = yf(60, 60, 0, ᐃᐃ[371], 3);
    this.ⵠⲆⲆ[62].id = 62;
    this.ⵠⲆⲆ[63] = yf(60, 60, 0, ᐃᐃ[374], 3);
    this.ⵠⲆⲆ[63].id = 63;
    this.ⵠⲆⲆ[64] = yf(60, 60, 0, ᐃᐃ[377], 3);
    this.ⵠⲆⲆ[64].id = 64;
    this.ⵠⲆⲆ[83] = yf(60, 60, 0, ᐃᐃ[370], 3);
    this.ⵠⲆⲆ[83].id = 83;
    this.ⵠⲆⲆ[84] = yf(60, 60, 0, ᐃᐃ[380], 3);
    this.ⵠⲆⲆ[84].id = 84;
    this.ⵠⲆⲆ[25] = yf(60, 60, 0, ᐃᐃ[402], 3);
    this.ⵠⲆⲆ[25].id = 25;
    this.ⵠⲆⲆ[26] = yf(60, 60, 0, ᐃᐃ[396], 3);
    this.ⵠⲆⲆ[26].id = 26;
    this.ⵠⲆⲆ[27] = yf(60, 60, 0, ᐃᐃ[399], 3);
    this.ⵠⲆⲆ[27].id = 27;
    this.ⵠⲆⲆ[28] = yf(60, 60, 0, ᐃᐃ[405], 3);
    this.ⵠⲆⲆ[28].id = 28;
    this.ⵠⲆⲆ[31] = yf(60, 60, 0, ᐃᐃ[876], 3);
    this.ⵠⲆⲆ[31].id = 31;
    this.ⵠⲆⲆ[2] = yf(60, 60, 0, ᐃᐃ[409], 3);
    this.ⵠⲆⲆ[2].id = 2;
    this.ⵠⲆⲆ[80] = yf(60, 60, 0, ᐃᐃ[421], 3);
    this.ⵠⲆⲆ[80].id = 80;
    this.ⵠⲆⲆ[81] = yf(60, 60, 0, ᐃᐃ[424], 3);
    this.ⵠⲆⲆ[81].id = 81;
    this.ⵠⲆⲆ[Rr.ⵠΔⵠⵠᐃ] = yf(60, 60, 0, ᐃᐃ[1228], 3);
    this.ⵠⲆⲆ[Rr.ⵠΔⵠⵠᐃ].id = Rr.ⵠΔⵠⵠᐃ;
    this.ⵠⲆⲆ[86] = yf(60, 60, 0, ᐃᐃ[1231], 3);
    this.ⵠⲆⲆ[86].id = 86;
    this.ⵠⲆⲆ[98] = yf(60, 60, 0, ᐃᐃ[1138], 3);
    this.ⵠⲆⲆ[98].id = 98;
    this.ⵠⲆⲆ[99] = yf(60, 60, 0, ᐃᐃ[1141], 3);
    this.ⵠⲆⲆ[99].id = 99;
    this.ⵠⲆⲆ[131] = yf(60, 60, 0, ᐃᐃ[570], 3);
    this.ⵠⲆⲆ[131].id = 131;
    this.ⵠⲆⲆ[132] = yf(60, 60, 0, ᐃᐃ[1168], 3);
    this.ⵠⲆⲆ[132].id = 132;
    this.ⵠⲆⲆ[145] = yf(60, 60, 0, ᐃᐃ[1238], 3);
    this.ⵠⲆⲆ[145].id = 145;
    this.ⵠⲆⲆ[133] = yf(60, 60, 0, ᐃᐃ[573], 3);
    this.ⵠⲆⲆ[133].id = 133;
    this.ⵠⲆⲆ[134] = yf(60, 60, 0, ᐃᐃ[1171], 3);
    this.ⵠⲆⲆ[134].id = 134;
    this.ⵠⲆⲆ[146] = yf(60, 60, 0, ᐃᐃ[1241], 3);
    this.ⵠⲆⲆ[146].id = 146;
    this.ⵠⲆⲆ[135] = yf(60, 60, 0, ᐃᐃ[576], 3);
    this.ⵠⲆⲆ[135].id = 135;
    this.ⵠⲆⲆ[136] = yf(60, 60, 0, ᐃᐃ[1174], 3);
    this.ⵠⲆⲆ[136].id = 136;
    this.ⵠⲆⲆ[147] = yf(60, 60, 0, ᐃᐃ[1244], 3);
    this.ⵠⲆⲆ[147].id = 147;
    this.ⵠⲆⲆ[137] = yf(60, 60, 0, ᐃᐃ[579], 3);
    this.ⵠⲆⲆ[137].id = 137;
    this.ⵠⲆⲆ[138] = yf(60, 60, 0, ᐃᐃ[1177], 3);
    this.ⵠⲆⲆ[138].id = 138;
    this.ⵠⲆⲆ[167] = yf(60, 60, 0, ᐃᐃ[1256], 3);
    this.ⵠⲆⲆ[167].id = 167;
    this.ⵠⲆⲆ[168] = yf(60, 60, 0, ᐃᐃ[1259], 3);
    this.ⵠⲆⲆ[168].id = 168;
    this.ⵠⲆⲆ[169] = yf(60, 60, 0, ᐃᐃ[1262], 3);
    this.ⵠⲆⲆ[169].id = 169;
    this.ⵠⲆⲆ[170] = yf(60, 60, 0, ᐃᐃ[1265], 3);
    this.ⵠⲆⲆ[170].id = 170;
    this.ⵠⲆⲆ[171] = yf(60, 60, 0, ᐃᐃ[1268], 3);
    this.ⵠⲆⲆ[171].id = 171;
    this.ⵠⲆⲆ[172] = yf(60, 60, 0, ᐃᐃ[1271], 3);
    this.ⵠⲆⲆ[172].id = 172;
    this.ⵠⲆⲆ[148] = yf(60, 60, 0, ᐃᐃ[1247], 3);
    this.ⵠⲆⲆ[148].id = 148;
    this.ⵠⲆⲆ[139] = yf(60, 60, 0, ᐃᐃ[582], 3);
    this.ⵠⲆⲆ[139].id = 139;
    this.ⵠⲆⲆ[140] = yf(60, 60, 0, ᐃᐃ[1180], 3);
    this.ⵠⲆⲆ[140].id = 140;
    this.ⵠⲆⲆ[149] = yf(60, 60, 0, ᐃᐃ[1250], 3);
    this.ⵠⲆⲆ[149].id = 149;
    this.ⵠⲆⲆ[141] = yf(60, 60, 0, ᐃᐃ[585], 3);
    this.ⵠⲆⲆ[141].id = 141;
    this.ⵠⲆⲆ[142] = yf(60, 60, 0, ᐃᐃ[1183], 3);
    this.ⵠⲆⲆ[142].id = 142;
    this.ⵠⲆⲆ[150] = yf(60, 60, 0, ᐃᐃ[1253], 3);
    this.ⵠⲆⲆ[150].id = 150;
    this.ⵠⲆⲆ[143] = yf(60, 60, 0, ᐃᐃ[588], 3);
    this.ⵠⲆⲆ[143].id = 143;
    this.ⵠⲆⲆ[144] = yf(60, 60, 0, ᐃᐃ[1186], 3);
    this.ⵠⲆⲆ[144].id = 144;
    this.ⵠⲆⲆ[87] = yf(60, 60, 0, ᐃᐃ[827], 3);
    this.ⵠⲆⲆ[87].id = 87;
    this.ⵠⲆⲆ[88] = yf(60, 60, 0, ᐃᐃ[430], 3);
    this.ⵠⲆⲆ[88].id = 88;
    this.ⵠⲆⲆ[89] = yf(60, 60, 0, ᐃᐃ[433], 3);
    this.ⵠⲆⲆ[89].id = 89;
    this.ⵠⲆⲆ[90] = yf(60, 60, 0, ᐃᐃ[436], 3);
    this.ⵠⲆⲆ[90].id = 90;
    this.ⵠⲆⲆ[24] = yf(60, 60, 0, ᐃᐃ[439], 3);
    this.ⵠⲆⲆ[24].id = 24;
    this.ⵠⲆⲆ[101] = yf(60, 60, 0, ᐃᐃ[442], 3);
    this.ⵠⲆⲆ[101].id = 101;
    this.ⵠⲆⲆ[100] = yf(60, 60, 0, ᐃᐃ[367], 3);
    this.ⵠⲆⲆ[100].id = 100;
    this.ⵠⲆⲆ[38] = yf(60, 60, 0, ᐃᐃ[456], 3);
    this.ⵠⲆⲆ[38].id = 38;
    this.ⵠⲆⲆ[Rr.ⲆⵠⲆΔΔ] = yf(60, 60, 0, ᐃᐃ[861], 3);
    this.ⵠⲆⲆ[Rr.ⲆⵠⲆΔΔ].id = Rr.ⲆⵠⲆΔΔ;
    this.ⵠⲆⲆ[8] = yf(60, 60, 0, ᐃᐃ[460], 3);
    this.ⵠⲆⲆ[8].id = 8;
    this.ⵠⲆⲆ[9] = yf(60, 60, 0, ᐃᐃ[1019], 3);
    this.ⵠⲆⲆ[9].id = 9;
    this.ⵠⲆⲆ[29] = yf(60, 60, 0, ᐃᐃ[473], 3);
    this.ⵠⲆⲆ[29].id = 29;
    this.ⵠⲆⲆ[10] = yf(60, 60, 0, ᐃᐃ[478], 3);
    this.ⵠⲆⲆ[10].id = 10;
    this.ⵠⲆⲆ[11] = yf(60, 60, 0, ᐃᐃ[481], 3);
    this.ⵠⲆⲆ[11].id = 11;
    this.ⵠⲆⲆ[12] = yf(60, 60, 0, ᐃᐃ[484], 3);
    this.ⵠⲆⲆ[12].id = 12;
    this.ⵠⲆⲆ[13] = yf(60, 60, 0, ᐃᐃ[487], 3);
    this.ⵠⲆⲆ[13].id = 13;
    this.ⵠⲆⲆ[14] = yf(60, 60, 0, ᐃᐃ[490], 3);
    this.ⵠⲆⲆ[14].id = 14;
    this.ⵠⲆⲆ[59] = yf(60, 60, 0, ᐃᐃ[493], 3);
    this.ⵠⲆⲆ[59].id = 59;
    this.ⵠⲆⲆ[71] = yf(60, 60, 0, ᐃᐃ[496], 3);
    this.ⵠⲆⲆ[71].id = 71;
    this.ⵠⲆⲆ[65] = yf(60, 60, 0, ᐃᐃ[498], 3);
    this.ⵠⲆⲆ[65].id = 65;
    this.ⵠⲆⲆ[85] = yf(60, 60, 0, ᐃᐃ[503], 3);
    this.ⵠⲆⲆ[85].id = 85;
    this.ⵠⲆⲆ[102] = yf(60, 60, 0, ᐃᐃ[515], 3);
    this.ⵠⲆⲆ[102].id = 102;
    this.ⵠⲆⲆ[103] = yf(60, 60, 0, ᐃᐃ[519], 3);
    this.ⵠⲆⲆ[103].id = 103;
    this.ⵠⲆⲆ[115] = yf(60, 60, 0, ᐃᐃ[530], 3);
    this.ⵠⲆⲆ[115].id = 115;
    this.ⵠⲆⲆ[104] = yf(60, 60, 0, ᐃᐃ[533], 3);
    this.ⵠⲆⲆ[104].id = 104;
    this.ⵠⲆⲆ[105] = yf(60, 60, 0, ᐃᐃ[555], 3);
    this.ⵠⲆⲆ[105].id = 105;
    this.ⵠⲆⲆ[91] = yf(60, 60, 0, ᐃᐃ[542], 3);
    this.ⵠⲆⲆ[91].id = 91;
    this.ⵠⲆⲆ[15] = yf(60, 60, 0, ᐃᐃ[551], 3);
    this.ⵠⲆⲆ[15].id = 15;
    this.ⵠⲆⲆ[106] = yf(60, 60, 0, ᐃᐃ[604], 3);
    this.ⵠⲆⲆ[106].id = 106;
    this.ⵠⲆⲆ[108] = yf(60, 60, 0, ᐃᐃ[1235], 3);
    this.ⵠⲆⲆ[108].id = 108;
    this.ⵠⲆⲆ[163] = yf(60, 60, 0, ᐃᐃ[1027], 3);
    this.ⵠⲆⲆ[163].id = 163;
    this.ⵠⲆⲆ[164] = yf(60, 60, 0, ᐃᐃ[1030], 3);
    this.ⵠⲆⲆ[164].id = 164;
    this.ⵠⲆⲆ[166] = yf(60, 60, 0, ᐃᐃ[1116], 3);
    this.ⵠⲆⲆ[166].id = 166;
    this.ⵠⲆⲆ[165] = yf(60, 60, 0, ᐃᐃ[1048], 3);
    this.ⵠⲆⲆ[165].id = 165;
    this.ⵠⲆⲆ[Rr.ⵠᐃΔⲆᐃ] = yf(60, 60, 0, ᐃᐃ[1051], 3);
    this.ⵠⲆⲆ[Rr.ⵠᐃΔⲆᐃ].id = Rr.ⵠᐃΔⲆᐃ;
    this.ⵠⲆⲆ[Rr.ΔⲆᐃᐃⵠ] = yf(60, 60, 0, ᐃᐃ[1082], 3);
    this.ⵠⲆⲆ[Rr.ΔⲆᐃᐃⵠ].id = Rr.ΔⲆᐃᐃⵠ;
    this.ⵠⲆⲆ[Rr.ⲆⲆⵠⵠⵠ] = yf(60, 60, 0, ᐃᐃ[1226], 3);
    this.ⵠⲆⲆ[Rr.ⲆⲆⵠⵠⵠ].id = Rr.ⲆⲆⵠⵠⵠ;
    this.ⵠⲆⲆ[Rr.ⲆⵠⵠⲆΔ] = yf(60, 60, 0, ᐃᐃ[1191], 3);
    this.ⵠⲆⲆ[Rr.ⲆⵠⵠⲆΔ].id = Rr.ⲆⵠⵠⲆΔ;
    this.ⵠⲆⲆ[110] = yf(60, 60, 0, ᐃᐃ[611], 3);
    this.ⵠⲆⲆ[110].id = 110;
    this.ⵠⲆⲆ[111] = yf(60, 60, 0, ᐃᐃ[715], 3);
    this.ⵠⲆⲆ[111].id = 111;
    this.ⵠⲆⲆ[112] = yf(60, 60, 0, ᐃᐃ[715], 3);
    this.ⵠⲆⲆ[112].id = 112;
    this.ⵠⲆⲆ[113] = yf(60, 60, 0, ᐃᐃ[715], 3);
    this.ⵠⲆⲆ[113].id = 113;
    this.ⵠⲆⲆ[16] = yf(60, 60, 0, ᐃᐃ[618], 3);
    this.ⵠⲆⲆ[16].id = 16;
    this.ⵠⲆⲆ[17] = yf(60, 60, 0, ᐃᐃ[700], 3);
    this.ⵠⲆⲆ[17].id = 17;
    this.ⵠⲆⲆ[18] = yf(60, 60, 0, ᐃᐃ[704], 3);
    this.ⵠⲆⲆ[18].id = 18;
    this.ⵠⲆⲆ[19] = yf(60, 60, 0, ᐃᐃ[706], 3);
    this.ⵠⲆⲆ[19].id = 19;
    this.ⵠⲆⲆ[122] = yf(60, 60, 0, ᐃᐃ[711], 3);
    this.ⵠⲆⲆ[122].id = 122;
    this.ⵠⲆⲆ[20] = yf(60, 60, 0, ᐃᐃ[627], 3);
    this.ⵠⲆⲆ[20].id = 20;
    this.ⵠⲆⲆ[41] = yf(60, 60, 0, ᐃᐃ[632], 3);
    this.ⵠⲆⲆ[41].id = 41;
    this.ⵠⲆⲆ[52] = yf(60, 60, 0, ᐃᐃ[635], 3);
    this.ⵠⲆⲆ[52].id = 52;
    this.ⵠⲆⲆ[114] = yf(60, 60, 0, ᐃᐃ[643], 3);
    this.ⵠⲆⲆ[114].id = 114;
    this.ⵠⲆⲆ[94] = yf(60, 60, 0, ᐃᐃ[647], 3);
    this.ⵠⲆⲆ[94].id = 94;
    this.ⵠⲆⲆ[93] = yf(60, 60, 0, ᐃᐃ[650], 3);
    this.ⵠⲆⲆ[93].id = 93;
    this.ⵠⲆⲆ[21] = yf(60, 60, 0, ᐃᐃ[654], 3);
    this.ⵠⲆⲆ[21].id = 21;
    this.ⵠⲆⲆ[53] = yf(60, 60, 0, ᐃᐃ[660], 3);
    this.ⵠⲆⲆ[53].id = 53;
    this.ⵠⲆⲆ[51] = yf(60, 60, 0, ᐃᐃ[690], 3);
    this.ⵠⲆⲆ[51].id = 51;
    this.ⵠⲆⲆ[50] = yf(60, 60, 0, ᐃᐃ[666], 3);
    this.ⵠⲆⲆ[50].id = 50;
    this.ⵠⲆⲆ[109] = yf(60, 60, 0, ᐃᐃ[684], 3);
    this.ⵠⲆⲆ[109].id = 109;
    this.ⵠⲆⲆ[124] = yf(60, 60, 0, ᐃᐃ[718], 3);
    this.ⵠⲆⲆ[124].id = 124;
    this.ⵠⲆⲆ[125] = yf(60, 60, 0, ᐃᐃ[730], 3);
    this.ⵠⲆⲆ[125].id = 125;
    this.ⵠⲆⲆ[126] = yf(60, 60, 0, ᐃᐃ[734], 3);
    this.ⵠⲆⲆ[126].id = 126;
    this.ⵠⲆⲆ[129] = yf(60, 60, 0, ᐃᐃ[563], 3);
    this.ⵠⲆⲆ[129].id = 129;
    this.ⵠⲆⲆ[151] = yf(60, 60, 0, ᐃᐃ[758], 3);
    this.ⵠⲆⲆ[151].id = 151;
    this.ⵠⲆⲆ[152] = yf(60, 60, 0, ᐃᐃ[762], 3);
    this.ⵠⲆⲆ[152].id = 152;
    this.ⵠⲆⲆ[153] = yf(60, 60, 0, ᐃᐃ[770], 3);
    this.ⵠⲆⲆ[153].id = 153;
    this.ⵠⲆⲆ[154] = yf(60, 60, 0, ᐃᐃ[768], 3);
    this.ⵠⲆⲆ[154].id = 154;
    this.ⵠⲆⲆ[155] = yf(60, 60, 0, ᐃᐃ[772], 3);
    this.ⵠⲆⲆ[155].id = 155;
    this.ⵠⲆⲆ[157] = yf(60, 60, 0, ᐃᐃ[777], 3);
    this.ⵠⲆⲆ[157].id = 157;
    this.ⵠⲆⲆ[156] = yf(60, 60, 0, ᐃᐃ[780], 3);
    this.ⵠⲆⲆ[156].id = 156;
    this.ⵠⲆⲆ[158] = yf(60, 60, 0, ᐃᐃ[784], 3);
    this.ⵠⲆⲆ[158].id = 158;
    this.ⵠⲆⲆ[159] = yf(60, 60, 0, ᐃᐃ[785], 3);
    this.ⵠⲆⲆ[159].id = 159;
    this.ⵠⲆⲆ[160] = yf(60, 60, 0, ᐃᐃ[791], 3);
    this.ⵠⲆⲆ[160].id = 160;
    this.ⵠⲆⲆ[161] = yf(60, 60, 0, ᐃᐃ[799], 3);
    this.ⵠⲆⲆ[161].id = 161;
    this.ⵠⲆⲆ[42] = yf(60, 60, 0, ᐃᐃ[809], 3);
    this.ⵠⲆⲆ[42].id = 42;
    this.ⵠⲆⲆ[43] = yf(60, 60, 0, ᐃᐃ[835], 3);
    this.ⵠⲆⲆ[43].id = 43;
    this.ⵠⲆⲆ[107] = yf(60, 60, 0, ᐃᐃ[843], 3);
    this.ⵠⲆⲆ[107].id = 107;
    this.ⵠⲆⲆ[44] = yf(60, 60, 0, ᐃᐃ[846], 3);
    this.ⵠⲆⲆ[44].id = 44;
    this.ⵠⲆⲆ[46] = yf(60, 60, 0, ᐃᐃ[960], 3);
    this.ⵠⲆⲆ[46].id = 46;
    this.ⵠⲆⲆ[45] = yf(60, 60, 0, ᐃᐃ[950], 3);
    this.ⵠⲆⲆ[45].id = 45;
    this.ⵠⲆⲆ[47] = yf(60, 60, 0, ᐃᐃ[967], 3);
    this.ⵠⲆⲆ[47].id = 47;
    this.ⵠⲆⲆ[48] = yf(60, 60, 0, ᐃᐃ[982], 3);
    this.ⵠⲆⲆ[48].id = 48;
    this.ⵠⲆⲆ[25] = yf(60, 60, 0, ᐃᐃ[402], 3);
    this.ⵠⲆⲆ[25].id = 25;
    this.ⵠⲆⲆ[31] = yf(60, 60, 0, ᐃᐃ[876], 3);
    this.ⵠⲆⲆ[31].id = 31;
    this.ⵠⲆⲆ[33] = yf(60, 60, 0, ᐃᐃ[900], 3);
    this.ⵠⲆⲆ[33].id = 33;
    this.ⵠⲆⲆ[162] = yf(60, 60, 0, ᐃᐃ[909], 3);
    this.ⵠⲆⲆ[162].id = 162;
    this.ⵠⲆⲆ[128] = yf(60, 60, 0, ᐃᐃ[912], 3);
    this.ⵠⲆⲆ[128].id = 128;
    this.ⵠⲆᐃ[53] = yf(68, 68, 0, ᐃᐃ[976], 3);
    this.ⵠⲆᐃ[53].id = 53;
    this.ΔΔΔ[53] = yf(60, 60, 0, ᐃᐃ[975], 3);
    this.ΔΔΔ[53].id = 53;
    this.ⵠⲆⲆ[22] = yf(60, 60, 0, ᐃᐃ[977], 3);
    this.ⵠⲆⲆ[22].id = 22;
    this.ⵠⲆᐃ[54] = yf(68, 68, 0, ᐃᐃ[979], 3);
    this.ⵠⲆᐃ[54].id = 54;
    this.ΔΔΔ[54] = yf(60, 60, 0, ᐃᐃ[978], 3);
    this.ΔΔΔ[54].id = 54;
    this.ⵠⲆⲆ[23] = yf(60, 60, 0, ᐃᐃ[980], 3);
    this.ⵠⲆⲆ[23].id = 23;
    this.ⵠⲆᐃ[56] = yf(68, 68, 0, ᐃᐃ[713], 3);
    this.ⵠⲆᐃ[56].id = 56;
    this.ΔΔΔ[56] = yf(60, 60, 0, ᐃᐃ[712], 3);
    this.ΔΔΔ[56].id = 56;
    this.ⵠⲆⲆ[123] = yf(60, 60, 0, ᐃᐃ[714], 3);
    this.ⵠⲆⲆ[123].id = 123;
    this.ⵠⲆᐃ[82] = yf(68, 68, 0, ᐃᐃ[428], 3);
    this.ⵠⲆᐃ[82].id = 82;
    this.ΔΔΔ[82] = yf(60, 60, 0, ᐃᐃ[426], 3);
    this.ΔΔΔ[82].id = 82;
    this.ⵠⲆⲆ[82] = yf(60, 60, 0, ᐃᐃ[427], 3);
    this.ⵠⲆⲆ[82].id = 82;
    this.ⵠⲆᐃ[235] = yf(68, 68, 0, ᐃᐃ[1159], 3);
    this.ⵠⲆᐃ[235].id = 235;
    this.ΔΔΔ[235] = yf(60, 60, 0, ᐃᐃ[1158], 3);
    this.ΔΔΔ[235].id = 235;
    this.ⵠⲆᐃ[238] = yf(68, 68, 0, ᐃᐃ[1188], 3);
    this.ⵠⲆᐃ[238].id = 238;
    this.ΔΔΔ[238] = yf(60, 60, 0, ᐃᐃ[1187], 3);
    this.ΔΔΔ[238].id = 238;
    this.ⵠⲆᐃ[236] = yf(68, 68, 0, ᐃᐃ[1161], 3);
    this.ⵠⲆᐃ[236].id = 236;
    this.ΔΔΔ[236] = yf(60, 60, 0, ᐃᐃ[1160], 3);
    this.ΔΔΔ[236].id = 236;
    this.ⵠⲆᐃ[152] = yf(68, 68, 0, ᐃᐃ[1197], 3);
    this.ⵠⲆᐃ[152].id = 152;
    this.ΔΔΔ[152] = yf(60, 60, 0, ᐃᐃ[1195], 3);
    this.ΔΔΔ[152].id = 152;
    this.ⵠⲆⲆ[116] = yf(60, 60, 0, ᐃᐃ[1196], 3);
    this.ⵠⲆⲆ[116].id = 116;
    this.ⵠⲆᐃ[212] = yf(68, 68, 0, ᐃᐃ[992], 3);
    this.ⵠⲆᐃ[212].id = 212;
    this.ΔΔΔ[212] = yf(60, 60, 0, ᐃᐃ[991], 3);
    this.ΔΔΔ[212].id = 212;
    this.ⵠⲆⲆ[73] = yf(60, 60, 0, ᐃᐃ[990], 3);
    this.ⵠⲆⲆ[73].id = 73;
    this.ⵠⲆᐃ[213] = yf(68, 68, 0, ᐃᐃ[995], 3);
    this.ⵠⲆᐃ[213].id = 213;
    this.ΔΔΔ[213] = yf(60, 60, 0, ᐃᐃ[994], 3);
    this.ΔΔΔ[213].id = 213;
    this.ⵠⲆⲆ[74] = yf(60, 60, 0, ᐃᐃ[993], 3);
    this.ⵠⲆⲆ[74].id = 74;
    this.ⵠⲆᐃ[214] = yf(68, 68, 0, ᐃᐃ[998], 3);
    this.ⵠⲆᐃ[214].id = 214;
    this.ΔΔΔ[214] = yf(60, 60, 0, ᐃᐃ[997], 3);
    this.ΔΔΔ[214].id = 214;
    this.ⵠⲆⲆ[75] = yf(60, 60, 0, ᐃᐃ[996], 3);
    this.ⵠⲆⲆ[75].id = 75;
    this.ⵠⲆᐃ[215] = yf(68, 68, 0, ᐃᐃ[1001], 3);
    this.ⵠⲆᐃ[215].id = 215;
    this.ΔΔΔ[215] = yf(60, 60, 0, ᐃᐃ[1000], 3);
    this.ΔΔΔ[215].id = 215;
    this.ⵠⲆⲆ[76] = yf(60, 60, 0, ᐃᐃ[999], 3);
    this.ⵠⲆⲆ[76].id = 76;
    this.ⵠⲆᐃ[216] = yf(68, 68, 0, ᐃᐃ[1004], 3);
    this.ⵠⲆᐃ[216].id = 216;
    this.ΔΔΔ[216] = yf(60, 60, 0, ᐃᐃ[1003], 3);
    this.ΔΔΔ[216].id = 216;
    this.ⵠⲆⲆ[77] = yf(60, 60, 0, ᐃᐃ[1002], 3);
    this.ⵠⲆⲆ[77].id = 77;
    this.ⵠⲆᐃ[220] = yf(68, 68, 0, ᐃᐃ[1007], 3);
    this.ⵠⲆᐃ[220].id = 220;
    this.ΔΔΔ[220] = yf(60, 60, 0, ᐃᐃ[1006], 3);
    this.ΔΔΔ[220].id = 220;
    this.ⵠⲆⲆ[78] = yf(60, 60, 0, ᐃᐃ[1005], 3);
    this.ⵠⲆⲆ[78].id = 78;
    this.ⵠⲆᐃ[217] = yf(68, 68, 0, ᐃᐃ[1016], 3);
    this.ⵠⲆᐃ[217].id = 217;
    this.ΔΔΔ[217] = yf(60, 60, 0, ᐃᐃ[1015], 3);
    this.ΔΔΔ[217].id = 217;
    this.ⵠⲆⲆ[60] = yf(60, 60, 0, ᐃᐃ[1014], 3);
    this.ⵠⲆⲆ[60].id = 60;
    this.ⵠⲆᐃ[219] = yf(68, 68, 0, ᐃᐃ[1013], 3);
    this.ⵠⲆᐃ[219].id = 219;
    this.ΔΔΔ[219] = yf(60, 60, 0, ᐃᐃ[1012], 3);
    this.ΔΔΔ[219].id = 219;
    this.ⵠⲆⲆ[72] = yf(60, 60, 0, ᐃᐃ[1011], 3);
    this.ⵠⲆⲆ[72].id = 72;
    this.ⵠⲆᐃ[218] = yf(68, 68, 0, ᐃᐃ[1010], 3);
    this.ⵠⲆᐃ[218].id = 218;
    this.ΔΔΔ[218] = yf(60, 60, 0, ᐃᐃ[1009], 3);
    this.ΔΔΔ[218].id = 218;
    this.ⵠⲆⲆ[66] = yf(60, 60, 0, ᐃᐃ[1008], 3);
    this.ⵠⲆⲆ[66].id = 66;
    this.ⵠⲆᐃ[153] = yf(68, 68, 0, ᐃᐃ[1201], 3);
    this.ⵠⲆᐃ[153].id = 153;
    this.ΔΔΔ[153] = yf(60, 60, 0, ᐃᐃ[1199], 3);
    this.ΔΔΔ[153].id = 153;
    this.ⵠⲆⲆ[117] = yf(60, 60, 0, ᐃᐃ[1200], 3);
    this.ⵠⲆⲆ[117].id = 117;
    this.ⵠⲆᐃ[154] = yf(68, 68, 0, ᐃᐃ[1205], 3);
    this.ⵠⲆᐃ[154].id = 154;
    this.ΔΔΔ[154] = yf(60, 60, 0, ᐃᐃ[1203], 3);
    this.ΔΔΔ[154].id = 154;
    this.ⵠⲆⲆ[118] = yf(60, 60, 0, ᐃᐃ[1204], 3);
    this.ⵠⲆⲆ[118].id = 118;
    this.ⵠⲆᐃ[155] = yf(68, 68, 0, ᐃᐃ[1209], 3);
    this.ⵠⲆᐃ[155].id = 155;
    this.ΔΔΔ[155] = yf(60, 60, 0, ᐃᐃ[1207], 3);
    this.ΔΔΔ[155].id = 155;
    this.ⵠⲆⲆ[119] = yf(60, 60, 0, ᐃᐃ[1208], 3);
    this.ⵠⲆⲆ[119].id = 119;
    this.ⵠⲆᐃ[156] = yf(68, 68, 0, ᐃᐃ[1213], 3);
    this.ⵠⲆᐃ[156].id = 156;
    this.ΔΔΔ[156] = yf(60, 60, 0, ᐃᐃ[1211], 3);
    this.ΔΔΔ[156].id = 156;
    this.ⵠⲆⲆ[120] = yf(60, 60, 0, ᐃᐃ[1212], 3);
    this.ⵠⲆⲆ[120].id = 120;
    this.ⵠⲆᐃ[157] = yf(68, 68, 0, ᐃᐃ[1217], 3);
    this.ⵠⲆᐃ[157].id = 157;
    this.ΔΔΔ[157] = yf(60, 60, 0, ᐃᐃ[1215], 3);
    this.ΔΔΔ[157].id = 157;
    this.ⵠⲆⲆ[121] = yf(60, 60, 0, ᐃᐃ[1216], 3);
    this.ⵠⲆⲆ[121].id = 121;
    this.ⵠⲆᐃ[203] = yf(68, 68, 0, ᐃᐃ[937], 3);
    this.ⵠⲆᐃ[203].id = 203;
    this.ΔΔΔ[203] = yf(60, 60, 0, ᐃᐃ[936], 3);
    this.ΔΔΔ[203].id = 203;
    this.ΔΔΔ[203].info.ⵠⵠ[2] = this.ΔΔΔ[203].info.ⵠⵠ[0];
    this.ⵠⲆᐃ[150] = yf(68, 68, 0, ᐃᐃ[524], 3);
    this.ⵠⲆᐃ[150].id = 150;
    this.ΔΔΔ[150] = yf(60, 60, 0, ᐃᐃ[523], 3);
    this.ΔΔΔ[150].id = 150;
    this.ΔΔΔ[150].info.ⵠⵠ[2] = this.ΔΔΔ[150].info.ⵠⵠ[0];
    this.ⵠⲆᐃ[202] = yf(68, 68, 0, ᐃᐃ[939], 3);
    this.ⵠⲆᐃ[202].id = 202;
    this.ΔΔΔ[202] = yf(60, 60, 0, ᐃᐃ[938], 3);
    this.ΔΔΔ[202].id = 202;
    this.ΔΔΔ[202].info.ⵠⵠ[2] = this.ΔΔΔ[202].info.ⵠⵠ[0];
    this.ⵠⲆᐃ[19] = yf(68, 68, 0, ᐃᐃ[934], 3);
    this.ⵠⲆᐃ[19].id = 19;
    this.ΔΔΔ[19] = yf(60, 60, 0, ᐃᐃ[932], 3);
    this.ΔΔΔ[19].id = 19;
    this.ⵠⲆⲆ[39] = yf(60, 60, 0, ᐃᐃ[933], 3);
    this.ⵠⲆⲆ[39].id = 39;
    this.ⵠⲆᐃ[20] = yf(68, 68, 0, ᐃᐃ[923], 3);
    this.ⵠⲆᐃ[20].id = 20;
    this.ΔΔΔ[20] = yf(60, 60, 0, ᐃᐃ[921], 3);
    this.ΔΔΔ[20].id = 20;
    this.ⵠⲆⲆ[95] = yf(60, 60, 0, ᐃᐃ[922], 3);
    this.ⵠⲆⲆ[95].id = 95;
    this.ⵠⲆᐃ[21] = yf(68, 68, 0, ᐃᐃ[927], 3);
    this.ⵠⲆᐃ[21].id = 21;
    this.ΔΔΔ[21] = yf(60, 60, 0, ᐃᐃ[925], 3);
    this.ΔΔΔ[21].id = 21;
    this.ⵠⲆⲆ[96] = yf(60, 60, 0, ᐃᐃ[926], 3);
    this.ⵠⲆⲆ[96].id = 96;
    this.ⵠⲆᐃ[22] = yf(68, 68, 0, ᐃᐃ[931], 3);
    this.ⵠⲆᐃ[22].id = 22;
    this.ΔΔΔ[22] = yf(60, 60, 0, ᐃᐃ[929], 3);
    this.ΔΔΔ[22].id = 22;
    this.ⵠⲆⲆ[97] = yf(60, 60, 0, ᐃᐃ[930], 3);
    this.ⵠⲆⲆ[97].id = 97;
    this.ⵠⲆᐃ[60] = yf(68, 68, 0, ᐃᐃ[736], 3);
    this.ⵠⲆᐃ[60].id = 60;
    this.ΔΔΔ[60] = yf(60, 60, 0, ᐃᐃ[735], 3);
    this.ΔΔΔ[60].id = 60;
    this.ⵠⲆⲆ[127] = yf(60, 60, 0, ᐃᐃ[737], 3);
    this.ⵠⲆⲆ[127].id = 127;
    this.ⵠⲆᐃ[90] = yf(68, 68, 0, ᐃᐃ[739], 3);
    this.ⵠⲆᐃ[90].id = 90;
    this.ΔΔΔ[90] = yf(60, 60, 0, ᐃᐃ[738], 3);
    this.ΔΔΔ[90].id = 90;
    this.ⵠⲆⲆ[173] = yf(60, 60, 0, ᐃᐃ[740], 3);
    this.ⵠⲆⲆ[173].id = 173;
    this.ⵠⲆᐃ[92] = yf(68, 68, 0, ᐃᐃ[745], 3);
    this.ⵠⲆᐃ[92].id = 92;
    this.ΔΔΔ[92] = yf(60, 60, 0, ᐃᐃ[744], 3);
    this.ΔΔΔ[92].id = 92;
    this.ⵠⲆⲆ[174] = yf(60, 60, 0, ᐃᐃ[746], 3);
    this.ⵠⲆⲆ[174].id = 174;
    this.ⵠⲆᐃ[93] = yf(68, 68, 0, ᐃᐃ[748], 3);
    this.ⵠⲆᐃ[93].id = 93;
    this.ΔΔΔ[93] = yf(60, 60, 0, ᐃᐃ[747], 3);
    this.ΔΔΔ[93].id = 93;
    this.ⵠⲆⲆ[175] = yf(60, 60, 0, ᐃᐃ[749], 3);
    this.ⵠⲆⲆ[175].id = 175;
    this.ⵠⲆᐃ[91] = yf(68, 68, 0, ᐃᐃ[742], 3);
    this.ⵠⲆᐃ[91].id = 91;
    this.ΔΔΔ[91] = yf(60, 60, 0, ᐃᐃ[741], 3);
    this.ΔΔΔ[91].id = 91;
    this.ⵠⲆⲆ[176] = yf(60, 60, 0, ᐃᐃ[743], 3);
    this.ⵠⲆⲆ[176].id = 176;
    this.ⵠⲆᐃ[100] = yf(68, 68, 0, ᐃᐃ[1165], 3);
    this.ⵠⲆᐃ[100].id = 100;
    this.ΔΔΔ[100] = yf(60, 60, 0, ᐃᐃ[1164], 3);
    this.ΔΔΔ[100].id = 100;
    this.ⵠⲆⲆ[Rr.ⲆΔⲆⵠΔ] = yf(60, 60, 0, ᐃᐃ[Mr.ᐃΔⵠᐃⵠⵠⲆΔⵠ], 3);
    this.ⵠⲆⲆ[Rr.ⲆΔⲆⵠΔ].id = Rr.ⲆΔⲆⵠΔ;
    this.ⵠⲆᐃ[34] = yf(68, 68, 0, ᐃᐃ[945], 3);
    this.ⵠⲆᐃ[34].id = 34;
    this.ΔΔΔ[34] = yf(60, 60, 0, ᐃᐃ[943], 3);
    this.ΔΔΔ[34].id = 34;
    this.ⵠⲆⲆ[30] = yf(60, 60, 0, ᐃᐃ[944], 3);
    this.ⵠⲆⲆ[30].id = 30;
    this.ⵠⲆᐃ[44] = yf(68, 68, 0, ᐃᐃ[948], 3);
    this.ⵠⲆᐃ[44].id = 44;
    this.ΔΔΔ[44] = yf(60, 60, 0, ᐃᐃ[946], 3);
    this.ΔΔΔ[44].id = 44;
    this.ⵠⲆⲆ[92] = yf(60, 60, 0, ᐃᐃ[947], 3);
    this.ⵠⲆⲆ[92].id = 92;
    this.ⵠⲆᐃ[17] = yf(68, 68, 0, ᐃᐃ[878], 3);
    this.ⵠⲆᐃ[17].id = 17;
    this.ΔΔΔ[17] = yf(60, 60, 0, ᐃᐃ[877], 3);
    this.ΔΔΔ[17].id = 17;
    this.ⵠⲆⲆ[32] = yf(60, 60, 0, ᐃᐃ[879], 3);
    this.ⵠⲆⲆ[32].id = 32;
    this.ⵠⲆᐃ[63] = yf(68, 68, 0, ᐃᐃ[568], 3);
    this.ⵠⲆᐃ[63].id = 63;
    this.ΔΔΔ[63] = yf(60, 60, 0, ᐃᐃ[566], 3);
    this.ΔΔΔ[63].id = 63;
    this.ⵠⲆⲆ[130] = yf(60, 60, 0, ᐃᐃ[567], 3);
    this.ⵠⲆⲆ[130].id = 130;
    this.ⵠⲆᐃ[187] = yf(68, 68, 0, ᐃᐃ[591], 3);
    this.ⵠⲆᐃ[187].id = 187;
    this.ΔΔΔ[187] = yf(60, 60, 0, ᐃᐃ[253], 3);
    this.ΔΔΔ[187].id = 187;
    this.ⵠⲆᐃ[Vr.ⵠⲆᐃⵠΔᐃᐃ] = yf(68, 68, 0, ᐃᐃ[Mr.ᐃΔΔᐃᐃⲆⲆΔΔ], 3);
    this.ⵠⲆᐃ[Vr.ⵠⲆᐃⵠΔᐃᐃ].id = Vr.ⵠⲆᐃⵠΔᐃᐃ;
    this.ΔΔΔ[Vr.ⵠⲆᐃⵠΔᐃᐃ] = yf(60, 60, 0, ᐃᐃ[Mr.ΔⲆⲆΔⵠΔⵠΔⵠ], 3);
    this.ΔΔΔ[Vr.ⵠⲆᐃⵠΔᐃᐃ].id = Vr.ⵠⲆᐃⵠΔᐃᐃ;
    this.ⵠⲆᐃ[Vr.ⵠᐃᐃⲆⲆᐃⵠ] = yf(68, 68, 0, ᐃᐃ[Mr.ΔⵠⲆⲆᐃᐃⲆᐃⲆ], 3);
    this.ⵠⲆᐃ[Vr.ⵠᐃᐃⲆⲆᐃⵠ].id = Vr.ⵠᐃᐃⲆⲆᐃⵠ;
    this.ΔΔΔ[Vr.ⵠᐃᐃⲆⲆᐃⵠ] = yf(60, 60, 0, ᐃᐃ[Mr.ⲆΔⵠΔΔⵠⵠΔⲆ], 3);
    this.ΔΔΔ[Vr.ⵠᐃᐃⲆⲆᐃⵠ].id = Vr.ⵠᐃᐃⲆⲆᐃⵠ;
    this.ⵠⲆᐃ[Vr.ⲆᐃⲆΔⲆΔⲆ] = yf(68, 68, 0, ᐃᐃ[Mr.ⲆᐃⵠΔᐃᐃⲆⲆΔ], 3);
    this.ⵠⲆᐃ[Vr.ⲆᐃⲆΔⲆΔⲆ].id = Vr.ⲆᐃⲆΔⲆΔⲆ;
    this.ΔΔΔ[Vr.ⲆᐃⲆΔⲆΔⲆ] = yf(60, 60, 0, ᐃᐃ[Mr.ᐃⲆⵠΔᐃⵠⵠᐃΔ], 3);
    this.ΔΔΔ[Vr.ⲆᐃⲆΔⲆΔⲆ].id = Vr.ⲆᐃⲆΔⲆΔⲆ;
    this.ⵠⲆᐃ[Vr.ⲆΔⲆⲆⲆᐃⲆ] = yf(68, 68, 0, ᐃᐃ[Mr.ᐃΔᐃᐃΔⵠⲆᐃΔ], 3);
    this.ⵠⲆᐃ[Vr.ⲆΔⲆⲆⲆᐃⲆ].id = Vr.ⲆΔⲆⲆⲆᐃⲆ;
    this.ΔΔΔ[Vr.ⲆΔⲆⲆⲆᐃⲆ] = yf(60, 60, 0, ᐃᐃ[Mr.ⵠᐃⵠⲆⲆΔⵠᐃⵠ], 3);
    this.ΔΔΔ[Vr.ⲆΔⲆⲆⲆᐃⲆ].id = Vr.ⲆΔⲆⲆⲆᐃⲆ;
    this.ⵠⲆᐃ[Vr.ᐃⲆΔⵠᐃΔΔ] = yf(68, 68, 0, ᐃᐃ[Mr.ᐃΔᐃΔᐃⲆⵠΔⲆ], 3);
    this.ⵠⲆᐃ[Vr.ᐃⲆΔⵠᐃΔΔ].id = Vr.ᐃⲆΔⵠᐃΔΔ;
    this.ΔΔΔ[Vr.ᐃⲆΔⵠᐃΔΔ] = yf(60, 60, 0, ᐃᐃ[Mr.ᐃᐃΔⲆⵠᐃⲆⵠⲆ], 3);
    this.ΔΔΔ[Vr.ᐃⲆΔⵠᐃΔΔ].id = Vr.ᐃⲆΔⵠᐃΔΔ;
    this.ΔΔⵠᐃⵠⵠΔ = function () {
      for (var a = zx.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ, b = 10, c = 10, d = 0; d < a.length; d++) {
        if (d > 0 && !(d % 4)) {
          b += a[0].info.width + 10;
          c = 10;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += 10 + a[d].info.height;
      }
    };
    this.ⲆΔⵠᐃᐃΔⲆ = function () {
      var a = Math.floor(Math.floor((3 + zx.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ.length) / 4) * (10 + this.ⵠⲆᐃ[0].info.ⵠⵠ[0].width) + 35);
      for (var b = 0; b < this.ⵠⲆᐃ.length; b++) {
        if (this.ⵠⲆᐃ[b]) {
          this.ⵠⲆᐃ[b].info.translate.x = a;
          this.ⵠⲆᐃ[b].info.translate.y = 22;
        }
      }
      this.ᐃⵠΔⵠⲆΔᐃ.info.translate.x = a + 17;
      this.ᐃⵠΔⵠⲆΔᐃ.info.translate.y = 22 + ᐃᐃ[339].height;
      this.ᐃΔᐃⲆᐃⵠⲆ.info.translate.x = a + 17;
      this.ᐃΔᐃⲆᐃⵠⲆ.info.translate.y = 30;
      this.ⵠⲆᐃⵠⵠⲆⵠ.info.translate.x = a + 17;
      this.ⵠⲆᐃⵠⵠⲆⵠ.info.translate.y = 22 + ᐃᐃ[339].height;
    };
    this.ΔΔΔΔⵠⲆⵠΔⵠ = function () {
      var a = Math.floor((uo - ᐃᐃ[556][0].width) / 2);
      for (var b = 0; b < this.ΔᐃᐃⵠΔ.length; b++) {
        this.ΔᐃᐃⵠΔ[b].button.info.translate.x = a;
        this.ΔᐃᐃⵠΔ[b].button.info.translate.y = -13;
      }
    };
    this.ΔⲆΔΔΔⵠΔ = function () {
      var a = 12 + Math.floor((10 + this.ⵠⵠⵠⲆᐃΔᐃ.info.ⵠⵠ[0].width) * Math.floor((3 + zx.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ.length) / 4) + 35);
      this.ⵠⵠⵠⲆᐃΔᐃ.info.translate.x = a;
      this.ⵠⵠⵠⲆᐃΔᐃ.info.translate.y = 33;
      this.ⵠΔᐃᐃⲆⲆⲆ.info.translate.x = this.ⵠⵠⵠⲆᐃΔᐃ.info.translate.x;
      this.ⵠΔᐃᐃⲆⲆⲆ.info.translate.y = 137;
      this.ⵠⲆⲆᐃⲆⵠᐃ.info.translate.x = this.ⵠⵠⵠⲆᐃΔᐃ.info.translate.x;
      this.ⵠⲆⲆᐃⲆⵠᐃ.info.translate.y = 240;
    };
    this.ᐃⲆⵠⵠᐃΔⵠ = function () {
      var a = 12 + Math.floor(Math.floor((3 + zx.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ.length) / 4) * (10 + this.ᐃᐃᐃⵠᐃΔⲆ.info.ⵠⵠ[0].width) + 35);
      this.ᐃᐃᐃⵠᐃΔⲆ.info.translate.x = a;
      this.ᐃᐃᐃⵠᐃΔⲆ.info.translate.y = 36;
      a += 83;
      this.ᐃᐃᐃᐃⵠᐃⲆ.info.translate.x = a;
      this.ᐃᐃᐃᐃⵠᐃⲆ.info.translate.y = 36;
      this.ⵠⲆⲆΔⵠᐃⵠ.info.translate.x = a;
      this.ⵠⲆⲆΔⵠᐃⵠ.info.translate.y = 36;
      this.ⵠⵠⵠⲆᐃΔⲆ.info.translate.x = a;
      this.ⵠⵠⵠⲆᐃΔⲆ.info.translate.y = 36;
      this.ⲆΔⲆΔⲆΔΔ.info.translate.x = a;
      this.ⲆΔⲆΔⲆΔΔ.info.translate.y = 36;
      this.ⵠⵠⲆᐃΔⵠⲆ.info.translate.x = a;
      this.ⵠⵠⲆᐃΔⵠⲆ.info.translate.y = 36;
    };
    this.ⵠⲆⵠΔⲆⵠΔ = function () {
      var a = 12 + Math.floor((10 + this.ⲆⵠΔᐃⵠⲆΔ.info.ⵠⵠ[0].width) * Math.floor((3 + zx.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ.length) / 4) + 35);
      this.ⲆⵠΔᐃⵠⲆΔ.info.translate.x = a;
      this.ⲆⵠΔᐃⵠⲆΔ.info.translate.y = 36;
      a += 83;
      this.ⲆΔᐃⲆΔⵠⵠ.info.translate.x = a;
      this.ⲆΔᐃⲆΔⵠⵠ.info.translate.y = 36;
    };
    this.ⲆⲆΔⵠⵠⵠⵠ = function () {
      var a = Math.floor((10 + this.ᐃΔΔᐃⲆⲆⵠ.info.ⵠⵠ[0].width) * Math.floor((3 + zx.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ.length) / 4) + 35);
      this.ᐃΔΔᐃⲆⲆⵠ.info.translate.x = a;
      this.ᐃΔΔᐃⲆⲆⵠ.info.translate.y = 22;
    };
    this.ⵠⵠΔΔⲆΔⵠ = function () {
      var a = zx.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ;
      if (a.length > 0) {
        var b = Math.floor((uo - zx.ᐃΔⲆᐃ.max * (a[0].info.width + 5)) / 2);
      }
      for (var c = 0; a.length > c; c++) {
        a[c].info.translate.x = b + (a[c].info.width + 5) * c;
        a[c].info.translate.y = xp - a[c].info.width - 10;
        this.ΔⵠᐃⲆⵠ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
        this.ΔⵠᐃⲆⵠ[a[c].id].info.translate.y = a[c].info.translate.y - this.ΔⵠᐃⲆⵠ[a[c].id].info.ⵠⵠ[0].height - 6;
      }
    };
    var h;
    var n = 0;
    function o() {
      f.ΔⵠΔ();
      if (++n == 30) {
        f.ΔⵠᐃΔⲆⵠⵠ();
        f.ΔⵠΔ();
        return;
      }
      _a.setTimeout(o, 33);
    }
    this.ⲆⵠᐃⵠΔ = function (a) {
      if (zx.ᐃᐃⲆΔⲆ.open) {
        zx.ᐃᐃⲆΔⲆ.ⲆⵠᐃⵠΔ();
      }
      if (zx.ᐃⲆᐃΔᐃ.open) {
        zx.ᐃⲆᐃΔᐃ.ⲆⵠᐃⵠΔ();
      }
      document.getElementById("team_box").style.display = "none";
      f.ⵠᐃⲆⲆᐃ.style.display = "none";
      f.ⵠᐃⲆⲆᐃ.open = false;
      f.sign.style.display = "none";
      f.sign.open = false;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      f.ΔΔⲆⲆ.open = hr;
      document.getElementById("option_in_game").style.display = "none";
      f.options.open = jj;
      document.getElementById("sure_delete").style.display = "none";
      f.ⲆΔᐃᐃ.open = Il;
      document.getElementById("cancel_sure_delete").style.display = "none";
      f.ⲆⲆⵠΔⲆ.open = Wl;
      document.getElementById("chronoquest").style.display = "none";
      f.ᐃΔΔᐃ.open = false;
      h = a;
      f.ᐃⵠⵠⲆᐃᐃᐃ();
      f.ᐃⵠ.style.cursor = f.ⲆⵠⵠⲆᐃⵠⲆ;
      Dx.ⲆⵠᐃⵠΔ();
      p = -1;
      q();
      Jx();
    };
    var p = -1;
    function q() {
      f.ΔⵠΔ();
      if (++p == 30) {
        f.stop();
        h();
        return;
      }
      _a.setTimeout(q, 33);
    }
    this.ⵠΔⲆΔΔ = false;
    this.stop = function () {
      this.ⵠΔⲆΔΔ = false;
    };
    this.ΔᐃᐃⵠⲆ = function () {
      Bx.ⵠᐃⵠΔⲆΔΔⲆⲆ();
      f.ⵠΔⲆΔΔ = un;
      p = -1;
      n = 0;
      o();
    };
    this.ΔⵠΔ = function () {
      this.ΔⵠⲆᐃ.translate.x = uo - this.ΔⵠⲆᐃ.ⵠⵠ.width - 10;
      this.ΔⵠⲆᐃ.translate.y = 5;
      yx.ᐃᐃⵠΔⲆ.translate.x = this.ΔⵠⲆᐃ.translate.x - ᐃᐃ[725][0].width - 85;
      yx.ᐃᐃⵠΔⲆ.translate.y = 10;
      this.ΔΔⲆⲆ.button.info.translate.x = this.ΔⵠⲆᐃ.translate.x - ᐃᐃ[708][0].width - 10;
      this.ΔΔⲆⲆ.button.info.translate.y = 10;
      this.ᐃΔΔᐃ.button.info.translate.x = this.ΔⵠⲆᐃ.translate.x - ᐃᐃ[755][0].width - 20;
      this.ᐃΔΔᐃ.button.info.translate.y = this.ΔΔⲆⲆ.button.info.translate.y + ᐃᐃ[708][0].height + 5;
      this.options.button.info.translate.x = this.ΔⵠⲆᐃ.translate.x - ᐃᐃ[727][0].width - 20;
      this.options.button.info.translate.y = this.ᐃΔΔᐃ.button.info.translate.y + ᐃᐃ[727][0].height + 18;
      this.ⵠⲆⵠᐃ.ⵠΔⵠΔᐃⲆⵠ.info.translate.x = this.ΔⵠⲆᐃ.translate.x - ᐃᐃ[727][0].width - 20;
      this.ⵠⲆⵠᐃ.ⵠΔⵠΔᐃⲆⵠ.info.translate.y = this.options.button.info.translate.y + ᐃᐃ[783][0].height;
      this.ⵠⲆⵠᐃ.ᐃᐃᐃᐃⲆᐃⵠ.info.translate.x = this.ΔⵠⲆᐃ.translate.x - ᐃᐃ[727][0].width - 20;
      this.ⵠⲆⵠᐃ.ᐃᐃᐃᐃⲆᐃⵠ.info.translate.y = this.options.button.info.translate.y + ᐃᐃ[783][0].height;
      this.ⵠᐃⲆⲆᐃ.button.info.translate.x = this.ΔⵠⲆᐃ.translate.x - ᐃᐃ[795][0].width - 20;
      this.ⵠᐃⲆⲆᐃ.button.info.translate.y = this.ⵠⲆⵠᐃ.ⵠΔⵠΔᐃⲆⵠ.info.translate.y + ᐃᐃ[795][0].height;
      zx.ⵠⵠⵠⲆᐃ.translate.x = this.ΔⵠⲆᐃ.translate.x - 63 - 85;
      zx.ⵠⵠⵠⲆᐃ.translate.y = 100;
      zx.ⲆᐃⵠⵠΔ.translate.x = this.ΔⵠⲆᐃ.translate.x - ᐃᐃ[517].width - 85;
      zx.ⲆᐃⵠⵠΔ.translate.y = zx.ⵠⵠⵠⲆᐃ.translate.y + 10 + ᐃᐃ[546].height;
      this.ᐃΔᐃΔΔ.translate.y = xp - 3 - 193;
      this.ᐃΔᐃΔΔ.translate.x = uo - 3 - 193;
      this.ⵠΔⲆΔ.translate.x = 5;
      this.ⵠΔⲆΔ.translate.y = xp - this.ⵠΔⲆΔ.ⵠⵠ.height - 5;
      this.ⲆⵠΔⲆΔ.button.info.translate.x = aq - 91 / 2;
      this.ⲆⵠΔⲆΔ.button.info.translate.y = 50;
      this.ΔΔⵠᐃⵠⵠΔ();
      this.ⵠⵠΔΔⲆΔⵠ();
      this.ⲆΔⵠᐃᐃΔⲆ();
      this.ⲆⲆΔⵠⵠⵠⵠ();
      this.ⵠⲆⵠΔⲆⵠΔ();
      this.ᐃⲆⵠⵠᐃΔⵠ();
      this.ΔⲆΔΔΔⵠΔ();
      this.ΔΔΔΔⵠⲆⵠΔⵠ();
      this.sign.ᐃⲆⵠΔᐃⵠⲆ();
      Xp();
      zx.ᐃᐃⲆΔⲆ.ΔⵠΔ();
      zx.ᐃⲆᐃΔᐃ.ΔⵠΔ();
      this.ᐃⵠΔΔⵠⲆⵠⵠⲆ.ΔⵠΔ();
      this.ΔΔⲆⲆ.ⲆⵠΔⲆᐃΔᐃ.ΔⵠΔ();
      this.ΔΔⲆⲆ.list.ΔⵠΔ();
      this.ⲆΔᐃᐃ.ΔⵠΔ();
      this.ⲆⲆⵠΔⲆ.ΔⵠΔ();
      this.ᐃΔΔᐃ.ΔⵠΔ();
      this.ⲆⵠΔⲆΔ.ΔⵠΔ();
      this.options.ΔⵠΔ();
      this.ⵠᐃⲆⲆᐃ.ΔⵠΔ();
      this.sign.ΔⵠΔ();
      var a = 0;
      if (n != 30) {
        a = 1500 / (n + 1) - 50;
      }
      if (p != -1) {
        a = -(1500 / (30 - p + 1) - 48);
      }
      this.ⲆⵠΔⲆΔ.button.info.translate.y -= a > 0 ? a : -a;
      this.ΔⵠⲆᐃ.translate.y -= a > 0 ? a : -a;
      zx.ⵠⵠⵠⲆᐃ.translate.y -= a > 0 ? a : -a;
      zx.ⲆᐃⵠⵠΔ.translate.y -= a > 0 ? a : -a;
      this.ΔΔⲆⲆ.button.info.translate.y -= a > 0 ? a : -a;
      this.ᐃΔΔᐃ.button.info.translate.y -= a > 0 ? a : -a;
      this.options.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠᐃⲆⲆᐃ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠⲆⵠᐃ.ⵠΔⵠΔᐃⲆⵠ.info.translate.y -= a > 0 ? a : -a;
      this.ⵠⲆⵠᐃ.ᐃᐃᐃᐃⲆᐃⵠ.info.translate.y -= a > 0 ? a : -a;
      yx.ᐃᐃⵠΔⲆ.translate.y -= a > 0 ? a : -a;
      this.ⵠΔⲆΔ.translate.y -= a < 0 ? a : -a;
      this.ᐃΔᐃΔΔ.translate.y -= a < 0 ? a : -a;
    };
    this.ΔΔΔᐃᐃⵠᐃΔⲆ = function () {
      if (!zx.ⲆⲆⵠⲆⲆ.enabled && !!this.ⵠⲆⵠⵠΔⵠΔ && !zx.ΔⵠⵠⵠΔ) {
        Yu();
      }
      dv();
      (function () {
        var a = yx.Ⲇᐃᐃ[0];
        if (yx.mode === 0 || yx.mode === 7 || yx.mode === 2 || yx.mode === 4 || yx.mode === 5 || yx.mode === 6 || yx.mode === 3) {
          for (var b = 0; a.length > b; b++) {
            a[b].ᐃΔⲆⵠⲆΔⲆ();
          }
        } else if (yx.mode === 1) {
          for (b = 0; a.length > b; b++) {
            if (zx.ΔᐃⲆΔᐃⲆᐃ || zx.ⲆᐃⵠⵠΔ.enabled || a[b].ᐃΔΔⵠ.ⵠⲆⵠΔⵠ !== "spectator") {
              a[b].ᐃΔⲆⵠⲆΔⲆ();
            }
          }
        }
      })();
      mr.ᐃⲆⵠᐃⲆⲆⲆ();
      if (this.ⵠⲆⵠⵠΔⵠΔ) {
        Yp();
        if (this.ΔᐃΔⲆΔⵠⲆ === 1) {
          this.ΔΔⲆⲆ.button.ᐃⵠΔᐃ(c);
        }
        if (yx.mode !== 2 && yx.mode !== 4 && yx.mode !== 5 && this.ᐃⵠΔⲆⲆⵠΔ === 1) {
          this.ᐃΔΔᐃ.button.ᐃⵠΔᐃ(c);
        }
        this.options.button.ᐃⵠΔᐃ(c);
        if (this.ⲆΔΔᐃⲆᐃᐃ === 1) {
          this.ⵠᐃⲆⲆᐃ.button.ᐃⵠΔᐃ(c);
        }
        if (Dx.ΔᐃᐃⵠⲆ) {
          this.ⵠⲆⵠᐃ.ⵠΔⵠΔᐃⲆⵠ.ᐃⵠΔᐃ(c);
        } else {
          this.ⵠⲆⵠᐃ.ᐃᐃᐃᐃⲆᐃⵠ.ᐃⵠΔᐃ(c);
        }
        _u();
        Su();
        this.ⵠΔⲆΔ.ᐃⵠΔᐃ();
        av();
        bv();
        cv();
        Tu();
        $u();
        Lp();
        Vp();
        (function () {
          if (!zx.ⲆᐃⲆΔ.open && !zx.ΔⲆΔⲆᐃ.open && !zx.ΔΔⲆᐃ.open && !zx.ⲆΔᐃⲆ.open && !zx.ᐃⵠΔΔ.open) {
            zx.ⵠⲆⵠᐃᐃ.open = Pn;
            var a = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
            var b = 100;
            if (a) {
              for (var c = 0; yx.Ⲇᐃᐃ[35].length > c; c++) {
                var d = yx.Ⲇᐃᐃ[35][c];
                var e = ΔⲆᐃ.ⲆⵠⲆⲆ(d, a);
                if (b > e) {
                  b = e;
                  zx.ⵠⲆⵠᐃᐃ.open = true;
                  zx.ⵠⲆⵠᐃᐃ.ⲆⲆΔᐃ = d.ⲆⲆΔᐃ;
                  zx.ⵠⲆⵠᐃᐃ.ΔⲆⵠⲆⲆ = d.id;
                }
              }
            }
          }
        })();
        Gu();
        Gp();
        Kp();
        Op();
        Xp();
        Np();
      }
      if (zx.ⲆⲆⵠⲆⲆ.enabled) {
        Up();
      }
      $p();
      if (this.ⵠⲆⵠⵠΔⵠΔ && this.ΔΔⵠⲆᐃΔⲆ === 1) {
        Ju();
      }
      zx.ⵠΔΔⲆΔⵠᐃ.ᐃⵠΔᐃ();
      zx.alert.ᐃⵠΔᐃ("#FFF", "#000");
      if (this.ⵠⲆⵠⵠΔⵠΔ) {
        zx.ⲆⲆⵠⲆⲆ.ᐃⵠΔᐃ();
        zx.ⲆⵠΔⲆΔ.ᐃⵠΔᐃ();
        zx.ᐃΔⲆᐃ.ΔᐃΔᐃⲆⵠᐃ.ᐃⵠΔᐃ(Fx.ΔⵠΔΔ.x, Fx.ΔⵠΔΔ.y);
      }
      Hp();
    };
    this.ΔⵠᐃⲆΔⵠⵠⵠΔ = function () {
      zx.ⲆⵠΔ.ΔⵠΔ();
      zx.ⵠΔⲆΔ.ΔⵠΔ();
      if (!zx.reconnect.enabled && zx.ᐃΔⵠⵠᐃ) {
        zx.control.ΔⵠΔ();
        zx.ⵠⵠⵠⲆᐃ.ΔⵠΔ();
      }
      yx.ΔⵠΔ();
      this.ᐃΔΔᐃ.ⲆΔⲆᐃⲆⲆᐃᐃⵠ();
    };
    this.ⲆⲆΔⲆⵠΔⲆΔⵠ = function () {
      of();
    };
    this.ΔⲆⵠᐃⲆⵠᐃⵠᐃ = function () {
      Bx.ᐃᐃᐃⵠᐃⵠᐃⵠᐃ();
      Bx.ⵠΔⲆⲆⵠΔⵠᐃᐃ();
      Bx.ᐃᐃΔᐃᐃⲆΔⲆⲆ();
      Bx.ⲆᐃⲆᐃᐃᐃⵠΔᐃ();
    };
    this.ᐃⵠΔᐃ = function () {
      if (!zx.reconnect.enabled && zx.ᐃΔⵠⵠᐃ) {
        this.ΔⲆⵠᐃⲆⵠᐃⵠᐃ();
      }
      Dx.ⲆⲆⵠΔⲆᐃΔⵠⵠ();
      this.ΔⵠᐃⲆΔⵠⵠⵠΔ();
      if (xx.ⵠⵠΔᐃⵠΔⵠ !== 1) {
        this.ⲆⲆΔⲆⵠΔⲆΔⵠ();
        this.ΔΔΔᐃᐃⵠᐃΔⲆ();
      } else {
        var a = Δᐃ.ⵠᐃΔⲆᐃΔⵠ;
        qp(c, a, aq - a.width / 4, bq - a.height / 4, a.width / 2, a.height / 2);
      }
    };
    this.ⲆᐃᐃⲆΔⵠⵠ = function (a) {
      if (zx.ᐃᐃⲆΔⲆ.open && a.keyCode === 27) {
        zx.ᐃᐃⲆΔⲆ.ⲆⵠᐃⵠΔ();
      } else if (zx.ᐃⲆᐃΔᐃ.open && a.keyCode === 27) {
        zx.ᐃⲆᐃΔᐃ.ⲆⵠᐃⵠΔ();
      } else if (zx.ᐃᐃⲆΔⲆ.open || zx.ᐃⲆᐃΔᐃ.open || a.keyCode != 79 || p != -1) {
        if (a.keyCode == 13 && p == -1) {
          if (zx.ᐃⲆᐃΔᐃ.open) {
            zx.ᐃⲆᐃΔᐃ.ᐃⵠⲆΔⵠᐃΔ();
          } else {
            zx.ᐃᐃⲆΔⲆ.ΔᐃᐃⵠⲆ();
          }
        } else if (!zx.ᐃᐃⲆΔⲆ.open && !zx.ᐃⲆᐃΔᐃ.open) {
          if (a.keyCode === 82) {
            zx.ⵠⵠⵠⲆᐃ.ⵠⵠⵠᐃᐃⵠᐃ();
          } else if (a.keyCode !== 80 || yx.mode !== 1 || zx.ΔᐃⲆΔᐃⲆᐃ) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (zx.ⵠΔᐃΔ.id < 0) {
                var b = a.keyCode - 49;
                var c = zx.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ[b];
                if (c) {
                  Bx.ΔΔⲆⲆⵠ(c.id, b);
                }
              }
            } else if (a.keyCode == 89) {
              zx.ⲆΔⵠΔⲆᐃⲆ = !zx.ⲆΔⵠΔⲆᐃⲆ;
            } else if (a.keyCode == 71) {
              zx.ⵠΔᐃΔ.ᐃᐃΔΔᐃΔⵠⲆᐃ();
            }
          } else {
            zx.ⲆᐃⵠⵠΔ.ⵠⵠⵠᐃᐃⵠᐃ();
          }
        }
      } else {
        zx.ᐃⲆᐃΔᐃ.ΔΔⲆⵠᐃⲆᐃⲆᐃ();
      }
      Ex.up(a);
    };
    this.ΔΔⲆⵠⲆᐃᐃ = function (a) {
      Ex.down(a);
      if (a.keyCode == 8 && !zx.ᐃᐃⲆΔⲆ.open && !zx.ᐃⲆᐃΔᐃ.open) {
        a.preventDefault();
      }
    };
    this.ⵠΔⲆⲆᐃⵠⲆ = function (b) {
      Fx.ΔⵠΔΔ = Pf(f.ᐃⵠ, b);
      var c = Pn;
      if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0) {
        f.ᐃΔᐃΔΔ.focus(Fx.ΔⵠΔΔ);
      }
      var d = zx.ⲆᐃⲆΔ;
      if (zx.ⵠΔᐃΔ.id < 0 && d.id >= 0 && (!zx.ⲆᐃⲆΔ.lock || zx.ⲆᐃⲆΔ.ⲆⲆΔᐃ === zx.id)) {
        c |= f.ⵠⲆᐃ[zx.ⲆᐃⲆΔ.id].ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
      }
      var e = zx.ΔΔⲆᐃ;
      if (e.open && e.ΔⲆⵠΔΔ > 0) {
        c |= f.ⲆΔᐃⲆΔⵠⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
      }
      var j = zx.ᐃⵠΔΔ;
      if (j.open && j.ⵠⵠⲆⲆⵠⲆΔ > 0) {
        c |= f.ᐃᐃᐃᐃⵠᐃⲆ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
        c |= f.ⵠⲆⲆΔⵠᐃⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
        c |= f.ⵠⵠⵠⲆᐃΔⲆ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
        c |= f.ⲆΔⲆΔⲆΔΔ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
        c |= f.ⵠⵠⲆᐃΔⵠⲆ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
      }
      var a = zx.ⲆΔᐃⲆ;
      if (a.open && a.ⲆᐃⵠΔⵠΔⲆ > 0) {
        c |= f.ⵠⲆⲆᐃⲆⵠᐃ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
      }
      if (zx.sign.open) {
        c |= f.sign.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
      }
      if (!zx.ⲆᐃⲆΔ.lock) {
        if (zx.ⲆᐃⲆΔ.ᐃΔΔⵠⲆᐃᐃ) {
          c |= f.ⵠⲆᐃⵠⵠⲆⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
        }
      }
      if (zx.ⲆᐃⲆΔ.ⲆⵠⲆⲆⵠΔᐃ) {
        c |= f.ᐃⵠΔⵠⲆΔᐃ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
      }
      if (zx.ⵠΔᐃΔ.id < 0 && !f.ΔΔⲆⲆ.open && !f.ⲆΔᐃᐃ.open && !f.ⲆⲆⵠΔⲆ.open && !f.ᐃΔΔᐃ.open && !f.options.open && !f.ⵠᐃⲆⲆᐃ.open) {
        for (var k = zx.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ, m = 0; k.length > m; m++) {
          var n = k[m].ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
          c |= n;
          if (n) {
            zx.ᐃΔⲆᐃ.ΔᐃΔᐃⲆⵠᐃ.start(m, Fx.ΔⵠΔΔ);
          }
          if (d.open && (d.id < 0 || k[m].id == d.id) || zx.ΔⲆΔⲆᐃ.open && k[m].id === 109 || zx.ⵠⲆⵠᐃᐃ.open && k[m].id === 180 || zx.ⲆΔᐃⲆ.open && (k[m].id === 109 || k[m].id === 131) || zx.ΔΔⲆᐃ.open && k[m].id === 134 || zx.ᐃⵠΔΔ.open && k[m].id === 109) {
            c |= f.ΔⵠᐃⲆⵠ[k[m].id].ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
          }
        }
      }
      if (zx.ⵠᐃΔⵠⵠ.open) {
        c |= f.ⵠᐃΔⵠⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
      }
      if (f.ΔᐃⲆⲆᐃ != -1) {
        if (c |= f.ΔᐃᐃⵠΔ[f.ΔᐃⲆⲆᐃ].button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf)) {
          var o = true;
        }
      } else {
        o = false;
      }
      if (zx.ⵠΔᐃΔ.id < 0 && zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !o && !f.ΔΔⲆⲆ.open && !f.ⲆΔᐃᐃ.open && !f.options.open && !f.ⲆⲆⵠΔⲆ.open && !f.ⵠᐃⲆⲆᐃ.open && !zx.ΔⵠⵠⵠΔ) {
        k = zx.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ;
        m = 0;
        for (; m < k.length; m++) {
          c |= k[m].ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
        }
      }
      if (zx.ⵠΔᐃΔ.id < 0 && zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !!zx.ⲆⵠΔⲆΔ.open && !f.ΔΔⲆⲆ.open && !f.ⲆΔᐃᐃ.open && !f.options.open && !f.ⲆⲆⵠΔⲆ.open && !f.ᐃΔΔᐃ.open && !f.ⵠᐃⲆⲆᐃ.open) {
        c |= f.ⲆⵠΔⲆΔ.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
      }
      if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !f.ⲆΔᐃᐃ.open && !f.options.open && !f.ⲆⲆⵠΔⲆ.open && !f.ᐃΔΔᐃ.open && !f.ⵠᐃⲆⲆᐃ.open) {
        c |= f.ΔΔⲆⲆ.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
      }
      if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !f.ΔΔⲆⲆ.open && !f.ⲆΔᐃᐃ.open && !f.ⲆⲆⵠΔⲆ.open && !f.ᐃΔΔᐃ.open && !f.ⵠᐃⲆⲆᐃ.open) {
        c |= f.options.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
      }
      if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !f.ΔΔⲆⲆ.open && !f.ⲆΔᐃᐃ.open && !f.ⲆⲆⵠΔⲆ.open && !f.ᐃΔΔᐃ.open && !f.options.open) {
        c |= f.ⵠᐃⲆⲆᐃ.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
      }
      if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !f.ΔΔⲆⲆ.open && !f.ⲆΔᐃᐃ.open && !f.ⲆⲆⵠΔⲆ.open && !f.ᐃΔΔᐃ.open && !f.options.open && !f.ⵠᐃⲆⲆᐃ.open) {
        if (Dx.ΔᐃᐃⵠⲆ) {
          c |= f.ⵠⲆⵠᐃ.ⵠΔⵠΔᐃⲆⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
        } else {
          c |= f.ⵠⲆⵠᐃ.ᐃᐃᐃᐃⲆᐃⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
        }
      }
      if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !f.ΔΔⲆⲆ.open && !f.ⵠᐃⲆⲆᐃ.open && !f.ⲆΔᐃᐃ.open && !f.options.open && !f.ⲆⲆⵠΔⲆ.open && yx.mode !== 2 && yx.mode !== 4 && yx.mode !== 5) {
        c |= f.ᐃΔΔᐃ.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
      }
      if (!c && !f.ΔΔⲆⲆ.open && !f.ⲆΔᐃᐃ.open && !f.options.open && !f.ⲆⲆⵠΔⲆ.open && !f.ᐃΔΔᐃ.open && !f.ⵠᐃⲆⲆᐃ.open && !f.sign.open) {
        if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ >= 0) {
          Bx.ⲆΔⲆᐃᐃᐃⲆⲆⵠ();
        } else if (!o) {
          Fx.down();
        }
      }
    };
    this.ⵠⵠΔᐃΔⲆⲆ = function (b) {
      Fx.ΔⵠΔΔ = Pf(f.ᐃⵠ, b);
      Fx.up();
      if (!zx.ᐃΔⲆᐃ.ΔᐃΔᐃⲆⵠᐃ.release()) {
        var c = zx.ⲆᐃⲆΔ;
        var d = zx.ΔⲆΔⲆᐃ;
        var e = zx.ⵠⲆⵠᐃᐃ;
        var i = zx.ΔΔⲆᐃ;
        var j = zx.ᐃⵠΔΔ;
        var k = zx.ⲆΔᐃⲆ;
        if (zx.control.attack) {
          zx.control.attack = 0;
          Bx.ΔΔⵠⲆᐃⵠⵠΔⵠ();
        }
        if (f.ΔᐃⲆⲆᐃ != -1) {
          var m = f.ΔᐃᐃⵠΔ[f.ΔᐃⲆⲆᐃ].button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf);
          var n = document.getElementById("team_box").style;
          if (m && n.display == "inline-block") {
            n.display = "none";
            return;
          }
          if (m) {
            f.ΔᐃᐃⵠΔ[f.ΔᐃⲆⲆᐃ].action();
          }
        }
        if (zx.ⵠΔᐃΔ.id < 0 && c.id >= 0 && !f.ⲆΔᐃᐃ.open) {
          if (!zx.ⲆᐃⲆΔ.lock || zx.ⲆᐃⲆΔ.ⲆⲆΔᐃ === zx.id) {
            if (m = f.ⵠⲆᐃ[zx.ⲆᐃⲆΔ.id].ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
              Bx.ⵠⲆⲆⵠⲆᐃᐃⲆⲆ(c);
            }
          }
        }
        if ((i = zx.ΔΔⲆᐃ).open && i.ΔⲆⵠΔΔ > 0 && !f.ⲆΔᐃᐃ.open) {
          if (m = f.ⲆΔᐃⲆΔⵠⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
            Bx.ᐃᐃⵠⲆⵠⲆⵠⵠⲆ(i);
          }
        }
        if ((j = zx.ᐃⵠΔΔ).open && j.ⵠⵠⲆⲆⵠⲆΔ > 0 && !f.ⲆΔᐃᐃ.open) {
          switch (j.type) {
            case 24:
              if (m = f.ᐃᐃᐃᐃⵠᐃⲆ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
                Bx.ᐃⲆᐃⵠⵠⲆⲆ(j);
              }
              break;
            case 25:
              if (m = f.ⵠⲆⲆΔⵠᐃⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
                Bx.ᐃⲆᐃⵠⵠⲆⲆ(j);
              }
              break;
            case 26:
              if (m = f.ⵠⵠⵠⲆᐃΔⲆ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
                Bx.ᐃⲆᐃⵠⵠⲆⲆ(j);
              }
              break;
            case 27:
              if (m = f.ⲆΔⲆΔⲆΔΔ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
                Bx.ᐃⲆᐃⵠⵠⲆⲆ(j);
              }
              break;
            case 28:
              if (m = f.ⵠⵠⲆᐃΔⵠⲆ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
                Bx.ᐃⲆᐃⵠⵠⲆⲆ(j);
              }
          }
        }
        if ((k = zx.ⲆΔᐃⲆ).open && k.ⲆᐃⵠΔⵠΔⲆ > 0 && !f.ⲆΔᐃᐃ.open) {
          if (m = f.ⵠⲆⲆᐃⲆⵠᐃ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
            Bx.ⵠΔⵠⲆΔⵠΔⵠⲆ(k);
          }
        }
        if (zx.sign.open && !f.ⲆΔᐃᐃ.open) {
          if (m = f.sign.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
            f.sign.select();
          }
        }
        if (!zx.ⲆᐃⲆΔ.lock && !f.ⲆΔᐃᐃ.open) {
          if (zx.ⲆᐃⲆΔ.ᐃΔΔⵠⲆᐃᐃ && (m = f.ⵠⲆᐃⵠⵠⲆⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf))) {
            Bx.ΔΔⲆᐃⵠΔΔⵠⲆ(c);
          }
        }
        if (zx.ⲆᐃⲆΔ.ⲆⵠⲆⲆⵠΔᐃ && !f.ⲆΔᐃᐃ.open && (m = f.ᐃⵠΔⵠⲆΔᐃ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf))) {
          Bx.ΔⵠᐃᐃΔⵠΔΔⵠ(c);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (zx.ⵠᐃΔⵠⵠ.open) {
          if (m = f.ⵠᐃΔⵠⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
            Bx.ⵠᐃΔⵠⵠ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (zx.ⵠΔᐃΔ.id < 0 && !zx.ⲆⲆⵠⲆⲆ.enabled && !f.ⲆΔᐃᐃ.open) {
          for (var g = zx.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ, o = 0; g.length > o; o++) {
            if (m = g[o].ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
              if (b.which != 1 || b.shiftKey) {
                if ((b.which == 1 && b.shiftKey || b.which == 3) && zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0) {
                  f.ⲆΔᐃᐃ.ΔΔⲆⲆᐃᐃᐃ(g[o].id);
                }
              } else {
                Bx.ΔΔⲆⲆⵠ(g[o].id, o);
              }
            } else if (c.open && (c.id < 0 || g[o].id === c.id)) {
              if ((m = f.ΔⵠᐃⲆⵠ[g[o].id].ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) && zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0) {
                Bx.ᐃᐃᐃⵠⵠⲆⲆΔⲆ(c, g[o].id, b.shiftKey ? 10 : 1);
              }
            } else if (e.open && g[o].id === 180) {
              if ((m = f.ΔⵠᐃⲆⵠ[g[o].id].ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) && zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0) {
                Bx.ᐃⵠⲆᐃΔⵠᐃᐃΔ(e);
              }
            } else if (d.open && g[o].id === 109) {
              if ((m = f.ΔⵠᐃⲆⵠ[g[o].id].ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) && zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0) {
                Bx.ᐃΔⵠⲆᐃⲆⵠΔⵠ(d, b.shiftKey ? 10 : 1);
              }
            } else if (i.open && g[o].id === 134) {
              if ((m = f.ΔⵠᐃⲆⵠ[g[o].id].ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) && zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0) {
                Bx.ⵠⲆⵠΔΔⲆᐃΔⲆ(i, b.shiftKey ? 10 : 1);
              }
            } else if (j.open && g[o].id === 109) {
              if ((m = f.ΔⵠᐃⲆⵠ[g[o].id].ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) && zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0) {
                Bx.ΔᐃᐃΔᐃΔⲆΔΔ(j, b.shiftKey ? 10 : 1);
              }
            } else if (k.open && (g[o].id === 109 || g[o].id === 131)) {
              if ((m = f.ΔⵠᐃⲆⵠ[g[o].id].ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) && zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0) {
                if (g[o].id === 109) {
                  Bx.ⲆΔΔⲆΔΔΔ(k, b.shiftKey ? 10 : 1, 0);
                } else {
                  Bx.ⲆΔΔⲆΔΔΔ(k, 0, b.shiftKey ? 10 : 1);
                }
              }
            }
          }
        }
        if (zx.ⵠΔᐃΔ.id < 0 && zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !zx.ⲆⲆⵠⲆⲆ.enabled && !f.ⲆΔᐃᐃ.open && !zx.ΔⵠⵠⵠΔ) {
          g = zx.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ;
          o = 0;
          for (; g.length > o; o++) {
            if (m = g[o].ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
              ᐃᐃⵠⲆᐃ = Bx.ΔΔᐃⲆⲆΔᐃᐃΔ(g[o].id);
              if (ᐃᐃⵠⲆᐃ && ga) {
                ga("send", "event", "Game", "craft", Xr[ot[g[o].id].ᐃⲆⲆΔ].name);
              }
            }
          }
        }
        if (zx.ⵠΔᐃΔ.id < 0 && zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && zx.ⲆⵠΔⲆΔ.open && !f.ⵠᐃⲆⲆᐃ.open && !f.ΔΔⲆⲆ.open && !f.ⲆΔᐃᐃ.open && !f.options.open && !f.ⲆⲆⵠΔⲆ.open && !f.ᐃΔΔᐃ.open) {
          if (m = f.ⲆⵠΔⲆΔ.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf)) {
            Cx.ⲆⵠΔⲆΔ.select();
          }
        }
        if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !f.ΔΔⲆⲆ.open && !f.ⲆΔᐃᐃ.open && !f.ⵠᐃⲆⲆᐃ.open && !f.ⲆⲆⵠΔⲆ.open && !f.ᐃΔΔᐃ.open && !f.options.open) {
          if (Dx.ΔᐃᐃⵠⲆ) {
            if (m = f.ⵠⲆⵠᐃ.ⵠΔⵠΔᐃⲆⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
              Dx.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (m = f.ⵠⲆⵠᐃ.ᐃᐃᐃᐃⲆᐃⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
            Dx.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !f.ΔΔⲆⲆ.open && !f.ⲆΔᐃᐃ.open && !f.ⲆⲆⵠΔⲆ.open && !f.ᐃΔΔᐃ.open && !f.ⵠᐃⲆⲆᐃ.open) {
          if (m = f.options.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
            f.options.ΔᐃⵠᐃⲆΔⲆⲆⵠ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !f.ΔΔⲆⲆ.open && !f.ⲆΔᐃᐃ.open && !f.ⲆⲆⵠΔⲆ.open && !f.ᐃΔΔᐃ.open && !f.options.open && f.ⲆΔΔᐃⲆᐃᐃ === 1) {
          if (m = f.ⵠᐃⲆⲆᐃ.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
            f.ⵠᐃⲆⲆᐃ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !f.ⲆΔᐃᐃ.open && !f.ⵠᐃⲆⲆᐃ.open && !f.options.open && !f.ⲆⲆⵠΔⲆ.open && !f.ᐃΔΔᐃ.open && f.ΔᐃΔⲆΔⵠⲆ === 1) {
          if (m = f.ΔΔⲆⲆ.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
            f.ΔΔⲆⲆ.ᐃΔⲆΔΔᐃᐃⲆᐃ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !f.ΔΔⲆⲆ.open && !f.ⲆΔᐃᐃ.open && !f.options.open && !f.ⲆⲆⵠΔⲆ.open && !f.ⵠᐃⲆⲆᐃ.open && yx.mode !== 2 && yx.mode !== 4 && yx.mode !== 5 && f.ᐃⵠΔⲆⲆⵠΔ === 1) {
          if (m = f.ᐃΔΔᐃ.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
            f.ᐃΔΔᐃ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (zx.ⵠΔᐃΔ.ᐃΔΔᐃᐃ && b.which == 3) {
          f.ⲆⲆⵠΔⲆ.ΔΔⲆⲆᐃᐃᐃ();
        }
      }
    };
    this.ⵠΔⲆΔⲆⵠΔ = Iq;
    this.ᐃⲆᐃⲆΔⵠᐃ = function (c) {
      Fx.ΔⵠΔΔ = Pf(f.ᐃⵠ, c);
      var d = false;
      Cx.ΔⲆⵠΔⵠ.display = 0;
      zx.ᐃΔⲆᐃ.ΔᐃΔᐃⲆⵠᐃ.ⵠⲆΔΔⲆ(Fx.ΔⵠΔΔ);
      if (f.ΔᐃⲆⲆᐃ != -1) {
        d |= f.ΔᐃᐃⵠΔ[f.ΔᐃⲆⲆᐃ].button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
      }
      var e = zx.ΔΔⲆᐃ;
      if (e.open && e.ΔⲆⵠΔΔ > 0) {
        d |= f.ⲆΔᐃⲆΔⵠⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
      }
      var i = zx.ᐃⵠΔΔ;
      if (i.open && i.ⵠⵠⲆⲆⵠⲆΔ > 0) {
        d |= f.ᐃᐃᐃᐃⵠᐃⲆ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
        d |= f.ⵠⲆⲆΔⵠᐃⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
        d |= f.ⵠⵠⵠⲆᐃΔⲆ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
        d |= f.ⲆΔⲆΔⲆΔΔ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
        d |= f.ⵠⵠⲆᐃΔⵠⲆ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
      }
      var a = zx.ⲆΔᐃⲆ;
      if (a.open && a.ⲆᐃⵠΔⵠΔⲆ > 0) {
        d |= f.ⵠⲆⲆᐃⲆⵠᐃ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
      }
      if (zx.sign.open) {
        d |= f.sign.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
      }
      var j = zx.ⲆᐃⲆΔ;
      if (zx.ⵠΔᐃΔ.id < 0 && j.id >= 0 && !zx.ⲆⲆⵠⲆⲆ.enabled) {
        if (!zx.ⲆᐃⲆΔ.lock || zx.ⲆᐃⲆΔ.ⲆⲆΔᐃ === zx.id) {
          d |= f.ⵠⲆᐃ[j.id].ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
        }
      }
      if (zx.ⵠᐃΔⵠⵠ.open) {
        d |= f.ⵠᐃΔⵠⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
      }
      if (!zx.ⲆᐃⲆΔ.lock && !zx.ⲆⲆⵠⲆⲆ.enabled) {
        if (zx.ⲆᐃⲆΔ.ᐃΔΔⵠⲆᐃᐃ) {
          d |= f.ⵠⲆᐃⵠⵠⲆⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
        }
      }
      if (zx.ⲆᐃⲆΔ.ⲆⵠⲆⲆⵠΔᐃ && !zx.ⲆⲆⵠⲆⲆ.enabled) {
        d |= f.ᐃⵠΔⵠⲆΔᐃ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
      }
      if (zx.ⵠΔᐃΔ.id < 0 && !zx.ⲆⲆⵠⲆⲆ.enabled) {
        for (var k = zx.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ, m = 0; m < k.length; m++) {
          var n = k[m].ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
          d |= Cx.ΔⲆⵠΔⵠ.ᐃᐃᐃⵠ(n, k[m], 0);
          if (j.open && (j.id < 0 || k[m].id == j.id) || zx.ΔⲆΔⲆᐃ.open && k[m].id == 109 || zx.ⵠⲆⵠᐃᐃ.open && k[m].id === 180 || zx.ⲆΔᐃⲆ.open && (k[m].id == 109 || k[m].id == 131) || zx.ΔΔⲆᐃ.open && k[m].id == 134 || zx.ᐃⵠΔΔ.open && k[m].id == 109) {
            d |= f.ΔⵠᐃⲆⵠ[k[m].id].ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
          }
        }
      }
      if (zx.ⵠΔᐃΔ.id < 0 && zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !zx.ⲆⲆⵠⲆⲆ.enabled && !zx.ΔⵠⵠⵠΔ) {
        k = zx.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ;
        m = 0;
        for (; k.length > m; m++) {
          n = false;
          n = k[m].ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
          d |= Cx.ΔⲆⵠΔⵠ.ᐃᐃᐃⵠ(n, k[m], 1);
        }
      }
      if (zx.ⵠΔᐃΔ.id < 0 && zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !!zx.ⲆⵠΔⲆΔ.open && !f.ΔΔⲆⲆ.open && !f.ⲆΔᐃᐃ.open && !f.options.open && !f.ⲆⲆⵠΔⲆ.open && !f.ᐃΔΔᐃ.open && !f.ⵠᐃⲆⲆᐃ.open) {
        d |= f.ⲆⵠΔⲆΔ.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
      }
      if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !f.ⲆΔᐃᐃ.open && !f.options.open && !f.ⲆⲆⵠΔⲆ.open && !f.ᐃΔΔᐃ.open && !f.ⵠᐃⲆⲆᐃ.open && f.ΔᐃΔⲆΔⵠⲆ === 1) {
        d |= f.ΔΔⲆⲆ.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
      }
      if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !f.ΔΔⲆⲆ.open && !f.ⲆΔᐃᐃ.open && !f.ⲆⲆⵠΔⲆ.open && !f.ᐃΔΔᐃ.open && !f.ⵠᐃⲆⲆᐃ.open) {
        d |= f.options.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
      }
      if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !f.ΔΔⲆⲆ.open && !f.ⲆΔᐃᐃ.open && !f.ⲆⲆⵠΔⲆ.open && !f.ᐃΔΔᐃ.open && !f.options.open && f.ⲆΔΔᐃⲆᐃᐃ === 1) {
        d |= f.ⵠᐃⲆⲆᐃ.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
      }
      if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !f.ΔΔⲆⲆ.open && !f.ⲆΔᐃᐃ.open && !f.ⲆⲆⵠΔⲆ.open && !f.ᐃΔΔᐃ.open && !f.options.open && !f.ⵠᐃⲆⲆᐃ.open) {
        if (Dx.ΔᐃᐃⵠⲆ) {
          d |= f.ⵠⲆⵠᐃ.ⵠΔⵠΔᐃⲆⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
        } else {
          d |= f.ⵠⲆⵠᐃ.ᐃᐃᐃᐃⲆᐃⵠ.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
        }
      }
      if (zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !f.ΔΔⲆⲆ.open && !f.ⲆΔᐃᐃ.open && !f.options.open && !f.ⲆⲆⵠΔⲆ.open && !f.ⵠᐃⲆⲆᐃ.open && yx.mode !== 2 && yx.mode !== 4 && yx.mode !== Wf.ᐃΔΔᐃΔΔᐃⵠᐃ && f.ᐃⵠΔⲆⲆⵠΔ === 1) {
        d |= f.ᐃΔΔᐃ.button.ᐃᐃᐃⵠ(f.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
      }
      if (d !== f.ⵠΔⲆΔⲆⵠΔ) {
        f.ⵠΔⲆΔⲆⵠΔ = d;
        b.style.cursor = d ? f.ᐃΔⵠⵠΔΔⵠ : f.ⲆⵠⵠⲆᐃⵠⲆ;
      }
    };
    this.ΔⵠᐃΔⲆⵠⵠ = function () {
      _a.addEventListener("mousedown", this.ⵠΔⲆⲆᐃⵠⲆ, $n);
      _a.addEventListener("mouseup", this.ⵠⵠΔᐃΔⲆⲆ, false);
      _a.addEventListener("mousemove", this.ᐃⲆᐃⲆΔⵠᐃ, Vn);
      _a.addEventListener("keyup", this.ⲆᐃᐃⲆΔⵠⵠ, _n);
      _a.addEventListener("keydown", this.ΔΔⲆⵠⲆᐃᐃ, $n);
    };
    this.ᐃⵠⵠⲆᐃᐃᐃ = function () {
      _a.removeEventListener("mousedown", this.ⵠΔⲆⲆᐃⵠⲆ, false);
      _a.removeEventListener("mouseup", this.ⵠⵠΔᐃΔⲆⲆ, Iq);
      _a.removeEventListener("mousemove", this.ᐃⲆᐃⲆΔⵠᐃ, _n);
      _a.removeEventListener("keyup", this.ⲆᐃᐃⲆΔⵠⵠ, zq);
      _a.removeEventListener("keydown", this.ΔΔⲆⵠⲆᐃᐃ, _n);
    };
  }
  function Uw(b, m) {
    this.ᐃⵠ = b;
    this.Δ = m;
    if (_a.navigator.userAgent.indexOf("Edge") > -1) {
      this.ⲆⵠⵠⲆᐃⵠⲆ = "default";
      this.ᐃΔⵠⵠΔΔⵠ = "pointer";
    } else {
      this.ⲆⵠⵠⲆᐃⵠⲆ = "url('img/cursor0.png'), default";
      this.ᐃΔⵠⵠΔΔⵠ = "url('img/cursor1.png'), pointer";
    }
    var K = this;
    function e(c, d, e, f, i) {
      var a = this;
      for (var j = d + 9, k = 0, m = f, n = d; n < j; n++) {
        K.buttons[n].info.callback = o;
        K.buttons[n].info.ᐃⲆΔⲆⲆᐃⵠⲆᐃ = c;
      }
      function o() {
        if (this.ΔⲆᐃⲆⵠⵠΔ !== m && this.ΔⲆᐃⲆⵠⵠΔ !== -1) {
          if (this.ⵠⵠᐃΔⲆⲆⲆ > 0) {
            if (ᐃⵠⵠΔⵠⲆᐃ === d) {
              H(w, ea, "none");
            } else {
              H(y, ea, "none");
            }
          } else if (ᐃⵠⵠΔⵠⲆᐃ === d) {
            H(w, fa, "inline-block");
          } else {
            H(y, fa, "inline-block");
          }
          m = this.ΔⲆᐃⲆⵠⵠΔ;
          e(this.ΔⲆᐃⲆⵠⵠΔ);
          p();
        }
      }
      function p() {
        var a = c[m];
        xx.ᐃⲆⲆⵠᐃⲆᐃ = wf(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, ct, 10, 8);
        if (a.level !== undefined) {
          xx.ᐃⲆᐃᐃᐃⲆᐃ = wf("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, Ks, 10, 8);
        } else {
          xx.ᐃⲆᐃᐃᐃⲆᐃ = wf("by " + a.ᐃΔⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, Hb, 10, 8);
        }
      }
      this.ⵠⵠᐃⵠⲆ = function () {
        for (var a = d, b = k * 3; a < j && c.length > b; a++, b++) {
          if (ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ !== c[b].ⲆΔᐃ || i[b] !== 0) {
            K.buttons[a].info.ΔⲆᐃⲆⵠⵠΔ = b;
            for (var e = 0; e < 3; e++) {
              K.buttons[a].info.ⵠⵠ[e] = ⵠΔⵠᐃΔ[c[b].ⲆΔᐃ][e];
              K.buttons[a].info.active = fa;
              K.buttons[a].info.ⵠⵠᐃΔⲆⲆⲆ = i[b];
            }
          } else {
            K.buttons[a].info.ΔⲆᐃⲆⵠⵠΔ = -1;
            K.buttons[a].info.active = ea;
          }
        }
        for (; j > a; a++) {
          K.buttons[a].info.ΔⲆᐃⲆⵠⵠΔ = -1;
          K.buttons[a].info.active = ea;
        }
        p();
      };
      K.buttons[j].info.callback = function () {
        if (k > 0) {
          k--;
        }
        a.ⵠⵠᐃⵠⲆ();
      };
      K.buttons[j + 1].info.callback = function () {
        if (k * 3 + 9 < c.length) {
          k++;
        }
        a.ⵠⵠᐃⵠⲆ();
      };
    }
    function i() {
      var b = Number(ᐃΔⲆⲆ.get("starve_crate"));
      var c = Number(ᐃΔⲆⲆ.get("starve_dead"));
      var d = Number(ᐃΔⲆⲆ.get("starve_book"));
      var e = Number(ᐃΔⲆⲆ.get("starve_bag"));
      var f = Number(ᐃΔⲆⲆ.get("starve_skin"));
      var a = Number(ᐃΔⲆⲆ.get("starve_accessory"));
      K.ⵠⲆᐃᐃ = f || 0;
      K.ⲆⵠᐃⲆᐃ = d || 0;
      K.ᐃΔⲆⵠⲆ = b || 1;
      K.ⵠΔⵠⲆⲆ = a || 0;
      K.ᐃΔⲆΔΔ = e || 0;
      K.ΔᐃΔⵠΔ = c || 0;
    }
    function a() {
      for (var a = ⲆⲆΔⲆ.Δⵠᐃⵠⵠ, b = 0; b < a.length; b++) {
        if (a[b].ⲆΔᐃ === ᐃⵠᐃ.ⵠΔΔⲆⲆ) {
          K.unlock.ⵠⲆᐃᐃ[b] = 1;
        } else {
          K.unlock.ⵠⲆᐃᐃ[b] = 0;
        }
      }
      a = ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ;
      b = 0;
      for (; a.length > b; b++) {
        if (a[b].ⲆΔᐃ === ᐃⵠᐃ.ⵠΔΔⲆⲆ) {
          K.unlock.ⵠΔⵠⲆⲆ[b] = 1;
        } else {
          K.unlock.ⵠΔⵠⲆⲆ[b] = 0;
        }
      }
      a = ⲆⲆΔⲆ.ⲆⵠⲆΔ;
      b = 0;
      for (; a.length > b; b++) {
        if (a[b].ⲆΔᐃ === ᐃⵠᐃ.ⵠΔΔⲆⲆ) {
          K.unlock.ᐃΔⲆΔΔ[b] = 1;
        } else {
          K.unlock.ᐃΔⲆΔΔ[b] = 0;
        }
      }
      a = ⲆⲆΔⲆ.ⵠΔⲆΔᐃ;
      b = 0;
      for (; a.length > b; b++) {
        if (a[b].ⲆΔᐃ === ᐃⵠᐃ.ⵠΔΔⲆⲆ) {
          K.unlock.ⲆⵠᐃⲆᐃ[b] = 1;
        } else {
          K.unlock.ⲆⵠᐃⲆᐃ[b] = 0;
        }
      }
      a = ⲆⲆΔⲆ.ΔⵠΔⵠⵠ;
      b = 0;
      for (; b < a.length; b++) {
        if (a[b].ⲆΔᐃ === ᐃⵠᐃ.ⵠΔΔⲆⲆ) {
          K.unlock.ᐃΔⲆⵠⲆ[b] = 1;
          K.unlock.ΔᐃΔⵠΔ[b] = 1;
        } else {
          K.unlock.ᐃΔⲆⵠⲆ[b] = 0;
          K.unlock.ΔᐃΔⵠΔ[b] = 0;
        }
      }
    }
    this.waiting = false;
    this.ᐃᐃΔⲆΔⲆΔ = 0;
    this.ⵠⵠᐃⵠⵠᐃⲆ = -1;
    this.ᐃᐃⲆⲆΔΔⵠ = {
      translate: {
        x: 0,
        y: 0
      },
      angle: 0,
      ⵠⵠ: ᐃᐃ[301],
      ᐃⵠΔᐃ: function () {
        this.angle += Gx * 2;
        m.save();
        m.translate(this.translate.x + this.ⵠⵠ.width / 2, this.translate.y + this.ⵠⵠ.height / 2);
        m.rotate(this.angle);
        qp(m, this.ⵠⵠ, -this.ⵠⵠ.width / 2, -this.ⵠⵠ.height / 2);
        m.restore();
      }
    };
    this.ΔⲆⵠⲆΔᐃᐃ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        x: 0,
        y: 0
      },
      ΔⵠΔ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.Ⲇⵠᐃᐃⵠ = 0;
    this.ᐃⵠΔΔᐃⵠΔ = -1;
    this.ⲆᐃΔΔΔᐃᐃ = undefined;
    this.ⵠⲆΔⲆⲆⵠᐃ = "";
    this.ⲆᐃⲆⵠⵠΔᐃ = "";
    this.ᐃⲆΔᐃⲆⵠⲆ = ij;
    this.ⵠᐃⲆⵠΔ = 0;
    this.ΔⵠⲆⲆᐃⵠᐃ = -1;
    this.ⲆⲆᐃⵠⲆⲆᐃ = undefined;
    this.ΔⵠⵠⲆᐃⲆⲆ = 0;
    this.ΔⵠⵠΔΔⵠⵠ = 0;
    this.ⲆⲆᐃⵠᐃⲆΔ = 0;
    this.ΔᐃΔⵠⵠ = 0;
    this.ΔΔᐃⲆⲆⵠΔ = 0;
    this.time = 0;
    this.ᐃᐃᐃΔᐃ = 0;
    this.ⲆⵠᐃΔⲆᐃᐃ = 0;
    this.ⵠⵠⵠᐃⵠⲆⵠ = 0;
    this.ΔΔᐃΔⲆⲆΔ = 0;
    this.ⵠⲆⵠⲆΔⵠΔ = 0;
    this.ⵠⲆΔΔΔᐃⵠ = [];
    this.ⲆⵠΔⵠⲆ = -1;
    this.ⲆΔΔΔΔᐃΔ = -1;
    this.ⵠⲆⵠⲆⵠⵠⲆ = -1;
    this.ⵠⵠᐃΔᐃΔⵠ = undefined;
    this.ΔΔⲆᐃᐃΔⲆ = undefined;
    this.ᐃⵠⲆⵠᐃΔΔ = -1;
    this.ΔⵠⵠΔⵠⵠΔ = -1;
    this.ΔⵠᐃΔᐃᐃⲆ = -1;
    this.ⲆⵠᐃΔᐃⲆΔ = -1;
    this.ᐃΔΔΔΔⲆⵠ = mq;
    this.ⵠᐃΔⲆⵠⲆΔ = es;
    this.ⵠⲆΔΔᐃⵠᐃ = mb;
    this.ᐃⲆⲆⵠᐃⲆᐃ = undefined;
    this.ᐃⲆᐃᐃᐃⲆᐃ = es;
    this.ⵠⲆⲆⵠᐃᐃΔ = undefined;
    this.ⵠΔⲆᐃΔⵠⲆ = undefined;
    this.ᐃⵠᐃⲆᐃⵠⲆ = mi;
    this.ΔᐃⲆⲆⲆⲆⵠ = undefined;
    this.ⲆᐃΔᐃΔᐃᐃ = 3;
    this.ⵠᐃⵠᐃ = 0;
    this.ΔⵠⲆⵠⵠⲆΔΔΔ = Ah;
    this.ΔⵠⵠΔΔ = ᐃΔⲆⲆ.get("starve_quality") ? ᐃΔⲆⲆ.get("starve_quality") : "high";
    if (this.ΔⵠⵠΔΔ === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ΔⵠⵠΔΔ = 1;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ΔⵠⵠΔΔ = 0;
    }
    this.ⲆⵠΔⲆⵠⵠⲆᐃⵠ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ᐃΔⲆⲆ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 1;
      Cx.ⲆΔΔᐃⲆᐃⵠ();
      xx.ΔⵠⵠΔΔ = 1;
    };
    this.ᐃⲆᐃⵠⵠⵠⵠΔⵠ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ᐃΔⲆⲆ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (Xq / Zq);
      Cx.ⲆΔΔᐃⲆᐃⵠ();
      xx.ΔⵠⵠΔΔ = 0;
    };
    if (ᐃΔⲆⲆ.get("starve_mapping") === undefined && pr === "FR") {
      Ex.ᐃᐃΔᐃᐃᐃΔ();
      this.mapping = "azerty";
    } else {
      this.mapping = ᐃΔⲆⲆ.get("starve_mapping") ? ᐃΔⲆⲆ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      Ex.ᐃᐃΔᐃᐃᐃΔ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ᐃᐃΔᐃᐃᐃΔ = function () {
      Ex.ᐃᐃΔᐃᐃᐃΔ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ᐃΔⲆⲆ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ⵠⲆⲆΔⵠⵠᐃ = function () {
      Ex.ⵠⲆⲆΔⵠⵠᐃ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ᐃΔⲆⲆ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ⲆΔᐃⵠΔᐃⲆ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        x: 0,
        y: 0
      },
      ΔⵠΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    i();
    this.unlock = {};
    this.unlock.ⵠⲆᐃᐃ = [];
    this.unlock.ᐃΔⲆΔΔ = [];
    this.unlock.ⲆⵠᐃⲆᐃ = [];
    this.unlock.ᐃΔⲆⵠⲆ = [];
    this.unlock.ΔᐃΔⵠΔ = [];
    this.unlock.ⵠΔⵠⲆⲆ = [];
    this.ⵠΔᐃᐃⲆⲆⵠ = 0;
    this.ⲆᐃⲆΔᐃⵠⲆ = a;
    a();
    this.ΔⲆⵠⵠⵠ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        y: 0,
        x: 0
      },
      ΔⵠΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var k;
    var n = 0;
    function o() {
      K.ΔⵠΔ();
      if (++n == 30) {
        K.ΔⵠᐃΔⲆⵠⵠ();
        K.ᐃᐃΔⲆΔⲆΔ = true;
        K.ΔⵠΔ();
        return;
      }
      _a.setTimeout(o, 33);
    }
    this.ⲆⵠᐃⵠΔ = function (a) {
      k = a;
      K.ᐃⵠⵠⲆᐃᐃᐃ();
      K.ᐃᐃΔⲆΔⲆΔ = 0;
      g = -1;
      p();
    };
    var g = -1;
    function p() {
      K.ΔⵠΔ();
      if (++g == 30) {
        ᐃΔⲆⲆ.set("starve_nickname", K.ⵠⲆⵠΔⵠ.input.value, {
          expires: 30
        });
        K.ⵠⲆⵠΔⵠ.style.display = "none";
        K.ᐃⵠⲆᐃⲆ.style.display = "none";
        K.ΔⲆⵠⲆΔᐃᐃ.style.display = "none";
        K.ⲆΔᐃⵠΔᐃⲆ.style.display = "none";
        K.ΔⲆⵠⵠⵠ.style.display = "none";
        K.stop();
        k();
        return;
      }
      _a.setTimeout(p, 33);
    }
    this.ⵠΔⲆΔΔ = false;
    this.stop = function () {
      this.ⵠΔⲆΔΔ = false;
    };
    this.ΔᐃᐃⵠⲆ = function () {
      Lx();
      document.getElementById("game_body").style.backgroundColor = Mr.ⲆⵠᐃᐃΔ[wx.time];
      K.ⵠⲆⵠΔⵠ.style.display = "inline-block";
      K.ᐃⵠⲆᐃⲆ.style.display = "inline-block";
      K.ΔⲆⵠⲆΔᐃᐃ.style.display = "inline-block";
      K.ⲆΔᐃⵠΔᐃⲆ.style.display = "inline-block";
      K.ΔⲆⵠⵠⵠ.style.display = "inline-block";
      K.waiting = false;
      K.ⵠΔⲆΔΔ = V;
      g = -1;
      n = 0;
      o();
    };
    this.ⲆᐃΔⲆᐃⲆⲆ = function (a, b) {
      b = b < 0 ? -b : b;
      if ((a.position & ca) === ca) {
        if ((a.position & Z) === Z) {
          a.translate.x = aq + a.translate.ᐃⵠΔⲆⵠ - b;
        } else if (_ === (a.position & _)) {
          a.translate.x = aq + a.translate.ᐃⵠΔⲆⵠ + b;
        } else {
          a.translate.x = aq + a.translate.ᐃⵠΔⲆⵠ;
        }
      } else if (Z === (a.position & Z)) {
        a.translate.x = a.translate.ᐃⵠΔⲆⵠ - b;
      } else if ((a.position & _) === _) {
        a.translate.x = uo - a.translate.ᐃⵠΔⲆⵠ + b;
      } else {
        a.translate.x = a.translate.ᐃⵠΔⲆⵠ;
      }
      if ((a.position & da) === da) {
        if ((a.position & aa) === aa) {
          a.translate.y = bq + a.translate.ᐃᐃΔΔᐃ - b;
        } else if (ba === (a.position & ba)) {
          a.translate.y = bq + a.translate.ᐃᐃΔΔᐃ + b;
        } else {
          a.translate.y = bq + a.translate.ᐃᐃΔΔᐃ;
        }
      } else if ((a.position & aa) === aa) {
        a.translate.y = a.translate.ᐃᐃΔΔᐃ - b;
      } else if (ba === (a.position & ba)) {
        a.translate.y = xp + a.translate.ᐃᐃΔΔᐃ + b;
      } else {
        a.translate.y = a.translate.ᐃᐃΔΔᐃ;
      }
      if (a.style !== ej) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.ΔⵠΔ = function () {
      var a = 0;
      if (n != 30 || g != -1) {
        if (n != 30) {
          a = 1500 / (n + 1) - 50;
        }
        if (g != -1) {
          a = -(1750 / (30 - g + 1) - 48);
        }
      }
      for (var b = 0; b < this.ⵠΔⵠⵠ.length; b++) {
        this.ⲆᐃΔⲆᐃⲆⲆ(this.ⵠΔⵠⵠ[b], a);
      }
      for (b = 0; this.buttons.length > b; b++) {
        this.ⲆᐃΔⲆᐃⲆⲆ(this.buttons[b].info, a);
      }
      for (b = 0; this.ΔΔΔΔΔ.length > b; b++) {
        this.ⲆᐃΔⲆᐃⲆⲆ(this.ΔΔΔΔΔ[b], a);
      }
      this.ᐃᐃⲆⲆΔΔⵠ.translate.x = (uo - this.ᐃᐃⲆⲆΔΔⵠ.ⵠⵠ.width) / 2;
      this.ᐃᐃⲆⲆΔΔⵠ.translate.y = 0;
      this.ΔⲆⵠⲆΔᐃᐃ.translate.x = uo - 450;
      this.ΔⲆⵠⲆΔᐃᐃ.translate.y = xp - 40;
      this.ⲆΔᐃⵠΔᐃⲆ.translate.x = uo - 340;
      this.ⲆΔᐃⵠΔᐃⲆ.translate.y = xp - 25;
      this.ΔⲆⵠⵠⵠ.translate.x = uo - 320;
      this.ΔⲆⵠⵠⵠ.translate.y = 80;
      if (n != 30 || g != -1) {
        var c = 0;
        if (n != 30) {
          c = 1500 / (n + 1) - 50;
        }
        if (g != -1) {
          c = -(1750 / (30 - g + 1) - 48);
        }
        this.ᐃᐃⲆⲆΔΔⵠ.translate.y -= c > 0 ? c : -c;
        this.ΔⲆⵠⲆΔᐃᐃ.translate.y -= c < 0 ? c : -c;
        this.ⲆΔᐃⵠΔᐃⲆ.translate.y -= c < 0 ? c : -c;
      }
      this.ΔⲆⵠⲆΔᐃᐃ.ΔⵠΔ();
      this.ⲆΔᐃⵠΔᐃⲆ.ΔⵠΔ();
      this.ΔⲆⵠⵠⵠ.ΔⵠΔ();
    };
    this.ⵠΔⲆΔⲆⵠⵠ = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var e = -Math.PI / 2;
      for (var f = 0; f < b.length; f++) {
        var g = b[f][0];
        var h = b[f][1] * Math.PI / 180;
        d.beginPath();
        d.arc(171, 171, 170, e, e + h, false);
        d.lineTo(171, 171);
        d.fillStyle = g;
        d.fill();
        e += h;
      }
      return c;
    };
    this.ⵠⲆΔΔΔᐃΔⵠᐃ = function () {
      this.ⵠⲆΔⲆⲆⵠᐃ = document.getElementById("account_nickname_input").value;
      if (this.ⲆᐃⲆⵠⵠΔᐃ !== this.ⵠⲆΔⲆⲆⵠᐃ) {
        this.ⲆᐃⲆⵠⵠΔᐃ = this.ⵠⲆΔⲆⲆⵠᐃ;
        this.ᐃⲆΔᐃⲆⵠⲆ = wf(this.ⵠⲆΔⲆⲆⵠᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ᐃⵠΔᐃ = function () {
      oc();
      xx.ΔⵠⵠⲆᐃⲆⲆ = ΔⲆᐃ.ΔΔⲆⲆΔ(xx.ΔⵠⵠⲆᐃⲆⲆ, xx.ΔⵠⵠΔΔⵠⵠ, 0.03);
      this.ⵠΔⵠⵠ[ⵠᐃᐃⵠⲆᐃᐃ].translate.x = this.ⵠΔⵠⵠ[0].translate.x + -72 + xx.ΔⵠⵠⲆᐃⲆⲆ * 165;
      this.ⵠΔⵠⵠ[ⵠᐃᐃⵠⲆᐃᐃ].translate.ᐃⵠΔⲆⵠ = this.ⵠΔⵠⵠ[ⵠᐃᐃⵠⲆᐃᐃ].translate.x;
      this.ⵠΔⵠⵠ[ⵠᐃᐃⵠⲆᐃᐃ].translate.y = this.ⵠΔⵠⵠ[0].translate.y + 30;
      this.ⵠΔⵠⵠ[ⵠᐃᐃⵠⲆᐃᐃ].translate.ᐃᐃΔΔᐃ = this.ⵠΔⵠⵠ[ⵠᐃᐃⵠⲆᐃᐃ].translate.y;
      for (var b = 2; b < this.ⵠΔⵠⵠ.length; b++) {
        if (fa === this.ⵠΔⵠⵠ[b].active) {
          this.ⵠΔⵠⵠ[b].ᐃⵠΔᐃ(m);
        }
      }
      var n = this.ⲆⵠΔⵠⲆ - Date.now();
      if (n > 0) {
        var y = Math.floor(n / 60000);
        var H = Math.floor(y / 60);
        y %= 60;
        if (this.ⵠⲆⵠⲆⵠⵠⲆ !== y) {
          this.ⵠⲆⵠⲆⵠⵠⲆ = y;
          y = y < 10 ? "0" + y : "" + y;
          K.ⵠⵠᐃΔᐃΔⵠ = wf(y, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (H !== this.ⲆΔΔΔΔᐃΔ) {
          this.ⲆΔΔΔΔᐃΔ = H;
          H = H < 10 ? "0" + H : "" + H;
          K.ΔΔⲆᐃᐃΔⲆ = wf(H, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (V = this.ⵠΔⵠⵠ[ⵠᐃⲆⵠⲆᐃⲆ]).ᐃⵠΔᐃ(m);
        var U = this.ΔΔⲆᐃᐃΔⲆ;
        qp(m, U, V.translate.x - U.width / 4 + 182, V.translate.y - U.height / 4 + 40, U.width / 2, U.height / 2);
        U = this.ⵠⵠᐃΔᐃΔⵠ;
        qp(m, U, V.translate.x - U.width / 4 + 251, V.translate.y - U.height / 4 + 40, U.width / 2, U.height / 2);
      }
      if ((n = this.ᐃⵠⲆⵠᐃΔΔ - Date.now()) > 0) {
        y = Math.floor(n / 60000);
        H = Math.floor(y / 60);
        var V;
        var W = Math.floor(H / 24);
        y %= 60;
        H %= 24;
        if (this.ⲆⵠᐃΔᐃⲆΔ !== y) {
          this.ⲆⵠᐃΔᐃⲆΔ = y;
          y = y < 10 ? "0" + y : "" + y;
          K.ᐃΔΔΔΔⲆⵠ = wf(y, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (H !== this.ΔⵠᐃΔᐃᐃⲆ) {
          this.ΔⵠᐃΔᐃᐃⲆ = H;
          H = H < 10 ? "0" + H : "" + H;
          K.ⵠᐃΔⲆⵠⲆΔ = wf(H, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (W !== this.ΔⵠⵠΔⵠⵠΔ) {
          this.ΔⵠⵠΔⵠⵠΔ = W;
          W = W < 10 ? "0" + W : "" + W;
          K.ⵠⲆΔΔᐃⵠᐃ = wf(W, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (V = this.ⵠΔⵠⵠ[ⲆⵠⲆΔᐃΔΔ]).ᐃⵠΔᐃ(m);
        U = this.ⵠⲆΔΔᐃⵠᐃ;
        qp(m, U, V.translate.x - U.width / 4 + 113, V.translate.y - U.height / 4 + 40, U.width / 2, U.height / 2);
        U = this.ⵠᐃΔⲆⵠⲆΔ;
        qp(m, U, V.translate.x - U.width / 4 + 182, V.translate.y - U.height / 4 + 40, U.width / 2, U.height / 2);
        U = this.ᐃΔΔΔΔⲆⵠ;
        qp(m, U, V.translate.x - U.width / 4 + 251, V.translate.y - U.height / 4 + 40, U.width / 2, U.height / 2);
      }
      if ((this.ⵠⲆⵠⲆⲆ & t) === t) {
        this.buttons[ⲆⵠᐃⲆⲆᐃⲆ].info.state = zf;
      } else if ((this.ⵠⲆⵠⲆⲆ & z) === z) {
        this.buttons[ᐃᐃᐃⵠᐃⲆⲆ].info.state = zf;
      } else if (C === (this.ⵠⲆⵠⲆⲆ & C)) {
        this.buttons[ⲆΔⲆⵠⵠᐃⲆ].info.state = zf;
      } else if (v === (this.ⵠⲆⵠⲆⲆ & v)) {
        this.buttons[ΔᐃⵠᐃΔⵠⲆ].info.state = zf;
      } else if (f === (this.ⵠⲆⵠⲆⲆ & f)) {
        this.buttons[ΔᐃⵠⵠⲆᐃᐃ].info.state = zf;
      } else if ((this.ⵠⲆⵠⲆⲆ & c) === c) {
        this.buttons[ⵠᐃᐃⵠΔⵠⲆ].info.state = zf;
      } else if ((this.ⵠⲆⵠⲆⲆ & M) === M || A === (this.ⵠⲆⵠⲆⲆ & A) || x === (this.ⵠⲆⵠⲆⲆ & x) || (this.ⵠⲆⵠⲆⲆ & J) === J || B === (this.ⵠⲆⵠⲆⲆ & B) || (this.ⵠⲆⵠⲆⲆ & D) === D || E === (this.ⵠⲆⵠⲆⲆ & E)) {
        this.buttons[ᐃΔⲆᐃᐃΔⵠ].info.state = zf;
      } else if ((this.ⵠⲆⵠⲆⲆ & I) === I || (this.ⵠⲆⵠⲆⲆ & S) === S || (this.ⵠⲆⵠⲆⲆ & Q) === Q || F === (this.ⵠⲆⵠⲆⲆ & F) || R === (this.ⵠⲆⵠⲆⲆ & R) || j === (this.ⵠⲆⵠⲆⲆ & j)) {
        this.buttons[ⲆΔⲆⵠⵠᐃⲆ].info.state = zf;
      } else if ((this.ⵠⲆⵠⲆⲆ & L) === L || (this.ⵠⲆⵠⲆⲆ & O) === O || (this.ⵠⲆⵠⲆⲆ & N) === N) {
        this.buttons[ᐃⵠᐃᐃⵠᐃⲆ].info.state = zf;
      } else if (q === (this.ⵠⲆⵠⲆⲆ & q)) {
        this.buttons[ΔᐃⵠᐃΔⵠⲆ].info.state = zf;
      }
      if ((this.ⵠⲆⵠⲆⲆ & z) === z) {
        if (this.ΔⵠᐃΔⵠᐃΔ === this.ⵠΔⲆᐃΔⵠⲆ) {
          this.ⵠⲆⲆⵠᐃᐃΔ = this.ⵠⲆⲆΔᐃⵠⵠ;
          this.buttons[this.ⵠⲆⲆΔᐃⵠⵠ].info.active = ea;
          this.buttons[this.ΔΔᐃⲆⵠΔⵠ].info.active = ea;
          this.buttons[this.ᐃᐃᐃⵠΔⲆᐃ].info.active = ea;
        } else {
          this.buttons[this.ⵠⲆⲆΔᐃⵠⵠ].info.active = fa;
          this.buttons[this.ΔΔᐃⲆⵠΔⵠ].info.active = fa;
          this.buttons[this.ᐃᐃᐃⵠΔⲆᐃ].info.active = fa;
        }
        if (this.ⲆΔⲆΔⲆⵠᐃ === this.ⵠΔⲆᐃΔⵠⲆ) {
          this.buttons[this.ⲆΔⲆΔⲆⵠᐃ].info.state = zf;
        } else if (this.ⵠΔⲆᐃΔⵠⲆ === this.ᐃᐃⲆΔΔⲆⲆ) {
          this.buttons[this.ᐃᐃⲆΔΔⲆⲆ].info.state = zf;
        } else if (this.ΔⵠᐃΔⵠᐃΔ === this.ⵠΔⲆᐃΔⵠⲆ) {
          this.buttons[this.ΔⵠᐃΔⵠᐃΔ].info.state = zf;
        } else if (this.ⵠΔⲆᐃΔⵠⲆ === this.ⲆᐃⲆΔⲆΔⵠ) {
          this.buttons[this.ⲆᐃⲆΔⲆΔⵠ].info.state = zf;
        } else if (this.ⲆᐃⵠᐃⲆΔⵠ === this.ⵠΔⲆᐃΔⵠⲆ) {
          this.buttons[this.ⲆᐃⵠᐃⲆΔⵠ].info.state = zf;
        }
        if (this.ⵠⲆⲆⵠᐃᐃΔ === this.ⵠⲆⲆΔᐃⵠⵠ) {
          this.buttons[this.ⵠⲆⲆΔᐃⵠⵠ].info.state = zf;
        } else if (this.ⵠⲆⲆⵠᐃᐃΔ === this.ΔΔᐃⲆⵠΔⵠ) {
          this.buttons[this.ΔΔᐃⲆⵠΔⵠ].info.state = zf;
        } else if (this.ⵠⲆⲆⵠᐃᐃΔ === this.ᐃᐃᐃⵠΔⲆᐃ) {
          this.buttons[this.ᐃᐃᐃⵠΔⲆᐃ].info.state = zf;
        }
        if (this.ᐃⵠⲆⵠΔᐃΔ === this.ᐃⵠᐃⲆᐃⵠⲆ) {
          this.buttons[this.ᐃⵠⲆⵠΔᐃΔ].info.state = zf;
        } else if (this.ᐃⵠᐃⲆᐃⵠⲆ === this.ΔⲆΔⲆⲆⲆⲆ) {
          this.buttons[this.ΔⲆΔⲆⲆⲆⲆ].info.state = zf;
        } else if (this.ᐃⵠᐃΔᐃⵠⲆ === this.ᐃⵠᐃⲆᐃⵠⲆ) {
          this.buttons[this.ᐃⵠᐃΔᐃⵠⲆ].info.state = zf;
        }
        if (this.ΔᐃᐃⵠΔΔΔ === this.ΔᐃⲆⲆⲆⲆⵠ) {
          this.buttons[this.ΔᐃᐃⵠΔΔΔ].info.state = zf;
        } else if (this.ΔᐃⲆⲆⲆⲆⵠ === this.ⵠⵠⲆⲆᐃΔᐃ) {
          this.buttons[this.ⵠⵠⲆⲆᐃΔᐃ].info.state = zf;
        } else if (this.ΔᐃⲆⲆⲆⲆⵠ === this.ⲆⲆΔΔⵠⲆⲆ) {
          this.buttons[this.ⲆⲆΔΔⵠⲆⲆ].info.state = zf;
        } else if (this.ᐃΔΔΔⲆΔⵠ === this.ΔᐃⲆⲆⲆⲆⵠ) {
          this.buttons[this.ᐃΔΔΔⲆΔⵠ].info.state = zf;
        } else if (this.ΔᐃⲆⲆⲆⲆⵠ === this.ᐃᐃΔᐃⲆΔΔ) {
          this.buttons[this.ᐃᐃΔᐃⲆΔΔ].info.state = zf;
        } else if (this.ⵠⲆᐃΔⲆⵠΔ === this.ΔᐃⲆⲆⲆⲆⵠ) {
          this.buttons[this.ⵠⲆᐃΔⲆⵠΔ].info.state = zf;
        }
      }
      if (v === (this.ⵠⲆⵠⲆⲆ & v)) {
        if (this.ⵠⵠᐃⵠⵠᐃⲆ === -1) {
          this.buttons[ya].info.state = zf;
        } else if (this.ⵠⵠᐃⵠⵠᐃⲆ === 0) {
          this.buttons[za].info.state = zf;
        } else if (this.ⵠⵠᐃⵠⵠᐃⲆ === 2) {
          this.buttons[Ba].info.state = zf;
        } else if (this.ⵠⵠᐃⵠⵠᐃⲆ === 3) {
          this.buttons[Ca].info.state = zf;
        } else if (this.ⵠⵠᐃⵠⵠᐃⲆ === 4) {
          this.buttons[Aa].info.state = zf;
        }
        if (this.ⲆᐃΔᐃΔᐃᐃ === 0) {
          this.buttons[sa].info.state = zf;
        } else if (this.ⲆᐃΔᐃΔᐃᐃ === 1) {
          this.buttons[ta].info.state = zf;
        } else if (this.ⲆᐃΔᐃΔᐃᐃ === 2) {
          this.buttons[ua].info.state = zf;
        } else if (this.ⲆᐃΔᐃΔᐃᐃ === 3) {
          this.buttons[va].info.state = zf;
        } else if (this.ⲆᐃΔᐃΔᐃᐃ === 4) {
          this.buttons[wa].info.state = zf;
        } else if (this.ⲆᐃΔᐃΔᐃᐃ === 5) {
          this.buttons[xa].info.state = zf;
        }
      }
      if ((this.ⵠⲆⵠⲆⲆ & t) === t && Bx.ⲆᐃᐃⵠᐃᐃΔ === 0) {
        if (this.buttons[ka].ᐃⲆⲆⲆΔⲆΔ(Fx.ΔⵠΔΔ)) {
          this.buttons[ka].hint = Math.min(1, this.buttons[ka].hint + Gx * 1.5);
        } else {
          this.buttons[ka].hint = Math.max(0, this.buttons[ka].hint - Gx * 1.5);
        }
        if (this.buttons[la].ᐃⲆⲆⲆΔⲆΔ(Fx.ΔⵠΔΔ)) {
          this.buttons[la].hint = Math.min(1, this.buttons[la].hint + Gx * 1.5);
        } else {
          this.buttons[la].hint = Math.max(0, this.buttons[la].hint - Gx * 1.5);
        }
        if (this.buttons[ma].ᐃⲆⲆⲆΔⲆΔ(Fx.ΔⵠΔΔ)) {
          this.buttons[ma].hint = Math.min(1, this.buttons[ma].hint + Gx * 1.5);
        } else {
          this.buttons[ma].hint = Math.max(0, this.buttons[ma].hint - Gx * 1.5);
        }
        if (this.buttons[qa].ᐃⲆⲆⲆΔⲆΔ(Fx.ΔⵠΔΔ)) {
          this.buttons[qa].hint = Math.min(1, this.buttons[qa].hint + Gx * 1.5);
        } else {
          this.buttons[qa].hint = Math.max(0, this.buttons[qa].hint - Gx * 1.5);
        }
        if (this.buttons[na].ᐃⲆⲆⲆΔⲆΔ(Fx.ΔⵠΔΔ)) {
          this.buttons[na].hint = Math.min(1, this.buttons[na].hint + Gx * 1.5);
        } else {
          this.buttons[na].hint = Math.max(0, this.buttons[na].hint - Gx * 1.5);
        }
        if (this.buttons[oa].ᐃⲆⲆⲆΔⲆΔ(Fx.ΔⵠΔΔ)) {
          this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + Gx * 1.5);
        } else {
          this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - Gx * 1.5);
        }
      }
      var X = 1;
      if ((this.ⵠⲆⵠⲆⲆ & (A | x | J | B | D | E)) > 1) {
        U = Δᐃ.ΔⲆᐃⵠⵠⲆⲆ;
        m.save();
        m.translate(aq, ja + U.height / 4);
        if (this.ᐃⲆⲆΔΔ === 1) {
          this.ΔᐃᐃΔⲆΔᐃ += Gx / 3;
          X = this.ⵠᐃⵠᐃᐃⲆⵠ - 100 / Math.pow(1 + this.ΔᐃᐃΔⲆΔᐃ, 1 + this.ΔᐃᐃΔⲆΔᐃ);
          m.rotate(X);
        }
        qp(m, U, -U.width / 4, -U.height / 4, U.width / 2, U.height / 2);
        m.restore();
      }
      if (Bx.ⲆᐃᐃⵠᐃᐃΔ === 0) {
        if (Bx.ᐃⲆⲆⵠΔ === 0) {
          this.buttons[ka].info.state = zf;
        } else if (Bx.ᐃⲆⲆⵠΔ === 4) {
          this.buttons[la].info.state = zf;
        } else if (Bx.ᐃⲆⲆⵠΔ === 2) {
          this.buttons[na].info.state = zf;
        } else if (Bx.ᐃⲆⲆⵠΔ === 3) {
          this.buttons[oa].info.state = zf;
        } else if (Bx.ᐃⲆⲆⵠΔ === 6) {
          this.buttons[ma].info.state = zf;
        } else if (Bx.ᐃⲆⲆⵠΔ === 7) {
          this.buttons[qa].info.state = zf;
        }
      }
      for (b = 1; this.buttons.length > b; b++) {
        if (fa === this.buttons[b].info.active) {
          this.buttons[b].ᐃⵠΔᐃ(m);
        }
      }
      this.ⵠΔⵠⵠ[0].ᐃⵠΔᐃ(m);
      if ((this.ⵠⲆⵠⲆⲆ & (G | T)) > 0) {
        U = this.ᐃⲆΔᐃⲆⵠⲆ;
        qp(m, U, aq - U.width / 4, 138, U.width / 2, U.height / 2);
      }
      var Y = Math.max(1, Math.min(18, Math.floor((xx.ⵠᐃⲆⵠΔ + 3) / 2)));
      this.ⵠΔⵠⵠ[Y].active = fa;
      this.ⵠΔⵠⵠ[Y].ᐃⵠΔᐃ(m);
      this.ⵠΔⵠⵠ[Y].active = ea;
      this.buttons[0].ᐃⵠΔᐃ(m);
      if ((this.ⵠⲆⵠⲆⲆ & (C | S | F | I | R)) > 1) {
        var l = (this.ⵠⲆⵠⲆⲆ & (S | F | I | R)) > 1 ? -190 : 0;
        U = ᐃᐃ[29][this.ᐃΔⲆΔΔ][this.ⵠΔᐃᐃⲆⲆⵠ];
        qp(m, U, aq - U.width / 4 + l, 183, U.width / 2, U.height / 2);
        this.ⵠᐃⵠᐃ = (this.ⵠᐃⵠᐃ + Gx * 1000) % 2000;
        var u = (this.ⵠᐃⵠᐃ < 1000) * 4.5 ? this.ⵠᐃⵠᐃ / 1000 : (2000 - this.ⵠᐃⵠᐃ) / 1000;
        U = ᐃᐃ[28][this.ⲆⵠᐃⲆᐃ][this.ⵠΔᐃᐃⲆⲆⵠ];
        qp(m, U, aq - U.width / 4 - 62 + u + l, 240, U.width / 2, U.height / 2);
        U = ᐃᐃ[7][this.ⵠⲆᐃᐃ][this.ⵠΔᐃᐃⲆⲆⵠ];
        qp(m, U, aq - U.width / 4 - 54 + u + l, 272, U.width / 2, U.height / 2);
        qp(m, U, aq - U.width / 4 + 54 - u + l, 272, U.width / 2, U.height / 2);
        U = ᐃᐃ[255][this.ⵠⲆᐃᐃ][this.ⵠΔᐃᐃⲆⲆⵠ];
        qp(m, U, aq - U.width / 4 + l, 222, U.width / 2, U.height / 2);
        U = ᐃᐃ[796][this.ⵠΔⵠⲆⲆ][this.ⵠΔᐃᐃⲆⲆⵠ];
        qp(m, U, aq - U.width / 4 + l, 222, U.width / 2, U.height / 2);
      }
      if ((this.ⵠⲆⵠⲆⲆ & C) === C) {
        U = ᐃᐃ[250][this.ᐃΔⲆⵠⲆ][this.ⵠΔᐃᐃⲆⲆⵠ];
        qp(m, U, aq - U.width / 4 - 61, 406 - U.height / 4, U.width / 2, U.height / 2);
        U = ᐃᐃ[250][this.ΔᐃΔⵠΔ][this.ⵠΔᐃᐃⲆⲆⵠ];
        qp(m, U, aq - U.width / 4 + 53, 406 - U.height / 4, U.width / 2, U.height / 2);
      }
      if (Q === (this.ⵠⲆⵠⲆⲆ & Q)) {
        U = ᐃᐃ[250][this.ΔᐃΔⵠΔ][this.ⵠΔᐃᐃⲆⲆⵠ];
        qp(m, U, aq - U.width / 4 - 200, 268 - U.height / 4, U.width / 2, U.height / 2);
      }
      if (j === (this.ⵠⲆⵠⲆⲆ & j)) {
        U = ᐃᐃ[250][this.ᐃΔⲆⵠⲆ][this.ⵠΔᐃᐃⲆⲆⵠ];
        qp(m, U, aq - U.width / 4 - 200, 268 - U.height / 4, U.width / 2, U.height / 2);
      }
      if ((this.ⵠⲆⵠⲆⲆ & (S | F | I | R | Q | j)) > 1) {
        for (b = 1; b < this.buttons.length; b++) {
          if ((this.buttons[b].view & this.ⵠⲆⵠⲆⲆ) !== 0) {
            var Z = this.buttons[b].info;
            if (Z.ΔⲆᐃⲆⵠⵠΔ >= 0) {
              U = Z.ᐃⲆΔⲆⲆᐃⵠⲆᐃ[Z.ΔⲆᐃⲆⵠⵠΔ].ⵠΔⵠ;
              qp(m, U, Z.translate.x - U.width / 8 + 44.5, Z.translate.y - U.height / 8 + 45.5, U.width / 4, U.height / 4);
              if (Z.ⵠⵠᐃΔⲆⲆⲆ !== 1) {
                U = Δᐃ.ᐃⲆⲆⵠΔⲆΔ;
                qp(m, U, Z.translate.x - U.width / 4 + 44.5, Z.translate.y - U.height / 4 + 44.5, U.width / 2, U.height / 2);
              }
            }
          }
        }
        U = this.ᐃⲆⲆⵠᐃⲆᐃ;
        qp(m, U, aq - 312, 375, U.width / 2, U.height / 2);
        U = this.ᐃⲆᐃᐃᐃⲆᐃ;
        qp(m, U, aq - 312, 395, U.width / 2, U.height / 2);
      }
      if (this.Ⲇⵠᐃᐃⵠ !== this.ᐃⵠΔΔᐃⵠΔ) {
        this.ᐃⵠΔΔᐃⵠΔ = this.Ⲇⵠᐃᐃⵠ;
        this.ⲆᐃΔΔΔᐃᐃ = wf("" + this.Ⲇⵠᐃᐃⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      qp(m, this.ⲆᐃΔΔΔᐃᐃ, this.ⵠΔⵠⵠ[0].translate.x + 350, 15, this.ⲆᐃΔΔΔᐃᐃ.w2, this.ⲆᐃΔΔΔᐃᐃ.ΔⲆΔⵠⵠ);
      if (this.ⵠᐃⲆⵠΔ !== this.ΔⵠⲆⲆᐃⵠᐃ) {
        this.ΔⵠⲆⲆᐃⵠᐃ = this.ⵠᐃⲆⵠΔ;
        this.ⲆⲆᐃⵠⲆⲆᐃ = wf("LVL " + (this.ⵠᐃⲆⵠΔ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, Hb, undefined, undefined, undefined, "#3F3019", 20);
      }
      qp(m, this.ⲆⲆᐃⵠⲆⲆᐃ, this.ⵠΔⵠⵠ[0].translate.x + 94, 0, this.ⲆⲆᐃⵠⲆⲆᐃ.w2, this.ⲆⲆᐃⵠⲆⲆᐃ.ΔⲆΔⵠⵠ);
      if (Bx.ⲆᐃᐃⵠᐃᐃΔ === 0) {
        if ((_ = this.buttons[ka].hint) > 0) {
          U = Δᐃ.ΔΔΔᐃᐃⲆΔ;
          qp(m, U, aq - U.width / 4, -36 - U.height * ΔⲆᐃ.ΔⲆΔⲆⲆ(1 - _) / 2, U.width / 2, U.height / 2);
        }
        if ((_ = this.buttons[la].hint) > 0) {
          U = Δᐃ.ⵠΔⲆᐃⲆΔΔ;
          qp(m, U, aq - U.width / 4, -36 - ΔⲆᐃ.ΔⲆΔⲆⲆ(1 - _) * U.height / 2, U.width / 2, U.height / 2);
        }
        if ((_ = this.buttons[ma].hint) > 0) {
          U = Δᐃ.ⵠΔᐃⵠⲆⲆΔ;
          qp(m, U, aq - U.width / 4, -36 - ΔⲆᐃ.ΔⲆΔⲆⲆ(1 - _) * U.height / 2, U.width / 2, U.height / 2);
        }
        if ((_ = this.buttons[qa].hint) > 0) {
          U = Δᐃ.ᐃⵠᐃⲆⵠⲆᐃ;
          qp(m, U, aq - U.width / 4, -36 - ΔⲆᐃ.ΔⲆΔⲆⲆ(1 - _) * U.height / 2, U.width / 2, U.height / 2);
        }
        if ((_ = this.buttons[oa].hint) > 0) {
          U = Δᐃ.ᐃⵠⵠⲆᐃⲆⵠ;
          qp(m, U, aq - U.width / 4, -36 - U.height * ΔⲆᐃ.ΔⲆΔⲆⲆ(1 - _) / 2, U.width / 2, U.height / 2);
        }
        var _ = this.buttons[na].hint;
        if (_ > 0) {
          U = Δᐃ.ᐃⵠⲆⵠᐃΔⵠ;
          qp(m, U, aq - U.width / 4, -36 - ΔⲆᐃ.ΔⲆΔⲆⲆ(1 - _) * U.height / 2, U.width / 2, U.height / 2);
        }
      }
      if (this.ᐃⲆⲆΔΔ === 1 && Math.abs(X - this.ⵠᐃⵠᐃᐃⲆⵠ) < 0.006) {
        m.globalAlpha = Math.min(1, this.ΔⵠᐃΔⵠΔⲆ * 3);
        U = Δᐃ.ⵠᐃᐃⲆⵠΔⲆ;
        m.save();
        m.translate(aq, 260);
        this.ΔⵠᐃΔⵠΔⲆ += Gx;
        m.rotate(this.ΔⵠᐃΔⵠΔⲆ);
        qp(m, U, -U.width / 2, -U.height / 2, U.width, U.height);
        m.restore();
        u = 1.05 + Math.cos(this.ΔⵠᐃΔⵠΔⲆ * 5) * 0.05;
        if (this.ⲆⲆΔⵠⲆⵠᐃ === 0) {
          var aa = u * (U = ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[this.ΔⵠᐃΔⲆΔⵠ].ⵠΔⵠ).width;
          var ba = u * U.height;
          qp(m, U, aq - aa / 2, 260 - ba / 2, aa, ba);
        } else if (this.ⲆⲆΔⵠⲆⵠᐃ === 1) {
          aa = u * (U = ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[0].ⵠΔⵠ).width;
          ba = U.height * u;
          qp(m, U, aq - aa / 2, 260 - ba / 2, aa, ba);
          aa = u * (U = ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ[this.ΔⵠᐃΔⲆΔⵠ].ⵠΔⵠ).width;
          ba = u * U.height;
          qp(m, U, aq - aa / 2, 260 - ba / 2, aa, ba);
        } else if (this.ⲆⲆΔⵠⲆⵠᐃ === 2) {
          aa = (U = ⲆⲆΔⲆ.ⲆⵠⲆΔ[this.ΔⵠᐃΔⲆΔⵠ].ⵠΔⵠ).width * u;
          ba = u * U.height;
          qp(m, U, aq - aa / 2, 180 - ba / 2, aa, ba);
          aa = (U = ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[0].ⵠΔⵠ).width * u;
          ba = u * U.height;
          qp(m, U, aq - aa / 2, 260 - ba / 2, aa, ba);
        } else if (this.ⲆⲆΔⵠⲆⵠᐃ === 3) {
          aa = u * (U = ⲆⲆΔⲆ.ⵠΔⲆΔᐃ[this.ΔⵠᐃΔⲆΔⵠ].ⵠΔⵠ).width;
          ba = U.height * u;
          m.save();
          m.translate(aq, 260);
          m.rotate(Math.PI);
          qp(m, U, -aa / 2, -ba / 2, aa, ba);
          m.restore();
        } else if (this.ⲆⲆΔⵠⲆⵠᐃ === 4) {
          aa = u * (U = ⲆⲆΔⲆ.ΔⵠΔⵠⵠ[this.ΔⵠᐃΔⲆΔⵠ].ⵠΔⵠ).width;
          ba = u * U.height;
          qp(m, U, aq - aa / 2, 260 - ba / 2, aa, ba);
        }
        U = this.ⵠᐃᐃⲆΔᐃΔ;
        qp(m, U, aq - U.width / 4, 340, U.width / 2, U.height / 2);
        U = this.ⲆⵠⵠᐃᐃⲆⵠ;
        qp(m, U, aq - U.width / 4, 365, U.width / 2, U.height / 2);
        if (this.ΔⵠᐃΔⵠΔⲆ > 6) {
          this.ᐃⲆⲆΔΔ = 0;
          P(M);
        }
        m.globalAlpha = 1;
      }
      zx.alert.ᐃⵠΔᐃ("#FFF", "#000");
      if (K.waiting) {
        this.ᐃᐃⲆⲆΔΔⵠ.ᐃⵠΔᐃ();
      }
    };
    var r = 0;
    var t = Math.pow(2, r++);
    var v = Math.pow(2, r++);
    this.ⵠᐃᐃΔᐃ = v;
    var c = Math.pow(2, r++);
    var C = Math.pow(2, r++);
    var M = Math.pow(2, r++);
    var f = Math.pow(2, r++);
    var z = Math.pow(2, r++);
    var u = Math.pow(2, r++);
    this.ⲆΔΔᐃⵠ = u;
    var w = Math.pow(2, r++);
    var y = Math.pow(2, r++);
    var A = Math.pow(2, r++);
    var x = Math.pow(2, r++);
    var J = Math.pow(2, r++);
    var B = Math.pow(2, r++);
    var D = Math.pow(2, r++);
    var E = Math.pow(2, r++);
    var I = Math.pow(2, r++);
    var Q = Math.pow(2, r++);
    var S = Math.pow(2, r++);
    var F = Math.pow(2, r++);
    var R = Math.pow(2, r++);
    var j = Math.pow(2, r++);
    var T = Math.pow(2, r++);
    var G = Math.pow(2, r++);
    var L = Math.pow(2, r++);
    this.ᐃⵠᐃΔⲆ = L;
    var O = Math.pow(2, r++);
    this.ⲆᐃΔΔⵠ = O;
    var N = Math.pow(2, r++);
    this.ⵠⲆⵠΔΔ = N;
    var q = Math.pow(2, r++);
    function H(a, b, c) {
      for (var d = 0; K.ⵠΔⵠⵠ.length > d; d++) {
        if ((K.ⵠΔⵠⵠ[d].view & a) !== 0) {
          K.ⵠΔⵠⵠ[d].active = b;
        }
      }
      for (d = 0; K.buttons.length > d; d++) {
        if ((K.buttons[d].view & a) !== 0) {
          K.buttons[d].info.active = b;
        }
      }
      for (d = 0; d < K.ΔΔΔΔΔ.length; d++) {
        if ((K.ΔΔΔΔΔ[d].view & a) !== 0) {
          K.ΔΔΔΔΔ[d].style.display = c;
        }
      }
    }
    this.ⵠⲆⵠⲆⲆ = t;
    function P(a) {
      if (K.ᐃᐃΔⲆΔⲆΔ !== false) {
        H(w, ea, "none");
        H(y, ea, "none");
        U();
        if (a !== K.ⵠⲆⵠⲆⲆ && K.ᐃⲆⲆΔΔ < 1) {
          K.ΔⲆⵠⵠⵠ.style.display = a === t || a === M || a === v || z === a || a === C || a === f ? "inline-block" : "none";
          H(K.ⵠⲆⵠⲆⲆ, ea, "none");
          K.ⵠⲆⵠⲆⲆ = a;
          H(K.ⵠⲆⵠⲆⲆ, fa, "inline-block");
        }
      }
    }
    function U() {
      var b = Number(ᐃΔⲆⲆ.get("starve_crate"));
      var c = Number(ᐃΔⲆⲆ.get("starve_dead"));
      var d = Number(ᐃΔⲆⲆ.get("starve_book"));
      var e = Number(ᐃΔⲆⲆ.get("starve_bag"));
      var f = Number(ᐃΔⲆⲆ.get("starve_skin"));
      var g = Number(ᐃΔⲆⲆ.get("starve_accessory"));
      if (xx.unlock.ⵠⲆᐃᐃ[xx.ⵠⲆᐃᐃ] <= 0) {
        xx.ⵠⲆᐃᐃ = xx.unlock.ⵠⲆᐃᐃ[f] > 0 ? f : 0;
      }
      if (xx.unlock.ⲆⵠᐃⲆᐃ[xx.ⲆⵠᐃⲆᐃ] <= 0) {
        xx.ⲆⵠᐃⲆᐃ = xx.unlock.ⲆⵠᐃⲆᐃ[d] > 0 ? d : 0;
      }
      if (xx.unlock.ΔᐃΔⵠΔ[xx.ΔᐃΔⵠΔ] <= 0) {
        xx.ΔᐃΔⵠΔ = xx.unlock.ΔᐃΔⵠΔ[c] > 0 ? c : 0;
      }
      if (xx.unlock.ᐃΔⲆⵠⲆ[xx.ᐃΔⲆⵠⲆ] <= 0) {
        xx.ᐃΔⲆⵠⲆ = xx.unlock.ᐃΔⲆⵠⲆ[b] > 0 ? b : 0;
      }
      if (xx.unlock.ⵠΔⵠⲆⲆ[xx.ⵠΔⵠⲆⲆ] <= 0) {
        xx.ⵠΔⵠⲆⲆ = xx.unlock.ⵠΔⵠⲆⲆ[g] > 0 ? g : 0;
      }
      if (xx.unlock.ᐃΔⲆΔΔ[xx.ᐃΔⲆΔΔ] <= 0) {
        xx.ᐃΔⲆΔΔ = xx.unlock.ᐃΔⲆΔΔ[e] > 0 ? e : 0;
      }
    }
    function W(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          if (b !== undefined) {
            b(d.responseText);
          }
        } else if (this.readyState == 4 && c !== undefined) {
          c();
        }
      };
      d.send();
    }
    function X(a) {
      if (zx.ΔⲆΔⲆᐃⲆⵠ !== undefined && zx.ΔⲆΔⵠⵠᐃᐃ !== mi && zx.ⵠⵠᐃⲆⲆΔⲆ !== tk && zx.ΔᐃⲆᐃⲆⲆᐃ !== undefined) {
        a();
      }
    }
    function Y() {
      U();
      if (Kx % 2) {
        console.log(undefined);
        Bx.connect();
      } else {
        console.log(undefined);
        if (_a.Widget.isBlocked === 1) {
          _a.Widget.createAdPlayer(Bx.connect.bind(Bx), Bx.connect.bind(Bx));
        } else {
          _a.Widget.preroll();
          _a.Widget.play = Bx.connect.bind(Bx);
        }
      }
    }
    this.ⵠⵠΔᐃⵠΔⵠ = 0;
    this.ⲆΔᐃⵠ = P;
    this.ⵠΔΔⵠⲆⲆΔ = function (b, a) {
      let e = 0;
      let c = "0";
      if (Wx) {
        c = Wx + mr.ΔΔⲆΔⵠΔⵠ();
      }
      if (zx.ΔⲆΔⲆᐃⲆⵠ) {
        X(b);
      } else {
        W(`${Px}token?id=${c}`, function (c) {
          if (e === 1) {
            return;
          }
          const d = c.split("_");
          const f = d[0] + "_";
          const g = Number(d[1]);
          const a = Math.abs(function (a) {
            return on(a, 8260, 46947, 8004, 37330, 5330);
          }(g));
          zx.ΔⲆΔⲆᐃⲆⵠ = f + a;
          X(b);
        }, function () {
          if (e !== 1) {
            if (a === 1) {
              e = 1;
              b();
              return;
            } else {
              K.waiting = pa;
              return;
            }
          }
        });
      }
      W(`${Qx}let`, function (j) {
        if (e === 1) {
          return;
        }
        j = j.split(":");
        var q = 202;
        if (q > 9) {
          q = 189;
        }
        Math.floor(29[29 .ⵠⵠⵠⵠΔᐃⵠ]);
        var t = 80;
        Math.floor(127[127 .ⵠᐃⲆᐃᐃᐃⲆ]);
        if (t == 1) {
          t = 89;
        }
        {
          var E = 9;
          if (E >= 6) {
            E = 223;
          }
          var F = 153;
          if (F === 5) {
            F = 125;
          }
          const a = j[0].split("_");
          var G = 245;
          if (G > 7) {
            G = 5;
          }
          if (5 <= 10) {
            189;
          }
          const c = 173;
          var H = 95;
          0;
          ({}).ⵠⵠⲆΔΔⵠΔΔΔ = 4;
          if (H >= 11) {
            H = 39;
          }
          if (173 > 32) {
            25;
          }
          if (243 == 89) {
            129;
          }
          const e = a[0] + "_";
          const f = 98;
          Math.floor(98[f.ⲆⲆⲆⲆΔⲆᐃ]);
          var I = 53;
          if (I >= 2) {
            I = 167;
          }
          const g = 127;
          if (105 == 241) {
            52;
          }
          let h = 58;
          const i = 34;
          Math.floor(34[i.ⲆΔⵠΔᐃΔⵠ]);
          if (h === 127) {
            204;
          }
          if (254 == 189) {
            250;
          }
          const b = Number(a[1]);
          const d = Math.abs(ab(b));
          zx.ΔⲆΔⵠⵠᐃᐃ = e + d;
          zx.ΔⲆⲆⵠⵠⵠⲆ = d;
        }
        var K = 253;
        if (K >= 5) {
          K = 31;
        }
        {
          var L = 55;
          if (L === 3) {
            L = 188;
          }
          const a = j[1].split("_");
          const b = a[0] + "_";
          var N = 3;
          var O = 178;
          if (O == 0) {
            O = 139;
          }
          if (N === 5) {
            N = 185;
          }
          const c = Number(a[1]);
          var Q = 174;
          if (171 == 96) {
            244;
          }
          if (Q === 2) {
            Q = 243;
          }
          const d = Math.abs(Nx(c));
          zx.ⵠⵠᐃⲆⲆΔⲆ = b + d;
          var R = 109;
          ({}).ⵠⲆⲆⲆⲆΔΔⵠᐃ = 4;
          var S = 24;
          if (S >= 11) {
            S = 41;
          }
          var U = 77;
          if (U === 11) {
            U = 59;
          }
          236 .ⵠᐃⲆⲆⲆᐃᐃⵠᐃ = 7;
          var V = 43;
          if (V > 12) {
            V = 231;
          }
          var W = 40;
          if (W > 11) {
            W = 17;
          }
          var Y = 225;
          var Z = 33;
          if (Z == 12) {
            Z = 176;
          }
          if (Y >= 6) {
            Y = 235;
          }
          if (R === 4) {
            R = 124;
          }
          118 .ⵠΔⲆᐃⲆΔᐃᐃᐃ = 8;
          zx.ΔᐃΔᐃΔⲆᐃⲆΔ = d;
          var _ = 80;
          if (_ === 11) {
            _ = 175;
          }
        }
        Math.floor(235[235 .ⲆΔᐃᐃⲆⵠⲆ]);
        var aa = 113;
        if (aa === 0) {
          aa = 27;
        }
        {
          if (234 === 27) {
            208;
          }
          const b = j[2].split("_");
          if (94 <= 10) {
            180;
          }
          if (153 > 21) {
            133;
          }
          var ba = 169;
          if (ba >= 11) {
            ba = 147;
          }
          if (90 === 137) {
            108;
          }
          var ca = 192;
          if (ca == 8) {
            ca = 142;
          }
          if (78 > 252) {
            35;
          }
          var da = 243;
          if (da == 4) {
            da = 202;
          }
          const c = b[0] + "_";
          var ea = 113;
          if (ea >= 7) {
            ea = 61;
          }
          const d = Number(b[1]);
          let e = 11;
          251 .ⲆⲆΔⵠⵠᐃΔⲆΔ = 12;
          var fa = 146;
          if (fa === 3) {
            fa = 192;
          }
          if (43 > 245) {
            102;
          }
          if (e > 3) {
            59;
          }
          var ha = 6;
          if (ha === 8) {
            ha = 91;
          }
          const f = Math.abs(Nx(d));
          zx.ΔᐃⲆᐃⲆⲆᐃ = c + f;
          if (226 <= 145) {
            216;
          }
          zx.ⲆⲆⲆⲆᐃⲆⵠᐃΔ = f;
          if (169 > 102) {
            148;
          }
        }
        var ia = 85;
        if (ia === 6) {
          ia = 103;
        }
        X(b);
      }, function () {
        if (e !== 1) {
          if (a === 1) {
            e = 1;
            b();
            return;
          } else {
            K.waiting = yg;
            return;
          }
        }
      });
    };
    this.ΔⲆⲆⵠΔᐃᐃ = function () {
      if (K.waiting === false) {
        zx.reconnect.enabled = false;
        K.waiting = Kh;
        K.ⵠΔΔⵠⲆⲆΔ(Y);
      }
    };
    var Z = 1;
    var _ = 2;
    var aa = 4;
    var ba = 8;
    var ca = 16;
    var da = 32;
    var ea = 0;
    var fa = 1;
    if (_a.innerWidth < 1300) {
      this.ⵠⲆⵠΔⵠ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: fa,
        position: aa | Z,
        view: t,
        translate: {
          x: 0,
          ᐃᐃΔΔᐃ: 184,
          y: 0,
          ᐃⵠΔⲆⵠ: 200
        }
      };
    } else {
      this.ⵠⲆⵠΔⵠ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: fa,
        position: aa | ca,
        view: t,
        translate: {
          ᐃᐃΔΔᐃ: 184,
          ᐃⵠΔⲆⵠ: -180,
          y: 0,
          x: 0
        }
      };
    }
    this.ⵠⲆⵠΔⵠ.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (a.keyCode == 13 && !K.waiting && !K.ΔⵠⲆⵠⵠⲆΔΔΔ) {
        K.ΔⲆⲆⵠΔᐃᐃ();
      }
    });
    this.ⵠⲆⵠΔⵠ.input.value = ᐃΔⲆⲆ.get("starve_nickname") ? ᐃΔⲆⲆ.get("starve_nickname") : "";
    this.ΔΔΔΔᐃΔⲆⲆⵠ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: ea,
      position: aa | ca,
      view: v,
      translate: {
        ᐃⵠΔⲆⵠ: -122,
        y: 0,
        x: 0,
        ᐃᐃΔΔᐃ: 110
      }
    };
    if (_a.innerWidth < 1300) {
      this.ᐃⵠⲆᐃⲆ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: fa,
        position: aa | Z,
        view: t,
        translate: {
          y: 0,
          ᐃⵠΔⲆⵠ: 208,
          x: 0,
          ᐃᐃΔΔᐃ: 225
        }
      };
    } else {
      this.ᐃⵠⲆᐃⲆ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: fa,
        position: aa | ca,
        view: t,
        translate: {
          y: 0,
          ᐃᐃΔΔᐃ: 225,
          x: 0,
          ᐃⵠΔⲆⵠ: -180
        }
      };
    }
    this.ΔⵠⲆᐃ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: ea,
      position: aa | ca,
      view: z,
      translate: {
        ᐃᐃΔΔᐃ: 190,
        y: 0,
        x: 0,
        ᐃⵠΔⲆⵠ: -294.5
      }
    };
    this.ⵠᐃᐃⲆΔΔΔⵠⵠ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: ea,
      position: aa | ca,
      view: v,
      translate: {
        x: 0,
        y: 0,
        ᐃᐃΔΔᐃ: 187,
        ᐃⵠΔⲆⵠ: 125
      }
    };
    this.ⵠΔⲆⵠᐃΔᐃⵠⲆ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: ea,
      position: aa | ca,
      view: N,
      translate: {
        y: 0,
        x: 0,
        ᐃⵠΔⲆⵠ: -260,
        ᐃᐃΔΔᐃ: 350
      }
    };
    r = 0;
    this.ΔΔΔΔΔ = [];
    this.ΔΔΔΔΔ[r++] = this.ⵠⲆⵠΔⵠ;
    this.ΔΔΔΔΔ[r++] = this.ᐃⵠⲆᐃⲆ;
    this.ΔΔΔΔΔ[r++] = this.ΔⵠⲆᐃ;
    this.ΔΔΔΔΔ[r++] = this.ΔΔΔΔᐃΔⲆⲆⵠ;
    this.ΔΔΔΔΔ[r++] = this.ⵠᐃᐃⲆΔΔΔⵠⵠ;
    this.ΔΔΔΔΔ[r++] = this.ⵠΔⲆⵠᐃΔᐃⵠⲆ;
    r = 0;
    this.ⵠΔⵠⵠ = [];
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ⵠⲆⲆᐃⵠⲆⵠ, fa, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ⵠⵠΔΔᐃΔⲆ, ea, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ᐃΔⲆΔᐃΔⲆ, ea, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ⵠⲆⵠᐃⵠΔⲆ, ea, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ΔⲆⵠⲆΔⲆᐃ, ea, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ᐃΔΔⵠⲆⲆᐃ, ea, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ⲆⵠΔⲆⲆᐃⲆ, ea, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ⵠⵠᐃⵠⵠΔⵠ, ea, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ⵠΔⲆΔⲆⲆᐃ, ea, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ⵠΔΔⲆⵠⲆᐃ, ea, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ΔΔⲆⲆᐃⵠΔ, ea, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ⵠᐃⲆᐃⲆⲆⲆ, ea, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ⵠᐃΔᐃⲆᐃΔ, ea, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ΔᐃΔⲆΔΔᐃ, ea, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ᐃΔⵠΔⵠΔⲆ, ea, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ᐃΔᐃⵠⵠᐃᐃ, ea, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ΔⵠⲆΔΔΔΔ, ea, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ⵠΔⲆⵠᐃⵠⵠ, ea, 0, 0, Z);
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ᐃΔΔΔⵠΔⲆ, ea, 0, 0, Z);
    if (_a.innerWidth < 1300) {
      this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⵠⲆⵠΔᐃΔⵠ, fa, 200, 100, aa | Z);
    } else {
      this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⵠⲆⵠΔᐃΔⵠ, fa, -753 / 4, 100, aa | ca);
    }
    this.ⵠΔⵠⵠ[r++].view = t;
    this.ⵠΔⵠⵠ[r++] = Af(Δᐃ.ᐃⵠΔⲆΔᐃᐃ, fa, 403, -10, _);
    if (_a.innerWidth > 1300) {
      this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⵠⵠΔⵠⲆⲆⲆ, fa, -885 / 4, -319 / 2, ba | ca);
      this.ⵠΔⵠⵠ[r++].view = t;
    }
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⲆⲆᐃⵠⵠᐃⵠ, ea, -323.25, 100, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = v;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⲆⲆⲆΔΔⲆⵠ, ea, -1425 / 4, 100, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = C;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ΔΔᐃⲆⲆⲆⲆ, ea, -905 / 4, 50, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = c;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⵠⵠⲆΔⲆⲆᐃ, ea, -402, 130, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = M;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⲆΔⲆⵠⲆᐃΔ, ea, -279.25, 130, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = L;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⲆⲆᐃᐃΔⵠᐃ, ea, -305.5, 130, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = O;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ᐃΔⲆⵠΔΔⵠ, ea, -1222 / 4, 100, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = N;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⵠⲆᐃᐃΔⲆⵠ, ea, -Δᐃ.ⵠⲆᐃᐃΔⲆⵠ.width / 4 - 350, -15, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = q;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ᐃⵠⵠᐃᐃⵠⵠ, ea, -1497 / 4, 110, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = f;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⵠⵠⲆⲆᐃᐃⲆ, ea, -306.5, 100, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = z;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⵠⵠΔⲆᐃⵠⲆ, ea, -1381 / 4, 80, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = u;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ᐃⵠΔᐃⵠⲆᐃ, ea, -385.5, 150, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = A;
    var ha = 3.6;
    var ia = this.ⵠΔⲆΔⲆⵠⵠ([["#25c5d6", ha * 3], ["#e2cf27", ha * 10], ["#afac98", 108], ["#d88e23", ha * 57]]);
    this.ⵠΔⵠⵠ[r] = Af(ia, ea, -ia.width / 4, 178, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = A;
    this.ⵠⵠⵠᐃⵠΔⲆⲆⵠ = function (b, c, d) {
      var e;
      K.ᐃⲆⲆΔΔ = 1;
      K.ΔᐃᐃΔⲆΔᐃ = 0;
      K.ΔⵠᐃΔⵠΔⲆ = 0;
      K.ⵠᐃⵠᐃᐃⲆⵠ = b;
      K.ⲆⲆΔⵠⲆⵠᐃ = c;
      var f = 0;
      if (c === 0) {
        for (f = 0; f < ⲆⲆΔⲆ.Δⵠᐃⵠⵠ.length && d !== ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[f].id; f++);
        e = ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[f];
        K.unlock.ⵠⲆᐃᐃ[f] = 1;
      } else if (c === 1) {
        for (f = 0; f < ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ.length && ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ[f].id !== d; f++);
        e = ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ[f];
        K.unlock.ⵠΔⵠⲆⲆ[f] = 1;
      } else if (c === 2) {
        for (f = 0; ⲆⲆΔⲆ.ⲆⵠⲆΔ.length > f && d !== ⲆⲆΔⲆ.ⲆⵠⲆΔ[f].id; f++);
        e = ⲆⲆΔⲆ.ⲆⵠⲆΔ[f];
        K.unlock.ᐃΔⲆΔΔ[f] = 1;
      } else if (c === 3) {
        for (f = 0; ⲆⲆΔⲆ.ⵠΔⲆΔᐃ.length > f && d !== ⲆⲆΔⲆ.ⵠΔⲆΔᐃ[f].id; f++);
        e = ⲆⲆΔⲆ.ⵠΔⲆΔᐃ[f];
        K.unlock.ⲆⵠᐃⲆᐃ[f] = 1;
      } else if (c === 4) {
        for (f = 0; ⲆⲆΔⲆ.ΔⵠΔⵠⵠ.length > f && d !== ⲆⲆΔⲆ.ΔⵠΔⵠⵠ[f].id; f++);
        e = ⲆⲆΔⲆ.ΔⵠΔⵠⵠ[f];
        K.unlock.ᐃΔⲆⵠⲆ[f] = 1;
        K.unlock.ΔᐃΔⵠΔ[f] = 1;
      }
      K.ΔⵠᐃΔⲆΔⵠ = f;
      K.ⲆⵠⵠᐃᐃⲆⵠ = wf("by " + e.ᐃΔⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, es, undefined, undefined, undefined, "#000000", 24);
      K.ⵠᐃᐃⲆΔᐃΔ = wf(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, undefined, 30, 24, hg, undefined, undefined, es, "#000000", 20);
    };
    this.ᐃⲆⲆΔΔ = 0;
    this.ΔᐃᐃΔⲆΔᐃ = 0;
    this.ⵠᐃⵠᐃᐃⲆⵠ = 0;
    this.ⲆⲆΔⵠⲆⵠᐃ = 0;
    this.ΔⵠᐃΔⵠΔⲆ = 0;
    this.ⲆⵠⵠᐃᐃⲆⵠ = Wd;
    this.ⵠᐃᐃⲆΔᐃΔ = es;
    var ja = 197;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ΔⵠⵠⲆⲆΔⲆ, ea, -1542 / 4, 150, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = D;
    ia = this.ⵠΔⲆΔⲆⵠⵠ([["#d45ce5", ha * 3], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", ha * 57]]);
    this.ⵠΔⵠⵠ[r] = Af(ia, ea, -ia.width / 4, 178, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = D;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⵠΔⵠᐃⲆᐃΔ, ea, -385.5, 150, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = J;
    ia = this.ⵠΔⲆΔⲆⵠⵠ([["#d33a2a", 10.8], ["#d45ce5", ha * 10], ["#25c5d6", 108], ["#e2cf27", ha * 57]]);
    this.ⵠΔⵠⵠ[r] = Af(ia, ea, -ia.width / 4, 178, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = J;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⵠⲆⲆⲆⲆⲆᐃ, ea, -1542 / 4, 150, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = B;
    ia = this.ⵠΔⲆΔⲆⵠⵠ([["#25c5d6", ha * 3], ["#e2cf27", 36], ["#afac98", 108], ["#d88e23", ha * 57]]);
    this.ⵠΔⵠⵠ[r] = Af(ia, ea, -ia.width / 4, 178, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = B;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ΔᐃⲆⵠⵠᐃᐃ, ea, -1542 / 4, 150, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = x;
    ia = this.ⵠΔⲆΔⲆⵠⵠ([["#d45ce5", 10.8], ["#25c5d6", ha * 10], ["#e2cf27", 108], ["#afac98", ha * 57]]);
    this.ⵠΔⵠⵠ[r] = Af(ia, ea, -ia.width / 4, 178, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = x;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ᐃᐃⵠΔΔⲆⲆ, ea, -385.5, 150, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = E;
    ia = this.ⵠΔⲆΔⲆⵠⵠ([["#d33a2a", 10.8], ["#d45ce5", ha * 10], ["#25c5d6", 108], ["#e2cf27", ha * 57]]);
    this.ⵠΔⵠⵠ[r] = Af(ia, ea, -ia.width / 4, 178, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = E;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ΔⲆⵠⵠⲆΔᐃ, ea, -1366 / 4, 100, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = I;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⲆⵠᐃⵠⵠⲆΔ, ea, -1366 / 4, 100, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = R;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⵠΔⵠᐃⵠⵠⵠ, ea, -1366 / 4, 100, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = S;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ᐃᐃⲆⵠᐃⲆⵠ, ea, -341.5, 100, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = F;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⲆⵠΔⲆΔᐃΔ, ea, -341.5, 100, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = Q;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⲆⵠΔᐃⲆⵠΔ, ea, -341.5, 100, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = j;
    ⵠᐃⲆⵠⲆᐃⲆ = r++;
    this.ⵠΔⵠⵠ[ⵠᐃⲆⵠⲆᐃⲆ] = Af(Δᐃ.ⵠᐃⲆⵠⲆᐃⲆ, ea, 484, 0, aa);
    ⲆⵠⲆΔᐃΔΔ = r++;
    this.ⵠΔⵠⵠ[ⲆⵠⲆΔᐃΔΔ] = Af(Δᐃ.ⲆⵠⲆΔᐃΔΔ, ea, 812.5, 0, aa);
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⵠᐃᐃΔᐃΔⵠ, ea, -189.5, -5, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = y;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ΔⲆΔⲆΔⲆⵠ, ea, -189.5, -5, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = w;
    ⵠᐃᐃⵠⲆᐃᐃ = r++;
    this.ⵠΔⵠⵠ[ⵠᐃᐃⵠⲆᐃᐃ] = Af(Δᐃ.ᐃⲆⵠᐃᐃⲆⵠ, fa, 93, 30, aa);
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ΔΔΔⵠⲆⲆΔ, ea, -173, 110, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = T;
    this.ⵠΔⵠⵠ[r] = Af(Δᐃ.ⵠⵠⲆⵠΔⵠΔ, ea, -173, 110, aa | ca);
    this.ⵠΔⵠⵠ[r++].view = G;
    r = 0;
    this.buttons = [];
    this.buttons[r] = yf(50, 57, 0, [Δᐃ.ⲆⲆⵠᐃⵠⵠⲆ, Δᐃ.ⵠⲆᐃᐃΔⵠᐃ, Δᐃ.ΔⲆᐃΔΔᐃⵠ], 1, 0, function () {
      if (K.ⲆⲆᐃΔⲆ()) {
        P(u);
      } else {
        P(c);
      }
    }, 320, 0, Z, fa);
    r++;
    if (_a.innerWidth < 1300) {
      this.buttons[r] = yf(202, 97, 0, [Δᐃ.ⵠⵠⵠΔΔΔⵠ, Δᐃ.ᐃᐃⲆⵠΔⵠⲆ, Δᐃ.ΔΔΔᐃⵠⵠᐃ], 1, 0, this.ΔⲆⲆⵠΔᐃᐃ, 462, 235, aa | Z, fa);
    } else {
      this.buttons[r] = yf(202, 97, 0, [Δᐃ.ⵠⵠⵠΔΔΔⵠ, Δᐃ.ᐃᐃⲆⵠΔⵠⲆ, Δᐃ.ΔΔΔᐃⵠⵠᐃ], 1, 0, this.ΔⲆⲆⵠΔᐃᐃ, 74, 235, aa | ca, fa);
    }
    this.buttons[r].view = t;
    r++;
    if (_a.innerWidth > 1300) {
      this.buttons[r] = yf(355, 168, 0, [Δᐃ.ᐃΔΔᐃⲆⲆⲆ, Δᐃ.ᐃΔΔᐃⲆⲆⲆ, Δᐃ.ᐃΔΔᐃⲆⲆⲆ], 1, 0, function () {
        _a.open("./changelog.html", "_blank");
      }, -195, -115, ba | ca, fa);
      this.buttons[r++].view = t;
      this.buttons[r] = yf(355, 168, 0, [Δᐃ.ΔⵠᐃⵠΔΔⵠ, Δᐃ.ΔⵠᐃⵠΔΔⵠ, Δᐃ.ΔⵠᐃⵠΔΔⵠ], 1, 0, function () {
        _a.open("https://taming.io", "_blank");
      }, 20, -115, ba | ca, fa);
      this.buttons[r++].view = t;
    }
    this.buttons[r++] = yf(80, 80, 0, [Δᐃ.ⲆⲆᐃⲆⵠᐃᐃ, Δᐃ.ⵠᐃΔⲆⲆᐃΔ, Δᐃ.ᐃᐃΔⲆⲆᐃᐃ], 1, 0, function () {
      _a.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, 10, _, fa);
    this.buttons[r++] = yf(80, 80, 0, [Δᐃ.ᐃⲆΔΔΔⲆΔ, Δᐃ.ⲆⲆⵠⲆⵠΔΔ, Δᐃ.ᐃⲆⲆⵠⲆⵠⲆ], 1, 0, function () {
      _a.open("https://discord.gg/starveio", "_blank");
    }, 330, 10, _, fa);
    this.buttons[r++] = yf(80, 80, 0, [Δᐃ.ᐃΔΔᐃᐃΔⵠ, Δᐃ.ⵠⵠⵠΔᐃⵠⵠ, Δᐃ.ΔᐃΔⵠⵠⵠᐃ], 1, 0, function () {
      _a.open("https://reddit.com/r/starveio", "_blank");
    }, 280, 10, _, fa);
    this.buttons[r++] = yf(80, 80, 0, [Δᐃ.ⲆΔⵠⵠΔⲆΔ, Δᐃ.ΔⵠᐃⲆΔΔᐃ, Δᐃ.ᐃⵠᐃᐃᐃⵠⵠ], 1, 0, function () {
      _a.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, 10, _, fa);
    this.buttons[r++] = yf(80, 80, 0, [Δᐃ.ⵠⲆⵠⲆᐃᐃⲆ, Δᐃ.ⵠⵠⵠᐃΔᐃΔ, Δᐃ.ⲆⲆᐃΔⲆⵠΔ], 1, 0, function () {
      _a.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, 10, _, fa);
    this.buttons[r++] = yf(80, 80, 0, [Δᐃ.ᐃᐃⲆᐃΔⵠⲆ, Δᐃ.ⲆᐃᐃΔⵠᐃᐃ, Δᐃ.ⵠⵠᐃΔᐃᐃᐃ], 1, 0, function () {
      _a.open("https://twitter.com/lapamauve", "_blank");
    }, 105, 10, _, fa);
    this.buttons[r++] = yf(80, 80, 0, [Δᐃ.ΔⵠᐃᐃΔⲆⵠ, Δᐃ.ⵠΔᐃΔΔⵠᐃ, Δᐃ.ᐃⵠΔⲆⲆᐃⲆ], 1, 0, function () {
      _a.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, 10, _, fa);
    ᐃᐃᐃⵠᐃⲆⲆ = r++;
    this.buttons[ᐃᐃᐃⵠᐃⲆⲆ] = yf(232, 142, 0, [Δᐃ.ΔᐃΔⵠⵠΔⵠ, Δᐃ.ΔⵠⵠⲆⲆΔΔ, Δᐃ.ᐃⵠⲆᐃⲆᐃᐃ], 1, 0, function () {
      P(z);
      wy(xx.ⵠⲆⲆΔᐃⵠⵠ, xx.ΔⵠᐃΔⵠᐃΔ, xx.ΔⲆΔⲆⲆⲆⲆ, xx.ⵠⲆᐃΔⲆⵠΔ);
    }, -5, 573, Z, fa);
    this.buttons[r++] = yf(236, 165, 0, [Δᐃ.ⲆⲆⲆΔⲆⲆⲆ, Δᐃ.ⲆⲆⲆΔⲆⲆⲆ, Δᐃ.ⲆⲆⲆΔⲆⲆⲆ], 1, 1, function () {
      P(z);
    }, -5, 566, Z, fa);
    ΔᐃⵠⵠⲆᐃᐃ = r++;
    this.buttons[ΔᐃⵠⵠⲆᐃᐃ] = yf(236, 165, 0, [Δᐃ.ⵠⵠᐃΔΔᐃⲆ, Δᐃ.ⲆᐃΔⵠᐃⵠᐃ, Δᐃ.ⲆΔⲆⲆΔᐃⲆ], 1, 0, function () {
      P(f);
    }, -5, 494, Z, fa);
    this.buttons[r++] = yf(236, 165, 0, [Δᐃ.ⲆᐃⵠᐃⵠⲆΔ, Δᐃ.ⲆᐃⵠᐃⵠⲆΔ, Δᐃ.ⲆᐃⵠᐃⵠⲆΔ], 1, 1, function () {
      P(f);
    }, -5, 494, Z, fa);
    ᐃⵠᐃᐃⵠᐃⲆ = r++;
    this.buttons[ᐃⵠᐃᐃⵠᐃⲆ] = yf(236, 165, 0, [Δᐃ.ⵠⵠᐃΔΔᐃⲆ, Δᐃ.ⲆᐃΔⵠᐃⵠᐃ, Δᐃ.ⲆΔⲆⲆΔᐃⲆ], 1, 0, function () {
      if (K.ⲆⲆᐃΔⲆ()) {
        if (xx.ᐃⵠⲆⵠᐃΔΔ - Date.now() > 0) {
          P(N);
        } else {
          P(L);
        }
      } else {
        P(c);
      }
    }, -5, 415, Z, fa);
    this.buttons[r++] = yf(236, 165, 0, [Δᐃ.ΔΔΔΔⲆⲆⲆ, Δᐃ.ΔΔΔΔⲆⲆⲆ, Δᐃ.ΔΔΔΔⲆⲆⲆ], 1, 1, function () {
      if (K.ⲆⲆᐃΔⲆ()) {
        if (xx.ᐃⵠⲆⵠᐃΔΔ - Date.now() > 0) {
          P(N);
        } else {
          P(L);
        }
      } else {
        P(c);
      }
    }, -5, 415, Z, fa);
    ᐃΔⲆᐃᐃΔⵠ = r++;
    this.buttons[ᐃΔⲆᐃᐃΔⵠ] = yf(236, 165, 0, [Δᐃ.ⵠⵠᐃΔΔᐃⲆ, Δᐃ.ⲆᐃΔⵠᐃⵠᐃ, Δᐃ.ⲆΔⲆⲆΔᐃⲆ], 1, 0, function () {
      P(M);
    }, -5, 336, Z, fa);
    this.buttons[r++] = yf(236, 165, 0, [Δᐃ.ΔⵠΔᐃⵠⵠΔ, Δᐃ.ΔⵠΔᐃⵠⵠΔ, Δᐃ.ΔⵠΔᐃⵠⵠΔ], 1, 1, function () {
      P(M);
    }, -5, 336, Z, fa);
    ⲆΔⲆⵠⵠᐃⲆ = r++;
    this.buttons[ⲆΔⲆⵠⵠᐃⲆ] = yf(236, 165, 0, [Δᐃ.ⵠⵠᐃΔΔᐃⲆ, Δᐃ.ⲆᐃΔⵠᐃⵠᐃ, Δᐃ.ⲆΔⲆⲆΔᐃⲆ], 1, 0, function () {
      P(C);
    }, -5, 257, Z, fa);
    this.buttons[r++] = yf(236, 165, 0, [Δᐃ.ᐃⲆΔᐃⵠΔⵠ, Δᐃ.ᐃⲆΔᐃⵠΔⵠ, Δᐃ.ᐃⲆΔᐃⵠΔⵠ], 1, 1, function () {
      P(C);
    }, -5, 257, Z, fa);
    ⲆⵠᐃⲆⲆᐃⲆ = r++;
    this.buttons[ⲆⵠᐃⲆⲆᐃⲆ] = yf(236, 165, 0, [Δᐃ.ⵠⵠᐃΔΔᐃⲆ, Δᐃ.ⲆᐃΔⵠᐃⵠᐃ, Δᐃ.ⲆΔⲆⲆΔᐃⲆ], 1, 0, function () {
      P(t);
    }, -5, 178, Z, fa);
    this.buttons[r++] = yf(236, 165, 0, [Δᐃ.ᐃΔΔⵠⵠⲆⲆ, Δᐃ.ᐃΔΔⵠⵠⲆⲆ, Δᐃ.ᐃΔΔⵠⵠⲆⲆ], 1, 1, function () {
      P(t);
    }, -5, 178, Z, fa);
    ⵠᐃᐃⵠΔⵠⲆ = r++;
    this.ⵠᐃᐃⵠΔⵠⲆ = ⵠᐃᐃⵠΔⵠⲆ;
    this.buttons[ⵠᐃᐃⵠΔⵠⲆ] = yf(324, 222, 0, [Δᐃ.ᐃⲆⲆⲆⵠⵠΔ, Δᐃ.ⲆⵠΔᐃⲆᐃᐃ, Δᐃ.ΔⲆᐃΔᐃᐃⲆ], 1, 0, function () {
      P(c);
    }, 0, 70, Z, fa);
    ΔᐃⵠᐃΔⵠⲆ = r++;
    ᐃᐃΔΔⵠΔⵠ = r++;
    this.ΔᐃⵠᐃΔⵠⲆ = ΔᐃⵠᐃΔⵠⲆ;
    this.ᐃᐃΔΔⵠΔⵠ = ᐃᐃΔΔⵠΔⵠ;
    this.buttons[ΔᐃⵠᐃΔⵠⲆ] = yf(324, 222, 0, [Δᐃ.ⲆᐃᐃΔΔⵠⵠ, Δᐃ.ⲆⲆΔⲆⵠⵠⲆ, Δᐃ.ΔⲆΔⵠΔΔⲆ], 1, 0, function () {
      P(v);
      ra(-1);
    }, 0, 70, Z, ea);
    this.buttons[ᐃᐃΔΔⵠΔⵠ] = yf(324, 222, 0, [Δᐃ.ᐃᐃⵠⲆΔⲆΔ, Δᐃ.ᐃᐃⵠⲆΔⲆΔ, Δᐃ.ᐃᐃⵠⲆΔⲆΔ], 1, 1, function () {
      P(v);
      ra(-1);
    }, 0, 70, Z, ea);
    if (Bx.ⲆᐃᐃⵠᐃᐃΔ === 0) {
      var ka = r++;
      if (_a.innerWidth < 1300) {
        this.buttons[ka] = yf(266, 176, 0, [Δᐃ.ᐃⵠΔⲆⵠᐃΔ, Δᐃ.ΔᐃⲆᐃΔⵠⵠ, Δᐃ.ᐃⵠⵠⲆΔⲆᐃ], 1, 0, function () {
          Bx.ⵠⲆⲆⵠⵠ(0);
        }, 150, 300, Z | aa, fa);
      } else {
        this.buttons[ka] = yf(266, 176, 0, [Δᐃ.ᐃⵠΔⲆⵠᐃΔ, Δᐃ.ΔᐃⲆᐃΔⵠⵠ, Δᐃ.ᐃⵠⵠⲆΔⲆᐃ], 1, 0, function () {
          Bx.ⵠⲆⲆⵠⵠ(0);
        }, -340, 100, ca | aa, fa);
      }
      this.buttons[ka].view = t;
      this.buttons[ka].hint = 0;
      var la = r++;
      if (_a.innerWidth < 1300) {
        this.buttons[la] = yf(266, 176, 0, [Δᐃ.ⵠⵠⵠΔΔⵠᐃ, Δᐃ.ⲆⲆⲆΔⲆᐃᐃ, Δᐃ.ΔⲆᐃⵠⲆⵠⵠ], 1, 0, function () {
          Bx.ⵠⲆⲆⵠⵠ(4);
        }, 150, 400, Z | aa, fa);
      } else {
        this.buttons[la] = yf(266, 176, 0, [Δᐃ.ⵠⵠⵠΔΔⵠᐃ, Δᐃ.ⲆⲆⲆΔⲆᐃᐃ, Δᐃ.ΔⲆᐃⵠⲆⵠⵠ], 1, 0, function () {
          Bx.ⵠⲆⲆⵠⵠ(4);
        }, -340, 200, ca | aa, fa);
      }
      this.buttons[la].view = t;
      this.buttons[la].hint = 0;
      var ma = r++;
      if (_a.innerWidth < 1300) {
        this.buttons[ma] = yf(266, 176, 0, [Δᐃ.ΔᐃΔΔΔΔⵠ, Δᐃ.ᐃΔᐃΔⲆⵠⵠ, Δᐃ.ᐃᐃᐃΔᐃⵠΔ], 1, 0, function () {
          Bx.ⵠⲆⲆⵠⵠ(6);
        }, 450, 300, Z | aa, fa);
      } else {
        this.buttons[ma] = yf(266, 176, 0, [Δᐃ.ΔᐃΔΔΔΔⵠ, Δᐃ.ᐃΔᐃΔⲆⵠⵠ, Δᐃ.ᐃᐃᐃΔᐃⵠΔ], 1, 0, function () {
          Bx.ⵠⲆⲆⵠⵠ(6);
        }, -340, 300, ca | aa, fa);
      }
      this.buttons[ma].view = t;
      this.buttons[ma].hint = 0;
      var na = r++;
      if (_a.innerWidth < 1300) {
        this.buttons[na] = yf(266, 176, 0, [Δᐃ.ⲆⵠⵠⵠΔⵠⲆ, Δᐃ.ΔⲆⵠᐃⵠΔⲆ, Δᐃ.ᐃⲆΔⵠⵠⵠⵠ], 1, 0, function () {
          Bx.ⵠⲆⲆⵠⵠ(2);
        }, 300, 300, Z | aa, fa);
      } else {
        this.buttons[na] = yf(266, 176, 0, [Δᐃ.ⲆⵠⵠⵠΔⵠⲆ, Δᐃ.ΔⲆⵠᐃⵠΔⲆ, Δᐃ.ᐃⲆΔⵠⵠⵠⵠ], 1, 0, function () {
          Bx.ⵠⲆⲆⵠⵠ(2);
        }, 204, 100, ca | aa, fa);
      }
      this.buttons[na].view = t;
      this.buttons[na].hint = 0;
      var oa = r++;
      if (_a.innerWidth < 1300) {
        this.buttons[oa] = yf(266, 176, 0, [Δᐃ.ΔᐃⵠⲆⵠΔⲆ, Δᐃ.ΔΔΔΔⲆⲆᐃ, Δᐃ.ᐃΔⲆⲆⲆᐃᐃ], 1, 0, function () {
          Bx.ⵠⲆⲆⵠⵠ(3);
        }, 300, 400, Z | aa, fa);
      } else {
        this.buttons[oa] = yf(266, 176, 0, [Δᐃ.ΔᐃⵠⲆⵠΔⲆ, Δᐃ.ΔΔΔΔⲆⲆᐃ, Δᐃ.ᐃΔⲆⲆⲆᐃᐃ], 1, 0, function () {
          Bx.ⵠⲆⲆⵠⵠ(3);
        }, 204, 200, ca | aa, fa);
      }
      this.buttons[oa].view = t;
      this.buttons[oa].hint = 0;
      var qa = r++;
      this.buttons[qa] = yf(266, 176, 0, [Δᐃ.ⲆᐃⵠΔΔⵠᐃ, Δᐃ.ΔⲆᐃⲆᐃᐃΔ, Δᐃ.ⵠⵠⵠᐃΔⵠⵠ], 1, 0, function () {
        Bx.ⵠⲆⲆⵠⵠ(7);
      }, _a.innerWidth < 1300 ? 450 : 204, _a.innerWidth < 1300 ? 400 : 300, (_a.innerWidth < 1300 ? Z : ca) | aa, fa);
      this.buttons[qa].view = t;
      this.buttons[qa].hint = 0;
    }
    function ra(b, c) {
      if (c !== zh) {
        xx.ⲆᐃΔᐃΔᐃᐃ = c;
        var d = xx.ⵠⲆΔΔΔᐃⵠ[c];
        xx.ᐃᐃᐃΔᐃ = d.score;
        xx.ΔᐃΔⵠⵠ = d.kill;
        xx.ΔΔᐃⲆⲆⵠΔ = d.death;
        xx.time = d.time;
        xx.ⵠⲆⵠⲆΔⵠΔ = d.bestScore;
        xx.ⵠⵠⵠᐃⵠⲆⵠ = d.bestKill;
        xx.ΔΔᐃΔⲆⲆΔ = d.bestTime;
        xx.ⲆⵠᐃΔⲆᐃᐃ = d.scoreTotal;
      }
      if (b === undefined) {
        b = xx.ⵠⵠᐃⵠⵠᐃⲆ;
      }
      xx.ⵠⵠᐃⵠⵠᐃⲆ = b;
      if (b >= 0) {
        document.getElementById("stats_box_time").innerHTML = xx.ΔΔᐃΔⲆⲆΔ[b];
        document.getElementById("stats_box_kill").innerHTML = xx.ⵠⵠⵠᐃⵠⲆⵠ[b];
        document.getElementById("stats_box_score").innerHTML = xx.ⵠⲆⵠⲆΔⵠΔ[b];
      } else {
        var f = 0;
        for (var g = 0; g < xx.ΔᐃΔⵠⵠ.length; g++) {
          f += xx.ΔᐃΔⵠⵠ[g];
        }
        var h = 0;
        for (g = 0; g < xx.time.length; g++) {
          h += xx.time[g];
        }
        document.getElementById("stats_box_time").innerHTML = h;
        document.getElementById("stats_box_kill").innerHTML = f;
        document.getElementById("stats_box_score").innerHTML = xx.ᐃᐃᐃΔᐃ;
      }
    }
    this.buttons[r] = yf(87, 78, 0, [Δᐃ.ⵠⵠΔᐃΔⵠⵠ, Δᐃ.ΔⲆⲆᐃⲆᐃⲆ, Δᐃ.ⲆⵠΔΔᐃΔⲆ], 1, 0, function () {
      xx.ⵠⲆΔΔΔᐃΔⵠᐃ();
      if (xx.ⲆⲆᐃⵠᐃⲆΔ === 0) {
        P(G);
      } else {
        P(T);
      }
    }, 127, 110, ca | aa, ea);
    this.buttons[r++].view = v;
    this.buttons[r] = yf(87, 78, 0, [Δᐃ.ΔΔΔⵠᐃⲆⲆ, Δᐃ.ⵠΔⵠⲆⵠⲆⵠ, Δᐃ.ᐃⵠΔΔᐃΔⲆ], 1, 0, function () {
      const a = _a.document.createElement("textarea");
      a.value = Wx;
      _a.document.body.appendChild(a);
      a.select();
      _a.document.execCommand("copy");
      _a.document.body.removeChild(a);
    }, 182, 110, ca | aa, ea);
    this.buttons[r++].view = v;
    this.buttons[r] = yf(87, 78, 0, [Δᐃ.ΔΔⲆΔᐃⲆⲆ, Δᐃ.ᐃⵠⵠᐃⲆⲆⲆ, Δᐃ.ᐃᐃᐃⵠᐃⵠΔ], 1, 0, function () {
      (function () {
        if (Sx === Ux && _a.FB && _a.FB.getUserID()) {
          _a.FB.logout();
        }
        if (Ux === Rx && _x !== undefined) {
          _a.gapi.auth2.getAuthInstance().signOut();
          _x = undefined;
        }
        Wx = undefined;
        Vx = undefined;
        Ux = undefined;
        xx.ⲆⵠΔⵠⲆ = 0;
        xx.Ⲇⵠᐃᐃⵠ = 0;
        xx.ᐃᐃᐃΔᐃ = 0;
        xx.ⲆᐃⲆΔᐃⵠⲆ();
        ᐃⲆᐃⲆᐃⵠⵠᐃΔ();
      })();
    }, 255, 110, ca | aa, ea);
    this.buttons[r++].view = v;
    this.buttons[r] = yf(58, 64, 0, [Δᐃ.ⲆΔΔΔⲆΔⲆ, Δᐃ.ΔΔⲆᐃΔⵠΔ, Δᐃ.ΔⲆⵠⲆᐃⵠⵠ], 1, 0, function () {
      P(t);
    }, 189, 118, ca | aa, ea);
    this.buttons[r++].view = c;
    this.buttons[r] = yf(497, 72, 0, [Δᐃ.ⲆᐃΔⲆⵠᐃⵠ, Δᐃ.ⵠⲆΔⲆΔᐃΔ, Δᐃ.ⵠᐃⲆⲆⵠΔᐃ], 1, 0, function () {
      (function () {
        if (Bf) {
          Vx = ΔⲆᐃ.ⵠⵠⵠᐃΔᐃⵠ(40);
          Ux = Tx;
          Wx = Bf.userId;
          _a.ⲆᐃⵠⵠⲆⲆⲆ();
          return;
        }
        _a.gapi.auth2.getAuthInstance().signIn();
      })();
    }, -130, 390, ca | aa, ea);
    this.buttons[r++].view = c;
    this.buttons[r] = yf(497, 72, 0, [Δᐃ.ΔⵠᐃⲆᐃⲆᐃ, Δᐃ.ⲆᐃᐃΔᐃΔⲆ, Δᐃ.ᐃⲆᐃᐃⲆⵠⵠ], 1, 0, function () {
      _a.FB.login(function (a) {
        if (a.authResponse) {
          _a.FB.api("/me", function (a) {
            Ux = Sx;
            Vx = _a.FB.getAuthResponse().accessToken;
            ty();
            _a.ⲆᐃⵠⵠⲆⲆⲆ();
          });
        }
      });
    }, -130, 430, ca | aa, ea);
    this.buttons[r++].view = c;
    ΔⲆⵠᐃᐃᐃⲆ = 20000;
    this.ⵠⵠⲆⲆᐃΔⲆ = function (a) {
      var b = xx.ᐃᐃΔΔⲆᐃⲆ(a);
      var c = b * b * ΔⲆⵠᐃᐃᐃⲆ;
      return (a -= c) / ((b + 1) * (b + 1) * ΔⲆⵠᐃᐃᐃⲆ - c);
    };
    this.ᐃᐃΔΔⲆᐃⲆ = function (a) {
      return Math.floor(Math.sqrt(a / ΔⲆⵠᐃᐃᐃⲆ));
    };
    this.ΔⲆᐃⵠᐃⲆΔⲆΔ = function (a) {
      xx.ⵠᐃⲆⵠΔ = xx.ᐃᐃΔΔⲆᐃⲆ(a);
      xx.ΔⵠⵠΔΔⵠⵠ = xx.ⵠⵠⲆⲆᐃΔⲆ(a);
      xx.ΔⵠⵠⲆᐃⲆⲆ = 0;
      xx.ᐃᐃᐃΔᐃ = a;
    };
    this.ⲆⵠⲆΔⲆΔᐃΔⲆ = function (a) {
      xx.buttons[xx.ⵠᐃᐃⵠΔⵠⲆ].info.active = 0;
      xx.buttons[xx.ΔᐃⵠᐃΔⵠⲆ].info.active = 1;
      xx.buttons[xx.ᐃᐃΔΔⵠΔⵠ].info.active = 1;
      i();
      if (a.name.indexOf("Starver#") === -1) {
        document.getElementById("account_nickname_input").value = _a.decodeURIComponent(_a.escape(_a.atob(a.name)));
      } else {
        document.getElementById("account_nickname_input").value = a.name;
      }
      xx.Ⲇⵠᐃᐃⵠ = a.bread;
      var b = a.seasons;
      var c = b[b.length - 1];
      xx.ⵠⲆΔΔΔᐃⵠ = b;
      K.ΔⲆᐃⵠᐃⲆΔⲆΔ(c.score);
      xx.ᐃᐃᐃΔᐃ = c.score;
      xx.ΔᐃΔⵠⵠ = c.kill;
      xx.ΔΔᐃⲆⲆⵠΔ = c.death;
      xx.time = c.time;
      xx.ⵠⲆⵠⲆΔⵠΔ = c.bestScore;
      xx.ⵠⵠⵠᐃⵠⲆⵠ = c.bestKill;
      xx.ΔΔᐃΔⲆⲆΔ = c.bestTime;
      xx.ⲆⵠᐃΔⲆᐃᐃ = c.scoreTotal;
      xx.ⲆⲆᐃⵠᐃⲆΔ = a.firstName;
      document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
      if (xx.ⲆⲆᐃⵠᐃⲆΔ === hg) {
        xx.ⲆⲆᐃⵠᐃⲆΔ = 0;
      }
      xx.ᐃⵠⲆⵠᐃΔΔ = Date.now() + a.privateServerTime;
      if (Number(a.privateServerTime) > 0) {
        xx.ᐃⵠⲆⵠᐃΔΔ = Date.now() + Number(a.privateServerTime);
      }
      xx.ⲆⵠΔⵠⲆ = Date.now() + a.kit;
      if (Number(a.kit) > 0) {
        xx.ⲆⵠΔⵠⲆ = Date.now() + Number(a.kit);
      }
      var d = ⲆⲆΔⲆ.Δⵠᐃⵠⵠ;
      for (var e = 0; e < a.skins.length; e++) {
        if ((j = a.skins[e]) > 0) {
          for (var f = 0; d.length > f; f++) {
            if (d[f].id === e) {
              K.unlock.ⵠⲆᐃᐃ[f] = 1;
            }
          }
        }
      }
      d = ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ;
      e = 0;
      for (; a.accessories.length > e; e++) {
        var j = a.accessories[e];
        if (j > 0) {
          for (f = 0; d.length > f; f++) {
            if (e === d[f].id) {
              K.unlock.ⵠΔⵠⲆⲆ[f] = 1;
            }
          }
        }
      }
      d = ⲆⲆΔⲆ.ⵠΔⲆΔᐃ;
      e = 0;
      for (; a.books.length > e; e++) {
        if ((j = a.books[e]) > 0) {
          for (f = 0; f < d.length; f++) {
            if (e === d[f].id) {
              K.unlock.ⲆⵠᐃⲆᐃ[f] = 1;
            }
          }
        }
      }
      d = ⲆⲆΔⲆ.ⲆⵠⲆΔ;
      e = 0;
      for (; e < a.bags.length; e++) {
        if ((j = a.bags[e]) > 0) {
          for (f = 0; f < d.length; f++) {
            if (d[f].id === e) {
              K.unlock.ᐃΔⲆΔΔ[f] = 1;
            }
          }
        }
      }
      d = ⲆⲆΔⲆ.ΔⵠΔⵠⵠ;
      e = 0;
      for (; e < a.crates.length; e++) {
        j = a.crates[e];
        if (j > 0) {
          for (f = 0; f < d.length; f++) {
            if (d[f].id === e) {
              K.unlock.ᐃΔⲆⵠⲆ[f] = 1;
              K.unlock.ΔᐃΔⵠΔ[f] = 1;
            }
          }
        }
      }
    };
    this.ⵠⵠⵠᐃⵠⲆⲆⵠᐃ = function () {
      _a.ⲆᐃⵠⵠⲆⲆⲆ = function () {
        P(t);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", Px + "login?token=" + Vx + "&type=" + Ux + (Bf ? "&userId=" + Bf.userId + "&userInfo=" + Bf.userInfo : ""));
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(K.ⲆⵠⲆΔⲆΔᐃΔⲆ);
      };
      if (Xx === 1) {
        _a.ⲆᐃⵠⵠⲆⲆⲆ();
      }
    };
    _a.ᐃⲆᐃⲆᐃⵠⵠᐃΔ = function () {
      xx.buttons[xx.ⵠᐃᐃⵠΔⵠⲆ].info.active = 1;
      xx.buttons[xx.ΔᐃⵠᐃΔⵠⲆ].info.active = 0;
      xx.buttons[xx.ᐃᐃΔΔⵠΔⵠ].info.active = 0;
      P(t);
    };
    this.ⲆⲆᐃΔⲆ = function () {
      return xx.buttons[xx.ΔᐃⵠᐃΔⵠⲆ].info.active;
    };
    this.buttons[r] = yf(461, 105, 0, [Δᐃ.ⲆⵠⲆᐃⵠΔⲆ, Δᐃ.ⲆⲆᐃⵠⲆᐃⵠ, Δᐃ.ⵠⵠⵠⲆⲆⵠⵠ], 1, 0, function () {
      if (K.ⲆⲆᐃΔⲆ()) {
        P(u);
      } else {
        P(c);
      }
    }, -100, 80, ca | aa, ea);
    this.buttons[r++].view = M;
    this.buttons[r] = yf(157, 158, 0, [Δᐃ.ⲆⵠᐃᐃᐃⲆΔ, Δᐃ.ΔᐃⲆⲆⲆΔΔ, Δᐃ.ⵠⵠΔⵠΔᐃᐃ], 1, 0, function () {
      _a.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, ca | aa, ea);
    this.buttons[r++].view = f;
    this.buttons[r] = yf(66, 73, 0, [Δᐃ.ΔᐃⵠᐃΔᐃᐃ, Δᐃ.ᐃⵠⵠᐃⲆⲆⵠ, Δᐃ.ΔⵠⲆᐃⵠⵠᐃ], 1, 0, undefined, -68, 340, ca | aa, ea);
    this.buttons[r++].view = f;
    this.buttons[r] = yf(66, 73, 0, [Δᐃ.ⲆⵠⲆⵠⵠⵠᐃ, Δᐃ.ᐃⵠᐃΔⵠⵠⲆ, Δᐃ.ⲆⵠᐃⲆΔⵠⲆ], 1, 0, undefined, -30, 340, ca | aa, ea);
    this.buttons[r++].view = f;
    this.ΔᐃⵠⵠⵠⵠⲆⵠⵠ = r;
    this.buttons[r] = yf(97, 66, 0, [Δᐃ.ⵠΔΔΔⵠᐃᐃ, Δᐃ.ⵠⵠⵠⵠⵠⲆⲆ, Δᐃ.ⲆΔⲆΔΔΔᐃ], 1, 0, function () {
      wy(Wd, undefined, xx.ΔⲆΔⲆⲆⲆⲆ);
    }, -14, 151, ca | aa, ea);
    this.buttons[r++].view = z;
    this.ᐃⵠⲆⵠΔᐃΔ = r;
    this.buttons[r] = yf(135, 66, 0, [Δᐃ.ⲆᐃⲆᐃᐃⵠⲆ, Δᐃ.ᐃⲆᐃΔⵠΔⲆ, Δᐃ.ΔⲆΔⵠⲆΔⲆ], 1, 0, function () {
      wy(ij, undefined, xx.ᐃⵠⲆⵠΔᐃΔ);
    }, 37.5, 151, ca | aa, ea);
    this.buttons[r++].view = z;
    this.ᐃⵠᐃΔᐃⵠⲆ = r;
    this.buttons[r] = yf(160, 66, 0, [Δᐃ.ⵠⵠΔⲆΔᐃΔ, Δᐃ.ⵠⵠⵠⵠⵠΔᐃ, Δᐃ.ⲆΔⲆⲆⲆⲆⵠ], 1, 0, function () {
      wy(rk, nl, xx.ᐃⵠᐃΔᐃⵠⲆ);
    }, 107.5, 151, ca | aa, ea);
    this.buttons[r++].view = z;
    this.ΔⲆΔⲆⲆⲆⲆ = r;
    this.buttons[r] = yf(207, 66, 0, [Δᐃ.ⲆⲆΔⲆΔⵠΔ, Δᐃ.ΔΔᐃⵠⵠᐃΔ, Δᐃ.ΔᐃΔΔΔⲆⵠ], 1, 0, function () {
      wy(Qq, ij, xx.ΔⲆΔⲆⲆⲆⲆ);
    }, 190.5, 151, ca | aa, ea);
    this.buttons[r++].view = z;
    this.ᐃᐃᐃⵠΔⲆᐃ = r;
    this.buttons[r] = yf(144, 66, 0, [Δᐃ.ΔⲆⵠⲆΔⵠⵠ, Δᐃ.ⵠᐃⵠⵠΔⲆⵠ, Δᐃ.ΔⵠᐃⵠⵠᐃⲆ], 1, 0, function () {
      wy(xx.ᐃᐃᐃⵠΔⲆᐃ);
    }, 103.5, 110, ca | aa, ea);
    this.buttons[r++].view = z;
    this.ΔΔᐃⲆⵠΔⵠ = r;
    this.buttons[r] = yf(124, 66, 0, [Δᐃ.ⲆᐃΔᐃⲆΔⲆ, Δᐃ.ᐃⲆⵠⲆᐃⲆᐃ, Δᐃ.ΔⲆⵠΔᐃⵠⵠ], 1, 0, function () {
      wy(xx.ΔΔᐃⲆⵠΔⵠ);
    }, 177.5, 110, ca | aa, ea);
    this.buttons[r++].view = z;
    this.ⵠⲆⲆΔᐃⵠⵠ = r;
    this.buttons[r] = yf(104, 66, 0, [Δᐃ.ᐃᐃⵠⲆⲆⵠΔ, Δᐃ.ⵠⵠΔⵠⲆΔⲆ, Δᐃ.ΔᐃⵠⵠᐃΔⵠ], 1, 0, function () {
      wy(xx.ⵠⲆⲆΔᐃⵠⵠ);
    }, 242, 110, ca | aa, ea);
    this.buttons[r++].view = z;
    this.ΔᐃᐃⵠΔΔΔ = r;
    this.buttons[r] = yf(46, 51, 0, [Δᐃ.ⵠΔΔΔⲆⵠⵠ, Δᐃ.ᐃⲆⵠΔⲆᐃᐃ, Δᐃ.ᐃᐃⲆⲆᐃⵠᐃ], 1, 0, function () {
      wy(Ya, mb, undefined, xx.ΔᐃᐃⵠΔΔΔ);
    }, -185, 528, ca | aa, ea);
    this.buttons[r++].view = z;
    this.ⵠⵠⲆⲆᐃΔᐃ = r;
    this.buttons[r] = yf(46, 51, 0, [Δᐃ.ᐃⵠᐃⵠⵠⲆⵠ, Δᐃ.ΔⲆᐃⲆⵠⵠⲆ, Δᐃ.ᐃᐃΔᐃΔΔΔ], 1, 0, function () {
      wy(undefined, ij, ct, xx.ⵠⵠⲆⲆᐃΔᐃ);
    }, -149, 528, ca | aa, ea);
    this.buttons[r++].view = z;
    this.ⲆⲆΔΔⵠⲆⲆ = r;
    this.buttons[r] = yf(46, 51, 0, [Δᐃ.ⲆⵠᐃΔᐃⲆⵠ, Δᐃ.ⵠⲆⵠᐃΔⲆᐃ, Δᐃ.ⲆⲆⲆΔᐃⲆᐃ], 1, 0, function () {
      wy(undefined, undefined, undefined, xx.ⲆⲆΔΔⵠⲆⲆ);
    }, -113, 528, ca | aa, ea);
    this.buttons[r++].view = z;
    this.ᐃΔΔΔⲆΔⵠ = r;
    this.buttons[r] = yf(46, 51, 0, [Δᐃ.ⵠⲆᐃᐃⵠⲆⲆ, Δᐃ.ᐃᐃᐃⵠⵠⲆΔ, Δᐃ.ⲆⵠΔⲆⲆⵠⵠ], 1, 0, function () {
      wy(undefined, undefined, undefined, xx.ᐃΔΔΔⲆΔⵠ);
    }, -77, 528, ca | aa, ea);
    this.buttons[r++].view = z;
    this.ᐃᐃΔᐃⲆΔΔ = r;
    this.buttons[r] = yf(46, 51, 0, [Δᐃ.ⵠⲆⵠΔᐃⵠᐃ, Δᐃ.ᐃΔⵠⵠⵠΔⲆ, Δᐃ.ΔᐃⲆⲆΔΔⵠ], 1, 0, function () {
      wy(undefined, undefined, undefined, xx.ᐃᐃΔᐃⲆΔΔ);
    }, -41, 528, ca | aa, ea);
    this.buttons[r++].view = z;
    this.ⵠⲆᐃΔⲆⵠΔ = r;
    this.buttons[r] = yf(46, 51, 0, [Δᐃ.ΔⵠΔΔⲆΔᐃ, Δᐃ.ᐃᐃⵠᐃⲆⵠᐃ, Δᐃ.ⵠⵠⵠᐃΔᐃᐃ], 1, 0, function () {
      wy(ej, undefined, undefined, xx.ⵠⲆᐃΔⲆⵠΔ);
    }, -5, 528, ca | aa, ea);
    this.buttons[r++].view = z;
    this.buttons[r] = yf(232, 352, 0, [Δᐃ.ᐃⲆᐃⵠΔⲆΔ, Δᐃ.ΔᐃΔᐃΔΔΔ, Δᐃ.ⵠᐃⲆⵠΔᐃⲆ], 1, 0, function () {
      qy(300);
    }, -330, 135, ca | aa, ea);
    this.buttons[r++].view = u;
    this.buttons[r] = yf(232, 352, 0, [Δᐃ.ΔᐃⵠᐃⵠⲆΔ, Δᐃ.ⵠᐃⵠⵠⵠᐃⵠ, Δᐃ.ⵠΔⵠᐃⲆⵠᐃ], 1, 0, function () {
      qy(600);
    }, -195, 135, ca | aa, ea);
    this.buttons[r++].view = u;
    this.buttons[r] = yf(243, 374, 0, [Δᐃ.ⵠⵠⵠⵠΔⵠⵠ, Δᐃ.ⲆᐃⲆΔⲆᐃΔ, Δᐃ.ΔΔΔΔΔΔᐃ], 1, 0, function () {
      qy(2600);
    }, -60, 130, ca | aa, ea);
    this.buttons[r++].view = u;
    this.buttons[r] = yf(232, 352, 0, [Δᐃ.ⵠᐃⲆᐃⲆΔⲆ, Δᐃ.ⵠᐃⵠⵠⵠⵠᐃ, Δᐃ.ⲆᐃⲆⵠⵠⲆΔ], 1, 0, function () {
      qy(7000);
    }, 78, 135, ca | aa, ea);
    this.buttons[r++].view = u;
    this.buttons[r] = yf(243, 374, 0, [Δᐃ.ⵠⲆⵠΔⲆⲆⵠ, Δᐃ.ⲆⵠΔᐃᐃΔⵠ, Δᐃ.ΔⲆᐃΔΔᐃΔ], 1, 0, function () {
      qy(20000);
    }, 213, 130, ca | aa, ea);
    this.buttons[r++].view = u;
    this.buttons[r] = yf(58, 64, 0, [Δᐃ.ⲆΔΔΔⲆΔⲆ, Δᐃ.ΔΔⲆᐃΔⵠΔ, Δᐃ.ΔⲆⵠⲆᐃⵠⵠ], 1, 0, function () {
      P(M);
    }, 300, 88, ca | aa, ea);
    this.buttons[r++].view = u;
    this.buttons[r] = yf(323, 112, 0, [Δᐃ.ⲆΔᐃᐃⲆΔⵠ, Δᐃ.ᐃⲆⲆΔⵠⵠΔ, Δᐃ.ⵠᐃⲆⲆᐃⲆΔ], 1, 0, function () {
      P(I);
      Da.ⵠⵠᐃⵠⲆ();
    }, -315, 185, ca | aa, ea);
    this.buttons[r++].view = C;
    this.buttons[r] = yf(323, 112, 0, [Δᐃ.ⲆᐃΔᐃⲆⲆᐃ, Δᐃ.ΔⲆᐃᐃⲆⲆΔ, Δᐃ.ⲆΔⵠⵠΔⵠⵠ], 1, 0, function () {
      P(R);
      Ia.ⵠⵠᐃⵠⲆ();
    }, -315, 321, ca | aa, ea);
    this.buttons[r++].view = C;
    this.buttons[r] = yf(323, 112, 0, [Δᐃ.ⲆΔⲆⵠⵠΔΔ, Δᐃ.ᐃΔᐃΔᐃᐃⵠ, Δᐃ.ⵠⲆⲆᐃⲆΔΔ], 1, 0, function () {
      P(S);
      Ea.ⵠⵠᐃⵠⲆ();
    }, 153, 185, ca | aa, ea);
    this.buttons[r++].view = C;
    this.buttons[r] = yf(323, 112, 0, [Δᐃ.ⵠΔⵠⵠΔⲆⵠ, Δᐃ.ⵠⲆⵠⵠⵠⲆΔ, Δᐃ.ⵠⵠⵠᐃⵠⲆⲆ], 1, 0, function () {
      P(F);
      Fa.ⵠⵠᐃⵠⲆ();
    }, 153, 321, ca | aa, ea);
    this.buttons[r++].view = C;
    this.buttons[r] = yf(323, 112, 0, [Δᐃ.ᐃΔⲆᐃᐃⵠⲆ, Δᐃ.ΔᐃᐃⵠΔⲆᐃ, Δᐃ.ⲆⲆⲆⵠᐃΔⵠ], 1, 0, function () {
      P(Q);
      Ga.ⵠⵠᐃⵠⲆ();
    }, 153, 463, ca | aa, ea);
    this.buttons[r++].view = C;
    this.buttons[r] = yf(323, 112, 0, [Δᐃ.ᐃᐃⵠᐃΔᐃⵠ, Δᐃ.ΔᐃⲆⵠⵠⲆᐃ, Δᐃ.ΔⲆⲆᐃⲆᐃᐃ], 1, 0, function () {
      P(j);
      Ha.ⵠⵠᐃⵠⲆ();
    }, -315, 463, ca | aa, ea);
    this.buttons[r++].view = C;
    this.buttons[r] = yf(327, 117, 0, [Δᐃ.ⲆⲆⵠⲆⲆΔᐃ, Δᐃ.ᐃⲆᐃⲆᐃΔⲆ, Δᐃ.ⲆΔⲆΔΔⲆⲆ], 1, 0, function () {
      P(q);
    }, 155, 70, Z, fa);
    this.buttons[r++].view = t;
    this.buttons[r] = yf(130, 129, 0, [Δᐃ.ⵠⲆⵠⲆᐃΔⵠ, Δᐃ.ⲆᐃⲆΔᐃΔᐃ, Δᐃ.ⲆᐃⵠΔᐃⲆⵠ], 1, 0, function () {
      H(w, ea, "none");
      P(M);
    }, 10, 40, ca | aa, ea);
    this.buttons[r++].view = w;
    this.buttons[r] = yf(130, 129, 0, [Δᐃ.ⵠⲆⵠⲆᐃΔⵠ, Δᐃ.ⲆᐃⲆΔᐃΔᐃ, Δᐃ.ⲆᐃⵠΔᐃⲆⵠ], 1, 0, function () {
      H(y, ea, "none");
      P(M);
    }, 10, 40, ca | aa, ea);
    this.buttons[r++].view = y;
    this.buttons[r] = yf(115, 73, 0, [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], 1, 0, function () {
      P(M);
    }, 200, 140, ca | aa, ea);
    this.buttons[r++].view = L;
    this.buttons[r] = yf(524, 110, 0, [Δᐃ.ⲆⵠΔⵠⵠⲆᐃ, Δᐃ.ᐃⲆⲆⲆΔⵠⵠ, Δᐃ.ⵠᐃᐃⵠⵠᐃⲆ], 1, 0, function () {
      ry("Atlanta");
    }, -265, 300, ca | aa, ea);
    this.buttons[r++].view = L;
    this.buttons[r] = yf(523, 110, 0, [Δᐃ.ⲆΔⲆΔⲆⵠⵠ, Δᐃ.ΔⲆⲆⵠⲆᐃⵠ, Δᐃ.ⲆᐃᐃⵠⵠⲆⵠ], 1, 0, function () {
      ry("LosAngeles");
    }, 5, 300, ca | aa, ea);
    this.buttons[r++].view = L;
    this.buttons[r] = yf(344, 110, 0, [Δᐃ.ⵠᐃᐃᐃΔᐃᐃ, Δᐃ.ᐃᐃᐃᐃᐃᐃᐃ, Δᐃ.ΔⵠⲆᐃΔᐃᐃ], 1, 0, function () {
      ry("Frankfurt");
    }, -265, 365, ca | aa, ea);
    this.buttons[r++].view = L;
    this.buttons[r] = yf(344, 110, 0, [Δᐃ.ⲆⵠⲆⵠⲆⲆⲆ, Δᐃ.ᐃⲆⲆⵠΔᐃΔ, Δᐃ.ᐃⵠᐃΔⵠⲆᐃ], 1, 0, function () {
      ry("Osaka");
    }, 100, 365, ca | aa, ea);
    this.buttons[r++].view = L;
    this.buttons[r] = yf(344, 110, 0, [Δᐃ.ⲆⲆᐃⲆᐃᐃⲆ, Δᐃ.ⵠᐃⲆⵠΔΔᐃ, Δᐃ.ⲆⲆᐃⲆⵠⲆⵠ], 1, 0, function () {
      ry("Sydney");
    }, -86, 365, ca | aa, ea);
    this.buttons[r++].view = L;
    this.buttons[r] = yf(115, 73, 0, [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], 1, 0, function () {
      P(L);
    }, 224, 140, ca | aa, ea);
    this.buttons[r++].view = O;
    this.buttons[r] = yf(230, 352, 0, [Δᐃ.ᐃᐃⲆⲆⵠΔⲆ, Δᐃ.ⲆΔᐃΔΔΔⲆ, Δᐃ.ⲆΔᐃⲆΔⵠᐃ], 1, 0, function () {
      qy(350);
    }, -280, 240, ca | aa, ea);
    this.buttons[r++].view = O;
    this.buttons[r] = yf(230, 352, 0, [Δᐃ.ⵠΔⲆΔⵠᐃᐃ, Δᐃ.ΔᐃⲆᐃⵠⲆⵠ, Δᐃ.ᐃᐃⲆᐃᐃⲆᐃ], 1, 0, function () {
      qy(700);
    }, -130, 240, ca | aa, ea);
    this.buttons[r++].view = O;
    this.buttons[r] = yf(230, 352, 0, [Δᐃ.ⵠⲆⲆⵠΔΔΔ, Δᐃ.ⲆᐃⲆⵠΔᐃⵠ, Δᐃ.ΔΔⵠᐃᐃᐃᐃ], 1, 0, function () {
      qy(1400);
    }, 20, 240, ca | aa, ea);
    this.buttons[r++].view = O;
    this.buttons[r] = yf(230, 352, 0, [Δᐃ.ΔΔᐃΔΔⲆΔ, Δᐃ.ⵠⲆΔΔⵠΔⵠ, Δᐃ.ⵠⵠΔⲆⲆⵠⵠ], 1, 0, function () {
      qy(3000);
    }, 170, 240, ca | aa, ea);
    this.buttons[r++].view = O;
    this.buttons[r] = yf(105, 119, 0, [Δᐃ.ⵠᐃⲆᐃⲆⵠΔ, Δᐃ.ᐃⲆᐃᐃⲆⲆⲆ, Δᐃ.ⵠⲆΔⵠⲆⵠⲆ], 1, 0, function () {
      const a = document.getElementById("serverAddressInput").value.split(" : ");
      const b = _a.document.createElement("textarea");
      b.value = Sf + "?server=" + a[1] + "&region=" + a[0];
      _a.document.body.appendChild(b);
      b.select();
      _a.document.execCommand("copy");
      _a.document.body.removeChild(b);
    }, 105, 310, ca | aa, ea);
    this.buttons[r++].view = N;
    this.buttons[r] = yf(105, 119, 0, [Δᐃ.ΔΔⲆⲆⲆΔᐃ, Δᐃ.ⲆⵠⲆⲆⵠΔΔ, Δᐃ.ⲆᐃⵠⲆⵠⵠΔ], 1, 0, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Px + "rebootServer?token=" + Vx + "&userid=" + Wx);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = Sf + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 235, 310, ca | aa, ea);
    this.buttons[r++].view = N;
    this.buttons[r] = yf(105, 119, 0, [Δᐃ.ᐃⵠΔᐃⵠᐃᐃ, Δᐃ.ΔⵠΔΔⲆⲆⲆ, Δᐃ.ᐃᐃᐃΔⲆⵠᐃ], 1, 0, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Px + "restartServer?token=" + Vx + "&userid=" + Wx);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = Sf + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 170, 310, ca | aa, ea);
    this.buttons[r++].view = N;
    this.buttons[r] = yf(204, 115, 0, [Δᐃ.ⲆⵠΔᐃⲆᐃΔ, Δᐃ.ᐃΔⵠⲆⲆⲆᐃ, Δᐃ.ⵠΔⵠΔᐃⵠᐃ], 1, 0, function () {
      _a.open("./commands.html", "_blank");
    }, -265, 490, ca | aa, ea);
    this.buttons[r++].view = N;
    this.buttons[r] = yf(145, 69, 0, [Δᐃ.ΔΔΔⵠⲆᐃΔ, Δᐃ.ᐃⲆΔⵠΔⲆΔ, Δᐃ.ⵠⲆΔⲆⵠⲆᐃ], 1, 0, function () {
      P(A);
    }, -210, 170, ca | aa, ea);
    this.buttons[r++].view = M;
    this.buttons[r] = yf(145, 69, 0, [Δᐃ.ⲆᐃⲆⲆᐃⵠⵠ, Δᐃ.ⵠᐃⵠΔⵠⲆⵠ, Δᐃ.ⵠᐃⲆⲆᐃΔⲆ], 1, 0, function () {
      P(B);
    }, 70, 170, ca | aa, ea);
    this.buttons[r++].view = M;
    this.buttons[r] = yf(145, 69, 0, [Δᐃ.ᐃⵠⵠⵠᐃⵠⵠ, Δᐃ.ᐃⵠΔᐃⲆⵠᐃ, Δᐃ.ΔⲆⲆⵠⲆⲆⵠ], 1, 0, function () {
      P(x);
    }, 70, 204, ca | aa, ea);
    this.buttons[r++].view = M;
    this.buttons[r] = yf(145, 69, 0, [Δᐃ.ᐃᐃⵠᐃΔⵠΔ, Δᐃ.ⵠΔᐃᐃᐃⵠⲆ, Δᐃ.ΔᐃⵠⲆᐃⵠΔ], 1, 0, function () {
      P(D);
    }, -210, 204, ca | aa, ea);
    this.buttons[r++].view = M;
    this.buttons[r] = yf(145, 69, 0, [Δᐃ.ᐃᐃⵠᐃΔⵠΔ, Δᐃ.ⵠΔᐃᐃᐃⵠⲆ, Δᐃ.ΔᐃⵠⲆᐃⵠΔ], 1, 0, function () {
      P(E);
    }, 70, 238, ca | aa, ea);
    this.buttons[r++].view = M;
    this.buttons[r] = yf(145, 69, 0, [Δᐃ.ᐃᐃⵠᐃΔⵠΔ, Δᐃ.ⵠΔᐃᐃᐃⵠⲆ, Δᐃ.ΔᐃⵠⲆᐃⵠΔ], 1, 0, function () {
      if (K.ⲆⲆᐃΔⲆ()) {
        yy(0, 300);
      } else {
        P(c);
      }
    }, 307, 205, ca | aa, ea);
    this.buttons[r++].view = M;
    this.buttons[r] = yf(145, 69, 0, [Δᐃ.ᐃⵠᐃⵠΔᐃᐃ, Δᐃ.ⲆΔⵠⵠᐃᐃΔ, Δᐃ.ⲆΔⲆΔⲆᐃⲆ], 1, 0, function () {
      P(J);
    }, -210, 238, ca | aa, ea);
    this.buttons[r++].view = M;
    this.buttons[r] = yf(145, 69, 0, [Δᐃ.ᐃⵠᐃⵠΔᐃᐃ, Δᐃ.ⲆΔⵠⵠᐃᐃΔ, Δᐃ.ⲆΔⲆΔⲆᐃⲆ], 1, 0, function () {
      if (K.ⲆⲆᐃΔⲆ()) {
        yy(1, 600);
      } else {
        P(c);
      }
    }, 307, 239, ca | aa, ea);
    this.buttons[r++].view = M;
    this.buttons[r] = yf(192, 101, 0, [Δᐃ.ΔⲆⵠⵠⲆⲆΔ, Δᐃ.Δᐃⵠᐃᐃⵠᐃ, Δᐃ.ⵠⲆⵠΔⲆⲆⲆ], 1, 0, function () {
      uy();
    }, -100, 250, ca | aa, ea);
    this.buttons[r++].view = G;
    this.buttons[r] = yf(192, 104, 0, [Δᐃ.ΔⲆⵠⲆⵠⲆⲆ, Δᐃ.ⵠΔᐃΔᐃⵠΔ, Δᐃ.ΔΔΔⵠᐃΔⵠ], 1, 0, function () {
      uy();
    }, -100, 239, ca | aa, ea);
    this.buttons[r++].view = T;
    this.buttons[r] = yf(192, 101, 0, [Δᐃ.ⵠⲆⵠⵠⲆᐃⵠ, Δᐃ.ⵠⲆΔⲆᐃᐃⲆ, Δᐃ.ᐃⲆᐃⲆⲆⲆⵠ], 1, 0, function () {
      P(v);
    }, 10, 250, ca | aa, ea);
    this.buttons[r++].view = G;
    this.buttons[r] = yf(192, 104, 0, [Δᐃ.ᐃΔⵠⵠᐃⵠⵠ, Δᐃ.ⲆΔᐃᐃΔᐃΔ, Δᐃ.ᐃΔᐃΔⲆⵠΔ], 1, 0, function () {
      P(v);
    }, 10, 239, ca | aa, ea);
    this.buttons[r++].view = T;
    ⵠΔⵠᐃΔ = [];
    ⵠΔⵠᐃΔ[ᐃⵠᐃ.ⵠΔΔⲆⲆ] = [Δᐃ.ⲆΔΔΔⲆⵠΔ, Δᐃ.ΔᐃΔⵠᐃⲆⵠ, Δᐃ.ⵠⵠᐃⲆⲆⲆΔ];
    ⵠΔⵠᐃΔ[ᐃⵠᐃ.ᐃᐃᐃⲆ] = [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ];
    ⵠΔⵠᐃΔ[ᐃⵠᐃ.ⵠΔⵠΔ] = [Δᐃ.ᐃΔᐃᐃᐃⲆⵠ, Δᐃ.ⲆᐃⲆⲆⲆᐃᐃ, Δᐃ.ΔⲆᐃᐃᐃΔⵠ];
    ⵠΔⵠᐃΔ[ᐃⵠᐃ.ⵠᐃΔⲆ] = [Δᐃ.ᐃⲆΔΔⵠⲆⲆ, Δᐃ.ᐃᐃΔⲆⲆΔΔ, Δᐃ.ᐃⲆΔᐃⲆⵠᐃ];
    ⵠΔⵠᐃΔ[ᐃⵠᐃ.ⲆΔⵠᐃ] = [Δᐃ.ᐃᐃⵠΔⵠⵠⵠ, Δᐃ.ᐃᐃⵠⲆᐃⵠᐃ, Δᐃ.ⵠⵠⵠΔΔⲆⵠ];
    ⵠΔⵠᐃΔ[ᐃⵠᐃ.ⲆⵠΔⲆ] = [Δᐃ.ⵠᐃⲆᐃⲆΔΔ, Δᐃ.ⵠⲆΔΔⵠⲆⲆ, Δᐃ.ΔΔΔⲆᐃᐃⲆ];
    ⵠΔⵠᐃΔ[ᐃⵠᐃ.ᐃⲆⵠΔ] = [Δᐃ.ⲆᐃⵠⵠⲆⲆΔ, Δᐃ.ⲆᐃᐃΔΔⵠΔ, Δᐃ.ᐃⲆⵠΔⵠⲆⵠ];
    ⵠΔⵠᐃΔ[ᐃⵠᐃ.ᐃⵠΔⲆᐃ] = [Δᐃ.ᐃᐃⵠᐃⵠᐃᐃ, Δᐃ.ⲆⵠΔⵠⵠΔⲆ, Δᐃ.ⲆⲆᐃᐃⵠⲆΔ];
    ⵠΔⵠᐃΔ[ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ] = [Δᐃ.ᐃⲆᐃΔⲆᐃᐃ, Δᐃ.ⵠⲆⲆΔᐃᐃⲆ, Δᐃ.ΔᐃⵠΔᐃΔᐃ];
    ᐃⵠⵠΔⵠⲆᐃ = r;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, Qq, -29, 205, ca | aa, ea);
    this.buttons[r++].view = I;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, ct, -29, 300, ca | aa, ea);
    this.buttons[r++].view = I;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, ct, -29, 395, ca | aa, ea);
    this.buttons[r++].view = I;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, Hb, 65, 205, ca | aa, ea);
    this.buttons[r++].view = I;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, nl, 65, 300, ca | aa, ea);
    this.buttons[r++].view = I;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, 65, 395, ca | aa, ea);
    this.buttons[r++].view = I;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, Nn, 159, 205, ca | aa, ea);
    this.buttons[r++].view = I;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, 159, 300, ca | aa, ea);
    this.buttons[r++].view = I;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, mq, 159, 395, ca | aa, ea);
    this.buttons[r++].view = I;
    this.buttons[r] = yf(39, 122, 0, [Δᐃ.ᐃᐃⲆⲆⵠⵠⵠ, Δᐃ.ⵠⵠⲆⵠⵠᐃⲆ, Δᐃ.ⲆⵠᐃᐃΔⵠΔ], 1, 0, undefined, -61, 315, ca | aa, ea);
    this.buttons[r++].view = I;
    this.buttons[r] = yf(39, 122, 0, [Δᐃ.ⲆⵠᐃᐃᐃⲆᐃ, Δᐃ.ⵠⲆⵠⵠᐃᐃΔ, Δᐃ.ΔᐃΔⲆⲆⲆⲆ], 1, 0, undefined, 260, 315, ca | aa, ea);
    this.buttons[r++].view = I;
    this.buttons[r] = yf(115, 73, 0, [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], 1, 0, function () {
      P(C);
    }, -320, 470, ca | aa, ea);
    this.buttons[r++].view = I;
    ⲆⲆΔΔΔⵠⲆⵠΔ = r;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, cl, -29, 205, ca | aa, ea);
    this.buttons[r++].view = R;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, Hb, -29, 300, ca | aa, ea);
    this.buttons[r++].view = R;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, -29, 395, ca | aa, ea);
    this.buttons[r++].view = R;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, Wd, 65, 205, ca | aa, ea);
    this.buttons[r++].view = R;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, Hb, 65, 300, ca | aa, ea);
    this.buttons[r++].view = R;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, 65, 395, ca | aa, ea);
    this.buttons[r++].view = R;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, 159, 205, ca | aa, ea);
    this.buttons[r++].view = R;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, 159, 300, ca | aa, ea);
    this.buttons[r++].view = R;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, Nn, 159, 395, ca | aa, ea);
    this.buttons[r++].view = R;
    this.buttons[r] = yf(39, 122, 0, [Δᐃ.ᐃᐃⲆⲆⵠⵠⵠ, Δᐃ.ⵠⵠⲆⵠⵠᐃⲆ, Δᐃ.ⲆⵠᐃᐃΔⵠΔ], 1, 0, nl, -61, 315, ca | aa, ea);
    this.buttons[r++].view = R;
    this.buttons[r] = yf(39, 122, 0, [Δᐃ.ⲆⵠᐃᐃᐃⲆᐃ, Δᐃ.ⵠⲆⵠⵠᐃᐃΔ, Δᐃ.ΔᐃΔⲆⲆⲆⲆ], 1, 0, undefined, 260, 315, ca | aa, ea);
    this.buttons[r++].view = R;
    this.buttons[r] = yf(115, 73, 0, [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], 1, 0, function () {
      P(C);
    }, -320, 470, ca | aa, ea);
    this.buttons[r++].view = R;
    ⲆΔⲆⲆⲆⲆΔⲆΔ = r;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, cl, -29, 205, ca | aa, ea);
    this.buttons[r++].view = j;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, -29, 300, ca | aa, ea);
    this.buttons[r++].view = j;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, -29, 395, ca | aa, ea);
    this.buttons[r++].view = j;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, 65, 205, ca | aa, ea);
    this.buttons[r++].view = j;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, ij, 65, 300, ca | aa, ea);
    this.buttons[r++].view = j;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, ej, 65, 395, ca | aa, ea);
    this.buttons[r++].view = j;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, Ya, 159, 205, ca | aa, ea);
    this.buttons[r++].view = j;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, 159, 300, ca | aa, ea);
    this.buttons[r++].view = j;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, 159, 395, ca | aa, ea);
    this.buttons[r++].view = j;
    this.buttons[r] = yf(39, 122, 0, [Δᐃ.ᐃᐃⲆⲆⵠⵠⵠ, Δᐃ.ⵠⵠⲆⵠⵠᐃⲆ, Δᐃ.ⲆⵠᐃᐃΔⵠΔ], 1, 0, undefined, -61, 315, ca | aa, ea);
    this.buttons[r++].view = j;
    this.buttons[r] = yf(39, 122, 0, [Δᐃ.ⲆⵠᐃᐃᐃⲆᐃ, Δᐃ.ⵠⲆⵠⵠᐃᐃΔ, Δᐃ.ΔᐃΔⲆⲆⲆⲆ], 1, 0, undefined, 260, 315, ca | aa, ea);
    this.buttons[r++].view = j;
    this.buttons[r] = yf(115, 73, 0, [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], 1, 0, function () {
      P(C);
    }, -320, 470, ca | aa, ea);
    this.buttons[r++].view = j;
    ⲆΔⲆⲆⵠⲆⲆⲆⵠ = r;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, mi, -29, 205, ca | aa, ea);
    this.buttons[r++].view = S;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, Nn, -29, 300, ca | aa, ea);
    this.buttons[r++].view = S;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, ct, -29, 395, ca | aa, ea);
    this.buttons[r++].view = S;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, hg, 65, 205, ca | aa, ea);
    this.buttons[r++].view = S;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, mb, 65, 300, ca | aa, ea);
    this.buttons[r++].view = S;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, 65, 395, ca | aa, ea);
    this.buttons[r++].view = S;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, mi, 159, 205, ca | aa, ea);
    this.buttons[r++].view = S;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, 159, 300, ca | aa, ea);
    this.buttons[r++].view = S;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, 159, 395, ca | aa, ea);
    this.buttons[r++].view = S;
    this.buttons[r] = yf(39, 122, 0, [Δᐃ.ᐃᐃⲆⲆⵠⵠⵠ, Δᐃ.ⵠⵠⲆⵠⵠᐃⲆ, Δᐃ.ⲆⵠᐃᐃΔⵠΔ], 1, 0, undefined, -61, 315, ca | aa, ea);
    this.buttons[r++].view = S;
    this.buttons[r] = yf(39, 122, 0, [Δᐃ.ⲆⵠᐃᐃᐃⲆᐃ, Δᐃ.ⵠⲆⵠⵠᐃᐃΔ, Δᐃ.ΔᐃΔⲆⲆⲆⲆ], 1, 0, nl, 260, 315, ca | aa, ea);
    this.buttons[r++].view = S;
    this.buttons[r] = yf(115, 73, 0, [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], 1, 0, function () {
      P(C);
    }, -320, 470, ca | aa, ea);
    this.buttons[r++].view = S;
    ⵠⲆⵠᐃΔⲆⲆΔΔ = r;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, mi, -29, 205, ca | aa, ea);
    this.buttons[r++].view = F;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, Ya, -29, 300, ca | aa, ea);
    this.buttons[r++].view = F;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, -29, 395, ca | aa, ea);
    this.buttons[r++].view = F;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, Qq, 65, 205, ca | aa, ea);
    this.buttons[r++].view = F;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, 65, 300, ca | aa, ea);
    this.buttons[r++].view = F;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, Qq, 65, 395, ca | aa, ea);
    this.buttons[r++].view = F;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, tk, 159, 205, ca | aa, ea);
    this.buttons[r++].view = F;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, 159, 300, ca | aa, ea);
    this.buttons[r++].view = F;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, mb, 159, 395, ca | aa, ea);
    this.buttons[r++].view = F;
    this.buttons[r] = yf(39, 122, 0, [Δᐃ.ᐃᐃⲆⲆⵠⵠⵠ, Δᐃ.ⵠⵠⲆⵠⵠᐃⲆ, Δᐃ.ⲆⵠᐃᐃΔⵠΔ], 1, 0, undefined, -61, 315, ca | aa, ea);
    this.buttons[r++].view = F;
    this.buttons[r] = yf(39, 122, 0, [Δᐃ.ⲆⵠᐃᐃᐃⲆᐃ, Δᐃ.ⵠⲆⵠⵠᐃᐃΔ, Δᐃ.ΔᐃΔⲆⲆⲆⲆ], 1, 0, Ya, 260, 315, ca | aa, ea);
    this.buttons[r++].view = F;
    this.buttons[r] = yf(115, 73, 0, [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], 1, 0, function () {
      P(C);
    }, -320, 470, ca | aa, ea);
    this.buttons[r++].view = F;
    ⲆⵠᐃⵠⵠⲆⲆⲆⵠ = r;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, Ks, -29, 205, ca | aa, ea);
    this.buttons[r++].view = Q;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, -29, 300, ca | aa, ea);
    this.buttons[r++].view = Q;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, -29, 395, ca | aa, ea);
    this.buttons[r++].view = Q;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, ij, 65, 205, ca | aa, ea);
    this.buttons[r++].view = Q;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, 65, 300, ca | aa, ea);
    this.buttons[r++].view = Q;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, Nn, 65, 395, ca | aa, ea);
    this.buttons[r++].view = Q;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, mi, 159, 205, ca | aa, ea);
    this.buttons[r++].view = Q;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, 159, 300, ca | aa, ea);
    this.buttons[r++].view = Q;
    this.buttons[r] = yf(178, 182, 0, [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], 1, 0, undefined, 159, 395, ca | aa, ea);
    this.buttons[r++].view = Q;
    this.buttons[r] = yf(39, 122, 0, [Δᐃ.ᐃᐃⲆⲆⵠⵠⵠ, Δᐃ.ⵠⵠⲆⵠⵠᐃⲆ, Δᐃ.ⲆⵠᐃᐃΔⵠΔ], 1, 0, undefined, -61, 315, ca | aa, ea);
    this.buttons[r++].view = Q;
    this.buttons[r] = yf(39, 122, 0, [Δᐃ.ⲆⵠᐃᐃᐃⲆᐃ, Δᐃ.ⵠⲆⵠⵠᐃᐃΔ, Δᐃ.ΔᐃΔⲆⲆⲆⲆ], 1, 0, ij, 260, 315, ca | aa, ea);
    this.buttons[r++].view = Q;
    this.buttons[r] = yf(115, 73, 0, [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], 1, 0, function () {
      P(C);
    }, -320, 470, ca | aa, ea);
    this.buttons[r++].view = Q;
    this.buttons[r] = yf(260, 260, 0, [Δᐃ.ⲆⵠⵠΔᐃΔΔ, Δᐃ.ᐃᐃΔΔⲆᐃΔ, Δᐃ.ⲆᐃⵠΔΔⵠⵠ], 1, 0, function () {
      if (K.ⲆⲆᐃΔⲆ()) {
        xy(3, 50);
      } else {
        P(c);
      }
    }, -65, 197, ca | aa, ea);
    this.buttons[r++].view = B;
    this.buttons[r] = yf(115, 73, 0, [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], 1, 0, function () {
      P(M);
    }, 309, 180, ca | aa, ea);
    this.buttons[r++].view = B;
    this.buttons[r] = yf(260, 260, 0, [Δᐃ.ⲆⲆⵠⲆⲆΔⲆ, Δᐃ.ⵠⵠᐃⲆⲆᐃΔ, Δᐃ.ᐃⲆⵠⵠⵠⲆⲆ], 1, 0, function () {
      if (K.ⲆⲆᐃΔⲆ()) {
        xy(0, 100);
      } else {
        P(c);
      }
    }, -65, 197, ca | aa, ea);
    this.buttons[r++].view = A;
    this.buttons[r] = yf(115, 73, 0, [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], 1, 0, function () {
      P(M);
    }, 309, 180, ca | aa, ea);
    this.buttons[r++].view = A;
    this.buttons[r] = yf(260, 260, 0, [Δᐃ.ΔⲆΔⲆⵠⵠⵠ, Δᐃ.ⵠΔᐃⵠᐃⲆΔ, Δᐃ.ΔΔᐃⵠⲆⲆⵠ], 1, 0, function () {
      if (K.ⲆⲆᐃΔⲆ()) {
        xy(4, 150);
      } else {
        P(c);
      }
    }, -65, 197, ca | aa, ea);
    this.buttons[r++].view = x;
    this.buttons[r] = yf(115, 73, 0, [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], 1, 0, function () {
      P(M);
    }, 309, 180, ca | aa, ea);
    this.buttons[r++].view = x;
    this.buttons[r] = yf(260, 260, 0, [Δᐃ.ᐃΔΔⵠΔΔΔ, Δᐃ.ⲆⲆᐃᐃΔᐃᐃ, Δᐃ.ᐃᐃΔᐃⵠⵠΔ], 1, 0, function () {
      if (K.ⲆⲆᐃΔⲆ()) {
        xy(1, 300);
      } else {
        P(c);
      }
    }, -65, 197, ca | aa, ea);
    this.buttons[r++].view = D;
    this.buttons[r] = yf(115, 73, 0, [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], 1, 0, function () {
      P(M);
    }, 309, 180, ca | aa, ea);
    this.buttons[r++].view = D;
    this.buttons[r] = yf(260, 260, 0, [Δᐃ.ⵠᐃⵠΔᐃΔΔ, Δᐃ.ⲆⲆⵠΔⲆⵠΔ, Δᐃ.ⵠⵠⵠⵠⲆΔΔ], 1, 0, function () {
      if (K.ⲆⲆᐃΔⲆ()) {
        xy(2, 600);
      } else {
        P(c);
      }
    }, -65, 197, ca | aa, ea);
    this.buttons[r++].view = J;
    this.buttons[r] = yf(115, 73, 0, [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], 1, 0, function () {
      P(M);
    }, 309, 180, ca | aa, ea);
    this.buttons[r++].view = J;
    this.buttons[r] = yf(260, 260, 0, [Δᐃ.ᐃΔΔⵠΔΔΔ, Δᐃ.ⲆⲆᐃᐃΔᐃᐃ, Δᐃ.ᐃᐃΔᐃⵠⵠΔ], 1, 0, function () {
      if (K.ⲆⲆᐃΔⲆ()) {
        xy(5, 300);
      } else {
        P(c);
      }
    }, -65, 197, ca | aa, ea);
    this.buttons[r++].view = E;
    this.buttons[r] = yf(115, 73, 0, [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], 1, 0, function () {
      P(M);
    }, 309, 180, ca | aa, ea);
    this.buttons[r++].view = E;
    var sa = r;
    this.buttons[r] = yf(46, 51, 0, [Δᐃ.ᐃⵠᐃⲆⵠᐃⵠ, Δᐃ.ΔᐃᐃΔⵠⲆΔ, Δᐃ.ⲆΔⵠᐃⲆΔⵠ], 1, 0, function () {
      ra(ej, 0);
    }, -305, 132, ca | aa, ea);
    this.buttons[r++].view = v;
    var ta = r;
    this.buttons[r] = yf(46, 51, 0, [Δᐃ.ⲆⵠᐃⲆΔⵠᐃ, Δᐃ.ΔᐃⵠⲆⲆΔᐃ, Δᐃ.ᐃⵠΔΔΔΔΔ], 1, 0, function () {
      ra(undefined, 1);
    }, -273, 132, ca | aa, ea);
    this.buttons[r++].view = v;
    var ua = r;
    this.buttons[r] = yf(46, 51, 0, [Δᐃ.ⲆⵠΔᐃΔⵠᐃ, Δᐃ.ⲆᐃΔΔⲆⲆⲆ, Δᐃ.ⲆΔᐃΔⵠᐃⵠ], 1, 0, function () {
      ra(undefined, 2);
    }, -241, 132, ca | aa, ea);
    this.buttons[r++].view = v;
    var va = r;
    this.buttons[r] = yf(46, 51, 0, [Δᐃ.ⲆⵠⲆΔⵠⲆⲆ, Δᐃ.ᐃᐃⲆΔⵠΔΔ, Δᐃ.ᐃΔⲆⲆⲆⵠΔ], 1, 0, function () {
      ra(undefined, 3);
    }, -305, 165, ca | aa, ea);
    this.buttons[r++].view = v;
    var wa = r;
    this.buttons[r] = yf(46, 51, 0, [Δᐃ.ᐃⵠⵠⵠΔⵠᐃ, Δᐃ.ᐃⵠⵠⲆⲆΔⵠ, Δᐃ.ᐃΔⵠᐃⵠⵠⲆ], 1, 0, function () {
      ra(ij, 4);
    }, -273, 165, ca | aa, ea);
    this.buttons[r++].view = v;
    var xa = r;
    this.buttons[r] = yf(46, 51, 0, [Δᐃ.ⵠΔⵠΔᐃΔⲆ, Δᐃ.ⵠⵠⵠᐃᐃΔⵠ, Δᐃ.ᐃΔⲆⵠⲆΔΔ], 1, 0, function () {
      ra(Wd, 5);
    }, -241, 165, ca | aa, ea);
    this.buttons[r++].view = v;
    var ya = r;
    this.buttons[r] = yf(460, 73, 0, [Δᐃ.ⵠⵠΔⲆΔⲆⲆ, Δᐃ.ⵠΔⲆⵠⲆⲆΔ, Δᐃ.ⵠΔⵠⲆⵠᐃΔ], 1, 0, function () {
      ra(-1);
    }, -180, 170, ca | aa, ea);
    this.buttons[r++].view = v;
    var za = r;
    this.buttons[r] = yf(222, 68, 0, [Δᐃ.ΔᐃⵠᐃⵠΔⵠ, Δᐃ.ⲆⵠᐃᐃⲆⲆΔ, Δᐃ.ΔᐃΔᐃⵠⵠⲆ], 1, 0, function () {
      ra(0);
    }, -180, 215, ca | aa, ea);
    this.buttons[r++].view = v;
    var Aa = r;
    this.buttons[r] = yf(222, 68, 0, [Δᐃ.ⲆⵠⲆΔⲆΔΔ, Δᐃ.ⲆⵠⵠᐃⲆΔⲆ, Δᐃ.ΔΔΔⲆᐃΔⵠ], 1, 0, function () {
      ra(4);
    }, -180, 260, ca | aa, ea);
    this.buttons[r++].view = v;
    var Ba = r;
    this.buttons[r] = yf(222, 68, 0, [Δᐃ.ⵠⲆΔᐃⲆⵠᐃ, Δᐃ.ᐃⵠᐃᐃΔΔⵠ, Δᐃ.ⲆᐃᐃⲆΔᐃⲆ], 1, 0, function () {
      ra(2);
    }, -60, 215, ca | aa, ea);
    this.buttons[r++].view = v;
    var Ca = r;
    this.buttons[r] = yf(222, 68, 0, [Δᐃ.ⵠΔΔΔΔⲆᐃ, Δᐃ.ᐃⵠᐃᐃᐃⲆᐃ, Δᐃ.ⲆⵠΔⵠⲆⵠⲆ], 1, 0, function () {
      ra(3);
    }, -60, 260, ca | aa, ea);
    this.buttons[r++].view = v;
    this.ΔⵠᐃΔⵠᐃΔ = r;
    this.buttons[r] = yf(143, 66, 0, [Δᐃ.ᐃⵠᐃⲆⵠⵠⵠ, Δᐃ.ᐃΔΔⲆΔΔΔ, Δᐃ.ⵠⵠᐃⵠⲆΔⵠ], 1, 0, function () {
      wy(mi, xx.ΔⵠᐃΔⵠᐃΔ);
    }, -298, 110, ca | aa, ea);
    this.buttons[r++].view = z;
    this.ⲆΔⲆΔⲆⵠᐃ = r;
    this.buttons[r] = yf(104, 66, 0, [Δᐃ.ⵠⲆΔⲆᐃΔⲆ, Δᐃ.ⵠᐃΔΔⲆⲆΔ, Δᐃ.ⵠⲆᐃᐃΔⲆᐃ], 1, 0, function () {
      wy(undefined, xx.ⲆΔⲆΔⲆⵠᐃ);
    }, -223, 110, ca | aa, ea);
    this.buttons[r++].view = z;
    this.ⲆᐃⵠᐃⲆΔⵠ = r;
    this.buttons[r] = yf(110, 66, 0, [Δᐃ.ᐃⲆΔΔⲆⵠⲆ, Δᐃ.ᐃΔᐃⵠΔⵠⵠ, Δᐃ.ⵠⲆΔⵠⲆᐃⲆ], 1, 0, function () {
      wy(hg, xx.ⲆᐃⵠᐃⲆΔⵠ);
    }, -168, 110, ca | aa, ea);
    this.buttons[r++].view = z;
    this.ⲆᐃⲆΔⲆΔⵠ = r;
    this.buttons[r] = yf(88, 66, 0, [Δᐃ.ⵠⲆⵠΔⲆΔᐃ, Δᐃ.ⵠᐃⵠᐃⲆΔΔ, Δᐃ.ⵠΔⵠᐃⵠⲆᐃ], 1, 0, function () {
      wy(mq, xx.ⲆᐃⲆΔⲆΔⵠ);
    }, -110, 110, ca | aa, ea);
    this.buttons[r++].view = z;
    this.ᐃᐃⲆΔΔⲆⲆ = r;
    this.buttons[r] = yf(88, 66, 0, [Δᐃ.ⲆᐃⲆⵠⲆᐃⵠ, Δᐃ.ⵠΔⲆΔᐃᐃᐃ, Δᐃ.ᐃⵠᐃᐃⵠⵠΔ], 1, 0, function () {
      wy(undefined, xx.ᐃᐃⲆΔΔⲆⲆ);
    }, -63, 110, ca | aa, ea);
    this.buttons[r++].view = z;
    this.buttons[r] = yf(86, 44, 0, [Δᐃ.ᐃᐃⵠⲆᐃⲆΔ, Δᐃ.ΔⵠⵠΔΔⵠᐃ, Δᐃ.ΔᐃᐃⲆᐃⵠⲆ], 1, 0, function () {
      _a.open("./terms.html", "_blank");
    }, 349, 290, ca | aa, ea);
    this.buttons[r++].view = M;
    var Da = new e(ⲆⲆΔⲆ.Δⵠᐃⵠⵠ, ᐃⵠⵠΔⵠⲆᐃ, function (a) {
      xx.ⵠⲆᐃᐃ = a;
      if (xx.unlock.ⵠⲆᐃᐃ[a] === 1) {
        ᐃΔⲆⲆ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠⲆᐃᐃ, this.unlock.ⵠⲆᐃᐃ);
    var Ea = new e(ⲆⲆΔⲆ.ⲆⵠⲆΔ, ⲆΔⲆⲆⵠⲆⲆⲆⵠ, function (a) {
      xx.ᐃΔⲆΔΔ = a;
      if (xx.unlock.ᐃΔⲆΔΔ[a] === 1) {
        ᐃΔⲆⲆ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃΔⲆΔΔ, this.unlock.ᐃΔⲆΔΔ);
    var Fa = new e(ⲆⲆΔⲆ.ⵠΔⲆΔᐃ, ⵠⲆⵠᐃΔⲆⲆΔΔ, function (a) {
      xx.ⲆⵠᐃⲆᐃ = a;
      if (xx.unlock.ⲆⵠᐃⲆᐃ[a] === 1) {
        ᐃΔⲆⲆ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆⵠᐃⲆᐃ, this.unlock.ⲆⵠᐃⲆᐃ);
    var Ga = new e(ⲆⲆΔⲆ.ΔⵠΔⵠⵠ, ⲆⵠᐃⵠⵠⲆⲆⲆⵠ, function (a) {
      xx.ΔᐃΔⵠΔ = a;
      if (xx.unlock.ΔᐃΔⵠΔ[a] === 1) {
        ᐃΔⲆⲆ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.ΔᐃΔⵠΔ, this.unlock.ΔᐃΔⵠΔ);
    var Ha = new e(ⲆⲆΔⲆ.ΔⵠΔⵠⵠ, ⲆΔⲆⲆⲆⲆΔⲆΔ, function (a) {
      xx.ᐃΔⲆⵠⲆ = a;
      if (xx.unlock.ᐃΔⲆⵠⲆ[a] === 1) {
        ᐃΔⲆⲆ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃΔⲆⵠⲆ, this.unlock.ᐃΔⲆⵠⲆ);
    var Ia = new e(ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ, ⲆⲆΔΔΔⵠⲆⵠΔ, function (a) {
      xx.ⵠΔⵠⲆⲆ = a;
      if (xx.unlock.ⵠΔⵠⲆⲆ[a] === 1) {
        ᐃΔⲆⲆ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠΔⵠⲆⲆ, this.unlock.ⵠΔⵠⲆⲆ);
    this.ⵠΔⲆⲆᐃⵠⲆ = function (a) {
      Fx.ΔⵠΔΔ = Pf(K.ᐃⵠ, a);
      for (var b = 0; b < K.buttons.length; b++) {
        if (K.buttons[b].info.active === fa) {
          K.buttons[b].ᐃᐃᐃⵠ(K.ᐃⵠ, Fx.ΔⵠΔΔ, pf);
        }
      }
    };
    this.ⵠⵠΔᐃΔⲆⲆ = function (a) {
      Fx.ΔⵠΔΔ = Pf(K.ᐃⵠ, a);
      for (var b = 0; b < K.buttons.length; b++) {
        var c = K.buttons[b];
        if (c.info.active === fa && c.ᐃᐃᐃⵠ(K.ᐃⵠ, Fx.ΔⵠΔΔ, Cf)) {
          c.info.callback();
          return;
        }
      }
    };
    this.ⵠΔⲆΔⲆⵠΔ = false;
    this.ᐃⲆᐃⲆΔⵠᐃ = function (a) {
      Fx.ΔⵠΔΔ = Pf(K.ᐃⵠ, a);
      var c = yg;
      for (var d = 0; d < K.buttons.length; d++) {
        if (K.buttons[d].info.active === fa) {
          c |= K.buttons[d].ᐃᐃᐃⵠ(K.ᐃⵠ, Fx.ΔⵠΔΔ, cf);
        }
      }
      if (K.ⵠΔⲆΔⲆⵠΔ !== c) {
        K.ⵠΔⲆΔⲆⵠΔ = c;
        b.style.cursor = c ? K.ᐃΔⵠⵠΔΔⵠ : K.ⲆⵠⵠⲆᐃⵠⲆ;
      }
    };
    this.ΔⵠᐃΔⲆⵠⵠ = function () {
      _a.addEventListener("mousedown", this.ⵠΔⲆⲆᐃⵠⲆ, false);
      _a.addEventListener("mouseup", this.ⵠⵠΔᐃΔⲆⲆ, false);
      _a.addEventListener("mousemove", this.ᐃⲆᐃⲆΔⵠᐃ, false);
    };
    this.ᐃⵠⵠⲆᐃᐃᐃ = function () {
      _a.removeEventListener("mousedown", this.ⵠΔⲆⲆᐃⵠⲆ, false);
      _a.removeEventListener("mouseup", this.ⵠⵠΔᐃΔⲆⲆ, false);
      _a.removeEventListener("mousemove", this.ᐃⲆᐃⲆΔⵠᐃ, jj);
    };
  }
  function Vw() {
    ΔⲆᐃ.ᐃᐃⵠᐃⲆⵠΔ("https://twitter.com/intent/tweet?text=I%20survived%20" + zx.ⵠΔⵠ + "%20days%20with%20" + zx.ᐃΔⲆΔⲆΔᐃ.ᐃᐃᐃΔᐃ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  function Ww() {
    ΔⲆᐃ.ᐃᐃⵠᐃⲆⵠΔ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  function Xw(b, c) {
    this.ᐃⵠ = b;
    this.Δ = c;
    var d = this;
    this.ΔⵠⲆⵠⲆⵠΔ = false;
    this.ᐃᐃΔᐃΔᐃⲆ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: 0,
      translate: {
        y: 0,
        x: 0
      },
      ΔⵠΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ᐃⵠΔᐃᐃ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + zx.ᐃΔⲆΔⲆΔᐃ.ΔⲆⵠΔⲆᐃΔ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + Lb[335] + " : " + zx.ⵠΔⵠ + "</div><div class=\"stats\"> " + Lb[334] + " : " + zx.ᐃΔⲆΔⲆΔᐃ.ΔᐃΔⵠⵠ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + Lb[333] + " : " + zx.ᐃΔⲆΔⲆΔᐃ.ᐃᐃᐃΔᐃ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + zx.ᐃΔⲆΔⲆΔᐃ.ⵠᐃᐃΔᐃΔᐃ + " " + Lb[332] + "</div></div><div id=\"shop_points\">" + Lb[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + Lb[329] + "</div><div class=\"social\" id=\"fffacebook\">" + Lb[330] + "</div></div><div id=\"bbback\">" + Lb[328] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", Vw, false);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          Ax.ⲆⵠᐃⵠΔ(xx.ΔᐃᐃⵠⲆ);
        }, hr);
        document.getElementById("fffacebook").addEventListener("mouseup", Ww, Ah);
        this.height = Math.floor(this.id.clientHeight / 2);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", Px + "getBreadAndScore?userid=" + Wx);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - xx.Ⲇⵠᐃᐃⵠ;
              xx.Ⲇⵠᐃᐃⵠ = b.b;
              xx.ᐃᐃᐃΔᐃ = b.s;
              xx.ⵠᐃⲆⵠΔ = xx.ᐃᐃΔΔⲆᐃⲆ(xx.ᐃᐃᐃΔᐃ);
              xx.ΔⵠⵠΔΔⵠⵠ = xx.ⵠⵠⲆⲆᐃΔⲆ(xx.ᐃᐃᐃΔᐃ);
              xx.ΔⵠⵠⲆᐃⲆⲆ = 0;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var f;
    var g = 0;
    function e() {
      d.ΔⵠΔ();
      if (++g != 30) {
        _a.setTimeout(e, 33);
      } else {
        d.ΔⵠΔ();
      }
    }
    this.ⲆⵠᐃⵠΔ = function (a) {
      if (pk === d.ΔⵠⲆⵠⲆⵠΔ) {
        d.ΔⵠⲆⵠⲆⵠΔ = false;
        f = a;
        i = -1;
        j();
        Jx();
      }
    };
    var i = -1;
    function j() {
      d.ΔⵠΔ();
      if (++i == 30) {
        d.stop();
        d.ᐃᐃΔᐃΔᐃⲆ.style.display = "none";
        f();
        return;
      }
      _a.setTimeout(j, 33);
    }
    this.ⵠΔⲆΔΔ = false;
    this.stop = function () {
      this.ⵠΔⲆΔΔ = ks;
    };
    this.ΔᐃᐃⵠⲆ = function () {
      Lx();
      document.getElementById("game_body").style.backgroundColor = Mr.ⲆⵠᐃᐃΔ[wx.time];
      d.ᐃᐃΔᐃΔᐃⲆ.ᐃⵠΔᐃᐃ();
      xx.ΔⲆⵠⵠⵠ.style.display = "inline-block";
      d.ⵠΔⲆΔΔ = true;
      d.ΔⵠⲆⵠⲆⵠΔ = true;
      i = -1;
      g = 0;
      e();
    };
    this.ΔⵠΔ = function () {
      this.ᐃᐃΔᐃΔᐃⲆ.translate.x = Math.floor(aq - 275);
      this.ᐃᐃΔᐃΔᐃⲆ.translate.y = Math.floor(bq - this.ᐃᐃΔᐃΔᐃⲆ.height - 28);
      xx.ΔⲆⵠⵠⵠ.translate.x = this.ᐃᐃΔᐃΔᐃⲆ.translate.x - 350;
      xx.ΔⲆⵠⵠⵠ.translate.y = this.ᐃᐃΔᐃΔᐃⲆ.translate.y + 0;
      xx.ΔⲆⵠⵠⵠ.ΔⵠΔ();
      if (g != 30 || i != -1) {
        var a = 0;
        if (g != 30) {
          a = 1500 / (g + 1) - 50;
        }
        if (i != -1) {
          a = -(1750 / (30 - i + 1) - 48);
        }
        this.ᐃᐃΔᐃΔᐃⲆ.translate.y -= a;
      }
      this.ᐃᐃΔᐃΔᐃⲆ.ΔⵠΔ();
    };
    this.ᐃⵠΔᐃ = function () {
      oc();
      zx.alert.ᐃⵠΔᐃ("#FFF", "#000");
    };
  }
  function Yw(b, c, d, e, f, i) {
    const a = b ^ 5208;
    const j = c ^ 25198;
    const k = i ^ 35140;
    const h = hb(a, j, ((d + 38305) * 214013 + 2531011) % 4294967296, (1013904223 + (e + 57420) * 1664525) % 4294967296, (24 << (f & 255)) + (16 << (f >> 24 & 255)) + (0 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)));
    sb(k, a, j);
    return ~(h & 38317) & 38317 | ~(h & 38317) & h;
  }
  var Zw = 1;
  var $w = 1;
  var _w = {
    ⲆⲆᐃⲆⲆΔΔ: 460000,
    ΔΔⲆⵠᐃ: 1,
    ΔⵠⵠⵠⵠⵠΔⲆᐃ: 12,
    ⵠᐃⵠⲆⵠ: 2,
    ΔⵠᐃⲆᐃⲆΔⲆⲆ: 5000,
    ᐃᐃⲆⵠᐃⲆⲆ: 3000,
    ⲆΔᐃⵠᐃⲆᐃⵠⲆ: 12,
    ᐃᐃᐃ: 6,
    ΔⲆⲆⲆⵠΔⵠ: 12,
    ᐃⲆΔᐃⲆᐃΔⵠⲆ: 5000,
    ΔᐃⲆᐃ: 8,
    ᐃΔᐃΔⵠᐃΔᐃⲆ: 5000,
    ᐃⵠⵠⵠⵠ: 3
  };
  var ax = [];
  ax[-1] = 1;
  ax[28] = 1;
  var bx = _a.Math.acos;
  _a.Math.acos = _a.Math.asin;
  _a.Math.asin = bx;
  var cx = _a.Math.cos;
  _a.Math.cos = _a.Math.sin;
  _a.Math.sin = cx;
  ax[49] = 1;
  ax[Vr.ⵠⲆΔΔΔΔᐃⲆⲆ] = 2;
  ax[8] = 2;
  ax[1] = 2;
  ax[3] = 2;
  ax[4] = 2;
  ax[31] = 2;
  ax[32] = 2;
  ax[9] = 2;
  ax[57] = 2;
  ax[0] = 2;
  ax[63] = 2;
  ax[17] = 2;
  ax[5] = 2;
  ax[6] = 2;
  ax[30] = 2;
  ax[Vr.ΔᐃΔΔΔᐃⵠᐃΔ] = 2;
  ax[18] = 2;
  ax[12] = 2;
  ax[13] = 2;
  ax[14] = 2;
  ax[15] = 2;
  ax[16] = 2;
  ax[33] = 2;
  ax[Vr.ⵠⵠⵠΔᐃᐃΔⲆⵠ] = 2;
  ax[35] = 2;
  ax[36] = 2;
  ax[37] = 2;
  ax[38] = 2;
  ax[39] = 2;
  ax[45] = 2;
  ax[62] = 2;
  ax[54] = 2;
  ax[53] = 2;
  ax[46] = 3;
  ax[50] = 3;
  ax[51] = 3;
  const dx = 14894700;
  const ex = 14894700 .ᐃΔΔⲆⲆΔⲆᐃⵠ;
  const fx = `const ⵠⵠᐃⵠᐃⲆᐃ = (typeof ⵠᐃΔΔⲆ === "${ex}") ? 1 : 0; return ⵠⵠᐃⵠᐃⲆᐃ;`;
  ax[52] = 3;
  ⲆᐃᐃΔ = [];
  ⲆᐃᐃΔ[0] = 0;
  ⲆᐃᐃΔ[1] = 1;
  ⲆᐃᐃΔ[2] = 1;
  ⲆᐃᐃΔ[3] = 1;
  ⲆᐃᐃΔ[4] = 0;
  ⲆᐃᐃΔ[5] = 0;
  ⲆᐃᐃΔ[6] = 0;
  ⲆᐃᐃΔ[7] = 0;
  ⲆᐃᐃΔ[8] = 0;
  ⲆᐃᐃΔ[9] = 0;
  ⲆᐃᐃΔ[10] = 1;
  ⲆᐃᐃΔ[11] = 1;
  ⲆᐃᐃΔ[12] = 1;
  ⲆᐃᐃΔ[13] = 1;
  ⲆᐃᐃΔ[14] = 1;
  ⲆᐃᐃΔ[15] = 1;
  ⲆᐃᐃΔ[16] = 0;
  ⲆᐃᐃΔ[17] = 0;
  ⲆᐃᐃΔ[18] = 0;
  ⲆᐃᐃΔ[19] = 0;
  ⲆᐃᐃΔ[20] = 0;
  ⲆᐃᐃΔ[21] = 0;
  ⲆᐃᐃΔ[22] = 0;
  ⲆᐃᐃΔ[23] = 1;
  ⲆᐃᐃΔ[24] = 1;
  ⲆᐃᐃΔ[25] = 1;
  ⲆᐃᐃΔ[26] = 1;
  ⲆᐃᐃΔ[27] = 1;
  ⲆᐃᐃΔ[28] = 1;
  ⲆᐃᐃΔ[29] = 1;
  ⲆᐃᐃΔ[30] = 1;
  ⲆᐃᐃΔ[31] = 1;
  ⲆᐃᐃΔ[32] = 1;
  function gx(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function hx(a) {
    return _a.String.fromCharCode(a);
  }
  ⲆᐃᐃΔ[33] = 1;
  ⲆᐃᐃΔ[34] = 1;
  ⲆᐃᐃΔ[35] = 1;
  ⲆᐃᐃΔ[36] = 1;
  ⲆᐃᐃΔ[37] = 1;
  ⲆᐃᐃΔ[38] = 1;
  ⲆᐃᐃΔ[40] = 0;
  ⲆᐃᐃΔ[41] = 0;
  ⲆᐃᐃΔ[42] = 0;
  ⲆᐃᐃΔ[50] = 1;
  ⲆᐃᐃΔ[51] = 1;
  ⲆᐃᐃΔ[52] = 1;
  ⲆᐃᐃΔ[55] = 0;
  ⲆᐃᐃΔ[56] = 0;
  ⲆᐃᐃΔ[57] = 0;
  ⲆᐃᐃΔ[58] = 0;
  ΔⵠⲆⲆᐃ = [];
  ΔⵠⲆⲆᐃ[Nf.ⲆⵠᐃΔᐃ] = 0;
  ΔⵠⲆⲆᐃ[1] = 0;
  ΔⵠⲆⲆᐃ[29] = 0;
  ΔⵠⲆⲆᐃ[6] = 0;
  ΔⵠⲆⲆᐃ[3] = -1;
  ΔⵠⲆⲆᐃ[31] = -1;
  ΔⵠⲆⲆᐃ[2] = 0;
  ΔⵠⲆⲆᐃ[4] = 0;
  ΔⵠⲆⲆᐃ[30] = 0;
  ΔⵠⲆⲆᐃ[33] = 0;
  var ix = _a.console;
  ix.log = ix.info = ix.error = ix.warn = ix.debug = ix.ᐃⲆⲆⲆΔᐃⲆⵠⲆ = ix.trace = ix.time = ix.timeEnd = function () {};
  ΔⵠⲆⲆᐃ[32] = 1;
  ΔⵠⲆⲆᐃ[35] = 1;
  ΔⵠⲆⲆᐃ[7] = 1;
  ΔⵠⲆⲆᐃ[8] = 1;
  ΔⵠⲆⲆᐃ[9] = 1;
  ΔⵠⲆⲆᐃ[19] = 1;
  ΔⵠⲆⲆᐃ[50] = 1;
  ΔⵠⲆⲆᐃ[5] = 0;
  ΔⵠⲆⲆᐃ[12] = 1;
  ΔⵠⲆⲆᐃ[13] = 1;
  ΔⵠⲆⲆᐃ[14] = 1;
  ΔⵠⲆⲆᐃ[20] = 1;
  ΔⵠⲆⲆᐃ[52] = 1;
  ΔⵠⲆⲆᐃ[10] = 0;
  ΔⵠⲆⲆᐃ[15] = 1;
  ΔⵠⲆⲆᐃ[16] = 1;
  ΔⵠⲆⲆᐃ[17] = 1;
  ΔⵠⲆⲆᐃ[21] = 1;
  ΔⵠⲆⲆᐃ[51] = 1;
  ΔⵠⲆⲆᐃ[45] = 0;
  ΔⵠⲆⲆᐃ[46] = 1;
  ΔⵠⲆⲆᐃ[47] = 1;
  ΔⵠⲆⲆᐃ[48] = 1;
  ΔⵠⲆⲆᐃ[49] = 1;
  ΔⵠⲆⲆᐃ[53] = 1;
  ΔⵠⲆⲆᐃ[18] = 1;
  ΔⵠⲆⲆᐃ[22] = 1;
  ΔⵠⲆⲆᐃ[23] = 1;
  ΔⵠⲆⲆᐃ[11] = 0;
  ΔⵠⲆⲆᐃ[34] = 1;
  var jx = {
    ⲆΔᐃΔΔⲆᐃ: {
      ᐃΔΔⵠⲆ: null,
      path: ["audio/ambience.mp3"],
      ᐃᐃ: {
        d1: [90391, 300, false],
        d2: [90684, 300, oj],
        d0: [90086, 300, false]
      },
      sample: {
        d0: 8,
        d1: 8,
        d2: 8
      }
    },
    ᐃⵠΔᐃⵠⵠⵠ: {
      ᐃΔΔⵠⲆ: null,
      path: ["audio/ambience.mp3"],
      ᐃᐃ: {
        p1: [89549, 300, false],
        p2: [89815, 300, Vn],
        p0: [89303, 300, false]
      },
      sample: {
        p0: 8,
        p1: 8,
        p2: 8
      }
    },
    ⵠᐃΔⵠΔᐃⲆ: {
      ᐃΔΔⵠⲆ: null,
      path: ["audio/ambience.mp3"],
      ᐃᐃ: {
        w3: [89025, 300, false],
        w2: [88751, 300, false],
        w0: [88195, 300, Pn],
        w1: [88473, 300, false]
      },
      sample: {
        w0: 8,
        w1: 8,
        w2: 8,
        w3: 8
      }
    },
    ᐃⵠⵠⵠⵠⵠᐃ: {
      ᐃΔΔⵠⲆ: null,
      path: ["audio/ambience.mp3"],
      ᐃᐃ: {
        ΔⵠᐃⵠⲆⲆᐃ: [19882, 8301, true],
        ⲆⵠⵠⵠⲆΔᐃ: [91022, 400, false],
        ᐃⵠΔΔⲆ: [12356, 6965, true],
        ΔᐃⲆᐃᐃⵠΔ: [3100, 8800, lj],
        ⲆᐃⵠⵠΔΔⲆ: [66961, 21223, V],
        ⵠΔⲆⲆⲆⲆΔ: [32604, 21890, Ck],
        ᐃⵠΔⵠᐃⵠⲆ: [66961, 21223, yk],
        ⵠᐃᐃΔΔⲆⲆ: [31658, 813, true],
        ᐃᐃⲆⵠⵠ: [28380, 1797, true],
        ᐃᐃᐃⲆΔΔⵠ: [92249, 500, jj],
        ⲆΔⲆᐃΔ: [91431, 400, false],
        ΔᐃⵠⲆⵠⲆᐃ: [54524, 11393, yb],
        ΔᐃⲆΔⲆⲆᐃ: [66014, 925, true],
        ⵠΔᐃⵠⲆᐃΔⵠᐃ: [100, 2800, true],
        ⲆᐃΔΔⲆⲆⵠ: [30562, 655, ch]
      },
      sample: {
        ⵠΔᐃⵠⲆᐃΔⵠᐃ: 1,
        ΔᐃⲆᐃᐃⵠΔ: 1,
        ΔⵠᐃⵠⲆⲆᐃ: 1,
        ⵠΔⲆⲆⲆⲆΔ: 1,
        ΔᐃⵠⲆⵠⲆᐃ: 1,
        ᐃⵠΔⵠᐃⵠⲆ: 1,
        ⲆᐃⵠⵠΔΔⲆ: 1,
        ᐃⵠΔΔⲆ: 8,
        ᐃᐃⲆⵠⵠ: 8,
        ⲆᐃΔΔⲆⲆⵠ: 8,
        ⵠᐃᐃΔΔⲆⲆ: 8,
        ΔᐃⲆΔⲆⲆᐃ: 8,
        ⲆⵠⵠⵠⲆΔᐃ: 6,
        ⲆΔⲆᐃΔ: 6,
        ᐃᐃᐃⲆΔΔⵠ: 6
      }
    }
  };
  function kx(b, c, d, e, f) {
    const i = ((23315 + b) * 1664525 + 1013904223) % 4294967296;
    const a = ((22552 + c) * 2147483629 + 2147483587) % 2147483647;
    const j = (1013904223 + (d + 60) * 1664525) % 4294967296;
    const k = (e | 60680) & ~(e & 60680);
    const h = ~(f & 57963) & 57963 | ~(f & 57963) & f;
    return ((12746 + (nx(i, a, j) ^ Rb(k, h, i, a, j))) * 1664525 + 1013904223) % 4294967296;
  }
  function lx(b, c, d, e, f, i, a, j, k, h, g) {
    this.r = 1;
    this.ⲆⲆΔⵠⵠ = b;
    this.ᐃᐃⵠⵠᐃΔⲆ = b;
    this.Δᐃᐃ = c;
    this.ⵠΔⵠ = d;
    this.fade = e;
    this.ᐃⲆΔΔⵠΔᐃ = f;
    this.ⵠⲆⵠⵠⵠⲆⲆ = i;
    this.ᐃΔΔⵠ = a;
    this.ᐃⵠΔⲆⵠΔΔ = j;
    this.source = k;
    this.source.ΔΔΔᐃᐃⵠⲆ = k.x + k.w;
    this.source.ΔᐃⵠⲆᐃ = k.y + k.ΔⵠⲆ;
    this.ᐃⲆΔⵠⲆⲆᐃⲆⵠ = h;
    this.ⲆΔᐃⲆⲆⵠⲆ = g;
    this.ΔⵠΔΔⲆΔΔ = 0;
    this.ᐃᐃΔᐃΔΔⲆ = {
      ⵠⵠⵠΔ: 5,
      d: 5
    };
    this.ⲆΔΔᐃⲆ = function () {
      this.ⲆⲆΔⵠⵠ -= Gx;
      if (this.ⲆⲆΔⵠⵠ < 0) {
        this.ⲆⲆΔⵠⵠ = this.ᐃᐃⵠⵠᐃΔⲆ;
        var a = jx.ᐃⵠⵠⵠⵠⵠᐃ.ᐃΔΔⵠⲆ.playing(this.Δᐃᐃ);
        var b = jx.ᐃⵠⵠⵠⵠⵠᐃ.ᐃΔΔⵠⲆ.playing(this.ⵠΔⵠ);
        if (a && !b) {
          var c = this.ᐃΔΔⵠ.volume(this.Δᐃᐃ) * Zw;
          var d = Zw * (this.ⵠⲆⵠⵠⵠⲆⲆ * Math.random() + this.ᐃⲆΔΔⵠΔᐃ);
          this.ᐃΔΔⵠ.fade(c, d, this.fade, this.Δᐃᐃ);
        } else if (!a && b) {
          c = Zw * this.ᐃΔΔⵠ.volume(this.ⵠΔⵠ);
          d = (Math.random() * this.ⵠⲆⵠⵠⵠⲆⲆ + this.ᐃⲆΔΔⵠΔᐃ) * Zw;
          this.ᐃΔΔⵠ.fade(c, d, this.fade, this.ⵠΔⵠ);
        }
      }
    };
    this.transition = function () {
      this.ⲆⲆΔⵠⵠ = this.ᐃᐃⵠⵠᐃΔⲆ;
      this.ᐃᐃΔᐃΔΔⲆ.d = this.ᐃᐃΔᐃΔΔⲆ.ⵠⵠⵠΔ;
      if (yx.time) {
        this.ᐃΔΔⵠ.fade(0, Zw * this.ᐃⲆΔΔⵠΔᐃ, this.ᐃⵠΔⲆⵠΔΔ, this.Δᐃᐃ);
        this.ᐃΔΔⵠ.play(this.Δᐃᐃ);
        if (this.ᐃΔΔⵠ.playing(this.ⵠΔⵠ)) {
          var a = this.ᐃΔΔⵠ.volume(this.ⵠΔⵠ) * Zw;
          this.ᐃΔΔⵠ.fade(a, 0, this.ᐃⵠΔⲆⵠΔΔ, this.ⵠΔⵠ);
        }
      } else {
        this.ᐃΔΔⵠ.fade(0, Zw * this.ᐃⲆΔΔⵠΔᐃ, this.ᐃⵠΔⲆⵠΔΔ, this.ⵠΔⵠ);
        this.ᐃΔΔⵠ.play(this.ⵠΔⵠ);
        if (this.ᐃΔΔⵠ.playing(this.Δᐃᐃ)) {
          a = this.ᐃΔΔⵠ.volume(this.Δᐃᐃ) * Zw;
          this.ᐃΔΔⵠ.fade(a, 0, this.ᐃⵠΔⲆⵠΔΔ, this.Δᐃᐃ);
        }
      }
    };
    this.check = function (a) {
      if (this.ΔⵠΔΔⲆΔΔ) {
        if (ΔⲆᐃ.ⲆΔᐃⲆⲆⵠⲆ(a, this.ᐃⲆΔⵠⲆⲆᐃⲆⵠ)) {
          if (!Dx.transition && yx.ᐃᐃⵠΔⲆ.now < 460000) {
            if (yx.time) {
              if (!this.ᐃΔΔⵠ.playing(this.Δᐃᐃ)) {
                this.ᐃᐃΔᐃΔΔⲆ.d -= Gx;
                if (this.ᐃᐃΔᐃΔΔⲆ.d < 0) {
                  this.transition();
                }
              }
            } else if (!this.ᐃΔΔⵠ.playing(this.ⵠΔⵠ)) {
              this.ᐃᐃΔᐃΔΔⲆ.d -= Gx;
              if (this.ᐃᐃΔᐃΔΔⲆ.d < 0) {
                this.transition();
              }
            }
          }
        } else {
          this.ΔⵠΔΔⲆΔΔ = 0;
          if (this.ᐃΔΔⵠ.playing(this.Δᐃᐃ)) {
            var b = Zw * this.ᐃΔΔⵠ.volume(this.Δᐃᐃ);
            this.ᐃΔΔⵠ.fade(b, 0, this.ᐃⵠΔⲆⵠΔΔ, this.Δᐃᐃ);
          }
          if (this.ᐃΔΔⵠ.playing(this.ⵠΔⵠ)) {
            b = Zw * this.ᐃΔΔⵠ.volume(this.ⵠΔⵠ);
            this.ᐃΔΔⵠ.fade(b, 0, this.ᐃⵠΔⲆⵠΔΔ, this.ⵠΔⵠ);
          }
        }
      } else if (ΔⲆᐃ.ⲆΔᐃⲆⲆⵠⲆ(a, this.ⲆΔᐃⲆⲆⵠⲆ)) {
        this.ΔⵠΔΔⲆΔΔ = 1;
        if (!Dx.transition && yx.ᐃᐃⵠΔⲆ.now < 460000) {
          this.transition();
        }
      }
    };
    this.ΔⵠΔ = function (a, b) {
      var c;
      var d;
      c = a.x < this.source.x ? Dx.ΔᐃⲆΔᐃΔⵠ(this.source.x) : this.source.ΔΔΔᐃᐃⵠⲆ < a.x ? Dx.ΔᐃⲆΔᐃΔⵠ(this.source.ΔΔΔᐃᐃⵠⲆ) : b.x;
      d = a.y < this.source.y ? Dx.ΔᐃⵠⲆΔᐃΔ(this.source.y) : a.y > this.source.ΔᐃⵠⲆᐃ ? Dx.ΔᐃⵠⲆΔᐃΔ(this.source.ΔᐃⵠⲆᐃ) : b.y;
      this.ᐃΔΔⵠ.pos(c, d, -0.5, this.Δᐃᐃ);
      this.ᐃΔΔⵠ.pos(c, d, -0.5, this.ⵠΔⵠ);
    };
  }
  function mx(b, c, d, e, f) {
    Fj(ox, b, c, d, e, f);
    const g = ir(px[0], px[1], px[2], px[3], px[4]);
    ir(px[0], px[1], px[2], px[3], px[4]);
    return ~(g & 61183) & (g | 61183);
  }
  function nx(b, c, d) {
    const e = (24 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (0 << (b & 255)) + (8 << (b >> 24 & 255));
    const f = ((13326 + c) * 2147483629 + 2147483587) % 2147483647;
    const g = d ^ 36682;
    return (2147483587 + (31887 + (hb(e, f, g, e, f) ^ function (b, c, d, e) {
      const f = ((17292 + b) * 22695477 + 1) % 4294967296;
      const g = ((19784 + c) * 22695477 + 1) % 4294967296;
      const a = ((d + 29872) * 214013 + 2531011) % 4294967296;
      const i = ((e + 58534) * 214013 + 2531011) % 4294967296;
      const j = hb(f, g, a, i, f);
      jb(g, a, i, f, g);
      return j ^ 36249;
    }(g, e, f, g))) * 2147483629) % 2147483647;
  }
  let ox = es;
  let px = hg;
  const qx = $j;
  $j = function () {
    ox = hj(Vj(14));
    px = Bk(ox);
    if (qx) {
      qx();
    }
  };
  ΔᐃⲆΔⵠ = {
    ⵠᐃΔΔΔΔⵠ: 1,
    ᐃⲆᐃⵠⲆ: 2,
    ΔⵠᐃⲆⲆᐃΔ: 100,
    ⲆᐃΔᐃΔⵠⵠ: 3,
    ⵠⵠΔⵠⵠⵠⲆ: 300,
    ΔⲆⵠⵠⲆᐃᐃ: 4,
    ᐃⲆᐃⵠⵠⵠΔᐃⵠ: 0.4,
    ΔΔⲆⲆΔⲆΔ: 0,
    ᐃΔⵠⵠΔⵠⵠᐃⵠ: 0.2,
    ΔⵠⲆⵠᐃᐃⲆ: 100,
    ᐃᐃᐃᐃᐃⵠⵠᐃⵠ: 0.2,
    ⲆⵠⲆΔⵠᐃⵠ: 100,
    ⵠⲆⵠᐃΔᐃⲆᐃᐃ: 0.2,
    ⵠⲆᐃΔΔⵠⲆ: 2
  };
  function rx(a, b, c) {
    this.ᐃᐃΔⲆⲆⲆΔ = a;
    this.c = 0;
    this.ᐃΔΔⵠ = b;
    this.ⲆΔⵠᐃⵠ = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + 1) % this.max;
      var a = this.ⲆΔⵠᐃⵠ[this.c];
      this.ᐃᐃΔⲆⲆⲆΔ.ᐃᐃⵠⵠᐃⲆⲆ(this.ᐃΔΔⵠ, a);
      this.ᐃΔΔⵠ.play(a);
    };
  }
  function sx(a) {
    this.ΔⲆⵠⲆᐃⲆΔ = 1;
    this.ᐃⲆᐃⲆ = 0;
    this.mode = -1;
    this.ᐃᐃⲆⵠⵠ = Dx.sample.ᐃᐃⲆⵠⵠ[a];
    this.ⲆᐃΔΔⲆⲆⵠ = Dx.sample.ⲆᐃΔΔⲆⲆⵠ[a];
    this.ⵠᐃᐃΔΔⲆⲆ = Dx.sample.ⵠᐃᐃΔΔⲆⲆ[a];
    this.ΔᐃⲆΔⲆⲆᐃ = Dx.sample.ΔᐃⲆΔⲆⲆᐃ[a];
    this.ⵠᐃⵠⵠᐃⵠΔ = new rx(this, jx.ᐃⵠΔᐃⵠⵠⵠ.ᐃΔΔⵠⲆ, Dx.ᐃᐃᐃⵠⵠ.ⵠᐃⵠⵠᐃⵠΔ[a]);
    this.ᐃᐃⵠⵠΔ = new rx(this, jx.ⵠᐃΔⵠΔᐃⲆ.ᐃΔΔⵠⲆ, Dx.ᐃᐃᐃⵠⵠ.ᐃᐃⵠⵠΔ[a]);
    this.ΔΔⲆΔⵠ = new rx(this, jx.ⲆΔᐃΔΔⲆᐃ.ᐃΔΔⵠⲆ, Dx.ᐃᐃᐃⵠⵠ.ΔΔⲆΔⵠ[a]);
    this.ⲆⲆᐃⲆᐃ = a;
    this.x = 0;
    this.y = 0;
    this.ⵠⲆΔΔⲆ = 0;
    this.ⲆⲆΔⵠⵠ = ΔᐃⲆΔⵠ.ⲆⵠΔΔⵠΔΔⵠⵠ;
    this.ΔⵠΔΔ = {
      x: 0,
      y: 0
    };
    this.ᐃⵠΔⵠⵠ = jx.ᐃⵠⵠⵠⵠⵠᐃ.ᐃΔΔⵠⲆ;
    this.ⲆᐃᐃΔᐃⵠΔΔⵠ = function (a) {
      if (a === 1) {
        this.ⵠᐃⵠⵠᐃⵠΔ.play();
      } else if (a === 2) {
        this.ᐃᐃⵠⵠΔ.play();
      } else if (a === 3) {
        this.ΔΔⲆΔⵠ.play();
      }
    };
    this.ⵠⵠᐃⵠΔⵠΔ = function (a) {
      if (a.ᐃᐃⵠⲆⵠⲆΔ > 0) {
        return ΔᐃⲆΔⵠ.ᐃⲆᐃⵠⲆ;
      } else if (a.ᐃⲆⲆΔⵠΔⲆ > 0) {
        return ΔᐃⲆΔⵠ.ⵠᐃΔΔΔΔⵠ;
      } else if (a.ΔΔⵠⵠⵠ > 0 || a.ⵠΔᐃⲆⵠ > 0) {
        return ΔᐃⲆΔⵠ.ⲆᐃΔᐃΔⵠⵠ;
      } else {
        return ΔᐃⲆΔⵠ.ΔΔⲆⲆΔⲆΔ;
      }
    };
    this.ᐃⵠΔᐃᐃ = function (a) {
      this.ΔⲆⵠⲆᐃⲆΔ = 0;
      this.ᐃⲆᐃⲆ = a;
      var b = yx.ⲆⵠᐃⵠⲆ[a];
      b.ⲆⲆᐃⲆᐃ = this.ⲆⲆᐃⲆᐃ;
      this.mode = this.ⵠⵠᐃⵠΔⵠΔ(b);
      this.ΔⵠΔΔ.x = b.x;
      this.ΔⵠΔΔ.y = b.y;
    };
    this.ⵠⵠΔⵠⵠⲆΔ = function () {
      this.ΔⲆⵠⲆᐃⲆΔ = 1;
      this.mode = -1;
      this.ᐃⵠΔⵠⵠ.stop(this.ᐃᐃⲆⵠⵠ);
      this.ᐃⵠΔⵠⵠ.stop(this.ⲆᐃΔΔⲆⲆⵠ);
      this.ᐃⵠΔⵠⵠ.stop(this.ⵠᐃᐃΔΔⲆⲆ);
      this.ᐃⵠΔⵠⵠ.stop(this.ΔᐃⲆΔⲆⲆᐃ);
    };
    this.fade = function (a, b) {
      var c = $w * this.ᐃⵠΔⵠⵠ.volume(a);
      this.ᐃⵠΔⵠⵠ.fade(c, 0, b, a);
    };
    this.ᐃᐃⵠⵠᐃⲆⲆ = function (a, b) {
      if (this.ⵠⲆΔΔⲆ && this.ⲆⲆᐃⲆᐃ) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.ⲆΔΔᐃⲆ = function (b, c, d, e, f, g, a) {
      this.ⲆⲆΔⵠⵠ = g;
      if (e && this.mode === f) {
        var i = $w * this.ᐃⵠΔⵠⵠ.volume(b);
        if (this.ⵠⲆΔΔⲆ) {
          var j = $w * (Math.random() * d + c);
          this.ᐃⵠΔⵠⵠ.fade(i, j, a, b);
        } else {
          this.ᐃⵠΔⵠⵠ.fade(i, 0, a, b);
        }
      } else if (f != this.mode && this.ⵠⲆΔΔⲆ) {
        this.ᐃⵠΔⵠⵠ.fade(0, $w * (c + d), a, b);
      } else if (this.ⵠⲆΔΔⲆ) {
        i = $w * this.ᐃⵠΔⵠⵠ.volume(b);
        j = (Math.random() * d + c) * $w;
        this.ᐃⵠΔⵠⵠ.fade(i, j, a, b);
      }
      this.ᐃᐃⵠⵠᐃⲆⲆ(this.ᐃⵠΔⵠⵠ, b);
      this.ᐃⵠΔⵠⵠ.play(b);
    };
    this.ΔⵠΔ = function () {
      var a = yx.ⲆⵠᐃⵠⲆ[this.ᐃⲆᐃⲆ];
      this.ⲆⲆΔⵠⵠ -= Gx;
      if (this.ⲆⲆΔⵠⵠ <= 0) {
        var b = 0;
        if (a.x != this.ΔⵠΔΔ.x || a.y != this.ΔⵠΔΔ.y) {
          if (!this.ⵠⲆΔΔⲆ) {
            b = 1;
            this.ⵠⲆΔΔⲆ = 1;
          }
          this.x = Dx.ᐃᐃⵠⲆᐃΔⲆ(a.x, ΔᐃⲆΔⵠ.ⵠⲆᐃΔΔⵠⲆ);
          this.y = Dx.ⲆⵠⲆⵠⵠⵠⵠ(a.y, ΔᐃⲆΔⵠ.ⵠⲆᐃΔΔⵠⲆ);
        } else if (this.ⵠⲆΔΔⲆ) {
          b = 1;
          this.ⵠⲆΔΔⲆ = 0;
        }
        this.ΔⵠΔΔ.x = a.x;
        this.ΔⵠΔΔ.y = a.y;
        ΔⵠⲆⵠ = this.ⵠⵠᐃⵠΔⵠΔ(a);
        if (ΔⵠⲆⵠ != this.mode) {
          if (this.mode === ΔᐃⲆΔⵠ.ⵠᐃΔΔΔΔⵠ) {
            this.fade(this.ᐃᐃⲆⵠⵠ, ΔᐃⲆΔⵠ.ⵠⵠΔⵠⵠⵠⲆ);
          } else if (ΔᐃⲆΔⵠ.ᐃⲆᐃⵠⲆ === this.mode) {
            this.fade(this.ⲆᐃΔΔⲆⲆⵠ, ΔᐃⲆΔⵠ.ΔⵠᐃⲆⲆᐃΔ);
          } else if (this.mode === ΔᐃⲆΔⵠ.ΔΔⲆⲆΔⲆΔ) {
            this.fade(this.ⵠᐃᐃΔΔⲆⲆ, ΔᐃⲆΔⵠ.ΔⵠⲆⵠᐃᐃⲆ);
          } else if (ΔᐃⲆΔⵠ.ⲆᐃΔᐃΔⵠⵠ === this.mode) {
            this.fade(this.ΔᐃⲆΔⲆⲆᐃ, ΔᐃⲆΔⵠ.ⲆⵠⲆΔⵠᐃⵠ);
          }
        }
        if (ΔⵠⲆⵠ === ΔᐃⲆΔⵠ.ⵠᐃΔΔΔΔⵠ) {
          this.ⲆΔΔᐃⲆ(this.ᐃᐃⲆⵠⵠ, 0.08, 0.3, b, ΔⵠⲆⵠ, ΔᐃⲆΔⵠ.ᐃⲆᐃⵠⵠⵠΔᐃⵠ, ΔᐃⲆΔⵠ.ⵠⵠΔⵠⵠⵠⲆ);
        } else if (ΔⵠⲆⵠ === ΔᐃⲆΔⵠ.ᐃⲆᐃⵠⲆ) {
          this.ⲆΔΔᐃⲆ(this.ⲆᐃΔΔⲆⲆⵠ, 0.2, 0.3, b, ΔⵠⲆⵠ, ΔᐃⲆΔⵠ.ᐃᐃᐃᐃᐃⵠⵠᐃⵠ, ΔᐃⲆΔⵠ.ΔⵠᐃⲆⲆᐃΔ);
        } else if (ΔⵠⲆⵠ === ΔᐃⲆΔⵠ.ΔΔⲆⲆΔⲆΔ) {
          this.ⲆΔΔᐃⲆ(this.ⵠᐃᐃΔΔⲆⲆ, 0.3, 0.6, b, ΔⵠⲆⵠ, ΔᐃⲆΔⵠ.ⵠⲆⵠᐃΔᐃⲆᐃᐃ, ΔᐃⲆΔⵠ.ΔⵠⲆⵠᐃᐃⲆ);
        } else if (ΔᐃⲆΔⵠ.ⲆᐃΔᐃΔⵠⵠ === ΔⵠⲆⵠ) {
          this.ⲆΔΔᐃⲆ(this.ΔᐃⲆΔⲆⲆᐃ, 0.1, 0.25, b, ΔⵠⲆⵠ, ΔᐃⲆΔⵠ.ᐃΔⵠⵠΔⵠⵠᐃⵠ, ΔᐃⲆΔⵠ.ⲆⵠⲆΔⵠᐃⵠ);
        }
        this.mode = ΔⵠⲆⵠ;
      }
    };
    this.check = function () {
      var a = yx.ⲆⵠᐃⵠⲆ[this.ᐃⲆᐃⲆ];
      if (a) {
        return lj;
      } else {
        this.ⵠⵠΔⵠⵠⲆΔ(a);
        return false;
      }
    };
  }
  function tx(a) {
    return _a.String.fromCharCode(a);
  }
  function ux(a, b, c, d, e) {
    Gj(ox, a, b, c, d, e);
    return ((249 + (mx(px[0], px[1], px[2], px[3], px[4]) ^ Hr(px[0], px[1], px[2], px[3]))) * 75 + 74) % 65537;
  }
  (function () {
    const a = {
      ⲆΔⵠΔⵠᐃⲆⲆⵠ: 9150676,
      ᐃⵠⲆⲆⵠⵠΔⲆⲆ: 5894738,
      ⲆⵠⲆⵠⲆⲆᐃ: 7627732,
      ⲆΔⲆⲆⵠⵠⲆᐃⵠ: 13797659
    };
  })();
  ᐃⲆΔᐃᐃⲆⲆ = 0;
  document.getElementById("version").innerHTML = 52 + ".3";
  var vx = [];
  var wx = {
    time: Math.floor(Math.random() * 2),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = Mr.ⲆⵠᐃᐃΔ[wx.time];
  wx.items.push(new Xf(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
  wx.items.push(new Xf(100, 0, 0, 0, 0, 0, 0, 5));
  wx.items.push(new Xf(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
  wx.items.push(new Xf(100, 0, 0, 0, 0, 0, 0, 5));
  var xx;
  var yx;
  var zx;
  var Ax;
  var Bx = new function () {
    var b = this;
    function a(a) {
      let b = a.name || a.a;
      if (a.auto) {
        return b;
      } else {
        return b + " [" + a.nu + " " + Lb[324] + "]";
      }
    }
    this.Δᐃⵠᐃ = null;
    this.ᐃⵠⲆᐃᐃ = 0;
    this.ᐃⵠⲆᐃⲆ = [];
    this.ΔⵠΔΔΔᐃᐃ = {};
    this.ΔΔΔᐃⵠⵠΔ = {};
    this.ΔᐃⲆᐃΔ = [[], [], [], [], [], [], [], [], []];
    this.ⲆᐃᐃᐃⲆΔΔ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
    this.ᐃⲆⲆⵠΔ = 0;
    this.ⲆᐃᐃⵠᐃᐃΔ = 0;
    this.ΔⲆᐃᐃⵠΔⲆ = function (c) {
      if (Bf !== undefined) {
        b.ᐃⵠⲆᐃⲆ.push({
          a: Bf.name,
          gm: Bf.mode,
          idx: 0,
          m: 100,
          nu: 0,
          id: 0
        });
        c();
        return;
      }
      fetch(Sf + "/list", {
        method: "GET"
      }).then(function (a) {
        if (a.ok) {
          a.json().then(function (d) {
            b.ᐃⵠⲆᐃⲆ = [];
            b.ΔΔΔᐃⵠⵠΔ = {};
            for (let a in Wf.ⲆΔⲆⲆⲆᐃⵠ) {
              const c = Wf.ⲆΔⲆⲆⲆᐃⵠ[a];
              b.ᐃⵠⲆᐃⲆ.push({
                a: "Auto Select",
                gm: c,
                m: 100,
                nu: 0,
                auto: true
              });
            }
            var f = 0;
            var e = 1;
            var j = 3;
            for (let a = 0; d.length > a; a++) {
              const c = d[a];
              const k = c.n;
              const m = c.l;
              const h = c.p;
              const g = [];
              b.ΔⵠΔΔΔᐃᐃ[k] = g;
              const l = [];
              for (let a = 0; h.length > a; a++) {
                const b = k + h[a][f];
                l.push(b);
                g.push(b);
              }
              for (let a = 0; m.length > a; a++) {
                const c = m[a];
                let d;
                let h = Wf.ⲆΔⲆⲆⲆᐃⵠ[c[2]];
                let i = h + c[e];
                d = h in b.ΔΔΔᐃⵠⵠΔ ? ++b.ΔΔΔᐃⵠⵠΔ[h] : b.ΔΔΔᐃⵠⵠΔ[h] = 1;
                if (i in b.ΔΔΔᐃⵠⵠΔ) {
                  ΔⲆⵠᐃⵠⵠᐃ = ++b.ΔΔΔᐃⵠⵠΔ[i];
                } else {
                  ΔⲆⵠᐃⵠⵠᐃ = b.ΔΔΔᐃⵠⵠΔ[i] = 1;
                }
                b.ᐃⵠⲆᐃⲆ.push({
                  name: c[4],
                  a: Wf.ᐃⲆⲆⲆᐃⲆⲆᐃⵠ[c[e]] + " " + ΔⲆⵠᐃⵠⵠᐃ,
                  r: c[e],
                  gm: Wf.ⲆΔⲆⲆⲆᐃⵠ[c[2]],
                  idx: d,
                  m: 100,
                  nu: c[j],
                  id: c[e] + c[f],
                  p: l
                });
              }
            }
            const a = [];
            const i = [];
            const k = [];
            for (let c = 0; c < b.ᐃⵠⲆᐃⲆ.length; c++) {
              const d = b.ᐃⵠⲆᐃⲆ[c];
              if (!d.auto) {
                if (d.gm === Wf.ⲆΔⲆⲆⲆᐃⵠ[6]) {
                  if (typeof d.name === "string" && (d.name.indexOf("Private Server") !== -1 || d.nu > 95)) {
                    a.push(d);
                  } else {
                    i.push(d);
                  }
                  k.push(c);
                }
              }
            }
            const h = [];
            h.push(...i.sort(function (a, b) {
              return b.nu - a.nu;
            }));
            h.push(...a.sort(function (a, b) {
              return (b.nu < 95 ? b.nu : 0) - (a.nu < 95 ? a.nu : 0);
            }));
            for (let a = 0; a < k.length; a++) {
              const c = k[a];
              const d = h[a];
              d.idx = a + 1;
              b.ᐃⵠⲆᐃⲆ[c] = d;
            }
            c();
          });
        } else {
          _a.setTimeout(function () {
            b.ΔⲆᐃᐃⵠΔⲆ(c);
          }, 3000);
        }
      });
    };
    this.ᐃᐃΔⵠⵠᐃΔⵠⵠ = function (a) {
      var b = [];
      for (var c = 0; c < a.length; c++) {
        if (a[c].a.indexOf(Fr) !== -1) {
          b.push(c);
        }
      }
      if (b.length === 0) {
        return 0;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.ᐃⲆΔΔᐃᐃⲆ = function (b) {
      var c = 0;
      for (var d = 0; b.length > d; d++) {
        c += b[d].nu;
      }
      var e = document.getElementById("servselect");
      if (Bx.ⲆᐃᐃᐃⲆΔΔ[Bx.ᐃⲆⲆⵠΔ] === -1) {
        Bx.ⲆᐃᐃᐃⲆΔΔ[Bx.ᐃⲆⲆⵠΔ] = e.selectedIndex = Bx.ᐃᐃΔⵠⵠᐃΔⵠⵠ(b);
      } else {
        e.selectedIndex = Bx.ⲆᐃᐃᐃⲆΔΔ[Bx.ᐃⲆⲆⵠΔ];
      }
      var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + Lb[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + Lb[323] + " (" + this.ΔⲆⲆⵠⲆΔⲆ + ") " + Lb[325] + "</li>";
      for (d = 0; b.length > d; d++) {
        f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
      }
      f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + Lb[326] + "</li>";
      f += "</div>";
      e.innerHTML = f;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var b = $(this).text();
        var c = -1;
        for (var d = Bx.ΔᐃⲆᐃΔ[Bx.ᐃⲆⲆⵠΔ], e = 0; d.length > e; e++) {
          if (a(d[e]) === b) {
            c = e;
            break;
          }
        }
        if (c !== -1) {
          document.getElementById("servselect").selectedIndex = c;
          Bx.ⲆᐃᐃᐃⲆΔΔ[Bx.ᐃⲆⲆⵠΔ] = c;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(b);
        }
      });
    };
    this.ΔⲆⲆⵠⲆΔⲆ = 0;
    this.ⲆⵠΔⲆⵠᐃⲆᐃⲆ = function () {
      this.ΔⲆⲆⵠⲆΔⲆ = 0;
      for (var a = 0; a < Bx.ᐃⵠⲆᐃⲆ.length; a++) {
        if (this.ᐃⵠⲆᐃⲆ[a].gm == "experimental") {
          this.ΔᐃⲆᐃΔ[7].push(this.ᐃⵠⲆᐃⲆ[a]);
        } else if (this.ᐃⵠⲆᐃⲆ[a].gm == "zombies") {
          this.ΔᐃⲆᐃΔ[2].push(this.ᐃⵠⲆᐃⲆ[a]);
        } else if (this.ᐃⵠⲆᐃⲆ[a].gm == "community") {
          this.ΔᐃⲆᐃΔ[6].push(this.ᐃⵠⲆᐃⲆ[a]);
        } else if (this.ᐃⵠⲆᐃⲆ[a].gm == "forest") {
          this.ΔᐃⲆᐃΔ[4].push(this.ᐃⵠⲆᐃⲆ[a]);
        } else if (this.ᐃⵠⲆᐃⲆ[a].gm == "battle-royale") {
          this.ΔᐃⲆᐃΔ[5].push(this.ᐃⵠⲆᐃⲆ[a]);
        } else if (this.ᐃⵠⲆᐃⲆ[a].gm == "vampires") {
          this.ΔᐃⲆᐃΔ[3].push(this.ᐃⵠⲆᐃⲆ[a]);
        } else {
          this.ΔᐃⲆᐃΔ[0].push(this.ᐃⵠⲆᐃⲆ[a]);
        }
        this.ΔⲆⲆⵠⲆΔⲆ += this.ᐃⵠⲆᐃⲆ[a].nu;
      }
      for (a = 0; this.ΔᐃⲆᐃΔ.length > a; a++) {
        if (this.ΔᐃⲆᐃΔ[a].length === 0) {
          this.ΔᐃⲆᐃΔ[a].push({
            a: Lb[327],
            ⲆΔⵠΔⵠΔΔᐃΔ: 0,
            ᐃⲆ: "127.0.0.1",
            ᐃⵠⲆ: 80
          });
        }
      }
      this.ᐃⲆΔΔᐃᐃⲆ(this.ΔᐃⲆᐃΔ[0]);
      this.ⵠⲆⲆⵠⵠ = function (a) {
        Bx.ᐃⲆⲆⵠΔ = a;
        Bx.ᐃⲆΔΔᐃᐃⲆ(Bx.ΔᐃⲆᐃΔ[Bx.ᐃⲆⲆⵠΔ]);
        Bx.ᐃⲆΔΔᐃᐃⲆ(Bx.ΔᐃⲆᐃΔ[Bx.ᐃⲆⲆⵠΔ]);
        document.getElementById("servselect").selectedIndex = Bx.ᐃⲆⲆⵠΔ;
      };
    };
    this.ⲆΔᐃⵠᐃⵠΔ = 0;
    this.ⵠᐃᐃⵠΔⲆΔ = 0;
    this.ⲆᐃⲆᐃⲆ = null;
    this.timeout = function () {
      b.ⵠᐃᐃⵠΔⲆΔ++;
      b.Δᐃⵠᐃ.close();
      if (b.ⵠᐃᐃⵠΔⲆΔ > 3) {
        Kx = 1;
        xx.ⵠⵠᐃⵠⵠᐃΔΔⵠ = Hw.ⵠᐃⵠⵠᐃΔⲆΔⵠ;
        b.Δᐃᐃᐃⵠ(Lb[300]);
        xx.waiting = false;
        if (zx.reconnect.enabled) {
          Cx.ⲆⵠᐃⵠΔ(xx.ΔᐃᐃⵠⲆ);
        }
      } else if (ct === zx.ΔⲆΔⲆᐃⲆⵠ || zx.ΔⲆΔⵠⵠᐃᐃ === undefined || es === zx.ⵠⵠᐃⲆⲆΔⲆ || Hb === zx.ΔᐃⲆᐃⲆⲆᐃ) {
        xx.ⵠΔΔⵠⲆⲆΔ(function () {
          b.ⵠᐃⲆᐃⵠᐃⵠ();
        }, 1);
      } else {
        b.ⵠᐃⲆᐃⵠᐃⵠ();
      }
    };
    this.ΔΔᐃᐃᐃⵠᐃ = function (a) {
      if (this.ᐃⵠⲆᐃᐃ == this.Δᐃⵠᐃ.ᐃⵠⲆᐃᐃ) {
        this.ᐃⵠⲆᐃᐃ++;
        this.Δᐃᐃᐃⵠ(Lb[301] + a);
        Cx.ⲆⵠᐃⵠΔ(xx.ΔᐃᐃⵠⲆ);
      }
    };
    this.ⲆⵠᐃᐃΔⵠᐃⵠⵠ = function () {
      this.Δᐃᐃᐃⵠ("You speak too much");
    };
    this.ⵠⵠΔⵠΔⲆᐃⲆᐃ = function () {
      clearTimeout(this.ⲆᐃⲆᐃⲆ);
      this.Δᐃᐃᐃⵠ(Lb[302]);
      xx.waiting = false;
    };
    this.ΔᐃⲆⲆⵠΔᐃⲆⵠ = function () {
      zx.ⲆⵠΔⲆΔ.open = false;
    };
    this.ᐃⲆᐃⵠⵠⲆᐃᐃⵠ = function () {
      Cx.ΔᐃΔⲆΔⵠⲆ = 0;
    };
    this.ⲆᐃΔΔΔᐃⵠᐃⲆ = function () {
      Cx.ΔΔⵠⲆᐃΔⲆ = 0;
    };
    this.ᐃⲆⲆⲆⵠⵠΔΔΔ = function (a) {
      zx.ΔⲆΔᐃᐃ.ᐃᐃⵠΔᐃ = a;
      if (yx.ᐃⵠΔᐃⲆ > -300) {
        if (a === 0) {
          this.Δᐃᐃᐃⵠ(Lb[340]);
        } else {
          this.Δᐃᐃᐃⵠ(Lb[341]);
        }
      }
    };
    this.ⲆΔΔⲆΔ = function (a) {
      zx.ⲆΔΔⲆΔ = a;
    };
    this.ΔⵠΔⲆⵠᐃΔⲆⲆ = function (a) {
      zx.ⵠΔⲆΔΔΔᐃ = a;
    };
    this.ⵠΔⲆΔΔΔᐃ = function (a) {
      zx.ⵠΔⲆⲆⵠ.ᐃᐃⵠΔᐃ = a;
      if (yx.ΔΔⵠⵠⵠ > -300) {
        if (a === 0) {
          this.Δᐃᐃᐃⵠ(Lb[342]);
        } else {
          this.Δᐃᐃᐃⵠ(Lb[343]);
        }
      }
    };
    this.ΔᐃⲆᐃⵠᐃᐃΔᐃ = function (a) {
      if (a === 0) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (a === 1) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (a === 2) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (a === 3) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ⲆⲆᐃⵠⲆⲆⵠⲆᐃ = function () {
      Cx.ⲆΔΔᐃⲆᐃᐃ = 0;
    };
    this.ⲆⲆⲆⵠⲆᐃΔΔΔ = function () {
      Cx.ᐃⵠΔⲆⲆⵠΔ = 0;
    };
    this.ⲆΔⲆΔᐃⵠᐃⵠΔ = function () {
      zx.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ = [];
      zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ = [];
      zx.ᐃΔⲆᐃ.id = -1;
      zx.ᐃΔⲆᐃ.ΔᐃΔᐃⲆⵠᐃ.stop();
      zx.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ = [];
      zx.ⵠΔᐃΔ.ᐃΔΔᐃᐃ = x;
      zx.ⵠΔᐃΔ.ⵠⵠᐃⵠⵠⵠⵠΔⵠ = false;
      zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ = -1;
      zx.ⵠΔᐃΔ.id = -1;
      zx.ⵠΔᐃΔ.ⵠⵠΔⵠΔ = Iq;
      zx.ⵠΔᐃΔ.ⵠⲆⵠᐃᐃ = Qg;
      zx.ⵠΔᐃΔ.ᐃⵠΔΔⲆ = Iq;
      zx.ⵠΔᐃΔ.ΔΔΔⵠⲆⵠᐃ = false;
      zx.ⵠΔᐃΔ.timeout = new ΔⲆᐃ.ᐃⵠⲆⲆ(Il, 0, 1, 0, 1, 1);
    };
    this.ⵠᐃΔΔᐃᐃᐃΔⲆ = function () {
      clearTimeout(this.ⲆᐃⲆᐃⲆ);
      this.Δᐃᐃᐃⵠ();
      xx.waiting = x;
    };
    this.ⲆⵠΔᐃⲆⲆΔ = function (a) {
      for (var b = 0; a.length > b; b++) {
        if (typeof a[b] === "string") {
          a[b] = ΔⲆᐃ.ⵠΔⵠᐃΔⲆᐃ(a[b]);
        }
      }
      zx.ᐃⲆᐃΔᐃ.ⵠᐃΔᐃΔ(a[1], a[2], a[3], a[4]);
    };
    this.message = function (a) {
      this.Δᐃᐃᐃⵠ(a);
    };
    this.ⲆⲆᐃⵠⵠⲆⲆⵠΔ = function () {
      clearTimeout(this.ⲆᐃⲆᐃⲆ);
      this.Δᐃᐃᐃⵠ(Lb[339]);
      xx.waiting = jj;
    };
    this.ΔᐃⵠᐃΔⲆᐃᐃⵠ = function () {
      clearTimeout(this.ⲆᐃⲆᐃⲆ);
      this.Δᐃᐃᐃⵠ(Lb[338]);
      xx.waiting = jj;
    };
    this.ᐃⲆⵠⵠⲆⲆᐃⲆⵠ = function () {
      clearTimeout(this.ⲆᐃⲆᐃⲆ);
      this.Δᐃᐃᐃⵠ(Lb[304]);
      xx.waiting = false;
    };
    this.ᐃᐃᐃᐃⵠⵠΔⵠᐃ = function () {
      zx.ᐃΔⲆᐃ.ⲆⲆᐃⵠΔᐃⲆ(1, 0);
      Cx.ⵠⵠΔΔⲆΔⵠ();
    };
    this.ᐃⲆⲆΔᐃΔᐃΔⲆ = function (a) {
      var b = a[1];
      var c = yx.ΔΔᐃΔ[b];
      c.ⵠⲆᐃᐃ = a[2];
      c.ⵠΔⵠⲆⲆ = a[3];
      c.ᐃΔⲆⲆΔΔΔ = a[4];
      c.ⲆⵠᐃⲆᐃ = a[5];
      c.ᐃΔⲆⵠⲆ = a[6];
      c.ΔᐃΔⵠΔ = a[7];
      c.level = a[8];
      var d = yx.ⲆⵠᐃⵠⲆ[b * yx.ⵠⲆΔΔᐃⵠΔ];
      if (d) {
        d.ⵠⲆᐃᐃ = a[2];
        d.ⵠΔⵠⲆⲆ = a[3];
        d.ᐃΔⲆⲆΔΔΔ = a[4];
        d.ⲆⵠᐃⲆᐃ = a[5];
      }
    };
    this.ⲆΔⵠᐃΔⵠⲆᐃΔ = function (a) {
      if (a === 29) {
        zx.ᐃΔⲆᐃ.ⲆⲆᐃⵠΔᐃⲆ(1, 0);
        Cx.ⵠⵠΔΔⲆΔⵠ();
      } else {
        this.ᐃᐃⲆⵠᐃⵠⲆ([0, a, 1]);
      }
      zx.ⵠΔᐃΔ.ⲆᐃⵠⵠⵠⲆᐃ();
    };
    this.ⲆⵠᐃⵠΔⵠⲆⲆⵠ = function (a) {
      zx.ⵠⵠⵠⲆᐃ.ⲆⲆΔⵠⵠ = 0;
      zx.ⵠΔᐃΔ.ΔᐃⵠΔΔⲆⵠᐃΔ(a);
    };
    this.ⵠⲆΔΔⲆⲆΔⲆᐃ = function (a) {
      for (var b = ot[a].r, c = 0; b.length > c; c++) {
        if (zx.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.length < zx.ᐃΔⲆᐃ.max || zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[b[c][0]] > 0) {
          var d = Math.floor(b[c][1] * 0.8);
          if (!d) {
            continue;
          }
          this.ᐃᐃⲆⵠᐃⵠⲆ([0, b[c][0], d]);
        }
      }
      zx.ⵠΔᐃΔ.ⲆᐃⵠⵠⵠⲆᐃ();
    };
    this.ᐃⲆⲆΔΔⲆΔⵠⲆ = function (a) {
      zx.ⵠⵠⵠⲆᐃ.ⲆⲆΔⵠⵠ = 0;
      zx.ⵠΔᐃΔ.ⲆΔⵠΔⵠᐃΔⲆⵠ(a);
    };
    this.Δᐃᐃᐃⵠ = function (a) {
      if (zx.alert.text) {
        if (a !== zx.alert.text && zx.alert.list[zx.alert.list.length - 1] !== a) {
          zx.alert.list.push(a);
        }
      } else {
        zx.alert.text = a;
      }
    };
    this.ⲆⲆⵠⲆᐃᐃⵠⵠᐃ = function () {
      this.Δᐃᐃᐃⵠ(Lb[305]);
    };
    this.ΔΔⲆⵠΔⲆⲆΔΔ = function () {
      var a;
      a = zx.ⵠΔⵠ == 0 ? Lb[306] : Lb[307] + (zx.ⵠΔⵠ + 1) + Lb[308];
      this.Δᐃᐃᐃⵠ(a);
      zx.ⵠΔⵠ++;
    };
    this.ⵠΔⵠΔⲆⵠΔᐃⲆ = function () {
      clearTimeout(b.ⲆᐃⲆᐃⲆ);
      zx.reconnect.enabled = Il;
      zx.ᐃΔⵠⵠᐃ = false;
      this.Δᐃᐃᐃⵠ(Lb[309]);
      Cx.ⲆⵠᐃⵠΔ(xx.ΔᐃᐃⵠⲆ);
      this.Δᐃⵠᐃ.close();
    };
    this.ⵠⲆⵠⵠΔⲆΔⵠⵠ = function () {
      Kx = 1;
      clearTimeout(this.ⲆᐃⲆᐃⲆ);
      this.Δᐃᐃᐃⵠ(Lb[310]);
      xx.waiting = _n;
    };
    this.ᐃⵠΔᐃⵠⲆΔⵠᐃ = function () {
      Kx = 1;
      clearTimeout(this.ⲆᐃⲆᐃⲆ);
      this.Δᐃᐃᐃⵠ(Lb[311]);
      xx.waiting = Qi;
    };
    this.ⵠⵠΔⲆΔⵠⲆᐃⵠ = function (a) {
      var b = a[1];
      var c = yx.ΔΔᐃΔ;
      c[b].ⵠⲆⵠΔⵠ = a[2];
      c[b].ⵠⲆᐃᐃ = a[3];
      c[b].ⵠΔⵠⲆⲆ = a[4];
      c[b].ᐃΔⲆⲆΔΔΔ = a[5];
      c[b].ⲆⵠᐃⲆᐃ = a[6];
      c[b].ᐃΔⲆⵠⲆ = a[7];
      c[b].ΔᐃΔⵠΔ = a[8];
      c[b].level = a[9];
      c[b].ᐃᐃᐃΔᐃ = 0;
      c[b].ΔΔᐃⵠᐃⵠΔ = null;
      c[b].label = null;
      c[b].ⵠᐃⵠⲆⵠⲆΔ = null;
      c[b].ᐃΔⵠⵠᐃ = Zs;
      if (Jf === 1) {
        c[b].ⵠⲆⵠΔⵠ += "|" + b;
      }
    };
    this.ⵠᐃⵠΔᐃⵠⲆᐃᐃ = function () {
      this.Δᐃⵠᐃ[xf](jq[jo].stringify([9]));
    };
    this.ⲆⵠⵠⲆΔⵠᐃⲆᐃ = function () {
      this.Δᐃᐃᐃⵠ(Lb[312]);
    };
    this.ᐃⵠᐃⵠΔΔᐃ = function () {
      this.Δᐃᐃᐃⵠ(Lb[313]);
    };
    this.ⲆⵠⵠΔⵠᐃⲆΔΔ = function (a) {
      this.Δᐃⵠᐃ[xf](aa[Ea].stringify([38, a]));
      zx.ⲆⵠΔⲆΔ.open = false;
    };
    this.ⵠᐃⲆⵠⵠΔΔΔΔ = function (a) {
      for (var b = _f[a - 1].items, c = 0; b.length > c && zx.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.length < zx.ᐃΔⲆᐃ.max; c++) {
        var d = b[c][1];
        var e = b[c][0];
        if (b[c][1] === 29) {
          zx.ᐃΔⲆᐃ.ⲆⲆᐃⵠΔᐃⲆ(1, 0);
        } else {
          this.ᐃᐃⲆⵠᐃⵠⲆ([0, d, e]);
        }
      }
    };
    this.ᐃᐃⲆⵠᐃⵠⲆ = function (b) {
      for (var c = b.length, d = zx.ᐃΔⲆᐃ, e = 1; e < c; e += 2) {
        var f = b[e];
        var g = b[e + 1];
        for (var h = 0; h < d.ΔⵠΔⵠⲆ.length; h++) {
          if (d.ΔⵠΔⵠⲆ[h].id == f) {
            d.ᐃᐃⲆⲆ[f] += g;
            break;
          }
        }
        if (d.ΔⵠΔⵠⲆ.length == h) {
          d.ᐃᐃⲆⲆ[f] = g;
          d.ΔⵠΔⵠⲆ.push(Cx.ΔΔΔ[f]);
          Cx.ⵠⵠΔΔⲆΔⵠ();
        }
      }
      zx.ⵠΔᐃΔ.ΔⵠΔ();
    };
    this.ⵠΔⲆΔ = function (b, c, d, e, f, g, a) {
      zx.ⵠΔⲆΔ.ᐃᐃⵠᐃ = b / 100;
      zx.ⵠΔⲆΔ.ΔⵠⲆ = c / 100;
      zx.ⵠΔⲆΔ.c = d / 100;
      zx.ⵠΔⲆΔ.ᐃᐃⲆ = e / 100;
      zx.ⵠΔⲆΔ.ⵠΔⲆ = f / 100;
      zx.ⵠΔⲆΔ.ⲆⵠⲆΔⲆᐃⵠ = g / 100;
      zx.ⲆΔΔⲆΔ = a;
    };
    this.ΔⵠⲆⵠᐃΔΔᐃΔ = function (a) {
      Cx.ᐃΔΔᐃ.modify(a, 2);
    };
    this.ΔΔᐃΔᐃⲆⵠⵠⵠ = function (a) {
      Cx.ᐃΔΔᐃ.modify(a, 0);
    };
    this.claimed = function (a) {
      Cx.ᐃΔΔᐃ.modify(a, 3);
    };
    this.ⲆΔⵠⵠᐃΔᐃⵠⲆ = function (a, b) {
      zx.ⵠΔⲆΔ.ᐃᐃⵠᐃ = a / 100;
      zx.ⲆΔΔⲆΔ = b;
    };
    this.ᐃᐃΔⵠᐃᐃⵠΔⵠ = function (a) {
      zx.ⵠΔⲆΔ.ᐃᐃⲆ = a / 100;
    };
    this.ⲆⵠΔᐃⵠⵠⵠᐃᐃ = function (a) {
      zx.ⵠΔⲆΔ.ΔⵠⲆ = a / 100;
    };
    this.ⵠⲆᐃΔᐃⵠΔᐃⲆ = function (a) {
      zx.ⵠΔⲆΔ.ⲆⵠⲆΔⲆᐃⵠ = a / 100;
    };
    this.ⵠⵠΔᐃⲆⲆΔⲆⲆ = function (a) {
      zx.ⵠΔⲆΔ.c = a / 100;
    };
    this.ⲆΔΔΔΔⲆⲆΔⵠ = function (a) {
      yx.time = a;
      yx.transition = pk;
      Dx.transition = 1;
    };
    this.ⵠᐃⵠΔⲆΔΔⲆⲆ = function () {
      document.getElementById("game_body").style.backgroundColor = Mr.ⲆⵠᐃᐃΔ[yx.time];
    };
    this.ΔⲆⲆΔⲆΔⵠⲆⲆ = function (a) {
      if (yx.mode == 1 && yx.ΔΔᐃΔ[a].ⵠⲆⵠΔⵠ !== "spectator") {
        this.Δᐃᐃᐃⵠ(yx.ΔΔᐃΔ[a].ⵠⲆⵠΔⵠ + Lb[314]);
      }
      yx.ΔΔᐃΔ[a].ᐃΔⵠⵠᐃ = Ah;
    };
    this.ⵠΔᐃᐃᐃΔⵠⵠΔ = function (a) {
      var b = new Uint16Array(a);
      ᐃΔΔⵠ.ⲆⵠΔ.ᐃⲆⵠΔⵠ(b[1], b[2]);
    };
    this.ⵠᐃⵠⲆⲆⵠᐃⵠΔ = function (a) {
      var b = new Uint16Array(a);
      zx.ⲆⵠΔ.ᐃⲆⵠΔⵠ(b[1], b[2]);
    };
    this.ᐃᐃᐃⵠⲆⵠⲆᐃᐃ = function (b, c) {
      var d = new Uint16Array(c);
      for (var e = (b.length - 2) / 4, f = 0; e > f; f++) {
        var g = d[1 + f * 2];
        var i = b[4 + f * 4];
        var j = Math.PI * ((b[5 + f * 4] >> 1) / 127) * 2;
        var k = yx.ⲆⵠᐃⵠⲆ[i * yx.ⵠⲆΔΔᐃⵠΔ + g];
        if (k && k.ΔΔᐃ) {
          if (Dx.loaded && Dx.ΔᐃᐃⵠⲆ) {
            Dx.ΔΔᐃ(b[5 + f * 4] & 1, ΔⵠⲆⲆᐃ[k.type], k.x, k.y);
          }
          k.ΔΔᐃ.angle = j;
          k.ΔΔᐃ.ΔⵠΔ = j;
        }
      }
    };
    this.ⵠᐃⵠᐃⵠⵠΔΔⵠ = function (b) {
      var c = new Uint16Array(b);
      for (var d = (c.length - 1) / 4, e = 0; e < d; e++) {
        var f;
        var i = e * 4;
        var j = c[1 + i];
        var m = c[2 + i];
        var p = (c[3 + i] >> 1) / 127 * Math.PI * 2;
        var q = c[4 + i];
        var t = vx.ⵠᐃΔᐃ[m][j];
        switch (q) {
          case 0:
            (f = t.p[0][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 1:
            (f = t.s[0][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 2:
            (f = t.s[1][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 3:
            (f = t.s[2][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 4:
            (f = t.t[0][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 5:
            (f = t.t[1][0]).angle = p;
            f.ΔⵠΔ = ch;
            break;
          case 6:
            (f = t.t[2][0]).angle = p;
            f.ΔⵠΔ = Er;
            break;
          case 7:
            (f = t.t[3][0]).angle = p;
            f.ΔⵠΔ = pk;
            break;
          case 8:
            (f = t.t[4][0]).angle = p;
            f.ΔⵠΔ = Kl;
            break;
          case 9:
            (f = t.t[5][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 10:
            (f = t.g[0][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 11:
            (f = t.g[1][0]).angle = p;
            f.ΔⵠΔ = Sg;
            break;
          case 12:
            (f = t.g[2][0]).angle = p;
            f.ΔⵠΔ = un;
            break;
          case 13:
            (f = t.d[0][0]).angle = p;
            f.ΔⵠΔ = yb;
            break;
          case 14:
            (f = t.d[1][0]).angle = p;
            f.ΔⵠΔ = lj;
            break;
          case 15:
            (f = t.d[2][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 16:
            (f = t.b[0][0]).angle = p;
            f.ΔⵠΔ = jr;
            break;
          case 17:
            (f = t.b[1][0]).angle = p;
            f.ΔⵠΔ = Qj;
            break;
          case 18:
            (f = t.b[2][0]).angle = p;
            f.ΔⵠΔ = un;
            break;
          case 19:
            (f = t.b[3][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 20:
            (f = t.f[0][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 21:
            (f = t.f[1][0]).angle = p;
            f.ΔⵠΔ = Kh;
            break;
          case 22:
            (f = t.f[2][0]).angle = p;
            f.ΔⵠΔ = yk;
            break;
          case 23:
            (f = t.sw[0][0]).angle = p;
            f.ΔⵠΔ = Qj;
            break;
          case 24:
            (f = t.sw[1][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 25:
            (f = t.sw[2][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 26:
            (f = t.gw[0][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 27:
            (f = t.gw[1][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 28:
            (f = t.gw[2][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 29:
            (f = t.dw[0][0]).angle = p;
            f.ΔⵠΔ = jr;
            break;
          case 30:
            (f = t.dw[1][0]).angle = p;
            f.ΔⵠΔ = xo;
            break;
          case 31:
            (f = t.dw[2][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 32:
            (f = t.a[0][0]).angle = p;
            f.ΔⵠΔ = ch;
            break;
          case 33:
            (f = t.a[1][0]).angle = p;
            f.ΔⵠΔ = Sg;
            break;
          case 34:
            (f = t.a[2][0]).angle = p;
            f.ΔⵠΔ = Er;
            break;
          case 35:
            (f = t.cs[0][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 36:
            (f = t.cs[1][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 37:
            (f = t.cs[2][0]).angle = p;
            f.ΔⵠΔ = Sg;
            break;
          case 38:
            (f = t.cs[3][0]).angle = p;
            f.ΔⵠΔ = yb;
            break;
          case 40:
            (f = t.plm[0][0]).angle = p;
            f.ΔⵠΔ = xo;
            break;
          case 41:
            (f = t.plm[1][0]).angle = p;
            f.ΔⵠΔ = jr;
            break;
          case 42:
            (f = t.plm[2][0]).angle = p;
            f.ΔⵠΔ = Qj;
            break;
          case 50:
            (f = t.re[0][0]).angle = p;
            f.ΔⵠΔ = k;
            break;
          case 51:
            (f = t.re[1][0]).angle = p;
            f.ΔⵠΔ = V;
            break;
          case 52:
            (f = t.re[2][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 55:
            (f = t.c[0][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 56:
            (f = t.m[0][0]).angle = p;
            f.ΔⵠΔ = Ck;
            break;
          case 57:
            (f = t.m[1][0]).angle = p;
            f.ΔⵠΔ = true;
            break;
          case 58:
            (f = t.m[2][0]).angle = p;
            f.ΔⵠΔ = true;
        }
        if (Dx.loaded && Dx.ΔᐃᐃⵠⲆ && f) {
          Dx.ΔΔᐃ(c[3 + i] & 1, ⲆᐃᐃΔ[q], f.x, f.y);
        }
      }
    };
    this.ⵠᐃΔⵠⵠ = function () {
      this.Δᐃⵠᐃ[xf](Yo[Do].stringify([35, zx.ⵠᐃΔⵠⵠ.ⲆⲆΔᐃ, zx.ⵠᐃΔⵠⵠ.ΔⲆⵠⲆⲆ]));
    };
    this.ⵠⲆⵠΔΔⲆᐃΔⲆ = function (a, b) {
      this.Δᐃⵠᐃ[xf](Yo[ba].stringify([30, b, a.ⲆⲆΔᐃ, a.ΔⲆⵠⲆⲆ]));
    };
    this.ⲆΔΔⲆΔΔΔ = function (a, b, c) {
      if (b) {
        this.Δᐃⵠᐃ[xf](Yo[ba].stringify([14, b, a.ⲆⲆΔᐃ, a.ΔⲆⵠⲆⲆ]));
      } else {
        this.Δᐃⵠᐃ[xf](Yo[Vo].stringify([25, c, a.ⲆⲆΔᐃ, a.ΔⲆⵠⲆⲆ]));
      }
    };
    this.ⵠΔⵠⲆΔⵠΔⵠⲆ = function (a) {
      this.Δᐃⵠᐃ[xf](qq[fa].stringify([13, a.ⲆⲆΔᐃ, a.ΔⲆⵠⲆⲆ]));
    };
    this.ΔᐃⲆⵠΔΔⵠᐃΔ = function (a) {
      this.Δᐃⵠᐃ[xf](qq[Oa].stringify([32, a]));
    };
    this.ᐃⵠⲆᐃΔⵠᐃᐃΔ = function (a) {
      this.Δᐃⵠᐃ[xf](ca[Do].stringify([29, a.ⲆⲆΔᐃ, a.ΔⲆⵠⲆⲆ]));
    };
    this.ΔᐃᐃΔᐃΔⲆΔΔ = function (a, b) {
      this.Δᐃⵠᐃ[xf](aa[fa].stringify([27, b, a.ⲆⲆΔᐃ, a.ΔⲆⵠⲆⲆ, a.type]));
    };
    this.ᐃΔⵠⲆᐃⲆⵠΔⵠ = function (a, b) {
      this.Δᐃⵠᐃ[xf](aa[fa].stringify([7, b, a.ⲆⲆΔᐃ, a.ΔⲆⵠⲆⲆ]));
    };
    this.ᐃᐃᐃⵠⵠⲆⲆΔⲆ = function (a, b, c) {
      this.Δᐃⵠᐃ[xf](ca[ba].stringify([1, b, c, a.ⲆⲆΔᐃ, a.ΔⲆⵠⲆⲆ]));
    };
    this.ᐃⲆᐃⵠⵠⲆⲆ = function (a) {
      this.Δᐃⵠᐃ[xf](qq[fa].stringify([37, a.ⲆⲆΔᐃ, a.ΔⲆⵠⲆⲆ, a.type]));
    };
    this.ᐃᐃⵠⲆⵠⲆⵠⵠⲆ = function (a) {
      this.Δᐃⵠᐃ[xf](qq[fa].stringify([4, a.ⲆⲆΔᐃ, a.ΔⲆⵠⲆⲆ]));
    };
    this.ⵠⲆⲆⵠⲆᐃᐃⲆⲆ = function (a) {
      this.Δᐃⵠᐃ[xf](qq[fa].stringify([8, a.ⲆⲆΔᐃ, a.ΔⲆⵠⲆⲆ]));
    };
    this.ΔⵠᐃᐃΔⵠΔΔⵠ = function (a) {
      this.Δᐃⵠᐃ[xf](rq[Ja].stringify([20, a.ⲆⲆΔᐃ, a.ΔⲆⵠⲆⲆ]));
    };
    this.ΔΔⲆᐃⵠΔΔⵠⲆ = function (a) {
      this.Δᐃⵠᐃ[xf](tq[Ea].stringify([3, a.ΔⲆⵠⲆⲆ]));
    };
    this.ΔᐃᐃᐃΔᐃΔ = function (a) {
      b.Δᐃⵠᐃ[xf](Ha[Oa].stringify([23, zx.ⲆⲆᐃⵠΔ.id, zx.ΔⲆᐃⲆⲆ[a]]));
    };
    this.ᐃΔΔⲆⲆΔΔᐃⵠ = function () {
      b.Δᐃⵠᐃ[xf](xq[Ka].stringify([17, zx.ⲆⲆᐃⵠΔ.ⲆⲆΔᐃ, zx.ⲆⲆᐃⵠΔ.id]));
    };
    this.ᐃⵠⲆΔⲆⲆᐃ = function () {
      b.Δᐃⵠᐃ[xf](Za[wq].stringify([12]));
    };
    this.ΔⵠⲆⵠᐃΔⲆⵠᐃ = function () {
      b.Δᐃⵠᐃ[xf](Za[Oa].stringify([19, zx.ⲆⲆᐃⵠΔ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        zx.ⲆⲆᐃⵠΔ.lock = 1;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        zx.ⲆⲆᐃⵠΔ.lock = 0;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.Ⲇᐃᐃ = function (b, e, i) {
      var j = new Uint16Array(b);
      if (i) {
        yx.ⲆᐃⵠⵠᐃᐃⵠΔΔ();
      }
      for (var k = (e.length - 2) / 18, n = 0; k > n; n++) {
        var o = 2 + n * 18;
        var q = 1 + n * 9;
        var t = e[o];
        var w = j[q + 1];
        var x = j[q + 5];
        var y = yx.ⵠⲆΔΔᐃⵠΔ * t + x;
        if (w & 1) {
          yx.ⵠⵠⵠΔΔⵠΔⲆᐃ(y);
        } else {
          var A = j[q + 2];
          var B = j[q + 3];
          var D = j[q + 4];
          var E = j[q + 6];
          var F = j[q + 7];
          var G = j[q + 8];
          var H = Math.PI * (e[o + 1] / 255) * 2;
          if (yx.ⲆⵠᐃⵠⲆ[y]) {
            var I = yx.ⲆⵠᐃⵠⲆ[y];
            I.r.x = B;
            I.r.y = D;
            if (t != 0 && ΔⲆᐃ.ⲆⵠⲆⲆ(I, I.r) > 200) {
              I.x = B;
              I.y = D;
            }
            if (zx.id !== I.id || t === 0) {
              I.ΔΔΔⲆⲆⵠΔ = H;
            }
            I.action |= w;
            I.info = E;
            I.ⵠᐃᐃⲆⲆ = F;
            I.ⲆᐃΔⵠᐃ = G;
            if (I.ΔⵠΔ) {
              I.ΔⵠΔ(w);
            }
          } else {
            var J = new Xf(A, t, x, B, D, H, w, E, F, G);
            yx.ⲆⵠᐃⵠⲆ[y] = J;
            yx.Ⲇᐃᐃ[A].push(J);
          }
        }
      }
    };
    this.ΔⵠⲆᐃ = function (a) {
      this.ⲆΔᐃⵠᐃⵠΔ = Hx;
      var b = new Uint16Array(a);
      zx.ⲆⵠᐃΔⵠ.ᐃⵠΔᐃᐃ(b);
    };
    this.ⲆΔΔΔⵠΔᐃᐃΔ = function (a) {
      if (tk !== lt) {
        ot = lt;
      }
      if (a.length > 0) {
        lt = JSON.parse(JSON.stringify(ot));
        for (var b = 0; a.length > b; b++) {
          var c = a[b];
          var d = ot[c.item];
          if (d !== undefined) {
            d.r = c.recipe;
            d.w = c.workbench;
            d.f = c.fire;
            d.ⵠΔⲆ = c.water;
            d.e = c.well;
            d.time = 1 / c.time;
          }
        }
      }
    };
    this.ⵠΔΔⲆΔⵠᐃ = function (a) {
      if (a && a.length !== 0) {
        zx.ⵠΔΔⲆΔⵠᐃ.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          Δⵠ = [];
          var f = 14;
          var g = b.length * (f + 4) + 10;
          var h = 0;
          d.font = f + "px Baloo Paaji";
          for (var i = 0; i < b.length; i++) {
            if (b[i].charAt(0) === "#") {
              Δⵠ[i] = b[i].substring(0, 7);
              b[i] = b[i].substring(8);
            } else {
              Δⵠ[i] = "#FFFFFF";
            }
            h = Math.max(d.measureText(b[i]).width + 16, h);
          }
          c.height = g;
          c.width = h;
          i = 0;
          for (; b.length > i; i++) {
            var j = um(1, b[i], f, Δⵠ[i], null, null, null, null, null, "#000", 6);
            d.drawImage(j, 8, i * (f + 4) + 5);
          }
          return c;
        }(a);
      } else {
        zx.ⵠΔΔⲆΔⵠᐃ.message = mq;
      }
    };
    this.ᐃᐃⲆΔⲆ = function (a) {
      var b = yx.ⲆⵠᐃⵠⲆ[a[1] * yx.ⵠⲆΔΔᐃⵠΔ];
      if (b) {
        if (yx.mode === 2 && b.ⵠⲆᐃᐃ === 0) {
          if (zx.ΔⵠⵠⵠΔ) {
            if (Math.random() > 0.5) {
              b.text.push(a[2] + " ..." + ⲆⲆⲆⲆⵠ);
            } else {
              b.text.push(ⲆⲆⲆⲆⵠ + "... " + a[2]);
            }
          } else {
            b.text.push(ⵠⲆⵠΔᐃᐃΔ[Math.floor(Math.random() * ⵠⲆⵠΔᐃᐃΔ.length)]);
          }
        } else {
          b.text.push(a[2]);
        }
      }
    };
    this.ΔΔᐃⲆⲆΔᐃᐃΔ = function (a) {
      if (zx.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.length !== zx.ᐃΔⲆᐃ.max || ot[a].ᐃⲆⲆΔ === 29 || zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ot[a].ᐃⲆⲆΔ) != -1 || zx.ᐃΔⲆᐃ.ⲆⲆⲆⲆΔΔⵠᐃⲆ(ot[a].r)) {
        this.Δᐃⵠᐃ[xf](jq[jo].stringify([26, a]));
        return 1;
      } else {
        this.ᐃⵠᐃⵠΔΔᐃ();
        return 0;
      }
    };
    this.ⵠⵠΔⵠΔ = function (a) {
      zx.ⵠΔᐃΔ.ⵠᐃᐃⲆⲆⵠⵠᐃⲆ(a);
    };
    this.ⵠⲆⵠᐃᐃ = function (a) {
      zx.ⵠΔᐃΔ.ⵠⲆⵠᐃᐃ = a;
      zx.ⵠΔᐃΔ.ΔⵠΔ();
    };
    this.ᐃⵠΔΔⲆ = function (a) {
      zx.ⵠΔᐃΔ.ᐃⵠΔΔⲆ = a;
      zx.ⵠΔᐃΔ.ΔⵠΔ();
    };
    this.ΔΔΔⵠⲆⵠᐃ = function (a) {
      zx.ⵠΔᐃΔ.ΔΔΔⵠⲆⵠᐃ = a;
      zx.ⵠΔᐃΔ.ΔⵠΔ();
    };
    this.ⵠΔΔΔᐃⵠΔᐃⵠ = function (a) {
      this.Δᐃᐃᐃⵠ(Lb[315]);
    };
    this.ΔᐃⲆⵠΔΔΔΔᐃ = function () {
      zx.ⵠΔᐃΔ.ⲆᐃⵠⵠⵠⲆᐃ();
    };
    this.ᐃΔᐃΔΔ = function (a) {
      Cx.ᐃΔᐃΔΔ.ΔΔᐃΔ = [];
      var b = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
      var c = 0;
      for (var d = 1; a.length > d; d += 2) {
        var e = {
          x: Math.floor(a[d] * yx.w / 250),
          y: Math.floor(a[d + 1] * yx.ΔⵠⲆ / 250)
        };
        if (b && !c && !zx.ΔᐃⲆΔᐃⲆᐃ && ΔⲆᐃ.ⲆⵠⲆⲆ(e, b) < 250) {
          c += 1;
        } else {
          Cx.ᐃΔᐃΔΔ.ΔΔᐃΔ.push(e);
        }
      }
    };
    this.ⲆⵠⵠⲆⵠⲆᐃⵠⲆ = function () {
      zx.ⵠᐃΔⵠⵠ.open = Lk;
      zx.ⲆⲆⵠⲆⲆ.enabled = false;
      zx.ⲆⲆⵠⲆⲆ.ⲆⲆΔⵠⵠ = -1;
      zx.ⲆⲆⵠⲆⲆ.label = null;
      zx.ⲆⲆⵠⲆⲆ.ΔᐃΔᐃⵠⲆᐃ = null;
      zx.ⲆⲆⵠⲆⲆ.now = -1;
    };
    this.ⲆⲆⵠⲆⲆ = function (a) {
      Wf.ΔΔᐃⵠⵠⲆⵠ = a;
      zx.ⲆⲆⵠⲆⲆ.enabled = yb;
      zx.ⲆⲆⵠⲆⲆ.ⲆⲆΔⵠⵠ = new Date().getTime();
      zx.ⲆⲆⵠⲆⲆ.label = null;
      zx.ⲆⲆⵠⲆⲆ.now = -1;
      for (var b = [39, 45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; b.length > c; c++) {
        var d = zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(b[c]);
        if (d != -1) {
          zx.ᐃΔⲆᐃ.ⲆᐃⵠᐃᐃⲆᐃ(b.length[c], d);
        }
      }
      zx.ⵠΔᐃΔ.ⲆᐃⵠⵠⵠⲆᐃ();
    };
    this.ⵠᐃᐃⲆⵠⵠᐃⵠⲆ = function (a, b, c) {
      this.ⵠⵠⵠⵠᐃⵠΔ(a, b * 256 + c);
    };
    this.ⵠⵠⵠⵠᐃⵠΔ = function (a, b) {
      zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ = -1;
      zx.ᐃΔⲆᐃ.ⲆⲆⲆⲆΔⵠΔ(a, b, zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(a));
      zx.ⵠΔᐃΔ.ΔⵠΔ();
    };
    this.ᐃⲆⲆᐃⵠⲆΔΔⵠ = function (a) {
      zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ = -1;
      zx.Ⲇⵠⵠⵠⵠ.wait = true;
      var b = zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(a);
      zx.ᐃΔⲆᐃ.ⲆⲆⲆⲆΔⵠΔ(a, 1, b);
      if (b >= 0 && !zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[a]) {
        zx.ⵠΔᐃΔ.ΔⵠΔ();
      }
      if (a == 159) {
        zx.ΔⲆᐃⲆⲆ = [zx.id];
      }
    };
    this.ᐃⲆΔⵠᐃⲆᐃΔΔ = function () {
      this.Δᐃⵠᐃ[xf](Yo[Do].stringify([6]));
    };
    this.ⲆΔᐃΔⵠᐃⵠΔⲆ = function (a) {
      this.Δᐃⵠᐃ[xf](aa[Vo].stringify([2, a.ⲆΔⵠⲆⲆ, a.id]));
    };
    this.ⵠᐃⵠⲆᐃΔⲆᐃᐃ = function (a, b) {
      this.Δᐃⵠᐃ[xf](aa[fa].stringify([10, a, b]));
    };
    this.ⲆΔⲆᐃᐃᐃⲆⲆⵠ = function () {
      var a = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
      if (a) {
        var b = Math.PI * 2;
        this.Δᐃⵠᐃ[xf](aa[Vo].stringify([22, zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ, Math.floor((a.angle + b) % b * 255 / b), zx.ⵠΔᐃΔ.mode]));
      }
    };
    this.ΔΔⲆⲆⵠ = function (a, b) {
      switch (a) {
        case 195:
        case 110:
        case 116:
        case 117:
        case 145:
        case 127:
        case 133:
        case 136:
        case 142:
        case 143:
        case 189:
        case 207:
        case 233:
        case 205:
        case 209:
        case 211:
        case 192:
        case 137:
        case 138:
        case 196:
        case 197:
        case 200:
        case 199:
          zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ = -1;
          this.Δᐃⵠᐃ[xf](ca[ba].stringify([34, a]));
          break;
        case 114:
        case 160:
        case 115:
        case 132:
        case 188:
        case 206:
        case 204:
        case 191:
        case 193:
        case 208:
        case 210:
        case 113:
        case 162:
        case 163:
        case 164:
        case 165:
        case 118:
        case 167:
        case 151:
        case 152:
        case 166:
        case 171:
        case 172:
        case 173:
        case 124:
        case 218:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 220:
        case 168:
        case 169:
        case 170:
        case 119:
        case 122:
        case 123:
        case 217:
        case 219:
        case 125:
        case 190:
        case 141:
        case 135:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 198:
        case 201:
        case 182:
        case 183:
        case 144:
        case 159:
        case 221:
          if (!zx.ΔⵠⵠⵠΔ) {
            if (a === zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ) {
              zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ = -1;
            } else {
              zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ = a;
            }
          }
          break;
        case 0:
        case 57:
        case 5:
        case 6:
        case 30:
        case 19:
        case 9:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 92:
        case 93:
        case 12:
        case 13:
        case 14:
        case 15:
        case 33:
        case Vr.ⵠⵠⵠΔᐃᐃΔⲆⵠ:
        case 16:
        case 17:
        case 34:
        case 18:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
          if (!zx.ΔⵠⵠⵠΔ) {
            zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ = -1;
            if ((c = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ]) && c.right === a) {
              this.Δᐃⵠᐃ[xf](qq[fa].stringify([34, 7]));
            } else {
              zx.ᐃᐃⵠⵠΔ.wait = _q;
              this.Δᐃⵠᐃ[xf](rq[Ja].stringify([34, a]));
            }
          }
          break;
        case 1:
        case 8:
        case 3:
        case 4:
        case 35:
        case 36:
        case 37:
        case 28:
        case 38:
        case 39:
        case 31:
        case 32:
        case 45:
        case 46:
        case 50:
        case 51:
        case 52:
        case 55:
        case 56:
        case 53:
        case 54:
        case 89:
        case 49:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
          if (!zx.ΔⵠⵠⵠΔ) {
            zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ = -1;
            if ((c = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ]) && c.right === a) {
              this.Δᐃⵠᐃ[xf](tq[Ea].stringify([34, 7]));
            } else {
              this.Δᐃⵠᐃ[xf](Ha[Oa].stringify([34, a]));
            }
          }
          break;
        case 223:
        case 224:
        case 225:
        case 239:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 91:
          if (!zx.ΔⵠⵠⵠΔ) {
            zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ = -1;
            var c = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
            this.Δᐃⵠᐃ[xf](Ha[Oa].stringify([34, a]));
          }
          break;
        case 77:
        case 78:
        case 79:
        case 58:
        case 25:
        case 26:
        case 27:
        case 43:
        case 44:
        case 20:
        case 21:
        case 22:
        case 59:
        case 60:
        case 90:
        case 61:
        case 47:
          if ((c = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ]) && a !== c.ⲆΔᐃΔᐃ) {
            zx.ⵠᐃΔⵠⲆ.wait = true;
          }
          this.Δᐃⵠᐃ[xf](ca[fa].stringify([34, a]));
          break;
        case 10:
        case 83:
        case 84:
        case 86:
        case 11:
        case 40:
        case 88:
        case 82:
        case 80:
        case 81:
        case 41:
        case 42:
        case 85:
        case 23:
        case 24:
        case 48:
          this.Δᐃⵠᐃ[xf](xq[Ka].stringify([34, a]));
      }
    };
    this.ᐃⵠⵠⲆⲆⵠⵠⵠΔ = function (a) {
      this.Δᐃⵠᐃ[xf](aa[jo].stringify([31, a]));
    };
    this.ⵠᐃᐃⵠⲆᐃⲆⵠⲆ = function (a) {
      zx.Ⲇⵠⵠⵠⵠ.wait = true;
      var b = zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(a);
      zx.ᐃΔⲆᐃ.ⲆᐃⵠᐃᐃⲆᐃ(a, b);
      zx.ⵠΔᐃΔ.ΔⵠΔ();
    };
    this.ⵠⵠᐃⲆⲆⲆⵠⵠⵠ = function (a, b) {
      this.Δᐃⵠᐃ[xf](jq[Ea].stringify([18, a]));
    };
    this.ⵠⵠᐃⲆⵠΔᐃⲆΔ = function (a, b) {
      this.Δᐃⵠᐃ[xf](Yo[Do].stringify([24, a]));
    };
    this.ᐃⵠᐃΔⲆⵠⵠᐃᐃ = function (a) {
      zx.Ⲇⵠⵠⵠⵠ.wait = jr;
      var b = zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(a);
      zx.ᐃΔⲆᐃ.ⲆⲆⲆⲆΔⵠΔ(a, 1, b);
      zx.ⵠΔᐃΔ.ΔⵠΔ();
    };
    this.ⵠΔⵠᐃⵠⵠᐃⵠⲆ = function (a) {
      var b = a[1];
      var c = a[2];
      zx.Ⲇⵠⵠⵠⵠ.wait = true;
      var d = zx.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(b);
      zx.ᐃΔⲆᐃ.ⲆⲆⲆⲆΔⵠΔ(b, c, d);
      zx.ⵠΔᐃΔ.ΔⵠΔ();
    };
    this.ΔΔⵠⲆᐃⵠⵠΔⵠ = function () {
      this.Δᐃⵠᐃ[xf](Yo[Do].stringify([16]));
    };
    this.ᐃⲆᐃⵠⲆⵠⲆΔⲆ = function (a) {
      var b = Math.PI * 2;
      this.Δᐃⵠᐃ[xf](aa[Vo].stringify([36, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ⵠΔᐃⵠⲆⲆⵠᐃᐃ = function (a) {
      var b = Math.PI * 2;
      this.Δᐃⵠᐃ[xf](aa[Vo].stringify([0, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ⲆΔⲆΔⲆᐃⵠⵠⵠ = function (a) {
      this.Δᐃⵠᐃ[xf](ΔⲆⵠΔⵠᐃⵠ[qo].stringify([11, a]));
    };
    this.ΔⵠⵠΔⲆΔᐃⵠⲆ = function (a) {
      this.Δᐃⵠᐃ[xf](qq[fa].stringify([33, a]));
    };
    this.ⵠᐃⵠⲆΔⲆΔΔⲆ = function (a) {
      var b = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
      if (zx.ΔⵠⵠⵠΔ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(0, 25) + " ..." + ⲆⲆⲆⲆⵠ);
        } else {
          b.text.push(ⲆⲆⲆⲆⵠ + "... " + a.substring(0, 25));
        }
      } else {
        b.text.push(a);
      }
      this.Δᐃⵠᐃ[xf](qq[fa].stringify([15, a]));
    };
    this.ΔⲆⲆⲆⵠ = function (a) {
      var b = ᐃΔΔⵠ.select.Ⲇᐃᐃ;
      if (b.length != 0) {
        var c = [11];
        var d = [];
        ΔⲆᐃ.ⲆⲆᐃⲆᐃᐃΔ(a, {
          x: ᐃΔΔⵠ.ⲆⵠΔ.rx,
          y: ᐃΔΔⵠ.ⲆⵠΔ.ry
        });
        c.push(a.x);
        c.push(a.y);
        for (var e = 0; b.length > e; e++) {
          d.push(b[e].ⵠⲆᐃΔⲆⵠⲆⵠⵠ);
        }
        c.push(d);
        this.Δᐃⵠᐃ[xf](rq[Ja].stringify(c));
      }
    };
    this.ΔΔᐃΔΔΔΔ = 0;
    this.ⲆⲆᐃⲆⵠⲆᐃ = {
      ⲆⲆⲆⵠ: 0,
      ᐃⲆ: 0
    };
    this.ⲆᐃⲆᐃᐃᐃⵠΔᐃ = function () {
      if (Hx - this.ΔΔᐃΔΔΔΔ > 50) {
        this.ΔΔᐃΔΔΔΔ = Hx;
        var a = zx.ⲆⵠΔ;
        var b = Math.floor(a.x / 100);
        var c = Math.floor(a.y / 100);
        if (b != this.ⲆⲆᐃⲆⵠⲆᐃ.ᐃⲆ || c != this.ⲆⲆᐃⲆⵠⲆᐃ.ⲆⲆⲆⵠ) {
          this.Δᐃⵠᐃ[xf](Ha[Ea].stringify([28, Math.floor(-a.x), Math.floor(-a.y)]));
          this.ⲆⲆᐃⲆⵠⲆᐃ.ᐃⲆ = b;
          this.ⲆⲆᐃⲆⵠⲆᐃ.ⲆⲆⲆⵠ = c;
        }
      }
    };
    this.ⲆⵠⲆᐃⲆΔⲆ = 0;
    this.ᐃᐃΔᐃᐃⲆΔⲆⲆ = function () {
      if (Hx - this.ⲆⵠⲆᐃⲆΔⲆ > 60000) {
        this.ⲆⵠⲆᐃⲆΔⲆ = Hx;
        this.ping();
      }
    };
    this.ΔᐃᐃᐃⵠⵠⵠⲆΔ = function () {
      zx.reconnect.enabled = true;
      if (b.ᐃⵠⲆᐃᐃ == b.Δᐃⵠᐃ.ᐃⵠⲆᐃᐃ) {
        b.ᐃⵠⲆᐃᐃ++;
        b.Δᐃⵠᐃ.close();
        Bx.connect();
      }
    };
    this.ᐃⲆΔᐃⵠΔᐃΔⲆ = function (a) {
      this.Δᐃᐃᐃⵠ(Lb[316]);
      for (var b = 1; a.length > b; b++) {
        zx.ΔⲆᐃⲆⲆ.push(a[b]);
      }
    };
    this.ᐃᐃⵠⲆᐃⲆⵠΔⵠ = function (a) {
      this.Δᐃᐃᐃⵠ(yx.ΔΔᐃΔ[a].ⵠⲆⵠΔⵠ + Lb[318]);
      zx.ΔⲆᐃⲆⲆ.push(a);
      var b = document.getElementById("team_box");
      if (Cx.ΔᐃⲆⲆᐃ != -1 && b.style.display == "inline-block") {
        Cx.ΔᐃᐃⵠΔ[Cx.ΔᐃⲆⲆᐃ].action();
      }
    };
    this.ΔΔΔⲆΔᐃΔᐃⲆ = function () {
      this.Δᐃᐃᐃⵠ(Lb[319]);
      zx.ⲆⲆᐃⵠΔ.wait = true;
      zx.ΔⲆᐃⲆⲆ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ᐃᐃᐃⲆⲆⵠⵠΔⲆ = function (a) {
      if (a == zx.id) {
        this.Δᐃᐃᐃⵠ(Lb[320]);
        zx.ⲆⲆᐃⵠΔ.wait = true;
        zx.ΔⲆᐃⲆⲆ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.Δᐃᐃᐃⵠ(yx.ΔΔᐃΔ[a].ⵠⲆⵠΔⵠ + Lb[321]);
        for (var b = 0; b < zx.ΔⲆᐃⲆⲆ.length; b++) {
          if (a == zx.ΔⲆᐃⲆⲆ[b]) {
            zx.ΔⲆᐃⲆⲆ.splice(b, 1);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (Cx.ΔᐃⲆⲆᐃ != -1 && c.style.display == "inline-block") {
          Cx.ΔᐃᐃⵠΔ[Cx.ΔᐃⲆⲆᐃ].action();
        }
      }
    };
    this.ᐃᐃⲆᐃⵠᐃⵠⲆᐃ = function (a) {
      zx.ᐃΔⵠⵠᐃ = Pn;
      this.Δᐃᐃᐃⵠ(Lb[322]);
      if (this.Δᐃⵠᐃ.ᐃⵠⲆᐃᐃ == this.ᐃⵠⲆᐃᐃ) {
        this.ᐃⵠⲆᐃᐃ++;
        Cx.ⲆⵠᐃⵠΔ(xx.ΔᐃᐃⵠⲆ);
        this.Δᐃⵠᐃ.close();
      }
    };
    this.ᐃⵠᐃΔΔⲆⵠⲆΔ = function (a, b) {
      zx.ᐃΔⵠⵠᐃ = Iq;
      var c = new Uint16Array(b);
      var d = new Uint32Array(b);
      zx.ᐃΔⲆΔⲆΔᐃ.ΔⲆⵠΔⲆᐃΔ = qb[a][Math.floor(Math.random() * qb[a].length)];
      zx.ᐃΔⲆΔⲆΔᐃ.ᐃᐃᐃΔᐃ = ΔⲆᐃ.ⵠⲆⲆⵠⵠΔᐃ(yx.ΔΔᐃΔ[zx.id].ᐃᐃᐃΔᐃ);
      zx.ᐃΔⲆΔⲆΔᐃ.ⵠᐃᐃΔᐃΔᐃ = ΔⲆᐃ.ⵠⲆⲆⵠⵠΔᐃ(d[1]);
      zx.ᐃΔⲆΔⲆΔᐃ.ΔᐃΔⵠⵠ = c[1];
      this.Δᐃᐃᐃⵠ(Lb[317]);
      if (this.ᐃⵠⲆᐃᐃ == this.Δᐃⵠᐃ.ᐃⵠⲆᐃᐃ) {
        this.ᐃⵠⲆᐃᐃ++;
        Cx.ⲆⵠᐃⵠΔ(Ax.ΔᐃᐃⵠⲆ);
        this.Δᐃⵠᐃ.close();
        try {
          _a.Widget.adsRefresh();
        } catch (a) {}
      }
    };
    this.ping = function () {
      this.Δᐃⵠᐃ[xf]("[21]");
    };
    this.ᐃᐃᐃⵠᐃⵠᐃⵠᐃ = function () {
      if (this.Δᐃⵠᐃ.readyState == 3) {
        this.ⲆΔᐃⵠᐃⵠΔ -= 600000;
      }
    };
    this.ⵠΔⲆⲆⵠΔⵠᐃᐃ = function () {
      if (Gx > 5) {
        this.ⲆΔᐃⵠᐃⵠΔ = Hx;
      }
      if (Hx - this.ⲆΔᐃⵠᐃⵠΔ > 600000) {
        this.ⲆΔᐃⵠᐃⵠΔ = Hx;
        this.ΔᐃᐃᐃⵠⵠⵠⲆΔ();
      }
    };
    this.ᐃⲆⵠᐃᐃᐃⲆⲆᐃ = function (c) {
      Kx++;
      clearTimeout(this.ⲆᐃⲆᐃⲆ);
      document.getElementById("commandMainBoxName").innerHTML = this.ΔᐃⲆᐃΔ[this.ᐃⲆⲆⵠΔ][this.ⲆᐃᐃᐃⲆΔΔ[this.ᐃⲆⲆⵠΔ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ⲆΔᐃⵠᐃⵠΔ = Hx;
      zx.ⵠΔⲆΔ.ⵠⲆⲆᐃⵠ.ᐃᐃΔΔⵠ = zx.ⵠΔⲆΔ.ⵠⲆⲆᐃⵠ.ᐃᐃⲆᐃⲆ;
      zx.ⵠΔⲆΔ.ⲆⲆᐃⲆⵠΔⵠ.ᐃᐃΔΔⵠ = zx.ⵠΔⲆΔ.ⲆⲆᐃⲆⵠΔⵠ.ᐃᐃⲆᐃⲆ;
      zx.ⵠΔⲆΔ.ⵠⲆᐃⲆⲆⵠᐃ.ᐃᐃΔΔⵠ = zx.ⵠΔⲆΔ.ⵠⲆᐃⲆⲆⵠᐃ.ᐃᐃⲆᐃⲆ;
      zx.ⵠΔⲆΔ.ⲆᐃⵠᐃⲆΔⲆ.ᐃᐃΔΔⵠ = zx.ⵠΔⲆΔ.ⲆᐃⵠᐃⲆΔⲆ.ᐃᐃⲆᐃⲆ;
      zx.ⵠΔⲆΔ.ⵠΔΔⵠᐃ.ᐃᐃΔΔⵠ = zx.ⵠΔⲆΔ.ⵠΔΔⵠᐃ.ᐃᐃⲆᐃⲆ;
      zx.ⵠΔⲆΔ.ᐃᐃⵠᐃ = 1;
      zx.ⵠΔⲆΔ.c = 1;
      zx.ⵠΔⲆΔ.ΔⵠⲆ = 1;
      zx.ⵠΔⲆΔ.ᐃᐃⲆ = 1;
      zx.ⵠΔⲆΔ.ⵠΔⲆ = 1;
      zx.ⵠΔⲆΔ.ⲆⵠⲆΔⲆᐃⵠ = 1;
      zx.ⲆΔⵠΔⲆᐃⲆ = false;
      Cx.ΔⲆⵠΔⵠ.display = 0;
      zx.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ = [];
      zx.ᐃΔⲆᐃ.ᐃᐃⲆⲆ = [];
      zx.ᐃΔⲆᐃ.max = 10;
      zx.ᐃΔⲆᐃ.ⲆᐃⵠᐃᐃΔⲆ = 0;
      zx.ᐃΔⲆᐃ.ᐃΔⲆΔΔ = 0;
      zx.ᐃΔⲆᐃ.id = -1;
      Cx.ΔᐃΔⲆΔⵠⲆ = 1;
      Cx.ΔΔⵠⲆᐃΔⲆ = 1;
      Cx.ᐃⵠΔⲆⲆⵠΔ = 1;
      Cx.ⲆΔΔᐃⲆᐃᐃ = 1;
      zx.ᐃΔⵠⵠᐃ = yb;
      zx.ᐃΔⲆᐃ.ΔᐃΔᐃⲆⵠᐃ.stop();
      zx.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ = [];
      zx.ⵠΔᐃΔ.ᐃΔΔᐃᐃ = false;
      zx.ⵠΔᐃΔ.ⵠⵠᐃⵠⵠⵠⵠΔⵠ = false;
      zx.ⵠΔᐃΔ.ⵠⲆⵠⵠ = -1;
      zx.ⵠΔᐃΔ.id = -1;
      zx.ⵠΔᐃΔ.ⵠⵠΔⵠΔ = Ah;
      zx.ⵠΔᐃΔ.ⵠⲆⵠᐃᐃ = Iq;
      zx.ⵠΔᐃΔ.ᐃⵠΔΔⲆ = _n;
      zx.ⵠΔᐃΔ.ΔΔΔⵠⲆⵠᐃ = Il;
      zx.ⵠΔᐃΔ.timeout = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, 1, 0, 1, 1);
      zx.ᐃᐃⵠⵠΔ.timeout = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, 1, 0, 1 / 10, 1);
      zx.ᐃᐃⵠⵠΔ.wait = false;
      zx.ⵠᐃΔⵠⲆ.timeout = new ΔⲆᐃ.ᐃⵠⲆⲆ(Qg, 0, 1, 0, 1 / 5, 1);
      zx.ⵠᐃΔⵠⲆ.wait = false;
      zx.Ⲇⵠⵠⵠⵠ.timeout = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, 1, 0, 1, 1);
      zx.Ⲇⵠⵠⵠⵠ.wait = false;
      zx.ⲆⲆᐃⵠΔ.id = -1;
      zx.ⲆⲆᐃⵠΔ.ⲆⲆΔᐃ = -1;
      zx.ⲆⲆᐃⵠΔ.wait = false;
      zx.ⲆⲆᐃⵠΔ.timeout = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, 1, 0, 1 / 30, 1);
      Cx.ᐃΔᐃΔΔ.Ⲇⵠⵠᐃⵠ.x = -1;
      Cx.ᐃΔᐃΔΔ.Ⲇⵠⵠᐃⵠ.y = -1;
      Cx.ΔΔⲆⲆ.open = false;
      Cx.ᐃΔᐃΔΔ.ΔΔᐃΔ = [];
      zx.ⲆᐃⵠⵠΔ.enabled = false;
      yx.mode = c[1];
      if (mb !== c[20] && c[21] !== mi) {
        yx.ᐃᐃΔⵠᐃ = c[20];
        yx.ΔΔΔⲆⲆ = c[21];
        yx.w = yx.ΔᐃᐃᐃΔⲆⲆ * yx.ᐃᐃΔⵠᐃ;
        yx.ΔⵠⲆ = yx.ⲆⲆΔᐃᐃᐃⵠ * yx.ΔΔΔⲆⲆ;
      }
      yx.ᐃⵠᐃⵠΔⵠⲆ = c[22];
      yx.ⵠΔᐃⵠⵠ = c[23];
      b.ⵠΔΔⲆΔⵠᐃ(c[24]);
      b.ⲆΔΔΔⵠΔᐃᐃΔ(c[25]);
      zx.ΔⲆΔᐃᐃ.ᐃᐃⵠΔᐃ = c[26];
      zx.ⵠΔⲆΔΔΔᐃ = 0;
      zx.ⵠΔⲆⲆⵠ.ᐃᐃⵠΔᐃ = c[27];
      yx.ⲆⲆᐃⵠⲆᐃⲆⵠᐃ(c[19]);
      yx.time = c[5];
      yx.ᐃᐃⵠΔⲆ.ΔΔΔⲆⵠ = c[15];
      yx.ᐃᐃⵠΔⲆ.ᐃⵠΔᐃᐃ = new Date().getTime();
      Cx.ᐃΔΔᐃ.ΔⵠᐃᐃΔⵠⵠ = c[16];
      yx.transition = Vn;
      zx.ⵠΔⵠ = c[2];
      Cx.ᐃΔΔᐃ.reset();
      zx.ΔⲆᐃⲆⲆ = c[8];
      yx.Ⲇᐃᐃ[0] = [];
      yx.Ⲇᐃᐃ[100] = [];
      yx.Ⲇᐃᐃ[2] = [];
      yx.Ⲇᐃᐃ[1] = [];
      yx.Ⲇᐃᐃ[6] = [];
      yx.Ⲇᐃᐃ[3] = [];
      yx.Ⲇᐃᐃ[31] = [];
      yx.Ⲇᐃᐃ[37] = [];
      yx.Ⲇᐃᐃ[43] = [];
      yx.Ⲇᐃᐃ[44] = [];
      yx.Ⲇᐃᐃ[39] = [];
      yx.Ⲇᐃᐃ[40] = [];
      yx.Ⲇᐃᐃ[54] = [];
      yx.Ⲇᐃᐃ[55] = [];
      yx.Ⲇᐃᐃ[4] = [];
      yx.Ⲇᐃᐃ[7] = [];
      yx.Ⲇᐃᐃ[8] = [];
      yx.Ⲇᐃᐃ[9] = [];
      yx.Ⲇᐃᐃ[10] = [];
      yx.Ⲇᐃᐃ[15] = [];
      yx.Ⲇᐃᐃ[16] = [];
      yx.Ⲇᐃᐃ[17] = [];
      yx.Ⲇᐃᐃ[45] = [];
      yx.Ⲇᐃᐃ[46] = [];
      yx.Ⲇᐃᐃ[47] = [];
      yx.Ⲇᐃᐃ[48] = [];
      yx.Ⲇᐃᐃ[49] = [];
      yx.Ⲇᐃᐃ[53] = [];
      yx.Ⲇᐃᐃ[11] = [];
      yx.Ⲇᐃᐃ[22] = [];
      yx.Ⲇᐃᐃ[23] = [];
      yx.Ⲇᐃᐃ[5] = [];
      yx.Ⲇᐃᐃ[12] = [];
      yx.Ⲇᐃᐃ[13] = [];
      yx.Ⲇᐃᐃ[14] = [];
      yx.Ⲇᐃᐃ[60] = [];
      yx.Ⲇᐃᐃ[70] = [];
      yx.Ⲇᐃᐃ[71] = [];
      yx.Ⲇᐃᐃ[72] = [];
      yx.Ⲇᐃᐃ[73] = [];
      yx.Ⲇᐃᐃ[74] = [];
      yx.Ⲇᐃᐃ[81] = [];
      yx.Ⲇᐃᐃ[82] = [];
      yx.Ⲇᐃᐃ[87] = [];
      yx.Ⲇᐃᐃ[86] = [];
      yx.Ⲇᐃᐃ[34] = [];
      yx.Ⲇᐃᐃ[65] = [];
      yx.Ⲇᐃᐃ[66] = [];
      yx.Ⲇᐃᐃ[67] = [];
      yx.Ⲇᐃᐃ[62] = [];
      yx.Ⲇᐃᐃ[63] = [];
      yx.Ⲇᐃᐃ[78] = [];
      yx.Ⲇᐃᐃ[77] = [];
      yx.Ⲇᐃᐃ[75] = [];
      yx.Ⲇᐃᐃ[76] = [];
      yx.Ⲇᐃᐃ[64] = [];
      yx.Ⲇᐃᐃ[69] = [];
      yx.Ⲇᐃᐃ[68] = [];
      yx.Ⲇᐃᐃ[79] = [];
      yx.Ⲇᐃᐃ[89] = [];
      yx.Ⲇᐃᐃ[83] = [];
      yx.Ⲇᐃᐃ[84] = [];
      yx.Ⲇᐃᐃ[85] = [];
      yx.Ⲇᐃᐃ[80] = [];
      yx.Ⲇᐃᐃ[88] = [];
      yx.Ⲇᐃᐃ[91] = [];
      yx.Ⲇᐃᐃ[90] = [];
      yx.Ⲇᐃᐃ[61] = [];
      yx.Ⲇᐃᐃ[18] = [];
      yx.Ⲇᐃᐃ[19] = [];
      yx.Ⲇᐃᐃ[20] = [];
      yx.Ⲇᐃᐃ[21] = [];
      yx.Ⲇᐃᐃ[50] = [];
      yx.Ⲇᐃᐃ[52] = [];
      yx.Ⲇᐃᐃ[51] = [];
      yx.Ⲇᐃᐃ[29] = [];
      yx.Ⲇᐃᐃ[56] = [];
      yx.Ⲇᐃᐃ[30] = [];
      yx.Ⲇᐃᐃ[38] = [];
      yx.Ⲇᐃᐃ[33] = [];
      yx.Ⲇᐃᐃ[32] = [];
      yx.Ⲇᐃᐃ[24] = [];
      yx.Ⲇᐃᐃ[25] = [];
      yx.Ⲇᐃᐃ[26] = [];
      yx.Ⲇᐃᐃ[27] = [];
      yx.Ⲇᐃᐃ[28] = [];
      yx.Ⲇᐃᐃ[42] = [];
      yx.Ⲇᐃᐃ[41] = [];
      yx.Ⲇᐃᐃ[35] = [];
      yx.Ⲇᐃᐃ[36] = [];
      yx.ⲆⵠᐃⵠⲆ = [];
      yx.ⵠⲆΔΔᐃⵠΔ = c[7];
      zx.id = c[9];
      zx.ᐃⲆᐃⲆ = yx.ⵠⲆΔΔᐃⵠΔ * zx.id;
      if (Dx.loaded) {
        Dx.ΔΔᐃΔ[0].ᐃⲆᐃⲆ = zx.ᐃⲆᐃⲆ;
        Dx.ΔΔᐃΔ[0].ΔⲆⵠⲆᐃⲆΔ = 0;
      }
      Ex.ᐃΔⵠⲆᐃⲆΔ();
      zx.ⲆⵠΔ.ᐃⲆⵠΔⵠ(c[3], c[10]);
      yx.ΔΔᐃΔ = [];
      var d = yx.ΔΔᐃΔ;
      for (var e = 0; c[11] > e; e++) {
        d.push(new Uf());
      }
      e = 0;
      for (var f = c[4]; f.length > e; e++) {
        var g = d[f[e].i];
        g.ⵠⲆⵠΔⵠ = f[e].n;
        g.ⵠⲆᐃᐃ = f[e].s;
        g.ⵠΔⵠⲆⲆ = f[e].a;
        g.ᐃΔⲆⵠⲆ = f[e].c;
        g.ⲆⵠᐃⲆᐃ = f[e].b;
        g.ΔᐃΔⵠΔ = f[e].d;
        g.ᐃΔⲆⲆΔΔΔ = f[e].g;
        g.level = f[e].l;
        g.ᐃᐃᐃΔᐃ = ΔⲆᐃ.ⲆⵠⵠΔΔⲆᐃ(f[e].p);
        g.ᐃΔⵠⵠᐃ = true;
        if (Jf === 1) {
          g.ⵠⲆⵠΔⵠ += "|" + f[e].i;
        }
      }
      zx.ⲆⵠᐃΔⵠ.sort();
      if (yx.mode === 1 && yx.ΔΔᐃΔ[zx.id].ⵠⲆⵠΔⵠ === "spectator") {
        zx.ΔᐃⲆΔᐃⲆᐃ = Kl;
      } else {
        zx.ΔᐃⲆΔᐃⲆᐃ = _n;
      }
      if (yx.mode === 2 && yx.ΔΔᐃΔ[zx.id].ⵠⲆᐃᐃ === 0) {
        zx.ΔⵠⵠⵠΔ = true;
      } else {
        zx.ΔⵠⵠⵠΔ = false;
      }
      if (yx.mode === 3 && yx.ΔΔᐃΔ[zx.id].ⵠⲆᐃᐃ === 0) {
        zx.ⲆⵠΔⲆⵠΔⲆ = Bl;
      } else {
        zx.ⲆⵠΔⲆⵠΔⲆ = false;
      }
      ᐃΔⲆⲆ.set("starve_token", zx.ΔᐃⲆΔΔ);
      if (c[12] === 0) {
        zx.ⲆⵠΔⲆΔ.ⲆⲆΔⵠⵠ = 0;
        Cx.ᐃΔΔᐃ.restore(c[17]);
        var h = c[14];
        if (h[29]) {
          zx.ᐃΔⲆᐃ.ⲆⲆᐃⵠΔᐃⲆ(1, 0);
        }
        for (e = 0; h.length > e; e++) {
          if (h[e]) {
            if (e == 29) {
              continue;
            }
            if (e == 7) {
              continue;
            }
            this.ᐃᐃⲆⵠᐃⵠⲆ([0, e, h[e]]);
          }
        }
        zx.ⲆⵠΔⲆΔ.open = Lk;
      } else {
        if (yx.mode === 4) {
          this.ᐃᐃⲆⵠᐃⵠⲆ([0, 238, 1]);
        } else if (yx.mode === 3) {
          if (zx.ⲆⵠΔⲆⵠΔⲆ) {
            this.ᐃᐃⲆⵠᐃⵠⲆ([0, 190, 4]);
          } else {
            this.ᐃᐃⲆⵠᐃⵠⲆ([0, 191, 3]);
          }
        }
        if (yx.mode === 0 || yx.mode === 3 || yx.mode === 7 || yx.mode === 4) {
          zx.ⲆⵠΔⲆΔ.ⲆⲆΔⵠⵠ = new Date().getTime();
          zx.ⲆⵠΔⲆΔ.open = Kl;
          zx.ⲆⵠΔⲆΔ.value = c[13];
          Cx.ⲆⵠΔⲆΔ.ᐃⵠΔᐃᐃ();
        } else {
          zx.ⲆⵠΔⲆΔ.ⲆⲆΔⵠⵠ = 0;
          zx.ⲆⵠΔⲆΔ.open = false;
          zx.ⲆⵠΔⲆΔ.value = 0;
        }
        zx.ⵠᐃⲆᐃⲆᐃΔ = c[12].toString();
      }
      zx.ⲆⲆⵠⲆⲆ.enabled = c[6];
      zx.ⲆⲆⵠⲆⲆ.ⲆⲆΔⵠⵠ = -1;
      zx.ⲆⲆⵠⲆⲆ.label = null;
      zx.ⲆⲆⵠⲆⲆ.now = -1;
      ᐃΔⲆⲆ.set("starve_token_id", zx.ⵠᐃⲆᐃⲆᐃΔ);
      if (zx.reconnect.enabled) {
        zx.reconnect.rotate = 0;
        zx.reconnect.enabled = false;
      } else {
        xx.ⲆⵠᐃⵠΔ(Cx.ΔᐃᐃⵠⲆ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + xx.ⵠⲆᐃᐃ + "A" + xx.ⵠΔⵠⲆⲆ);
        }
      }
    };
    this.connect = function () {
      b.ⵠᐃᐃⵠΔⲆΔ = 0;
      b.ⵠᐃⲆᐃⵠᐃⵠ();
    };
    this.ᐃΔⵠⵠⵠᐃΔ = [];
    this.ⲆⲆⵠᐃΔⲆᐃⲆΔ = function (c) {
      const d = b.ᐃⵠⲆᐃⲆ.filter(a => a.gm === c);
      const f = {};
      for (let a = 0; d.length > a; a++) {
        const b = d[a];
        const c = b.r;
        if (c !== undefined) {
          if (Ks === f[c]) {
            f[c] = [];
          }
          f[c].push(b);
        }
      }
      function g(d) {
        b.ᐃΔⵠⵠⵠᐃΔ[c] = d;
        const e = f[d];
        const g = e[Math.floor(Math.random() * e.length)];
        b.ᐃⵠᐃⲆⲆⲆΔ({
          domain: If,
          is_tls: 1,
          id: g.id,
          p: g.p
        });
      }
      if (b.ᐃΔⵠⵠⵠᐃΔ[c] !== mi) {
        g(b.ᐃΔⵠⵠⵠᐃΔ[c]);
        return;
      }
      let a = 1;
      function h(b) {
        const c = new _a.XMLHttpRequest();
        const d = b[0];
        const e = d.p;
        const f = d.r;
        const i = e[Math.floor(Math.random() * e.length)];
        c.open("GET", "https://" + i + "." + If + "/", true);
        c.onreadystatechange = function () {
          if (c.readyState === 4) {
            if (a === 0) {
              return;
            }
            a = 0;
            g(f);
          }
        };
        c.send();
      }
      for (let a in f) {
        h(f[a]);
      }
      _a.setTimeout(function () {
        if (a === 0) {
          return;
        }
        a = 0;
        const b = _a.Object.keys(f);
        g(b[Math.floor(Math.random() * b.length)]);
      }, 5000);
    };
    this.ΔⵠΔΔΔⲆⲆⵠᐃ = function () {
      let a = Wf.ⲆΔⲆⲆⲆᐃⵠ[b.ᐃⲆⲆⵠΔ];
      console.log(undefined, undefined, ej);
      let c = b.ⲆᐃᐃᐃⲆΔΔ[b.ᐃⲆⲆⵠΔ];
      let d = b.ᐃⵠⲆᐃⲆ.find(b => b.gm == a && b.idx == c);
      if (d === undefined) {
        b.ⲆⲆⵠᐃΔⲆᐃⲆΔ(a);
      } else {
        b.ᐃⵠᐃⲆⲆⲆΔ({
          domain: If,
          is_tls: 1,
          id: d.id,
          p: d.p
        });
      }
    };
    this.ⵠᐃⲆᐃⵠᐃⵠ = function () {
      console.log(undefined);
      if (Gw !== undefined && Ef !== Nn) {
        console.log(ct, Ks, undefined);
        b.ᐃⵠᐃⲆⲆⲆΔ({
          domain: If,
          is_tls: 1,
          id: Ef + Gw,
          p: b.ΔⵠΔΔΔᐃᐃ[Ef]
        });
        return;
      }
      if (Bf === undefined) {
        b.ΔⵠΔΔΔⲆⲆⵠᐃ();
      } else {
        b.ᐃⵠᐃⲆⲆⲆΔ({
          domain: Bf.domain,
          is_tls: Bf.ssl,
          id: Bf.id,
          p: [Bf.p]
        });
      }
    };
    this.ᐃⵠᐃⲆⲆⲆΔ = function (c) {
      let d = c.domain;
      let e = c.is_tls;
      let f = c.id;
      let a = c.p;
      let g = a[Math.floor(Math.random() * a.length)];
      let i = e ? "wss://" + g + "." + d + "/" + f + "?" + zx.ΔᐃⲆᐃⲆⲆᐃ : "ws://" + d;
      console.log(undefined, Qq);
      b.Δᐃⵠᐃ = new _a.WebSocket(i);
      b.Δᐃⵠᐃ.binaryType = "arraybuffer";
      b.Δᐃⵠᐃ.ᐃⵠⲆᐃᐃ = b.ᐃⵠⲆᐃᐃ;
      b.Δᐃⵠᐃ.onmessage = function (a) {
        if (b.ᐃⵠⲆᐃᐃ == b.ᐃⵠⲆᐃᐃ) {
          if (typeof a.data == "string") {
            var c = JSON.parse(a.data);
            switch (c[0]) {
              case 0:
                b.ᐃᐃⲆΔⲆ(c);
                break;
              case 1:
                b.ΔΔᐃᐃᐃⵠᐃ(c[1]);
                break;
              case 2:
                b.ⵠⵠΔⲆΔⵠⲆᐃⵠ(c);
                break;
              case 3:
                b.ᐃⲆⵠᐃᐃᐃⲆⲆᐃ(c);
                break;
              case 4:
                b.message(c[1]);
                break;
              case 5:
                b.ⲆⵠΔᐃⲆⲆΔ(c);
                break;
              case 6:
                b.ⵠΔΔⲆΔⵠᐃ(c[1]);
            }
          } else {
            var d = function (b, c, d) {
              const f = new Uint8Array(b);
              const e = f.length;
              let g;
              let h;
              let i = Ff[e];
              if (i === undefined) {
                Rf += e * 2;
                if (Rf < 65535) {
                  g = hj(_i(e));
                } else {
                  Rf = e;
                  for (let a = 0; a < Ff.length; a++) {
                    if (Ll !== Ff[a]) {
                      const b = Ff[a][0];
                      Ff[a] = undefined;
                      Te(b);
                    }
                  }
                  g = hj(_i(e));
                  Pe();
                }
                h = Bk(g);
                Ff[e] = [g, h];
              } else {
                g = i[0];
                h = i[1];
              }
              for (let a = 0; a < f.length; a++) {
                h[a] = f[a];
              }
              ak(g, c, d);
              for (let a = 0; a < f.length; a++) {
                f[a] = h[a];
              }
              return f;
            }(a.data, zx.ΔⲆⲆⵠⵠⵠⲆ, zx.ΔᐃΔᐃΔⲆᐃⲆΔ);
            var e = d.buffer;
            switch (d[0]) {
              case 0:
                b.Ⲇᐃᐃ(e, d, false);
                break;
              case 1:
                b.Ⲇᐃᐃ(e, d, _q);
                break;
              case 2:
                b.ΔᐃⲆⵠΔΔΔΔᐃ();
                break;
              case 3:
                b.ᐃᐃⲆⵠᐃⵠⲆ(new Uint16Array(e));
                break;
              case 4:
                b.ᐃⲆⵠⵠⲆⲆᐃⲆⵠ();
                break;
              case 5:
                b.ᐃⵠΔᐃⵠⲆΔⵠᐃ();
                break;
              case 6:
                b.ⵠΔΔΔᐃⵠΔᐃⵠ();
                break;
              case 7:
                b.ⵠᐃⵠᐃⵠⵠΔΔⵠ(e);
                break;
              case 8:
                b.ⲆΔⵠᐃΔⵠⲆᐃΔ(d[1]);
                break;
              case 9:
                b.ᐃⲆⲆΔΔⲆΔⵠⲆ(d[1]);
                break;
              case 10:
                b.ᐃⵠᐃⵠΔΔᐃ();
                break;
              case 11:
                b.ⵠⵠⵠⵠᐃⵠΔ(d[1], d[2]);
                break;
              case 12:
                b.ⵠⵠΔⵠΔ(d[1]);
                break;
              case 13:
                b.ᐃᐃᐃⵠⲆⵠⲆᐃᐃ(d, e);
                break;
              case 14:
                b.ⲆⵠᐃᐃΔⵠᐃⵠⵠ();
                break;
              case 15:
                b.ΔⲆⲆΔⲆΔⵠⲆⲆ(d[1]);
                break;
              case 16:
                b.ⵠΔⲆΔ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                break;
              case 17:
                b.ⵠᐃⵠⲆⲆⵠᐃⵠΔ(e);
                break;
              case 18:
                b.ⲆⵠⵠⲆΔⵠᐃⲆᐃ();
                break;
              case 19:
                b.ᐃⵠΔΔⲆ(d[1]);
                break;
              case 20:
                b.ΔΔⲆⵠΔⲆⲆΔΔ();
                break;
              case 21:
                b.ΔⵠⲆᐃ(e);
                break;
              case 22:
                b.ⲆΔΔΔΔⲆⲆΔⵠ(d[1]);
                break;
              case 23:
                b.ⵠΔᐃᐃᐃΔⵠⵠΔ(e);
                break;
              case 24:
                b.ᐃⲆⲆᐃⵠⲆΔΔⵠ(d[1]);
                break;
              case 25:
                b.ᐃⵠᐃΔΔⲆⵠⲆΔ(d[1], e);
                break;
              case 26:
                b.ᐃΔᐃΔΔ(d);
                break;
              case 27:
                b.ⵠΔⵠΔⲆⵠΔᐃⲆ();
                break;
              case 28:
                b.ⲆⲆⵠⲆⲆ(d[1]);
                break;
              case 29:
                b.ⲆⵠⵠⲆⵠⲆᐃⵠⲆ();
                break;
              case 30:
                b.ᐃᐃⲆᐃⵠᐃⵠⲆᐃ();
                break;
              case 31:
                b.ᐃⲆΔᐃⵠΔᐃΔⲆ(d);
                break;
              case 32:
                b.ᐃᐃᐃⲆⲆⵠⵠΔⲆ(d[1]);
                break;
              case 33:
                b.ᐃᐃⵠⲆᐃⲆⵠΔⵠ(d[1]);
                break;
              case 34:
                b.ΔΔΔⲆΔᐃΔᐃⲆ();
                break;
              case 35:
                b.ⵠᐃⲆⵠⵠΔΔΔΔ(d[1]);
                break;
              case 36:
                b.ΔΔΔⵠⲆⵠᐃ(d[1]);
                break;
              case 37:
                b.ⲆΔⵠⵠᐃΔᐃⵠⲆ(d[1], d[2]);
                break;
              case 38:
                b.ⲆⵠΔᐃⵠⵠⵠᐃᐃ(d[1]);
                break;
              case 39:
                b.ᐃᐃΔⵠᐃᐃⵠΔⵠ(d[1]);
                break;
              case 40:
                b.ᐃᐃᐃᐃⵠⵠΔⵠᐃ();
                break;
              case 41:
                b.ᐃⲆⲆΔᐃΔᐃΔⲆ(d);
                break;
              case 42:
                b.ΔⵠⲆⵠᐃΔΔᐃΔ(d[1]);
                break;
              case 43:
                b.ΔΔᐃΔᐃⲆⵠⵠⵠ(d[1]);
                break;
              case 44:
                b.claimed(d[1]);
                break;
              case 45:
                b.ⲆⵠᐃⵠΔⵠⲆⲆⵠ(d[1]);
                break;
              case 46:
                b.ⵠⲆΔΔⲆⲆΔⲆᐃ(d[1]);
                break;
              case 47:
                b.ⵠⲆⵠᐃᐃ(d[1]);
                break;
              case 48:
                b.ⲆⲆⵠⲆᐃᐃⵠⵠᐃ();
                break;
              case 50:
                b.ⵠᐃᐃⲆⵠⵠᐃⵠⲆ(d[1], d[2], d[3]);
                break;
              case 51:
                b.ⵠⲆⵠⵠΔⲆΔⵠⵠ();
                break;
              case 52:
                b.ⵠᐃᐃⵠⲆᐃⲆⵠⲆ(d[1]);
                break;
              case 53:
                b.ᐃⵠᐃΔⲆⵠⵠᐃᐃ(d[1]);
                break;
              case 54:
                b.ΔⵠΔᐃΔΔΔᐃΔ();
                break;
              case 55:
                b.ⵠⲆᐃΔᐃⵠΔᐃⲆ(d[1]);
                break;
              case 56:
                b.ⵠⵠΔᐃⲆⲆΔⲆⲆ(d[1]);
                break;
              case 57:
                b.ΔᐃⵠᐃΔⲆᐃᐃⵠ();
                break;
              case 58:
                b.ⲆⲆᐃⵠⵠⲆⲆⵠΔ();
                break;
              case 59:
                b.ⲆΔⲆΔᐃⵠᐃⵠΔ();
                break;
              case 60:
                b.ΔᐃⲆⲆⵠΔᐃⲆⵠ();
                break;
              case 61:
                zx.ⲆⵠΔ.ⵠⲆΔΔΔᐃᐃ = 0.2;
                zx.ⲆⵠΔ.ⲆⲆΔⵠⵠ = 3;
                break;
              case 62:
                b.ⵠΔⵠᐃⵠⵠᐃⵠⲆ(new Uint16Array(e));
                break;
              case 63:
                b.ⲆᐃΔΔΔᐃⵠᐃⲆ();
                break;
              case 64:
                b.ᐃⲆᐃⵠⵠⲆᐃᐃⵠ();
                break;
              case 65:
                b.ⲆⲆⲆⵠⲆᐃΔΔΔ();
                break;
              case 66:
                b.ⲆⲆᐃⵠⲆⲆⵠⲆᐃ();
                break;
              case 67:
                b.ΔᐃⲆᐃⵠᐃᐃΔᐃ(d[1]);
                break;
              case 68:
                b.ᐃⲆⲆⲆⵠⵠΔΔΔ(d[1]);
                break;
              case 69:
                b.ⵠΔⲆΔΔΔᐃ(d[1]);
                break;
              case 70:
                b.ΔⵠΔⲆⵠᐃΔⲆⲆ(d[1]);
                break;
              case 71:
                b.ⲆΔΔⲆΔ(d[1]);
            }
          }
        }
      };
      b.Δᐃⵠᐃ.onerror = function () {
        if (zx.reconnect.enabled) {
          _a.setTimeout(b.timeout, 2500);
        }
      };
      this.Δᐃⵠᐃ.onopen = function () {
        clearTimeout(b.ⲆᐃⲆᐃⲆ);
        zx.ΔⲆΔⲆᐃⲆⵠ = zx.ΔⲆΔⲆᐃⲆⵠ || ΔⲆᐃ.ⲆΔⲆⲆⵠᐃᐃ("token");
        ΔⲆᐃ.ⵠⲆΔⵠᐃΔⵠ().then(a => {
          b.Δᐃⵠᐃ[xf](Za[Ka].stringify([xx.ⵠⲆⵠΔⵠ.input.value, screen.width + 200, screen.height + 200, 52, zx.ΔᐃⲆΔΔ, zx.ⵠᐃⲆᐃⲆᐃΔ, zx.reconnect.enabled ? 1 : 0, xx.ⵠⲆᐃᐃ, xx.ⵠΔⵠⲆⲆ, xx.ᐃΔⲆΔΔ, xx.ⲆⵠᐃⲆᐃ, xx.ᐃΔⲆⵠⲆ, xx.ΔᐃΔⵠΔ, Wx === rk ? 0 : Wx, Vx === undefined ? 0 : Vx.substring(Vx.length - 50), Mf, zx.ΔⲆΔⲆᐃⲆⵠ, a, zx.ΔⲆΔⵠⵠᐃᐃ, zx.ⵠⵠᐃⲆⲆΔⲆ]));
          zx.ΔⲆΔⲆᐃⲆⵠ = mq;
          zx.ΔⲆΔⵠⵠᐃᐃ = tk;
          zx.ⵠⵠᐃⲆⲆΔⲆ = undefined;
          zx.ΔᐃⲆᐃⲆⲆᐃ = undefined;
          b.ⲆᐃⲆᐃⲆ = setTimeout(b.timeout, 2000);
        });
      };
    };
  }();
  var Cx = {
    ⵠΔⲆΔΔ: pa
  };
  var Dx = new function () {
    this.ΔᐃᐃⵠⲆ = 0;
    this.loaded = 0;
    this.transition = 0;
    this.ΔᐃⲆΔᐃΔⵠ = function (a) {
      return a / yx.w * 100;
    };
    this.ΔᐃⵠⲆΔᐃΔ = function (a) {
      return a / yx.ΔⵠⲆ * 100;
    };
    this.ᐃᐃⵠⲆᐃΔⲆ = function (a, b) {
      a = this.ΔᐃⲆΔᐃΔⵠ(a) - this.ⲆⵠⵠΔⵠ.x;
      return this.ⲆⵠⵠΔⵠ.x + b * a;
    };
    this.ⲆⵠⲆⵠⵠⵠⵠ = function (a, b) {
      a = Math.abs(this.ΔᐃⵠⲆΔᐃΔ(a) - this.ⲆⵠⵠΔⵠ.y);
      return this.ⲆⵠⵠΔⵠ.y + b * a;
    };
    this.sample = {};
    this.ᐃᐃᐃⵠⵠ = {};
    this.ᐃΔΔⵠ = {};
    this.ᐃⲆⵠΔⵠΔⵠ = function (b, c, d, e) {
      for (var f = 0; f < c.length; f++) {
        var g = c[f];
        if (!b.playing(g)) {
          b.pos(d, e, -0.5, g);
          b.play(g);
          return true;
        }
      }
      return false;
    };
    this.ΔΔᐃ = function (a, b, c, d) {
      c = this.ᐃᐃⵠⲆᐃΔⲆ(c, ΔᐃⲆΔⵠ.ΔⲆⵠⵠⲆᐃᐃ);
      d = this.ⲆⵠⲆⵠⵠⵠⵠ(d, ΔᐃⲆΔⵠ.ΔⲆⵠⵠⲆᐃᐃ);
      console.log("HIT", a, b, c, d, ΔᐃⲆΔⵠ.ΔⲆⵠⵠⲆᐃᐃ);
      if (a) {
        if (b === 1) {
          this.ᐃⲆⵠΔⵠΔⵠ(this.ᐃΔΔⵠ.ᐃᐃᐃⲆΔΔⵠ, this.sample.ᐃᐃᐃⲆΔΔⵠ, c, d);
        } else if (b === 0) {
          this.ᐃⲆⵠΔⵠΔⵠ(this.ᐃΔΔⵠ.ⲆⵠⵠⵠⲆΔᐃ, this.sample.ⲆⵠⵠⵠⲆΔᐃ, c, d);
        }
      } else {
        this.ᐃⲆⵠΔⵠΔⵠ(this.ᐃΔΔⵠ.ⲆΔⲆᐃΔ, this.sample.ⲆΔⲆᐃΔ, c, d);
      }
    };
    this.ⲆⵠⵠΔⵠ = {
      y: 0,
      x: 0
    };
    this.ΔᐃⲆᐃᐃⲆⲆ = {
      y: 0,
      x: 0
    };
    this.ⵠⵠᐃⲆⲆ = {};
    this.ΔΔᐃΔ = [];
    this.ᐃⵠΔⵠⵠ = function (a, b) {
      for (var c in this.ⵠⵠᐃⲆⲆ) {
        var d = this.ⵠⵠᐃⲆⲆ[c];
        d.check(a);
        if (d.ΔⵠΔΔⲆΔΔ) {
          if (yx.ᐃᐃⵠΔⲆ.now < 460000) {
            d.ⲆΔΔᐃⲆ();
          }
          if (b) {
            d.ΔⵠΔ(a, this.ⲆⵠⵠΔⵠ);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= 0;
    };
    this.ⵠᐃᐃⲆᐃⵠⲆⵠⵠ = function () {
      var a = [];
      for (var b = 0; this.ΔΔᐃΔ.length > b; b++) {
        if ((e = this.ΔΔᐃΔ[b]).ΔⲆⵠⲆᐃⲆΔ) {
          a.push(b);
        } else if (!e.ΔⲆⵠⲆᐃⲆΔ && !yx.ⲆⵠᐃⵠⲆ[e.ᐃⲆᐃⲆ]) {
          e.ⵠⵠΔⵠⵠⲆΔ();
          a.push(b);
        }
      }
      var c = yx.Ⲇᐃᐃ[0];
      var d = 0;
      for (b = 0; b < c.length && a.length > d; b++) {
        var e = c[b];
        if ((yx.mode != 1 || yx.ΔΔᐃΔ[e.id].ⵠⲆⵠΔⵠ !== "spectator") && e.ⲆⲆᐃⲆᐃ === -1 && zx.ᐃⲆᐃⲆ !== e.ᐃⲆᐃⲆ) {
          this.ΔΔᐃΔ[a[d]].ᐃⵠΔᐃᐃ(e.ᐃⲆᐃⲆ);
          d++;
        }
      }
    };
    this.ⵠⵠⲆΔΔⲆⲆⵠᐃ = function () {
      this.ⵠᐃᐃⲆᐃⵠⲆⵠⵠ();
      for (var a = 0; a < this.ΔΔᐃΔ.length; a++) {
        var b = this.ΔΔᐃΔ[a];
        if (!b.ΔⲆⵠⲆᐃⲆΔ && b.check()) {
          b.ΔⵠΔ();
        }
      }
    };
    this.ᐃᐃⲆΔⲆᐃⲆΔΔ = function (a) {
      if (a.x === this.ΔᐃⲆᐃᐃⲆⲆ.x && this.ΔᐃⲆᐃᐃⲆⲆ.y === a.y) {
        return 0;
      } else {
        this.ΔᐃⲆᐃᐃⲆⲆ.x = a.x;
        this.ΔᐃⲆᐃᐃⲆⲆ.y = a.y;
        this.ⲆⵠⵠΔⵠ.x = this.ΔᐃⲆΔᐃΔⵠ(a.x);
        this.ⲆⵠⵠΔⵠ.y = this.ΔᐃⵠⲆΔᐃΔ(a.y);
        Howler.pos(this.ⲆⵠⵠΔⵠ.x, this.ⲆⵠⵠΔⵠ.y, 0);
        return 1;
      }
    };
    this.ⲆⲆⵠΔⲆᐃΔⵠⵠ = function () {
      if (this.ΔᐃᐃⵠⲆ && this.loaded) {
        var a = yx.ⲆⵠᐃⵠⲆ[zx.ᐃⲆᐃⲆ];
        if (a) {
          a.ⲆⲆᐃⲆᐃ = 0;
          var b = this.ᐃᐃⲆΔⲆᐃⲆΔΔ(a);
          if (yx.mode !== 2 && yx.mode !== 4 && yx.mode !== 5) {
            this.ᐃⵠΔⵠⵠ(a, b);
          }
          this.ⵠⵠⲆΔΔⲆⲆⵠᐃ();
        }
      }
    };
    this.ⲆΔⵠΔⲆΔΔᐃᐃ = function () {
      for (var b in jx) {
        var c = jx[b];
        if (typeof c === "object" && c.path) {
          c.ᐃΔΔⵠⲆ = new Howl({
            src: c.path,
            volume: 0,
            sprite: c.ᐃᐃ
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(ej);
          for (var h = 0; h < f; h++) {
            var j = c.ᐃΔΔⵠⲆ.play(d);
            c.ᐃΔΔⵠⲆ.stop(j);
            c.ᐃΔΔⵠⲆ.on("fade", function (a) {
              if (!this.volume(a)) {
                console.log(undefined, rk);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > 1) {
            Dx.sample[d] = g;
          } else {
            Dx.sample[d] = g[0];
          }
          Dx.ᐃΔΔⵠ[d] = c.ᐃΔΔⵠⲆ;
        }
      }
    };
    this.ᐃⲆⵠⵠΔⲆⲆ = function (a, b, c) {
      for (var d = 0; d < a.length; d++) {
        b.volume(c, a[d]);
      }
    };
    this.Ⲇⵠᐃᐃⵠᐃⵠ = function (b, c, d, e, f, g) {
      var a = b;
      for (var i = 0; d > i; i++) {
        var j = a[i] = [];
        for (ⲆⲆⲆⵠ = 0; e > ⲆⲆⲆⵠ; ⲆⲆⲆⵠ++) {
          j[ⲆⲆⲆⵠ] = Dx.sample[f + ⲆⲆⲆⵠ][i];
          c.ᐃΔΔⵠⲆ.volume(g, j[ⲆⲆⲆⵠ]);
        }
      }
    };
    this.ᐃⵠΔᐃᐃ = function () {
      Dx.ⲆΔⵠΔⲆΔΔᐃᐃ();
      Dx.ᐃᐃᐃⵠⵠ.ⵠᐃⵠⵠᐃⵠΔ = [];
      Dx.ᐃᐃᐃⵠⵠ.ᐃᐃⵠⵠΔ = [];
      Dx.ᐃᐃᐃⵠⵠ.ΔΔⲆΔⵠ = [];
      Dx.Ⲇⵠᐃᐃⵠᐃⵠ(Dx.ᐃᐃᐃⵠⵠ.ⵠᐃⵠⵠᐃⵠΔ, jx.ᐃⵠΔᐃⵠⵠⵠ, 8, 3, "p", 0.15);
      Dx.Ⲇⵠᐃᐃⵠᐃⵠ(Dx.ᐃᐃᐃⵠⵠ.ᐃᐃⵠⵠΔ, jx.ⵠᐃΔⵠΔᐃⲆ, 8, 4, "w", 0.15);
      Dx.Ⲇⵠᐃᐃⵠᐃⵠ(Dx.ᐃᐃᐃⵠⵠ.ΔΔⲆΔⵠ, jx.ⲆΔᐃΔΔⲆᐃ, 8, 3, "d", 0.09);
      Dx.ᐃⲆⵠⵠΔⲆⲆ(Dx.sample.ⲆΔⲆᐃΔ, Dx.ᐃΔΔⵠ.ⲆΔⲆᐃΔ, 0.15);
      Dx.ᐃⲆⵠⵠΔⲆⲆ(Dx.sample.ⲆⵠⵠⵠⲆΔᐃ, Dx.ᐃΔΔⵠ.ⲆⵠⵠⵠⲆΔᐃ, 0.2);
      Dx.ᐃⲆⵠⵠΔⲆⲆ(Dx.sample.ᐃᐃᐃⲆΔΔⵠ, Dx.ᐃΔΔⵠ.ᐃᐃᐃⲆΔΔⵠ, 1);
      Dx.ⵠⵠᐃⲆⲆ.ⵠⲆΔⵠⵠᐃᐃᐃΔ = new lx(12, this.sample.ΔⵠᐃⵠⲆⲆᐃ, this.sample.ΔᐃⲆᐃᐃⵠΔ, 5000, 0.05, 0.4, jx.ᐃⵠⵠⵠⵠⵠᐃ.ᐃΔΔⵠⲆ, 3000, {
        x: Mr.ⵠᐃⵠⲆⵠΔᐃ,
        y: Mr.ΔⵠᐃⵠᐃⵠΔ,
        w: yx.w,
        ΔⵠⲆ: yx.ΔⵠⲆ
      }, {
        x: Mr.ⵠᐃⵠⲆⵠΔᐃ - 2300,
        y: Mr.ΔⵠᐃⵠᐃⵠΔ - 4000,
        w: yx.w,
        ΔⵠⲆ: yx.ΔⵠⲆ
      }, {
        x: Mr.ⵠᐃⵠⲆⵠΔᐃ - 1500,
        y: Mr.ΔⵠᐃⵠᐃⵠΔ - 2000,
        w: yx.w,
        ΔⵠⲆ: yx.ΔⵠⲆ
      });
      Dx.ⵠⵠᐃⲆⲆ.ΔⲆᐃΔⲆΔΔⲆΔ = new lx(12, this.sample.ΔᐃⵠⲆⵠⲆᐃ, this.sample.ⵠΔⲆⲆⲆⲆΔ, 5000, 0.03, 0.25, jx.ᐃⵠⵠⵠⵠⵠᐃ.ᐃΔΔⵠⲆ, 3000, {
        x: 0,
        y: Mr.ΔⵠᐃⵠᐃⵠΔ + 800,
        w: Mr.ⵠᐃⵠⲆⵠΔᐃ - 2300,
        ΔⵠⲆ: yx.ΔⵠⲆ
      }, {
        x: -100,
        y: Mr.ΔⵠᐃⵠᐃⵠΔ - 300,
        w: Mr.ⵠᐃⵠⲆⵠΔᐃ - 100,
        ΔⵠⲆ: yx.ΔⵠⲆ
      }, {
        x: -100,
        y: Mr.ΔⵠᐃⵠᐃⵠΔ + 400,
        w: Mr.ⵠᐃⵠⲆⵠΔᐃ - 1400,
        ΔⵠⲆ: yx.ΔⵠⲆ
      });
      Dx.ⵠⵠᐃⲆⲆ.ΔᐃⲆΔⲆⲆᐃ = new lx(12, this.sample.ⲆᐃⵠⵠΔΔⲆ, this.sample.ᐃⵠΔⵠᐃⵠⲆ, 5000, 0.01, 0.22, jx.ᐃⵠⵠⵠⵠⵠᐃ.ᐃΔΔⵠⲆ, 3000, {
        x: -100,
        y: -100,
        w: yx.w + 200,
        ΔⵠⲆ: Mr.ΔⵠᐃⵠᐃⵠΔ - 1000
      }, {
        x: -100,
        y: -100,
        w: yx.w + 200,
        ΔⵠⲆ: Mr.ΔⵠᐃⵠᐃⵠΔ + 600
      }, {
        x: -100,
        y: -100,
        w: yx.w + 200,
        ΔⵠⲆ: Mr.ΔⵠᐃⵠᐃⵠΔ + 100
      });
      for (var a = 0; a < 8; a++) {
        Dx.ΔΔᐃΔ[a] = new sx(a);
      }
      Dx.ΔΔᐃΔ[0].ᐃⵠΔᐃᐃ(zx.ᐃⲆᐃⲆ);
      Dx.loaded = 1;
    };
    this.ⵠⲆᐃᐃΔΔⵠⵠⲆ = function () {
      if (!this.transition && yx.ᐃᐃⵠΔⲆ.now < 460000) {
        this.transition = 1;
      }
    };
    this.ⲆⵠᐃⵠΔ = function () {
      if (this.ΔᐃᐃⵠⲆ && this.loaded) {
        for (var a in Dx.sample) {
          var b = Dx.sample[a];
          if (typeof b === "object") {
            for (var c = 0; c < b.length; c++) {
              Dx.ᐃΔΔⵠ[a].stop(b[c]);
            }
          } else {
            Dx.ᐃΔΔⵠ[a].stop(b);
          }
        }
        for (c = 0; c < Dx.ΔΔᐃΔ.length; c++) {
          Dx.ΔΔᐃΔ[c].ⵠⵠΔⵠⵠⲆΔ();
        }
      }
    };
    this.select = function () {
      if (Dx.ΔᐃᐃⵠⲆ) {
        Dx.ⲆⵠᐃⵠΔ();
      } else {
        if (!Dx.loaded) {
          Dx.ᐃⵠΔᐃᐃ();
        }
        Dx.ΔΔᐃΔ[0].ᐃⲆᐃⲆ = zx.ᐃⲆᐃⲆ;
        Dx.ΔΔᐃΔ[0].ΔⲆⵠⲆᐃⲆΔ = 0;
        Dx.ⵠⲆᐃᐃΔΔⵠⵠⲆ();
      }
      Dx.ΔᐃᐃⵠⲆ = !Dx.ΔᐃᐃⵠⲆ;
    };
  }();
  var Ex = new function () {
    this.ᐃᐃΔᐃᐃᐃΔ = function () {
      this.ⲆⲆⵠΔⵠ = 81;
      this.ΔᐃⲆᐃⲆ = 68;
      this.ΔΔⵠᐃⲆ = 90;
      this.ⲆΔⲆᐃⵠⲆⵠ = 83;
    };
    this.ⵠⲆⲆΔⵠⵠᐃ = function () {
      this.ⲆⲆⵠΔⵠ = 65;
      this.ΔᐃⲆᐃⲆ = 68;
      this.ΔΔⵠᐃⲆ = 87;
      this.ⵠⵠΔⲆᐃ = 83;
    };
    this.ᐃⲆᐃᐃⲆ = 0;
    this.ⲆΔⲆᐃⵠⲆⵠ = 1;
    this.ⵠΔⵠⵠΔⵠΔ = 49;
    this.ᐃⵠᐃⵠΔⲆᐃ = 50;
    this.ⲆᐃⲆΔⵠⵠΔ = 51;
    this.ΔΔⵠⵠⵠᐃⵠ = 52;
    this.ⵠⲆΔᐃΔⲆⵠⲆᐃ = 53;
    this.ⵠΔⵠᐃⵠΔΔ = 17;
    this.ⵠᐃⵠⲆΔᐃⵠ = 37;
    this.ᐃΔⵠᐃΔⵠⵠ = 39;
    this.ⵠΔⲆᐃⵠᐃⲆ = 38;
    this.ΔᐃⵠΔⵠᐃⵠ = 40;
    this.ⲆⲆᐃⲆΔᐃΔ = 32;
    this.ⲆⵠⵠᐃⵠⵠⲆ = 82;
    this.ᐃⲆⲆᐃᐃΔⲆ = 71;
    this.ᐃᐃⲆⵠⵠⵠΔ = 86;
    this.ΔⲆᐃΔᐃᐃΔ = 66;
    this.ⵠⲆⲆΔⵠⵠᐃ();
    this.keys = new Array(255);
    for (var a = 0; a < 255; a++) {
      this.keys[a] = this.ᐃⲆᐃᐃⲆ;
    }
    this.up = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      this.keys[b] = this.ᐃⲆᐃᐃⲆ;
    };
    this.down = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      if (b == this.ⲆⲆⵠΔⵠ || this.ⵠᐃⵠⲆΔᐃⵠ == b) {
        this.ⵠᐃⵠⲆΔⲆⲆ();
      } else if (this.ΔΔⵠᐃⲆ == b || b == this.ⵠΔⲆᐃⵠᐃⲆ) {
        this.ⵠᐃΔⲆΔⲆᐃ();
      } else if (this.ⲆΔⲆᐃⵠⲆⵠ == b || this.ΔⵠⵠᐃⵠⵠΔⵠᐃ == b) {
        this.ᐃΔΔⵠᐃΔᐃ();
      } else if (this.ΔᐃⲆᐃⲆ == b || this.ᐃΔⵠᐃΔⵠⵠ == b) {
        this.ΔᐃΔΔⲆΔᐃ();
      }
      this.keys[b] = this.ⲆΔⲆᐃⵠⲆⵠ;
      return b;
    };
    this.ⵠᐃⵠⲆΔⲆⲆ = function () {
      this.keys[this.ΔᐃⲆᐃⲆ] = this.ᐃⲆᐃᐃⲆ;
      this.keys[this.ᐃΔⵠᐃΔⵠⵠ] = this.ᐃⲆᐃᐃⲆ;
    };
    this.ΔᐃΔΔⲆΔᐃ = function () {
      this.keys[this.ⲆⲆⵠΔⵠ] = this.ᐃⲆᐃᐃⲆ;
      this.keys[this.ⵠᐃⵠⲆΔᐃⵠ] = this.ᐃⲆᐃᐃⲆ;
    };
    this.ᐃΔΔⵠᐃΔᐃ = function () {
      this.keys[this.ΔΔⵠᐃⲆ] = this.ᐃⲆᐃᐃⲆ;
      this.keys[this.ⵠΔⲆᐃⵠᐃⲆ] = this.ᐃⲆᐃᐃⲆ;
    };
    this.ⵠᐃΔⲆΔⲆᐃ = function () {
      this.keys[this.ⵠⵠΔⲆᐃ] = this.ᐃⲆᐃᐃⲆ;
      this.keys[this.ΔᐃⵠΔⵠᐃⵠ] = this.ᐃⲆᐃᐃⲆ;
    };
    this.ᐃΔⵠⲆᐃⲆΔ = function () {
      this.keys[this.ΔᐃⲆᐃⲆ] = this.ᐃⲆᐃᐃⲆ;
      this.keys[this.ᐃΔⵠᐃΔⵠⵠ] = this.ᐃⲆᐃᐃⲆ;
      this.keys[this.ⲆⲆⵠΔⵠ] = this.ᐃⲆᐃᐃⲆ;
      this.keys[this.ⵠᐃⵠⲆΔᐃⵠ] = this.ᐃⲆᐃᐃⲆ;
      this.keys[this.ΔΔⵠᐃⲆ] = this.ᐃⲆᐃᐃⲆ;
      this.keys[this.ⵠΔⲆᐃⵠᐃⲆ] = this.ᐃⲆᐃᐃⲆ;
      this.keys[this.ⵠⵠΔⲆᐃ] = this.ᐃⲆᐃᐃⲆ;
      this.keys[this.ΔᐃⵠΔⵠᐃⵠ] = this.ᐃⲆᐃᐃⲆ;
    };
    this.ᐃⲆⲆᐃΔⲆᐃ = function () {
      return this.keys[this.ⲆⲆⵠΔⵠ] || this.keys[this.ⵠᐃⵠⲆΔᐃⵠ];
    };
    this.ⵠΔⲆᐃⲆⵠΔ = function () {
      return this.keys[this.ΔᐃⲆᐃⲆ] || this.keys[this.ᐃΔⵠᐃΔⵠⵠ];
    };
    this.ᐃⲆΔᐃᐃΔᐃ = function () {
      return this.keys[this.ΔΔⵠᐃⲆ] || this.keys[this.ⵠΔⲆᐃⵠᐃⲆ];
    };
    this.ΔⲆᐃⵠⲆΔΔ = function () {
      return this.keys[this.ⵠⵠΔⲆᐃ] || this.keys[this.ΔᐃⵠΔⵠᐃⵠ];
    };
    this.ⵠΔⵠΔⲆΔⲆⲆⲆ = function () {
      return this.keys[this.ⵠΔⵠᐃⵠΔΔ];
    };
    this.ΔⲆⲆᐃᐃΔⲆⲆⲆ = function () {
      return this.keys[this.ⵠΔⵠⵠΔⵠΔ];
    };
    this.ⵠᐃⵠⵠᐃⵠΔⲆΔ = function () {
      return this.keys[this.ᐃⵠᐃⵠΔⲆᐃ];
    };
    this.ⲆᐃᐃⲆᐃΔΔᐃⲆ = function () {
      return this.keys[this.ⲆᐃⲆΔⵠⵠΔ];
    };
    this.ᐃΔⵠⲆⵠΔᐃΔⵠ = function () {
      return this.keys[this.ΔΔⵠⵠⵠᐃⵠ];
    };
    this.ᐃΔᐃᐃⲆΔⵠⵠᐃ = function () {
      return this.keys[this.ⲆⲆᐃⲆΔᐃΔ];
    };
    this.ΔⲆΔᐃⵠⵠᐃΔΔ = function () {
      return this.keys[this.ⲆⵠⵠᐃⵠⵠⲆ];
    };
    this.ᐃΔΔⲆⵠᐃΔΔⵠ = function () {
      return this.keys[this.ᐃⲆⲆᐃᐃΔⲆ];
    };
    this.ΔᐃⵠᐃΔⵠᐃⲆᐃ = function () {
      return this.keys[this.ᐃᐃⲆⵠⵠⵠΔ];
    };
    this.ΔᐃⲆᐃⵠⲆⵠᐃᐃ = function () {
      return this.keys[this.ΔⲆᐃΔᐃᐃΔ];
    };
  }();
  var Fx = new function () {
    this.ⲆΔⲆᐃⵠⲆⵠ = 0;
    this.ᐃⲆᐃᐃⲆ = 1;
    this.IDLE = 2;
    this.ⲆΔⲆΔⵠⵠⵠ = 0;
    this.ᐃᐃᐃΔᐃΔᐃΔΔ = 1;
    this.ΔⵠΔΔ = {
      x: 0,
      y: 0
    };
    this.ΔⲆᐃⵠΔΔⲆ = 0;
    this.ᐃΔΔΔⵠΔⵠ = 0;
    this.angle = 0;
    this.state = this.IDLE;
    this.ⲆⵠⲆⲆ = this.ⲆΔⲆΔⵠⵠⵠ;
    this.down = function () {
      this.state = this.ⲆΔⲆᐃⵠⲆⵠ;
    };
    this.up = function () {
      this.state = this.ᐃⲆᐃᐃⲆ;
    };
    this.ΔⵠΔ = function () {
      return (this.ΔⲆᐃⵠΔΔⲆ != this.ΔⵠΔΔ.x || this.ΔⵠΔΔ.y != this.ᐃΔΔΔⵠΔⵠ) && (this.ΔⲆᐃⵠΔΔⲆ = this.ΔⵠΔΔ.x, this.ᐃΔΔΔⵠΔⵠ = this.ΔⵠΔΔ.y, true);
    };
  }();
  var Gx = 0;
  var Hx = 0;
  var Ix = new function (f, e, i) {
    this.ᐃⵠ = f;
    this.Δ = e;
    this.ⵠᐃΔⲆⲆΔⲆ = {
      translate: {
        x: 0,
        y: 0
      },
      style: document.getElementById("loading").style,
      ΔⵠΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ⵠᐃΔⲆⲆΔⲆ.style.position = "absolute";
    this.ⵠᐃΔⲆⲆΔⲆ.style.display = "inline-block";
    this.ⵠᐃΔⲆⲆΔⲆ.ΔⵠΔ();
    this.ⵠΔⲆΔΔ = true;
    this.stop = function () {
      this.ⵠΔⲆΔΔ = Qg;
    };
    this.ᐃᐃⲆⲆΔΔⵠ = {
      total: 1
    };
    var j = this;
    function k() {}
    var m = 0;
    function n(a) {
      if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
        return 1;
      } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
        return 0;
      } else {
        return 1;
      }
    }
    this.ⵠΔᐃⲆⲆ = function () {
      j.ΔⵠΔ();
      if (++m == 40) {
        j.stop();
        k();
        return;
      }
      _a.setTimeout(j.ⵠΔᐃⲆⲆ, 33);
    };
    this.ⲆⵠᐃⵠΔ = function (a) {
      k = a;
      j.ⵠΔᐃⲆⲆ();
    };
    new Date().getTime();
    Object.keys(Δᐃ).length;
    console.log(undefined, Qq);
    for (var o in Δᐃ) {
      if (n(Δᐃ[o]) === 0) {
        0;
      }
    }
    console.log(undefined, nl);
    function p() {
      if (this.ⵠⵠΔΔⲆⵠⲆ !== 0) {
        return this.ⵠⵠΔΔⲆⵠⲆ;
      } else {
        this.ⵠⵠΔΔⲆⵠⲆ = 2;
        this.src = this.ΔⵠΔΔᐃ;
        return 0;
      }
    }
    function g(a) {
      this.ⵠⵠΔΔⲆⵠⲆ = 1;
    }
    var l = 0;
    function q() {
      console.log(undefined);
      if (l !== 1) {
        l = 1;
        console.log(mb);
        if (ib !== Kb) {
          ib();
        }
        Kb();
        var a = ΔⲆᐃ.ⲆΔⲆⲆⵠᐃᐃ("server");
        if (a !== null) {
          Bx.ⲆᐃᐃⵠᐃᐃΔ = 1;
          Bx.ᐃⵠⲆᐃⲆ = [{
            nu: 0,
            m: 100,
            i: "server" + a + ".starve.io",
            p: 443,
            a: a,
            ssl: 1
          }];
        }
        Bx.ⲆⵠΔⲆⵠᐃⲆᐃⲆ();
        setTimeout(i, 100);
      }
    }
    function b() {
      let a = function () {
        Bx.ΔⲆᐃᐃⵠΔⲆ(q);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, 100);
        } else {
          setTimeout(b, 100);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function d() {
      this.ⲆⵠⵠΔᐃⲆᐃ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ⲆⵠⵠΔᐃⲆᐃ}`, this);
      if (this.ⲆⵠⵠΔᐃⲆᐃ > 3) {
        console.warn("Failed to load image too many times");
      }
      var a = this.ⲆⵠⵠΔᐃⲆᐃ;
      var b = this.src;
      var c = n(b) === 0 ? 10000 : 2000;
      setTimeout(function () {
        for (var c in ⲆᐃⵠΔⵠΔΔ) {
          if (b.indexOf(ⲆᐃⵠΔⵠΔΔ[c]) !== -1) {
            Δᐃ[c] = new Image();
            Δᐃ[c].onload = g;
            Δᐃ[c].onerror = d;
            Δᐃ[c].ⲆⵠⵠΔᐃⲆᐃ = a;
            Δᐃ[c].src = b;
            break;
          }
        }
      }, c);
    }
    function s(a) {
      for (var b in Δᐃ) {
        var c = Δᐃ[b];
        if (typeof c === "string" && n(c) === a) {
          Δᐃ[b] = new Image();
          Δᐃ[b].ⵠⵠΔΔⲆⵠⲆ = 0;
          Δᐃ[b].ⲆⵠⵠΔᐃⲆᐃ = 0;
          Δᐃ[b].onload = g;
          Δᐃ[b].onerror = d;
          Δᐃ[b].ⲆΔΔΔⵠⲆⵠ = p;
          Δᐃ[b].ΔⵠΔΔᐃ = c;
        }
      }
    }
    s(1);
    s(0);
    um(1, "l", 20, "#000");
    b();
    pp();
    this.ΔⵠΔ = function () {
      this.ⵠᐃΔⲆⲆΔⲆ.translate.x = (uo - 500) / 2;
      this.ⵠᐃΔⲆⲆΔⲆ.translate.y = (xp - 150) / 2;
      var a = 2500 / (40 - m + 1) - 48;
      this.ⵠᐃΔⲆⲆΔⲆ.translate.y -= a;
      this.ⵠᐃΔⲆⲆΔⲆ.ΔⵠΔ();
    };
    this.ⵠᐃΔⲆⲆΔⲆ.ΔⵠΔ();
    this.ᐃⵠΔᐃ = function () {
      try {
        oc();
      } catch (a) {}
      this.ΔⵠΔ();
    };
  }(so, go, function () {
    dc();
    Cx = new Tw(so, go);
    (xx = new Uw(so, go)).ⵠⵠⵠᐃⵠⲆⲆⵠᐃ();
    Ax = new Xw(so, go);
    yx = new Vf();
    zx = new Kw();
    Ix.ⲆⵠᐃⵠΔ(function () {
      Ix.ⵠᐃΔⲆⲆΔⲆ.style.display = "none";
      xx.ΔᐃᐃⵠⲆ();
    });
  });
  function Jx() {
    try {
      _a.Widget.adsRefresh();
    } catch (a) {}
  }
  _a.onbeforeunload = function () {
    if (Cx.ⵠΔⲆΔΔ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  $q();
  (function b(a) {
    _a.requestAnimationFrame(b);
    Gx = (a - Hx) / 1000;
    Hx = a;
    Gx = Gx > 1 ? 1 : Gx;
    if (Cx.ⵠΔⲆΔΔ) {
      Cx.ᐃⵠΔᐃ();
    } else {
      go.clearRect(0, 0, uo, xp);
      if (Ix.ⵠΔⲆΔΔ) {
        Ix.ᐃⵠΔᐃ();
      } else if (xx.ⵠΔⲆΔΔ) {
        xx.ᐃⵠΔᐃ();
      } else if (Ax.ⵠΔⲆΔΔ) {
        Ax.ᐃⵠΔᐃ();
      }
    }
  })(0);
  var Kx = 0;
  function Lx() {
    Mx.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", xo);
    Mx.send();
  }
  var Mx = new XMLHttpRequest();
  function Nx(a) {
    Ij(ox, a, 23968, 34091, 7538, 16895);
    return ((212 + (rb(px[0], px[1], px[2]) ^ Db(px[3], px[4], px[0], px[1]))) * 16807 + 0) % 2147483647;
  }
  function Ox(b, c, d, e, f) {
    Aj(ox, b, c, d, e, f);
    const g = ~(px[0] & 55097) & (px[0] | 55097);
    const a = ~(g & 11723) & g | ~(g & 11723) & 11723;
    return ((116 + ((16 << ((a ^ px[3]) >> 16 & 255)) + (24 << ((a ^ px[3]) & 255)) + (8 << ((a ^ px[3]) >> 8 & 255)) + (0 << ((a ^ px[3]) >> 24 & 255)) ^ px[4])) * 16807 + 0) % 2147483647;
  }
  Mx.onreadystatechange = function () {
    if (this.readyState === 4) {
      this.status;
    }
  };
  var Px = "https://token.starve.io/";
  var Qx = "https://token2.starve.io/";
  var Rx = 0;
  var Sx = 1;
  var Tx = 4;
  var Ux = undefined;
  var Vx = undefined;
  var Wx = undefined;
  var Xx = 0;
  _a.ⲆᐃⵠⵠⲆⲆⲆ = function () {
    Xx = 1;
  };
  var Yx = {
    ⵠⵠⲆᐃᐃⵠⲆᐃΔ: "ACCESS_TOKEN"
  };
  var Zx = document.createElement("script");
  Zx.type = "text/javascript";
  Zx.async = xo;
  Zx.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  Zx.addEventListener("load", function (a) {
    _a.XPayStationWidget.init(Yx);
    _a.XPayStationWidget.on("status-done", sy);
  }, Qg);
  document.getElementsByTagName("head")[0].appendChild(Zx);
  _a.fbAsyncInit = function () {
    ty();
    console.log(nl);
  };
  (function (a, b, c) {
    var d;
    var e = a.getElementsByTagName(b)[0];
    if (!a.getElementById(c)) {
      (d = a.createElement(b)).id = c;
      d.src = "https://connect.facebook.net/en_US/sdk.js";
      e.parentNode.insertBefore(d, e);
    }
  })(document, "script", "facebook-jssdk");
  var $x = undefined;
  var _x = ct;
  function ay() {
    _a.gapi.auth2.init({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      ($x = a).isSignedIn.listen(by);
      $x.currentUser.listen(ly);
      if ($x.isSignedIn.get()) {
        $x.signIn();
      }
      ny();
    });
  }
  function by(a) {}
  if (_a.ᐃᐃᐃⵠⲆⲆᐃⲆⲆ) {
    var dy = _a.Math.acos;
    _a.Math.acos = _a.Math.asin;
    _a.Math.asin = dy;
    var gy = _a.Math.acos;
    _a.Math.acos = _a.Math.asin;
    _a.Math.asin = gy;
  }
  const hy = 10903561;
  const jy = 10903561 .ΔΔΔⲆᐃᐃᐃ;
  const ky = `const ᐃⲆΔⲆ = (typeof ᐃⵠⲆᐃⵠⵠᐃ === "${jy}") ? 1 : 0; return ᐃⲆΔⲆ;`;
  function ly(a) {
    if (Vx === zh && _x !== undefined && (Vx = _x.getAuthResponse().id_token) !== Wd) {
      Ux = Rx;
      Wx = _x.getBasicProfile().getId();
      _a.ⲆᐃⵠⵠⲆⲆⲆ();
      return;
    }
    if (a !== undefined && a.isSignedIn() === true) {
      Wx = (_x = a).id;
      Wx = _x.getBasicProfile().getId();
      Vx = _x.getAuthResponse().id_token;
      Ux = Rx;
      _a.ⲆᐃⵠⵠⲆⲆⲆ();
    }
  }
  function ny() {
    if ($x) {
      _x = $x.currentUser.get();
    }
  }
  function qy(a) {
    if (Wx) {
      var b = new XMLHttpRequest();
      b.open("GET", Px + "xsolla?userid=" + Wx + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
          Yx.access_token = b.responseText;
          _a.XPayStationWidget.init(Yx);
          _a.XPayStationWidget.open();
        }
      };
      b.send();
    }
  }
  function ry(a) {
    var b = new XMLHttpRequest();
    b.open("GET", Px + "setRegion?token=" + Vx + "&userid=" + Wx + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (b.responseText !== "0") {
          xx.ⲆΔᐃⵠ(xx.ⲆᐃΔΔⵠ);
        } else {
          xx.ⲆΔᐃⵠ(xx.ⲆΔⵠⵠⲆ);
        }
      }
    };
    b.send();
  }
  function sy() {
    var a = new XMLHttpRequest();
    a.open("GET", Px + "claimBread?userid=" + Wx);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          xx.Ⲇⵠᐃᐃⵠ = b;
        }
      }
    };
    a.send();
  }
  function ty() {
    if (_a.FB) {
      _a.FB.init({
        cookie: true,
        appId: "642017356260407",
        xfbml: V,
        version: "v15.0"
      });
    }
    if (Wx === undefined) {
      (function () {
        try {
          if (_a.FB && _a.FB.getUserID()) {
            Wx = _a.FB.getUserID();
            if (Vx === undefined) {
              _a.FB.getLoginStatus(function () {
                Ux = Sx;
                Vx = _a.FB.getAuthResponse().accessToken;
                _a.ⲆᐃⵠⵠⲆⲆⲆ(Wx);
              });
            }
          }
        } catch (a) {}
        try {
          Wx = _x.getBasicProfile().getId();
        } catch (a) {}
      })();
    }
  }
  function uy() {
    if (xx.Ⲇⵠᐃᐃⵠ >= 300 || xx.ⲆⲆᐃⵠᐃⲆΔ <= 0) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= 1 && a.length <= 20) {
        var b = new XMLHttpRequest();
        b.open("GET", Px + "changeNickname?token=" + Vx + "&userid=" + Wx + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (a > 0) {
              xx.Ⲇⵠᐃᐃⵠ -= a;
            }
            xx.ⲆⲆᐃⵠᐃⲆΔ = 1;
            xx.ⲆΔᐃⵠ(xx.ⵠᐃᐃΔᐃ);
          }
        };
        b.send();
      }
    }
  }
  function wy(b, c, d, f) {
    b = b === undefined ? xx.ⵠⲆⲆⵠᐃᐃΔ : b;
    c = c === undefined ? xx.ⵠΔⲆᐃΔⵠⲆ : c;
    d = d === undefined ? xx.ᐃⵠᐃⲆᐃⵠⲆ : d;
    f = Qq === f ? xx.ΔᐃⲆⲆⲆⲆⵠ : f;
    if (b !== xx.ⵠⲆⲆⵠᐃᐃΔ || c !== xx.ⵠΔⲆᐃΔⵠⲆ || d !== xx.ᐃⵠᐃⲆᐃⵠⲆ || xx.ΔᐃⲆⲆⲆⲆⵠ !== f) {
      xx.ⵠⲆⲆⵠᐃᐃΔ = b;
      xx.ⵠΔⲆᐃΔⵠⲆ = c;
      xx.ᐃⵠᐃⲆᐃⵠⲆ = d;
      xx.ΔᐃⲆⲆⲆⲆⵠ = f;
      if (f === xx.ΔᐃᐃⵠΔΔΔ) {
        f = "0";
      } else if (xx.ⵠⵠⲆⲆᐃΔᐃ === f) {
        f = "1";
      } else if (xx.ⲆⲆΔΔⵠⲆⲆ === f) {
        f = "2";
      } else if (f === xx.ᐃΔΔΔⲆΔⵠ) {
        f = "3";
      } else if (xx.ᐃᐃΔᐃⲆΔΔ === f) {
        f = "4";
      } else if (f === xx.ⵠⲆᐃΔⲆⵠΔ) {
        f = "5";
      }
      if (xx.ΔⵠᐃΔⵠᐃΔ === c) {
        c = "total";
      } else if (xx.ⲆΔⲆΔⲆⵠᐃ === c) {
        c = "normal";
      } else if (xx.ⲆᐃⲆΔⲆΔⵠ === c) {
        c = "zombie";
      } else if (xx.ᐃᐃⲆΔΔⲆⲆ === c) {
        c = "vampire";
      } else if (c === xx.ⲆᐃⵠᐃⲆΔⵠ) {
        c = "forest";
      }
      if (xx.ⵠⲆⲆΔᐃⵠⵠ === b) {
        b = "all";
      }
      if (xx.ΔΔᐃⲆⵠΔⵠ === b) {
        b = "week";
      }
      if (b === xx.ᐃᐃᐃⵠΔⲆᐃ) {
        b = "today";
      }
      if (d === xx.ᐃⵠⲆⵠΔᐃΔ) {
        d = "kill";
      } else if (d === xx.ΔⲆΔⲆⲆⲆⲆ) {
        d = "score";
      } else if (d === xx.ᐃⵠᐃΔᐃⵠⲆ) {
        d = "time";
      }
      var g = new XMLHttpRequest();
      g.open("GET", Px + "leaderboard?range=" + b + "&mode=" + c + "&sort=" + d + "&season=" + f);
      g.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      g.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && g.responseText !== "0") {
          for (var a = JSON.parse(g.responseText), b = "", c = 0; a.length > c; c++) {
            ⵠᐃᐃΔⲆ = a[c];
            var d = ⵠᐃᐃΔⲆ[1];
            try {
              if (d.indexOf("Starver#") === -1) {
                d = _a.decodeURIComponent(_a.escape(_a.atob(d)));
              }
            } catch (a) {}
            b += "<div class=\"lineLeaderboard\">";
            b += "<div class=\"rank\">";
            b += c + 1 + "";
            b += "</div>";
            b += "<div class=\"name\">";
            b += d;
            b += "</div>";
            b += "<div class=\"lvl\">";
            b += xx.ᐃᐃΔΔⲆᐃⲆ(ⵠᐃᐃΔⲆ[6]) + 1 + "";
            b += "</div>";
            b += "<div class=\"kills\">";
            b += ⵠᐃᐃΔⲆ[5] + "";
            b += "</div>";
            b += "<div class=\"time\">";
            b += ⵠᐃᐃΔⲆ[4] + "";
            b += "</div>";
            b += "<div class=\"score\">";
            b += ⵠᐃᐃΔⲆ[3] + "";
            b += "</div>";
            b += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = b;
        }
      };
      g.send();
    }
  }
  function xy(a, b) {
    if (xx.ᐃⲆⲆΔΔ <= 0) {
      if (b > xx.Ⲇⵠᐃᐃⵠ) {
        xx.ⲆΔᐃⵠ(xx.ⲆΔΔᐃⵠ);
      } else {
        xx.ᐃⲆⲆΔΔ = 2;
        xx.ΔᐃᐃΔⲆΔᐃ = 0;
        xx.ⵠᐃⵠᐃᐃⲆⵠ = 100;
        var c = new XMLHttpRequest();
        c.open("GET", Px + "buySpin?token=" + Vx + "&userid=" + Wx + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              xx.ⵠⵠⵠᐃⵠΔⲆⲆⵠ(a.rand * Math.PI * 2, a.type, a.id);
              xx.Ⲇⵠᐃᐃⵠ -= b;
            } else {
              xx.ᐃⲆⲆΔΔ = 0;
            }
          }
        };
        c.send();
      }
    }
  }
  function yy(a, b) {
    if (xx.Ⲇⵠᐃᐃⵠ < b) {
      xx.ⲆΔᐃⵠ(xx.ⲆΔΔᐃⵠ);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", Px + "buyKit?token=" + Vx + "&userid=" + Wx + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          xx.Ⲇⵠᐃᐃⵠ -= b;
          xx.ⲆⵠΔⵠⲆ = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  _a.onload = function () {
    _a.gapi.load("auth2", ay);
  };
})();
