(function () {
  const sa = window;
  var s = 198;
  if (s == 12) {
    s = 39;
  }
  let Qb = 136;
  var Pc = 28;
  if (Pc === 3) {
    Pc = 229;
  }
  Math.floor(77[77 .ΔᐃΔᐃⲆᐃΔΔⵠ]);
  const Bd = function (a) {
    let b = "";
    for (let c = 0; c < a.length; c++) {
      b += sa.String.fromCharCode(a[c] ^ Qb++ % 255);
    }
    return b;
  };
  var o = 36;
  if (o >= 2) {
    o = 23;
  }
  const Re = 18;
  const r = 17;
  const h = 10;
  const g = 5;
  const l = 100;
  const u = 4;
  const dg = true;
  const b = 12;
  const d = 15;
  const m = 255;
  const c = 256;
  const p = 19;
  const C = false;
  const v = -8;
  const f = 20;
  const z = -4;
  const y = 1;
  const w = undefined;
  const P = 13;
  const A = 14;
  const k = 1 << 1;
  const x = 16;
  const J = 2;
  const M = 8;
  const B = 6;
  const D = 1 << 2;
  const I = 9;
  const E = 256;
  const S = 2048;
  const Q = 11;
  const T = C;
  const F = 17;
  const R = 6;
  const j = 1 << 12;
  const L = 16;
  const W = 7;
  const vh = w;
  const G = 4;
  const q = 3;
  const N = 15;
  const H = 5;
  const O = 15;
  const U = dg;
  const K = 0;
  const V = 12;
  var X = sa.console;
  X.log = X.info = X.error = X.warn = X.debug = X.ⵠⲆᐃⵠᐃΔᐃΔⵠ = X.trace = X.time = X.timeEnd = function () { };
  const Vh = w;
  const Y = 18;
  const Z = 4;
  const _ = 16;
  let ee;
  let ie = vh;
  let ne = w;
  const te = 4;
  let se;
  const aj = 15;
  let ge;
  let bj = Vh;
  let cj = w;
  const dj = 0;
  let de = vh;
  let ej = [];
  const me = 13;
  let ce;
  let fj = "_";
  let gj = Vh;
  const hj = w;
  const fe = U;
  const ze = 256;
  const ye = T;
  const we = 11;
  const Pe = 255;
  let Ae;
  let ij = Vh;
  let jj = vh;
  let kj = Vh;
  const lj = 7;
  const Be = 8;
  const De = 20;
  let Ie;
  let mj;
  const nj = 7;
  function Qe(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function _e(a) {
    return sa.String.fromCharCode(a);
  }
  const Fe = 100;
  let je;
  const oj = 19;
  const We = 17;
  const Ge = 14;
  let Ne;
  const pj = 19;
  const Oe = 13;
  const He = 6;
  let Ue = w;
  const qj = 15;
  let Ke = w;
  const rj = 10;
  let Xe;
  let sj;
  let tj;
  let uj;
  let vj = vh;
  const wj = 1;
  const ni = 20;
  let oi;
  let xj = hj;
  const yj = 4;
  const si = 15;
  const hi = 14;
  const gi = 2;
  let li;
  const zj = 5;
  const bi = 17;
  let di;
  let Aj;
  let Bj = Vh;
  let Cj = w;
  const Dj = 9;
  let Ci;
  let Ej = Vh;
  const Fj = 12;
  let zi;
  let Gj;
  let Hj = vh;
  const Ij = 0;
  let Ai;
  let Jj = Vh;
  const Kj = 8;
  let Ji;
  const Lj = 6;
  let Bi = vh;
  let Mj = vh;
  const Nj = 3;
  let Ei;
  let Oj = Vh;
  let Pj = hj;
  let Qj = w;
  let Rj = Vh;
  const Sj = 18;
  const ji = 2;
  let Li;
  let Tj = w;
  let Uj = vh;
  const Vj = 16;
  const qi = 11;
  let Oi = Vh;
  let Wj = 0;
  const Xj = 255;
  const Yi = 8;
  if (!sa.WebAssembly || !sa.WebAssembly.instantiate) {
    ⵠⲆᐃⵠΔΔᐃⵠⵠ();
  }
  const Ki = {
    Date: Date
  };
  sa.WebAssembly.instantiate(Uint8Array.from(sa.atob(""), function (a) {
    return a.charCodeAt(0);
  }), Ki).then(async function (a) {
    ee = a.instance;
    ie = ee.exports;
    ne = ie.memory;
    se = ne.buffer;
    ge = ie.__pin;
    cj = ie.__unpin;
    bj = ie.__new;
    de = ie.__collect;
    fj = "_";
    for (let b = 0; b < 31; b++) {
      ej[b] = ie[fj + b];
    }
    ce = ie.__rtti_base;
    gj = new Float32Array(se);
    Ae = new Float64Array(se);
    kj = new BigUint64Array(se);
    jj = new Uint32Array(se);
    ij = new Uint16Array(se);
    Ie = new Uint8Array(se);
    mj = new BigInt64Array(se);
    je = new Int32Array(se);
    Ne = new Int16Array(se);
    Ue = new Int8Array(se);
    Uj = ej[4];
    Qj = ej[19];
    Ji = ej[18];
    Hj = ej[3];
    Rj = ej[5];
    uj = ej[30];
    Bi = ej[14];
    Ej = ej[12];
    Aj = ej[24];
    Ci = ej[16];
    Mj = ej[17];
    Cj = ej[13];
    Tj = ej[9];
    xj = ej[11];
    Xe = ej[0];
    sj = ej[1];
    Oj = ej[6];
    zi = ej[22];
    Bj = ej[28];
    Ei = ej[10];
    li = ej[15];
    Gj = ej[21];
    Ai = ej[27];
    Pj = ej[2];
    tj = ej[20];
    di = ej[23];
    vj = ej[7];
    oi = ej[8];
    Ke = ej[25];
    Li = ej[26];
    Jj = ej[29];
    Wj = 1;
    if (Oi) {
      await Oi();
    }
  });
  const Vi = 15;
  const Xi = 1;
  const Zi = vh;
  function $i(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Yj(a) {
    return sa.String.fromCharCode(a);
  }
  const Zj = C;
  const $j = dg;
  const _j = function (a) {
    return jj[(ce + 4 >>> 2) + (a << 1)];
  };
  const ak = 15;
  function bk(a) {
    return 31 - Math.clz32(a >>> 6 & 31);
  }
  const ck = 4;
  const dk = Vh;
  const ek = 11;
  const fk = 7;
  const gk = 256;
  const hk = 19;
  const ik = 20;
  function jk(a, b, c) {
    if (c) {
      switch (a) {
        case 2:
          return gj;
        case 3:
          return Ae;
      }
    } else {
      switch (a) {
        case 0:
          if (b) {
            return Ue;
          } else {
            return Ie;
          }
        case 1:
          if (b) {
            return Ne;
          } else {
            return ij;
          }
        case 2:
          if (b) {
            return je;
          } else {
            return jj;
          }
        case 3:
          if (b) {
            return mj;
          } else {
            return kj;
          }
      }
    }
  }
  function kk(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function lk(a) {
    return sa.String.fromCharCode(a);
  }
  function mk(b) {
    const c = jj[b + v >>> 2];
    const d = _j(c);
    const e = bk(d);
    let f = d & D ? b : jj[b + 4 >>> 2];
    const g = d & k ? jj[b + 12 >>> 2] : jj[f + z >>> 2] >>> e;
    return jk(e, d & 2048, d & j).subarray(f >>>= e, f + g);
  }
  const nk = 100;
  const ok = 17;
  const pk = "development";
  const qk = "production";
  const rk = 2;
  function sk(b, c, d, e, f) {
    const i = (2531011 + (b + 19427) * 214013) % 4294967296;
    const a = ~(c & 24190) & 24190 | ~(c & 24190) & c;
    const j = (12345 + (d + 16936) * 1103515245) % 2147483648;
    const k = ((e + 24951) * 1103515245 + 12345) % 2147483648;
    const h = ~(f & 22612) & 22612 | ~(f & 22612) & f;
    const g = rt(i, a, j, k, h);
    vf(i, a, j, k, h, i);
    return ~(g & 39605) & 39605 | ~(g & 39605) & g;
  }
  function tk(b, c, d, e) {
    const f = ~(b & 34123) & (b | 34123);
    const g = (1 + (c + 35721) * 22695477) % 4294967296;
    const a = (1013904223 + (17472 + d) * 1664525) % 4294967296;
    const i = (16 << (e & 255)) + (24 << (e >> 24 & 255)) + (8 << (e >> 16 & 255)) + (0 << (e >> 8 & 255));
    const j = ft(f, g, a, i, f, g);
    (function (b, c, d, e, f) {
      const i = (24967 + b) % 65531;
      const a = ((c + 3916) * 2147483629 + 2147483587) % 2147483647;
      const j = (33701 + d) % 65347;
      const k = e ^ 16273;
      const h = function (c, d, e, f, i, j) {
        const a = (15381 + c) % 65287;
        const k = (d + 2) % 65464;
        const m = ((29684 + e) * 214013 + 2531011) % 4294967296;
        const h = ~(f & 50751) & 50751 | ~(f & 50751) & f;
        const g = ((i + 21760) * 1103515245 + 12345) % 2147483648;
        const l = Dr(a, k, m, h, g, ~(j & 26353) & (j | 26353));
        const n = sk(a, k, m, h, g);
        return (8 << ((l ^ n) >> 24 & 255)) + (16 << ((l ^ n) >> 8 & 255)) + (24 << ((l ^ n) >> 16 & 255)) + (0 << ((l ^ n) & 255));
      }(i, a, j, k, (1 + (f + 34738) * 22695477) % 4294967296, i);
      const g = Ir(a, j, k);
    })(a, i, f, g, a);
    return ~(j & 59257) & j | ~(j & 59257) & 59257;
  }
  const uk = 10;
  const vk = 256;
  const wk = 1;
  const xk = 9;
  function yk(a) {
    this.ⲆΔΔⵠⲆ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor(Math.random() * (this.ⲆΔΔⵠⲆ - 1));
  }
  const zk = 13;
  yk.prototype.random = function () {
    this.state = (this.state * this.a + this.c) % this.ⲆΔΔⵠⲆ;
    return this.state / this.ⲆΔΔⵠⲆ;
  };
  yk.prototype.ᐃΔⵠᐃⲆⵠⵠ = function (a) {
    this.state = a;
  };
  ᐃⵠΔᐃⵠᐃⵠ = 10000;
  ⵠΔΔⵠᐃᐃΔ = [];
  const Ak = 7;
  const Bk = 19;
  var Ck = new yk();
  function Dk(a) {
    return sa.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ⵠⲆᐃᐃΔⵠⲆ: 5526275,
      ⲆⵠⲆⵠⵠⵠⲆ: 6916287,
      ⲆⵠᐃⲆΔΔᐃⲆⲆ: 14466302,
      ⵠⲆᐃⲆⵠⵠΔ: 4947869
    };
  })();
  Ck.ᐃΔⵠᐃⲆⵠⵠ(new Date().getTime());
  const Ek = 6;
  const Fk = 100;
  const Gk = 0;
  for (var Hk = 0; ᐃⵠΔᐃⵠᐃⵠ > Hk; Hk++) {
    ⵠΔΔⵠᐃᐃΔ.push(Ck.random());
  }
  const Ik = 5;
  function Jk(b, c, d, e) {
    const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
    const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
    const j = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const k = function (c, e, f, i, j, k) {
      const a = c ^ 10715;
      const m = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
      const n = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
      const h = i ^ 40782;
      const g = j ^ 41301;
      const l = ~(k & 12091) & (k | 12091);
      const o = gn(a, m, n, h, g, l);
      gn(a, m, n, h, g, l);
      kn(a, m, n, h, g);
      const b = (o | 3006) & ~(o & 3006);
      return ~(b & 24460) & (b | 24460);
    }(f, i, a, j, f, i);
    const h = Mn(a, j, f, i, a);
    gn(j, f, i, a, j, f);
    const g = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
    return (g | 38630) & ~(g & 38630);
  }
  const Kk = 14;
  function Lk(c, d, e, f, i) {
    const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
    const a = d ^ 58614;
    const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
    const m = f ^ 40810;
    const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
    const g = qn(j, a);
    const l = Jk(k, m, h, j);
    (function (b, c, d, e) {
      const f = (b + 34282) % 65336;
      const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
      const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
      const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
      const k = function (b, c) {
        const d = ~(b & 41406) & b | ~(b & 41406) & 41406;
        const e = ((c + 17922) * 1103515245 + 12345) % 2147483648;
        const f = Hn(d, e, d);
        dn(e, d, e, d);
        const g = Pk(e, d, e, d, e);
        return ((42346 + (f ^ 18573 ^ g)) * 2147483629 + 2147483587) % 2147483647;
      }(f, i);
      const h = Ln(a, j, f, i, a);
      qn(j, f);
      const g = (58498 + (k ^ h)) % 65531;
    })(a, k, m, h);
    const n = (24 << ((g ^ l) >> 24 & 255)) + (32 << ((g ^ l) >> 16 & 255)) + (8 << ((g ^ l) >> 32 & 255)) + (16 << ((g ^ l) >> 8 & 255));
    return ~(n & 13644) & n | ~(n & 13644) & 13644;
  }
  function Mk(c, d, e, f, i) {
    const j = ((c + 14772) * 2147483629 + 2147483587) % 2147483647;
    const a = d ^ 63080;
    const k = ((e + 60304) * 22695477 + 1) % 4294967296;
    const m = ~(f & 5467) & 5467 | ~(f & 5467) & f;
    const h = (i | 40165) & ~(i & 40165);
    const g = function (b, c, d, e) {
      const f = (b | 57611) & ~(b & 57611);
      const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
      const a = d ^ 62842;
      const j = ~(e & 1179) & e | ~(e & 1179) & 1179;
      const k = Nk(f, i, a, j);
      const h = zn(f, i, a, j);
      Jk(f, i, a, j);
      const g = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> 8 & 255));
      return ~(g & 63304) & (g | 63304);
    }(j, a, k, m);
    const l = Mn(h, j, a, k, m);
    const n = Qn(h, j, a, k, m, h);
    return ((28765 + ((16 << ((g ^ l) >> 24 & 255)) + (8 << ((g ^ l) >> 16 & 255)) + (24 << ((g ^ l) >> 32 & 255)) + (32 << ((g ^ l) >> 8 & 255)) ^ n)) * 1664525 + 1013904223) % 4294967296;
  }
  function Nk(b, c, d, e) {
    const f = b ^ 11762;
    const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
    return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
  }
  function Ok(c, e, f, i, j, k) {
    const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
    const m = ~(e & 49976) & e | ~(e & 49976) & 49976;
    const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
    const h = i ^ 52219;
    const g = (j + 3575) % 65503;
    const l = ~(k & 6932) & k | ~(k & 6932) & 6932;
    const o = Gn(a, m, n, h, g);
    const b = function (c, d, e, f, i, j) {
      const a = c ^ 30142;
      const k = (d + 63025) % 65493;
      const m = e ^ 30777;
      const h = ((45939 + f) * 22695477 + 1) % 4294967296;
      const g = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
      const l = (j | 45652) & ~(j & 45652);
      const n = Gn(a, k, m, h, g);
      Mk(l, a, k, m, h);
      pn(g, l, a, k, m, h);
      return n ^ 60048;
    }(l, a, m, n, h, g);
    on(l, a, m, n, h, g);
    const d = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
    return ~(d & 42138) & d | ~(d & 42138) & 42138;
  }
  function Pk(b, c, d, e, f) {
    const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
    const a = (c + 39144) % 65406;
    const j = d ^ 34575;
    const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
    const h = (f | 25975) & ~(f & 25975);
    const g = Nk(i, a, j, k);
    Ln(h, i, a, j, k);
    on(h, i, a, j, k, h);
    return (g | 19326) & ~(g & 19326) ^ 36297;
  }
  const Qk = 12;
  const Rk = 8;
  function Sk(b, c, d, e, f) {
    const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
    const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
    const j = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
    const k = (1 + (e + 41324) * 22695477) % 4294967296;
    const h = (f | 19607) & ~(f & 19607);
    const g = Kn(i, a);
    Ln(j, k, h, i, a);
    pn(j, k, h, i, a, j);
    const l = ~(g & 49323) & 49323 | ~(g & 49323) & g;
    return ~(l & 46567) & (l | 46567);
  }
  const Tk = 1;
  const Uk = 18;
  const Vk = fe;
  const Wk = 3;
  function Xk(c, d, e, f, i, j) {
    const a = (1013904223 + (c + 28824) * 1664525) % 4294967296;
    const k = (1013904223 + (13210 + d) * 1664525) % 4294967296;
    const m = ~(e & 32165) & 32165 | ~(e & 32165) & e;
    const h = (24 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 32 & 255));
    const g = (1 + (39199 + i) * 22695477) % 4294967296;
    const l = j ^ 33037;
    const n = function (b, c, d) {
      const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const f = (c | 44117) & ~(c & 44117);
      const i = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
      const a = rn(e, f, i, e, f);
      const j = Qn(i, e, f, i, e, f);
      const k = function (a, b) {
        const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
        const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
        const e = pn(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
          const i = b ^ 64570;
          const a = (2531011 + (c + 41768) * 214013) % 4294967296;
          const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
          const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
          const h = (f | 21896) & ~(f & 21896);
          const g = function (a, b) {
            const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
            const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
            const e = function (b, c, d) {
              const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
              const f = (c | 55665) & ~(c & 55665);
              const g = (d + 54633) % 65404;
              const a = Mk(e, f, g, e, f);
              (function (c, e, f, i, j, k) {
                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                const n = (f | 14774) & ~(f & 14774);
                const h = (i | 48802) & ~(i & 48802);
                const g = ~(j & 24998) & (j | 24998);
                const l = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                const o = _k(a, m, n, h);
                const b = Ln(g, l, a, m, n);
                const d = _k(h, g, l, a);
              })(g, e, f, g, e, f);
              zn(g, e, f, g);
              return ~(a & 43875) & (a | 43875) ^ 15116;
            }(c, d, c);
            kn(d, c, d, c, d);
            Nk(c, d, c, d);
            return (e | 17943) & ~(e & 17943) ^ 21791;
          }(i, a);
          dn(j, k, h, i);
          const l = Sk(a, j, k, h, i);
        })(c, d, c, d, c);
        Kn(d, c);
        return (e | 58283) & ~(e & 58283) ^ 8337;
      }(i, e);
      const h = (16 << ((a ^ j) >> 32 & 255)) + (24 << ((a ^ j) >> 24 & 255)) + (32 << ((a ^ j) >> 8 & 255)) + (8 << ((a ^ j) >> 16 & 255));
      return (8 << ((h ^ k) >> 32 & 255)) + (16 << ((h ^ k) >> 8 & 255)) + (32 << ((h ^ k) >> 16 & 255)) + (24 << ((h ^ k) >> 24 & 255));
    }(a, k, m);
    zn(h, g, l, a);
    return ((34159 + (n ^ 2959 ^ _k(k, m, h, g))) * 1103515245 + 12345) % 2147483648;
  }
  const Yk = vh;
  const Zk = 19;
  const $k = Zj;
  function _k(b, c, d, e) {
    const f = ~(b & 33107) & (b | 33107);
    const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
    const a = ~(d & 32053) & (d | 32053);
    const i = e ^ 12240;
    const j = function (b, c, d, e) {
      const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
      const i = (1 + (50595 + c) * 22695477) % 4294967296;
      const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
      const j = e ^ 18768;
      const k = Gn(f, i, a, j, f);
      const h = Lk(i, a, j, f, i);
      const g = fn(a, j);
      return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ g)) * 1664525 + 1013904223) % 4294967296;
    }(f, g, a, i);
    zn(f, g, a, i);
    return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ Gn(f, g, a, i, f))) * 214013) % 4294967296;
  }
  const El = 100;
  const an = 256;
  const en = 19;
  function gn(b, c, d, e, f, i) {
    const a = ~(b & 36133) & (b | 36133);
    const j = (c | 13670) & ~(c & 13670);
    const k = (d | 31390) & ~(d & 31390);
    const h = e ^ 64081;
    const g = f ^ 7550;
    const l = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (jn(a, j, k, h, g) ^ zn(l, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ kn(h, g, l, a, j))) * 1103515245) % 2147483648;
  }
  const hn = 255;
  const bn = 11;
  function dn(b, c, d, e) {
    const f = (b | 15432) & ~(b & 15432);
    const g = c ^ 12315;
    const a = d ^ 38714;
    const i = e ^ 58084;
    const j = Ok(f, g, a, i, f, g);
    zn(a, i, f, g);
    return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ on(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
  }
  const ln = 16;
  const mn = 7;
  const cn = 14;
  const nn = 4;
  function on(b, c, d, e, f, i) {
    const a = b ^ 23409;
    const j = c ^ 26380;
    const k = ((f + 33017) * 1103515245 + 12345) % 2147483648;
    const h = i ^ 42490;
    return ((19056 + (Nk(a, j, d ^ 53590, e ^ 36633) ^ Nk(k, h, a, j))) * 22695477 + 1) % 4294967296;
  }
  function pn(c, e, f, i, j, k) {
    const a = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
    const m = (e | 41551) & ~(e & 41551);
    const n = (24 << (f >> 24 & 255)) + (16 << (f >> 32 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 8 & 255));
    const h = ~(i & 32641) & (i | 32641);
    const g = ((j + 35582) * 214013 + 2531011) % 4294967296;
    const l = ~(k & 1090) & (k | 1090);
    const o = Qn(a, m, n, h, g, l);
    Pk(a, m, n, h, g);
    Nk(l, a, m, n);
    const b = ~(o & 8077) & 8077 | ~(o & 8077) & o;
    return ~(b & 3708) & (b | 3708);
  }
  function fn(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const f = on(d, e, d, e, d, e);
    const g = on(d, e, d, e, d, e);
    Nk(d, e, d, e);
    const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
    return ~(a & 55949) & 55949 | ~(a & 55949) & a;
  }
  function rn(b, c, d, e, f) {
    const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
    const j = (d | 31275) & ~(d & 31275);
    const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
    const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
    const g = on(i, a, j, k, h, i);
    const l = Nk(a, j, k, h);
    Hn(i, a, j);
    return (24 << ((g ^ l) >> 16 & 255)) + (8 << ((g ^ l) >> 8 & 255)) + (32 << ((g ^ l) >> 24 & 255)) + (16 << ((g ^ l) >> 32 & 255)) ^ 31710;
  }
  const sn = 2;
  const tn = 15;
  const un = 13;
  const vn = Zj;
  function kn(b, c, d, e, f) {
    const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
    const j = (2531011 + (22845 + d) * 214013) % 4294967296;
    const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
    const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
    const g = on(i, a, j, k, h, i);
    const l = pn(a, j, k, h, i, a);
    Nk(j, k, h, i);
    return (8 << ((g ^ l) >> 24 & 255)) + (16 << ((g ^ l) >> 16 & 255)) + (24 << ((g ^ l) >> 8 & 255)) + (32 << ((g ^ l) >> 32 & 255)) ^ 35444;
  }
  const wn = 6;
  const xn = 18;
  const yn = $j;
  function zn(b, c, d, e) {
    const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const i = c ^ 57623;
    const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const j = ~(e & 24601) & e | ~(e & 24601) & 24601;
    const k = Kn(f, i);
    Kn(a, j);
    Mn(f, i, a, j, f);
    const h = ~(k & 43902) & 43902 | ~(k & 43902) & k;
    return (h | 8862) & ~(h & 8862);
  }
  const An = vh;
  const Bn = 2;
  const Cn = 255;
  const Dn = 9;
  const En = 20;
  const In = T;
  const Fn = An;
  const Jn = 0;
  function jn(c, d, e, f, i) {
    const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const a = d ^ 55978;
    const k = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
    const m = ~(f & 30642) & (f | 30642);
    const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
    const g = Ln(j, a, k, m, h);
    const l = kn(j, a, k, m, h);
    Nk(j, a, k, m);
    const n = (16 << ((g ^ l) >> 32 & 255)) + (24 << ((g ^ l) >> 8 & 255)) + (8 << ((g ^ l) >> 24 & 255)) + (32 << ((g ^ l) >> 16 & 255));
    return ~(n & 23686) & (n | 23686);
  }
  function Kn(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (jn(c, d, c, d, c) ^ Ln(d, c, d, c, d))) % 65357 ^ Nk(c, d, c, d))) * 22695477) % 4294967296;
  }
  function Ln(b, c, d, e, f) {
    const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const a = c ^ 50118;
    const j = d ^ 41620;
    const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
    const g = Qn(i, a, j, k, h, i);
    Qn(a, j, k, h, i, a);
    return (2531011 + (53616 + ((g | 43477) & ~(g & 43477) ^ Nk(j, k, h, i))) * 214013) % 4294967296;
  }
  function Gn(b, c, d, e, f) {
    const i = b ^ 62008;
    const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const j = ((d + 46531) * 22695477 + 1) % 4294967296;
    const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
    const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
    const g = Mk(i, a, j, k, h);
    Qn(i, a, j, k, h, i);
    return ((3037 + (g ^ 57467 ^ Mn(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
  }
  function Mn(c, d, e, f, i) {
    const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
    const a = (d + 52922) % 65337;
    const k = e ^ 25250;
    const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
    const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
    const g = Pk(j, a, k, m, h);
    const l = qn(j, a);
    Pk(k, m, h, j, a);
    const n = (1 + (19675 + (g ^ l)) * 22695477) % 4294967296;
    return ~(n & 7922) & n | ~(n & 7922) & 7922;
  }
  function qn(b, c) {
    const d = b ^ 24508;
    const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const f = Sk(d, e, d, e, d);
    const g = jn(e, d, e, d, e);
    rn(d, e, d, e, d);
    const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
    return ~(a & 40927) & 40927 | ~(a & 40927) & a;
  }
  const Nn = 3;
  function Hn(b, c, d) {
    const e = b ^ 23323;
    const f = (2531011 + (61713 + c) * 214013) % 4294967296;
    const g = (d | 24198) & ~(d & 24198);
    const a = Sk(e, f, g, e, f);
    const h = Sk(g, e, f, g, e);
    Sk(f, g, e, f, g);
    return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
  }
  function On(a) {
    const b = function () {
      sa.addEventListener("mousemove", function () {
        b();
      });
    };
    b();
  }
  const Pn = 9;
  function Qn(b, c, d, e, f, i) {
    const a = d ^ 8102;
    const j = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
    const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
    const h = (1 + (62237 + i) * 22695477) % 4294967296;
    const g = fn((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
    const l = fn(a, j);
    fn(k, h);
    return (45290 + (g ^ l)) % 65334 ^ 55575;
  }
  function Rn(b, c, d, e, f) {
    const i = (12345 + (61317 + b) * 1103515245) % 2147483648;
    const a = c ^ 45007;
    const j = ~(d & 12020) & d | ~(d & 12020) & 12020;
    const k = ~(e & 48064) & 48064 | ~(e & 48064) & e;
    const h = ~(f & 35470) & 35470 | ~(f & 35470) & f;
    const g = nf(i, a, j, k, h);
    nf(i, a, j, k, h);
    return g ^ 62683;
  }
  const Sn = 12;
  const Tn = w;
  const Un = 14;
  const Vn = 100;
  const Wn = 5;
  ⵠⵠⵠ = {
    ᐃᐃᐃΔᐃΔⵠ: () => new Promise((a, b) => {
      sa.grecaptcha.ready(function () {
        sa.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (ff) {
            a(0);
          } else {
            console.log(undefined);
            b(c);
          }
        });
      });
    }),
    ΔΔΔᐃⵠⵠⵠⵠᐃ: function (a) {
      sa.open(a, "_blank").focus();
    },
    ΔⵠⲆⲆⲆⵠΔ: function (a) {
      sa.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ⲆⲆⲆⲆⲆᐃΔ: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return false;
        }
      }
      return true;
    },
    ⲆΔⵠⲆⵠⲆⵠΔⲆ: function (a, b) {
      if (a.length != b.length) {
        return false;
      }
      for (var c = 0; c < a.length; c++) {
        if (typeof a == "object") {
          if (!this.ⲆⲆⲆⲆⲆᐃΔ(a[c], b[c])) {
            return T;
          }
        } else if (a[c] != b[c]) {
          return C;
        }
      }
      return dg;
    },
    Ⲇᐃᐃⵠⵠᐃⵠ: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    ΔΔᐃⲆⵠⲆⲆ: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    ᐃᐃⲆᐃⲆΔⵠᐃΔ: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    ΔΔⵠΔⵠⵠⵠ: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    ⲆΔΔⵠΔΔⵠ: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < 0) {
        return -1;
      } else {
        return 1;
      }
    },
    ⲆⲆⲆⲆΔⵠᐃ: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    ᐃΔΔⲆᐃᐃⲆ: function (b, c, d, e) {
      var f = e - c;
      var g = d - b;
      return Math.atan2(f, g);
    },
    ᐃⲆΔⲆⵠⵠΔ: function (a, b) {
      return Math.asin(this.ΔΔⵠΔⵠⵠⵠ(a, b) / (this.ⲆΔΔⵠΔΔⵠ(a) * this.ⲆΔΔⵠΔΔⵠ(b))) * this.sign(this.ⲆⲆⲆⲆΔⵠᐃ(a, b));
    },
    ⵠᐃΔᐃⲆⵠⲆ: function (a) {
      ⲆⵠΔΔᐃᐃⲆ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ⲆⵠΔΔᐃᐃⲆ);
      if (b === null) {
        return null;
      } else {
        return b[1];
      }
    },
    ΔⵠᐃⲆⲆⲆᐃ: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    ΔΔⵠⵠΔⲆⵠ: function (a, b) {
      return this.ᐃⲆΔⲆⵠⵠΔ({
        x: 1,
        y: 0
      }, this.ΔΔᐃⲆⵠⲆⲆ(a, b));
    },
    ⵠΔᐃΔ: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    ⵠⵠⵠⵠΔⵠᐃ: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    ΔΔΔΔⵠⲆΔ: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    ᐃΔᐃΔⲆᐃᐃ: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    ⲆᐃⵠⲆⵠⵠⲆⵠⵠ: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    ᐃⲆⲆⵠⲆⲆΔᐃΔ: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    ⵠᐃᐃΔᐃ: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    ΔΔⵠᐃᐃΔᐃ: function (a, b) {
      return Math.floor((a - b) / 2);
    },
    ΔΔⵠᐃᐃᐃⲆ: function (a, b) {
      return {
        x: (a.x + b.x) / 2,
        y: (a.y + b.y) / 2
      };
    },
    ΔΔⵠΔⲆⲆᐃ: function () {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -1;
      }
    },
    ᐃⲆⲆΔᐃⲆⲆΔⲆ: function (b, c, d) {
      var e = this.ΔΔⵠΔⲆⲆᐃ();
      var f = this.ΔΔⵠΔⲆⲆᐃ();
      var g = Math.random() * Math.PI / 2;
      return {
        x: Math.floor(b + Math.sin(g) * e * d),
        y: Math.floor(c + Math.cos(g) * f * d)
      };
    },
    ΔΔⲆⵠⵠⲆⵠΔΔ: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.ᐃⵠⵠ = d;
    },
    ⵠΔΔⵠⲆᐃⵠᐃⵠ: function (a) {
      ᐃⵠΔΔ = [];
      ᐃⵠΔΔ.push.apply(ᐃⵠΔΔ, a);
      var b = [];
      while (ᐃⵠΔΔ.length > 0) {
        var c = Math.floor(Math.random() * ᐃⵠΔΔ.length);
        b.push(ᐃⵠΔΔ[c]);
        ᐃⵠΔΔ.splice(c, 1);
      }
      return b;
    },
    ⲆᐃΔⵠΔᐃⵠ: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * 100;
      }
      return a;
    },
    ⲆᐃᐃⲆⵠⲆᐃ: function (b) {
      if (typeof b != "number") {
        return "0";
      }
      if (b >= 10000) {
        var c = Math.floor(Math.log10(b)) - 2;
        var d = Math.max(0, 3 - c);
        var e = Math.floor(b / 1000).toString();
        if (d) {
          for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
            g++;
          }
          if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
            e = e.substring(0, e.length - 1);
          }
        }
        return e += "k";
      }
      return b.toString();
    },
    ⵠⵠⵠᐃⲆᐃᐃ: function (a) {
      return a * (2 - a);
    },
    ⲆᐃᐃᐃⲆⲆⵠ: function (a) {
      return --a * a * a + 1;
    },
    ⲆΔⵠⲆΔ: function (a) {
      if (a < 0.5) {
        return a * 2 * a;
      } else {
        return (4 - a * 2) * a - 1;
      }
    },
    ⵠⲆⲆΔⲆᐃᐃ: function (a) {
      if (a < 0.5) {
        return a * 4 * a * a;
      } else {
        return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
      }
    },
    ⲆᐃⵠⲆⵠᐃᐃᐃΔ: function (a) {
      if (a < 0.5) {
        return a * 8 * a * a * a;
      } else {
        return 1 - --a * 8 * a * a * a;
      }
    },
    ᐃᐃᐃΔᐃⵠⲆ: function (a) {
      return 1 - --a * a * a * a;
    },
    ᐃⵠΔΔΔΔᐃ: function (a) {
      return 1 + --a * a * a * a * a;
    },
    ⲆⵠⲆⲆ: function (b, c, d, e, f, g) {
      this.ⲆⲆΔ = b;
      this.ᐃⵠᐃ = c;
      this.max = d;
      this.min = e;
      this.ΔᐃⵠΔⵠᐃΔ = f;
      this.ᐃΔⲆⵠⵠΔⲆ = g;
      this.ᐃᐃᐃⵠᐃ = 0;
      this.ᐃⲆᐃ = function () {
        if (this.ⲆⲆΔ) {
          if ((a = this.ᐃⵠᐃ + sx * this.ΔᐃⵠΔⵠᐃΔ) > this.max) {
            this.ᐃⵠᐃ = this.max;
            this.ⲆⲆΔ = Zj;
            return true;
          }
          this.ᐃⵠᐃ = a;
        } else {
          var a;
          if ((a = this.ᐃⵠᐃ - sx * this.ᐃΔⲆⵠⵠΔⲆ) < this.min) {
            this.ᐃⵠᐃ = this.min;
            this.ⲆⲆΔ = Vk;
          } else {
            this.ᐃⵠᐃ = a;
          }
        }
      };
      return $k;
    },
    ⵠΔⵠⲆᐃ: function (b, c, d, e, f, g) {
      this.ⲆⲆⵠΔⲆ = b;
      this.ⵠΔᐃⵠⲆ = c;
      this.ⵠᐃΔⵠⲆ = d;
      this.ΔᐃⵠΔⲆ = e;
      this.x = f;
      this.ⵠΔⵠⵠᐃ = g;
      this.ΔᐃⲆⵠⵠⵠⲆ = function () {
        this.x = this.ᐃᐃᐃⵠᐃᐃⵠⵠΔ;
        this.ⵠΔᐃⵠⲆ = 0;
      };
      this.ⵠΔⵠᐃⵠ = function (a) {
        if (a !== this.ⵠΔⵠⵠᐃ) {
          this.ⵠΔⵠⵠᐃ = a;
          this.ΔᐃⵠΔⲆ = this.x;
          this.ⵠΔᐃⵠⲆ = 0;
        }
        if (this.ⵠΔⵠⵠᐃ !== this.x) {
          this.ⵠΔᐃⵠⲆ += sx;
          if (this.ⵠΔᐃⵠⲆ > this.ⵠᐃΔⵠⲆ) {
            this.x = this.ⵠΔⵠⵠᐃ;
          } else {
            var b = this.ⲆⲆⵠΔⲆ(this.ⵠΔᐃⵠⲆ / this.ⵠᐃΔⵠⲆ);
            this.x = this.ΔᐃⵠΔⲆ + (this.ⵠΔⵠⵠᐃ - this.ΔᐃⵠΔⲆ) * b;
          }
        }
      };
    },
    ΔᐃⲆΔⲆⵠⲆ: function (b, c, d, e, f, g, a, i, j) {
      this.ⲆⲆⵠΔⲆ = b;
      this.ⵠΔᐃⵠⲆ = c;
      this.ⵠᐃΔⵠⲆ = d;
      this.ΔᐃⵠΔⲆ = e;
      this.ΔΔⵠⵠⲆ = f;
      this.x = g;
      this.y = a;
      this.ⵠΔⵠⵠᐃ = i;
      this.ΔᐃⲆⵠⲆⵠΔ = j;
      this.ⵠΔⵠᐃⵠ = function (a) {
        if (a.x != this.ⵠΔⵠⵠᐃ || a.y != this.ΔᐃⲆⵠⲆⵠΔ) {
          this.ⵠΔⵠⵠᐃ = a.x;
          this.ΔᐃⲆⵠⲆⵠΔ = a.y;
          this.ΔᐃⵠΔⲆ = this.x;
          this.ΔΔⵠⵠⲆ = this.y;
          this.ⵠΔᐃⵠⲆ = 0;
        }
        if (this.ⵠΔⵠⵠᐃ != this.x || this.ΔᐃⲆⵠⲆⵠΔ != this.y) {
          this.ⵠΔᐃⵠⲆ += sx;
          if (this.ⵠΔᐃⵠⲆ > this.ⵠᐃΔⵠⲆ) {
            this.x = this.ⵠΔⵠⵠᐃ;
            this.y = this.ΔᐃⲆⵠⲆⵠΔ;
          } else {
            var b = this.ⲆⲆⵠΔⲆ(this.ⵠΔᐃⵠⲆ / this.ⵠᐃΔⵠⲆ);
            this.x = this.ΔᐃⵠΔⲆ + (this.ⵠΔⵠⵠᐃ - this.ΔᐃⵠΔⲆ) * b;
            this.y = this.ΔΔⵠⵠⲆ + (this.ΔᐃⲆⵠⲆⵠΔ - this.ΔΔⵠⵠⲆ) * b;
          }
        }
      };
    },
    ⲆΔᐃΔⵠΔᐃ: function (a) {
      var b = "";
      for (var c = 0; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    ΔⵠⲆᐃᐃΔᐃ: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[1];
      }
    },
    ᐃᐃΔⵠⵠ: function (a) {
      let b = "";
      const c = a.length;
      for (let d = 0; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    ᐃⲆⲆᐃⲆΔⵠ: function (a, b) {
      return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ᐃⵠⵠ && dg;
    },
    ⵠᐃᐃⵠᐃⲆΔ: function (b, c, d, e, f, g, a, h) {
      if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
        return 1;
      } else {
        return 0;
      }
    },
    ⵠⲆᐃΔⲆ: function (a, b, c) {
      return (1 - c) * a + c * b;
    },
    ⵠⵠΔⲆⲆⲆᐃ: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  const Xn = 17;
  function Yn(a, b, c, d) {
    Ej(io, a, b, c, d);
    const e = Zs(bo[0], bo[1], bo[2], bo[3]);
    st(bo[0], bo[1], bo[2]);
    return ~(e & 62152) & 62152 | ~(e & 62152) & e;
  }
  Math.sign = Math.sign || function (a) {
    if (a === 0) {
      return 0;
    } else if (a > 0) {
      return 1;
    } else {
      return -1;
    }
  };
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ⵠⵠⵠΔᐃΔⵠᐃⲆ;
  };
  (function (a) {
    var b = In;
    if (typeof ⵠᐃⵠΔⲆⵠⲆ == "function" && ⵠᐃⵠΔⲆⵠⲆ.ⵠⲆΔΔᐃⲆⲆᐃⵠ) {
      ⵠᐃⵠΔⲆⵠⲆ(a);
      b = true;
    }
    if (typeof ⵠⲆⲆᐃⲆⲆᐃ === "object") {
      ᐃⵠᐃΔⵠⲆᐃⵠᐃ.exports = a();
      b = true;
    }
    if (!b) {
      var c = sa.ᐃᐃᐃⲆ;
      var d = sa.ᐃᐃᐃⲆ = a();
      d.ᐃᐃⲆⵠⲆⵠᐃᐃᐃ = function () {
        sa.ᐃᐃᐃⲆ = c;
        return d;
      };
    }
  })(function () {
    function b() {
      for (var a = 0, b = {}; a < arguments.length; a++) {
        var c = arguments[a];
        for (var d in c) {
          b[d] = c[d];
        }
      }
      return b;
    }
    return function a(c) {
      function d(e, f, j) {
        var k;
        if (typeof document != "undefined") {
          if (arguments.length > 1) {
            if (typeof (j = b({
              path: "/"
            }, d.ⵠΔᐃⵠᐃΔⲆ, j)).expires == "number") {
              var m = new Date();
              m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
              j.expires = m;
            }
            try {
              k = JSON.stringify(f);
              if (/^[\{\[]/.test(k)) {
                f = k;
              }
            } catch (a) { }
            f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ⵠⲆⵠΔᐃᐃⵠΔΔ ? "; secure" : ""].join("");
          }
          if (!e) {
            k = {};
          }
          for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, g = 0; g < n.length; g++) {
            var p = n[g].split("=");
            var q = p.slice(1).join("=");
            if (q.charAt(0) === "\"") {
              q = q.slice(1, -1);
            }
            try {
              var s = p[0].replace(h, decodeURIComponent);
              q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
              if (this.json) {
                try {
                  q = JSON.parse(q);
                } catch (a) { }
              }
              if (s === e) {
                k = q;
                break;
              }
              if (!e) {
                k[s] = q;
              }
            } catch (a) { }
          }
          return k;
        }
      }
      d.set = d;
      d.get = function (a) {
        return d.call(d, a);
      };
      d.ⵠΔⲆΔⵠᐃⲆᐃΔ = function () {
        return d.apply({
          json: $j
        }, [].slice.call(arguments));
      };
      d.ⵠΔᐃⵠᐃΔⲆ = {};
      d.remove = function (a, c) {
        d(a, "", b(c, {
          expires: -1
        }));
      };
      d.ⲆⵠΔⵠᐃⲆⵠΔⲆ = a;
      return d;
    }(function () { });
  });
  const Zn = 8;
  function $n(b, c, d, e, f, i) {
    zi(io, b, c, d, e, f, i);
    j = bo[0];
    k = bo[1];
    m = bo[2];
    n = bo[3];
    o = bo[4];
    Uj(io, j, k, m, n, o);
    const a = ((252 + ($s(bo[0], bo[1], bo[2], bo[3], bo[4], bo[0]) ^ mt(bo[1], bo[2], bo[3], bo[4], bo[0]))) * 75 + 74) % 65537;
    var j;
    var k;
    var m;
    var n;
    var o;
    Rf(bo[5], bo[0], bo[1]);
    return a ^ 34818;
  }
  const _n = 5;
  const ao = 10;
  const eo = 3;
  const go = 14;
  const ho = 255;
  let bo = Fn;
  let io = dk;
  const lo = Oi;
  Oi = async function () {
    io = ge(Jj(8));
    bo = mk(io);
    if (lo) {
      lo();
    }

    await sa.gapi.load("auth2", Ox);
  };
  var co = document.getElementById("game_canvas");
  const no = 100;
  var oo = co.getContext("2d");
  const po = 17;
  const fo = 7;
  const ro = 17;
  var so = co.width;
  const to = 12;
  const uo = 19;
  var yo = co.height;
  var zo = co.width / 2;
  const Ao = $k;
  var Co = co.height / 2;
  const Jo = 15;
  var Bo = {
    x: zo,
    y: Co
  };
  var Po = 1;
  var To = 1;
  const aq = 11;
  var So = -1;
  const bq = 7;
  var _o = "J" + nq;
  const cq = 18;
  const Ro = 16;
  const jo = dg;
  var Lo = "S" + yq;
  var dq = sa;
  const Go = 4;
  var No;
  const eq = 3;
  var Oo = (ra = "O") + "N";
  const fq = 13;
  var Uo;
  var gq = 0;
  const Ko = 11;
  const Vo = 7;
  var Xo = dq;
  const Zo = 1;
  var $o;
  const hq = 20;
  Lo = "N";
  const ia = 14;
  var ta = "J";
  const iq = 255;
  const oa = 8;
  function aa(a) {
    const b = function () {
      sa.addEventListener("mousemove", function () {
        b();
      });
    };
    b();
  }
  var ra = "O" + nq;
  const jq = Zi;
  const la = 18;
  const ua = 17;
  var ba = Xo;
  const da = 17;
  const va = 256;
  const ma = 6;
  const ca = Zi;
  const pa = 5;
  const Ca = 255;
  const Ta = 15;
  var fa;
  const kq = 9;
  const ya = 4;
  var wa = ba;
  const Pa = 15;
  Oo = "N" + undefined;
  const Aa = 0;
  const ka = 2;
  var xa;
  var lq = wa;
  const Ma = Zj;
  const Ba = 13;
  var Da;
  var mq;
  var nq;
  var oq = lq;
  const Qa = 18;
  var _a;
  var pq = oq;
  const Ra = 12;
  const ja = 100;
  const La = 10;
  const Wa = 14;
  const Ga = 100;
  const Na = 6771536;
  const qa = 6771536 .ⲆΔⲆΔΔᐃᐃ;
  const Oa = `const ΔᐃⲆⵠⲆⲆᐃ = (typeof ⵠⵠⲆⵠᐃⵠⵠ === "${qa}") ? 1 : 0; return ΔᐃⲆⵠⲆⲆᐃ;`;
  var Ha = pq;
  const qq = dg;
  ta = "O";
  const Ya = 19;
  const Ka = yn;
  const Va = 255;
  const Xa = ca;
  var Za;
  var rq = Ha = pq;
  const sq = Ma;
  const tq = 16;
  var uq;
  var vq = rq;
  const wq = 12;
  const xq = 20;
  var yq = "J" + (Za = "S");
  co.oncontextmenu = function () {
    return false;
  };
  const zq = 255;
  const Aq = Yk;
  _o = "J";
  const Bq = $j;
  function Cq(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.ⲆⵠⵠΔᐃΔΔ = 1;
    return b;
  }
  const Dq = 6;
  const Eq = 1;
  const Fq = 2;
  const Gq = 0;
  ra = Oo;
  const Hq = 4;
  const Iq = 7;
  const Jq = yn;
  Oo = nq;
  nq = yq;
  const Kq = 11;
  const Lq = 8;
  const Mq = 3;
  ra = yq;
  const Nq = 9;
  const Oq = 8;
  fa = xa = yq + (ta += _o = Lo);
  Lo = ta + _o;
  const Pq = 11;
  Da = No = Uo = yq + ta;
  ra = yq + ta;
  mq = Uo;
  const Qq = 8;
  Oo = yq + ta;
  _a = $o = No;
  const Rq = 256;
  const Sq = 5;
  const Tq = 18;
  const Uq = 20;
  const Vq = 19;
  const Wq = 17;
  const Xq = 3;
  ta = nq = yq;
  const Yq = 15;
  const Zq = 5;
  Za = Uo;
  const $q = 13;
  const _q = $j;
  uq = No;
  _o = ra;
  var ar = sa.devicePixelRatio || 1;
  const br = dk;
  const cr = sq;
  var dr = oo.ⲆⵠΔΔⲆⵠⵠᐃⵠ || oo.ᐃᐃⲆⵠⵠⲆⵠⵠⲆ || oo.ⲆⲆⲆᐃᐃⵠⲆⲆΔ || oo.ᐃᐃΔⲆⵠᐃᐃⵠⵠ || oo.ᐃⵠⵠⵠΔⲆᐃⲆⲆ || 1;
  function er() {
    if (co.width != sa.innerWidth) {
      co.width = sa.innerWidth;
      so = co.width;
      zo = co.width / 2;
    }
    if (co.height != sa.innerHeight) {
      co.height = sa.innerHeight;
      yo = co.height;
      Co = co.height / 2;
    }
    Bo = {
      x: zo,
      y: Co
    };
    var a = co.width;
    var b = co.height;
    To = So === -1 ? ar / dr : So;
    co.width = a * To;
    co.height = b * To;
    co.style.width = a + "px";
    co.style.height = b + "px";
    oo.scale(To, To);
    if (kx) {
      kx.ⲆⲆᐃ.ΔⵠΔⵠⵠⵠⲆ = a;
      kx.ⲆⲆᐃ.ⲆⵠᐃΔᐃΔΔ = b;
    }
    if (tx.ⲆΔᐃᐃᐃ) {
      tx.ᐃⲆᐃ();
    } else if (ix.ⲆΔᐃᐃᐃ) {
      ix.ᐃⲆᐃ();
    } else if (nx.ⲆΔᐃᐃᐃ) {
      nx.ᐃⲆᐃ();
    } else if (lx.ⲆΔᐃᐃᐃ) {
      lx.ᐃⲆᐃ();
    }
  }
  const fr = 4;
  const gr = Jq;
  var hr = document.getElementById("game_body");
  const ir = 9;
  const jr = 100;
  hr.ondragstart = function () {
    return sq;
  };
  const kr = 5;
  hr.ondrop = function () {
    return vn;
  };
  hr.onresize = er;
  (function () {
    var b = 0;
    for (var a = ["ms", "moz", "webkit", "o"], c = 0; a.length > c && !sa.requestAnimationFrame; ++c) {
      sa.requestAnimationFrame = sa[a[c] + "RequestAnimationFrame"];
      sa.cancelAnimationFrame = sa[a[c] + "CancelAnimationFrame"] || sa[a[c] + "CancelRequestAnimationFrame"];
    }
    sa.requestAnimationFrame ||= function (c, d) {
      var e = new Date().getTime();
      var f = Math.max(0, 16 - (e - b));
      var a = sa.setTimeout(function () {
        c(e + f);
      }, f);
      b = e + f;
      return a;
    };
    if (!sa.cancelAnimationFrame) {
      sa.cancelAnimationFrame = function (a) {
        clearTimeout(a);
      };
    }
  })();
  var mr = navigator.language || navigator.userLanguage;
  const or = 6;
  const pr = 14;
  const qr = 256;
  const rr = 8;
  var sr = -new Date().getTimezoneOffset() / 60;
  var tr = "Europe";
  function vr(a) {
    return sa.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ⲆΔⵠⵠᐃᐃᐃ: 16131408,
      ⵠΔΔᐃᐃᐃᐃᐃⲆ: 2995311,
      ⲆⲆΔⲆᐃᐃⲆ: 1380301,
      ⵠΔΔⲆᐃⵠᐃ: 12638567
    };
  })();
  const wr = 20;
  const xr = 10;
  const yr = 2;
  var zr = "South America";
  var Ar = tr;
  function Br(c, e, f, i, j, k) {
    const a = (2531011 + (c + 64235) * 214013) % 4294967296;
    const m = e ^ 39795;
    const n = (f + 53321) % 65321;
    const h = ~(i & 53293) & (i | 53293);
    const g = (49869 + j) % 65462;
    const l = ~(k & 7367) & (k | 7367);
    const o = ft(a, m, n, h, g, l);
    const b = ut(a, m, n, h, g, l);
    return (24 << ((o ^ b) >> 16 & 255)) + (8 << ((o ^ b) >> 8 & 255)) + (16 << ((o ^ b) >> 0 & 255)) + (0 << ((o ^ b) >> 24 & 255));
  }
  if (sr >= -2 && sr <= 2) {
    Ar = tr;
  } else if (sr > 2 && sr <= 5) {
    Ar = "Russia";
  } else if (sr > 5 && sr <= 9) {
    Ar = "Asia";
  } else if (sr > 9) {
    Ar = "Australia";
  } else if (sr >= -5 && sr < -2) {
    Ar = mr === "pt-BR" || mr === "pt-br" || mr === "pt" || mr === "pt-pt" ? zr : "North America";
  } else if (sr < -5) {
    Ar = mr === "pt-BR" || mr === "pt-br" || mr === "pt" || mr === "pt-pt" ? zr : "West America";
  }
  const Cr = 1;
  function Dr(b, c, d, e, f, i) {
    const a = (0 << (b >> 16 & 255)) + (8 << (b >> 24 & 255)) + (24 << (b >> 8 & 255)) + (16 << (b & 255));
    const j = ((c + 26064) * 1103515245 + 12345) % 2147483648;
    const k = ~(d & 63965) & 63965 | ~(d & 63965) & d;
    const h = i ^ 58888;
    return ((43180 + (function (b, c, d, e, f) {
      const i = b ^ 30666;
      const a = (0 << (c >> 24 & 255)) + (16 << (c & 255)) + (24 << (c >> 16 & 255)) + (8 << (c >> 8 & 255));
      const j = (24 << (d >> 24 & 255)) + (0 << (d >> 0 & 255)) + (8 << (d >> 8 & 255)) + (16 << (d >> 16 & 255));
      const k = ~(e & 59576) & (e | 59576);
      const h = ((f + 26886) * 22695477 + 1) % 4294967296;
      const g = ut(i, a, j, k, h, i);
      (function (b, c, d, e) {
        const f = (b | 61889) & ~(b & 61889);
        const g = ~(c & 15918) & (c | 15918);
        const a = Hr(f, g, ~(d & 7851) & (d | 7851), ~(e & 37392) & (e | 37392));
        qw(f, g);
      })(a, j, k, h);
      return ~(g & 580) & 580 | ~(g & 580) & g;
    }(a, j, k, (16 << (e >> 8 & 255)) + (8 << (e >> 16 & 255)) + (24 << (e & 255)) + (0 << (e >> 24 & 255)), f ^ 49660) ^ Hr(h, a, j, k))) * 1103515245 + 12345) % 2147483648;
  }
  var yk = {
    ᐃⲆⵠᐃΔⲆᐃ: function (a) {
      var b = 2147483648;
      var c = a || Math.floor((b - 1) * Math.random());
      this.ᐃᐃᐃⵠΔ = function (a) {
        c = a || Math.floor(Math.random() * (b - 1));
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  const Er = 12;
  function Fr(b, c, d, e) {
    const f = ~(b & 104) & (b | 104);
    const g = (0 << (c >> 16 & 255)) + (16 << (c >> 24 & 255)) + (24 << (c & 255)) + (8 << (c >> 8 & 255));
    const a = ~(d & 38089) & 38089 | ~(d & 38089) & d;
    const h = ((e + 9295) * 1103515245 + 12345) % 2147483648;
    return ((52394 + (Rn(f, g, a, h, f) ^ Rn(g, a, h, f, g))) * 2147483629 + 2147483587) % 2147483647;
  }
  var Gr = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
  function Hr(b, c, d, e) {
    const f = (1 + (b + 14980) * 22695477) % 4294967296;
    const g = ~(c & 30114) & c | ~(c & 30114) & 30114;
    const a = ~(d & 6014) & (d | 6014);
    const h = function (b, c, d, e) {
      const f = (b | 64972) & ~(b & 64972);
      const g = ((c + 6844) * 1103515245 + 12345) % 2147483648;
      const a = ((d + 58899) * 2147483629 + 2147483587) % 2147483647;
      const i = ~(e & 5796) & (e | 5796);
      const j = ut(f, g, a, i, f, g);
      (function (b, c, d, e) {
        const f = (1 + (b + 12765) * 22695477) % 4294967296;
        const i = c ^ 7084;
        const a = (0 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)) + (24 << (d & 255)) + (8 << (d >> 16 & 255));
        const j = e ^ 31791;
        const k = Ir(f, i, a);
        const h = Ax(j, f, i, a, j);
      })(a, i, f, g);
      return ~(j & 49176) & j | ~(j & 49176) & 49176;
    }(f, g, a, ((64766 + e) * 1103515245 + 12345) % 2147483648);
    Ir(f, g, a);
    return (h | 5249) & ~(h & 5249);
  }
  function Ir(b, c, d) {
    const e = b ^ 32107;
    const f = c ^ 52530;
    const g = ~(d & 42991) & 42991 | ~(d & 42991) & d;
    return (56465 + (sk(e, f, g, e, f) ^ vf(g, e, f, g, e, f))) % 65425;
  }
  function Jr(b, c, d) {
    const e = ~(b & 27130) & b | ~(b & 27130) & 27130;
    const f = c ^ 9367;
    const g = ~(d & 19189) & d | ~(d & 19189) & 19189;
    const a = function (b, c, d, e) {
      const f = (24 << (b >> 24 & 255)) + (16 << (b >> 0 & 255)) + (0 << (b >> 8 & 255)) + (8 << (b >> 16 & 255));
      const g = (c | 51503) & ~(c & 51503);
      const a = ~(d & 3291) & d | ~(d & 3291) & 3291;
      const i = ~(e & 32738) & e | ~(e & 32738) & 32738;
      const j = Iw(f, g, a, i, f, g);
      Br(a, i, f, g, a, i);
      return j ^ 56494;
    }(e, f, g, e);
    ab(f, g, e, f, g, e);
    return (a | 11356) & ~(a & 11356);
  }
  const Lr = 16;
  var Mr = 0;
  let Nr = {
    ⲆᐃᐃᐃΔ: ["#133A2B", "#042b30"],
    ΔⲆⲆⵠⲆⵠⵠⲆⵠ: ["#EBF2F0", "#136167"],
    ⲆᐃᐃⵠⲆⵠΔ: ["#4EB687", "#187484"],
    ⵠᐃⲆⲆᐃᐃⵠ: ["#664516", "#13474C"],
    ΔᐃᐃΔⵠⲆⲆ: ["#FCEFBB", "#0F4D48"],
    ⵠᐃᐃΔᐃᐃⵠ: ["#C1AA7E", "#0F423D"],
    ⵠⵠᐃⲆⲆⲆⵠ: ["#594837", "#163A3A"],
    ΔᐃᐃⲆΔΔⵠ: ["#A5D6D6", "#539CA0"],
    ⲆᐃⲆⵠⵠ: ["#0B6A84", "#09373F"],
    ΔⵠⵠⲆⵠⵠⲆ: ["#2A8B9B", "#0F464C"],
    ⲆΔⵠⲆᐃⲆΔ: ["#A9D6D3", "#115E60"],
    ΔΔΔⵠⲆⲆⲆ: ["#ECF7F9", "#539CA0"],
    ⵠΔΔᐃⵠᐃⵠ: ["#FFF", "#FFF"],
    ᐃᐃΔⵠⵠᐃⵠ: ["#FFF", "#FFF"],
    ΔᐃᐃⲆⲆⲆⲆ: ["#1C9BA4", "#00272F"],
    ⲆᐃᐃⲆⵠ: ["#2D2017", "#031C1E"],
    ⲆⵠⲆ: 0,
    ᐃᐃᐃ: 1,
    ΔΔᐃᐃΔⵠΔᐃⵠ: 2300,
    ΔⵠⲆΔⲆᐃΔᐃΔ: 2290,
    ⲆᐃⲆⵠΔⵠⵠ: 34,
    ⲆⲆᐃΔⵠᐃⲆ: 5,
    ⵠⵠⲆᐃⲆⵠΔ: 68,
    ᐃᐃⲆⵠⵠⲆΔ: 34,
    ᐃⲆⵠⵠᐃⲆΔ: 5,
    ⲆⵠⲆⲆⲆΔⵠ: 1,
    ᐃᐃⵠᐃⲆⵠᐃ: 0.6,
    ⵠⵠᐃⲆⵠⲆΔ: 0.25,
    ᐃΔΔΔⵠⲆⲆ: 50,
    ΔⵠⲆⵠᐃⲆⲆ: 10,
    ⵠⵠⲆΔⲆⵠᐃ: 75,
    ᐃΔΔⲆⲆⲆⵠ: 20,
    ⲆⵠΔΔᐃΔᐃ: 5,
    ΔΔᐃᐃᐃ: 0,
    ⵠᐃΔΔⲆ: 1,
    ᐃΔⲆⲆᐃ: 2,
    ΔᐃⲆΔᐃ: 3,
    ᐃΔⲆᐃⲆ: 4,
    ⲆⵠΔΔᐃ: 5,
    ΔⲆᐃᐃᐃ: 6,
    ΔⵠΔᐃⲆ: 7,
    ⲆⲆΔⲆᐃ: 8,
    Δᐃᐃⵠᐃ: 9,
    ⵠⵠⲆⲆⵠ: 10,
    ΔⵠⲆᐃⲆ: 11,
    Δⵠⵠᐃⵠ: 12,
    ᐃᐃᐃⲆⲆ: 13,
    ΔⲆⲆΔᐃ: 14,
    ⵠΔⲆⲆⲆ: 15,
    ΔⵠⲆΔⵠ: 16,
    ⵠΔⲆΔΔ: 17,
    ΔᐃⵠⲆΔ: 18,
    ᐃⵠⵠⵠᐃ: 19,
    ᐃᐃΔᐃΔ: 20,
    ⵠᐃⵠⵠⲆ: 21,
    ΔⲆⵠΔⵠ: 22,
    Δⵠᐃᐃⵠ: 23,
    ⲆⵠΔⲆⵠ: 24,
    ⲆⲆᐃΔⵠ: 25,
    Ⲇᐃⵠᐃⵠ: 26,
    ᐃΔⵠⵠⵠ: 27,
    ΔⵠΔΔⲆ: 28,
    ⲆΔΔΔ: 29,
    ᐃᐃᐃⵠⵠ: 30,
    ⲆⵠⵠⵠⲆ: 31,
    ⵠᐃΔᐃΔ: 32,
    ᐃΔᐃⵠⲆ: 33,
    ⲆᐃΔⵠᐃ: 34,
    ᐃⲆⵠᐃⵠ: 35,
    ΔΔᐃᐃΔ: 36,
    ᐃΔⵠᐃΔ: 37,
    ΔᐃⲆᐃⵠ: 38,
    ⲆΔⲆⲆⲆ: 39,
    ᐃΔⲆⲆΔ: 40,
    ⲆⵠΔⵠⵠ: 41,
    ⲆᐃΔΔᐃ: 42,
    ⵠⲆᐃⵠⵠ: 43,
    ᐃⵠᐃⵠⲆ: 44,
    ⲆᐃⵠⲆᐃ: 45,
    ᐃΔΔΔⵠ: 46,
    ΔᐃᐃⵠΔ: 47,
    ⵠⵠⲆᐃⵠ: 48,
    ᐃᐃⵠᐃΔ: 49,
    ⵠΔᐃᐃⲆ: 50,
    ⵠⵠᐃⵠⲆ: 51,
    ΔⵠⲆⵠΔ: 52,
    ΔᐃⵠⲆⲆ: 53,
    ⵠⵠΔⵠⵠ: 54,
    ᐃⲆⲆⲆᐃ: 55,
    ΔᐃⲆΔΔ: 56,
    ⲆᐃᐃⲆᐃ: 57,
    ΔΔΔⵠΔ: 58,
    ⵠᐃⵠᐃⵠ: 59,
    ⵠΔᐃⲆΔ: 60,
    ⲆⵠΔᐃᐃ: 61,
    ΔⵠⵠΔᐃ: 62,
    ⵠⵠⵠΔΔ: 63,
    ⵠⲆΔⵠΔ: 64,
    ⵠⵠⲆⵠⲆ: 65,
    ⲆⲆⵠᐃⵠ: 66,
    ΔᐃⲆⵠᐃ: 67,
    ⲆᐃⵠⲆⵠ: 68,
    ⲆᐃᐃΔΔ: 69,
    ᐃΔΔⲆⵠ: 70,
    ⵠΔᐃⵠΔ: 71,
    ⲆΔᐃⵠΔ: 72,
    ⲆᐃΔⵠⲆ: 73,
    ⲆⵠⵠΔⲆ: 74,
    ⵠⲆᐃᐃΔ: 75,
    Ⲇⵠⵠⵠᐃ: 76,
    ᐃⲆⲆⵠⲆ: 77,
    ⵠΔⵠⲆⵠ: 78,
    ᐃᐃᐃᐃⲆ: 79,
    ΔⵠⵠⲆΔ: 80,
    ΔⵠᐃΔⲆ: 81,
    ΔⵠᐃΔΔ: 82,
    ᐃⲆᐃⲆⲆ: 83,
    ᐃⲆⵠⲆᐃ: 84,
    ⲆⵠⲆⵠⲆ: 85,
    ⲆΔⵠΔⲆ: 86,
    ᐃⵠⵠᐃⲆ: 87,
    ⲆⵠⵠⲆΔ: 88,
    ⲆΔⲆᐃᐃ: 89,
    ΔΔⲆⵠⲆ: 90,
    ΔⲆᐃⲆᐃ: 91,
    ⲆᐃΔⲆⵠ: 92,
    ⲆΔⵠᐃΔ: 93,
    ΔⵠΔⵠⲆ: 94,
    ᐃⲆΔⲆⲆ: 95,
    ⲆᐃⲆⲆⲆ: 96,
    ⵠΔᐃⲆⵠ: 97,
    ⵠⵠⵠⲆⲆ: 98,
    ⵠⵠⲆΔᐃ: 99,
    ⲆⲆᐃⲆⵠⵠΔᐃΔ: 100,
    ᐃᐃⲆⲆⲆ: 101,
    ᐃΔⵠΔⲆ: 102,
    ᐃⲆᐃΔΔ: 103,
    ⲆⲆⵠᐃΔ: 104,
    ΔⵠᐃⵠΔ: 105,
    ᐃⲆⲆᐃⵠ: 106,
    ⵠⲆⵠΔΔ: 107,
    ᐃⵠΔⲆᐃ: 108,
    ⲆⲆᐃⲆ: 109,
    ᐃⵠⲆᐃⲆ: 110,
    ⵠⵠᐃⲆ: 111,
    ⵠⵠᐃΔ: 112,
    ᐃⲆⵠⲆⵠⲆᐃ: 113,
    ΔΔΔΔΔ: 114,
    ⵠⵠⲆᐃᐃⵠⲆ: 115,
    ᐃᐃⲆᐃᐃ: 116,
    ⲆⵠⲆᐃᐃ: 117,
    ᐃⲆᐃΔⲆⲆⲆ: 118,
    ᐃΔⵠⵠΔⲆⵠ: 119,
    ΔΔΔᐃⲆ: 120,
    ᐃⵠⵠⲆ: 121,
    ᐃⲆΔᐃΔ: 122,
    Δᐃⵠⵠᐃ: 123,
    ΔᐃΔΔⵠⲆΔ: 124,
    ⲆⲆⲆⲆⵠ: 125,
    ⵠⵠᐃᐃⵠ: 126,
    ΔⵠⵠᐃⲆ: 127,
    ΔⲆΔᐃⲆ: 128,
    ⲆΔⵠⲆⵠ: 129,
    ⵠΔⵠⵠΔ: 130,
    ᐃΔᐃᐃⲆ: 131,
    ⵠⲆΔΔᐃ: 132,
    ᐃⵠΔᐃⵠ: 133,
    ⵠᐃᐃᐃⲆ: 134,
    ΔⲆⲆⲆΔ: 135,
    ᐃⵠⵠΔⲆ: 136,
    ⵠⵠΔⲆⵠ: 137,
    ᐃⲆΔⲆᐃ: 138,
    ⵠΔΔΔᐃ: 139,
    ΔⵠΔⲆᐃᐃⵠ: 140,
    ᐃᐃⵠΔΔ: 141,
    ⲆⵠᐃΔⲆⲆⲆ: 142,
    ⵠΔⲆⵠⲆΔΔ: 143,
    ᐃᐃⵠΔΔᐃᐃ: 144,
    ⲆΔⵠⵠΔⲆⲆ: 145,
    ᐃΔⵠΔᐃ: 146,
    ⲆⲆᐃⵠⲆ: 147,
    ⵠΔΔⲆΔ: 148,
    ΔΔⲆⵠᐃ: 149,
    ᐃΔᐃΔⵠ: 150,
    ⵠⵠᐃᐃΔ: 151,
    ⵠᐃΔΔᐃ: 152,
    ᐃⵠⵠΔⵠ: 153,
    ΔⲆⲆᐃⵠ: 154,
    ⵠᐃᐃΔΔ: 155,
    ΔᐃⵠᐃΔ: 156,
    ΔΔᐃᐃⲆ: 157,
    ⲆΔᐃᐃⵠ: 158,
    ⲆⲆᐃⵠΔ: 159,
    ⲆⵠⲆΔⲆ: 160,
    ΔᐃⵠΔᐃ: 161,
    ⵠⵠⵠⵠⵠ: 162,
    ᐃⲆⵠᐃᐃ: 163,
    ⵠᐃⲆⲆᐃ: 164,
    ΔΔⲆΔΔ: 165,
    ᐃⲆΔΔⲆⵠⵠ: 166,
    ΔᐃΔΔⲆ: 167,
    ᐃᐃⵠⵠⵠ: 168,
    ᐃⲆᐃΔᐃ: 169,
    ⵠΔⵠⲆⲆ: 170,
    ᐃᐃᐃⵠⲆⲆⵠ: 171,
    ᐃᐃΔⵠⲆΔⲆ: 172,
    ΔΔⵠⵠⲆΔᐃ: 173,
    Δⵠᐃⵠⵠ: 174,
    ⵠⲆᐃΔⲆⲆⵠ: 175,
    ⲆⵠⲆᐃⵠΔΔ: 176,
    ⲆΔⵠⵠⲆⲆⵠ: 177,
    ⵠᐃΔΔⲆᐃⲆ: 178,
    ⵠΔⲆΔΔΔⲆ: 179,
    ⵠⲆΔⵠⲆⲆⵠ: 180,
    ᐃᐃⲆⲆⲆΔⵠ: 181,
    ΔΔΔⲆⵠᐃΔ: 182,
    ΔⵠⲆⵠⲆ: 183,
    ⲆⵠⲆΔΔ: 184,
    ⲆⲆᐃⵠᐃ: 185,
    ΔᐃⲆⲆⲆ: 186,
    ᐃⵠΔᐃΔ: 187,
    ᐃᐃΔⲆᐃΔⲆ: 188,
    ⵠΔᐃΔⲆ: 189,
    ⲆᐃⲆΔΔ: 190,
    ⲆⲆⵠⵠⵠⵠⲆ: 191,
    ⵠΔⵠⵠⵠ: 192,
    ΔΔᐃⲆΔᐃΔ: 193,
    ΔⲆⲆΔΔ: 194,
    ᐃⲆΔΔΔ: 195,
    ΔΔᐃΔᐃᐃΔ: 196,
    ⲆᐃⲆΔᐃⲆⲆ: 197,
    ⵠⵠⵠᐃᐃ: 198,
    ΔᐃⲆⵠⲆ: 199,
    ᐃᐃⵠⲆⵠⲆᐃ: 200,
    ΔΔᐃⲆⵠ: 201,
    ⵠΔᐃⵠ: 202,
    ΔΔΔᐃΔ: 203,
    ΔⲆΔᐃⲆΔⲆ: 204,
    ⵠⲆⵠⵠⲆ: 205,
    ΔⵠᐃⵠᐃᐃΔ: 206,
    ᐃᐃⵠⵠⲆ: 207,
    ΔⵠΔⵠΔΔΔ: 208,
    ᐃᐃⵠⵠΔ: 209,
    ⲆΔⲆⲆⲆⵠᐃ: 210,
    ⲆΔΔᐃⲆⵠⵠ: 211,
    ᐃⲆᐃⵠⵠ: 212,
    ᐃⲆᐃΔⲆ: 213,
    ⲆⵠⵠⲆᐃ: 214,
    ⵠⲆᐃΔΔ: 215,
    ⵠᐃⵠⲆⵠ: 216,
    ᐃⵠⵠⲆΔ: 217,
    ⵠⲆⲆᐃᐃ: 218,
    ⲆⵠΔᐃΔ: 219,
    ⲆⲆⵠⲆᐃ: 220,
    ΔⵠⵠⲆᐃ: 221,
    ᐃⵠΔΔΔ: 222,
    ᐃⲆⲆⵠⵠ: 223,
    ᐃᐃⲆΔᐃ: 224,
    ⵠⵠⲆᐃᐃΔⵠ: 225,
    ΔⵠᐃΔⵠᐃᐃ: 226,
    ΔⵠᐃⲆᐃ: 227,
    ⲆΔᐃⲆⵠⵠⵠ: 228,
    ⵠΔᐃᐃΔ: 229,
    ΔⵠΔΔᐃ: 230,
    ⵠᐃⵠΔᐃ: 231,
    ⲆⲆⵠⲆΔ: 232,
    ᐃᐃΔΔⲆ: 233,
    Ⲇⵠⵠⵠⵠⵠᐃ: 234,
    ᐃⵠᐃΔⵠ: 235,
    ᐃⲆᐃⲆᐃ: 236,
    ΔⵠⲆΔᐃ: 237,
    ⲆΔⵠⵠⵠ: 238,
    ᐃΔⲆΔⲆ: 239,
    ᐃⲆΔᐃⵠ: 240,
    ⲆΔΔⲆⲆ: 241,
    ⵠⵠⵠᐃⲆ: 242,
    ΔᐃᐃΔⵠᐃᐃ: 243,
    ⲆⲆΔⵠΔ: 244,
    ΔΔᐃⵠΔ: 245,
    ⵠⲆᐃΔᐃᐃΔ: 246,
    ⲆΔⲆⲆⵠ: 247,
    ⲆⲆΔᐃⵠ: 248,
    ⲆΔΔᐃⲆⵠΔ: 249,
    Δⵠⵠᐃᐃ: 250,
    ⲆΔⵠΔΔ: 251,
    ⲆΔⵠΔⵠⵠⲆ: 252,
    ⲆⲆᐃᐃᐃⵠᐃ: 253,
    ᐃⵠΔⲆⵠⲆΔ: 254,
    ᐃⲆⲆⲆΔ: 255,
    ΔΔⲆᐃᐃᐃΔ: 256,
    ⵠᐃΔΔⵠⲆᐃ: 257,
    ΔΔΔⵠⲆΔΔ: 258,
    ΔᐃᐃΔⲆⲆⲆ: 259,
    ᐃⲆⵠᐃⲆ: 260,
    ⲆᐃᐃⲆⵠⵠΔ: 261,
    ΔΔⲆⲆᐃⲆⲆ: 262,
    ⵠΔⵠΔΔⵠⵠ: 263,
    ⲆΔΔⲆΔ: 264,
    ⵠⲆⲆⲆⲆⲆΔ: 265,
    ΔΔⲆⵠΔⵠⲆ: 266,
    ΔⵠⵠⲆᐃΔᐃ: 267,
    ⵠᐃΔΔⲆᐃᐃ: 268,
    ΔΔⵠᐃᐃⲆΔ: 269,
    ⵠⵠⲆΔΔΔⵠ: 270,
    ᐃΔⵠⵠΔⵠΔ: 271,
    ⵠΔⵠⲆΔⲆᐃ: 272,
    ΔⲆⵠΔⵠⵠᐃ: 273,
    ⵠᐃⲆᐃᐃᐃⵠ: 274,
    ᐃⲆᐃᐃΔᐃᐃ: 275,
    ⵠᐃⲆΔⲆᐃⲆ: 276,
    ΔᐃᐃⲆⵠᐃᐃ: 277,
    ⲆᐃⲆⵠΔΔⵠ: 278,
    Ⲇⵠⵠᐃ: 279,
    ⲆᐃᐃΔᐃ: 280,
    ΔⵠⲆᐃⵠΔⵠ: 281,
    ⲆⲆᐃᐃⵠⲆⲆ: 282,
    Ⲇⵠ: 283,
    ΔᐃᐃⲆᐃⲆⲆ: 284,
    ⲆᐃⲆⲆΔ: 285,
    ⵠⵠΔᐃΔ: 286,
    ⵠΔⲆᐃΔΔⵠ: 287,
    ᐃⲆⲆⲆⵠ: 288,
    ⲆᐃⲆᐃⵠⲆΔ: 289,
    ⲆΔⵠⲆⵠΔΔ: 290,
    ᐃΔᐃⵠᐃΔᐃ: 291,
    ᐃΔᐃΔⵠᐃΔ: 292,
    ΔⵠᐃⵠⲆΔΔ: 293,
    ΔᐃΔΔⵠ: 294,
    ᐃⵠⲆⵠⵠⲆⵠ: 295,
    ⵠᐃΔΔΔⵠᐃ: 296,
    ⵠᐃⲆᐃᐃᐃΔ: 297,
    ⵠᐃⲆΔᐃⵠⲆ: 298,
    ᐃⵠΔΔⵠ: 299,
    ⲆⲆΔΔⲆᐃⵠ: 300,
    ⲆⵠⲆΔⵠⲆⲆ: 301,
    ΔⲆⵠᐃⵠⲆᐃ: 302,
    ᐃⲆᐃⲆᐃᐃⵠ: 303,
    ⵠᐃⵠΔᐃⲆⵠ: 304,
    ΔᐃΔⵠⵠⲆΔ: 305,
    ΔΔΔΔⲆᐃⵠ: 306,
    ⲆᐃΔᐃⵠ: 307,
    ⲆΔⲆΔⵠⵠⲆ: 308,
    ⵠΔΔⲆⲆΔΔ: 309,
    ⵠⵠΔᐃᐃⵠⵠ: 310,
    ΔⲆⵠᐃⲆⵠᐃ: 311,
    ᐃⵠⵠᐃⲆΔᐃ: 312,
    ⲆⲆⵠΔΔⵠⲆ: 313,
    ΔⲆᐃΔⵠⵠⲆ: 314,
    ᐃⲆⵠⲆΔΔᐃ: 315,
    ᐃⵠΔᐃⵠⵠᐃ: 316,
    ⵠⲆⲆⵠⵠⵠᐃ: 317,
    ⵠΔⵠᐃΔᐃᐃ: 318,
    ⵠᐃΔⵠⵠⵠⲆ: 319,
    ᐃᐃⲆΔΔⲆⵠ: 320,
    ΔΔⵠᐃⵠ: 321,
    ⵠⵠΔⵠⲆΔⵠ: 322,
    ⲆᐃΔᐃΔᐃᐃ: 323,
    ΔᐃⲆᐃᐃⲆⲆ: 324,
    ⵠᐃᐃⵠᐃⵠⵠ: 325,
    ΔⲆᐃⵠⵠΔⲆ: 326,
    ⵠⵠⵠΔⵠⵠΔ: 327,
    ᐃⵠⵠⲆᐃⲆⲆ: 328,
    ⲆⵠⲆⵠΔⲆⵠ: 329,
    ⲆᐃⲆⲆΔᐃⲆ: 330,
    ᐃΔᐃΔᐃΔᐃ: 331,
    ⵠⵠⲆⲆⵠΔΔ: 332,
    ⵠΔᐃⲆᐃΔΔ: 333,
    ⵠⵠᐃⲆᐃΔⲆ: 334,
    ΔⲆⵠΔᐃⵠⵠ: 335,
    ᐃΔΔᐃΔⵠⲆ: 336,
    ΔΔᐃⵠⲆⵠⵠ: 337,
    ⲆᐃⲆᐃᐃⲆΔ: 338,
    ΔⵠᐃⵠΔⵠΔ: 339,
    ᐃⵠᐃᐃⲆⵠᐃ: 340,
    ⲆᐃᐃΔⵠΔⵠ: 341,
    ⵠᐃⲆⵠΔᐃⵠ: 342,
    ᐃⵠⵠⵠⵠΔⲆ: 343,
    ᐃⲆⲆⵠΔⲆⵠ: 344,
    ᐃⵠᐃΔⲆⲆΔ: 345,
    ΔΔⵠⲆΔⲆⲆ: 346,
    ΔΔᐃⵠⲆⲆΔΔⲆ: 347,
    ⲆⲆⵠΔⵠⲆⲆ: 348,
    ᐃᐃᐃⵠΔⲆᐃ: 349,
    ΔⵠΔΔⲆⲆⲆ: 350,
    ΔⵠⲆⵠⵠΔᐃ: 351,
    ᐃΔⲆᐃᐃⲆⲆ: 352,
    ΔΔΔΔⲆⲆΔ: 353,
    ΔᐃⲆΔᐃⲆᐃ: 354,
    ᐃΔΔⲆΔᐃⲆ: 355,
    ΔⵠΔⵠⵠⲆⲆ: 356,
    ΔΔⵠⵠⲆᐃᐃ: 357,
    ⵠⲆⵠᐃᐃᐃⲆ: 358,
    ⲆΔᐃᐃⵠΔΔ: 359,
    ΔⵠᐃΔΔⲆⲆ: 360,
    ᐃᐃⲆΔⵠΔᐃ: 361,
    ᐃᐃⵠᐃⵠΔΔ: 362,
    ᐃⵠᐃΔᐃⲆΔ: 363,
    ΔⵠΔⲆⵠΔⲆ: 364,
    ⵠⲆⲆⲆⲆⲆᐃ: 365,
    ⵠⲆᐃⲆΔΔⵠ: 366,
    ᐃⵠⲆⲆⵠΔⲆ: 367,
    ᐃⲆᐃⵠⲆΔⵠ: 368,
    ⲆⲆᐃⲆᐃᐃⲆ: 369,
    ΔᐃⲆΔᐃⲆⵠ: 370,
    ⵠⲆᐃⵠⲆΔᐃ: 371,
    ⵠⵠⵠⵠⲆᐃᐃ: 372,
    ⲆⲆΔΔⵠᐃᐃ: 373,
    ΔΔⲆⵠᐃᐃᐃ: 374,
    ⵠΔⲆⵠΔΔΔ: 375,
    ᐃⵠⲆᐃᐃⵠΔ: 376,
    ⲆⵠⲆⵠⲆΔᐃ: 377,
    ⵠΔⲆᐃᐃⵠΔ: 378,
    ⲆᐃⵠᐃΔᐃᐃ: 379,
    ⵠⵠⵠⵠΔΔⵠ: 380,
    ᐃΔⵠⲆΔⲆⵠ: 381,
    ⲆΔⵠΔΔᐃⲆ: 382,
    ΔⵠⲆΔⵠⲆᐃ: 383,
    ⵠΔΔⲆᐃᐃⵠ: 384,
    ⵠᐃⵠⵠᐃΔⵠ: 385,
    ⲆΔⲆᐃⵠΔᐃ: 386,
    ⵠⲆⵠΔΔΔΔ: 387,
    ΔⵠΔⲆⲆⲆⵠ: 388,
    ⲆⵠⲆⵠᐃⲆⵠ: 389,
    ΔⵠⲆⲆⲆΔᐃ: 390,
    ⵠⲆᐃⵠᐃⵠᐃ: 391,
    ΔΔᐃΔᐃⵠΔ: 392,
    ⵠΔΔⲆΔΔΔ: 393,
    ΔᐃⵠⲆᐃⵠᐃ: 394,
    ΔⲆⵠᐃΔⵠⲆ: 395,
    ᐃⲆᐃⵠᐃⵠΔ: 396,
    ⲆⲆⲆⵠΔΔⲆ: 397,
    ΔⵠΔᐃΔᐃⵠ: 398,
    ⲆᐃⵠᐃᐃᐃⲆ: 399,
    Δⵠⵠⵠᐃⵠⵠ: 400,
    ΔΔⵠⵠⵠⲆⲆ: 401,
    ΔΔⵠⲆⵠᐃⵠ: 402,
    ⵠΔⲆᐃⲆⲆᐃ: 403,
    ⲆᐃⵠΔᐃΔⵠ: 404,
    ᐃⲆᐃᐃᐃⵠΔ: 405,
    ⲆⲆΔⲆΔⲆⲆ: 406,
    ᐃⵠⵠⵠΔⵠⵠ: 407,
    ⵠⲆⲆΔⲆⲆⵠ: 408,
    ⲆᐃᐃΔⵠΔΔ: 409,
    ⵠᐃⵠⵠⲆᐃᐃ: 410,
    ᐃᐃⵠΔΔΔΔ: 411,
    ᐃⵠΔᐃⵠΔᐃ: 412,
    ⵠⵠⵠΔᐃ: 413,
    ΔⵠⵠⵠᐃᐃΔⵠⵠ: 414,
    ⲆⲆᐃⲆᐃ: 415,
    ⲆΔΔΔΔ: 416,
    ΔⲆⲆᐃΔΔΔΔᐃ: 417,
    ⲆⲆᐃΔΔⲆⲆ: 418,
    ⵠⲆⵠⲆⲆ: 419,
    ᐃᐃⵠΔᐃΔΔ: 420,
    ⲆᐃΔᐃΔⵠΔ: 421,
    ⲆⵠⲆⲆᐃⵠⵠ: 422,
    ⵠᐃⲆⵠⲆΔΔ: 423,
    ⲆⲆΔΔⲆᐃᐃ: 424,
    ᐃᐃΔⲆᐃᐃⵠ: 425,
    ᐃΔⲆⵠᐃⲆⲆ: 426,
    ΔⲆⵠⲆΔⵠⲆ: 427,
    ᐃᐃⲆΔᐃⲆⵠ: 428,
    ᐃΔⵠΔⲆⲆΔ: 429,
    ⲆⲆᐃⵠⲆᐃΔ: 430,
    ⵠⵠΔⲆⵠⲆΔ: 431,
    ᐃⲆⵠΔⲆᐃⲆ: 432,
    ⵠΔΔⲆⲆΔⲆ: 433,
    ⲆⵠⲆⲆⵠⵠᐃ: 434,
    ᐃⵠΔΔⵠⵠΔ: 435,
    ᐃΔⵠΔⲆΔᐃ: 436,
    ᐃᐃⲆⵠⲆᐃᐃ: 437,
    ⵠΔᐃⲆⵠⲆᐃ: 438,
    ᐃⲆᐃΔΔΔΔ: 439,
    ⵠⵠΔⵠⵠⵠⵠ: 440,
    ᐃⵠΔΔⵠΔΔ: 441,
    ⵠⲆΔⵠΔⵠΔ: 442,
    ⲆⲆᐃΔⲆⲆΔ: 443,
    ΔⵠΔᐃⵠⲆᐃΔΔ: 444,
    ⲆⵠΔⲆⲆ: 445,
    Δⵠⵠᐃᐃⵠᐃ: 446,
    ⲆᐃΔᐃⲆⵠΔ: 447,
    ΔⲆᐃΔΔΔΔᐃⲆ: 448,
    ᐃᐃⵠΔⲆ: 449,
    ⵠⵠⲆᐃΔ: 450,
    ΔΔⵠⲆⲆᐃⵠ: 451,
    ᐃᐃᐃⲆⲆⲆᐃ: 452,
    ⵠⲆⵠⲆᐃⲆⵠ: 453,
    ᐃΔΔⲆⲆᐃᐃ: 454,
    ΔⲆΔⵠⵠΔⲆ: 455,
    ΔΔΔΔᐃⵠΔ: 456,
    ΔⵠⲆᐃᐃⵠⵠ: 457,
    ⵠⵠᐃⲆᐃᐃⲆ: 458,
    Δⵠᐃᐃᐃᐃⵠ: 459,
    ⵠᐃⲆΔᐃᐃⵠ: 460,
    ᐃᐃⲆⲆⲆⵠⵠ: 461,
    ᐃΔⲆΔΔᐃᐃ: 462,
    ᐃⵠᐃΔⲆΔΔ: 463,
    ΔᐃᐃⵠⲆⲆⲆ: 464,
    ᐃᐃᐃᐃᐃΔΔ: 465,
    ⲆᐃᐃⲆΔⵠⲆ: 466,
    ⲆᐃⲆⵠᐃⲆΔ: 467,
    ⲆⲆⵠΔⵠΔΔ: 468,
    ⲆᐃᐃΔⵠᐃΔ: 469,
    ⵠᐃⲆⵠⲆΔᐃ: 470,
    ΔΔΔᐃⲆⵠⵠ: 471,
    ΔⵠⵠΔⲆⵠⵠ: 472,
    ΔΔᐃΔᐃΔΔ: 473,
    ⵠⵠⲆⵠⵠⵠⲆ: 474,
    ΔᐃΔⲆᐃⵠⲆ: 475,
    ⲆⲆⵠⵠⲆᐃᐃ: 476,
    ΔⵠΔΔᐃⲆⲆ: 477,
    ΔⲆⲆⵠⲆΔⲆ: 478,
    ⵠⵠᐃⵠΔᐃΔ: 479,
    ΔΔΔⵠᐃⵠⲆ: 480,
    ⲆⵠᐃⲆⵠⵠᐃ: 481,
    ᐃᐃᐃᐃᐃⲆⲆ: 482,
    ⲆΔⲆⵠⵠΔᐃ: 483,
    ⲆᐃⲆⵠⲆᐃΔ: 484,
    ⲆᐃΔᐃⲆⲆᐃ: 485,
    ΔᐃΔΔᐃⲆΔ: 486,
    ᐃⵠΔⵠⵠⲆⲆ: 487,
    ΔᐃⲆⵠⲆⵠᐃ: 488,
    ΔⲆΔᐃᐃᐃᐃ: 489,
    ⵠⵠⲆⲆⵠᐃᐃ: 490,
    ⵠᐃΔⲆΔᐃᐃ: 491,
    ⵠΔⵠⲆⵠΔΔ: 492,
    ⵠΔⲆᐃⲆⲆⲆ: 493,
    ⵠᐃⵠᐃΔⵠⲆ: 494,
    ᐃᐃᐃᐃᐃⵠΔ: 495,
    ⲆΔⲆⲆΔⵠΔ: 496,
    ΔᐃⵠΔⲆᐃΔ: 497,
    ⲆᐃⲆΔⵠΔⲆ: 498,
    ⵠⲆⲆⵠⵠΔΔ: 499,
    ⵠᐃᐃᐃΔⲆᐃ: 500,
    ⲆⲆⵠⲆⲆᐃⲆ: 501,
    ᐃΔΔΔΔᐃⵠ: 502,
    ⵠⲆᐃⵠⵠⵠᐃ: 503,
    ΔᐃᐃᐃⲆᐃⵠ: 504,
    ⵠᐃΔⲆᐃⲆⲆ: 505,
    ⲆΔᐃⲆΔⲆᐃ: 506,
    ᐃᐃᐃᐃᐃΔΔ: 507,
    ⲆⵠΔⲆⲆⵠᐃ: 508,
    ⲆΔⲆⲆᐃΔΔ: 509,
    ⵠⵠⵠΔⲆⲆⵠ: 510,
    ΔⵠΔΔᐃⲆᐃ: 511,
    ΔⲆᐃⲆΔᐃᐃ: 512,
    ⵠΔᐃⲆᐃᐃⵠ: 513,
    ⵠᐃΔᐃΔᐃΔ: 514,
    ⲆⲆΔᐃⲆⵠᐃ: 515,
    ⲆⲆΔⲆᐃΔᐃ: 516,
    Ⲇᐃⵠⵠⵠᐃⵠ: 517,
    ⲆⲆⵠΔΔⲆᐃ: 518,
    ΔᐃΔΔⲆΔⵠ: 519,
    ᐃΔⲆᐃⵠⲆⵠ: 520,
    ΔⵠΔⲆⵠⲆⵠ: 521,
    ⵠⲆᐃΔⲆⵠΔ: 522,
    ⲆᐃΔΔⵠᐃΔ: 523,
    ᐃⵠΔⲆᐃⵠⵠ: 524,
    ⲆΔⵠⲆΔⵠⵠ: 525,
    ⲆᐃⲆᐃᐃᐃᐃ: 526,
    ⲆᐃⵠⲆⲆⵠⵠ: 527,
    ΔᐃⵠΔΔⵠⲆ: 528,
    ΔΔⵠᐃΔΔⵠ: 529,
    ⲆⵠᐃⵠⵠΔᐃ: 530,
    ΔᐃΔΔᐃᐃΔ: 531,
    ⵠⲆᐃᐃⲆⵠᐃ: 532,
    ᐃⵠⲆⵠⵠⲆΔ: 533,
    ᐃᐃΔⵠⵠⵠⵠ: 534,
    ᐃᐃᐃⲆᐃΔΔ: 535,
    ᐃⵠᐃᐃⲆᐃΔ: 536,
    ᐃⲆⵠⲆΔᐃΔ: 537,
    ⲆΔⵠⵠΔᐃⲆ: 538,
    ⵠᐃᐃᐃᐃⲆΔᐃⵠ: 539,
    ⵠⲆΔΔⵠᐃⲆ: 540,
    ᐃⲆⵠⵠⵠΔΔ: 541,
    ΔⵠⲆᐃᐃⲆⵠ: 542,
    ⲆⲆᐃΔΔⲆᐃ: 543,
    ⵠΔᐃⲆⲆⵠΔᐃᐃ: 544,
    POINTS: 545,
    ᐃᐃⵠⵠⲆⵠⲆ: 546,
    ΔⲆᐃⲆΔⲆⵠ: 547,
    ΔᐃΔⵠΔΔΔ: 548,
    ⵠΔᐃΔⵠᐃᐃ: 549,
    ΔΔⵠΔΔᐃΔ: 550,
    ᐃᐃᐃΔⲆⵠΔ: 551,
    ΔⲆᐃⵠᐃⲆⲆ: 552,
    ⵠᐃⲆⵠᐃⲆⲆ: 553,
    ΔⲆⲆⲆⵠΔᐃ: 554,
    ΔⲆᐃⵠΔⵠⵠ: 555,
    ᐃᐃΔⲆΔⲆⵠ: 556,
    ᐃⵠΔⲆᐃᐃΔ: 557,
    ᐃⲆⵠΔΔᐃⲆ: 558,
    ᐃⵠᐃᐃⵠᐃᐃ: 559,
    ⲆⵠΔᐃᐃⵠⲆ: 560,
    ΔᐃⲆⵠΔΔᐃ: 561,
    ⵠΔⵠⲆᐃᐃⵠ: 562,
    ⲆΔᐃᐃⵠⵠᐃ: 563,
    ⲆⵠᐃᐃⵠᐃΔ: 564,
    ᐃᐃⲆΔΔⵠⲆ: 565,
    ΔⵠⵠᐃᐃⲆⵠ: 566,
    ⲆΔⲆᐃⵠᐃΔ: 567,
    ⲆᐃⲆⲆⲆΔᐃ: 568,
    ΔⲆⵠΔⲆᐃᐃ: 569,
    ᐃⲆΔⵠⵠΔⵠ: 570,
    ᐃᐃⲆⲆΔᐃΔ: 571,
    ⵠⲆΔⵠⵠⲆⲆ: 572,
    ⵠᐃᐃⵠΔⵠⵠ: 573,
    ⲆΔΔⵠᐃΔᐃ: 574,
    ᐃᐃᐃΔᐃΔΔ: 575,
    ⲆΔᐃᐃᐃⲆⵠ: 576,
    ΔΔᐃⵠᐃⵠⲆ: 577,
    ⲆⲆΔⲆⲆⵠⲆ: 578,
    ⵠⵠⵠⵠⲆⵠΔ: 579,
    ⲆᐃⲆΔⵠⵠᐃ: 580,
    ΔⵠⲆⵠΔⲆΔ: 581,
    ⵠΔⲆⵠⵠᐃⵠ: 582,
    ⵠⲆⵠⲆⵠⲆᐃ: 583,
    ⵠᐃΔᐃⵠΔⵠ: 584,
    ᐃᐃᐃᐃⵠⵠΔ: 585,
    ΔⵠᐃⵠᐃΔᐃ: 586,
    ⲆⲆΔⲆⲆΔⲆ: 587,
    ᐃᐃⲆⵠⲆⲆⵠ: 588,
    ⲆⵠΔⵠᐃΔΔ: 589,
    ⵠⲆᐃⲆΔΔΔ: 590,
    ⵠᐃⵠΔᐃᐃΔ: 591,
    ⲆⲆΔΔΔᐃⲆ: 592,
    ⵠᐃⲆⲆⵠⲆⵠⲆᐃ: 593,
    ⵠΔⲆⲆⲆⵠⲆ: 594,
    ⵠΔⲆΔᐃΔⲆⲆᐃ: 595,
    ᐃⲆᐃᐃᐃᐃⲆ: 596,
    ᐃΔⲆⲆⲆᐃⵠⵠⲆ: 597,
    ⲆⵠⵠⵠᐃⵠⲆΔΔ: 598,
    ΔⵠΔⵠⲆᐃᐃⲆⲆ: 599,
    ⵠⲆᐃⵠᐃⵠⲆⵠΔ: 600,
    ᐃΔⵠᐃΔⲆᐃᐃⲆ: 601,
    ΔΔⲆᐃΔⲆΔ: 602,
    ΔΔᐃᐃⵠ: 603,
    ⲆᐃⵠⵠⲆᐃᐃ: 604,
    ⵠⲆⲆⲆᐃⵠΔ: 605,
    ⲆⲆⲆΔᐃⵠⲆ: 606,
    ⲆⵠⵠⲆⵠΔⵠᐃΔ: 607,
    ᐃᐃⵠᐃΔⵠⲆ: 608,
    ⲆⵠⲆⲆΔΔⲆ: 609,
    ΔᐃⵠΔⵠΔᐃ: 610,
    ᐃⵠΔΔΔⲆⵠ: 611,
    ⵠⵠΔⵠΔΔᐃ: 612,
    ⵠᐃΔᐃⲆΔⲆ: 613,
    ᐃⵠᐃΔⵠⵠⲆ: 614,
    ⲆⲆΔⵠΔⲆᐃ: 615,
    ᐃⲆⲆᐃᐃⲆΔ: 616,
    ΔᐃΔᐃⵠᐃΔ: 617,
    ⲆⲆⲆⵠᐃᐃΔ: 618,
    ⵠᐃⲆᐃᐃ: 619,
    ᐃᐃΔⵠᐃ: 620,
    ᐃᐃⲆⲆΔ: 621,
    ⲆΔΔᐃΔᐃᐃΔΔ: 622,
    ⵠⵠⵠᐃᐃⲆᐃ: 623,
    ⵠⲆⲆΔΔⵠΔ: 624,
    ᐃⲆⵠⲆⵠᐃⲆ: 625,
    ⲆᐃᐃΔΔⲆⵠ: 626,
    ᐃⵠⵠΔΔⵠⲆ: 627,
    ⲆΔⲆᐃⲆⲆⵠ: 628,
    ⲆⵠⲆⲆΔΔⵠ: 629,
    ΔΔΔⲆⲆⲆᐃ: 630,
    ᐃΔⵠΔⵠᐃⲆ: 631,
    ⵠⵠΔᐃⵠᐃΔ: 632,
    ᐃⲆⵠⵠΔⲆΔ: 633,
    ᐃⵠⵠᐃΔᐃᐃ: 634,
    ⲆᐃⲆⵠΔⵠᐃ: 635,
    ᐃⵠⲆⲆⲆⲆⲆ: 636,
    ⲆⲆΔΔᐃ: 637,
    ⵠⲆΔⵠⲆⲆⲆ: 638,
    ⵠᐃΔⲆⵠΔⵠ: 639,
    ᐃΔᐃⵠⵠᐃΔ: 640,
    ⵠⲆⲆⵠᐃⵠⲆ: 641,
    ᐃⵠΔΔᐃΔⲆ: 642,
    ΔⵠⲆΔⲆᐃᐃ: 643,
    ΔΔΔⲆⲆⲆⲆ: 644,
    ΔᐃⵠⲆᐃⲆᐃ: 645,
    ΔⵠⵠⵠⲆⲆⵠ: 646,
    ⲆΔΔⲆⵠⵠΔ: 647,
    ⵠᐃᐃⲆⵠΔⵠ: 648,
    ⵠᐃᐃⵠⵠⲆᐃ: 649,
    ᐃⲆⵠᐃᐃΔⵠ: 650,
    ⲆΔᐃΔⵠⲆᐃ: 651,
    ᐃΔⵠᐃⲆΔᐃ: 652,
    ⲆᐃⵠⵠΔⵠⵠ: 653,
    ⵠⲆⲆᐃⲆⲆⲆ: 654,
    ⵠⵠⵠᐃΔⵠⵠ: 655,
    ⲆⲆⵠⲆⲆⲆⲆ: 656,
    ΔᐃᐃⲆΔⵠᐃ: 657,
    ⲆᐃΔΔⲆΔⲆ: 658,
    ⵠⲆᐃΔΔⵠⲆ: 659,
    ⵠⲆΔⵠᐃⲆⲆ: 660,
    ⲆⲆᐃⲆⵠᐃⵠ: 661,
    ⲆᐃᐃⲆᐃⲆⲆ: 662,
    ⵠⵠΔᐃᐃⵠᐃ: 663,
    ⵠⵠⲆᐃᐃⲆⵠ: 664,
    ⵠᐃⵠⵠⲆΔᐃ: 665,
    ⵠⲆⵠΔᐃⲆⵠ: 666,
    ⲆΔⵠΔⵠⵠΔ: 667,
    ᐃᐃⲆΔⵠⲆⲆ: 668,
    ΔⲆᐃⵠⲆᐃΔ: 669,
    ⲆΔᐃᐃⲆᐃⲆ: 670,
    ᐃⲆⵠⵠΔᐃᐃ: 671,
    ᐃⵠΔⲆΔⵠⵠ: 672,
    ΔⵠᐃΔᐃ: 673,
    ΔⲆᐃⲆⲆⲆΔ: 674,
    ΔΔᐃⵠⵠⲆᐃ: 675,
    ᐃⵠᐃΔΔ: 676,
    ᐃᐃᐃΔⵠⵠⲆⲆᐃ: 677,
    ⲆΔⵠΔΔᐃΔ: 678,
    ⲆⲆⲆⵠⵠ: 679,
    ᐃᐃᐃΔᐃⲆⵠ: 680,
    ⲆⵠᐃⵠᐃΔΔ: 681,
    ᐃⵠⲆΔⵠⲆⲆ: 682,
    ⵠⲆⵠᐃΔᐃᐃ: 683,
    ⲆΔⲆᐃⵠⵠⲆ: 684,
    ⵠᐃⲆⲆΔⵠⲆ: 685,
    ⵠΔⲆⲆⵠᐃⵠ: 686,
    ᐃⵠᐃΔᐃᐃΔ: 687,
    ⵠᐃᐃⲆⲆᐃⲆ: 688,
    ᐃⲆⲆΔⲆΔᐃ: 689,
    ᐃΔᐃⵠᐃᐃⲆ: 690,
    ⲆⵠΔⵠΔ: 691,
    ⲆⵠΔⵠᐃ: 692,
    ᐃⲆⲆⵠᐃ: 693,
    ᐃΔⲆⲆⵠ: 694,
    ⲆⲆΔⲆⵠ: 695,
    ᐃΔⲆⲆⵠᐃⵠ: 696,
    ᐃⵠΔΔΔⲆᐃ: 697,
    ΔΔⵠᐃΔⵠⲆ: 698,
    ⵠⵠⲆᐃᐃΔᐃ: 699,
    ⵠⵠᐃᐃᐃⲆⵠ: 700,
    ⵠⲆΔᐃΔⵠᐃ: 701,
    ⵠΔⲆΔᐃᐃⵠ: 702,
    ⵠⲆⲆΔΔⵠⵠ: 703,
    ΔⵠⲆⲆⲆᐃⵠ: 704,
    ᐃᐃⵠΔΔⵠᐃ: 705,
    ΔᐃᐃΔΔΔᐃ: 706,
    ΔⵠⲆᐃⲆΔᐃ: 707,
    ⲆⲆᐃΔᐃⵠᐃ: 708,
    ᐃᐃΔⲆΔΔΔ: 709,
    ΔⲆΔΔⲆⲆᐃ: 710,
    ⲆΔᐃⵠᐃᐃⲆ: 711,
    ΔΔΔΔⵠⵠΔ: 712,
    ΔᐃⲆⲆⲆΔⲆ: 713,
    ᐃⵠΔⵠⲆⲆⲆ: 714,
    ΔⵠⵠΔⲆⲆΔ: 715,
    ⲆΔᐃᐃᐃⵠᐃ: 716,
    ⵠⲆᐃⵠⲆⲆᐃ: 717,
    ΔⲆΔⵠⲆⲆⵠ: 718,
    ⲆⵠⲆΔᐃⵠΔ: 719,
    ΔΔᐃⵠΔⵠⲆ: 720,
    ΔⵠᐃΔⲆΔⵠⵠⲆ: 721,
    ⵠᐃΔⵠⲆΔΔ: 722,
    ΔᐃⵠΔⵠᐃⲆ: 723,
    ΔΔⲆⲆΔΔΔ: 724,
    ⵠᐃⲆⲆᐃⲆⵠ: 725,
    ⲆⲆⲆⵠⵠᐃⲆ: 726,
    ᐃᐃᐃΔⲆ: 727,
    ⲆⵠΔΔΔ: 728,
    ΔⵠⲆⵠⵠᐃⲆ: 729,
    ⲆⵠΔⵠᐃΔⵠ: 730,
    ᐃⵠⲆᐃΔᐃᐃ: 731,
    ⵠⲆᐃⵠΔⵠᐃ: 732,
    ⵠᐃⲆᐃⲆΔⵠ: 733,
    ⲆΔΔⲆⵠΔᐃ: 734,
    ⲆᐃᐃᐃⲆᐃΔ: 735,
    ΔᐃᐃᐃⵠᐃΔ: 736,
    ⵠⵠΔⵠᐃᐃⲆ: 737,
    ΔⵠⵠⲆΔⲆᐃ: 738,
    ᐃⲆΔΔⵠΔⵠ: 739,
    ᐃᐃⲆᐃᐃᐃⵠ: 740,
    ⵠΔⲆΔΔᐃΔ: 741,
    ΔⵠΔᐃⲆΔᐃ: 742,
    ⵠᐃᐃᐃⵠᐃᐃ: 743,
    ᐃᐃⵠⲆΔⲆⵠ: 744,
    ⲆΔⵠⵠᐃΔΔ: 745,
    ΔⲆⲆⵠᐃⲆΔ: 746,
    ⲆⲆⲆⲆᐃⵠᐃ: 747,
    ⵠΔⲆᐃⲆΔⵠ: 748,
    ⲆⵠⵠⵠᐃⵠⲆ: 749,
    ⲆΔΔᐃⵠⵠⵠ: 750,
    ⵠⲆⵠᐃᐃⵠⲆ: 751,
    ⲆⲆᐃⵠΔᐃⲆ: 752,
    ⲆᐃᐃⵠᐃΔⵠ: 753,
    ΔᐃᐃⵠᐃΔⵠ: 754,
    ⲆⲆⲆᐃᐃᐃⵠ: 755,
    ᐃⵠᐃⲆΔⵠᐃ: 756,
    ⲆᐃΔⲆᐃⲆΔ: 757,
    ⵠⲆΔᐃⲆΔΔ: 758,
    ⲆⵠᐃᐃᐃΔⲆ: 759,
    ΔⵠΔΔⲆⵠᐃ: 760,
    ΔⲆΔⵠΔΔⵠ: 761,
    ⵠᐃΔΔⲆΔⵠ: 762,
    ᐃΔⵠⲆΔᐃⲆ: 763,
    ΔⲆⵠⵠᐃᐃᐃ: 764,
    ⵠⲆᐃΔⵠᐃᐃ: 765,
    ᐃⵠⲆⵠΔⵠⵠ: 766,
    ⲆⵠⲆⲆⵠΔᐃ: 767,
    ΔⲆⵠΔⵠᐃΔ: 768,
    ΔΔΔⵠⵠΔⵠ: 769,
    ΔⲆⵠᐃᐃⵠⲆ: 770,
    ⲆⲆⵠΔⲆΔⵠ: 771,
    ΔⲆⲆⵠΔⲆⵠ: 772,
    ⲆⵠⵠⵠⲆⵠⲆ: 773,
    ⵠⲆᐃⵠΔⲆᐃ: 774,
    ΔⵠΔⲆᐃΔΔ: 775,
    ᐃⵠⵠⵠⲆⵠⵠ: 776,
    ⲆΔᐃᐃⲆᐃⵠ: 777,
    ⲆⵠⵠⲆΔᐃᐃ: 778,
    ᐃΔⲆΔΔⲆᐃ: 779,
    ⲆⵠᐃᐃᐃⲆᐃ: 780,
    ΔᐃⲆⵠΔᐃⲆ: 781,
    ⵠⲆᐃΔⲆᐃⲆ: 782,
    ⲆᐃⵠⲆⲆᐃⵠ: 783,
    ⲆΔᐃΔⵠⵠΔ: 784,
    ⵠᐃᐃⲆᐃⲆⲆ: 785,
    ⲆⵠⲆⲆⲆᐃᐃ: 786,
    ΔⵠΔᐃᐃᐃⵠ: 787,
    ᐃⵠΔⵠᐃⵠⵠ: 788,
    ΔⵠⲆᐃΔᐃΔ: 789,
    ⵠᐃΔΔᐃⵠΔ: 790,
    ᐃⲆⵠΔⲆΔᐃ: 791,
    ⲆⲆⲆⲆⲆⲆᐃ: 792,
    ⵠⵠⵠⵠⲆ: 793,
    ⲆΔⲆΔⲆᐃⵠ: 794,
    ᐃΔΔΔᐃΔⲆ: 795,
    ᐃΔᐃΔⲆ: 796,
    ᐃΔΔⲆΔΔⵠ: 797,
    ⲆⲆⵠΔⵠΔⵠ: 798,
    ⲆΔⵠᐃⵠⲆⵠ: 799,
    ΔᐃᐃⵠⵠΔⲆ: 800,
    ΔᐃⲆᐃⵠⲆⲆ: 801,
    ⲆⲆⲆᐃΔ: 802,
    ΔᐃⲆⲆΔⲆⵠ: 803,
    ⵠⲆⵠᐃΔᐃⵠⵠⵠ: 804,
    ᐃⲆⲆⵠⲆⵠⵠⲆⲆ: 805,
    ⲆⵠΔΔⲆΔⲆⲆⲆ: 806,
    ⵠΔⲆⲆΔⵠΔᐃᐃ: 807,
    ⵠⵠⲆΔΔⵠΔ: 808,
    ⵠΔⲆⵠΔΔⵠ: 809,
    ΔᐃⲆⵠⵠᐃᐃ: 810,
    ⲆᐃⵠⲆᐃᐃᐃ: 811,
    ᐃᐃΔⵠᐃΔⲆ: 812,
    ΔᐃⵠⵠᐃᐃΔ: 813,
    ⵠΔΔᐃⲆΔⵠ: 814,
    ⲆⲆᐃⲆⵠᐃΔ: 815,
    ⵠᐃⲆⵠⵠⲆᐃ: 816,
    ΔⲆⵠⵠΔⵠΔ: 817,
    ᐃᐃΔΔᐃ: 818,
    ΔⲆᐃⵠᐃ: 819,
    ⵠⲆᐃΔᐃⲆⵠ: 820,
    ⵠΔΔⵠᐃⲆᐃ: 821,
    ΔΔΔᐃᐃⵠᐃ: 822,
    ⲆⵠⲆΔⵠⵠⲆ: 823,
    ⲆⵠⵠᐃΔⲆᐃ: 824,
    ΔⲆⲆᐃΔΔⵠ: 825,
    ⵠⵠⲆΔΔᐃᐃ: 826,
    ⵠᐃⲆⲆⵠΔⵠ: 827,
    ⲆⵠⵠΔᐃᐃⵠ: 828,
    ⵠᐃⵠⲆⲆⲆⵠ: 829,
    ⵠΔⵠⵠⵠΔᐃ: 830,
    ΔᐃⲆᐃΔᐃΔ: 831,
    ΔⲆⵠⲆᐃᐃⵠⲆΔ: 832,
    ΔᐃⵠᐃⵠⲆΔΔⲆ: 833,
    ΔⵠΔⵠᐃΔⲆ: 834,
    ᐃΔΔⵠᐃΔΔ: 835,
    ᐃⲆᐃΔⵠᐃⵠ: 836,
    ⲆⵠᐃⲆⵠⵠⲆ: 837,
    ⵠⲆΔᐃⲆᐃⵠ: 838,
    ΔⵠⵠΔΔⵠⲆ: 839,
    ⲆΔᐃΔΔΔⵠ: 840,
    ⲆᐃᐃᐃᐃⲆᐃ: 841,
    ⲆⲆΔΔΔⵠΔ: 842,
    ᐃⲆΔⵠⲆⲆΔ: 843,
    ⵠⲆⵠⲆΔⲆΔ: 844,
    ᐃⵠᐃⲆΔᐃΔ: 845,
    ⲆⲆⵠⲆⵠΔΔ: 846,
    ᐃⵠᐃΔⵠᐃⲆ: 847,
    ᐃⲆᐃⵠⲆᐃⵠ: 848,
    ΔⲆⵠᐃⵠⵠΔ: 849,
    ⵠⵠⵠⵠⵠΔⲆ: 850,
    ⵠⵠᐃΔⲆᐃⲆ: 851,
    ᐃᐃⵠΔΔᐃⵠΔΔ: 852,
    ᐃⵠΔⵠⲆᐃⲆ: 853,
    ⵠⲆΔᐃⲆ: 854,
    ⵠⲆⵠⵠᐃⲆΔᐃᐃ: 855,
    ⵠΔᐃⵠΔⵠⲆᐃⵠ: 856,
    ⲆⵠᐃⲆᐃⲆⵠⲆⵠ: 857,
    ⵠⵠᐃⲆⲆⲆΔΔᐃ: 858,
    ⵠⲆΔᐃⲆᐃⲆ: 859,
    ΔⵠΔⵠᐃⵠᐃ: 860,
    ΔⵠⲆⵠΔᐃⲆ: 861,
    ⲆΔᐃΔⲆᐃᐃ: 862,
    ⵠⵠⵠᐃᐃᐃⲆ: 863,
    ⵠᐃⵠⲆᐃᐃⲆΔᐃ: 864,
    ⵠⵠΔⵠΔΔⵠ: 865,
    ⲆⲆΔⵠⵠⵠᐃ: 866,
    ⲆⲆΔⲆΔⲆΔ: 867,
    ᐃᐃⲆⵠᐃⲆᐃ: 868,
    ⲆⵠΔⲆᐃⵠⲆ: 869,
    ⵠⵠᐃⲆⲆⲆᐃ: 870,
    ⲆᐃⲆⲆᐃΔᐃ: 871,
    ⲆⵠᐃⲆⲆ: 872,
    ⲆΔᐃⲆΔᐃᐃⵠⵠ: 873,
    ⲆᐃΔⲆⵠⲆΔ: 874,
    ᐃΔⵠⵠⲆⲆⲆ: 875,
    ⲆΔⲆⵠᐃⵠᐃ: 876,
    ΔⵠᐃΔⵠⲆⲆ: 877,
    ΔⲆΔΔⵠᐃΔ: 878,
    ᐃⲆⲆΔᐃᐃⲆ: 879,
    ⲆⲆᐃⵠⵠⵠⵠ: 880,
    ⵠΔᐃΔᐃᐃⵠ: 881,
    ᐃⲆⲆⲆᐃᐃΔ: 882,
    ᐃⵠᐃΔⵠΔΔ: 883,
    ΔⵠᐃⵠⵠᐃΔ: 884,
    ⲆⵠΔΔⲆⵠⵠ: 885,
    ΔΔᐃΔⵠΔⵠ: 886,
    ⲆΔⲆⵠΔ: 887,
    ᐃⵠΔⵠⵠΔⵠ: 888,
    ⲆᐃⲆΔᐃⵠⲆ: 889,
    ⲆᐃⵠᐃⲆᐃΔ: 890,
    ⵠΔⲆΔᐃⵠᐃ: 891,
    ᐃⵠⲆᐃⵠⲆᐃ: 892,
    ΔⲆⵠⵠΔΔⲆ: 893,
    ΔⵠᐃⵠᐃⲆᐃ: 894,
    ⵠⵠᐃΔΔΔᐃ: 895,
    ⵠΔΔΔΔᐃᐃ: 896,
    ⲆⵠⲆⲆⲆⵠΔ: 897,
    ⲆΔΔⲆⲆᐃⲆ: 898,
    ⲆᐃΔᐃᐃⵠΔ: 899,
    ᐃⵠΔᐃΔΔⵠ: 900,
    ᐃΔⵠⵠⵠΔⵠ: 901,
    ⵠΔⲆᐃΔᐃⲆ: 902,
    ⲆᐃⵠΔΔᐃΔ: 903,
    ΔᐃⵠΔⲆⲆⵠ: 904,
    ᐃⲆᐃΔⵠⲆᐃ: 905,
    ⵠᐃⲆⲆΔⲆⵠ: 906,
    ΔΔⵠΔⵠΔΔ: 907,
    ⵠⵠⲆᐃⲆᐃⲆ: 908,
    ⵠᐃᐃⵠᐃΔΔ: 909,
    ⵠᐃⵠᐃᐃΔⵠ: 910,
    ΔΔΔΔⲆᐃΔ: 911,
    ⵠΔⲆⵠⲆⲆΔ: 912,
    ΔΔⵠⲆᐃⵠᐃ: 913,
    ⲆΔΔⲆⲆⲆⲆΔΔ: 914,
    ΔⲆᐃⲆΔΔΔⵠᐃ: 915,
    ⲆΔⵠⵠⲆⵠᐃᐃⵠ: 916,
    ⵠⵠⲆⵠⵠⲆᐃᐃⲆ: 917,
    ⲆΔᐃᐃⵠᐃⲆ: 918,
    ΔⲆⲆΔΔⵠΔ: 919,
    ⵠᐃᐃᐃⵠ: 920,
    ᐃⲆⲆⵠⲆⵠⲆ: 921,
    ΔᐃⲆᐃᐃⵠⵠ: 922,
    ⲆⵠⵠΔΔⵠᐃ: 923,
    ⵠᐃⲆᐃᐃⲆⲆ: 924,
    ⵠΔⲆⵠᐃΔΔ: 925,
    ⲆΔⵠⲆⲆᐃΔ: 926,
    ᐃᐃᐃⲆᐃΔⲆ: 927,
    ⲆᐃΔᐃᐃΔΔ: 928,
    ᐃⲆⵠⲆᐃΔᐃ: 929,
    ᐃⲆᐃΔᐃᐃⵠ: 930,
    ΔⲆⲆⲆΔᐃᐃ: 931,
    Δⵠⵠⵠᐃᐃᐃ: 932,
    ⵠⵠⵠⵠΔΔᐃ: 933,
    ⲆⲆⵠΔᐃᐃΔ: 934,
    ⵠⵠⲆᐃΔⵠⲆ: 935,
    ⲆΔΔⵠⲆⵠᐃ: 936,
    ⲆⵠⲆᐃᐃⲆᐃ: 937,
    ⲆΔⵠⲆⲆΔⲆ: 938,
    ⵠᐃⵠⲆᐃᐃΔ: 939,
    ⲆⲆΔⵠⵠⲆᐃᐃΔ: 940,
    ⵠⵠⲆⲆⲆ: 941,
    ⵠΔΔΔᐃⵠⲆ: 942,
    ⵠⲆΔⵠΔΔⵠ: 943,
    ⵠⲆⵠΔᐃⲆᐃ: 944,
    ⲆⵠⵠⵠⵠⲆᐃ: 945,
    ᐃΔⵠⲆᐃΔᐃ: 946,
    ⲆᐃⵠⵠⵠᐃⲆ: 947,
    ΔᐃΔΔΔⵠΔ: 948,
    ΔⲆΔᐃⲆᐃΔ: 949,
    ᐃⵠⲆⲆᐃⲆΔ: 950,
    ᐃⲆⲆⵠⲆΔᐃ: 951,
    ᐃᐃⲆⵠⲆⲆΔ: 952,
    ᐃⵠⲆⲆᐃⵠⲆ: 953,
    ΔΔᐃⵠⵠⲆⵠ: 954,
    ᐃᐃΔⵠⵠᐃᐃ: 955,
    ⵠⲆΔⲆΔᐃⵠ: 956,
    ⵠᐃⲆᐃᐃⵠⵠ: 957,
    ᐃΔᐃᐃᐃⲆⲆ: 958,
    ᐃΔΔᐃⵠⲆΔ: 959,
    ᐃΔⲆΔΔΔΔ: 960,
    ⲆⵠⲆⵠΔᐃᐃ: 961,
    ⲆⲆⲆΔΔⵠᐃ: 962,
    ΔᐃⵠⵠᐃΔᐃ: 963,
    ᐃᐃⲆΔⲆⵠⵠᐃⲆ: 964,
    ⲆⲆᐃΔᐃᐃⲆ: 965,
    ΔⲆᐃΔⵠΔΔ: 966,
    ⲆⵠᐃᐃΔΔΔ: 967,
    ᐃⲆⲆⵠⵠⲆΔ: 968,
    ⲆᐃΔⵠⵠΔΔ: 969,
    ⵠΔΔⵠⵠⵠΔ: 970,
    ΔΔΔΔⲆᐃᐃ: 971,
    ΔⲆⲆΔⵠᐃⵠ: 972,
    ΔⵠⲆⵠⲆⵠᐃ: 973,
    ΔᐃⵠⲆΔᐃⲆ: 974,
    ⲆⲆⵠᐃⵠⲆⲆ: 975,
    ΔΔⵠΔⵠⲆⲆ: 976,
    ⵠᐃᐃⲆⵠⲆΔ: 977,
    ΔⲆΔᐃΔΔⵠ: 978,
    ᐃΔΔΔΔⵠᐃ: 979,
    ⵠⲆᐃⵠⲆᐃΔ: 980,
    ΔⲆΔⵠᐃᐃΔ: 981,
    ΔⵠⵠⵠⲆⵠΔ: 982,
    ⵠⵠᐃᐃᐃⵠᐃ: 983,
    ⲆΔⵠⲆᐃΔⲆ: 984,
    ⵠⲆⲆΔᐃⵠⵠ: 985,
    ᐃΔⵠᐃᐃⲆⲆ: 986,
    ⵠᐃⵠᐃⲆⲆᐃ: 987,
    ⵠᐃΔⵠᐃᐃⲆ: 988,
    ΔⲆⲆᐃᐃ: 989,
    ⵠΔΔⲆᐃΔᐃ: 990,
    ⲆⲆⲆⵠΔⲆⵠ: 991,
    ΔΔⲆᐃᐃⵠΔ: 992,
    ⵠⲆᐃᐃΔⵠᐃ: 993,
    ⲆⵠΔᐃⵠⲆⲆ: 994,
    ⲆᐃΔᐃⵠΔⵠ: 995,
    ΔⲆΔⲆⲆᐃⵠ: 996,
    ΔΔᐃⲆᐃᐃⵠ: 997,
    ⲆⲆᐃⲆⲆⵠⲆ: 998,
    ᐃΔᐃΔΔⵠᐃ: 999,
    ᐃⵠⵠᐃᐃⲆⵠ: 1000,
    ᐃΔⲆⵠΔⵠⲆ: 1001,
    ⵠⵠΔⲆⲆᐃΔ: 1002,
    ⵠⲆᐃⲆΔᐃⵠ: 1003,
    ⲆᐃᐃΔⵠⲆΔ: 1004,
    ᐃⵠⲆⵠΔΔᐃ: 1005,
    ⲆᐃᐃⵠΔᐃᐃ: 1006,
    ⲆᐃⲆᐃᐃᐃⵠ: 1007,
    ⵠⵠΔᐃᐃΔⵠ: 1008,
    ΔΔᐃⲆΔⵠᐃ: 1009,
    ⲆⲆⲆⲆΔⲆⵠ: 1010,
    ⲆΔᐃᐃᐃᐃΔ: 1011,
    ⲆⵠⲆⲆΔⲆⲆ: 1012,
    ᐃΔⲆᐃⵠᐃᐃ: 1013,
    ΔᐃⵠΔⵠⲆⵠ: 1014,
    ᐃᐃΔΔⲆΔⲆ: 1015,
    ᐃΔᐃⵠⵠⵠⲆ: 1016,
    ⲆⲆⵠΔΔⵠⵠ: 1017,
    ⲆⵠᐃᐃΔΔᐃ: 1018,
    ⵠⲆⵠⵠΔⵠⵠ: 1019,
    ⲆΔᐃᐃⲆⵠᐃ: 1020,
    ⲆⲆⵠᐃⵠᐃΔ: 1021,
    ⵠⵠᐃⵠᐃᐃⵠ: 1022,
    ⲆⵠᐃⲆⵠᐃⲆ: 1023,
    ⵠΔΔⵠ: 1024,
    ⵠᐃᐃΔ: 1025,
    ᐃⲆⲆⲆⵠⲆⵠ: 1026,
    ⲆⵠᐃⵠⲆᐃⲆ: 1027,
    ᐃᐃΔⵠⲆΔᐃ: 1028,
    ΔᐃᐃᐃⲆΔⵠ: 1029,
    ᐃⵠᐃⵠⵠΔⵠ: 1030,
    ⵠⵠᐃⵠΔⲆᐃ: 1031,
    ⲆΔᐃⵠⲆᐃΔ: 1032,
    ⵠᐃᐃΔⲆ: 1033,
    ⵠΔⲆⲆΔⲆⵠ: 1034,
    ΔᐃΔⲆᐃ: 1035,
    ᐃᐃⲆⲆᐃᐃᐃ: 1036,
    ΔⲆᐃⲆⲆ: 1037,
    ᐃⲆⲆᐃᐃᐃⵠ: 1038,
    ΔΔⲆΔⵠ: 1039,
    ΔⵠᐃΔΔΔᐃ: 1040,
    ᐃⲆΔⲆΔ: 1041,
    ΔΔⵠΔΔ: 1042,
    ΔᐃΔⵠᐃᐃⵠ: 1043,
    ᐃΔᐃΔΔᐃᐃ: 1044,
    ⲆⵠᐃⲆᐃⲆᐃ: 1045,
    ΔⲆⲆⵠᐃⵠΔ: 1046,
    ⲆⲆⵠᐃᐃⲆΔ: 1047,
    ⵠⲆΔⵠΔⲆⵠ: 1048,
    ΔᐃᐃⲆⲆΔⲆ: 1049,
    ⵠΔⵠΔΔⲆⵠ: 1050,
    ΔΔΔⵠⵠⲆΔ: 1051,
    ᐃⲆⲆᐃΔ: 1052,
    ΔᐃΔᐃⲆᐃⵠ: 1053,
    ⵠᐃⵠΔᐃ: 1054,
    ⲆⲆⲆⲆᐃⲆᐃ: 1055,
    ΔΔΔΔⵠⲆⵠ: 1056,
    ΔΔⵠᐃᐃΔⲆ: 1057,
    ᐃᐃⲆⵠΔΔΔ: 1058,
    ⲆⲆᐃⵠⵠᐃᐃ: 1059,
    ΔᐃⲆⲆΔⲆᐃ: 1060,
    ⵠᐃⵠⲆⲆⵠᐃⵠᐃ: 1061,
    ⲆⲆΔⵠⲆⵠΔ: 1062,
    ᐃⲆⵠⵠⲆⵠⵠ: 1063,
    ⲆⵠᐃⵠᐃⲆΔⵠⲆ: 1064,
    ⵠⵠⵠⲆᐃᐃᐃ: 1065,
    ⲆⲆΔⵠᐃⲆΔ: 1066,
    ⵠΔᐃⲆᐃΔⲆ: 1067,
    ⲆΔⵠⲆⵠⵠⵠ: 1068,
    ⲆⲆⵠⲆΔ: 1069,
    ΔⵠⲆΔᐃᐃᐃ: 1070,
    ᐃⲆⲆⲆΔⲆΔ: 1071,
    ⵠΔΔΔΔⵠⵠ: 1072,
    ⵠΔᐃᐃⵠᐃᐃ: 1073,
    ⵠⲆⲆⲆⵠᐃⵠ: 1074,
    ᐃΔⵠⵠΔⲆⲆ: 1075,
    ΔΔⲆᐃⵠΔⲆ: 1076,
    ΔΔᐃⵠⲆⲆᐃ: 1077,
    ⲆΔⲆᐃΔΔΔ: 1078,
    ⵠⲆΔΔΔᐃⵠ: 1079,
    ΔⲆᐃⵠΔⵠⲆ: 1080,
    ⲆΔⲆⵠᐃᐃΔ: 1081,
    ᐃⵠᐃᐃᐃᐃⵠ: 1082,
    ⲆⵠᐃⲆᐃΔⲆ: 1083,
    ᐃᐃΔΔⲆ: 1084,
    ⵠᐃⵠⲆΔΔᐃ: 1085,
    ⲆⵠⲆᐃⲆⲆΔ: 1086,
    ΔⵠⵠΔᐃⵠⵠ: 1087,
    ⵠΔⲆᐃⵠⲆⵠ: 1088,
    ⵠⵠΔᐃⵠⵠⲆ: 1089,
    ⵠⵠⵠΔᐃⵠΔ: 1090,
    ΔᐃⲆⲆⲆᐃⵠ: 1091,
    ΔΔⲆⲆⵠⲆΔ: 1092,
    ⲆⵠΔⵠⲆΔⲆ: 1093,
    ⲆᐃⲆᐃΔⵠᐃ: 1094,
    ⵠΔⵠⵠⲆΔᐃ: 1095,
    ⲆᐃᐃⲆᐃΔᐃ: 1096,
    ΔᐃⵠᐃᐃΔⵠ: 1097,
    ΔᐃⵠⲆΔᐃᐃ: 1098,
    ᐃⵠᐃΔⵠ: 1099,
    ⵠⲆⵠⵠᐃᐃᐃ: 1100,
    ⵠⲆᐃⵠⲆᐃⵠ: 1101,
    ⲆᐃⵠⲆΔⵠΔ: 1102,
    ⵠᐃⵠᐃΔΔⵠ: 1103,
    ⵠΔᐃⵠⲆᐃⵠ: 1104,
    ᐃⵠᐃⲆᐃⵠΔ: 1105,
    ⲆᐃⵠᐃΔⲆᐃ: 1106,
    ΔΔⵠⵠⵠΔⲆ: 1107,
    ⲆΔᐃⵠⲆΔᐃ: 1108,
    ΔⵠΔⵠⲆᐃᐃ: 1109,
    ΔⲆⲆᐃⲆⵠⵠ: 1110,
    ᐃⲆᐃⲆᐃⵠⲆ: 1111,
    ᐃⵠΔᐃⲆΔⲆ: 1112,
    ⵠⲆᐃΔⵠᐃΔ: 1113,
    ΔⲆᐃⲆΔΔᐃ: 1114,
    ᐃᐃᐃΔⲆᐃΔ: 1115,
    ⵠᐃΔᐃΔⵠⵠ: 1116,
    ⲆⲆⲆᐃᐃⵠᐃ: 1117,
    ᐃΔⵠΔᐃⲆᐃ: 1118,
    ⲆΔΔⲆⲆΔᐃ: 1119,
    ⲆΔⵠⵠⵠ: 1120,
    ⵠᐃⵠⵠⵠᐃᐃ: 1121,
    ΔⵠⲆⲆᐃⵠΔ: 1122,
    ΔⵠⲆΔΔⲆᐃ: 1123,
    ᐃΔΔⵠᐃⵠᐃ: 1124,
    ⵠⲆⵠⵠΔΔΔ: 1125,
    ᐃᐃΔΔⵠᐃΔ: 1126,
    ⲆⵠᐃΔⵠᐃⲆ: 1127,
    ⵠᐃⲆⵠᐃⵠⵠ: 1128,
    ⲆᐃⵠΔΔⵠⲆ: 1129,
    ⵠΔⲆᐃⵠΔⲆ: 1130,
    ⵠⵠⲆⵠΔⲆΔ: 1131,
    ⵠⵠⲆⵠⵠᐃΔ: 1132,
    ⵠⲆᐃᐃⲆⵠⲆ: 1133,
    ᐃᐃⲆᐃᐃⵠⵠ: 1134,
    ᐃⵠⵠΔᐃΔᐃ: 1135,
    ⵠⲆⵠⲆᐃⵠⵠ: 1136,
    ⵠⲆᐃⲆᐃΔΔ: 1137,
    ᐃᐃᐃⵠⲆΔⲆ: 1138,
    ᐃᐃᐃᐃΔⵠᐃ: 1139,
    ᐃⵠⵠᐃᐃⲆΔ: 1140,
    ⵠⵠⲆΔᐃⵠΔ: 1141,
    ᐃⵠΔⵠⵠΔᐃ: 1142,
    ⵠⵠΔᐃⲆΔᐃ: 1143,
    ΔⵠΔΔⵠᐃⵠ: 1144,
    ⵠⵠΔᐃΔΔᐃ: 1145,
    ⲆᐃᐃⵠⲆⲆⲆ: 1146,
    ⲆᐃᐃⲆⲆΔΔ: 1147,
    ΔΔⲆⵠⵠⲆⵠ: 1148,
    ΔⵠⵠⵠᐃⲆⲆ: ["#E9CF96", "#144940"],
    ⵠΔᐃΔⵠΔᐃ: 1149,
    ⲆⵠᐃᐃᐃΔⵠ: 1150,
    ⲆᐃⵠΔⵠΔᐃ: 1151,
    ⲆΔⲆᐃⲆΔⲆ: 1152,
    ⵠⲆΔΔⵠΔⲆ: 1153,
    ᐃⲆⲆⵠⲆⲆᐃ: 1154,
    ΔᐃΔᐃⵠⲆᐃ: 1155,
    ⵠⲆΔᐃΔ: 1156,
    ⵠΔᐃⲆⵠⵠΔ: 1157,
    ⲆΔⵠᐃΔⲆⲆ: 1158,
    ⲆᐃⵠᐃᐃΔⵠ: 1159,
    ⵠⵠⲆΔⲆᐃᐃ: 1160,
    ⵠⵠⵠΔΔⵠⲆ: 1161,
    ᐃⵠΔⲆⲆΔⲆ: 1162,
    ᐃⵠⲆΔᐃΔΔ: 1163,
    ᐃΔΔⲆᐃΔⵠ: 1164,
    ᐃᐃⵠⲆⵠⲆⵠ: 1165,
    ᐃⲆⵠᐃΔⵠᐃ: 1166,
    ⵠᐃⵠⲆⵠΔⵠ: 1167,
    ⵠⲆⲆΔⲆᐃⵠ: 1168,
    ᐃΔΔΔᐃΔΔ: 1169,
    ᐃⲆᐃΔᐃᐃΔ: 1170,
    ΔⲆⵠⵠΔΔⵠ: 1171,
    ⲆΔⲆⲆΔᐃᐃ: 1172,
    ⲆΔᐃⵠΔΔⲆ: 1173,
    ΔᐃⲆΔΔⵠΔ: 1174,
    ⲆΔᐃᐃᐃⵠⵠ: 1175,
    ᐃⲆΔⵠΔⲆΔ: 1176,
    ⵠΔΔᐃⲆΔⲆ: 1177,
    ΔⵠᐃΔⵠⵠᐃ: 1178,
    ⵠᐃΔⵠᐃⵠᐃ: 1179,
    ⵠⵠΔΔΔΔΔ: 1180,
    ⲆᐃᐃⲆΔΔⵠ: 1181,
    ᐃᐃⲆⲆΔⵠΔ: 1182,
    ⲆⲆⲆⵠᐃⲆΔ: 1183,
    ⵠᐃΔΔΔⵠⵠ: 1184,
    ⵠᐃΔᐃᐃⵠⲆ: 1185,
    ᐃΔᐃᐃΔᐃᐃ: 1186,
    ⵠΔⲆᐃᐃΔΔ: 1187,
    ⵠΔⵠⲆΔⵠⲆ: 1188,
    ᐃᐃᐃᐃⵠᐃⵠ: 1189,
    ΔΔᐃᐃⲆⵠⲆ: 1190,
    ⲆΔⲆⲆⵠΔⵠ: 1191,
    ᐃᐃⵠⲆⵠⵠⵠ: 1192,
    ΔΔᐃᐃⵠⲆⲆ: 1193,
    ΔⵠᐃΔᐃΔⵠ: 1194,
    ΔΔᐃⲆⲆᐃΔ: 1195,
    ᐃᐃⲆᐃⲆⵠΔ: 1196,
    ᐃΔⵠⲆᐃⲆⵠ: 1197,
    ⵠᐃⲆⵠⲆᐃⵠ: 1198,
    ⲆᐃⲆΔⲆᐃΔ: 1199,
    ᐃⲆⵠΔⵠⵠΔ: 1200,
    ᐃΔⲆᐃⲆΔⲆ: 1201,
    ΔⲆᐃⲆᐃⲆᐃ: 1202,
    ⵠΔⵠᐃⵠᐃΔ: 1203,
    ᐃⲆⵠⵠΔⵠⵠ: 1204,
    ᐃⲆⲆⲆΔⲆⲆ: 1205,
    ᐃⵠⵠᐃⵠⵠΔ: 1206,
    ᐃᐃΔΔⵠⲆΔ: 1207,
    ᐃᐃⲆⲆᐃΔΔ: 1208,
    ᐃⲆⲆᐃᐃᐃΔ: 1209,
    ⵠᐃᐃᐃⵠⲆΔ: 1210,
    ΔⲆⲆⲆΔⲆᐃ: 1211,
    ⵠⵠⵠⲆⵠΔΔ: 1212,
    ΔᐃⲆΔⲆⲆᐃ: 1213,
    ⲆⵠⵠᐃⵠⲆᐃ: 1214,
    ᐃⵠⵠⵠᐃᐃⵠ: 1215,
    ΔᐃᐃΔᐃΔⵠ: 1216,
    ⲆⵠᐃᐃΔⲆΔ: 1217,
    Ⲇⵠᐃⵠⵠ: 1218,
    ⲆᐃΔⲆᐃⲆⵠ: 1219,
    ⲆⲆΔᐃⵠ: 1220,
    ᐃᐃⲆᐃᐃⲆⲆ: 1221,
    ⲆΔⵠᐃⵠⲆΔ: 1222,
    ΔΔⲆⵠⲆᐃᐃ: 1223,
    ᐃⲆΔᐃⲆᐃⵠ: 1224,
    ΔᐃΔᐃᐃΔⵠ: 1225,
    ᐃΔⲆⲆⵠⲆⵠ: 1226,
    ⲆᐃⵠᐃᐃΔᐃ: 1227,
    ⲆⵠⲆΔΔᐃⲆ: 1228,
    ⲆⲆΔⵠΔᐃΔ: 1229,
    ᐃⲆΔⵠⵠᐃⵠ: 1230,
    ⵠⵠᐃⲆⵠΔᐃ: 1231,
    ΔᐃⵠΔⲆΔⵠ: 1232,
    ᐃⲆᐃⵠⵠⲆⲆ: 1233,
    ᐃⵠᐃⲆⲆΔⵠ: 1234,
    ΔⵠⵠⲆᐃΔΔ: 1235,
    ⵠᐃΔᐃᐃᐃΔ: 1236,
    ⵠⲆΔΔΔⲆΔ: 1237,
    ⵠⲆⵠΔΔᐃΔ: 1238,
    ⵠᐃⲆⵠⵠΔᐃ: 1239,
    ⲆΔⵠᐃΔᐃΔ: 1240,
    ⵠⲆΔⵠⲆⲆΔ: 1241,
    ⵠΔⲆΔᐃΔⲆ: 1242,
    ⲆΔⲆⵠᐃⵠⵠ: 1243,
    ⵠΔᐃΔⵠᐃΔ: 1244,
    ⲆᐃⲆᐃⵠⵠⲆ: 1245,
    ᐃⲆⵠⲆᐃⵠᐃ: 1246,
    ΔᐃⵠΔⵠΔΔ: 1247,
    ᐃΔⵠⲆΔᐃᐃ: 1248,
    ΔⵠⲆⵠⲆⲆᐃ: 1249,
    ⲆΔⲆΔᐃΔΔ: 1250,
    ⵠⲆⲆⲆⵠΔΔ: 1251,
    ⲆᐃⵠⵠᐃⲆⲆ: 1252,
    ⵠⲆΔᐃΔⵠⵠ: 1253,
    ΔⵠᐃⵠΔᐃⲆ: 1254,
    ᐃⲆᐃΔⵠΔⲆ: 1255,
    ⲆᐃΔᐃⲆⵠⲆ: 1256,
    ⵠⵠᐃⲆᐃⲆⲆ: 1257,
    ⲆⲆⵠᐃⲆⵠⵠ: 1258,
    ⲆⵠΔᐃⵠᐃⵠ: 1259,
    ⲆⲆᐃⵠⲆΔΔ: 1260,
    ⵠΔᐃⵠΔⲆⵠ: 1261,
    ᐃΔⲆⵠᐃΔᐃ: 1262,
    ΔⲆᐃⲆⲆᐃⲆ: 1263,
    ᐃΔΔᐃᐃᐃᐃ: 1264,
    ΔᐃⲆᐃΔⵠΔ: 1265,
    ᐃⲆᐃΔᐃⲆⵠ: 1266,
    ᐃᐃⲆΔΔⲆΔ: 1267,
    Ⲇᐃⵠⵠᐃᐃⵠ: 1268,
    ⲆΔΔⵠⵠⵠᐃ: 1269,
    ΔⲆᐃᐃⲆᐃᐃ: 1270,
    ᐃΔΔⵠⵠⵠⲆ: 1271,
    ΔΔᐃᐃΔⲆΔ: 1272,
    ⲆᐃᐃᐃΔⵠᐃ: 1273
  };
  Mr = 0;
  const Or = 255;
  const Pr = _q;
  var Qr = {
    ᐃⲆⲆⲆⵠ: 0,
    ⵠΔᐃΔᐃ: 1,
    ⵠᐃᐃⲆⵠ: 2,
    ΔΔΔΔΔ: 3,
    ⲆⲆΔⲆᐃ: 4,
    ⵠᐃΔΔⲆ: 5,
    ΔᐃⲆΔᐃ: 6,
    ᐃΔⲆᐃⲆ: 7,
    ⲆⵠⵠⵠⲆ: 8,
    ⵠᐃΔᐃΔ: 9,
    ᐃⲆⵠᐃⵠ: 10,
    ΔΔᐃᐃΔ: 11,
    ᐃΔⵠᐃΔ: 12,
    ΔᐃⲆᐃⵠ: 13,
    ⲆΔⲆⲆⲆ: 14,
    ⲆᐃⵠⲆᐃ: 15,
    ᐃΔΔΔⵠ: 16,
    ⵠΔᐃᐃⲆ: 17,
    ⵠⵠᐃⵠⲆ: 18,
    ΔⵠⲆⵠΔ: 19,
    ⵠΔⵠⵠΔ: 20,
    ᐃᐃⵠᐃΔ: 21,
    ΔᐃⵠⲆⲆ: 22,
    ⵠⵠΔⵠⵠ: 23,
    ΔⵠΔΔⲆ: 24,
    Δⵠⵠᐃⵠ: 25,
    ᐃᐃᐃⲆⲆ: 26,
    ΔⲆⲆΔᐃ: 27,
    ⵠΔⲆⲆⲆ: 28,
    ᐃΔᐃⵠⲆ: 29,
    ⲆᐃΔⵠᐃ: 30,
    ΔⵠⲆΔⵠ: 31,
    ⵠΔⲆΔΔ: 32,
    ΔᐃⵠⲆΔ: 33,
    ⲆᐃᐃⲆᐃ: 34,
    ΔΔᐃᐃᐃ: 35,
    ⲆⵠΔΔᐃ: 36,
    ΔⲆᐃᐃᐃ: 37,
    ᐃᐃᐃⵠⵠ: 38,
    ᐃⵠⵠⵠᐃ: 39,
    ⲆΔⵠΔΔ: 40,
    ⵠⲆΔΔᐃ: 41,
    ᐃΔΔⵠⲆ: 42,
    ⲆⵠⲆΔⵠ: 43,
    ⲆⵠΔⲆΔ: 44,
    ⲆᐃⵠᐃⲆ: 45,
    ΔⵠⲆⲆΔ: 46,
    ᐃΔᐃⵠΔ: 47,
    ΔⲆⲆΔⲆ: 48,
    ⲆⵠⲆᐃᐃ: 49,
    ᐃⲆΔⲆᐃ: 50,
    ⲆᐃΔᐃΔ: 51,
    ᐃⵠΔᐃⵠ: 52,
    ᐃⵠⵠΔⲆ: 53,
    ᐃⲆΔΔΔ: 54,
    ⵠⵠⵠⵠⵠ: 55,
    ᐃⲆⵠᐃᐃ: 56,
    ⵠᐃⲆⲆᐃ: 57,
    ΔΔⲆΔΔ: 58,
    ᐃⲆΔᐃΔ: 59,
    ᐃⵠⵠⲆΔ: 60,
    ΔⵠᐃⲆⵠ: 61,
    Ⲇᐃⵠᐃᐃ: 62,
    ΔⵠⲆⲆⲆ: 63,
    ᐃᐃᐃΔⵠ: 64,
    ᐃⲆΔᐃᐃ: 65,
    ⵠⲆⲆᐃᐃ: 66,
    ⲆⵠⲆΔⲆ: 67,
    ᐃᐃⵠⵠⵠ: 68,
    ᐃⲆᐃΔᐃ: 69,
    ⵠΔⵠⲆⲆ: 70,
    Δᐃⵠⵠᐃ: 71,
    ⲆⵠΔᐃΔ: 72,
    ᐃⲆᐃⵠⵠ: 73,
    ᐃⲆᐃΔⲆ: 74,
    ⲆⵠⵠⲆᐃ: 75,
    ⵠⲆᐃΔΔ: 76,
    ⵠᐃⵠⲆⵠ: 77,
    ⲆⲆⵠⲆᐃ: 78,
    ΔᐃΔΔⲆ: 79,
    Δⵠᐃᐃⵠ: 80,
    ⲆⵠΔⲆⵠ: 81,
    ΔⵠᐃΔΔ: 82,
    ⵠⵠⲆⲆⵠ: 83,
    ΔⵠⲆᐃⲆ: 84,
    ᐃΔⲆⲆΔ: 85,
    ⲆⵠⵠⲆΔ: 86,
    ΔΔΔⵠΔ: 87,
    ⲆⲆᐃΔⵠ: 88,
    Ⲇᐃⵠᐃⵠ: 89,
    ᐃΔⵠⵠⵠ: 90,
    ⵠⲆᐃⵠⵠ: 91,
    ᐃⵠᐃⵠⲆ: 92,
    ⵠⵠⲆᐃⵠ: 93,
    ΔᐃᐃⵠΔ: 94,
    ᐃᐃΔᐃΔ: 95,
    ⵠᐃⵠⵠⲆ: 96,
    ΔⲆⵠΔⵠ: 97,
    ΔⵠⵠⲆΔ: 98,
    ΔⵠᐃΔⲆ: 99,
    ⲆΔΔΔ: 100,
    ΔΔΔᐃⲆ: 101,
    ⲆⲆᐃⵠⲆ: 102,
    ⵠΔΔⲆΔ: 103,
    ⲆΔᐃᐃⵠ: 104,
    ⲆⲆᐃⵠΔ: 105,
    ⲆⲆⲆⲆⵠ: 106,
    ⲆᐃⲆΔΔ: 107,
    ΔⵠⵠⲆᐃ: 108,
    ᐃᐃⵠΔΔ: 109,
    ΔⲆΔᐃⲆ: 110,
    ΔⵠⵠᐃⲆ: 111,
    ᐃⵠⵠᐃⵠⲆΔ: 112,
    ⵠⲆⲆⵠⵠⵠⲆ: 113,
    ΔⲆⲆⲆΔ: 114,
    ⵠⵠᐃᐃΔ: 115,
    ⵠᐃΔΔᐃ: 116,
    ᐃⵠⵠΔⵠ: 117,
    ΔⲆⲆᐃⵠ: 118,
    ⵠᐃᐃΔΔ: 119,
    ΔᐃⵠᐃΔ: 120,
    ΔΔᐃᐃⲆ: 121,
    ᐃⲆⲆⲆᐃ: 122,
    ΔᐃⲆΔΔ: 123,
    ᐃⲆⲆⲆⲆ: 124,
    ⵠⲆᐃΔⵠ: 125,
    ⵠᐃⵠᐃⵠ: 126,
    ⵠΔᐃⲆΔ: 127,
    ⲆⵠΔᐃᐃ: 128,
    ΔⵠⵠΔᐃ: 129,
    ⵠⵠⵠΔΔ: 130,
    ⵠⲆΔⵠΔ: 131,
    ᐃᐃⲆⲆⲆ: 132,
    ⵠⵠⲆⵠⲆ: 133,
    ᐃΔⵠΔⲆ: 134,
    ⲆⲆⵠᐃⵠ: 135,
    ᐃⲆᐃΔΔ: 136,
    ΔᐃⲆⵠᐃ: 137,
    ⲆⲆⵠᐃΔ: 138,
    ⲆᐃⵠⲆⵠ: 139,
    ΔⵠᐃⵠΔ: 140,
    ⲆᐃᐃΔΔ: 141,
    ᐃⲆⲆᐃⵠ: 142,
    ᐃΔΔⲆⵠ: 143,
    ⵠⲆⵠΔΔ: 144,
    ⵠΔᐃⵠΔ: 145,
    ⲆΔᐃⵠΔ: 146,
    ⲆᐃΔⵠⲆ: 147,
    ⲆⵠⵠΔⲆ: 148,
    ⵠⲆᐃᐃΔ: 149,
    Ⲇⵠⵠⵠᐃ: 150,
    ᐃⲆⲆⵠⲆ: 151,
    ⵠΔⵠⲆⵠ: 152,
    ᐃᐃᐃᐃⲆ: 153,
    ᐃⲆᐃⲆⲆ: 154,
    ᐃⲆⵠⲆᐃ: 155,
    ⲆⵠⲆⵠⲆ: 156,
    ⲆΔⵠΔⲆ: 157,
    ⵠᐃᐃⲆΔ: 158,
    ⵠΔⲆⵠⵠ: 159,
    ⵠᐃⲆⲆΔ: 160,
    ΔⵠⲆⵠⲆ: 161,
    ⵠⵠⵠᐃᐃ: 162,
    ᐃⲆⲆⵠⵠ: 163,
    ᐃᐃⲆΔᐃ: 164,
    ⲆΔⲆᐃᐃ: 165,
    ᐃⲆᐃⲆᐃ: 166,
    ΔⵠΔⵠⲆ: 167,
    ᐃⲆΔⲆⲆ: 168,
    ⲆᐃⲆⲆⲆ: 169,
    ⵠΔᐃⲆⵠ: 170,
    ⵠⵠⵠⲆⲆ: 171,
    ⵠⵠⲆΔᐃ: 172,
    ΔΔⲆⵠⲆ: 173,
    ⲆᐃΔⲆⵠ: 174,
    ⲆΔⵠᐃΔ: 175,
    ΔⲆᐃⲆᐃ: 176
  };
  Mr = 0;
  var Rr = {
    ΔΔᐃᐃᐃ: 0,
    ⵠᐃΔΔⲆ: 1,
    ᐃΔⲆⲆᐃ: 2,
    ΔᐃⲆΔᐃ: 3,
    ᐃΔⲆᐃⲆ: 4,
    ⲆⵠΔΔᐃ: 5,
    ΔⲆᐃᐃᐃ: 6,
    ΔⵠΔᐃⲆ: 7,
    ⲆⲆΔⲆᐃ: 8,
    Δᐃᐃⵠᐃ: 9,
    ⵠⵠⲆⲆⵠ: 10,
    ΔⵠⲆᐃⲆ: 11,
    Δⵠⵠᐃⵠ: 12,
    ᐃᐃᐃⲆⲆ: 13,
    ΔⲆⲆΔᐃ: 14,
    ⵠΔⲆⲆⲆ: 15,
    ΔⵠⲆΔⵠ: 16,
    ⵠΔⲆΔΔ: 17,
    ΔᐃⵠⲆΔ: 18,
    ᐃⵠⵠⵠᐃ: 19,
    ᐃᐃΔᐃΔ: 20,
    ⵠᐃⵠⵠⲆ: 21,
    ΔⲆⵠΔⵠ: 22,
    Δⵠᐃᐃⵠ: 23,
    ⲆⵠΔⲆⵠ: 24,
    ⲆⲆᐃΔⵠ: 25,
    Ⲇᐃⵠᐃⵠ: 26,
    ᐃΔⵠⵠⵠ: 27,
    ΔⵠΔΔⲆ: 28,
    ⲆΔΔΔ: 29,
    ᐃᐃᐃⵠⵠ: 30,
    ⲆⵠⵠⵠⲆ: 31,
    ⵠᐃΔᐃΔ: 32,
    ᐃΔᐃⵠⲆ: 33,
    ⲆᐃΔⵠᐃ: 34,
    ᐃⲆⵠᐃⵠ: 35,
    ΔΔᐃᐃΔ: 36,
    ᐃΔⵠᐃΔ: 37,
    ΔᐃⲆᐃⵠ: 38,
    ⲆΔⲆⲆⲆ: 39,
    ᐃΔⲆⲆΔ: 40,
    ⲆⵠΔⵠⵠ: 41,
    ⲆᐃΔΔᐃ: 42,
    ⵠⲆᐃⵠⵠ: 43,
    ᐃⵠᐃⵠⲆ: 44,
    ⲆᐃⵠⲆᐃ: 45,
    ᐃΔΔΔⵠ: 46,
    ΔᐃᐃⵠΔ: 47,
    ⵠⵠⲆᐃⵠ: 48,
    ᐃᐃⵠᐃΔ: 49,
    ⵠΔᐃᐃⲆ: 50,
    ⵠⵠᐃⵠⲆ: 51,
    ΔⵠⲆⵠΔ: 52,
    ΔᐃⵠⲆⲆ: 53,
    ⵠⵠΔⵠⵠ: 54,
    ᐃⲆⲆⲆᐃ: 55,
    ΔᐃⲆΔΔ: 56,
    ⲆᐃᐃⲆᐃ: 57,
    ΔΔΔⵠΔ: 58,
    ⵠᐃⵠᐃⵠ: 59,
    ⵠΔᐃⲆΔ: 60,
    ⲆⵠΔᐃᐃ: 61,
    ΔⵠⵠΔᐃ: 62,
    ⵠⵠⵠΔΔ: 63,
    ⵠⲆΔⵠΔ: 64,
    ⵠⵠⲆⵠⲆ: 65,
    ⲆⲆⵠᐃⵠ: 66,
    ΔᐃⲆⵠᐃ: 67,
    ⲆᐃⵠⲆⵠ: 68,
    ⲆᐃᐃΔΔ: 69,
    ᐃΔΔⲆⵠ: 70,
    ⵠΔᐃⵠΔ: 71,
    ⲆΔᐃⵠΔ: 72,
    ⲆᐃΔⵠⲆ: 73,
    ⲆⵠⵠΔⲆ: 74,
    ⵠⲆᐃᐃΔ: 75,
    Ⲇⵠⵠⵠᐃ: 76,
    ᐃⲆⲆⵠⲆ: 77,
    ⵠΔⵠⲆⵠ: 78,
    ᐃᐃᐃᐃⲆ: 79,
    ΔⵠⵠⲆΔ: 80,
    ΔⵠᐃΔⲆ: 81,
    ΔⵠᐃΔΔ: 82,
    ᐃⲆᐃⲆⲆ: 83,
    ᐃⲆⵠⲆᐃ: 84,
    ⲆⵠⲆⵠⲆ: 85,
    ⲆΔⵠΔⲆ: 86,
    ᐃⵠⵠᐃⲆ: 87,
    ⲆⵠⵠⲆΔ: 88,
    ⲆΔⲆᐃᐃ: 89,
    ΔΔⲆⵠⲆ: 90,
    ΔⲆᐃⲆᐃ: 91,
    ⲆᐃΔⲆⵠ: 92,
    ⲆΔⵠᐃΔ: 93,
    ΔⵠΔⵠⲆ: 94,
    ᐃⲆΔⲆⲆ: 95,
    ⲆᐃⲆⲆⲆ: 96,
    ⵠΔᐃⲆⵠ: 97,
    ⵠⵠⵠⲆⲆ: 98,
    ⵠⵠⲆΔᐃ: 99,
    ΔΔᐃⵠΔ: 100,
    ᐃᐃⲆⲆⲆ: 101,
    ᐃΔⵠΔⲆ: 102,
    ᐃⲆᐃΔΔ: 103,
    ⲆⲆⵠᐃΔ: 104,
    ΔⵠᐃⵠΔ: 105,
    ᐃⲆⲆᐃⵠ: 106,
    ⵠⲆⵠΔΔ: 107,
    ⲆΔΔⵠ: 108,
    ΔⲆⵠⵠ: 109,
    ᐃⵠⲆᐃⲆ: 110,
    ⵠⵠᐃⲆ: 111,
    ⵠⵠᐃΔ: 112,
    ᐃⲆⲆⲆⵠ: 113,
    ΔΔΔΔΔ: 114,
    ⲆΔⵠΔΔ: 115,
    ᐃᐃⲆᐃᐃ: 116,
    ⲆⵠⲆᐃᐃ: 117,
    ⵠΔᐃΔᐃ: 118,
    ⵠᐃᐃⲆⵠ: 119,
    ΔΔΔᐃⲆ: 120,
    ᐃⵠⵠⲆ: 121,
    ᐃⲆΔᐃΔ: 122,
    Δᐃⵠⵠᐃ: 123,
    ᐃⲆΔᐃᐃ: 124,
    ⲆⲆⲆⲆⵠ: 125,
    ⵠⵠᐃᐃⵠ: 126,
    ΔⵠⵠᐃⲆ: 127,
    ΔⲆΔᐃⲆ: 128,
    ⲆΔⵠⲆⵠ: 129,
    ⵠΔⵠⵠΔ: 130,
    ᐃΔᐃᐃⲆ: 131,
    ⵠⲆΔΔᐃ: 132,
    ᐃⵠΔᐃⵠ: 133,
    ⵠᐃᐃᐃⲆ: 134,
    ΔⲆⲆⲆΔ: 135,
    ᐃⵠⵠΔⲆ: 136,
    ⵠⵠΔⲆⵠ: 137,
    ᐃⲆΔⲆᐃ: 138,
    ⵠΔΔΔᐃ: 139,
    ⲆᐃᐃᐃΔ: 140,
    ᐃᐃⵠΔΔ: 141,
    ᐃΔᐃⲆⵠ: 142,
    ⲆᐃΔᐃΔ: 143,
    ᐃⲆⲆⲆⲆ: 144,
    ⵠⲆᐃΔⵠ: 145,
    ᐃΔⵠΔᐃ: 146,
    ⲆⲆᐃⵠⲆ: 147,
    ⵠΔΔⲆΔ: 148,
    ΔΔⲆⵠᐃ: 149,
    ᐃΔᐃΔⵠ: 150,
    ⵠⵠᐃᐃΔ: 151,
    ⵠᐃΔΔᐃ: 152,
    ᐃⵠⵠΔⵠ: 153,
    ΔⲆⲆᐃⵠ: 154,
    ⵠᐃᐃΔΔ: 155,
    ΔᐃⵠᐃΔ: 156,
    ΔΔᐃᐃⲆ: 157,
    ⲆΔᐃᐃⵠ: 158,
    ⲆⲆᐃⵠΔ: 159,
    ⲆⵠⲆΔⲆ: 160,
    ΔᐃⵠΔᐃ: 161,
    ⵠⵠⵠⵠⵠ: 162,
    ᐃⲆⵠᐃᐃ: 163,
    ⵠᐃⲆⲆᐃ: 164,
    ΔΔⲆΔΔ: 165,
    ΔⵠᐃⲆⵠ: 166,
    ΔᐃΔΔⲆ: 167,
    ᐃᐃⵠⵠⵠ: 168,
    ᐃⲆᐃΔᐃ: 169,
    ⵠΔⵠⲆⲆ: 170,
    Ⲇᐃⵠᐃᐃ: 171,
    ΔⵠⲆⲆⲆ: 172,
    ᐃᐃᐃΔⵠ: 173,
    Δⵠᐃⵠⵠ: 174,
    ᐃΔⵠⲆᐃ: 175,
    ΔⲆⲆⵠΔ: 176,
    ⲆΔΔⲆⵠ: 177,
    ᐃᐃⲆΔⲆ: 178,
    ⲆⵠⲆᐃⲆ: 179,
    ⵠᐃᐃⲆΔ: 180,
    ⵠΔⲆⵠⵠ: 181,
    ⵠᐃⲆⲆΔ: 182,
    ΔⵠⲆⵠⲆ: 183,
    ⲆⵠⲆΔΔ: 184,
    ⲆⲆᐃⵠᐃ: 185,
    ΔᐃⲆⲆⲆ: 186,
    ᐃⵠΔᐃΔ: 187,
    ᐃΔΔⵠⲆ: 188,
    ⵠΔᐃΔⲆ: 189,
    ⲆᐃⲆΔΔ: 190,
    ⲆⵠⲆΔⵠ: 191,
    ⵠΔⵠⵠⵠ: 192,
    ⲆⵠΔⲆΔ: 193,
    ΔⲆⲆΔΔ: 194,
    ᐃⲆΔΔΔ: 195,
    ⵠΔᐃᐃΔ: 196,
    ΔⵠΔΔᐃ: 197,
    ⵠⵠⵠᐃᐃ: 198,
    ΔᐃⲆⵠⲆ: 199,
    ⵠΔΔⲆᐃ: 200,
    ΔΔᐃⲆⵠ: 201,
    ⵠΔᐃⵠ: 202,
    ΔΔΔⲆᐃ: 203,
    ⲆᐃⵠᐃⲆ: 204,
    ⵠⲆⵠⵠⲆ: 205,
    ΔⵠⲆⲆΔ: 206,
    ᐃᐃⵠⵠⲆ: 207,
    ᐃΔᐃⵠΔ: 208,
    ᐃᐃⵠⵠΔ: 209,
    ΔⲆⲆΔⲆ: 210,
    ᐃΔⲆΔⲆ: 211,
    ᐃⲆᐃⵠⵠ: 212,
    ᐃⲆᐃΔⲆ: 213,
    ⲆⵠⵠⲆᐃ: 214,
    ⵠⲆᐃΔΔ: 215,
    ⵠᐃⵠⲆⵠ: 216,
    ᐃⵠⵠⲆΔ: 217,
    ⵠⲆⲆᐃᐃ: 218,
    ⲆⵠΔᐃΔ: 219,
    ⲆⲆⵠⲆᐃ: 220,
    ΔⵠⵠⲆᐃ: 221,
    ᐃⵠΔΔΔ: 222,
    ᐃⲆⲆⵠⵠ: 223,
    ᐃᐃⲆΔᐃ: 224,
    ΔⵠᐃⲆᐃ: 225,
    ⵠᐃⵠΔᐃ: 226,
    ⲆⲆⵠⲆΔ: 227,
    ᐃᐃΔΔⲆ: 228,
    ᐃⵠᐃΔⵠ: 229,
    ᐃⲆᐃⲆᐃ: 230,
    ΔⵠⲆΔᐃ: 231,
    ᐃⲆΔᐃⵠ: 232,
    ΔⲆⲆᐃᐃ: 233,
    ⲆΔΔⲆⲆ: 234,
    Δⵠᐃⵠᐃᐃⵠ: 235,
    ΔΔⵠΔᐃᐃⵠ: 236,
    ⵠⵠⵠᐃⲆ: 237,
    ⵠⲆⵠⲆᐃ: 238,
    ⲆⲆΔᐃⵠ: 239,
    ᐃⵠⲆⲆᐃ: 240
  };
  var Sr = {
    ᐃⵠΔⲆⵠ: 1,
    ⲆᐃᐃⵠⲆ: 5,
    ⵠⵠⵠⲆᐃ: 2,
    ΔᐃΔⵠⲆ: 4,
    ᐃᐃΔⲆᐃ: 3,
    ΔᐃⲆⲆᐃ: 0
  };
  const Tr = 4;
  var Ur = sa.Math.acos;
  sa.Math.acos = sa.Math.asin;
  sa.Math.asin = Ur;
  var Vr = sa.Math.cos;
  sa.Math.cos = sa.Math.sin;
  sa.Math.sin = Vr;
  var Wr = [];
  const Xr = 0;
  const Yr = 13;
  Wr[109] = {
    name: "Wood",
    ⵠⵠ: 316,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const Zr = 0;
  Wr[108] = {
    name: "Stone",
    ⵠⵠ: 315,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[111] = {
    name: "Gold",
    ⵠⵠ: 297,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[112] = {
    name: "Diamond",
    ⵠⵠ: 298,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const $r = 7;
  Wr[121] = {
    name: "Amethyst",
    ⵠⵠ: 418,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[2] = {
    name: "Rabbit fur",
    ⵠⵠ: 368,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const _r = 255;
  Wr[174] = {
    name: "Wolf fur",
    ⵠⵠ: 393,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[237] = {
    name: "Boar fur",
    ⵠⵠ: 1162,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[100] = {
    name: "Firefly",
    ⵠⵠ: 1164,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[101] = {
    name: "Wood arrow",
    ⵠⵠ: 1166,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const as = 14;
  Wr[102] = {
    name: "Stone arrow",
    ⵠⵠ: 1169,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[103] = {
    name: "Gold arrow",
    ⵠⵠ: 1172,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const bs = 19;
  const cs = 5;
  const ds = 11;
  Wr[104] = {
    name: "Diamond arrow",
    ⵠⵠ: 1175,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const es = 6;
  const fs = 15;
  const gs = ca;
  Wr[105] = {
    name: "Amethyst arrow",
    ⵠⵠ: 1178,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[106] = {
    name: "Reidite arrow",
    ⵠⵠ: 1181,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const hs = 18;
  Wr[107] = {
    name: "Dragon arrow",
    ⵠⵠ: 1184,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const is = 17;
  const js = Aq;
  const ks = 18;
  const ls = 100;
  const ms = 14;
  Wr[146] = {
    name: "Winter fur",
    ⵠⵠ: 505,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const ns = Ka;
  const os = 6;
  const ps = 3;
  const qs = C;
  const rs = 2;
  Wr[240] = {
    name: "Fur mammoth",
    ⵠⵠ: 1233,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[161] = {
    name: "Web",
    ⵠⵠ: 305,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[116] = {
    name: "Meat",
    ⵠⵠ: 300,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[137] = {
    name: "Fish",
    ⵠⵠ: 662,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[129] = {
    name: "Kraken skin",
    ⵠⵠ: 624,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[139] = {
    name: "Piranha scales",
    ⵠⵠ: 674,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const ts = 9;
  Wr[142] = {
    name: "Ice",
    ⵠⵠ: 142,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[126] = {
    name: "Sand",
    ⵠⵠ: 609,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const us = 2;
  Wr[140] = {
    name: "Dirt",
    ⵠⵠ: 140,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[110] = {
    name: "Berrie",
    ⵠⵠ: 277,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const vs = 2;
  const eh = 8;
  Wr[131] = {
    name: "Flour",
    ⵠⵠ: 629,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[134] = {
    name: "Flour",
    ⵠⵠ: 639,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const ih = 13;
  const th = Ka;
  Wr[178] = {
    name: "Special fur peasant",
    ⵠⵠ: 178,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[179] = {
    name: "Special fur hood",
    ⵠⵠ: 179,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const nh = 20;
  Wr[189] = {
    name: "Pumpkin",
    ⵠⵠ: 814,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[192] = {
    name: "Garlic",
    ⵠⵠ: 840,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[194] = {
    name: "Thornbush",
    ⵠⵠ: 850,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const oh = 9;
  const ah = 7;
  const rh = 4;
  Wr[205] = {
    name: "Carrot",
    ⵠⵠ: 955,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[207] = {
    name: "Tomato",
    ⵠⵠ: 965,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const sh = 11;
  const hh = 10;
  const gh = 0;
  const lh = 17;
  function uh(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function bh(a) {
    return sa.String.fromCharCode(a);
  }
  Wr[209] = {
    name: "Watermelon",
    ⵠⵠ: 972,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const dh = 19;
  const mh = 255;
  Wr[211] = {
    name: "Aloe Vera",
    ⵠⵠ: 987,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[222] = {
    name: "Penguin Feather",
    ⵠⵠ: 1035,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[231] = {
    name: "Hawk Feather",
    ⵠⵠ: 1037,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[232] = {
    name: "Vulture Feather",
    ⵠⵠ: 1039,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[233] = {
    name: "Cactus",
    ⵠⵠ: 1154,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  function ch(a) {
    return sa.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ⲆᐃⲆΔ: 5315043,
      ⲆⲆⵠΔΔΔⲆ: 12424426,
      ΔᐃⵠⲆ: 7502400,
      ⲆⲆⵠⵠ: 8262152
    };
  })();
  const ph = 4;
  Wr[236] = {
    name: "Cactus",
    ⵠⵠ: 1160,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[235] = {
    name: "Pitchfork Part",
    ⵠⵠ: 1158,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const Ch = 14;
  const Th = 12;
  Wr[238] = {
    name: "Emerald Machine",
    ⵠⵠ: 1187,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const fh = 16;
  Wr[234] = {
    name: "Emerald",
    ⵠⵠ: 1156,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[41] = {
    name: "Christmas Hat",
    ⵠⵠ: 880,
    Δⵠᐃⵠ: 0
  };
  Wr[42] = {
    name: "Elf Hat",
    ⵠⵠ: 882,
    Δⵠᐃⵠ: 0
  };
  const zh = 15;
  const yh = 1;
  Wr[201] = {
    name: "Garland",
    ⵠⵠ: 870,
    Δⵠᐃⵠ: 0,
    ⵠⵠⲆΔ: 0
  };
  const wh = Xa;
  const Ph = Ao;
  Wr[200] = {
    name: "Candy",
    ⵠⵠ: 200,
    Δⵠᐃⵠ: 0
  };
  Wr[199] = {
    name: "Sugar Cane",
    ⵠⵠ: 865,
    Δⵠᐃⵠ: 0
  };
  Wr[9] = {
    name: "Pirate Sword",
    ⵠⵠ: 860,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[196] = {
    name: "Crab Stick",
    ⵠⵠ: 196,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[202] = {
    name: "Reidite",
    ⵠⵠ: 938,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[203] = {
    name: "Flame",
    ⵠⵠ: 936,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[113] = {
    name: "Campfire",
    ⵠⵠ: 302,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[198] = {
    name: "Bed",
    ⵠⵠ: 909,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[114] = {
    name: "Workbench",
    ⵠⵠ: 262,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Ah = C;
  Wr[0] = {
    name: "Stone sword",
    ⵠⵠ: 254,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const kh = 7;
  Wr[1] = {
    name: "Stone pick",
    ⵠⵠ: 256,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[115] = {
    name: "Berries bush",
    ⵠⵠ: 284,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[3] = {
    name: "Gold pick",
    ⵠⵠ: 295,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const xh = 17;
  Wr[4] = {
    name: "Diamond pick",
    ⵠⵠ: 257,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[57] = {
    name: "Wood sword",
    ⵠⵠ: 830,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Jh = 100;
  Wr[5] = {
    name: "Gold sword",
    ⵠⵠ: 290,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[6] = {
    name: "Diamond sword",
    ⵠⵠ: 291,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[8] = {
    name: "Wood pick",
    ⵠⵠ: 314,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Mh = 9;
  const Bh = 19;
  const Dh = 18;
  Wr[162] = {
    name: "Wood wall",
    ⵠⵠ: 318,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Ih = 2;
  Wr[160] = {
    name: "Wood spike",
    ⵠⵠ: 320,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[117] = {
    name: "Cooked meat",
    ⵠⵠ: 325,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const Eh = Ao;
  const Sh = 5;
  Wr[118] = {
    name: "Big campfire",
    ⵠⵠ: 327,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[195] = {
    name: "Bandage",
    ⵠⵠ: 304,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[163] = {
    name: "Stone wall",
    ⵠⵠ: 263,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Qh = 18;
  const _h = 255;
  const Fh = 3;
  Wr[164] = {
    name: "Gold wall",
    ⵠⵠ: 265,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Rh = Ph;
  Wr[165] = {
    name: "Diamond wall",
    ⵠⵠ: 332,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const jh = 15;
  Wr[166] = {
    name: "Wood door",
    ⵠⵠ: 268,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Lh = 11;
  Wr[167] = {
    name: "Chest",
    ⵠⵠ: 338,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Wh = 6;
  const Gh = 13;
  Wr[168] = {
    name: "Stone spike",
    ⵠⵠ: 360,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Nh = Ph;
  const qh = 9;
  Wr[169] = {
    name: "Gold spike",
    ⵠⵠ: 363,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[170] = {
    name: "Diamond spike",
    ⵠⵠ: 365,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Oh = 0;
  const Hh = 1;
  const Uh = 15;
  const Yh = dg;
  Wr[171] = {
    name: "Stone door",
    ⵠⵠ: 371,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[172] = {
    name: "Gold door",
    ⵠⵠ: 374,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[173] = {
    name: "Diamond door",
    ⵠⵠ: 377,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  ;
  const Kh = 4;
  const Xh = 8;
  Wr[10] = {
    name: "Chapka",
    ⵠⵠ: 370,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Zh = 255;
  Wr[11] = {
    name: "Big Chapka",
    ⵠⵠ: 380,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[12] = {
    name: "Wood spear",
    ⵠⵠ: 402,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const $h = 20;
  const eg = 16;
  Wr[13] = {
    name: "Stone spear",
    ⵠⵠ: 396,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[14] = {
    name: "Gold spear",
    ⵠⵠ: 399,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const ig = 13;
  const tg = 12;
  Wr[15] = {
    name: "Diamond spear",
    ⵠⵠ: 405,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[16] = {
    name: "Dragon spear",
    ⵠⵠ: 876,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[17] = {
    name: "Dragon spear",
    ⵠⵠ: 879,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[18] = {
    name: "Crab spear",
    ⵠⵠ: 900,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const ng = 14;
  const og = 17;
  Wr[197] = {
    name: "Crab loot",
    ⵠⵠ: 197,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const ag = 19;
  const rg = 256;
  Wr[119] = {
    name: "Furnace",
    ⵠⵠ: 409,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const sg = String.fromCharCode;
  const hg = sg(101);
  const gg = sg(118);
  const lg = sg(97);
  const ug = sg(108);
  const bg = 7;
  Wr[23] = {
    name: "Explorer hat",
    ⵠⵠ: 421,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[24] = {
    name: "Pirate hat",
    ⵠⵠ: 424,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[87] = {
    name: "Flower hat",
    ⵠⵠ: 1228,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const vg = 10;
  Wr[88] = {
    name: "Fur hat",
    ⵠⵠ: 1231,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[58] = {
    name: "Wood helmet",
    ⵠⵠ: 827,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const mg = Fn;
  Wr[25] = {
    name: "Stone helmet",
    ⵠⵠ: 430,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const cg = 18;
  Wr[26] = {
    name: "Gold helmet",
    ⵠⵠ: 433,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const pg = 2;
  const Cg = 3;
  const Tg = wh;
  Wr[27] = {
    name: "Diamond helmet",
    ⵠⵠ: 436,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const fg = 5;
  Wr[28] = {
    name: "Book",
    ⵠⵠ: 439,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const zg = 0;
  Wr[120] = {
    name: "Paper",
    ⵠⵠ: 442,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const yg = 17;
  const wg = 7;
  const Pg = 20;
  Wr[29] = {
    name: "Bag",
    ⵠⵠ: 367,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[30] = {
    name: "Amethyst sword",
    ⵠⵠ: 456,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[31] = {
    name: "Amethyst pick",
    ⵠⵠ: 460,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Ag = 5;
  const kg = 20;
  const xg = 100;
  Wr[33] = {
    name: "Amethyst spear",
    ⵠⵠ: 473,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[35] = {
    name: "Stone hammer",
    ⵠⵠ: 478,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[36] = {
    name: "Gold hammer",
    ⵠⵠ: 481,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[37] = {
    name: "Diamond hammer",
    ⵠⵠ: 484,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[38] = {
    name: "Amethyst hammer",
    ⵠⵠ: 487,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[39] = {
    name: "Reidite hammer",
    ⵠⵠ: 490,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Jg = jo;
  Wr[122] = {
    name: "Amethyst wall",
    ⵠⵠ: 493,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Mg = 9;
  const Bg = 256;
  const Dg = ye;
  Wr[123] = {
    name: "Amethyst spike",
    ⵠⵠ: 496,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Ig = Yh;
  const Eg = 17;
  Wr[124] = {
    name: "Amethyst door",
    ⵠⵠ: 498,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[40] = {
    name: "Cap & scarf",
    ⵠⵠ: 503,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Sg = 8;
  const Qg = 9;
  const _g = 17;
  const Fg = 7;
  const Rg = 6;
  Wr[147] = {
    name: "Blue cord",
    ⵠⵠ: 515,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[148] = {
    name: "Lock",
    ⵠⵠ: 519,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const jg = 8;
  Wr[151] = {
    name: "Resurrection",
    ⵠⵠ: 530,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[158] = {
    name: "Lockpick",
    ⵠⵠ: 533,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Lg = 12;
  Wr[159] = {
    name: "Totem",
    ⵠⵠ: 555,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[43] = {
    name: "Amethyst helmet",
    ⵠⵠ: 542,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Wg = 13;
  Wr[45] = {
    name: "Super hammer",
    ⵠⵠ: 551,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Gg = 6;
  const Ng = 100;
  Wr[125] = {
    name: "Bridge",
    ⵠⵠ: 604,
    ⵠⵠⲆΔ: 1,
    Δⵠᐃⵠ: 1
  };
  Wr[221] = {
    name: "Wood Tower",
    ⵠⵠ: 1235,
    ⵠⵠⲆΔ: 1,
    Δⵠᐃⵠ: 1
  };
  Wr[127] = {
    name: "Bottle full",
    ⵠⵠ: 715,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[128] = {
    name: "Bottle empty",
    ⵠⵠ: 611,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const qg = 14;
  Wr[46] = {
    name: "Stone shovel",
    ⵠⵠ: 618,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[130] = {
    name: "Watering can",
    ⵠⵠ: 627,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[132] = {
    name: "Wheat",
    ⵠⵠ: 632,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[133] = {
    name: "Cookie",
    ⵠⵠ: 635,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[135] = {
    name: "Windmill",
    ⵠⵠ: 643,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[47] = {
    name: "Super diving suit",
    ⵠⵠ: 647,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[48] = {
    name: "Diving mask",
    ⵠⵠ: 650,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Og = 7;
  const Hg = 11;
  Wr[49] = {
    name: "Watering can full",
    ⵠⵠ: 654,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const Ug = 8;
  Wr[136] = {
    name: "Cake",
    ⵠⵠ: 660,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const Yg = 17;
  const Kg = 20;
  const Vg = 16;
  const Xg = 19;
  const Zg = 15;
  Wr[138] = {
    name: "Foodfish cooked",
    ⵠⵠ: 666,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const $g = 14;
  Wr[141] = {
    name: "Plot",
    ⵠⵠ: 684,
    ⵠⵠⲆΔ: 1,
    Δⵠᐃⵠ: 1
  };
  const el = 0;
  const il = 4;
  Wr[143] = {
    name: "Bread",
    ⵠⵠ: 690,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[Rr.ᐃⵠⵠᐃⵠⲆΔ] = {
    name: "Bottle full (with ice)",
    ⵠⵠ: Nr.ΔΔⲆᐃᐃΔⵠΔⲆ,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[Rr.ⵠⲆⲆⵠⵠⵠⲆ] = {
    name: "Bottle full (with well)",
    ⵠⵠ: Nr.ΔⲆᐃⲆⵠⲆΔⵠⵠ,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const tl = 1;
  const nl = 18;
  const ol = 5;
  Wr[50] = {
    name: "Gold shovel",
    ⵠⵠ: 700,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const al = 255;
  const rl = Jq;
  Wr[51] = {
    name: "Diamond shovel",
    ⵠⵠ: 704,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[52] = {
    name: "Amethyst shovel",
    ⵠⵠ: 706,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[55] = {
    name: "Spanner",
    ⵠⵠ: 711,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[56] = {
    name: "Machete",
    ⵠⵠ: 714,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const sl = 100;
  const hl = 2;
  const gl = 7;
  Wr[144] = {
    name: "Bread oven",
    ⵠⵠ: 718,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[145] = {
    name: "Sandwich",
    ⵠⵠ: 730,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const ll = 10;
  Wr[59] = {
    name: "Dragon helmet",
    ⵠⵠ: 734,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const ul = 3;
  const bl = 8;
  Wr[60] = {
    name: "Dragon helmet",
    ⵠⵠ: 737,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const dl = 11;
  Wr[90] = {
    name: "Witch",
    ⵠⵠ: 740,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const vl = 19;
  Wr[91] = {
    name: "Nimbus",
    ⵠⵠ: 743,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[92] = {
    name: "Wand1",
    ⵠⵠ: 746,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[93] = {
    name: "Wand2",
    ⵠⵠ: 749,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[62] = {
    name: "Dragon sword",
    ⵠⵠ: 564,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[63] = {
    name: "Dragon sword",
    ⵠⵠ: 567,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[71] = {
    name: "Wood shield",
    ⵠⵠ: 1238,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[72] = {
    name: "Stone shield",
    ⵠⵠ: 1241,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const ml = 19;
  const cl = Zj;
  const pl = 15;
  const Cl = 9;
  const Tl = 19;
  const fl = 15;
  Wr[73] = {
    name: "Gold shield",
    ⵠⵠ: 1244,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[74] = {
    name: "Diamond shield",
    ⵠⵠ: 1247,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[75] = {
    name: "Amethyst shield",
    ⵠⵠ: 1250,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const zl = Eh;
  Wr[76] = {
    name: "Reidite shield",
    ⵠⵠ: 1253,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const yl = 5;
  Wr[94] = {
    name: "Wood axe",
    ⵠⵠ: 1256,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[95] = {
    name: "Stone axe",
    ⵠⵠ: 1259,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[96] = {
    name: "Gold axe",
    ⵠⵠ: 1262,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[97] = {
    name: "Diamond axe",
    ⵠⵠ: 1265,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[98] = {
    name: "Amethyst axe",
    ⵠⵠ: 1268,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[99] = {
    name: "Reidite axe",
    ⵠⵠ: 1271,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[64] = {
    name: "Wood bow",
    ⵠⵠ: 570,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[65] = {
    name: "Stone bow",
    ⵠⵠ: 573,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const wl = 10;
  Wr[66] = {
    name: "Gold bow",
    ⵠⵠ: 576,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[67] = {
    name: "Diamond bow",
    ⵠⵠ: 579,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Pl = 100;
  const Al = 1;
  Wr[68] = {
    name: "Amethyst bow",
    ⵠⵠ: 582,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const kl = 19;
  Wr[69] = {
    name: "Reidite bow",
    ⵠⵠ: 585,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const xl = 256;
  const Jl = 6;
  const Ml = 17;
  function Bl(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Dl(a) {
    return sa.String.fromCharCode(a);
  }
  Wr[70] = {
    name: "Dragon bow",
    ⵠⵠ: 588,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const Il = 8;
  Wr[77] = {
    name: "Crown of life",
    ⵠⵠ: 758,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const Sl = 13;
  const Ql = 1;
  Wr[175] = {
    name: "Gem of life",
    ⵠⵠ: 176,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const _l = 12;
  const Fl = 14;
  const Rl = 20;
  Wr[185] = {
    name: "Orb of the dragon",
    ⵠⵠ: 252,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[187] = {
    name: "Orb of the dragon",
    ⵠⵠ: 253,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const jl = 3;
  const Ll = 11;
  Wr[184] = {
    name: "Cube of the dragon",
    ⵠⵠ: 751,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const Wl = 16;
  Wr[186] = {
    name: "Cube of the dragon",
    ⵠⵠ: 753,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[78] = {
    name: "Crown of luck",
    ⵠⵠ: 762,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[176] = {
    name: "Gem of luck",
    ⵠⵠ: 177,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[79] = {
    name: "Crown of the angel",
    ⵠⵠ: 770,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[177] = {
    name: "Gem of the angel",
    ⵠⵠ: 175,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[149] = {
    name: "Dragon heart",
    ⵠⵠ: 521,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const Gl = 18;
  Wr[150] = {
    name: "Lava heart",
    ⵠⵠ: 523,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const Nl = 4;
  Wr[83] = {
    name: "Hood",
    ⵠⵠ: 768,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[84] = {
    name: "Peasant",
    ⵠⵠ: 772,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[86] = {
    name: "Winter peasant",
    ⵠⵠ: 777,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[85] = {
    name: "Winter hood",
    ⵠⵠ: 780,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[180] = {
    name: "Bucket full",
    ⵠⵠ: 784,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[181] = {
    name: "Bucket empty",
    ⵠⵠ: 785,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const ql = 9;
  Wr[182] = {
    name: "Well",
    ⵠⵠ: 791,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[183] = {
    name: "Sign",
    ⵠⵠ: 799,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Ol = 7;
  Wr[188] = {
    name: "Pumpkin Seed",
    ⵠⵠ: 809,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[191] = {
    name: "Garlic Seed",
    ⵠⵠ: 835,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[193] = {
    name: "Thorbushes Seed",
    ⵠⵠ: 846,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const Hl = 0;
  const Ul = 18;
  Wr[190] = {
    name: "Roof",
    ⵠⵠ: 843,
    ⵠⵠⲆΔ: 1,
    Δⵠᐃⵠ: 1
  };
  const Yl = 19;
  Wr[61] = {
    name: "Crab Crown",
    ⵠⵠ: 912,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Kl = 7;
  Wr[204] = {
    name: "Carrot Seed",
    ⵠⵠ: 950,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const Vl = 14;
  Wr[206] = {
    name: "Tomato Seed",
    ⵠⵠ: 960,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const Xl = 20;
  const Zl = 100;
  Wr[208] = {
    name: "Watermelon Seed",
    ⵠⵠ: 967,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[210] = {
    name: "Aloe Vera Seed",
    ⵠⵠ: 982,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[80] = {
    name: "Cap",
    ⵠⵠ: 1138,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[81] = {
    name: "Turban",
    ⵠⵠ: 1141,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[82] = {
    name: "Pilot Helmet",
    ⵠⵠ: 427,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[152] = {
    name: "Emerald Machine",
    ⵠⵠ: 1196,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const $l = 16;
  Wr[153] = {
    name: "Emerald Machine",
    ⵠⵠ: 1200,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[154] = {
    name: "Emerald Machine",
    ⵠⵠ: 1204,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const ws = 11;
  const xs = 2;
  Wr[155] = {
    name: "Emerald Machine",
    ⵠⵠ: 1208,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const ys = 13;
  Wr[156] = {
    name: "Emerald Machine",
    ⵠⵠ: 1212,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[157] = {
    name: "Emerald Machine",
    ⵠⵠ: 1216,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[53] = {
    name: "Pitchfork",
    ⵠⵠ: 977,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[212] = {
    name: "Wood Door Spike",
    ⵠⵠ: 990,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const zs = 4;
  Wr[213] = {
    name: "Stone Door Spike",
    ⵠⵠ: 993,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[214] = {
    name: "Gold Door Spike",
    ⵠⵠ: 996,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[215] = {
    name: "Diamond Door Spike",
    ⵠⵠ: 999,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[216] = {
    name: "Amethyst Door Spike",
    ⵠⵠ: 1002,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[20] = {
    name: "Diamond Fire Protection ",
    ⵠⵠ: 922,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[21] = {
    name: "Amethyst Fire Protection ",
    ⵠⵠ: 926,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const As = 18;
  Wr[22] = {
    name: "Amethyst Fire Protection ",
    ⵠⵠ: 930,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[19] = {
    name: "Reidite Sword",
    ⵠⵠ: 933,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Bs = 10;
  const Ds = 1;
  const Es = 6;
  Wr[34] = {
    name: "Reidite Spear",
    ⵠⵠ: 944,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Fs = 8;
  Wr[44] = {
    name: "Reidite Helmet",
    ⵠⵠ: 947,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[220] = {
    name: "Reidite Door Spike",
    ⵠⵠ: 1005,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Gs = 5;
  const Hs = 13;
  const Is = 12;
  const Js = 0;
  const Ks = 14;
  Wr[218] = {
    name: "Reidite Door",
    ⵠⵠ: 1008,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  function Ls(a) {
    return sa.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ⲆΔⵠΔᐃⵠᐃⵠΔ: 5329578,
      ⵠΔⲆΔⵠⵠᐃ: 7393171,
      ΔⲆⵠⵠⲆΔᐃⲆᐃ: 12169624,
      ᐃⲆⵠⲆⵠΔᐃΔⲆ: 10475156
    };
  })();
  const Ms = 16;
  Wr[219] = {
    name: "Reidite Spike",
    ⵠⵠ: 1011,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[217] = {
    name: "Reidite Wall",
    ⵠⵠ: 1014,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[32] = {
    name: "Reidite pick",
    ⵠⵠ: 1019,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Ns = 18;
  const Os = 1;
  Wr[223] = {
    name: "Boat",
    ⵠⵠ: 1027,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  const Ps = 3;
  const Qs = 6;
  const Rs = 9;
  Wr[224] = {
    name: "Sled",
    ⵠⵠ: 1030,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  Wr[89] = {
    name: "Saddle",
    ⵠⵠ: 1048,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 1
  };
  function Ss(a) {
    const b = Math.floor;
    let c = 0;
    Math.floor = function (a) {
      for (let b = 0; b < 5122; b++) {
        c += b;
      }
      return b(a);
    };
  }
  Wr[225] = {
    name: "Mount Boar",
    ⵠⵠ: 1051,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[226] = {
    name: "Mount King Crab",
    ⵠⵠ: 1191,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const Ts = 4;
  Wr[227] = {
    name: "Mount Baby Dragon",
    ⵠⵠ: 1082,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[228] = {
    name: "Mount Baby Lava",
    ⵠⵠ: 1097,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  const Us = 11;
  Wr[229] = {
    name: "Mount Hawk",
    ⵠⵠ: 1112,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[230] = {
    name: "Plane",
    ⵠⵠ: 1116,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[54] = {
    name: "Pitchfork 2",
    ⵠⵠ: 980,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  Wr[239] = {
    name: "Baby Mammoth",
    ⵠⵠ: 1226,
    ⵠⵠⲆΔ: 0,
    Δⵠᐃⵠ: 0
  };
  var Vs = wh;
  const Ws = 5;
  var Xs = [{
    r: [[109, 25], [108, 5]],
    w: 0,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 0,
    ᐃΔᐃᐃ: 113,
    time: 1 / 5,
    ΔⵠΔ: 4
  }, {
    r: [[113, 1], [109, 35], [108, 10]],
    w: 0,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 1,
    ᐃΔᐃᐃ: 118,
    time: 1 / 5,
    ΔⵠΔ: 4
  }, {
    r: [[109, 150], [108, 50], [111, 15]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 2,
    ᐃΔᐃᐃ: 119,
    time: 1 / 20,
    ΔⵠΔ: 4
  }, {
    r: [[109, 20], [108, 10]],
    w: 0,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 3,
    ᐃΔᐃᐃ: 114,
    time: 1 / 6,
    ΔⵠΔ: 4
  }, {
    r: [[109, 10]],
    w: 0,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 4,
    ᐃΔᐃᐃ: 8,
    time: 0.3333333333333333,
    ΔⵠΔ: 0
  }, {
    r: [[8, 1], [109, 50], [108, 15]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 5,
    ᐃΔᐃᐃ: 1,
    time: 1 / 8,
    ΔⵠΔ: 0
  }, {
    r: [[109, 40], [111, 20], [108, 30], [1, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 6,
    ᐃΔᐃᐃ: 3,
    time: 1 / 12,
    ΔⵠΔ: 0
  }, {
    r: [[112, 20], [111, 50], [108, 80], [3, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 7,
    ᐃΔᐃᐃ: 4,
    time: 1 / 20,
    ΔⵠΔ: 0
  }, {
    r: [[112, 40], [111, 60], [121, 30], [4, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 8,
    ᐃΔᐃᐃ: 31,
    time: 1 / 60,
    ΔⵠΔ: 0
  }, {
    r: [[121, 30], [112, 40], [202, 30], [31, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 9,
    ᐃΔᐃᐃ: 32,
    time: 1 / 90,
    ΔⵠΔ: 0
  }, {
    r: [[109, 90], [108, 50]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 10,
    ᐃΔᐃᐃ: 35,
    time: 0.1,
    ΔⵠΔ: 0
  }, {
    r: [[109, 160], [108, 120], [111, 80], [35, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 11,
    ᐃΔᐃᐃ: 36,
    time: 1 / 15,
    ΔⵠΔ: 0
  }, {
    r: [[112, 80], [108, 200], [111, 150], [36, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 12,
    ᐃΔᐃᐃ: 37,
    time: 1 / 20,
    ΔⵠΔ: 0
  }, {
    r: [[112, 160], [121, 60], [111, 250], [37, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 13,
    ᐃΔᐃᐃ: 38,
    time: 0.016666666666666666,
    ΔⵠΔ: 0
  }, {
    r: [[121, 160], [202, 60], [112, 250], [38, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 14,
    ᐃΔᐃᐃ: 39,
    time: 0.011111111111111112,
    ΔⵠΔ: 0
  }, {
    r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
    w: 1,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 15,
    ᐃΔᐃᐃ: 45,
    time: 0.008333333333333333,
    ΔⵠΔ: 0
  }, {
    r: [[109, 30], [108, 15]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 16,
    ᐃΔᐃᐃ: 46,
    time: 0.2,
    ΔⵠΔ: 0
  }, {
    r: [[46, 1], [111, 20], [108, 30], [109, 40]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 17,
    ᐃΔᐃᐃ: 50,
    time: 0.1,
    ΔⵠΔ: 0
  }, {
    r: [[50, 1], [112, 20], [111, 50], [108, 80]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 18,
    ᐃΔᐃᐃ: 51,
    time: 1 / 20,
    ΔⵠΔ: 0
  }, {
    r: [[51, 1], [111, 60], [121, 30], [112, 40]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 19,
    ᐃΔᐃᐃ: 52,
    time: 1 / 40,
    ΔⵠΔ: 0
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 20,
    ᐃΔᐃᐃ: 130,
    time: 1 / 5,
    ΔⵠΔ: 0
  }, {
    r: [[130, 1]],
    w: 0,
    f: 0,
    ⲆⲆΔ: 1,
    e: 0,
    id: 21,
    ᐃΔᐃᐃ: 49,
    time: 1 / 5,
    ΔⵠΔ: 0
  }, {
    r: [[109, 100], [108, 50]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 22,
    ᐃΔᐃᐃ: 53,
    time: 1 / 10,
    ΔⵠΔ: 0
  }, {
    r: [[53, 1], [235, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 23,
    ᐃΔᐃᐃ: 54,
    time: 1 / 60,
    ΔⵠΔ: 0
  }, {
    r: [[120, 4], [161, 4], [174, 4]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 24,
    ᐃΔᐃᐃ: 28,
    time: 1 / 15,
    ΔⵠΔ: 0
  }, {
    r: [[109, 40]],
    w: 0,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 25,
    ᐃΔᐃᐃ: 12,
    time: 1 / 5,
    ΔⵠΔ: 1
  }, {
    r: [[12, 1], [109, 60], [108, 10]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 26,
    ᐃΔᐃᐃ: 13,
    time: 1 / 10,
    ΔⵠΔ: 1
  }, {
    r: [[109, 80], [111, 30], [108, 30], [13, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 27,
    ᐃΔᐃᐃ: 14,
    ΔⵠΔ: 1,
    time: 0.05
  }, {
    r: [[109, 200], [112, 40], [111, 60], [14, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 28,
    ᐃΔᐃᐃ: 15,
    time: 1 / 30,
    ΔⵠΔ: 1
  }, {
    r: [[121, 40], [112, 80], [111, 90], [15, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 29,
    ᐃΔᐃᐃ: 33,
    time: 1 / 60,
    ΔⵠΔ: 1
  }, {
    r: [[202, 40], [121, 80], [112, 90], [33, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 30,
    ᐃΔᐃᐃ: 34,
    time: 0.011111111111111112,
    ΔⵠΔ: 1
  }, {
    r: [[147, 20], [185, 1], [121, 100], [149, 3]],
    w: 1,
    f: 1,
    ⲆⲆΔ: 1,
    e: 0,
    id: 31,
    ᐃΔᐃᐃ: 16,
    time: 1 / 120,
    ΔⵠΔ: 1
  }, {
    r: [[16, 1], [187, 1], [202, 100], [150, 2]],
    w: 1,
    f: 1,
    ⲆⲆΔ: 1,
    e: 0,
    id: 32,
    ᐃΔᐃᐃ: 17,
    time: 1 / 200,
    ΔⵠΔ: 1
  }, {
    r: [[12, 1], [197, 5], [161, 6]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 33,
    ᐃΔᐃᐃ: 18,
    time: 1 / 30,
    ΔⵠΔ: 1
  }, {
    r: [[109, 30]],
    w: 0,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 34,
    ᐃΔᐃᐃ: 57,
    time: 0.2,
    ΔⵠΔ: 1
  }, {
    r: [[109, 50], [108, 25], [57, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 35,
    ᐃΔᐃᐃ: 0,
    time: 1 / 10,
    ΔⵠΔ: 1
  }, {
    r: [[109, 60], [111, 40], [108, 50], [0, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 36,
    ᐃΔᐃᐃ: 5,
    time: 1 / 20,
    ΔⵠΔ: 1
  }, {
    r: [[112, 40], [111, 60], [108, 80], [5, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 37,
    ᐃΔᐃᐃ: 6,
    time: 1 / 30,
    ΔⵠΔ: 1
  }, {
    r: [[112, 60], [111, 100], [121, 40], [6, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 38,
    ᐃΔᐃᐃ: 30,
    time: 1 / 60,
    ΔⵠΔ: 1
  }, {
    r: [[112, 100], [121, 80], [202, 40], [30, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 39,
    ᐃΔᐃᐃ: 19,
    time: 1 / 90,
    ΔⵠΔ: 1
  }, {
    r: [[110, 3]],
    w: 0,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 40,
    ᐃΔᐃᐃ: 115,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[134, 3]],
    w: 0,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 41,
    ᐃΔᐃᐃ: 132,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[189, 8]],
    w: 0,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 42,
    ᐃΔᐃᐃ: 188,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[192, 8]],
    w: 0,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 43,
    ᐃΔᐃᐃ: 191,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[194, 8]],
    w: 0,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 44,
    ᐃΔᐃᐃ: 193,
    time: 0.2,
    ΔⵠΔ: 3
  }, {
    r: [[205, 8]],
    w: 0,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 45,
    ᐃΔᐃᐃ: 204,
    time: 0.2,
    ΔⵠΔ: 3
  }, {
    r: [[207, 8]],
    w: 0,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 46,
    ᐃΔᐃᐃ: 206,
    time: 0.2,
    ΔⵠΔ: 3
  }, {
    r: [[209, 16]],
    w: 0,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 47,
    ᐃΔᐃᐃ: 208,
    time: 0.2,
    ΔⵠΔ: 3
  }, {
    r: [[211, 16]],
    w: 0,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 48,
    ᐃΔᐃᐃ: 210,
    time: 0.2,
    ΔⵠΔ: 3
  }, {
    r: [[116, 1]],
    w: 0,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 49,
    ᐃΔᐃᐃ: 117,
    time: 0.2,
    ΔⵠΔ: 3
  }, {
    r: [[137, 1]],
    w: 0,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 50,
    ᐃΔᐃᐃ: 138,
    time: 0.3333333333333333,
    ΔⵠΔ: 3
  }, {
    r: [[131, 3]],
    w: 0,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 51,
    ᐃΔᐃᐃ: 143,
    time: 1 / 3,
    ΔⵠΔ: 3
  }, {
    r: [[131, 3], [110, 1]],
    w: 0,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 52,
    ᐃΔᐃᐃ: 133,
    time: 1 / 3,
    ΔⵠΔ: 3
  }, {
    r: [[131, 5], [110, 2], [142, 2]],
    w: 0,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 53,
    ᐃΔᐃᐃ: 136,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[161, 2]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 54,
    ᐃΔᐃᐃ: 195,
    time: 0.2,
    ΔⵠΔ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 55,
    ᐃΔᐃᐃ: 162,
    time: 1 / 5,
    ΔⵠΔ: 5
  }, {
    r: [[162, 1], [108, 17]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 56,
    ᐃΔᐃᐃ: 163,
    time: 0.2,
    ΔⵠΔ: 5
  }, {
    r: [[163, 1], [111, 14]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 57,
    ᐃΔᐃᐃ: 164,
    time: 1 / 5,
    ΔⵠΔ: 5
  }, {
    r: [[164, 1], [112, 11]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 58,
    ᐃΔᐃᐃ: 165,
    time: 1 / 5,
    ΔⵠΔ: 5
  }, {
    r: [[165, 1], [121, 8]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 59,
    ᐃΔᐃᐃ: 122,
    time: 1 / 5,
    ΔⵠΔ: 5
  }, {
    r: [[122, 1], [202, 5]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 60,
    ᐃΔᐃᐃ: 217,
    time: 1 / 5,
    ΔⵠΔ: 5
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 61,
    ᐃΔᐃᐃ: 166,
    time: 1 / 8,
    ΔⵠΔ: 5
  }, {
    r: [[166, 1], [108, 27]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 62,
    ᐃΔᐃᐃ: 171,
    time: 0.125,
    ΔⵠΔ: 5
  }, {
    r: [[171, 1], [111, 24]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 63,
    ᐃΔᐃᐃ: 172,
    time: 1 / 8,
    ΔⵠΔ: 5
  }, {
    r: [[172, 1], [112, 21]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 64,
    ᐃΔᐃᐃ: 173,
    time: 1 / 8,
    ΔⵠΔ: 5
  }, {
    r: [[173, 1], [121, 18]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 65,
    ᐃΔᐃᐃ: 124,
    time: 1 / 8,
    ΔⵠΔ: 5
  }, {
    r: [[124, 1], [202, 15]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 66,
    ᐃΔᐃᐃ: 218,
    time: 1 / 8,
    ΔⵠΔ: 5
  }, {
    r: [[162, 1], [109, 40], [108, 30]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 67,
    ᐃΔᐃᐃ: 160,
    time: 0.05,
    ΔⵠΔ: 5
  }, {
    r: [[163, 1], [108, 70]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 68,
    ᐃΔᐃᐃ: 168,
    time: 0.05,
    ΔⵠΔ: 5
  }, {
    r: [[164, 1], [111, 40], [108, 30]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 69,
    ᐃΔᐃᐃ: 169,
    time: 1 / 20,
    ΔⵠΔ: 5
  }, {
    r: [[165, 1], [112, 40], [108, 30]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 70,
    ᐃΔᐃᐃ: 170,
    time: 1 / 20,
    ΔⵠΔ: 5
  }, {
    r: [[122, 1], [121, 40], [108, 30]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 71,
    ᐃΔᐃᐃ: 123,
    time: 0.05,
    ΔⵠΔ: 5
  }, {
    r: [[217, 1], [202, 40], [111, 30]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 72,
    ᐃΔᐃᐃ: 219,
    time: 1 / 20,
    ΔⵠΔ: 5
  }, {
    r: [[166, 1], [109, 80], [108, 60]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 73,
    ᐃΔᐃᐃ: 212,
    time: 0.05,
    ΔⵠΔ: 5
  }, {
    r: [[171, 1], [108, 140]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 74,
    ᐃΔᐃᐃ: 213,
    time: 0.05,
    ΔⵠΔ: 5
  }, {
    r: [[172, 1], [111, 80], [108, 60]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 75,
    ᐃΔᐃᐃ: 214,
    time: 1 / 20,
    ΔⵠΔ: 5
  }, {
    r: [[173, 1], [112, 80], [108, 60]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 76,
    ᐃΔᐃᐃ: 215,
    time: 1 / 20,
    ΔⵠΔ: 5
  }, {
    r: [[124, 1], [121, 80], [108, 60]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 77,
    ᐃΔᐃᐃ: 216,
    time: 0.05,
    ΔⵠΔ: 5
  }, {
    r: [[218, 1], [202, 80], [111, 60]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 78,
    ᐃΔᐃᐃ: 220,
    time: 1 / 20,
    ΔⵠΔ: 5
  }, {
    r: [[109, 25], [111, 2]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 79,
    ᐃΔᐃᐃ: 167,
    time: 0.2,
    ΔⵠΔ: 4
  }, {
    r: [[120, 1], [2, 1], [161, 2]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 80,
    ᐃΔᐃᐃ: 23,
    time: 1 / 5,
    ΔⵠΔ: 2
  }, {
    r: [[120, 5], [222, 20], [147, 5], [2, 5]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 81,
    ᐃΔᐃᐃ: 24,
    time: 1 / 30,
    ΔⵠΔ: 2
  }, {
    r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 82,
    ᐃΔᐃᐃ: 82,
    time: 1 / 60,
    ΔⵠΔ: 2
  }, {
    r: [[2, 1], [161, 2]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 83,
    ᐃΔᐃᐃ: 10,
    time: 1 / 5,
    ΔⵠΔ: 2
  }, {
    r: [[10, 1], [174, 5], [161, 4]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 84,
    ᐃΔᐃᐃ: 11,
    time: 1 / 12,
    ΔⵠΔ: 2
  }, {
    r: [[11, 1], [146, 5], [147, 4]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 85,
    ᐃΔᐃᐃ: 40,
    time: 0.03333333333333333,
    ΔⵠΔ: 2
  }, {
    r: [[40, 1], [146, 5], [240, 10], [147, 4]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 86,
    ᐃΔᐃᐃ: 88,
    time: 0.02,
    ΔⵠΔ: 2
  }, {
    r: [[109, 50]],
    w: 0,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 87,
    ᐃΔᐃᐃ: 58,
    time: 1 / 5,
    ΔⵠΔ: 2
  }, {
    r: [[108, 75], [109, 75], [58, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 88,
    ᐃΔᐃᐃ: 25,
    time: 1 / 10,
    ΔⵠΔ: 2
  }, {
    r: [[108, 90], [109, 90], [111, 90], [25, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 89,
    ᐃΔᐃᐃ: 26,
    time: 1 / 20,
    ΔⵠΔ: 2
  }, {
    r: [[108, 100], [111, 100], [112, 100], [26, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 90,
    ᐃΔᐃᐃ: 27,
    time: 1 / 30,
    ΔⵠΔ: 2
  }, {
    r: [[121, 80], [111, 150], [112, 120], [27, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 91,
    ᐃΔᐃᐃ: 43,
    time: 1 / 60,
    ΔⵠΔ: 2
  }, {
    r: [[202, 80], [112, 150], [121, 120], [43, 1]],
    w: 1,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 92,
    ᐃΔᐃᐃ: 44,
    time: 0.011111111111111112,
    ΔⵠΔ: 2
  }, {
    r: [[139, 2], [112, 40], [161, 4]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 93,
    ᐃΔᐃᐃ: 48,
    time: 1 / 20,
    ΔⵠΔ: 2
  }, {
    r: [[48, 1], [111, 80], [129, 1], [121, 20]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 94,
    ᐃΔᐃᐃ: 47,
    time: 1 / 90,
    ΔⵠΔ: 2
  }, {
    r: [[203, 5], [112, 50], [147, 5]],
    w: 1,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 95,
    ᐃΔᐃᐃ: 20,
    time: 1 / 20,
    ΔⵠΔ: 2
  }, {
    r: [[20, 1], [203, 10], [121, 50]],
    w: 1,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 96,
    ᐃΔᐃᐃ: 21,
    time: 1 / 60,
    ΔⵠΔ: 2
  }, {
    r: [[21, 1], [203, 15], [121, 50], [202, 50]],
    w: 1,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 97,
    ᐃΔᐃᐃ: 22,
    time: 0.011111111111111112,
    ΔⵠΔ: 2
  }, {
    r: [[161, 4], [237, 2]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 98,
    ᐃΔᐃᐃ: 80,
    time: 0.06666666666666667,
    ΔⵠΔ: 2
  }, {
    r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 99,
    ᐃΔᐃᐃ: 81,
    time: 0.006666666666666667,
    ΔⵠΔ: 2
  }, {
    r: [[161, 6], [174, 5]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 100,
    ᐃΔᐃᐃ: 29,
    time: 0.06666666666666667,
    ΔⵠΔ: 2
  }, {
    r: [[109, 20]],
    w: 0,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 101,
    ᐃΔᐃᐃ: 120,
    time: 1 / 3,
    ΔⵠΔ: 4
  }, {
    r: [[112, 1], [161, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 102,
    ᐃΔᐃᐃ: 147,
    time: 1 / 3,
    ΔⵠΔ: 4
  }, {
    r: [[111, 10]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 103,
    ᐃΔᐃᐃ: 148,
    time: 1 / 5,
    ΔⵠΔ: 4
  }, {
    r: [[111, 250]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 104,
    ᐃΔᐃᐃ: 158,
    time: 1 / 60,
    ΔⵠΔ: 4
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 105,
    ᐃΔᐃᐃ: 159,
    time: 1 / 10,
    ΔⵠΔ: 4
  }, {
    r: [[109, 15]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 106,
    ᐃΔᐃᐃ: 125,
    time: 1 / 5,
    ΔⵠΔ: 4
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 107,
    ᐃΔᐃᐃ: 190,
    time: 1 / 5,
    ΔⵠΔ: 4
  }, {
    r: [[109, 120]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 108,
    ᐃΔᐃᐃ: 221,
    time: 0.06666666666666667,
    ΔⵠΔ: 4
  }, {
    r: [[109, 20], [140, 15]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 109,
    ᐃΔᐃᐃ: 141,
    time: 1 / 5,
    ΔⵠΔ: 4
  }, {
    r: [[126, 25]],
    w: 1,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 110,
    ᐃΔᐃᐃ: 128,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ⲆⲆΔ: 1,
    e: 0,
    id: 111,
    ᐃΔᐃᐃ: 127,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[142, 20], [128, 1]],
    w: 0,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 112,
    ᐃΔᐃᐃ: 127,
    time: 1 / 10,
    ΔⵠΔ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ⲆⲆΔ: 0,
    e: 1,
    id: 113,
    ᐃΔᐃᐃ: 127,
    time: 1 / 3,
    ΔⵠΔ: 3
  }, {
    r: [[109, 60], [108, 20], [161, 2]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 114,
    ᐃΔᐃᐃ: 135,
    time: 1 / 10,
    ΔⵠΔ: 4
  }, {
    r: [[112, 40], [108, 45]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 115,
    ᐃΔᐃᐃ: 151,
    time: 1 / 20,
    ΔⵠΔ: 4
  }, {
    r: [[151, 1], [234, 40], [238, 1]],
    w: 1,
    f: 1,
    ⲆⲆΔ: 1,
    e: 0,
    id: 116,
    ᐃΔᐃᐃ: 152,
    time: 0.005,
    ΔⵠΔ: 4
  }, {
    r: [[109, 50], [108, 100]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 117,
    ᐃΔᐃᐃ: 153,
    time: 0.011111111111111112,
    ΔⵠΔ: 4
  }, {
    r: [[108, 60], [111, 120]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 118,
    ᐃΔᐃᐃ: 154,
    time: 0.011111111111111112,
    ΔⵠΔ: 4
  }, {
    r: [[111, 70], [112, 140]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 119,
    ᐃΔᐃᐃ: 155,
    time: 1 / 90,
    ΔⵠΔ: 4
  }, {
    r: [[112, 80], [121, 160]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 120,
    ᐃΔᐃᐃ: 156,
    time: 0.011111111111111112,
    ΔⵠΔ: 4
  }, {
    r: [[121, 90], [202, 180]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 121,
    ᐃΔᐃᐃ: 157,
    time: 0.011111111111111112,
    ΔⵠΔ: 4
  }, {
    r: [[108, 70]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 122,
    ᐃΔᐃᐃ: 55,
    time: 1 / 10,
    ΔⵠΔ: 0
  }, {
    r: [[108, 70], [109, 50]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 123,
    ᐃΔᐃᐃ: 56,
    time: 1 / 10,
    ΔⵠΔ: 0
  }, {
    r: [[109, 40], [108, 40]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 124,
    ᐃΔᐃᐃ: 144,
    time: 1 / 10,
    ΔⵠΔ: 4
  }, {
    r: [[143, 1], [117, 1]],
    w: 0,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 125,
    ᐃΔᐃᐃ: 145,
    time: 1 / 3,
    ΔⵠΔ: 3
  }, {
    r: [[147, 30], [184, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ⲆⲆΔ: 1,
    e: 0,
    id: 126,
    ᐃΔᐃᐃ: 59,
    time: 1 / 120,
    ΔⵠΔ: 2
  }, {
    r: [[59, 1], [186, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ⲆⲆΔ: 1,
    e: 0,
    id: 127,
    ᐃΔᐃᐃ: 60,
    time: 0.005555555555555556,
    ΔⵠΔ: 2
  }, {
    r: [[26, 1], [197, 10], [196, 10], [161, 10]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 128,
    ᐃΔᐃᐃ: 61,
    time: 1 / 60,
    ΔⵠΔ: 2
  }, {
    r: [[147, 20], [185, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ⲆⲆΔ: 1,
    e: 0,
    id: 129,
    ᐃΔᐃᐃ: 62,
    time: 1 / 120,
    ΔⵠΔ: 1
  }, {
    r: [[62, 1], [187, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ⲆⲆΔ: 1,
    e: 0,
    id: 130,
    ᐃΔᐃᐃ: 63,
    time: 0.005555555555555556,
    ΔⵠΔ: 1
  }, {
    r: [[109, 100], [161, 4]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 131,
    ᐃΔᐃᐃ: 64,
    time: 0.05,
    ΔⵠΔ: 1
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 132,
    ᐃΔᐃᐃ: 101,
    time: 1 / 5,
    ΔⵠΔ: 1
  }, {
    r: [[108, 200], [161, 8], [222, 4], [64, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 133,
    ᐃΔᐃᐃ: 65,
    time: 1 / 25,
    ΔⵠΔ: 1
  }, {
    r: [[108, 20], [231, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 134,
    ᐃΔᐃᐃ: 102,
    time: 1 / 5,
    ΔⵠΔ: 1
  }, {
    r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 135,
    ᐃΔᐃᐃ: 66,
    time: 0.03333333333333333,
    ΔⵠΔ: 1
  }, {
    r: [[111, 20], [222, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 136,
    ᐃΔᐃᐃ: 103,
    time: 1 / 10,
    ΔⵠΔ: 1
  }, {
    r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 137,
    ᐃΔᐃᐃ: 67,
    time: 1 / 35,
    ΔⵠΔ: 1
  }, {
    r: [[112, 10], [222, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 138,
    ᐃΔᐃᐃ: 104,
    time: 1 / 10,
    ΔⵠΔ: 1
  }, {
    r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 139,
    ᐃΔᐃᐃ: 68,
    time: 0.025,
    ΔⵠΔ: 1
  }, {
    r: [[121, 10], [232, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 140,
    ᐃΔᐃᐃ: 105,
    time: 1 / 15,
    ΔⵠΔ: 1
  }, {
    r: [[202, 200], [147, 10], [129, 1], [68, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 141,
    ᐃΔᐃᐃ: 69,
    time: 1 / 45,
    ΔⵠΔ: 1
  }, {
    r: [[202, 10], [232, 1], [203, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 142,
    ᐃΔᐃᐃ: 106,
    time: 1 / 15,
    ΔⵠΔ: 1
  }, {
    r: [[234, 200], [147, 10], [185, 1], [69, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 143,
    ᐃΔᐃᐃ: 70,
    time: 1 / 50,
    ΔⵠΔ: 1
  }, {
    r: [[234, 10], [238, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 144,
    ᐃΔᐃᐃ: 107,
    time: 1 / 20,
    ΔⵠΔ: 1
  }, {
    r: [[109, 100]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 145,
    ᐃΔᐃᐃ: 71,
    time: 0.04,
    ΔⵠΔ: 1
  }, {
    r: [[71, 1], [108, 100], [109, 50]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 146,
    ᐃΔᐃᐃ: 72,
    time: 1 / 40,
    ΔⵠΔ: 1
  }, {
    r: [[72, 1], [111, 50], [108, 50], [109, 50]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 147,
    ᐃΔᐃᐃ: 73,
    time: 1 / 50,
    ΔⵠΔ: 1
  }, {
    r: [[73, 1], [112, 50], [111, 50], [108, 50]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 148,
    ᐃΔᐃᐃ: 74,
    time: 0.014285714285714285,
    ΔⵠΔ: 1
  }, {
    r: [[74, 1], [121, 50], [112, 50], [111, 50]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 149,
    ᐃΔᐃᐃ: 75,
    time: 1 / 90,
    ΔⵠΔ: 1
  }, {
    r: [[75, 1], [202, 50], [121, 50], [112, 50]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 150,
    ᐃΔᐃᐃ: 76,
    time: 1 / 120,
    ΔⵠΔ: 1
  }, {
    r: [[175, 1], [111, 200]],
    w: 1,
    f: 1,
    ⲆⲆΔ: 1,
    e: 0,
    id: 151,
    ᐃΔᐃᐃ: 77,
    time: 1 / 60,
    ΔⵠΔ: 2
  }, {
    r: [[176, 1], [111, 200]],
    w: 1,
    f: 1,
    ⲆⲆΔ: 1,
    e: 0,
    id: 152,
    ᐃΔᐃᐃ: 78,
    time: 0.016666666666666666,
    ΔⵠΔ: 2
  }, {
    r: [[177, 1], [111, 200], [149, 1]],
    w: 1,
    f: 1,
    ⲆⲆΔ: 1,
    e: 0,
    id: 153,
    ᐃΔᐃᐃ: 79,
    time: 1 / 60,
    ΔⵠΔ: 2
  }, {
    r: [[174, 10], [2, 5], [161, 6]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 154,
    ᐃΔᐃᐃ: 83,
    time: 1 / 10,
    ΔⵠΔ: 2
  }, {
    r: [[2, 3], [161, 2]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 155,
    ᐃΔᐃᐃ: 84,
    time: 1 / 10,
    ΔⵠΔ: 2
  }, {
    r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 156,
    ᐃΔᐃᐃ: 85,
    time: 1 / 60,
    ΔⵠΔ: 2
  }, {
    r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 157,
    ᐃΔᐃᐃ: 86,
    time: 0.016666666666666666,
    ΔⵠΔ: 2
  }, {
    r: [[181, 1]],
    w: 0,
    f: 0,
    ⲆⲆΔ: 1,
    e: 0,
    id: 158,
    ᐃΔᐃᐃ: 180,
    time: 1 / 5,
    ΔⵠΔ: 0
  }, {
    r: [[109, 20], [161, 1]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 159,
    ᐃΔᐃᐃ: 181,
    time: 1 / 5,
    ΔⵠΔ: 0
  }, {
    r: [[108, 100], [140, 30]],
    w: 1,
    f: 1,
    ⲆⲆΔ: 0,
    e: 0,
    id: 160,
    ᐃΔᐃᐃ: 182,
    time: 1 / 10,
    ΔⵠΔ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 161,
    ᐃΔᐃᐃ: 183,
    time: 1 / 5,
    ΔⵠΔ: 4
  }, {
    r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 162,
    ᐃΔᐃᐃ: 198,
    time: 1 / 20,
    ΔⵠΔ: 4
  }, {
    r: [[109, 250], [147, 10], [146, 2], [139, 2]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 163,
    ᐃΔᐃᐃ: 223,
    time: 0.02,
    ΔⵠΔ: 4
  }, {
    r: [[109, 250], [161, 10], [146, 2], [222, 8]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 164,
    ᐃΔᐃᐃ: 224,
    time: 1 / 50,
    ΔⵠΔ: 4
  }, {
    r: [[161, 10], [174, 6], [2, 4], [126, 50]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 165,
    ᐃΔᐃᐃ: 89,
    time: 1 / 20,
    ΔⵠΔ: 4
  }, {
    r: [[109, 250], [161, 10], [120, 10], [231, 8]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 166,
    ᐃΔᐃᐃ: 230,
    time: 0.02,
    ΔⵠΔ: 4
  }, {
    r: [[109, 40]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 167,
    ᐃΔᐃᐃ: 94,
    time: 1 / 5,
    ΔⵠΔ: 1
  }, {
    r: [[94, 1], [108, 40], [109, 50]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 168,
    ᐃΔᐃᐃ: 95,
    time: 0.1,
    ΔⵠΔ: 1
  }, {
    r: [[95, 1], [111, 40], [108, 50], [109, 60]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 169,
    ᐃΔᐃᐃ: 96,
    time: 0.05,
    ΔⵠΔ: 1
  }, {
    r: [[96, 1], [112, 40], [111, 70], [108, 80]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 170,
    ᐃΔᐃᐃ: 97,
    time: 0.03333333333333333,
    ΔⵠΔ: 1
  }, {
    r: [[97, 1], [121, 40], [112, 70], [111, 110]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 171,
    ᐃΔᐃᐃ: 98,
    time: 1 / 60,
    ΔⵠΔ: 1
  }, {
    r: [[98, 1], [202, 50], [121, 80], [112, 110]],
    w: 1,
    f: 0,
    ⲆⲆΔ: 0,
    e: 0,
    id: 172,
    ᐃΔᐃᐃ: 99,
    time: 1 / 90,
    ΔⵠΔ: 1
  }];
  function Ys(a) {
    return function (b, c, d, e) {
      Ei(io, b, c, d, e);
      const f = function (b, c, d, e, f) {
        Ke(io, b, c, d, e, f);
        const g = function (a, b, c) {
          di(io, a, b, c);
          const d = function (a, b, c) {
            Mj(io, a, b, c);
            const d = yx(bo[0], bo[1], bo[2], bo[0]);
            yx(bo[1], bo[2], bo[0], bo[1]);
            return d ^ 16693;
          }(bo[0], bo[1], bo[2]);
          const e = $s(bo[0], bo[1], bo[2], bo[0], bo[1], bo[2]);
          return (0 << ((d ^ e) & 255)) + (24 << ((d ^ e) >> 16 & 255)) + (8 << ((d ^ e) >> 8 & 255)) + (16 << ((d ^ e) >> 24 & 255));
        }(bo[0], bo[1], bo[2]);
        const a = at(bo[3], bo[4], bo[0], bo[1]);
        return ((177 + (g ^ a)) * 75 + 74) % 65537;
      }(bo[0], bo[1], bo[2], bo[3], bo[0]);
      const g = cx(bo[1], bo[2]);
      return ((230 + (f ^ g)) * 8121 + 28411) % 134456;
    }(a, 55114, 28965, 2332);
  }
  function Zs(a, b, c, d) {
    Gj(io, a, b, c, d);
    return ((191 + (function (b, c, d, e, f, g) {
      Hj(io, b, c, d, e, f, g);
      const a = mt(bo[0], bo[1], bo[2], bo[3], bo[4]);
      const h = function (b, c, d, e, f) {
        Ci(io, b, c, d, e, f);
        const g = mt(bo[0], bo[1], bo[2], bo[3], bo[4]);
        const a = st(bo[0], bo[1], bo[2]);
        return ((236 + (g ^ a)) * 8121 + 28411) % 134456;
      }(bo[5], bo[0], bo[1], bo[2], bo[3]);
      return ((55 + (a ^ h)) * 16807 + 0) % 2147483647;
    }(bo[0], bo[1], bo[2], bo[3], bo[0], bo[1]) ^ mt(bo[2], bo[3], bo[0], bo[1], bo[2]))) * 48271 + 0) % 2147483647;
  }
  Mr = 300;
  function $s(b, c, d, e, f, g) {
    vj(io, b, c, d, e, f, g);
    return (10105 + (Zs(bo[0], bo[1], bo[2], bo[3]) ^ function (a, b, c) {
      tj(io, a, b, c);
      const d = qt(bo[0], bo[1], bo[2]);
      st(bo[0], bo[1], bo[2]);
      return ~(d & 52967) & (d | 52967);
    }(bo[4], bo[5], bo[0]))) % 65418;
  }
  function _s(a, b) {
    const c = (2147483587 + (38286 + a) * 2147483629) % 2147483647;
    const d = ((b + 28110) * 1103515245 + 12345) % 2147483648;
    const e = nf(c, d, c, d, c);
    (function (b, c, d) {
      const e = b ^ 6234;
      const f = ~(c & 43348) & c | ~(c & 43348) & 43348;
      const g = (d | 11222) & ~(d & 11222);
      const a = vw(e, f);
      (function (b, c, d, e, f, i) {
        const a = ((b + 30775) * 1664525 + 1013904223) % 4294967296;
        const j = ((c + 52313) * 1664525 + 1013904223) % 4294967296;
        const k = (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255)) + (8 << (d & 255)) + (0 << (d >> 8 & 255));
        const h = ~(e & 33565) & 33565 | ~(e & 33565) & e;
        const g = (24 << (f >> 16 & 255)) + (8 << (f >> 24 & 255)) + (16 << (f & 255)) + (0 << (f >> 8 & 255));
        const l = function (b, c, d, e, f, i) {
          const a = (1 + (b + 61911) * 22695477) % 4294967296;
          const j = ~(c & 56128) & c | ~(c & 56128) & 56128;
          const k = f ^ 11044;
          const h = ~(i & 63978) & (i | 63978);
          const g = function (b, c, d, e) {
            const f = b ^ 36477;
            const g = ~(c & 12551) & 12551 | ~(c & 12551) & c;
            const a = (d | 61636) & ~(d & 61636);
            const i = (12345 + (30051 + e) * 1103515245) % 2147483648;
            const j = function (b, c) {
              const d = ~(b & 11683) & b | ~(b & 11683) & 11683;
              const e = ~(c & 4245) & (c | 4245);
              const f = function (b, c, d, e) {
                const f = ~(b & 27010) & 27010 | ~(b & 27010) & b;
                const g = c ^ 27203;
                const a = (16 << (d >> 24 & 255)) + (8 << (d >> 8 & 255)) + (24 << (d >> 16 & 255)) + (0 << (d & 255));
                const i = (0 << (e & 255)) + (24 << (e >> 24 & 255)) + (8 << (e >> 16 & 255)) + (16 << (e >> 8 & 255));
                const j = Ir(f, g, a);
                (function (b, c, d, e, f, i) {
                  const a = (b | 11013) & ~(b & 11013);
                  const j = ((c + 64699) * 22695477 + 1) % 4294967296;
                  const k = ~(d & 26736) & 26736 | ~(d & 26736) & d;
                  const h = (843 + f) % 65403;
                  const g = ((4000 + i) * 2147483629 + 2147483587) % 2147483647;
                  const l = tk(a, j, k, (e + 42419) % 65332);
                  zx(h, g, a, j, k);
                })(i, f, g, a, i, f);
                return (j | 13943) & ~(j & 13943);
              }(d, e, d, e);
              const g = Iw(d, e, d, e, d, e);
              return (1013904223 + (36553 + (f ^ g)) * 1664525) % 4294967296;
            }(f, g);
            Dr(a, i, f, g, a, i);
            return ~(j & 38421) & (j | 38421);
          }(a, j, (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)) + (8 << (d >> 16 & 255)) + (0 << (d & 255)), (0 << (e >> 24 & 255)) + (8 << (e >> 8 & 255)) + (24 << (e & 255)) + (16 << (e >> 16 & 255)));
          bf(k, h, a, j);
          return (g | 46622) & ~(g & 46622);
        }(a, j, k, h, g, ~(i & 11199) & (i | 11199));
        Ax(a, j, k, h, g);
      })(g, e, f, g, e, f);
    })(d, c, d);
    return e ^ 64336;
  }
  function at(a, b, c, d) {
    Tj(io, a, b, c, d);
    return ((48 + (it(bo[0], bo[1], bo[2], bo[3], bo[0], bo[1]) ^ it(bo[2], bo[3], bo[0], bo[1], bo[2], bo[3]))) * 75 + 74) % 65537;
  }
  ΔⵠⲆ = {
    ⵠⵠⵠⵠᐃᐃⵠ: 300,
    ⵠⲆᐃΔΔⲆᐃ: 301,
    ⵠⵠⲆᐃΔⵠᐃ: 302,
    ⲆⵠⵠᐃⲆᐃⲆ: 303,
    ⵠᐃΔⲆΔⵠⵠ: 304,
    ⵠⵠΔⵠΔⵠΔ: 305,
    ⵠᐃᐃΔᐃᐃⲆ: 306,
    ᐃⲆⵠⵠΔΔΔ: 307,
    ΔⲆΔⵠⲆΔΔ: 308,
    ⲆⲆⲆⵠΔᐃΔ: 309,
    ᐃΔᐃⲆᐃⵠⲆ: 310,
    ⵠΔⲆⲆⲆᐃⲆ: 311,
    EMPTY: 312,
    ΔⲆⵠⲆⲆⲆⲆ: 313,
    ⵠⵠΔⲆΔⵠⲆ: 314,
    ⲆⲆⵠᐃⵠⵠⵠ: 315,
    ᐃⵠⲆᐃᐃΔⲆ: 316,
    ᐃᐃⵠᐃΔΔΔ: 317,
    ᐃᐃⲆΔᐃⲆΔ: 318,
    ⲆⲆᐃᐃⵠⵠⵠ: 319,
    ⵠᐃⵠᐃⵠΔⵠ: 320,
    ᐃᐃⲆⲆᐃⲆⲆ: 321,
    ⵠΔⲆⵠᐃ: 322,
    ⲆⲆⲆᐃᐃΔΔ: 323,
    ΔⲆᐃΔΔ: 324,
    ⵠΔᐃⲆⵠⲆⵠ: 325,
    ᐃΔⵠᐃⲆᐃᐃ: 326,
    ⵠⵠⵠⵠⵠⲆⵠ: 327,
    ⲆⵠⵠΔᐃⵠⲆ: 328,
    ⵠⲆΔΔᐃᐃᐃ: 329,
    ᐃⲆΔΔⲆⲆⵠ: 330,
    ᐃΔᐃⵠᐃΔⲆ: 331,
    POINTS: 332,
    ⲆⵠⵠⵠⵠΔᐃ: 333,
    ⲆᐃⵠⲆⵠⲆⵠ: 334,
    ⵠⲆᐃⲆⵠⲆᐃ: 335,
    ⲆⵠᐃΔⲆᐃᐃ: 336,
    ⲆΔⲆᐃⵠⵠᐃ: 337,
    ᐃⵠᐃⲆᐃΔᐃ: 338,
    ΔⵠΔⵠΔⵠΔ: 339,
    ΔᐃⵠᐃⲆᐃⵠ: 340,
    ⵠΔⲆΔⵠᐃⲆ: 341,
    ⵠΔᐃⵠΔⵠⵠ: 342,
    ΔΔⲆᐃᐃⵠⵠ: 343
  };
  const bt = 6;
  const ct = 100;
  function dt() {
    lb[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    lb[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    lb[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    lb[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    lb[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    lb[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    lb[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    lb[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    lb[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    lb[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    lb[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    lb[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    lb[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    lb[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    lb[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    lb[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    lb[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    lb[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    lb[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    lb[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    lb[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    lb[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    lb[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    lb[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    lb[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    lb[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    lb[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    lb[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    lb[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    lb[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    lb[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    lb[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    lb[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    lb[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    lb[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    lb[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    lb[232] = ["Vulture Feather", "From a deadly vulture"];
    lb[234] = ["Emerald", "How many golden breads can you get from it?"];
    lb[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
    lb[80] = ["Turban", "Useful to survive in the desert."];
    lb[81] = ["Ninja outfit", "Essential to survive in the desert"];
    lb[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    lb[236] = ["Pilot Glasses"];
    lb[225] = ["Tamed Boar", "Fast on lands and slow on water."];
    lb[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    lb[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    lb[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    lb[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    lb[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    lb[89] = ["Saddle", "Hit a boar with it to tame it."];
    lb[90] = ["Witch Hat", "You're a wizard Starvy!"];
    lb[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    lb[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    lb[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    lb[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    lb[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    lb[224] = ["Sled", "You are faster with it in the snow"];
    lb[223] = ["Boat", "You are faster with it in the water"];
    lb[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    lb[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 70"];
    lb[222] = ["Penguin Feather", "From a deadly cute penguin."];
    lb[231] = ["Hawk Feather", "From a deadly hawk."];
    lb[233] = ["Cactus", "Food : 20", "Water : 10"];
    lb[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    lb[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    lb[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    lb[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    lb[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    lb[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    lb[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    lb[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    lb[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    lb[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    lb[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    lb[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    lb[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    lb[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    lb[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    lb[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    lb[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    lb[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    lb[53] = ["Pitchfork", "Perfect for gathering"];
    lb[54] = ["Golden Pitchfork", "Essential for a real farmer."];
    lb[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    lb[Rr.ⵠⲆⵠΔⲆΔΔ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    lb[Rr.ΔⲆⲆᐃᐃΔⲆ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    lb[Rr.ᐃΔᐃᐃΔⵠⲆ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    lb[Rr.ⲆΔⲆⲆⲆᐃⵠ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    lb[Rr.ⵠⲆΔⲆᐃⲆⵠ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    lb[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    lb[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    lb[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    lb[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    lb[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    lb[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    lb[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    lb[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    lb[203] = ["Flame", "It's hot!"];
    lb[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    lb[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    lb[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    lb[202] = ["Reidite", "The ultimate ore"];
    lb[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    vb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    vb[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    vb[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    vb[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    vb[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    vb[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    vb[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    vb[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    vb[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    vb[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    vb[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    vb[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    vb[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    vb[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    vb[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    vb[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    vb[38] = ["You died crushed by an angry baby mammoth."];
    vb[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    vb[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    lb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    lb[341] = "A sandstorm is approaching in a few seconds.";
    lb[340] = "The sandstorm will soon stop.";
    lb[343] = "A blizzard is approaching in a few seconds.";
    lb[342] = "The blizzard will soon stop.";
    lb[328] = " BACK TO THE GAME";
    lb[329] = " Share on Twitter";
    lb[330] = " Share on Facebook";
    lb[331] = "You can buy items on the shop in the next game with your points";
    lb[332] = "points";
    lb[333] = "Score";
    lb[334] = "Kill";
    lb[335] = "Days survived";
    lb[336] = "Building method: Free. Press G to change";
    lb[337] = "Building method: Grid. Press G to change";
    lb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    lb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    lb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    lb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    lb[7] = ["Hand"];
    lb[140] = ["Dirt", "Dirty!"];
    lb[126] = ["Sand", "I got it in my eyes!"];
    lb[109] = ["Wood", "You can't get enough of it!"];
    lb[108] = ["Stone", "Also called a rock"];
    lb[111] = ["Gold", "Be generous, give it to others"];
    lb[112] = ["Diamond", "What will you make with it?"];
    lb[121] = ["Amethyst", "It's Mauve like Lapa"];
    lb[131] = ["Flour", "Used in cooking"];
    lb[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    lb[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    lb[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    lb[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    lb[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    lb[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    lb[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    lb[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    lb[200] = ["Candies", "Only for children!", "Food: 20"];
    lb[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    lb[201] = ["Garland", "Perfect decoration for roofs"];
    lb[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    lb[110] = ["Berry", "Berry tasty!", "Food: 10"];
    lb[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    lb[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    lb[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    lb[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    lb[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    lb[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    lb[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    lb[194] = ["Thorn bush", "It stings!"];
    lb[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    lb[142] = ["Ice", "Useful for making cakes and water"];
    lb[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    lb[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    lb[2] = ["Rabbit Fur", "That rabbit was so cute..."];
    lb[178] = ["Pure Fur", "You're a bread factory"];
    lb[179] = ["Dark Fur", "You get ready to do something wrong"];
    lb[146] = ["Winter Fur", "These animals just wanted a hug..."];
    lb[139] = ["Scales", "It smells like fish!"];
    lb[129] = ["Kraken Skin", "Weren't you too scared?"];
    lb[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    lb[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    lb[114] = ["Workbench", "Very useful to craft all kinds of objects"];
    lb[161] = ["Cord", "Used in crafting Hats and Bag"];
    lb[147] = ["Diamond Cord", "Used in crafting Special Hats"];
    lb[167] = ["Chest", "Allows you to store items", "Durability: 500"];
    lb[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    lb[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    lb[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    lb[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    lb[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    lb[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    lb[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    lb[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    lb[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    lb[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    lb[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
    lb[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    lb[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    lb[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    lb[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    lb[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    lb[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    lb[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 95"];
    lb[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    lb[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    lb[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    lb[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    lb[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    lb[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    lb[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    lb[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    lb[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    lb[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    lb[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    lb[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    lb[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    lb[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    lb[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    lb[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    lb[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    lb[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    lb[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    lb[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    lb[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    lb[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    lb[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    lb[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    lb[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    lb[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    lb[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    lb[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    lb[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    lb[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    lb[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    lb[175] = ["Green Gemstone", "You didn't cheat, promise?"];
    lb[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
    lb[177] = ["Blue Gemstone", "For too kind people"];
    lb[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    lb[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    lb[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    lb[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    lb[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    lb[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    lb[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
    lb[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    lb[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    lb[29] = ["Bag", "More space for your items!"];
    lb[120] = ["Paper", "Used in book-crafting"];
    lb[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    lb[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    lb[148] = ["Lock", "Allow you to lock your chest"];
    lb[158] = ["Lock-pick", "Allows you to unlock one chest"];
    lb[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    lb[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    lb[183] = ["Sign", "Leave a message to others", "Durability: 200"];
    lb[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    lb[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
    lb[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    lb[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    lb[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    lb[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    lb[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    lb[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    lb[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    lb[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    lb[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    lb[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    lb[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    lb[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    lb[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    lb[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    lb[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    lb[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    lb[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    lb[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    lb[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    lb[300] = "You cannot join this server";
    lb[301] = "Kicked: ";
    lb[302] = "Your key is already used by someone else";
    lb[303] = "Your key is wrong";
    lb[304] = "You have an old version, you need to clear your cache";
    lb[338] = "Your client version is too recent for this server. The server is being updated";
    lb[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
    lb[305] = "There are no more new resources";
    lb[306] = "You survived 1 day";
    lb[307] = "You survived ";
    lb[308] = " days";
    lb[309] = "You are dead ;-;";
    lb[310] = "Server cannot find spawn location! Spam the play button!";
    lb[311] = "Server is full! Spam the play button!";
    lb[312] = "Resource is empty";
    lb[313] = "Inventory is full (right-click to empty items)";
    lb[314] = " is dead";
    lb[315] = "This is not the right tool";
    lb[316] = "You joined a team";
    lb[317] = "You are dead";
    lb[318] = " joined the team";
    lb[319] = "Your team was destroyed";
    lb[320] = "You left the team";
    lb[321] = " left the team";
    lb[322] = "Someone stole your token :>";
    lb[323] = "Choose a server";
    lb[324] = "players";
    lb[325] = "total players";
    lb[326] = "players on this mode";
    lb[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    vb[0] = ["You were killed for no reason"];
    vb[1] = ["You starved to death, as the name of the game implies"];
    vb[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    vb[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    vb[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    vb[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    vb[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    vb[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    vb[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    vb[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    vb[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    vb[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    vb[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    vb[13] = ["You died of thirst. Better drink your own piss."];
    vb[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    vb[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    vb[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    vb[17] = ["Your skin's falling apart, the sun killed you."];
    vb[18] = ["Garlic stored in your pockets boiled your brain."];
    vb[19] = ["As a vampire, don't stand near the garlic cloves."];
    vb[20] = ["You ate garlic as a vampire, what did you expect?"];
    vb[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    ᐃⵠᐃⲆⲆ = "Uuunnnggg";
    ᐃⵠΔⲆᐃΔⵠ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  const et = 2;
  function ft(b, c, d, e, f, i) {
    const a = ((e + 12342) * 1103515245 + 12345) % 2147483648;
    const j = (0 << (b >> 24 & 255)) + (24 << (b >> 16 & 255)) + (16 << (b & 255)) + (8 << (b >> 8 & 255)) ^ 5391;
    const k = (j | 54420) & ~(j & 54420);
    const h = (0 << ((k ^ a) >> 16 & 255)) + (24 << ((k ^ a) >> 24 & 255)) + (8 << ((k ^ a) & 255)) + (16 << ((k ^ a) >> 8 & 255));
    const g = ~(h & 44387) & 44387 | ~(h & 44387) & h;
    return ~(g & 8066) & 8066 | ~(g & 8066) & g;
  }
  const gt = 12;
  function ht() {
    lb[184] = ["You feel a great power emanating from this orb"];
    vb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    lb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    lb[328] = " BACK TO THE GAME";
    lb[329] = " Share on Twitter";
    lb[330] = " Share on Facebook";
    lb[331] = "You can buy items on the shop in the next game with your points";
    lb[332] = "points";
    lb[333] = "Score";
    lb[334] = "Kill";
    lb[335] = "Days survived";
    lb[336] = "Building method: Free. Press G to change";
    lb[337] = "Building method: Grid. Press G to change";
    lb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    lb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    lb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    lb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    lb[7] = ["Рука"];
    lb[140] = ["Земля", "Грязно!"];
    lb[126] = ["Песок", "Он в моих глазах!"];
    lb[109] = ["Дерево", "Постоянно нужно больше!"];
    lb[108] = ["Камень", "Твердый"];
    lb[111] = ["Золото", "Будьте щедры, давайте его другим"];
    lb[112] = ["Алмаз", "Что вы создадите с помощью него?"];
    lb[121] = ["Аметист", "Он сиреневый, как Lapa"];
    lb[131] = ["Мука", "Используется в готовке"];
    lb[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    lb[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    lb[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    lb[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    lb[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    lb[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    lb[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    lb[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    lb[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
    lb[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    lb[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
    lb[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    lb[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    lb[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    lb[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    lb[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    lb[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    lb[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    lb[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    lb[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    lb[194] = ["Колючий Куст", "Это больно!"];
    lb[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    lb[142] = ["Лёд", "Используется для изготовления тортов и воды"];
    lb[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    lb[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    lb[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    lb[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    lb[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
    lb[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    lb[139] = ["Чешуя", "Она пахнет рыбой!"];
    lb[129] = ["Шкура Кракена", "Вы не испугались?"];
    lb[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    lb[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    lb[114] = ["Верстак", "Необходим для создания многих предметов"];
    lb[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    lb[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    lb[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    lb[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    lb[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    lb[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    lb[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    lb[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    lb[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    lb[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    lb[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    lb[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    lb[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    lb[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    lb[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    lb[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    lb[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    lb[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    lb[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    lb[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    lb[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    lb[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    lb[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    lb[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    lb[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    lb[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    lb[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    lb[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    lb[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    lb[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    lb[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    lb[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    lb[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    lb[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    lb[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    lb[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    lb[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    lb[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    lb[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    lb[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    lb[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    lb[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    lb[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    lb[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    lb[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    lb[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    lb[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    lb[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    lb[185] = ["Шар Дракона", "Даётся за квест"];
    lb[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    lb[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    lb[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    lb[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    lb[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    lb[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    lb[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    lb[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    lb[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    lb[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    lb[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    lb[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    lb[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    lb[29] = ["Рюкзак", "Больше места для ваших предметов!"];
    lb[120] = ["Бумага", "Используется при создании книги"];
    lb[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    lb[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    lb[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    lb[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    lb[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    lb[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    lb[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    lb[190] = ["Крыша", "Немного скрывает вас и согревает!"];
    lb[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    lb[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    lb[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    lb[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    lb[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    lb[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    lb[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    lb[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    lb[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    lb[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    lb[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    lb[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    lb[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    lb[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    lb[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    lb[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    lb[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    lb[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    lb[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    lb[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    lb[300] = "Вы не можете зайти на этот сервер";
    lb[301] = "Выгнаны: ";
    lb[302] = "Ваш ключ уже используется кем-то";
    lb[303] = "Ваш ключ неправильный";
    lb[304] = "У вас старая версия, вам нужно очистить кеш";
    lb[305] = "Ресурсов больше нет";
    lb[306] = "Вы выжили 1 день";
    lb[307] = "Вы выжили ";
    lb[308] = " дней";
    lb[309] = "Вы умерли ;-;";
    lb[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    lb[311] = "Сервер заполнен! Спамьте кнопку играть!";
    lb[312] = "Ресурсы закончились";
    lb[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    lb[314] = " умер";
    lb[315] = "Это не тот инструмент";
    lb[316] = "Вы вошли в команду";
    lb[317] = "Вы умерли";
    lb[318] = " вошёл в команду";
    lb[319] = "Ваша команда была разрушена";
    lb[320] = "Вы покинули команду";
    lb[321] = " покинул команду";
    lb[322] = "Кто-то использует ваш токен :>";
    lb[323] = "Выберите сервер";
    lb[324] = "игроков";
    lb[325] = "игроков всего";
    lb[326] = "игроков в этом режиме";
    lb[327] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    vb[0] = ["Вы были убиты без причины"];
    vb[1] = ["Вы умерли от голода, как название игры подразумевает это"];
    vb[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    vb[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    vb[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    vb[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    vb[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    vb[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    vb[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    vb[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    vb[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    vb[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    vb[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    vb[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    vb[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    vb[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    vb[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    vb[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    vb[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    vb[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    vb[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    vb[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    ᐃⵠᐃⲆⲆ = "Uuunnnggg";
    ᐃⵠΔⲆᐃΔⵠ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  function it(b, c, d, e, f, g) {
    Qj(io, b, c, d, e, f, g);
    return ((209 + (Yn(bo[0], bo[1], bo[2], bo[3]) ^ Yn(bo[4], bo[5], bo[0], bo[1]))) * 75 + 74) % 65537;
  }
  const jt = 4;
  const kt = 20;
  const lt = 16;
  function mt(b, c, d, e, f) {
    Ai(io, b, c, d, e, f);
    const g = ~(bo[0] & 45551) & 45551 | ~(bo[0] & 45551) & bo[0];
    const a = ~(g & 61305) & (g | 61305);
    const h = (a | 27169) & ~(a & 27169);
    return ~(h & 34151) & (h | 34151);
  }
  function nt() {
    lb[184] = ["You feel a great power emanating from this orb"];
    vb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    lb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    lb[328] = " BACK TO THE GAME";
    lb[329] = " Share on Twitter";
    lb[330] = " Share on Facebook";
    lb[331] = "You can buy items on the shop in the next game with your points";
    lb[332] = "points";
    lb[333] = "Score";
    lb[334] = "Kill";
    lb[335] = "Days survived";
    lb[336] = "Building method: Free. Press G to change";
    lb[337] = "Building method: Grid. Press G to change";
    lb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    lb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    lb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    lb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    lb[7] = ["mão"];
    lb[140] = ["terra", "está sujo!"];
    lb[126] = ["areia", "entrou nos meus olhos!"];
    lb[109] = ["madeira", "você não pode pegar o suficiente disso!"];
    lb[108] = ["pedra", "também chamado rocha"];
    lb[111] = ["ouro", "seja generoso, dê para outros"];
    lb[112] = ["diamante", "o que você irá fazer com isso?"];
    lb[121] = ["ametista", "é mauve como lapa"];
    lb[131] = ["farinha", "usada na cozinha"];
    lb[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
    lb[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    lb[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    lb[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    lb[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    lb[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    lb[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    lb[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    lb[200] = ["doces", "apenas para crianças!", "comida: 100"];
    lb[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    lb[201] = ["pisca-pisca", "decoração perfeita de telhado"];
    lb[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    lb[110] = ["berry", "Berry saborosa!", "comida: 10"];
    lb[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    lb[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    lb[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    lb[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    lb[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    lb[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    lb[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    lb[194] = ["mato de espinhos", "pica!"];
    lb[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    lb[142] = ["gelo", "útil para fazer bolo e água"];
    lb[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    lb[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    lb[2] = ["pele de coelho", "o coelho era tão fofo..."];
    lb[178] = ["pele pura", "você é uma fábrica de pão"];
    lb[179] = ["pele negra", "você está pronto para fazer algo errado"];
    lb[146] = ["pele de inverno", "ele só queria um abraço"];
    lb[139] = ["escala", "é pequeno como peixe!"];
    lb[129] = ["pele do kraken", "você não está com medo?"];
    lb[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    lb[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    lb[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    lb[161] = ["linha", "usada para fazer chapéus e mochila"];
    lb[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
    lb[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    lb[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    lb[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    lb[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    lb[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    lb[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    lb[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    lb[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    lb[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    lb[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    lb[Rr.ⲆⵠⵠᐃⲆΔⵠⵠᐃ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    lb[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    lb[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    lb[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    lb[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    lb[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    lb[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    lb[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    lb[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    lb[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    lb[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    lb[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    lb[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    lb[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    lb[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    lb[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    lb[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    lb[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    lb[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    lb[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    lb[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    lb[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    lb[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    lb[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    lb[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    lb[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    lb[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    lb[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    lb[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    lb[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    lb[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    lb[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    lb[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    lb[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    lb[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    lb[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    lb[185] = ["esfera do dragão", "dado na questt"];
    lb[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    lb[175] = ["pedra verde", "você não vai trapacear, promete?"];
    lb[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    lb[177] = ["pedra azul", "para pessoas muito gentis"];
    lb[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    lb[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    lb[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    lb[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    lb[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    lb[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    lb[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    lb[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    lb[49] = ["regador", "permite regar as plantas", "dano: 1"];
    lb[29] = ["mochila", "mais espaço para seus itens!"];
    lb[120] = ["papel", "usado para fazer o livro"];
    lb[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    lb[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    lb[148] = ["fechadura", "permite você trancar seu baú"];
    lb[158] = ["chave", "permite destrancar um baú"];
    lb[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    lb[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    lb[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    lb[190] = ["telhado", "esconde você um pouco e te esquenta!"];
    lb[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    lb[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    lb[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    lb[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    lb[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    lb[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    lb[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    lb[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    lb[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    lb[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    lb[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    lb[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    lb[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    lb[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    lb[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    lb[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    lb[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    lb[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    lb[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    lb[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    lb[300] = "você não pode entrar no servidor";
    lb[301] = "kickado: ";
    lb[302] = "sua chave está em uso por outra pessoa";
    lb[303] = "sua chave está errada";
    lb[304] = "você tem uma versão velha, limpe seu cache";
    lb[305] = "não tem mais recursos";
    lb[306] = "você sobreviveu 1 dia";
    lb[307] = "você sobreviveu ";
    lb[308] = " dias";
    lb[309] = "você está morto ;-;";
    lb[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    lb[311] = "servidor está cheio! spam o botão de play!";
    lb[312] = "não tem recursos";
    lb[313] = "inventário está cheio (botão direito para deletar itens)";
    lb[314] = " está morto";
    lb[315] = "essa não é a ferramenta certa";
    lb[316] = "você entrou no time";
    lb[317] = "você está morto";
    lb[318] = "entrou no time";
    lb[319] = "seu time foi destruido";
    lb[320] = "você saiu do time";
    lb[321] = " saiu do time";
    lb[322] = "alguém roubou sua ficha :>";
    lb[323] = "escolha um servidor";
    lb[324] = "jogadores";
    lb[325] = "jogadores totais";
    lb[326] = "jogadores nesse modo";
    lb[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    vb[0] = ["você morreu sem motivo"];
    vb[1] = ["você morreu de fome, como o jogo diz"];
    vb[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    vb[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    vb[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    vb[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    vb[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    vb[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    vb[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    vb[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    vb[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    vb[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    vb[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    vb[13] = ["você morreu de sede. melhor beber sua própria urina."];
    vb[14] = ["você sabia que você morre afogado? agora você sabe."];
    vb[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    vb[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    vb[17] = ["sua pele caindo aos pedaços, o sol te matou."];
    vb[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    vb[19] = ["como vampiro, não chegue perto do alho."];
    vb[20] = ["você comeu alho como vampiro, o que você esperava?"];
    vb[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    ᐃⵠᐃⲆⲆ = "Uuunnnggg";
    ᐃⵠΔⲆᐃΔⵠ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  const ot = 2;
  const pt = 12;
  function qt(a, b, c) {
    Ji(io, a, b, c);
    const d = it(bo[0], bo[1], bo[2], bo[0], bo[1], bo[2]);
    at(bo[0], bo[1], bo[2], bo[0]);
    return d ^ 41046;
  }
  function rt(b, c, d, e, f) {
    const i = b ^ 63235;
    const a = ~(c & 60810) & (c | 60810);
    const j = (0 << (d >> 24 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 0 & 255)) + (8 << (d >> 8 & 255));
    const k = (1 + (e + 49035) * 22695477) % 4294967296;
    const h = ab(i, a, j, k, f ^ 57828, i);
    const g = Jw(a, j, k);
    return (16 << ((h ^ g) & 255)) + (8 << ((h ^ g) >> 8 & 255)) + (0 << ((h ^ g) >> 16 & 255)) + (24 << ((h ^ g) >> 24 & 255));
  }
  function st(a, b, c) {
    sj(io, a, b, c);
    const d = mt(bo[0], bo[1], bo[2], bo[0], bo[1]);
    const e = Rf(bo[2], bo[0], bo[1]);
    return (0 << ((d ^ e) >> 8 & 255)) + (24 << ((d ^ e) >> 24 & 255)) + (16 << ((d ^ e) >> 16 & 255)) + (8 << ((d ^ e) >> 0 & 255));
  }
  function tt() {
    lb[184] = ["You feel a great power emanating from this orb"];
    vb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    lb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    lb[328] = " BACK TO THE GAME";
    lb[329] = " Share on Twitter";
    lb[330] = " Share on Facebook";
    lb[331] = "You can buy items on the shop in the next game with your points";
    lb[332] = "points";
    lb[333] = "Score";
    lb[334] = "Kill";
    lb[335] = "Days survived";
    lb[336] = "Building method: Free. Press G to change";
    lb[337] = "Building method: Grid. Press G to change";
    lb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    lb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    lb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    lb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    lb[7] = ["Mano"];
    lb[140] = ["Tierra", "¡Tan limpia como mis manos!"];
    lb[126] = ["Arena", "¡Tengo arena en mis ojos!"];
    lb[109] = ["Madera", "¡Nunca hay suficiente!"];
    lb[108] = ["Piedra", "También llamada roca."];
    lb[111] = ["Oro", "Sé generoso, compártelo con los otros"];
    lb[112] = ["Diamante", "¿Que vas a hacer con él?"];
    lb[121] = ["Amatista", "Es Mauve como Lapa"];
    lb[131] = ["Harina", "Usada para cocinar."];
    lb[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    lb[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    lb[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    lb[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    lb[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    lb[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    lb[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    lb[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    lb[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    lb[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    lb[201] = ["Guirnalda", "Perfecta para decorar el techo"];
    lb[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    lb[110] = ["Baya", "No es venenosa.", "Comida: 10"];
    lb[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    lb[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    lb[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    lb[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    lb[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    lb[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    lb[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    lb[194] = ["Planta de Espinas", "¡Te daña!"];
    lb[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    lb[142] = ["Hielo", "Bueno para hacer tartas y agua"];
    lb[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    lb[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    lb[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    lb[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    lb[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    lb[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    lb[139] = ["Escamas", "¡Huele a pescado!"];
    lb[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    lb[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    lb[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    lb[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    lb[161] = ["Hilo", "Usado para craftear ropa y mochila"];
    lb[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    lb[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    lb[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    lb[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    lb[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    lb[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    lb[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    lb[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    lb[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    lb[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    lb[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    lb[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    lb[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    lb[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    lb[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    lb[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    lb[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    lb[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    lb[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    lb[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    lb[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    lb[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    lb[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    lb[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    lb[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    lb[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    lb[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    lb[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    lb[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    lb[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    lb[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    lb[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    lb[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    lb[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    lb[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    lb[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    lb[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    lb[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    lb[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    lb[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    lb[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    lb[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    lb[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    lb[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    lb[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    lb[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    lb[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    lb[185] = ["Esfera del Dragón", "Dada en la misión"];
    lb[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    lb[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    lb[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    lb[177] = ["Gema Azul", "Para gente muy amable"];
    lb[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    lb[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    lb[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    lb[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    lb[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    lb[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    lb[128] = ["Botella Vacia", "La puedes llenar de agua"];
    lb[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
    lb[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    lb[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
    lb[120] = ["Hoja", "Usada para hacer un libro"];
    lb[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    lb[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    lb[148] = ["Cerradura", "Te permite cerrar tu cofre"];
    lb[158] = ["Llave", "Te permite abrir un cofre cerrado"];
    lb[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    lb[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    lb[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    lb[190] = ["Techo", "Te esconde un poco y te protege del frío"];
    lb[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    lb[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    lb[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    lb[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    lb[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    lb[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    lb[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    lb[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    lb[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    lb[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    lb[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    lb[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    lb[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    lb[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    lb[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    lb[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    lb[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    lb[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    lb[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    lb[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    lb[300] = "No puedes unirte a este servidor";
    lb[301] = "Expulsado: ";
    lb[302] = "Tu llave ya está usada";
    lb[303] = "Tu llave está mal";
    lb[304] = "Tienes una versión antigua, limpia tu cache";
    lb[305] = "No hay mas recursos";
    lb[306] = "Has sobrevivido 1 día";
    lb[307] = "Has sobrevivido ";
    lb[308] = " días";
    lb[309] = "Estás muerto ;-;";
    lb[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    lb[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    lb[312] = "Recurso vacio";
    lb[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    lb[314] = " está muerto";
    lb[315] = "Esta no es la herramienta correcta";
    lb[316] = "Te has unido a un equipo";
    lb[317] = "Estás muerto";
    lb[318] = " se unió al equipo";
    lb[319] = "Tu equipo ha sido destruido";
    lb[320] = "Has dejado el equipo";
    lb[321] = " dejo el equipo ";
    lb[322] = "Alguien te robó tu token :>";
    lb[323] = "Elige un servidor";
    lb[324] = "jugadores";
    lb[325] = "total de jugadores";
    lb[326] = "Jugadores en este modo de juego";
    lb[327] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    vb[0] = ["Has muerto por ninguna razón"];
    vb[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    vb[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    vb[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    vb[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    vb[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    vb[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    vb[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    vb[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    vb[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    vb[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    vb[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    vb[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    vb[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
    vb[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    vb[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    vb[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    vb[17] = ["Tu piel se cayó, el sol te quemó."];
    vb[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    vb[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
    vb[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    vb[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    ᐃⵠᐃⲆⲆ = "Uuunnnggg";
    ᐃⵠΔⲆᐃΔⵠ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  function ut(b, c, d, e, f, g) {
    const a = (0 << (d & 255)) + (8 << (d >> 8 & 255)) + (16 << (d >> 24 & 255)) + (24 << (d >> 16 & 255));
    const i = (0 << (e >> 24 & 255)) + (24 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e & 255));
    const j = Lw((2147483587 + (2548 + b) * 2147483629) % 2147483647, ~(c & 1366) & (c | 1366));
    Lw(a, i);
    return j ^ 57934;
  }
  const vt = 10;
  const eb = 18;
  const ib = 14;
  const tb = 3;
  const nb = 13;
  function ob() {
    lb[184] = ["You feel a great power emanating from this orb"];
    vb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    lb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    lb[328] = " BACK TO THE GAME";
    lb[329] = " Share on Twitter";
    lb[330] = " Share on Facebook";
    lb[331] = "You can buy items on the shop in the next game with your points";
    lb[332] = "points";
    lb[333] = "Score";
    lb[334] = "Kill";
    lb[335] = "Days survived";
    lb[336] = "Building method: Free. Press G to change";
    lb[337] = "Building method: Grid. Press G to change";
    lb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    lb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    lb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    lb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    lb[7] = ["Hand"];
    lb[140] = ["Boden", "Dreckig!"];
    lb[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    lb[109] = ["Holz", "Du kannst niemals zu viel haben!"];
    lb[108] = ["Stein", "Auch Fels gennant"];
    lb[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    lb[112] = ["Diamant", "Was wirst du daraus machen?"];
    lb[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    lb[131] = ["Mehl", "wird fürs Backen gebraucht"];
    lb[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    lb[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    lb[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    lb[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    lb[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    lb[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    lb[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    lb[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    lb[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    lb[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    lb[201] = ["Girlande", "perfekter Schmuck für Dächer"];
    lb[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    lb[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
    lb[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    lb[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    lb[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    lb[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    lb[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    lb[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    lb[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    lb[194] = ["Dornenbusch", "Es sticht!"];
    lb[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    lb[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    lb[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    lb[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    lb[2] = ["Hasenfell", "Der Hase war so süß..."];
    lb[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
    lb[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    lb[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    lb[139] = ["Schuppen", "Es riecht wie Fisch!"];
    lb[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    lb[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    lb[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    lb[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    lb[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    lb[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    lb[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    lb[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    lb[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    lb[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    lb[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    lb[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    lb[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    lb[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    lb[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    lb[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    lb[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    lb[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    lb[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    lb[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    lb[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    lb[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    lb[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    lb[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    lb[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    lb[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    lb[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    lb[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    lb[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    lb[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    lb[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    lb[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    lb[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    lb[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    lb[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    lb[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    lb[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    lb[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    lb[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    lb[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    lb[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    lb[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    lb[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    lb[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    lb[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    lb[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    lb[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    lb[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    lb[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    lb[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    lb[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    lb[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    lb[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    lb[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    lb[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    lb[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    lb[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
    lb[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    lb[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    lb[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    lb[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    lb[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    lb[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    lb[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    lb[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    lb[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    lb[29] = ["Rucksack", "Mehr Platz im Inventar!"];
    lb[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
    lb[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    lb[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    lb[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    lb[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    lb[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    lb[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    lb[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    lb[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    lb[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    lb[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    lb[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    lb[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    lb[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    lb[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    lb[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    lb[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    lb[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    lb[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    lb[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    lb[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    lb[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    lb[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    lb[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    lb[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    lb[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    lb[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    lb[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    lb[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    lb[300] = "Du kannst diesem Server nicht beitreten";
    lb[301] = "Gekickt: ";
    lb[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    lb[303] = "Dein Schlüssel ist falsch";
    lb[304] = "Deine Version ist veraltet, säubere dein Cache";
    lb[305] = "Es gibt keine neuen Ressourcen";
    lb[306] = "Du hast einen Tag überlebt";
    lb[307] = "Du hast überlebt ";
    lb[308] = " Tage";
    lb[309] = "Du bist gestorben ;-;";
    lb[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    lb[311] = "Server ist voll! Drücke immer wieder auf spielen!";
    lb[312] = "Ressource ist leer";
    lb[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    lb[314] = " ist gestorben";
    lb[315] = "Das ist nicht das richtige Werkzeug";
    lb[316] = "Du bist einem Team beigetreten";
    lb[317] = "Du bist gestorben";
    lb[318] = " ist dem Team beigetreten";
    lb[319] = "Dein Team wurde zerstört";
    lb[320] = "Du hast das Team verlassen";
    lb[321] = " hat das Team verlassen";
    lb[322] = "Jemand hat dein Token gestohlen :>";
    lb[323] = "Suche dir ein Server aus";
    lb[324] = "Spieler";
    lb[325] = "alle Spieler";
    lb[326] = "Spieler in diesem Modus";
    lb[327] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    vb[0] = ["Du wurdest ohne Grund getötet"];
    vb[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    vb[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    vb[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    vb[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    vb[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    vb[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    vb[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    vb[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    vb[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    vb[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    vb[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    vb[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    vb[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    vb[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    vb[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    vb[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    vb[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    vb[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    vb[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    vb[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    vb[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    ᐃⵠᐃⲆⲆ = "Uuunnnggg";
    ᐃⵠΔⲆᐃΔⵠ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  function ab(b, c, d, e, f, i) {
    const a = ~(b & 47213) & b | ~(b & 47213) & 47213;
    const j = c ^ 59385;
    const k = (24 << (d >> 8 & 255)) + (8 << (d & 255)) + (0 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
    const h = f ^ 15951;
    const g = ~(i & 12123) & 12123 | ~(i & 12123) & i;
    return (8790 + (Fr(a, j, k, (e | 22764) & ~(e & 22764)) ^ zx(h, g, a, j, k))) % 65353;
  }
  const rb = 4;
  function sb() {
    lb[184] = ["You feel a great power emanating from this orb"];
    vb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    lb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    lb[328] = " BACK TO THE GAME";
    lb[329] = " Share on Twitter";
    lb[330] = " Share on Facebook";
    lb[331] = "You can buy items on the shop in the next game with your points";
    lb[332] = "points";
    lb[333] = "Score";
    lb[334] = "Kill";
    lb[335] = "Days survived";
    lb[336] = "Building method: Free. Press G to change";
    lb[337] = "Building method: Grid. Press G to change";
    lb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    lb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    lb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    lb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    lb[7] = ["Ręka"];
    lb[140] = ["Ziemia", "Brudna!"];
    lb[126] = ["Piasek", "Mam go w oczach!"];
    lb[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    lb[108] = ["Kamień", "Także nazywany skałą"];
    lb[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
    lb[112] = ["Diament", "Co z nim zrobisz?"];
    lb[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    lb[131] = ["Mąka", "Używana w gotowaniu"];
    lb[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    lb[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    lb[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    lb[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    lb[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    lb[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    lb[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    lb[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    lb[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    lb[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    lb[201] = ["Girlanda", "Idealna do dekorowania dachów"];
    lb[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    lb[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    lb[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    lb[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    lb[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    lb[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    lb[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    lb[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    lb[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    lb[194] = ["Kolczasty krzew", "Kłuje!"];
    lb[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    lb[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
    lb[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    lb[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    lb[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    lb[178] = ["Skóra", "Jesteś fabryką chleba"];
    lb[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    lb[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    lb[139] = ["Łuski", "Pachnie jak ryba!"];
    lb[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    lb[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    lb[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    lb[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    lb[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    lb[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    lb[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    lb[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    lb[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    lb[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    lb[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    lb[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    lb[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    lb[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    lb[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    lb[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    lb[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    lb[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    lb[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    lb[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    lb[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    lb[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    lb[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    lb[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    lb[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    lb[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    lb[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    lb[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    lb[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    lb[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    lb[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    lb[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    lb[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    lb[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    lb[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    lb[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    lb[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    lb[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    lb[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    lb[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    lb[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    lb[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    lb[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    lb[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    lb[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    lb[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    lb[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    lb[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    lb[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    lb[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    lb[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    lb[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    lb[185] = ["Smocza kula", "Zdobyta podczas zadania"];
    lb[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    lb[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    lb[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    lb[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    lb[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    lb[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    lb[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    lb[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    lb[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    lb[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    lb[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    lb[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    lb[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    lb[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    lb[120] = ["Papier", "Używany w tworzeniu książki"];
    lb[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    lb[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    lb[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    lb[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    lb[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    lb[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    lb[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    lb[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    lb[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    lb[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    lb[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    lb[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    lb[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    lb[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    lb[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    lb[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    lb[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    lb[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    lb[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    lb[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    lb[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    lb[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    lb[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    lb[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    lb[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    lb[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    lb[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    lb[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    lb[300] = "Nie możesz dołączyć do tego serwera";
    lb[301] = "Wyrzucony: ";
    lb[302] = "Twój klucz jest aktualnie używany przez innego gracza";
    lb[303] = "Twój klucz jest nieprawidłowy";
    lb[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    lb[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    lb[306] = "Przeżyłeś 1 dzień";
    lb[307] = "Przeżyłeś ";
    lb[308] = " dni";
    lb[309] = "Jesteś martwy ;-;";
    lb[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    lb[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    lb[312] = "Źródło jest puste";
    lb[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    lb[314] = " jest martwy";
    lb[315] = "To nie jest właściwe narzędzie";
    lb[316] = "Dołączyłeś do drużyny";
    lb[317] = "Jesteś martwy";
    lb[318] = " dołączył do drużyny";
    lb[319] = "Twoja drużyna została zniszczona";
    lb[320] = " Opuściłeś drużynę";
    lb[321] = " opuścił drużynę";
    lb[322] = "Ktoś ukradł twój żeton :>";
    lb[323] = "Wybierz serwer";
    lb[324] = "graczy";
    lb[325] = "wszystkich graczy";
    lb[326] = "graczy w tym trybie";
    lb[327] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    vb[0] = ["Zostałeś zabity bez powodu"];
    vb[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    vb[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    vb[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    vb[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    vb[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    vb[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    vb[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    vb[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    vb[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    vb[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    vb[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    vb[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    vb[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    vb[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    vb[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    vb[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    vb[17] = ["Twoja skóra odpada, słońce cię zabija."];
    vb[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    vb[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    vb[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    vb[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    ᐃⵠᐃⲆⲆ = "Uuunnnggg";
    ᐃⵠΔⲆᐃΔⵠ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  const hb = 9;
  var gb = function () {
    lb[184] = ["You feel a great power emanating from this orb"];
    vb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    lb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    lb[328] = " RETOUR AU JEU";
    lb[329] = " Partage sur Twitter";
    lb[330] = " Partage sur Facebook";
    lb[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    lb[332] = "points";
    lb[333] = "Score";
    lb[334] = "Tués";
    lb[335] = "Jours survécus";
    lb[336] = "Mode de construction: Libre. Appuie sur G pour changer";
    lb[337] = "Mode de construction: Grille. Appuie sur G pour changer";
    lb[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
    lb[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    lb[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    lb[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    lb[7] = ["Main"];
    lb[140] = ["Terre", "C'est sale!"];
    lb[126] = ["Sable", "J'en ai dans les yeux"];
    lb[109] = ["Bois", "Tu n'en auras jamais trop!"];
    lb[108] = ["Pierre", "Aussi appelée roche"];
    lb[111] = ["Or", "Sois généreux, donne en aux autres"];
    lb[112] = ["Diamant", "Comme tes yeux! wesh"];
    lb[121] = ["Améthyste", "C'est Mauve comme Lapa"];
    lb[131] = ["Farine", "Utile pour la cuisine"];
    lb[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    lb[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    lb[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    lb[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    lb[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    lb[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    lb[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    lb[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    lb[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    lb[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    lb[201] = ["Guirlandes", "Utilisable sur les toits"];
    lb[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    lb[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    lb[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    lb[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
    lb[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    lb[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    lb[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    lb[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    lb[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    lb[194] = ["Ronces", "Ça pique!"];
    lb[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    lb[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    lb[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    lb[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    lb[2] = ["Peau de lapin", "Vous êtes un monstre"];
    lb[178] = ["Fourrure blanche", "Tu es une usine à pain"];
    lb[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    lb[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    lb[139] = ["Écailles", "Ça sent le poisson!"];
    lb[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    lb[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    lb[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    lb[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    lb[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    lb[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    lb[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    lb[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    lb[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    lb[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    lb[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    lb[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    lb[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    lb[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    lb[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    lb[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    lb[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    lb[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    lb[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    lb[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    lb[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    lb[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    lb[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    lb[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    lb[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    lb[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    lb[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    lb[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    lb[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    lb[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    lb[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
    lb[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
    lb[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
    lb[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    lb[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    lb[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    lb[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    lb[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    lb[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    lb[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    lb[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    lb[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    lb[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    lb[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    lb[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    lb[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    lb[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    lb[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    lb[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    lb[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    lb[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    lb[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    lb[185] = ["Orbe du Dragon", "Donné en Quête"];
    lb[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    lb[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    lb[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    lb[177] = ["Gemme bleue", "Pour les gens trop gentils"];
    lb[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    lb[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    lb[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    lb[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    lb[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    lb[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    lb[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    lb[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    lb[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    lb[29] = ["Sac", "Plus de place dans ton inventaire!"];
    lb[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    lb[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    lb[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    lb[148] = ["Cadenas", "Pour verrouiller un coffre"];
    lb[158] = ["Clé", "Pour déverrouiller un coffre"];
    lb[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    lb[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    lb[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    lb[190] = ["Toit", "Te cache un peu et te réchauffe"];
    lb[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    lb[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    lb[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    lb[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    lb[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    lb[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    lb[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    lb[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    lb[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    lb[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    lb[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    lb[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    lb[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    lb[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    lb[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    lb[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    lb[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    lb[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    lb[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    lb[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    lb[300] = "Tu ne peux pas rejoindre le serveur";
    lb[301] = "Expulsé: ";
    lb[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    lb[303] = "Ta clé est fausse";
    lb[304] = "Tu as une vieille version, rafraichis tes caches";
    lb[305] = "Il n'y a plus de nouvelles ressources";
    lb[306] = "Tu as survécu 1 jour";
    lb[307] = "Tu as survécu ";
    lb[308] = " jours";
    lb[309] = "Tu es mort ;-;";
    lb[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    lb[311] = "Le serveur est complet! Spam le bouton jouer";
    lb[312] = "Cette ressource est vide";
    lb[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    lb[314] = " est mort";
    lb[315] = "Ce n'est pas le bon outil";
    lb[316] = "Tu as rejoins une équipe";
    lb[317] = "Tu es mort";
    lb[318] = " a rejoint l'équipe";
    lb[319] = "Ton équipe a été détruite";
    lb[320] = "Tu as quitté l'équipe";
    lb[321] = " a quitté l'équipe";
    lb[322] = "Quelqu'un a volé ton token :>";
    lb[323] = "Choisis un serveur";
    lb[324] = "joueurs";
    lb[325] = "joueurs";
    lb[326] = "joueurs dans ce mode";
    lb[327] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    vb[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
    vb[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    vb[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    vb[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    vb[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    vb[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    vb[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    vb[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    vb[8] = ["Cet ours voulait juste un câlin."];
    vb[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    vb[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    vb[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    vb[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    vb[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    vb[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    vb[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    vb[16] = ["Un kraken a 'kraké' tes os."];
    vb[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    vb[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    vb[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    vb[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    vb[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    ᐃⵠᐃⲆⲆ = "Uuunnnggg";
    ᐃⵠΔⲆᐃΔⵠ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  };
  var lb = [];
  for (var ub = 0; ub < 344; ub++) {
    lb[ub] = "";
  }
  const wt = 1;
  const db = 100;
  var vb = [];
  const mb = 8;
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      dt();
    } else if (a === "Français") {
      gb();
    } else if (a === "Deutsch") {
      ob();
    } else if (a === "Español") {
      tt();
    } else if (a === "Português") {
      nt();
    } else if (a === "Русский") {
      ht();
    } else if (a === "Polski") {
      sb();
    }
    ΔⲆⵠᐃᐃ = [];
    kx.ⲆⲆⲆⲆ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  const cb = 11;
  const pb = 12;
  mr = "EN";
  var Cb = navigator.language || navigator.userLanguage;
  const Tb = 0;
  switch (Cb) {
    case "ru":
      mr = "RU";
      break;
    case "en":
      mr = "EN";
      break;
    case "es":
      mr = "SP";
      break;
    case "fr":
      mr = "FR";
      break;
    case "pl":
      mr = "PL";
      break;
    case "de":
      mr = "DE";
      break;
    case "pt":
      mr = "PT";
  }
  var fb;
  if (mr === "FR") {
    $(".md-languages label button").text("Français");
    fb = gb;
  } else if (mr === "PL") {
    $(".md-languages label button").text("Polski");
    fb = sb;
  } else if (mr === "PT") {
    $(".md-languages label button").text("Português");
    fb = nt;
  } else if (mr === "SP") {
    $(".md-languages label button").text("Español");
    fb = tt;
  } else if (mr === "RU") {
    $(".md-languages label button").text("Русский");
    fb = ht;
  } else if (mr === "DE") {
    $(".md-languages label button").text("Deutsch");
    fb = ob;
  } else {
    $(".md-languages label button").text("English");
    fb = dt;
  }
  ᐃΔ = {
    ΔⵠΔⵠⲆⲆⲆⵠⵠ: "img/logo.png",
    ⲆⵠⵠⵠⲆΔⲆ: "img/mapday.png",
    ⲆⲆⲆΔᐃᐃⲆ: "img/mapnight.png",
    ⲆᐃᐃⵠⲆΔⲆᐃᐃ: "img/bigzday.png",
    ᐃᐃᐃⵠᐃᐃⲆⵠⵠ: "img/bigznight.png",
    ᐃⵠⵠΔΔᐃⵠ: "img/bigday-river1.png",
    ΔⲆⵠⵠⲆⲆᐃⲆⲆ: "img/bigday-lake.png",
    ΔⵠⵠᐃⲆⵠᐃ: "img/bigday-berry.png",
    ΔⵠᐃΔᐃΔⲆ: "img/bigday-stone1.png",
    ᐃᐃⵠᐃᐃᐃⲆ: "img/bigday-stone2.png",
    ᐃⲆⵠⲆⲆᐃΔ: "img/bigday-gold1.png",
    ⵠᐃΔΔᐃⲆⵠ: "img/bigday-gold2.png",
    ⲆᐃⵠΔⵠⲆⲆ: "img/bigday-emerald1.png",
    ⵠΔΔⲆΔⲆΔ: "img/bigday-emerald2.png",
    ⲆⲆⲆⵠΔΔΔ: "img/bigday-amethyst.png",
    ⵠⵠΔᐃΔΔⲆ: "img/bigday-bear.png",
    ⵠⵠᐃⵠΔᐃⵠ: "img/bigday-cave.png",
    ⵠⵠΔⲆⲆᐃⲆ: "img/bigday-diamond.png",
    ᐃⲆΔᐃⲆⲆᐃ: "img/bigday-island.png",
    ⲆⵠᐃⵠᐃΔⵠ: "img/bigday-reidite.png",
    ⵠΔᐃΔΔⲆΔ: "img/bigday-spider.png",
    ᐃⵠⲆᐃⲆⲆΔ: "img/bigday-wolf.png",
    ᐃⲆᐃᐃⲆⲆᐃ: "img/bigday-fir-tree.png",
    ⵠⲆᐃΔⵠⲆᐃ: "img/bigday-fox.png",
    ΔⵠᐃΔᐃᐃΔ: "img/bigday-kraken.png",
    ᐃⵠⲆᐃⲆᐃⲆ: "img/bigday-piranha.png",
    ᐃⲆⵠⵠⲆΔⵠ: "img/bigday-cactus.png",
    Ⲇᐃⵠᐃⵠⵠᐃ: "img/bigday-magma.png",
    ⲆⲆΔⵠⲆΔᐃ: "img/bigday-river1.png",
    ⵠΔⲆᐃᐃΔⵠΔⲆ: "img/bignight-lake.png",
    ᐃᐃΔⲆΔΔⵠᐃⵠ: "img/bignight-berry.png",
    ⲆᐃⵠⵠᐃⲆΔ: "img/bignight-stone1.png",
    ⲆᐃⵠΔⲆⵠⵠ: "img/bignight-stone2.png",
    ⲆⲆⲆᐃⲆⲆⵠ: "img/bignight-gold1.png",
    ⵠΔΔΔⲆⵠⵠ: "img/bignight-gold2.png",
    ΔΔⵠΔᐃⲆⲆ: "img/bignight-emerald1.png",
    ⲆᐃᐃⲆⵠⲆΔ: "img/bignight-emerald2.png",
    ΔᐃⲆⲆⲆΔⵠ: "img/bignight-amethyst.png",
    ΔⲆᐃΔⲆⲆΔ: "img/bignight-bear.png",
    ⲆΔⲆΔⲆⵠΔ: "img/bignight-cave.png",
    ΔⵠⲆⲆⵠᐃᐃ: "img/bignight-diamond.png",
    ᐃⲆΔⵠⲆⵠⲆ: "img/bignight-island.png",
    ⵠΔⵠᐃΔⵠⲆ: "img/bignight-reidite.png",
    ᐃⲆᐃΔⵠΔΔ: "img/bignight-spider.png",
    ᐃⲆᐃΔⵠⵠⲆ: "img/bignight-wolf.png",
    ⲆⵠᐃⵠⲆΔⲆ: "img/bignight-fir-tree.png",
    ᐃᐃⲆⲆⵠⵠᐃ: "img/bignight-fox.png",
    ᐃᐃⵠⵠⵠΔΔ: "img/bignight-kraken.png",
    ᐃⵠΔⵠΔⲆΔ: "img/bignight-piranha.png",
    ⲆⵠᐃⲆⲆᐃΔ: "img/bignight-cactus.png",
    ⲆΔⵠᐃΔΔⵠ: "img/bignight-magma.png",
    ᐃⲆᐃⵠᐃᐃΔ: "img/bigday-desert.png",
    ⵠΔΔΔⲆΔΔ: "img/bigday-winter.png",
    ᐃΔᐃᐃⲆᐃⲆ: "img/bigday-lava.png",
    ᐃⲆⵠⲆⲆⲆⵠ: "img/bigday-forest.png",
    ᐃⵠⵠΔΔⲆⵠ: "img/bignight-desert.png",
    ΔⲆⲆᐃⵠᐃᐃ: "img/bignight-winter.png",
    ᐃⵠⲆΔⵠΔⲆ: "img/bignight-lava.png",
    ΔⵠΔⵠⲆᐃⲆ: "img/bignight-forest.png",
    ᐃᐃᐃΔΔᐃⲆ: "img/day-river-wave.png",
    ᐃⵠΔⲆᐃⲆⵠ: "img/night-river-wave.png",
    ⵠⲆΔΔⲆΔⲆ: "img/day-fog0.png",
    ᐃⵠⵠⵠⲆⵠⲆ: "img/day-fog1.png",
    ΔⲆᐃⵠΔⲆⲆ: "img/day-fog2.png",
    ⵠⲆᐃⵠᐃΔⵠ: "img/night-fog0.png",
    ᐃᐃⵠⲆⲆⲆᐃ: "img/night-fog1.png",
    ᐃⲆᐃⵠΔⵠΔ: "img/night-fog2.png",
    ᐃⲆⵠⵠⵠⲆⲆ: "img/day-fogdesert0.png",
    ⲆᐃⵠΔᐃⵠⵠ: "img/day-fogdesert1.png",
    ᐃᐃᐃΔⵠⲆⵠ: "img/day-fogdesert2.png",
    ᐃᐃΔᐃΔΔᐃ: "img/night-fogdesert0.png",
    ᐃⲆⵠᐃΔΔⵠ: "img/night-fogdesert1.png",
    ᐃⵠᐃⲆᐃⲆᐃ: "img/night-fogdesert2.png",
    ⵠᐃⲆⵠⵠⵠΔ: "img/day-cross-server.png",
    ΔⵠⲆᐃᐃᐃⲆ: "img/day-here-server.png",
    ⲆᐃΔⲆΔᐃⲆ: "img/day-finish-server.png",
    ⵠⵠⵠⲆᐃⲆⲆ: "img/day-item-server.png",
    ᐃⵠᐃⲆΔⵠⵠ: "img/day-skull-server.png",
    ⲆⲆᐃΔᐃΔΔ: "img/night-cross-server.png",
    ᐃᐃΔᐃⵠᐃᐃ: "img/night-here-server.png",
    ⲆⵠⲆⵠⲆⵠⵠ: "img/night-finish-server.png",
    ᐃⲆⵠΔᐃⵠⲆ: "img/night-item-server.png",
    ΔⲆⵠⵠΔⵠⵠ: "img/night-skull-server.png",
    ⵠᐃΔⵠⵠΔΔ: "img/day-reidite0.png",
    ᐃⲆⵠᐃⵠᐃΔ: "img/night-reidite0.png",
    ΔΔⲆΔΔⵠⵠ: "img/day-reidite1.png",
    ᐃΔⲆΔⵠᐃᐃ: "img/night-reidite1.png",
    ᐃᐃΔᐃΔᐃⲆ: "img/day-reidite2.png",
    ⲆᐃⲆᐃⲆⵠᐃ: "img/night-reidite2.png",
    ᐃΔᐃᐃΔΔⲆ: "img/day-lava1.png",
    ᐃᐃΔᐃⲆⲆⵠ: "img/night-lava1.png",
    ⲆⵠⲆᐃΔᐃⲆ: "img/day-lava2.png",
    ΔᐃΔⵠⲆΔᐃ: "img/night-lava2.png",
    ᐃΔᐃⲆⵠⵠⲆ: "img/day-lava3.png",
    ΔⲆΔΔⲆⵠᐃ: "img/night-lava3.png",
    ⲆΔⲆⵠΔⵠⵠ: "img/day-lava4.png",
    ΔᐃⲆΔᐃΔⵠ: "img/night-lava4.png",
    ⲆⲆⲆⵠᐃΔⲆ: "img/day-lava5.png",
    ⲆᐃⵠⲆΔΔⲆ: "img/night-lava5.png",
    ⵠⲆⲆⵠΔΔⵠ: "img/day-lava6.png",
    ᐃⵠᐃᐃᐃΔⵠ: "img/night-lava6.png",
    ᐃⵠⲆⵠⲆᐃⵠ: "img/day-lava-ground1.png",
    ⵠΔⲆᐃⵠᐃᐃ: "img/night-lava-ground1.png",
    ⲆᐃΔᐃΔⲆᐃ: "img/day-lava-ground2.png",
    ⵠⲆΔᐃΔⲆⲆ: "img/night-lava-ground2.png",
    ΔⵠⲆⲆⲆᐃᐃ: "img/day-lava-ground3.png",
    ᐃᐃⵠⲆᐃᐃᐃ: "img/night-lava-ground3.png",
    ΔⲆⲆⵠᐃⲆⵠ: "img/day-lava-ground4.png",
    ΔⲆⵠᐃΔΔᐃ: "img/night-lava-ground4.png",
    ⵠᐃᐃⵠΔⲆⵠ: "img/day-lava-ground5.png",
    ᐃᐃΔᐃΔⵠΔ: "img/night-lava-ground5.png",
    ΔⵠΔⲆΔᐃⵠ: "img/day-lava-ground6.png",
    ⵠᐃΔⲆⲆⵠⲆ: "img/night-lava-ground6.png",
    ᐃᐃⵠᐃᐃⵠⲆ: "img/day-fire-mob.png",
    ⵠⵠⲆⲆⲆⵠΔ: "img/night-fire-mob.png",
    ΔⲆΔⲆΔⲆΔ: "img/hurt-fire-mob.png",
    ⲆᐃⲆⲆⵠΔᐃ: "img/day-diamond-protection.png",
    ᐃΔⵠᐃΔᐃᐃ: "img/night-diamond-protection.png",
    ⲆᐃᐃᐃⵠᐃⲆ: "img/day-hand-diamond-protection.png",
    ΔⲆⲆⵠᐃⵠᐃ: "img/night-hand-diamond-protection.png",
    ΔⲆⵠⵠⲆᐃᐃ: "img/inv-diamond-protection-out.png",
    ᐃΔΔⵠΔⵠⵠ: "img/inv-diamond-protection-in.png",
    ᐃᐃΔᐃᐃⵠⲆ: "img/inv-diamond-protection-click.png",
    ⵠⲆΔΔⲆⲆΔ: "img/day-amethyst-protection.png",
    ⲆⲆΔⵠΔΔΔ: "img/night-amethyst-protection.png",
    ᐃⲆᐃⵠⲆⵠΔᐃΔ: "img/day-hand-amethyst-protection.png",
    ΔᐃⲆᐃⵠΔᐃⵠⵠ: "img/night-hand-amethyst-protection.png",
    ⵠΔⲆⲆⲆⲆⵠ: "img/inv-amethyst-protection-out.png",
    ᐃᐃⲆⵠⵠⲆⲆ: "img/inv-amethyst-protection-in.png",
    ⲆⲆΔⲆⵠᐃⲆ: "img/inv-amethyst-protection-click.png",
    ⲆⵠⵠΔⵠΔⲆ: "img/day-reidite-sword.png",
    ⲆΔⲆⲆᐃⲆⲆ: "img/night-reidite-sword.png",
    ⲆᐃⲆⵠΔΔᐃ: "img/inv-reidite-sword-out.png",
    ᐃⵠΔΔΔᐃⲆ: "img/inv-reidite-sword-in.png",
    ᐃⵠⵠⵠᐃΔⲆ: "img/inv-reidite-sword-click.png",
    ᐃⲆⵠᐃⲆⵠᐃ: "img/inv-reidite-out.png",
    ⵠᐃⵠᐃⵠⵠⲆ: "img/inv-reidite-in.png",
    ⲆⲆᐃⲆΔΔΔ: "img/inv-reidite-click.png",
    ᐃⵠᐃΔⲆⵠⵠ: "img/inv-flame-out.png",
    ⲆᐃᐃΔΔⲆᐃ: "img/inv-flame-in.png",
    ΔⵠⵠⲆⵠⲆΔ: "img/inv-flame-click.png",
    ⲆΔⲆᐃᐃⲆⲆ: "img/day-magma-buble0.png",
    ⵠⵠΔⲆⵠⵠΔ: "img/night-magma-buble0.png",
    ⲆΔⲆᐃΔⲆⲆ: "img/day-magma-buble1.png",
    ᐃⲆⵠⲆⵠΔᐃ: "img/night-magma-buble1.png",
    ⲆᐃΔⲆΔⵠᐃ: "img/day-magma-buble2.png",
    ΔΔⵠΔᐃᐃⲆ: "img/night-magma-buble2.png",
    ⵠᐃᐃΔⲆᐃΔ: "img/day-lava-dragon.png",
    ΔⵠΔⲆᐃⲆᐃ: "img/night-lava-dragon.png",
    ᐃΔⲆⵠⵠⲆⲆᐃᐃ: "img/day-fire-dragon.png",
    ⲆⲆⵠᐃⵠᐃᐃⲆΔ: "img/night-fire-dragon.png",
    ΔᐃᐃⵠⲆⲆⲆ: "img/hurt-lava-dragon.png",
    ᐃᐃᐃⲆᐃⲆΔ: "img/day-lava-wing-left.png",
    ΔⲆⲆΔⵠᐃΔ: "img/night-lava-wing-left.png",
    ΔⲆⵠⵠᐃΔⲆ: "img/day-lava-wing-right.png",
    ᐃⲆΔⲆᐃⲆⵠ: "img/night-lava-wing-right.png",
    ⲆⲆⵠΔⵠΔΔ: "img/hurt-lava-wing-left.png",
    ⲆᐃᐃΔⵠᐃΔ: "img/hurt-lava-wing-right.png",
    ⲆΔΔᐃⲆΔⲆ: "img/day-reidite-spear.png",
    ΔⵠᐃⲆᐃⵠⲆ: "img/night-reidite-spear.png",
    ⵠΔΔΔΔⵠΔ: "img/inv-reidite-spear-out.png",
    ΔⲆⵠΔᐃⵠΔ: "img/inv-reidite-spear-in.png",
    ⵠⵠⲆⵠᐃⵠᐃ: "img/inv-reidite-spear-click.png",
    ⲆᐃᐃᐃⲆᐃᐃ: "img/day-reidite-helmet.png",
    ⲆᐃΔᐃⲆⲆⲆ: "img/night-reidite-helmet.png",
    ⲆΔᐃᐃΔⲆⵠ: "img/inv-reidite-helmet-out.png",
    ⲆᐃⵠᐃⲆⵠΔ: "img/inv-reidite-helmet-in.png",
    ⲆᐃΔᐃⵠⲆᐃ: "img/inv-reidite-helmet-click.png",
    ⲆᐃΔᐃᐃᐃᐃ: "img/day-hand-reidite-protection.png",
    ᐃⵠΔᐃΔⲆⵠ: "img/night-hand-reidite-protection.png",
    ᐃᐃⵠΔᐃᐃΔ: "img/day-reidite-protection.png",
    ⲆᐃΔΔᐃⵠⵠ: "img/night-reidite-protection.png",
    ᐃΔⵠᐃⵠⲆⲆ: "img/inv-reidite-protection-out.png",
    ⲆᐃⵠⲆⲆⲆΔ: "img/inv-reidite-protection-in.png",
    ⵠⵠⲆΔⵠᐃΔ: "img/inv-reidite-protection-click.png",
    ⲆⲆᐃΔⲆΔΔ: "img/day-lava-dragon-sword.png",
    Δᐃⵠᐃᐃᐃⵠ: "img/night-lava-dragon-sword.png",
    ᐃΔⵠΔΔⵠⵠ: "img/inv-lava-dragon-sword-out.png",
    ᐃⵠΔⲆⲆⲆᐃ: "img/inv-lava-dragon-sword-in.png",
    ᐃⲆⲆⲆⵠΔⵠ: "img/inv-lava-dragon-sword-click.png",
    ⲆᐃⲆΔⲆᐃⲆ: "img/day-lava-spear.png",
    ΔⲆᐃΔⲆⵠⵠ: "img/night-lava-spear.png",
    ⵠᐃⵠⵠⲆΔⵠ: "img/inv-lava-spear-out.png",
    ΔⲆⲆⲆⲆᐃⲆ: "img/inv-lava-spear-in.png",
    ⲆΔᐃⲆᐃⵠⲆ: "img/inv-lava-spear-click.png",
    ᐃⵠⵠΔⵠΔⲆ: "img/day-lava-helmet.png",
    ΔᐃᐃⵠᐃⲆᐃ: "img/night-lava-helmet.png",
    ᐃΔᐃᐃⲆⵠᐃ: "img/inv-lava-helmet-out.png",
    ᐃΔⲆᐃᐃΔᐃ: "img/inv-lava-helmet-in.png",
    ΔⵠⵠΔᐃⲆΔ: "img/inv-lava-helmet-click.png",
    ΔⲆΔⲆⵠΔⵠ: "img/day-witch-hat.png",
    ⵠⲆⲆⲆⵠⲆᐃ: "img/night-witch-hat.png",
    ⲆⲆᐃᐃⵠⲆᐃ: "img/inv-witch-hat-out.png",
    ᐃⵠⵠⲆΔΔΔ: "img/inv-witch-hat-in.png",
    ΔᐃΔᐃⲆΔᐃ: "img/inv-witch-hat-click.png",
    ΔⵠᐃᐃΔⵠᐃ: "img/day-nimbus2000.png",
    ⲆⵠⵠΔΔⵠΔ: "img/night-nimbus2000.png",
    ΔⵠᐃᐃΔᐃⲆ: "img/inv-nimbus2000-out.png",
    ΔᐃΔⲆΔΔⵠ: "img/inv-nimbus2000-in.png",
    ᐃⵠᐃΔⵠⲆⲆ: "img/inv-nimbus2000-click.png",
    ⵠⵠⲆᐃΔΔΔ: "img/day-accessory1-pacques.png",
    ⲆⵠⲆᐃᐃⵠᐃ: "img/night-accessory1-pacques.png",
    ⲆⲆᐃᐃⲆΔΔ: "img/day-accessory2-pacques.png",
    ⲆᐃΔΔⲆⵠᐃ: "img/night-accessory2-pacques.png",
    ⲆⵠⲆⵠΔⵠⵠ: "img/day-accessory3-pacques.png",
    ΔⲆΔΔΔᐃᐃ: "img/night-accessory3-pacques.png",
    ΔᐃⵠⵠΔⵠᐃ: "img/day-accessory5-pacques.png",
    ⲆᐃᐃⲆᐃⲆΔ: "img/night-accessory5-pacques.png",
    ΔⵠⵠΔⲆⵠᐃ: "img/day-accessory6-pacques.png",
    ⲆᐃΔᐃΔΔⵠ: "img/night-accessory6-pacques.png",
    ⲆⲆⵠⵠΔᐃᐃ: "img/day-accessory7-pacques.png",
    ᐃΔΔΔⲆΔΔ: "img/night-accessory7-pacques.png",
    ΔᐃⲆΔⵠⵠⵠ: "img/day-accessory8-pacques.png",
    ⲆΔⵠⵠᐃⵠᐃ: "img/night-accessory8-pacques.png",
    ΔⵠⵠⲆΔⵠᐃ: "img/day-bag-pacques.png",
    ⵠⲆΔⵠΔⲆᐃ: "img/night-bag-pacques.png",
    ᐃⵠΔΔΔⲆΔ: "img/day-carrot.png",
    Δᐃᐃⵠⵠⵠᐃ: "img/night-carrot.png",
    ⵠΔⲆᐃⲆⵠⵠ: "img/day-carrot-dried.png",
    ΔΔᐃⲆᐃΔⵠ: "img/night-carrot-dried.png",
    ΔⲆΔⲆΔΔᐃ: "img/day-tomato-herb.png",
    ᐃⵠᐃᐃΔᐃΔ: "img/night-tomato-herb.png",
    ⲆᐃΔΔᐃᐃⵠ: "img/day-tomato-herb-dried.png",
    ⵠᐃⵠᐃᐃΔᐃ: "img/night-tomato-herb-dried.png",
    ⲆᐃᐃⲆⵠᐃⲆ: "img/day-tomato.png",
    ᐃⵠⵠΔΔΔⵠ: "img/night-tomato.png",
    ⲆΔⲆⵠᐃⲆⵠ: "img/inv-carrot-out.png",
    ⲆⲆⲆⲆⵠᐃⲆ: "img/inv-carrot-in.png",
    ⵠΔΔᐃᐃᐃΔ: "img/inv-carrot-click.png",
    ᐃⲆᐃᐃᐃⲆΔ: "img/inv-tomato-out.png",
    ⲆⲆᐃΔⵠⵠΔ: "img/inv-tomato-in.png",
    ΔⵠᐃⲆΔⵠⵠ: "img/inv-tomato-click.png",
    ⲆΔⵠⵠⵠᐃΔ: "img/day-player0.png",
    ⵠⵠᐃⲆΔⲆΔ: "img/night-player0.png",
    ΔⵠⲆΔᐃⵠΔ: "img/day-player1.png",
    ⲆΔⲆⵠⵠⵠⵠ: "img/night-player1.png",
    ⵠⲆᐃⲆⵠⵠᐃ: "img/day-player2.png",
    ΔⵠⵠⵠΔⵠⲆ: "img/night-player22.png",
    ⵠⲆⲆⵠⲆⲆΔ: "img/day-player3.png",
    ΔⵠⵠᐃⲆⵠⵠ: "img/night-player33.png",
    ⲆⲆΔᐃᐃⵠᐃ: "img/day-player4.png",
    ⲆᐃⵠⵠΔⵠⲆ: "img/night-player4.png",
    ⲆᐃΔⲆⵠⲆᐃ: "img/day-player5.png",
    ⵠΔΔⲆᐃΔΔ: "img/night-player5.png",
    ΔΔᐃⵠⵠᐃΔ: "img/day-player6.png",
    ΔⵠΔᐃⵠᐃΔ: "img/night-player6.png",
    ᐃⵠᐃⲆⲆⵠⲆ: "img/day-player7.png",
    ᐃᐃⲆⲆⲆΔᐃ: "img/night-player7.png",
    ⵠΔΔᐃⵠⵠⵠ: "img/day-player8.png",
    ΔⲆⵠᐃⵠΔⵠ: "img/night-player8.png",
    ᐃΔⲆΔⵠⲆⲆ: "img/day-player9.png",
    ΔⵠⲆΔⲆΔⲆ: "img/night-player9.png",
    ⲆᐃⲆΔΔΔΔ: "img/day-player10.png",
    ⵠᐃⲆⲆⲆΔᐃ: "img/night-player10.png",
    ⲆᐃᐃᐃⲆⵠᐃ: "img/day-player11.png",
    ⵠΔⲆⲆᐃⲆⵠ: "img/night-player11.png",
    ⵠᐃΔⵠⲆⵠΔ: "img/day-player12.png",
    ⵠᐃⵠⵠⵠᐃⲆ: "img/night-player12.png",
    ᐃⵠΔΔⵠⲆΔ: "img/day-player13.png",
    ᐃⲆᐃΔᐃⵠᐃ: "img/night-player13.png",
    ⲆᐃΔᐃΔⲆⵠ: "img/day-player14.png",
    ᐃᐃΔⵠᐃΔᐃ: "img/night-player14.png",
    ⵠΔΔΔⵠⲆᐃ: "img/day-player15.png",
    ⲆᐃⲆΔⲆⵠⵠ: "img/night-player15.png",
    ᐃᐃΔΔⵠⵠⲆ: "img/day-player16.png",
    ΔⵠᐃⵠΔΔᐃ: "img/night-player16.png",
    ⵠΔⲆⲆΔΔᐃ: "img/day-player17.png",
    ΔⲆΔΔⲆⵠⲆ: "img/night-player17.png",
    ᐃΔΔΔⲆⵠΔ: "img/day-player18.png",
    ⵠΔⵠⲆΔⲆⵠ: "img/night-player18.png",
    ᐃΔⵠΔᐃⵠⵠ: "img/day-player19.png",
    ⲆΔΔᐃⵠⵠΔ: "img/night-player19.png",
    ⲆⵠⵠᐃΔΔⵠ: "img/day-hand-player0.png",
    ⲆᐃⲆᐃᐃⲆᐃ: "img/night-hand-player0.png",
    ⲆⲆᐃⲆᐃⲆⵠ: "img/day-hand-player1.png",
    ⵠⲆΔⲆΔᐃᐃ: "img/night-hand-player1.png",
    ᐃΔᐃⲆΔᐃᐃ: "img/day-hand-player2.png",
    ΔΔᐃⵠΔⲆⵠ: "img/night-hand-player22.png",
    ΔⲆΔᐃΔᐃⲆ: "img/day-hand-player3.png",
    ᐃⲆᐃᐃⵠΔⲆ: "img/night-hand-player33.png",
    Ⲇᐃᐃᐃᐃⵠⵠ: "img/day-hand-player4.png",
    ⲆⵠΔᐃᐃⲆⲆ: "img/night-hand-player4.png",
    ⵠΔᐃΔⵠⲆⵠ: "img/day-hand-player5.png",
    ᐃⲆⲆⲆΔⵠⵠ: "img/night-hand-player5.png",
    ΔᐃⲆⵠΔΔⵠ: "img/day-hand-player6.png",
    ΔⵠᐃⲆⲆᐃᐃ: "img/night-hand-player6.png",
    ΔᐃΔⲆΔⵠᐃ: "img/day-hand-player7.png",
    ⲆⲆⲆΔⵠᐃΔ: "img/night-hand-player7.png",
    ΔⲆⵠⲆΔΔᐃ: "img/day-hand-player8.png",
    ⵠᐃⲆᐃⲆⲆⲆ: "img/night-hand-player8.png",
    ⵠⲆᐃΔⲆⲆᐃ: "img/day-hand-player9.png",
    ⵠⵠⲆΔⵠᐃⲆ: "img/night-hand-player9.png",
    ⲆⵠΔⵠᐃⵠⲆ: "img/day-hand-player10.png",
    ⲆⲆᐃΔΔᐃΔ: "img/night-hand-player10.png",
    ⲆΔΔΔⵠⵠΔ: "img/day-hand-player11.png",
    ⲆΔᐃᐃⵠΔⵠ: "img/night-hand-player11.png",
    ⵠⵠᐃΔΔΔⲆ: "img/day-hand-player12.png",
    ⵠⵠⵠΔⲆΔΔ: "img/night-hand-player12.png",
    ΔⵠⵠᐃⵠΔΔ: "img/day-hand-player13.png",
    ΔΔⲆⵠⵠⲆΔ: "img/night-hand-player13.png",
    ᐃΔⵠΔⵠᐃⵠ: "img/day-hand-player14.png",
    ΔᐃⲆΔⲆΔᐃ: "img/night-hand-player14.png",
    ᐃⵠⲆⲆⲆΔⲆ: "img/day-hand-player15.png",
    ⲆⵠⵠᐃΔΔⲆ: "img/night-hand-player15.png",
    ΔᐃⲆΔⲆⲆⲆ: "img/day-hand-player16.png",
    ᐃΔΔⲆᐃΔᐃ: "img/night-hand-player16.png",
    ⲆΔΔⵠⵠΔⲆ: "img/day-hand-player17.png",
    ᐃⵠΔⵠⲆⵠΔ: "img/night-hand-player17.png",
    ⲆⲆᐃⵠⲆⵠⵠ: "img/day-hand-player18.png",
    ⲆⲆⵠⲆᐃΔΔ: "img/night-hand-player18.png",
    ⵠⲆΔᐃⵠΔⲆ: "img/day-hand-player19.png",
    ᐃᐃᐃΔΔΔⲆ: "img/night-hand-player19.png",
    ⵠΔᐃⵠⲆᐃⲆ: "img/day-accessory4.png",
    ΔⲆⲆⲆⲆᐃΔ: "img/night-accessory4.png",
    ⵠⲆΔΔᐃΔⲆ: "img/day-accessory9.png",
    ⲆⵠΔⵠⵠᐃⲆ: "img/night-accessory9.png",
    ⲆⵠᐃΔⵠⲆⲆ: "img/day-accessory10.png",
    ᐃⵠⵠⲆⵠⵠᐃ: "img/night-accessory10.png",
    ΔⲆᐃⵠᐃⲆΔ: "img/day-accessory11.png",
    ᐃΔᐃΔᐃⲆⵠ: "img/night-accessory11.png",
    ⵠⵠᐃᐃΔⵠΔ: "img/day-accessory12.png",
    ᐃΔΔᐃⲆⲆᐃ: "img/night-accessory12.png",
    ⵠΔⲆᐃΔᐃⵠ: "img/day-bag.png",
    ᐃΔⲆᐃⵠⲆᐃ: "img/night-bag.png",
    ⲆⲆⲆⲆΔⲆᐃ: "img/inv-bag-out.png",
    ⵠⵠΔⵠΔΔΔ: "img/inv-bag-in.png",
    ⵠΔΔⲆⲆᐃᐃ: "img/inv-bag-click.png",
    ⵠⵠⲆΔΔᐃⵠ: "img/day-pitchfork.png",
    ⲆⲆᐃⲆΔᐃⲆ: "img/night-pitchfork.png",
    ᐃⲆⵠⵠᐃΔⲆ: "img/inv-pitchfork-out.png",
    ΔⲆΔⲆⲆⲆᐃ: "img/inv-pitchfork-in.png",
    ⵠΔⲆⵠⵠΔΔ: "img/inv-pitchfork-click.png",
    ⲆΔⲆΔΔΔⲆ: "img/inv-wood-spike-door-out.png",
    ⲆⵠΔΔᐃΔΔ: "img/inv-wood-spike-door-in.png",
    ⲆⲆᐃᐃΔΔᐃ: "img/inv-wood-spike-door-click.png",
    ⲆⲆⲆⵠⲆᐃᐃ: "img/inv-stone-spike-door-out.png",
    ᐃΔⲆⵠⲆᐃᐃ: "img/inv-stone-spike-door-in.png",
    ⲆⲆⲆᐃⲆⲆⲆ: "img/inv-stone-spike-door-click.png",
    ⲆⵠⵠⵠᐃᐃⲆ: "img/inv-gold-spike-door-out.png",
    ᐃΔⵠⵠⵠⵠᐃ: "img/inv-gold-spike-door-in.png",
    ⲆⵠᐃΔⲆⲆΔ: "img/inv-gold-spike-door-click.png",
    ᐃⲆⵠⲆΔᐃᐃ: "img/inv-diamond-spike-door-out.png",
    ⵠⲆⲆⲆᐃⲆᐃ: "img/inv-diamond-spike-door-in.png",
    ΔΔⵠᐃⵠᐃⲆ: "img/inv-diamond-spike-door-click.png",
    ΔⲆᐃΔⲆΔᐃ: "img/inv-amethyst-spike-door-out.png",
    ΔⲆⲆΔⲆᐃⲆ: "img/inv-amethyst-spike-door-in.png",
    ⵠΔⲆᐃⲆᐃᐃ: "img/inv-amethyst-spike-door-click.png",
    ΔⲆᐃΔᐃⵠⲆ: "img/day-wood-spike-door.png",
    ⵠᐃᐃᐃΔᐃⲆ: "img/night-wood-spike-door.png",
    ΔΔⵠⲆΔⲆΔ: "img/day-stone-spike-door.png",
    ⵠΔᐃΔΔᐃᐃ: "img/night-stone-spike-door.png",
    ᐃΔⵠⲆⵠⵠⵠ: "img/day-gold-spike-door.png",
    ΔΔⵠᐃⵠᐃΔ: "img/night-gold-spike-door.png",
    ΔⲆⲆᐃΔΔⲆ: "img/day-diamond-spike-door.png",
    ᐃⵠᐃⲆⲆΔΔ: "img/night-diamond-spike-door.png",
    ⲆᐃᐃⵠⲆᐃⵠ: "img/day-amethyst-spike-door.png",
    ⲆⵠᐃⲆⵠⲆⵠ: "img/night-amethyst-spike-door.png",
    ⵠΔᐃⵠⵠⲆⵠ: "img/inv-reidite-spike-door-out.png",
    ⲆΔⲆΔⵠⲆⲆ: "img/inv-reidite-spike-door-in.png",
    ᐃⲆΔΔⵠᐃᐃ: "img/inv-reidite-spike-door-click.png",
    ⲆᐃⲆΔⲆⲆΔ: "img/inv-reidite-door-out.png",
    ⵠᐃΔⵠⵠΔⵠ: "img/inv-reidite-door-in.png",
    ΔᐃᐃΔⲆΔΔ: "img/inv-reidite-door-click.png",
    ᐃΔⵠΔᐃⲆⵠ: "img/inv-reidite-spike-out.png",
    ᐃᐃΔᐃⲆΔⲆ: "img/inv-reidite-spike-in.png",
    ⲆΔΔΔⲆⲆⵠ: "img/inv-reidite-spike-click.png",
    ᐃᐃᐃᐃⲆΔⵠ: "img/inv-reidite-wall-out.png",
    ΔΔⵠᐃⲆⵠⲆ: "img/inv-reidite-wall-in.png",
    ᐃΔᐃᐃⲆⵠⲆ: "img/inv-reidite-wall-click.png",
    ⵠΔᐃᐃΔⵠΔ: "img/day-reidite-wall.png",
    ᐃⵠⵠⲆⵠΔⲆ: "img/night-reidite-wall.png",
    ⲆΔⲆⲆⵠⲆⲆ: "img/day-reidite-door.png",
    ᐃⵠⵠⵠⲆⲆⲆ: "img/night-reidite-door.png",
    ΔⲆᐃⲆᐃΔΔ: "img/day-reidite-spike.png",
    ΔⵠᐃⲆᐃᐃⲆ: "img/night-reidite-spike.png",
    ⲆⲆΔⵠⵠⵠⵠ: "img/day-reidite-spike-door.png",
    ᐃⵠⲆⲆⵠⲆⵠ: "img/night-reidite-spike-door.png",
    ⵠᐃᐃⲆⵠᐃΔ: "img/inv-reidite-pickaxe-out.png",
    ⵠΔⲆΔⲆⲆⲆ: "img/inv-reidite-pickaxe-in.png",
    ΔΔᐃⵠⲆΔⲆ: "img/inv-reidite-pickaxe-click.png",
    ⵠⵠΔⲆⲆⵠⲆ: "img/day-reidite-pickaxe.png",
    ⲆⲆΔᐃΔᐃⲆ: "img/night-reidite-pickaxe.png",
    ⵠᐃⵠⲆⵠⲆΔ: "img/inv-reidite-hammer-out.png",
    ᐃΔⲆᐃⲆⲆΔ: "img/inv-reidite-hammer-in.png",
    ⵠⲆΔⵠⲆᐃᐃ: "img/inv-reidite-hammer-click.png",
    ᐃⵠⵠⵠⵠᐃⲆ: "img/day-reidite-hammer.png",
    ᐃⲆᐃⲆⲆⲆΔ: "img/night-reidite-hammer.png",
    ⵠⲆΔΔⵠΔⵠ: "img/day-watermelon1.png",
    ΔΔⵠⲆⲆΔⲆ: "img/night-watermelon1.png",
    ΔᐃΔⵠΔⵠΔ: "img/day-watermelon-dried1.png",
    ΔⵠⵠᐃⵠΔⵠ: "img/night-watermelon-dried1.png",
    ⲆⵠⵠᐃⲆⲆΔ: "img/inv-watermelon-out.png",
    ΔⵠⲆᐃᐃⲆⲆ: "img/inv-watermelon-in.png",
    ᐃᐃⲆⵠⵠᐃᐃ: "img/inv-watermelon-click.png",
    ⲆΔⵠᐃⲆⵠΔ: "img/day-boat.png",
    ᐃΔⵠⵠᐃⲆⵠ: "img/night-boat.png",
    ᐃᐃⲆΔⲆᐃⵠ: "img/day-boat-wave.png",
    ⲆΔᐃΔⲆⲆΔ: "img/night-boat-wave.png",
    ⵠⲆᐃᐃⲆᐃⲆ: "img/inv-boat-out.png",
    ⲆᐃⲆⲆⲆᐃᐃ: "img/inv-boat-in.png",
    ᐃΔΔᐃΔᐃⲆ: "img/inv-boat-click.png",
    ⲆΔᐃⲆᐃᐃᐃ: "img/day-plane.png",
    ⲆⵠⲆⲆᐃᐃᐃ: "img/night-plane.png",
    ΔΔᐃⲆᐃⲆΔ: "img/inv-plane-out.png",
    ΔⵠᐃⵠᐃΔΔ: "img/inv-plane-in.png",
    ΔⲆⲆΔⲆΔⲆ: "img/inv-plane-click.png",
    ⲆᐃΔΔΔⵠⲆ: "img/day-sled.png",
    ⵠⵠᐃⲆⵠⲆⵠ: "img/night-sled.png",
    ᐃⲆⲆᐃⲆΔΔ: "img/day-sled-wave.png",
    ΔᐃΔᐃΔᐃⲆ: "img/night-sled-wave.png",
    ⵠⵠᐃᐃΔΔᐃ: "img/inv-sled-out.png",
    ⲆⲆΔⲆΔΔᐃ: "img/inv-sled-in.png",
    ⲆᐃΔⵠⲆⵠⲆ: "img/inv-sled-click.png",
    ⲆⵠⲆⵠΔⲆΔ: "img/day-pirate-hat.png",
    ΔⵠⵠΔⵠᐃΔ: "img/night-pirate-hat.png",
    ⵠⵠⵠⲆⲆⵠⵠ: "img/inv-pirate-hat-out.png",
    ᐃⵠⲆΔΔⲆΔ: "img/inv-pirate-hat-in.png",
    ⲆΔᐃⵠᐃΔⵠ: "img/inv-pirate-hat-click.png",
    ⲆⲆⵠⵠⲆⵠⵠ: "img/day-penguin.png",
    ᐃΔⲆⲆᐃⵠⲆ: "img/night-penguin.png",
    ⵠΔⲆⲆΔⲆⵠ: "img/hurt-penguin.png",
    ΔᐃΔⲆᐃ: "img/inv-penguin-feather-click.png",
    ΔⲆᐃⲆⲆ: "img/inv-hawk-feather-click.png",
    ᐃᐃᐃᐃⲆⵠⲆ: "img/day-boar1.png",
    ᐃᐃⲆⲆⵠⲆⲆ: "img/day-boar1-tamed.png",
    ⵠᐃᐃⲆⲆⵠᐃ: "img/day-boar1-angry.png",
    ᐃᐃⵠⵠᐃΔⵠ: "img/night-boar1.png",
    ⵠΔᐃΔⵠⲆᐃ: "img/night-boar1-tamed.png",
    ⲆⵠᐃⲆᐃⲆΔ: "img/night-boar1-angry.png",
    ⲆⲆⲆⲆᐃᐃⵠ: "img/inv-mount-boar-out.png",
    ᐃⵠᐃⵠⲆⵠΔ: "img/inv-mount-boar-in.png",
    ⲆⵠⲆᐃᐃᐃΔ: "img/inv-mount-boar-click.png",
    ⲆⵠᐃⲆᐃⲆᐃ: "img/day-hurt-boar1.png",
    ⲆΔᐃⲆⵠⵠⵠ: "img/boar1-step.png",
    ΔΔΔᐃᐃⲆᐃ: "img/day-saddle1.png",
    ⲆΔΔⲆᐃⵠᐃ: "img/night-saddle1.png",
    ⵠᐃᐃᐃⲆᐃᐃ: "img/inv-saddle-out.png",
    ᐃᐃⲆⵠᐃⲆΔ: "img/inv-saddle-in.png",
    ᐃⲆⵠⲆⲆⵠΔ: "img/inv-saddle-click.png",
    ⵠΔⵠⲆᐃΔᐃ: "img/day-magic-wand0.png",
    ΔⲆΔⲆⵠⵠⲆ: "img/night-magic-wand0.png",
    ⲆⵠⵠΔⲆΔᐃ: "img/day-light-wand1.png",
    ΔᐃΔⲆⲆΔΔ: "img/night-light-wand1.png",
    ΔⵠⲆⲆⵠᐃΔ: "img/inv-magic-wand0-out.png",
    ᐃΔΔᐃΔⲆᐃ: "img/inv-magic-wand0-in.png",
    ΔⲆΔΔΔΔᐃ: "img/inv-magic-wand0-click.png",
    ᐃⵠᐃΔᐃᐃᐃ: "img/day-magic-wand1.png",
    ᐃⵠⵠᐃΔᐃⵠ: "img/night-magic-wand1.png",
    ᐃⵠⲆⵠⵠⵠΔ: "img/day-light-wand0.png",
    ΔⲆⵠⲆⲆᐃⲆ: "img/night-light-wand0.png",
    ΔᐃⵠⲆᐃⵠⵠ: "img/inv-magic-wand1-out.png",
    ᐃⲆΔΔⵠⲆᐃ: "img/inv-magic-wand1-in.png",
    ᐃᐃⲆⲆΔⵠⲆ: "img/inv-magic-wand1-click.png",
    ΔⲆⲆⵠᐃΔⲆ: "img/day-firefly.png",
    ᐃΔΔΔΔΔΔ: "img/night-firefly.png",
    ⵠⲆᐃΔᐃᐃΔ: "img/hurt-firefly.png",
    ⵠⵠᐃⵠⵠᐃᐃ: "img/inv-firefly-out.png",
    ΔᐃⲆⵠⲆᐃᐃ: "img/inv-firefly-in.png",
    ΔᐃⲆⵠⲆⲆΔ: "img/inv-firefly-click.png",
    ⵠⲆⲆⵠΔᐃⲆ: "img/day-baby-dragon.png",
    ⲆⲆⲆᐃⵠⲆⵠ: "img/night-baby-dragon.png",
    ᐃⲆⲆΔΔᐃᐃ: "img/day-baby-dragon-angry.png",
    ᐃᐃΔⲆΔΔⲆ: "img/night-baby-dragon-angry.png",
    ΔⲆⲆᐃⲆⵠⲆ: "img/day-baby-dragon-tamed.png",
    ᐃᐃΔⵠⵠⲆΔ: "img/night-baby-dragon-tamed.png",
    ⲆⵠΔΔΔΔⲆ: "img/day-wing-dragon-left-angry.png",
    ⵠⲆⲆⲆⵠᐃⲆ: "img/night-dragon-wing-left-angry.png",
    ΔΔⵠΔⵠⵠᐃ: "img/day-wing-dragon-right-angry.png",
    ᐃᐃᐃⲆⵠⵠⲆ: "img/night-dragon-wing-right-angry.png",
    Ⲇᐃᐃⵠᐃᐃᐃ: "img/day-wing-dragon-left-tamed.png",
    ⲆᐃΔᐃΔⵠⲆ: "img/night-dragon-wing-left-tamed.png",
    ΔⵠᐃⲆᐃᐃⵠ: "img/day-wing-dragon-right-tamed.png",
    ⵠᐃΔⲆⲆᐃΔ: "img/night-wing-dragon-right-tamed.png",
    ⲆⵠΔΔⲆΔⵠ: "img/day-wing-dragon-left.png",
    ᐃⵠⲆⵠᐃⵠⵠ: "img/night-dragon-wing-left.png",
    ᐃⵠᐃⲆⲆⵠⵠ: "img/day-wing-dragon-right.png",
    ⲆΔᐃⲆΔⲆΔ: "img/night-wing-dragon-right.png",
    ΔΔᐃⵠⲆⲆᐃ: "img/hurt-baby-dragon.png",
    ⲆΔⲆᐃΔΔΔ: "img/hurt-baby-dragon-wing-left.png",
    ⵠⲆΔΔΔᐃⵠ: "img/hurt-baby-dragon-wing-right.png",
    ⲆⲆᐃⲆᐃⵠⵠ: "img/inv-baby-dragon-out.png",
    ᐃⵠⲆΔⵠΔᐃ: "img/inv-baby-dragon-in.png",
    ΔⲆᐃⲆⲆΔⵠ: "img/inv-baby-dragon-click.png",
    ⲆⵠᐃⲆⵠⵠⵠ: "img/day-baby-lava.png",
    ᐃⵠΔⵠⵠᐃⲆ: "img/night-baby-lava.png",
    ⲆⵠⵠⲆᐃᐃᐃ: "img/day-baby-lava-angry.png",
    ᐃⵠⲆⵠΔⲆⵠ: "img/night-baby-lava-angry.png",
    ⵠⵠⵠⲆΔΔᐃ: "img/day-baby-lava-tamed.png",
    ⵠᐃᐃᐃΔⲆⲆ: "img/night-baby-lava-tamed.png",
    ⲆⲆᐃᐃΔⵠⵠ: "img/day-wing-lava-left-angry.png",
    ΔⲆΔⵠΔᐃᐃ: "img/night-wing-lava-left-angry.png",
    ⲆΔⵠⲆΔᐃΔ: "img/day-wing-lava-right-angry.png",
    ᐃᐃⲆⵠΔⲆΔ: "img/night-wing-lava-right-angry.png",
    ΔⲆᐃΔⵠΔᐃ: "img/day-wing-lava-left-tamed.png",
    ⲆᐃΔⵠⵠⵠⵠ: "img/night-wing-lava-left-tamed.png",
    ⵠⵠΔᐃᐃΔᐃ: "img/day-wing-lava-right-tamed.png",
    ⵠᐃᐃⲆⵠᐃⵠ: "img/night-wing-lava-right-tamed.png",
    ΔⲆⲆⵠΔΔᐃ: "img/day-wing-lava-left.png",
    ᐃΔΔΔᐃⲆΔ: "img/night-wing-lava-left.png",
    ⲆᐃⲆⵠΔᐃⵠ: "img/day-wing-lava-right.png",
    ΔⵠΔⲆᐃⵠᐃ: "img/night-wing-lava-right.png",
    ΔΔⲆⲆⵠⲆΔ: "img/hurt-baby-lava.png",
    ⲆⵠΔⵠⲆΔⲆ: "img/hurt-baby-lava-wing-left.png",
    ⲆᐃⲆᐃΔⵠᐃ: "img/hurt-baby-lava-wing-right.png",
    ᐃⲆⲆΔⲆΔⲆ: "img/inv-baby-lava-out.png",
    ΔⵠⵠⵠΔⵠΔ: "img/inv-baby-lava-in.png",
    ⵠⵠᐃⵠⵠⵠⲆ: "img/inv-baby-lava-click.png",
    ΔΔᐃⵠΔⲆⲆ: "img/day-falcon.png",
    ⲆΔΔΔⵠΔⲆ: "img/night-falcon.png",
    ᐃⲆⲆΔᐃΔᐃ: "img/day-falcon-angry.png",
    ⲆⵠΔⵠⵠΔⵠ: "img/night-falcon-angry.png",
    ⵠⲆΔⲆΔⵠⵠ: "img/day-falcon-ground.png",
    ᐃᐃΔᐃⲆᐃΔ: "img/night-falcon-ground.png",
    ᐃⲆᐃΔⵠⲆⵠ: "img/day-falcon-ground-angry.png",
    ⲆΔⲆⵠΔᐃΔ: "img/night-falcon-ground-angry.png",
    ΔⵠΔⲆⲆΔⲆ: "img/day-falcon-wings-left.png",
    ΔⲆⵠⵠⵠⵠⵠ: "img/night-falcon-wings-left.png",
    ⲆⲆⲆᐃΔΔⲆ: "img/day-falcon-wings-right.png",
    ⲆⲆⲆⲆᐃᐃΔ: "img/night-falcon-wings-right.png",
    ⵠΔΔΔᐃΔⲆ: "img/day-falcon-angry-wings-left.png",
    ᐃⵠⲆᐃΔΔΔ: "img/night-falcon-angry-wings-left.png",
    ⵠⵠⲆᐃⲆⵠⲆ: "img/day-falcon-angry-wings-right.png",
    ⵠⲆⲆⵠΔⲆⵠ: "img/night-falcon-angry-wings-right.png",
    ⵠᐃⲆⵠΔⲆΔ: "img/day-falcon-wings-left-tamed.png",
    ᐃᐃⵠⵠⲆⲆᐃ: "img/night-falcon-wings-left-tamed.png",
    ΔΔΔⵠⲆᐃⲆ: "img/day-falcon-wings-right-tamed.png",
    ⵠⲆⵠᐃⲆᐃᐃ: "img/night-falcon-wings-right-tamed.png",
    ᐃᐃᐃⵠᐃⵠⲆ: "img/day-falcon-tamed.png",
    ᐃⲆᐃᐃᐃⲆᐃ: "img/night-falcon-tamed.png",
    ᐃᐃᐃΔⲆᐃΔ: "img/hurt-falcon-ground.png",
    ΔΔⵠⵠⵠΔⲆ: "img/hurt-falcon.png",
    ⲆΔᐃⵠⲆΔᐃ: "img/hurt-falcon-wings-left.png",
    ΔⵠΔⵠⲆᐃᐃ: "img/hurt-falcon-wings-right.png",
    ᐃⲆⵠᐃᐃΔⲆ: "img/inv-falcon-out.png",
    ⵠⲆᐃᐃᐃᐃᐃ: "img/inv-falcon-in.png",
    ΔΔⲆⲆᐃΔⲆ: "img/inv-falcon-click.png",
    ⲆⲆⵠᐃⲆⵠᐃ: "img/day-crab-boss.png",
    ΔΔⲆⲆΔΔⵠ: "img/night-crab-boss.png",
    ⲆᐃⵠΔⵠⲆΔ: "img/day-crab-boss-angry.png",
    ΔⵠᐃΔⲆⲆⵠ: "img/night-crab-boss-angry.png",
    ⲆᐃⵠⲆⲆᐃΔ: "img/day-crab-boss-tamed.png",
    ⲆΔⵠΔΔⵠⵠ: "img/night-crab-boss-tamed.png",
    ᐃⲆⲆᐃⵠᐃⲆ: "img/day-crab-boss-claw-left-attack.png",
    ΔⵠΔⵠⵠΔᐃ: "img/night-crab-boss-claw-left-attack.png",
    ⵠΔⲆᐃᐃΔⲆ: "img/day-crab-boss-claw-right-attack.png",
    ᐃⲆⲆⵠΔΔⲆ: "img/night-crab-boss-claw-right-attack.png",
    ΔᐃΔΔⲆΔᐃⲆΔ: "img/day-crab-boss-claw-left-tamed.png",
    ΔⵠⵠⲆᐃΔΔⲆΔ: "img/night-crab-boss-claw-left-tamed.png",
    ⲆⲆᐃᐃΔᐃᐃⲆᐃ: "img/day-crab-boss-claw-right-tamed.png",
    ΔΔⵠΔᐃⲆΔⲆⵠ: "img/night-crab-boss-claw-right-tamed.png",
    ⵠⵠᐃⲆΔΔᐃ: "img/day-crab-boss-claw-left.png",
    ΔⵠⲆⲆⲆⵠᐃ: "img/night-crab-boss-claw-left.png",
    ᐃΔΔΔᐃⲆᐃ: "img/day-crab-boss-claw-right.png",
    ᐃⵠⲆᐃᐃⵠⲆ: "img/night-crab-boss-claw-right.png",
    ΔΔΔΔⵠⲆⵠ: "img/hurt-crab-boss.png",
    ΔΔⵠᐃᐃΔⲆ: "img/hurt-crab-boss-claw-left.png",
    ᐃᐃⲆⵠΔΔΔ: "img/hurt-crab-boss-claw-right.png",
    ⵠⵠⵠⲆᐃᐃᐃ: "img/heal-crab-boss.png",
    ⲆⲆΔⵠᐃⲆΔ: "img/heal-crab-boss-claw-left.png",
    ⵠΔᐃⲆᐃΔⲆ: "img/heal-crab-boss-claw-right.png",
    Ⲇⵠⵠⵠⵠⵠᐃ: "img/crab-step.png",
    ΔᐃΔᐃᐃᐃᐃ: "img/inv-crab-boss-out.png",
    ᐃⵠᐃΔᐃⲆⲆ: "img/inv-crab-boss-in.png",
    ⵠΔᐃΔᐃᐃⲆ: "img/inv-crab-boss-click.png",
    ΔⲆΔⵠⵠᐃΔ: "img/day-cactus10.png",
    ΔΔᐃΔⲆᐃⵠ: "img/night-cactus10.png",
    ᐃⵠⵠΔΔⲆᐃ: "img/inv-cactus-out.png",
    ᐃΔⵠⵠⵠᐃΔ: "img/inv-cactus-in.png",
    ΔᐃⲆᐃⵠⵠᐃ: "img/inv-cactus-click.png",
    ⵠⵠᐃⵠᐃⲆᐃ: "img/day-scorpion.png",
    ⵠⲆᐃⲆᐃΔᐃ: "img/night-scorpion.png",
    ⵠⲆΔⲆΔⵠᐃ: "img/day-scorpion-hand-left.png",
    ΔΔⲆⵠᐃⵠⲆ: "img/night-scorpion-hand-left.png",
    ⲆᐃΔᐃⵠΔΔ: "img/day-scorpion-hand-right.png",
    ᐃⲆⵠΔⵠⲆΔ: "img/night-scorpion-hand-right.png",
    ΔⵠΔΔⵠᐃⵠ: "img/hurt-scorpion.png",
    ⲆᐃᐃⲆⲆΔΔ: "img/hurt-scorpion-hand-left.png",
    ΔΔⲆⵠⵠⲆⵠ: "img/hurt-scorpion-hand-right.png",
    ⲆⲆΔᐃⵠⵠΔ: "img/day-vulture.png",
    ᐃⲆⵠᐃⲆᐃᐃ: "img/night-vulture.png",
    ⲆⵠᐃⵠⲆⲆΔ: "img/day-vulture-angry.png",
    ⲆᐃⲆᐃᐃⵠᐃ: "img/night-vulture-angry.png",
    ᐃⵠⲆᐃⲆᐃᐃ: "img/day-vulture-ground.png",
    ⵠⵠⵠΔⲆⵠΔ: "img/night-vulture-ground.png",
    ΔⲆᐃⲆⲆΔᐃ: "img/day-vulture-ground-angry.png",
    ᐃΔⵠⵠⵠᐃᐃ: "img/night-vulture-ground-angry.png",
    ⵠΔⲆⵠⲆᐃΔ: "img/day-vulture-wings-left.png",
    ⵠΔᐃᐃⲆⵠᐃ: "img/night-vulture-wings-left.png",
    ᐃⵠⵠⲆⵠⲆⵠ: "img/day-vulture-wings-right.png",
    ⵠⲆᐃⲆᐃᐃΔ: "img/night-vulture-wings-right.png",
    ⵠⲆᐃⲆⲆⲆⲆ: "img/day-vulture-angry-wings-left.png",
    ⵠⲆΔᐃⲆΔⵠ: "img/night-vulture-angry-wings-left.png",
    ΔⲆᐃᐃΔⵠⵠ: "img/day-vulture-angry-wings-right.png",
    ΔΔᐃⲆΔⲆΔ: "img/night-vulture-angry-wings-right.png",
    ΔΔⵠⲆΔⲆⵠ: "img/day-vulture-wings-left-tamed.png",
    ⵠΔΔⵠⵠΔᐃ: "img/night-vulture-wings-left-tamed.png",
    ⵠΔΔᐃΔⵠΔ: "img/day-vulture-wings-right-tamed.png",
    ⲆᐃⵠΔⲆⵠΔ: "img/night-vulture-wings-right-tamed.png",
    ΔⵠⲆᐃⵠⲆⵠ: "img/day-vulture-tamed.png",
    ᐃΔᐃⵠⲆⲆⵠ: "img/night-vulture-tamed.png",
    ⵠⲆⵠⲆᐃⵠⵠ: "img/hurt-vulture-ground.png",
    ⵠᐃⲆⵠᐃⵠⵠ: "img/hurt-vulture.png",
    ⲆᐃⵠΔΔⵠⲆ: "img/hurt-vulture-wings-left.png",
    ⵠΔⲆᐃⵠΔⲆ: "img/hurt-vulture-wings-right.png",
    ΔⵠᐃⲆⲆⲆⲆ: "img/day-aloe-vera.png",
    ΔⲆⵠᐃΔᐃⲆ: "img/night-aloe-vera.png",
    ᐃᐃᐃⲆΔᐃᐃ: "img/inv-aloe-vera-out.png",
    ⵠΔᐃΔⵠⵠⲆ: "img/inv-aloe-vera-in.png",
    ᐃΔᐃΔΔΔᐃ: "img/inv-aloe-vera-click.png",
    ⲆᐃΔᐃᐃⲆΔ: "img/day-aloe-vera-grown.png",
    ⵠᐃⲆΔⵠⲆᐃ: "img/night-aloe-vera-grown.png",
    ⲆⵠⵠⵠⲆᐃᐃ: "img/day-aloe-vera-dried.png",
    ᐃᐃᐃⵠⲆΔΔ: "img/night-aloe-vera-dried.png",
    ⲆΔⲆⲆⲆΔΔ: "img/day-turban1.png",
    ᐃⲆⵠΔⵠᐃⵠ: "img/night-turban1.png",
    ⵠΔⵠΔⵠⵠΔ: "img/day-turban2.png",
    ⵠⲆⵠⲆⵠΔⲆ: "img/night-turban2.png",
    ⵠⲆΔᐃⲆⵠΔ: "img/inv-turban2-out.png",
    ΔᐃᐃΔᐃᐃⵠ: "img/inv-turban2-in.png",
    ᐃⲆⵠᐃⵠᐃᐃ: "img/inv-turban2-click.png",
    ΔᐃⲆᐃΔΔⵠ: "img/inv-turban1-out.png",
    ΔⵠΔΔⵠΔᐃ: "img/inv-turban1-in.png",
    ⵠᐃᐃⲆΔⵠⲆ: "img/inv-turban1-click.png",
    ΔⲆⵠⵠⲆⲆⲆ: "img/day-pitchfork2.png",
    ᐃᐃⵠⵠⲆⵠΔ: "img/night-pitchfork2.png",
    ΔⲆⵠⵠᐃⲆⲆ: "img/inv-pitchfork2-out.png",
    ᐃⵠᐃⲆⵠⵠᐃ: "img/inv-pitchfork2-in.png",
    ΔᐃⲆᐃΔⵠⵠ: "img/inv-pitchfork2-click.png",
    ᐃΔΔⵠⵠΔⲆ: "img/inv-gold-fork-click.png",
    ᐃⲆΔΔⵠⵠⲆ: "img/inv-pilot-glasses-click.png",
    ⲆⵠⵠΔⲆⲆΔ: "img/day-pilot-helmet.png",
    ᐃⵠᐃᐃᐃⵠⵠ: "img/night-pilot-helmet.png",
    ᐃΔᐃΔΔⵠⵠ: "img/inv-pilot-helmet-out.png",
    ⲆⵠⲆⲆⲆⲆⵠ: "img/inv-pilot-helmet-in.png",
    ⵠⵠᐃᐃᐃΔᐃ: "img/inv-pilot-helmet-click.png",
    ⵠⲆᐃᐃΔⵠⵠΔᐃ: "img/day-sandworm0.png",
    ⵠⲆΔⵠⵠⵠΔ: "img/day-sandworm1.png",
    ⲆᐃⲆΔΔΔᐃ: "img/day-sandworm2.png",
    ΔⲆⲆⲆΔⵠⲆΔΔ: "img/night-sandworm0.png",
    ᐃᐃΔⵠᐃᐃᐃ: "img/night-sandworm1.png",
    ΔⲆᐃⲆⵠΔΔ: "img/night-sandworm2.png",
    ⵠΔᐃΔⵠΔᐃ: "img/hurt-sandworm0.png",
    ⲆᐃⵠΔⵠΔᐃ: "img/hurt-sandworm1.png",
    ⵠⲆΔΔⵠΔⲆ: "img/hurt-sandworm2.png",
    ΔΔⲆΔⵠ: "img/inv-vulture-feather-click.png",
    ⲆⲆΔⵠⵠⲆΔ: "img/day-emerald0.png",
    ⲆⲆΔᐃΔⲆΔ: "img/night-emerald0.png",
    ⵠⲆⲆⲆᐃⲆΔ: "img/day-emerald1.png",
    ᐃᐃᐃⵠΔᐃⲆ: "img/night-emerald1.png",
    ᐃΔᐃⵠΔᐃⲆ: "img/day-emerald2.png",
    ᐃⲆΔᐃⵠⵠⵠ: "img/night-emerald2.png",
    ⵠⲆΔᐃΔ: "img/inv-emerald-click.png",
    ΔᐃᐃᐃᐃΔΔ: "img/inv-sworm-juice-out.png",
    ⲆⲆⲆᐃⵠᐃΔ: "img/inv-sworm-juice-in.png",
    ΔΔᐃΔᐃⲆⵠ: "img/inv-sworm-juice-click.png",
    ⵠᐃⲆⲆⵠᐃⵠ: "img/day-point-machine.png",
    ⲆΔⵠᐃᐃⲆΔ: "img/night-point-machine.png",
    ⲆⲆᐃᐃⲆⲆᐃ: "img/day-point-machine-hole.png",
    ⲆΔΔᐃΔᐃⲆ: "img/night-point-machine-hole.png",
    ⵠΔᐃΔⵠᐃⵠ: "img/day-point-machine-ground.png",
    ⵠⲆⲆⲆΔⵠⵠ: "img/night-point-machine-ground.png",
    ⲆΔⵠⲆⵠⲆⵠ: "img/day-point-machine-rotate.png",
    ⲆΔⲆᐃΔⲆⵠ: "img/night-point-machine-rotate.png",
    ⵠΔΔⵠⲆⲆⵠ: "img/inv-point-machine-out.png",
    ᐃΔⵠΔᐃⵠⲆ: "img/inv-point-machine-in.png",
    ⲆⵠⵠΔⲆⲆᐃ: "img/inv-point-machine-click.png",
    ⵠΔΔΔΔⲆᐃ: "img/day-extractor-machine0-stone.png",
    ᐃΔΔⵠⵠᐃⵠ: "img/night-extractor-machine0-stone.png",
    ⲆⲆΔⵠᐃᐃΔ: "img/day-extractor-machine-stone.png",
    ⲆⵠⵠΔΔΔⵠ: "img/night-extractor-machine-stone.png",
    ⵠⵠΔⲆⵠⵠⲆ: "img/inv-extractor-machine-stone-out.png",
    ⵠⲆⲆⲆΔᐃᐃ: "img/inv-extractor-machine-stone-in.png",
    ⵠⲆᐃᐃΔⲆᐃ: "img/inv-extractor-machine-stone-click.png",
    ⵠⲆⲆᐃⲆΔⵠ: "img/day-extractor-machine0-gold.png",
    ᐃⵠΔⵠΔᐃᐃ: "img/night-extractor-machine0-gold.png",
    ⵠⵠΔⵠⵠⲆᐃ: "img/day-extractor-machine-gold.png",
    ΔⲆᐃⵠᐃⵠⵠ: "img/night-extractor-machine-gold.png",
    ⵠⲆⲆⵠⵠⵠⵠ: "img/inv-extractor-machine-gold-out.png",
    ΔⲆⵠⲆΔⵠⵠ: "img/inv-extractor-machine-gold-in.png",
    ᐃᐃⵠᐃⵠΔⲆ: "img/inv-extractor-machine-gold-click.png",
    ⵠⵠⲆⲆⵠⲆⵠ: "img/day-extractor-machine0-diamond.png",
    ΔΔⵠⵠΔⵠΔ: "img/night-extractor-machine0-diamond.png",
    ⲆΔᐃᐃᐃΔΔ: "img/day-extractor-machine-diamond.png",
    ⲆΔⲆᐃⲆΔᐃ: "img/night-extractor-machine-diamond.png",
    ⲆⲆⲆⲆⵠΔΔ: "img/inv-extractor-machine-diamond-out.png",
    ⲆᐃΔⲆΔᐃΔ: "img/inv-extractor-machine-diamond-in.png",
    ⲆⵠⲆⵠᐃᐃΔ: "img/inv-extractor-machine-diamond-click.png",
    ⵠᐃⵠΔⵠⵠᐃ: "img/day-extractor-machine0-amethyst.png",
    ⵠⲆᐃⲆᐃᐃⵠ: "img/night-extractor-machine0-amethyst.png",
    ⵠΔᐃⲆⲆⵠⵠ: "img/day-extractor-machine-amethyst.png",
    ᐃᐃᐃⲆᐃⵠⲆ: "img/night-extractor-machine-amethyst.png",
    ⲆⵠⲆΔᐃⵠᐃ: "img/inv-extractor-machine-amethyst-out.png",
    ⲆⵠΔⵠⵠΔᐃ: "img/inv-extractor-machine-amethyst-in.png",
    ΔᐃΔΔΔⲆⲆ: "img/inv-extractor-machine-amethyst-click.png",
    ⲆᐃⲆⲆᐃᐃⵠ: "img/day-extractor-machine0-reidite.png",
    ᐃᐃΔΔⵠΔⲆ: "img/night-extractor-machine0-reidite.png",
    ⵠⵠⵠᐃⲆⲆΔ: "img/day-extractor-machine-reidite.png",
    ⵠⲆⵠⵠⵠⲆᐃ: "img/night-extractor-machine-reidite.png",
    ⲆᐃᐃΔⲆⵠⵠ: "img/inv-extractor-machine-reidite-out.png",
    ᐃΔⲆⲆⲆⲆΔ: "img/inv-extractor-machine-reidite-in.png",
    ᐃⲆᐃᐃⵠᐃᐃ: "img/inv-extractor-machine-reidite-click.png",
    ⲆⲆⵠⲆⲆⲆⲆ: "img/extractor-cases.png",
    ⵠⲆⵠΔⵠⵠΔ: "img/day-golden-hen.png",
    ᐃⵠⲆⵠⵠᐃΔ: "img/night-golden-hen.png",
    ᐃᐃᐃᐃⵠⲆᐃ: "img/day-golden-chicken.png",
    ᐃΔⵠⵠᐃⵠΔ: "img/night-golden-chicken.png",
    ⵠⵠᐃⵠᐃᐃⵠ: "img/hurt-golden-hen.png",
    ⲆⵠᐃⲆⵠᐃⲆ: "img/hurt-golden-chicken.png",
    ⲆⲆⵠⵠΔⵠⲆ: "img/logo-interface.png",
    ⲆⵠⲆⲆΔᐃⵠ: "img/forest-mode-hover.png",
    ΔᐃⵠᐃⵠⲆᐃ: "img/normal-mode-hover.png",
    ⲆⲆⲆᐃⵠΔⵠ: "img/vampire-mode-hover.png",
    ⵠⵠΔᐃⲆⵠΔ: "img/zombie-mode-hover.png",
    ⲆⵠⵠⲆⲆΔⲆ: "img/community-mode-hover2.png",
    ⲆⲆⲆΔΔⲆΔ: "img/experimental-mode-hover.png",
    ΔⵠⵠᐃΔⵠΔ: "img/zombie-mode-out.png",
    ΔⲆΔⵠⵠⵠⵠ: "img/zombie-mode-in.png",
    ΔⲆΔⲆⲆᐃⲆ: "img/zombie-mode-click.png",
    ΔᐃⵠⲆΔⵠⲆ: "img/vampire-mode-out.png",
    ⵠᐃⵠⲆᐃᐃᐃ: "img/vampire-mode-in.png",
    ᐃⲆΔᐃᐃΔᐃ: "img/vampire-mode-click.png",
    ⲆᐃΔⵠⵠⲆⵠ: "img/normal-mode-out.png",
    ΔⵠⵠΔᐃⵠⲆ: "img/normal-mode-in.png",
    ⵠᐃⲆΔΔⲆᐃ: "img/normal-mode-click.png",
    ΔⲆΔᐃΔΔᐃ: "img/forest-mode-out.png",
    ΔΔΔⲆⵠᐃᐃ: "img/forest-mode-in.png",
    ΔᐃⲆΔⵠⲆⵠ: "img/forest-mode-click.png",
    ΔⲆⲆⲆΔⲆⵠ: "img/community-mode-out.png",
    ΔⲆⵠⵠᐃᐃⲆ: "img/community-mode-in.png",
    ᐃⵠⵠΔⲆⲆⲆ: "img/community-mode-click.png",
    ⵠⵠⵠᐃᐃᐃⵠ: "img/experimental-modes-out.png",
    ΔⵠⵠⲆΔᐃⲆ: "img/experimental-modes-in.png",
    ᐃⵠᐃᐃΔᐃⵠ: "img/experimental-modes-click.png",
    ᐃⲆⲆᐃᐃΔᐃ: "img/youtube-button-out.png",
    ⵠᐃᐃⲆⲆⲆⵠ: "img/youtube-button-in.png",
    ⵠΔⲆⲆⵠΔΔ: "img/youtube-button-click.png",
    ⵠΔΔΔⲆᐃΔ: "img/wiki-button-out.png",
    ⲆⵠⵠΔⵠΔΔ: "img/wiki-button-in.png",
    ⵠᐃⵠⲆⲆΔΔ: "img/wiki-button-click.png",
    ΔⲆⲆⲆⲆΔⵠ: "img/twitter-button-out.png",
    ΔⲆⵠⲆⵠⵠⲆ: "img/twitter-button-in.png",
    ᐃⲆΔⲆΔΔⵠ: "img/twitter-button-click.png",
    ᐃΔⲆᐃⲆΔᐃ: "img/facebook-button-out.png",
    ᐃⲆΔΔⵠΔⲆ: "img/facebook-button-in.png",
    ΔⲆᐃΔⲆⵠΔ: "img/facebook-button-click.png",
    ᐃΔⵠΔΔⲆⲆ: "img/reddit-button-out.png",
    ⲆⵠⵠᐃⲆᐃᐃ: "img/reddit-button-in.png",
    ᐃⵠⵠΔᐃⵠᐃ: "img/reddit-button-click.png",
    ⲆⲆⵠᐃⵠⵠⲆ: "img/discord-button-out.png",
    ⵠⵠᐃⵠᐃᐃΔ: "img/discord-button-in.png",
    ᐃΔⵠΔⵠⲆⲆ: "img/discord-button-click.png",
    ⲆᐃΔⲆⲆⲆΔ: "img/merch-button-out.png",
    ⲆⲆΔⵠⲆᐃᐃ: "img/merch-button-in.png",
    ᐃᐃᐃᐃⲆⲆⲆ: "img/merch-button-click.png",
    ⵠⲆⵠᐃᐃⲆᐃᐃᐃ: "img/terminal-button-out.png",
    ⲆⲆΔᐃΔⲆᐃᐃⲆ: "img/terminal-button-in.png",
    ⲆⵠⵠⵠⲆᐃᐃⲆⲆ: "img/terminal-button-click.png",
    ᐃᐃⲆΔⲆⵠΔ: "img/restart-out.png",
    ΔⲆΔᐃΔⲆᐃ: "img/restart-in.png",
    ΔΔⵠᐃⲆᐃᐃ: "img/restart-click.png",
    ⵠᐃⲆᐃⵠⲆΔ: "img/reboot-out.png",
    ᐃΔⵠᐃΔΔⵠ: "img/reboot-in.png",
    ᐃᐃΔⲆΔᐃᐃ: "img/reboot-click.png",
    ⵠᐃᐃⲆⲆᐃⵠ: "img/guide-out.png",
    ⵠⵠⵠᐃΔΔᐃ: "img/guide-in.png",
    ᐃΔᐃⲆᐃᐃᐃ: "img/guide-click.png",
    ᐃⵠⵠᐃΔⵠⵠ: "img/copy-paste-out.png",
    Δⵠᐃᐃⵠᐃᐃ: "img/copy-paste-in.png",
    ΔⲆⵠΔⲆⵠᐃ: "img/copy-paste-click.png",
    ᐃⵠⵠⲆⵠᐃΔ: "img/link-buttons-bg.png",
    ⵠⲆⲆΔᐃⲆᐃ: "img/changelog-box2.png",
    ΔΔⵠΔⵠⵠΔ: "img/changelog_31.png",
    ⵠᐃⲆᐃᐃⵠΔ: "img/banner-taming.png",
    ᐃⵠⵠΔᐃⲆⵠ: "img/profile-button-out.png",
    ⲆᐃᐃΔᐃⲆⲆ: "img/profile-button-in.png",
    ⵠᐃᐃΔⲆΔⵠ: "img/profile-button-click.png",
    ᐃΔᐃⲆⵠⲆΔ: "img/login-button-out.png",
    ⲆⵠΔᐃᐃⵠᐃ: "img/login-button-in.png",
    ⲆⲆΔᐃⲆⵠΔ: "img/login-button-click.png",
    ᐃΔⲆᐃΔⲆⵠ: "img/login-google-out.png",
    ⲆᐃⵠⵠᐃⲆᐃ: "img/login-google-in.png",
    ᐃⵠΔΔᐃⲆⵠ: "img/login-google-click.png",
    ᐃᐃΔⲆΔⵠᐃ: "img/login-facebook-out.png",
    ⲆⲆⲆⵠⲆΔⵠ: "img/login-facebook-in.png",
    ⵠⵠⵠⲆⲆⲆⵠ: "img/login-facebook-click.png",
    ᐃⵠᐃⵠΔⲆⲆ: "img/account-box.png",
    ᐃΔΔⲆⵠΔⵠᐃⲆ: "img/account-under-maintenance.png",
    ⵠⵠⵠⲆᐃΔⵠ: "img/close-button-account-out.png",
    ΔⲆⲆᐃΔᐃⵠ: "img/close-button-account-in.png",
    ΔΔⲆᐃⵠⵠⵠ: "img/close-button-account-click.png",
    ⵠⲆⲆⵠᐃᐃⲆ: "img/play-button-out.png",
    ⵠⲆΔΔᐃⵠᐃ: "img/play-button-in.png",
    ᐃⲆΔᐃΔᐃⲆ: "img/play-button-click.png",
    ᐃΔⲆᐃΔΔⲆᐃᐃ: "img/app-store-badge.png",
    ⲆΔⵠᐃΔⵠⲆⲆᐃ: "img/play-store-badge.png",
    ΔⵠⲆᐃΔΔᐃⵠᐃ: "img/mobile-boxad.png",
    ⵠⲆΔᐃᐃᐃⲆ: "img/modify-name-out.png",
    ΔΔᐃⲆⵠⵠᐃ: "img/modify-name-in.png",
    ΔᐃⵠⲆⵠΔᐃ: "img/modify-name-click.png",
    ᐃᐃⵠΔⵠᐃᐃ: "img/copy-id-button-out.png",
    ᐃⲆΔⵠⲆⵠⵠ: "img/copy-id-button-hover.png",
    ⲆΔⲆⲆⵠⲆⵠ: "img/copy-id-button-active.png",
    ᐃⲆⲆΔⲆΔΔ: "img/yes-button-out.png",
    ⵠⵠΔⵠᐃⲆΔ: "img/yes-button-in.png",
    ⵠΔᐃⲆⲆΔᐃ: "img/yes-button-click.png",
    ⲆᐃⵠⲆΔᐃᐃ: "img/yes-300-button-out.png",
    ᐃᐃΔⵠΔⲆᐃ: "img/yes-300-button-in.png",
    ᐃΔᐃᐃΔⲆⵠ: "img/yes-300-button-click.png",
    ⵠΔⵠⵠⲆⲆⵠ: "img/no-button-out.png",
    ⲆⲆᐃΔⲆᐃⵠ: "img/no-button-in.png",
    ⲆᐃⵠᐃᐃⲆⵠ: "img/no-button-click.png",
    ⵠⲆᐃⵠⵠΔᐃ: "img/no-thanks-button-out.png",
    ΔⵠᐃΔΔⲆⵠ: "img/no-thanks-button-in.png",
    ⵠⵠᐃⲆᐃⵠΔ: "img/no-thanks-button-click.png",
    ᐃⲆᐃᐃᐃΔᐃ: "img/shop-button-out.png",
    ⵠΔⵠᐃⲆⲆⲆ: "img/shop-button-in.png",
    ΔⲆⲆΔᐃᐃⵠ: "img/shop-button-click.png",
    ⵠⲆⵠᐃΔⵠⵠ: "img/logout-out.png",
    ⲆΔΔΔΔᐃΔ: "img/logout-in.png",
    ᐃᐃⵠᐃⲆᐃⲆ: "img/logout-click.png",
    ⵠΔⲆⵠᐃⵠⵠ: "img/terms-button-out.png",
    ᐃᐃΔᐃⲆᐃⵠ: "img/terms-button-in.png",
    ᐃⵠⵠᐃⲆᐃⲆ: "img/terms-button-click.png",
    ᐃⲆⲆⵠᐃⲆⲆ: "img/tutorial-icon.png",
    ᐃΔⲆⲆⵠΔⲆ: "img/skins-icon.png",
    ΔΔⵠⵠⲆⵠΔ: "img/shop-icon.png",
    ⲆⲆᐃⲆⲆᐃΔΔⵠ: "img/paint-icon.png",
    ΔⲆⵠⵠΔΔᐃ: "img/leaderboard-icon.png",
    ΔΔᐃⵠⵠⲆΔ: "img/start-icon.png",
    ⵠⲆΔᐃᐃⲆⵠ: "img/profile-icon.png",
    ΔⵠΔⵠⵠΔⵠ: "img/server-access-icon2.png",
    ⵠΔⲆΔΔⵠⵠ: "img/button-homepage-bg-out.png",
    ᐃⲆⵠΔⵠΔⵠ: "img/button-homepage-bg-in.png",
    ΔⲆᐃΔΔⵠⵠ: "img/button-homepage-bg-click.png",
    ⲆⵠⲆᐃⵠⵠΔ: "img/button-bottom-homepage-bg-out.png",
    ᐃⲆⲆⲆᐃⲆΔ: "img/button-bottom-homepage-bg-in.png",
    ⵠⵠᐃᐃᐃΔⲆ: "img/button-bottom-homepage-bg-click.png",
    ᐃΔⲆΔⲆᐃⲆ: "img/lvl-player.png",
    ⵠⵠⲆΔᐃⲆᐃ: "img/avatar-player.png",
    ⲆⲆΔΔⲆⲆᐃ: "img/avatar-player1.png",
    ΔⵠΔⲆᐃᐃᐃ: "img/avatar-player2.png",
    ΔΔΔⲆⵠΔΔ: "img/avatar-player3.png",
    ⵠⲆⲆⲆᐃΔΔ: "img/avatar-player4.png",
    ᐃⵠΔⲆΔⲆᐃ: "img/avatar-player5.png",
    ΔΔΔᐃⲆⲆⲆ: "img/avatar-player6.png",
    ⵠⵠΔⲆΔⲆΔ: "img/avatar-player7.png",
    ΔᐃⵠΔⲆⵠΔ: "img/avatar-player8.png",
    ⵠΔᐃⲆΔⵠⵠ: "img/avatar-player9.png",
    ᐃⵠΔΔΔᐃⵠ: "img/avatar-player10.png",
    ᐃᐃΔΔᐃⲆᐃ: "img/avatar-player11.png",
    ⵠⲆⵠⲆⲆᐃⵠ: "img/avatar-player12.png",
    ᐃΔⵠⵠⲆⵠⵠ: "img/avatar-player13.png",
    ⲆⵠⲆⲆⵠⵠΔ: "img/avatar-player14.png",
    ΔⵠⲆᐃⲆⵠᐃ: "img/avatar-player14.png",
    ⵠᐃᐃΔᐃΔⵠ: "img/avatar-player14.png",
    ᐃⲆⲆᐃᐃⵠᐃ: "img/avatar-player14.png",
    ⵠⵠᐃΔⲆᐃⵠᐃᐃ: "img/golden-bread.png",
    ⵠⵠΔᐃΔΔⵠ: "img/buy-bread-out.png",
    ΔΔΔⲆᐃⲆᐃ: "img/buy-bread-in.png",
    ⲆᐃᐃⲆⲆᐃⵠ: "img/buy-bread-click.png",
    ⵠⲆᐃΔᐃᐃⵠ: "img/gauge.png",
    ⵠᐃⵠᐃᐃΔⲆⵠᐃ: "img/season-4-out.png",
    ᐃⲆᐃΔᐃⲆᐃΔⲆ: "img/season-4-in.png",
    ᐃᐃⲆⵠⲆᐃⲆⲆᐃ: "img/season-4-click.png",
    ⵠᐃⵠᐃⵠⲆΔΔⵠ: "img/season4-box.png",
    ΔⲆⲆΔⲆⲆᐃⲆⵠ: "img/season-5-out.png",
    ΔᐃΔᐃΔΔΔⵠᐃ: "img/season-5-in.png",
    ΔΔⵠΔⵠⵠⵠᐃⲆ: "img/season-5-click.png",
    ᐃⲆⵠΔΔΔⲆᐃΔ: "img/season5-box.png",
    ᐃⵠΔΔΔΔΔ: "img/season-6-out.png",
    ⵠⵠⵠⲆᐃⵠΔ: "img/season-6-in.png",
    ⵠᐃⵠᐃⲆΔⲆ: "img/season-6-click.png",
    ⲆⲆⵠⲆᐃⵠⲆ: "img/season6-box.png",
    ᐃⵠⵠⲆⲆΔΔ: "img/profile3-box.png",
    ⲆⲆⲆⵠΔᐃⲆ: "img/skins-box.png",
    ΔΔⵠΔΔΔᐃ: "img/shop-box.png",
    ΔⵠᐃΔⲆΔᐃⲆΔ: "img/private-server-box.png",
    ⵠⲆⵠⵠⲆᐃᐃ: "img/location-box.png",
    ΔⵠΔᐃΔΔΔ: "img/server-duration-box.png",
    ΔᐃⵠΔⲆⵠⵠ: "img/tutorial-box.png",
    ⲆⲆΔⵠΔᐃⲆ: "img/leaderboard2-box.png",
    ⲆΔΔΔⲆⲆᐃ: "img/buy-breads-box.png",
    ⵠⲆⵠᐃⲆΔⵠ: "img/bag-box.png",
    ⲆⲆⵠⵠⲆⲆⲆ: "img/deadbox-box.png",
    ᐃΔᐃⵠⲆΔⵠ: "img/book-box.png",
    ⲆΔᐃⲆΔⲆⵠ: "img/accessories-box.png",
    ΔᐃᐃᐃΔΔΔ: "img/customskin-box.png",
    ᐃⲆⲆᐃΔᐃᐃ: "img/bag-lasts.png",
    ΔΔⵠΔᐃⵠᐃ: "img/server-lasts.png",
    ΔΔᐃᐃΔⲆⵠ: "img/server-access-box3.png",
    ΔΔⵠΔΔΔⲆ: "img/lootbox-box.png",
    ⵠᐃⲆΔᐃΔⵠ: "img/change-nickname0.png",
    ᐃⵠΔΔⲆΔΔ: "img/change-nickname1.png",
    ᐃΔⵠⵠΔⲆΔ: "img/cheating-box.png",
    ᐃⵠᐃᐃⵠΔᐃⵠⲆ: "img/daily-quest-box.png",
    ⵠⵠⲆⵠⲆⵠΔⲆΔ: "img/daily-5-bread.png",
    ΔΔⲆⲆᐃⵠΔⵠⵠ: "img/daily-10-bread.png",
    ᐃⵠⲆⲆᐃⵠᐃᐃᐃ: "img/daily-valid.png",
    ⲆⲆᐃⵠΔΔΔ: "img/normal-profile-out.png",
    ⲆⲆΔᐃΔⵠⵠ: "img/normal-profile-in.png",
    ⵠⵠᐃⵠⲆⲆΔ: "img/normal-profile-click.png",
    ⲆΔΔⵠΔⵠⲆ: "img/forest-profile-out.png",
    ⲆⲆⵠⵠⵠᐃᐃ: "img/forest-profile-in.png",
    ΔΔΔΔⵠⵠᐃ: "img/forest-profile-click.png",
    ⲆⵠⲆᐃⲆᐃⵠ: "img/zombie-profile-out.png",
    ΔⲆᐃⲆⵠⲆⲆ: "img/zombie-profile-in.png",
    ᐃⲆⲆⲆᐃᐃⵠ: "img/zombie-profile-click.png",
    ᐃⲆᐃᐃⲆᐃΔ: "img/vampire-profile-out.png",
    ΔΔᐃⵠᐃⲆᐃ: "img/vampire-profile-in.png",
    ⲆⲆⵠⲆⵠᐃΔ: "img/vampire-profile-click.png",
    ᐃᐃⲆⲆⵠᐃⲆ: "img/total-profile-out.png",
    ⲆᐃΔⵠᐃⵠⵠ: "img/total-profile-in.png",
    ᐃⵠⵠⲆⲆⵠⲆ: "img/total-profile-click.png",
    ⲆⵠΔᐃᐃΔⵠ: "img/season1-out.png",
    ΔᐃⵠⵠⵠⲆⵠ: "img/season1-in.png",
    ᐃⲆⲆⵠΔᐃΔ: "img/season1-click.png",
    ⲆⵠᐃᐃⵠΔΔ: "img/season2-out.png",
    ⲆΔⲆⲆⵠᐃⲆ: "img/season2-in.png",
    ⵠΔⵠⲆⵠΔⵠ: "img/season2-click.png",
    ᐃΔⲆᐃΔᐃⵠ: "img/season3-out.png",
    ᐃΔⲆᐃⲆᐃⲆ: "img/season3-in.png",
    ⵠⵠⵠⲆⲆⵠᐃ: "img/season3-click.png",
    ⲆΔⲆᐃΔΔᐃ: "img/season4-out.png",
    ΔᐃⵠΔⲆᐃⲆ: "img/season4-in.png",
    Δᐃᐃᐃᐃᐃᐃ: "img/season4-click.png",
    ᐃⲆⲆⵠⵠᐃⵠ: "img/season5-out.png",
    ΔᐃⲆⲆΔⵠᐃ: "img/season5-in.png",
    ΔⵠᐃⲆΔᐃΔ: "img/season5-click.png",
    ⵠᐃⲆⵠᐃⵠᐃ: "img/season6-out.png",
    ᐃⵠΔΔⲆⲆᐃ: "img/season6-in.png",
    ⲆⵠΔⵠΔΔⵠ: "img/season6-click.png",
    ᐃⵠⲆⲆΔᐃⵠ: "img/locked-skin-alert.png",
    ⵠⵠⵠᐃⵠⲆΔ: "img/locked-custom-alert.png",
    ᐃⵠΔⵠΔⵠᐃ: "img/bg-red-locked.png",
    ΔΔᐃⵠⵠⵠᐃ: "img/skin-button-out.png",
    ⵠΔᐃⵠⲆⵠᐃ: "img/skin-button-in.png",
    ⲆⲆⲆⵠᐃⵠⲆ: "img/skin-button-click.png",
    ΔᐃⲆΔⵠⵠᐃ: "img/accessory-button-out.png",
    ΔᐃⵠⲆⵠᐃᐃ: "img/accessory-button-in.png",
    ⵠⲆΔⵠⵠᐃΔ: "img/accessory-button-click.png",
    ΔΔⵠⲆⵠⵠᐃ: "img/bag-button-out.png",
    ᐃᐃΔΔⲆⲆⵠ: "img/bag-button-in.png",
    ᐃⵠᐃΔⲆΔⵠ: "img/bag-button-click.png",
    ⲆⲆᐃⲆⵠⵠⵠ: "img/book-button-out.png",
    ⵠΔⲆΔᐃᐃᐃ: "img/book-button-in.png",
    ⵠⵠᐃΔΔⵠΔ: "img/book-button-click.png",
    ΔⵠᐃⵠΔⲆⵠ: "img/deadbox-button-out.png",
    ⲆΔⵠⵠⵠⵠⲆ: "img/deadbox-button-in.png",
    ⵠⲆⲆΔᐃΔⲆ: "img/deadbox-button-click.png",
    ⲆᐃⵠᐃⵠΔⲆ: "img/loot-button-out.png",
    ⵠⵠᐃᐃⵠΔᐃ: "img/loot-button-in.png",
    ⲆᐃⲆᐃΔⵠΔ: "img/loot-button-click.png",
    ⵠΔⵠᐃΔⵠᐃ: "img/free-item-out.png",
    ⵠⲆΔⵠΔᐃΔ: "img/free-item-in.png",
    ⵠⵠᐃⲆΔᐃⵠ: "img/free-item-click.png",
    ᐃⲆⵠΔ: "img/wood-item-out.png",
    ⲆΔᐃΔ: "img/wood-item-in.png",
    ᐃⵠΔⲆ: "img/wood-item-click.png",
    ⲆⲆⵠⲆᐃⲆᐃ: "img/stone-item.png",
    ᐃᐃᐃᐃᐃⲆᐃ: "img/stone-item-in.png",
    ᐃⲆⲆᐃⵠᐃⵠ: "img/stone-item-click.png",
    ⵠᐃⲆᐃⵠΔⵠ: "img/gold-item.png",
    ⲆᐃⲆⲆⵠΔⵠ: "img/gold-item-in.png",
    ᐃᐃⲆᐃᐃⲆΔ: "img/gold-item-click.png",
    ⵠⲆᐃΔⵠⲆⲆ: "img/diamond-item.png",
    ᐃⵠⵠᐃΔᐃΔ: "img/diamond-item-in.png",
    ᐃⵠⲆΔⲆⲆᐃ: "img/diamond-item-click.png",
    ΔⲆᐃᐃᐃⵠⵠ: "img/amethyst-item.png",
    ⲆⵠΔⵠⲆⵠⵠ: "img/amethyst-item-in.png",
    ᐃⲆⲆⲆΔΔΔ: "img/amethyst-item-click.png",
    ΔⲆΔᐃⲆⵠⵠ: "img/reidite-item.png",
    ⵠᐃⵠⲆᐃⵠΔ: "img/reidite-item-in.png",
    ⵠΔᐃΔⲆⲆᐃ: "img/reidite-item-click.png",
    ᐃⲆᐃⲆΔⵠᐃ: "img/special-item-out.png",
    ᐃΔᐃΔᐃΔΔ: "img/special-item-in.png",
    ᐃⲆⵠᐃⲆⵠⵠ: "img/special-item-click.png",
    ᐃᐃΔΔⵠⲆᐃ: "img/level-item-out.png",
    ⵠⵠᐃᐃⵠᐃΔ: "img/level-item-in.png",
    ⵠⵠⲆⲆᐃⲆⲆ: "img/level-item-click.png",
    ⲆⲆᐃⵠᐃΔⵠ: "img/skin-previous-out.png",
    ⲆᐃⲆΔᐃᐃΔ: "img/skin-previous-in.png",
    ⲆⵠᐃΔⲆⲆⵠ: "img/skin-previous-click.png",
    ⵠⵠⵠᐃⲆᐃⲆ: "img/skin-next-out.png",
    ΔⵠⵠⲆⲆᐃΔ: "img/skin-next-in.png",
    ΔᐃᐃΔᐃⵠᐃ: "img/skin-next-click.png",
    ⲆᐃΔⲆⲆ: "img/back-button-out.png",
    ⲆΔᐃⲆⵠ: "img/back-button-in.png",
    ΔΔⵠⲆⲆ: "img/back-button-click.png",
    ⲆᐃΔⵠΔᐃΔ: "img/get-more-button-out.png",
    ⲆⲆⵠᐃᐃΔⲆ: "img/get-more-button-in.png",
    ⲆⲆⲆⵠⲆⵠᐃ: "img/get-more-button-click.png",
    ⵠⲆⵠⵠⵠΔⲆ: "img/currency1-out.png",
    ΔⲆΔᐃᐃⵠⲆ: "img/currency1-in.png",
    ᐃᐃⵠΔΔⲆⵠ: "img/currency1-click.png",
    ⵠⲆᐃᐃⵠⵠᐃ: "img/currency2-out.png",
    ΔΔΔⵠᐃΔⲆ: "img/currency2-in.png",
    ⲆⲆᐃⵠΔᐃΔ: "img/currency2-click.png",
    ⵠΔⵠΔⲆΔΔ: "img/currency3-out.png",
    ⵠⵠⲆΔᐃΔⲆ: "img/currency3-in.png",
    ⵠᐃⲆⵠⲆᐃΔ: "img/currency3-click.png",
    ΔᐃⵠᐃⵠΔΔ: "img/currency4-out.png",
    ᐃΔⵠⲆᐃⲆᐃ: "img/currency4-in.png",
    ⲆⵠᐃⵠⲆΔᐃ: "img/currency4-click.png",
    ⵠᐃⲆⲆⵠⲆⲆ: "img/currency5-out.png",
    ⲆᐃⲆⵠΔⲆᐃ: "img/currency5-in.png",
    ⲆᐃΔᐃⵠⵠⵠ: "img/currency5-click.png",
    ⵠΔΔⵠΔΔΔ: "img/price1-out.png",
    ΔⲆⵠΔΔⵠΔ: "img/price1-in.png",
    ᐃᐃⵠⲆⲆᐃⵠ: "img/price1-click.png",
    ΔⵠᐃⵠⲆⲆᐃ: "img/price2-out.png",
    ⲆⲆⲆΔⲆᐃᐃ: "img/price2-in.png",
    ᐃⲆΔΔᐃⵠΔ: "img/price2-click.png",
    ΔᐃⵠᐃⲆᐃⲆ: "img/price3-out.png",
    ⲆⵠΔᐃⲆⵠΔ: "img/price3-in.png",
    ᐃΔᐃⵠᐃⵠⲆ: "img/price3-click.png",
    ΔΔΔΔᐃᐃⵠ: "img/price4-out.png",
    ΔΔᐃΔⵠⲆᐃ: "img/price4-in.png",
    ⲆΔΔⲆᐃⵠΔ: "img/price4-click.png",
    ⲆΔΔᐃΔⵠⲆ: "img/price5-out.png",
    ᐃⵠΔⲆⵠᐃᐃ: "img/price5-in.png",
    Ⲇⵠⵠᐃⵠᐃⵠ: "img/price5-click.png",
    ⵠᐃⲆⵠΔⵠᐃΔΔ: "img/buy-private-server-out.png",
    ⲆΔΔⲆⲆᐃᐃᐃⵠ: "img/buy-private-server-in.png",
    ΔⵠⵠⲆⲆᐃⲆⲆΔ: "img/buy-private-server-click.png",
    ΔᐃᐃᐃⲆⲆΔ: "img/atlanta-button-out.png",
    ᐃᐃⵠΔᐃⵠⲆ: "img/atlanta-button-in.png",
    ⲆᐃⵠΔᐃⵠΔ: "img/atlanta-button-click.png",
    ΔᐃⵠⵠⲆΔⵠ: "img/los-angeles-button-out.png",
    ⵠᐃᐃⲆΔⲆᐃ: "img/los-angeles-button-in.png",
    ⵠⵠⵠᐃᐃⲆⲆ: "img/los-angeles-button-click.png",
    ᐃⲆᐃⲆΔᐃⲆ: "img/sydney-button-out.png",
    ᐃᐃⵠⲆᐃΔⵠ: "img/sydney-button-in.png",
    ⲆⵠΔΔⵠⵠΔ: "img/sydney-button-click.png",
    ᐃⵠⵠⵠⵠΔΔ: "img/frankfurt-button-out.png",
    ⵠΔΔΔⵠᐃⲆ: "img/frankfurt-button-in.png",
    ⲆⲆⵠᐃΔΔᐃ: "img/frankfurt-button-click.png",
    ⲆᐃᐃⵠᐃⲆⲆ: "img/osaka-button-out.png",
    ⲆⲆᐃⵠⲆᐃⲆ: "img/osaka-button-in.png",
    ⲆⲆΔΔΔΔⲆ: "img/osaka-button-click.png",
    Δᐃᐃᐃᐃⵠⵠⵠⵠ: "img/yes-location-out.png",
    ⲆΔᐃⲆⵠΔⵠᐃΔ: "img/yes-location-in.png",
    ⲆⲆⵠⲆⵠⵠᐃᐃⵠ: "img/yes-location-click.png",
    ᐃⵠⵠᐃΔⲆⲆ: "img/3days-button-out.png",
    ᐃΔᐃⲆᐃᐃⵠ: "img/3days-button-in.png",
    ΔᐃᐃⲆⲆⲆⵠ: "img/3days-button-click.png",
    ⲆⲆⵠΔΔΔⵠ: "img/7days-button-out.png",
    ⵠⵠᐃᐃⲆⲆⵠ: "img/7days-button-in.png",
    ᐃᐃⲆᐃΔΔΔ: "img/7days-button-click.png",
    ΔⲆⵠⲆⵠⲆᐃ: "img/30days-button-out.png",
    ⲆⲆⵠΔⵠⵠⲆ: "img/30days-button-in.png",
    ᐃΔΔⲆⲆⵠⵠ: "img/30days-button-click.png",
    ⲆⲆᐃⲆⵠⲆᐃ: "img/90days-button-out.png",
    ΔᐃᐃⲆⲆᐃⵠ: "img/90days-button-in.png",
    ΔᐃⲆᐃⵠΔⵠ: "img/90days-button-click.png",
    ΔⲆⲆΔΔᐃΔ: "img/spin1.png",
    ᐃᐃᐃⵠΔᐃᐃ: "img/spin2.png",
    ⵠΔᐃᐃΔⲆⵠ: "img/spin3.png",
    ⵠᐃⵠΔᐃⵠᐃ: "img/spin4.png",
    ⵠᐃⲆⵠᐃᐃⲆ: "img/spin5.png",
    ᐃᐃΔΔⵠΔΔ: "img/spin6.png",
    ⵠⲆΔᐃⲆⲆⵠ: "img/arrow-spin.png",
    ⲆᐃⲆⲆᐃⵠΔ: "img/spin-button-1-out.png",
    ⵠⲆΔΔΔᐃΔ: "img/spin-button-1-in.png",
    ⵠᐃⲆΔΔⵠⵠ: "img/spin-button-1-click.png",
    ⵠⵠⲆⲆᐃⵠᐃ: "img/spin-button-2-out.png",
    ΔΔΔⵠⵠΔᐃ: "img/spin-button-2-in.png",
    ΔⲆⵠⲆΔᐃⲆ: "img/spin-button-2-click.png",
    ΔⵠⲆⲆΔⲆⵠ: "img/spin-button-3-out.png",
    ᐃΔΔⵠⲆᐃⲆ: "img/spin-button-3-in.png",
    ᐃΔⵠⲆⲆᐃⵠ: "img/spin-button-3-click.png",
    ⲆⲆΔⵠⲆⲆᐃ: "img/spin-button-4-out.png",
    ΔΔᐃᐃⲆᐃⵠ: "img/spin-button-4-in.png",
    ΔⲆⲆΔᐃᐃᐃ: "img/spin-button-4-click.png",
    ⵠΔⵠΔⵠⲆⵠ: "img/spin-button-5-out.png",
    ⲆⵠⵠᐃΔⲆⵠ: "img/spin-button-5-in.png",
    ΔΔⵠⵠⲆⵠᐃ: "img/spin-button-5-click.png",
    ΔᐃᐃⵠΔⲆⵠ: "img/spin-light.png",
    ⲆΔΔⲆⲆⵠᐃ: "img/tuto-wiki-out.png",
    ΔᐃⵠⲆᐃΔᐃ: "img/tuto-wiki-in.png",
    ⵠᐃⲆⲆᐃΔⵠ: "img/tuto-wiki-click.png",
    ΔᐃΔⵠᐃⲆΔ: "img/tuto-previous-out.png",
    ⵠΔⵠᐃⲆⵠᐃ: "img/tuto-previous-in.png",
    ΔᐃⵠᐃᐃⲆΔ: "img/tuto-previous-click.png",
    ⵠⲆΔⵠⵠⵠᐃ: "img/tuto-next-out.png",
    ΔⲆΔⲆⲆⵠᐃ: "img/tuto-next-in.png",
    ᐃⵠⵠⲆⲆⲆΔ: "img/tuto-next-click.png",
    Ⲇⵠⵠᐃᐃᐃⵠ: "img/time-leaderboard-out.png",
    ⵠⵠⵠⲆΔᐃᐃ: "img/time-leaderboard-in.png",
    ⵠⲆⵠΔⲆⵠⲆ: "img/time-leaderboard-click.png",
    ΔΔⵠⲆⵠᐃᐃ: "img/score-leaderboard-out.png",
    ⲆⲆᐃⵠⵠⲆᐃ: "img/score-leaderboard-in.png",
    ΔᐃᐃⲆΔᐃⵠ: "img/score-leaderboard-click.png",
    ᐃᐃⵠⲆΔΔⲆ: "img/lvl-leaderboard-out.png",
    ⵠⲆⵠⲆⵠᐃⲆ: "img/lvl-leaderboard-in.png",
    ᐃⵠΔᐃⲆΔΔ: "img/lvl-leaderboard-click.png",
    ΔⲆⲆΔΔΔⲆ: "img/kill-leaderboard-out.png",
    ⵠⵠᐃⲆⵠⲆᐃ: "img/kill-leaderboard-in.png",
    ⲆΔΔᐃⵠΔⵠ: "img/kill-leaderboard-click.png",
    ⲆⵠᐃⵠⵠⲆΔ: "img/all-leaderboard-out.png",
    ΔᐃⵠΔⵠΔⵠ: "img/all-leaderboard-in.png",
    ᐃΔⲆᐃᐃⲆⵠ: "img/all-leaderboard-click.png",
    ⵠΔⵠⲆⲆⵠⵠ: "img/today-leaderboard-out.png",
    ⵠᐃᐃⲆⲆΔᐃ: "img/today-leaderboard-in.png",
    ΔᐃⵠΔᐃⵠΔ: "img/today-leaderboard-click.png",
    ⲆᐃⵠⲆΔⵠᐃ: "img/week-leaderboard-out.png",
    ⲆΔᐃⲆⲆΔⲆ: "img/week-leaderboard-in.png",
    ΔⵠⲆⵠΔᐃΔ: "img/week-leaderboard-click.png",
    ⵠᐃⲆᐃᐃΔΔ: "img/season1-out.png",
    ᐃᐃᐃⲆⵠⲆⲆ: "img/season1-in.png",
    ⵠⵠⲆⵠᐃⵠⲆ: "img/season1-click.png",
    ΔΔΔΔⵠⲆᐃ: "img/season2-out.png",
    ΔⲆᐃᐃᐃᐃᐃ: "img/season2-in.png",
    ᐃⲆᐃⵠⲆⵠΔ: "img/season2-click.png",
    ΔΔᐃΔⲆⵠⵠ: "img/season3-out.png",
    ᐃΔᐃᐃᐃᐃΔ: "img/season3-in.png",
    ΔᐃⲆⲆᐃΔⵠ: "img/season3-click.png",
    ΔⵠⲆⲆᐃᐃᐃ: "img/season4-out.png",
    ⵠΔᐃΔᐃⲆⵠ: "img/season4-in.png",
    ΔᐃᐃᐃⵠΔᐃ: "img/season4-click.png",
    ᐃⵠⵠᐃΔⵠⲆ: "img/season5-out.png",
    ⲆⵠᐃΔⵠᐃΔ: "img/season5-in.png",
    ᐃⲆⲆⵠᐃᐃᐃ: "img/season5-click.png",
    ⵠⵠⵠⲆⵠⲆᐃ: "img/season6-out.png",
    ⲆⲆᐃⵠᐃⵠⵠ: "img/season6-in.png",
    ⵠᐃΔⲆⲆᐃⲆ: "img/season6-click.png",
    ΔᐃⲆⵠⵠⲆⵠ: "img/total-lead-out.png",
    ΔᐃⵠᐃᐃᐃΔ: "img/total-lead-in.png",
    ᐃΔⵠᐃⲆⵠᐃ: "img/total-lead-click.png",
    ᐃΔⵠⵠΔΔᐃ: "img/normal-lead-out.png",
    ᐃᐃⵠⵠΔΔⲆ: "img/normal-lead-in.png",
    ΔⲆΔΔⵠⵠᐃ: "img/normal-lead-click.png",
    ᐃⵠⲆᐃⲆΔⲆ: "img/forest-lead-out.png",
    ⵠⵠΔᐃⲆᐃᐃ: "img/forest-lead-in.png",
    ᐃΔᐃⲆⵠΔΔ: "img/forest-lead-click.png",
    ΔⵠᐃⲆᐃΔΔ: "img/vampire-lead-out.png",
    ΔΔΔⵠᐃᐃΔ: "img/vampire-lead-in.png",
    ⵠⵠⵠΔⲆⵠᐃ: "img/vampire-lead-click.png",
    ⲆⵠΔᐃⲆⵠᐃ: "img/zombie-lead-out.png",
    ΔⵠᐃΔⵠΔⲆ: "img/zombie-lead-in.png",
    Δⵠᐃⵠᐃⵠⵠ: "img/zombie-lead-click.png",
    ⵠᐃⵠⵠⲆⵠᐃ: "img/day-level5.png",
    ᐃⲆⲆⲆᐃΔΔ: "img/night-level5.png",
    ᐃᐃⵠⵠⲆᐃⵠ: "img/day-level10.png",
    ⲆⵠⲆᐃⲆᐃΔ: "img/night-level10.png",
    ⵠⵠⵠΔΔⲆⵠ: "img/day-level15.png",
    ᐃΔⲆᐃᐃᐃΔ: "img/night-level15.png",
    ΔⲆᐃΔΔⵠⲆ: "img/day-level20.png",
    ⵠⲆⲆⵠᐃΔΔ: "img/night-level20.png",
    ⵠᐃΔⲆⵠΔΔ: "img/day-level25.png",
    ⵠⲆΔᐃᐃᐃΔ: "img/night-level25.png",
    ⲆᐃᐃⲆΔᐃⵠ: "img/day-level30.png",
    ΔⲆΔᐃⲆⵠΔ: "img/night-level30.png",
    ᐃᐃᐃⵠⲆⵠⵠ: "img/day-level35.png",
    ᐃΔΔΔΔΔⵠ: "img/night-level35.png",
    ΔⲆᐃΔΔⵠΔ: "img/day-level40.png",
    ᐃΔⵠⵠⲆⵠΔ: "img/night-level40.png",
    ⲆΔⵠⵠᐃⲆᐃ: "img/day-level45.png",
    ᐃΔⵠΔΔΔΔ: "img/night-level45.png",
    ᐃⲆᐃⲆⲆΔⲆ: "img/day-level50.png",
    ⵠⵠΔⲆⲆΔΔ: "img/night-level50.png",
    ᐃᐃᐃΔⵠⵠⲆ: "img/day-level55.png",
    ΔᐃⵠⵠⵠⲆΔ: "img/night-level55.png",
    ΔⲆⵠⲆᐃΔⲆ: "img/day-level60.png",
    ᐃΔᐃᐃΔΔΔ: "img/night-level60.png",
    ⵠΔᐃΔΔⵠⵠ: "img/day-skin-devast0.png",
    ⵠⲆΔᐃΔⲆⵠ: "img/night-skin-devast0.png",
    ᐃΔΔΔⵠⵠⵠ: "img/day-hand-devaster.png",
    ᐃⲆⵠᐃⵠⲆⵠ: "img/night-hand-devaster.png",
    ⵠⲆⵠⵠΔⵠⲆ: "img/day-skin-star0.png",
    ⲆᐃᐃᐃΔⲆΔ: "img/night-skin-star0.png",
    ᐃΔᐃⵠⵠΔⲆ: "img/day-hand-star0.png",
    ⲆᐃΔⲆⲆⲆⵠ: "img/night-hand-star0.png",
    ⵠⵠⵠΔⵠⵠⵠ: "img/day-vampire.png",
    ⵠⵠΔᐃΔⲆᐃ: "img/night-vampire.png",
    ΔⲆᐃⵠⲆⲆΔ: "img/day-hand-vampire.png",
    ᐃⲆΔΔᐃΔᐃ: "img/night-hand-vampire.png",
    ⵠⲆᐃΔᐃⵠⲆ: "img/day-zombie.png",
    ΔΔⲆΔⵠᐃⵠ: "img/night-zombie.png",
    ΔⵠⵠⲆᐃⵠΔ: "img/day-hand-zombie.png",
    ⵠΔΔᐃᐃⵠᐃ: "img/night-hand-zombie.png",
    ᐃΔᐃΔΔᐃⵠ: "img/day-skin113.png",
    ⵠⵠᐃᐃⲆⵠⲆ: "img/night-skin113.png",
    ⵠⲆⲆΔΔΔⲆ: "img/day-hand-skin113.png",
    ᐃⵠᐃᐃᐃΔΔ: "img/night-hand-skin113.png",
    ΔᐃᐃΔΔΔⵠ: "img/day-skin0.png",
    ⵠΔⲆⲆⲆᐃᐃ: "img/night-skin0.png",
    ⲆᐃⵠⵠⲆΔᐃ: "img/day-skin1.png",
    ⲆⲆΔᐃⲆⲆⲆ: "img/night-skin1.png",
    ⲆⵠΔΔⲆⵠⲆ: "img/day-skin2.png",
    ⵠᐃⲆΔᐃⵠⵠ: "img/night-skin2.png",
    ᐃⲆᐃⵠⲆⵠⲆ: "img/day-skin3.png",
    ΔⲆΔⲆⲆⵠΔ: "img/night-skin3.png",
    ᐃⲆᐃᐃᐃΔΔ: "img/day-skin4.png",
    ⵠᐃᐃΔⵠⲆⵠ: "img/night-skin4.png",
    ⲆΔⵠΔⵠᐃⲆ: "img/day-skin5.png",
    ⲆⲆⲆⵠᐃᐃᐃ: "img/night-skin5.png",
    ⵠΔᐃᐃΔⵠⲆ: "img/day-skin6.png",
    ⲆᐃΔᐃᐃⲆᐃ: "img/night-skin6.png",
    ᐃⵠⲆΔᐃΔᐃ: "img/day-skin7.png",
    ΔΔᐃⲆⲆᐃⵠ: "img/night-skin7.png",
    ⵠΔⲆⵠⵠⵠⵠ: "img/day-skin8.png",
    ᐃΔΔᐃᐃΔᐃ: "img/night-skin8.png",
    ⲆΔⲆΔⲆⲆΔ: "img/day-skin9.png",
    ⵠᐃⵠᐃⲆⲆΔ: "img/night-skin9.png",
    ΔΔᐃⵠⵠΔⲆ: "img/day-skin10.png",
    ΔΔΔΔΔⲆᐃ: "img/night-skin10.png",
    ⵠΔΔΔΔⲆⵠ: "img/day-skin11.png",
    ᐃⵠΔⵠⵠᐃΔ: "img/night-skin11.png",
    Ⲇᐃⵠⵠⵠⵠⵠ: "img/day-skin12.png",
    ⵠΔᐃᐃⵠⵠⵠ: "img/night-skin12.png",
    ᐃⵠᐃⵠⲆΔⵠ: "img/day-skin13.png",
    ΔⵠΔⵠᐃᐃᐃ: "img/night-skin13.png",
    ᐃⵠᐃΔΔᐃⲆ: "img/day-skin14.png",
    ⵠⵠΔΔᐃᐃⲆ: "img/night-skin14.png",
    ΔᐃᐃΔⵠᐃΔ: "img/day-skin15.png",
    ᐃⵠᐃⵠΔᐃᐃ: "img/night-skin15.png",
    ⵠᐃⲆⲆⵠⵠⲆ: "img/day-skin16.png",
    ΔΔⲆΔⲆⵠΔ: "img/night-skin16.png",
    ⵠᐃⲆⲆᐃΔⲆ: "img/day-skin17.png",
    ⵠⵠⲆᐃᐃⲆΔ: "img/night-skin17.png",
    ⵠⲆⵠᐃⵠⵠⵠ: "img/day-skin18.png",
    ⲆᐃⲆᐃⵠᐃⲆ: "img/night-skin18.png",
    ᐃⲆⲆⵠⵠⲆᐃ: "img/day-skin19.png",
    ΔΔΔΔⵠⵠⵠ: "img/night-skin19.png",
    ⵠᐃⵠⲆΔᐃⲆ: "img/day-skin20.png",
    ΔⲆΔⵠᐃᐃⲆ: "img/night-skin20.png",
    ΔΔⵠⲆⵠᐃⲆ: "img/day-skin21.png",
    ᐃᐃᐃⵠⲆᐃᐃ: "img/night-skin21.png",
    ᐃΔⵠⲆⲆΔⵠ: "img/day-skin22.png",
    ᐃᐃΔⵠⲆᐃⲆ: "img/night-skin22.png",
    ⲆΔⲆⵠⵠΔⵠ: "img/day-skin23.png",
    ᐃΔᐃⵠⵠΔΔ: "img/night-skin23.png",
    ᐃⵠᐃᐃᐃⲆΔ: "img/day-skin24.png",
    ⵠⵠⵠΔᐃᐃⲆ: "img/night-skin24.png",
    ⲆⵠΔΔᐃⲆΔ: "img/day-skin25.png",
    ⵠΔⵠΔⲆᐃⲆ: "img/night-skin25.png",
    ΔΔΔΔᐃΔΔ: "img/day-skin26.png",
    ⲆⵠⵠⲆⲆⵠᐃ: "img/night-skin26.png",
    ᐃⵠᐃⲆᐃⲆⲆ: "img/day-skin27.png",
    ⵠⵠⵠⵠⵠⲆᐃ: "img/night-skin27.png",
    ᐃⲆⲆⵠⲆⲆⲆ: "img/day-skin28.png",
    ⵠᐃΔⲆΔᐃⵠ: "img/night-skin28.png",
    ᐃᐃΔᐃⲆⵠⲆ: "img/day-skin29.png",
    ᐃⵠⵠⲆᐃⲆᐃ: "img/night-skin29.png",
    ΔΔⲆᐃᐃᐃⲆ: "img/day-skin30.png",
    ⵠⲆΔᐃΔΔⵠ: "img/night-skin30.png",
    ΔᐃᐃⵠⲆΔⵠ: "img/day-skin31.png",
    ᐃⲆⵠⲆⵠⵠΔ: "img/night-skin31.png",
    ΔⵠᐃΔⵠΔⵠ: "img/day-skin32.png",
    ⲆΔΔⲆᐃⲆⵠ: "img/night-skin32.png",
    ΔⵠᐃⲆᐃⲆᐃ: "img/day-skin33.png",
    ⵠᐃⵠᐃᐃΔⲆ: "img/night-skin33.png",
    ΔⵠⲆΔΔᐃᐃ: "img/day-skin34.png",
    ᐃⲆΔⵠᐃᐃΔ: "img/night-skin34.png",
    ⵠᐃΔⲆⲆⲆⲆ: "img/day-skin35.png",
    ⵠΔⵠⲆⵠⵠᐃ: "img/night-skin35.png",
    ᐃⲆⲆⵠᐃⲆΔ: "img/day-skin36.png",
    ΔΔⲆᐃⵠᐃⲆ: "img/night-skin36.png",
    ⲆⵠⲆⲆᐃᐃⲆ: "img/day-skin37.png",
    ᐃⵠⲆⲆᐃΔⲆ: "img/night-skin37.png",
    ⲆⵠⲆⵠⵠΔᐃ: "img/day-skin38.png",
    ⵠΔΔΔⲆⲆΔ: "img/night-skin38.png",
    ⵠᐃⵠᐃⲆᐃⵠ: "img/day-skin39.png",
    ΔᐃⲆᐃⵠⲆᐃ: "img/night-skin39.png",
    ΔⵠⲆΔΔⲆΔ: "img/day-skin40.png",
    ΔᐃⵠⲆⲆᐃᐃ: "img/night-skin40.png",
    ⲆⵠⲆⲆᐃⲆⲆ: "img/day-skin41.png",
    ᐃΔⲆⵠᐃⵠⵠ: "img/night-skin41.png",
    ⲆᐃⵠᐃΔΔⵠ: "img/day-skin42.png",
    ΔΔⵠΔⲆⲆΔ: "img/night-skin42.png",
    ⵠⲆΔΔⲆΔⵠ: "img/day-skin43.png",
    ⵠᐃΔΔΔᐃΔ: "img/night-skin43.png",
    ⵠⲆⲆⵠⵠᐃᐃ: "img/day-skin44.png",
    ⲆΔⵠΔⵠⲆΔ: "img/night-skin44.png",
    ⲆⲆⲆᐃᐃΔⵠ: "img/day-skin45.png",
    ⵠΔΔᐃΔⲆᐃ: "img/night-skin45.png",
    ΔⲆⲆⵠⵠⲆᐃ: "img/day-skin46.png",
    ΔⵠⲆⵠⲆΔᐃ: "img/night-skin46.png",
    ⲆⵠΔⲆⵠᐃᐃ: "img/day-skin47.png",
    ⲆᐃᐃⵠⵠΔⵠ: "img/night-skin47.png",
    ⲆⲆᐃⲆⵠᐃᐃ: "img/day-skin48.png",
    ΔⲆᐃⵠΔᐃⲆ: "img/night-skin48.png",
    ΔᐃⵠⲆΔᐃⵠ: "img/day-skin49.png",
    ΔᐃᐃⲆΔⲆΔ: "img/night-skin49.png",
    ᐃΔΔⵠⵠⲆΔ: "img/day-skin50.png",
    ᐃⵠⲆⵠᐃⲆⵠ: "img/night-skin50.png",
    ⲆⵠⲆΔⵠᐃΔ: "img/day-skin51.png",
    ᐃⲆΔⲆΔΔⲆ: "img/night-skin51.png",
    ᐃⲆⵠⵠⵠⲆᐃ: "img/day-skin52.png",
    ⲆⵠᐃΔⵠΔⵠ: "img/night-skin52.png",
    ⵠⵠΔⲆᐃⵠⲆ: "img/day-skin53.png",
    ⵠⲆΔⲆⵠΔᐃ: "img/night-skin53.png",
    ⵠᐃⵠⵠᐃᐃᐃ: "img/day-skin54.png",
    ΔᐃⲆΔᐃⵠⵠ: "img/night-skin54.png",
    ⵠⵠⵠᐃⵠⵠΔ: "img/day-skin55.png",
    ΔΔΔⵠⵠⵠⵠ: "img/night-skin55.png",
    ΔⵠᐃⲆⲆᐃⵠ: "img/day-skin56.png",
    ⲆᐃⲆΔᐃΔⲆ: "img/night-skin56.png",
    ΔᐃᐃⵠᐃⲆⲆ: "img/day-skin57.png",
    ⵠᐃⲆᐃⲆᐃᐃ: "img/night-skin57.png",
    ᐃⲆᐃᐃΔⵠⵠ: "img/day-skin58.png",
    ΔᐃᐃⵠⵠᐃΔ: "img/night-skin58.png",
    ⵠᐃΔᐃᐃⵠⵠ: "img/day-skin59.png",
    ⲆΔᐃᐃⵠᐃΔ: "img/night-skin59.png",
    ⵠΔⲆⲆⲆᐃⵠ: "img/day-skin60.png",
    ΔΔΔᐃⵠⲆⲆ: "img/night-skin60.png",
    ΔⵠᐃⲆΔᐃᐃ: "img/day-skin61.png",
    ⲆⵠΔᐃⵠᐃⲆ: "img/night-skin61.png",
    ᐃΔΔΔⵠᐃᐃ: "img/day-skin62.png",
    ⲆⲆᐃΔⵠⵠⲆ: "img/night-skin62.png",
    ᐃⵠⵠⲆⵠⲆⲆ: "img/day-skin63.png",
    ΔΔⲆⲆᐃⵠⵠ: "img/night-skin63.png",
    ⲆⵠⵠⵠⲆⲆⲆ: "img/day-skin64.png",
    ⵠᐃᐃⲆⲆᐃΔ: "img/night-skin64.png",
    ⲆᐃΔΔⵠΔⵠ: "img/day-skin65.png",
    ⲆⲆᐃⲆΔΔᐃ: "img/night-skin65.png",
    ⲆᐃⲆᐃⵠᐃⵠ: "img/day-skin66.png",
    ᐃᐃⲆᐃᐃΔᐃ: "img/night-skin66.png",
    ΔᐃⲆⵠⵠⲆΔ: "img/day-skin67.png",
    ΔΔⲆⲆⵠⵠⲆ: "img/night-skin67.png",
    ΔᐃⲆⲆᐃᐃΔ: "img/day-skin68.png",
    ΔⲆΔᐃⲆⲆⲆ: "img/night-skin68.png",
    ⲆΔᐃΔⵠⲆΔ: "img/day-skin69.png",
    ᐃΔⵠⲆⲆΔᐃ: "img/night-skin69.png",
    ⵠᐃⵠⲆⵠⵠΔ: "img/day-skin70.png",
    ΔᐃⵠᐃΔᐃⵠ: "img/night-skin70.png",
    ⲆⲆᐃⵠⵠᐃΔ: "img/day-skin71.png",
    ⵠΔⲆⵠΔⲆᐃ: "img/night-skin71.png",
    ΔᐃⲆΔⲆⵠΔ: "img/day-skin72.png",
    ᐃΔΔᐃᐃᐃΔ: "img/night-skin72.png",
    ᐃⲆⵠⲆⲆⲆᐃ: "img/day-skin73.png",
    ᐃᐃᐃⵠⵠΔΔ: "img/night-skin73.png",
    ᐃⲆΔⲆⵠⲆⲆ: "img/day-skin74.png",
    ΔΔΔΔⵠᐃⵠ: "img/night-skin74.png",
    ᐃΔⲆⵠΔΔᐃ: "img/day-skin75.png",
    ⵠΔⲆΔᐃⲆΔ: "img/night-skin75.png",
    ⲆᐃᐃΔⲆⵠⲆ: "img/day-skin76.png",
    ⲆⵠⵠΔΔⲆΔ: "img/night-skin76.png",
    ⵠᐃΔⵠᐃⵠΔ: "img/day-skin77.png",
    ⲆᐃᐃΔᐃⲆⵠ: "img/night-skin77.png",
    ⵠⲆⵠⲆΔᐃΔ: "img/day-skin78.png",
    ⲆΔΔᐃᐃΔᐃ: "img/night-skin78.png",
    ᐃΔⲆΔⲆᐃΔ: "img/day-skin79.png",
    ⲆⵠΔᐃⵠⲆⵠ: "img/night-skin79.png",
    ⵠᐃᐃⵠᐃΔⲆ: "img/day-skin80.png",
    ⵠᐃⵠⵠⲆⲆΔ: "img/night-skin80.png",
    ⲆⵠⲆΔⵠⵠΔ: "img/day-skin81.png",
    ΔᐃᐃΔᐃΔⲆ: "img/night-skin81.png",
    ᐃⲆⲆⵠΔⵠⵠ: "img/day-skin82.png",
    ΔᐃⵠⵠΔᐃⵠ: "img/night-skin82.png",
    ΔⲆⲆⵠⵠⲆΔ: "img/day-skin83.png",
    ⵠᐃᐃΔⲆᐃⵠ: "img/night-skin83.png",
    ᐃⲆᐃΔΔⲆᐃ: "img/day-skin84.png",
    Ⲇᐃᐃᐃᐃⵠᐃ: "img/night-skin84.png",
    ΔⵠΔⵠΔⵠᐃ: "img/day-skin85.png",
    ⲆᐃⵠΔΔᐃᐃ: "img/night-skin85.png",
    ΔⲆΔⵠⵠⵠᐃ: "img/day-skin86.png",
    ⲆΔᐃΔᐃⵠΔ: "img/night-skin86.png",
    ᐃⵠΔᐃⵠⲆᐃ: "img/day-skin87.png",
    ⵠⵠΔᐃΔᐃⵠ: "img/night-skin87.png",
    ΔⲆᐃΔᐃᐃΔ: "img/day-skin88.png",
    ⵠᐃⲆⲆᐃᐃᐃ: "img/night-skin88.png",
    ⵠⲆΔⵠⲆⵠᐃ: "img/day-skin89.png",
    ⵠⲆᐃᐃⲆΔⲆ: "img/night-skin89.png",
    ⲆΔⲆⵠᐃΔⵠ: "img/day-skin90.png",
    ᐃⲆⲆⵠΔⵠⲆ: "img/night-skin90.png",
    ⵠⲆⲆᐃⲆᐃᐃ: "img/day-skin91.png",
    ᐃΔΔᐃⵠⵠⵠ: "img/night-skin91.png",
    ⵠΔⲆⲆΔⲆⲆ: "img/day-skin92.png",
    ⲆⲆⵠᐃⲆⵠⲆ: "img/night-skin92.png",
    ⵠᐃΔᐃⲆᐃΔ: "img/day-skin93.png",
    ᐃⵠⲆⵠⲆⵠᐃ: "img/night-skin93.png",
    ᐃⵠΔᐃᐃΔΔ: "img/day-skin94.png",
    ⵠΔⲆⵠⲆⲆⲆ: "img/night-skin94.png",
    ΔⲆΔᐃΔⲆⵠ: "img/day-skin95.png",
    ᐃᐃᐃᐃⲆΔᐃ: "img/night-skin95.png",
    ΔⲆⲆᐃⵠΔᐃ: "img/day-skin96.png",
    ⲆᐃᐃᐃⲆⵠⲆ: "img/night-skin96.png",
    ΔᐃᐃᐃⲆⲆⵠ: "img/day-skin97.png",
    ⲆᐃᐃⲆᐃⵠΔ: "img/night-skin97.png",
    ⵠΔᐃΔᐃᐃᐃ: "img/day-skin98.png",
    ΔΔᐃⵠᐃΔΔ: "img/night-skin98.png",
    ᐃΔⵠⲆΔΔⵠ: "img/day-skin99.png",
    ⲆⲆⲆᐃⵠⵠΔ: "img/night-skin99.png",
    ⲆΔᐃⲆⲆⲆⲆ: "img/day-skin100.png",
    ⲆᐃᐃΔΔΔᐃ: "img/night-skin100.png",
    ⵠᐃⲆᐃⲆᐃΔ: "img/day-skin101.png",
    ΔᐃᐃΔⵠΔⲆ: "img/night-skin101.png",
    ΔⵠⲆⲆⵠΔⲆ: "img/day-skin102.png",
    ⵠᐃΔΔᐃⲆⲆ: "img/night-skin102.png",
    ΔⵠΔⵠⲆΔⵠ: "img/day-skin103.png",
    ⲆⵠᐃᐃᐃᐃΔ: "img/night-skin103.png",
    ᐃⲆⲆⲆⲆⵠᐃ: "img/day-skin104.png",
    ⵠⵠΔΔⲆⵠⵠ: "img/night-skin104.png",
    ⲆΔⵠΔΔᐃⵠ: "img/day-skin105.png",
    ΔⵠᐃⲆⵠΔᐃ: "img/night-skin105.png",
    ᐃΔᐃⵠᐃⵠᐃ: "img/day-skin106.png",
    ᐃΔⲆΔΔΔᐃ: "img/night-skin106.png",
    ⲆᐃⲆⵠⵠᐃΔ: "img/day-skin107.png",
    ⲆⵠⲆⵠᐃⵠᐃ: "img/night-skin107.png",
    ⵠᐃΔⵠⲆⲆⲆ: "img/day-skin108.png",
    ᐃⵠΔⵠⲆⲆⵠ: "img/night-skin108.png",
    ᐃΔⵠⲆᐃᐃᐃ: "img/day-skin109.png",
    ⲆⲆⵠⵠΔⵠⵠ: "img/night-skin109.png",
    ⲆΔΔΔᐃᐃⵠ: "img/day-skin110.png",
    ΔᐃⲆᐃⲆⵠⲆ: "img/night-skin110.png",
    ΔⲆⲆΔⲆⵠΔ: "img/day-skin111.png",
    ⲆⵠᐃⲆⵠΔΔ: "img/night-skin111.png",
    ⲆᐃᐃⵠΔⲆⲆ: "img/day-skin112.png",
    ΔᐃΔᐃᐃⲆᐃ: "img/night-skin112.png",
    ΔⵠⵠⲆΔⵠⲆⵠⵠ: "img/day-skin113.png",
    ΔⲆΔⲆⵠⲆᐃΔⲆ: "img/night-skin113.png",
    ᐃⲆⲆⲆⲆᐃᐃ: "img/day-skin114.png",
    ⲆⲆⵠΔⵠⲆᐃ: "img/night-skin114.png",
    ᐃⲆⲆⵠΔⲆⲆ: "img/day-skin115.png",
    ⵠᐃⲆⵠᐃⲆΔ: "img/night-skin115.png",
    ⲆⵠᐃᐃⵠⲆΔ: "img/day-skin116.png",
    ΔⵠΔΔⲆΔΔ: "img/night-skin116.png",
    ᐃᐃⵠⲆΔΔΔ: "img/day-skin117.png",
    ᐃⲆΔᐃⲆᐃⲆ: "img/night-skin117.png",
    ⵠΔⵠᐃⲆⲆΔ: "img/day-skin118.png",
    ⲆᐃⲆⵠⵠⵠⵠ: "img/night-skin118.png",
    ᐃⵠⵠⵠⵠᐃⵠ: "img/day-skin119.png",
    ⲆⲆⵠᐃΔⲆⲆ: "img/night-skin119.png",
    ⲆⵠⵠᐃᐃⲆΔ: "img/day-skin120.png",
    ⵠᐃΔΔΔⲆΔ: "img/night-skin120.png",
    ᐃΔΔⵠΔᐃⲆ: "img/day-skin121.png",
    ΔⲆᐃⵠΔᐃᐃ: "img/night-skin121.png",
    ⵠⲆᐃⲆⵠΔⲆ: "img/day-skin122.png",
    ⲆᐃⵠᐃᐃⲆΔ: "img/night-skin122.png",
    ⲆᐃⵠⲆⲆΔⲆ: "img/day-skin123.png",
    ⵠΔⵠⵠᐃⵠΔ: "img/night-skin123.png",
    ᐃⵠⲆⲆⲆΔⵠ: "img/day-skin124.png",
    ᐃⵠΔᐃⲆⵠⲆ: "img/night-skin124.png",
    ᐃⲆⵠᐃⲆᐃΔ: "img/day-skin125.png",
    ᐃᐃⵠᐃΔⵠⵠ: "img/night-skin125.png",
    ᐃⵠᐃⲆⵠⵠⵠ: "img/day-skin126.png",
    ΔⵠΔΔΔΔΔ: "img/night-skin126.png",
    ᐃⵠΔⵠⵠΔⲆ: "img/day-skin127.png",
    ᐃⲆⲆΔⲆⲆΔ: "img/night-skin127.png",
    ⵠⵠⲆΔⵠⲆΔ: "img/day-skin128.png",
    ⵠΔⲆⵠᐃΔⵠ: "img/night-skin128.png",
    ΔΔⲆΔΔⲆΔ: "img/day-skin129.png",
    ⵠⵠᐃⵠΔⵠΔ: "img/night-skin129.png",
    ⲆΔⲆⵠᐃᐃᐃ: "img/day-skin130-1.png",
    ΔΔΔⵠᐃΔΔ: "img/night-skin130-1.png",
    ⲆᐃⵠⲆᐃⵠⲆ: "img/day-skin131.png",
    ᐃⲆⵠⵠΔᐃΔ: "img/night-skin131.png",
    ᐃΔᐃⲆⵠⲆⲆ: "img/day-skin132.png",
    ΔΔᐃᐃΔⲆᐃ: "img/night-skin132.png",
    ᐃⵠᐃⵠΔⲆΔ: "img/day-skin133.png",
    ΔⲆⲆⵠᐃᐃᐃ: "img/night-skin133.png",
    ⲆᐃᐃⵠⲆᐃⲆ: "img/day-skin134.png",
    ΔⵠⲆⵠⲆΔⵠ: "img/night-skin134.png",
    ᐃⵠᐃⲆᐃΔⲆ: "img/day-skin135.png",
    ΔᐃⲆⲆⵠᐃᐃ: "img/night-skin135.png",
    ⲆⵠᐃⲆΔΔᐃ: "img/day-skin136.png",
    ⵠΔΔⲆᐃⵠⵠ: "img/night-skin136.png",
    ⵠᐃΔᐃᐃΔΔ: "img/day-skin137.png",
    ⵠΔⲆᐃⲆΔⲆ: "img/night-skin137.png",
    ⵠΔᐃⲆⲆΔΔ: "img/day-skin138.png",
    ᐃⵠⵠⵠⵠΔᐃ: "img/night-skin138.png",
    ⵠᐃΔΔΔⵠⲆ: "img/day-skin139.png",
    ⵠᐃΔᐃⵠⵠⵠ: "img/night-skin139.png",
    ⲆⲆⲆⲆΔᐃⲆ: "img/day-skin140.png",
    ⲆⵠΔⲆⲆⵠⲆ: "img/night-skin140.png",
    ΔⵠΔᐃΔⲆⲆ: "img/day-skin141.png",
    ΔΔΔᐃⲆᐃⲆ: "img/night-skin141.png",
    ⵠᐃⲆⲆⲆⵠⲆ: "img/day-skin142.png",
    ⲆⵠⵠᐃᐃᐃΔ: "img/night-skin142.png",
    ᐃΔⵠⲆⲆᐃᐃ: "img/day-skin143.png",
    ⲆᐃⵠΔΔΔΔ: "img/night-skin143.png",
    ⲆΔⵠᐃΔⲆΔ: "img/day-skin144.png",
    ᐃⵠΔᐃⵠᐃⲆ: "img/night-skin144.png",
    ᐃⵠᐃΔᐃΔᐃ: "img/day-skin145.png",
    ⵠⲆⵠΔᐃⲆⲆ: "img/night-skin145.png",
    ⲆⲆᐃΔᐃⵠⵠ: "img/day-skin146.png",
    ᐃΔⵠΔⵠᐃᐃ: "img/night-skin146.png",
    ΔΔⵠΔΔΔΔ: "img/day-skin147.png",
    ᐃⲆⵠⵠⲆⲆᐃ: "img/night-skin147.png",
    ᐃⲆⲆᐃⲆᐃΔ: "img/day-skin148.png",
    ΔⵠⲆⲆⵠΔΔ: "img/night-skin148.png",
    ⵠⵠⲆᐃⵠⵠⲆ: "img/day-skin149.png",
    ⵠᐃΔⵠⵠⲆⵠ: "img/night-skin149.png",
    ᐃᐃⵠᐃᐃΔⵠ: "img/day-skin150.png",
    ⵠᐃΔⲆⵠⵠⲆ: "img/night-skin150.png",
    ⲆⲆᐃⲆⲆᐃᐃ: "img/day-skin151.png",
    ⲆⲆⵠᐃΔⲆᐃ: "img/night-skin151.png",
    ΔⵠᐃΔᐃⵠⵠ: "img/day-skin152.png",
    ΔⵠⵠΔᐃΔⲆ: "img/night-skin152.png",
    ᐃΔⲆⲆⵠⵠⵠ: "img/day-skin153.png",
    ΔⲆⲆΔⲆⲆᐃ: "img/night-skin153.png",
    ⲆΔⵠᐃᐃᐃⵠ: "img/day-skin154.png",
    ᐃΔΔⵠΔⵠΔ: "img/night-skin154.png",
    ⵠΔⵠⵠᐃⲆⲆ: "img/day-skin155.png",
    ⵠⵠᐃⲆⲆⵠⵠ: "img/night-skin155.png",
    ⵠⵠᐃⵠᐃⵠᐃ: "img/day-skin156.png",
    ᐃⲆⲆΔⵠⲆΔ: "img/night-skin156.png",
    ⲆⵠⲆⵠⲆᐃⵠ: "img/day-skin157.png",
    ᐃⲆΔⵠΔⲆᐃ: "img/night-skin157.png",
    ⵠΔⲆⵠⵠΔᐃ: "img/day-skin158.png",
    ⵠᐃΔⵠΔⲆⵠ: "img/night-skin158.png",
    ΔΔᐃⵠΔΔᐃ: "img/day-skin159.png",
    ᐃΔΔⵠⵠⵠΔ: "img/night-skin159.png",
    ⵠΔⵠⲆⲆΔⵠ: "img/day-skin160.png",
    ΔⲆᐃⲆⲆⲆⲆ: "img/night-skin160.png",
    ᐃⲆᐃⵠΔᐃΔ: "img/day-skin161.png",
    ΔᐃⲆⵠⲆⲆⲆ: "img/night-skin161.png",
    ⵠⲆᐃᐃΔⵠⵠ: "img/day-skin162.png",
    ⲆⲆᐃᐃᐃΔΔ: "img/night-skin162.png",
    ΔⵠᐃΔᐃⲆΔ: "img/day-skin163.png",
    ⲆᐃⲆᐃⵠΔᐃ: "img/night-skin163.png",
    ⵠⵠⵠⲆᐃⵠⵠ: "img/day-skin164.png",
    ᐃⲆΔΔᐃᐃⲆ: "img/night-skin164.png",
    ΔᐃⵠⵠⲆⲆΔ: "img/day-skin165.png",
    ᐃⲆⵠΔⵠᐃΔ: "img/night-skin165.png",
    ⲆΔᐃᐃΔⵠⲆ: "img/day-skin166.png",
    ΔⲆΔⲆΔᐃⲆ: "img/night-skin166.png",
    ⲆΔⲆⲆⲆⲆᐃ: "img/day-skin167.png",
    ΔⵠᐃΔᐃⵠΔ: "img/night-skin167.png",
    ⵠᐃᐃⲆⵠΔᐃ: "img/day-skin168.png",
    ⵠⵠᐃΔᐃᐃᐃ: "img/night-skin168.png",
    ᐃⵠⵠΔᐃᐃⲆ: "img/day-skin169.png",
    ᐃⲆΔⲆⲆⵠⲆ: "img/night-skin169.png",
    ⲆⲆⵠⲆΔᐃᐃ: "img/day-skin170.png",
    ΔⵠⵠⲆⲆⲆᐃ: "img/night-skin170.png",
    ⵠᐃΔⵠⲆⲆΔ: "img/day-skin171.png",
    ΔⲆΔⲆᐃⲆΔ: "img/night-skin171.png",
    ⵠᐃⵠⲆΔΔⲆ: "img/day-skin172.png",
    ΔⲆⲆᐃⵠᐃΔ: "img/night-skin172.png",
    ΔⵠᐃⵠⵠⵠΔ: "img/day-skin173.png",
    ΔⵠΔᐃⲆⵠⵠ: "img/night-skin173.png",
    ⲆΔᐃⲆⵠᐃⵠ: "img/day-skin174.png",
    ⵠΔᐃⲆᐃΔᐃ: "img/night-skin174.png",
    ᐃΔΔᐃⵠᐃⲆ: "img/day-skin175.png",
    ΔⵠΔΔⵠᐃᐃ: "img/night-skin175.png",
    ΔΔΔΔᐃⲆᐃ: "img/day-skin176.png",
    ⵠⲆⲆᐃᐃⵠⲆ: "img/night-skin176.png",
    ΔⵠⲆᐃᐃⲆᐃ: "img/day-skin177.png",
    ⵠⵠⲆΔⲆⵠⵠ: "img/night-skin177.png",
    ⵠᐃΔⵠⲆⵠⲆ: "img/day-skin178.png",
    ΔᐃⵠᐃⵠⲆΔ: "img/night-skin178.png",
    ᐃⲆᐃⲆⲆᐃⵠ: "img/day-skin179.png",
    ⲆⵠᐃᐃᐃⲆΔ: "img/night-skin179.png",
    ⲆⲆⲆᐃⲆⵠΔ: "img/day-skin180.png",
    ᐃⲆⵠⲆΔⵠⵠ: "img/night-skin180.png",
    ⲆΔⵠᐃᐃᐃⲆ: "img/day-skin181.png",
    ⵠΔᐃⵠᐃⵠᐃ: "img/night-skin181.png",
    ΔᐃᐃΔⲆⲆᐃ: "img/day-skin182.png",
    ⲆⵠΔⲆⲆⲆᐃ: "img/night-skin182.png",
    ⲆⲆⵠⵠⲆΔⲆ: "img/day-skin183.png",
    ⵠⲆⵠⲆⵠᐃΔ: "img/night-skin183.png",
    ⵠⵠᐃⵠⲆⲆᐃ: "img/day-skin184.png",
    ΔᐃⵠΔΔⵠⵠ: "img/night-skin184.png",
    ⵠⲆⲆᐃⲆΔⲆ: "img/day-skin185.png",
    ⲆⲆⲆΔᐃⲆᐃ: "img/night-skin185.png",
    ᐃⲆⲆᐃⵠΔΔ: "img/day-skin186.png",
    ⲆⲆⲆⲆⲆᐃⵠ: "img/night-skin186.png",
    ⲆⲆⵠⲆΔⵠᐃ: "img/day-skin187.png",
    ⲆⵠΔⵠⲆⵠΔ: "img/night-skin187.png",
    ⲆΔᐃⲆΔⵠᐃ: "img/day-skin188.png",
    ᐃᐃⲆᐃⲆΔⲆ: "img/night-skin188.png",
    ⲆΔᐃᐃⵠⲆᐃ: "img/day-skin189.png",
    ⲆᐃⲆΔⵠᐃⵠ: "img/night-skin189.png",
    ΔΔⲆⲆᐃΔΔ: "img/day-skin190.png",
    ⵠⲆⲆⵠⵠΔⲆ: "img/night-skin190.png",
    ᐃᐃᐃⵠⲆΔᐃ: "img/day-skin191.png",
    ΔⵠΔᐃⵠᐃⲆ: "img/night-skin191.png",
    ⵠⲆⲆⵠⲆᐃⲆ: "img/day-skin192.png",
    ⵠⲆⲆⲆᐃᐃⵠ: "img/night-skin192.png",
    ᐃᐃⲆⵠᐃᐃⵠ: "img/day-skin193.png",
    ⲆⵠⲆⵠⵠΔⵠ: "img/night-skin193.png",
    ⵠⵠⵠΔⵠᐃⲆ: "img/day-skin194.png",
    ⲆⵠᐃΔⲆⵠⲆ: "img/night-skin194.png",
    ⲆΔΔⵠᐃⲆᐃ: "img/day-skin195.png",
    ⲆΔΔᐃᐃⵠΔ: "img/night-skin195.png",
    ⵠΔᐃⵠⲆᐃᐃ: "img/day-skin196.png",
    ΔᐃⲆⵠΔⲆᐃ: "img/night-skin196.png",
    ⲆᐃⵠⲆⵠⵠΔ: "img/day-skin197.png",
    ᐃᐃⲆΔΔⲆᐃ: "img/night-skin197.png",
    ⲆⲆΔᐃⲆΔⲆ: "img/day-skin198.png",
    ᐃΔΔᐃⲆᐃᐃ: "img/night-skin198.png",
    ⲆᐃΔⵠⲆⵠΔ: "img/day-skin199.png",
    ⲆⵠᐃᐃⲆᐃᐃ: "img/night-skin199.png",
    ⵠᐃⵠᐃⲆⲆⲆ: "img/day-skin200.png",
    ⲆΔΔⵠⲆⲆⵠ: "img/night-skin200.png",
    ᐃⲆⵠᐃΔⲆⵠ: "img/day-skin201.png",
    ΔⲆⵠΔΔⲆᐃ: "img/night-skin201.png",
    ᐃⲆΔᐃᐃΔΔ: "img/day-skin202.png",
    ΔΔⵠⲆᐃⲆΔ: "img/night-skin202.png",
    ⵠⵠⵠᐃΔΔⲆ: "img/day-skin203.png",
    ΔᐃⲆᐃΔΔᐃ: "img/night-skin203.png",
    ⲆΔⲆⵠΔⵠⲆ: "img/day-skin204.png",
    ΔΔⵠⵠⵠᐃᐃ: "img/night-skin204.png",
    ⵠⲆⲆΔⲆⲆΔ: "img/day-skin205.png",
    ᐃⲆⵠΔΔᐃᐃ: "img/night-skin205.png",
    ΔⲆⲆᐃⵠⲆᐃ: "img/day-skin206.png",
    ᐃᐃΔⵠᐃᐃⵠ: "img/night-skin206.png",
    ⵠⲆⵠⵠᐃᐃⵠ: "img/day-skin207.png",
    ΔⵠΔⵠᐃⲆᐃ: "img/night-skin207.png",
    ᐃⲆᐃⲆⵠᐃᐃ: "img/day-skin208.png",
    ⲆΔᐃⵠⲆⲆΔ: "img/night-skin208.png",
    ᐃΔⲆΔᐃⵠⲆ: "img/day-skin209.png",
    ᐃⲆᐃᐃΔⵠⲆ: "img/night-skin209.png",
    ⵠᐃⲆΔᐃᐃⲆ: "img/day-skin210.png",
    ⲆⲆᐃΔᐃⲆᐃ: "img/night-skin210.png",
    ⲆⲆⲆᐃⲆⵠⲆ: "img/day-skin211.png",
    ⵠᐃΔΔᐃⵠᐃ: "img/night-skin211.png",
    ⲆΔΔΔⵠᐃⲆ: "img/day-skin212.png",
    ᐃⲆⵠΔⲆⲆᐃ: "img/night-skin212.png",
    ᐃⵠⵠΔᐃⵠⲆ: "img/day-skin213.png",
    ᐃⲆⵠᐃⲆⲆΔ: "img/night-skin213.png",
    ⵠᐃΔΔⲆⵠΔ: "img/day-skin214.png",
    ᐃΔΔΔΔⲆⵠ: "img/night-skin214.png",
    ⵠⵠⲆⵠΔΔⲆ: "img/day-hand-skin0.png",
    ᐃⲆᐃᐃᐃⵠⵠ: "img/night-hand-skin0.png",
    ⵠⲆⲆⵠᐃⵠΔ: "img/day-hand-skin1.png",
    ΔⵠᐃΔᐃⲆᐃ: "img/night-hand-skin1.png",
    ΔᐃΔⵠΔΔⲆ: "img/day-hand-skin2.png",
    ⲆⵠⵠⲆⲆᐃΔ: "img/night-hand-skin2.png",
    ⵠⵠⲆⵠᐃΔⵠ: "img/day-hand-skin3.png",
    ᐃⵠⲆΔΔΔᐃ: "img/night-hand-skin3.png",
    ⲆⵠⵠⲆᐃⲆΔ: "img/day-hand-skin4.png",
    ᐃⲆⲆⲆᐃⵠᐃ: "img/night-hand-skin4.png",
    ⲆⵠΔⵠⵠᐃⵠ: "img/day-hand-skin5.png",
    ⵠⵠᐃⵠⲆΔᐃ: "img/night-hand-skin5.png",
    ᐃᐃⲆΔᐃΔΔ: "img/day-hand-skin6.png",
    ⲆᐃΔΔⵠⲆΔⲆᐃ: "img/night-hand-skin6.png",
    ⲆΔΔΔᐃⲆΔ: "img/day-hand-skin6.png",
    ΔⵠⲆᐃⲆⵠΔ: "img/night-hand-skin6.png",
    ⲆᐃΔΔⵠᐃᐃ: "img/day-hand-skin8.png",
    ⲆΔΔΔᐃᐃⲆ: "img/night-hand-skin8.png",
    ⲆΔⲆⲆⲆΔⲆ: "img/day-hand-skin9.png",
    ⵠΔΔΔⲆⵠᐃ: "img/night-hand-skin9.png",
    ⲆⲆΔΔΔⵠⵠ: "img/day-hand-skin10.png",
    ⲆⲆᐃⲆⲆⲆⲆ: "img/night-hand-skin10.png",
    ⵠΔⵠΔᐃⵠΔ: "img/day-hand-skin11.png",
    ᐃΔⲆⲆΔⲆᐃ: "img/night-hand-skin11.png",
    ⵠⲆⲆⲆⵠΔⲆ: "img/day-hand-skin12.png",
    ⲆᐃⵠΔΔⲆⵠ: "img/night-hand-skin12.png",
    ⲆΔᐃⲆⵠΔᐃ: "img/day-hand-skin13.png",
    ⵠΔᐃΔⲆⲆⲆ: "img/night-hand-skin13.png",
    ⵠΔΔⲆⵠᐃΔ: "img/day-hand-skin14.png",
    ᐃΔⲆⲆΔΔⲆ: "img/night-hand-skin14.png",
    ΔΔⲆⲆⲆⵠΔ: "img/day-hand-skin15.png",
    ΔΔⵠⵠⵠᐃΔ: "img/night-hand-skin15.png",
    ⲆⵠΔᐃⵠⵠⵠ: "img/day-hand-skin16.png",
    ⵠⲆⵠⵠᐃΔᐃ: "img/night-hand-skin16.png",
    ΔⵠⵠⲆΔⲆⲆ: "img/day-hand-skin17.png",
    ⵠⵠᐃΔᐃⵠⵠ: "img/night-hand-skin17.png",
    ᐃⲆⲆⵠᐃⵠⲆ: "img/day-hand-skin18.png",
    ΔΔⲆΔⵠᐃᐃ: "img/night-hand-skin18.png",
    ᐃⵠΔΔⵠⵠⲆ: "img/day-hand-skin19.png",
    ᐃⲆᐃⲆⵠⵠᐃ: "img/night-hand-skin19.png",
    ᐃⲆΔΔᐃᐃΔ: "img/day-hand-skin20.png",
    ⲆⲆᐃΔⵠΔΔ: "img/night-hand-skin20.png",
    ⵠΔⵠΔᐃⲆⵠ: "img/day-hand-skin21.png",
    ⵠΔΔΔᐃⲆΔ: "img/night-hand-skin21.png",
    ΔⵠᐃΔΔᐃΔ: "img/day-hand-skin22.png",
    ⲆⵠⲆⵠⵠΔΔ: "img/night-hand-skin22.png",
    ⵠⵠᐃⵠⲆⲆⲆ: "img/day-hand-skin23.png",
    ⵠⲆⵠᐃⵠⲆⲆ: "img/night-hand-skin23.png",
    ᐃⵠᐃΔⵠⵠᐃ: "img/day-hand-skin24.png",
    ⲆᐃΔⵠΔⵠᐃ: "img/night-hand-skin24.png",
    ⵠΔᐃᐃᐃⲆⵠ: "img/day-hand-skin25.png",
    ΔΔΔᐃᐃΔⵠ: "img/night-hand-skin25.png",
    ⵠⲆΔᐃᐃΔᐃ: "img/day-hand-skin26.png",
    ⵠᐃᐃΔΔᐃᐃ: "img/night-hand-skin26.png",
    ΔΔΔΔΔⵠΔ: "img/day-hand-skin27.png",
    ΔᐃΔΔᐃΔᐃ: "img/night-hand-skin27.png",
    ⵠᐃⲆⵠΔⵠᐃ: "img/day-hand-skin28.png",
    ΔᐃⲆΔⵠΔⲆ: "img/night-hand-skin28.png",
    ⵠᐃⵠⵠᐃⲆⵠ: "img/day-hand-skin29.png",
    ᐃⲆⲆⵠᐃⵠᐃ: "img/night-hand-skin29.png",
    ⲆⵠΔⲆᐃⲆΔ: "img/day-hand-skin30.png",
    ⲆⲆⲆⵠⵠᐃⵠ: "img/night-hand-skin30.png",
    ΔΔⵠᐃⵠⵠᐃ: "img/day-hand-skin31.png",
    ⲆⲆΔⲆⵠΔΔ: "img/night-hand-skin31.png",
    ⲆᐃΔΔⲆⲆΔ: "img/day-hand-skin32.png",
    ⵠⵠΔⲆΔᐃⵠ: "img/night-hand-skin32.png",
    ΔⵠⵠΔⲆⲆⵠ: "img/day-hand-skin33.png",
    ⲆⲆΔⵠᐃΔⵠ: "img/night-hand-skin33.png",
    ⲆᐃⲆᐃΔΔΔ: "img/day-hand-skin34.png",
    ΔᐃⲆᐃᐃⵠΔ: "img/night-hand-skin34.png",
    ᐃᐃΔᐃᐃⲆᐃ: "img/day-hand-skin35.png",
    ⲆᐃⵠΔⵠᐃⲆ: "img/night-hand-skin35.png",
    ᐃᐃⵠΔΔⵠⲆ: "img/day-hand-skin36.png",
    ΔᐃⲆⲆⲆΔΔ: "img/night-hand-skin36.png",
    ⲆⵠΔⲆᐃΔⵠ: "img/day-hand-skin37.png",
    ᐃⵠⵠᐃᐃᐃᐃ: "img/night-hand-skin37.png",
    ΔΔᐃΔᐃᐃⲆ: "img/day-hand-skin38.png",
    ⵠⲆᐃᐃΔᐃⵠ: "img/night-hand-skin38.png",
    ᐃⵠⵠⲆⲆΔⵠ: "img/day-hand-skin39.png",
    ᐃᐃⲆΔⲆⵠⲆ: "img/night-hand-skin39.png",
    ΔⵠΔΔⲆⵠⲆ: "img/day-hand-skin40.png",
    ᐃⵠᐃᐃⲆΔΔ: "img/night-hand-skin40.png",
    ΔⲆΔᐃᐃᐃⲆ: "img/day-hand-skin41.png",
    ᐃⲆⵠⵠⲆⵠᐃ: "img/night-hand-skin41.png",
    ⲆΔΔⵠⲆΔⵠ: "img/day-hand-skin42.png",
    ᐃⲆⲆᐃⲆⲆᐃ: "img/night-hand-skin42.png",
    ᐃⲆΔⵠᐃⵠⵠ: "img/day-hand-skin43.png",
    ΔⲆⵠΔⵠⲆΔ: "img/night-hand-skin43.png",
    ΔⵠⲆᐃᐃⲆΔ: "img/day-hand-skin16.png",
    ⵠΔⲆⵠᐃⵠᐃ: "img/night-hand-skin16.png",
    ⲆⲆⲆᐃΔⵠⵠ: "img/day-hand-skin45.png",
    ⲆᐃᐃΔⲆᐃⲆ: "img/night-hand-skin45.png",
    ΔΔⲆⵠⲆΔᐃ: "img/day-hand-skin46.png",
    ΔⲆⲆᐃⵠⲆⲆ: "img/night-hand-skin46.png",
    ⲆΔⲆΔΔᐃⵠ: "img/day-hand-skin47.png",
    ΔⲆⲆⲆⵠⵠᐃ: "img/night-hand-skin47.png",
    ᐃΔΔᐃⵠⲆⵠ: "img/day-hand-skin48.png",
    ᐃⲆᐃΔΔᐃⵠ: "img/night-hand-skin48.png",
    ᐃΔᐃᐃⲆᐃΔ: "img/day-hand-skin49.png",
    ΔⲆⵠΔᐃⵠᐃ: "img/night-hand-skin49.png",
    ᐃⵠⵠⵠⲆᐃᐃ: "img/day-hand-skin49.png",
    ΔᐃⲆⵠᐃΔⲆ: "img/night-hand-skin49.png",
    ΔⵠΔΔΔⵠΔ: "img/day-hand-skin51.png",
    ⲆΔⵠⲆⲆⵠᐃ: "img/night-hand-skin51.png",
    ⵠᐃⵠⲆⲆΔⲆ: "img/day-hand-skin52.png",
    ⲆⲆⲆᐃΔᐃᐃ: "img/night-hand-skin52.png",
    ⲆⵠᐃⲆᐃⵠᐃ: "img/day-hand-skin53.png",
    ΔᐃᐃⲆᐃᐃΔ: "img/night-hand-skin53.png",
    ⵠⵠⲆⲆΔΔⲆ: "img/day-hand-skin53.png",
    ᐃⲆⵠⵠΔᐃⵠ: "img/night-hand-skin53.png",
    ΔⲆⵠΔⵠⵠΔ: "img/day-hand-skin55.png",
    ᐃⵠⲆⲆⲆᐃⵠ: "img/night-hand-skin55.png",
    ΔⲆⲆΔΔⵠᐃ: "img/day-hand-skin56.png",
    ⲆΔᐃᐃᐃⲆⲆ: "img/night-hand-skin56.png",
    ΔⵠΔⵠᐃᐃⵠ: "img/day-hand-skin57.png",
    ⵠⵠᐃᐃΔᐃⵠ: "img/night-hand-skin57.png",
    ⲆᐃⲆΔⵠⲆᐃ: "img/day-hand-skin58.png",
    ⵠⲆⵠⵠⵠᐃΔ: "img/night-hand-skin58.png",
    ⵠᐃΔⵠⲆᐃⲆ: "img/day-hand-skin59.png",
    ⲆⵠⲆΔΔΔⵠ: "img/night-hand-skin59.png",
    ΔⵠᐃⵠⲆⲆⲆ: "img/day-hand-skin61.png",
    ΔᐃⲆᐃⲆⲆⲆ: "img/night-hand-skin61.png",
    ⵠᐃⲆᐃΔᐃⲆ: "img/day-hand-skin61.png",
    ⵠⵠⲆⵠΔΔΔ: "img/night-hand-skin61.png",
    ⲆⵠⲆᐃᐃⲆⲆ: "img/day-hand-skin62.png",
    ⵠⵠⲆΔᐃΔⵠ: "img/night-hand-skin62.png",
    ⲆⲆⲆᐃΔᐃΔ: "img/day-hand-skin63.png",
    ⵠΔΔⵠⵠⲆⲆ: "img/night-hand-skin63.png",
    ⲆΔⲆⲆⲆⵠⵠ: "img/day-hand-skin64.png",
    ΔᐃⲆᐃⵠΔⲆ: "img/night-hand-skin64.png",
    ΔΔᐃⲆΔΔⲆ: "img/day-hand-skin65.png",
    ⲆⵠΔⵠᐃᐃᐃ: "img/night-hand-skin65.png",
    ΔⲆⲆⵠⲆⵠⵠ: "img/day-hand-skin66.png",
    ΔᐃΔⵠⲆⵠⵠ: "img/night-hand-skin66.png",
    ᐃΔΔᐃⵠᐃᐃ: "img/day-hand-skin67.png",
    ᐃΔⵠᐃⲆⲆΔ: "img/night-hand-skin67.png",
    ΔᐃⲆⲆⵠⵠⵠ: "img/day-hand-skin68.png",
    ⵠⵠⲆᐃⵠᐃⵠ: "img/night-hand-skin68.png",
    ΔΔⵠΔⲆⲆⵠ: "img/day-hand-skin69.png",
    ⲆⲆΔⲆΔᐃΔ: "img/night-hand-skin69.png",
    ⵠⲆⲆᐃᐃΔⵠ: "img/day-hand-skin70.png",
    ᐃⲆΔΔⵠⵠᐃ: "img/night-hand-skin70.png",
    ⲆⵠⲆⲆΔⲆΔ: "img/day-hand-skin71.png",
    ΔⲆⲆᐃᐃⲆΔ: "img/night-hand-skin71.png",
    ⵠⵠΔⲆΔⲆᐃ: "img/day-hand-skin72.png",
    ⵠⲆⲆᐃⵠᐃᐃ: "img/night-hand-skin72.png",
    ⲆᐃᐃᐃᐃⲆⵠ: "img/day-hand-skin73.png",
    ⲆⵠⲆⵠᐃᐃᐃ: "img/night-hand-skin73.png",
    ᐃᐃΔᐃᐃⵠΔ: "img/day-hand-skin74.png",
    ᐃⵠⵠᐃⵠΔⵠ: "img/night-hand-skin74.png",
    ᐃΔⵠⵠⵠᐃⵠ: "img/day-hand-skin75.png",
    ᐃⲆⲆⵠⲆᐃᐃ: "img/night-hand-skin75.png",
    ΔⵠⵠⲆΔΔⵠ: "img/day-hand-skin76.png",
    ⲆΔᐃΔⲆⵠⵠ: "img/night-hand-skin76.png",
    ᐃᐃⲆⵠⲆⵠⲆ: "img/day-hand-skin77.png",
    ᐃⲆΔᐃΔⲆΔ: "img/night-hand-skin77.png",
    ᐃᐃⲆⲆᐃᐃⲆ: "img/day-hand-skin78.png",
    ⲆᐃⵠᐃⵠΔΔ: "img/night-hand-skin78.png",
    ⲆΔⵠⲆⵠΔᐃ: "img/day-hand-skin79.png",
    ᐃⵠΔᐃⲆᐃⲆ: "img/night-hand-skin79.png",
    ᐃⲆⲆΔⲆⵠⲆ: "img/day-hand-skin80.png",
    ⲆⲆΔΔⵠΔⲆ: "img/night-hand-skin80.png",
    ⲆⲆⵠΔΔⲆⲆ: "img/day-hand-skin81.png",
    ⲆⲆⵠⵠᐃᐃΔ: "img/night-hand-skin81.png",
    ΔⵠⲆΔⲆⲆΔ: "img/day-hand-skin82.png",
    ⲆᐃⲆⲆⵠΔΔ: "img/night-hand-skin82.png",
    ⲆⵠⲆⵠⲆⵠᐃ: "img/day-hand-skin83.png",
    ΔⲆⵠⵠⵠΔⲆ: "img/night-hand-skin83.png",
    ⵠⵠⲆⲆΔⵠΔ: "img/day-hand-skin84.png",
    ΔⲆΔⲆᐃⵠΔ: "img/night-hand-skin84.png",
    ⲆᐃᐃᐃᐃⵠⲆ: "img/day-hand-skin85.png",
    ΔΔΔⲆΔᐃⵠ: "img/night-hand-skin85.png",
    ΔᐃΔⲆⵠΔⲆ: "img/day-hand-skin86.png",
    ⲆΔⵠᐃΔⵠᐃ: "img/night-hand-skin86.png",
    ᐃⵠΔΔⵠΔⵠ: "img/day-hand-skin87.png",
    ΔⵠⵠΔᐃΔᐃ: "img/night-hand-skin87.png",
    ΔΔᐃⲆⲆⲆⲆ: "img/day-hand-skin88.png",
    ᐃᐃⲆΔⵠᐃΔ: "img/night-hand-skin88.png",
    ⲆⵠᐃΔⲆⵠᐃ: "img/day-hand-skin89.png",
    ⲆⲆΔᐃⵠⲆΔ: "img/night-hand-skin89.png",
    ΔΔⲆΔΔⲆᐃ: "img/day-hand-skin90.png",
    ⵠᐃⵠⲆᐃΔⲆ: "img/night-hand-skin90.png",
    ᐃⵠⲆⵠᐃΔⵠ: "img/day-hand-skin91.png",
    ⵠᐃΔΔᐃΔⵠ: "img/night-hand-skin91.png",
    ⵠⵠΔⲆᐃᐃⵠ: "img/day-hand-skin92.png",
    ⵠⲆⲆⲆᐃᐃᐃ: "img/night-hand-skin92.png",
    ᐃⲆⲆΔΔᐃΔ: "img/day-hand-skin93.png",
    ΔⵠⲆⵠΔⵠⲆ: "img/night-hand-skin93.png",
    ⵠΔⵠⵠΔⲆⲆ: "img/day-hand-skin94.png",
    ⵠⲆⵠΔⵠⲆⲆ: "img/night-hand-skin94.png",
    ᐃΔⵠΔᐃΔᐃ: "img/day-hand-skin95.png",
    ΔᐃᐃᐃⲆⵠⲆ: "img/night-hand-skin95.png",
    ⵠⲆⲆⵠⲆΔΔ: "img/day-hand-skin96.png",
    ⲆⲆᐃΔⲆᐃΔ: "img/night-hand-skin96.png",
    ᐃⲆⲆⵠᐃⲆᐃ: "img/day-hand-skin97.png",
    ᐃᐃⵠᐃᐃⵠΔ: "img/night-hand-skin97.png",
    ᐃᐃⲆⲆⲆⲆᐃ: "img/day-hand-skin98.png",
    ⲆᐃⵠⵠΔⵠᐃ: "img/night-hand-skin98.png",
    ΔⲆⲆⲆᐃᐃᐃ: "img/day-hand-skin99.png",
    ⵠⵠⵠⲆⵠⲆⵠ: "img/night-hand-skin99.png",
    ⲆΔΔⲆΔⵠⵠ: "img/day-hand-skin100.png",
    ᐃΔⲆⲆⵠⵠᐃ: "img/night-hand-skin100.png",
    ⲆⲆⵠΔⲆΔᐃ: "img/day-hand-skin101.png",
    ⵠΔⲆⲆᐃⲆⲆ: "img/night-hand-skin101.png",
    ⵠⵠⲆΔΔⵠᐃ: "img/day-hand-skin102.png",
    ⵠᐃᐃΔⵠⵠⲆ: "img/night-hand-skin102.png",
    ΔⵠⲆΔⲆᐃⵠ: "img/day-hand-skin103.png",
    ΔΔⲆⲆⲆⲆⲆ: "img/night-hand-skin103.png",
    ΔᐃⵠⲆΔⵠⵠ: "img/day-hand-skin104.png",
    ⲆᐃⵠᐃΔΔᐃ: "img/night-hand-skin104.png",
    ᐃᐃᐃᐃᐃⵠⲆ: "img/day-hand-skin105.png",
    ΔⵠⲆΔⵠⵠΔ: "img/night-hand-skin105.png",
    ᐃⲆⲆⵠⵠⵠᐃ: "img/day-hand-skin106.png",
    ⵠⲆⵠᐃᐃⵠΔ: "img/night-hand-skin106.png",
    ΔⲆᐃᐃⵠⲆΔ: "img/day-hand-skin107.png",
    ⵠⲆⲆᐃⵠⲆΔ: "img/night-hand-skin107.png",
    ⲆⲆⲆⲆⲆⲆⵠ: "img/day-hand-skin108.png",
    ΔΔⲆᐃΔᐃⵠ: "img/night-hand-skin108.png",
    ⵠⵠᐃⵠⵠⵠⵠ: "img/day-hand-skin109.png",
    ΔᐃᐃⲆᐃⲆᐃ: "img/night-hand-skin109.png",
    ΔΔᐃⲆⵠΔΔ: "img/day-hand-skin110.png",
    ⲆΔΔⵠΔᐃⵠ: "img/night-hand-skin110.png",
    ΔΔΔⵠΔᐃⵠ: "img/day-hand-skin111.png",
    ᐃΔΔⲆⲆᐃⵠ: "img/night-hand-skin111.png",
    ⲆᐃⲆⵠᐃⵠⵠ: "img/day-hand-skin112.png",
    ΔⵠΔᐃⵠⲆⵠ: "img/night-hand-skin112.png",
    ⵠⲆᐃⲆΔⵠΔⵠⵠ: "img/day-hand-skin113.png",
    ⵠΔᐃⲆⵠΔΔΔⲆ: "img/night-hand-skin113.png",
    ΔⵠᐃᐃᐃΔⲆ: "img/day-hand-skin114.png",
    ⵠΔᐃᐃΔⲆΔ: "img/night-hand-skin114.png",
    ΔⲆΔⵠⲆΔᐃ: "img/day-hand-skin115.png",
    ⵠⵠᐃᐃⵠⵠⵠ: "img/night-hand-skin115.png",
    ᐃⵠᐃΔⵠᐃΔ: "img/day-hand-skin116.png",
    ⲆΔᐃⲆⵠⲆᐃ: "img/night-hand-skin116.png",
    ᐃⲆⲆᐃΔⵠΔ: "img/day-hand-skin117.png",
    ⵠⵠⲆⵠⲆⵠⲆ: "img/night-hand-skin117.png",
    ⲆⲆᐃⵠΔⲆΔ: "img/day-hand-skin118.png",
    ⲆⵠᐃΔⵠⵠΔ: "img/night-hand-skin118.png",
    ⵠⵠΔⵠΔⲆⲆ: "img/day-hand-skin119.png",
    ᐃΔⲆⵠᐃⲆΔ: "img/night-hand-skin119.png",
    ΔⲆⲆΔᐃⲆᐃ: "img/day-hand-skin120.png",
    ᐃⲆⵠᐃΔΔΔ: "img/night-hand-skin120.png",
    ΔᐃⵠᐃⵠⵠΔ: "img/day-hand-skin122.png",
    ⲆΔⵠⵠⲆⵠⵠ: "img/night-hand-skin122.png",
    ᐃΔⲆΔᐃⵠⵠ: "img/day-hand-skin122.png",
    ᐃⲆⲆⲆⵠⵠⵠ: "img/night-hand-skin122.png",
    ΔᐃⲆⵠΔⵠⵠ: "img/day-hand-skin122.png",
    ⲆᐃΔⲆⲆΔⵠ: "img/night-hand-skin122.png",
    ⲆⵠⲆᐃⵠⲆΔ: "img/day-hand-skin124.png",
    ΔᐃⲆⲆⵠⲆΔ: "img/night-hand-skin124.png",
    ᐃⵠΔⵠⲆⵠⲆ: "img/day-hand-skin125.png",
    ᐃⲆΔⵠⵠⲆᐃ: "img/night-hand-skin125.png",
    ᐃΔⵠⵠᐃΔΔ: "img/day-hand-skin126.png",
    ⵠⲆᐃᐃⵠⲆⲆ: "img/night-hand-skin126.png",
    ⵠⵠⲆΔΔⵠⵠ: "img/day-hand-skin127.png",
    ᐃᐃⵠⵠⵠᐃⵠ: "img/night-hand-skin127.png",
    ⲆⵠᐃⲆⵠΔᐃ: "img/day-hand-skin128.png",
    ᐃᐃⲆⵠⵠΔⵠ: "img/night-hand-skin128.png",
    ⲆΔⲆΔⵠⵠⵠ: "img/day-hand-skin129.png",
    ⵠᐃᐃⵠΔΔⵠ: "img/night-hand-skin129.png",
    ⲆᐃᐃⲆᐃⲆᐃ: "img/day-hand-skin130.png",
    ⲆⲆᐃⲆⲆΔᐃ: "img/night-hand-skin130.png",
    ⲆⲆΔΔⲆⲆΔ: "img/day-hand-skin131.png",
    ᐃⵠⵠⵠΔⵠⲆ: "img/night-hand-skin131.png",
    ΔⵠⲆⲆΔⵠⲆ: "img/day-hand-skin130.png",
    ⵠᐃⲆⲆⲆᐃᐃ: "img/night-hand-skin130.png",
    ⵠᐃⲆΔᐃⵠᐃ: "img/day-hand-skin133.png",
    ᐃΔⵠᐃᐃΔᐃ: "img/night-hand-skin133.png",
    ΔⵠΔⵠⲆΔⲆ: "img/day-hand-skin134.png",
    ᐃΔⲆᐃⵠⵠⵠ: "img/night-hand-skin134.png",
    ⵠΔᐃΔᐃⲆᐃ: "img/day-hand-skin135.png",
    ᐃᐃⲆΔᐃⵠⲆ: "img/night-hand-skin135.png",
    ΔⵠΔᐃᐃΔᐃ: "img/day-hand-skin136.png",
    ⲆᐃΔⵠⵠⵠΔ: "img/night-hand-skin136.png",
    ᐃᐃΔⲆᐃΔⵠ: "img/day-hand-skin137.png",
    ᐃⵠⵠⲆⲆⲆⲆ: "img/night-hand-skin137.png",
    ⵠᐃΔΔⵠⲆⵠ: "img/day-hand-skin138.png",
    ᐃᐃΔΔⵠΔᐃ: "img/night-hand-skin138.png",
    ⲆᐃΔⵠᐃⲆΔ: "img/day-hand-skin139.png",
    ᐃᐃΔⲆⵠᐃᐃ: "img/night-hand-skin139.png",
    ΔⵠᐃⵠⲆⵠΔ: "img/day-hand-skin140.png",
    ⲆᐃΔᐃᐃᐃⵠ: "img/night-hand-skin140.png",
    ⲆⵠⲆⲆᐃᐃⵠ: "img/day-hand-skin141.png",
    ⲆⵠⲆⵠΔᐃⲆ: "img/night-hand-skin141.png",
    ⲆⲆΔⲆⵠⲆⲆ: "img/day-hand-skin142.png",
    ⲆᐃΔΔⲆⲆⲆ: "img/night-hand-skin142.png",
    ΔᐃⲆⵠⵠΔⲆ: "img/day-hand-skin143.png",
    ΔᐃⵠⲆⲆⲆᐃ: "img/night-hand-skin143.png",
    ᐃᐃⲆᐃᐃⵠᐃ: "img/day-hand-skin144.png",
    ⵠⵠᐃⲆΔᐃⲆ: "img/night-hand-skin144.png",
    ⵠᐃⵠⵠᐃᐃⵠ: "img/day-hand-skin145.png",
    ᐃⲆⵠᐃⵠⵠⲆ: "img/night-hand-skin145.png",
    ⲆⲆᐃΔΔΔΔ: "img/day-hand-skin146.png",
    ᐃΔⲆΔᐃⲆΔ: "img/night-hand-skin146.png",
    ⵠΔᐃⲆⲆⵠᐃ: "img/day-hand-skin147.png",
    ⲆⲆⲆΔᐃⵠⵠ: "img/night-hand-skin147.png",
    ⵠΔⵠⲆᐃᐃᐃ: "img/day-hand-skin148.png",
    ᐃⵠⲆⲆⲆᐃΔ: "img/night-hand-skin148.png",
    ΔᐃⵠΔⵠᐃⵠ: "img/day-hand-skin149.png",
    ⲆᐃᐃⲆΔⲆᐃ: "img/night-hand-skin149.png",
    ⲆΔᐃⵠⵠᐃΔ: "img/day-hand-skin150.png",
    ΔᐃᐃᐃⲆⲆⲆ: "img/night-hand-skin150.png",
    ⲆⲆⲆⵠΔⵠᐃ: "img/day-hand-skin151.png",
    ⵠᐃΔⵠΔⲆΔ: "img/night-hand-skin151.png",
    ΔⲆΔⲆᐃᐃⵠ: "img/day-hand-skin152.png",
    ⵠΔⲆΔᐃⲆⲆ: "img/night-hand-skin152.png",
    ΔⵠⲆΔⲆᐃΔ: "img/day-hand-skin153.png",
    ⵠⵠⲆΔⵠⵠΔ: "img/night-hand-skin153.png",
    ΔᐃⵠⲆᐃΔⵠ: "img/day-hand-skin154.png",
    ᐃⵠᐃⲆⲆᐃᐃ: "img/night-hand-skin154.png",
    ΔᐃΔⲆⲆⵠⲆ: "img/day-hand-skin155.png",
    ᐃⵠΔᐃⲆⲆᐃ: "img/night-hand-skin155.png",
    ᐃΔⵠΔⵠΔᐃ: "img/day-hand-skin156.png",
    ᐃᐃΔⵠΔΔΔ: "img/night-hand-skin156.png",
    ᐃⵠΔⵠⵠⵠⵠ: "img/day-hand-skin157.png",
    ᐃⲆᐃⲆΔᐃⵠ: "img/night-hand-skin157.png",
    ⲆᐃⵠⵠⵠⲆⵠ: "img/day-hand-skin158.png",
    ⲆᐃᐃⵠΔᐃΔ: "img/night-hand-skin158.png",
    ⵠⲆⵠⵠᐃΔΔ: "img/day-hand-skin159.png",
    ⵠΔᐃᐃᐃᐃΔ: "img/night-hand-skin159.png",
    ⵠⲆⲆⲆΔⵠᐃ: "img/day-hand-skin160.png",
    ΔΔⲆⲆΔⵠΔ: "img/night-hand-skin160.png",
    ⵠⲆⲆⵠⲆⲆⵠ: "img/day-hand-skin161.png",
    ΔΔΔᐃⲆⵠⲆ: "img/night-hand-skin161.png",
    Ⲇⵠᐃⵠⵠⵠⵠ: "img/day-hand-skin162.png",
    ΔⵠⲆΔⲆⲆⲆ: "img/night-hand-skin162.png",
    ⵠᐃⵠΔⵠⲆΔ: "img/day-hand-skin163.png",
    ᐃᐃⵠⲆᐃΔΔ: "img/night-hand-skin163.png",
    ⲆΔⲆⵠⲆᐃᐃ: "img/day-hand-skin164.png",
    ᐃᐃᐃⵠᐃᐃⲆ: "img/night-hand-skin164.png",
    ⲆΔᐃⵠⲆⵠᐃ: "img/day-hand-skin165.png",
    ⵠᐃᐃⲆᐃᐃᐃ: "img/night-hand-skin165.png",
    ᐃⲆⵠⲆⲆΔⵠ: "img/day-hand-skin166.png",
    ᐃⵠᐃΔⲆΔⲆ: "img/night-hand-skin166.png",
    ΔⲆⵠⲆⵠΔⵠ: "img/day-hand-skin167.png",
    ⵠⲆⵠΔⵠⲆΔ: "img/night-hand-skin167.png",
    ⲆⵠΔΔⲆΔⲆ: "img/day-hand-skin168.png",
    ⵠⲆⲆᐃⲆⵠⵠ: "img/night-hand-skin168.png",
    ⵠⵠΔⲆⵠⲆⵠ: "img/day-hand-skin169.png",
    ᐃⲆⲆⵠΔᐃᐃ: "img/night-hand-skin169.png",
    ᐃⵠⵠΔⲆᐃΔ: "img/day-hand-skin170.png",
    ΔⵠΔⲆᐃⲆⲆ: "img/night-hand-skin170.png",
    ⵠⲆⲆⵠⲆᐃⵠ: "img/day-hand-skin171.png",
    ᐃΔΔΔⲆᐃⲆ: "img/night-hand-skin171.png",
    ΔΔⲆⲆᐃⵠᐃ: "img/day-hand-skin172.png",
    ⲆⲆᐃᐃΔⵠⲆ: "img/night-hand-skin172.png",
    ΔⵠⲆΔⵠᐃΔ: "img/day-hand-skin173.png",
    ⵠⵠᐃⲆⵠᐃⲆ: "img/night-hand-skin173.png",
    ⵠⲆᐃᐃᐃⵠᐃ: "img/day-hand-skin174.png",
    ᐃΔᐃΔⲆⵠⵠ: "img/night-hand-skin174.png",
    ⵠᐃᐃⵠⲆΔΔ: "img/day-hand-skin175.png",
    ᐃⲆᐃⲆᐃⲆΔ: "img/night-hand-skin175.png",
    ΔΔᐃⵠⲆⲆⲆ: "img/day-hand-skin176.png",
    ⲆᐃⲆⲆⲆᐃⲆ: "img/night-hand-skin176.png",
    ⵠᐃᐃΔⵠⵠⵠ: "img/day-hand-skin177.png",
    ᐃΔΔⵠⲆᐃᐃ: "img/night-hand-skin177.png",
    ΔⵠΔⵠⲆᐃΔ: "img/day-hand-skin178.png",
    ᐃⵠⵠᐃⵠΔΔ: "img/night-hand-skin178.png",
    ᐃⵠⲆᐃᐃⵠⵠ: "img/day-hand-skin179.png",
    ΔΔΔΔΔⲆⵠ: "img/night-hand-skin179.png",
    ⵠⵠⲆⲆᐃᐃⵠ: "img/day-hand-skin180.png",
    ⲆⵠᐃᐃⵠⲆⲆ: "img/night-hand-skin180.png",
    ⵠΔᐃⲆΔⵠⲆ: "img/day-hand-skin181.png",
    ⵠⲆⵠᐃᐃΔΔ: "img/night-hand-skin181.png",
    ⲆⵠᐃΔΔᐃⵠ: "img/day-hand-skin182.png",
    ΔⲆⲆⲆⵠⲆⲆ: "img/night-hand-skin182.png",
    ⵠⲆⵠⵠⲆᐃⵠ: "img/day-hand-skin183.png",
    ⲆⵠⲆᐃⲆⵠΔ: "img/night-hand-skin183.png",
    ⵠΔᐃᐃᐃⵠᐃ: "img/day-hand-skin184.png",
    ΔⵠⵠΔΔⲆᐃ: "img/night-hand-skin184.png",
    ᐃⲆΔΔΔΔΔ: "img/day-hand-skin185.png",
    ⲆᐃⲆⵠⵠⵠⲆ: "img/night-hand-skin185.png",
    ΔᐃᐃⲆᐃΔⲆ: "img/day-hand-skin186.png",
    ΔΔⲆᐃⲆᐃᐃ: "img/night-hand-skin186.png",
    ΔᐃⲆⵠΔᐃⵠ: "img/day-hand-skin187.png",
    ⲆⲆⵠΔⲆᐃᐃ: "img/night-hand-skin187.png",
    ΔΔⲆⲆⵠᐃⲆ: "img/day-hand-skin188.png",
    ΔΔⲆⵠⵠⲆⲆ: "img/night-hand-skin188.png",
    ᐃⵠⵠⲆΔⵠⲆ: "img/day-hand-skin189.png",
    ΔΔΔⵠᐃⲆⵠ: "img/night-hand-skin189.png",
    ⵠⵠⵠΔⲆᐃᐃ: "img/day-hand-skin190.png",
    ΔΔᐃᐃΔⲆⲆ: "img/night-hand-skin190.png",
    ᐃⲆΔⵠⲆᐃΔ: "img/day-hand-skin191.png",
    ⵠᐃΔⲆⲆΔᐃ: "img/night-hand-skin191.png",
    ⵠΔᐃΔΔⵠΔ: "img/day-hand-skin192.png",
    ⲆⵠΔᐃᐃⵠⵠ: "img/night-hand-skin192.png",
    ᐃⲆΔⲆⵠⲆᐃ: "img/day-hand-skin193.png",
    ⵠⲆⲆⲆᐃⲆⲆ: "img/night-hand-skin193.png",
    ⲆⲆΔΔⲆⲆⵠ: "img/day-hand-skin194.png",
    ⵠΔΔΔⲆⲆᐃ: "img/night-hand-skin194.png",
    ΔᐃᐃᐃⲆᐃⲆ: "img/day-hand-skin195.png",
    ᐃᐃΔⲆⲆⵠΔ: "img/night-hand-skin195.png",
    ⵠⵠⵠⵠⲆⲆᐃ: "img/day-hand-skin196.png",
    ΔᐃΔΔⲆᐃΔ: "img/night-hand-skin196.png",
    ΔᐃⲆⵠΔᐃΔ: "img/day-hand-skin197.png",
    ⵠⲆⲆⵠⵠᐃⵠ: "img/night-hand-skin197.png",
    ⵠⵠᐃᐃⵠᐃⵠ: "img/day-hand-skin198.png",
    ᐃΔⵠΔⵠᐃΔ: "img/night-hand-skin198.png",
    ⲆᐃⵠⵠΔᐃᐃ: "img/day-hand-skin199.png",
    ⵠⵠΔΔᐃⵠⵠ: "img/night-hand-skin199.png",
    ΔⲆᐃⲆᐃᐃⵠ: "img/day-hand-skin200.png",
    ⵠⵠᐃⵠⵠΔΔ: "img/night-hand-skin200.png",
    ᐃΔᐃⵠᐃⵠⵠ: "img/day-hand-skin201.png",
    ΔⵠΔᐃⵠⵠᐃ: "img/night-hand-skin201.png",
    ᐃᐃⵠⲆⲆⵠⲆ: "img/day-hand-skin202.png",
    ⵠⲆᐃᐃⲆΔⵠ: "img/night-hand-skin202.png",
    ⵠΔᐃⵠⵠⵠΔ: "img/day-hand-skin203.png",
    ᐃᐃᐃᐃΔᐃⵠ: "img/night-hand-skin203.png",
    ⲆΔⲆⵠΔⵠᐃ: "img/day-hand-skin204.png",
    ⵠᐃⵠⵠᐃⵠⲆ: "img/night-hand-skin204.png",
    ᐃΔⵠⵠᐃⵠⲆ: "img/day-hand-skin205.png",
    ⵠΔⵠΔᐃΔⵠ: "img/night-hand-skin205.png",
    ᐃᐃⲆᐃΔⵠΔ: "img/day-hand-skin206.png",
    ⵠⲆⵠⲆΔⲆⵠ: "img/night-hand-skin206.png",
    ᐃⲆⲆⵠΔᐃⲆ: "img/day-hand-skin207.png",
    ⵠⵠΔᐃⵠΔⵠ: "img/night-hand-skin207.png",
    ΔᐃΔΔΔΔⵠ: "img/day-hand-skin208.png",
    ⲆⲆⵠⵠᐃⲆⲆ: "img/night-hand-skin208.png",
    ⵠΔᐃⲆⲆⲆⵠ: "img/day-hand-skin209.png",
    ⲆⵠⲆⵠᐃⵠⵠ: "img/night-hand-skin209.png",
    ᐃΔⲆⵠΔᐃᐃ: "img/day-hand-skin210.png",
    ᐃΔⲆΔⵠⵠⵠ: "img/night-hand-skin210.png",
    ⵠΔⲆΔⵠΔⵠ: "img/day-hand-skin211.png",
    ⵠⵠᐃΔⵠᐃⵠ: "img/night-hand-skin211.png",
    ⲆⲆΔᐃᐃⲆⲆ: "img/day-hand-skin212.png",
    ⵠⵠᐃΔΔⲆᐃ: "img/night-hand-skin212.png",
    ᐃⵠⲆⵠᐃᐃΔ: "img/day-hand-skin213.png",
    ⲆⲆᐃⲆⲆᐃⵠ: "img/night-hand-skin213.png",
    ΔⲆⵠΔᐃⲆⲆ: "img/day-hand-skin214.png",
    ΔᐃᐃΔⲆᐃⵠ: "img/night-hand-skin214.png",
    ⵠⵠΔⲆΔᐃΔ: "img/day-bag-star0.png",
    ⵠΔⲆⵠΔᐃⵠ: "img/night-bag-star0.png",
    ΔᐃⵠᐃΔⲆⵠ: "img/day-bag0.png",
    ᐃᐃΔΔⵠΔⵠ: "img/night-bag0.png",
    ⵠⲆⵠⲆⲆΔⵠ: "img/day-bag1.png",
    ᐃΔⲆᐃⲆΔΔ: "img/night-bag1.png",
    ⵠⲆⲆΔᐃⵠⲆ: "img/day-bag2.png",
    ⵠⵠᐃⲆΔⵠⵠ: "img/night-bag2.png",
    ΔⲆⵠⵠⵠⵠⲆ: "img/day-bag3.png",
    ⵠᐃΔⲆᐃⵠΔ: "img/night-bag3.png",
    ⲆⵠⵠᐃΔⵠᐃ: "img/day-bag4.png",
    ᐃⲆᐃⲆΔΔΔ: "img/night-bag4.png",
    ΔᐃᐃᐃⵠⵠⲆ: "img/day-bag5.png",
    ⲆⵠⵠΔⵠⵠⲆ: "img/night-bag5.png",
    ⲆΔⵠΔᐃⵠᐃ: "img/day-bag6.png",
    ⵠⵠΔᐃᐃΔΔ: "img/night-bag6.png",
    ᐃᐃᐃⵠΔΔⵠ: "img/day-bag7.png",
    ᐃⲆⲆΔⵠⵠᐃ: "img/night-bag7.png",
    ⵠΔᐃⵠᐃΔᐃ: "img/day-bag8.png",
    ⲆᐃΔΔⲆⲆᐃ: "img/night-bag8.png",
    ᐃᐃⵠΔΔⲆΔ: "img/day-bag9.png",
    ⲆΔᐃⵠᐃⵠⲆ: "img/night-bag9.png",
    ᐃⲆⵠⵠⵠᐃⵠ: "img/day-bag10.png",
    ⵠⵠΔⲆⲆΔⵠ: "img/night-bag10.png",
    ⵠΔᐃΔⵠⵠⵠ: "img/day-bag11.png",
    ⵠᐃⲆⵠΔⲆⵠ: "img/night-bag11.png",
    ⲆⵠᐃⵠⲆΔΔ: "img/day-bag13.png",
    ΔΔΔᐃΔⲆⵠ: "img/night-bag13.png",
    ⵠⲆΔᐃⲆΔᐃ: "img/day-bag14.png",
    ⵠᐃᐃⲆⲆΔⲆ: "img/night-bag14.png",
    ᐃⲆᐃⵠⲆⲆⵠ: "img/day-bag16.png",
    ᐃΔᐃⵠᐃⲆⲆ: "img/night-bag16.png",
    ΔᐃΔⲆⵠΔᐃ: "img/day-bag17.png",
    ⵠᐃⲆᐃΔⲆΔ: "img/night-bag17.png",
    ⲆⵠΔΔᐃᐃΔ: "img/day-bag18.png",
    ⲆΔᐃⲆᐃⲆⵠ: "img/night-bag18.png",
    ᐃᐃⵠΔⲆΔⲆ: "img/day-bag19.png",
    ᐃⵠΔΔᐃⵠⲆ: "img/night-bag19.png",
    ⲆⲆΔᐃᐃΔⲆ: "img/day-bag20.png",
    ΔⵠⵠⵠⲆᐃⵠ: "img/night-bag20.png",
    ⵠᐃⵠΔⲆΔᐃ: "img/day-bag21.png",
    ΔΔⵠΔⲆΔⲆ: "img/night-bag21.png",
    ⵠⲆᐃᐃᐃⵠⲆ: "img/day-bag22.png",
    ΔⵠⵠⵠᐃΔⲆ: "img/night-bag22.png",
    ⲆᐃΔⲆⵠⵠᐃ: "img/day-bag23.png",
    ⵠⲆⵠᐃⲆⵠⵠ: "img/night-bag23.png",
    ⵠⲆⵠΔΔᐃⵠ: "img/day-bag24.png",
    ⵠⲆΔᐃⲆⵠⵠ: "img/night-bag24.png",
    ᐃΔᐃᐃⵠⲆⲆ: "img/day-bag25.png",
    ⲆΔⵠᐃᐃⵠⵠ: "img/night-bag25.png",
    ⲆⲆᐃᐃᐃᐃᐃ: "img/day-bag26.png",
    ᐃᐃⵠⵠⵠⵠᐃ: "img/night-bag26.png",
    ⵠΔⲆᐃⵠᐃⲆ: "img/day-bag27.png",
    ΔᐃⲆⵠᐃᐃᐃ: "img/night-bag27.png",
    ᐃᐃᐃᐃᐃⵠᐃ: "img/day-bag28.png",
    ᐃΔᐃⵠΔⲆΔ: "img/night-bag28.png",
    ⵠⲆΔⲆᐃΔⵠ: "img/day-bag29.png",
    ⵠᐃᐃⵠᐃⲆⵠ: "img/night-bag29.png",
    ⵠⵠΔⵠⵠΔΔ: "img/day-bag30.png",
    ΔⲆⲆⲆⵠⵠΔ: "img/night-bag30.png",
    ᐃⵠᐃⲆΔΔᐃ: "img/day-bag31.png",
    ᐃΔΔΔⵠΔⲆ: "img/night-bag31.png",
    ⵠΔΔⲆΔΔⵠ: "img/day-bag32.png",
    ⲆΔΔⵠΔᐃΔ: "img/night-bag32.png",
    ᐃΔⲆΔᐃⵠᐃ: "img/day-bag33.png",
    ⵠⵠᐃⲆⲆᐃⲆ: "img/night-bag33.png",
    ⲆᐃⲆᐃΔᐃⵠ: "img/day-bag34.png",
    ᐃΔΔΔΔⲆΔ: "img/night-bag34.png",
    ΔΔⵠᐃⲆⵠΔ: "img/day-bag35.png",
    ΔⵠⲆⵠᐃᐃᐃ: "img/night-bag35.png",
    ⲆΔΔⲆᐃⲆᐃ: "img/day-bag36.png",
    ΔᐃᐃⲆΔᐃΔ: "img/night-bag36.png",
    ᐃⲆᐃᐃⲆΔΔ: "img/day-bag37.png",
    ᐃⲆⵠⲆΔⲆⵠ: "img/night-bag37.png",
    ⲆⲆⵠⲆⲆᐃᐃ: "img/day-bag38.png",
    ᐃᐃᐃⵠⵠⲆⵠ: "img/night-bag38.png",
    ⵠᐃΔᐃⲆⲆΔ: "img/day-bag39.png",
    ΔⲆΔⵠⵠⵠⲆ: "img/night-bag39.png",
    ᐃΔⲆⲆᐃⵠᐃ: "img/day-bag40.png",
    ᐃⲆⵠᐃⲆΔΔ: "img/night-bag40.png",
    ΔΔᐃⲆⲆⲆΔ: "img/day-bag41.png",
    ΔᐃΔⵠⲆⲆΔ: "img/night-bag41.png",
    ᐃΔΔⲆᐃⲆΔ: "img/day-bag42.png",
    ᐃΔᐃⵠᐃᐃΔ: "img/night-bag42.png",
    ᐃΔᐃΔᐃⵠⲆ: "img/day-bag43.png",
    ΔΔⲆⲆⲆⲆᐃ: "img/night-bag43.png",
    ⵠᐃⵠΔⵠΔⲆ: "img/day-bag44.png",
    ⲆⵠⲆⲆⵠⲆⲆ: "img/night-bag44.png",
    ⲆⵠⵠⲆⵠΔΔ: "img/day-bag45.png",
    ⲆⵠΔΔΔΔΔ: "img/night-bag45.png",
    ⲆⲆⵠⵠᐃⲆᐃ: "img/day-bag46.png",
    ⲆⲆΔⲆⲆΔᐃ: "img/night-bag46.png",
    ⵠⵠΔᐃⲆᐃⵠ: "img/day-bag47.png",
    ᐃᐃᐃⲆᐃⲆⲆ: "img/night-bag47.png",
    ΔᐃⵠⵠⵠΔΔ: "img/day-bag48.png",
    ⲆⲆᐃⲆⵠΔΔ: "img/night-bag48.png",
    ⲆⲆΔⲆᐃⵠⵠ: "img/day-bag49.png",
    ΔⵠΔⵠᐃⵠΔ: "img/night-bag49.png",
    ᐃⲆᐃⲆⲆⵠΔ: "img/day-bag50.png",
    ΔᐃΔΔⲆᐃⵠ: "img/night-bag50.png",
    ΔⲆⲆΔⲆⵠⵠ: "img/day-bag51.png",
    ᐃⵠⲆᐃᐃⲆᐃ: "img/night-bag51.png",
    ᐃᐃᐃⵠᐃΔΔ: "img/day-bag52.png",
    ᐃΔᐃΔᐃᐃⵠ: "img/night-bag52.png",
    ⲆΔΔⲆΔᐃΔ: "img/day-bag53.png",
    ⲆᐃΔΔᐃᐃⲆ: "img/night-bag53.png",
    ⲆᐃᐃᐃΔⲆⵠ: "img/day-bag54.png",
    ⵠΔⵠΔᐃᐃΔ: "img/night-bag54.png",
    ⵠⵠⲆⲆΔᐃΔ: "img/day-bag55.png",
    ΔⲆΔⲆᐃⵠᐃ: "img/night-bag55.png",
    ⲆⵠΔᐃⵠᐃΔ: "img/day-bag56.png",
    ⲆⵠΔᐃΔᐃⵠ: "img/night-bag56.png",
    ΔΔΔΔΔᐃⵠ: "img/day-bag57.png",
    ΔΔⵠΔⲆⵠᐃ: "img/night-bag57.png",
    ΔΔⵠᐃᐃⲆⵠ: "img/day-bag58.png",
    ᐃⲆⲆⲆⲆΔΔ: "img/night-bag58.png",
    ᐃΔⵠⲆⲆⵠⲆ: "img/day-bag59.png",
    ΔⲆᐃⵠⵠΔΔ: "img/night-bag59.png",
    ⲆⵠⲆΔⲆΔᐃ: "img/day-bag60.png",
    ᐃΔⵠᐃΔⵠⲆ: "img/night-bag60.png",
    ᐃⲆᐃΔⲆᐃⵠ: "img/day-bag61.png",
    ᐃᐃⲆᐃⵠΔⵠ: "img/night-bag61.png",
    ⵠᐃⲆΔⲆⵠΔ: "img/day-bag62.png",
    ΔⵠᐃΔⲆⵠⲆ: "img/night-bag62.png",
    ⲆᐃⵠᐃⲆⵠᐃ: "img/day-bag63.png",
    ⲆⲆΔΔⵠⲆΔ: "img/night-bag63.png",
    ⲆᐃᐃⵠⲆΔⵠ: "img/day-bag64.png",
    ⲆⲆᐃⵠᐃⲆⵠ: "img/night-bag64.png",
    ⲆΔⵠᐃⲆⵠⵠ: "img/day-bag65.png",
    ΔⵠⵠⵠⲆΔᐃ: "img/night-bag65.png",
    ⵠⲆⲆⲆⲆᐃᐃ: "img/day-bag66.png",
    ⵠᐃΔⲆⵠⲆΔ: "img/night-bag66.png",
    ⲆⵠⵠᐃᐃⲆᐃ: "img/day-bag67.png",
    ΔᐃⲆⵠⲆᐃΔ: "img/night-bag67.png",
    ΔⵠΔⲆⲆΔⵠ: "img/day-bag68.png",
    ΔⲆΔⵠΔⲆΔ: "img/night-bag68.png",
    ΔᐃᐃⵠⲆΔᐃ: "img/day-bag69.png",
    ⵠΔΔⵠᐃⲆⲆ: "img/night-bag69.png",
    ΔᐃⵠⵠⵠⵠⲆ: "img/day-bag70.png",
    ᐃᐃᐃΔΔⲆⵠ: "img/night-bag70.png",
    ⲆΔᐃΔᐃⲆⵠ: "img/day-bag71.png",
    ⲆⵠΔᐃΔᐃᐃ: "img/night-bag71.png",
    ⲆⵠⲆΔΔⵠⵠ: "img/day-bag72.png",
    ⵠⲆⲆⵠΔΔΔ: "img/night-bag72.png",
    ⵠᐃΔⲆΔⲆⵠ: "img/day-bag73.png",
    ⵠⲆⵠⲆΔΔⲆ: "img/night-bag73.png",
    ᐃⲆᐃⲆΔⲆΔ: "img/day-bag74.png",
    ⲆⵠΔΔⵠΔⵠ: "img/night-bag74.png",
    ΔⲆⲆⵠΔᐃⲆ: "img/day-bag75.png",
    Δⵠᐃᐃⵠⵠⵠ: "img/night-bag75.png",
    ⲆᐃⵠᐃⵠΔⵠ: "img/day-bag76.png",
    ᐃⲆⲆΔΔⵠⲆ: "img/night-bag76.png",
    ΔⵠΔᐃᐃΔⲆ: "img/day-bag77.png",
    ⲆⲆΔⵠⵠᐃᐃ: "img/night-bag77.png",
    ⲆⵠᐃⵠᐃΔᐃ: "img/day-bag78.png",
    ⵠⵠΔⵠⲆⵠΔ: "img/night-bag78.png",
    ⵠΔᐃⲆΔⲆⵠ: "img/day-bag79.png",
    ⲆΔⲆᐃᐃΔΔ: "img/night-bag79.png",
    ⵠⲆⵠΔΔⵠⵠ: "img/day-bag80.png",
    ΔΔΔⵠΔⵠΔ: "img/night-bag80.png",
    ΔΔⲆΔΔᐃᐃ: "img/day-accessory0.png",
    ΔΔᐃⲆᐃΔⲆ: "img/day-accessory0-pacques.png",
    ᐃⵠᐃᐃᐃⵠⲆ: "img/night-accessory0-pacques.png",
    ⵠᐃᐃⲆΔⲆⵠ: "img/day-accessory13.png",
    ⵠⵠΔⲆᐃⵠΔ: "img/night-accessory13.png",
    ᐃᐃⵠⲆΔᐃⲆ: "img/day-accessory14.png",
    ⲆΔΔᐃΔΔᐃ: "img/night-accessory14.png",
    ⲆⵠΔⲆΔⲆⵠ: "img/day-accessory15.png",
    ⵠⵠΔᐃᐃⲆⵠ: "img/night-accessory15.png",
    ΔΔⲆⵠΔΔᐃ: "img/day-accessory16.png",
    ⵠⵠΔⵠᐃⲆⲆ: "img/night-accessory16.png",
    ΔΔⲆΔᐃᐃᐃ: "img/day-accessory17.png",
    ᐃΔᐃⵠᐃⲆⵠ: "img/day-accessory17.png",
    ⵠᐃⵠⲆⵠᐃᐃ: "img/day-accessory19.png",
    ⵠᐃΔⵠⲆΔⵠ: "img/night-accessory19.png",
    ⲆΔᐃΔⵠᐃⲆ: "img/day-accessory20.png",
    ⵠΔⲆΔᐃⲆⵠ: "img/night-accessory20.png",
    ΔΔΔⲆⲆⵠⲆ: "img/day-accessory21.png",
    ⵠΔΔΔᐃᐃⲆ: "img/night-accessory21.png",
    ᐃΔⲆⵠᐃΔⵠ: "img/day-accessory22.png",
    ᐃⵠΔⲆⲆΔᐃ: "img/night-accessory22.png",
    ⲆΔⲆⵠΔⲆᐃ: "img/day-accessory23.png",
    ΔΔⵠᐃᐃⲆᐃ: "img/night-accessory23.png",
    ᐃᐃⲆᐃᐃᐃΔ: "img/day-accessory24.png",
    ⲆⵠᐃⲆΔⲆΔ: "img/night-accessory24.png",
    ᐃⵠᐃᐃΔⲆΔ: "img/day-accessory25.png",
    ΔᐃⵠⲆᐃⵠΔ: "img/night-accessory25.png",
    ⵠᐃⲆᐃⵠⲆⵠ: "img/day-accessory26.png",
    ⲆⲆⵠΔⵠΔⲆ: "img/night-accessory26.png",
    ΔⲆΔᐃⲆᐃⲆ: "img/day-accessory27.png",
    ᐃΔⲆⲆⲆᐃΔ: "img/night-accessory27.png",
    ⵠⲆᐃⵠⲆᐃᐃ: "img/day-accessory18.png",
    ΔⵠΔⲆΔⲆⲆ: "img/night-accessory18.png",
    ⲆᐃΔᐃⵠⵠⲆ: "img/day-accessory29.png",
    ⵠⲆΔⲆⲆⵠⲆ: "img/night-accessory29.png",
    ΔΔᐃⵠⲆⲆΔ: "img/day-accessory30.png",
    ΔΔⵠⲆⲆᐃΔ: "img/night-accessory30.png",
    ⵠⵠᐃᐃⲆᐃⲆ: "img/day-accessory31.png",
    ΔⲆΔΔΔᐃⲆ: "img/night-accessory31.png",
    ⲆⵠΔⵠΔᐃⵠ: "img/day-accessory32.png",
    ΔΔⵠᐃΔⵠᐃ: "img/night-accessory32.png",
    ⲆΔΔⲆⵠⲆⲆ: "img/day-accessory33.png",
    ᐃᐃΔᐃᐃᐃⲆ: "img/night-accessory33.png",
    ᐃᐃⲆⵠⵠΔΔ: "img/day-accessory34.png",
    ⵠⵠΔᐃⵠᐃᐃ: "img/night-accessory34.png",
    ΔᐃⵠⲆⲆⵠⵠ: "img/day-accessory35.png",
    ᐃⲆΔⵠⲆΔΔ: "img/night-accessory35.png",
    ⲆⲆΔᐃⵠᐃᐃ: "img/day-accessory28.png",
    ᐃᐃⵠᐃⵠⵠᐃ: "img/night-accessory28.png",
    ⲆᐃΔⵠⲆᐃⵠ: "img/day-accessory36.png",
    ⵠⲆΔⲆⵠⵠⵠ: "img/night-accessory36.png",
    ⲆⵠⵠΔᐃᐃΔ: "img/day-accessory37.png",
    ΔⵠⲆᐃⲆᐃⲆ: "img/night-accessory37.png",
    ⲆⵠᐃⲆⵠⲆᐃ: "img/day-accessory39.png",
    ⵠⵠⵠᐃᐃΔⵠ: "img/night-accessory39.png",
    ΔⲆΔΔᐃΔⵠ: "img/day-accessory40.png",
    ᐃⵠᐃⵠᐃᐃΔ: "img/night-accessory40.png",
    ⲆⲆⵠⲆⵠᐃᐃ: "img/day-accessory41.png",
    ΔⲆᐃΔᐃⲆⵠ: "img/night-accessory41.png",
    ⵠᐃᐃᐃΔⵠΔ: "img/day-accessory42.png",
    ΔⲆΔᐃⵠᐃᐃ: "img/night-accessory42.png",
    ⲆⲆᐃⲆⲆΔΔ: "img/day-accessory43.png",
    ⵠᐃⵠⲆⵠⲆⵠ: "img/night-accessory43.png",
    ΔᐃᐃⵠⵠΔΔ: "img/day-accessory44.png",
    Δᐃⵠᐃᐃⵠⵠ: "img/night-accessory44.png",
    ᐃΔⵠⲆᐃⵠⲆ: "img/day-accessory38.png",
    ᐃᐃᐃⲆΔᐃⵠ: "img/night-accessory38.png",
    ΔⲆΔⵠᐃΔΔ: "img/day-accessory46.png",
    ⲆᐃᐃⲆΔⲆⲆ: "img/night-accessory46.png",
    ᐃⲆᐃⵠⲆᐃᐃ: "img/day-accessory47.png",
    ᐃⵠⲆⵠᐃⵠⲆ: "img/night-accessory47.png",
    ΔΔᐃᐃⵠⲆΔ: "img/day-accessory48.png",
    ⵠⵠⵠᐃⲆᐃⵠ: "img/night-accessory48.png",
    ΔⲆΔⵠΔⲆⲆ: "img/day-accessory49.png",
    ⲆⵠᐃᐃⵠᐃⲆ: "img/night-accessory49.png",
    ᐃᐃΔΔᐃΔⲆ: "img/day-accessory45.png",
    ⵠⵠⲆΔⵠΔⲆ: "img/night-accessory45.png",
    ⵠᐃⲆⵠΔⵠⵠ: "img/day-accessory50.png",
    ⵠΔⲆⲆΔᐃⲆ: "img/night-accessory50.png",
    ᐃⲆΔⵠΔΔⵠ: "img/day-accessory51.png",
    ⵠᐃⵠᐃⲆⵠⵠ: "img/night-accessory51.png",
    ΔⵠΔⵠΔⲆᐃ: "img/day-accessory52.png",
    ᐃΔⲆⵠⵠᐃⵠ: "img/night-accessory52.png",
    ΔⲆⲆⲆΔⵠⵠ: "img/day-accessory53.png",
    ᐃΔΔⲆⲆΔⲆ: "img/night-accessory53.png",
    ⲆⵠⵠⵠⵠᐃΔ: "img/day-accessory54.png",
    ΔⲆⵠΔΔⵠⵠ: "img/night-accessory54.png",
    ⲆᐃⲆⵠⲆⲆⵠ: "img/day-accessory55.png",
    ⲆᐃⲆⲆⵠᐃΔ: "img/night-accessory55.png",
    ⲆⲆΔΔΔⲆⵠ: "img/day-accessory56.png",
    ⲆⵠΔⲆⲆᐃⲆ: "img/night-accessory56.png",
    ᐃⲆΔᐃⵠᐃⲆ: "img/day-accessory57.png",
    ΔᐃΔΔΔᐃⲆ: "img/night-accessory57.png",
    ⵠⲆⵠⵠⵠⲆⲆ: "img/day-accessory58.png",
    ⵠΔᐃᐃᐃⵠΔ: "img/night-accessory58.png",
    ΔⲆΔⲆⲆΔⲆ: "img/day-accessory59.png",
    ᐃΔᐃⵠⲆᐃΔ: "img/night-accessory59.png",
    ΔⲆⵠⲆᐃⵠⵠ: "img/day-accessory60.png",
    ⲆᐃⵠⲆΔⵠⵠ: "img/night-accessory60.png",
    ⵠⲆΔⲆᐃΔⲆ: "img/day-accessory61.png",
    ⵠⲆⲆΔⲆⵠᐃ: "img/night-accessory61.png",
    ᐃⵠᐃⵠⵠⲆᐃ: "img/day-accessory62.png",
    ΔᐃᐃᐃΔΔⲆ: "img/night-accessory62.png",
    ⵠᐃⵠⵠⵠⵠᐃ: "img/day-accessory63.png",
    ΔⲆⲆΔⵠⵠΔ: "img/night-accessory63.png",
    ⵠⲆΔⵠᐃᐃᐃ: "img/day-accessory64.png",
    ᐃᐃΔⲆᐃⵠⲆ: "img/night-accessory64.png",
    ΔΔⲆⵠΔⲆⵠ: "img/day-accessory65.png",
    ᐃᐃⵠⵠᐃⵠⲆ: "img/night-accessory65.png",
    ΔⵠⲆᐃⵠᐃΔ: "img/day-accessory66.png",
    ΔΔᐃᐃⲆⵠⵠ: "img/night-accessory66.png",
    ᐃΔᐃⲆΔΔᐃ: "img/day-accessory67.png",
    ΔⲆⵠᐃᐃⵠᐃ: "img/night-accessory67.png",
    ᐃᐃΔⵠⲆⲆⵠ: "img/day-accessory68.png",
    ⵠⵠΔᐃΔⵠᐃ: "img/night-accessory68.png",
    ⲆⵠΔⲆⲆΔⵠ: "img/day-accessory69.png",
    ΔⲆΔⲆⲆⲆⲆ: "img/night-accessory69.png",
    ⲆⲆⲆᐃΔⵠⲆ: "img/day-accessory70.png",
    ᐃⲆᐃᐃΔⲆⲆ: "img/night-accessory70.png",
    ⲆΔⲆΔᐃⵠⵠ: "img/day-accessory71.png",
    ⲆᐃⵠⲆᐃᐃⲆ: "img/night-accessory71.png",
    ΔΔᐃⵠⵠΔⵠ: "img/day-accessory72.png",
    ΔᐃᐃⲆⲆᐃΔ: "img/night-accessory72.png",
    ΔΔᐃⵠΔⵠΔ: "img/day-accessory73.png",
    ᐃᐃΔⵠΔᐃⵠ: "img/night-accessory73.png",
    ⲆᐃⵠᐃⲆᐃⲆ: "img/day-accessory74.png",
    ⵠᐃⲆᐃⲆⲆⵠ: "img/night-accessory74.png",
    ⵠΔⵠΔⵠᐃΔ: "img/day-accessory75.png",
    ⵠᐃΔΔⲆΔΔ: "img/night-accessory75.png",
    ⲆⵠⵠⲆⵠⲆᐃ: "img/day-accessory76.png",
    ΔᐃᐃᐃΔⵠΔ: "img/night-accessory76.png",
    ⲆⲆᐃⵠⵠⵠᐃ: "img/day-accessory77.png",
    ⵠΔΔⵠᐃΔΔ: "img/night-accessory77.png",
    ᐃᐃⲆΔᐃᐃΔ: "img/day-accessory78.png",
    ΔⲆΔⵠᐃᐃⵠ: "img/night-accessory78.png",
    ⵠΔᐃⵠΔΔⵠ: "img/day-accessory79.png",
    ΔΔⵠΔᐃΔⵠ: "img/night-accessory79.png",
    ᐃⵠΔΔᐃⲆⲆ: "img/day-accessory80.png",
    ᐃⲆⵠΔⲆᐃⵠ: "img/night-accessory80.png",
    ⵠⵠᐃΔᐃᐃⲆ: "img/day-accessory81.png",
    ΔⵠⲆⵠⲆᐃⵠ: "img/night-accessory81.png",
    ⲆⵠⵠⲆΔΔⵠ: "img/day-accessory83.png",
    ᐃⵠΔⵠΔⲆᐃ: "img/night-accessory83.png",
    ΔⲆⵠⲆᐃⲆⲆ: "img/day-accessory84.png",
    ⲆᐃⵠᐃⲆΔΔ: "img/night-accessory84.png",
    ⲆΔⲆⲆⵠⵠΔ: "img/day-accessory85.png",
    ΔⵠΔⵠⵠΔΔ: "img/night-accessory85.png",
    ⲆⲆⵠᐃΔⵠⵠ: "img/day-accessory86.png",
    ⵠΔΔᐃΔⲆⵠ: "img/night-accessory86.png",
    ⵠΔⲆⵠΔⵠⵠ: "img/day-accessory87.png",
    ᐃⵠΔΔⵠⵠⵠ: "img/night-accessory87.png",
    ⲆΔᐃⵠΔᐃᐃ: "img/day-accessory88.png",
    ΔᐃⵠⲆⲆΔᐃ: "img/night-accessory88.png",
    ⵠⲆᐃᐃᐃᐃⵠ: "img/day-accessory89.png",
    ΔⲆⵠΔΔⲆΔ: "img/night-accessory89.png",
    ⲆⵠᐃⵠᐃⲆⵠ: "img/day-accessory90.png",
    ᐃΔⵠΔⵠⲆⵠ: "img/night-accessory90.png",
    ᐃᐃΔΔᐃⵠⲆ: "img/day-accessory91.png",
    ⲆΔⲆΔⵠΔⵠ: "img/night-accessory91.png",
    ⵠΔΔⲆΔᐃⲆ: "img/day-accessory92.png",
    ᐃΔΔᐃⲆᐃⲆ: "img/night-accessory92.png",
    ΔⲆΔᐃⲆΔⵠ: "img/day-accessory93.png",
    ΔⵠᐃⵠⲆᐃⲆ: "img/night-accessory93.png",
    ⵠᐃᐃⵠΔΔΔ: "img/day-accessory94.png",
    ⵠⵠⵠⵠⲆᐃⲆ: "img/night-accessory94.png",
    ⵠᐃΔⲆΔΔⵠ: "img/day-accessory95.png",
    ΔᐃⲆⲆⵠᐃⲆ: "img/night-accessory95.png",
    ⲆⲆⵠΔⵠᐃⵠ: "img/day-accessory96.png",
    ᐃᐃΔⲆⵠᐃⵠ: "img/night-accessory96.png",
    ᐃΔⲆⲆⲆΔⵠ: "img/day-accessory97.png",
    ⵠⲆᐃⲆⲆᐃⵠ: "img/night-accessory97.png",
    ⲆΔΔᐃΔⲆᐃ: "img/day-accessory98.png",
    ⲆΔⵠΔΔΔΔ: "img/night-accessory98.png",
    ⲆⲆΔΔᐃΔⵠ: "img/day-accessory99.png",
    ΔΔⲆⲆΔⵠⲆ: "img/night-accessory99.png",
    ⲆⵠⵠⲆΔᐃΔ: "img/day-accessory100.png",
    ⲆⲆⵠᐃⵠΔⵠ: "img/night-accessory100.png",
    ΔⵠΔΔⵠⲆᐃ: "img/day-accessory101.png",
    ΔΔΔΔⲆΔᐃ: "img/night-accessory101.png",
    ⲆᐃᐃᐃΔΔⵠ: "img/day-accessory102.png",
    ΔⲆⵠⵠΔᐃⲆ: "img/night-accessory102.png",
    ᐃΔΔⵠⲆΔⵠ: "img/day-accessory103.png",
    ᐃⲆΔᐃᐃⵠⵠ: "img/night-accessory103.png",
    ᐃⲆᐃᐃΔΔⵠ: "img/day-accessory104.png",
    ᐃⵠΔᐃᐃᐃⵠ: "img/night-accessory104.png",
    ᐃⵠΔⲆᐃΔⲆ: "img/day-accessory105.png",
    ᐃΔⲆⲆᐃᐃΔ: "img/night-accessory105.png",
    ΔΔΔⵠⵠⲆⲆⲆᐃ: "img/day-accessory106.png",
    ΔᐃᐃⲆΔⵠΔⵠΔ: "img/night-accessory106.png",
    ΔⵠⵠᐃᐃΔᐃΔⵠ: "img/day-accessory107.png",
    ⲆⲆⵠᐃΔⲆⲆΔᐃ: "img/night-accessory107.png",
    ΔΔⲆΔⵠⲆᐃ: "img/day-accessory82.png",
    ⲆΔⵠⲆⲆⵠⲆ: "img/night-accessory82.png",
    ΔⲆⲆⵠΔⵠⵠ: "img/day-book0.png",
    ⵠᐃⵠᐃΔⵠΔ: "img/night-book0.png",
    ⲆⲆᐃⵠⲆⲆᐃ: "img/day-book1.png",
    ᐃⵠΔΔⵠⵠᐃ: "img/night-book1.png",
    ᐃⲆΔⵠⵠᐃⲆ: "img/day-book2.png",
    ᐃⵠᐃᐃⵠΔᐃ: "img/night-book2.png",
    ΔⵠⵠⵠⵠᐃⲆ: "img/day-book3.png",
    ⵠⲆⲆΔΔᐃⵠ: "img/night-book3.png",
    ΔⲆⲆⵠΔⲆΔ: "img/day-book4.png",
    ΔⲆⵠⵠⵠⵠΔ: "img/night-book4.png",
    ⵠΔΔᐃᐃΔΔ: "img/day-book5.png",
    ⵠᐃⵠⲆⲆᐃᐃ: "img/night-book5.png",
    ΔΔⵠᐃΔⲆᐃ: "img/day-book6.png",
    ΔᐃⵠΔᐃᐃᐃ: "img/night-book6.png",
    ⲆΔⲆⵠⵠΔⲆ: "img/day-book7.png",
    ᐃⲆⲆⵠⵠⵠΔ: "img/night-book7.png",
    Ⲇⵠᐃᐃⵠᐃᐃ: "img/day-book8.png",
    ᐃⵠΔⵠΔᐃΔ: "img/night-book8.png",
    ⵠⵠⵠⵠⲆΔⲆ: "img/day-book9.png",
    ΔΔΔΔᐃⵠⲆ: "img/night-book9.png",
    Ⲇᐃⵠᐃᐃᐃⵠ: "img/day-book10.png",
    ᐃⵠᐃⵠΔΔⲆ: "img/night-book10.png",
    ᐃⵠⵠᐃⵠⲆᐃ: "img/day-book11.png",
    ᐃⵠⲆⲆᐃΔᐃ: "img/night-book11.png",
    ΔⲆⵠⲆⵠΔᐃ: "img/day-book12.png",
    ᐃᐃᐃᐃⲆⵠΔ: "img/night-book12.png",
    ⵠⲆⵠᐃᐃΔⲆ: "img/day-book13.png",
    ⲆᐃⲆⵠⵠᐃⲆ: "img/night-book13.png",
    ΔⲆΔᐃⵠᐃΔ: "img/day-book14.png",
    ⵠⲆⲆⲆⲆⲆⵠ: "img/night-book14.png",
    ⵠⲆΔⵠΔᐃⵠ: "img/day-book15.png",
    ᐃΔⲆⲆⲆⵠΔ: "img/night-book15.png",
    ΔⲆΔᐃᐃᐃⵠ: "img/day-book16.png",
    ᐃⵠⵠΔⵠΔᐃ: "img/night-book16.png",
    ⲆⵠᐃΔⵠᐃᐃ: "img/day-book17.png",
    ⵠⲆΔⲆⲆΔⵠ: "img/night-book17.png",
    ⵠΔⵠΔΔᐃⵠ: "img/day-book18.png",
    ᐃⲆᐃᐃⵠᐃⲆ: "img/night-book18.png",
    ⲆᐃⵠᐃⵠΔᐃ: "img/day-book19.png",
    ⵠᐃᐃᐃⵠΔΔ: "img/night-book19.png",
    ⲆⵠᐃΔᐃⵠⲆ: "img/day-book20.png",
    ⲆᐃⵠᐃΔΔⲆ: "img/night-book20.png",
    ⵠⵠⲆᐃᐃᐃⵠ: "img/day-book21.png",
    ⲆᐃΔΔΔΔᐃ: "img/night-book21.png",
    ⲆΔᐃⲆⲆⵠΔ: "img/day-book22.png",
    ⲆⵠΔᐃⲆᐃⲆ: "img/night-book22.png",
    ᐃΔᐃᐃⵠΔΔ: "img/day-book23.png",
    ΔᐃΔⲆⵠᐃᐃ: "img/night-book23.png",
    ΔΔᐃⵠᐃⲆΔ: "img/day-book24.png",
    ΔΔⲆⲆⵠⵠΔ: "img/night-book24.png",
    ᐃΔΔⵠᐃⵠΔ: "img/day-book25.png",
    ΔᐃⵠΔᐃⲆⲆ: "img/night-book25.png",
    ⵠᐃΔⵠΔᐃⵠ: "img/day-book26.png",
    ⲆⲆΔᐃⲆᐃᐃ: "img/night-book26.png",
    ΔⵠΔᐃΔΔⵠ: "img/day-book27.png",
    ⲆᐃⲆΔⵠⲆⲆ: "img/night-book27.png",
    ᐃⵠᐃᐃΔⵠΔ: "img/day-book28.png",
    ΔⲆⲆΔᐃᐃΔ: "img/night-book28.png",
    ᐃⵠΔⵠᐃᐃΔ: "img/day-book29.png",
    ⵠⲆⲆΔΔᐃΔ: "img/night-book29.png",
    ⲆⵠⵠΔᐃⵠΔ: "img/day-book30.png",
    ΔΔΔΔⵠⲆⲆ: "img/night-book30.png",
    ⵠΔⵠⲆΔᐃⵠ: "img/day-book31.png",
    ᐃⵠⲆⵠⲆⲆⵠ: "img/night-book31.png",
    ⲆᐃⲆΔᐃⵠⵠ: "img/day-book32.png",
    ΔΔΔⵠΔΔᐃ: "img/night-book32.png",
    ᐃᐃⵠΔⵠⵠⵠ: "img/day-book33.png",
    ᐃΔᐃⲆᐃΔⵠ: "img/night-book33.png",
    ᐃⵠⵠⲆⵠⵠⲆ: "img/day-book34.png",
    ⲆⲆⲆⲆᐃⵠΔ: "img/night-book34.png",
    ⲆⲆⵠᐃⵠᐃⲆ: "img/day-book35.png",
    ⵠⲆΔⲆⵠⲆᐃ: "img/night-book35.png",
    ΔΔᐃⲆⲆⵠⵠ: "img/day-book36.png",
    ᐃΔᐃᐃᐃΔΔ: "img/night-book36.png",
    ⲆΔⲆⲆᐃᐃⵠⵠᐃ: "img/day-book37.png",
    ⵠΔⲆΔⵠⵠᐃⵠᐃ: "img/night-book37.png",
    ⲆᐃᐃΔⵠⲆⵠ: "img/day-book38.png",
    ⵠᐃᐃΔⵠⲆᐃ: "img/night-book38.png",
    ⲆΔᐃΔΔΔΔ: "img/day-book39.png",
    ΔⲆΔⵠⵠΔⵠ: "img/night-book39.png",
    ᐃⵠⲆᐃⲆⵠᐃ: "img/day-book40.png",
    ΔᐃᐃⲆΔⲆⵠ: "img/night-book40.png",
    ⵠⵠΔᐃⲆᐃΔ: "img/day-book41.png",
    ΔΔⲆᐃⵠⲆⵠ: "img/night-book41.png",
    ΔⲆⵠᐃⵠⲆⲆ: "img/day-book42.png",
    ᐃᐃΔⵠᐃⵠΔ: "img/night-book42.png",
    ⲆⵠⵠᐃΔᐃⵠ: "img/day-book43.png",
    ΔᐃⵠⲆⵠⲆⵠ: "img/night-book43.png",
    ᐃⲆΔⲆⲆⵠᐃ: "img/day-book44.png",
    ⵠᐃΔΔΔᐃⲆ: "img/night-book44.png",
    ⵠⵠᐃᐃⲆΔΔ: "img/day-book45.png",
    ⲆᐃⲆⵠⵠⲆᐃ: "img/night-book45.png",
    ⲆᐃⵠⵠΔⲆⵠ: "img/day-book46.png",
    ⲆΔⲆᐃΔⵠⵠ: "img/night-book46.png",
    ΔᐃΔⲆⵠⲆⵠ: "img/day-book47.png",
    ⵠᐃⵠᐃⵠⵠΔ: "img/night-book47.png",
    ΔⲆⲆⲆΔⵠᐃ: "img/day-book48.png",
    ᐃᐃΔⲆⲆΔⵠ: "img/night-book48.png",
    ⵠᐃΔᐃᐃⲆΔ: "img/day-book49.png",
    ⵠⵠᐃⲆⵠⵠᐃ: "img/night-book49.png",
    ᐃΔᐃⵠⵠᐃᐃ: "img/day-book50.png",
    ⲆⵠᐃⲆⲆⲆⲆ: "img/night-book50.png",
    ⲆᐃⲆΔΔΔⵠ: "img/day-crate1.png",
    ⲆᐃΔᐃⵠΔⲆ: "img/night-crate1.png",
    ⵠᐃᐃᐃΔᐃᐃ: "img/day-crate2.png",
    ᐃⲆΔⵠΔⲆⵠ: "img/night-crate2.png",
    ΔΔᐃΔΔᐃⵠ: "img/day-crate3.png",
    ΔⵠΔⲆⲆᐃⲆ: "img/night-crate3.png",
    ᐃⵠⲆᐃⲆⲆⵠ: "img/day-crate4.png",
    ΔⲆᐃⵠⵠⵠⲆ: "img/night-crate4.png",
    ⵠᐃⵠⲆᐃⲆᐃ: "img/day-crate5.png",
    ⲆⲆⲆΔⵠⲆⵠ: "img/night-crate5.png",
    ᐃΔⵠΔⲆᐃᐃ: "img/day-crate6.png",
    ⵠΔΔΔᐃᐃΔ: "img/night-crate6.png",
    ᐃⵠⲆᐃⲆⵠⵠ: "img/day-crate7.png",
    ᐃⵠⵠᐃΔΔⲆ: "img/night-crate7.png",
    ΔΔⵠⲆΔⵠᐃ: "img/day-crate8.png",
    ⲆⵠᐃⲆᐃⲆⲆ: "img/night-crate8.png",
    ⲆᐃᐃⲆⲆⲆΔ: "img/day-crate9.png",
    ᐃᐃΔᐃⵠⲆΔ: "img/night-crate9.png",
    ⲆᐃⲆΔᐃΔᐃ: "img/day-crate10.png",
    ⲆⲆⲆⲆᐃⵠⵠ: "img/night-crate10.png",
    ᐃᐃᐃΔⲆᐃⵠ: "img/day-crate11.png",
    ᐃᐃⲆⵠⲆⲆⲆ: "img/night-crate11.png",
    ⵠⲆⲆΔᐃⵠᐃ: "img/day-crate12.png",
    ΔᐃΔΔⵠⵠⵠ: "img/night-crate12.png",
    ⲆᐃᐃΔⲆⵠᐃ: "img/day-crate13.png",
    ⵠΔⲆᐃⵠⲆΔ: "img/night-crate13.png",
    ᐃⲆᐃⲆⲆⲆᐃ: "img/day-crate14.png",
    ⲆΔᐃⲆΔⵠⵠ: "img/night-crate14.png",
    ⲆⲆⲆᐃΔᐃⲆ: "img/day-crate15.png",
    ᐃΔΔΔⲆⵠᐃ: "img/night-crate15.png",
    ⲆⵠΔⲆΔΔⲆ: "img/day-crate16.png",
    ΔⵠⵠⵠⲆⵠᐃ: "img/night-crate16.png",
    ⵠΔᐃᐃΔΔᐃ: "img/day-crate17.png",
    ⵠΔⵠⵠⵠⲆⵠ: "img/night-crate17.png",
    ᐃⲆΔⵠⲆⵠᐃ: "img/day-crate18.png",
    ⲆΔΔⵠΔᐃⲆ: "img/night-crate18.png",
    ⲆⵠᐃΔⲆΔⵠ: "img/day-crate19.png",
    ⵠΔᐃⵠⵠΔΔ: "img/night-crate19.png",
    ⵠⵠⲆᐃⵠᐃᐃ: "img/day-crate20.png",
    ᐃⵠⵠⵠⲆΔⲆ: "img/night-crate20.png",
    ⲆᐃᐃᐃΔⵠⲆ: "img/day-crate21.png",
    ΔⲆⲆᐃᐃΔᐃ: "img/night-crate21.png",
    ᐃⲆⲆΔⵠΔΔ: "img/day-crate22.png",
    ⲆΔΔⵠᐃⲆⵠ: "img/night-crate22.png",
    ΔⲆⵠⲆΔΔⵠ: "img/day-crate23.png",
    ⲆⲆᐃⵠⲆΔⵠ: "img/night-crate23.png",
    ⵠⵠⵠΔⵠⵠᐃ: "img/day-crate24.png",
    ⵠⵠᐃᐃⲆᐃΔ: "img/night-crate24.png",
    ΔⵠΔΔⵠΔΔ: "img/day-crate25.png",
    ⲆⵠΔⵠᐃⲆᐃ: "img/night-crate25.png",
    ⲆⵠⲆΔΔⵠⲆ: "img/day-crate26.png",
    ⵠⲆⵠᐃⵠⵠΔ: "img/night-crate26.png",
    ⲆΔⲆⵠⵠⵠΔ: "img/day-crate27.png",
    ⵠΔΔⲆᐃⵠΔ: "img/night-crate27.png",
    ᐃⵠⲆΔⲆⵠⵠ: "img/day-crate28.png",
    ᐃᐃΔΔΔΔⵠ: "img/night-crate28.png",
    ᐃⲆᐃΔᐃᐃⲆ: "img/day-crate29.png",
    ΔⵠΔⵠⲆⲆⲆ: "img/night-crate29.png",
    ⵠⵠᐃⵠᐃⵠⵠ: "img/day-crate30.png",
    ᐃΔΔΔᐃᐃΔ: "img/night-crate30.png",
    ᐃⵠⵠⲆⵠⵠΔ: "img/day-crate31.png",
    ⲆΔⵠΔⲆⵠⲆ: "img/night-crate31.png",
    ᐃᐃᐃΔΔⵠᐃ: "img/day-crate32.png",
    ⵠᐃⵠΔᐃⲆᐃ: "img/night-crate32.png",
    ΔᐃΔⵠⵠⵠΔ: "img/day-crate33.png",
    ᐃⲆⲆΔⵠᐃⲆ: "img/night-crate33.png",
    ᐃΔⲆΔᐃⵠΔ: "img/day-crate34.png",
    ⵠΔΔⵠⵠⲆⵠ: "img/night-crate34.png",
    ᐃⵠᐃΔΔⲆΔ: "img/day-crate35.png",
    ⲆΔⵠᐃᐃⲆᐃ: "img/night-crate35.png",
    ⵠᐃΔⲆΔⲆⲆ: "img/day-crate36.png",
    ⲆⵠΔΔᐃⲆⵠ: "img/night-crate36.png",
    ⲆⵠⵠᐃᐃΔΔ: "img/day-crate37.png",
    ᐃⵠΔⲆⲆⲆⵠ: "img/night-crate37.png",
    ᐃⵠΔᐃⵠᐃᐃ: "img/day-crate38.png",
    ᐃⵠⲆⲆᐃΔΔ: "img/night-crate38.png",
    ⵠⲆⵠᐃΔⲆⵠ: "img/day-crate39.png",
    ΔⲆᐃⵠⵠΔⵠ: "img/night-crate39.png",
    ΔΔᐃΔⲆⲆᐃ: "img/day-crate40.png",
    ΔΔΔΔᐃᐃΔ: "img/night-crate40.png",
    ⲆᐃⲆᐃΔᐃΔ: "img/day-crate41.png",
    ⵠΔⵠᐃⲆⵠΔ: "img/night-crate41.png",
    ⵠⲆⲆᐃⲆᐃⵠ: "img/day-crate42.png",
    ᐃᐃⵠΔᐃⵠⵠ: "img/night-crate42.png",
    ⲆᐃⲆᐃⲆⲆᐃ: "img/day-crate43.png",
    ᐃᐃΔΔΔⲆⵠ: "img/night-crate43.png",
    ᐃΔⵠⵠⵠⲆΔ: "img/day-crate44.png",
    ⲆⲆᐃᐃΔⵠΔ: "img/night-crate44.png",
    ᐃΔΔⲆⲆΔΔ: "img/day-crate45.png",
    ᐃⵠΔᐃΔⲆⲆ: "img/night-crate45.png",
    ⲆᐃᐃⲆⲆᐃᐃ: "img/day-crate46.png",
    ΔᐃᐃᐃⵠⲆⵠ: "img/night-crate46.png",
    ΔⵠⲆⵠΔᐃᐃ: "img/day-crate47.png",
    ⵠΔⵠⵠⵠⵠⵠ: "img/night-crate47.png",
    ᐃⲆΔᐃΔⲆⵠ: "img/day-crate48.png",
    ᐃΔⲆⲆⲆⲆⲆ: "img/night-crate48.png",
    ΔⲆⵠΔᐃΔᐃ: "img/day-crate49.png",
    ⲆᐃΔⵠⲆΔᐃ: "img/night-crate49.png",
    ΔᐃΔΔⲆΔΔ: "img/day-crate50.png",
    ⵠΔΔⲆΔᐃΔ: "img/night-crate50.png",
    ᐃⲆΔΔⵠⲆⵠ: "img/day-crate51.png",
    ⲆᐃΔΔᐃᐃΔ: "img/night-crate51.png",
    ⲆΔΔⵠⲆᐃⵠ: "img/day-crate52.png",
    ΔⲆΔᐃᐃⵠⵠ: "img/night-crate52.png",
    ⵠΔⲆⵠᐃⲆᐃ: "img/day-crate53.png",
    ⲆΔΔⲆΔⵠΔ: "img/night-crate53.png",
    ΔᐃⵠⵠᐃⵠⲆ: "img/day-crate54.png",
    ᐃΔᐃⵠΔⵠᐃ: "img/night-crate54.png",
    ΔⲆⵠΔΔΔᐃ: "img/day-crate55.png",
    ΔⵠⵠᐃⲆᐃΔ: "img/night-crate55.png",
    ⵠⵠΔΔΔⲆᐃ: "img/day-crate56.png",
    ⲆΔⵠᐃⵠΔⲆ: "img/night-crate56.png",
    ᐃᐃΔΔⲆᐃⵠ: "img/day-crate57.png",
    ⲆᐃΔⲆⵠⵠⵠ: "img/night-crate57.png",
    ⵠΔⵠᐃⵠΔΔ: "img/day-crate58.png",
    ⵠΔᐃⵠΔᐃⲆ: "img/night-crate58.png",
    ΔⵠⵠⵠᐃⲆΔ: "img/day-crate59.png",
    ΔΔⲆΔΔⲆⵠ: "img/night-crate59.png",
    ⵠⲆᐃᐃⵠᐃⲆ: "img/day-crate60.png",
    ΔⲆᐃᐃΔⲆΔ: "img/night-crate60.png",
    ⵠⵠᐃⵠⵠᐃⵠ: "img/day-crate61.png",
    Δⵠᐃᐃⵠᐃⵠ: "img/night-crate61.png",
    ⲆΔᐃⵠΔⲆΔ: "img/day-crate62.png",
    ⲆᐃᐃⲆⵠⵠⲆ: "img/night-crate62.png",
    ⲆΔΔᐃΔⲆⲆ: "img/day-crate63.png",
    ᐃⵠΔᐃⲆⲆΔ: "img/night-crate63.png",
    ⲆⵠᐃⲆΔᐃⵠ: "img/day-crate64.png",
    ⵠΔⵠᐃᐃⵠⵠ: "img/night-crate64.png",
    ⲆᐃⵠⵠᐃⵠⲆ: "img/day-crate65.png",
    ᐃⲆᐃⲆᐃⵠⵠ: "img/night-crate65.png",
    ⵠⲆⲆⲆᐃᐃΔ: "img/day-crate66.png",
    ⲆⵠΔⲆᐃᐃⲆ: "img/night-crate66.png",
    ⵠⲆᐃⲆⵠⲆΔ: "img/day-crate67.png",
    ᐃᐃⵠᐃΔⵠᐃ: "img/night-crate67.png",
    ⲆΔΔⲆⲆΔΔ: "img/day-crate68.png",
    ⲆⲆΔᐃΔⵠⲆ: "img/night-crate68.png",
    ⲆⵠΔⲆΔⵠⲆ: "img/day-crate69.png",
    ⲆⵠᐃⵠⲆⵠᐃ: "img/night-crate69.png",
    ⲆⲆΔᐃᐃᐃⲆ: "img/day-crate70.png",
    ⵠᐃᐃᐃᐃⲆᐃ: "img/night-crate70.png",
    ⲆᐃΔⲆᐃΔⲆ: "img/day-crate71.png",
    ⲆᐃⲆⵠⵠΔⲆ: "img/night-crate71.png",
    ⲆΔⵠΔΔΔⲆ: "img/day-crate72.png",
    ⲆΔⵠΔⲆᐃⲆ: "img/night-crate72.png",
    ᐃⵠⵠⵠⵠⲆᐃ: "img/day-crate73.png",
    ⵠⵠⵠⵠΔΔΔ: "img/night-crate73.png",
    ΔⵠᐃⲆᐃⲆⵠ: "img/day-crate74.png",
    ΔΔΔⲆⲆΔΔ: "img/night-crate74.png",
    ⵠⵠᐃⲆⵠᐃΔ: "img/day-crate75.png",
    ΔᐃΔΔⲆⵠⵠ: "img/night-crate75.png",
    ΔⵠⵠᐃⲆⵠΔ: "img/day-crate76.png",
    ΔᐃⵠΔᐃΔⵠ: "img/night-crate76.png",
    ᐃⲆΔΔⵠᐃⲆ: "img/day-crate77.png",
    ⵠΔΔⲆⲆΔᐃ: "img/night-crate77.png",
    ⵠⲆΔⲆⲆⲆΔ: "img/day-crate78.png",
    ⲆᐃⵠⲆⲆΔΔ: "img/night-crate78.png",
    ᐃⵠⲆⵠΔⵠᐃ: "img/day-crate79.png",
    ΔⵠΔⲆⵠᐃΔ: "img/night-crate79.png",
    ΔⵠⲆᐃⵠⵠᐃ: "img/day-herb0.png",
    ⲆᐃᐃⵠΔⲆΔ: "img/day-herb1.png",
    ⵠⵠᐃⲆΔⵠᐃ: "img/day-herb2.png",
    ΔⵠᐃⵠⵠΔᐃ: "img/day-herb3.png",
    ΔᐃⲆᐃᐃⲆⵠ: "img/day-herb4.png",
    ⲆᐃⲆⵠⵠⲆⵠ: "img/day-herb5.png",
    ⵠᐃⵠⵠⵠΔᐃ: "img/day-herb6.png",
    ⵠᐃⵠΔⲆⵠΔ: "img/day-herb7.png",
    ᐃΔⲆᐃⵠⵠⲆ: "img/day-herb8.png",
    ᐃⵠΔΔⲆΔᐃ: "img/day-herb9.png",
    ᐃⵠᐃⲆᐃᐃΔ: "img/day-herb10.png",
    ᐃΔⵠᐃᐃⲆᐃ: "img/day-herb11.png",
    ⵠⵠⵠⲆᐃΔΔ: "img/day-herb12.png",
    ᐃⲆΔⵠⵠΔᐃ: "img/day-herb13.png",
    ⵠᐃᐃⲆⵠⲆⵠ: "img/day-herb14.png",
    ⵠᐃᐃⵠᐃᐃᐃ: "img/day-herb15.png",
    ΔⵠᐃⲆⵠⲆⵠ: "img/day-shell0.png",
    ⲆΔᐃΔⵠᐃΔ: "img/day-shell1.png",
    ⲆᐃΔᐃΔⵠᐃ: "img/day-shell2.png",
    ᐃⵠⵠⲆᐃⲆΔ: "img/day-leaf1.png",
    ΔⵠᐃᐃᐃⲆᐃ: "img/day-leaf2.png",
    ⵠᐃⵠⵠⲆⲆⵠ: "img/day-leaf3.png",
    ᐃⲆᐃΔΔᐃΔ: "img/day-leaf4.png",
    ⵠᐃⵠⵠⵠⲆⲆ: "img/day-leaf5.png",
    ⵠΔⲆⵠⲆΔᐃ: "img/day-leaf6.png",
    ΔⲆⵠⵠⵠᐃⲆ: "img/day-leaf7.png",
    ⲆⲆⵠⲆᐃⵠᐃ: "img/day-leaf8.png",
    ΔᐃⵠΔΔⲆⵠ: "img/day-rock0.png",
    ᐃⲆⵠⲆⵠΔΔ: "img/day-rock1.png",
    ᐃᐃᐃⵠⵠⵠΔ: "img/day-rock2.png",
    ⵠΔᐃⵠᐃᐃⲆ: "img/day-rock3.png",
    ⵠⲆⲆᐃⵠΔᐃ: "img/day-rock4.png",
    ΔΔᐃⲆⲆⲆᐃ: "img/day-rock5.png",
    ⵠᐃᐃᐃΔⵠⵠ: "img/day-rock6.png",
    ⲆΔⲆᐃᐃⲆΔ: "img/day-rock7.png",
    ᐃᐃΔⲆⲆᐃᐃ: "img/day-rock8.png",
    ΔΔΔⵠΔⲆᐃ: "img/day-rock9.png",
    ᐃΔᐃⵠⲆΔⲆ: "img/day-rock10.png",
    ΔⵠⵠⲆⵠΔⵠ: "img/day-rock11.png",
    ⲆⲆⵠΔᐃⵠⲆ: "img/day-rock12.png",
    ⲆᐃΔΔⵠΔⲆ: "img/day-rock13.png",
    ⲆⵠᐃⲆᐃᐃΔ: "img/day-flower1.png",
    ᐃΔᐃΔᐃⲆⲆ: "img/day-flower2.png",
    ⵠᐃΔⲆⲆⲆΔ: "img/day-flower3.png",
    ΔΔⲆⲆᐃΔⵠ: "img/day-flower4.png",
    ⲆⲆΔⵠⲆⵠⵠ: "img/day-flower5.png",
    ᐃⵠΔⵠᐃᐃᐃ: "img/day-flower6.png",
    ⵠΔⵠⲆⵠⲆⲆ: "img/day-flower7.png",
    ΔᐃⲆⲆⲆᐃᐃ: "img/day-flower8.png",
    ᐃΔᐃⲆΔⲆΔ: "img/day-flower9.png",
    ⵠᐃⵠⲆΔᐃΔ: "img/day-herb16.png",
    ⵠᐃᐃⵠᐃⵠⲆ: "img/day-herb17.png",
    ⵠⵠᐃΔᐃⵠΔ: "img/day-herb18.png",
    ⲆᐃᐃⵠⲆΔⲆ: "img/day-herb19.png",
    ⵠᐃⵠΔⵠᐃᐃ: "img/day-herb20.png",
    ⵠⲆᐃᐃΔᐃΔ: "img/day-herb21.png",
    ᐃᐃⲆᐃⵠΔⲆ: "img/night-herb0.png",
    ⵠⲆΔΔΔⲆⲆ: "img/night-herb1.png",
    ᐃᐃⲆᐃΔᐃⵠ: "img/night-herb2.png",
    ⲆⵠⲆᐃᐃⵠΔ: "img/night-herb3.png",
    ⲆΔᐃΔΔᐃⲆ: "img/night-herb4.png",
    ΔⲆⵠⵠⵠᐃⵠ: "img/night-herb5.png",
    ⲆΔⲆΔᐃᐃⵠ: "img/night-herb6.png",
    ᐃΔⲆΔΔⲆⲆ: "img/night-herb7.png",
    ⲆΔⵠΔⲆⲆΔ: "img/night-herb8.png",
    ΔⵠⵠΔᐃⲆⲆ: "img/night-herb9.png",
    ᐃΔⵠⵠᐃⲆᐃ: "img/night-herb10.png",
    ᐃΔⲆⲆⵠⲆᐃ: "img/night-herb11.png",
    ⵠⵠⲆᐃⲆⵠⵠ: "img/night-herb12.png",
    ΔΔᐃᐃΔΔⲆ: "img/night-herb13.png",
    ⲆᐃⵠⵠⵠΔᐃ: "img/night-herb14.png",
    ᐃᐃⵠⲆⲆⲆΔ: "img/night-herb15.png",
    ᐃⲆⲆᐃᐃᐃᐃ: "img/night-shell0.png",
    ΔΔⵠᐃⵠᐃᐃ: "img/night-shell1.png",
    ⵠⲆⲆⲆⵠΔⵠ: "img/night-shell2.png",
    ⵠΔⲆⲆΔΔⲆ: "img/night-leaf1.png",
    ⵠⲆⵠⲆΔΔᐃ: "img/night-leaf2.png",
    ΔΔᐃΔΔᐃⲆ: "img/night-leaf3.png",
    ΔΔΔᐃⲆⵠΔ: "img/night-leaf4.png",
    ᐃᐃⲆⲆᐃⵠᐃ: "img/night-leaf5.png",
    ΔⵠΔΔⵠΔⵠ: "img/night-leaf6.png",
    ΔᐃΔⲆⵠⵠⲆ: "img/night-leaf7.png",
    ᐃΔⵠⲆⲆⵠΔ: "img/night-leaf8.png",
    ⵠⲆᐃᐃΔΔⲆ: "img/night-rock0.png",
    ⲆⲆⲆΔΔⵠⵠ: "img/night-rock1.png",
    ΔΔⲆⵠᐃⲆⵠ: "img/night-rock2.png",
    ⵠΔⵠᐃⲆΔᐃ: "img/night-rock3.png",
    ΔⵠⲆᐃⵠⵠⵠ: "img/night-rock4.png",
    ⵠΔᐃΔⲆΔⲆ: "img/night-rock5.png",
    ⵠᐃⲆⵠⵠⲆⲆ: "img/night-rock6.png",
    ᐃᐃⵠᐃΔⲆⲆ: "img/night-rock7.png",
    ΔᐃⲆⵠΔⲆⲆ: "img/night-rock8.png",
    ΔⲆᐃΔⵠᐃΔ: "img/night-rock9.png",
    ΔⵠⵠᐃⵠⲆᐃ: "img/night-rock10.png",
    ΔΔⲆⵠⲆΔⵠ: "img/night-rock11.png",
    ᐃⵠⵠᐃⲆᐃᐃ: "img/night-rock12.png",
    ⵠⲆᐃΔΔΔⵠ: "img/night-rock13.png",
    ⵠΔΔⲆⲆⲆᐃ: "img/night-flower1.png",
    ⲆⲆⵠᐃΔΔΔ: "img/night-flower2.png",
    ΔⵠⲆᐃⲆⲆᐃ: "img/night-flower3.png",
    ⵠⵠᐃⵠᐃⵠⲆ: "img/night-flower4.png",
    ΔᐃⵠⵠⲆᐃⵠ: "img/night-flower5.png",
    ΔⵠⲆⲆΔⵠⵠ: "img/night-flower6.png",
    ⵠⲆΔᐃΔᐃᐃ: "img/night-flower7.png",
    ᐃⵠᐃⲆΔⲆⵠ: "img/night-flower8.png",
    ᐃⲆᐃᐃⲆᐃⵠ: "img/night-flower9.png",
    ⵠᐃⵠᐃᐃⵠⲆ: "img/night-herb16.png",
    ΔᐃΔᐃⵠᐃᐃ: "img/night-herb17.png",
    ⲆⲆⵠᐃⵠΔᐃ: "img/night-herb18.png",
    ⲆⲆⵠᐃᐃⲆᐃ: "img/night-herb19.png",
    ΔⲆⲆᐃᐃⲆᐃ: "img/night-herb20.png",
    ΔΔⲆⵠΔΔⲆ: "img/night-herb21.png",
    ᐃᐃⵠΔᐃⲆⲆ: "img/day-river000-010-000.png",
    ᐃⲆᐃᐃᐃᐃⵠ: "img/day-river000-010-010.png",
    ⵠⲆⲆⲆⲆⵠΔ: "img/day-river000-011-000.png",
    ⵠΔⵠᐃⲆΔⵠ: "img/day-river000-011-010.png",
    ᐃΔⵠⵠᐃⵠⵠ: "img/day-river000-011-011.png",
    ΔⲆⵠⲆⲆΔΔ: "img/day-river000-110-000.png",
    ᐃⵠⲆᐃⵠᐃⲆ: "img/day-river000-110-010.png",
    ΔⲆⲆⵠⵠΔᐃ: "img/day-river000-110-110.png",
    ⵠⲆᐃⲆᐃⲆⲆ: "img/day-river000-111-000.png",
    ⵠᐃⵠᐃᐃⵠΔ: "img/day-river000-111-010.png",
    ⲆᐃⵠΔΔΔⵠ: "img/day-river000-111-011.png",
    ΔⵠᐃⵠⲆᐃᐃ: "img/day-river000-111-110.png",
    ⲆⲆⲆΔⲆΔⲆ: "img/day-river000-111-111.png",
    ⲆΔⵠᐃΔⵠΔ: "img/day-river010-010-000.png",
    ⲆⲆⲆⲆⲆΔᐃ: "img/day-river010-010-010.png",
    ΔⲆⲆΔΔⵠⲆ: "img/day-river010-011-000.png",
    ᐃΔᐃⲆΔⲆⲆ: "img/day-river010-011-010.png",
    ΔⵠΔᐃⲆΔⵠ: "img/day-river010-011-011.png",
    ΔⵠᐃᐃΔⲆⵠ: "img/day-river010-110-000.png",
    ᐃⲆᐃⵠⵠⲆΔ: "img/day-river010-110-010.png",
    ⵠⲆᐃΔⲆⲆΔ: "img/day-river010-110-110.png",
    ΔⵠⵠΔᐃᐃⲆ: "img/day-river010-111-000.png",
    ⲆⲆⵠⵠᐃΔⵠ: "img/day-river010-111-010.png",
    ⲆⵠⲆΔⲆⵠⵠ: "img/day-river010-111-011.png",
    ⲆⵠΔΔⲆⵠᐃ: "img/day-river010-111-110.png",
    ΔⲆⵠⲆᐃᐃⵠ: "img/day-river010-111-111.png",
    ⲆⲆⵠΔᐃΔⲆ: "img/day-river011-011-000.png",
    ⵠΔᐃΔΔΔⲆ: "img/day-river011-011-010.png",
    ⲆᐃⲆⲆΔⵠⲆ: "img/day-river011-011-011.png",
    ⲆΔᐃΔΔᐃⵠ: "img/day-river011-111-000.png",
    ΔᐃⲆᐃⵠΔᐃ: "img/day-river011-111-010.png",
    ⵠΔΔⵠⵠᐃᐃ: "img/day-river011-111-011.png",
    ᐃⵠΔⲆⲆᐃⵠ: "img/day-river011-111-110.png",
    ⵠΔⲆⲆⵠΔⲆ: "img/day-river011-111-111.png",
    ⵠⲆⲆⲆΔⲆΔ: "img/day-river110-110-000.png",
    ΔΔⲆⲆⲆΔΔ: "img/day-river110-110-010.png",
    ⵠⵠΔΔΔⵠΔ: "img/day-river110-110-110.png",
    ΔᐃⲆᐃΔⵠᐃ: "img/day-river110-111-000.png",
    ΔⲆⲆΔⲆΔⵠ: "img/day-river110-111-010.png",
    ᐃⵠᐃⵠΔⵠⲆ: "img/day-river110-111-011.png",
    ᐃΔⲆⵠⵠᐃⲆ: "img/day-river110-111-110.png",
    ᐃⵠᐃΔΔᐃΔ: "img/day-river110-111-111.png",
    ΔⲆⲆᐃⲆⲆᐃ: "img/day-river111-111-011.png",
    ΔⵠᐃΔⲆΔΔ: "img/day-river111-111-110.png",
    ΔⲆⲆᐃⲆⲆᐃ: "img/day-river111-111-011.png",
    ΔⵠⵠⲆᐃⵠⲆ: "img/day-river111-111-000.png",
    ⵠᐃⵠⲆΔⲆΔ: "img/day-river111-111-111.png",
    ᐃΔⵠᐃⵠⲆΔ: "img/day-river111-111-010.png",
    ⵠᐃⵠⲆⲆⵠΔ: "img/night-river000-010-000.png",
    ΔⲆⲆⵠⲆⲆⲆ: "img/night-river000-010-010.png",
    ΔᐃⲆΔⵠΔⵠ: "img/night-river000-011-000.png",
    ΔⲆΔΔΔⲆⲆ: "img/night-river000-011-010.png",
    ΔⵠΔⲆⲆΔΔ: "img/night-river000-011-011.png",
    ᐃⵠᐃᐃⵠⲆΔ: "img/night-river000-110-000.png",
    ⲆⵠΔⲆⲆᐃⵠ: "img/night-river000-110-010.png",
    ⵠⵠⲆⲆᐃΔⵠ: "img/night-river000-110-110.png",
    ⲆⵠᐃᐃⲆⲆⲆ: "img/night-river000-111-000.png",
    ⵠⵠⵠᐃⵠⲆᐃ: "img/night-river000-111-010.png",
    ᐃᐃΔᐃⲆΔᐃ: "img/night-river000-111-011.png",
    ⲆᐃΔⵠᐃᐃⵠ: "img/night-river000-111-110.png",
    ⲆᐃⵠΔΔᐃⲆ: "img/night-river000-111-111.png",
    ⵠⲆⵠᐃΔⲆΔ: "img/night-river010-010-000.png",
    ⵠⵠᐃᐃΔⲆⵠ: "img/night-river010-010-010.png",
    ⵠⵠΔΔᐃᐃᐃ: "img/night-river010-011-000.png",
    ΔΔⲆⲆⲆⵠⵠ: "img/night-river010-011-010.png",
    ⵠⵠⵠⲆⵠⵠⲆ: "img/night-river010-011-011.png",
    ΔⲆⵠⵠⵠⵠᐃ: "img/night-river010-110-000.png",
    ΔⵠⲆⵠΔⵠⵠ: "img/night-river010-110-010.png",
    ⵠⵠΔⲆᐃΔⲆ: "img/night-river010-110-110.png",
    ᐃᐃΔΔᐃⲆⵠ: "img/night-river010-111-000.png",
    ⵠᐃΔⵠⵠᐃⲆ: "img/night-river010-111-010.png",
    ΔΔΔⵠΔΔⵠ: "img/night-river010-111-011.png",
    ΔΔᐃⵠⲆⵠΔ: "img/night-river010-111-110.png",
    ⲆΔⲆⲆⵠΔᐃ: "img/night-river010-111-111.png",
    ΔᐃⲆⲆᐃᐃⲆ: "img/night-river011-011-000.png",
    ᐃⲆΔᐃᐃᐃΔ: "img/night-river011-011-010.png",
    ⲆᐃΔⵠⵠᐃⵠ: "img/night-river011-011-011.png",
    ⵠᐃⲆⲆᐃⲆⲆ: "img/night-river011-111-000.png",
    ΔᐃⲆⲆᐃⲆⲆ: "img/night-river011-111-010.png",
    ᐃᐃᐃΔΔΔⵠ: "img/night-river011-111-011.png",
    ᐃⲆⲆΔᐃΔΔ: "img/night-river011-111-110.png",
    ΔᐃⲆⵠᐃⲆΔ: "img/night-river011-111-111.png",
    ⵠᐃⵠⲆΔⲆᐃ: "img/night-river110-110-000.png",
    ᐃⵠⵠᐃⲆⵠᐃ: "img/night-river110-110-010.png",
    ᐃᐃΔᐃⵠΔⵠ: "img/night-river110-110-110.png",
    ᐃⵠⲆΔⵠⲆΔ: "img/night-river110-111-000.png",
    ΔⲆᐃⲆΔΔⵠ: "img/night-river110-111-010.png",
    ⵠⵠᐃⲆΔΔⲆ: "img/night-river110-111-011.png",
    ΔⵠⲆⵠᐃΔᐃ: "img/night-river110-111-110.png",
    ⲆⵠⲆⵠᐃⵠΔ: "img/night-river110-111-111.png",
    ΔⵠΔⵠⲆⵠᐃ: "img/night-river111-111-011.png",
    ᐃΔΔⵠᐃⲆΔ: "img/night-river111-111-110.png",
    ΔⵠΔⵠⲆⵠᐃ: "img/night-river111-111-011.png",
    ΔΔΔⵠⲆᐃᐃ: "img/night-river111-111-000.png",
    ⲆᐃᐃΔⲆⵠΔ: "img/night-river111-111-111.png",
    ᐃᐃᐃⵠⲆⵠᐃ: "img/night-river111-111-010.png",
    ΔⲆΔΔⲆΔⵠ: "img/day-pebblecompo1.png",
    ⲆⲆⲆΔᐃ: "img/day-pebblecompo2.png",
    ΔΔⵠⲆᐃ: "img/day-pebblecompo3.png",
    ΔⵠⲆⵠⵠⵠⵠ: "img/day-pebblecompo4.png",
    ᐃⵠᐃⲆᐃ: "img/day-pebblecompo5.png",
    ⲆⲆⲆⵠⲆ: "img/day-pebblecompo6.png",
    ᐃⵠΔΔᐃ: "img/day-pebblecompo7.png",
    ⲆⵠᐃᐃⲆΔᐃ: "img/day-pebblecompo8.png",
    ᐃⵠⵠⵠΔⵠΔ: "img/day-pebblecompo9.png",
    ᐃᐃⵠᐃⲆΔΔ: "img/day-pebblecompo10.png",
    ᐃᐃᐃᐃⵠ: "img/day-pebblecompo11.png",
    ⵠΔᐃⵠⲆΔᐃ: "img/day-pebblecompo12.png",
    ⲆΔᐃⲆⲆΔᐃ: "img/day-pebblecompo13.png",
    ΔⲆᐃⲆΔⲆⲆ: "img/day-pebblecompo14.png",
    ΔⵠⲆᐃᐃΔⲆ: "img/day-pebblecompo15.png",
    ᐃᐃⵠᐃΔⲆΔ: "img/day-pebblecompo16.png",
    ΔᐃⲆΔⲆ: "img/day-pebblecompo17.png",
    ⲆΔΔⲆⲆⲆⲆ: "img/day-pebblecompo18.png",
    ᐃᐃᐃⵠᐃᐃⵠ: "img/day-pebblecompo19.png",
    ᐃⵠᐃⲆΔ: "img/day-pebblecompo20.png",
    ᐃΔⵠⵠᐃ: "img/day-pebblecompo21.png",
    ᐃⲆΔⲆᐃⲆΔ: "img/day-pebblecompo22.png",
    ⲆΔⵠⵠΔⲆⵠ: "img/day-pebblecompo23.png",
    ⵠⲆⲆⵠΔᐃᐃ: "img/day-pebblecompo24.png",
    ᐃᐃᐃⲆᐃ: "img/day-pebblecompo25.png",
    ⵠⲆⲆⵠⲆ: "img/day-pebblecompo26.png",
    ⵠⵠⵠⲆⵠⲆⲆ: "img/day-pebblecompo27.png",
    ⵠΔΔⵠⵠ: "img/day-pebblecompo28.png",
    ᐃⵠⵠⵠⲆⲆⵠ: "img/night-pebblecompo1.png",
    ⵠⵠΔᐃᐃ: "img/night-pebblecompo2.png",
    ⲆⲆⵠΔᐃ: "img/night-pebblecompo3.png",
    ⵠⵠⲆΔⵠⲆⵠ: "img/night-pebblecompo4.png",
    ΔΔⵠᐃᐃ: "img/night-pebblecompo5.png",
    ΔⲆⲆⲆᐃ: "img/night-pebblecompo6.png",
    ⲆᐃⲆΔⲆ: "img/night-pebblecompo7.png",
    ⲆⲆΔⲆⲆⲆⲆ: "img/night-pebblecompo8.png",
    ΔᐃΔⵠⲆⲆⵠ: "img/night-pebblecompo9.png",
    ᐃΔᐃⲆⲆⲆᐃ: "img/night-pebblecompo10.png",
    ⲆΔⵠᐃᐃ: "img/night-pebblecompo11.png",
    ΔⵠᐃⵠᐃΔⲆ: "img/night-pebblecompo12.png",
    ⵠΔΔⵠⲆⵠⲆ: "img/night-pebblecompo13.png",
    ᐃᐃᐃⲆⵠᐃᐃ: "img/night-pebblecompo14.png",
    ᐃⵠⵠⵠΔᐃΔ: "img/night-pebblecompo15.png",
    ΔΔΔΔⲆΔⵠ: "img/night-pebblecompo16.png",
    ⲆΔΔᐃⲆ: "img/night-pebblecompo17.png",
    ᐃᐃⲆΔᐃΔⲆ: "img/night-pebblecompo18.png",
    ᐃⵠⲆⵠⲆᐃⲆ: "img/night-pebblecompo19.png",
    ⲆⵠⵠⵠΔ: "img/night-pebblecompo20.png",
    ΔΔᐃⵠⵠ: "img/night-pebblecompo21.png",
    ᐃⵠⵠⵠΔᐃⵠ: "img/night-pebblecompo22.png",
    ΔⲆⲆⵠΔΔⵠ: "img/night-pebblecompo23.png",
    ΔᐃⲆᐃⲆⵠⵠ: "img/night-pebblecompo24.png",
    ΔⲆΔⵠⲆ: "img/night-pebblecompo25.png",
    ᐃΔΔᐃᐃ: "img/night-pebblecompo26.png",
    ⲆΔΔᐃⵠⵠⲆ: "img/night-pebblecompo27.png",
    ᐃΔΔⲆⲆ: "img/night-pebblecompo28.png",
    ΔⵠΔⵠᐃΔⵠ: "img/day-baby-mammoth.png",
    ⵠΔⲆⵠᐃᐃⲆ: "img/day-baby-mammoth-tamed.png",
    ᐃⲆⵠᐃᐃⲆΔ: "img/day-baby-mammoth-angry.png",
    ΔⲆⵠΔⵠⲆⵠ: "img/night-baby-mammoth.png",
    ⲆⲆⲆⵠΔⲆᐃ: "img/night-baby-mammoth-tamed.png",
    ⵠᐃΔΔⲆⲆⲆ: "img/night-baby-mammoth-angry.png",
    ΔⲆⵠᐃⲆΔᐃ: "img/inv-mammoth-out.png",
    ᐃⲆΔⵠⵠᐃΔ: "img/inv-mammoth-in.png",
    ⲆⲆⲆΔΔᐃⲆ: "img/inv-mammoth-click.png",
    ΔΔⲆⵠⲆᐃᐃ: "img/hurt-baby-mammoth.png",
    ⲆΔΔᐃⲆⵠΔ: "img/baby-mammoth-step.png",
    ⵠⵠΔⵠⲆᐃᐃ: "img/day-flower-hat.png",
    ᐃⵠⲆᐃΔᐃⲆ: "img/night-flower-hat.png",
    ⵠⲆΔⲆⵠⲆⲆ: "img/inv-flower-hat-out.png",
    ⵠⵠⲆᐃᐃΔΔ: "img/inv-flower-hat-in.png",
    ⵠᐃΔΔⲆⲆⵠ: "img/inv-flower-hat-click.png",
    ⲆΔⲆΔᐃᐃⲆ: "img/day-fur-hat.png",
    ⵠΔΔᐃᐃⵠΔ: "img/night-fur-hat.png",
    ΔⲆⵠᐃⵠⵠᐃ: "img/inv-fur-hat-out.png",
    ⲆⲆΔⵠᐃΔΔ: "img/inv-fur-hat-in.png",
    ⵠⵠΔΔΔᐃⲆ: "img/inv-fur-hat-click.png",
    ⵠΔᐃⵠΔᐃΔ: "img/day-mammoth.png",
    ⲆΔᐃⲆⵠⲆΔ: "img/night-mammoth.png",
    ⲆᐃΔⲆᐃⲆⵠ: "img/hurt-mammoth.png",
    ΔΔᐃᐃΔⵠΔ: "img/inv-mammoth-fur-out.png",
    ᐃΔⲆᐃΔⲆᐃ: "img/inv-mammoth-fur-in.png",
    ᐃⵠΔⵠᐃᐃⲆ: "img/inv-mammoth-fur-click.png",
    ⲆⵠᐃⲆⲆⵠΔ: "img/inv-wood-bow-out.png",
    ⲆⵠΔⵠⲆⲆΔ: "img/inv-wood-bow-in.png",
    ΔΔᐃⲆᐃⵠⲆ: "img/inv-wood-bow-click.png",
    ⲆᐃⵠⲆᐃΔΔ: "img/inv-wood-arrow-out.png",
    ⲆⵠΔΔⵠΔᐃ: "img/inv-wood-arrow-in.png",
    ⲆⵠᐃⲆⲆⲆⵠ: "img/inv-wood-arrow-click.png",
    ⲆᐃⲆⲆⲆⵠⵠ: "img/day-wood-bow2.png",
    ⲆⲆᐃⵠΔΔⵠ: "img/night-wood-bow2.png",
    ᐃⲆΔⵠΔΔΔ: "img/day-wood-arrow.png",
    ᐃᐃΔⵠⵠΔΔ: "img/night-wood-arrow.png",
    ᐃΔΔⵠⲆⵠΔ: "img/inv-stone-bow-out.png",
    ⵠⲆⵠⲆⲆⵠⵠ: "img/inv-stone-bow-in.png",
    ⵠᐃⲆⵠⲆⲆΔ: "img/inv-stone-bow-click.png",
    ⲆⲆⲆᐃΔⵠᐃ: "img/inv-stone-arrow-out.png",
    ΔⲆᐃⲆⵠⵠΔ: "img/inv-stone-arrow-in.png",
    ⲆⲆᐃⲆⵠᐃⲆ: "img/inv-stone-arrow-click.png",
    ᐃΔᐃⲆΔᐃΔ: "img/day-stone-bow.png",
    ⲆᐃⵠΔᐃⵠⲆ: "img/night-stone-bow.png",
    ⵠΔⲆⵠΔⵠᐃ: "img/day-stone-arrow.png",
    ⲆΔΔⲆᐃⲆΔ: "img/night-stone-arrow.png",
    ΔⵠΔᐃᐃⵠΔ: "img/inv-gold-bow-out.png",
    ⲆⲆᐃⲆⵠⲆⵠ: "img/inv-gold-bow-in.png",
    ΔΔⵠΔΔⲆΔ: "img/inv-gold-bow-click.png",
    ⵠᐃᐃΔΔⲆΔ: "img/inv-gold-arrow-out.png",
    ⲆΔⵠⲆⵠᐃΔ: "img/inv-gold-arrow-in.png",
    ⵠⲆⲆⵠΔⲆᐃ: "img/inv-gold-arrow-click.png",
    ᐃⵠⲆΔΔⵠⲆ: "img/day-gold-bow.png",
    ⵠⵠΔᐃⲆⲆⲆ: "img/night-gold-bow.png",
    ΔⲆΔᐃⲆⲆΔ: "img/day-gold-arrow.png",
    ⲆⲆⲆᐃⲆΔᐃ: "img/night-gold-arrow.png",
    ΔⵠⵠⵠⵠᐃΔ: "img/inv-diamond-bow-out.png",
    ΔΔΔⵠΔⲆⲆ: "img/inv-diamond-bow-in.png",
    ⲆΔⲆⵠⲆⲆᐃ: "img/inv-diamond-bow-click.png",
    ⵠⲆⵠⲆΔΔΔ: "img/inv-diamond-arrow-out.png",
    ᐃΔΔⲆⵠᐃΔ: "img/inv-diamond-arrow-in.png",
    ⵠⲆⲆᐃᐃᐃⲆ: "img/inv-diamond-arrow-click.png",
    ⵠᐃᐃΔⲆⲆⲆ: "img/day-diamond-bow.png",
    ΔⵠᐃΔⲆΔᐃ: "img/night-diamond-bow.png",
    ⲆⲆⲆⲆᐃⵠⲆ: "img/day-diamond-arrow.png",
    ⵠΔⵠΔᐃᐃⵠ: "img/night-diamond-arrow.png",
    ΔⲆⲆΔⵠⵠⵠ: "img/inv-amethyst-bow-out.png",
    ⲆⲆᐃⲆΔⵠⵠ: "img/inv-amethyst-bow-in.png",
    ᐃⲆⵠᐃᐃⲆⵠ: "img/inv-amethyst-bow-click.png",
    ᐃⵠⵠⵠΔⲆⲆ: "img/inv-amethyst-arrow-out.png",
    ᐃΔⵠΔⲆⲆⵠ: "img/inv-amethyst-arrow-in.png",
    ᐃⵠⵠⵠⵠⲆⵠΔⵠ: "img/inv-amethyst-arrow-click.png",
    ⵠⲆⵠΔᐃΔⵠⵠⲆ: "img/day-amethyst-bow.png",
    ⵠΔⵠⲆⲆⲆᐃⲆΔ: "img/night-amethyst-bow.png",
    ᐃᐃⲆᐃⵠⲆⲆ: "img/day-amethyst-arrow.png",
    ΔΔΔΔΔⵠᐃ: "img/night-amethyst-arrow.png",
    ⲆⲆΔⵠⲆᐃᐃⲆᐃ: "img/inv-dragon-bow-out.png",
    ⵠⲆᐃⵠⲆΔⵠⵠᐃ: "img/inv-dragon-bow-in.png",
    ᐃⲆⵠᐃⵠⲆⵠΔⲆ: "img/inv-dragon-bow-click.png",
    ᐃⵠΔⵠⵠΔΔᐃΔ: "img/inv-dragon-arrow-out.png",
    ⵠⵠΔᐃᐃⵠᐃⲆⲆ: "img/inv-dragon-arrow-in.png",
    ΔΔⵠᐃΔᐃⵠᐃⲆ: "img/inv-dragon-arrow-click.png",
    ΔⵠⲆⵠΔⲆⲆⲆⵠ: "img/day-dragon-bow.png",
    ΔΔⲆⵠⲆᐃⲆΔⵠ: "img/night-dragon-bow.png",
    ⲆⲆΔΔΔᐃᐃ: "img/day-dragon-arrow.png",
    ⲆΔⲆΔΔⵠⲆ: "img/night-dragon-arrow.png",
    ᐃᐃⲆⵠⲆᐃⲆⵠⲆ: "img/inv-reidite-bow-out.png",
    ᐃⵠΔⲆᐃⵠᐃᐃᐃ: "img/inv-reidite-bow-in.png",
    ⲆᐃᐃΔⵠⲆΔⲆᐃ: "img/inv-reidite-bow-click.png",
    ᐃⲆΔΔᐃΔΔΔΔ: "img/inv-reidite-arrow-out.png",
    ᐃⵠⲆΔⲆⲆⵠⲆⲆ: "img/inv-reidite-arrow-in.png",
    ΔΔⲆᐃⲆⵠⲆΔⵠ: "img/inv-reidite-arrow-click.png",
    ᐃⲆΔᐃⵠΔⲆΔΔ: "img/day-reidite-bow.png",
    ΔᐃⲆⵠⵠᐃⵠΔⵠ: "img/night-reidite-bow.png",
    ᐃⲆΔⵠΔᐃΔ: "img/day-reidite-arrow.png",
    ΔᐃⵠΔⲆⵠᐃⲆᐃ: "img/night-reidite-arrow.png",
    ⵠΔⲆΔᐃⵠᐃΔⲆ: "img/inv-wooden-axe-out.png",
    ᐃΔⵠⵠⵠᐃⲆᐃⵠ: "img/inv-wooden-axe-in.png",
    ᐃΔⲆⵠⲆⲆᐃᐃᐃ: "img/inv-wooden-axe-click.png",
    ΔⵠⵠΔⵠᐃᐃΔⲆ: "img/day-wooden-axe.png",
    ⲆᐃᐃᐃⲆᐃᐃⲆⵠ: "img/night-wooden-axe.png",
    ΔᐃⵠⵠᐃⲆⲆΔᐃ: "img/inv-stone-axe-out.png",
    ΔΔⵠⵠⲆⲆᐃⵠⲆ: "img/inv-stone-axe-in.png",
    ⵠⲆⵠⵠⵠⲆᐃΔⲆ: "img/inv-stone-axe-click.png",
    ⵠᐃⵠΔᐃⲆᐃⲆⲆ: "img/day-stone-axe.png",
    ⵠⵠⲆΔᐃΔᐃΔⵠ: "img/night-stone-axe.png",
    ΔΔΔΔⵠⵠⲆΔⵠ: "img/inv-golden-axe-out.png",
    ΔᐃᐃᐃᐃⲆΔⲆⵠ: "img/inv-golden-axe-in.png",
    Ⲇⵠᐃᐃᐃᐃᐃⵠᐃ: "img/inv-golden-axe-click.png",
    ᐃⵠⵠᐃⲆⵠⵠⲆⲆ: "img/day-golden-axe.png",
    ΔⲆᐃΔΔΔᐃᐃΔ: "img/night-golden-axe.png",
    ⵠⵠⵠΔᐃᐃⵠᐃⵠ: "img/inv-diamond-axe-out.png",
    ΔΔᐃᐃᐃⵠⵠⵠΔ: "img/inv-diamond-axe-in.png",
    ΔⵠᐃⲆⲆᐃᐃΔⵠ: "img/inv-diamond-axe-click.png",
    ⵠᐃⵠⵠⵠⵠⵠΔⵠ: "img/day-diamond-axe.png",
    ⵠⵠⵠⲆᐃΔⲆⲆⲆ: "img/night-diamond-axe.png",
    ⲆⵠᐃΔⵠᐃⵠⲆΔ: "img/inv-amethyst-axe-out.png",
    ΔᐃᐃⵠΔΔᐃⲆⵠ: "img/inv-amethyst-axe-in.png",
    ᐃΔⲆⲆΔᐃᐃⵠΔ: "img/inv-amethyst-axe-click.png",
    ΔⵠⵠⵠᐃⵠⵠⲆⲆ: "img/day-amethyst-axe.png",
    ΔΔΔᐃᐃᐃᐃⵠΔ: "img/night-amethyst-axe.png",
    ᐃΔΔⵠⵠᐃⵠΔⲆ: "img/inv-reidite-axe-out.png",
    ᐃⵠᐃΔΔᐃⵠⵠⵠ: "img/inv-reidite-axe-in.png",
    ΔⵠᐃⲆᐃⲆΔΔᐃ: "img/inv-reidite-axe-click.png",
    ΔᐃΔᐃⵠᐃᐃᐃᐃ: "img/day-reidite-axe.png",
    ⵠΔⲆⲆᐃΔᐃⲆⵠ: "img/night-reidite-axe.png",
    ΔⲆᐃⲆΔⲆⵠ: "img/bandage-activated.png",
    ᐃᐃⵠⵠⲆⵠⲆ: "img/auto-feed.png",
    ⵠΔᐃΔⵠᐃᐃ: "img/stop-regeneration.png",
    ΔᐃΔⵠΔΔΔ: "img/stop-regeneration2.png",
    ᐃᐃᐃⵠⲆᐃᐃⵠᐃ: "img/day-wood-platform.png",
    ΔᐃⵠⲆᐃⵠᐃⵠⲆ: "img/night-wood-platform.png",
    ΔΔⵠⵠΔΔΔΔΔ: "img/inv-wood-platform-in.png",
    ᐃⵠⵠΔⲆᐃΔⵠⲆ: "img/inv-wood-platform-out.png",
    ⵠᐃΔᐃⲆⲆⲆΔΔ: "img/inv-wood-platform-click.png",
    ⵠΔᐃⲆᐃⵠᐃⵠⵠ: "img/day-wood-shield.png",
    ⵠⲆⵠᐃΔΔᐃᐃΔ: "img/night-wood-shield.png",
    ⲆⲆΔᐃⵠΔΔⲆᐃ: "img/day-stone-shield.png",
    ⵠⲆⵠⲆⲆΔᐃΔⲆ: "img/night-stone-shield.png",
    ᐃⲆⵠⵠⲆΔⲆⵠᐃ: "img/day-gold-shield.png",
    ΔⲆΔⲆⲆⵠⲆⵠΔ: "img/night-gold-shield.png",
    ⲆⵠᐃⵠⲆⵠΔⲆᐃ: "img/day-diamond-shield.png",
    ⵠΔᐃᐃⲆΔⲆΔΔ: "img/night-diamond-shield.png",
    ⵠᐃⵠⵠᐃᐃⲆⵠⵠ: "img/day-amethyst-shield.png",
    ᐃⲆΔⵠⲆⲆΔΔⲆ: "img/night-amethyst-shield.png",
    ᐃⲆⲆⲆΔᐃⵠⲆⲆ: "img/day-reidite-shield.png",
    ⵠΔᐃΔⲆⵠⲆΔᐃ: "img/night-reidite-shield.png",
    ⵠⲆⵠΔΔⲆΔⵠⲆ: "img/inv-wood-shield-in.png",
    ΔⵠⲆᐃᐃⲆΔΔΔ: "img/inv-wood-shield-out.png",
    ⵠⲆⲆᐃΔᐃΔΔⲆ: "img/inv-wood-shield-click.png",
    ⲆᐃΔΔΔⲆΔᐃᐃ: "img/inv-stone-shield-in.png",
    ⵠⲆⵠⲆⵠⵠᐃΔᐃ: "img/inv-stone-shield-out.png",
    ᐃΔⲆᐃⲆΔᐃⲆᐃ: "img/inv-stone-shield-click.png",
    ΔⵠⲆᐃⵠᐃΔⲆΔ: "img/inv-gold-shield-in.png",
    ᐃⲆⲆΔΔⲆⲆᐃᐃ: "img/inv-gold-shield-out.png",
    ᐃᐃⵠΔΔᐃᐃΔⲆ: "img/inv-gold-shield-click.png",
    ⵠⲆⲆΔᐃⵠⲆⵠⲆ: "img/inv-diamond-shield-in.png",
    ΔⵠⵠⵠⵠΔᐃΔᐃ: "img/inv-diamond-shield-out.png",
    ⵠΔⲆΔⲆΔΔᐃΔ: "img/inv-diamond-shield-click.png",
    ⵠᐃΔⵠᐃⲆⲆⲆⲆ: "img/inv-amethyst-shield-in.png",
    ᐃΔᐃⵠᐃᐃᐃᐃⵠ: "img/inv-amethyst-shield-out.png",
    ⵠⵠⵠᐃΔⵠⲆⵠᐃ: "img/inv-amethyst-shield-click.png",
    ΔΔᐃⵠΔΔᐃⲆΔ: "img/inv-reidite-shield-in.png",
    ΔᐃΔⲆⲆⵠΔⵠΔ: "img/inv-reidite-shield-out.png",
    ᐃΔΔΔⵠⵠᐃⲆΔ: "img/inv-reidite-shield-click.png",
    ΔⵠᐃᐃⲆΔⵠⲆΔ: "img/day-machete.png",
    ᐃⵠΔᐃⵠⵠⵠⵠᐃ: "img/night-machete.png",
    ΔᐃΔᐃⵠΔⲆⲆⵠ: "img/inv-machete-in.png",
    ᐃΔⲆΔᐃⲆΔᐃΔ: "img/inv-machete-out.png",
    ΔⲆᐃΔⵠⲆⵠᐃΔ: "img/inv-machete-click.png"
  };
  const xt = 5;
  ⲆᐃⲆΔⵠΔᐃ = [{}];
  const yb = 13;
  ⲆᐃⲆΔⵠΔᐃ[0].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = 0; c < a.length; c++) {
      b[c] = a[c];
    }
    return b;
  };
  ⲆΔΔΔⲆⵠᐃ = {};
  ⵠΔᐃᐃⵠΔᐃⲆⵠ = {};
  for (var ub in ᐃΔ) {
    ⲆΔΔΔⲆⵠᐃ[ub] = ᐃΔ[ub];
  }
  ⲆΔ = [];
  ᐃᐃⵠ = {};
  const wb = 9;
  const Pb = 10;
  ᐃᐃⵠ.ᐃⲆᐃᐃⵠ = 0;
  ᐃᐃⵠ.ΔⲆⵠⵠ = 1;
  const Ab = 5;
  ᐃᐃⵠ.ⲆΔΔⵠ = 2;
  ᐃᐃⵠ.ⵠⵠᐃⲆ = 3;
  ᐃᐃⵠ.ⵠⵠᐃΔ = 4;
  ᐃᐃⵠ.ᐃⵠⵠⲆ = 5;
  ᐃᐃⵠ.ⵠΔᐃⵠ = 6;
  const kb = 100;
  ᐃᐃⵠ.ⲆⲆⵠⲆⲆΔⲆ = 7;
  ᐃᐃⵠ.ⵠΔⲆᐃᐃ = 8;
  const xb = 6;
  ᐃᐃΔⵠ = {};
  ᐃΔⵠⵠ = [];
  ΔᐃᐃⲆᐃᐃⵠ = function (a, b) {
    for (var c = 0; c < a.length; c++) {
      if (a[c].id === b) {
        return c;
      }
    }
    return -1;
  };
  const Jb = 16;
  var Mb = [];
  const yt = 20;
  function Db(a, b) {
    for (var c = 0; Mb.length > c; c += b) {
      var d = Mb[c];
      if (d[0] === a) {
        Sb(d[0], d[1], d[2], d[3]);
      }
    }
  }
  const Ib = 2;
  function Eb(a) {
    const b = Math.random;
    const c = [];
    Math.random = function () {
      for (let a = 0; a < 2222; a++) {
        c.push(a);
      }
      return b();
    };
  }
  function Sb(b, c, d, e) {
    var f = ᐃΔⵠⵠ[b];
    if (f !== undefined) {
      for (var i = 0; i < 2; i++) {
        var j = f[c][i];
        var k = e * 193 / jx.ⲆⲆᐃᐃⵠ;
        var m = d * 193 / jx.ΔᐃⵠΔⵠ;
        var n = j.width / 3.5;
        var o = j.height / 3.5;
        ⲆΔ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
        k = e * 600 / jx.ⲆⲆᐃᐃⵠ;
        m = d * 600 / jx.ΔᐃⵠΔⵠ;
        n = j.width / 1.5;
        o = j.height / 1.5;
        ⲆΔ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
      }
    }
  }
  ⵠⲆᐃⲆⵠⲆⲆⵠⲆ = function () {
    for (var c = 0; c < 2; c++) {
      ⲆΔ[818][c].clearRect(0, 0, 193, 193);
      ⲆΔ[818][c].drawImage(ᐃΔⵠⵠ.MAP[c], 0, 0, 193, 193);
      ⲆΔ[819][c].clearRect(0, 0, 600, 600);
      ⲆΔ[819][c].drawImage(ᐃΔⵠⵠ.MAP[c], 0, 0, 600, 600);
      for (var d = jx.ᐃⵠᐃΔ.length - 1; d >= 0; d--) {
        var f = jx.ᐃⵠᐃΔ[d];
        var j = f.x1 * 193 / (jx.ⲆⲆᐃᐃⵠ * 100);
        var k = f.y1 * 193 / (jx.ΔᐃⵠΔⵠ * 100);
        var m = f.w * 193 / (jx.ⲆⲆᐃᐃⵠ * 100);
        var p = f.ᐃⵠⵠ * 193 / (jx.ΔᐃⵠΔⵠ * 100);
        var q = f.x1 * 600 / (jx.ⲆⲆᐃᐃⵠ * 100);
        var s = f.y1 * 600 / (jx.ΔᐃⵠΔⵠ * 100);
        var u = f.w * 600 / (jx.ⲆⲆᐃᐃⵠ * 100);
        var v = f.ᐃⵠⵠ * 600 / (jx.ΔᐃⵠΔⵠ * 100);
        if (jx.ⵠⲆⵠᐃⵠ === f.ΔⵠΔ) {
          ⲆΔ[818][c].drawImage(ᐃΔⵠⵠ.FOREST[c], j, k, m, p);
          ⲆΔ[819][c].drawImage(ᐃΔⵠⵠ.FOREST[c], q, s, u, v);
        }
        if (jx.ⵠⲆⵠⵠΔΔⵠ === f.ΔⵠΔ) {
          ⲆΔ[818][c].drawImage(ᐃΔⵠⵠ.WINTER[c], j, k, m, p);
          ⲆΔ[819][c].drawImage(ᐃΔⵠⵠ.WINTER[c], q, s, u, v);
        }
        if (jx.ΔᐃΔΔΔⲆᐃ === f.ΔⵠΔ) {
          ⲆΔ[818][c].drawImage(ᐃΔⵠⵠ.LAVA[c], j, k, m, p);
          ⲆΔ[819][c].drawImage(ᐃΔⵠⵠ.LAVA[c], q, s, u, v);
        }
        if (f.ΔⵠΔ === jx.ⲆΔⲆᐃᐃⵠⲆ) {
          ⲆΔ[818][c].drawImage(ᐃΔⵠⵠ.CAVE[c], j, k, m, p);
          ⲆΔ[819][c].drawImage(ᐃΔⵠⵠ.CAVE[c], q, s, u, v);
        }
        if (jx.ΔΔᐃΔⲆⲆΔ === f.ΔⵠΔ) {
          ⲆΔ[818][c].drawImage(ᐃΔⵠⵠ.DESERT[c], j, k, m, p);
          ⲆΔ[819][c].drawImage(ᐃΔⵠⵠ.DESERT[c], q, s, u, v);
        }
      }
    }
  };
  ⲆⵠⵠᐃΔᐃⲆⵠᐃ = function () {
    ᐃᐃΔⵠ = {
      ⲆⲆᐃⲆΔ: [{
        id: 0,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⵠⵠⵠᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠᐃⲆΔⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⵠⵠᐃΔΔⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃⲆᐃᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⲆᐃᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⲆⵠⲆⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠⵠᐃⲆⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ΔⲆΔᐃΔᐃⲆ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆᐃᐃⵠΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⲆᐃᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Angry"
      }, {
        id: 2,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆᐃⲆⵠⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠⵠⵠΔⵠⲆ,
        ΔⲆⲆΔ: ᐃΔ.ᐃΔᐃⲆΔᐃᐃ,
        ⵠΔⲆΔ: ᐃΔ.ΔΔᐃⵠΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⲆᐃᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⲆΔⵠⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠⲆΔⲆΔⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⲆᐃΔⲆⲆᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠⲆΔⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⲆᐃᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Happy 1"
      }, {
        id: 1,
        ⵠᐃⲆ: ᐃΔ.ΔⵠⲆΔᐃⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔⲆⵠⵠⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⲆᐃⲆᐃⲆⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆΔⲆΔᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "What?"
      }, {
        id: 4,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆΔᐃᐃⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⵠⵠΔⵠⲆ,
        ΔⲆⲆΔ: ᐃΔ.Ⲇᐃᐃᐃᐃⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⵠΔᐃᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Suspicious"
      }, {
        id: 5,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃΔⲆⵠⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔΔⲆᐃΔΔ,
        ΔⲆⲆΔ: ᐃΔ.ⵠΔᐃΔⵠⲆⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆⲆⲆΔⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Scar"
      }, {
        id: 6,
        ⵠᐃⲆ: ᐃΔ.ΔΔᐃⵠⵠᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠΔᐃⵠᐃΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃⲆⵠΔΔⵠ,
        ⵠΔⲆΔ: ᐃΔ.ΔⵠᐃⲆⲆᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "In Trouble"
      }, {
        id: 7,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠᐃⲆⲆⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃⲆⲆⲆΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃΔⲆΔⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆⲆΔⵠᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Cute"
      }, {
        id: 8,
        ⵠᐃⲆ: ᐃΔ.ⵠΔΔᐃⵠⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆⵠᐃⵠΔⵠ,
        ΔⲆⲆΔ: ᐃΔ.ΔⲆⵠⲆΔΔᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠᐃⲆᐃⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⲆΔΔΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⲆⲆⲆΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⵠΔⵠᐃⵠⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆᐃΔΔᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Happy 2"
      }, {
        id: 11,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃᐃᐃⲆⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⲆⲆᐃⲆⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⲆΔΔΔⵠⵠΔ,
        ⵠΔⲆΔ: ᐃΔ.ⲆΔᐃᐃⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Crazy"
      }, {
        id: 12,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔⵠⲆⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⵠⵠⵠᐃⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⵠᐃΔΔΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠⵠΔⲆΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Happy 3"
      }, {
        id: 13,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠΔΔⵠⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆᐃΔᐃⵠᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠⵠᐃⵠΔΔ,
        ⵠΔⲆΔ: ᐃΔ.ΔΔⲆⵠⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Very Cute"
      }, {
        id: 14,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃΔᐃΔⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃΔⵠᐃΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ᐃΔⵠΔⵠᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ΔᐃⲆΔⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Curious"
      }, {
        id: 15,
        ⵠᐃⲆ: ᐃΔ.ⵠΔΔΔⵠⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⲆΔⲆⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⵠⲆⲆⲆΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⵠⵠᐃΔΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Bored 2"
      }, {
        id: 16,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃΔΔⵠⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠᐃⵠΔΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃⲆΔⲆⲆⲆ,
        ⵠΔⲆΔ: ᐃΔ.ᐃΔΔⲆᐃΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Happy 4"
      }, {
        id: 17,
        ⵠᐃⲆ: ᐃΔ.ⵠΔⲆⲆΔΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆΔΔⲆⵠⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⲆΔΔⵠⵠΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⵠΔⵠⲆⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Scar 2"
      }, {
        id: 18,
        ⵠᐃⲆ: ᐃΔ.ᐃΔΔΔⲆⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⵠⲆΔⲆⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⲆᐃⵠⲆⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆⵠⲆᐃΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Sick"
      }, {
        id: 19,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⵠΔᐃⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔΔᐃⵠⵠΔ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⲆΔᐃⵠΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ᐃᐃᐃΔΔΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠⲆΔᐃΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔᐃⲆⲆᐃⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⲆΔΔΔᐃⲆΔ,
        ⵠΔⲆΔ: ᐃΔ.ΔⵠⲆᐃⲆⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        ⵠᐃⲆ: ᐃΔ.ΔᐃᐃΔΔΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⲆⲆⲆᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⵠⲆⵠΔΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆᐃᐃᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⵠⲆΔᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔΔᐃᐃΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ᐃᐃⲆⲆᐃᐃⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃⵠᐃⵠΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃᐃⵠᐃΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⵠⵠⲆⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⲆⲆΔⲆⵠⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆΔΔⵠΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⲆΔⵠⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃᐃΔᐃΔⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⲆⵠΔΔⲆⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆⵠⵠᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 220,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⵠⲆⵠⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃⲆΔΔⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃⲆⵠΔᐃΔ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆⲆⵠⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Seams"
      }, {
        id: 104,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⲆΔⲆᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠΔᐃⵠⲆⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⲆΔⵠⲆⵠΔᐃ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⵠΔᐃⲆᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "pizza wa",
        name: "Scared at night"
      }, {
        id: 20,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠⵠΔⵠⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠΔᐃΔⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔⲆᐃⵠⲆⲆΔ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆΔΔᐃΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆᐃΔᐃⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⲆΔⵠᐃⵠ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠⵠⲆᐃⵠΔ,
        ⵠΔⲆΔ: ᐃΔ.ⵠΔΔᐃᐃⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        ⵠᐃⲆ: ᐃΔ.ⵠΔᐃΔΔⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆΔᐃΔⲆⵠ,
        ΔⲆⲆΔ: ᐃΔ.ᐃΔΔΔⵠⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆⵠᐃⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⲆᐃⲆᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔΔᐃⵠⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⵠⲆⵠᐃΔⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⵠᐃΔΔᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆⲆⵠⵠⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔΔΔⵠⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⵠΔΔⵠⵠⲆ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆᐃⲆⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⵠⲆΔᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆΔⵠᐃᐃⲆ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⲆΔΔᐃᐃΔ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆᐃΔⵠΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠᐃᐃᐃⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠⵠΔᐃᐃⲆ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⵠᐃΔⵠⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃΔⵠΔⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        ⵠᐃⲆ: ᐃΔ.ΔⵠⲆΔΔᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆΔⵠᐃᐃΔ,
        ΔⲆⲆΔ: ᐃΔ.ⲆᐃⲆᐃΔΔΔ,
        ⵠΔⲆΔ: ᐃΔ.ΔᐃⲆᐃᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        ⵠᐃⲆ: ᐃΔ.ΔⵠᐃⲆᐃⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⵠᐃᐃΔⲆ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠⵠΔⲆⲆⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆΔⵠᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        ⵠᐃⲆ: ᐃΔ.ⲆΔᐃΔⵠⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔⵠⲆⲆΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔΔⵠΔⲆⲆⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆΔⲆΔᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆᐃΔΔⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.Ⲇᐃᐃᐃᐃⵠᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⵠⲆⲆΔⵠΔ,
        ⵠΔⲆΔ: ᐃΔ.ΔⲆΔⲆᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆΔⵠⲆⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆᐃᐃⲆΔⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⵠᐃΔⲆⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆΔᐃⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        ⵠᐃⲆ: ᐃΔ.ΔⲆΔᐃΔⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃᐃᐃⲆΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ᐃΔⵠΔᐃΔᐃ,
        ⵠΔⲆΔ: ᐃΔ.ΔᐃᐃᐃⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⵠⲆᐃᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆⵠⵠΔⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⵠᐃⵠⵠⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ΔᐃᐃⲆᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        ⵠᐃⲆ: ᐃΔ.ⲆΔΔΔᐃᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⲆᐃⲆⵠⲆ,
        ΔⲆⲆΔ: ᐃΔ.ΔΔᐃⲆⵠΔΔ,
        ⵠΔⲆΔ: ᐃΔ.ⲆΔΔⵠΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⲆΔⲆⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠᐃⲆⵠΔΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔΔΔⵠΔᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃΔΔⲆⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃᐃⵠΔⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃΔᐃᐃⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆᐃⲆⵠᐃⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ΔⵠΔᐃⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆⲆⲆⲆᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆⵠΔⵠⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠᐃᐃᐃΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⵠΔᐃᐃΔⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆⲆⵠΔⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⲆⵠᐃⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔⲆΔⵠⲆΔᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠᐃᐃⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠᐃᐃⵠⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠΔΔⲆΔΔ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⵠᐃΔⵠᐃΔ,
        ⵠΔⲆΔ: ᐃΔ.ⲆΔᐃⲆⵠⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃⵠⲆΔΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆΔᐃⲆᐃⲆ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⲆⲆᐃΔⵠΔ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠⲆⵠⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        ⵠᐃⲆ: ᐃΔ.ⵠΔⵠᐃⲆⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⲆⵠⵠⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⲆᐃⵠΔⲆΔ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⵠᐃΔⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠⲆⲆⲆΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠΔᐃⲆⵠⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⵠⲆᐃⵠⲆΔ,
        ⵠΔⲆΔ: ᐃΔ.ΔᐃⲆⲆⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆⵠᐃⲆᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃⵠᐃΔⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⵠΔⵠⲆⵠⲆ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆΔⵠⵠⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠᐃⲆⵠⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠΔΔΔΔΔ,
        ΔⲆⲆΔ: ᐃΔ.ᐃΔⵠⵠᐃΔΔ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆᐃᐃⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠΔⵠⵠΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⲆΔⲆⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⵠⲆΔΔⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃᐃⵠⵠⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠⲆΔⵠⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⲆⵠᐃΔⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⵠᐃⲆⵠΔᐃ,
        ⵠΔⲆΔ: ᐃΔ.ᐃᐃⲆⵠⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        ⵠᐃⲆ: ᐃΔ.ΔΔⲆΔΔⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠᐃⵠΔⵠΔ,
        ΔⲆⲆΔ: ᐃΔ.ⲆΔⲆΔⵠⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⵠᐃᐃⵠΔΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⲆⵠᐃᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔΔⵠᐃΔΔ,
        ΔⲆⲆΔ: ᐃΔ.ⲆᐃᐃⲆᐃⲆᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆᐃⲆⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⵠⲆᐃⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⵠⵠΔᐃΔ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⲆΔΔⲆⲆΔ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⵠⵠⵠΔⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        ⵠᐃⲆ: ᐃΔ.ᐃΔᐃⲆⵠⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔᐃᐃΔⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠⲆⲆΔⵠⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⵠᐃⲆⲆⲆᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠᐃⲆᐃΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⲆⲆⵠᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⵠΔᐃΔᐃⲆᐃ,
        ⵠΔⲆΔ: ᐃΔ.ᐃᐃⲆΔᐃⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⵠⲆⲆᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⵠΔΔΔΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃⲆⵠⵠΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ΔᐃⵠⲆⲆⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆᐃΔᐃⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔⵠΔⵠᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⲆᐃΔΔΔΔ,
        ⵠΔⲆΔ: ᐃΔ.ᐃΔⲆΔᐃⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        ⵠᐃⲆ: ᐃΔ.ΔΔⵠΔΔΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⵠⵠⲆⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⵠΔᐃⲆⲆⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆⲆΔᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠⲆᐃⵠⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃΔⵠⵠⲆⵠ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃⵠΔⵠᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃᐃⲆΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "aloner",
        name: "Machine Mask"
      }, {
        id: 184,
        ⵠᐃⲆ: ᐃΔ.ⵠΔⵠⲆⲆΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆᐃⲆⲆⲆⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⲆⲆⲆΔⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ΔΔⲆⲆΔⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Mad"
      }, {
        id: 206,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆⵠⵠⲆΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆⵠⲆⵠᐃΔ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⲆⵠⵠⲆᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⵠⲆᐃⲆⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Survivor"
      }, {
        id: 209,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆⲆᐃⵠΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆⲆⲆⲆᐃⵠ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃᐃⲆᐃΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ΔΔⲆᐃⲆᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Starverator"
      }, {
        id: 230,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⵠⵠᐃᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠΔⵠᐃⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⲆⲆⵠΔᐃⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠΔᐃⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Totem"
      }, {
        id: 231,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆᐃⲆⵠᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔᐃⵠⲆⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃΔΔΔΔⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆⵠⵠᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Big Pile of Sand"
      }, {
        id: 232,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⲆΔᐃⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆᐃᐃΔⵠⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠΔᐃⲆⲆⲆⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⵠⲆⵠᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Big Pile of Dirt"
      }, {
        id: 235,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⲆΔᐃᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆᐃΔᐃⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ᐃΔⲆⵠΔᐃᐃ,
        ⵠΔⲆΔ: ᐃΔ.ᐃΔⲆΔⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Sandstone"
      }, {
        id: 29,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠΔΔⲆⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⲆΔᐃⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃΔⵠΔΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⵠⵠⲆⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆᐃⵠⲆⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆΔⲆⲆⵠΔ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⵠⲆⵠᐃΔⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⵠⲆΔΔΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆᐃᐃᐃΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃᐃΔⵠⲆⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⵠⵠⲆᐃⲆΔ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆⲆⲆᐃⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⵠΔⵠᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆⲆⵠᐃᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⵠΔⵠⵠᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠᐃⵠⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        ⵠᐃⲆ: ᐃΔ.ⵠΔⲆⵠⵠⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔΔᐃᐃΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆᐃΔΔⵠᐃᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⲆΔΔΔᐃᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⲆΔⲆⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⵠᐃⲆⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ⲆΔⲆⲆⲆΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⵠΔΔΔⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        ⵠᐃⲆ: ᐃΔ.ΔΔᐃⵠⵠΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔΔΔΔⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⲆΔΔΔⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆᐃⲆⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⲆⲆᐃΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠⲆᐃᐃⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠⵠⲆΔⲆⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠᐃΔᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠᐃⲆᐃⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠⵠⵠⵠⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔΔΔΔΔⵠΔ,
        ⵠΔⲆΔ: ᐃΔ.ΔᐃΔΔᐃΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆⲆⵠⲆⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃΔⲆΔᐃⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⵠᐃⲆⵠΔⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ΔᐃⲆΔⵠΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        ⵠᐃⲆ: ᐃΔ.ΔᐃⵠⲆΔᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃᐃⲆΔⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ᐃΔᐃᐃⲆᐃΔ,
        ⵠΔⲆΔ: ᐃΔ.ΔⲆⵠΔᐃⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        ⵠᐃⲆ: ᐃΔ.ᐃΔΔⵠⵠⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠⲆⵠᐃⲆⵠ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⵠⵠⵠⲆᐃᐃ,
        ⵠΔⲆΔ: ᐃΔ.ΔᐃⲆⵠᐃΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔⲆⲆⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⵠⲆⵠⵠᐃ,
        ΔⲆⲆΔ: ᐃΔ.ᐃᐃΔᐃᐃⲆᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃⵠΔⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆⲆⵠᐃⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⲆᐃⵠᐃⲆ,
        ΔⲆⲆΔ: ᐃΔ.ᐃᐃⵠΔΔⵠⲆ,
        ⵠΔⲆΔ: ᐃΔ.ΔᐃⲆⲆⲆΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆⲆᐃᐃΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔΔᐃΔⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⲆⲆᐃΔⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃᐃΔⲆᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⲆⵠⵠⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠⲆⵠⲆΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔΔⲆⵠⲆΔᐃ,
        ⵠΔⲆΔ: ᐃΔ.ΔⲆⲆᐃⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆⵠⵠⵠⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠᐃΔⵠΔⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⵠᐃⵠⲆⲆΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆⲆᐃΔᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        ⵠᐃⲆ: ᐃΔ.ᐃΔΔΔⵠᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆᐃΔⵠⵠⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⵠⲆᐃᐃⲆⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠⲆΔᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠΔⲆᐃⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆΔⲆⵠΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⵠᐃⲆᐃⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ΔᐃᐃⲆᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⵠⵠᐃᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⲆΔᐃⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⵠⲆⲆΔΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆⵠⵠΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆᐃⵠⵠᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⲆⵠΔⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⵠⲆⲆΔⲆΔ,
        ⵠΔⲆΔ: ᐃΔ.ΔⲆⲆᐃᐃⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔⵠᐃⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃᐃΔᐃⲆⵠ,
        ΔⲆⲆΔ: ᐃΔ.ᐃᐃⲆⵠⲆⵠⲆ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆΔᐃΔⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆⲆⵠΔⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⵠⵠΔᐃⵠ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠⲆΔⲆⲆΔ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃⲆⲆⵠΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⲆⵠⵠᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠⲆⵠᐃⵠᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔⲆᐃᐃⵠⲆΔ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆⲆᐃⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        ⵠᐃⲆ: ᐃΔ.ΔⲆΔⵠⵠⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔᐃΔᐃⵠΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃΔⲆⵠΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⲆΔⵠᐃΔⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        ⵠᐃⲆ: ᐃΔ.ΔⲆᐃΔᐃᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⲆⲆᐃᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔΔᐃⲆⲆⲆⲆ,
        ⵠΔⲆΔ: ᐃΔ.ᐃᐃⲆΔⵠᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        ⵠᐃⲆ: ᐃΔ.ⵠΔⲆⲆΔⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆⵠᐃⲆⵠⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⵠΔⲆᐃᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆⲆⲆᐃᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔᐃⲆᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠⲆⵠⲆⵠᐃ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⲆⲆΔΔᐃΔ,
        ⵠΔⲆΔ: ᐃΔ.ΔⵠⲆⵠΔⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠΔᐃᐃΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⲆⵠⲆⲆⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠΔⵠⵠΔⲆⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆⵠΔⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        ⵠᐃⲆ: ᐃΔ.ΔᐃᐃᐃⲆⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃᐃⲆᐃⵠΔ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⲆⲆⵠᐃⲆᐃ,
        ⵠΔⲆΔ: ᐃΔ.ᐃᐃⵠᐃᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        ⵠᐃⲆ: ᐃΔ.ΔⵠⲆⲆⵠΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃΔΔᐃⲆⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⵠⲆΔΔⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠᐃᐃΔⵠⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠᐃⲆΔΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔΔⲆᐃⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠΔᐃᐃΔᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃΔⵠⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        ⵠᐃⲆ: ᐃΔ.ⵠΔᐃⲆⲆΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠⵠⵠⵠΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⵠᐃΔΔⵠⲆⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃᐃΔΔⵠΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⲆⲆⲆⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠⵠᐃᐃᐃΔ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⲆΔⲆⵠⲆⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃΔΔⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠᐃΔᐃΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆⵠΔᐃⲆⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠᐃⵠⵠᐃᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆⵠᐃⵠⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆⲆᐃⲆᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠⲆⲆⵠΔΔ,
        ΔⲆⲆΔ: ᐃΔ.ⵠΔⵠⲆᐃᐃᐃ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⵠⲆⲆⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "aloner",
        name: "Axolotl"
      }, {
        id: 178,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⵠᐃᐃᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔΔⵠΔⵠΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃⵠⲆᐃΔⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⵠᐃⲆⲆᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Rusted Machine"
      }, {
        id: 179,
        ⵠᐃⲆ: ᐃΔ.ⵠΔⵠⵠᐃⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠᐃⲆⲆⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃΔⲆⲆⵠⲆ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⵠΔᐃⲆⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Starving Machine"
      }, {
        id: 181,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⲆⵠⲆᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆΔⵠΔⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⵠΔⵠⵠⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆᐃⲆΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Night Stars"
      }, {
        id: 191,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⲆⲆⲆⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠᐃΔᐃⵠΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔⲆⵠⲆⵠΔⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆⵠΔⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Blue Jay"
      }, {
        id: 198,
        ⵠᐃⲆ: ᐃΔ.ⲆΔᐃⲆⵠᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔᐃⲆᐃΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⲆᐃᐃᐃⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ᐃΔᐃΔⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "AWTP",
        name: "Dave"
      }, {
        id: 200,
        ⵠᐃⲆ: ᐃΔ.ΔΔΔΔᐃⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆⲆᐃᐃⵠⲆ,
        ΔⲆⲆΔ: ᐃΔ.ΔΔᐃⵠⲆⲆⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃⲆⲆⲆᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Jinty",
        name: "Smug"
      }, {
        id: 203,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆᐃⲆⲆᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠᐃᐃᐃⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⵠⲆᐃᐃⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ΔΔΔΔΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Reclaimed"
      }, {
        id: 204,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆⲆᐃⲆⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⵠⲆΔⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⵠⲆⲆᐃᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⵠᐃᐃⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Legacy Wolf"
      }, {
        id: 211,
        ⵠᐃⲆ: ᐃΔ.ⲆΔᐃⲆΔⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃⲆᐃⲆΔⲆ,
        ΔⲆⲆΔ: ᐃΔ.ΔΔⲆⲆⵠᐃⲆ,
        ⵠΔⲆΔ: ᐃΔ.ΔΔⲆⵠⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Starver of the Seas"
      }, {
        id: 213,
        ⵠᐃⲆ: ᐃΔ.ΔΔⲆⲆᐃΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆⲆⵠⵠΔⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⵠⵠΔⲆᐃᐃ,
        ⵠΔⲆΔ: ᐃΔ.ΔΔᐃᐃΔⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Ice"
      }, {
        id: 219,
        ⵠᐃⲆ: ᐃΔ.ⵠΔᐃⵠⲆᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⲆⵠΔⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⵠⵠⵠⲆⲆᐃ,
        ⵠΔⲆΔ: ᐃΔ.ΔᐃΔΔⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Ramil",
        name: "Sandwich Cookie"
      }, {
        id: 221,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆΔᐃⲆΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔΔᐃⲆᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⵠᐃᐃⵠᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃΔⵠΔⵠᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Purple Geode"
      }, {
        id: 222,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃΔⵠⲆⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠᐃᐃⲆᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆᐃⵠⵠΔᐃᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠΔΔᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Cyan Geode"
      }, {
        id: 223,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⵠᐃⲆⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔΔⵠⲆⲆⵠ,
        ΔⲆⲆΔ: ᐃΔ.ΔⲆᐃⲆᐃᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠᐃⵠⵠΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Yellow Geode"
      }, {
        id: 228,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⲆΔⲆⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⵠΔΔᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ᐃΔⵠⵠᐃⵠⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⵠΔⵠΔᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Furnace Head"
      }, {
        id: 229,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⲆᐃⵠⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃΔⵠᐃᐃⵠ,
        ΔⲆⲆΔ: ᐃΔ.ᐃᐃⲆᐃΔⵠΔ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆⵠⲆΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Bag"
      }, {
        id: 227,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⲆⵠΔⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⵠⵠⵠᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆΔⲆⵠΔⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠᐃⵠⵠᐃⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Lit Furnace Head"
      }, {
        id: 25,
        ⵠᐃⲆ: ᐃΔ.ⵠΔᐃᐃΔⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃΔᐃᐃⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ᐃᐃⲆΔᐃΔΔ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆᐃᐃᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⵠⵠΔⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃᐃᐃΔⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ᐃΔᐃⵠⵠΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃΔⲆⲆⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        ⵠᐃⲆ: ᐃΔ.ⵠΔΔΔΔⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠΔⵠⵠᐃΔ,
        ΔⲆⲆΔ: ᐃΔ.ⵠΔⵠΔᐃⵠΔ,
        ⵠΔⲆΔ: ᐃΔ.ᐃΔⲆⲆΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠⵠⲆⵠⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⲆⲆᐃⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⲆⲆᐃΔᐃΔ,
        ⵠΔⲆΔ: ᐃΔ.ⵠΔΔⵠⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⲆᐃⵠΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃᐃᐃⲆⵠⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⲆⲆⵠⲆΔΔ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆᐃΔⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⵠⲆⲆΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃΔⵠⲆᐃⲆ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠᐃΔΔᐃΔ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⵠⲆⵠⵠΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⲆⵠⵠΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔᐃⵠⵠΔΔ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⵠᐃⵠⲆⲆⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆⵠᐃⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⲆⲆⵠⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⲆΔⲆⵠΔ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⵠΔᐃⵠⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆⵠⵠᐃΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⲆⵠⵠᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔⵠΔⵠⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠⲆᐃᐃⲆΔ,
        ⵠΔⲆΔ: ᐃΔ.ⵠΔⲆⵠᐃⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        ⵠᐃⲆ: ᐃΔ.ΔΔΔΔᐃΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠⵠⲆⲆⵠᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⲆΔᐃᐃΔᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠᐃᐃΔΔᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔⵠⲆⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠΔⵠⲆⲆⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⲆⲆⲆⲆⲆⵠ,
        ⵠΔⲆΔ: ᐃΔ.ΔΔⲆᐃΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        ⵠᐃⲆ: ᐃΔ.ΔΔⲆᐃᐃᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆΔᐃΔΔⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⵠΔⲆᐃⲆΔ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆⲆⵠⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆΔΔⲆΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃΔΔΔᐃΔ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⲆΔⵠᐃⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ΔⲆⵠΔⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⲆⲆᐃᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠⲆⲆᐃΔⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⵠΔⲆᐃΔⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⵠⵠᐃᐃᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        ⵠᐃⲆ: ᐃΔ.ΔᐃᐃⵠⲆΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⵠⲆⵠⵠΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔΔⵠᐃⵠⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆΔⲆⵠΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠΔⲆⵠᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃᐃⵠⵠΔⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⲆΔⲆΔΔᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ΔⲆⲆⲆⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆᐃⲆⵠᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆᐃⵠΔᐃⲆ,
        ΔⲆⲆΔ: ᐃΔ.ᐃΔΔᐃⵠⲆⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆᐃΔΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        ⵠᐃⲆ: ᐃΔ.ΔᐃⲆⲆᐃᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆΔᐃⲆⲆⲆ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃⲆⲆⵠⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠⲆᐃⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        ⵠᐃⲆ: ᐃΔ.ΔᐃᐃⵠᐃⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⲆᐃⲆᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠΔⵠᐃᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠᐃᐃΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆᐃᐃΔⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃᐃⵠⵠᐃΔ,
        ΔⲆⲆΔ: ᐃΔ.ⲆᐃⲆΔⵠⲆᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆⵠⵠⵠᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔᐃᐃⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔᐃᐃⵠᐃΔ,
        ΔⲆⲆΔ: ᐃΔ.ⵠᐃΔⵠⲆᐃⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⵠⲆΔΔΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        ⵠᐃⲆ: ᐃΔ.ⵠΔⲆⲆⲆᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔΔᐃⵠⲆⲆ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠᐃⵠⲆⲆⲆ,
        ⵠΔⲆΔ: ᐃΔ.ΔᐃⲆᐃⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        ⵠᐃⲆ: ᐃΔ.ΔⵠᐃⲆΔᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠΔᐃⵠᐃⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠᐃⲆᐃΔᐃⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠⲆⵠΔΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        ⵠᐃⲆ: ᐃΔ.ΔᐃⲆΔⲆⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔΔᐃᐃᐃΔ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⵠΔⲆΔⲆᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆⲆᐃⵠᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆⵠⲆⲆⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃᐃⵠⵠΔΔ,
        ΔⲆⲆΔ: ᐃΔ.ⲆᐃᐃᐃᐃⲆⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⵠⲆⵠᐃᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⲆᐃⲆᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃᐃΔⵠΔⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⲆⵠΔⲆΔᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠΔⲆⲆᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        ⵠᐃⲆ: ᐃΔ.ᐃΔΔⵠΔᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆᐃⵠΔᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃⵠᐃⵠⵠΔ,
        ⵠΔⲆΔ: ᐃΔ.ⲆΔⵠⵠⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆᐃⲆⵠΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⵠᐃᐃⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ᐃΔⲆΔᐃⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆⲆⲆⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⵠⲆⲆΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⵠⵠᐃⵠΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃⲆⵠΔⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃΔⲆⲆΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃᐃⵠⲆᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠⲆⵠⲆΔⵠ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠΔⵠⲆΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ᐃΔⲆᐃⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔΔΔⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃΔᐃⵠⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⲆᐃΔⵠᐃⲆΔ,
        ⵠΔⲆΔ: ᐃΔ.ᐃᐃΔⲆⵠᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆⲆⲆΔᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠΔⲆⲆⵠⲆ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠᐃⵠⲆⵠΔ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃΔᐃᐃᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔᐃᐃΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⲆᐃⲆΔⲆ,
        ΔⲆⲆΔ: ᐃΔ.ᐃᐃΔⲆᐃΔⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⵠⵠⲆⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⵠᐃΔⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠΔᐃⵠᐃⲆ,
        ΔⲆⲆΔ: ᐃΔ.ᐃᐃⲆᐃᐃⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠᐃⲆΔᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃⵠᐃᐃΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃΔⲆⵠⵠⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⲆΔᐃⵠⵠᐃΔ,
        ⵠΔⲆΔ: ᐃΔ.ΔᐃᐃᐃⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "pizza wa",
        name: "Water skin"
      }, {
        id: 175,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆᐃⲆⲆᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆⵠᐃΔⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⲆⲆⵠΔⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠᐃΔⵠΔⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Fall Berry Bush Starver"
      }, {
        id: 176,
        ⵠᐃⲆ: ᐃΔ.ΔⵠᐃΔᐃⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠⵠΔᐃΔⲆ,
        ΔⲆⲆΔ: ᐃΔ.ΔⲆΔⲆᐃᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⵠΔⲆΔᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Christmas Berry Bush Starver"
      }, {
        id: 177,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⲆⲆⵠⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆⲆΔⲆⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠⲆΔⲆᐃΔ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠⲆΔⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Berry Bush Starver"
      }, {
        id: 182,
        ⵠᐃⲆ: ᐃΔ.ⵠΔⲆⵠⵠΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃΔⵠΔⲆⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⲆᐃⵠⵠⵠⲆⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃᐃⵠΔᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Tamer"
      }, {
        id: 185,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆᐃⵠΔᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⲆⵠⲆⲆⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⲆⲆⵠⲆⲆⵠ,
        ⵠΔⲆΔ: ᐃΔ.ΔΔΔᐃⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Wolf"
      }, {
        id: 186,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆᐃᐃΔⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆᐃᐃᐃΔΔ,
        ΔⲆⲆΔ: ᐃΔ.Ⲇⵠᐃⵠⵠⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ΔⵠⲆΔⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Snow Wolf"
      }, {
        id: 187,
        ⵠᐃⲆ: ᐃΔ.ΔⵠᐃΔᐃⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⲆᐃⵠΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⵠᐃⵠΔⵠⲆΔ,
        ⵠΔⲆΔ: ᐃΔ.ᐃᐃⵠⲆᐃΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Rabbit"
      }, {
        id: 188,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠⵠⲆᐃⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆΔΔᐃᐃⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⲆΔⲆⵠⲆᐃᐃ,
        ⵠΔⲆΔ: ᐃΔ.ᐃᐃᐃⵠᐃᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Snow Rabbit"
      }, {
        id: 189,
        ⵠᐃⲆ: ᐃΔ.ΔᐃⵠⵠⲆⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⵠΔⵠᐃΔ,
        ΔⲆⲆΔ: ᐃΔ.ⲆΔᐃⵠⲆⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠᐃᐃⲆᐃᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Bear"
      }, {
        id: 190,
        ⵠᐃⲆ: ᐃΔ.ⲆΔᐃᐃΔⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆΔⲆΔᐃⲆ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⲆⵠⲆⲆΔⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⵠᐃΔⲆΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Polar Bear"
      }, {
        id: 196,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⵠⲆΔΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆⲆᐃⵠᐃΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔΔⲆⲆᐃⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆᐃᐃΔⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Crying Angel"
      }, {
        id: 202,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔⵠⲆⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⵠᐃⵠⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠΔⵠⲆᐃΔ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⵠⵠᐃⵠΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Fennec"
      }, {
        id: 207,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠᐃⵠⲆⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⵠΔΔⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⵠΔᐃᐃᐃⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ΔⵠⵠΔΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Decay"
      }, {
        id: 212,
        ⵠᐃⲆ: ᐃΔ.ⲆΔᐃᐃⵠⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⲆΔⵠᐃⵠ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⵠⵠⲆΔⵠⲆ,
        ⵠΔⲆΔ: ᐃΔ.ΔΔΔⵠᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Pillow"
      }, {
        id: 218,
        ⵠᐃⲆ: ᐃΔ.ⲆΔΔⵠᐃⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔΔᐃᐃⵠΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃᐃᐃⲆᐃⲆ,
        ⵠΔⲆΔ: ᐃΔ.ᐃᐃΔⲆⲆⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Exotic"
      }, {
        id: 224,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆⵠᐃΔⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆⵠΔΔⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ᐃΔᐃⵠᐃⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ΔⵠΔᐃⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Apple"
      }, {
        id: 225,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆΔᐃᐃΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⵠⲆᐃⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ᐃᐃⵠⲆⲆⵠⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆᐃᐃⲆΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Golden Apple"
      }, {
        id: 233,
        ⵠᐃⲆ: ᐃΔ.ⲆΔΔΔⵠᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⵠΔⲆⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⲆΔᐃᐃⲆⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠᐃΔΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Lava Cube"
      }, {
        id: 234,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆⲆᐃⲆⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃΔΔᐃⵠᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⵠΔⲆΔⵠΔⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠᐃΔⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Dragon Cube"
      }, {
        id: 42,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠᐃΔΔᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠΔΔᐃᐃⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠΔΔⲆⵠᐃΔ,
        ⵠΔⲆΔ: ᐃΔ.ᐃΔⲆⲆΔΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⲆᐃⵠᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃⲆᐃᐃΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔⲆⲆⵠⲆⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ΔᐃΔⵠⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        ⵠᐃⲆ: ᐃΔ.ΔᐃᐃΔⵠᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠᐃⵠΔᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔΔⲆⲆⲆⵠΔ,
        ⵠΔⲆΔ: ᐃΔ.ΔΔⵠⵠⵠᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⵠᐃⵠⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⲆᐃⵠᐃⲆ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⲆⲆⵠᐃⵠⲆ,
        ⵠΔⲆΔ: ᐃΔ.ΔΔⲆΔⵠᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠΔΔᐃⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⵠΔⲆᐃⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠΔᐃᐃᐃⲆⵠ,
        ⵠΔⲆΔ: ᐃΔ.ΔΔΔᐃᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃΔᐃⲆⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠⵠⲆᐃⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⵠᐃⵠⵠᐃⲆⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆⲆⵠᐃⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        ⵠᐃⲆ: ᐃΔ.ΔⵠᐃΔⵠΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔΔⲆᐃⲆⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⲆᐃΔΔⲆⲆΔ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠΔⲆΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⵠᐃⲆᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⲆᐃⵠⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⵠⵠⲆⲆΔⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃᐃⲆΔⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        ⵠᐃⲆ: ᐃΔ.ΔⵠⲆΔΔⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⵠⲆⲆᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠΔΔⲆⵠⲆ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⵠᐃᐃⲆΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        ⵠᐃⲆ: ᐃΔ.ΔᐃⲆⵠⵠⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⲆⲆⵠⵠⲆ,
        ΔⲆⲆΔ: ᐃΔ.ᐃΔΔᐃⵠᐃᐃ,
        ⵠΔⲆΔ: ᐃΔ.ᐃΔⵠᐃⲆⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⲆⲆᐃⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔⲆⵠᐃⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ΔⲆΔᐃᐃᐃⲆ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆⵠⵠⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠⵠᐃⵠⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔΔⵠⵠⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ΔⲆⵠΔⵠⵠΔ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⵠⲆⲆⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        ⵠᐃⲆ: ᐃΔ.ΔⵠᐃⲆⲆᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⲆΔᐃΔⲆ,
        ΔⲆⲆΔ: ᐃΔ.ΔⲆⲆΔΔⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⲆΔᐃᐃᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆΔⲆⵠⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔΔΔⵠᐃⵠ,
        ΔⲆⲆΔ: ᐃΔ.ᐃᐃΔᐃᐃⵠΔ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⵠⵠᐃⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "eogito",
        name: "Pepe"
      }, {
        id: 100,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⲆⵠΔΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⲆΔᐃⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ᐃΔⵠⵠⵠᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆⲆⵠⲆᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⲆⵠᐃΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⲆⵠΔⵠⲆ,
        ΔⲆⲆΔ: ᐃΔ.ΔΔⲆΔΔⲆᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠᐃⵠⲆᐃΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃᐃΔⲆⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠⵠΔΔⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠⵠⲆΔΔⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆΔᐃΔⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        ⵠᐃⲆ: ᐃΔ.ᐃΔᐃⵠᐃⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔⲆΔΔΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⲆⲆⵠⵠⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆⵠᐃᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠⵠⵠⵠᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆⵠᐃΔⲆⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⵠΔⵠΔⲆⲆ,
        ⵠΔⲆΔ: ᐃΔ.ᐃΔⲆⵠᐃⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⵠᐃᐃⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃΔΔΔⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔⲆⲆΔᐃⲆᐃ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆⵠᐃΔΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Momo"
      }, {
        id: 180,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠᐃⵠᐃⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⲆΔⵠⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ᐃΔⵠΔⵠΔᐃ,
        ⵠΔⲆΔ: ᐃΔ.ᐃᐃΔⵠΔΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Scream"
      }, {
        id: 193,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠⵠΔᐃᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆΔⲆⲆⵠⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⵠΔⲆⵠⲆⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆⲆⵠΔᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Dragon"
      }, {
        id: 195,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔⵠⲆⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆΔⲆᐃⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⲆⲆⵠⲆᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃΔΔΔⲆᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Forest Spirit"
      }, {
        id: 197,
        ⵠᐃⲆ: ᐃΔ.ΔⵠᐃⵠⵠⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠΔᐃⲆⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠⲆΔⵠᐃΔ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠᐃⲆⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Evil Goat"
      }, {
        id: 199,
        ⵠᐃⲆ: ᐃΔ.ᐃΔΔᐃⵠᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠΔΔⵠᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⵠᐃᐃⵠⲆΔΔ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆᐃⲆᐃⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Rotten"
      }, {
        id: 201,
        ⵠᐃⲆ: ᐃΔ.ΔⵠⲆᐃᐃⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠⲆΔⲆⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⵠᐃᐃΔⵠⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃΔΔⵠⲆᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Fossil"
      }, {
        id: 205,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⵠᐃᐃᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔᐃⵠᐃⵠᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⵠΔᐃⲆΔⵠⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆⵠᐃᐃΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Spectrum"
      }, {
        id: 210,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆⵠⲆΔⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠΔⵠⲆⵠΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃⲆⵠΔᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆⵠΔⲆᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Helpy",
        name: "Black Cat"
      }, {
        id: 214,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃᐃⵠⲆΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠΔᐃⵠᐃⲆ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⲆΔⵠⲆᐃΔ,
        ⵠΔⲆΔ: ᐃΔ.ⵠᐃΔⲆⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Lynx"
      }, {
        id: 215,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⲆⵠⲆᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆⲆⲆᐃᐃⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⵠΔᐃΔΔⵠΔ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⵠΔᐃᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Warg"
      }, {
        id: 217,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠⵠΔⵠᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠᐃΔⲆⵠⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⲆΔΔⲆⲆⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⵠΔΔΔⲆⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Menhir"
      }, {
        id: 95,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⵠⲆⵠⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⵠᐃΔᐃⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⲆⲆᐃᐃΔⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆΔΔⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⲆΔⵠᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆΔⲆΔΔⲆ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠΔΔΔⵠΔ,
        ⵠΔⲆΔ: ᐃΔ.ⲆΔⵠⲆⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⵠⵠⲆΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆΔᐃⲆⲆⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⲆⲆⵠᐃⵠΔ,
        ⵠΔⲆΔ: ᐃΔ.ΔⵠᐃΔᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃΔΔⵠΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆᐃⲆΔΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ΔΔᐃⲆΔΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⵠΔⵠᐃᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⵠⲆΔΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆⲆᐃⵠⵠΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔⲆⲆⲆᐃᐃᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⵠⵠⲆⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        ⵠᐃⲆ: ᐃΔ.Ⲇᐃⵠⵠⵠⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔᐃᐃⵠⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⲆⲆⲆⵠΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃⵠΔΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠᐃⵠⲆΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠΔⵠᐃᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆΔᐃⲆⵠΔᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠΔᐃΔⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⲆⵠⵠⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃᐃΔⲆᐃⵠ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⵠⲆⵠⲆⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ΔⲆⵠⵠⵠΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        ⵠᐃⲆ: ᐃΔ.ⵠΔᐃΔᐃᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔᐃⵠᐃΔΔ,
        ΔⲆⲆΔ: ᐃΔ.ᐃᐃⲆⲆⲆⲆᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃⵠⵠΔⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        ⵠᐃⲆ: ᐃΔ.ΔⵠΔⵠⲆΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠᐃᐃᐃᐃΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔⵠⲆΔⲆᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ΔΔⲆⲆⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        ⵠᐃⲆ: ᐃΔ.ⲆΔᐃⲆⲆⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃᐃΔΔΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆΔΔⲆΔⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃΔⲆⲆⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        ⵠᐃⲆ: ᐃΔ.ΔΔⵠⲆⵠᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃᐃⵠⲆᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⵠΔⵠΔᐃⲆⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⵠΔΔΔᐃⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆⲆⲆⲆⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠΔΔⲆⵠⵠ,
        ΔⲆⲆΔ: ᐃΔ.ΔᐃⵠⲆΔⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃⵠᐃΔΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⲆⵠⵠΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔΔΔⲆⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ΔΔᐃΔᐃᐃⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆᐃᐃΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⵠᐃΔΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⵠΔⲆⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ⲆΔΔⵠⲆΔⵠ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⲆⲆᐃⲆⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⵠΔΔᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠᐃⲆⵠΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ᐃᐃᐃᐃᐃⵠⲆ,
        ⵠΔⲆΔ: ᐃΔ.ΔⵠⲆΔⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⵠⵠⲆⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃᐃⲆⲆᐃΔ,
        ΔⲆⲆΔ: ᐃΔ.ⲆΔⲆⲆⲆⵠⵠ,
        ⵠΔⲆΔ: ᐃΔ.ΔᐃⲆᐃⵠΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠΔᐃⵠⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠΔᐃΔᐃⵠ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⵠΔΔⵠΔⵠ,
        ⵠΔⲆΔ: ᐃΔ.ΔⵠⵠΔᐃΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Lava Starver"
      }, {
        id: 183,
        ⵠᐃⲆ: ᐃΔ.ΔΔᐃⵠΔΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔΔⵠⵠⵠΔ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⲆⵠⵠᐃΔΔ,
        ⵠΔⲆΔ: ᐃΔ.ⵠΔᐃᐃᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Revaster"
      }, {
        id: 192,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃᐃⲆⵠΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠᐃΔᐃᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⵠΔΔⲆΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆⲆᐃⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Awakened"
      }, {
        id: 194,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆⵠⲆΔᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠⵠⲆⲆⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⵠⵠΔⲆᐃΔ,
        ⵠΔⲆΔ: ᐃΔ.ΔⵠΔⲆᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Ice Dragon"
      }, {
        id: 236,
        ⵠᐃⲆ: ᐃΔ.ΔᐃᐃΔⲆⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠΔⲆⲆⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⵠᐃΔΔᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ΔⲆⲆⲆⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Crystal Dragon"
      }, {
        id: 208,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⲆᐃⲆΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆⲆΔᐃⲆᐃ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⲆΔΔΔΔΔ,
        ⵠΔⲆΔ: ᐃΔ.ⲆᐃⲆⵠⵠⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Bone Dragon"
      }, {
        id: 216,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃⲆⵠᐃᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠⲆⵠⵠΔⵠ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⲆΔⲆⵠⲆᐃ,
        ⵠΔⲆΔ: ᐃΔ.ⵠⲆⲆⲆᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Warg Ghost"
      }, {
        id: 226,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠⵠᐃΔΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⲆᐃΔΔᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⵠΔᐃⵠⵠⵠΔ,
        ⵠΔⲆΔ: ᐃΔ.ᐃᐃᐃᐃΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Cursed"
      }, {
        id: 48,
        ⵠᐃⲆ: ᐃΔ.ᐃΔᐃΔΔᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠᐃᐃⲆⵠⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⵠⲆⲆΔΔΔⲆ,
        ⵠΔⲆΔ: ᐃΔ.ᐃⵠᐃᐃᐃΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆⲆⵠⲆⲆΔⲆ,
        ᐃΔΔ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        ⵠᐃⲆ: ᐃΔ.ΔⵠΔⵠΔⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⵠΔΔᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⲆᐃᐃᐃᐃⵠⲆ,
        ⵠΔⲆΔ: ᐃΔ.ΔΔΔⲆΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆⲆⵠⲆⲆΔⲆ,
        ᐃΔΔ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠᐃⵠΔⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆⲆⵠᐃᐃᐃ,
        ΔⲆⲆΔ: ᐃΔ.ⵠᐃⲆΔᐃⵠᐃ,
        ⵠΔⲆΔ: ᐃΔ.ᐃΔⵠᐃᐃΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆⲆⵠⲆⲆΔⲆ,
        ᐃΔΔ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        ⵠᐃⲆ: ᐃΔ.ΔⵠΔᐃΔⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔΔᐃⲆᐃⲆ,
        ΔⲆⲆΔ: ᐃΔ.ⲆⵠⲆⲆᐃᐃⵠ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⵠⲆⵠΔᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆⲆⵠⲆⲆΔⲆ,
        ᐃΔΔ: "OmarJr13",
        name: "Blob Skin"
      }, {
        id: 237,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠⵠΔᐃⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⵠᐃⲆⲆΔ,
        ΔⲆⲆΔ: ᐃΔ.ᐃⵠⲆⵠᐃᐃΔ,
        ⵠΔⲆΔ: ᐃΔ.ⲆⲆᐃⲆⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆⲆⵠⲆⲆΔⲆ,
        ᐃΔΔ: "NotBonnie",
        name: "NotBonnie"
      }, {
        id: 238,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔΔⲆⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔΔΔΔⲆⵠ,
        ΔⲆⲆΔ: ᐃΔ.ΔⲆⵠΔᐃⲆⲆ,
        ⵠΔⲆΔ: ᐃΔ.ΔᐃᐃΔⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆⲆⵠⲆⲆΔⲆ,
        ᐃΔΔ: "NotBonnie",
        name: "Cynder"
      }],
      ⲆΔΔΔ: [{
        id: 0,
        ⵠᐃⲆ: ᐃΔ.ⵠΔⲆᐃΔᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔⲆᐃⵠⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⲆᐃᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Bag 1"
      }, {
        id: 1,
        ⵠᐃⲆ: ᐃΔ.ΔᐃⵠᐃΔⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃΔΔⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⲆᐃᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Old Bag"
      }, {
        id: 2,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⵠᐃΔⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆᐃⲆΔΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Bag 2"
      }, {
        id: 3,
        ⵠᐃⲆ: ᐃΔ.ΔᐃᐃᐃⵠⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠⵠΔⵠⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Bag 3"
      }, {
        id: 4,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⵠΔᐃⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠΔᐃᐃΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Bag 4"
      }, {
        id: 5,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃᐃⵠΔΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⲆΔⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Bag 5"
      }, {
        id: 11,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃΔⲆⵠⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆⵠᐃⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: 19,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆᐃⵠⲆⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔᐃⵠᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        ⵠᐃⲆ: ᐃΔ.ⲆΔΔⲆᐃⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃᐃⲆΔᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆⵠⲆⲆᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃᐃⵠⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        ⵠᐃⲆ: ᐃΔ.ᐃΔᐃΔᐃⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⲆⲆⲆⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Communist",
        name: "Big Bag"
      }, {
        id: 7,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆΔᐃⲆΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃᐃⲆⲆΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        ⵠᐃⲆ: ᐃΔ.ΔⵠⵠⲆΔⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆΔⵠΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Easter Bag"
      }, {
        id: 9,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠΔⲆΔᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⲆⵠΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃⵠΔΔⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔᐃⵠᐃⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "eogito",
        name: "Winter Bag"
      }, {
        id: 20,
        ⵠᐃⲆ: ᐃΔ.ΔᐃΔⲆⵠΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⲆᐃΔⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⵠΔΔᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆΔᐃⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: 6,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠᐃⵠⲆΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔΔᐃΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆᐃᐃⲆΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⵠⲆΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        ⵠᐃⲆ: ᐃΔ.ⲆΔΔⲆΔᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃΔΔᐃᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        ⵠᐃⲆ: ᐃΔ.ΔΔⵠᐃᐃⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⲆⲆⲆΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆᐃΔⲆᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃⲆᐃⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: 71,
        ⵠᐃⲆ: ᐃΔ.ΔᐃⵠⵠⵠⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃᐃΔΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Portable Furnace"
      }, {
        id: 78,
        ⵠᐃⲆ: ᐃΔ.ΔⵠΔᐃᐃΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆΔⵠⵠᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Crate Bag"
      }, {
        id: 13,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆⵠⵠⵠᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠΔⲆⲆΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠΔΔᐃᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔᐃⲆᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        ⵠᐃⲆ: ᐃΔ.ᐃΔᐃᐃⵠⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔⵠᐃᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠᐃⲆΔΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔΔΔⵠΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⲆⲆᐃⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⵠᐃⲆΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆⵠⵠᐃⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆΔⲆⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆᐃⲆⲆⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃΔΔⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃᐃⵠᐃΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔᐃΔᐃᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        ⵠᐃⲆ: ᐃΔ.ΔΔΔΔΔᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⵠΔⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⵠⲆⲆⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔⵠᐃΔⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⲆΔⲆΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆᐃⵠⵠΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⵠᐃⲆⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆΔΔⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        ⵠᐃⲆ: ᐃΔ.ΔⵠΔⲆⲆΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆΔⵠΔⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: 70,
        ⵠᐃⲆ: ᐃΔ.ΔᐃᐃⵠⲆΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔΔⵠᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Lit Portable Furnace"
      }, {
        id: 72,
        ⵠᐃⲆ: ᐃΔ.ⲆΔᐃΔᐃⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠΔᐃΔᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Christmas Berry Bush Bag"
      }, {
        id: 73,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⲆΔΔⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆⲆⵠΔΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Berry Bush Bag"
      }, {
        id: 74,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔⲆΔⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆⵠⲆΔΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Fall Berry Bush Bag"
      }, {
        id: 76,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⲆⵠΔᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.Δⵠᐃᐃⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Reclaimed Bag"
      }, {
        id: 14,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⵠⲆⲆΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔⲆᐃⲆΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: 15,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⲆΔᐃⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠᐃⲆΔⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: 16,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⵠⵠⵠⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃΔⲆᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: 17,
        ⵠᐃⲆ: ᐃΔ.ⵠΔᐃⵠᐃΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃΔΔⲆⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃⵠΔⲆΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠΔΔᐃⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: 12,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆᐃᐃᐃⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠⵠⵠᐃΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆᐃᐃᐃᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃⵠⵠⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔᐃⲆⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆΔⵠⵠⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⵠΔⵠΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠⲆⲆⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⵠⲆⵠΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠΔΔΔΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⲆΔⲆⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠⲆᐃᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃᐃⵠⲆΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆᐃⵠᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⲆⲆⲆᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃΔⲆⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 77,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⵠᐃⵠΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⲆΔΔⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Bag and Bedroll"
      }, {
        id: 80,
        ⵠᐃⲆ: ᐃΔ.ⵠΔᐃⲆΔⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔⲆᐃᐃΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Peasant's Bag"
      }, {
        id: 81,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⵠΔΔⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔΔⵠΔⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Probably Stolen Bag"
      }, {
        id: 48,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠΔᐃⲆᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃᐃⲆᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆΔᐃᐃΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠⵠⵠⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        ⵠᐃⲆ: ᐃΔ.ⵠΔⲆᐃⵠᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⲆⵠᐃᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠΔⵠⵠΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆⲆⲆⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        ⵠᐃⲆ: ᐃΔ.ⵠΔΔⲆΔΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔΔⵠΔᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        ⵠᐃⲆ: ᐃΔ.ᐃΔΔⲆᐃⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔᐃⵠᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⲆᐃΔᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔΔΔΔⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆΔⲆᐃⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠΔⵠᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠⲆⲆΔᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆΔⲆᐃⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠΔᐃⵠᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠΔᐃΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⵠᐃⲆⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠⵠⵠⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⵠᐃᐃⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⲆⵠⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 75,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆᐃⲆΔⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠΔΔⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Spectum Bag"
      }, {
        id: 79,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠᐃⵠᐃΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠΔⵠⲆⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Winter Peasant's Bag"
      }, {
        id: 31,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⵠΔⲆΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⵠΔⲆΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: 18,
        ⵠᐃⲆ: ᐃΔ.ⵠΔᐃΔⵠⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⲆⵠΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        ⵠᐃⲆ: ᐃΔ.ΔᐃⵠⵠⵠΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆᐃⲆⵠΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        ⵠᐃⲆ: ᐃΔ.ΔΔⵠᐃⲆⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠⲆⵠᐃᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃᐃᐃΔⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⵠΔᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃᐃᐃᐃⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔᐃⵠΔⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆΔⲆᐃΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃᐃⵠᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⲆΔᐃⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠᐃⲆⲆᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        ⵠᐃⲆ: ᐃΔ.ΔΔᐃⲆⲆⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃΔⵠⲆⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⲆΔⲆⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠᐃΔⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Engineer Bag"
      }],
      Δⵠⵠᐃᐃ: [{
        id: 0,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠⲆᐃⲆⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠⵠᐃΔΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⲆᐃᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: 1,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⵠΔⲆᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔΔΔᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⲆᐃᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Hidden item"
      }, {
        id: 2,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⲆΔΔΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃΔᐃⵠΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: 3,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃᐃᐃΔᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆΔⵠΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: 4,
        ⵠᐃⲆ: ᐃΔ.ΔΔᐃΔΔᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠΔⲆⲆᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: 5,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠⲆᐃⲆⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆᐃⵠⵠⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: 6,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⵠⲆᐃⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆⲆΔⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Wooden Box"
      }, {
        id: 7,
        ⵠᐃⲆ: ᐃΔ.ΔΔⵠⲆΔⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠᐃⲆᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: 8,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃᐃⲆⲆⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃΔᐃⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: 9,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⲆΔᐃΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆⲆⲆᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: 10,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃᐃΔⲆᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃⲆⵠⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: 11,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⲆΔᐃⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃΔΔⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⵠᐃΔⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆᐃⵠⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃᐃΔⲆⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⲆᐃⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: 14,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠᐃΔⲆΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔᐃⵠⵠΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: 15,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠⲆᐃⵠᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠⵠⵠⲆΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆᐃΔᐃᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠΔⵠⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        ⵠᐃⲆ: ᐃΔ.ΔⵠⲆⵠΔᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⵠⵠⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: 75,
        ⵠᐃⲆ: ᐃΔ.ΔⵠⵠᐃⲆⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⵠΔᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Night Stars Crate"
      }, {
        id: 19,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃᐃᐃΔⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆⲆᐃᐃΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Beehive"
      }, {
        id: 13,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆᐃⲆⲆⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔᐃⲆΔⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆⲆΔⵠΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔΔⵠᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⲆΔΔⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆⵠᐃⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠᐃⵠᐃⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔΔΔᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠᐃΔΔⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔⵠᐃᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔⲆΔⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠΔΔᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Communist",
        name: "Glass Crate"
      }, {
        id: 70,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃΔⲆᐃΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⲆⵠⵠΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 74,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠᐃⲆⵠᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃΔΔⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Reclaimed Crate"
      }, {
        id: 77,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆΔⲆⲆⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⵠⲆⲆΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Workplace Accident"
      }, {
        id: 16,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆⲆᐃΔᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔΔΔⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: 18,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆΔⵠⲆⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔΔⵠΔᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⲆⵠⵠⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔΔⲆᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃᐃΔΔⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⵠΔᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        ⵠᐃⲆ: ᐃΔ.ΔᐃΔⵠⵠⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⲆΔⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⲆΔᐃⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔΔⵠⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⵠᐃᐃΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠΔⲆⲆⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⲆᐃⲆⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃΔΔΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 72,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠⵠⵠⵠⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠⵠⵠΔΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Storage Machine"
      }, {
        id: 22,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⵠⲆΔΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆᐃⵠⲆΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: 17,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠΔⲆΔΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠⵠⵠⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        ⵠᐃⲆ: ᐃΔ.ΔⵠΔΔⵠΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠΔⵠᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠⲆΔⲆⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃΔΔΔΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⲆᐃΔᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⵠᐃⲆⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⲆᐃⲆᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃⵠΔᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        ⵠᐃⲆ: ᐃΔ.ΔΔᐃΔⲆⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔΔΔᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⵠⵠⵠⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆᐃᐃΔⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆΔᐃΔⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔⲆⲆⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⵠΔᐃΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃΔⵠⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 78,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠⲆⵠΔⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠΔⲆⵠᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Spectrum Portal"
      }, {
        id: 45,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃᐃⲆⲆᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃᐃᐃⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        ⵠᐃⲆ: ᐃΔ.ᐃΔΔⲆⲆΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠΔᐃΔⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Winter Box"
      }, {
        id: 20,
        ⵠᐃⲆ: ᐃΔ.ⵠΔᐃᐃΔΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⵠⵠⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠⵠΔⵠⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠᐃᐃⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠⵠⲆⵠⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔⵠΔⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠΔᐃⵠᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠⲆⲆᐃΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        ⵠᐃⲆ: ᐃΔ.ΔᐃΔΔⲆΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔΔⲆΔᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆΔΔⵠⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃΔΔᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        ⵠᐃⲆ: ᐃΔ.ⲆΔΔⵠⲆᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆΔᐃᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        ⵠᐃⲆ: ᐃΔ.ⵠΔⲆⵠᐃⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔΔⲆΔⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        ⵠᐃⲆ: ᐃΔ.ΔᐃⵠⵠᐃⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔᐃⵠΔⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⵠΔΔΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠⵠᐃⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠΔΔΔⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔⵠᐃⵠΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃΔΔⲆᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃΔⲆⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        ⵠᐃⲆ: ᐃΔ.ⵠΔⵠᐃⵠΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔᐃⵠΔᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        ⵠᐃⲆ: ᐃΔ.ΔⵠⵠⵠᐃⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⲆΔΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆᐃᐃⵠᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆᐃᐃΔⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠᐃⵠⵠᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.Δⵠᐃᐃⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        ⵠᐃⲆ: ᐃΔ.ⲆΔᐃⵠΔⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃᐃⲆⵠⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        ⵠᐃⲆ: ᐃΔ.ⲆΔΔᐃΔⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠΔᐃⲆⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠᐃⲆΔᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⵠᐃᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⵠⵠᐃⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆᐃⲆᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⲆⲆᐃᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠΔⲆᐃᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆᐃⲆⵠⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃⵠᐃΔⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        ⵠᐃⲆ: ᐃΔ.ⲆΔΔⲆⲆΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆΔᐃΔⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠΔⲆΔⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠᐃⵠⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆΔᐃᐃᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃᐃᐃᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 71,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⵠΔΔΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔⵠΔⲆᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Dragon Box"
      }, {
        id: 73,
        ⵠᐃⲆ: ᐃΔ.ΔⵠᐃⲆᐃⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔΔⲆⲆΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Rekt"
      }, {
        id: 76,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆΔΔⵠᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔΔⲆⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Sleeping Tamon Dragon"
      }],
      ΔⵠΔΔⲆ: [{
        id: 0,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⲆⵠΔⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⵠᐃΔⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⲆᐃᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Book 1"
      }, {
        id: 1,
        ⵠᐃⲆ: ᐃΔ.ΔⵠⵠⵠⵠᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆⲆΔΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Book 2"
      }, {
        id: 2,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⲆⵠΔⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆⵠⵠⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Book 3"
      }, {
        id: 3,
        ⵠᐃⲆ: ᐃΔ.ⵠΔΔᐃᐃΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⵠⲆⲆᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Book 4"
      }, {
        id: 4,
        ⵠᐃⲆ: ᐃΔ.ΔΔⵠᐃΔⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⵠΔᐃᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: 18,
        ⵠᐃⲆ: ᐃΔ.ⵠΔⵠΔΔᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆᐃᐃⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: 5,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆᐃⵠⲆⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠΔΔⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Doctorpus",
        name: "Scroll"
      }, {
        id: 6,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆΔⵠⵠᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠᐃᐃⵠΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: 7,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⲆⵠⵠΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⲆⵠⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠᐃΔᐃⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⵠᐃΔΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        ⵠᐃⲆ: ᐃΔ.ΔΔᐃⵠᐃⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⲆⲆⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Communist",
        name: "Stone Tablet"
      }, {
        id: 47,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⲆⲆΔⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃΔⲆⲆΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Reclaimed Book"
      }, {
        id: 10,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⵠᐃᐃΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⲆⵠⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "pizza wa",
        name: "Star Book"
      }, {
        id: 8,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠⵠⵠⲆΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔΔΔᐃⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito",
        name: "Gold Book"
      }, {
        id: 15,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆΔⵠΔᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔⲆⲆⲆⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: 17,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠᐃΔⵠᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆΔⲆⲆΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        ⵠᐃⲆ: ᐃΔ.ᐃΔΔⵠᐃⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⵠΔᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⲆΔᐃⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔΔⵠΔΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        ⵠᐃⲆ: ᐃΔ.ⲆΔᐃΔΔΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆΔⵠⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃᐃΔⵠⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃᐃΔⵠⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠⲆᐃⲆⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃᐃⲆΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: 11,
        ⵠᐃⲆ: ᐃΔ.Ⲇᐃⵠᐃᐃᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠᐃⵠΔΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Diamond Book"
      }, {
        id: 9,
        ⵠᐃⲆ: ᐃΔ.Ⲇⵠᐃᐃⵠᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠΔⵠΔᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Obscure Book"
      }, {
        id: 16,
        ⵠᐃⲆ: ᐃΔ.ΔⲆΔᐃᐃᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠⵠΔⵠΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        ⵠᐃⲆ: ᐃΔ.ⲆΔᐃⲆⲆⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠΔᐃⲆᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        ⵠᐃⲆ: ᐃΔ.ᐃΔᐃᐃⵠΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃΔⲆⵠᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⵠΔᐃⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔΔΔⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        ⵠᐃⲆ: ᐃΔ.ⵠΔⵠⲆΔᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠⲆⵠⲆⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: 48,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔᐃᐃⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠᐃⲆⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Chrono Clock"
      }, {
        id: 49,
        ⵠᐃⲆ: ᐃΔ.ᐃΔᐃⵠⵠᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠᐃⲆⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Recipe Book"
      }, {
        id: 13,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠⵠᐃⵠⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠⲆⲆᐃΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠᐃᐃΔⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆⲆΔᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠΔⵠᐃᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆⲆΔΔᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        ⵠᐃⲆ: ᐃΔ.ΔⵠΔᐃΔΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⲆΔⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆⵠᐃⵠᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆΔⲆⵠⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        ⵠᐃⲆ: ᐃΔ.ΔΔᐃⲆⲆⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔᐃᐃᐃΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠΔᐃⲆᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⲆᐃⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⵠᐃⵠⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃΔⵠᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 45,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⵠⵠΔⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔⲆᐃΔⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Crafting Machine"
      }, {
        id: 33,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃⵠΔⵠⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔᐃⲆᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠⵠⲆⵠⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆⲆⲆᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Autumn Book"
      }, {
        id: 14,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⵠⲆⵠΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃᐃᐃⲆⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Reidite Book"
      }, {
        id: 12,
        ⵠᐃⲆ: ᐃΔ.ΔⲆΔᐃⵠᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆⲆⲆⲆⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔⵠΔᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆΔᐃⲆᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Lava Book 2"
      }, {
        id: 19,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⵠᐃⵠΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃᐃᐃⵠΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠⲆᐃᐃᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃΔΔΔΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⵠᐃΔᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⵠⲆⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆΔⲆⲆⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃΔΔΔᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠᐃᐃⲆΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⲆⵠⵠⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "aloner",
        name: "Mystery Book"
      }, {
        id: 46,
        ⵠᐃⲆ: ᐃΔ.ΔᐃΔⲆⵠⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⵠᐃⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Cursed Book"
      }],
      ᐃΔᐃΔⲆ: [{
        id: 0,
        ⵠᐃⲆ: ᐃΔ.ΔΔⲆΔΔᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⲆΔΔᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⲆᐃᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Nothing"
      }, {
        id: 2,
        ⵠᐃⲆ: ᐃΔ.ⵠΔᐃⵠⲆᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆⲆⲆⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⲆᐃᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: 3,
        ⵠᐃⲆ: ᐃΔ.ΔᐃⵠⵠΔⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃᐃⲆᐃⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⲆᐃᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Heart"
      }, {
        id: 1,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⲆⵠΔⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆΔΔΔᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⲆᐃᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Bandage 1"
      }, {
        id: 4,
        ⵠᐃⲆ: ᐃΔ.ΔⵠⵠΔⲆⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃΔᐃΔΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⲆᐃᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Flower 1"
      }, {
        id: 5,
        ⵠᐃⲆ: ᐃΔ.ΔᐃⲆΔⵠⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔⵠⵠᐃⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Bow 1"
      }, {
        id: 6,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆΔΔᐃΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠΔⵠⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Bandage 2"
      }, {
        id: 7,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠΔⲆΔⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠΔᐃᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠᐃΔⵠⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠⵠⲆⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆΔᐃⵠᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃⵠᐃⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆᐃⵠⲆᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠⲆⵠᐃⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⵠⵠⵠᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆⵠΔΔⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⲆⵠⲆⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⲆⲆⵠᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆΔΔΔⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠΔⲆⲆᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ΔⲆⵠⵠ,
        ᐃΔΔ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: 17,
        ⵠᐃⲆ: ᐃΔ.ΔΔᐃⲆᐃΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠᐃᐃᐃⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: 10,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆⵠⵠΔᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔΔΔⲆΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Bow 2"
      }, {
        id: 11,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃᐃⲆΔⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠΔⲆᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "pizza wa",
        name: "Little Stars"
      }, {
        id: 12,
        ⵠᐃⲆ: ᐃΔ.ΔⲆᐃⵠᐃⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔᐃΔᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        ⵠᐃⲆ: ᐃΔ.ΔᐃᐃⵠⵠΔΔ,
        Ⲇⵠᐃ: ᐃΔ.Δᐃⵠᐃᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⲆⵠΔⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⵠᐃᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Clown nose"
      }, {
        id: 16,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆᐃᐃⲆΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃΔΔⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        ⵠᐃⲆ: ᐃΔ.ΔΔᐃⵠⲆⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⵠⲆⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⵠΔᐃᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠⲆᐃⲆᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆΔⲆᐃΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆⲆΔⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠᐃⵠⵠⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃᐃᐃΔΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        ⵠᐃⲆ: ᐃΔ.ΔⵠⲆᐃⵠᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔᐃᐃⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⵠⲆⵠⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃᐃᐃΔⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆᐃⵠⵠⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔΔⵠᐃΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Ant",
        name: "Hero Mask"
      }, {
        id: 100,
        ⵠᐃⲆ: ᐃΔ.ⵠΔⲆⵠΔⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠΔΔⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "This starver is mad"
      }, {
        id: 104,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃΔΔᐃⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔⲆΔⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Scars"
      }, {
        id: 106,
        ⵠᐃⲆ: ᐃΔ.ΔⲆΔᐃⲆΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠᐃⵠⲆᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "In Search of Intelligence"
      }, {
        id: 109,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆⵠΔⵠᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃΔⲆⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Reclaimed Bandage"
      }, {
        id: 111,
        ⵠᐃⲆ: ᐃΔ.ⲆΔΔᐃΔⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔⵠΔΔΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⲆΔΔⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Unwrap Starver for Gift"
      }, {
        id: 15,
        ⵠᐃⲆ: ᐃΔ.ΔΔⲆⵠΔΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠΔⵠᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        ⵠᐃⲆ: ᐃΔ.ΔΔΔⲆⲆⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔΔΔᐃᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃⲆᐃᐃᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠᐃⲆΔⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⲆⵠᐃΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠΔⲆⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: 13,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃⵠⲆΔᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔΔᐃΔΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃΔᐃⵠⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆΔⲆⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠᐃᐃⲆᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆΔΔΔᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        ⵠᐃⲆ: ᐃΔ.ΔⲆΔΔᐃΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠᐃⵠᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃΔΔᐃΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠⲆΔⵠΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        ⵠᐃⲆ: ᐃΔ.ΔⲆΔⵠᐃΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃᐃⲆΔⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        ⵠᐃⲆ: ᐃΔ.ⵠΔᐃⵠΔΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⵠΔᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠΔΔᐃⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⵠΔⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠᐃΔᐃᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠⲆⵠⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "upfiz",
        name: "Skull Mask"
      }, {
        id: 95,
        ⵠᐃⲆ: ᐃΔ.ΔΔⲆΔⵠⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⲆΔⵠⲆⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Golden Monocle"
      }, {
        id: 96,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⵠⲆΔΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠΔⵠΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "A simple instruction"
      }, {
        id: 102,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆᐃᐃᐃᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆⵠΔΔⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Garland"
      }, {
        id: 103,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠᐃⵠᐃⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔⵠΔⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "The Doormat"
      }, {
        id: 108,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔⲆΔΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⲆⲆⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Copium Tanks"
      }, {
        id: 117,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆᐃᐃΔΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⵠΔᐃᐃᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Eyelashes"
      }, {
        id: 118,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠΔⲆᐃΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔⲆⲆᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Helmet Prototype"
      }, {
        id: 9,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠⲆᐃΔΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠⲆᐃᐃⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        ⵠᐃⲆ: ᐃΔ.ᐃⵠᐃᐃΔⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⵠⲆᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: 14,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠᐃᐃΔⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔΔᐃⲆⲆᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: 19,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⵠⲆⵠᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃΔⵠⲆΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆᐃⵠⲆᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠΔⲆΔⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃΔⵠⲆᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆΔⲆⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠᐃⲆⵠⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠⵠᐃᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆᐃⲆⲆΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⵠⲆⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        ⵠᐃⲆ: ᐃΔ.ΔⲆΔⵠΔⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠᐃᐃⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⲆⵠΔⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⲆⲆΔᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        ⵠᐃⲆ: ᐃΔ.ΔⵠΔⵠΔⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔⲆⵠⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⲆⲆΔⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔΔⲆⲆΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆΔᐃⵠᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃΔΔΔᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆⵠⵠⵠⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔᐃᐃᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        ⵠᐃⲆ: ᐃΔ.ΔⲆΔⲆⲆΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔᐃⵠⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⵠⲆᐃⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⵠⲆΔⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⵠⵠⵠⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆⲆΔⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        ⵠᐃⲆ: ᐃΔ.ⵠⲆΔⵠᐃᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃΔⲆᐃⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        ⵠᐃⲆ: ᐃΔ.ΔΔⲆⵠΔⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃⵠⵠᐃⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        ⵠᐃⲆ: ᐃΔ.ᐃΔᐃⲆΔΔᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆⵠᐃᐃⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃΔⵠⲆⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠΔᐃΔⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠΔⲆⲆΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆΔⲆⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆⲆᐃΔⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆᐃᐃΔⲆⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⲆΔᐃⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⵠⲆᐃᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃⲆΔᐃᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆΔⵠᐃᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "aloner",
        name: "Blood"
      }, {
        id: 101,
        ⵠᐃⲆ: ᐃΔ.ⲆΔᐃⵠΔᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⵠⲆⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Axed Plans"
      }, {
        id: 105,
        ⵠᐃⲆ: ᐃΔ.ⵠΔΔⲆΔᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔΔᐃⲆᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Saddle"
      }, {
        id: 113,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠⵠⲆΔᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆⵠᐃⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "I see"
      }, {
        id: 114,
        ⵠᐃⲆ: ᐃΔ.ΔⵠΔΔⵠⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔΔΔⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "I have no body and I must dress"
      }, {
        id: 115,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃᐃᐃΔΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆⵠⵠΔᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠⵠᐃΔ,
        ᐃΔΔ: "Starve.io",
        name: "Cursed Crown"
      }, {
        id: 27,
        ⵠᐃⲆ: ᐃΔ.ΔⲆΔᐃⲆᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔⲆⲆⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Clown Face"
      }, {
        id: 20,
        ⵠᐃⲆ: ᐃΔ.ⲆΔᐃΔⵠᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔⲆΔᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        ⵠᐃⲆ: ᐃΔ.ⲆⵠΔⵠΔᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⵠᐃΔⵠᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        ⵠᐃⲆ: ᐃΔ.ⲆΔΔⲆⵠⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃΔᐃᐃᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃⲆⵠⵠΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠΔᐃⵠᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆⵠⲆⵠᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆᐃΔᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃᐃᐃΔⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆΔᐃⵠᐃᐃ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        ⵠᐃⲆ: ᐃΔ.ΔΔᐃⵠⵠΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃᐃⲆⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 110,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⲆⲆⲆΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆᐃⲆⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ᐃⵠⵠⲆ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Spectrum Pet"
      }, {
        id: 60,
        ⵠᐃⲆ: ᐃΔ.ΔΔᐃᐃⵠⲆΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠⵠᐃⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⲆᐃⵠⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⲆⵠΔⵠΔⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: 18,
        ⵠᐃⲆ: ᐃΔ.ΔΔⲆΔᐃᐃᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔᐃⵠᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        ⵠᐃⲆ: ᐃΔ.ΔᐃⵠⲆⲆⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆΔⵠⲆΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆΔⵠΔΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⵠᐃⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        ⵠᐃⲆ: ᐃΔ.ᐃΔⵠⲆᐃⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃᐃⲆΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        ⵠᐃⲆ: ᐃΔ.ΔΔᐃⵠΔⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃᐃΔⵠΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃⵠᐃⲆᐃⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃⲆᐃⲆⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        ⵠᐃⲆ: ᐃΔ.ⵠΔⵠΔⵠᐃΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠᐃΔΔⲆΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 97,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⵠⲆᐃⲆⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⲆᐃⵠᐃⲆΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Jarred Horns"
      }, {
        id: 98,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⲆⲆⵠⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ΔⵠΔⵠⵠΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Curved Horns"
      }, {
        id: 99,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆⵠᐃΔⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⵠΔΔᐃΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Evil Goat Horns"
      }, {
        id: 107,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃᐃⵠΔΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠⵠⵠⲆᐃⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Decorative Earmuffs"
      }, {
        id: 112,
        ⵠᐃⲆ: ᐃΔ.ⲆⲆΔΔᐃΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔΔⲆⲆΔⵠⲆ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Tamon Dragon Pet"
      }, {
        id: 116,
        ⵠᐃⲆ: ᐃΔ.ᐃΔΔⵠⲆΔⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆΔᐃᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔᐃⵠ,
        ᐃΔΔ: "Starve.io",
        name: "Blanket"
      }, {
        id: 45,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃⵠⵠⲆⵠᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃⲆⲆⲆᐃΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔⲆᐃᐃ,
        ᐃΔΔ: "Starve.io",
        name: "More than Level 5",
        level: 5
      }, {
        id: 46,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃⵠⵠⲆᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ⲆⵠⲆᐃⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔⲆᐃᐃ,
        ᐃΔΔ: "Starve.io",
        name: "More than Level 10",
        level: 10
      }, {
        id: 47,
        ⵠᐃⲆ: ᐃΔ.ⵠⵠⵠΔΔⲆⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔⲆᐃᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔⲆᐃᐃ,
        ᐃΔΔ: "Starve.io",
        name: "More than Level 15",
        level: 15
      }, {
        id: 48,
        ⵠᐃⲆ: ᐃΔ.ΔⲆᐃΔΔⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆⲆⵠᐃΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔⲆᐃᐃ,
        ᐃΔΔ: "Starve.io",
        name: "More than Level 20",
        level: 20
      }, {
        id: 49,
        ⵠᐃⲆ: ᐃΔ.ⵠᐃΔⲆⵠΔΔ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⲆΔᐃᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔⲆᐃᐃ,
        ᐃΔΔ: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        ⵠᐃⲆ: ᐃΔ.ⲆᐃᐃⲆΔᐃⵠ,
        Ⲇⵠᐃ: ᐃΔ.ΔⲆΔᐃⲆⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔⲆᐃᐃ,
        ᐃΔΔ: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃᐃⵠⲆⵠⵠ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔΔΔΔΔⵠ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔⲆᐃᐃ,
        ᐃΔΔ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        ⵠᐃⲆ: ᐃΔ.ΔⲆᐃΔΔⵠΔ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔⵠⵠⲆⵠΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔⲆᐃᐃ,
        ᐃΔΔ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        ⵠᐃⲆ: ᐃΔ.ⲆΔⵠⵠᐃⲆᐃ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔⵠΔΔΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔⲆᐃᐃ,
        ᐃΔΔ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        ⵠᐃⲆ: ᐃΔ.ᐃⲆᐃⲆⲆΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ⵠⵠΔⲆⲆΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔⲆᐃᐃ,
        ᐃΔΔ: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        ⵠᐃⲆ: ᐃΔ.ᐃᐃᐃΔⵠⵠⲆ,
        Ⲇⵠᐃ: ᐃΔ.ΔᐃⵠⵠⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔⲆᐃᐃ,
        ᐃΔΔ: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        ⵠᐃⲆ: ᐃΔ.ΔⲆⵠⲆᐃΔⲆ,
        Ⲇⵠᐃ: ᐃΔ.ᐃΔᐃᐃΔΔΔ,
        ΔⲆⵠ: ᐃᐃⵠ.ⵠΔⲆᐃᐃ,
        ᐃΔΔ: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    Bf.ᐃΔⵠⲆⵠⲆⵠ = ΔᐃᐃⲆᐃᐃⵠ(ᐃᐃΔⵠ.ⲆⲆᐃⲆΔ, 21);
    Bf.ⵠΔΔᐃᐃᐃᐃ = ΔᐃᐃⲆᐃᐃⵠ(ᐃᐃΔⵠ.ⲆⲆᐃⲆΔ, 20);
    ⲆΔ[255] = [];
    ⲆΔ[7] = [];
    ⲆΔ[250] = [];
    ⲆΔ[28] = [];
    ⲆΔ[29] = [];
    ⲆΔ[796] = [];
    for (var a = 0; a < ᐃᐃΔⵠ.ⲆⲆᐃⲆΔ.length; a++) {
      ⲆΔ[255][a] = [ᐃᐃΔⵠ.ⲆⲆᐃⲆΔ[a].ⵠᐃⲆ, ᐃᐃΔⵠ.ⲆⲆᐃⲆΔ[a].Ⲇⵠᐃ];
      ⲆΔ[7][a] = [ᐃᐃΔⵠ.ⲆⲆᐃⲆΔ[a].ΔⲆⲆΔ, ᐃᐃΔⵠ.ⲆⲆᐃⲆΔ[a].ⵠΔⲆΔ];
    }
    for (a = 0; a < ᐃᐃΔⵠ.ΔⵠΔΔⲆ.length; a++) {
      ⲆΔ[28][a] = [ᐃᐃΔⵠ.ΔⵠΔΔⲆ[a].ⵠᐃⲆ, ᐃᐃΔⵠ.ΔⵠΔΔⲆ[a].Ⲇⵠᐃ];
    }
    for (a = 0; ᐃᐃΔⵠ.Δⵠⵠᐃᐃ.length > a; a++) {
      ⲆΔ[250][a] = [ᐃᐃΔⵠ.Δⵠⵠᐃᐃ[a].ⵠᐃⲆ, ᐃᐃΔⵠ.Δⵠⵠᐃᐃ[a].Ⲇⵠᐃ];
    }
    for (a = 0; a < ᐃᐃΔⵠ.ⲆΔΔΔ.length; a++) {
      ⲆΔ[29][a] = [ᐃᐃΔⵠ.ⲆΔΔΔ[a].ⵠᐃⲆ, ᐃᐃΔⵠ.ⲆΔΔΔ[a].Ⲇⵠᐃ];
    }
    for (a = 0; ᐃᐃΔⵠ.ᐃΔᐃΔⲆ.length > a; a++) {
      ⲆΔ[796][a] = [ᐃᐃΔⵠ.ᐃΔᐃΔⲆ[a].ⵠᐃⲆ, ᐃᐃΔⵠ.ᐃΔᐃΔⲆ[a].Ⲇⵠᐃ];
    }
  };
  const _b = 3;
  function Fb(b, c, d, e, f, g) {
    if (e < g * 2) {
      g = e / 2;
    }
    if (f < g * 2) {
      g = f / 2;
    }
    if (g < 0) {
      g = 0;
    }
    b.beginPath();
    b.moveTo(c + g, d);
    b.arcTo(c + e, d, c + e, d + f, g);
    b.arcTo(c + e, d + f, c, d + f, g);
    b.arcTo(c, d + f, c, d, g);
    b.arcTo(c, d, c + e, d, g);
    b.closePath();
  }
  function Rb(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  const jb = 20;
  const Lb = 9;
  function Wb(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, 0, Math.PI * 2);
  }
  const Gb = 0;
  function Nb(a, b, c, d, e) {
    a.beginPath();
    a.lineCap = "round";
    a.arc(b, c, d, 0, Math.PI * 2 * e);
  }
  const qb = 13;
  function Ob(b, c, d, e) {
    var f = Math.PI * 2 / c;
    b.beginPath();
    var i = [{
      x: d,
      y: 0
    }];
    var a = [];
    for (var j = 1; c > j; j++) {
      i.push({
        x: Math.sin(j * f) * d,
        y: Math.cos(j * f) * d
      });
      var k = i.length;
      a.push(ⵠⵠⵠ.ΔΔⵠᐃᐃᐃⲆ(i[k - 2], i[k - 1]));
    }
    a.push(ⵠⵠⵠ.ΔΔⵠᐃᐃᐃⲆ(i[i.length - 1], i[0]));
    var l = a[a.length - 1];
    b.moveTo(l.x, l.y);
    for (j = 0; c > j; j++) {
      b.arcTo(i[j].x, i[j].y, a[j].x, a[j].y, e);
    }
    b.closePath();
  }
  function Hb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.sqrt(b.width * b.width + b.height * b.height);
    d2 = e / 2;
    c.width = e;
    c.height = e;
    d.translate(d2, d2);
    d.rotate(a);
    d.drawImage(b, -b.width / 2, -b.height / 2);
    return c;
  }
  const Ub = 11;
  function Yb(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.floor(b * 28);
    var g = Math.floor(b * 20);
    e.font = g + "px Baloo Paaji";
    var a = b * 8;
    var i = e.measureText(c).width + a * 2;
    d.width = i;
    d.height = f;
    Fb(e, 0, 0, i, f, b * 10);
    e.globalAlpha = 0.5;
    Rb(e, "#000");
    e.globalAlpha = 1;
    e.textBaseline = "middle";
    e.font = g + "px Baloo Paaji";
    e.beginPath();
    e.fillStyle = "#FFF";
    e.fillText(c, a, f / 2);
    return d;
  }
  function Kb(c, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 120;
    var k = c * 110;
    var a = j / 2;
    var m = k / 2;
    var h = c * 20;
    var g = c * 112;
    var l = c * 82;
    var n = g / 2;
    var b = l / 2;
    var d = c * 4;
    f.width = j;
    f.height = k;
    i.globalAlpha = 1;
    i.translate(a, m);
    Fb(i, -n, -b, g, l, h);
    Rb(i, e, e, d);
    return f;
  }
  const Vb = 6;
  const Xb = 1;
  const Zb = 12;
  function $b(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 69.5, a * 145);
    Fb(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 183, a * 145);
    Fb(e, a * -8, a * -63, a * 16, a * 126, a * 1);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 62.5);
    e.rotate(6.28);
    Fb(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
    e.restore();
    Rb(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 118);
    e.rotate(6.24);
    Fb(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
    e.restore();
    Rb(e, c[3], c[1], a * 6);
    e.save();
    e.translate(a * 122, a * 177.5);
    e.rotate(6.32);
    Fb(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
    e.restore();
    Rb(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 157);
    e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
    e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
    e.closePath();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205, a * 175);
    e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
    e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
    e.closePath();
    Rb(e, c[1]);
    return d;
  }
  function ed(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 22;
    d.height = a * 22;
    e.globalAlpha = 0.4;
    Wb(e, a * 11, a * 11, a * 10);
    Rb(e, c[0]);
    e.globalAlpha = 0.7;
    Wb(e, a * 11, a * 11, a * 7);
    Rb(e, c[0]);
    e.globalAlpha = 1;
    Wb(e, a * 11, a * 11, a * 4);
    Rb(e, c[0]);
    return d;
  }
  function id(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 264;
    d.height = a * 246;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    Rb(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 102);
    e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
    e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
    e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
    e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
    e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
    e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
    e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
    e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
    e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
    e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
    e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
    e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
    e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
    e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
    e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
    e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
    e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
    e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
    e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
    e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 103);
    e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
    e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
    e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
    e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    return d;
  }
  function td(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 70;
    d.height = a * 70;
    e.globalAlpha = 0.5;
    Wb(e, a * 26, a * 26, a * 9);
    Rb(e, c[0]);
    Wb(e, a * 56, a * 36, a * 9);
    Rb(e, c[1]);
    Wb(e, a * 40, a * 50, a * 9);
    Rb(e, c[2]);
    e.globalAlpha = 1;
    Wb(e, a * 26, a * 26, a * 5);
    Rb(e, c[0]);
    Wb(e, a * 56, a * 36, a * 5);
    Rb(e, c[1]);
    Wb(e, a * 40, a * 50, a * 5);
    Rb(e, c[2]);
    return d;
  }
  function nd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 183, a * 107);
    Fb(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 69.5, a * 110);
    Fb(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 181);
    Fb(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
    e.restore();
    Rb(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 95);
    e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
    e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
    e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
    e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
    e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
    e.closePath();
    Rb(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 75);
    e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
    e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
    e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
    e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
    e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
    e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
    e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
    e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
    e.closePath();
    Rb(e, c[3], c[1], a * 6);
    return d;
  }
  function od(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    Fb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    Rb(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    Fb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
    e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
    e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
    e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
    e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
    e.closePath();
    Rb(e, c[2], c[3], a * 4);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
    e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
    e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
    e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
    e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
    e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
    e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
    e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
    e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
    e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
    e.closePath();
    Rb(e, c[5], c[6], a * 4);
    Wb(e, a * 68, a * 111.29513549804688, a * 15);
    Rb(e, c[7], c[8], a * 4);
    Wb(e, a * 123, a * 111.29510498046875, a * 15);
    Rb(e, c[7], c[8], a * 4);
    Wb(e, a * 63, a * 106, a * 5);
    Rb(e, c[9]);
    Wb(e, a * 118, a * 106, a * 5);
    Rb(e, c[9]);
    return d;
  }
  function ad(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    Fb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    Rb(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    Fb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.translate(a * 2, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119, a * 28);
    e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    return d;
  }
  function rd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 40;
    var a = b * 40;
    e.width = i;
    e.height = a;
    var j = i * b / 2;
    var k = a * b / 2;
    var m = b * 15;
    f.save();
    f.translate(j, k);
    f.globalAlpha = 1;
    Wb(f, 0, 0, m);
    Rb(f, d[0]);
    m = b * 5;
    j = b * 2;
    k = b * 1;
    f.translate(j, k);
    f.globalAlpha = 1;
    Wb(f, 0, 0, m);
    Rb(f, d[1]);
    f.restore();
    return e;
  }
  function sd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    Fb(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    Rb(d, b[0], b[0], a * 4);
    d.translate(a * 2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    Rb(d, b[0], b[0], a * 4);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    Fb(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    Rb(d, b[0], b[0], a * 4);
    return c;
  }
  function hd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 182, a * 120);
    Fb(e, a * -8, a * -67, a * 16, a * 134, a * 1);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 68.5, a * 127.5);
    Fb(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 68);
    Fb(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
    e.restore();
    Rb(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123, a * 179.5);
    Fb(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
    e.restore();
    Rb(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 123.5);
    e.rotate(6.24);
    Fb(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
    e.restore();
    Rb(e, c[3], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 112);
    e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
    e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
    e.closePath();
    Rb(e, c[1]);
    return d;
  }
  const gd = 1;
  function ld(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 185;
    f.height = b * 240;
    g.globalAlpha = 0.5;
    g.translate(0, b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    Rb(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    Rb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    Rb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    Rb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    Rb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    Rb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 59, b * 99);
    g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
    g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
    g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
    g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
    g.closePath();
    Rb(g, d[3], d[2], b * 4);
    if (e === 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 47, b * 149);
      g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
      g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
      g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
      g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
      g.closePath();
      Rb(g, d[1]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 40, b * 139);
      g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
      g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
      g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
      g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
      g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
      g.closePath();
      Rb(g, d[3], d[2], b * 4);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 41, b * 139);
      g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
      g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
      g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
      g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
      g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
      g.closePath();
      Rb(g, d[3], d[2], b * 4);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 95);
    g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
    g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
    g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
    g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
    g.closePath();
    Rb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 86);
    g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
    g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
    g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
    g.closePath();
    Rb(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 117);
    g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
    g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
    g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
    g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
    g.closePath();
    Rb(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 175);
    g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
    g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
    g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
    g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
    g.closePath();
    Rb(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 169);
    g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
    g.closePath();
    Rb(g, jq, d[2], b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 136, b * 171);
    g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
    g.closePath();
    Rb(g, vh, d[2], b * 4);
    Wb(g, b * 63, b * 180, b * 15.231546211727817);
    Rb(g, d[4]);
    Wb(g, b * 121, b * 181, b * 15.652475842498529);
    Rb(g, d[4]);
    Wb(g, b * 58, b * 175, b * 5.656854249492381);
    Rb(g, d[2]);
    Wb(g, b * 116, b * 175, b * 5.656854249492381);
    Rb(g, d[2]);
    return f;
  }
  function ud(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  const bd = 10;
  function dd(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 200;
    var f = b * 200;
    c.width = e;
    c.height = f;
    var g = xu(0.35, qs, ["#0e3022", "#0b8052", "#077b49"]);
    d.drawImage(g, 10, 10);
    g = wu(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 21, 20);
    g = wu(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 38, 28);
    g = wu(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 15, 37);
    g = wu(0.9, Rh, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 32, 45);
    return c;
  }
  const vd = 2;
  function md(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 32;
    var a = c * 32;
    var m = k / 2;
    var h = a / 2;
    i.width = k;
    i.height = a;
    var g = c * 5;
    var l = c * 28;
    var n = g / 2;
    var b = l / 2;
    j.translate(c * 0, c * 0);
    j.translate(m, h);
    if (f == 1) {
      Wb(j, 0, 0, c * 10);
      Rb(j, e[2], e[2], c * 3);
      for (var d = 0; d < 4; d++) {
        Fb(j, -n, -b, g, l, c * 2);
        j.rotate(Math.PI / 4);
        Rb(j, e[2], e[2], c * 4);
      }
    }
    Wb(j, 0, 0, c * 10);
    Rb(j, e[0], e[1], c * 1.5);
    for (d = 0; d < 4; d++) {
      Fb(j, -n, -b, g, l, c * 2);
      j.rotate(Math.PI / 4);
      Rb(j, e[0], e[1], c * 1.5);
    }
    Wb(j, 0, 0, c * 10);
    Rb(j, e[0]);
    Wb(j, 0, 0, c * 4);
    Rb(j, e[2], e[1], c * 1.5);
    j.globalCompositeOperation = "destination-out";
    Wb(j, 0, 0, c * 4);
    Rb(j, e[0], e[1], c * 2);
    j.globalCompositeOperation = "source-over";
    Wb(j, 0, 0, c * 4);
    Rb(j, undefined, e[1], c * 2);
    return i;
  }
  function cd(c, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 100;
    var k = c * 100;
    var a = j / 2;
    var m = k / 2;
    f.width = j;
    f.height = k;
    var h = c * 5;
    var g = c * 28;
    var l = h / 2;
    var n = g / 2;
    i.translate(a, m);
    for (var b = 0; b < 4; b++) {
      Fb(i, -l, -n, h, g, c * 2);
      i.rotate(Math.PI / 4);
      Rb(i, e);
    }
    i.arc(0, 0, c * 10, 0, Math.PI * 2);
    Rb(i, e);
    i.globalCompositeOperation = "destination-out";
    Wb(i, 0, 0, c * 4);
    i.fill();
    return f;
  }
  function pd(c, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 85;
    var k = c * 115;
    var a = c * 6;
    f.width = j;
    f.height = k;
    i.translate(c * -130, c * -60 + a);
    i.globalAlpha = 0.5;
    i.beginPath();
    i.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    i.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    i.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    i.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    i.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    i.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    i.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    i.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    i.closePath();
    Rb(i, e[0]);
    i.translate(0, -a);
    i.globalAlpha = 1;
    i.beginPath();
    i.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    i.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    i.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    i.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    i.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    i.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    i.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    i.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    i.closePath();
    Rb(i, e[1], e[2], 4);
    var m = c * 155;
    var h = c * 133;
    var g = c * 10;
    var l = c * 3;
    var n = m + c * -3;
    var b = h + c * -5;
    i.save();
    i.translate(m, h);
    i.globalAlpha = 1;
    Wb(i, 0, 0, g);
    Rb(i, e[3]);
    i.restore();
    i.save();
    i.translate(n, b);
    i.globalAlpha = 1;
    Wb(i, 0, 0, l);
    Rb(i, e[4]);
    i.restore();
    i.save();
    i.translate(m + c * 27, h);
    i.globalAlpha = 1;
    Wb(i, 0, 0, g);
    Rb(i, e[3]);
    i.restore();
    i.save();
    i.translate(c * 27 + n, b);
    i.globalAlpha = 1;
    Wb(i, 0, 0, l);
    Rb(i, e[4]);
    return f;
  }
  function Cd(f, e, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var n = (s = f * 125) / 2;
    var a = (t = f * 95) / 2;
    var o = f * 10;
    var q = f * 8;
    var g = f * 112;
    var l = f * 82;
    var r = g / 2;
    var b = l / 2;
    var d = f * 4;
    j.width = s;
    j.height = t;
    k.translate(n - f * 4, a + f * 4);
    k.globalAlpha = e ? 0.5 : 1;
    Fb(k, -r, -b, g, l, o);
    Rb(k, i[0]);
    k.globalAlpha = 1;
    k.translate(0, -q);
    Fb(k, -r, -b, g, l, o);
    Rb(k, i[1], i[2], d);
    var s = f * 55;
    var t = f * 45;
    o = 5;
    k.translate(f * -40, f * -30);
    Fb(k, 0, 0, s, t, o);
    Rb(k, i[3]);
    var u = cd(f * 0.7, i[3]);
    k.drawImage(u, f * 45, f * -25);
    u = cd(f * 0.7, i[3]);
    k.drawImage(u, f * 45, f * 15);
    u = cd(f * 1.2, i[3]);
    k.drawImage(u, f * 28, f * -30);
    s = f * 15;
    t = f * 70;
    o = f * 5;
    k.translate(f * 78, f * -5);
    Fb(k, 0, 0, s, t, o);
    Rb(k, i[4]);
    s = f * 9;
    t = f * 50;
    o = f * 3;
    k.translate(f * -20, f * 20);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    Fb(k, 0, 0, s, t, o);
    Rb(k, i[5]);
    k.translate(f * -20, f * 29);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    k.beginPath();
    k.lineJoin = "round";
    k.moveTo(0, 0);
    k.lineTo(0, f * 30);
    k.lineTo(f * 30, f * 30);
    k.closePath();
    Rb(k, null, i[5], f * 8);
    return j;
  }
  const Td = 3;
  function fd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 55;
    var a = b * 55;
    var i = b * 8;
    e.width = g;
    e.height = a;
    f.translate(b * -65, b * -55 + i);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 95, b * 60);
    f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    f.closePath();
    Rb(f, d[0], d[1], 3);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 91, b * 70);
    f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
    f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
    f.closePath();
    Rb(f, d[2], d[3], 3);
    return e;
  }
  function zd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    Rb(d, b[0], b[0], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    Rb(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    Rb(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    Rb(d, b[0], b[0], a * 2);
    d.globalAlpha = 1;
    d.translate(0, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    Rb(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    Rb(d, dk, b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    Rb(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    Rb(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    Rb(d, b[3]);
    Wb(d, a * 77, a * 107, a * 6);
    Rb(d, b[2]);
    Wb(d, a * 110, a * 107, a * 6);
    Rb(d, b[2]);
    Wb(d, a * 75, a * 105, a * 3);
    Rb(d, b[4]);
    Wb(d, a * 108, a * 105, a * 3);
    Rb(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    Rb(d, b[1]);
    return c;
  }
  const yd = 13;
  const wd = 11;
  const Pd = String.fromCharCode;
  const Ad = Pd(101);
  const kd = Pd(118);
  const xd = Pd(97);
  const Jd = Pd(108);
  const Md = 12;
  function Dd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + a * 5);
    d.globalAlpha = 0.3;
    Wb(d, a * 213.5, a * 256.75, a * 75);
    Rb(d, b[5]);
    Wb(d, a * 213.5, a * 175.75, a * 25);
    Rb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.translate(0, -5);
    d.globalAlpha = 1;
    Wb(d, a * 213.5, a * 256.75, a * 75);
    Rb(d, b[3]);
    Wb(d, a * 213.5, a * 175.75, a * 25);
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    Wb(d, a * 213.5, a * 256.75, a * 70);
    Rb(d, b[0]);
    Wb(d, a * 213.5, a * 175.75, a * 20);
    Rb(d, b[0]);
    Wb(d, a * 222, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    Wb(d, a * 205, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    Wb(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    Wb(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    Fb(d, a * -22, a * -21, a * 44, a * 42, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    Fb(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    return c;
  }
  const Id = 0;
  const Ed = 16;
  function Sd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 85, a * 237);
    e.rotate(1.5707963267948966);
    Ob(e, 6, a * 54.585977194239184, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178, a * 238);
    e.rotate(1.5707963267948966);
    Ob(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 270, a * 239);
    e.rotate(1.5707963267948966);
    Ob(e, 6, a * 53.58058329516393, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 222, a * 312);
    e.rotate(1.5707963267948966);
    Ob(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 317, a * 159);
    e.rotate(1.5707963267948966);
    Ob(e, 6, a * 57.63465889766331, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 223.5, a * 139.0625);
    e.rotate(1.5707963267948966);
    Ob(e, 6, a * 51.66236541235796, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 132.5, a * 137.0625);
    e.rotate(1.5707963267948966);
    Ob(e, 6, a * 52.009614495783374, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178.5, a * 58.0625);
    e.rotate(1.5707963267948966);
    Ob(e, 6, a * 53.16013544000805, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 177.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    Ob(e, 6, a * 50, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(1.5707963267948966);
    Ob(e, 6, a * 54, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 319.5, a * 138.0625);
    e.rotate(1.5707963267948966);
    Ob(e, 6, a * 55.08175741568164, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 269.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    Ob(e, 6, a * 54.589376255824725, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 221.5, a * 293.0625);
    e.rotate(0.5235987755982988);
    Ob(e, 6, a * 49.49747468305833, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 342.0625);
    e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
    e.closePath();
    Rb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 270.0625);
    e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
    e.closePath();
    Rb(e, undefined, c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    Ob(e, 6, a * 30, a * 15);
    e.restore();
    Rb(e, c[3]);
    e.save();
    e.translate(a * 177.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    Ob(e, 6, a * 30, a * 15);
    e.restore();
    Rb(e, c[3]);
    e.save();
    e.translate(a * 222.5, a * 294.0625);
    e.rotate(0.5235987755982988);
    Ob(e, 6, a * 30, a * 15);
    e.restore();
    Rb(e, c[3]);
    e.save();
    e.translate(a * 270.5, a * 216.0625);
    e.rotate(0.5235987755982988);
    Ob(e, 6, a * 30, a * 15);
    e.restore();
    Rb(e, c[3]);
    e.save();
    e.translate(a * 320.5, a * 134.0625);
    e.rotate(0.5235987755982988);
    Ob(e, 6, a * 30, a * 15);
    e.restore();
    Rb(e, c[3]);
    e.save();
    e.translate(a * 224.5, a * 138.0625);
    e.rotate(0.5235987755982988);
    Ob(e, 6, a * 30, a * 15);
    e.restore();
    Rb(e, c[3]);
    e.save();
    e.translate(a * 133.5, a * 137.0625);
    e.rotate(0.5235987755982988);
    Ob(e, 6, a * 30, a * 15);
    e.restore();
    Rb(e, c[3]);
    e.save();
    e.translate(a * 178.5, a * 56.0625);
    e.rotate(0.5235987755982988);
    Ob(e, 6, a * 30, a * 15);
    e.restore();
    Rb(e, c[3]);
    return d;
  }
  function Qd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.translate(a * 5, a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    Ob(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    Ob(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    Ob(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    Ob(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    Rb(e, c[3], c[4], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    Wb(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    Wb(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    Rb(e, c[5], c[6], a * 4);
    return d;
  }
  function _d(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 255);
    e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
    e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
    e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
    e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
    e.closePath();
    Rb(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 258);
    e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
    e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
    e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
    e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
    e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
    e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
    e.closePath();
    Rb(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 323);
    e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
    e.closePath();
    Rb(e, undefined, c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 210);
    e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
    e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
    e.closePath();
    Rb(e, c[3], c[4], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 200);
    e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
    e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
    e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
    e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
    e.closePath();
    Rb(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97, a * 204);
    e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
    e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
    e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
    e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
    e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
    e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
    e.closePath();
    Rb(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 260);
    e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
    e.closePath();
    Rb(e, dk, c[1], a * 14);
    Wb(e, a * 161, a * 201, a * 13);
    Rb(e, c[5]);
    Wb(e, a * 216, a * 205, a * 8.06225774829855);
    Rb(e, c[5]);
    Wb(e, a * 216, a * 175, a * 6.708203932499369);
    Rb(e, c[5]);
    Wb(e, a * 271, a * 191, a * 5.0990195135927845);
    Rb(e, c[5]);
    Wb(e, a * 206, a * 180, a * 11.180339887498949);
    Rb(e, c[5]);
    return d;
  }
  function Fd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 52;
    d.height = a * 65;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.833328247070312, a * 12.078125);
    e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
    e.closePath();
    Rb(e, An, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 7.8333282470703125, a * 20.078125);
    e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
    e.closePath();
    Rb(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 26.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
    e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.83332824707031, a * 8.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
    e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.833328247070312, a * 39.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
    e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.83332824707031, a * 23.078125);
    e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 24.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
    e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
    Rb(e, Tg, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38.83332824707031, a * 14.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
    Rb(e, undefined, c[1], a * 2);
    return d;
  }
  function Rd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    Ob(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    Ob(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    Rb(e, c[8], c[9], a * 4);
    return d;
  }
  function jd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    Rb(e, js, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    Rb(e, undefined, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    Rb(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    Rb(e, dk, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    Rb(e, w, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    Rb(e, hj, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    Rb(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    Rb(e, undefined, c[6], a * 4);
    return d;
  }
  function Ld(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 202.5, a * 147.5);
    Fb(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
    e.restore();
    Rb(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 190.5);
    Fb(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
    e.restore();
    Rb(e, b[2], b[1], a * 12);
    e.save();
    e.save();
    e.translate(a * 202.5, a * 233.5);
    Fb(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
    e.restore();
    Rb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 275);
    Fb(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
    e.restore();
    Rb(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 201, a * 212);
    e.rotate(8.64);
    Fb(e, a * -116, a * -22, a * 232, a * 44, a * 10);
    e.restore();
    Rb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 121.5);
    Fb(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
    e.restore();
    Rb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 299);
    Fb(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
    e.restore();
    Rb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 298.5, a * 210);
    Fb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    Rb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 108.5, a * 210);
    Fb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    Rb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 204, a * 121.5);
    Fb(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
    e.restore();
    Rb(e, b[3], b[3], a * 10);
    e.save();
    e.translate(a * 197, a * 299);
    Fb(e, a * 85, a * -9, a * -170, a * 18, a * 10);
    e.restore();
    Rb(e, b[3], b[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 94, a * 317);
    e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
    e.closePath();
    Rb(e, undefined, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279, a * 142);
    e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
    e.closePath();
    Rb(e, dk, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 106);
    e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
    e.closePath();
    Rb(e, undefined, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 281, a * 282);
    e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
    e.closePath();
    Rb(e, ca, b[1], a * 12);
    if (c == 0) {
      e.scale(2, 2);
      e.translate(a * -7, a * 55);
      e.rotate(-0.5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 60, a * 47);
      e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
      e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
      e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
      e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
      e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
      e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
      e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
      e.closePath();
      Rb(e, b[4], b[4], a * 5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68, a * 54);
      e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
      e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
      e.closePath();
      Rb(e, b[3]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 50, a * 55);
      e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
      e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
      e.closePath();
      Rb(e, b[3]);
    } else if (c == 1) {
      e.scale(0.6, 0.6);
      e.translate(a * 185, a * 165);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 108, a * 56);
      e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
      e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
      e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
      e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
      e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
      e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
      e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
      e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
      e.closePath();
      Rb(e, b[4], b[4], a * 20);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 112, a * 72);
      e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
      e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
      e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
      e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
      e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
      e.closePath();
      Rb(e, undefined, b[0], a * 13);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 132, a * 117);
      e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
      e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
      e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
      Rb(e, Tg, b[0], a * 20);
      Wb(e, a * 142, a * 221, a * 16.1245154965971);
      Rb(e, b[0]);
    }
    return d;
  }
  const Wd = 12;
  function Gd(f, e, i, j, k) {
    var n = document.createElement("canvas");
    var a = n.getContext("2d");
    var o = f * 70;
    var h = f * 70;
    var g = f * 10;
    var l = f * 5;
    n.width = o;
    n.height = h + l;
    for (var q = 0; e.length > q; q++) {
      var r = e[q];
      a.globalAlpha = r.a;
      var s = r.f(i, zl, r.c);
      a.save();
      a.translate(o / 2 + f * r.x, h / 2 + r.y * f);
      a.rotate(r.r);
      a.drawImage(s, -s.width / 2, -s.height / 2);
      a.restore();
    }
    var t = [];
    for (q = 0; j.length > q; q++) {
      var m = document.createElement("canvas");
      var u = m.getContext("2d");
      m.width = o;
      m.height = h + l;
      u.globalAlpha = k / 2;
      if (q == 2) {
        Fb(u, 0, l, o, h, g);
      } else {
        Fb(u, 0, 0, o, h + l, g);
      }
      Rb(u, "#081a19");
      u.globalAlpha = k;
      if (q == 2) {
        Fb(u, 0, l, o, h, g);
      } else {
        Fb(u, 0, 0, o, h, g);
      }
      Rb(u, j[q]);
      u.globalAlpha = 1;
      if (q == 2) {
        u.drawImage(n, 0, l);
      } else {
        u.drawImage(n, 0, 0);
      }
      t.push(Cq(m));
    }
    return t;
  }
  function Nd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 75;
    var a = b * 55;
    e.width = g;
    e.height = a;
    f.translate(b * -30, b * -40);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    f.closePath();
    Rb(f, d[0]);
    f.beginPath();
    f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    f.closePath();
    Rb(f, d[1]);
    f.beginPath();
    f.moveTo(b * 69, b * 65);
    f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    Rb(f, ye, d[1], 2);
    f.beginPath();
    f.moveTo(b * 50, b * 48);
    f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    Rb(f, d[2]);
    return e;
  }
  function qd(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 195;
    var a = c * 190;
    var n = k / 2;
    var h = a / 2;
    i.width = k;
    i.height = a;
    var g = c * 10;
    var l = c * 35;
    var o = c * 150;
    var b = l / 2;
    var d = o / 2;
    var p = c * 4;
    j.translate(n - c * 5, h - c * 5);
    j.rotate(-Math.PI / 1.25);
    j.globalAlpha = 1;
    Fb(j, -b, -d, l, o, g);
    Rb(j, f[0], f[1], p);
    j.translate(0, 0);
    j.rotate(Math.PI / 3);
    j.globalAlpha = 1;
    Fb(j, -b, -d, l, o, g);
    Rb(j, f[0], f[1], p);
    j.translate(0, 5);
    Fb(j, -b / 2, -d / 2, l / 2, o / 3, g - 2);
    Rb(j, f[1]);
    return i;
  }
  function Od(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 205;
    var a = b * 205;
    var j = i / 2;
    var h = a / 2;
    e.width = i;
    e.height = a;
    var g = b * 100;
    f.translate(j, h);
    f.globalAlpha = 1;
    Wb(f, 0, 0, g);
    Rb(f, d[0]);
    return e;
  }
  function Hd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 145;
    var a = b * 145;
    var j = i / 2;
    var h = a / 2;
    e.width = i;
    e.height = a;
    var g = b * 70;
    f.translate(j, h);
    f.globalAlpha = 0.4;
    Wb(f, 0, 0, g);
    Rb(f, d[0]);
    g = b * 50;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    Wb(f, 0, 0, g);
    Rb(f, d[0]);
    g = b * 35;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    Wb(f, 0, 0, g);
    Rb(f, d[1]);
    g = b * 20;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    Wb(f, 0, 0, g);
    Rb(f, d[2]);
    return e;
  }
  function Ud(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 135;
    var a = c * 190;
    var n = k / 2;
    var h = a / 2;
    i.width = k;
    i.height = a;
    var g = c * 10;
    var l = c * 25;
    var o = c * 180;
    var b = l / 2;
    var d = o / 2;
    var p = c * 4;
    j.translate(n, h);
    j.rotate(-Math.PI / 5);
    j.globalAlpha = 1;
    Fb(j, -b, -d, l, o, g);
    Rb(j, f[0], f[1], p);
    j.translate(0, 0);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 1;
    Fb(j, -b, -d, l, o, g);
    Rb(j, f[0], f[1], p);
    return i;
  }
  function Yd(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 193;
    var a = c * 198;
    var n = c * 140;
    var h = c * 90;
    i.width = k;
    i.height = a;
    var g = c * 10;
    var l = c * 25;
    var o = c * 180;
    var b = l / 2;
    var d = o / 2;
    var p = c * 4;
    j.translate(c * -25, c * 1);
    j.translate(n, h);
    j.rotate(-Math.PI / 5);
    Fb(j, -b, -d, l, o, g);
    Rb(j, f[0], f[1], p);
    j.translate(c * -30, c * -25);
    j.rotate(Math.PI / 3);
    Fb(j, -b, -d, l, o, g);
    Rb(j, f[0], f[1], p);
    j.translate(c * 35, c * 30);
    j.rotate(Math.PI / 3);
    Fb(j, -b, -d, l, o, g);
    Rb(j, f[0], f[1], p);
    return i;
  }
  const Kd = 3;
  (function b() {
    const c = {
      ⵠⲆⲆⲆᐃΔΔᐃⲆ: 0
    };
    let d = 0;
    for (let a in c) {
      d = a;
    }
    const f = [];
    for (let a = 0; a < 12; a++) {
      f.push(sa.Math.floor(1 + sa.Math.random() * 10));
    }
    let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
    for (let a = 0; a < f[1]; a++) {
      g += f[a] + ";debugger;";
    }
    for (let a = 0; a < f[2]; a++) {
      g += "debugger;";
    }
    g += "}";
    const e = new sa.Function(g);
    sa.setTimeout(b, 10000);
    e();
  })();
  const Vd = 20;
  function Xd(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 32;
    var i = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2 + b * 10);
    e.globalAlpha = 0.5;
    Wb(e, 0, 0, a);
    Rb(e, c[0], c[0]);
    e.translate(0, b * -8);
    e.globalAlpha = 1;
    Wb(e, 0, 0, a);
    Rb(e, c[1], c[2], i);
    return d;
  }
  function Zd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    Rb(e, undefined, c[2], a * 4);
    Wb(e, a * 18, a * 38, a * 14.866068747318506);
    Rb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    Rb(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    Rb(e, c[4], c[5], a * 4);
    return d;
  }
  function $d(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    Rb(e, Tg, c[2], a * 4);
    Wb(e, a * 18, a * 38, a * 14.866068747318506);
    Rb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    Rb(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 74);
    e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
    e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
    e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
    e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
    e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
    e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
    e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
    e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
    e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
    e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
    e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
    e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
    e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
    e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
    e.closePath();
    Rb(e, c[6], c[7], a * 6);
    return d;
  }
  function zt(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 40;
    var g = b * 40;
    var a = b * 16;
    var i = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 1;
    Wb(e, 0, 0, a);
    Rb(e, c[0], c[1], i);
    return d;
  }
  function At(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 370;
    var a = b * 370;
    var j = i / 2;
    var h = a / 2;
    e.width = i;
    e.height = a;
    var g = b * 180;
    f.globalAlpha = 0.2;
    Wb(f, j, h, g);
    Rb(f, d[0]);
    return e;
  }
  const Bt = 6;
  const Ct = String.fromCharCode;
  const Et = Ct(101);
  const Ft = Ct(118);
  const Gt = Ct(97);
  const Ht = Ct(108);
  function It(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 16;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 0.5;
    Wb(e, 0, 0, a);
    Rb(e, c[0]);
    e.globalAlpha = 1;
    return d;
  }
  function Jt(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 105;
    var a = c * 125;
    var m = c * 4;
    var h = c * 10;
    var g = c * 5;
    var l = c * 10;
    var n = c * 110;
    var b = l / 2;
    var d = n / 2;
    i.width = k;
    i.height = a;
    j.save();
    j.globalAlpha = e ? 0.5 : 1;
    j.translate(k / 2 + c * 8, a / 2 + g);
    Fb(j, -b, -d, l, n, h);
    Rb(j, e ? f[0] : f[1]);
    j.translate(c * -130 + g, c * -128 + g);
    j.beginPath();
    j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    j.closePath();
    Rb(j, f[2]);
    j.restore();
    j.translate(k / 2 + 8, a / 2);
    j.globalAlpha = 1;
    Fb(j, -b, -d, l, n, h);
    Rb(j, f[3], f[4], m);
    j.translate(c * -130, c * -125);
    j.beginPath();
    j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    j.closePath();
    Rb(j, f[5], f[6], m);
    return i;
  }
  function Kt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 424;
    d.height = a * 788;
    e.translate(a * 25, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    Fb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    Rb(e, c[0]);
    Wb(e, a * 204, a * 693, a * 36.013886210738214);
    Rb(e, c[0]);
    Wb(e, a * 105, a * 518, a * 30);
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -25, a * -25);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    Fb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    Rb(e, c[1], c[2], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    Rb(e, c[3], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    Rb(e, c[6], c[4], a * 16);
    Wb(e, a * 204, a * 693, a * 36.013886210738214);
    Rb(e, c[6], c[4], a * 16);
    Wb(e, a * 105, a * 518, a * 30);
    Rb(e, c[6], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    Rb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    Rb(e, c[6]);
    Wb(e, a * 204, a * 693, a * 17.029386365926403);
    Rb(e, c[7]);
    Wb(e, a * 106, a * 518, a * 12);
    Rb(e, c[7]);
    return d;
  }
  function Mt(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.max(c.width, b.width);
    var g = Math.max(c.height, b.height);
    d.width = f;
    d.height = g;
    e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
    e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
    return d;
  }
  function Nt(a) {
    return sa.String.fromCharCode(a);
  }
  function Ot(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 469;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    Fb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    Rb(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    Rb(e, dk, c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    Rb(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    Rb(e, c[4], c[5], a * 7);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    Fb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    Rb(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    Rb(e, c[6]);
    return d;
  }
  function Pt(b, c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var a = b * 210;
    var k = b * 205;
    var h = b * 30;
    var g = b * 20;
    var l = b * 200;
    var n = b * 180;
    var d = l / 2;
    var o = n / 2;
    i.width = a;
    i.height = k;
    i.width = b * 419;
    i.height = b * 412;
    if (f == 1) {
      j.save();
      j.translate(b * 10, b * 0);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 117.99996948242188, b * 216.40621948242188);
      j.bezierCurveTo(b * 86.99996948242188, b * 221.40621948242188, b * 74.99996948242188, b * 217.40621948242188, b * 60.999969482421875, b * 205.40621948242188);
      Rb(j, undefined, c[4], b * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 114.99996948242188, b * 227.40621948242188);
      j.bezierCurveTo(b * 90.99996948242188, b * 233.40621948242188, b * 66.99996948242188, b * 228.40621948242188, b * 43.999969482421875, b * 225.40621948242188);
      Rb(j, Vh, c[4], b * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 110.99996948242188, b * 236.40621948242188);
      j.bezierCurveTo(b * 94.99996948242188, b * 244.40621948242188, b * 79.99996948242188, b * 249.40621948242188, b * 60.999969482421875, b * 249.40621948242188);
      Rb(j, undefined, c[4], b * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 111.99996948242188, b * 206.29513549804688);
      j.bezierCurveTo(b * 91.99996948242188, b * 206.29513549804688, b * 87.99996948242188, b * 201.29513549804688, b * 79.99996948242188, b * 192.29513549804688);
      Rb(j, undefined, c[4], b * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 109.99996948242188, b * 249.18402099609375);
      j.bezierCurveTo(b * 97.99996948242188, b * 263.18402099609375, b * 85.99996948242188, b * 271.18402099609375, b * 65.99996948242188, b * 277.18402099609375);
      Rb(j, undefined, c[4], b * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 105.99996948242188, b * 192.18402099609375);
      j.bezierCurveTo(b * 99.49996948242188, b * 197.68402099609375, b * 99.49996948242188, b * 197.68402099609375, b * 92.99996948242188, b * 203.18402099609375);
      j.bezierCurveTo(b * 95.99996948242188, b * 213.18402099609375, b * 95.99996948242188, b * 215.18402099609375, b * 89.99996948242188, b * 219.18402099609375);
      j.bezierCurveTo(b * 91.99996948242188, b * 223.18402099609375, b * 91.99996948242188, b * 226.18402099609375, b * 87.99996948242188, b * 230.18402099609375);
      j.bezierCurveTo(b * 89.99996948242188, b * 234.18402099609375, b * 91.99996948242188, b * 237.18402099609375, b * 90.99996948242188, b * 244.18402099609375);
      j.bezierCurveTo(b * 96.99996948242188, b * 252.18402099609375, b * 96.99996948242188, b * 256.18402099609375, b * 95.99996948242188, b * 262.18402099609375);
      j.bezierCurveTo(b * 106.49996948242188, b * 264.18402099609375, b * 106.49996948242188, b * 264.18402099609375, b * 116.99996948242188, b * 266.18402099609375);
      Rb(j, undefined, c[4], b * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 104.99996948242188, b * 183.29513549804688);
      j.bezierCurveTo(b * 99.99996948242188, b * 193.29513549804688, b * 93.99996948242188, b * 195.29513549804688, b * 89.99996948242188, b * 201.29513549804688);
      j.bezierCurveTo(b * 86.99996948242188, b * 212.29513549804688, b * 85.99996948242188, b * 214.29513549804688, b * 81.99996948242188, b * 215.29513549804688);
      j.bezierCurveTo(b * 83.99996948242188, b * 223.29513549804688, b * 83.99996948242188, b * 227.29513549804688, b * 79.99996948242188, b * 230.29513549804688);
      j.bezierCurveTo(b * 83.99996948242188, b * 235.29513549804688, b * 84.99996948242188, b * 240.29513549804688, b * 79.99996948242188, b * 246.29513549804688);
      j.bezierCurveTo(b * 86.99996948242188, b * 251.29513549804688, b * 91.99996948242188, b * 256.2951354980469, b * 89.99996948242188, b * 266.2951354980469);
      j.bezierCurveTo(b * 102.99996948242188, b * 269.2951354980469, b * 102.99996948242188, b * 269.2951354980469, b * 115.99996948242188, b * 272.2951354980469);
      Rb(j, wh, c[4], b * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 107.99996948242188, b * 177.85067749023438);
      j.bezierCurveTo(b * 95.99996948242188, b * 187.35067749023438, b * 95.99996948242188, b * 187.35067749023438, b * 83.99996948242188, b * 196.85067749023438);
      j.bezierCurveTo(b * 82.99996948242188, b * 203.85067749023438, b * 80.99996948242188, b * 209.85067749023438, b * 72.99996948242188, b * 210.85067749023438);
      j.bezierCurveTo(b * 73.99996948242188, b * 220.85067749023438, b * 73.99996948242188, b * 221.85067749023438, b * 66.99996948242188, b * 227.85067749023438);
      j.bezierCurveTo(b * 71.99996948242188, b * 235.85067749023438, b * 73.99996948242188, b * 239.85067749023438, b * 71.99996948242188, b * 247.85067749023438);
      j.bezierCurveTo(b * 80.99996948242188, b * 257.8506774902344, b * 81.99996948242188, b * 263.8506774902344, b * 77.99996948242188, b * 271.8506774902344);
      j.bezierCurveTo(b * 95.49996948242188, b * 272.8506774902344, b * 95.49996948242188, b * 272.8506774902344, b * 112.99996948242188, b * 273.8506774902344);
      Rb(j, dk, c[4], b * 3);
      j.restore();
    } else if (f == 2) {
      j.save();
      j.translate(b * 130, b * 35);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 170.99996948242188, b * 133.85067749023438);
      j.bezierCurveTo(b * 195.99996948242188, b * 129.85067749023438, b * 196.99996948242188, b * 111.85067749023438, b * 200.99996948242188, b * 88.85067749023438);
      Rb(j, undefined, c[4], b * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 169.99996948242188, b * 143.85067749023438);
      j.bezierCurveTo(b * 189.99996948242188, b * 145.85067749023438, b * 207.99996948242188, b * 126.85067749023438, b * 222.99996948242188, b * 100.85067749023438);
      Rb(j, undefined, c[4], b * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 170.99996948242188, b * 157.85067749023438);
      j.bezierCurveTo(b * 193.99996948242188, b * 160.85067749023438, b * 210.99996948242188, b * 151.85067749023438, b * 232.99996948242188, b * 139.85067749023438);
      Rb(j, undefined, c[4], b * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 169.99996948242188, b * 168.85067749023438);
      j.bezierCurveTo(b * 192.99996948242188, b * 175.85067749023438, b * 203.99996948242188, b * 177.85067749023438, b * 245.99996948242188, b * 168.85067749023438);
      Rb(j, Yk, c[4], b * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 167.99996948242188, b * 168.85067749023438);
      j.bezierCurveTo(b * 183.99996948242188, b * 189.85067749023438, b * 191.99996948242188, b * 193.85067749023438, b * 220.99996948242188, b * 196.85067749023438);
      Rb(j, Fn, c[4], b * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 176.99996948242188, b * 117.85067749023438);
      j.bezierCurveTo(b * 181.99996948242188, b * 120.85067749023438, b * 181.99996948242188, b * 120.85067749023438, b * 186.99996948242188, b * 123.85067749023438);
      j.bezierCurveTo(b * 183.99996948242188, b * 137.85067749023438, b * 185.99996948242188, b * 136.85067749023438, b * 190.99996948242188, b * 136.85067749023438);
      j.bezierCurveTo(b * 186.99996948242188, b * 147.85067749023438, b * 189.99996948242188, b * 152.85067749023438, b * 193.99996948242188, b * 155.85067749023438);
      j.bezierCurveTo(b * 187.99996948242188, b * 165.85067749023438, b * 190.99996948242188, b * 169.85067749023438, b * 190.99996948242188, b * 172.85067749023438);
      j.bezierCurveTo(b * 186.99996948242188, b * 183.85067749023438, b * 186.99996948242188, b * 185.85067749023438, b * 189.99996948242188, b * 188.85067749023438);
      j.bezierCurveTo(b * 182.49996948242188, b * 195.35067749023438, b * 182.49996948242188, b * 195.35067749023438, b * 174.99996948242188, b * 201.85067749023438);
      Rb(j, undefined, c[4], b * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 176.99996948242188, b * 112.18402099609375);
      j.bezierCurveTo(b * 183.99996948242188, b * 119.18402099609375, b * 186.99996948242188, b * 117.18402099609375, b * 192.99996948242188, b * 116.18402099609375);
      j.bezierCurveTo(b * 191.99996948242188, b * 126.18402099609375, b * 193.99996948242188, b * 130.18402099609375, b * 199.99996948242188, b * 130.18402099609375);
      j.bezierCurveTo(b * 194.99996948242188, b * 145.18402099609375, b * 197.99996948242188, b * 147.18402099609375, b * 201.99996948242188, b * 153.18402099609375);
      j.bezierCurveTo(b * 196.99996948242188, b * 164.18402099609375, b * 197.99996948242188, b * 169.18402099609375, b * 201.99996948242188, b * 174.18402099609375);
      j.bezierCurveTo(b * 194.99996948242188, b * 184.18402099609375, b * 196.99996948242188, b * 187.18402099609375, b * 200.99996948242188, b * 193.18402099609375);
      j.bezierCurveTo(b * 185.99996948242188, b * 195.18402099609375, b * 181.99996948242188, b * 201.18402099609375, b * 174.99996948242188, b * 210.18402099609375);
      Rb(j, undefined, c[4], b * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 176.99996948242188, b * 101.29513549804688);
      j.bezierCurveTo(b * 181.99996948242188, b * 108.29513549804688, b * 189.99996948242188, b * 110.29513549804688, b * 195.99996948242188, b * 107.29513549804688);
      j.bezierCurveTo(b * 197.99996948242188, b * 121.29513549804688, b * 200.99996948242188, b * 122.29513549804688, b * 206.99996948242188, b * 122.29513549804688);
      j.bezierCurveTo(b * 201.99996948242188, b * 138.29513549804688, b * 204.99996948242188, b * 142.29513549804688, b * 211.99996948242188, b * 148.29513549804688);
      j.bezierCurveTo(b * 201.99996948242188, b * 156.29513549804688, b * 205.99996948242188, b * 167.29513549804688, b * 213.99996948242188, b * 173.29513549804688);
      j.bezierCurveTo(b * 204.99996948242188, b * 181.29513549804688, b * 204.99996948242188, b * 187.29513549804688, b * 205.99996948242188, b * 193.29513549804688);
      j.bezierCurveTo(b * 190.99996948242188, b * 198.29513549804688, b * 181.99996948242188, b * 205.29513549804688, b * 174.99996948242188, b * 214.29513549804688);
      Rb(j, undefined, c[4], b * 3);
      j.restore();
    }
    j.translate(i.width / 2, i.height / 2);
    if (!f) {
      j.globalAlpha = 0.5;
      Fb(j, -d, -o, l, n + g, h);
      Rb(j, c[0]);
      if (e) {
        j.rotate(Math.PI);
      }
      j.globalAlpha = 1;
      Fb(j, -d, -o, l, n, h);
      Rb(j, c[1], c[2], 4);
      j.globalAlpha = 1;
      Fb(j, b * 35 - d, b * 20 - o, l - b * 50, n - b * 50, h - b * 10);
      Rb(j, c[3]);
    }
    if (f == 3) {
      j.translate(-i.width / 2, -i.height / 2);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 121, b * 190);
      j.bezierCurveTo(b * 129, b * 186, b * 137, b * 183, b * 135, b * 163);
      j.bezierCurveTo(b * 131, b * 135, b * 153, b * 127, b * 177, b * 124);
      j.bezierCurveTo(b * 198, b * 120, b * 208, b * 122, b * 226, b * 128);
      j.bezierCurveTo(b * 261, b * 112, b * 271, b * 126, b * 287, b * 147);
      j.bezierCurveTo(b * 310, b * 163, b * 304, b * 183, b * 283, b * 196);
      j.bezierCurveTo(b * 296, b * 249, b * 278, b * 262, b * 253, b * 263);
      j.bezierCurveTo(b * 210, b * 264, b * 188, b * 252, b * 177, b * 234);
      j.bezierCurveTo(b * 133, b * 242, b * 123, b * 241, b * 115, b * 225);
      j.bezierCurveTo(b * 109, b * 206, b * 115, b * 193, b * 121, b * 190);
      j.closePath();
      Rb(j, c[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 219, b * 144);
      j.bezierCurveTo(b * 251, b * 121, b * 277, b * 136, b * 276, b * 159);
      j.bezierCurveTo(b * 276, b * 176, b * 273, b * 191, b * 242, b * 193);
      j.bezierCurveTo(b * 226, b * 228, b * 155, b * 219, b * 150, b * 183);
      j.bezierCurveTo(b * 142, b * 144, b * 174, b * 127, b * 219, b * 144);
      j.closePath();
      Rb(j, c[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 123, b * 214);
      j.bezierCurveTo(b * 119, b * 198, b * 129, b * 189, b * 146, b * 194);
      j.bezierCurveTo(b * 158, b * 201, b * 165, b * 218, b * 147, b * 226);
      j.bezierCurveTo(b * 135, b * 230, b * 125, b * 222, b * 123, b * 214);
      j.closePath();
      Rb(j, c[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 257, b * 199);
      j.bezierCurveTo(b * 264, b * 199, b * 275, b * 213, b * 261, b * 220);
      j.bezierCurveTo(b * 246, b * 225, b * 235, b * 200, b * 257, b * 199);
      j.closePath();
      Rb(j, c[5]);
      j.translate(b * -5, b * 55);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 186, b * 123);
      j.bezierCurveTo(b * 198, b * 115, b * 219, b * 110, b * 219, b * 123);
      j.bezierCurveTo(b * 216, b * 135, b * 171, b * 143, b * 186, b * 123);
      j.closePath();
      Rb(j, c[5]);
      j.translate(b * 5, b * -55);
      j.translate(b * -5, b * 15);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 171, b * 241);
      j.bezierCurveTo(b * 189, b * 234, b * 200, b * 248, b * 189, b * 254);
      j.bezierCurveTo(b * 179, b * 260, b * 158, b * 246, b * 171, b * 241);
      j.closePath();
      Rb(j, c[5]);
    } else if (f == 4) {
      j.translate(-i.width / 2, -i.height / 2);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 30, b * 167);
      j.bezierCurveTo(b * 47, b * 144, b * 64, b * 140, b * 80, b * 147);
      j.bezierCurveTo(b * 95, b * 154, b * 95, b * 159, b * 100, b * 179);
      j.bezierCurveTo(b * 105, b * 202, b * 95, b * 218, b * 69, b * 218);
      j.bezierCurveTo(b * 48, b * 236, b * 26, b * 223, b * 28, b * 213);
      j.bezierCurveTo(b * 28, b * 205, b * 29, b * 199, b * 32, b * 195);
      j.bezierCurveTo(b * 21, b * 183, b * 27, b * 173, b * 30, b * 167);
      j.closePath();
      Rb(j, c[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 26, b * 145);
      j.bezierCurveTo(b * 32, b * 138, b * 37, b * 137, b * 40, b * 139);
      j.bezierCurveTo(b * 43, b * 140, b * 41, b * 150, b * 31, b * 159);
      j.bezierCurveTo(b * 23, b * 166, b * 17, b * 158, b * 26, b * 145);
      j.closePath();
      Rb(j, c[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 13, b * 193);
      j.bezierCurveTo(b * 21, b * 187, b * 30, b * 190, b * 20, b * 202);
      j.bezierCurveTo(b * 13, b * 208, b * 7, b * 202, b * 13, b * 193);
      j.closePath();
      Rb(j, c[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 121, b * 190);
      j.bezierCurveTo(b * 129, b * 186, b * 137, b * 183, b * 135, b * 163);
      j.bezierCurveTo(b * 131, b * 135, b * 153, b * 127, b * 177, b * 124);
      j.bezierCurveTo(b * 198, b * 120, b * 208, b * 122, b * 226, b * 128);
      j.bezierCurveTo(b * 261, b * 112, b * 271, b * 126, b * 287, b * 147);
      j.bezierCurveTo(b * 310, b * 163, b * 304, b * 183, b * 283, b * 196);
      j.bezierCurveTo(b * 296, b * 249, b * 278, b * 262, b * 253, b * 263);
      j.bezierCurveTo(b * 210, b * 264, b * 188, b * 252, b * 177, b * 234);
      j.bezierCurveTo(b * 133, b * 242, b * 123, b * 241, b * 115, b * 225);
      j.bezierCurveTo(b * 109, b * 206, b * 115, b * 193, b * 121, b * 190);
      j.closePath();
      Rb(j, c[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 335, b * 196);
      j.bezierCurveTo(b * 312, b * 208, b * 300, b * 185, b * 309, b * 167);
      j.bezierCurveTo(b * 314, b * 141, b * 339, b * 127, b * 359, b * 144);
      j.bezierCurveTo(b * 363, b * 148, b * 364, b * 150, b * 364, b * 150);
      j.bezierCurveTo(b * 392, b * 143, b * 396, b * 183, b * 378, b * 204);
      j.bezierCurveTo(b * 367, b * 215, b * 339, b * 208, b * 335, b * 196);
      j.closePath();
      Rb(j, c[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 349, b * 212);
      j.bezierCurveTo(b * 339, b * 216, b * 334, b * 208, b * 341, b * 203);
      j.bezierCurveTo(b * 353, b * 198, b * 361, b * 205, b * 349, b * 212);
      j.closePath();
      Rb(j, c[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 46, b * 165);
      j.bezierCurveTo(b * 55, b * 148, b * 85, b * 157, b * 83, b * 175);
      j.bezierCurveTo(b * 99, b * 185, b * 89, b * 212, b * 66, b * 204);
      j.bezierCurveTo(b * 55, b * 212, b * 43, b * 212, b * 41, b * 202);
      j.bezierCurveTo(b * 39, b * 194, b * 42, b * 187, b * 49, b * 185);
      j.bezierCurveTo(b * 44, b * 175, b * 45, b * 172, b * 46, b * 165);
      j.closePath();
      Rb(j, c[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 219, b * 144);
      j.bezierCurveTo(b * 251, b * 121, b * 277, b * 136, b * 276, b * 159);
      j.bezierCurveTo(b * 276, b * 176, b * 273, b * 191, b * 242, b * 193);
      j.bezierCurveTo(b * 226, b * 228, b * 155, b * 219, b * 150, b * 183);
      j.bezierCurveTo(b * 142, b * 144, b * 174, b * 127, b * 219, b * 144);
      j.closePath();
      Rb(j, c[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 123, b * 214);
      j.bezierCurveTo(b * 119, b * 198, b * 129, b * 189, b * 146, b * 194);
      j.bezierCurveTo(b * 158, b * 201, b * 165, b * 218, b * 147, b * 226);
      j.bezierCurveTo(b * 135, b * 230, b * 125, b * 222, b * 123, b * 214);
      j.closePath();
      Rb(j, c[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 257, b * 199);
      j.bezierCurveTo(b * 264, b * 199, b * 275, b * 213, b * 261, b * 220);
      j.bezierCurveTo(b * 246, b * 225, b * 235, b * 200, b * 257, b * 199);
      j.closePath();
      Rb(j, c[5]);
      j.translate(b * -5, b * 55);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 186, b * 123);
      j.bezierCurveTo(b * 198, b * 115, b * 219, b * 110, b * 219, b * 123);
      j.bezierCurveTo(b * 216, b * 135, b * 171, b * 143, b * 186, b * 123);
      j.closePath();
      Rb(j, c[5]);
      j.translate(b * 5, b * -55);
      j.translate(b * -5, b * 15);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 171, b * 241);
      j.bezierCurveTo(b * 189, b * 234, b * 200, b * 248, b * 189, b * 254);
      j.bezierCurveTo(b * 179, b * 260, b * 158, b * 246, b * 171, b * 241);
      j.closePath();
      Rb(j, c[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(b * 367, b * 164);
      j.bezierCurveTo(b * 380, b * 160, b * 391, b * 185, b * 371, b * 189);
      j.bezierCurveTo(b * 362, b * 192, b * 354, b * 191, b * 350, b * 185);
      j.bezierCurveTo(b * 326, b * 205, b * 314, b * 182, b * 316, b * 171);
      j.bezierCurveTo(b * 317, b * 150, b * 332, b * 143, b * 347, b * 147);
      j.bezierCurveTo(b * 361, b * 151, b * 366, b * 158, b * 367, b * 164);
      j.closePath();
      Rb(j, c[4]);
    }
    return i;
  }
  function Qt(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 121;
    f.height = b * 130;
    g.translate(0, b * 20);
    if (d == 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 6, b * 23);
      g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
      g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
      g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
      g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
      g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
      g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
      g.closePath();
      Rb(g, undefined, c[3], b * 13);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 6, b * 23);
    g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
    g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
    g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
    g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
    g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
    g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
    g.closePath();
    Rb(g, c[1], c[2], b * 4);
    if (e == 1) {
      g.translate(0, b * 5);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      Rb(g, br, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      Rb(g, Tn, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      Rb(g, br, c[0], b * 10);
      if (d == 1) {
        g.translate(b * -6, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 67, b * 30);
        g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
        Rb(g, undefined, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 70, b * 17);
        g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
        Rb(g, undefined, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 76, b * 8);
        g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
        Rb(g, Yk, c[3], b * 18);
        g.translate(-6, b * 0);
      } else {
        g.translate(b * -6, b * -5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      Rb(g, An, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      Rb(g, ca, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      Rb(g, undefined, c[2], b * 10);
    } else {
      if (d == 1) {
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        Rb(g, undefined, c[3], b * 18);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        Rb(g, undefined, c[3], b * 18);
      } else {
        g.translate(0, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        Rb(g, undefined, c[0], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        Rb(g, Yk, c[0], b * 7);
        g.translate(0, b * 5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 108, b * 27);
      g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
      g.closePath();
      Rb(g, Fn, c[2], b * 7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 79, b * 30);
      g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
      g.closePath();
      Rb(g, w, c[2], b * 7);
    }
    return f;
  }
  function Rt(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = (d = c * 450) / 2;
    var a = (o = c * 145) / 2;
    var n = c * 10;
    var h = c * 300;
    var g = c * 30;
    var l = h / 2;
    var b = g / 2;
    if (f) {
      var d = c * 145;
      var o = c * 450;
      i.width = d;
      i.height = o;
      j.rotate(Math.PI / 2);
      j.save();
      j.globalAlpha = 0.5;
      Fb(j, c * 100, c * -110, h, g, n);
      Rb(j, e[0]);
      j.translate(c * 178, c * -98);
      Fb(j, -l, -b - c * 6, c * 100, c * 100, n);
      Rb(j, e[0]);
      j.translate(c * -50, c * 5);
      Fb(j, c * 220, c * -15, c * 90, c * 90, n);
      Rb(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(c * 250, c * -63);
      Fb(j, -l - c * 20, -b, h, g, n);
      Rb(j, e[1], e[2], 4);
      j.translate(c * -70, c * -40);
      Fb(j, -l - c * 20, -b, c * 100, c * 100, n);
      Rb(j, e[3], e[4], 4);
      j.translate(c * -70, c * 15);
      Fb(j, c * 220, c * -22, c * 90, c * 90, n);
      Rb(j, e[3], e[4], 4);
      Fb(j, c * 230, c * -12, c * 55, c * 55, n);
      Rb(j, e[5]);
      j.translate(c * -70, 0);
      Fb(j, c * -15, c * -2, c * 60, c * 60, n);
      Rb(j, e[5]);
      j.restore();
    } else {
      i.width = d;
      i.height = o;
      j.save();
      j.globalAlpha = 0.5;
      j.translate(k, a + c * 10);
      Fb(j, -l, -b, h, g, n);
      Rb(j, e[0]);
      j.translate(c * -65, c * -25);
      Fb(j, -l, -b - c * 6, c * 100, c * 100, c * 15);
      Rb(j, e[0]);
      j.translate(c * -35, c * -5);
      Fb(j, c * 220, c * -15, c * 90, c * 90, c * 15);
      Rb(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(c * 240, c * 70);
      Fb(j, -l, -b, h, g, n);
      Rb(j, e[1], e[2], 4);
      j.translate(c * -60, c * -40);
      Fb(j, -l - c * 20, -b, c * 100, c * 100, c * 15);
      Rb(j, e[3], e[4], 4);
      j.translate(c * -55, c * 10);
      Fb(j, c * 220, c * -22, c * 90, c * 90, c * 15);
      Rb(j, e[3], e[4], 4);
      Fb(j, c * 240, c * -12, c * 55, c * 55, c * 12);
      Rb(j, e[5]);
      j.translate(c * 45, c * 0);
      Fb(j, c * -145, c * -2, c * 60, c * 60, c * 12);
      Rb(j, e[5]);
      j.restore();
    }
    return i;
  }
  (function () {
    const a = {
      ᐃΔᐃΔⵠⵠⵠ: 4109460,
      ⵠⵠᐃⲆΔⲆᐃ: 8230253,
      ᐃⲆᐃⲆᐃΔΔ: 16494300,
      ᐃᐃΔΔᐃⵠΔ: 13251389
    };
  })();
  function St(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    Fb(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    Fb(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    Rb(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    Rb(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    Rb(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    Rb(e, c[1], c[2], a * 12.5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 346);
    e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
    e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
    e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
    e.closePath();
    Rb(e, c[3]);
    return d;
  }
  function Tt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 321;
    d.height = a * 284;
    e.translate(a * 100, a * 30);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    Rb(e, undefined, c[4], a * 4);
    e.translate(a * -100, a * -30);
    e.translate(a * 10, a * 70);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    Rb(e, Tn, c[4], a * 4);
    e.translate(a * 20, a * -80);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    Rb(e, Tn, c[4], a * 4);
    return d;
  }
  function Ut(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 283;
    f.height = b * 224;
    g.translate(0, b * 15);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    g.closePath();
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    Rb(g, d[0]);
    g.translate(0, b * -15);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    Rb(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    Rb(g, gs, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    Rb(g, Yk, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    Rb(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    Rb(g, Aq, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    Rb(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    Rb(g, d[1], d[2], b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    Rb(g, dk, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    Rb(g, wh, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    Rb(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    Rb(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    Rb(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    Rb(g, undefined, d[1], b * 20);
    Wb(g, b * 101, b * 155, b * 20.591260281974);
    Rb(g, d[3]);
    Wb(g, b * 180, b * 155, b * 20.591260281974);
    Rb(g, d[3]);
    Wb(g, b * 95, b * 148, b * 7.211102550927978);
    Rb(g, d[4]);
    Wb(g, b * 173, b * 148, b * 7.211102550927978);
    Rb(g, d[4]);
    if (e === 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 191, b * 107);
      g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
      g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
      g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
      g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
      g.closePath();
      Rb(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 206, b * 98);
      g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
      g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
      g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
      g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
      g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
      g.closePath();
      Rb(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 172, b * 111);
      g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
      g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
      g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
      g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
      g.closePath();
      Rb(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 202, b * 125);
      g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
      g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
      g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
      g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
      g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
      g.closePath();
      Rb(g, d[2]);
    }
    return f;
  }
  function Vt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    Fb(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    Rb(e, c[0]);
    Wb(e, a * 122, a * 480, a * 18.439088914585774);
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    Rb(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    Fb(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    Rb(e, c[4], c[5], a * 12.5);
    Wb(e, a * 122, a * 480, a * 18.439088914585774);
    Rb(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    Rb(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 345);
    e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
    e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
    e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
    e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
    e.closePath();
    Rb(e, c[3]);
    return d;
  }
  function Wt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    Fb(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    Rb(e, c[0]);
    Wb(e, a * 121, a * 480, a * 20.396078054371138);
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    Rb(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    Fb(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    Rb(e, c[4], c[5], a * 12.5);
    Wb(e, a * 121, a * 480, a * 20.396078054371138);
    Rb(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    Rb(e, c[1], c[2], a * 12.5);
    return d;
  }
  function Xt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 131;
    d.height = a * 121;
    e.translate(0, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    return d;
  }
  function Yt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    Fb(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    Ob(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    Rb(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    Fb(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    Rb(e, c[4], c[5], a * 12.5);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    Ob(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    Rb(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    Rb(e, c[3]);
    return d;
  }
  function Zt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 250;
    e.translate(a * -135, a * -75);
    e.globalAlpha = b ? 0.8 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    Rb(e, c[0]);
    Wb(e, a * 160.5, a * 243.03125, a * 7);
    Rb(e, c[0]);
    Wb(e, a * 227.5, a * 242.03125, a * 7);
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    Rb(e, c[0], c[0], a * 5);
    Wb(e, a * 194, a * 298, a * 9);
    Rb(e, c[0], c[0], a * 5);
    e.globalAlpha = 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    Rb(e, c[1], c[2], a * 5);
    Wb(e, a * 160.5, a * 243.03125, a * 7);
    Rb(e, c[1], c[2], a * 5);
    Wb(e, a * 227.5, a * 242.03125, a * 7);
    Rb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    Rb(e, c[1], c[2], a * 7);
    Wb(e, a * 194, a * 298, a * 9);
    Rb(e, c[1], c[2], a * 7);
    return d;
  }
  function $t(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 112;
    e.translate(0, a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    Rb(e, c[1], c[2], a * 8);
    return d;
  }
  function _t(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    Rb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    Rb(d, Tg, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    Rb(d, gs, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    Rb(d, vh, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    Rb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    Rb(d, Aq, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  const au = 3;
  function bu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 118;
    d.height = a * 114;
    e.translate(0, a * 10);
    Wb(e, a * 42, a * 43, a * 24.758836806279895);
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    Rb(e, c[0]);
    e.translate(0, a * -10);
    Wb(e, a * 42, a * 43, a * 24.758836806279895);
    Rb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    Rb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    Rb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 16);
    e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
    e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
    e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
    e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 30);
    e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
    e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
    e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
    e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 21);
    e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
    e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
    e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
    e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 36);
    e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
    e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 34);
    e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
    e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 35);
    e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
    e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 46);
    e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
    e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
    e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 42);
    e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
    e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 57);
    e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
    e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 52);
    e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
    e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
    e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 61);
    e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
    e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
    e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 45);
    e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
    e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 53);
    e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
    e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
    e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
    e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 92, a * 71);
    e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
    e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
    e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 82);
    e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
    e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
    e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 72);
    e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
    e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 86);
    e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
    e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 46);
    e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
    e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
    e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
    e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
    e.closePath();
    Rb(e, c[5], c[6], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 60);
    e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
    e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
    e.closePath();
    Rb(e, c[7], c[8], a * 5);
    return d;
  }
  function cu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 350;
    d.height = a * 140;
    e.translate(a * -50, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.5, a * 222.0625);
    e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
    e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
    e.closePath();
    Rb(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.5, a * 241.0625);
    e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
    e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
    e.closePath();
    Rb(e, c[0], c[1], a * 8);
    Wb(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
    Rb(e, c[2]);
    Wb(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
    Rb(e, c[2]);
    Wb(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
    Rb(e, c[2]);
    Wb(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
    Rb(e, c[2]);
    Wb(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
    Rb(e, c[2]);
    Wb(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151.5, a * 212.0625);
    e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
    e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 209.0625);
    e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
    e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188.5, a * 183.0625);
    e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
    e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 261.5, a * 202.0625);
    e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
    e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 240.5, a * 231.0625);
    e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
    e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    return d;
  }
  const du = String.fromCharCode;
  const eu = du(101);
  const fu = du(118);
  const gu = du(97);
  const hu = du(108);
  function iu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 217;
    d.height = a * 215;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 113);
    e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
    e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
    e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
    e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 103);
    e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
    e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
    e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
    e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
    e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 46);
    e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
    e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
    e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
    e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
    e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
    e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
    e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
    e.closePath();
    Rb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 50);
    e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
    e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
    e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
    e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
    e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
    e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
    e.closePath();
    Rb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 40);
    e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
    e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
    e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 48);
    e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
    e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
    e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
    e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 89, a * 61);
    e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
    e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
    e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
    e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 59);
    e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
    e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
    e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
    e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 62);
    e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
    e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
    e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
    e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
    e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
    e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
    e.closePath();
    Rb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 130);
    e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
    e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
    e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
    e.closePath();
    Rb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 119);
    e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
    e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
    e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
    e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
    e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
    e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
    e.closePath();
    Rb(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 64);
    e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
    e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
    e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
    e.closePath();
    Rb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 65);
    e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
    e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
    e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
    e.closePath();
    Rb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 112);
    e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
    e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
    e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
    e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
    e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
    e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
    e.closePath();
    Rb(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 114);
    e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
    e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
    e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
    e.closePath();
    Rb(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85, a * 152);
    e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
    e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
    e.closePath();
    e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
    Rb(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 166);
    e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
    e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
    e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
    e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
    e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
    e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
    e.closePath();
    Rb(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 168);
    e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
    e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
    e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
    e.closePath();
    Rb(e, c[10]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 169);
    e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
    e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
    e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
    e.closePath();
    Rb(e, c[9], c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 107);
    e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
    e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
    e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
    e.closePath();
    Rb(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 108);
    e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
    e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
    e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
    e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
    e.closePath();
    Rb(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 106);
    e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
    e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
    e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
    e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
    e.closePath();
    Rb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 69, a * 178);
    e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
    e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
    Rb(e, An, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 161);
    e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
    e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
    Rb(e, Fn, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 91, a * 29);
    e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
    e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
    Rb(e, undefined, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 33);
    e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
    e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
    Rb(e, vh, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 98);
    e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
    e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
    e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
    e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
    e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
    e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
    e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
    e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
    e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
    Rb(e, mg, c[3], a * 4);
    return d;
  }
  function ju(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 154;
    d.height = a * 261;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 43);
    e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
    e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
    e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45, a * 29);
    e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
    e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
    e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
    e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 56);
    e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
    e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
    e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
    e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 81);
    e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
    e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
    e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 124);
    e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
    e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
    e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 170);
    e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
    e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
    e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 208);
    e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
    e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
    e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
    e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
    e.closePath();
    Rb(e, c[3]);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 81);
    e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
    e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
    e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
    e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
    e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
    e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
    e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
    e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
    e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
    e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
    e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 123);
    e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
    e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
    e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
    e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
    e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
    e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
    e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
    e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
    e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
    e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
    e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
    e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
    e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
    e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
    e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
    e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
    e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
    e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
    e.closePath();
    Rb(e, c[4], c[5], a * 4);
    Wb(e, a * 107, a * 152, a * 9);
    Rb(e, c[6]);
    Wb(e, a * 105, a * 173, a * 9);
    Rb(e, c[6]);
    Wb(e, a * 87, a * 161, a * 9);
    Rb(e, c[6]);
    Wb(e, a * 106, a * 147, a * 4);
    Rb(e, c[7]);
    Wb(e, a * 104, a * 167, a * 4);
    Rb(e, c[7]);
    Wb(e, a * 86, a * 154, a * 4);
    Rb(e, c[7]);
    return d;
  }
  function lu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 70;
    var a = b * 90;
    var j = b * 4;
    var h = b * 5;
    e.width = i;
    e.height = a;
    f.save();
    f.translate(b * -80, b * -70 + h);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    Rb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + h);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    Rb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + h);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    Rb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * 3, b * -93 + h);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    Rb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    Rb(f, d[0], d[1], j);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    Rb(f, d[0], d[1], j);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    Rb(f, d[0], d[1], j);
    f.restore();
    f.save();
    f.translate(b * 3, b * -93);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    Rb(f, d[0], d[1], j);
    f.restore();
    return e;
  }
  const mu = 16;
  const nu = 1;
  function ou(f, e, i, j, k, n, o, p, q, g, l = 0) {
    var r = document.createElement("canvas");
    var b = r.getContext("2d");
    n = n ? n * f : 0;
    var d = Math.floor(f * i);
    b.font = d + "px Baloo Paaji";
    b.lineJoin = "round";
    p *= f;
    var s = o ? p * 2 : 0;
    if (q) {
      var m = Math.min(b.measureText(e).width + f * 2 + s, q);
    } else {
      m = b.measureText(e).width + f * 2 + s + f * l * 2;
    }
    d = f * (d + n + l) + s;
    r.width = m;
    r.height = d;
    if (o) {
      b.fillStyle = o;
      Fb(b, 0, 0, m, d, p * 2);
      b.fill();
      b.translate(p, p);
    }
    b.textBaseline = "middle";
    b.font = i + "px Baloo Paaji";
    b.lineJoin = "round";
    if (k) {
      b.beginPath();
      b.fillStyle = k;
      b.fillText(e, 0, d / 2 + n - s / 2, m);
    }
    b.beginPath();
    if (g) {
      b.strokeStyle = g;
      b.lineWidth = l;
      b.strokeText(e, l, (d - s) / 2, m);
    }
    b.fillStyle = j;
    b.fillText(e, l, (d - s) / 2, m);
    return r;
  }
  function pu(b, c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var a = b * 220;
    var j = b * 220;
    var h = b * 100;
    var g = h / 4;
    f.width = a;
    f.height = j;
    i.translate(a / 2, j / 2);
    i.globalAlpha = c ? 0.5 : 1;
    if (!c) {
      i.translate(b * 0, b * -8);
    }
    Ob(i, 7, h, g);
    Rb(i, c ? d[0] : d[1]);
    i.globalAlpha = 1;
    if (e == 0) {
      Ob(i, 6, h * 0.65, g * 0.65);
      Rb(i, d[2]);
    } else if (e == 1) {
      i.translate(b * 20, b * 20);
      Ob(i, 6, h * 0.45, g * 0.4);
      Rb(i, d[2]);
    }
    return f;
  }
  function qu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 220;
    var a = b * 230;
    var j = b * 100;
    var h = j / 4;
    var g = b * 20;
    e.width = i;
    e.height = a;
    f.translate(i / 2, a / 2 + g);
    f.globalAlpha = 0.5;
    Ob(f, 7, j, h);
    Rb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, -g);
    Ob(f, 7, j, h);
    Rb(f, d[1]);
    Ob(f, 6, j * 0.65, h * 0.65);
    Rb(f, d[2]);
    return e;
  }
  const ru = 10;
  function su(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 120;
    var a = b * 150;
    var j = b * 60;
    var h = j / 4;
    var g = b * 15;
    e.width = i;
    e.height = a;
    f.save();
    f.translate(i / 2 + b * 0, a / 2 + b * 0 + g);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    Ob(f, 8, j, h);
    Rb(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 11, a / 2 + b * 12);
    f.globalAlpha = 1;
    f.rotate(Math.PI / 3);
    f.translate(0, -g);
    Ob(f, 8, j, h);
    Rb(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 9, a / 2 - b * 12);
    f.rotate(Math.PI / 2.8);
    Ob(f, 5, j * 0.5, h * 0.4);
    Rb(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 19, a / 2 + b * 5);
    f.rotate(Math.PI / 1);
    Ob(f, 5, j * 0.5, h * 0.4);
    Rb(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 8, a / 2 + b * 20);
    f.rotate(Math.PI / 2.25);
    Ob(f, 5, j * 0.5, h * 0.4);
    Rb(f, d[2]);
    f.restore();
    return e;
  }
  function tu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 180;
    var a = b * 210;
    var j = (g = b * 60) / 4;
    var k = b * 20;
    e.width = i;
    e.height = a;
    f.save();
    f.translate(i / 2 - b * 0, a / 2 - b * 35 + k);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    Ob(f, 5, g, j);
    Rb(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 10, a / 2 + b * 15 + k);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    Ob(f, 5, g, j);
    Rb(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 50, a / 2 + b * 40 + k);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    f.translate(0, b * -20);
    Ob(f, 5, g, j);
    Rb(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 0, a / 2 - b * 35);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(b * 0, b * -20);
    Ob(f, 5, g, j);
    Rb(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 10, a / 2 + b * 15);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    Ob(f, 5, g, j);
    Rb(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 50, a / 2 + b * 40);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    Ob(f, 5, g, j);
    Rb(f, d[1]);
    f.restore();
    var g;
    j = (g = b * 30) / 4;
    f.save();
    f.translate(i / 2 + b * 5, a / 2 - b * 20);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    Ob(f, 5, g, j);
    Rb(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 0, a / 2 + b * 10);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    Ob(f, 5, g, j);
    Rb(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 45, a / 2 + b * 35);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    Ob(f, 5, g, j);
    Rb(f, d[2]);
    f.restore();
    Wb(f, i / 2 - b * 7, a / 2 + b * 7, 5);
    Rb(f, d[2]);
    return e;
  }
  const uu = 12;
  function vu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 80;
    c.height = a * 100;
    d.scale(0.5, 0.5);
    d.translate(10, 15);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    Rb(d, An, b[0], a * 10);
    d.translate(0, -10);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    Rb(d, b[1], b[2], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    Rb(d, undefined, b[2], a * 8);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
    Rb(d, undefined, b[2], a * 8);
    return c;
  }
  function wu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 18;
    var a = b * 18;
    e.width = i;
    e.height = a;
    var j = b * 9;
    var k = b * 9;
    var m = b * 8;
    f.save();
    f.translate(j, k);
    f.globalAlpha = 1;
    Wb(f, 0, 0, m);
    Rb(f, d[0]);
    m = b * 3;
    j = 0;
    k = b * -3;
    f.translate(j, k);
    f.globalAlpha = 1;
    Wb(f, 0, 0, m);
    Rb(f, d[1]);
    f.restore();
    return e;
  }
  function xu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 140;
    var a = b * 150;
    var j = b * 10;
    var h = b * 4;
    e.width = i;
    e.height = a;
    f.translate(b * -50, b * -38 + j);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    Rb(f, d[0]);
    f.translate(0, 0 - j);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    Rb(f, d[1], d[2], h);
    return e;
  }
  function yu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 220;
    d.height = a * 180;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -90, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    Rb(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    Rb(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    Rb(e, An, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    Rb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    Rb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    Rb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 140, a * 265.33333587646484);
    e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
    e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
    e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
    e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
    e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
    e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
    e.closePath();
    Rb(e, Tn, c[4], a * 6);
    e.globalAlpha = 0.5;
    e.scale(1, 1);
    e.translate(a * 105, a * 155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
    e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
    e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
    e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
    e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
    e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
    e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
    e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
    e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
    e.closePath();
    Rb(e, c[5], c[5], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -110, a * -155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    Rb(e, c[2], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    Rb(e, An, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    Rb(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    Rb(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    Rb(e, c[0], c[0], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    Rb(e, jq, c[1], a * 2);
    return d;
  }
  function zu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * c * 2;
    var a = b * c * 2;
    var j = i / 2;
    var h = a / 2;
    e.width = i;
    e.height = a;
    f.translate(j, h);
    Wb(f, 0, 0, b * c);
    Rb(f, d);
    return e;
  }
  function em(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 373;
    d.height = a * 314;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    Fb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    Rb(e, c[0], c[0], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    Rb(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    Fb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    Rb(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    Fb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    Rb(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    Fb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    Rb(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    Fb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    Rb(e, c[0], c[0], a * 6);
    Wb(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    Rb(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    Fb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    Rb(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    Fb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    Rb(e, c[5], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    Fb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    Rb(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    Fb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    Rb(e, c[6], c[4], a * 6);
    e.globalCompositeOperation = "destination-out";
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    Fb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    Rb(e, c[7], c[8], a * 6);
    e.globalCompositeOperation = "source-over";
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    Fb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    Rb(e, c[7], c[8], a * 6);
    e.globalAlpha = 1;
    e.save();
    Wb(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    Rb(e, c[3], c[4], a * 6);
    e.restore();
    return d;
  }
  function im(b, c, d, e, f) {
    var i = document.createElement("canvas");
    var a = i.getContext("2d");
    if (e == 0) {
      var j = b * 270;
      var k = b * 250;
      i.width = j;
      i.height = k;
      a.beginPath();
      a.moveTo(b * 140, b * 3);
      a.translate(b * -25, b * -20);
      a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
      a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      a.closePath();
      Rb(a, d[0]);
    } else if (e == 1) {
      j = b * 430;
      k = b * 350;
      i.width = j;
      i.height = k;
      a.beginPath();
      a.moveTo(b * 180, b * 5);
      a.translate(b * -30, b * -60);
      a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
      a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
      a.closePath();
      Rb(a, d[0]);
    } else if (e == 2) {
      j = b * 400;
      k = b * 300;
      i.width = j;
      i.height = k;
      a.beginPath();
      a.moveTo(b * 80, b * 52);
      a.translate(b * -40, b * -30);
      a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
      a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      a.closePath();
      Rb(a, d[0]);
    }
    return i;
  }
  function vu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 234;
    c.height = a * 183;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 25);
    d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
    d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    d.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
    d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    d.closePath();
    Rb(d, b[0], b[0], a * 4);
    return c;
  }
  const tm = 1;
  const nm = 3;
  function om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    Rb(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    Rb(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    Rb(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    Rb(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    Rb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    Rb(e, c[4]);
    Wb(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
    Rb(e, c[5]);
    Wb(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
    Rb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    Rb(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    Rb(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    Rb(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 296.5, a * 287.34375);
    e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
    e.closePath();
    Rb(e, Tn, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 289.34375);
    e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
    e.closePath();
    Rb(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 291.34375);
    e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
    e.closePath();
    Rb(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 161.34375);
    e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
    e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
    e.closePath();
    Rb(e, Yk, c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167.5, a * 248.34375);
    e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
    e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
    e.closePath();
    Rb(e, undefined, c[9], a * 3);
    return d;
  }
  function am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 277.34375);
    e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
    e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
    e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
    e.closePath();
    Rb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 214.34375);
    e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
    e.closePath();
    Rb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 247.34375);
    e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
    e.closePath();
    Rb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.5, a * 189.34375);
    e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
    e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
    e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
    e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
    e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
    e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
    e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
    e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
    e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
    e.closePath();
    Rb(e, c[3], c[4], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 300.5, a * 147.34375);
    e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
    e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
    e.closePath();
    Rb(e, c[5], c[6], a * 12);
    Wb(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
    Rb(e, c[7]);
    Wb(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
    Rb(e, c[8]);
    return d;
  }
  const rm = 0;
  function sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 309;
    d.height = a * 287;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    Rb(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    Rb(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    Rb(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    Rb(e, c[0], c[0], a * 10);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 109.5, a * 51.53125);
    e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
    Rb(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 51.53125);
    e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
    e.closePath();
    Rb(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 63.53125);
    e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
    e.closePath();
    Rb(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.5, a * 84.53125);
    e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
    e.closePath();
    Rb(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 149.5, a * 108.53125);
    e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
    e.closePath();
    Rb(e, c[1], c[2], a * 7);
    return d;
  }
  function hm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 130;
    var a = b * 142;
    var j = i / 2;
    var h = a / 2;
    e.width = i;
    e.height = a;
    f.translate(j, h + b * 7);
    f.globalAlpha = c ? 0.5 : 1;
    Wb(f, 0, 0, b * 60);
    Rb(f, d[0]);
    f.translate(0, b * -7);
    f.globalAlpha = 1;
    Wb(f, 0, 0, b * 60);
    Rb(f, d[1], d[2], b * 4);
    Wb(f, 0, 0, b * 40);
    Rb(f, d[3]);
    Wb(f, 0, 0, b * 25);
    Rb(f, d[4], d[5], b * 8);
    return e;
  }
  const gm = 10;
  function lm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 142;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 80);
    e.rotate(0.2);
    Ob(e, 9, a * 60, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 71);
    e.rotate(0.2);
    Ob(e, 9, a * 60, a * 10);
    Rb(e, c[1], c[2], 4);
    e.rotate(-0.32);
    Ob(e, 9, a * 38, a * 10);
    Rb(e, c[3], c[4], 4);
    e.rotate(0.68);
    Ob(e, 9, a * 20, a * 8);
    Rb(e, c[5], c[6], 6);
    e.restore();
    return d;
  }
  function um(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 148;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 85);
    e.rotate(1.4);
    Ob(e, 7, a * 60, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 74);
    e.rotate(1.4);
    Ob(e, 7, a * 60, a * 10);
    Rb(e, c[1], c[2], 4);
    e.rotate(0.64);
    Ob(e, 7, a * 40, a * 10);
    Rb(e, c[3], c[4], 4);
    e.rotate(0.12);
    Ob(e, 7, a * 23, a * 5);
    e.restore();
    Rb(e, c[5]);
    return d;
  }
  function bm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 128;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 7);
    e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
    e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
    e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
    e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
    e.closePath();
    Rb(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 124);
    e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
    e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
    e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
    e.closePath();
    Rb(e, c[2], c[3], a * 1);
    return d;
  }
  function dm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(a * 15, a * 15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    Rb(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -15, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    Rb(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    Rb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    Rb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    Rb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    Rb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    Rb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    Rb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    Rb(d, ca, b[2], a * 4);
    return c;
  }
  function vm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 101;
    e.translate(a * 0, a * 5);
    if (ub === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      Wb(e, a * 44, a * 55, a * 41);
      Rb(e, c[0]);
    }
    e.globalAlpha = 1;
    Wb(e, a * 44, a * 45, a * 41);
    Rb(e, c[1], c[2], a * 4);
    Wb(e, a * 44, a * 45, a * 31);
    Rb(e, c[3]);
    e.save();
    e.translate(a * 45, a * 45);
    Fb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    Rb(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    Fb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    Rb(e, c[4], c[4], a * 2);
    Wb(e, a * 45, a * 29, a * 7);
    Rb(e, c[5]);
    Wb(e, a * 45, a * 61, a * 7);
    Rb(e, c[5]);
    Wb(e, a * 28, a * 45, a * 7);
    Rb(e, c[5]);
    Wb(e, a * 62, a * 45, a * 7);
    Rb(e, c[5]);
    return d;
  }
  function mm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 125;
    d.height = a * 139;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 63, a * 79);
    e.rotate(1);
    Ob(e, 8, a * 60, a * 10);
    Rb(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 63, a * 69);
    e.rotate(1);
    Ob(e, 8, a * 60, a * 10);
    Rb(e, c[1], c[2], 4);
    e.rotate(0.56);
    Ob(e, 8, a * 40, a * 10);
    Rb(e, c[3], c[4], 4);
    e.rotate(0.28);
    Ob(e, 8, a * 28, a * 8);
    Rb(e, c[5]);
    e.restore();
    return d;
  }
  const cm = 16;
  function pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (ub === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(0.2);
      Ob(e, 9, a * 41, a * 10);
      e.restore();
      Rb(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.2);
    Ob(e, 9, a * 41, a * 10);
    Rb(e, c[1], c[2], a * 4);
    e.rotate(-0.32);
    Ob(e, 9, a * 32, a * 10);
    Rb(e, c[3], c[4], a * 4);
    e.rotate(0.68);
    Ob(e, 9, a * 23, a * 8);
    Rb(e, c[5], c[6], a * 6);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Fb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    Rb(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Fb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    Rb(e, c[4], c[4], a * 2);
    Wb(e, a * 45, a * 29, a * 7);
    Rb(e, c[5]);
    Wb(e, a * 45, a * 61, a * 7);
    Rb(e, c[5]);
    Wb(e, a * 28, a * 45, a * 7);
    Rb(e, c[5]);
    Wb(e, a * 62, a * 45, a * 7);
    Rb(e, c[5]);
    return d;
  }
  function Cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (ub === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1);
      Ob(e, 8, a * 41, a * 10);
      Rb(e, c[0]);
      e.restore();
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1);
    Ob(e, 8, a * 41, a * 10);
    Rb(e, c[1], c[2], a * 4);
    e.rotate(0.56);
    Ob(e, 8, a * 33, a * 10);
    Rb(e, c[3], c[4], a * 4);
    e.rotate(0.28);
    Ob(e, 8, a * 24, a * 8);
    Rb(e, c[5]);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Fb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    Rb(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Fb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    Rb(e, c[4], c[4], a * 2);
    Wb(e, a * 45, a * 29, a * 7);
    Rb(e, c[5]);
    Wb(e, a * 45, a * 61, a * 7);
    Rb(e, c[5]);
    Wb(e, a * 28, a * 45, a * 7);
    Rb(e, c[5]);
    Wb(e, a * 62, a * 45, a * 7);
    Rb(e, c[5]);
    return d;
  }
  function Tm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (ub === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1.4);
      Ob(e, 7, a * 41, a * 10);
      e.restore();
      Rb(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1.4);
    Ob(e, 7, a * 41, a * 10);
    Rb(e, c[1], c[2], a * 4);
    Ob(e, 7, a * 35, a * 10);
    Rb(e, c[3], c[4], a * 4);
    Ob(e, 7, a * 23, a * 5);
    e.restore();
    Rb(e, c[5]);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Fb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    Rb(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Fb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    Rb(e, c[4], c[4], a * 2);
    Wb(e, a * 45, a * 29, a * 7);
    Rb(e, c[5]);
    Wb(e, a * 45, a * 61, a * 7);
    Rb(e, c[5]);
    Wb(e, a * 28, a * 45, a * 7);
    Rb(e, c[5]);
    Wb(e, a * 62, a * 45, a * 7);
    Rb(e, c[5]);
    return d;
  }
  function fm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    Ob(e, 6, a * 146, a * 30);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    Ob(e, 6, a * 146, a * 30);
    e.restore();
    Rb(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Ob(e, 6, a * 105, a * 30);
    e.restore();
    Rb(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Ob(e, 6, a * 66, a * 30);
    e.restore();
    Rb(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Ob(e, 6, a * 31, a * 30);
    e.restore();
    Rb(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    Rb(e, br, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    Rb(e, hj, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    Rb(e, vh, c[2], a * 8);
    return d;
  }
  function zm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    Ob(e, 6, a * 146, a * 30);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    Ob(e, 6, a * 146, a * 30);
    e.restore();
    Rb(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Ob(e, 6, a * 105, a * 30);
    e.restore();
    Rb(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Ob(e, 6, a * 66, a * 30);
    e.restore();
    Rb(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 131, a * 116);
    Ob(e, 7, a * 17, a * 8);
    e.restore();
    Rb(e, c[6]);
    e.save();
    e.translate(a * 163, a * 168);
    Ob(e, 7, a * 25, a * 8);
    e.restore();
    Rb(e, c[6]);
    e.save();
    e.translate(a * 117, a * 151);
    Ob(e, 7, a * 11, a * 8);
    e.restore();
    Rb(e, c[6]);
    e.save();
    e.translate(a * 167, a * 122);
    Ob(e, 7, a * 12, a * 8);
    e.restore();
    Rb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    Rb(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    Rb(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    Rb(e, undefined, c[2], a * 8);
    return d;
  }
  const ym = 10;
  function wm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 115;
    d.height = a * 585;
    e.scale(-1, 1);
    e.translate(a * -110, 0);
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    Fb(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -10, a * -10);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    Fb(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    Rb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    Rb(e, c[5], c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    Rb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 427);
    e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
    Rb(e, undefined, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 448);
    e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
    Rb(e, Aq, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    Rb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    Rb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    Rb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    Rb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    Rb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    Rb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 113);
    e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
    e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    return d;
  }
  function Pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 648;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    Fb(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 43);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
    e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    Fb(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    Rb(e, Yk, c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    Rb(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    Rb(e, c[5], c[6], a * 8);
    e.save();
    e.translate(a * -46, a * -50);
    e.scale(2, 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 80);
    e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
    e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
    e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
    e.closePath();
    Rb(e, c[8]);
    e.restore();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    Rb(e, c[8], c[9], a * 8);
    e.scale(2, 2);
    e.translate(a * -23, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 69);
    e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
    e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
    e.closePath();
    Rb(e, c[10]);
    return d;
  }
  function Am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 165;
    d.height = a * 123;
    e.save();
    e.translate(a * 81, a * 65);
    Fb(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 81, a * 58);
    Fb(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    Rb(e, c[1], c[2], 4);
    e.save();
    e.translate(a * 81, a * 58);
    Fb(e, a * -69, a * -47, a * 138, a * 93, a * 15);
    e.restore();
    Rb(e, c[3], c[4], 4);
    e.save();
    e.translate(a * 79, a * 54);
    Fb(e, a * -34, a * -40, a * 68, a * 88, a * 13);
    e.restore();
    Rb(e, mg, c[5], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 13);
    e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
    e.closePath();
    Rb(e, undefined, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 13);
    e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
    e.closePath();
    Rb(e, undefined, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 6);
    e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
    e.closePath();
    Rb(e, undefined, c[7], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 6);
    e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
    e.closePath();
    Rb(e, undefined, c[7], 4);
    e.save();
    e.translate(a * 79, a * 113);
    Fb(e, a * -18, a * -2, a * 36, a * 4, a * 20);
    e.restore();
    Rb(e, undefined, c[8], 4);
    e.save();
    e.translate(a * 75, a * 118);
    Fb(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
    e.restore();
    Rb(e, c[8]);
    return d;
  }
  function km(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 626;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 129);
    e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
    e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
    e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
    e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    Rb(e, br, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 475);
    e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
    e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
    e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
    e.closePath();
    Rb(e, c[4], c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 496);
    e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
    Rb(e, js, c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 521);
    e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
    Rb(e, w, c[5], a * 8);
    return d;
  }
  function xm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 647;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    Fb(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    Fb(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    Rb(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    Rb(e, c[8]);
    return d;
  }
  function Jm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 108;
    d.height = a * 669;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    Fb(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    e.rotate(0);
    Fb(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    Rb(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    Rb(e, c[8]);
    return d;
  }
  function Mm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 135;
    d.height = a * 120;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 3.5, a * 55.25);
    e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
    e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
    e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
    e.closePath();
    Rb(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6.5, a * 43.25);
    e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
    e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
    e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
    e.closePath();
    Rb(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120.5, a * 62.25);
    e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
    e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
    e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
    e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
    e.closePath();
    Rb(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.5, a * 27);
    e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
    e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
    e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
    e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
    e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
    e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
    e.closePath();
    Rb(e, c[2], c[3], a * 7);
    return d;
  }
  function Bm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 304;
    d.height = a * 278;
    e.translate(a * 10, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -10, a * -25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    Rb(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    Rb(e, c[3], c[4], a * 15);
    return d;
  }
  function Dm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 200;
    d.height = a * 200;
    e.save();
    e.translate(a * 112, a * 158);
    Fb(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 170, a * 100);
    Fb(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
    e.restore();
    Rb(e, c[0]);
    return d;
  }
  function Im(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    Rb(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    Rb(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    Fb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    Rb(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    Fb(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    Rb(e, c[1], c[2], a * 5);
    return d;
  }
  function Em(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 106;
    d.height = a * 681;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    Fb(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    Fb(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    Rb(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    Rb(e, c[8]);
    return d;
  }
  function Sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 43;
    d.height = a * 209;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 21, a * 102.5);
    Fb(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    Rb(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.translate(0, a * 10);
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 21, a * 102.5);
    Fb(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    Rb(e, c[5], c[6], a * 4);
    e.translate(0, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    Rb(e, c[8]);
    return d;
  }
  function Qm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 501;
    d.height = a * 309;
    e.translate(0, a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 184);
    e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
    e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
    e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
    e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
    e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
    e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
    e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 116);
    e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
    e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
    e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
    e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
    e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
    e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
    e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
    e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
    e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
    e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
    e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
    e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
    e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
    e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 122, a * 191);
    e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
    e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
    e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
    e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
    e.closePath();
    Rb(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403, a * 182);
    e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
    e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
    e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
    e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
    e.closePath();
    Rb(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155, a * 157);
    e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
    e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
    e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
    e.closePath();
    Rb(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 347, a * 162);
    e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
    e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
    e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
    e.closePath();
    Rb(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 134);
    e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
    e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
    e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
    e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
    e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
    e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
    e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
    e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
    e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
    e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
    e.closePath();
    Rb(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 98);
    e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
    e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
    e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
    e.closePath();
    Rb(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 449, a * 97);
    e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
    e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
    e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
    e.closePath();
    Rb(e, c[3], c[2], a * 10);
    return d;
  }
  function _m(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 139);
    e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
    e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
    e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.save();
    e.translate(a * 86.5, a * 81.5);
    Fb(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 84.5, a * 79);
    Fb(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
    e.restore();
    Rb(e, c[3], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 54);
    e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
    e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
    e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
    e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
    e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
    e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
    e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 28, a * 24);
    e.rotate(0);
    Fb(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    Rb(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143, a * 23);
    e.rotate(0);
    Fb(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    Rb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 80);
    e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
    e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
    e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
    e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    Rb(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    Rb(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    Fb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    Rb(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    Fb(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    Rb(e, c[1], c[2], a * 5);
    return d;
  }
  const Fm = 0;
  function Rm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 92;
    d.height = a * 108;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 10);
    e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
    e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
    e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
    e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
    e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
    e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
    e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
    e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
    e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
    e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
    e.closePath();
    Rb(e, c[0], c[1], 4);
    return d;
  }
  function jm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 170;
    var a = b * 172;
    var j = i / 2;
    var h = a / 2;
    e.width = i;
    e.height = a;
    f.translate(j, h + b * 7);
    f.globalAlpha = c ? 0.5 : 0;
    Wb(f, 0, 0, b * 60);
    Rb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -7);
    f.save();
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      Ob(f, 3, b * 20, b * 4);
      Rb(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.restore();
    Wb(f, 0, 0, b * 60);
    Rb(f, d[3], d[4], b * 4);
    Wb(f, 0, 0, b * 40);
    Rb(f, d[5]);
    Wb(f, 0, 0, b * 25);
    Rb(f, d[6], d[7], b * 8);
    return e;
  }
  function Lm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 138;
    d.height = a * 133;
    e.globalAlpha = b ? 0.3 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 73.640625);
    e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
    e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
    e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
    e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 28.640625);
    e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
    e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
    e.closePath();
    Rb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 26.640625);
    e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
    Rb(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 26.640625);
    e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
    Rb(e, br, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    return d;
  }
  function Wm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 151;
    d.height = a * 80;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 54);
    e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
    e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
    e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
    e.closePath();
    Rb(e, c[2], c[3], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 40);
    e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
    e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
    e.closePath();
    Rb(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 33);
    e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
    e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
    e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
    e.closePath();
    Rb(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 52);
    e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
    e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
    e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
    e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
    e.closePath();
    Rb(e, c[0], c[1], 4);
    return d;
  }
  function Gm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 3);
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    Ob(f, 7, b * 60, b * 10);
    f.restore();
    Rb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      Ob(f, 3, b * 21, b * 4);
      Rb(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1);
    Ob(f, 8, b * 60, b * 10);
    Rb(f, d[3], d[4], b * 4);
    f.rotate(0.56);
    Ob(f, 8, b * 40, b * 10);
    Rb(f, d[5], d[6], b * 4);
    f.rotate(0.28);
    Ob(f, 8, b * 28, b * 8);
    Rb(f, d[7]);
    f.restore();
    return e;
  }
  function Nm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    Wb(d, a * 126.5, a * 134, a * 119);
    Rb(d, b[0]);
    d.globalAlpha = 1;
    Wb(d, a * 126.5, a * 124, a * 119);
    Rb(d, b[1], b[2], a * 4);
    Wb(d, a * 126.5, a * 127, a * 100);
    Rb(d, b[3]);
    d.globalAlpha = 0.5;
    Wb(d, a * 126.5, a * 135, a * 81);
    Rb(d, b[0]);
    d.globalAlpha = 1;
    Wb(d, a * 126.5, a * 125, a * 84);
    Rb(d, b[4], b[5], a * 4);
    Wb(d, a * 126.5, a * 125, a * 61);
    Rb(d, b[6], b[7], a * 4);
    d.globalAlpha = 0.5;
    Wb(d, a * 126.5, a * 134, a * 40);
    Rb(d, b[8]);
    d.globalAlpha = 1;
    Wb(d, a * 126.5, a * 125, a * 40);
    Rb(d, b[9]);
    return c;
  }
  function qm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    Wb(d, a * 86.5, a * 98, a * 80);
    Rb(d, b[0]);
    d.globalAlpha = 1;
    Wb(d, a * 86.5, a * 89, a * 81);
    Rb(d, b[1], b[2], a * 4);
    Wb(d, a * 86.5, a * 86, a * 59);
    Rb(d, b[3], b[4], a * 4);
    d.globalAlpha = 0.5;
    Wb(d, a * 86.5, a * 95, a * 34);
    Rb(d, b[0]);
    d.globalAlpha = 1;
    Wb(d, a * 86.5, a * 89, a * 34);
    Rb(d, b[5]);
    return c;
  }
  function Om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      Rb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      Rb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      Rb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      Rb(e, b[3], b[3], a * 32);
      Wb(e, a * 41, a * 30, a * 14.7648230602334);
      Rb(e, b[3], b[3], a * 32);
      Wb(e, a * 369, a * 30, a * 15.556349186104045);
      Rb(e, b[3], b[3], a * 32);
      Wb(e, a * 364, a * 190, a * 15.620499351813308);
      Rb(e, b[3], b[3], a * 32);
      Wb(e, a * 41, a * 186, a * 15.556349186104045);
      Rb(e, b[3], b[3], a * 32);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      Rb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      Rb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      Rb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      Rb(e, b[3], b[3], a * 32);
      Wb(e, a * 41, a * 30, a * 14.7648230602334);
      Rb(e, b[3], b[3], a * 32);
      Wb(e, a * 369, a * 30, a * 15.556349186104045);
      Rb(e, b[3], b[3], a * 32);
      Wb(e, a * 364, a * 190, a * 15.620499351813308);
      Rb(e, b[3], b[3], a * 32);
      Wb(e, a * 41, a * 186, a * 15.556349186104045);
      Rb(e, b[3], b[3], a * 32);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    Rb(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    Rb(e, b[2], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    Rb(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    Rb(e, b[2], b[0], a * 12);
    Wb(e, a * 41, a * 30, a * 14.7648230602334);
    Rb(e, b[2], b[0], a * 12);
    Wb(e, a * 369, a * 30, a * 15.556349186104045);
    Rb(e, b[2], b[0], a * 12);
    Wb(e, a * 364, a * 190, a * 15.620499351813308);
    Rb(e, b[2], b[0], a * 12);
    Wb(e, a * 41, a * 186, a * 15.556349186104045);
    Rb(e, b[2], b[0], a * 12);
    return d;
  }
  function Hm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.translate(0, b * 3);
    f.globalAlpha = c ? 0.5 : 1;
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    Ob(f, 7, b * 60, b * 10);
    f.restore();
    Rb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      Ob(f, 3, b * 21, b * 4);
      Rb(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(0.2);
    Ob(f, 9, b * 60, b * 10);
    Rb(f, d[3], d[4], b * 4);
    f.rotate(-0.32);
    Ob(f, 9, b * 38, b * 10);
    Rb(f, d[5], d[6], b * 4);
    f.rotate(0.68);
    Ob(f, 9, b * 20, b * 8);
    Rb(f, d[7], d[8], b * 6);
    f.restore();
    return e;
  }
  function Um(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 450;
    f.height = b * 260;
    var a = Zm(b * 1, _q, d);
    g.drawImage(a, b * 0, b * 0);
    if (e == 1) {
      g.translate(b * 100, b * 0);
      Wb(g, b * 113, b * 120, b * 66);
      Rb(g, undefined, d[4], b * 13);
      a = Zt(b * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      g.rotate(0.7);
      g.drawImage(a, b * 133, b * -64);
      g.rotate(-0.7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      Rb(g, undefined, d[4], b * 13);
    } else if (e == 2) {
      g.translate(b * 100, b * 0);
      Wb(g, b * 113, b * 120, b * 66);
      Rb(g, ca, d[4], b * 13);
      g.translate(b * 30, b * 40);
      g.save();
      g.translate(b * 83.5, b * 66.5);
      Fb(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
      g.restore();
      Rb(g, "#dff2f7", "#187484", b * 7);
      Wb(g, b * 22, b * 82, b * 12);
      Rb(g, "#dff2f7", "#187484", b * 7);
      Wb(g, b * 145, b * 82, b * 12);
      Rb(g, "#dff2f7", "#187484", b * 7);
      a = xu(b * 0.5, dg, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 10, b * 85);
      a = xu(b * 0.5, th, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 50, b * 85);
      a = xu(b * 0.5, Jq, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 90, b * 85);
      a = wu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = wu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = wu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 125);
      a = wu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 50, b * 115);
      a = wu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 100);
      a = wu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 80, b * 120);
      a = wu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 110, b * 125);
      a = wu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 120, b * 105);
    } else if (e == 3) {
      g.translate(b * 100, b * 0);
      Wb(g, b * 113, b * 120, b * 66);
      Rb(g, gs, d[4], b * 13);
      g.translate(b * 40, b * 50);
      g.save();
      g.translate(b * 71, b * 69);
      Fb(g, b * -30, b * -42, b * 60, b * 84, b * 10);
      g.restore();
      Rb(g, undefined, d[5], b * 4);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 42, b * 28);
      g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      g.closePath();
      Rb(g, d[5], d[5], b * 4);
      g.translate(b * -40, b * -50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      Rb(g, undefined, d[4], b * 13);
    } else if (e == 4) {
      g.scale(1, 1);
      g.translate(b * 70, b * 50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 23, b * 6);
      g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      Rb(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 59, b * 10);
      g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      Rb(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 7, b * 55);
      g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      Rb(g, undefined, d[5], b * 14);
      g.translate(b * 10, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 123, b * 16);
      g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
      g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      Rb(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 72, b * 63);
      g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      Rb(g, undefined, d[5], b * 14);
      g.translate(b * 10, b * 10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 141, b * 8);
      g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      Rb(g, Xa, d[5], b * 14);
      g.translate(b * 10, b * -10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 205, b * 124);
      g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
      g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
      g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      Rb(g, undefined, d[5], b * 14);
    }
    return f;
  }
  function Ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 69;
    d.height = a * 120;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 30, a * 84);
    Fb(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 30, a * 45);
    Fb(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 30, a * 17);
    Fb(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 30, a * 31);
    Fb(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 36, a * 79.140625);
    Fb(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 35, a * 40.140625);
    Fb(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    Rb(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 35, a * 12.140625);
    Fb(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    Rb(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 34.5, a * 26.140625);
    Fb(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    Rb(e, c[3], c[4], a * 3);
    return d;
  }
  function Km(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    if (c == 0) {
      e.width = a * 566;
      e.height = a * 429;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 312.625, a * 39.046875);
      d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
      d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
      d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
      d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
      d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
      d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
      d.closePath();
      Rb(d, b[0]);
    } else if (c == 1) {
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 511;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 141.625, a * 49.296875);
      d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
      d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
      d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
      d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
      d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
      d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
      d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
      d.closePath();
      Rb(d, b[0]);
    } else if (c == 2) {
      var e;
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 504;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 153.625, a * 46.296875);
      d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
      d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
      d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
      d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
      d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
      d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
      d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
      d.closePath();
      Rb(d, b[0]);
    }
    return e;
  }
  function Vm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 345;
    d.height = a * 250;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 58);
    e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
    e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
    e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
    e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
    e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
    e.closePath();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 108, a * 51);
    e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
    e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 249, a * 27);
    e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
    e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
    e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 78);
    e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
    e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
    e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
    e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
    e.closePath();
    Rb(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 105);
    e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
    e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
    e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
    e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
    e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
    e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
    e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
    e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
    e.closePath();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 48, a * 130);
    e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
    e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
    e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
    e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
    e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
    e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
    e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
    e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
    e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
    e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
    e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
    e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
    e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
    e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
    e.closePath();
    Rb(e, c[1], c[2], a * 8);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    Rb(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    Rb(e, c[7], c[8], a * 8);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    Rb(e, br, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    Rb(e, undefined, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 66);
    e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
    e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
    e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
    e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
    e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
    e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
    e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
    e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
    e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
    e.closePath();
    Rb(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 185);
    e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
    e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
    e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
    e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226, a * 186);
    e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
    e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
    e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
    e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 172, a * 110);
    e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
    e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
    e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
    e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    return d;
  }
  function Xm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    Wb(d, a * 74.5, a * 85, a * 66);
    Rb(d, b[0]);
    d.globalAlpha = 1;
    Wb(d, a * 75.5, a * 72.5, a * 67);
    Rb(d, b[1], b[2], a * 4);
    Wb(d, a * 75.5, a * 73.5, a * 54);
    Rb(d, b[3]);
    d.globalAlpha = 0.5;
    Wb(d, a * 74.5, a * 80.5, a * 39);
    Rb(d, b[4]);
    d.globalAlpha = 1;
    Wb(d, a * 74.5, a * 74.5, a * 37);
    Rb(d, b[5]);
    return c;
  }
  function Zm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    Fb(e, 0, 0, a * 400, a * 220, a * 30);
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    Rb(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    Rb(e, c[3], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    Rb(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    Rb(e, c[3], c[1], a * 12);
    Wb(e, a * 41, a * 30, a * 14.7648230602334);
    Rb(e, c[3], c[1], a * 12);
    Wb(e, a * 369, a * 30, a * 15.556349186104045);
    Rb(e, c[3], c[1], a * 12);
    Wb(e, a * 364, a * 190, a * 15.620499351813308);
    Rb(e, c[3], c[1], a * 12);
    Wb(e, a * 41, a * 186, a * 15.556349186104045);
    Rb(e, c[3], c[1], a * 12);
    return d;
  }
  function $m(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.save();
    f.translate(b * 85, b * 88);
    f.rotate(1.4);
    Ob(f, 7, b * 60, b * 10);
    f.restore();
    Rb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 80);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      Ob(f, 3, b * 21, b * 4);
      Rb(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1.4);
    Ob(f, 7, b * 60, b * 10);
    Rb(f, d[3], d[4], b * 4);
    f.rotate(0.64);
    Ob(f, 7, b * 40, b * 10);
    Rb(f, d[5], d[6], b * 4);
    f.rotate(0.12);
    Ob(f, 7, b * 23, b * 5);
    f.restore();
    Rb(f, d[7]);
    return e;
  }
  function ec(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  function ic(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 139;
    d.height = a * 135;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    Rb(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
    e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
    e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 65);
    e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
    e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
    e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
    e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
    e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
    e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
    e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 69);
    e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
    e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
    e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
    e.closePath();
    Rb(e, c[2]);
    return d;
  }
  function tc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    Rb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    Rb(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    Rb(d, b[2]);
    return c;
  }
  function nc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  function oc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  function ac(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 20;
    c.height = a * 35;
    Fb(d, 0, 0, 20, 35, 7);
    Rb(d, b[0]);
    return c;
  }
  function rc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 180;
    d.height = a * 120;
    e.translate(a * -65, a * -35);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    Fb(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    Fb(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    Fb(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    Fb(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.5, a * 73.34375);
    e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
    e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
    e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
    e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
    e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137.5, a * 65.34375);
    e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 85.34375);
    e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
    e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 89.34375);
    e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
    e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 208.5, a * 104.34375);
    e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
    e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 117.34375);
    e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
    e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.5, a * 51.34375);
    e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
    e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
    e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 170.5, a * 52.34375);
    e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
    e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
    e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 69.34375);
    e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
    e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222.5, a * 75.34375);
    e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
    e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 100.34375);
    e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
    e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112.5, a * 48.34375);
    e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
    e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.5, a * 109.34375);
    e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
    e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.5, a * 133.34375);
    e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
    e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
    e.closePath();
    Rb(e, c[2]);
    return d;
  }
  function sc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  function hc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  function gc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(0, a * 10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    Rb(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    Rb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    Rb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    Rb(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    Rb(d, b[1]);
    Wb(d, a * 102, a * 269, a * 11);
    Rb(d, b[3]);
    Wb(d, a * 98, a * 266, a * 5);
    Rb(d, b[6]);
    Wb(d, a * 168, a * 269, a * 11);
    Rb(d, b[3]);
    Wb(d, a * 164, a * 266, a * 5);
    Rb(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    Rb(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    Rb(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    Rb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    Rb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    Rb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    Rb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    Rb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    Rb(d, b[7]);
    return c;
  }
  function lc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(0, a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    Rb(d, b[0]);
    d.translate(0, a * -8);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    Rb(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 14, a * 57);
    d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    Rb(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
    d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
    Rb(d, b[1], b[2], a * 4);
    Wb(d, a * 51, a * 91, a * 9);
    Rb(d, b[3]);
    Wb(d, a * 95, a * 91, a * 9);
    Rb(d, b[3]);
    Wb(d, a * 91, a * 89, a * 4);
    Rb(d, b[4]);
    Wb(d, a * 47, a * 89, a * 4);
    Rb(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    Rb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    Rb(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    Rb(d, undefined, b[6], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 19, a * 58);
    d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    Rb(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    Rb(d, b[6]);
    return c;
  }
  function uc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 100;
    c.height = a * 100;
    d.globalAlpha = 0.5;
    d.fillStyle = b[0];
    d.fillRect(0, 0, c.width, c.height);
    return c;
  }
  function bc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -20, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    Rb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    Rb(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    Rb(d, b[2]);
    return c;
  }
  function dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 187;
    d.height = a * 119;
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, 3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    Rb(e, c[5]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, -3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    Rb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151, a * 60);
    e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
    e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
    e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
    e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
    e.closePath();
    Rb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 53);
    e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
    e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
    e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
    e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
    e.closePath();
    Rb(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 36);
    e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
    e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
    e.closePath();
    Rb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 43);
    e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
    Rb(e, undefined, c[1], a * 4);
    Wb(e, a * 58, a * 50, a * 5);
    Rb(e, c[4]);
    Wb(e, a * 43, a * 65, a * 5);
    Rb(e, c[4]);
    Wb(e, a * 58, a * 73, a * 5);
    Rb(e, c[4]);
    Wb(e, a * 58, a * 50, a * 2);
    Rb(e, c[5]);
    Wb(e, a * 43, a * 65, a * 2);
    Rb(e, c[5]);
    Wb(e, a * 58, a * 73, a * 2);
    Rb(e, c[5]);
    return d;
  }
  function vc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(a * -100, a * -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  function mc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 161;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    Rb(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, -8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    Rb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 28, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    Rb(d, b[3]);
    Wb(d, a * 103, a * 110, a * 11);
    Rb(d, b[4]);
    Wb(d, a * 55, a * 111, a * 11);
    Rb(d, b[4]);
    Wb(d, a * 99, a * 107, a * 5);
    Rb(d, b[1]);
    Wb(d, a * 51, a * 108, a * 5);
    Rb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 121);
    d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    d.closePath();
    Rb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.translate(-2, 0);
    d.moveTo(a * 71, a * 162);
    d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    d.closePath();
    Rb(d, b[3]);
    d.translate(2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    Rb(d, wh, b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 25, a * 63);
    d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
    d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
    d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    Rb(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 91, a * 53);
    d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
    d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
    d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    Rb(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    Rb(d, b[3]);
    return c;
  }
  function cc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  const pc = 10;
  function Cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = 0.3;
    Wb(e, a * 98, a * 99, a * 100);
    Rb(e, c[0]);
    e.globalAlpha = 0.5;
    Wb(e, a * 98, a * 99, a * 90);
    Rb(e, c[1]);
    return d;
  }
  function Tc(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 501;
    f.height = b * 564;
    g.scale(0.5, 0.5);
    g.translate(b * 240, b * 255);
    g.rotate(e);
    g.globalAlpha = c ? 0.5 : 0.2;
    Wb(g, b * 174, b * 87.984375, b * 20.8806130178211);
    Rb(g, d[0], d[0], b * 8);
    Wb(g, b * 174, b * 87.984375, b * 12.165525060596439);
    Rb(g, d[0], d[0], b * 8);
    Wb(g, b * 174, b * 87.484375, b * 6);
    Rb(g, d[0]);
    Wb(g, b * 30, b * 87.984375, b * 20.8806130178211);
    Rb(g, d[0], d[0], b * 4);
    Wb(g, b * 30, b * 87.984375, b * 12.165525060596439);
    Rb(g, d[0], d[0], b * 4);
    Wb(g, b * 30, b * 87.484375, b * 6);
    Rb(g, d[0]);
    Wb(g, b * 100, b * 30, b * 20.8806130178211);
    Rb(g, d[0], d[0], b * 4);
    Wb(g, b * 100, b * 30, b * 12.165525060596439);
    Rb(g, d[0], d[0], b * 4);
    Wb(g, b * 100, b * 30, b * 6);
    Rb(g, d[0]);
    Wb(g, b * 100, b * 130, b * 20.8806130178211);
    Rb(g, d[0], d[0], b * 4);
    Wb(g, b * 100, b * 130, b * 12.165525060596439);
    Rb(g, d[0], d[0], b * 4);
    Wb(g, b * 100, b * 130, b * 6);
    Rb(g, d[0]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    g.rotate(0);
    Fb(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    Rb(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 101, b * 64.984375);
    g.rotate(0);
    Fb(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    Rb(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 102, b * 63.484375);
    g.rotate(0);
    Fb(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    g.translate(5, -5);
    g.globalAlpha = 1;
    Wb(g, b * 174, b * 87.984375, b * 20.8806130178211);
    Rb(g, d[1], d[3], b * 8);
    Wb(g, b * 174, b * 87.984375, b * 12.165525060596439);
    Rb(g, d[1], d[3], b * 8);
    Wb(g, b * 174, b * 87.484375, b * 6);
    Rb(g, d[2]);
    Wb(g, b * 30, b * 87.984375, b * 20.8806130178211);
    Rb(g, d[1], d[3], b * 8);
    Wb(g, b * 30, b * 87.984375, b * 12.165525060596439);
    Rb(g, d[1], d[3], b * 8);
    Wb(g, b * 30, b * 87.484375, b * 6);
    Rb(g, d[2]);
    Wb(g, b * 102, b * 30, b * 20.8806130178211);
    Rb(g, d[1], d[3], b * 8);
    Wb(g, b * 102, b * 30, b * 12.165525060596439);
    Rb(g, d[1], d[3], b * 8);
    Wb(g, b * 102, b * 30, b * 6);
    Rb(g, d[1]);
    Wb(g, b * 102, b * 130, b * 20.8806130178211);
    Rb(g, d[1], d[3], b * 8);
    Wb(g, b * 102, b * 130, b * 12.165525060596439);
    Rb(g, d[1], d[3], b * 8);
    Wb(g, b * 102, b * 130, b * 6);
    Rb(g, d[1]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    Fb(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    Rb(g, d[1], d[3], b * 8);
    g.save();
    g.translate(b * 101, b * 64.984375);
    Fb(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    Rb(g, d[2], d[1], b * 8);
    g.save();
    g.translate(b * 102, b * 63.484375);
    Fb(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    Rb(g, d[2], d[1], b * 8);
    Wb(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
    Rb(g, d[1], d[3], b * 8);
    Wb(g, b * 135, b * 107.36605834960938, b * 13);
    Rb(g, d[1], d[3], b * 8);
    Wb(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
    Rb(g, d[2]);
    Wb(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
    Rb(g, d[1], d[3], b * 8);
    Wb(g, b * 70, b * 107.36605834960938, b * 13);
    Rb(g, d[1], d[3], b * 8);
    Wb(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
    Rb(g, d[2]);
    return f;
  }
  function fc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 95;
    d.height = a * 85;
    if (c == 0) {
      e.translate(a * 7, a * 15);
      e.scale(0.9, 0.9);
      e.save();
      Fb(e, a * 0, a * 5, a * 90, a * 60, 10);
      Rb(e, b[0]);
      e.globalCompositeOperation = "destination-out";
      Wb(e, a * 25, a * 40, a * 10);
      e.fill();
      Wb(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
      e.save();
      Fb(e, 0, 0, a * 90, a * 60, a * 10);
      Rb(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      Wb(e, a * 25, a * 40, a * 10);
      e.fill();
      Wb(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    } else if (c == 1) {
      e.scale(0.8, 0.8);
      e.translate(a * 15, a * 33);
      e.save();
      e.scale(0.56, 0.56);
      e.translate(a * -39, a * -60);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 32.5, a * 50.642852783203125);
      e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
      e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
      e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
      e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
      e.closePath();
      Rb(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 116.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
      e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
      e.closePath();
      Rb(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 166.5, a * 68.64285278320312);
      e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
      e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
      e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
      e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
      e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
      e.closePath();
      Rb(e, b[1]);
      e.restore();
      e.save();
      Fb(e, 0, a * 15, a * 90, a * 50, a * 10);
      Rb(e, b[0]);
      Fb(e, 0, a * 10, a * 90, a * 50, a * 10);
      Rb(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      Wb(e, a * 25, a * 40, a * 10);
      e.fill();
      Wb(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    }
    return d;
  }
  function zc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 10, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    return d;
  }
  function yc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 120;
    e.height = b * 100;
    Fb(f, b * 10, b * 10, b * 95, b * 80, b * 10);
    Rb(f, c[2]);
    Fb(f, b * 10, b * 5, b * 95, b * 80, b * 10);
    Rb(f, c[3], c[4], b * 4);
    if (d == 0) {
      var g = fc(b * 0.75, c, 0);
      f.drawImage(g, b * 22, b * 18);
    } else if (d == 1) {
      g = fc(b * 0.75, c, 1);
      f.drawImage(g, b * 22, b * 18);
    }
    return e;
  }
  ;
  function wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 106;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38, a * 46);
    e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
    e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
    e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
    e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
    e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    Rb(e, undefined, c[2], a * 4);
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    Rb(e, c[10], c[10], a * 4);
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 19);
    e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
    e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
    e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
    e.closePath();
    Rb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 18);
    e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
    e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
    e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
    e.closePath();
    Rb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    Rb(e, hj, c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    Rb(e, js, c[4], a * 4);
    e.save();
    e.translate(a * 87, a * 34.5);
    e.rotate(0);
    Fb(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
    e.restore();
    Rb(e, c[7], c[2], a * 4);
    e.save();
    e.translate(a * 87, a * 57);
    e.rotate(0);
    Fb(e, a * -8, a * -23, a * 16, a * 46, a * 10);
    e.restore();
    Rb(e, c[8], c[2], a * 4);
    Wb(e, a * 87, a * 39, a * 4.123105625617661);
    Rb(e, c[9], c[2], a * 4);
    Wb(e, a * 87, a * 60, a * 4.242640687119285);
    Rb(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    Rb(e, c[8], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
    e.closePath();
    Rb(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 70);
    e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
    e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
    e.closePath();
    Rb(e, c[9], c[2], a * 4);
    Wb(e, a * 50, a * 80, a * 5);
    Rb(e, c[9], c[2], a * 4);
    Wb(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
    Rb(e, c[9], c[2], a * 4);
    Wb(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
    Rb(e, c[9], c[2], a * 4);
    return d;
  }
  function Ac(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 145;
    d.height = a * 120;
    e.beginPath();
    e.scale(0.6, 0.6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 18, a * -8);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    Rb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.scale(1.1, 1.1);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -9, a * 4);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    Rb(e, c[4], c[5], a * 4);
    e.scale(1.1, 1.1);
    e.translate(a * -9, a * 4);
    e.save();
    e.translate(a * 100, a * 73.06874084472656);
    e.rotate(0);
    Fb(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 100, a * 71.36874389648438);
    e.rotate(0);
    Fb(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
    e.restore();
    Rb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 144, a * 80);
    e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
    e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
    e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 75);
    e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
    e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
    e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    Rb(e, c[4], c[5], a * 4);
    e.translate(0, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 116.07290649414062);
    e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
    e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
    e.closePath();
    Rb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.5, a * 96.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
    e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
    e.closePath();
    Rb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    Rb(e, c[3], c[2], a * 4);
    e.scale(0.5, 0.5);
    e.translate(a * 100, a * 71);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    Rb(e, c[6], c[2], a * 4);
    return d;
  }
  function kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 204, a * 195.0833282470703);
    e.rotate(10.16);
    Fb(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
    e.restore();
    Rb(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.5, a * 226.5833282470703);
    e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
    e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
    e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
    e.closePath();
    Rb(e, c[2], c[3], a * 4);
    e.save();
    e.translate(a * 197, a * 169.0833282470703);
    e.rotate(10.16);
    Fb(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
    e.restore();
    Rb(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 24.583328247070312);
    e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
    e.closePath();
    Rb(e, undefined, c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
    e.closePath();
    Rb(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
    e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
    e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
    e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
    e.closePath();
    Rb(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
    e.closePath();
    Rb(e, c[4], c[1], a * 8);
    e.save();
    e.translate(a * 249.63333129882812, a * 120.89999389648438);
    e.rotate(7.04);
    Fb(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
    e.restore();
    Rb(e, c[5]);
    return d;
  }
  function xc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.save();
    e.translate(a * 70.16665649414062, a * 38.20831298828125);
    Fb(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
    e.restore();
    Rb(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 70, a * 42.70831298828125);
    Fb(e, a * -61, a * -20, a * 122, a * 40, a * 20);
    e.restore();
    Rb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 70.375);
    e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
    e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
    e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
    e.closePath();
    Rb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 11, a * 68.375);
    e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
    e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
    e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
    e.closePath();
    Rb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 32.375);
    e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
    e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
    e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
    e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
    e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
    e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
    e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
    e.closePath();
    Rb(e, c[2], c[1], a * 4);
    Wb(e, a * 71, a * 44.375, a * 16.55294535724685);
    Rb(e, c[2], c[1], a * 4);
    Wb(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
    Rb(e, c[2], c[1], a * 4);
    return d;
  }
  function Jc(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    var e;
    d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    Wb(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
    Rb(d, dk, c[2], a * 4);
    Wb(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
    Rb(d, undefined, c[1], a * 4);
    Wb(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
    Rb(d, undefined, c[1], a * 4);
    d.save();
    d.translate(a * 23, a * 38.734375);
    d.rotate(0);
    Fb(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
    d.restore();
    Rb(d, c[2], c[1], a * 4);
    d.save();
    d.translate(a * 23.5, a * 43.734375);
    d.rotate(0.5235987755982988);
    Ob(d, 3, a * 8.06225774829855, a * 0);
    d.restore();
    Rb(d, c[3]);
    Wb(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
    Rb(d, c[3]);
    return e;
  }
  function Mc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 185;
    e.height = b * 164;
    f.translate(0, 0);
    var g = function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 201;
      d.height = a * 164;
      e.translate(0, a * 5);
      e.globalAlpha = b ? 0.5 : 1;
      Wb(e, a * 100.5, a * 82, a * 74.92746655359852);
      Rb(e, c[0], c[0], a * 4);
      Wb(e, a * 100.5, a * 82, a * 65.9417374971317);
      Rb(e, c[0], c[0], a * 4);
      e.translate(0, -5);
      e.globalAlpha = 1;
      Wb(e, a * 100.5, a * 82, a * 74.92746655359852);
      Rb(e, c[1], c[3], a * 4);
      Wb(e, a * 100.5, a * 82, a * 65.9417374971317);
      Rb(e, c[1], c[2], a * 4);
      Wb(e, a * 100.5, a * 82, a * 35.9417374971317);
      Rb(e, c[1], c[2], a * 20);
      Wb(e, a * 100.5, a * 82, a * 15.9417374971317);
      Rb(e, c[1], c[2], a * 6);
      return d;
    }(b, c, d);
    f.drawImage(g, b * -10, b * 0);
    g = Tc(b, c, d, 0);
    f.drawImage(g, b * -83, b * -40);
    g = Tc(b, c, d, Math.PI / 1.4);
    f.drawImage(g, b * -15, b * -88);
    g = Tc(b, c, d, Math.PI / -1.4);
    f.drawImage(g, b * 15, b * -8);
    return e;
  }
  function Bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 790;
    e.translate(a * 5, a * 5);
    e.globalAlpha = b ? 0 : 0;
    Wb(e, a * 178.5, a * 172.828125, a * 150);
    Rb(e, undefined, c[0], a * 65);
    Wb(e, a * 178.5, a * 172.828125, a * 150);
    Rb(e, undefined, c[0], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    Fb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 136, a * 581.828125);
    Fb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    Fb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 140, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
    e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
    e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
    e.closePath();
    Rb(e, c[0]);
    e.translate(3, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    Rb(e, c[0]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    Rb(e, c[0], c[0], a * 7);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * 15, a * 35);
    Wb(e, a * 178.5, a * 172.828125, a * 150);
    Rb(e, w, c[2], a * 95);
    Wb(e, a * 178.5, a * 172.828125, a * 150);
    Rb(e, undefined, c[1], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    Fb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    Rb(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 136, a * 581.828125);
    Fb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    Rb(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    Fb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    Rb(e, c[1], c[2], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 123, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
    e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
    e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
    e.closePath();
    Rb(e, c[1]);
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    Rb(e, c[1]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    Rb(e, c[1], c[1], a * 7);
    e.restore();
    return d;
  }
  function Dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 27.3671875);
    e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
    e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 23.3671875);
    e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
    e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 70.5, a * 34.8671875);
    e.rotate(0);
    Fb(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
    e.restore();
    Rb(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 71, a * 40.8671875);
    e.rotate(0);
    Fb(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
    e.restore();
    Rb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
    e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
    e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
    e.closePath();
    Rb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
    e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
    e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
    e.closePath();
    Rb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.800003051757812, a * 49.15625);
    e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
    e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
    e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
    e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
    e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
    e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
    e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
    e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 56.3671875);
    e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
    e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
    e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
    e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
    e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
    e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 68.30000305175781, a * 41.45625305175781);
    e.rotate(0.76);
    Fb(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
    e.restore();
    Rb(e, undefined, c[5], a * 4);
    e.save();
    e.translate(a * 68.80000305175781, a * 44.45625305175781);
    e.rotate(0.76);
    Fb(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
    e.restore();
    Rb(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 69.80000305175781, a * 44.556243896484375);
    e.rotate(0.76);
    Fb(e, a * -10, a * -10, a * 20, a * 20, a * 5);
    e.restore();
    Rb(e, c[6], c[7], a * 4);
    return d;
  }
  const Ic = 16;
  function Ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    Wb(e, a * 220, a * 201, a * 170.41713528867922);
    Rb(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    Wb(e, a * 220, a * 201, a * 170.41713528867922);
    Rb(e, c[1], c[2], a * 6);
    Wb(e, a * 220, a * 201, a * 130);
    Rb(e, c[11], c[2], a * 6);
    Wb(e, a * 222, a * 199, a * 120.74767078498864);
    Rb(e, undefined, c[3], a * 40);
    Wb(e, a * 220, a * 200, a * 95.44108130150245);
    Rb(e, undefined, c[2], a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    Wb(e, a * 63, a * 136, a * 49.193495504995376);
    Rb(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    Wb(e, a * 63, a * 136, a * 49.193495504995376);
    Rb(e, c[8], c[2], a * 4);
    Wb(e, a * 63, a * 137, a * 25.632011235952593);
    Rb(e, c[7], c[2], a * 4);
    return d;
  }
  function Sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 89;
    d.height = a * 89;
    e.save();
    e.translate(a * 44.5, a * 44.5);
    Ob(e, 6, a * 40, a * 10);
    e.restore();
    Rb(e, c[0], c[1], a * 5);
    e.save();
    e.translate(a * 44.5, a * 44.5);
    Ob(e, 6, a * 25.11521001172521, a * 10);
    e.restore();
    Rb(e, c[2], c[3], a * 5);
    return d;
  }
  function Qc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 184;
    e.translate(0, a * 10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    Rb(e, c[0]);
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104.5, a * 35.609375);
    e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
    e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
    e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
    Rb(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.5, a * 72.609375);
    e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
    Rb(e, mg, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.5, a * 85.609375);
    e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
    Rb(e, vh, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68.5, a * 122.609375);
    e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.5, a * 18.609375);
    e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
    e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146.5, a * 61.50892639160156);
    e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
    e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
    e.closePath();
    Rb(e, c[3]);
    return d;
  }
  function _c(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 120;
    var g = b * 140;
    d.width = f;
    d.height = g;
    d.width = b * 130;
    d.height = b * 120;
    Fb(e, b * 10, b * 12, b * 110, b * 90, b * 10);
    Rb(e, c[0]);
    Fb(e, b * 10, b * 5, b * 110, b * 90, b * 10);
    Rb(e, c[1], c[2], b * 4);
    var a = Hb(-Math.PI / 5, Jt(b * 0.5, qq, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 12, b * 18);
    a = Hb(Math.PI / 4, Ym(b * 0.55, $j, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 36, b * 16);
    return d;
  }
  function Fc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 117;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 90);
    e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
    e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
    e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
    e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
    e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6, a * 76);
    e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
    e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
    e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
    e.closePath();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 62);
    e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
    e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
    e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
    e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
    e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
    e.closePath();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
    e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
    e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 1, a * 89);
    e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
    e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
    e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
    e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
    e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
    e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
    e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
    e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
    e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
    e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
    e.closePath();
    Rb(e, vh, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 71);
    e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
    e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
    e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
    e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
    e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
    e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
    e.closePath();
    Rb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 89);
    e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
    e.closePath();
    Rb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 102);
    e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
    e.closePath();
    Rb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 62);
    e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
    e.closePath();
    Rb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70, a * 41);
    e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
    e.closePath();
    Rb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 33);
    e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
    e.closePath();
    Rb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 28);
    e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
    e.closePath();
    Rb(e, An, c[4], a * 6);
    return d;
  }
  function Rc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    d.globalAlpha = 0.5;
    d.translate(a * 5, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    Rb(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -4, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    Rb(d, undefined, b[1], a * 12);
    d.translate(a * -1, a * 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 270.633544921875, a * 88.98580932617188);
    d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    d.closePath();
    Rb(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 275.633544921875, a * 281.9858093261719);
    d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    d.closePath();
    Rb(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 124.633544921875, a * 291.9858093261719);
    d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    d.closePath();
    Rb(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 113.633544921875, a * 80.98580932617188);
    d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    d.closePath();
    Rb(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 202.633544921875, a * 20.985809326171875);
    d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    d.closePath();
    Rb(d, b[2], b[3], a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 203.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.633544921875, a * 25.985809326171875);
    d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 26.633544921875, a * 96.98580932617188);
    d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 351.633544921875, a * 99.98580932617188);
    d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 350.633544921875, a * 302.9858093261719);
    d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 95.633544921875, a * 224.98580932617188);
    d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 253.98580932617188);
    d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 251.98580932617188);
    d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 316, a * 186.8020782470703);
    d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 340, a * 157.8020782470703);
    d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 349, a * 136.8020782470703);
    d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 278.75, a * 246.4375);
    d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 310.75, a * 277.4375);
    d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.75, a * 257.4375);
    d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 289.4375);
    d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 171.75, a * 256.4375);
    d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.75, a * 289.9375);
    d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.75, a * 314.4375);
    d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.75, a * 313.4375);
    d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 103.75, a * 244.4375);
    d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 86.75, a * 182.4375);
    d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44.75, a * 152.4375);
    d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31.75, a * 130.4375);
    d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 69.75, a * 274.4375);
    d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 165.75, a * 95.4375);
    d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 216.75, a * 94.4375);
    d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 68.4375);
    d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 169.75, a * 71.4375);
    d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 193.75, a * 160.4375);
    d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    d.closePath();
    Rb(d, b[8], b[9], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    d.closePath();
    Rb(d, b[10]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 173.8125);
    d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 204.1999969482422, a * 201.8125);
    d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 183.1999969482422, a * 196.8125);
    d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    d.closePath();
    Rb(d, b[11]);
    Wb(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    Rb(d, b[12]);
    Wb(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    Rb(d, b[13]);
    Wb(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    Rb(d, b[12]);
    Wb(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    Rb(d, b[13]);
    return c;
  }
  function jc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    Wb(d, a * 55, a * 55, a * 55);
    Rb(d, b[0]);
    return c;
  }
  function Lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 105;
    d.height = a * 144;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -5, a * 0);
    e.save();
    e.translate(a * 52.5, a * 91.5);
    Fb(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    Rb(e, c[0], c[0], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    Fb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    Rb(e, c[0], c[0], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    Fb(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    Rb(e, c[0], c[0], a * 4);
    e.translate(a * 5, a * 0);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 91.5);
    Fb(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    Rb(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    Fb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    Rb(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    Fb(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    Rb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 60.5);
    e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
    e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
    e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
    e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
    e.closePath();
    Rb(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 40.5);
    e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
    e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
    e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
    e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
    e.closePath();
    Rb(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 33.5);
    e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
    e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
    e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
    e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
    e.closePath();
    Rb(e, c[9], c[8], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 47.5);
    e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
    e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
    e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
    e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
    e.closePath();
    Rb(e, c[11], c[10], a * 3);
    return d;
  }
  function Wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    Fb(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    Rb(e, c[2]);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    Fb(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    Rb(e, c[2]);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    Fb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    Rb(e, c[2]);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    Fb(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    Rb(e, c[2]);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    Fb(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    Rb(e, c[2]);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    Fb(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    Rb(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    Fb(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    Rb(e, An, c[4], a * 5);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    Fb(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    Rb(e, mg, c[4], a * 5);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    Fb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    Rb(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    Fb(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    Rb(e, mg, c[4], a * 5);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    Fb(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    Rb(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    Fb(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    Rb(e, undefined, c[4], a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 99);
    Ob(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    Rb(e, c[2]);
    e.save();
    e.translate(a * 98, a * 99);
    Ob(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    Rb(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 99);
    Ob(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    Rb(e, c[5], c[6], a * 5);
    e.save();
    e.translate(a * 98, a * 99);
    Ob(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    Rb(e, c[7], c[8], a * 7);
    return d;
  }
  function Gc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.5;
    Wb(e, a * 69, a * 64, a * 48.16637831516918);
    Rb(e, c[1]);
    e.globalAlpha = 0.7;
    Wb(e, a * 69, a * 64, a * 38.23105625617661);
    Rb(e, c[2]);
    e.globalAlpha = 0.7;
    Wb(e, a * 69, a * 64, a * 32.01562118716424);
    Rb(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 41);
    e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
    e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
    e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 62);
    e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
    e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
    e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
    e.closePath();
    Rb(e, c[3]);
    return d;
  }
  function Nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    Wb(e, a * 220, a * 201, a * 170.41713528867922);
    Rb(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    Wb(e, a * 220, a * 201, a * 170.41713528867922);
    Rb(e, c[1], c[2], a * 6);
    Wb(e, a * 220, a * 201, a * 130);
    Rb(e, c[11], c[2], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    Rb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    Rb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    Rb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    Rb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    Rb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    Rb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142, a * 223);
    e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
    e.closePath();
    Rb(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 133);
    e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
    e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
    e.closePath();
    Rb(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203, a * 102);
    e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
    e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
    e.closePath();
    Rb(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196, a * 324);
    e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
    e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
    e.closePath();
    Rb(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 266, a * 166);
    e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
    Rb(e, Xa, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 269, a * 192);
    e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
    Rb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 217);
    e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
    Rb(e, dk, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 141);
    e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
    Rb(e, Fn, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 230);
    e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
    Rb(e, undefined, c[6], a * 6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 258);
    e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
    Rb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 196);
    e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
    Rb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    Rb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    Rb(e, js, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    Rb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    Rb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    Rb(e, mg, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    Rb(e, undefined, c[6], a * 6);
    Wb(e, a * 222, a * 199, a * 120.74767078498864);
    Rb(e, Xa, c[3], a * 40);
    Wb(e, a * 220, a * 200, a * 95.44108130150245);
    Rb(e, vh, c[2], a * 15);
    Wb(e, a * 220, a * 201, a * 85);
    Rb(e, wh, c[4], a * 10);
    e.globalAlpha = 0.5;
    Wb(e, a * 220, a * 201, a * 82);
    Rb(e, c[9]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    Wb(e, a * 63, a * 136, a * 49.193495504995376);
    Rb(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    Wb(e, a * 63, a * 136, a * 49.193495504995376);
    Rb(e, c[8], c[2], a * 4);
    Wb(e, a * 63, a * 137, a * 25.632011235952593);
    Rb(e, c[7], c[2], a * 4);
    return d;
  }
  function qc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    Rb(e, An, c[2], a * 40);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    Rb(e, w, c[1], a * 20);
    e.globalAlpha = 0.8;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    Rb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
    e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
    e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
    e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
    e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
    e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
    e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.00003051757812, a * 49.625);
    e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
    e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
    e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
    e.closePath();
    Rb(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 36.625);
    e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
    e.closePath();
    Rb(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53.000030517578125, a * 52.625);
    e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
    e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
    e.closePath();
    Rb(e, c[3]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    Rb(e, Xa, c[3], a * 4);
    return d;
  }
  function Oc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 46;
    d.height = a * 140;
    e.scale(a * -1, a * 1);
    e.translate(a * -50, a * 40);
    e.translate(a * -20, 0);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    Fb(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.translate(a * 0, 0);
    e.globalAlpha = 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    Rb(e, c[3], c[4], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    Rb(e, c[1], c[2], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    Rb(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    Fb(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 3);
    return d;
  }
  function Hc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 88;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.52);
    Ob(e, 6, a * 43, a * 10);
    e.restore();
    Rb(e, c[0], c[1], a * 3);
    return d;
  }
  function Uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    Rb(e, c[1], c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    Rb(e, Yk, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    Rb(e, undefined, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    Rb(e, c[3], c[2], a * 19);
    Wb(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
    Rb(e, c[4]);
    Wb(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
    Rb(e, c[4]);
    Wb(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
    Rb(e, c[4]);
    Wb(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
    Rb(e, c[4]);
    Wb(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
    Rb(e, c[4]);
    Wb(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
    Rb(e, c[4]);
    Wb(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
    Rb(e, c[4]);
    Wb(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
    Rb(e, c[4]);
    Wb(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
    Rb(e, c[4]);
    Wb(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
    Rb(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    Rb(e, c[5]);
    return d;
  }
  const Yc = 10;
  function Kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 102;
    d.height = a * 102;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(3, 3);
    Fb(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    Rb(e, c[0]);
    Fb(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    Rb(e, c[0]);
    Fb(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    Rb(e, c[0]);
    Fb(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    Rb(e, c[0]);
    Fb(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-3, -3);
    Fb(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    Rb(e, c[1]);
    Fb(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    Rb(e, c[1]);
    Fb(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    Rb(e, c[2], c[3], a * 4);
    Fb(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    Rb(e, c[2], c[3], a * 4);
    Fb(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    Rb(e, c[2], c[3], a * 4);
    return d;
  }
  const Vc = 10;
  function Xc() {
    new Date().getTime();
    mp();
    (function () {
      ⲆΔ[814] = Gd(1, [{
        f: sp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[815] = ⲆΔ[814];
      ⲆΔ[955] = [];
      ⲆΔ[955][0] = ᐃΔ.ⲆΔⲆⵠᐃⲆⵠ;
      ⲆΔ[955][1] = ᐃΔ.ⲆⲆⲆⲆⵠᐃⲆ;
      ⲆΔ[955][2] = ᐃΔ.ⵠΔΔᐃᐃᐃΔ;
      ⲆΔ[956] = ⲆΔ[955];
      ⲆΔ[972] = [];
      ⲆΔ[972][0] = ᐃΔ.ⲆⵠⵠᐃⲆⲆΔ;
      ⲆΔ[972][1] = ᐃΔ.ΔⵠⲆᐃᐃⲆⲆ;
      ⲆΔ[972][2] = ᐃΔ.ᐃᐃⲆⵠⵠᐃᐃ;
      ⲆΔ[973] = ⲆΔ[972];
      ⲆΔ[987] = [];
      ⲆΔ[987][0] = ᐃΔ.ᐃᐃᐃⲆΔᐃᐃ;
      ⲆΔ[987][1] = ᐃΔ.ⵠΔᐃΔⵠⵠⲆ;
      ⲆΔ[987][2] = ᐃΔ.ᐃΔᐃΔΔΔᐃ;
      ⲆΔ[988] = ⲆΔ[987];
      ⲆΔ[1154] = [];
      ⲆΔ[1154][0] = ᐃΔ.ᐃⵠⵠΔΔⲆᐃ;
      ⲆΔ[1154][1] = ᐃΔ.ᐃΔⵠⵠⵠᐃΔ;
      ⲆΔ[1154][2] = ᐃΔ.ΔᐃⲆᐃⵠⵠᐃ;
      ⲆΔ[1155] = ⲆΔ[1154];
      ⲆΔ[965] = [];
      ⲆΔ[965][0] = ᐃΔ.ᐃⲆᐃᐃᐃⲆΔ;
      ⲆΔ[965][1] = ᐃΔ.ⲆⲆᐃΔⵠⵠΔ;
      ⲆΔ[965][2] = ᐃΔ.ΔⵠᐃⲆΔⵠⵠ;
      ⲆΔ[974] = ⲆΔ[965];
      ⲆΔ[1028] = [];
      ⲆΔ[1028][0] = ᐃΔ.ⵠⲆᐃᐃⲆᐃⲆ;
      ⲆΔ[1028][1] = ᐃΔ.ⲆᐃⲆⲆⲆᐃᐃ;
      ⲆΔ[1028][2] = ᐃΔ.ᐃΔΔᐃΔᐃⲆ;
      ⲆΔ[1029] = ⲆΔ[1028];
      ⲆΔ[1027] = ⲆΔ[1028];
      ⲆΔ[712] = [];
      ⲆΔ[712][0] = ᐃΔ.ᐃΔⲆΔᐃⲆΔᐃΔ;
      ⲆΔ[712][1] = ᐃΔ.ΔᐃΔᐃⵠΔⲆⲆⵠ;
      ⲆΔ[712][2] = ᐃΔ.ΔⲆᐃΔⵠⲆⵠᐃΔ;
      ⲆΔ[713] = ⲆΔ[712];
      ⲆΔ[714] = ⲆΔ[712];
      ⲆΔ[1031] = [];
      ⲆΔ[1031][0] = ᐃΔ.ⵠⵠᐃᐃΔΔᐃ;
      ⲆΔ[1031][1] = ᐃΔ.ⲆⲆΔⲆΔΔᐃ;
      ⲆΔ[1031][2] = ᐃΔ.ⲆᐃΔⵠⲆⵠⲆ;
      ⲆΔ[1032] = ⲆΔ[1031];
      ⲆΔ[1030] = ⲆΔ[1031];
      ⲆΔ[423] = [];
      ⲆΔ[423][0] = ᐃΔ.ⵠⵠⵠⲆⲆⵠⵠ;
      ⲆΔ[423][1] = ᐃΔ.ᐃⵠⲆΔΔⲆΔ;
      ⲆΔ[423][2] = ᐃΔ.ⲆΔᐃⵠᐃΔⵠ;
      ⲆΔ[425] = ⲆΔ[423];
      ⲆΔ[424] = ⲆΔ[423];
      ⲆΔ[1233] = [];
      ⲆΔ[1233][0] = ᐃΔ.ΔΔᐃᐃΔⵠΔ;
      ⲆΔ[1233][1] = ᐃΔ.ᐃΔⲆᐃΔⲆᐃ;
      ⲆΔ[1233][2] = ᐃΔ.ᐃⵠΔⵠᐃᐃⲆ;
      ⲆΔ[1234] = ⲆΔ[1233];
      ⲆΔ[1230] = [];
      ⲆΔ[1230][0] = ᐃΔ.ΔⲆⵠᐃⵠⵠᐃ;
      ⲆΔ[1230][1] = ᐃΔ.ⲆⲆΔⵠᐃΔΔ;
      ⲆΔ[1230][2] = ᐃΔ.ⵠⵠΔΔΔᐃⲆ;
      ⲆΔ[1232] = ⲆΔ[1230];
      ⲆΔ[1231] = ⲆΔ[1230];
      ⲆΔ[569] = [];
      ⲆΔ[569][0] = ᐃΔ.ⲆⵠᐃⲆⲆⵠΔ;
      ⲆΔ[569][1] = ᐃΔ.ⲆⵠΔⵠⲆⲆΔ;
      ⲆΔ[569][2] = ᐃΔ.ΔΔᐃⲆᐃⵠⲆ;
      ⲆΔ[571] = ⲆΔ[569];
      ⲆΔ[570] = ⲆΔ[569];
      ⲆΔ[1166] = [];
      ⲆΔ[1166][0] = ᐃΔ.ⲆᐃⵠⲆᐃΔΔ;
      ⲆΔ[1166][1] = ᐃΔ.ⲆⵠΔΔⵠΔᐃ;
      ⲆΔ[1166][2] = ᐃΔ.ⲆⵠᐃⲆⲆⲆⵠ;
      ⲆΔ[1167] = ⲆΔ[1166];
      ⲆΔ[1168] = ⲆΔ[1166];
      ⲆΔ[572] = [];
      ⲆΔ[572][0] = ᐃΔ.ᐃΔΔⵠⲆⵠΔ;
      ⲆΔ[572][1] = ᐃΔ.ⵠⲆⵠⲆⲆⵠⵠ;
      ⲆΔ[572][2] = ᐃΔ.ⵠᐃⲆⵠⲆⲆΔ;
      ⲆΔ[574] = ⲆΔ[572];
      ⲆΔ[573] = ⲆΔ[572];
      ⲆΔ[1169] = [];
      ⲆΔ[1169][0] = ᐃΔ.ⲆⲆⲆᐃΔⵠᐃ;
      ⲆΔ[1169][1] = ᐃΔ.ΔⲆᐃⲆⵠⵠΔ;
      ⲆΔ[1169][2] = ᐃΔ.ⲆⲆᐃⲆⵠᐃⲆ;
      ⲆΔ[1170] = ⲆΔ[1169];
      ⲆΔ[1171] = ⲆΔ[1169];
      ⲆΔ[575] = [];
      ⲆΔ[575][0] = ᐃΔ.ΔⵠΔᐃᐃⵠΔ;
      ⲆΔ[575][1] = ᐃΔ.ⲆⲆᐃⲆⵠⲆⵠ;
      ⲆΔ[575][2] = ᐃΔ.ΔΔⵠΔΔⲆΔ;
      ⲆΔ[577] = ⲆΔ[575];
      ⲆΔ[576] = ⲆΔ[575];
      ⲆΔ[1172] = [];
      ⲆΔ[1172][0] = ᐃΔ.ⵠᐃᐃΔΔⲆΔ;
      ⲆΔ[1172][1] = ᐃΔ.ⲆΔⵠⲆⵠᐃΔ;
      ⲆΔ[1172][2] = ᐃΔ.ⵠⲆⲆⵠΔⲆᐃ;
      ⲆΔ[1173] = ⲆΔ[1172];
      ⲆΔ[1174] = ⲆΔ[1172];
      ⲆΔ[578] = [];
      ⲆΔ[578][0] = ᐃΔ.ΔⵠⵠⵠⵠᐃΔ;
      ⲆΔ[578][1] = ᐃΔ.ΔΔΔⵠΔⲆⲆ;
      ⲆΔ[578][2] = ᐃΔ.ⲆΔⲆⵠⲆⲆᐃ;
      ⲆΔ[580] = ⲆΔ[578];
      ⲆΔ[579] = ⲆΔ[578];
      ⲆΔ[1175] = [];
      ⲆΔ[1175][0] = ᐃΔ.ⵠⲆⵠⲆΔΔΔ;
      ⲆΔ[1175][1] = ᐃΔ.ᐃΔΔⲆⵠᐃΔ;
      ⲆΔ[1175][2] = ᐃΔ.ⵠⲆⲆᐃᐃᐃⲆ;
      ⲆΔ[1176] = ⲆΔ[1175];
      ⲆΔ[1177] = ⲆΔ[1175];
      ⲆΔ[581] = [];
      ⲆΔ[581][0] = ᐃΔ.ΔⲆⲆΔⵠⵠⵠ;
      ⲆΔ[581][1] = ᐃΔ.ⲆⲆᐃⲆΔⵠⵠ;
      ⲆΔ[581][2] = ᐃΔ.ᐃⲆⵠᐃᐃⲆⵠ;
      ⲆΔ[583] = ⲆΔ[581];
      ⲆΔ[582] = ⲆΔ[581];
      ⲆΔ[1178] = [];
      ⲆΔ[1178][0] = ᐃΔ.ᐃⵠⵠⵠΔⲆⲆ;
      ⲆΔ[1178][1] = ᐃΔ.ᐃΔⵠΔⲆⲆⵠ;
      ⲆΔ[1178][2] = ᐃΔ.ᐃⵠⵠⵠⵠⲆⵠΔⵠ;
      ⲆΔ[1179] = ⲆΔ[1178];
      ⲆΔ[1180] = ⲆΔ[1178];
      ⲆΔ[584] = [];
      ⲆΔ[584][0] = ᐃΔ.ᐃᐃⲆⵠⲆᐃⲆⵠⲆ;
      ⲆΔ[584][1] = ᐃΔ.ᐃⵠΔⲆᐃⵠᐃᐃᐃ;
      ⲆΔ[584][2] = ᐃΔ.ⲆᐃᐃΔⵠⲆΔⲆᐃ;
      ⲆΔ[586] = ⲆΔ[584];
      ⲆΔ[585] = ⲆΔ[584];
      ⲆΔ[1181] = [];
      ⲆΔ[1181][0] = ᐃΔ.ᐃⲆΔΔᐃΔΔΔΔ;
      ⲆΔ[1181][1] = ᐃΔ.ᐃⵠⲆΔⲆⲆⵠⲆⲆ;
      ⲆΔ[1181][2] = ᐃΔ.ΔΔⲆᐃⲆⵠⲆΔⵠ;
      ⲆΔ[1182] = ⲆΔ[1181];
      ⲆΔ[1183] = ⲆΔ[1181];
      ⲆΔ[587] = [];
      ⲆΔ[587][0] = ᐃΔ.ⲆⲆΔⵠⲆᐃᐃⲆᐃ;
      ⲆΔ[587][1] = ᐃΔ.ⵠⲆᐃⵠⲆΔⵠⵠᐃ;
      ⲆΔ[587][2] = ᐃΔ.ᐃⲆⵠᐃⵠⲆⵠΔⲆ;
      ⲆΔ[589] = ⲆΔ[587];
      ⲆΔ[588] = ⲆΔ[587];
      ⲆΔ[1184] = [];
      ⲆΔ[1184][0] = ᐃΔ.ᐃⵠΔⵠⵠΔΔᐃΔ;
      ⲆΔ[1184][1] = ᐃΔ.ⵠⵠΔᐃᐃⵠᐃⲆⲆ;
      ⲆΔ[1184][2] = ᐃΔ.ΔΔⵠᐃΔᐃⵠᐃⲆ;
      ⲆΔ[1185] = ⲆΔ[1184];
      ⲆΔ[1186] = ⲆΔ[1184];
      ⲆΔ[1257] = [];
      ⲆΔ[1257][0] = ᐃΔ.ⵠΔⲆΔᐃⵠᐃΔⲆ;
      ⲆΔ[1257][1] = ᐃΔ.ᐃΔⵠⵠⵠᐃⲆᐃⵠ;
      ⲆΔ[1257][2] = ᐃΔ.ᐃΔⲆⵠⲆⲆᐃᐃᐃ;
      ⲆΔ[1258] = ⲆΔ[1257];
      ⲆΔ[1256] = ⲆΔ[1257];
      ⲆΔ[1260] = [];
      ⲆΔ[1260][0] = ᐃΔ.ΔᐃⵠⵠᐃⲆⲆΔᐃ;
      ⲆΔ[1260][1] = ᐃΔ.ΔΔⵠⵠⲆⲆᐃⵠⲆ;
      ⲆΔ[1260][2] = ᐃΔ.ⵠⲆⵠⵠⵠⲆᐃΔⲆ;
      ⲆΔ[1261] = ⲆΔ[1260];
      ⲆΔ[1259] = ⲆΔ[1260];
      ⲆΔ[1263] = [];
      ⲆΔ[1263][0] = ᐃΔ.ΔΔΔΔⵠⵠⲆΔⵠ;
      ⲆΔ[1263][1] = ᐃΔ.ΔᐃᐃᐃᐃⲆΔⲆⵠ;
      ⲆΔ[1263][2] = ᐃΔ.Ⲇⵠᐃᐃᐃᐃᐃⵠᐃ;
      ⲆΔ[1264] = ⲆΔ[1263];
      ⲆΔ[1262] = ⲆΔ[1263];
      ⲆΔ[1266] = [];
      ⲆΔ[1266][0] = ᐃΔ.ⵠⵠⵠΔᐃᐃⵠᐃⵠ;
      ⲆΔ[1266][1] = ᐃΔ.ΔΔᐃᐃᐃⵠⵠⵠΔ;
      ⲆΔ[1266][2] = ᐃΔ.ΔⵠᐃⲆⲆᐃᐃΔⵠ;
      ⲆΔ[1267] = ⲆΔ[1266];
      ⲆΔ[1265] = ⲆΔ[1266];
      ⲆΔ[1269] = [];
      ⲆΔ[1269][0] = ᐃΔ.ⲆⵠᐃΔⵠᐃⵠⲆΔ;
      ⲆΔ[1269][1] = ᐃΔ.ΔᐃᐃⵠΔΔᐃⲆⵠ;
      ⲆΔ[1269][2] = ᐃΔ.ᐃΔⲆⲆΔᐃᐃⵠΔ;
      ⲆΔ[1270] = ⲆΔ[1269];
      ⲆΔ[1268] = ⲆΔ[1269];
      ⲆΔ[1272] = [];
      ⲆΔ[1272][0] = ᐃΔ.ᐃΔΔⵠⵠᐃⵠΔⲆ;
      ⲆΔ[1272][1] = ᐃΔ.ᐃⵠᐃΔΔᐃⵠⵠⵠ;
      ⲆΔ[1272][2] = ᐃΔ.ΔⵠᐃⲆᐃⲆΔΔᐃ;
      ⲆΔ[1273] = ⲆΔ[1272];
      ⲆΔ[1271] = ⲆΔ[1272];
      ⲆΔ[1239] = [];
      ⲆΔ[1239][0] = ᐃΔ.ΔⵠⲆᐃᐃⲆΔΔΔ;
      ⲆΔ[1239][1] = ᐃΔ.ⵠⲆⵠΔΔⲆΔⵠⲆ;
      ⲆΔ[1239][2] = ᐃΔ.ⵠⲆⲆᐃΔᐃΔΔⲆ;
      ⲆΔ[1240] = ⲆΔ[1239];
      ⲆΔ[1238] = ⲆΔ[1239];
      ⲆΔ[1242] = [];
      ⲆΔ[1242][0] = ᐃΔ.ⵠⲆⵠⲆⵠⵠᐃΔᐃ;
      ⲆΔ[1242][1] = ᐃΔ.ⲆᐃΔΔΔⲆΔᐃᐃ;
      ⲆΔ[1242][2] = ᐃΔ.ᐃΔⲆᐃⲆΔᐃⲆᐃ;
      ⲆΔ[1243] = ⲆΔ[1242];
      ⲆΔ[1241] = ⲆΔ[1242];
      ⲆΔ[1245] = [];
      ⲆΔ[1245][0] = ᐃΔ.ᐃⲆⲆΔΔⲆⲆᐃᐃ;
      ⲆΔ[1245][1] = ᐃΔ.ΔⵠⲆᐃⵠᐃΔⲆΔ;
      ⲆΔ[1245][2] = ᐃΔ.ᐃᐃⵠΔΔᐃᐃΔⲆ;
      ⲆΔ[1246] = ⲆΔ[1245];
      ⲆΔ[1244] = ⲆΔ[1245];
      ⲆΔ[1248] = [];
      ⲆΔ[1248][0] = ᐃΔ.ΔⵠⵠⵠⵠΔᐃΔᐃ;
      ⲆΔ[1248][1] = ᐃΔ.ⵠⲆⲆΔᐃⵠⲆⵠⲆ;
      ⲆΔ[1248][2] = ᐃΔ.ⵠΔⲆΔⲆΔΔᐃΔ;
      ⲆΔ[1249] = ⲆΔ[1248];
      ⲆΔ[1247] = ⲆΔ[1248];
      ⲆΔ[1251] = [];
      ⲆΔ[1251][0] = ᐃΔ.ᐃΔᐃⵠᐃᐃᐃᐃⵠ;
      ⲆΔ[1251][1] = ᐃΔ.ⵠᐃΔⵠᐃⲆⲆⲆⲆ;
      ⲆΔ[1251][2] = ᐃΔ.ⵠⵠⵠᐃΔⵠⲆⵠᐃ;
      ⲆΔ[1252] = ⲆΔ[1251];
      ⲆΔ[1250] = ⲆΔ[1251];
      ⲆΔ[1254] = [];
      ⲆΔ[1254][0] = ᐃΔ.ΔᐃΔⲆⲆⵠΔⵠΔ;
      ⲆΔ[1254][1] = ᐃΔ.ΔΔᐃⵠΔΔᐃⲆΔ;
      ⲆΔ[1254][2] = ᐃΔ.ᐃΔΔΔⵠⵠᐃⲆΔ;
      ⲆΔ[1255] = ⲆΔ[1254];
      ⲆΔ[1253] = ⲆΔ[1254];
      ⲆΔ[1227] = [];
      ⲆΔ[1227][0] = ᐃΔ.ⵠⲆΔⲆⵠⲆⲆ;
      ⲆΔ[1227][1] = ᐃΔ.ⵠⵠⲆᐃᐃΔΔ;
      ⲆΔ[1227][2] = ᐃΔ.ⵠᐃΔΔⲆⲆⵠ;
      ⲆΔ[1229] = ⲆΔ[1227];
      ⲆΔ[1228] = ⲆΔ[1227];
      ⲆΔ[1187] = [];
      ⲆΔ[1187][0] = ᐃΔ.ΔᐃᐃᐃᐃΔΔ;
      ⲆΔ[1187][1] = ᐃΔ.ⲆⲆⲆᐃⵠᐃΔ;
      ⲆΔ[1187][2] = ᐃΔ.ΔΔᐃΔᐃⲆⵠ;
      ⲆΔ[1188] = ⲆΔ[1187];
      ⲆΔ[Nr.ⲆⵠᐃΔⲆⵠΔᐃᐃ] = ⲆΔ[1187];
      ⲆΔ[840] = Gd(1, [{
        f: id,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
      }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[841] = ⲆΔ[840];
      ⲆΔ[850] = Gd(1, [{
        f: bp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[851] = ⲆΔ[850];
      ⲆΔ[644] = Gd(1, [{
        f: Qd,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: jd,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: Rd,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[643] = ⲆΔ[644];
      ⲆΔ[639] = Gd(1, [{
        f: Fd,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[800] = Gd(1, [{
        f: Zm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[799] = ⲆΔ[800];
      ⲆΔ[631] = Gd(1, [{
        f: lu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[632] = ⲆΔ[631];
      ⲆΔ[311] = Gd(1, [{
        f: lu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#493d36", "#332b28"]
      }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[284] = ⲆΔ[311];
      ⲆΔ[808] = Gd(1, [{
        f: lu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c67933", "#b17238"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[809] = ⲆΔ[808];
      ⲆΔ[834] = Gd(1, [{
        f: lu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e8e8e8", "#bbbbbb"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[835] = ⲆΔ[834];
      ⲆΔ[845] = Gd(1, [{
        f: lu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#328a56", "#449573"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[846] = ⲆΔ[845];
      ⲆΔ[949] = Gd(1, [{
        f: lu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c98e2f", "#a36b11"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[950] = ⲆΔ[949];
      ⲆΔ[951] = ⲆΔ[949];
      ⲆΔ[966] = Gd(1, [{
        f: lu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#13a56d", "#098a58"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[967] = ⲆΔ[966];
      ⲆΔ[968] = ⲆΔ[966];
      ⲆΔ[981] = Gd(1, [{
        f: lu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3a8214", "#4a9c1e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[982] = ⲆΔ[981];
      ⲆΔ[983] = ⲆΔ[981];
      ⲆΔ[959] = Gd(1, [{
        f: lu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#b22419", "#99110e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[960] = ⲆΔ[959];
      ⲆΔ[961] = ⲆΔ[959];
      ⲆΔ[309] = Gd(1, [{
        f: Ud,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516"]
      }, {
        f: Hd,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[302] = ⲆΔ[309];
      ⲆΔ[328] = Gd(1, [{
        f: Yd,
        x: -2,
        y: -1,
        a: 1,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
      }, {
        f: Hd,
        x: -2,
        y: -1,
        a: 1,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[327] = ⲆΔ[328];
      ⲆΔ[860] = Gd(1, [{
        f: Kt,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
      }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[865] = Gd(1, [{
        f: ju,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[829] = Gd(1, [{
        f: Ot,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[261] = Gd(1, [{
        f: Vt,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[292] = Gd(1, [{
        f: Wt,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[293] = Gd(1, [{
        f: Yt,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[455] = Gd(1, [{
        f: St,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[313] = Gd(1, [{
        f: Jt,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[312] = Gd(1, [{
        f: Jt,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[258] = Gd(1, [{
        f: Jt,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[296] = Gd(1, [{
        f: Jt,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[458] = Gd(1, [{
        f: Jt,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[1017] = [];
      ⲆΔ[1017][0] = ᐃΔ.ⵠᐃᐃⲆⵠᐃΔ;
      ⲆΔ[1017][1] = ᐃΔ.ⵠΔⲆΔⲆⲆⲆ;
      ⲆΔ[1017][2] = ᐃΔ.ΔΔᐃⵠⲆΔⲆ;
      ⲆΔ[1019] = ⲆΔ[1017];
      ⲆΔ[1018] = ⲆΔ[1017];
      ⲆΔ[315] = Gd(1, [{
        f: qu,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#252B28", "#58645F", "#75827D"]
      }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[297] = Gd(1, [{
        f: su,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#282823", "#877c2d", "#c4bc51"]
      }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[298] = Gd(1, [{
        f: tu,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#232828", "#3fc9c9", "#74ede6"]
      }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[316] = Gd(1, [{
        f: Ud,
        x: 0,
        y: -5,
        a: 1,
        r: Math.PI / 2.5,
        c: ["#4d2d14", "#432516"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[830] = ⲆΔ[829];
      ⲆΔ[254] = ⲆΔ[261];
      ⲆΔ[290] = ⲆΔ[292];
      ⲆΔ[291] = ⲆΔ[293];
      ⲆΔ[456] = ⲆΔ[455];
      ⲆΔ[314] = ⲆΔ[313];
      ⲆΔ[256] = ⲆΔ[312];
      ⲆΔ[295] = ⲆΔ[258];
      ⲆΔ[257] = ⲆΔ[296];
      ⲆΔ[460] = ⲆΔ[458];
      ⲆΔ[277] = Gd(1, [{
        f: dd,
        x: 0,
        y: 0,
        a: 1,
        r: 0
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[310] = Gd(1, [{
        f: Cd,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[262] = ⲆΔ[310];
      ⲆΔ[329] = Gd(1, [{
        f: um,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[263] = ⲆΔ[329];
      ⲆΔ[331] = Gd(1, [{
        f: lm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[332] = ⲆΔ[331];
      ⲆΔ[492] = Gd(1, [{
        f: um,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[493] = ⲆΔ[492];
      ⲆΔ[330] = Gd(1, [{
        f: mm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[265] = ⲆΔ[330];
      ⲆΔ[317] = Gd(1, [{
        f: hm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[318] = ⲆΔ[317];
      ⲆΔ[319] = Gd(1, [{
        f: jm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[320] = ⲆΔ[319];
      ⲆΔ[362] = Gd(1, [{
        f: Gm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[363] = ⲆΔ[362];
      ⲆΔ[364] = Gd(1, [{
        f: Gm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[365] = ⲆΔ[364];
      ⲆΔ[361] = Gd(1, [{
        f: $m,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[360] = ⲆΔ[361];
      ⲆΔ[495] = Gd(1, [{
        f: $m,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[496] = ⲆΔ[495];
      ⲆΔ[335] = Gd(1, [{
        f: vm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[268] = ⲆΔ[335];
      ⲆΔ[372] = Gd(1, [{
        f: Tm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[371] = ⲆΔ[372];
      ⲆΔ[499] = Gd(1, [{
        f: Tm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[498] = ⲆΔ[499];
      ⲆΔ[375] = Gd(1, [{
        f: Cm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[374] = ⲆΔ[375];
      ⲆΔ[378] = Gd(1, [{
        f: pm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[377] = ⲆΔ[378];
      ⲆΔ[337] = Gd(1, [{
        f: Am,
        x: 0,
        y: 2,
        a: 1,
        r: 0,
        c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[338] = ⲆΔ[337];
      ⲆΔ[300] = Gd(1, [{
        f: fd,
        x: 0,
        y: -3,
        a: 1,
        r: 0,
        c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[323] = Gd(1, [{
        f: fd,
        x: 0,
        y: -3,
        a: 1,
        r: 0,
        c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[325] = ⲆΔ[323];
      ⲆΔ[305] = Gd(1, [{
        f: Nd,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#cec0c4", "#ffffff", "#6d6768"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[513] = Gd(1, [{
        f: Nd,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#d4e9ec", "#37b1d7", "#506c71"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[515] = ⲆΔ[513];
      ⲆΔ[368] = Gd(1, [{
        f: Rm,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#ef96be", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[1162] = Gd(1, [{
        f: Rm,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#55423e", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[178] = Gd(1, [{
        f: bm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[179] = Gd(1, [{
        f: bm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[624] = Gd(1, [{
        f: Rm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#201851", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[393] = Gd(1, [{
        f: Rm,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#231f20", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[505] = Gd(1, [{
        f: Rm,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#ffffff", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[369] = Gd(1, [{
        f: Wm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[370] = ⲆΔ[369];
      ⲆΔ[381] = Gd(1, [{
        f: Mm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[380] = ⲆΔ[381];
      ⲆΔ[502] = Gd(1, [{
        f: Lm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[503] = ⲆΔ[502];
      ⲆΔ[880] = Gd(1, [{
        f: Zd,
        x: 0,
        y: 5,
        a: 1,
        r: 0,
        c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[881] = ⲆΔ[880];
      ⲆΔ[882] = Gd(1, [{
        f: $d,
        x: 0,
        y: 5,
        a: 1,
        r: 0,
        c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[883] = ⲆΔ[882];
      ⲆΔ[303] = Gd(1, [{
        f: qd,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#ffffff", "#cec0c4"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[304] = ⲆΔ[303];
      ⲆΔ[392] = [];
      ⲆΔ[392][0] = ᐃΔ.ⲆⲆⲆⲆΔⲆᐃ;
      ⲆΔ[392][1] = ᐃΔ.ⵠⵠΔⵠΔΔΔ;
      ⲆΔ[392][2] = ᐃΔ.ⵠΔΔⲆⲆᐃᐃ;
      ⲆΔ[367] = ⲆΔ[392];
      ⲆΔ[975] = [];
      ⲆΔ[975][0] = ᐃΔ.ᐃⲆⵠⵠᐃΔⲆ;
      ⲆΔ[975][1] = ᐃΔ.ΔⲆΔⲆⲆⲆᐃ;
      ⲆΔ[975][2] = ᐃΔ.ⵠΔⲆⵠⵠΔΔ;
      ⲆΔ[977] = ⲆΔ[975];
      ⲆΔ[976] = ⲆΔ[975];
      ⲆΔ[978] = [];
      ⲆΔ[978][0] = ᐃΔ.ΔⲆⵠⵠᐃⲆⲆ;
      ⲆΔ[978][1] = ᐃΔ.ᐃⵠᐃⲆⵠⵠᐃ;
      ⲆΔ[978][2] = ᐃΔ.ΔᐃⲆᐃΔⵠⵠ;
      ⲆΔ[980] = ⲆΔ[978];
      ⲆΔ[979] = ⲆΔ[978];
      ⲆΔ[1158] = [];
      ⲆΔ[1158][0] = ᐃΔ.ᐃΔΔⵠⵠΔⲆ;
      ⲆΔ[1158][1] = ᐃΔ.ᐃΔΔⵠⵠΔⲆ;
      ⲆΔ[1158][2] = ᐃΔ.ᐃΔΔⵠⵠΔⲆ;
      ⲆΔ[1159] = ⲆΔ[1158];
      ⲆΔ[426] = [];
      ⲆΔ[426][0] = ᐃΔ.ᐃΔᐃΔΔⵠⵠ;
      ⲆΔ[426][1] = ᐃΔ.ⲆⵠⲆⲆⲆⲆⵠ;
      ⲆΔ[426][2] = ᐃΔ.ⵠⵠᐃᐃᐃΔᐃ;
      ⲆΔ[427] = ⲆΔ[426];
      ⲆΔ[428] = ⲆΔ[426];
      ⲆΔ[1160] = [];
      ⲆΔ[1160][0] = ᐃΔ.ᐃⲆΔΔⵠⵠⲆ;
      ⲆΔ[1160][1] = ᐃΔ.ᐃⲆΔΔⵠⵠⲆ;
      ⲆΔ[1160][2] = ᐃΔ.ᐃⲆΔΔⵠⵠⲆ;
      ⲆΔ[1161] = ⲆΔ[1160];
      ⲆΔ[1236] = [];
      ⲆΔ[1236][0] = ᐃΔ.ᐃⵠⵠΔⲆᐃΔⵠⲆ;
      ⲆΔ[1236][1] = ᐃΔ.ΔΔⵠⵠΔΔΔΔΔ;
      ⲆΔ[1236][2] = ᐃΔ.ⵠᐃΔᐃⲆⲆⲆΔΔ;
      ⲆΔ[1235] = ⲆΔ[1236];
      ⲆΔ[1237] = ⲆΔ[1236];
      ⲆΔ[991] = [];
      ⲆΔ[991][0] = ᐃΔ.ⲆΔⲆΔΔΔⲆ;
      ⲆΔ[991][1] = ᐃΔ.ⲆⵠΔΔᐃΔΔ;
      ⲆΔ[991][2] = ᐃΔ.ⲆⲆᐃᐃΔΔᐃ;
      ⲆΔ[990] = ⲆΔ[991];
      ⲆΔ[992] = ⲆΔ[991];
      ⲆΔ[994] = [];
      ⲆΔ[994][0] = ᐃΔ.ⲆⲆⲆⵠⲆᐃᐃ;
      ⲆΔ[994][1] = ᐃΔ.ᐃΔⲆⵠⲆᐃᐃ;
      ⲆΔ[994][2] = ᐃΔ.ⲆⲆⲆᐃⲆⲆⲆ;
      ⲆΔ[993] = ⲆΔ[994];
      ⲆΔ[995] = ⲆΔ[994];
      ⲆΔ[997] = [];
      ⲆΔ[997][0] = ᐃΔ.ⲆⵠⵠⵠᐃᐃⲆ;
      ⲆΔ[997][1] = ᐃΔ.ᐃΔⵠⵠⵠⵠᐃ;
      ⲆΔ[997][2] = ᐃΔ.ⲆⵠᐃΔⲆⲆΔ;
      ⲆΔ[996] = ⲆΔ[997];
      ⲆΔ[998] = ⲆΔ[997];
      ⲆΔ[1000] = [];
      ⲆΔ[1000][0] = ᐃΔ.ᐃⲆⵠⲆΔᐃᐃ;
      ⲆΔ[1000][1] = ᐃΔ.ⵠⲆⲆⲆᐃⲆᐃ;
      ⲆΔ[1000][2] = ᐃΔ.ΔΔⵠᐃⵠᐃⲆ;
      ⲆΔ[999] = ⲆΔ[1000];
      ⲆΔ[1001] = ⲆΔ[1000];
      ⲆΔ[1003] = [];
      ⲆΔ[1003][0] = ᐃΔ.ΔⲆᐃΔⲆΔᐃ;
      ⲆΔ[1003][1] = ᐃΔ.ΔⲆⲆΔⲆᐃⲆ;
      ⲆΔ[1003][2] = ᐃΔ.ⵠΔⲆᐃⲆᐃᐃ;
      ⲆΔ[1002] = ⲆΔ[1003];
      ⲆΔ[1004] = ⲆΔ[1003];
      ⲆΔ[1006] = [];
      ⲆΔ[1006][0] = ᐃΔ.ⵠΔᐃⵠⵠⲆⵠ;
      ⲆΔ[1006][1] = ᐃΔ.ⲆΔⲆΔⵠⲆⲆ;
      ⲆΔ[1006][2] = ᐃΔ.ᐃⲆΔΔⵠᐃᐃ;
      ⲆΔ[1005] = ⲆΔ[1006];
      ⲆΔ[1007] = ⲆΔ[1006];
      ⲆΔ[1009] = [];
      ⲆΔ[1009][0] = ᐃΔ.ⲆᐃⲆΔⲆⲆΔ;
      ⲆΔ[1009][1] = ᐃΔ.ⵠᐃΔⵠⵠΔⵠ;
      ⲆΔ[1009][2] = ᐃΔ.ΔᐃᐃΔⲆΔΔ;
      ⲆΔ[1008] = ⲆΔ[1009];
      ⲆΔ[1010] = ⲆΔ[1009];
      ⲆΔ[1012] = [];
      ⲆΔ[1012][0] = ᐃΔ.ᐃΔⵠΔᐃⲆⵠ;
      ⲆΔ[1012][1] = ᐃΔ.ᐃᐃΔᐃⲆΔⲆ;
      ⲆΔ[1012][2] = ᐃΔ.ⲆΔΔΔⲆⲆⵠ;
      ⲆΔ[1011] = ⲆΔ[1012];
      ⲆΔ[1013] = ⲆΔ[1012];
      ⲆΔ[1015] = [];
      ⲆΔ[1015][0] = ᐃΔ.ᐃᐃᐃᐃⲆΔⵠ;
      ⲆΔ[1015][1] = ᐃΔ.ΔΔⵠᐃⲆⵠⲆ;
      ⲆΔ[1015][2] = ᐃΔ.ᐃΔᐃᐃⲆⵠⲆ;
      ⲆΔ[1014] = ⲆΔ[1015];
      ⲆΔ[1016] = ⲆΔ[1015];
      ⲆΔ[1035] = [];
      ⲆΔ[1035][0] = ᐃΔ.ΔᐃΔⲆᐃ;
      ⲆΔ[1035][1] = ᐃΔ.ΔᐃΔⲆᐃ;
      ⲆΔ[1035][2] = ᐃΔ.ΔᐃΔⲆᐃ;
      ⲆΔ[Nr.ⵠⲆⲆΔᐃⲆⵠΔᐃ] = ⲆΔ[1035];
      ⲆΔ[1036] = ⲆΔ[1035];
      ⲆΔ[1037] = [];
      ⲆΔ[1037][0] = ᐃΔ.ΔⲆᐃⲆⲆ;
      ⲆΔ[1037][1] = ᐃΔ.ΔⲆᐃⲆⲆ;
      ⲆΔ[1037][2] = ᐃΔ.ΔⲆᐃⲆⲆ;
      ⲆΔ[Nr.ΔⵠⵠⵠᐃⵠⲆⵠΔ] = ⲆΔ[1037];
      ⲆΔ[1038] = ⲆΔ[1037];
      ⲆΔ[1039] = [];
      ⲆΔ[1039][0] = ᐃΔ.ΔΔⲆΔⵠ;
      ⲆΔ[1039][1] = ᐃΔ.ΔΔⲆΔⵠ;
      ⲆΔ[1039][2] = ᐃΔ.ΔΔⲆΔⵠ;
      ⲆΔ[Nr.ⵠᐃⵠΔⵠⲆᐃΔⲆ] = ⲆΔ[1039];
      ⲆΔ[1040] = ⲆΔ[1039];
      ⲆΔ[1156] = [];
      ⲆΔ[1156][0] = ᐃΔ.ⵠⲆΔᐃΔ;
      ⲆΔ[1156][1] = ᐃΔ.ⵠⲆΔᐃΔ;
      ⲆΔ[1156][2] = ᐃΔ.ⵠⲆΔᐃΔ;
      ⲆΔ[1157] = ⲆΔ[1156];
      ⲆΔ[1046] = [];
      ⲆΔ[1046][0] = ᐃΔ.ⵠᐃᐃᐃⲆᐃᐃ;
      ⲆΔ[1046][1] = ᐃΔ.ᐃᐃⲆⵠᐃⲆΔ;
      ⲆΔ[1046][2] = ᐃΔ.ᐃⲆⵠⲆⲆⵠΔ;
      ⲆΔ[1048] = ⲆΔ[1046];
      ⲆΔ[1047] = ⲆΔ[1046];
      ⲆΔ[744] = [];
      ⲆΔ[744][0] = ᐃΔ.ΔⵠⲆⲆⵠᐃΔ;
      ⲆΔ[744][1] = ᐃΔ.ᐃΔΔᐃΔⲆᐃ;
      ⲆΔ[744][2] = ᐃΔ.ΔⲆΔΔΔΔᐃ;
      ⲆΔ[746] = ⲆΔ[744];
      ⲆΔ[745] = ⲆΔ[744];
      ⲆΔ[747] = [];
      ⲆΔ[747][0] = ᐃΔ.ΔᐃⵠⲆᐃⵠⵠ;
      ⲆΔ[747][1] = ᐃΔ.ᐃⲆΔΔⵠⲆᐃ;
      ⲆΔ[747][2] = ᐃΔ.ᐃᐃⲆⲆΔⵠⲆ;
      ⲆΔ[749] = ⲆΔ[747];
      ⲆΔ[748] = ⲆΔ[747];
      ⲆΔ[1049] = [];
      ⲆΔ[1049][0] = ᐃΔ.ⲆⲆⲆⲆᐃᐃⵠ;
      ⲆΔ[1049][1] = ᐃΔ.ᐃⵠᐃⵠⲆⵠΔ;
      ⲆΔ[1049][2] = ᐃΔ.ⲆⵠⲆᐃᐃᐃΔ;
      ⲆΔ[1051] = ⲆΔ[1049];
      ⲆΔ[1050] = ⲆΔ[1049];
      ⲆΔ[1189] = [];
      ⲆΔ[1189][0] = ᐃΔ.ΔᐃΔᐃᐃᐃᐃ;
      ⲆΔ[1189][1] = ᐃΔ.ᐃⵠᐃΔᐃⲆⲆ;
      ⲆΔ[1189][2] = ᐃΔ.ⵠΔᐃΔᐃᐃⲆ;
      ⲆΔ[1191] = ⲆΔ[1189];
      ⲆΔ[1190] = ⲆΔ[1189];
      ⲆΔ[1110] = [];
      ⲆΔ[1110][0] = ᐃΔ.ᐃⲆⵠᐃᐃΔⲆ;
      ⲆΔ[1110][1] = ᐃΔ.ⵠⲆᐃᐃᐃᐃᐃ;
      ⲆΔ[1110][2] = ᐃΔ.ΔΔⲆⲆᐃΔⲆ;
      ⲆΔ[1112] = ⲆΔ[1110];
      ⲆΔ[1111] = ⲆΔ[1110];
      ⲆΔ[1131] = [];
      ⲆΔ[1131][0] = ᐃΔ.ᐃΔΔⲆⲆⵠΔᐃᐃ;
      ⲆΔ[1131][1] = ᐃΔ.ᐃⵠⲆᐃΔⵠᐃᐃΔ;
      ⲆΔ[1131][2] = ᐃΔ.ⲆⵠΔΔⵠΔⵠΔⵠ;
      ⲆΔ[1133] = ⲆΔ[1131];
      ⲆΔ[1132] = ⲆΔ[1131];
      ⲆΔ[1137] = [];
      ⲆΔ[1137][0] = ᐃΔ.ΔᐃⲆᐃΔΔⵠ;
      ⲆΔ[1137][1] = ᐃΔ.ΔⵠΔΔⵠΔᐃ;
      ⲆΔ[1137][2] = ᐃΔ.ⵠᐃᐃⲆΔⵠⲆ;
      ⲆΔ[1138] = ⲆΔ[1137];
      ⲆΔ[1139] = ⲆΔ[1137];
      ⲆΔ[1140] = [];
      ⲆΔ[1140][0] = ᐃΔ.ⵠⲆΔᐃⲆⵠΔ;
      ⲆΔ[1140][1] = ᐃΔ.ΔᐃᐃΔᐃᐃⵠ;
      ⲆΔ[1140][2] = ᐃΔ.ᐃⲆⵠᐃⵠᐃᐃ;
      ⲆΔ[1141] = ⲆΔ[1140];
      ⲆΔ[1142] = ⲆΔ[1140];
      ⲆΔ[1117] = [];
      ⲆΔ[1117][0] = ᐃΔ.ΔΔᐃⲆᐃⲆΔ;
      ⲆΔ[1117][1] = ᐃΔ.ΔⵠᐃⵠᐃΔΔ;
      ⲆΔ[1117][2] = ᐃΔ.ΔⲆⲆΔⲆΔⲆ;
      ⲆΔ[1116] = ⲆΔ[1117];
      ⲆΔ[1118] = ⲆΔ[1117];
      ⲆΔ[1080] = [];
      ⲆΔ[1080][0] = ᐃΔ.ⲆⲆᐃⲆᐃⵠⵠ;
      ⲆΔ[1080][1] = ᐃΔ.ᐃⵠⲆΔⵠΔᐃ;
      ⲆΔ[1080][2] = ᐃΔ.ΔⲆᐃⲆⲆΔⵠ;
      ⲆΔ[1082] = ⲆΔ[1080];
      ⲆΔ[1081] = ⲆΔ[1080];
      ⲆΔ[1224] = [];
      ⲆΔ[1224][0] = ᐃΔ.ΔⲆⵠᐃⲆΔᐃ;
      ⲆΔ[1224][1] = ᐃΔ.ᐃⲆΔⵠⵠᐃΔ;
      ⲆΔ[1224][2] = ᐃΔ.ⲆⲆⲆΔΔᐃⲆ;
      ⲆΔ[1226] = ⲆΔ[1224];
      ⲆΔ[1225] = ⲆΔ[1224];
      ⲆΔ[1095] = [];
      ⲆΔ[1095][0] = ᐃΔ.ᐃⲆⲆΔⲆΔⲆ;
      ⲆΔ[1095][1] = ᐃΔ.ΔⵠⵠⵠΔⵠΔ;
      ⲆΔ[1095][2] = ᐃΔ.ⵠⵠᐃⵠⵠⵠⲆ;
      ⲆΔ[1097] = ⲆΔ[1095];
      ⲆΔ[1096] = ⲆΔ[1095];
      ⲆΔ[717] = Gd(1, [{
        f: Nc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
      }, {
        f: jc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e4c027"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[718] = ⲆΔ[717];
      ⲆΔ[408] = Gd(1, [{
        f: fm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[409] = ⲆΔ[408];
      ⲆΔ[907] = Gd(1, [{
        f: _m,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
      }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[909] = ⲆΔ[907];
      ⲆΔ[908] = ⲆΔ[907];
      ⲆΔ[197] = Gd(1, [{
        f: Bm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[906] = ⲆΔ[197];
      ⲆΔ[901] = Gd(1, [{
        f: wm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[900] = ⲆΔ[901];
      ⲆΔ[899] = ⲆΔ[901];
      ⲆΔ[401] = Gd(1, [{
        f: km,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[402] = ⲆΔ[401];
      ⲆΔ[395] = Gd(1, [{
        f: Pm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[396] = ⲆΔ[395];
      ⲆΔ[398] = Gd(1, [{
        f: xm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[399] = ⲆΔ[398];
      ⲆΔ[404] = Gd(1, [{
        f: Em,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[405] = ⲆΔ[404];
      ⲆΔ[472] = Gd(1, [{
        f: Jm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[473] = ⲆΔ[472];
      ⲆΔ[874] = Gd(1, [{
        f: Sm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
      }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[876] = ⲆΔ[874];
      ⲆΔ[875] = ⲆΔ[874];
      ⲆΔ[477] = Gd(1, [{
        f: Ym,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[478] = ⲆΔ[477];
      ⲆΔ[709] = Gd(1, [{
        f: $c,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[711] = ⲆΔ[709];
      ⲆΔ[550] = Gd(1, [{
        f: Lc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[551] = ⲆΔ[550];
      ⲆΔ[480] = Gd(1, [{
        f: Ym,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[481] = ⲆΔ[480];
      ⲆΔ[483] = Gd(1, [{
        f: Ym,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[484] = ⲆΔ[483];
      ⲆΔ[486] = Gd(1, [{
        f: Ym,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[487] = ⲆΔ[486];
      ⲆΔ[489] = [];
      ⲆΔ[489][0] = ᐃΔ.ⵠᐃⵠⲆⵠⲆΔ;
      ⲆΔ[489][1] = ᐃΔ.ᐃΔⲆᐃⲆⲆΔ;
      ⲆΔ[489][2] = ᐃΔ.ⵠⲆΔⵠⲆᐃᐃ;
      ⲆΔ[491] = ⲆΔ[489];
      ⲆΔ[490] = ⲆΔ[489];
      ⲆΔ[1195] = [];
      ⲆΔ[1195][0] = ᐃΔ.ⵠΔΔⵠⲆⲆⵠ;
      ⲆΔ[1195][1] = ᐃΔ.ᐃΔⵠΔᐃⵠⲆ;
      ⲆΔ[1195][2] = ᐃΔ.ⲆⵠⵠΔⲆⲆᐃ;
      ⲆΔ[1197] = ⲆΔ[1195];
      ⲆΔ[1196] = ⲆΔ[1195];
      ⲆΔ[1199] = [];
      ⲆΔ[1199][0] = ᐃΔ.ⵠⵠΔⲆⵠⵠⲆ;
      ⲆΔ[1199][1] = ᐃΔ.ⵠⲆⲆⲆΔᐃᐃ;
      ⲆΔ[1199][2] = ᐃΔ.ⵠⲆᐃᐃΔⲆᐃ;
      ⲆΔ[1201] = ⲆΔ[1199];
      ⲆΔ[1200] = ⲆΔ[1199];
      ⲆΔ[1203] = [];
      ⲆΔ[1203][0] = ᐃΔ.ⵠⲆⲆⵠⵠⵠⵠ;
      ⲆΔ[1203][1] = ᐃΔ.ΔⲆⵠⲆΔⵠⵠ;
      ⲆΔ[1203][2] = ᐃΔ.ᐃᐃⵠᐃⵠΔⲆ;
      ⲆΔ[1205] = ⲆΔ[1203];
      ⲆΔ[1204] = ⲆΔ[1203];
      ⲆΔ[1207] = [];
      ⲆΔ[1207][0] = ᐃΔ.ⲆⲆⲆⲆⵠΔΔ;
      ⲆΔ[1207][1] = ᐃΔ.ⲆᐃΔⲆΔᐃΔ;
      ⲆΔ[1207][2] = ᐃΔ.ⲆⵠⲆⵠᐃᐃΔ;
      ⲆΔ[1209] = ⲆΔ[1207];
      ⲆΔ[1208] = ⲆΔ[1207];
      ⲆΔ[1211] = [];
      ⲆΔ[1211][0] = ᐃΔ.ⲆⵠⲆΔᐃⵠᐃ;
      ⲆΔ[1211][1] = ᐃΔ.ⲆⵠΔⵠⵠΔᐃ;
      ⲆΔ[1211][2] = ᐃΔ.ΔᐃΔΔΔⲆⲆ;
      ⲆΔ[1213] = ⲆΔ[1211];
      ⲆΔ[1212] = ⲆΔ[1211];
      ⲆΔ[1215] = [];
      ⲆΔ[1215][0] = ᐃΔ.ⲆᐃᐃΔⲆⵠⵠ;
      ⲆΔ[1215][1] = ᐃΔ.ᐃΔⲆⲆⲆⲆΔ;
      ⲆΔ[1215][2] = ᐃΔ.ᐃⲆᐃᐃⵠᐃᐃ;
      ⲆΔ[1217] = ⲆΔ[1215];
      ⲆΔ[1216] = ⲆΔ[1215];
      ⲆΔ[518] = Gd(1, [{
        f: Jc,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
      }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[519] = ⲆΔ[518];
      ⲆΔ[532] = Gd(1, [{
        f: Bc,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 5,
        c: ["#141414", "#c4a23a", "#816511"]
      }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[533] = ⲆΔ[532];
      ⲆΔ[521] = Gd(1, [{
        f: Qc,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#141414", "#178a99", "#0a6372", "#03282e"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ⲆΔ[523] = Gd(1, [{
        f: Qc,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#120202", "#991616", "#750a0a", "#120202"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ⲆΔ[529] = Gd(1, [{
        f: Cc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#347f93", "#54a4ba"]
      }, {
        f: Wc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
      }, {
        f: Hc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#a9e4ed", "#86d4e0"]
      }, {
        f: Sc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[530] = ⲆΔ[529];
      ⲆΔ[553] = Gd(1, [{
        f: Tc,
        x: 45,
        y: 70,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[555] = ⲆΔ[553];
      ⲆΔ[541] = Gd(1, [{
        f: Ac,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[542] = ⲆΔ[541];
      ⲆΔ[779] = Gd(1, [{
        f: zp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[780] = ⲆΔ[779];
      ⲆΔ[767] = Gd(1, [{
        f: yp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041"]
      }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[768] = ⲆΔ[767];
      ⲆΔ[776] = Gd(1, [{
        f: rp,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[777] = ⲆΔ[776];
      ⲆΔ[771] = Gd(1, [{
        f: rp,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[772] = ⲆΔ[771];
      ⲆΔ[756] = Gd(1, [{
        f: pp,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[758] = ⲆΔ[756];
      ⲆΔ[760] = Gd(1, [{
        f: pp,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[762] = ⲆΔ[760];
      ⲆΔ[764] = Gd(1, [{
        f: pp,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[770] = ⲆΔ[764];
      ⲆΔ[910] = Gd(1, [{
        f: Qm,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[912] = ⲆΔ[910];
      ⲆΔ[911] = ⲆΔ[910];
      ⲆΔ[732] = Gd(1, [{
        f: Vm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[734] = ⲆΔ[732];
      ⲆΔ[563] = Gd(1, [{
        f: Oc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
      }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[564] = ⲆΔ[563];
      ⲆΔ[751] = Gd(1, [{
        f: qc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[252] = Gd(1, [{
        f: Gc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[753] = Gd(1, [{
        f: qc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[253] = Gd(1, [{
        f: Gc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[176] = Gd(1, [{
        f: Fc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[177] = Gd(1, [{
        f: Fc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[175] = Gd(1, [{
        f: Fc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[616] = Gd(1, [{
        f: Zc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[618] = ⲆΔ[616];
      ⲆΔ[699] = Gd(1, [{
        f: Zc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[700] = ⲆΔ[699];
      ⲆΔ[702] = Gd(1, [{
        f: Zc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[704] = ⲆΔ[702];
      ⲆΔ[705] = Gd(1, [{
        f: Zc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[706] = ⲆΔ[705];
      ⲆΔ[420] = Gd(1, [{
        f: dc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[421] = ⲆΔ[420];
      ⲆΔ[826] = Gd(1, [{
        f: rc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#252525", "#73583e", "#493425", "#7d6144"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[827] = ⲆΔ[826];
      ⲆΔ[429] = Gd(1, [{
        f: wc,
        x: 0,
        y: -2,
        a: 1,
        r: 0,
        c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[430] = ⲆΔ[429];
      ⲆΔ[432] = Gd(1, [{
        f: xc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#dbce71", "#b29c32", "#c4bc51"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[433] = ⲆΔ[432];
      ⲆΔ[435] = Gd(1, [{
        f: Dc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[436] = ⲆΔ[435];
      ⲆΔ[438] = Gd(1, [{
        f: kc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[439] = ⲆΔ[438];
      ⲆΔ[441] = Gd(1, [{
        f: zc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#221e1b", "#ffffff", "#f6f0e7"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[442] = ⲆΔ[441];
      ⲆΔ[418] = Gd(1, [{
        f: ic,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#c27add", "#cd98e5"]
      }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[609] = Gd(1, [{
        f: Tp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#D7C393", "#a48c6c"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[142] = Gd(1, [{
        f: ap,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#93CBCE", "#E9F6F6"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[140] = Gd(1, [{
        f: Tp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#866432", "#6b4f25"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[180] = Gd(1, [{
        f: ip,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[181] = Gd(1, [{
        f: tp,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[784] = ⲆΔ[180];
      ⲆΔ[785] = ⲆΔ[181];
      ⲆΔ[789] = Gd(1, [{
        f: up,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
      }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[791] = ⲆΔ[789];
      ⲆΔ[613] = Gd(1, [{
        f: Pp,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[612] = Gd(1, [{
        f: vp,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[715] = ⲆΔ[613];
      ⲆΔ[611] = ⲆΔ[612];
      ⲆΔ[634] = Gd(1, [{
        f: cu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[635] = ⲆΔ[634];
      ⲆΔ[200] = Gd(1, [{
        f: iu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[866] = Gd(1, [{
        f: bu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[143] = Gd(1, [{
        f: Uc,
        x: 0,
        y: -2,
        a: 1,
        r: 0,
        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[690] = ⲆΔ[143];
      ⲆΔ[662] = Gd(1, [{
        f: om,
        x: -3,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[664] = Gd(1, [{
        f: sm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1d051e", "#42261A", "#281818"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[666] = ⲆΔ[664];
      ⲆΔ[649] = Gd(1, [{
        f: em,
        x: -3,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[650] = ⲆΔ[649];
      ⲆΔ[674] = Gd(1, [{
        f: Sd,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
      }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[646] = Gd(1, [{
        f: yu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⲆΔ[647] = ⲆΔ[646];
      ⲆΔ[685] = Gd(1, [{
        f: ep,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[684] = ⲆΔ[685];
      ⲆΔ[870] = Gd(1, [{
        f: td,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#e2d63b", "#ee71a9", "#42b672"]
      }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[871] = ⲆΔ[870];
      ⲆΔ[605] = Gd(1, [{
        f: Kc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
      }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[604] = ⲆΔ[605];
      ⲆΔ[842] = Gd(1, [{
        f: $b,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[843] = ⲆΔ[842];
      ⲆΔ[652] = Gd(1, [{
        f: cp,
        x: -1,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
      ⲆΔ[654] = ⲆΔ[652];
      ⲆΔ[626] = Gd(1, [{
        f: cp,
        x: -1,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
      }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[627] = ⲆΔ[626];
      ⲆΔ[629] = Gd(1, [{
        f: lp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⲆΔ[196] = Gd(1, [{
        f: Tt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[898] = ⲆΔ[196];
      ⲆΔ[659] = Gd(1, [{
        f: am,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[660] = ⲆΔ[659];
      ⲆΔ[145] = Gd(1, [{
        f: _d,
        x: -2,
        y: -8,
        a: 1,
        r: 0,
        c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⲆΔ[730] = ⲆΔ[145];
      ⲆΔ[566] = [];
      ⲆΔ[566][0] = ᐃΔ.ᐃΔⵠΔΔⵠⵠ;
      ⲆΔ[566][1] = ᐃΔ.ᐃⵠΔⲆⲆⲆᐃ;
      ⲆΔ[566][2] = ᐃΔ.ᐃⲆⲆⲆⵠΔⵠ;
      ⲆΔ[567] = ⲆΔ[566];
      ⲆΔ[568] = ⲆΔ[566];
      ⲆΔ[877] = [];
      ⲆΔ[877][0] = ᐃΔ.ⵠᐃⵠⵠⲆΔⵠ;
      ⲆΔ[877][1] = ᐃΔ.ΔⲆⲆⲆⲆᐃⲆ;
      ⲆΔ[877][2] = ᐃΔ.ⲆΔᐃⲆᐃⵠⲆ;
      ⲆΔ[879] = ⲆΔ[877];
      ⲆΔ[878] = ⲆΔ[877];
      ⲆΔ[933] = ⲆΔ[932];
      ⲆΔ[934] = ⲆΔ[932];
      ⲆΔ[932] = [];
      ⲆΔ[932][0] = ᐃΔ.ⲆᐃⲆⵠΔΔᐃ;
      ⲆΔ[932][1] = ᐃΔ.ᐃⵠΔΔΔᐃⲆ;
      ⲆΔ[932][2] = ᐃΔ.ᐃⵠⵠⵠᐃΔⲆ;
      ⲆΔ[933] = ⲆΔ[932];
      ⲆΔ[934] = ⲆΔ[932];
      ⲆΔ[943] = [];
      ⲆΔ[943][0] = ᐃΔ.ⵠΔΔΔΔⵠΔ;
      ⲆΔ[943][1] = ᐃΔ.ΔⲆⵠΔᐃⵠΔ;
      ⲆΔ[943][2] = ᐃΔ.ⵠⵠⲆⵠᐃⵠᐃ;
      ⲆΔ[944] = ⲆΔ[943];
      ⲆΔ[945] = ⲆΔ[943];
      ⲆΔ[921] = [];
      ⲆΔ[921][0] = ᐃΔ.ΔⲆⵠⵠⲆᐃᐃ;
      ⲆΔ[921][1] = ᐃΔ.ᐃΔΔⵠΔⵠⵠ;
      ⲆΔ[921][2] = ᐃΔ.ᐃᐃΔᐃᐃⵠⲆ;
      ⲆΔ[922] = ⲆΔ[921];
      ⲆΔ[923] = ⲆΔ[921];
      ⲆΔ[925] = [];
      ⲆΔ[925][0] = ᐃΔ.ⵠΔⲆⲆⲆⲆⵠ;
      ⲆΔ[925][1] = ᐃΔ.ᐃᐃⲆⵠⵠⲆⲆ;
      ⲆΔ[925][2] = ᐃΔ.ⲆⲆΔⲆⵠᐃⲆ;
      ⲆΔ[926] = ⲆΔ[925];
      ⲆΔ[927] = ⲆΔ[925];
      ⲆΔ[929] = [];
      ⲆΔ[929][0] = ᐃΔ.ᐃΔⵠᐃⵠⲆⲆ;
      ⲆΔ[929][1] = ᐃΔ.ⲆᐃⵠⲆⲆⲆΔ;
      ⲆΔ[929][2] = ᐃΔ.ⵠⵠⲆΔⵠᐃΔ;
      ⲆΔ[930] = ⲆΔ[929];
      ⲆΔ[931] = ⲆΔ[929];
      ⲆΔ[946] = [];
      ⲆΔ[946][0] = ᐃΔ.ⲆΔᐃᐃΔⲆⵠ;
      ⲆΔ[946][1] = ᐃΔ.ⲆᐃⵠᐃⲆⵠΔ;
      ⲆΔ[946][2] = ᐃΔ.ⲆᐃΔᐃⵠⲆᐃ;
      ⲆΔ[947] = ⲆΔ[946];
      ⲆΔ[948] = ⲆΔ[946];
      ⲆΔ[735] = [];
      ⲆΔ[735][0] = ᐃΔ.ᐃΔᐃᐃⲆⵠᐃ;
      ⲆΔ[735][1] = ᐃΔ.ᐃΔⲆᐃᐃΔᐃ;
      ⲆΔ[735][2] = ᐃΔ.ΔⵠⵠΔᐃⲆΔ;
      ⲆΔ[737] = ⲆΔ[735];
      ⲆΔ[736] = ⲆΔ[735];
      ⲆΔ[1164] = [];
      ⲆΔ[1164][0] = ᐃΔ.ⵠⵠᐃⵠⵠᐃᐃ;
      ⲆΔ[1164][1] = ᐃΔ.ΔᐃⲆⵠⲆᐃᐃ;
      ⲆΔ[1164][2] = ᐃΔ.ΔᐃⲆⵠⲆⲆΔ;
      ⲆΔ[Nr.ⲆΔΔΔΔᐃⵠⲆⵠ] = ⲆΔ[1164];
      ⲆΔ[1165] = ⲆΔ[1164];
      ⲆΔ[738] = [];
      ⲆΔ[738][0] = ᐃΔ.ⲆⲆᐃᐃⵠⲆᐃ;
      ⲆΔ[738][1] = ᐃΔ.ᐃⵠⵠⲆΔΔΔ;
      ⲆΔ[738][2] = ᐃΔ.ΔᐃΔᐃⲆΔᐃ;
      ⲆΔ[740] = ⲆΔ[738];
      ⲆΔ[739] = ⲆΔ[738];
      ⲆΔ[741] = [];
      ⲆΔ[741][0] = ᐃΔ.ΔⵠᐃᐃΔᐃⲆ;
      ⲆΔ[741][1] = ᐃΔ.ΔᐃΔⲆΔΔⵠ;
      ⲆΔ[741][2] = ᐃΔ.ᐃⵠᐃΔⵠⲆⲆ;
      ⲆΔ[743] = ⲆΔ[741];
      ⲆΔ[742] = ⲆΔ[741];
      ⲆΔ[938] = [];
      ⲆΔ[938][0] = ᐃΔ.ᐃⲆⵠᐃⲆⵠᐃ;
      ⲆΔ[938][1] = ᐃΔ.ⵠᐃⵠᐃⵠⵠⲆ;
      ⲆΔ[938][2] = ᐃΔ.ⲆⲆᐃⲆΔΔΔ;
      ⲆΔ[939] = ⲆΔ[938];
      ⲆΔ[936] = [];
      ⲆΔ[936][0] = ᐃΔ.ᐃⵠᐃΔⲆⵠⵠ;
      ⲆΔ[936][1] = ᐃΔ.ⲆᐃᐃΔΔⲆᐃ;
      ⲆΔ[936][2] = ᐃΔ.ΔⵠⵠⲆⵠⲆΔ;
      ⲆΔ[937] = ⲆΔ[936];
      ⲆΔ[617] = ⲆΔ[616];
      ⲆΔ[701] = ⲆΔ[699];
      ⲆΔ[703] = ⲆΔ[702];
      ⲆΔ[707] = ⲆΔ[705];
      ⲆΔ[348] = ⲆΔ[311];
      ⲆΔ[633] = ⲆΔ[631];
      ⲆΔ[645] = ⲆΔ[644];
      ⲆΔ[640] = ⲆΔ[639];
      ⲆΔ[273] = ⲆΔ[309];
      ⲆΔ[590] = ⲆΔ[252];
      ⲆΔ[752] = ⲆΔ[751];
      ⲆΔ[591] = ⲆΔ[253];
      ⲆΔ[754] = ⲆΔ[753];
      ⲆΔ[276] = ⲆΔ[328];
      ⲆΔ[863] = ⲆΔ[865];
      ⲆΔ[862] = ⲆΔ[860];
      ⲆΔ[831] = ⲆΔ[829];
      ⲆΔ[340] = ⲆΔ[261];
      ⲆΔ[596] = ⲆΔ[594];
      ⲆΔ[345] = ⲆΔ[292];
      ⲆΔ[346] = ⲆΔ[293];
      ⲆΔ[457] = ⲆΔ[455];
      ⲆΔ[274] = ⲆΔ[313];
      ⲆΔ[341] = ⲆΔ[312];
      ⲆΔ[272] = ⲆΔ[258];
      ⲆΔ[344] = ⲆΔ[296];
      ⲆΔ[459] = ⲆΔ[458];
      ⲆΔ[342] = ⲆΔ[315];
      ⲆΔ[270] = ⲆΔ[297];
      ⲆΔ[271] = ⲆΔ[298];
      ⲆΔ[343] = ⲆΔ[316];
      ⲆΔ[269] = ⲆΔ[277];
      ⲆΔ[358] = ⲆΔ[310];
      ⲆΔ[354] = ⲆΔ[329];
      ⲆΔ[356] = ⲆΔ[331];
      ⲆΔ[355] = ⲆΔ[330];
      ⲆΔ[494] = ⲆΔ[492];
      ⲆΔ[349] = ⲆΔ[317];
      ⲆΔ[350] = ⲆΔ[319];
      ⲆΔ[275] = ⲆΔ[300];
      ⲆΔ[351] = ⲆΔ[323];
      ⲆΔ[353] = ⲆΔ[305];
      ⲆΔ[514] = ⲆΔ[513];
      ⲆΔ[352] = ⲆΔ[303];
      ⲆΔ[520] = ⲆΔ[518];
      ⲆΔ[534] = ⲆΔ[532];
      ⲆΔ[531] = ⲆΔ[529];
      ⲆΔ[522] = ⲆΔ[521];
      ⲆΔ[524] = ⲆΔ[523];
      ⲆΔ[565] = ⲆΔ[563];
      ⲆΔ[554] = ⲆΔ[553];
      ⲆΔ[357] = ⲆΔ[335];
      ⲆΔ[359] = ⲆΔ[337];
      ⲆΔ[339] = Cq(function (a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 118;
        d.height = a * 129;
        e.save();
        e.translate(a * 90, a * 90);
        Fb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
        e.restore();
        Rb(e, c[0], c[1], 4);
        e.save();
        Fb(e, a * 30, a * 115, a * 60, a * 5, a * 15);
        e.restore();
        Rb(e, c[2], c[3], 4);
        e.save();
        Fb(e, a * 50, a * 117, a * 20, a * 10, a * 15);
        e.restore();
        Rb(e, c[2]);
        return d;
      }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
      ⲆΔ[366] = Gd(0.5, [{
        f: Dm,
        x: 0,
        y: 2,
        a: 1,
        r: 0,
        c: ["#ffffff"]
      }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
      ⲆΔ[382] = ⲆΔ[361];
      ⲆΔ[383] = ⲆΔ[362];
      ⲆΔ[384] = ⲆΔ[364];
      ⲆΔ[497] = ⲆΔ[495];
      ⲆΔ[385] = ⲆΔ[392];
      ⲆΔ[774] = ⲆΔ[178];
      ⲆΔ[775] = ⲆΔ[179];
      ⲆΔ[386] = ⲆΔ[368];
      ⲆΔ[625] = ⲆΔ[624];
      ⲆΔ[394] = ⲆΔ[393];
      ⲆΔ[1163] = ⲆΔ[1162];
      ⲆΔ[506] = ⲆΔ[505];
      ⲆΔ[387] = ⲆΔ[369];
      ⲆΔ[504] = ⲆΔ[502];
      ⲆΔ[388] = ⲆΔ[372];
      ⲆΔ[389] = ⲆΔ[375];
      ⲆΔ[390] = ⲆΔ[378];
      ⲆΔ[501] = ⲆΔ[499];
      ⲆΔ[391] = ⲆΔ[381];
      ⲆΔ[403] = ⲆΔ[401];
      ⲆΔ[397] = ⲆΔ[395];
      ⲆΔ[400] = ⲆΔ[398];
      ⲆΔ[406] = ⲆΔ[404];
      ⲆΔ[474] = ⲆΔ[472];
      ⲆΔ[875] = ⲆΔ[874];
      ⲆΔ[552] = ⲆΔ[550];
      ⲆΔ[710] = ⲆΔ[709];
      ⲆΔ[479] = ⲆΔ[477];
      ⲆΔ[482] = ⲆΔ[480];
      ⲆΔ[485] = ⲆΔ[483];
      ⲆΔ[488] = ⲆΔ[486];
      ⲆΔ[410] = ⲆΔ[408];
      ⲆΔ[719] = ⲆΔ[717];
      ⲆΔ[422] = ⲆΔ[420];
      ⲆΔ[431] = ⲆΔ[429];
      ⲆΔ[434] = ⲆΔ[432];
      ⲆΔ[437] = ⲆΔ[435];
      ⲆΔ[543] = ⲆΔ[541];
      ⲆΔ[733] = ⲆΔ[732];
      ⲆΔ[440] = ⲆΔ[438];
      ⲆΔ[443] = ⲆΔ[441];
      ⲆΔ[446] = ⲆΔ[418];
      ⲆΔ[606] = ⲆΔ[605];
      ⲆΔ[844] = ⲆΔ[842];
      ⲆΔ[683] = ⲆΔ[685];
      ⲆΔ[610] = ⲆΔ[609];
      ⲆΔ[689] = ⲆΔ[143];
      ⲆΔ[686] = ⲆΔ[142];
      ⲆΔ[682] = ⲆΔ[140];
      ⲆΔ[615] = ⲆΔ[613];
      ⲆΔ[614] = ⲆΔ[612];
      ⲆΔ[628] = ⲆΔ[626];
      ⲆΔ[630] = ⲆΔ[629];
      ⲆΔ[636] = ⲆΔ[634];
      ⲆΔ[868] = ⲆΔ[200];
      ⲆΔ[867] = ⲆΔ[866];
      ⲆΔ[648] = ⲆΔ[646];
      ⲆΔ[651] = ⲆΔ[649];
      ⲆΔ[653] = ⲆΔ[652];
      ⲆΔ[661] = ⲆΔ[659];
      ⲆΔ[898] = ⲆΔ[196];
      ⲆΔ[663] = ⲆΔ[662];
      ⲆΔ[665] = ⲆΔ[664];
      ⲆΔ[675] = ⲆΔ[674];
      ⲆΔ[731] = ⲆΔ[145];
      ⲆΔ[757] = ⲆΔ[756];
      ⲆΔ[759] = ⲆΔ[176];
      ⲆΔ[761] = ⲆΔ[760];
      ⲆΔ[763] = ⲆΔ[177];
      ⲆΔ[765] = ⲆΔ[764];
      ⲆΔ[766] = ⲆΔ[175];
      ⲆΔ[769] = ⲆΔ[767];
      ⲆΔ[773] = ⲆΔ[771];
      ⲆΔ[778] = ⲆΔ[776];
      ⲆΔ[781] = ⲆΔ[779];
      ⲆΔ[787] = ⲆΔ[181];
      ⲆΔ[786] = ⲆΔ[180];
      ⲆΔ[790] = ⲆΔ[789];
      ⲆΔ[801] = ⲆΔ[800];
      ⲆΔ[810] = ⲆΔ[808];
      ⲆΔ[836] = ⲆΔ[834];
      ⲆΔ[847] = ⲆΔ[845];
      ⲆΔ[828] = ⲆΔ[826];
    })();
    ⲆΔ[540] = [];
    ⲆΔ[540][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[540][Nr.ᐃᐃᐃ] = [];
    for (var a = 0; Nr.ⲆⵠΔΔᐃΔᐃ > a; a++) {
      ⲆΔ[540][Nr.ⲆⵠⲆ].push(Cq(zu(1, 4 + a, "#59B8CE")));
      ⲆΔ[540][Nr.ᐃᐃᐃ].push(Cq(zu(1, 4 + a, "#90DDD9")));
    }
    ⲆΔ[470] = [];
    ⲆΔ[470][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[470][Nr.ᐃᐃᐃ] = [];
    for (a = 0; a < Nr.ⲆⲆᐃΔⵠᐃⲆ; a++) {
      ⲆΔ[470][Nr.ⲆⵠⲆ].push(Cq(zu(1, 4 + a, "#fff")));
      ⲆΔ[470][Nr.ᐃᐃᐃ].push(Cq(zu(1, 4 + a, "#fff")));
    }
    ⲆΔ[471] = [];
    ⲆΔ[471][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[471][Nr.ᐃᐃᐃ] = [];
    for (a = 0; Nr.ⲆⲆᐃΔⵠᐃⲆ > a; a++) {
      ⲆΔ[471][Nr.ⲆⵠⲆ].push(Cq(zu(1, 6 + a, "#DDCD8A")));
      ⲆΔ[471][Nr.ᐃᐃᐃ].push(Cq(zu(1, 6 + a, "#155E57")));
    }
    ⲆΔ[942] = [];
    ⲆΔ[942][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[942][Nr.ᐃᐃᐃ] = [];
    for (a = 0; a < Nr.ᐃⲆⵠⵠᐃⲆΔ; a++) {
      ⲆΔ[942][Nr.ⲆⵠⲆ].push(Cq(zu(1, 4 + a, "#353326")));
      ⲆΔ[942][Nr.ᐃᐃᐃ].push(Cq(zu(1, 4 + a, "#1D2526")));
    }
    ⲆΔ[201] = [];
    ⲆΔ[201][Nr.ⲆⵠⲆ] = Cq(ed(1.5, 0, ["#ee71a9"]));
    ⲆΔ[201][Nr.ᐃᐃᐃ] = Cq(ed(1.5, 0, ["#ee71a9"]));
    ⲆΔ[872] = [ⲆΔ[201]];
    ⲆΔ[872][1] = [];
    ⲆΔ[872][2] = [];
    ⲆΔ[872][3] = [];
    ⲆΔ[872][4] = [];
    ⲆΔ[872][1][Nr.ⲆⵠⲆ] = Cq(ed(1.5, 0, ["#e2d63b"]));
    ⲆΔ[872][1][Nr.ᐃᐃᐃ] = Cq(ed(1.5, 0, ["#e2d63b"]));
    ⲆΔ[872][2][Nr.ⲆⵠⲆ] = Cq(ed(1.5, 0, ["#309cbd"]));
    ⲆΔ[872][2][Nr.ᐃᐃᐃ] = Cq(ed(1.5, 0, ["#309cbd"]));
    ⲆΔ[872][3][Nr.ⲆⵠⲆ] = Cq(ed(1.5, 0, ["#cd232d"]));
    ⲆΔ[872][3][Nr.ᐃᐃᐃ] = Cq(ed(1.5, 0, ["#cd232d"]));
    ⲆΔ[872][4][Nr.ⲆⵠⲆ] = Cq(ed(1.5, 0, ["#42b672"]));
    ⲆΔ[872][4][Nr.ᐃᐃᐃ] = Cq(ed(1.5, 0, ["#42b672"]));
    if (ⵠⵠⵠ.ΔⵠⲆᐃᐃΔᐃ("cti", sa.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      Cq = function (a) {
        a.loaded = 1;
        return a;
      };
    }
    ⲆΔ[797] = Cq(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(0, 0, a.width, a.height);
      b.lineWidth = 4;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var c = 20; c < 220; c += 20) {
        b.moveTo(0, c);
        b.lineTo(460, c);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    ⲆΔ[108] = [];
    ⲆΔ[108][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[108][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[108][Nr.ⲆⵠⲆ].push(Cq(qu(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ⲆΔ[108][Nr.ⲆⵠⲆ].push(Cq(qu(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ⲆΔ[108][Nr.ⲆⵠⲆ].push(Cq(qu(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ⲆΔ[108][Nr.ᐃᐃᐃ].push(Cq(qu(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ⲆΔ[108][Nr.ᐃᐃᐃ].push(Cq(qu(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ⲆΔ[108][Nr.ᐃᐃᐃ].push(Cq(qu(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ⲆΔ[111] = [];
    ⲆΔ[111][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[111][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[111][Nr.ⲆⵠⲆ].push(Cq(su(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⲆΔ[111][Nr.ⲆⵠⲆ].push(Cq(su(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⲆΔ[111][Nr.ⲆⵠⲆ].push(Cq(su(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⲆΔ[111][Nr.ᐃᐃᐃ].push(Cq(su(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    ⲆΔ[111][Nr.ᐃᐃᐃ].push(Cq(su(1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
    ⲆΔ[111][Nr.ᐃᐃᐃ].push(Cq(su(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    ⲆΔ[112] = [];
    ⲆΔ[112][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[112][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[112][Nr.ⲆⵠⲆ].push(Cq(tu(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ⲆΔ[112][Nr.ⲆⵠⲆ].push(Cq(tu(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ⲆΔ[112][Nr.ⲆⵠⲆ].push(Cq(tu(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ⲆΔ[112][Nr.ᐃᐃᐃ].push(Cq(tu(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ⲆΔ[112][Nr.ᐃᐃᐃ].push(Cq(tu(0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ⲆΔ[112][Nr.ᐃᐃᐃ].push(Cq(tu(0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ⲆΔ[239] = [];
    ⲆΔ[239][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⵠᐃⲆⲆⲆⲆ;
    ⲆΔ[239][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⲆⵠᐃΔᐃⲆ;
    ⲆΔ[286] = [];
    ⲆΔ[286][Nr.ⲆⵠⲆ] = Cq(It(0.6, ["#0d1b1c"]));
    ⲆΔ[286][Nr.ᐃᐃᐃ] = Cq(It(0.6, ["#030d14"]));
    ⲆΔ[793] = [];
    ⲆΔ[793][Nr.ⲆⵠⲆ] = Cq(zt(0.6, ["#2a2938", "#242330"]));
    ⲆΔ[793][Nr.ᐃᐃᐃ] = Cq(zt(0.6, ["#1b1e30", "#161921"]));
    ⲆΔ[820] = [];
    ⲆΔ[820][Nr.ⲆⵠⲆ] = Cq(ad(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    ⲆΔ[820][Nr.ᐃᐃᐃ] = Cq(ad(0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
    ⲆΔ[821] = [];
    ⲆΔ[821][Nr.ⲆⵠⲆ] = Cq(od(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    ⲆΔ[821][Nr.ᐃᐃᐃ] = Cq(od(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    ⲆΔ[822] = [];
    ⲆΔ[822][Nr.ⲆⵠⲆ] = Cq(Xd(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    ⲆΔ[822][Nr.ᐃᐃᐃ] = Cq(Xd(0.4, ["#030d14", "#11635e", "#02373e"]));
    ⲆΔ[823] = Cq(sd(0.6, ["#BB0000"]));
    ⲆΔ[824] = Cq(sd(0.6, ["#DBE71C"]));
    ⲆΔ[825] = Cq(sd(0.6, ["#00BB00"]));
    ⲆΔ[109] = [];
    ⲆΔ[109][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[109][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[109][Nr.ⲆⵠⲆ].push(Pt(1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], false, 0));
    ⲆΔ[109][Nr.ⲆⵠⲆ].push(Pt(1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], true, 0));
    ⲆΔ[109][Nr.ⲆⵠⲆ].push(Pt(0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], qs, 0));
    ⲆΔ[109][Nr.ⲆⵠⲆ].push(Pt(0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], true, 0));
    ⲆΔ[109][Nr.ⲆⵠⲆ].push(Pt(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], false, 0));
    ⲆΔ[109][Nr.ⲆⵠⲆ].push(Pt(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], Bq, 0));
    ⲆΔ[109][Nr.ᐃᐃᐃ].push(Pt(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], false, 0));
    ⲆΔ[109][Nr.ᐃᐃᐃ].push(Pt(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], true, 0));
    ⲆΔ[109][Nr.ᐃᐃᐃ].push(Pt(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], Rh, 0));
    ⲆΔ[109][Nr.ᐃᐃᐃ].push(Pt(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], true, 0));
    ⲆΔ[109][Nr.ᐃᐃᐃ].push(Pt(0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], sq, 0));
    ⲆΔ[109][Nr.ᐃᐃᐃ].push(Pt(0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], U, 0));
    ⲆΔ[307] = [];
    ⲆΔ[307][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[307][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[307][Nr.ⲆⵠⲆ].push(Cq(Mt(Rt(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], false), ⲆΔ[109][Nr.ⲆⵠⲆ][0])));
    ⲆΔ[307][Nr.ⲆⵠⲆ].push(Cq(Mt(Rt(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], true), ⲆΔ[109][Nr.ⲆⵠⲆ][1])));
    ⲆΔ[307][Nr.ᐃᐃᐃ].push(Cq(Mt(Rt(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], Zj), ⲆΔ[109][Nr.ᐃᐃᐃ][0])));
    ⲆΔ[307][Nr.ᐃᐃᐃ].push(Cq(Mt(Rt(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], true), ⲆΔ[109][Nr.ᐃᐃᐃ][1])));
    ⲆΔ[307][Nr.ⲆⵠⲆ].push(Cq(Mt(Rt(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], cl), ⲆΔ[109][Nr.ⲆⵠⲆ][2])));
    ⲆΔ[307][Nr.ⲆⵠⲆ].push(Cq(Mt(Rt(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], fe), ⲆΔ[109][Nr.ⲆⵠⲆ][2])));
    ⲆΔ[307][Nr.ᐃᐃᐃ].push(Cq(Mt(Rt(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], Rh), ⲆΔ[109][Nr.ᐃᐃᐃ][2])));
    ⲆΔ[307][Nr.ᐃᐃᐃ].push(Cq(Mt(Rt(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], th), ⲆΔ[109][Nr.ᐃᐃᐃ][3])));
    ⲆΔ[109][Nr.ⲆⵠⲆ][5] = Cq(ⲆΔ[109][Nr.ⲆⵠⲆ][5]);
    ⲆΔ[109][Nr.ⲆⵠⲆ][4] = Cq(ⲆΔ[109][Nr.ⲆⵠⲆ][4]);
    ⲆΔ[109][Nr.ⲆⵠⲆ][3] = Cq(ⲆΔ[109][Nr.ⲆⵠⲆ][3]);
    ⲆΔ[109][Nr.ⲆⵠⲆ][2] = Cq(ⲆΔ[109][Nr.ⲆⵠⲆ][2]);
    ⲆΔ[109][Nr.ⲆⵠⲆ][1] = Cq(ⲆΔ[109][Nr.ⲆⵠⲆ][1]);
    ⲆΔ[109][Nr.ⲆⵠⲆ][0] = Cq(ⲆΔ[109][Nr.ⲆⵠⲆ][0]);
    ⲆΔ[109][Nr.ᐃᐃᐃ][5] = Cq(ⲆΔ[109][Nr.ᐃᐃᐃ][5]);
    ⲆΔ[109][Nr.ᐃᐃᐃ][4] = Cq(ⲆΔ[109][Nr.ᐃᐃᐃ][4]);
    ⲆΔ[109][Nr.ᐃᐃᐃ][3] = Cq(ⲆΔ[109][Nr.ᐃᐃᐃ][3]);
    ⲆΔ[109][Nr.ᐃᐃᐃ][2] = Cq(ⲆΔ[109][Nr.ᐃᐃᐃ][2]);
    ⲆΔ[109][Nr.ᐃᐃᐃ][1] = Cq(ⲆΔ[109][Nr.ᐃᐃᐃ][1]);
    ⲆΔ[109][Nr.ᐃᐃᐃ][0] = Cq(ⲆΔ[109][Nr.ᐃᐃᐃ][0]);
    ⲆΔ[8] = [];
    ⲆΔ[8][Nr.ⲆⵠⲆ] = Cq(Hb(4, Jt(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    ⲆΔ[8][Nr.ᐃᐃᐃ] = Cq(Hb(4, Jt(0.75, Jq, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    ⲆΔ[1] = [];
    ⲆΔ[1][Nr.ⲆⵠⲆ] = Cq(Hb(4, Jt(0.75, yn, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ⲆΔ[1][Nr.ᐃᐃᐃ] = Cq(Hb(4, Jt(0.75, gr, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    ⲆΔ[3] = [];
    ⲆΔ[3][Nr.ⲆⵠⲆ] = Cq(Hb(4, Jt(0.75, fe, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ⲆΔ[3][Nr.ᐃᐃᐃ] = Cq(Hb(4, Jt(0.75, Jg, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
    ⲆΔ[4] = [];
    ⲆΔ[4][Nr.ⲆⵠⲆ] = Cq(Hb(4, Jt(0.75, Yh, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ⲆΔ[4][Nr.ᐃᐃᐃ] = Cq(Hb(4, Jt(0.75, Vk, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ⲆΔ[31] = [];
    ⲆΔ[31][Nr.ⲆⵠⲆ] = Cq(Hb(4, Jt(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ⲆΔ[31][Nr.ᐃᐃᐃ] = Cq(Hb(4, Jt(0.75, fe, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ⲆΔ[9] = [];
    ⲆΔ[9][Nr.ⲆⵠⲆ] = Cq(Hb(3, Kt(0.17, Ka, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    ⲆΔ[9][Nr.ᐃᐃᐃ] = Cq(Hb(3, Kt(0.17, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    ⲆΔ[199] = [];
    ⲆΔ[199][Nr.ⲆⵠⲆ] = Cq(Hb(3, ju(0.32, rl, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    ⲆΔ[199][Nr.ᐃᐃᐃ] = Cq(Hb(3, ju(0.42, true, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    ⲆΔ[57] = [];
    ⲆΔ[57][Nr.ⲆⵠⲆ] = Cq(Hb(3, Ot(0.4, Vk, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    ⲆΔ[57][Nr.ᐃᐃᐃ] = Cq(Hb(3, Ot(0.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    ⲆΔ[0] = [];
    ⲆΔ[0][Nr.ⲆⵠⲆ] = Cq(Hb(3, Vt(0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    ⲆΔ[0][Nr.ᐃᐃᐃ] = Cq(Hb(3, Vt(0.4, gr, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    ⲆΔ[5] = [];
    ⲆΔ[5][Nr.ⲆⵠⲆ] = Cq(Hb(3, Wt(0.4, Jq, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    ⲆΔ[5][Nr.ᐃᐃᐃ] = Cq(Hb(3, Wt(0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    ⲆΔ[6] = [];
    ⲆΔ[6][Nr.ⲆⵠⲆ] = Cq(Hb(3, Yt(0.4, gr, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    ⲆΔ[6][Nr.ᐃᐃᐃ] = Cq(Hb(3, Yt(0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    ⲆΔ[30] = [];
    ⲆΔ[30][Nr.ⲆⵠⲆ] = Cq(Hb(3, St(0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    ⲆΔ[30][Nr.ᐃᐃᐃ] = Cq(Hb(3, St(0.4, rl, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    ⲆΔ[285] = [];
    ⲆΔ[285][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[285][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[285][Nr.ⲆⵠⲆ].push(Cq(im(0.9, 0, ["#0d4f35"], 0)));
    ⲆΔ[285][Nr.ⲆⵠⲆ].push(Cq(im(0.9, 0, ["#0d4f35"], 1)));
    ⲆΔ[285][Nr.ⲆⵠⲆ].push(Cq(im(0.9, 0, ["#0d4f35"], 2)));
    ⲆΔ[285][Nr.ᐃᐃᐃ].push(Cq(im(0.9, 0, ["#053339"], 0)));
    ⲆΔ[285][Nr.ᐃᐃᐃ].push(Cq(im(0.9, 0, ["#053339"], 1)));
    ⲆΔ[285][Nr.ᐃᐃᐃ].push(Cq(im(0.9, 0, ["#053339"], 2)));
    ⲆΔ[285][Nr.ⲆⵠⲆ].push(Cq(vu(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    ⲆΔ[285][Nr.ⲆⵠⲆ].push(Cq(vu(0.8, ["#292002", "#ba930e", "#6d5704"])));
    ⲆΔ[285][Nr.ᐃᐃᐃ].push(Cq(vu(0.9, ["#052919", "#0a4738", "#06321f"])));
    ⲆΔ[285][Nr.ᐃᐃᐃ].push(Cq(vu(0.8, ["#052918", "#08491c", "#063417"])));
    ⲆΔ[183] = [];
    ⲆΔ[183][Nr.ⲆⵠⲆ] = Cq(Hb(Math.PI / 2, Zm(0.25, Jg, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
    ⲆΔ[183][Nr.ᐃᐃᐃ] = Cq(Hb(Math.PI / 2, Zm(0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
    ⲆΔ[803] = [];
    ⲆΔ[803].push(Cq(Om(0.25, ["#44301b", "#57442a", "#523e26"], 0)));
    ⲆΔ[803].push(Cq(Om(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
    ⲆΔ[803].push(Cq(Om(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
    ⲆΔ[802] = [];
    ⲆΔ[802][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[802][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[802][Nr.ⲆⵠⲆ].push(Cq(Hb(Math.PI / 2, Um(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
    ⲆΔ[802][Nr.ᐃᐃᐃ].push(Cq(Hb(Math.PI / 2, Um(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
    ⲆΔ[802][Nr.ⲆⵠⲆ].push(Cq(Hb(Math.PI / 2, Um(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
    ⲆΔ[802][Nr.ᐃᐃᐃ].push(Cq(Hb(Math.PI / 2, Um(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
    ⲆΔ[802][Nr.ⲆⵠⲆ].push(Cq(Hb(Math.PI / 2, Um(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
    ⲆΔ[802][Nr.ᐃᐃᐃ].push(Cq(Hb(Math.PI / 2, Um(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
    ⲆΔ[802][Nr.ⲆⵠⲆ].push(Cq(Hb(Math.PI / 2, Um(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
    ⲆΔ[802][Nr.ᐃᐃᐃ].push(Cq(Hb(Math.PI / 2, Um(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
    ⲆΔ[110] = [];
    ⲆΔ[110][Nr.ⲆⵠⲆ] = [Cq(xu(1.2, true, ["#0e3022", "#0b8052", "#077b49"]))];
    ⲆΔ[110][Nr.ᐃᐃᐃ] = [Cq(xu(1.2, true, ["#030d14", "#084442", "#0a4049"]))];
    ⲆΔ[623] = [];
    ⲆΔ[623][Nr.ⲆⵠⲆ] = Cq(xu(0.8, Ig, ["#0e3022", "#68622D", "#665329"]));
    ⲆΔ[623][Nr.ᐃᐃᐃ] = Cq(xu(0.8, true, ["#030d14", "#0F3A24", "#083326"]));
    ⲆΔ[189] = [];
    ⲆΔ[189][Nr.ⲆⵠⲆ] = Cq(sp(0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    ⲆΔ[189][Nr.ᐃᐃᐃ] = Cq(sp(0.5, Bq, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    ⲆΔ[192] = [];
    ⲆΔ[192][Nr.ⲆⵠⲆ] = Cq(id(0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    ⲆΔ[192][Nr.ᐃᐃᐃ] = Cq(id(0.5, Vk, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    ⲆΔ[194] = [];
    ⲆΔ[194][Nr.ⲆⵠⲆ] = Cq(bp(0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
    ⲆΔ[194][Nr.ᐃᐃᐃ] = Cq(bp(0.5, U, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    ⲆΔ[287] = [];
    ⲆΔ[287][Nr.ⲆⵠⲆ] = Cq(xu(0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
    ⲆΔ[287][Nr.ᐃᐃᐃ] = Cq(xu(0.8, true, ["#030d14", "#084442", "#0a4049"]));
    ⲆΔ[813] = [];
    ⲆΔ[813][Nr.ⲆⵠⲆ] = Cq(sp(0.5, true, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    ⲆΔ[813][Nr.ᐃᐃᐃ] = Cq(sp(0.5, rl, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    ⲆΔ[839] = [];
    ⲆΔ[839][Nr.ⲆⵠⲆ] = Cq(id(0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    ⲆΔ[839][Nr.ᐃᐃᐃ] = Cq(id(0.5, Jq, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    ⲆΔ[869] = [];
    ⲆΔ[869][Nr.ⲆⵠⲆ] = Cq(bp(0.5, dg, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    ⲆΔ[869][Nr.ᐃᐃᐃ] = Cq(bp(0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    ⲆΔ[854] = [];
    ⲆΔ[854][Nr.ⲆⵠⲆ] = Cq(gp(0.45, Vk, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    ⲆΔ[854][Nr.ᐃᐃᐃ] = Cq(gp(0.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    ⲆΔ[859] = Cq(gp(0.65, Ig, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    ⲆΔ[294] = [];
    ⲆΔ[294][Nr.ⲆⵠⲆ] = Cq(wu(1.4, 0, ["#ac222a", "#e6636a"]));
    ⲆΔ[294][Nr.ᐃᐃᐃ] = Cq(wu(1.4, 0, ["#46195e", "#744188"]));
    ⲆΔ[288] = [];
    ⲆΔ[288][Nr.ⲆⵠⲆ] = Cq(Hd(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    ⲆΔ[288][Nr.ᐃᐃᐃ] = Cq(Hd(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    ⲆΔ[118] = [];
    ⲆΔ[118][Nr.ⲆⵠⲆ] = Cq(Yd(0.9, 0, ["#4d2d14", "#432516"]));
    ⲆΔ[118][Nr.ᐃᐃᐃ] = Cq(Yd(0.9, 0, ["#282404", "#0a0a01"]));
    ⲆΔ[113] = [];
    ⲆΔ[113][Nr.ⲆⵠⲆ] = Cq(Ud(0.9, 0, ["#4d2d14", "#432516"]));
    ⲆΔ[113][Nr.ᐃᐃᐃ] = Cq(Ud(0.9, 0, ["#282404", "#0a0a01"]));
    ⲆΔ[289] = [];
    ⲆΔ[289][Nr.ⲆⵠⲆ] = Cq(At(0.9, 0, ["#efd435"]));
    ⲆΔ[289][Nr.ᐃᐃᐃ] = Cq(At(0.9, 0, ["#fffabb"]));
    ⲆΔ[282] = [];
    ⲆΔ[282][Nr.ⲆⵠⲆ] = Cq(Od(0.9, 0, ["#efd435"]));
    ⲆΔ[282][Nr.ᐃᐃᐃ] = Cq(Od(0.9, 0, ["#fffabb"]));
    ⲆΔ[816] = [];
    ⲆΔ[816][Nr.ⲆⵠⲆ] = Cq(At(0.9, 0, ["#efd435"]));
    ⲆΔ[816][Nr.ᐃᐃᐃ] = Cq(At(0.9, 0, ["rgba(255, 84, 0, 1)"]));
    ⲆΔ[817] = [];
    ⲆΔ[817][Nr.ⲆⵠⲆ] = Cq(Od(0.9, 0, ["#efd435"]));
    ⲆΔ[817][Nr.ᐃᐃᐃ] = Cq(Od(0.9, 0, ["#ff5704"]));
    ⲆΔ[324] = Cq(cd(1, "#ffffff"));
    ⲆΔ[301] = Cq(cd(1.5, "#ffffff"));
    ⲆΔ[306] = Cq(ou(1, "Your score:", 15, "#FFF"));
    ⲆΔ[655] = Cq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      Wb(d, a * 119.5, a * 140.125, a * 19);
      Rb(d, undefined, b[1], a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      Rb(d, b[0], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      Rb(d, undefined, b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      Rb(d, br, b[3], a * 10);
      Wb(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      Rb(d, b[4], b[5], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      Rb(d, b[6], b[7], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      Rb(d, br, b[8], a * 5);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      Fb(d, a * -39, a * -40, a * 78, a * 78, a * 10);
      d.restore();
      Rb(d, b[9]);
      d.save();
      d.translate(a * 167, a * 80.125);
      Fb(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
      d.restore();
      Rb(d, b[9]);
      return c;
    }(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    ⲆΔ[656] = ᐃΔ.ⲆⲆⵠⲆⲆⲆⲆ;
    ⲆΔ[135] = [];
    ⲆΔ[135][Nr.ⲆⵠⲆ] = Cq(Qd(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ⲆΔ[135][Nr.ᐃᐃᐃ] = Cq(Qd(1.5, rl, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ⲆΔ[641] = [];
    ⲆΔ[641][Nr.ⲆⵠⲆ] = Cq(jd(2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ⲆΔ[641][Nr.ᐃᐃᐃ] = Cq(jd(2, Jq, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ⲆΔ[642] = [];
    ⲆΔ[642][Nr.ⲆⵠⲆ] = Cq(Rd(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ⲆΔ[642][Nr.ᐃᐃᐃ] = Cq(Rd(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ⲆΔ[134] = [];
    ⲆΔ[134][Nr.ⲆⵠⲆ] = Cq(Fd(2.2, 0, ["#A89F67", "#9E8456"]));
    ⲆΔ[134][Nr.ᐃᐃᐃ] = Cq(Fd(2.2, 0, ["#0B4049", "#08383D"]));
    ⲆΔ[638] = [];
    ⲆΔ[638][Nr.ⲆⵠⲆ] = Cq(Fd(2.2, 0, ["#68622D", "#665329"]));
    ⲆΔ[638][Nr.ᐃᐃᐃ] = Cq(Fd(2.2, 0, ["#0F3A24", "#083326"]));
    ⲆΔ[321] = [];
    ⲆΔ[321][Nr.ⲆⵠⲆ] = Cq(lu(0.8, 0, ["#A89F67", "#9E8456"]));
    ⲆΔ[321][Nr.ᐃᐃᐃ] = Cq(lu(0.8, 0, ["#15514F", "#0F3F3D"]));
    ⲆΔ[811] = [];
    ⲆΔ[811][Nr.ⲆⵠⲆ] = Cq(lu(0.8, 0, ["#c67933", "#b17238"]));
    ⲆΔ[811][Nr.ᐃᐃᐃ] = Cq(lu(0.8, 0, ["#043c37", "#032b23"]));
    ⲆΔ[984] = [];
    ⲆΔ[984][Nr.ⲆⵠⲆ] = Cq(lu(0.8, 0, ["#3a8214", "#4a9c1e"]));
    ⲆΔ[984][Nr.ᐃᐃᐃ] = Cq(lu(0.8, 0, ["#032d29", "#044640"]));
    ⲆΔ[837] = [];
    ⲆΔ[837][Nr.ⲆⵠⲆ] = Cq(lu(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    ⲆΔ[837][Nr.ᐃᐃᐃ] = Cq(lu(0.8, 0, ["#1c6161", "#07413f"]));
    ⲆΔ[848] = [];
    ⲆΔ[848][Nr.ⲆⵠⲆ] = Cq(lu(0.8, 0, ["#328a56", "#449573"]));
    ⲆΔ[848][Nr.ᐃᐃᐃ] = Cq(lu(0.8, 0, ["#043c37", "#032b23"]));
    ⲆΔ[952] = [];
    ⲆΔ[952][Nr.ⲆⵠⲆ] = Cq(lu(0.8, 0, ["#c98e2f", "#a36b11"]));
    ⲆΔ[952][Nr.ᐃᐃᐃ] = Cq(lu(0.8, 0, ["#043c37", "#032b23"]));
    ⲆΔ[962] = [];
    ⲆΔ[962][Nr.ⲆⵠⲆ] = Cq(lu(0.8, 0, ["#b22419", "#99110e"]));
    ⲆΔ[962][Nr.ᐃᐃᐃ] = Cq(lu(0.8, 0, ["#04323c", "#03222b"]));
    ⲆΔ[969] = [];
    ⲆΔ[969][Nr.ⲆⵠⲆ] = Cq(lu(0.8, 0, ["#13a56d", "#098a58"]));
    ⲆΔ[969][Nr.ᐃᐃᐃ] = Cq(lu(0.8, 0, ["#043c37", "#032b23"]));
    ⲆΔ[657] = Gd(1, [{
      f: Fd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⲆΔ[723] = Gd(1, [{
      f: Ud,
      x: 0,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⲆΔ[724] = Gd(1, [{
      f: Uc,
      x: 0,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⲆΔ[334] = Gd(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⲆΔ[115] = [];
    ⲆΔ[115][Nr.ⲆⵠⲆ] = Cq(rd(0.9, 0, ["#7d613e", "#9e7e5a"]));
    ⲆΔ[115][Nr.ᐃᐃᐃ] = Cq(rd(0.9, 0, ["#084442", "#125e5a"]));
    ⲆΔ[132] = [];
    ⲆΔ[132][Nr.ⲆⵠⲆ] = Cq(rd(0.9, 0, ["#9E8456", "#A89F67"]));
    ⲆΔ[132][Nr.ᐃᐃᐃ] = Cq(rd(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    ⲆΔ[668] = [];
    ⲆΔ[668][Nr.ⲆⵠⲆ] = Cq(rd(0.9, 0, ["#665329", "#68622D"]));
    ⲆΔ[668][Nr.ᐃᐃᐃ] = Cq(rd(0.9, 0, ["#083326", "#0F3A24"]));
    ⲆΔ[188] = [];
    ⲆΔ[188][Nr.ⲆⵠⲆ] = Cq(rd(0.9, 0, ["#c67933", "#ec952d"]));
    ⲆΔ[188][Nr.ᐃᐃᐃ] = Cq(rd(0.9, 0, ["#0e6553", "#094437"]));
    ⲆΔ[210] = [];
    ⲆΔ[210][Nr.ⲆⵠⲆ] = Cq(rd(0.9, 0, ["#375809", "#4b770e"]));
    ⲆΔ[210][Nr.ᐃᐃᐃ] = Cq(rd(0.9, 0, ["#09542d", "#0d5d2f"]));
    ⲆΔ[985] = [];
    ⲆΔ[985][Nr.ⲆⵠⲆ] = Cq(rd(0.9, 0, ["#585809", "#72770e"]));
    ⲆΔ[985][Nr.ᐃᐃᐃ] = Cq(rd(0.9, 0, ["#295209", "#305d0d"]));
    ⲆΔ[191] = [];
    ⲆΔ[191][Nr.ⲆⵠⲆ] = Cq(rd(0.9, 0, ["#b9b094", "#e2d2c0"]));
    ⲆΔ[191][Nr.ᐃᐃᐃ] = Cq(rd(0.9, 0, ["#126366", "#0d484b"]));
    ⲆΔ[193] = [];
    ⲆΔ[193][Nr.ⲆⵠⲆ] = Cq(rd(0.9, 0, ["#3f8662", "#30915d"]));
    ⲆΔ[193][Nr.ᐃᐃᐃ] = Cq(rd(0.9, 0, ["#0e6553", "#094437"]));
    ⲆΔ[812] = [];
    ⲆΔ[812][Nr.ⲆⵠⲆ] = Cq(rd(0.9, 0, ["#c79153", "#dfa868"]));
    ⲆΔ[812][Nr.ᐃᐃᐃ] = Cq(rd(0.9, 0, ["#073927", "#075040"]));
    ⲆΔ[838] = [];
    ⲆΔ[838][Nr.ⲆⵠⲆ] = Cq(rd(0.9, 0, ["#768b5b", "#819984"]));
    ⲆΔ[838][Nr.ᐃᐃᐃ] = Cq(rd(0.9, 0, ["#0c4540", "#0e5153"]));
    ⲆΔ[849] = [];
    ⲆΔ[849][Nr.ⲆⵠⲆ] = Cq(rd(0.9, 0, ["#567465", "#627c6e"]));
    ⲆΔ[849][Nr.ᐃᐃᐃ] = Cq(rd(0.9, 0, ["#073927", "#075040"]));
    ⲆΔ[204] = [];
    ⲆΔ[204][Nr.ⲆⵠⲆ] = Cq(rd(0.9, 0, ["#996b3a", "#bf956b"]));
    ⲆΔ[204][Nr.ᐃᐃᐃ] = Cq(rd(0.9, 0, ["#0e6553", "#094437"]));
    ⲆΔ[953] = [];
    ⲆΔ[953][Nr.ⲆⵠⲆ] = Cq(rd(0.9, 0, ["#7a634a", "#a68f77"]));
    ⲆΔ[953][Nr.ᐃᐃᐃ] = Cq(rd(0.9, 0, ["#1e4d43", "#113c32"]));
    ⲆΔ[206] = [];
    ⲆΔ[206][Nr.ⲆⵠⲆ] = Cq(rd(0.9, 0, ["#99403c", "#bc796c"]));
    ⲆΔ[206][Nr.ᐃᐃᐃ] = Cq(rd(0.9, 0, ["#1e434d", "#11303c"]));
    ⲆΔ[963] = [];
    ⲆΔ[963][Nr.ⲆⵠⲆ] = Cq(rd(0.9, 0, ["#88504e", "#b3857c"]));
    ⲆΔ[963][Nr.ᐃᐃᐃ] = Cq(rd(0.9, 0, ["#253b41", "#162930"]));
    ⲆΔ[208] = [];
    ⲆΔ[208][Nr.ⲆⵠⲆ] = Cq(rd(0.9, 0, ["#0f8870", "#23af93"]));
    ⲆΔ[208][Nr.ᐃᐃᐃ] = Cq(rd(0.9, 0, ["#032829", "#083233"]));
    ⲆΔ[970] = [];
    ⲆΔ[970][Nr.ⲆⵠⲆ] = Cq(rd(0.9, 0, ["#618a20", "#84a74e"]));
    ⲆΔ[970][Nr.ᐃᐃᐃ] = Cq(rd(0.9, 0, ["#1f4632", "#335d47"]));
    ⲆΔ[114] = [];
    ⲆΔ[114][Nr.ⲆⵠⲆ] = Cq(Cd(1.2, true, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    ⲆΔ[114][Nr.ᐃᐃᐃ] = Cq(Cd(1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    ⲆΔ[162] = [];
    ⲆΔ[162][Nr.ⲆⵠⲆ] = Cq(hm(1, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ⲆΔ[162][Nr.ᐃᐃᐃ] = Cq(hm(1, Vk, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ⲆΔ[165] = [];
    ⲆΔ[165][Nr.ⲆⵠⲆ] = Cq(lm(1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ⲆΔ[165][Nr.ᐃᐃᐃ] = Cq(lm(1, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ⲆΔ[122] = [];
    ⲆΔ[122][Nr.ⲆⵠⲆ] = Cq(um(1, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ⲆΔ[122][Nr.ᐃᐃᐃ] = Cq(um(1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ⲆΔ[163] = [];
    ⲆΔ[163][Nr.ⲆⵠⲆ] = Cq(um(1, Bq, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ⲆΔ[163][Nr.ᐃᐃᐃ] = Cq(um(1, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ⲆΔ[164] = [];
    ⲆΔ[164][Nr.ⲆⵠⲆ] = Cq(mm(1, qq, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ⲆΔ[164][Nr.ᐃᐃᐃ] = Cq(mm(1, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ⲆΔ[160] = [];
    ⲆΔ[160][Nr.ⲆⵠⲆ] = Cq(jm(0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ⲆΔ[160][Nr.ᐃᐃᐃ] = Cq(jm(0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ⲆΔ[169] = [];
    ⲆΔ[169][Nr.ⲆⵠⲆ] = Cq(Gm(0.8, ns, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ⲆΔ[169][Nr.ᐃᐃᐃ] = Cq(Gm(0.8, Bq, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ⲆΔ[170] = [];
    ⲆΔ[170][Nr.ⲆⵠⲆ] = Cq(Hm(0.8, $j, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ⲆΔ[170][Nr.ᐃᐃᐃ] = Cq(Hm(0.8, qq, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ⲆΔ[168] = [];
    ⲆΔ[168][Nr.ⲆⵠⲆ] = Cq($m(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ⲆΔ[168][Nr.ᐃᐃᐃ] = Cq($m(0.8, fe, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ⲆΔ[123] = [];
    ⲆΔ[123][Nr.ⲆⵠⲆ] = Cq($m(0.8, th, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ⲆΔ[123][Nr.ᐃᐃᐃ] = Cq($m(0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ⲆΔ[166] = [];
    ⲆΔ[166][Nr.ⲆⵠⲆ] = Cq(vm(1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    ⲆΔ[166][Nr.ᐃᐃᐃ] = Cq(vm(1.5, ns, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ⲆΔ[336] = [];
    ⲆΔ[336][Nr.ⲆⵠⲆ] = Cq(vm(1, qs, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⲆΔ[336][Nr.ᐃᐃᐃ] = Cq(vm(1, false, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    ⲆΔ[171] = [];
    ⲆΔ[171][Nr.ⲆⵠⲆ] = Cq(Tm(1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    ⲆΔ[171][Nr.ᐃᐃᐃ] = Cq(Tm(1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    ⲆΔ[373] = [];
    ⲆΔ[373][Nr.ⲆⵠⲆ] = Cq(Tm(1, T, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⲆΔ[373][Nr.ᐃᐃᐃ] = Cq(Tm(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ⲆΔ[124] = [];
    ⲆΔ[124][Nr.ⲆⵠⲆ] = Cq(Tm(1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ⲆΔ[124][Nr.ᐃᐃᐃ] = Cq(Tm(1.5, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ⲆΔ[500] = [];
    ⲆΔ[500][Nr.ⲆⵠⲆ] = Cq(Tm(1, ye, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⲆΔ[500][Nr.ᐃᐃᐃ] = Cq(Tm(1, C, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ⲆΔ[172] = [];
    ⲆΔ[172][Nr.ⲆⵠⲆ] = Cq(Cm(1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    ⲆΔ[172][Nr.ᐃᐃᐃ] = Cq(Cm(1.5, U, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    ⲆΔ[376] = [];
    ⲆΔ[376][Nr.ⲆⵠⲆ] = Cq(Cm(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⲆΔ[376][Nr.ᐃᐃᐃ] = Cq(Cm(1, Ao, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ⲆΔ[173] = [];
    ⲆΔ[173][Nr.ⲆⵠⲆ] = Cq(pm(1.5, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ⲆΔ[173][Nr.ᐃᐃᐃ] = Cq(pm(1.5, fe, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ⲆΔ[379] = [];
    ⲆΔ[379][Nr.ⲆⵠⲆ] = Cq(pm(1, vn, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⲆΔ[379][Nr.ᐃᐃᐃ] = Cq(pm(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ⲆΔ[167] = [];
    ⲆΔ[167][Nr.ⲆⵠⲆ] = Cq(Am(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ⲆΔ[167][Nr.ᐃᐃᐃ] = Cq(Am(0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
    ⲆΔ[691] = [];
    ⲆΔ[691][Nr.ⲆⵠⲆ] = Cq(Ap(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    ⲆΔ[691][Nr.ᐃᐃᐃ] = Cq(Ap(0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    ⲆΔ[264] = [];
    ⲆΔ[264][Nr.ⲆⵠⲆ] = Cq(pd(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    ⲆΔ[264][Nr.ᐃᐃᐃ] = Cq(pd(0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    ⲆΔ[260] = [];
    ⲆΔ[260][Nr.ⲆⵠⲆ] = Cq(Hb(Math.PI, Dd(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    ⲆΔ[260][Nr.ᐃᐃᐃ] = Cq(Hb(Math.PI, Dd(0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    ⲆΔ[266] = Cq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      Rb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      Rb(d, Tg, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      Rb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      Rb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      Rb(d, Fn, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      Rb(d, hj, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      Rb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      Rb(d, wh, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      Rb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      Rb(d, Zi, b[0], 4);
      return c;
    }(0.6, ["#FFFFFF"]));
    ⲆΔ[299] = [];
    ⲆΔ[299][Nr.ⲆⵠⲆ] = Cq(zd(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    ⲆΔ[299][Nr.ᐃᐃᐃ] = Cq(zd(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    ⲆΔ[10] = [];
    ⲆΔ[10][Nr.ⲆⵠⲆ] = Cq(Wm(0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    ⲆΔ[10][Nr.ᐃᐃᐃ] = Cq(Wm(0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    ⲆΔ[11] = [];
    ⲆΔ[11][Nr.ⲆⵠⲆ] = Cq(Mm(0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    ⲆΔ[11][Nr.ᐃᐃᐃ] = Cq(Mm(0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    ⲆΔ[40] = [];
    ⲆΔ[40][Nr.ⲆⵠⲆ] = Cq(Lm(0.63, $j, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    ⲆΔ[40][Nr.ᐃᐃᐃ] = Cq(Lm(0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    ⲆΔ[41] = [];
    ⲆΔ[41][Nr.ⲆⵠⲆ] = Cq(Zd(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    ⲆΔ[41][Nr.ᐃᐃᐃ] = Cq(Zd(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    ⲆΔ[42] = [];
    ⲆΔ[42][Nr.ⲆⵠⲆ] = Cq($d(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    ⲆΔ[42][Nr.ᐃᐃᐃ] = Cq($d(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    ⲆΔ[716] = [];
    ⲆΔ[716][Nr.ⲆⵠⲆ] = Cq(Nc(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    ⲆΔ[716][Nr.ᐃᐃᐃ] = Cq(Nc(0.42, dg, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    ⲆΔ[720] = [];
    ⲆΔ[720][Nr.ⲆⵠⲆ] = Cq(jc(0.9, ["#e4c027"]));
    ⲆΔ[720][Nr.ᐃᐃᐃ] = Cq(jc(0.9, ["#D8E57F"]));
    ⲆΔ[144] = [];
    ⲆΔ[144][Nr.ⲆⵠⲆ] = Cq(Ec(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    ⲆΔ[144][Nr.ᐃᐃᐃ] = Cq(Ec(0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    ⲆΔ[722] = Cq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      Fb(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
      d.restore();
      Rb(d, b[0], b[1], a * 4);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      Fb(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
      d.restore();
      Rb(d, b[6], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      Rb(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      Rb(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      Rb(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      Rb(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 72, a * 68.5);
      Fb(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
      d.restore();
      Rb(d, b[4]);
      d.save();
      d.translate(a * 72, a * 175.5);
      Fb(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      Rb(d, b[4]);
      d.save();
      d.translate(a * 72, a * 279.5);
      Fb(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
      d.restore();
      Rb(d, b[4]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      Rb(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      Rb(d, b[3], b[3], a * 10);
      return c;
    }(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    ⲆΔ[407] = [];
    ⲆΔ[407][Nr.ⲆⵠⲆ] = Cq(fm(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    ⲆΔ[407][Nr.ᐃᐃᐃ] = Cq(fm(0.5, th, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    ⲆΔ[119] = [];
    ⲆΔ[119][Nr.ⲆⵠⲆ] = Cq(zm(0.5, qq, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    ⲆΔ[119][Nr.ᐃᐃᐃ] = Cq(zm(0.5, Jg, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    ⲆΔ[411] = Cq(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      Fb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      Rb(e, c[0], c[1], 4);
      return d;
    }(0.8, 0, ["#5f6061", "#939393"]));
    ⲆΔ[412] = Gd(1, [{
      f: Ud,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
    ⲆΔ[198] = [];
    ⲆΔ[198][Nr.ⲆⵠⲆ] = Cq(_m(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ⲆΔ[198][Nr.ᐃᐃᐃ] = Cq(_m(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ⲆΔ[913] = [];
    ⲆΔ[913][Nr.ⲆⵠⲆ] = Cq(Im(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ⲆΔ[913][Nr.ᐃᐃᐃ] = Cq(Im(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ⲆΔ[18] = [];
    ⲆΔ[18][Nr.ⲆⵠⲆ] = Cq(Hb(3, wm(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    ⲆΔ[18][Nr.ᐃᐃᐃ] = Cq(Hb(3, wm(0.7, Bq, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    ⲆΔ[12] = [];
    ⲆΔ[12][Nr.ⲆⵠⲆ] = Cq(Hb(3, km(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    ⲆΔ[12][Nr.ᐃᐃᐃ] = Cq(Hb(3, km(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    ⲆΔ[13] = [];
    ⲆΔ[13][Nr.ⲆⵠⲆ] = Cq(Hb(3, Pm(0.65, ns, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    ⲆΔ[13][Nr.ᐃᐃᐃ] = Cq(Hb(3, Pm(0.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    ⲆΔ[14] = [];
    ⲆΔ[14][Nr.ⲆⵠⲆ] = Cq(Hb(3, xm(0.67, dg, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    ⲆΔ[14][Nr.ᐃᐃᐃ] = Cq(Hb(3, xm(0.67, Vk, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    ⲆΔ[15] = [];
    ⲆΔ[15][Nr.ⲆⵠⲆ] = Cq(Hb(3, Em(0.67, true, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    ⲆΔ[15][Nr.ᐃᐃᐃ] = Cq(Hb(3, Em(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    ⲆΔ[33] = [];
    ⲆΔ[33][Nr.ⲆⵠⲆ] = Cq(Hb(3, Jm(0.67, dg, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    ⲆΔ[33][Nr.ᐃᐃᐃ] = Cq(Hb(3, Jm(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    ⲆΔ[16] = [];
    ⲆΔ[16][Nr.ⲆⵠⲆ] = Cq(Hb(3, Sm(1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    ⲆΔ[16][Nr.ᐃᐃᐃ] = Cq(Hb(3, Sm(1, true, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    ⲆΔ[35] = [];
    ⲆΔ[35][Nr.ⲆⵠⲆ] = Cq(Hb(3, Ym(1, th, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ⲆΔ[35][Nr.ᐃᐃᐃ] = Cq(Hb(3, Ym(1, true, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    ⲆΔ[55] = [];
    ⲆΔ[55][Nr.ⲆⵠⲆ] = Cq(Hb(3, $c(0.5, Jq, ["#0d1b1c", "#939393", "#5f6061"])));
    ⲆΔ[55][Nr.ᐃᐃᐃ] = Cq(Hb(3, $c(0.5, rl, ["#030d14", "#485e66", "#1f343f"])));
    ⲆΔ[45] = [];
    ⲆΔ[45][Nr.ⲆⵠⲆ] = Cq(Hb(3, Lc(1, U, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    ⲆΔ[45][Nr.ᐃᐃᐃ] = Cq(Hb(3, Lc(1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    ⲆΔ[36] = [];
    ⲆΔ[36][Nr.ⲆⵠⲆ] = Cq(Hb(3, Ym(1, _q, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ⲆΔ[36][Nr.ᐃᐃᐃ] = Cq(Hb(3, Ym(1, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
    ⲆΔ[37] = [];
    ⲆΔ[37][Nr.ⲆⵠⲆ] = Cq(Hb(3, Ym(1, Jq, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ⲆΔ[37][Nr.ᐃᐃᐃ] = Cq(Hb(3, Ym(1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ⲆΔ[38] = [];
    ⲆΔ[38][Nr.ⲆⵠⲆ] = Cq(Hb(3, Ym(1, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ⲆΔ[38][Nr.ᐃᐃᐃ] = Cq(Hb(3, Ym(1, _q, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ⲆΔ[148] = [];
    ⲆΔ[148][Nr.ⲆⵠⲆ] = Cq(Jc(0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    ⲆΔ[148][Nr.ᐃᐃᐃ] = Cq(Jc(0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    ⲆΔ[536] = [];
    ⲆΔ[536].push(Cq(Jc(0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    ⲆΔ[536].push(Cq(Jc(0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    ⲆΔ[536].push(Cq(Jc(0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    ⲆΔ[538] = [];
    ⲆΔ[538].push(ⲆΔ[536][0]);
    ⲆΔ[538].push(ⲆΔ[536][0]);
    ⲆΔ[538].push(ⲆΔ[536][0]);
    ⲆΔ[158] = [];
    ⲆΔ[158][Nr.ⲆⵠⲆ] = Cq(Bc(0.06, false, ["#141414", "#c4a23a", "#816511"]));
    ⲆΔ[158][Nr.ᐃᐃᐃ] = Cq(Bc(0.06, Zj, ["#030d14", "#2b6664", "#133d3c"]));
    ⲆΔ[535] = [];
    ⲆΔ[535].push(Cq(Bc(0.08, false, ["#141414", "#c4a23a", "#816511"])));
    ⲆΔ[535].push(Cq(Bc(0.08, cl, ["#141414", "#e2bd4e", "#a38018"])));
    ⲆΔ[535].push(Cq(Bc(0.08, Dg, ["#141414", "#b0902e", "#634d09"])));
    ⲆΔ[149] = Gd(1.5, [{
      f: Qc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ⲆΔ[526] = [];
    ⲆΔ[526][Nr.ⲆⵠⲆ] = Cq(Cc(0.8, 0, ["#347f93", "#54a4ba"]));
    ⲆΔ[526][Nr.ᐃᐃᐃ] = Cq(Cc(0.8, 0, ["#98ede3", "#94f2e7"]));
    ⲆΔ[527] = [];
    ⲆΔ[527][Nr.ⲆⵠⲆ] = Cq(Sc(0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    ⲆΔ[527][Nr.ᐃᐃᐃ] = Cq(Sc(0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    ⲆΔ[528] = [];
    ⲆΔ[528][Nr.ⲆⵠⲆ] = Cq(Hc(0.8, 0, ["#a9e4ed", "#86d4e0"]));
    ⲆΔ[528][Nr.ᐃᐃᐃ] = Cq(Hc(0.8, 0, ["#83ddd4", "#485e66"]));
    ⲆΔ[151] = [];
    ⲆΔ[151][Nr.ⲆⵠⲆ] = Cq(Wc(0.8, Vk, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    ⲆΔ[151][Nr.ᐃᐃᐃ] = Cq(Wc(0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    ⲆΔ[1192] = [];
    ⲆΔ[1192][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠΔᐃΔⵠᐃⵠ;
    ⲆΔ[1192][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⲆⲆⲆΔⵠⵠ;
    ⲆΔ[1193] = [];
    ⲆΔ[1193][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⲆᐃᐃⲆⲆᐃ;
    ⲆΔ[1193][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆΔΔᐃΔᐃⲆ;
    ⲆΔ[1194] = [];
    ⲆΔ[1194][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆΔⵠⲆⵠⲆⵠ;
    ⲆΔ[1194][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆΔⲆᐃΔⲆⵠ;
    ⲆΔ[152] = [];
    ⲆΔ[152][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠᐃⲆⲆⵠᐃⵠ;
    ⲆΔ[152][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆΔⵠᐃᐃⲆΔ;
    ⲆΔ[1198] = [];
    ⲆΔ[1198][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠΔΔΔΔⲆᐃ;
    ⲆΔ[1198][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃΔΔⵠⵠᐃⵠ;
    ⲆΔ[153] = [];
    ⲆΔ[153][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⲆΔⵠᐃᐃΔ;
    ⲆΔ[153][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆⵠⵠΔΔΔⵠ;
    ⲆΔ[1202] = [];
    ⲆΔ[1202][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⲆⲆᐃⲆΔⵠ;
    ⲆΔ[1202][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠΔⵠΔᐃᐃ;
    ⲆΔ[154] = [];
    ⲆΔ[154][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⵠΔⵠⵠⲆᐃ;
    ⲆΔ[154][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⲆᐃⵠᐃⵠⵠ;
    ⲆΔ[1206] = [];
    ⲆΔ[1206][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⵠⲆⲆⵠⲆⵠ;
    ⲆΔ[1206][Nr.ᐃᐃᐃ] = ᐃΔ.ΔΔⵠⵠΔⵠΔ;
    ⲆΔ[155] = [];
    ⲆΔ[155][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆΔᐃᐃᐃΔΔ;
    ⲆΔ[155][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆΔⲆᐃⲆΔᐃ;
    ⲆΔ[1210] = [];
    ⲆΔ[1210][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠᐃⵠΔⵠⵠᐃ;
    ⲆΔ[1210][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⲆᐃⲆᐃᐃⵠ;
    ⲆΔ[156] = [];
    ⲆΔ[156][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠΔᐃⲆⲆⵠⵠ;
    ⲆΔ[156][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃᐃᐃⲆᐃⵠⲆ;
    ⲆΔ[1214] = [];
    ⲆΔ[1214][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃⲆⲆᐃᐃⵠ;
    ⲆΔ[1214][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃᐃΔΔⵠΔⲆ;
    ⲆΔ[157] = [];
    ⲆΔ[157][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⵠⵠᐃⲆⲆΔ;
    ⲆΔ[157][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⲆⵠⵠⵠⲆᐃ;
    ⲆΔ[245] = [];
    ⲆΔ[245][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⲆⲆⵠᐃΔⲆ;
    ⲆΔ[245][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃΔΔΔΔΔΔ;
    ⲆΔ[246] = ᐃΔ.ⵠⲆᐃΔᐃᐃΔ;
    ⲆΔ[159] = [];
    ⲆΔ[159][Nr.ⲆⵠⲆ] = Cq(Mc(0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    ⲆΔ[159][Nr.ᐃᐃᐃ] = Cq(Mc(0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    ⲆΔ[558] = Cq(fc(0.3, ["#092813", "#1f773d"], 0));
    ⲆΔ[559] = Cq(fc(0.3, ["#092813", "#1f773d"], 1));
    ⲆΔ[885] = Cq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(0, a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      Rb(d, b[0]);
      d.translate(0, a * -5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      Rb(d, b[1]);
      return c;
    }(0.6, ["#092813", "#1f773d"]));
    ⲆΔ[556] = [];
    ⲆΔ[556].push(Cq(yc(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
    ⲆΔ[556].push(Cq(yc(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
    ⲆΔ[556].push(Cq(yc(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
    ⲆΔ[560] = [];
    var b = Cq(yc(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
    ⲆΔ[560].push(b);
    ⲆΔ[560].push(b);
    ⲆΔ[560].push(b);
    ⲆΔ[557] = [];
    ⲆΔ[557].push(Cq(yc(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
    ⲆΔ[557].push(Cq(yc(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
    ⲆΔ[557].push(Cq(yc(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
    ⲆΔ[681] = Cq(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 170;
      var i = b * 172;
      var a = f / 2;
      var j = i / 2;
      d.width = f;
      d.height = i;
      e.translate(a, j);
      e.save();
      for (var h = 0; h < 10; h++) {
        e.rotate(Math.PI / 5);
        e.save();
        e.translate(b * 65, 0);
        Ob(e, 3, b * 18, b * 4);
        Rb(e, c[0]);
        e.restore();
      }
      e.restore();
      Wb(e, 0, 0, b * 40);
      Rb(e, js, c[0], b * 6);
      Wb(e, 0, 0, b * 20);
      Rb(e, c[0]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ⲆΔ[794] = Cq(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 130;
      var g = b * 142;
      var a = f / 2;
      var i = g / 2;
      d.width = f;
      d.height = g;
      Wb(e, a, i, b * 40);
      Rb(e, wh, c[0], b * 7);
      Wb(e, a, i, b * 30);
      Rb(e, undefined, c[0], b * 7);
      Wb(e, a, i, b * 20);
      Rb(e, c[0]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ⲆΔ[562] = Cq(fc(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
    ⲆΔ[667] = Cq(Hb(Math.PI / 5, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      Fb(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
      d.restore();
      Rb(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      Rb(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      Rb(d, b[0], b[0], a * 15);
      return c;
    }(0.2, ["#FFFFFF"])));
    ⲆΔ[43] = [];
    ⲆΔ[43][Nr.ⲆⵠⲆ] = Cq(Ac(0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    ⲆΔ[43][Nr.ᐃᐃᐃ] = Cq(Ac(0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    ⲆΔ[561] = [];
    ⲆΔ[561].push(Cq(yc(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
    ⲆΔ[561].push(Cq(yc(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
    ⲆΔ[561].push(Cq(yc(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
    ⲆΔ[83] = [];
    ⲆΔ[83][Nr.ⲆⵠⲆ] = Cq(yp(0.37, fe, ["#2a2938", "#242330", "#313041"]));
    ⲆΔ[83][Nr.ᐃᐃᐃ] = Cq(yp(0.37, yn, ["#1b1e30", "#161921", "#252f3e"]));
    ⲆΔ[85] = [];
    ⲆΔ[85][Nr.ⲆⵠⲆ] = Cq(zp(0.17, true, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    ⲆΔ[85][Nr.ᐃᐃᐃ] = Cq(zp(0.17, true, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    ⲆΔ[86] = [];
    ⲆΔ[86][Nr.ⲆⵠⲆ] = Cq(rp(0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    ⲆΔ[86][Nr.ᐃᐃᐃ] = Cq(rp(0.55, true, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    ⲆΔ[84] = [];
    ⲆΔ[84][Nr.ⲆⵠⲆ] = Cq(rp(0.55, Jq, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    ⲆΔ[84][Nr.ᐃᐃᐃ] = Cq(rp(0.55, Ig, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
    ⲆΔ[77] = [];
    ⲆΔ[77][Nr.ⲆⵠⲆ] = Cq(pp(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    ⲆΔ[77][Nr.ᐃᐃᐃ] = Cq(pp(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    ⲆΔ[78] = [];
    ⲆΔ[78][Nr.ⲆⵠⲆ] = Cq(pp(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    ⲆΔ[78][Nr.ᐃᐃᐃ] = Cq(pp(0.2, Pr, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    ⲆΔ[79] = [];
    ⲆΔ[79][Nr.ⲆⵠⲆ] = Cq(pp(0.2, U, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    ⲆΔ[79][Nr.ᐃᐃᐃ] = Cq(pp(0.2, Ig, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    ⲆΔ[61] = [];
    ⲆΔ[61][Nr.ⲆⵠⲆ] = Cq(Qm(0.24, Jg, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    ⲆΔ[61][Nr.ᐃᐃᐃ] = Cq(Qm(0.24, true, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    ⲆΔ[59] = [];
    ⲆΔ[59][Nr.ⲆⵠⲆ] = Cq(Vm(0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    ⲆΔ[59][Nr.ᐃᐃᐃ] = Cq(Vm(0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    ⲆΔ[62] = [];
    ⲆΔ[62][Nr.ⲆⵠⲆ] = Cq(Hb(3, Oc(0.9, fe, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    ⲆΔ[62][Nr.ᐃᐃᐃ] = Cq(Hb(3, Oc(0.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    ⲆΔ[750] = [];
    ⲆΔ[750][Nr.ⲆⵠⲆ] = Cq(Hb(3, Oc(1, true, [Xa, w, undefined, "#c8efef", "#c8efef"])));
    ⲆΔ[750][Nr.ᐃᐃᐃ] = Cq(Hb(3, Oc(1, fe, [vh, undefined, An, "#87d2e6", "#87d2e6"])));
    ⲆΔ[755] = [];
    ⲆΔ[755].push(Cq(dp(0.3, Bq, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
    ⲆΔ[755].push(Cq(dp(0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
    ⲆΔ[755].push(Cq(dp(0.3, dg, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
    ⲆΔ[795] = [];
    ⲆΔ[795].push(Cq(fp(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
    ⲆΔ[795].push(Cq(fp(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ⲆΔ[795].push(Cq(fp(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ⲆΔ[782] = [];
    ⲆΔ[782].push(Cq(Qt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
    ⲆΔ[782].push(Cq(Qt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
    ⲆΔ[782].push(Cq(Qt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
    ⲆΔ[783] = [];
    ⲆΔ[783].push(Cq(Qt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
    ⲆΔ[783].push(Cq(Qt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
    ⲆΔ[783].push(Cq(Qt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
    ⲆΔ[46] = [];
    ⲆΔ[46][Nr.ⲆⵠⲆ] = Cq(Hb(3, Zc(0.7, gr, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    ⲆΔ[46][Nr.ᐃᐃᐃ] = Cq(Hb(3, Zc(0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
    ⲆΔ[50] = [];
    ⲆΔ[50][Nr.ⲆⵠⲆ] = Cq(Hb(3, Zc(0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    ⲆΔ[50][Nr.ᐃᐃᐃ] = Cq(Hb(3, Zc(0.7, U, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    ⲆΔ[51] = [];
    ⲆΔ[51][Nr.ⲆⵠⲆ] = Cq(Hb(3, Zc(0.7, fe, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    ⲆΔ[51][Nr.ᐃᐃᐃ] = Cq(Hb(3, Zc(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    ⲆΔ[52] = [];
    ⲆΔ[52][Nr.ⲆⵠⲆ] = Cq(Hb(3, Zc(0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    ⲆΔ[52][Nr.ᐃᐃᐃ] = Cq(Hb(3, Zc(0.7, Bq, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    ⲆΔ[592] = [];
    ⲆΔ[592].push(Cq(_c(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    ⲆΔ[592].push(Cq(_c(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    ⲆΔ[592].push(Cq(_c(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    ⲆΔ[326] = Cq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      Rb(d, b[0], b[0], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      Rb(d, b[0], b[0], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      Rb(d, b[0], b[0], a * 2);
      return c;
    }(1.1, ["#BB0000"]));
    ⲆΔ[333] = Cq(Hb(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      Wb(d, a * 213.5, a * 256.75, a * 75);
      Rb(d, b);
      Wb(d, a * 213.5, a * 175.75, a * 25);
      Rb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(0.9, "#BB0000")));
    ⲆΔ[23] = [];
    ⲆΔ[23][Nr.ⲆⵠⲆ] = Cq(dc(0.55, Jg, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    ⲆΔ[23][Nr.ᐃᐃᐃ] = Cq(dc(0.55, yn, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
    ⲆΔ[58] = [];
    ⲆΔ[58][Nr.ⲆⵠⲆ] = Cq(rc(0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    ⲆΔ[58][Nr.ᐃᐃᐃ] = Cq(rc(0.55, rl, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    ⲆΔ[25] = [];
    ⲆΔ[25][Nr.ⲆⵠⲆ] = Cq(wc(0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    ⲆΔ[25][Nr.ᐃᐃᐃ] = Cq(wc(0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    ⲆΔ[26] = [];
    ⲆΔ[26][Nr.ⲆⵠⲆ] = Cq(xc(0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
    ⲆΔ[26][Nr.ᐃᐃᐃ] = Cq(xc(0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
    ⲆΔ[27] = [];
    ⲆΔ[27][Nr.ⲆⵠⲆ] = Cq(Dc(0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    ⲆΔ[27][Nr.ᐃᐃᐃ] = Cq(Dc(0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    ⲆΔ[413] = [];
    ⲆΔ[413][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[413][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[413][Nr.ⲆⵠⲆ].push(Cq(Nm(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    ⲆΔ[413][Nr.ⲆⵠⲆ].push(Cq(qm(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    ⲆΔ[413][Nr.ⲆⵠⲆ].push(Cq(Xm(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    ⲆΔ[413][Nr.ᐃᐃᐃ].push(Cq(Nm(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    ⲆΔ[413][Nr.ᐃᐃᐃ].push(Cq(qm(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    ⲆΔ[413][Nr.ᐃᐃᐃ].push(Cq(Xm(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    ⲆΔ[449] = [];
    ⲆΔ[449][Nr.ⲆⵠⲆ] = Cq(gc(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    ⲆΔ[449][Nr.ᐃᐃᐃ] = Cq(gc(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    ⲆΔ[451] = [];
    ⲆΔ[451][Nr.ⲆⵠⲆ] = Cq(bc(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ⲆΔ[451][Nr.ᐃᐃᐃ] = Cq(bc(1, ["#050505", "#327570", "#021724", "#200333"]));
    ⲆΔ[452] = [];
    ⲆΔ[452][Nr.ⲆⵠⲆ] = Cq(tc(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ⲆΔ[452][Nr.ᐃᐃᐃ] = Cq(tc(1, ["#050505", "#327570", "#021724", "#200333"]));
    ⲆΔ[243] = [];
    ⲆΔ[243][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[243][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[243][Nr.ⲆⵠⲆ] = [ᐃΔ.ΔⵠⲆᐃⵠⵠᐃ, ᐃΔ.ⲆᐃᐃⵠΔⲆΔ, ᐃΔ.ⵠⵠᐃⲆΔⵠᐃ, ᐃΔ.ΔⵠᐃⵠⵠΔᐃ, ᐃΔ.ΔᐃⲆᐃᐃⲆⵠ, ᐃΔ.ⲆᐃⲆⵠⵠⲆⵠ, ᐃΔ.ⵠᐃⵠⵠⵠΔᐃ, ᐃΔ.ⵠᐃⵠΔⲆⵠΔ, ᐃΔ.ᐃΔⲆᐃⵠⵠⲆ, ᐃΔ.ᐃⵠΔΔⲆΔᐃ, ᐃΔ.ᐃⵠᐃⲆᐃᐃΔ, ᐃΔ.ᐃΔⵠᐃᐃⲆᐃ, ᐃΔ.ⵠⵠⵠⲆᐃΔΔ, ᐃΔ.ᐃⲆΔⵠⵠΔᐃ, ᐃΔ.ⵠᐃᐃⲆⵠⲆⵠ, ᐃΔ.ⵠᐃᐃⵠᐃᐃᐃ, ᐃΔ.ΔⵠᐃⲆⵠⲆⵠ, ᐃΔ.ⲆΔᐃΔⵠᐃΔ, ᐃΔ.ⲆᐃΔᐃΔⵠᐃ, ᐃΔ.ᐃⵠⵠⲆᐃⲆΔ, ᐃΔ.ΔⵠᐃᐃᐃⲆᐃ, ᐃΔ.ⵠᐃⵠⵠⲆⲆⵠ, ᐃΔ.ᐃⲆᐃΔΔᐃΔ, ᐃΔ.ⵠᐃⵠⵠⵠⲆⲆ, ᐃΔ.ⵠΔⲆⵠⲆΔᐃ, ᐃΔ.ΔⲆⵠⵠⵠᐃⲆ, ᐃΔ.ⲆⲆⵠⲆᐃⵠᐃ, ᐃΔ.ΔᐃⵠΔΔⲆⵠ, ᐃΔ.ᐃⲆⵠⲆⵠΔΔ, ᐃΔ.ᐃᐃᐃⵠⵠⵠΔ, ᐃΔ.ⵠΔᐃⵠᐃᐃⲆ, ᐃΔ.ⵠⲆⲆᐃⵠΔᐃ, ᐃΔ.ΔΔᐃⲆⲆⲆᐃ, ᐃΔ.ⵠᐃᐃᐃΔⵠⵠ, ᐃΔ.ⲆΔⲆᐃᐃⲆΔ, ᐃΔ.ᐃᐃΔⲆⲆᐃᐃ, ᐃΔ.ΔΔΔⵠΔⲆᐃ, ᐃΔ.ᐃΔᐃⵠⲆΔⲆ, ᐃΔ.ΔⵠⵠⲆⵠΔⵠ, ᐃΔ.ⲆⲆⵠΔᐃⵠⲆ, ᐃΔ.ⲆᐃΔΔⵠΔⲆ, ᐃΔ.ⲆⵠᐃⲆᐃᐃΔ, ᐃΔ.ᐃΔᐃΔᐃⲆⲆ, ᐃΔ.ⵠᐃΔⲆⲆⲆΔ, ᐃΔ.ΔΔⲆⲆᐃΔⵠ, ᐃΔ.ⲆⲆΔⵠⲆⵠⵠ, ᐃΔ.ᐃⵠΔⵠᐃᐃᐃ, ᐃΔ.ⵠΔⵠⲆⵠⲆⲆ, ᐃΔ.ΔᐃⲆⲆⲆᐃᐃ, ᐃΔ.ᐃΔᐃⲆΔⲆΔ, ᐃΔ.ⵠᐃⵠⲆΔᐃΔ, ᐃΔ.ⵠᐃᐃⵠᐃⵠⲆ, ᐃΔ.ⵠⵠᐃΔᐃⵠΔ, ᐃΔ.ⲆᐃᐃⵠⲆΔⲆ, ᐃΔ.ⵠᐃⵠΔⵠᐃᐃ, ᐃΔ.ⵠⲆᐃᐃΔᐃΔ];
    ⲆΔ[243][Nr.ᐃᐃᐃ] = [ᐃΔ.ᐃᐃⲆᐃⵠΔⲆ, ᐃΔ.ⵠⲆΔΔΔⲆⲆ, ᐃΔ.ᐃᐃⲆᐃΔᐃⵠ, ᐃΔ.ⲆⵠⲆᐃᐃⵠΔ, ᐃΔ.ⲆΔᐃΔΔᐃⲆ, ᐃΔ.ΔⲆⵠⵠⵠᐃⵠ, ᐃΔ.ⲆΔⲆΔᐃᐃⵠ, ᐃΔ.ᐃΔⲆΔΔⲆⲆ, ᐃΔ.ⲆΔⵠΔⲆⲆΔ, ᐃΔ.ΔⵠⵠΔᐃⲆⲆ, ᐃΔ.ᐃΔⵠⵠᐃⲆᐃ, ᐃΔ.ᐃΔⲆⲆⵠⲆᐃ, ᐃΔ.ⵠⵠⲆᐃⲆⵠⵠ, ᐃΔ.ΔΔᐃᐃΔΔⲆ, ᐃΔ.ⲆᐃⵠⵠⵠΔᐃ, ᐃΔ.ᐃᐃⵠⲆⲆⲆΔ, ᐃΔ.ᐃⲆⲆᐃᐃᐃᐃ, ᐃΔ.ΔΔⵠᐃⵠᐃᐃ, ᐃΔ.ⵠⲆⲆⲆⵠΔⵠ, ᐃΔ.ⵠΔⲆⲆΔΔⲆ, ᐃΔ.ⵠⲆⵠⲆΔΔᐃ, ᐃΔ.ΔΔᐃΔΔᐃⲆ, ᐃΔ.ΔΔΔᐃⲆⵠΔ, ᐃΔ.ᐃᐃⲆⲆᐃⵠᐃ, ᐃΔ.ΔⵠΔΔⵠΔⵠ, ᐃΔ.ΔᐃΔⲆⵠⵠⲆ, ᐃΔ.ᐃΔⵠⲆⲆⵠΔ, ᐃΔ.ⵠⲆᐃᐃΔΔⲆ, ᐃΔ.ⲆⲆⲆΔΔⵠⵠ, ᐃΔ.ΔΔⲆⵠᐃⲆⵠ, ᐃΔ.ⵠΔⵠᐃⲆΔᐃ, ᐃΔ.ΔⵠⲆᐃⵠⵠⵠ, ᐃΔ.ⵠΔᐃΔⲆΔⲆ, ᐃΔ.ⵠᐃⲆⵠⵠⲆⲆ, ᐃΔ.ᐃᐃⵠᐃΔⲆⲆ, ᐃΔ.ΔᐃⲆⵠΔⲆⲆ, ᐃΔ.ΔⲆᐃΔⵠᐃΔ, ᐃΔ.ΔⵠⵠᐃⵠⲆᐃ, ᐃΔ.ΔΔⲆⵠⲆΔⵠ, ᐃΔ.ᐃⵠⵠᐃⲆᐃᐃ, ᐃΔ.ⵠⲆᐃΔΔΔⵠ, ᐃΔ.ⵠΔΔⲆⲆⲆᐃ, ᐃΔ.ⲆⲆⵠᐃΔΔΔ, ᐃΔ.ΔⵠⲆᐃⲆⲆᐃ, ᐃΔ.ⵠⵠᐃⵠᐃⵠⲆ, ᐃΔ.ΔᐃⵠⵠⲆᐃⵠ, ᐃΔ.ΔⵠⲆⲆΔⵠⵠ, ᐃΔ.ⵠⲆΔᐃΔᐃᐃ, ᐃΔ.ᐃⵠᐃⲆΔⲆⵠ, ᐃΔ.ᐃⲆᐃᐃⲆᐃⵠ, ᐃΔ.ⵠᐃⵠᐃᐃⵠⲆ, ᐃΔ.ΔᐃΔᐃⵠᐃᐃ, ᐃΔ.ⲆⲆⵠᐃⵠΔᐃ, ᐃΔ.ⲆⲆⵠᐃᐃⲆᐃ, ᐃΔ.ΔⲆⲆᐃᐃⲆᐃ, ᐃΔ.ΔΔⲆⵠΔΔⲆ];
    ⲆΔ[676] = [];
    ⲆΔ[676][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[676][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[676][Nr.ⲆⵠⲆ].push(Cq(pu(1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
    ⲆΔ[676][Nr.ⲆⵠⲆ].push(Cq(pu(0.9, In, ["#252B28", "#747471", "#83827e"], 1)));
    ⲆΔ[676][Nr.ⲆⵠⲆ].push(Cq(pu(1, false, ["#252B28", "#747471", "#83827e"], 2)));
    ⲆΔ[676][Nr.ⲆⵠⲆ].push(Cq(pu(0.9, false, ["#252B28", "#747471", "#83827e"], 2)));
    ⲆΔ[676][Nr.ᐃᐃᐃ].push(Cq(pu(1.1, Rh, ["#030d14", "#123335", "#183f3f"], 0)));
    ⲆΔ[676][Nr.ᐃᐃᐃ].push(Cq(pu(0.9, Eh, ["#030d14", "#123335", "#183f3f"], 1)));
    ⲆΔ[676][Nr.ᐃᐃᐃ].push(Cq(pu(1, T, ["#030d14", "#123335", "#183f3f"], 2)));
    ⲆΔ[676][Nr.ᐃᐃᐃ].push(Cq(pu(0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
    ⲆΔ[679] = [];
    ⲆΔ[679][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[679][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[679][Nr.ⲆⵠⲆ].push(Cq(pu(1.1, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ⲆΔ[679][Nr.ⲆⵠⲆ].push(Cq(pu(0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ⲆΔ[679][Nr.ⲆⵠⲆ].push(Cq(pu(1, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ⲆΔ[679][Nr.ⲆⵠⲆ].push(Cq(pu(0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ⲆΔ[679][Nr.ᐃᐃᐃ].push(Cq(pu(1.1, th, ["#030d14", "#123335", "#183f3f"], 2)));
    ⲆΔ[679][Nr.ᐃᐃᐃ].push(Cq(pu(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ⲆΔ[679][Nr.ᐃᐃᐃ].push(Cq(pu(1, dg, ["#030d14", "#123335", "#183f3f"], 2)));
    ⲆΔ[679][Nr.ᐃᐃᐃ].push(Cq(pu(0.9, Ig, ["#030d14", "#123335", "#183f3f"], 2)));
    ⲆΔ[415] = [];
    ⲆΔ[415][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[415][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[415][Nr.ⲆⵠⲆ].push(Cq(su(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⲆΔ[415][Nr.ⲆⵠⲆ].push(Cq(su(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⲆΔ[415][Nr.ⲆⵠⲆ].push(Cq(su(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⲆΔ[415][Nr.ᐃᐃᐃ].push(Cq(su(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ⲆΔ[415][Nr.ᐃᐃᐃ].push(Cq(su(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ⲆΔ[415][Nr.ᐃᐃᐃ].push(Cq(su(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ⲆΔ[416] = [];
    ⲆΔ[416][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[416][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[416][Nr.ⲆⵠⲆ].push(Cq(tu(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ⲆΔ[416][Nr.ⲆⵠⲆ].push(Cq(tu(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ⲆΔ[416][Nr.ⲆⵠⲆ].push(Cq(tu(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ⲆΔ[416][Nr.ᐃᐃᐃ].push(Cq(tu(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ⲆΔ[416][Nr.ᐃᐃᐃ].push(Cq(tu(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ⲆΔ[416][Nr.ᐃᐃᐃ].push(Cq(tu(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ⲆΔ[121] = [];
    ⲆΔ[121][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[121][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[121][Nr.ⲆⵠⲆ].push(Cq(ic(1.7, Ig, ["#1d051e", "#c27add", "#cd98e5"])));
    ⲆΔ[121][Nr.ⲆⵠⲆ].push(Cq(ic(1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ⲆΔ[121][Nr.ⲆⵠⲆ].push(Cq(ic(1.3, ns, ["#1d051e", "#c27add", "#cd98e5"])));
    ⲆΔ[121][Nr.ᐃᐃᐃ].push(Cq(ic(1.7, qq, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ⲆΔ[121][Nr.ᐃᐃᐃ].push(Cq(ic(1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ⲆΔ[121][Nr.ᐃᐃᐃ].push(Cq(ic(1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ⲆΔ[678] = [];
    ⲆΔ[678][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[678][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[678][Nr.ⲆⵠⲆ].push(Cq(uc(1, ["#2d53c4"])));
    ⲆΔ[678][Nr.ᐃᐃᐃ].push(Cq(uc(1, ["#2d53c4"])));
    ⲆΔ[696] = [];
    ⲆΔ[696][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[696][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[696][Nr.ⲆⵠⲆ].push(Cq(uc(1, ["#c4912d"])));
    ⲆΔ[696][Nr.ᐃᐃᐃ].push(Cq(uc(1, ["#c4912d"])));
    ⲆΔ[680] = [];
    ⲆΔ[680][Nr.ⲆⵠⲆ] = Cq(ac(1, ["#414040"]));
    ⲆΔ[680][Nr.ᐃᐃᐃ] = Cq(ac(1, ["#153635"]));
    ⲆΔ[508] = [];
    ⲆΔ[508][Nr.ⲆⵠⲆ] = Cq(vm(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⲆΔ[508][Nr.ᐃᐃᐃ] = Cq(vm(1, Eh, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⲆΔ[509] = [];
    ⲆΔ[509][Nr.ⲆⵠⲆ] = Cq(Tm(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⲆΔ[509][Nr.ᐃᐃᐃ] = Cq(Tm(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⲆΔ[512] = [];
    ⲆΔ[512][Nr.ⲆⵠⲆ] = Cq(Tm(1, $k, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⲆΔ[512][Nr.ᐃᐃᐃ] = Cq(Tm(1, In, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⲆΔ[511] = [];
    ⲆΔ[511][Nr.ⲆⵠⲆ] = Cq(pm(1, Dg, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⲆΔ[511][Nr.ᐃᐃᐃ] = Cq(pm(1, Ao, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⲆΔ[510] = [];
    ⲆΔ[510][Nr.ⲆⵠⲆ] = Cq(Cm(1, Nh, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⲆΔ[510][Nr.ᐃᐃᐃ] = Cq(Cm(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⲆΔ[419] = [];
    ⲆΔ[419][Nr.ⲆⵠⲆ] = Cq(mc(0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    ⲆΔ[419][Nr.ᐃᐃᐃ] = Cq(mc(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    ⲆΔ[445] = [];
    ⲆΔ[445][Nr.ⲆⵠⲆ] = Cq(lc(0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    ⲆΔ[445][Nr.ᐃᐃᐃ] = Cq(lc(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    ⲆΔ[259] = [];
    ⲆΔ[818] = [];
    ⲆΔ[516] = [];
    ⲆΔ[819] = [];
    for (a = 0; a < 2; a++) {
      ⲆΔ[259][a] = document.createElement("canvas");
      ⲆΔ[259][a].width = 193;
      ⲆΔ[259][a].height = 193;
      ⲆΔ[818][a] = ⲆΔ[259][a].getContext("2d");
      ⲆΔ[516][a] = document.createElement("canvas");
      ⲆΔ[516][a].width = 600;
      ⲆΔ[516][a].height = 600;
      ⲆΔ[819][a] = ⲆΔ[516][a].getContext("2d");
    }
    ⲆΔ[475] = [];
    ⲆΔ[475][Nr.ⲆⵠⲆ] = Cq(ac(1, ["#c8e0de"]));
    ⲆΔ[475][Nr.ᐃᐃᐃ] = Cq(ac(1, ["#147071"]));
    ⲆΔ[476] = [];
    ⲆΔ[476][Nr.ⲆⵠⲆ] = Cq(ac(1, ["#231912"]));
    ⲆΔ[476][Nr.ᐃᐃᐃ] = Cq(ac(1, ["#021719"]));
    ⲆΔ[697] = Cq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      Fb(d, a * -7, a * -20, a * 14, a * 37, a * 20);
      d.restore();
      Rb(d, b[0]);
      d.save();
      d.translate(a * 131, a * 94);
      Fb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
      d.restore();
      Rb(d, b[0], b[0], a * 13);
      d.save();
      d.translate(a * 223, a * 94.5);
      Fb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
      d.restore();
      Rb(d, b[0]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      Fb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
      d.restore();
      Rb(d, b[0]);
      return c;
    }(0.5, ["#BB0000"]));
    ⲆΔ[461] = Cq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 9, a * 93);
      d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
      d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
      d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
      d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
      d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
      d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
      d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
      d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
      d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
      d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
      d.closePath();
      Rb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 25, a * 63);
      d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
      d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
      d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      Rb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 91, a * 53);
      d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
      d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
      d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      Rb(d, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    ⲆΔ[462] = Cq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 8, a * 50);
      d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
      d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
      d.closePath();
      Rb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 14, a * 57);
      d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      Rb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
      d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
      Rb(d, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    ⲆΔ[463] = Cq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      Rb(d, b[0]);
      return c;
    }(1, ["#BB0000"]));
    ⲆΔ[466] = Cq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -20, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      Rb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      Rb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      Rb(d, b);
      return c;
    }(0.8, "#BB0000"));
    ⲆΔ[467] = Cq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      Rb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      Rb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      Rb(d, b);
      return c;
    }(0.8, "#BB0000"));
    ⲆΔ[322] = Cq(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 85;
      var g = b * 115;
      var a = b * 4;
      d.width = f;
      d.height = g;
      e.translate(b * -130, b * -60);
      e.globalAlpha = 1;
      e.beginPath();
      e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      e.closePath();
      Rb(e, c, c, a);
      return d;
    }(0.9, "#BB0000"));
    ⲆΔ[279] = Cq(Kb(0.6, "#BB0000"));
    ⲆΔ[280] = Cq(Kb(0.6, "#1CE7E0"));
    ⲆΔ[281] = Cq(Kb(0.6, "#DBE71C"));
    ⲆΔ[308] = Cq(Kb(0.6, "#00BB00"));
    ⲆΔ[602] = [];
    ⲆΔ[602][Nr.ⲆⵠⲆ] = Cq(ac(1, ["#dac291"]));
    ⲆΔ[602][Nr.ᐃᐃᐃ] = Cq(ac(1, ["#0D423D"]));
    ⲆΔ[698] = [];
    ⲆΔ[698][Nr.ⲆⵠⲆ] = Cq(ac(1, ["#dac291"]));
    ⲆΔ[698][Nr.ᐃᐃᐃ] = Cq(ac(1, ["#0D423D"]));
    ⲆΔ[788] = [];
    ⲆΔ[788][Nr.ⲆⵠⲆ] = Cq(up(0.3, Bq, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    ⲆΔ[788][Nr.ᐃᐃᐃ] = Cq(up(0.3, gr, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    ⲆΔ[182] = [];
    ⲆΔ[182][Nr.ⲆⵠⲆ] = Cq(up(0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    ⲆΔ[182][Nr.ᐃᐃᐃ] = Cq(up(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    ⲆΔ[127] = [Cq(Pp(1, true, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ⲆΔ[128] = [Cq(Pp(1, true, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ⲆΔ[603] = [];
    ⲆΔ[603][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[603][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[603][Nr.ⲆⵠⲆ].push(Cq(nc(1, ["#0B6A84"])));
    ⲆΔ[603][Nr.ⲆⵠⲆ].push(Cq(hc(1, ["#0B6A84"])));
    ⲆΔ[603][Nr.ⲆⵠⲆ].push(Cq(ec(1, ["#0B6A84"])));
    ⲆΔ[603][Nr.ⲆⵠⲆ].push(Cq(cc(1, ["#0B6A84"])));
    ⲆΔ[603][Nr.ⲆⵠⲆ].push(Cq(sc(1, ["#0B6A84"])));
    ⲆΔ[603][Nr.ⲆⵠⲆ].push(Cq(vc(1, ["#0B6A84"])));
    ⲆΔ[603][Nr.ⲆⵠⲆ].push(Cq(oc(1, ["#0B6A84"])));
    ⲆΔ[603][Nr.ᐃᐃᐃ].push(Cq(nc(1, ["#09373F"])));
    ⲆΔ[603][Nr.ᐃᐃᐃ].push(Cq(hc(1, ["#09373F"])));
    ⲆΔ[603][Nr.ᐃᐃᐃ].push(Cq(ec(1, ["#09373F"])));
    ⲆΔ[603][Nr.ᐃᐃᐃ].push(Cq(cc(1, ["#09373F"])));
    ⲆΔ[603][Nr.ᐃᐃᐃ].push(Cq(sc(1, ["#09373F"])));
    ⲆΔ[603][Nr.ᐃᐃᐃ].push(Cq(vc(1, ["#09373F"])));
    ⲆΔ[603][Nr.ᐃᐃᐃ].push(Cq(oc(1, ["#09373F"])));
    ⲆΔ[692] = [];
    ⲆΔ[692][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[692][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[692][Nr.ⲆⵠⲆ].push(Cq(Km(1.7, ["#FBEFBC"], 0)));
    ⲆΔ[692][Nr.ⲆⵠⲆ].push(Cq(Km(1.9, ["#FBEFBC"], 1)));
    ⲆΔ[692][Nr.ⲆⵠⲆ].push(Cq(Km(1.7, ["#FBEFBC"], 2)));
    ⲆΔ[692][Nr.ᐃᐃᐃ].push(Cq(Km(1.7, ["#0F4C48"], 0)));
    ⲆΔ[692][Nr.ᐃᐃᐃ].push(Cq(Km(1.9, ["#0F4C48"], 1)));
    ⲆΔ[692][Nr.ᐃᐃᐃ].push(Cq(Km(1.7, ["#0F4C48"], 2)));
    ⲆΔ[694] = [];
    ⲆΔ[694][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[694][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[694][Nr.ⲆⵠⲆ].push(Cq(Km(1.8, ["#A9D6D3"], 0)));
    ⲆΔ[694][Nr.ⲆⵠⲆ].push(Cq(Km(2, ["#A9D6D3"], 1)));
    ⲆΔ[694][Nr.ⲆⵠⲆ].push(Cq(Km(1.8, ["#A9D6D3"], 2)));
    ⲆΔ[694][Nr.ᐃᐃᐃ].push(Cq(Km(1.8, ["#115E60"], 0)));
    ⲆΔ[694][Nr.ᐃᐃᐃ].push(Cq(Km(2, ["#115E60"], 1)));
    ⲆΔ[694][Nr.ᐃᐃᐃ].push(Cq(Km(1.8, ["#115E60"], 2)));
    ⲆΔ[695] = [];
    ⲆΔ[695][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[695][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[695][Nr.ⲆⵠⲆ].push(Cq(Km(1.9, ["#2A8B9B"], 0)));
    ⲆΔ[695][Nr.ⲆⵠⲆ].push(Cq(Km(2.1, ["#2A8B9B"], 1)));
    ⲆΔ[695][Nr.ⲆⵠⲆ].push(Cq(Km(1.9, ["#2A8B9B"], 2)));
    ⲆΔ[695][Nr.ᐃᐃᐃ].push(Cq(Km(1.9, ["#0F464C"], 0)));
    ⲆΔ[695][Nr.ᐃᐃᐃ].push(Cq(Km(2.1, ["#0F464C"], 1)));
    ⲆΔ[695][Nr.ᐃᐃᐃ].push(Cq(Km(1.9, ["#0F464C"], 2)));
    ⲆΔ[693] = [];
    ⲆΔ[693][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[693][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[693][Nr.ⲆⵠⲆ].push(Cq(dm(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ⲆΔ[693][Nr.ⲆⵠⲆ].push(Cq(dm(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ⲆΔ[693][Nr.ⲆⵠⲆ].push(Cq(dm(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ⲆΔ[693][Nr.ᐃᐃᐃ].push(Cq(dm(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ⲆΔ[693][Nr.ᐃᐃᐃ].push(Cq(dm(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ⲆΔ[693][Nr.ᐃᐃᐃ].push(Cq(dm(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ⲆΔ[637] = [];
    ⲆΔ[637][Nr.ⲆⵠⲆ] = Cq(Rc(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    ⲆΔ[637][Nr.ᐃᐃᐃ] = Cq(Rc(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    ⲆΔ[687] = Cq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = 1;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      Rb(d, b[0], b[0], a * 12);
      return c;
    }(0.8, ["#B6222A"]));
    ⲆΔ[673] = [];
    ⲆΔ[673][Nr.ⲆⵠⲆ] = Cq(Cp(0.8, true, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    ⲆΔ[673][Nr.ᐃᐃᐃ] = Cq(Cp(0.8, rl, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    ⲆΔ[688] = Cq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      return c;
    }(0.8, ["#B6222A"]));
    ⲆΔ[902] = [];
    ⲆΔ[902][Nr.ⲆⵠⲆ] = Cq(ld(0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
    ⲆΔ[902][Nr.ᐃᐃᐃ] = Cq(ld(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ⲆΔ[903] = [];
    ⲆΔ[903][Nr.ⲆⵠⲆ] = Cq(ld(0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
    ⲆΔ[903][Nr.ᐃᐃᐃ] = Cq(ld(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
    ⲆΔ[Nr.ΔⵠᐃⲆΔⵠⲆ] = [];
    ⲆΔ[Nr.ΔⵠᐃⲆΔⵠⲆ][Nr.ⲆⵠⲆ] = Cq(ld(0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
    ⲆΔ[Nr.ΔⵠᐃⲆΔⵠⲆ][Nr.ᐃᐃᐃ] = Cq(ld(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ⲆΔ[904] = Cq(ud(0.4, ["#B6222A"]));
    ⲆΔ[905] = Cq(ud(0.4, ["#B6222A"]));
    ⲆΔ[Nr.ᐃⵠᐃΔΔⲆⲆⲆⲆ] = Cq(ud(0.4, ["#B6222A"]));
    ⲆΔ[230] = Cq(Bm(0.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    ⲆΔ[229] = Cq(Tt(0.35, Vk, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    ⲆΔ[886] = [];
    ⲆΔ[886][Nr.ⲆⵠⲆ] = Cq(Ut(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    ⲆΔ[886][Nr.ᐃᐃᐃ] = Cq(Ut(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
    ⲆΔ[887] = [];
    ⲆΔ[887][Nr.ⲆⵠⲆ] = Cq(Ut(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    ⲆΔ[887][Nr.ᐃᐃᐃ] = Cq(Ut(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
    ⲆΔ[894] = [];
    ⲆΔ[894][Nr.ⲆⵠⲆ] = Cq(Xt(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ⲆΔ[894][Nr.ᐃᐃᐃ] = Cq(Xt(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ⲆΔ[895] = [];
    ⲆΔ[895][Nr.ⲆⵠⲆ] = Cq($t(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ⲆΔ[895][Nr.ᐃᐃᐃ] = Cq($t(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ⲆΔ[896] = [];
    ⲆΔ[896][Nr.ⲆⵠⲆ] = Cq(Xt(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ⲆΔ[896][Nr.ᐃᐃᐃ] = Cq(Xt(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    ⲆΔ[897] = [];
    ⲆΔ[897][Nr.ⲆⵠⲆ] = Cq($t(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ⲆΔ[897][Nr.ᐃᐃᐃ] = Cq($t(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    ⲆΔ[888] = Cq(_t(0.35, ["#B6222A"]));
    ⲆΔ[889] = Cq(Xt(0.35, 0, [Aq, "#B6222A"]));
    ⲆΔ[890] = Cq($t(0.35, 0, [undefined, "#B6222A"]));
    ⲆΔ[891] = Cq(_t(0.35, ["#22E066"]));
    ⲆΔ[892] = Cq(Xt(0.35, 0, [undefined, "#22E066"]));
    ⲆΔ[893] = Cq($t(0.35, 0, [undefined, "#22E066"]));
    ⲆΔ[48] = [];
    ⲆΔ[48][Nr.ⲆⵠⲆ] = Cq(em(0.3, Jq, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    ⲆΔ[48][Nr.ᐃᐃᐃ] = Cq(em(0.3, th, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    ⲆΔ[47] = [];
    ⲆΔ[47][Nr.ⲆⵠⲆ] = Cq(yu(0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    ⲆΔ[47][Nr.ᐃᐃᐃ] = Cq(yu(0.45, fe, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    ⲆΔ[141] = [];
    ⲆΔ[141][Nr.ⲆⵠⲆ] = Cq(ep(0.63, rl, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    ⲆΔ[141][Nr.ᐃᐃᐃ] = Cq(ep(0.63, Ka, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ⲆΔ[125] = [];
    ⲆΔ[125][Nr.ⲆⵠⲆ] = Cq(Kc(1, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    ⲆΔ[125][Nr.ᐃᐃᐃ] = Cq(Kc(1, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ⲆΔ[221] = [];
    ⲆΔ[221][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃᐃᐃⵠⲆᐃᐃⵠᐃ;
    ⲆΔ[221][Nr.ᐃᐃᐃ] = ᐃΔ.ΔᐃⵠⲆᐃⵠᐃⵠⲆ;
    ⲆΔ[190] = [];
    ⲆΔ[190][Nr.ⲆⵠⲆ] = Cq($b(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ⲆΔ[190][Nr.ᐃᐃᐃ] = Cq($b(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ⲆΔ[853] = [ⲆΔ[190]];
    ⲆΔ[853][1] = [];
    ⲆΔ[853][2] = [];
    ⲆΔ[853][1][Nr.ⲆⵠⲆ] = Cq(hd(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ⲆΔ[853][1][Nr.ᐃᐃᐃ] = Cq(hd(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ⲆΔ[853][2][Nr.ⲆⵠⲆ] = Cq(nd(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ⲆΔ[853][2][Nr.ᐃᐃᐃ] = Cq(nd(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ⲆΔ[49] = [];
    ⲆΔ[49][Nr.ⲆⵠⲆ] = Cq(Hb(3 - Math.PI / 2, cp(0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    ⲆΔ[49][Nr.ᐃᐃᐃ] = Cq(Hb(3 - Math.PI / 2, cp(0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    ⲆΔ[728] = [];
    ⲆΔ[728][Nr.ⲆⵠⲆ] = Cq(Ld(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    ⲆΔ[728][Nr.ᐃᐃᐃ] = Cq(Ld(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
    ⲆΔ[798] = Cq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      Fb(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
      d.restore();
      Rb(d, b[4], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      Fb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      Rb(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      Fb(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      Rb(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      Fb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      Rb(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      Fb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      Rb(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 204, a * 121.5);
      Fb(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
      d.restore();
      Rb(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 197, a * 299);
      Fb(d, a * 85, a * -9, a * -170, a * 18, a * 10);
      d.restore();
      Rb(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      Rb(d, Aq, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      Rb(d, undefined, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      Rb(d, w, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      Rb(d, undefined, b[1], a * 12);
      return c;
    }(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    ⲆΔ[729] = Cq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      Fb(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
      d.restore();
      Rb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      Fb(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
      d.restore();
      Rb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      Fb(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
      d.restore();
      Rb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 275);
      Fb(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
      d.restore();
      Rb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      Fb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      Rb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      Fb(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      Rb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      Fb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      Rb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      Fb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      Rb(d, b[0], b[0], a * 12);
      return c;
    }(0.3, ["#BB0000"]));
    ⲆΔ[658] = Gd(1, [{
      f: lp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⲆΔ[150] = Gd(1.5, [{
      f: Qc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ⲆΔ[669] = op(0.35, ["#072428", "#67A242", "#67A242"], 0);
    ⲆΔ[670] = op(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
    ⲆΔ[671] = op(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    ⲆΔ[672] = op(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
    if (ⵠⲆΔⲆⵠᐃᐃ) {
      ⲆΔ[278] = Cq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 180;
        var g = b * 8;
        c.width = e;
        c.height = f;
        d.beginPath();
        Fb(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.8;
        Rb(d, "#1D6055");
        d.globalAlpha = 1;
        var a = ou(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(1));
    } else {
      ⲆΔ[278] = Cq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 270;
        var g = b * 8;
        c.width = e;
        c.height = f + 20;
        d.beginPath();
        Fb(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.5;
        Rb(d, "#1D6055");
        d.globalAlpha = 1;
        var a = ou(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(1));
    }
    if (ⵠⲆΔⲆⵠᐃᐃ) {
      ⲆΔ[267] = Cq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 335;
        var f = b * 250;
        var i = b * 120;
        var a = b * 20;
        var j = b * 35;
        var h = b * 65;
        var g = b * 2;
        var k = b * 4;
        c.width = e;
        c.height = i;
        d.beginPath();
        d.translate(0, b * 15);
        Fb(d, h, 0, f, a, g);
        Rb(d, null, "#69A148", k);
        d.translate(0, j);
        Fb(d, h, 0, f, a, g);
        Rb(d, null, "#AF352A", k);
        d.translate(0, j);
        Fb(d, h, 0, f, a, g);
        Rb(d, null, "#669BB1", k);
        return c;
      }(0.75));
    } else {
      ⲆΔ[267] = Cq(function (c) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var i = c * 950;
        var j = c * 180;
        var k = c * 50;
        var a = c * 20;
        var m = c * 240;
        var h = c * 35;
        var g = c * 1;
        var l = c * 4;
        var n = c * 4;
        e.width = i;
        e.height = k;
        f.translate(0, c * 15);
        Fb(f, h, g, j, a, l);
        Rb(f, null, "#69A148", n);
        var b = ⲆΔ[669];
        f.drawImage(b, 17, -8);
        f.translate(m, 0);
        Fb(f, h, g, j, a, l);
        Rb(f, null, "#AF352A", n);
        b = ⲆΔ[671];
        f.drawImage(b, 17, -9);
        f.translate(m, 0);
        Fb(f, h, g, j, a, l);
        Rb(f, null, "#669BB1", n);
        b = ⲆΔ[670];
        f.drawImage(b, 17, -8);
        f.translate(m, 0);
        Fb(f, h, g, j, a, l);
        Rb(f, null, "#074A87", n);
        b = ⲆΔ[672];
        f.drawImage(b, 17, -8);
        return e;
      }(1));
    }
    if (ⵠⲆΔⲆⵠᐃᐃ) {
      ⲆΔ[608] = Cq(hp(0.75));
    } else {
      ⲆΔ[608] = Cq(hp(1));
    }
    ⲆΔ[792] = Cq(wc(0.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    ⲆΔ[537] = Cq(Hb(5.8, Zt(0.15, rl, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    ⲆΔ[283] = [];
    ⲆΔ[465] = [];
    for (a = 0; a < 18; a++) {
      ⲆΔ[465][a] = ou(1, "" + (a + 1), 12, "#FFF");
    }
    ⲆΔ[708] = [];
    ⲆΔ[708].push(Cq(wp(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    ⲆΔ[708].push(Cq(wp(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
    ⲆΔ[708].push(Cq(wp(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
    ⲆΔ[725] = [];
    ⲆΔ[725].push(Cq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      Wb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      Rb(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      Wb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      Rb(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      Rb(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      Rb(c, "#3A2A0D");
      Wb(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      Rb(c, undefined, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      Rb(c, Zi, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      Rb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      Rb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      Rb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      Rb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      Rb(c, hj, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      Rb(c, Tg, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      Rb(c, An, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      Rb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      Rb(c, js, "#c7a726", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      Rb(c, dk, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      Rb(c, Vh, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      Rb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      Rb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      Rb(c, w, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      Rb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      Rb(c, dk, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      Rb(c, jq, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      Rb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      Rb(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      Rb(c, "#ECBE35", "#EDCE4F", a * 8);
      Wb(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      Rb(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(0.22)));
    ⲆΔ[725].push(Cq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      Wb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      Rb(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      Wb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      Rb(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      Rb(c, "#3A2A0D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      Rb(c, "#071A1B");
      Wb(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      Rb(c, undefined, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      Rb(c, Tg, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      Rb(c, vh, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      Rb(c, js, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      Rb(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      Rb(c, Zi, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      Rb(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      Rb(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      Rb(c, dk, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      Rb(c, Yk, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      Rb(c, js, "#281C08", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      Rb(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      Rb(c, Tn, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      Rb(c, ca, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      Rb(c, gs, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      Rb(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      Rb(c, mg, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      Rb(c, vh, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      Rb(c, br, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      Rb(c, An, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      Rb(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      Rb(c, "#E1DDD5", "#EAE7E4", a * 8);
      Wb(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      Rb(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(0.22)));
    ⲆΔ[726] = Cq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      Wb(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      Rb(c, "#C09D6F", "#A37943", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      Rb(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      Fb(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
      c.restore();
      Rb(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      Fb(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
      c.restore();
      Rb(c, "#C09D6F");
      Wb(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      Rb(c, "#C09D6F");
      return b;
    }(0.22));
    ⲆΔ[727] = [];
    ⲆΔ[727].push(Cq(md(1.5, ["#795026", "#654320", "#eda80d"], 0)));
    ⲆΔ[727].push(Cq(md(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
    ⲆΔ[727].push(Cq(md(1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
    ⲆΔ[546] = ᐃΔ.ᐃᐃⵠⵠⲆⵠⲆ;
    ⲆΔ[547] = ᐃΔ.ΔⲆᐃⲆΔⲆⵠ;
    ⲆΔ[548] = ᐃΔ.ΔᐃΔⵠΔΔΔ;
    ⲆΔ[549] = ᐃΔ.ⵠΔᐃΔⵠᐃᐃ;
    ⲆΔ[517] = ou(1, "Show spectators", 25, "#FFF", dk, ca, "#000", 5, 220);
    ⲆΔ[525] = ou(1, "Reconnecting...", 30, "#FFF");
    console.log(undefined, undefined);
  }
  function Zc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 160;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    Fb(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    Rb(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    Fb(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 0, a * 1);
    e.moveTo(a * 180.5, a * 169.0625);
    e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
    e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
    e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
    e.closePath();
    Rb(e, c[5]);
    e.restore();
    return d;
  }
  function $c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 144;
    d.height = a * 280;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    Rb(e, c[1], c[2], a * 6);
    return d;
  }
  function ep(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 163;
    d.height = a * 163;
    e.save();
    e.translate(a * 82.5, a * 81.1015625);
    e.rotate(0);
    Fb(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
    e.restore();
    Rb(e, c[1]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    Fb(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    Fb(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    Rb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    Fb(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    Fb(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    Rb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    Fb(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    Fb(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    Rb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    Fb(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    Fb(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    Rb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    Fb(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    Fb(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    Rb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    Fb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    Fb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    Rb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    Fb(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    Fb(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    Rb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    Fb(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    Fb(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    Rb(e, c[2], c[3], a * 3);
    return d;
  }
  function ip(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    Rb(e, Tg, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    Rb(e, c[3], c[2], a * 12);
    e.translate(0, a * 25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    Rb(e, c[5]);
    e.translate(0, a * -25);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    Rb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    Rb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    Rb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    Rb(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    Rb(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    Rb(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    Rb(e, undefined, c[2], a * 11);
    return d;
  }
  function tp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    Rb(e, jq, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    Rb(e, c[3], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    Rb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    Rb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    Rb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    Rb(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    Rb(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    Rb(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    Rb(e, undefined, c[2], a * 11);
    return d;
  }
  function np() {
    var b = hx.time;
    if (ⲆΔ[285]) {
      oo.drawImage(ⲆΔ[285][b][1], zo + 480, Co + 190);
      oo.drawImage(ⲆΔ[285][b][2], zo + 180, Co - 430);
      oo.drawImage(ⲆΔ[285][b][1], zo - 855, Co + 100);
      oo.drawImage(ⲆΔ[285][b][0], zo - 550, Co - 300);
      oo.drawImage(ⲆΔ[285][b][0], zo - 1020, Co - 520);
    }
    if (ⲆΔ[108]) {
      oo.drawImage(ⲆΔ[108][b][1], zo - 80, Co - 640);
      oo.drawImage(ⲆΔ[108][b][1], zo + 80, Co + 490);
      oo.drawImage(ⲆΔ[108][b][2], zo - 180, Co - 700);
      oo.drawImage(ⲆΔ[108][b][0], zo + 550, Co + 100);
      oo.drawImage(ⲆΔ[108][b][1], zo + 450, Co + 300);
      oo.drawImage(ⲆΔ[108][b][1], zo + 780, Co + 300);
      oo.drawImage(ⲆΔ[108][b][2], zo + 980, Co + 200);
      oo.drawImage(ⲆΔ[108][b][2], zo + 680, Co + 600);
      oo.drawImage(ⲆΔ[108][b][2], zo - 380, Co + 100);
      oo.drawImage(ⲆΔ[108][b][2], zo + 280, Co + 250);
    }
    if (ⲆΔ[110]) {
      oo.drawImage(ⲆΔ[110][b][0], zo - 590, Co);
      oo.drawImage(ⲆΔ[110][b][0], zo + 120, Co - 390);
      oo.drawImage(ⲆΔ[110][b][0], zo - 270, Co + 340);
    }
    if (ⲆΔ[109]) {
      oo.drawImage(ⲆΔ[109][b][4], zo - 700, Co - 600);
      oo.drawImage(ⲆΔ[109][b][2], zo - 970, Co - 250);
      oo.drawImage(ⲆΔ[109][b][5], zo - 720, Co - 200);
      oo.drawImage(ⲆΔ[109][b][2], zo - 1020, Co + 340);
      oo.drawImage(ⲆΔ[109][b][0], zo - 1120, Co - 0);
      oo.drawImage(ⲆΔ[109][b][1], zo - 650, Co - 330);
      oo.drawImage(ⲆΔ[109][b][4], zo - 495, Co - 90);
      oo.drawImage(ⲆΔ[109][b][3], zo - 520, Co + 340);
      oo.drawImage(ⲆΔ[109][b][2], zo + 830, Co - 520);
    }
    ⲆΔ[413];
    if (kx && jx) {
      var c = kx.ⲆⲆᐃ.x;
      var d = kx.ⲆⲆᐃ.y;
      kx.ⲆⲆᐃ.x = zo;
      kx.ⲆⲆᐃ.y = Co;
      var e = jx.time;
      jx.time = hx.time;
      var f;
      var g = hx.items;
      g[2].x = 400;
      g[2].y = 100;
      g[2].ⵠⵠⲆⵠ(114);
      (f = g[1]).x = -500;
      f.y = 100;
      f.ⲆΔᐃⲆ[0].x = f.x - 20.5;
      f.ⲆΔᐃⲆ[0].y = f.y - 22.5;
      f.ⲆΔᐃⲆ[1].x = f.x - 35.5;
      f.ⲆΔᐃⲆ[1].y = f.y + 7.5;
      f.ⲆΔᐃⲆ[2].x = f.x + 7.5;
      f.ⲆΔᐃⲆ[2].y = f.y - 30;
      f.ⲆΔᐃⲆ[3].x = f.x + 22.5;
      f.ⲆΔᐃⲆ[3].y = f.y;
      f.ⲆΔᐃⲆ[4].x = f.x - 7.5;
      f.ⲆΔᐃⲆ[4].y = f.y + 14.5;
      for (var a = 0; f.info > a; a++) {
        f.ⲆΔᐃⲆ[a].ⵠⵠⲆⵠ(294);
      }
      (f = g[3]).x = 210;
      f.y = -290;
      f.ⲆΔᐃⲆ[0].x = f.x - 20.5;
      f.ⲆΔᐃⲆ[0].y = f.y - 22.5;
      f.ⲆΔᐃⲆ[1].x = f.x - 35.5;
      f.ⲆΔᐃⲆ[1].y = f.y + 7.5;
      f.ⲆΔᐃⲆ[2].x = f.x + 7.5;
      f.ⲆΔᐃⲆ[2].y = f.y - 30;
      f.ⲆΔᐃⲆ[3].x = f.x + 22.5;
      f.ⲆΔᐃⲆ[3].y = f.y;
      f.ⲆΔᐃⲆ[4].x = f.x - 7.5;
      f.ⲆΔᐃⲆ[4].y = f.y + 14.5;
      for (a = 0; f.info > a; a++) {
        f.ⲆΔᐃⲆ[a].ⵠⵠⲆⵠ(294);
      }
      g[0].x = 450;
      g[0].y = -100;
      g[0].ΔᐃⲆⵠⵠ(113);
      g[0].ⵠᐃⵠᐃΔ();
      kx.ⲆⲆᐃ.x = c;
      kx.ⲆⲆᐃ.y = d;
      jx.time = e;
    }
  }
  function op(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 109;
    d.height = a * 110;
    Wb(e, a * 54.5, a * 55, a * 48.038209575038294);
    Rb(e, b[0], b[1], a * 8);
    if (c == 0) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
      e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
      e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
      e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
      e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
      e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
      e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
      e.closePath();
      Rb(e, b[2]);
    } else if (c == 1) {
      e.save();
      e.translate(a * 55, a * 39.48748779296875);
      Fb(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
      e.restore();
      Rb(e, b[2], b[3], a * 4);
      Wb(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
      Rb(e, b[4], b[3], a * 4);
      e.save();
      e.translate(a * 55.5, a * 57.287506103515625);
      Fb(e, a * -9, a * -16, a * 18, a * 32, a * 10);
      e.restore();
      Rb(e, b[4]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 25.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
      e.closePath();
      Rb(e, undefined, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 37.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
      e.closePath();
      Rb(e, undefined, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 50.287506103515625);
      e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
      e.closePath();
      Rb(e, Tg, b[5], a * 4);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
      e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
      e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
      e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
      e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
      e.closePath();
      Rb(e, b[2]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
      e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
      e.closePath();
      Rb(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
      e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
      e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
      e.closePath();
      Rb(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
      e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
      e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
      e.closePath();
      Rb(e, b[2]);
    } else if (c == 3) {
      e.scale(0.9, 0.9);
      e.translate(a * 6, 0);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54, a * 0.421875);
      e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
      e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
      e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
      e.closePath();
      Rb(e, b[2], b[3], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 74, a * 52.421875);
      e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
      e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
      e.closePath();
      Rb(e, b[3]);
    }
    return d;
  }
  function ap(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 167;
    d.height = a * 136;
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    Fb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 0.8;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    Fb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    Rb(e, hj, c[1], a * 7);
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    Fb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    Fb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    Rb(e, undefined, c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
    e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
    Rb(e, undefined, c[1], a * 10);
    return d;
  }
  function rp(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 198;
    f.height = b * 147;
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 76);
    g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
    g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
    g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
    g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
    g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
    g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
    g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
    g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
    g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
    g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
    g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
    g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
    g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
    g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
    g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
    g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
    g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
    g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
    g.closePath();
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    Rb(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    Rb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 49, b * 98);
    g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
    g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
    g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
    g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
    g.closePath();
    Rb(g, d[1]);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 54, b * 98);
    g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
    g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
    g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
    g.closePath();
    Rb(g, d[0]);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 118, b * 47);
    g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
    g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
    g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
    g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
    g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
    g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
    g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
    g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
    g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
    g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
    g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
    g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
    g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
    g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
    g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
    g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
    g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
    g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
    g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
    g.closePath();
    Rb(g, d[1], d[2], b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 62, b * 21);
    g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
    g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
    g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
    g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
    g.closePath();
    Rb(g, d[4]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 60, b * 29);
    g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
    Rb(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 61, b * 37);
    g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
    Rb(g, Tg, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 52, b * 31);
    g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
    Rb(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 35);
    g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
    Rb(g, wh, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 58, b * 44);
    g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
    Rb(g, Tn, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 48);
    g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
    Rb(g, Xa, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 41);
    g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
    Rb(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 48);
    g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
    Rb(g, gs, d[3], b * 4);
    if (e == 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 99, b * 101);
      g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
      Rb(g, br, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
      g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
      Rb(g, undefined, d[5], b * 6);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
      Rb(g, undefined, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
      Rb(g, w, d[5], b * 6);
      Wb(g, b * 86, b * 114.39999389648438, b * 4.5);
      Rb(g, d[1], d[5], b * 6);
      Wb(g, b * 121, b * 114.39999389648438, b * 4.5);
      Rb(g, d[1], d[5], b * 6);
    }
    return f;
  }
  function sp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 272;
    d.height = a * 264;
    e.translate(0, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    Rb(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
    e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
    e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
    e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
    e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
    e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
    e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
    e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
    e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
    e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
    e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
    e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
    e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
    e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
    e.closePath();
    Rb(e, c[4], c[5], a * 6);
    return d;
  }
  function hp(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 600;
    var f = b * 22;
    var g = b * 4;
    var a = b * 4;
    c.width = e;
    c.height = f;
    Fb(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
    Rb(d, null, "#BBE8EF", a);
    return c;
  }
  function gp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 160;
    d.height = a * 161;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80.5, a * 78);
    Fb(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80.5, a * 78);
    Fb(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 80, a * 78.5);
    Fb(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
    e.restore();
    Rb(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80, a * 79.5);
    Fb(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80, a * 79.5);
    Fb(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    Rb(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 78.5, a * 78);
    Fb(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 78.5, a * 78);
    Fb(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    Rb(e, c[3], c[4], a * 6);
    return d;
  }
  function lp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 170;
    e.translate(0, a * -170);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159.5, a * 322.0625);
    e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
    e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
    e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
    e.closePath();
    Rb(e, c[0], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212.5, a * 270.0625);
    e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
    e.closePath();
    Rb(e, undefined, c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.5, a * 226.0625);
    e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
    e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
    e.closePath();
    Rb(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164.5, a * 245.0625);
    e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
    e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
    e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
    e.closePath();
    Rb(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 260.0625);
    e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
    e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
    e.closePath();
    Rb(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 152.5, a * 278.0625);
    e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
    e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
    e.closePath();
    Rb(e, c[2], c[3], a * 12);
    return d;
  }
  function up(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 496;
    e.height = b * 520;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
    f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
    f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
    f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
    f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
    f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
    f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
    f.closePath();
    Rb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -10);
    Wb(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    Rb(f, d[5], Tn, b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
    f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
    f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
    f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
    f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
    f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
    f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
    f.closePath();
    Rb(f, d[0]);
    f.globalAlpha = 1;
    var g = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = 1;
      d.translate(0, a * -10);
      Wb(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      Rb(d, b[1], b[2], a * 14);
      d.globalCompositeOperation = "destination-out";
      Wb(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      Rb(d, b[0], b[0], a * 14);
      d.globalCompositeOperation = "source-over";
      return c;
    }(b, d);
    f.drawImage(g, 0, 0);
    f.translate(0, b * -10);
    Wb(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    Rb(f, undefined, d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    Rb(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    Rb(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    Rb(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    Rb(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    return e;
  }
  function bp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 247;
    d.height = a * 247;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    Rb(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    Rb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 137);
    e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
    e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
    e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
    e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
    e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
    e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
    e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
    e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
    e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
    e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
    e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
    e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
    e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
    e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    Rb(e, undefined, c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 63);
    e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
    e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
    e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 40);
    e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
    e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
    e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 43);
    e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
    e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
    e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 98);
    e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
    e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
    e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 180, a * 85);
    e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
    e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
    e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 114);
    e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
    e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
    e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 92);
    e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
    e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
    e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 130);
    e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
    e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
    e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113, a * 189);
    e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
    e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
    e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 154);
    e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
    e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
    e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206, a * 152);
    e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
    e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
    e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 181, a * 184);
    e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
    e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
    e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 199);
    e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
    e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 143);
    e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
    e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 159);
    e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
    e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
    e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 214);
    e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
    e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
    e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 52);
    e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
    e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
    e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 81);
    e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
    e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
    e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    return d;
  }
  function dp(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 170;
    f.height = b * 200;
    g.translate(b * 5, b * 15);
    if (e == 1) {
      g.translate(0, b * -5);
      Wb(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
      Rb(g, d[1], d[5], b * 20);
      Wb(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
      Rb(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 31.267044067382812);
      Fb(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
      g.restore();
      Rb(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 13.267044067382812);
      Fb(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
      g.restore();
      Rb(g, d[1], d[5], b * 20);
    }
    Wb(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
    Rb(g, d[1], d[2], b * 7);
    Wb(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
    Rb(g, d[1], d[2], b * 7);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
    g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
    g.closePath();
    Rb(g, d[1], d[2], b * 8);
    Wb(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
    Rb(g, d[1], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
    g.closePath();
    Rb(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
    g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
    g.closePath();
    Rb(g, d[3], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
    g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
    g.closePath();
    Rb(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
    g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
    g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
    g.closePath();
    Rb(g, d[3], d[2], b * 4);
    Wb(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
    Rb(g, d[3], d[2], b * 4);
    g.save();
    g.translate(b * 77.00003051757812, b * 31.267044067382812);
    g.rotate(0);
    Fb(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
    g.restore();
    Rb(g, d[1], d[2], b * 7);
    g.save();
    g.translate(b * 77.00003051757812, b * 13.267044067382812);
    g.rotate(0);
    Fb(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
    g.restore();
    Rb(g, d[1], d[2], b * 7);
    return f;
  }
  function vp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    Fb(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    Rb(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    Rb(e, undefined, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    Rb(e, Tn, c[6], a * 15);
    return d;
  }
  function mp() {
    new Date().getTime();
    function b(a) {
      var b = 0;
      var c = 0;
      for (var d = 0; d < a.length; d++) {
        var e = a.charAt(d);
        if (e !== "_" && d !== 5) {
          if (e === "1") {
            b += Math.pow(2, c);
          }
          c++;
        }
      }
      return b;
    }
    ⲆⵠⵠᐃΔᐃⲆⵠᐃ();
    ⲆΔ[1026] = [ᐃΔ.ᐃᐃᐃΔΔᐃⲆ, ᐃΔ.ᐃⵠΔⲆᐃⲆⵠ];
    ⲆΔ[1025] = [];
    ⲆΔ[1025][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("000_010_000")] = [ᐃΔ.ᐃΔⵠⵠᐃ, ᐃΔ.ᐃⵠᐃⲆΔ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("000_010_010")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("000_010_000")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("000_011_000")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("000_010_000")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("000_011_010")] = [ᐃΔ.ᐃⵠᐃⲆᐃ, ᐃΔ.ⲆⲆⲆⵠⲆ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ᐃΔⵠⵠᐃ, ᐃΔ.ᐃⲆΔⲆᐃⲆΔ, ᐃΔ.ⲆΔⵠⵠΔⲆⵠ, ᐃΔ.ⵠⲆⲆⵠΔᐃᐃ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("000_011_011")] = [ᐃΔ.ΔⵠⲆⵠⵠⵠⵠ, ᐃΔ.ᐃⵠᐃⲆᐃ, ᐃΔ.ⲆⲆⲆⵠⲆ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ᐃΔⵠⵠᐃ, ᐃΔ.ᐃⲆΔⲆᐃⲆΔ, ᐃΔ.ⲆΔⵠⵠΔⲆⵠ, ᐃΔ.ⵠⲆⲆⵠΔᐃᐃ, ᐃΔ.ᐃᐃᐃⲆᐃ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("000_110_000")] = [ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ᐃⵠᐃⲆΔ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("000_110_010")] = [ᐃΔ.ᐃⵠΔΔᐃ, ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ΔᐃⲆΔⲆ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ᐃΔⵠⵠᐃ, ᐃΔ.ᐃᐃᐃⲆᐃ, ᐃΔ.ⵠⲆⲆⵠⲆ, ᐃΔ.ⵠⵠⵠⲆⵠⲆⲆ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("000_110_110")] = [ᐃΔ.ᐃⵠΔΔᐃ, ᐃΔ.ⲆⵠᐃᐃⲆΔᐃ, ᐃΔ.ᐃⵠⵠⵠΔⵠΔ, ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ΔᐃⲆΔⲆ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ᐃᐃᐃⲆᐃ, ᐃΔ.ⵠⲆⲆⵠⲆ, ᐃΔ.ⵠⵠⵠⲆⵠⲆⲆ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("000_111_000")] = [ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ΔᐃⲆΔⲆ, ᐃΔ.ⲆΔΔⲆⲆⲆⲆ, ᐃΔ.ᐃᐃᐃⵠᐃᐃⵠ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("000_111_111")] = [ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ᐃⵠⵠⵠΔⵠΔ, ᐃΔ.ᐃⵠΔΔᐃ, ᐃΔ.ⲆⲆⲆⵠⲆ, ᐃΔ.ᐃⵠᐃⲆᐃ, ᐃΔ.ΔⵠⲆⵠⵠⵠⵠ, ᐃΔ.ⲆΔᐃⲆⲆΔᐃ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_010_000")] = [ᐃΔ.ᐃⵠᐃⲆΔ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_010_010")] = [ᐃΔ.ᐃᐃⵠᐃΔⲆΔ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ᐃΔⵠⵠᐃ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_011_000")] = [ᐃΔ.ΔΔⵠⲆᐃ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ᐃΔⵠⵠᐃ, ᐃΔ.ⵠⲆⲆⵠⲆ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_110_000")] = [ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ΔᐃⲆΔⲆ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ⵠⲆⲆⵠⲆ, ᐃΔ.ⵠΔΔⵠⵠ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_110_110")] = [ᐃΔ.ⲆⲆⲆΔᐃ, ᐃΔ.ΔΔⵠⲆᐃ, ᐃΔ.ᐃⵠᐃⲆᐃ, ᐃΔ.ⲆⲆⲆⵠⲆ, ᐃΔ.ᐃⵠΔΔᐃ, ᐃΔ.ᐃⵠⵠⵠΔⵠΔ, ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ⲆΔᐃⲆⲆΔᐃ, ᐃΔ.ΔⵠⲆᐃᐃΔⲆ, ᐃΔ.ᐃᐃⵠᐃΔⲆΔ, ᐃΔ.ΔᐃⲆΔⲆ, ᐃΔ.ⲆΔΔⲆⲆⲆⲆ, ᐃΔ.ᐃᐃᐃⵠᐃᐃⵠ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ᐃΔⵠⵠᐃ, ᐃΔ.ᐃⲆΔⲆᐃⲆΔ, ᐃΔ.ⲆΔⵠⵠΔⲆⵠ, ᐃΔ.ⵠⲆⲆⵠΔᐃᐃ, ᐃΔ.ᐃᐃᐃⲆᐃ, ᐃΔ.ⵠⲆⲆⵠⲆ, ᐃΔ.ⵠΔΔⵠⵠ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_011_010")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_110_110")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_011_011")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_110_110")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("000_111_011")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_110_110")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_110_010")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_110_110")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_111_000")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_110_110")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_111_010")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_110_110")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_111_011")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_110_110")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_111_110")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_110_110")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_111_111")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_110_110")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("000_111_110")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_110_110")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("000_111_010")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("010_110_110")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("011_011_000")] = [ᐃΔ.ΔⲆΔΔⲆΔⵠ, ᐃΔ.ⲆⲆⲆΔᐃ, ᐃΔ.ΔΔⵠⲆᐃ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ᐃΔⵠⵠᐃ, ᐃΔ.ⵠⲆⲆⵠⲆ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("011_011_010")] = [ᐃΔ.ΔⲆΔΔⲆΔⵠ, ᐃΔ.ⲆⲆⲆΔᐃ, ᐃΔ.ΔΔⵠⲆᐃ, ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ΔᐃⲆΔⲆ, ᐃΔ.ⲆΔΔⲆⲆⲆⲆ, ᐃΔ.ᐃᐃᐃⵠᐃᐃⵠ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ᐃΔⵠⵠᐃ, ᐃΔ.ⵠⲆⲆⵠⲆ, ᐃΔ.ⵠΔΔⵠⵠ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("011_011_011")] = [ᐃΔ.ⲆⲆⲆⵠⲆ, ᐃΔ.ᐃⵠᐃⲆᐃ, ᐃΔ.ΔⵠⲆⵠⵠⵠⵠ, ᐃΔ.ΔΔⵠⲆᐃ, ᐃΔ.ⲆⲆⲆΔᐃ, ᐃΔ.ΔⲆΔΔⲆΔⵠ, ᐃΔ.ΔⵠⲆᐃᐃΔⲆ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("011_111_000")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("011_011_010")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("011_111_010")] = [ᐃΔ.ΔⲆΔΔⲆΔⵠ, ᐃΔ.ⲆⲆⲆΔᐃ, ᐃΔ.ΔΔⵠⲆᐃ, ᐃΔ.ᐃⵠᐃⲆᐃ, ᐃΔ.ⲆⲆⲆⵠⲆ, ᐃΔ.ᐃⵠΔΔᐃ, ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ⲆΔᐃⲆⲆΔᐃ, ᐃΔ.ΔⵠⲆᐃᐃΔⲆ, ᐃΔ.ᐃᐃⵠᐃΔⲆΔ, ᐃΔ.ΔᐃⲆΔⲆ, ᐃΔ.ⲆΔΔⲆⲆⲆⲆ, ᐃΔ.ᐃᐃᐃⵠᐃᐃⵠ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ᐃΔⵠⵠᐃ, ᐃΔ.ᐃⲆΔⲆᐃⲆΔ, ᐃΔ.ⲆΔⵠⵠΔⲆⵠ, ᐃΔ.ⵠⲆⲆⵠΔᐃᐃ, ᐃΔ.ᐃᐃᐃⲆᐃ, ᐃΔ.ⵠⲆⲆⵠⲆ, ᐃΔ.ⵠΔΔⵠⵠ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("011_111_011")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("011_111_010")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("011_111_110")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("011_111_010")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("011_111_111")] = [ᐃΔ.ΔⲆΔΔⲆΔⵠ, ᐃΔ.ⲆⲆⲆΔᐃ, ᐃΔ.ΔΔⵠⲆᐃ, ᐃΔ.ΔⵠⲆⵠⵠⵠⵠ, ᐃΔ.ᐃⵠᐃⲆᐃ, ᐃΔ.ⲆⲆⲆⵠⲆ, ᐃΔ.ᐃⵠΔΔᐃ, ᐃΔ.ᐃⵠⵠⵠΔⵠΔ, ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ⲆΔᐃⲆⲆΔᐃ, ᐃΔ.ΔⵠⲆᐃᐃΔⲆ, ᐃΔ.ᐃᐃⵠᐃΔⲆΔ, ᐃΔ.ΔᐃⲆΔⲆ, ᐃΔ.ⲆΔΔⲆⲆⲆⲆ, ᐃΔ.ᐃᐃᐃⵠᐃᐃⵠ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ᐃΔⵠⵠᐃ, ᐃΔ.ᐃⲆΔⲆᐃⲆΔ, ᐃΔ.ⲆΔⵠⵠΔⲆⵠ, ᐃΔ.ⵠⲆⲆⵠΔᐃᐃ, ᐃΔ.ᐃᐃᐃⲆᐃ, ᐃΔ.ⵠⲆⲆⵠⲆ, ᐃΔ.ⵠΔΔⵠⵠ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("110_110_000")] = [ᐃΔ.ᐃᐃⵠᐃⲆΔΔ, ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ⵠΔᐃⵠⲆΔᐃ, ᐃΔ.ΔᐃⲆΔⲆ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ⵠΔΔⵠⵠ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("110_110_010")] = [ᐃΔ.ᐃⵠΔΔᐃ, ᐃΔ.ᐃᐃⵠᐃⲆΔΔ, ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ᐃᐃⵠᐃΔⲆΔ, ᐃΔ.ΔᐃⲆΔⲆ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ᐃᐃᐃⲆᐃ, ᐃΔ.ⵠΔΔⵠⵠ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("110_110_110")] = [ᐃΔ.ᐃⵠΔΔᐃ, ᐃΔ.ᐃⵠⵠⵠΔⵠΔ, ᐃΔ.ᐃᐃⵠᐃⲆΔΔ, ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ᐃᐃⵠᐃΔⲆΔ, ᐃΔ.ΔᐃⲆΔⲆ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ᐃᐃᐃⲆᐃ, ᐃΔ.ⵠΔΔⵠⵠ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("110_111_000")] = [ᐃΔ.ⲆⲆⲆΔᐃ, ᐃΔ.ΔΔⵠⲆᐃ, ᐃΔ.ᐃᐃⵠᐃⲆΔΔ, ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ⵠΔᐃⵠⲆΔᐃ, ᐃΔ.ΔⲆᐃⲆΔⲆⲆ, ᐃΔ.ΔᐃⲆΔⲆ, ᐃΔ.ⲆΔΔⲆⲆⲆⲆ, ᐃΔ.ᐃᐃᐃⵠᐃᐃⵠ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ᐃΔⵠⵠᐃ, ᐃΔ.ⵠⲆⲆⵠⲆ, ᐃΔ.ⵠΔΔⵠⵠ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("110_111_110")] = [ᐃΔ.ⲆⲆⲆΔᐃ, ᐃΔ.ΔΔⵠⲆᐃ, ᐃΔ.ᐃⵠᐃⲆᐃ, ᐃΔ.ⲆⲆⲆⵠⲆ, ᐃΔ.ᐃⵠΔΔᐃ, ᐃΔ.ᐃⵠⵠⵠΔⵠΔ, ᐃΔ.ᐃᐃⵠᐃⲆΔΔ, ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ⲆΔᐃⲆⲆΔᐃ, ᐃΔ.ΔⲆᐃⲆΔⲆⲆ, ᐃΔ.ΔⵠⲆᐃᐃΔⲆ, ᐃΔ.ᐃᐃⵠᐃΔⲆΔ, ᐃΔ.ΔᐃⲆΔⲆ, ᐃΔ.ⲆΔΔⲆⲆⲆⲆ, ᐃΔ.ᐃᐃᐃⵠᐃᐃⵠ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ᐃΔⵠⵠᐃ, ᐃΔ.ᐃⲆΔⲆᐃⲆΔ, ᐃΔ.ⲆΔⵠⵠΔⲆⵠ, ᐃΔ.ⵠⲆⲆⵠΔᐃᐃ, ᐃΔ.ᐃᐃᐃⲆᐃ, ᐃΔ.ⵠⲆⲆⵠⲆ, ᐃΔ.ⵠΔΔⵠⵠ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("110_111_111")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("110_111_110")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("110_111_011")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("110_111_110")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("110_111_010")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("110_111_110")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("111_111_110")] = [ᐃΔ.ⵠΔΔⵠⵠ, ᐃΔ.ⵠⲆⲆⵠⲆ, ᐃΔ.ᐃᐃᐃⲆᐃ, ᐃΔ.ⵠⲆⲆⵠΔᐃᐃ, ᐃΔ.ⲆΔⵠⵠΔⲆⵠ, ᐃΔ.ᐃⲆΔⲆᐃⲆΔ, ᐃΔ.ᐃΔⵠⵠᐃ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ᐃᐃᐃⵠᐃᐃⵠ, ᐃΔ.ⲆΔΔⲆⲆⲆⲆ, ᐃΔ.ΔᐃⲆΔⲆ, ᐃΔ.ᐃᐃⵠᐃΔⲆΔ, ᐃΔ.ΔⵠⲆᐃᐃΔⲆ, ᐃΔ.ΔⲆᐃⲆΔⲆⲆ, ᐃΔ.ⲆΔᐃⲆⲆΔᐃ, ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ᐃᐃⵠᐃⲆΔΔ, ᐃΔ.ᐃⵠΔΔᐃ, ᐃΔ.ⲆⲆⲆⵠⲆ, ᐃΔ.ᐃⵠᐃⲆᐃ, ᐃΔ.ΔΔⵠⲆᐃ, ᐃΔ.ⲆⲆⲆΔᐃ, ᐃΔ.ΔⲆΔΔⲆΔⵠ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("111_111_011")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("111_111_110")];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("111_111_000")] = [ᐃΔ.ⵠΔᐃⵠⲆΔᐃ, ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ᐃᐃⵠᐃⲆΔΔ, ᐃΔ.ΔΔⵠⲆᐃ, ᐃΔ.ⲆⲆⲆΔᐃ, ᐃΔ.ΔⲆΔΔⲆΔⵠ, ᐃΔ.ΔⲆᐃⲆΔⲆⲆ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("111_111_111")] = [ᐃΔ.ΔⲆΔΔⲆΔⵠ, ᐃΔ.ⲆⲆⲆΔᐃ, ᐃΔ.ΔΔⵠⲆᐃ, ᐃΔ.ΔⵠⲆⵠⵠⵠⵠ, ᐃΔ.ᐃⵠᐃⲆᐃ, ᐃΔ.ⲆⲆⲆⵠⲆ, ᐃΔ.ᐃⵠΔΔᐃ, ᐃΔ.ᐃⵠⵠⵠΔⵠΔ, ᐃΔ.ᐃᐃⵠᐃⲆΔΔ, ᐃΔ.ᐃᐃᐃᐃⵠ, ᐃΔ.ⲆΔᐃⲆⲆΔᐃ, ᐃΔ.ΔⵠⲆᐃᐃΔⲆ, ᐃΔ.ᐃᐃⵠᐃΔⲆΔ, ᐃΔ.ΔᐃⲆΔⲆ, ᐃΔ.ⲆΔΔⲆⲆⲆⲆ, ᐃΔ.ᐃᐃᐃⵠᐃᐃⵠ, ᐃΔ.ᐃⵠᐃⲆΔ, ᐃΔ.ᐃΔⵠⵠᐃ, ᐃΔ.ᐃⲆΔⲆᐃⲆΔ, ᐃΔ.ⲆΔⵠⵠΔⲆⵠ, ᐃΔ.ⵠⲆⲆⵠΔᐃᐃ, ᐃΔ.ᐃᐃᐃⲆᐃ, ᐃΔ.ⵠⲆⲆⵠⲆ, ᐃΔ.ⵠΔΔⵠⵠ];
    ⲆΔ[1025][Nr.ⲆⵠⲆ][b("111_111_010")] = ⲆΔ[1025][Nr.ⲆⵠⲆ][b("111_111_110")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("000_010_000")] = [ᐃΔ.ΔΔᐃⵠⵠ, ᐃΔ.ⲆⵠⵠⵠΔ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("000_010_010")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("000_010_000")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("000_011_000")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("000_010_000")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("000_011_010")] = [ᐃΔ.ΔΔⵠᐃᐃ, ᐃΔ.ΔⲆⲆⲆᐃ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ΔΔᐃⵠⵠ, ᐃΔ.ᐃⵠⵠⵠΔᐃⵠ, ᐃΔ.ΔⲆⲆⵠΔΔⵠ, ᐃΔ.ΔᐃⲆᐃⲆⵠⵠ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("000_011_011")] = [ᐃΔ.ⵠⵠⲆΔⵠⲆⵠ, ᐃΔ.ΔΔⵠᐃᐃ, ᐃΔ.ΔⲆⲆⲆᐃ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ΔΔᐃⵠⵠ, ᐃΔ.ᐃⵠⵠⵠΔᐃⵠ, ᐃΔ.ΔⲆⲆⵠΔΔⵠ, ᐃΔ.ΔᐃⲆᐃⲆⵠⵠ, ᐃΔ.ΔⲆΔⵠⲆ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("000_110_000")] = [ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ⲆⵠⵠⵠΔ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("000_110_010")] = [ᐃΔ.ⲆᐃⲆΔⲆ, ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ⲆΔΔᐃⲆ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ΔΔᐃⵠⵠ, ᐃΔ.ΔⲆΔⵠⲆ, ᐃΔ.ᐃΔΔᐃᐃ, ᐃΔ.ⲆΔΔᐃⵠⵠⲆ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("000_110_110")] = [ᐃΔ.ⲆᐃⲆΔⲆ, ᐃΔ.ⲆⲆΔⲆⲆⲆⲆ, ᐃΔ.ΔᐃΔⵠⲆⲆⵠ, ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ⲆΔΔᐃⲆ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ΔⲆΔⵠⲆ, ᐃΔ.ᐃΔΔᐃᐃ, ᐃΔ.ⲆΔΔᐃⵠⵠⲆ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("000_111_000")] = [ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ⲆΔΔᐃⲆ, ᐃΔ.ᐃᐃⲆΔᐃΔⲆ, ᐃΔ.ᐃⵠⲆⵠⲆᐃⲆ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("000_111_111")] = [ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ΔᐃΔⵠⲆⲆⵠ, ᐃΔ.ⲆᐃⲆΔⲆ, ᐃΔ.ΔⲆⲆⲆᐃ, ᐃΔ.ΔΔⵠᐃᐃ, ᐃΔ.ⵠⵠⲆΔⵠⲆⵠ, ᐃΔ.ⵠΔΔⵠⲆⵠⲆ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_010_000")] = [ᐃΔ.ⲆⵠⵠⵠΔ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_010_010")] = [ᐃΔ.ΔΔΔΔⲆΔⵠ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ΔΔᐃⵠⵠ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_011_000")] = [ᐃΔ.ⲆⲆⵠΔᐃ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ΔΔᐃⵠⵠ, ᐃΔ.ᐃΔΔᐃᐃ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_110_000")] = [ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ⲆΔΔᐃⲆ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ᐃΔΔᐃᐃ, ᐃΔ.ᐃΔΔⲆⲆ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_110_110")] = [ᐃΔ.ⵠⵠΔᐃᐃ, ᐃΔ.ⲆⲆⵠΔᐃ, ᐃΔ.ΔΔⵠᐃᐃ, ᐃΔ.ΔⲆⲆⲆᐃ, ᐃΔ.ⲆᐃⲆΔⲆ, ᐃΔ.ΔᐃΔⵠⲆⲆⵠ, ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ⵠΔΔⵠⲆⵠⲆ, ᐃΔ.ᐃⵠⵠⵠΔᐃΔ, ᐃΔ.ΔΔΔΔⲆΔⵠ, ᐃΔ.ⲆΔΔᐃⲆ, ᐃΔ.ᐃᐃⲆΔᐃΔⲆ, ᐃΔ.ᐃⵠⲆⵠⲆᐃⲆ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ΔΔᐃⵠⵠ, ᐃΔ.ᐃⵠⵠⵠΔᐃⵠ, ᐃΔ.ΔⲆⲆⵠΔΔⵠ, ᐃΔ.ΔᐃⲆᐃⲆⵠⵠ, ᐃΔ.ΔⲆΔⵠⲆ, ᐃΔ.ᐃΔΔᐃᐃ, ᐃΔ.ᐃΔΔⲆⲆ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_011_010")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_110_110")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_011_011")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_110_110")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("000_111_011")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_110_110")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_110_010")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_110_110")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_111_000")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_110_110")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_111_010")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_110_110")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_111_011")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_110_110")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_111_110")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_110_110")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_111_111")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_110_110")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("000_111_110")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_110_110")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("000_111_010")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("010_110_110")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("011_011_000")] = [ᐃΔ.ᐃⵠⵠⵠⲆⲆⵠ, ᐃΔ.ⵠⵠΔᐃᐃ, ᐃΔ.ⲆⲆⵠΔᐃ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ΔΔᐃⵠⵠ, ᐃΔ.ᐃΔΔᐃᐃ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("011_011_010")] = [ᐃΔ.ᐃⵠⵠⵠⲆⲆⵠ, ᐃΔ.ⵠⵠΔᐃᐃ, ᐃΔ.ⲆⲆⵠΔᐃ, ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ⲆΔΔᐃⲆ, ᐃΔ.ᐃᐃⲆΔᐃΔⲆ, ᐃΔ.ᐃⵠⲆⵠⲆᐃⲆ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ΔΔᐃⵠⵠ, ᐃΔ.ᐃΔΔᐃᐃ, ᐃΔ.ᐃΔΔⲆⲆ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("011_011_011")] = [ᐃΔ.ΔⲆⲆⲆᐃ, ᐃΔ.ΔΔⵠᐃᐃ, ᐃΔ.ⵠⵠⲆΔⵠⲆⵠ, ᐃΔ.ⲆⲆⵠΔᐃ, ᐃΔ.ⵠⵠΔᐃᐃ, ᐃΔ.ᐃⵠⵠⵠⲆⲆⵠ, ᐃΔ.ᐃⵠⵠⵠΔᐃΔ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("011_111_000")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("011_011_010")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("011_111_010")] = [ᐃΔ.ᐃⵠⵠⵠⲆⲆⵠ, ᐃΔ.ⵠⵠΔᐃᐃ, ᐃΔ.ⲆⲆⵠΔᐃ, ᐃΔ.ΔΔⵠᐃᐃ, ᐃΔ.ΔⲆⲆⲆᐃ, ᐃΔ.ⲆᐃⲆΔⲆ, ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ⵠΔΔⵠⲆⵠⲆ, ᐃΔ.ᐃⵠⵠⵠΔᐃΔ, ᐃΔ.ΔΔΔΔⲆΔⵠ, ᐃΔ.ⲆΔΔᐃⲆ, ᐃΔ.ᐃᐃⲆΔᐃΔⲆ, ᐃΔ.ᐃⵠⲆⵠⲆᐃⲆ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ΔΔᐃⵠⵠ, ᐃΔ.ᐃⵠⵠⵠΔᐃⵠ, ᐃΔ.ΔⲆⲆⵠΔΔⵠ, ᐃΔ.ΔᐃⲆᐃⲆⵠⵠ, ᐃΔ.ΔⲆΔⵠⲆ, ᐃΔ.ᐃΔΔᐃᐃ, ᐃΔ.ᐃΔΔⲆⲆ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("011_111_011")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("011_111_010")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("011_111_110")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("011_111_010")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("011_111_111")] = [ᐃΔ.ᐃⵠⵠⵠⲆⲆⵠ, ᐃΔ.ⵠⵠΔᐃᐃ, ᐃΔ.ⲆⲆⵠΔᐃ, ᐃΔ.ⵠⵠⲆΔⵠⲆⵠ, ᐃΔ.ΔΔⵠᐃᐃ, ᐃΔ.ΔⲆⲆⲆᐃ, ᐃΔ.ⲆᐃⲆΔⲆ, ᐃΔ.ΔᐃΔⵠⲆⲆⵠ, ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ⵠΔΔⵠⲆⵠⲆ, ᐃΔ.ᐃⵠⵠⵠΔᐃΔ, ᐃΔ.ΔΔΔΔⲆΔⵠ, ᐃΔ.ⲆΔΔᐃⲆ, ᐃΔ.ᐃᐃⲆΔᐃΔⲆ, ᐃΔ.ᐃⵠⲆⵠⲆᐃⲆ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ΔΔᐃⵠⵠ, ᐃΔ.ᐃⵠⵠⵠΔᐃⵠ, ᐃΔ.ΔⲆⲆⵠΔΔⵠ, ᐃΔ.ΔᐃⲆᐃⲆⵠⵠ, ᐃΔ.ΔⲆΔⵠⲆ, ᐃΔ.ᐃΔΔᐃᐃ, ᐃΔ.ᐃΔΔⲆⲆ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("110_110_000")] = [ᐃΔ.ᐃΔᐃⲆⲆⲆᐃ, ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ΔⵠᐃⵠᐃΔⲆ, ᐃΔ.ⲆΔΔᐃⲆ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ᐃΔΔⲆⲆ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("110_110_010")] = [ᐃΔ.ⲆᐃⲆΔⲆ, ᐃΔ.ᐃΔᐃⲆⲆⲆᐃ, ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ΔΔΔΔⲆΔⵠ, ᐃΔ.ⲆΔΔᐃⲆ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ΔⲆΔⵠⲆ, ᐃΔ.ᐃΔΔⲆⲆ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("110_110_110")] = [ᐃΔ.ⲆᐃⲆΔⲆ, ᐃΔ.ΔᐃΔⵠⲆⲆⵠ, ᐃΔ.ᐃΔᐃⲆⲆⲆᐃ, ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ΔΔΔΔⲆΔⵠ, ᐃΔ.ⲆΔΔᐃⲆ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ΔⲆΔⵠⲆ, ᐃΔ.ᐃΔΔⲆⲆ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("110_111_000")] = [ᐃΔ.ⵠⵠΔᐃᐃ, ᐃΔ.ⲆⲆⵠΔᐃ, ᐃΔ.ᐃΔᐃⲆⲆⲆᐃ, ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ΔⵠᐃⵠᐃΔⲆ, ᐃΔ.ᐃᐃᐃⲆⵠᐃᐃ, ᐃΔ.ⲆΔΔᐃⲆ, ᐃΔ.ᐃᐃⲆΔᐃΔⲆ, ᐃΔ.ᐃⵠⲆⵠⲆᐃⲆ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ΔΔᐃⵠⵠ, ᐃΔ.ᐃΔΔᐃᐃ, ᐃΔ.ᐃΔΔⲆⲆ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("110_111_110")] = [ᐃΔ.ⵠⵠΔᐃᐃ, ᐃΔ.ⲆⲆⵠΔᐃ, ᐃΔ.ΔΔⵠᐃᐃ, ᐃΔ.ΔⲆⲆⲆᐃ, ᐃΔ.ⲆᐃⲆΔⲆ, ᐃΔ.ΔᐃΔⵠⲆⲆⵠ, ᐃΔ.ᐃΔᐃⲆⲆⲆᐃ, ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ⵠΔΔⵠⲆⵠⲆ, ᐃΔ.ᐃᐃᐃⲆⵠᐃᐃ, ᐃΔ.ᐃⵠⵠⵠΔᐃΔ, ᐃΔ.ΔΔΔΔⲆΔⵠ, ᐃΔ.ⲆΔΔᐃⲆ, ᐃΔ.ᐃᐃⲆΔᐃΔⲆ, ᐃΔ.ᐃⵠⲆⵠⲆᐃⲆ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ΔΔᐃⵠⵠ, ᐃΔ.ᐃⵠⵠⵠΔᐃⵠ, ᐃΔ.ΔⲆⲆⵠΔΔⵠ, ᐃΔ.ΔᐃⲆᐃⲆⵠⵠ, ᐃΔ.ΔⲆΔⵠⲆ, ᐃΔ.ᐃΔΔᐃᐃ, ᐃΔ.ᐃΔΔⲆⲆ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("110_111_111")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("110_111_110")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("110_111_011")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("110_111_110")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("110_111_010")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("110_111_110")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("111_111_110")] = [ᐃΔ.ᐃΔΔⲆⲆ, ᐃΔ.ᐃΔΔᐃᐃ, ᐃΔ.ΔⲆΔⵠⲆ, ᐃΔ.ΔᐃⲆᐃⲆⵠⵠ, ᐃΔ.ΔⲆⲆⵠΔΔⵠ, ᐃΔ.ᐃⵠⵠⵠΔᐃⵠ, ᐃΔ.ΔΔᐃⵠⵠ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ᐃⵠⲆⵠⲆᐃⲆ, ᐃΔ.ᐃᐃⲆΔᐃΔⲆ, ᐃΔ.ⲆΔΔᐃⲆ, ᐃΔ.ΔΔΔΔⲆΔⵠ, ᐃΔ.ᐃⵠⵠⵠΔᐃΔ, ᐃΔ.ᐃᐃᐃⲆⵠᐃᐃ, ᐃΔ.ⵠΔΔⵠⲆⵠⲆ, ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ᐃΔᐃⲆⲆⲆᐃ, ᐃΔ.ⲆᐃⲆΔⲆ, ᐃΔ.ΔⲆⲆⲆᐃ, ᐃΔ.ΔΔⵠᐃᐃ, ᐃΔ.ⲆⲆⵠΔᐃ, ᐃΔ.ⵠⵠΔᐃᐃ, ᐃΔ.ᐃⵠⵠⵠⲆⲆⵠ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("111_111_011")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("111_111_110")];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("111_111_000")] = [ᐃΔ.ΔⵠᐃⵠᐃΔⲆ, ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ᐃΔᐃⲆⲆⲆᐃ, ᐃΔ.ⲆⲆⵠΔᐃ, ᐃΔ.ⵠⵠΔᐃᐃ, ᐃΔ.ᐃⵠⵠⵠⲆⲆⵠ, ᐃΔ.ᐃᐃᐃⲆⵠᐃᐃ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("111_111_111")] = [ᐃΔ.ᐃⵠⵠⵠⲆⲆⵠ, ᐃΔ.ⵠⵠΔᐃᐃ, ᐃΔ.ⲆⲆⵠΔᐃ, ᐃΔ.ⵠⵠⲆΔⵠⲆⵠ, ᐃΔ.ΔΔⵠᐃᐃ, ᐃΔ.ΔⲆⲆⲆᐃ, ᐃΔ.ⲆᐃⲆΔⲆ, ᐃΔ.ΔᐃΔⵠⲆⲆⵠ, ᐃΔ.ᐃΔᐃⲆⲆⲆᐃ, ᐃΔ.ⲆΔⵠᐃᐃ, ᐃΔ.ⵠΔΔⵠⲆⵠⲆ, ᐃΔ.ᐃⵠⵠⵠΔᐃΔ, ᐃΔ.ΔΔΔΔⲆΔⵠ, ᐃΔ.ⲆΔΔᐃⲆ, ᐃΔ.ᐃᐃⲆΔᐃΔⲆ, ᐃΔ.ᐃⵠⲆⵠⲆᐃⲆ, ᐃΔ.ⲆⵠⵠⵠΔ, ᐃΔ.ΔΔᐃⵠⵠ, ᐃΔ.ᐃⵠⵠⵠΔᐃⵠ, ᐃΔ.ΔⲆⲆⵠΔΔⵠ, ᐃΔ.ΔᐃⲆᐃⲆⵠⵠ, ᐃΔ.ΔⲆΔⵠⲆ, ᐃΔ.ᐃΔΔᐃᐃ, ᐃΔ.ᐃΔΔⲆⲆ];
    ⲆΔ[1025][Nr.ᐃᐃᐃ][b("111_111_010")] = ⲆΔ[1025][Nr.ᐃᐃᐃ][b("111_111_110")];
    ⲆΔ[1024] = [];
    ⲆΔ[1024][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("000_010_000")] = ᐃΔ.ᐃᐃⵠΔᐃⲆⲆ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("000_010_010")] = ᐃΔ.ᐃⲆᐃᐃᐃᐃⵠ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("000_011_000")] = ᐃΔ.ⵠⲆⲆⲆⲆⵠΔ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("000_011_010")] = ᐃΔ.ⵠΔⵠᐃⲆΔⵠ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("000_011_011")] = ᐃΔ.ᐃΔⵠⵠᐃⵠⵠ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("000_110_000")] = ᐃΔ.ΔⲆⵠⲆⲆΔΔ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("000_110_010")] = ᐃΔ.ᐃⵠⲆᐃⵠᐃⲆ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("000_110_110")] = ᐃΔ.ΔⲆⲆⵠⵠΔᐃ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("000_111_000")] = ᐃΔ.ⵠⲆᐃⲆᐃⲆⲆ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("000_111_010")] = ᐃΔ.ⵠᐃⵠᐃᐃⵠΔ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("000_111_011")] = ᐃΔ.ⲆᐃⵠΔΔΔⵠ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("000_111_110")] = ᐃΔ.ΔⵠᐃⵠⲆᐃᐃ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("000_111_111")] = ᐃΔ.ⲆⲆⲆΔⲆΔⲆ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("010_010_000")] = ᐃΔ.ⲆΔⵠᐃΔⵠΔ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("010_010_010")] = ᐃΔ.ⲆⲆⲆⲆⲆΔᐃ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("010_011_000")] = ᐃΔ.ΔⲆⲆΔΔⵠⲆ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("010_011_010")] = ᐃΔ.ᐃΔᐃⲆΔⲆⲆ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("010_011_011")] = ᐃΔ.ΔⵠΔᐃⲆΔⵠ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("010_110_000")] = ᐃΔ.ΔⵠᐃᐃΔⲆⵠ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("010_110_010")] = ᐃΔ.ᐃⲆᐃⵠⵠⲆΔ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("010_110_110")] = ᐃΔ.ⵠⲆᐃΔⲆⲆΔ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("010_111_000")] = ᐃΔ.ΔⵠⵠΔᐃᐃⲆ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("010_111_010")] = ᐃΔ.ⲆⲆⵠⵠᐃΔⵠ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("010_111_011")] = ᐃΔ.ⲆⵠⲆΔⲆⵠⵠ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("010_111_110")] = ᐃΔ.ⲆⵠΔΔⲆⵠᐃ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("010_111_111")] = ᐃΔ.ΔⲆⵠⲆᐃᐃⵠ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("011_011_000")] = ᐃΔ.ⲆⲆⵠΔᐃΔⲆ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("011_011_010")] = ᐃΔ.ⵠΔᐃΔΔΔⲆ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("011_011_011")] = ᐃΔ.ⲆᐃⲆⲆΔⵠⲆ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("011_111_000")] = ᐃΔ.ⲆΔᐃΔΔᐃⵠ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("011_111_010")] = ᐃΔ.ΔᐃⲆᐃⵠΔᐃ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("011_111_011")] = ᐃΔ.ⵠΔΔⵠⵠᐃᐃ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("011_111_110")] = ᐃΔ.ᐃⵠΔⲆⲆᐃⵠ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("011_111_111")] = ᐃΔ.ⵠΔⲆⲆⵠΔⲆ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("110_110_000")] = ᐃΔ.ⵠⲆⲆⲆΔⲆΔ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("110_110_010")] = ᐃΔ.ΔΔⲆⲆⲆΔΔ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("110_110_110")] = ᐃΔ.ⵠⵠΔΔΔⵠΔ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("110_111_000")] = ᐃΔ.ΔᐃⲆᐃΔⵠᐃ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("110_111_010")] = ᐃΔ.ΔⲆⲆΔⲆΔⵠ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("110_111_011")] = ᐃΔ.ᐃⵠᐃⵠΔⵠⲆ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("110_111_110")] = ᐃΔ.ᐃΔⲆⵠⵠᐃⲆ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("110_111_111")] = ᐃΔ.ᐃⵠᐃΔΔᐃΔ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("111_111_011")] = ᐃΔ.ΔⲆⲆᐃⲆⲆᐃ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("111_111_110")] = ᐃΔ.ΔⵠᐃΔⲆΔΔ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("111_111_011")] = ᐃΔ.ΔⲆⲆᐃⲆⲆᐃ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("111_111_000")] = ᐃΔ.ΔⵠⵠⲆᐃⵠⲆ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("111_111_111")] = ᐃΔ.ⵠᐃⵠⲆΔⲆΔ;
    ⲆΔ[1024][Nr.ⲆⵠⲆ][b("111_111_010")] = ᐃΔ.ᐃΔⵠᐃⵠⲆΔ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("000_010_000")] = ᐃΔ.ⵠᐃⵠⲆⲆⵠΔ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("000_010_010")] = ᐃΔ.ΔⲆⲆⵠⲆⲆⲆ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("000_011_000")] = ᐃΔ.ΔᐃⲆΔⵠΔⵠ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("000_011_010")] = ᐃΔ.ΔⲆΔΔΔⲆⲆ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("000_011_011")] = ᐃΔ.ΔⵠΔⲆⲆΔΔ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("000_110_000")] = ᐃΔ.ᐃⵠᐃᐃⵠⲆΔ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("000_110_010")] = ᐃΔ.ⲆⵠΔⲆⲆᐃⵠ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("000_110_110")] = ᐃΔ.ⵠⵠⲆⲆᐃΔⵠ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("000_111_000")] = ᐃΔ.ⲆⵠᐃᐃⲆⲆⲆ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("000_111_010")] = ᐃΔ.ⵠⵠⵠᐃⵠⲆᐃ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("000_111_011")] = ᐃΔ.ᐃᐃΔᐃⲆΔᐃ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("000_111_110")] = ᐃΔ.ⲆᐃΔⵠᐃᐃⵠ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("000_111_111")] = ᐃΔ.ⲆᐃⵠΔΔᐃⲆ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("010_010_000")] = ᐃΔ.ⵠⲆⵠᐃΔⲆΔ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("010_010_010")] = ᐃΔ.ⵠⵠᐃᐃΔⲆⵠ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("010_011_000")] = ᐃΔ.ⵠⵠΔΔᐃᐃᐃ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("010_011_010")] = ᐃΔ.ΔΔⲆⲆⲆⵠⵠ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("010_011_011")] = ᐃΔ.ⵠⵠⵠⲆⵠⵠⲆ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("010_110_000")] = ᐃΔ.ΔⲆⵠⵠⵠⵠᐃ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("010_110_010")] = ᐃΔ.ΔⵠⲆⵠΔⵠⵠ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("010_110_110")] = ᐃΔ.ⵠⵠΔⲆᐃΔⲆ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("010_111_000")] = ᐃΔ.ᐃᐃΔΔᐃⲆⵠ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("010_111_010")] = ᐃΔ.ⵠᐃΔⵠⵠᐃⲆ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("010_111_011")] = ᐃΔ.ΔΔΔⵠΔΔⵠ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("010_111_110")] = ᐃΔ.ΔΔᐃⵠⲆⵠΔ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("010_111_111")] = ᐃΔ.ⲆΔⲆⲆⵠΔᐃ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("011_011_000")] = ᐃΔ.ΔᐃⲆⲆᐃᐃⲆ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("011_011_010")] = ᐃΔ.ᐃⲆΔᐃᐃᐃΔ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("011_011_011")] = ᐃΔ.ⲆᐃΔⵠⵠᐃⵠ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("011_111_000")] = ᐃΔ.ⵠᐃⲆⲆᐃⲆⲆ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("011_111_010")] = ᐃΔ.ΔᐃⲆⲆᐃⲆⲆ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("011_111_011")] = ᐃΔ.ᐃᐃᐃΔΔΔⵠ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("011_111_110")] = ᐃΔ.ᐃⲆⲆΔᐃΔΔ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("011_111_111")] = ᐃΔ.ΔᐃⲆⵠᐃⲆΔ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("110_110_000")] = ᐃΔ.ⵠᐃⵠⲆΔⲆᐃ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("110_110_010")] = ᐃΔ.ᐃⵠⵠᐃⲆⵠᐃ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("110_110_110")] = ᐃΔ.ᐃᐃΔᐃⵠΔⵠ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("110_111_000")] = ᐃΔ.ᐃⵠⲆΔⵠⲆΔ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("110_111_010")] = ᐃΔ.ΔⲆᐃⲆΔΔⵠ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("110_111_011")] = ᐃΔ.ⵠⵠᐃⲆΔΔⲆ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("110_111_110")] = ᐃΔ.ΔⵠⲆⵠᐃΔᐃ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("110_111_111")] = ᐃΔ.ⲆⵠⲆⵠᐃⵠΔ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("111_111_011")] = ᐃΔ.ΔⵠΔⵠⲆⵠᐃ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("111_111_110")] = ᐃΔ.ᐃΔΔⵠᐃⲆΔ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("111_111_011")] = ᐃΔ.ΔⵠΔⵠⲆⵠᐃ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("111_111_000")] = ᐃΔ.ΔΔΔⵠⲆᐃᐃ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("111_111_111")] = ᐃΔ.ⲆᐃᐃΔⲆⵠΔ;
    ⲆΔ[1024][Nr.ᐃᐃᐃ][b("111_111_010")] = ᐃΔ.ᐃᐃᐃⵠⲆⵠᐃ;
    ⲆΔ[32] = [];
    ⲆΔ[32][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⵠΔⲆⲆⵠⲆ;
    ⲆΔ[32][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆⲆΔᐃΔᐃⲆ;
    ⲆΔ[205] = [];
    ⲆΔ[205][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⵠΔΔΔⲆΔ;
    ⲆΔ[205][Nr.ᐃᐃᐃ] = ᐃΔ.Δᐃᐃⵠⵠⵠᐃ;
    ⲆΔ[957] = [];
    ⲆΔ[957][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⲆΔⲆΔΔᐃ;
    ⲆΔ[957][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠᐃᐃΔᐃΔ;
    ⲆΔ[207] = [];
    ⲆΔ[207][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃᐃⲆⵠᐃⲆ;
    ⲆΔ[207][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠⵠΔΔΔⵠ;
    ⲆΔ[954] = [];
    ⲆΔ[954][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠΔⲆᐃⲆⵠⵠ;
    ⲆΔ[954][Nr.ᐃᐃᐃ] = ᐃΔ.ΔΔᐃⲆᐃΔⵠ;
    ⲆΔ[958] = [];
    ⲆΔ[958][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃΔΔᐃᐃⵠ;
    ⲆΔ[958][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠᐃⵠᐃᐃΔᐃ;
    ⲆΔ[209] = [];
    ⲆΔ[209][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⲆΔΔⵠΔⵠ;
    ⲆΔ[209][Nr.ᐃᐃᐃ] = ᐃΔ.ΔΔⵠⲆⲆΔⲆ;
    ⲆΔ[971] = [];
    ⲆΔ[971][Nr.ⲆⵠⲆ] = ᐃΔ.ΔᐃΔⵠΔⵠΔ;
    ⲆΔ[971][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⵠⵠᐃⵠΔⵠ;
    ⲆΔ[211] = [];
    ⲆΔ[211][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃΔᐃᐃⲆΔ;
    ⲆΔ[211][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠᐃⲆΔⵠⲆᐃ;
    ⲆΔ[986] = [];
    ⲆΔ[986][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⵠⵠⵠⲆᐃᐃ;
    ⲆΔ[986][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃᐃᐃⵠⲆΔΔ;
    ⲆΔ[989] = [];
    ⲆΔ[989][Nr.ⲆⵠⲆ] = [ᐃΔ.ΔⲆΔⵠⵠᐃΔ];
    ⲆΔ[989][Nr.ᐃᐃᐃ] = [ᐃΔ.ΔΔᐃΔⲆᐃⵠ];
    ⲆΔ[217] = [];
    ⲆΔ[217][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠΔᐃᐃΔⵠΔ;
    ⲆΔ[217][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠⵠⲆⵠΔⲆ;
    ⲆΔ[219] = [];
    ⲆΔ[219][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⲆᐃⲆᐃΔΔ;
    ⲆΔ[219][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⵠᐃⲆᐃᐃⲆ;
    ⲆΔ[218] = [];
    ⲆΔ[218][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆΔⲆⲆⵠⲆⲆ;
    ⲆΔ[218][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠⵠⵠⲆⲆⲆ;
    ⲆΔ[212] = [];
    ⲆΔ[212][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⲆᐃΔᐃⵠⲆ;
    ⲆΔ[212][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠᐃᐃᐃΔᐃⲆ;
    ⲆΔ[213] = [];
    ⲆΔ[213][Nr.ⲆⵠⲆ] = ᐃΔ.ΔΔⵠⲆΔⲆΔ;
    ⲆΔ[213][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠΔᐃΔΔᐃᐃ;
    ⲆΔ[214] = [];
    ⲆΔ[214][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃΔⵠⲆⵠⵠⵠ;
    ⲆΔ[214][Nr.ᐃᐃᐃ] = ᐃΔ.ΔΔⵠᐃⵠᐃΔ;
    ⲆΔ[215] = [];
    ⲆΔ[215][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⲆⲆᐃΔΔⲆ;
    ⲆΔ[215][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠᐃⲆⲆΔΔ;
    ⲆΔ[216] = [];
    ⲆΔ[216][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃᐃⵠⲆᐃⵠ;
    ⲆΔ[216][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆⵠᐃⲆⵠⲆⵠ;
    ⲆΔ[220] = [];
    ⲆΔ[220][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⲆΔⵠⵠⵠⵠ;
    ⲆΔ[220][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠⲆⲆⵠⲆⵠ;
    ⲆΔ[1020] = [];
    ⲆΔ[1020][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⲆⵠΔⵠⵠΔ;
    ⲆΔ[1020][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠⲆⵠⵠᐃΔ;
    ⲆΔ[1021] = [];
    ⲆΔ[1021][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃᐃᐃᐃⵠⲆᐃ;
    ⲆΔ[1021][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃΔⵠⵠᐃⵠΔ;
    ⲆΔ[39] = [];
    ⲆΔ[39][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⵠⵠⵠⵠᐃⲆ;
    ⲆΔ[39][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⲆᐃⲆⲆⲆΔ;
    ⲆΔ[1022] = ᐃΔ.ⵠⵠᐃⵠᐃᐃⵠ;
    ⲆΔ[1023] = ᐃΔ.ⲆⵠᐃⲆⵠᐃⲆ;
    ⲆΔ[1041] = [];
    ⲆΔ[1041][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[1041][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[1041][Nr.ⲆⵠⲆ].push(ᐃΔ.ⵠⲆΔΔⲆΔⲆ);
    ⲆΔ[1041][Nr.ⲆⵠⲆ].push(ᐃΔ.ᐃⵠⵠⵠⲆⵠⲆ);
    ⲆΔ[1041][Nr.ⲆⵠⲆ].push(ᐃΔ.ΔⲆᐃⵠΔⲆⲆ);
    ⲆΔ[1041][Nr.ᐃᐃᐃ].push(ᐃΔ.ⵠⲆᐃⵠᐃΔⵠ);
    ⲆΔ[1041][Nr.ᐃᐃᐃ].push(ᐃΔ.ᐃᐃⵠⲆⲆⲆᐃ);
    ⲆΔ[1041][Nr.ᐃᐃᐃ].push(ᐃΔ.ᐃⲆᐃⵠΔⵠΔ);
    ⲆΔ[244] = [];
    ⲆΔ[244][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[244][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[244][Nr.ⲆⵠⲆ].push(ᐃΔ.ᐃⲆⵠⵠⵠⲆⲆ);
    ⲆΔ[244][Nr.ⲆⵠⲆ].push(ᐃΔ.ⲆᐃⵠΔᐃⵠⵠ);
    ⲆΔ[244][Nr.ⲆⵠⲆ].push(ᐃΔ.ᐃᐃᐃΔⵠⲆⵠ);
    ⲆΔ[244][Nr.ᐃᐃᐃ].push(ᐃΔ.ᐃᐃΔᐃΔΔᐃ);
    ⲆΔ[244][Nr.ᐃᐃᐃ].push(ᐃΔ.ᐃⲆⵠᐃΔΔⵠ);
    ⲆΔ[244][Nr.ᐃᐃᐃ].push(ᐃΔ.ᐃⵠᐃⲆᐃⲆᐃ);
    ⲆΔ[1052] = [];
    ⲆΔ[1052][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[1052][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[1052][Nr.ⲆⵠⲆ].push(ᐃΔ.ⵠᐃⲆⵠⵠⵠΔ);
    ⲆΔ[1052][Nr.ⲆⵠⲆ].push(ᐃΔ.ΔⵠⲆᐃᐃᐃⲆ);
    ⲆΔ[1052][Nr.ⲆⵠⲆ].push(ᐃΔ.ⲆᐃΔⲆΔᐃⲆ);
    ⲆΔ[1052][Nr.ⲆⵠⲆ].push(ᐃΔ.ⵠⵠⵠⲆᐃⲆⲆ);
    ⲆΔ[1052][Nr.ⲆⵠⲆ].push(ᐃΔ.ᐃⵠᐃⲆΔⵠⵠ);
    ⲆΔ[1052][Nr.ᐃᐃᐃ].push(ᐃΔ.ⲆⲆᐃΔᐃΔΔ);
    ⲆΔ[1052][Nr.ᐃᐃᐃ].push(ᐃΔ.ᐃᐃΔᐃⵠᐃᐃ);
    ⲆΔ[1052][Nr.ᐃᐃᐃ].push(ᐃΔ.ⲆⵠⲆⵠⲆⵠⵠ);
    ⲆΔ[1052][Nr.ᐃᐃᐃ].push(ᐃΔ.ᐃⲆⵠΔᐃⵠⲆ);
    ⲆΔ[1052][Nr.ᐃᐃᐃ].push(ᐃΔ.ΔⲆⵠⵠΔⵠⵠ);
    ⲆΔ[450] = [];
    ⲆΔ[450][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠᐃᐃΔⲆᐃΔ;
    ⲆΔ[450][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⵠΔⲆᐃⲆᐃ;
    ⲆΔ[453] = [];
    ⲆΔ[453][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃᐃᐃⲆᐃⲆΔ;
    ⲆΔ[453][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⲆⲆΔⵠᐃΔ;
    ⲆΔ[454] = [];
    ⲆΔ[454][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⲆⵠⵠᐃΔⲆ;
    ⲆΔ[454][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⲆΔⲆᐃⲆⵠ;
    ⲆΔ[464] = ᐃΔ.ΔᐃᐃⵠⲆⲆⲆ;
    ⲆΔ[468] = ᐃΔ.ⲆⲆⵠΔⵠΔΔ;
    ⲆΔ[469] = ᐃΔ.ⲆᐃᐃΔⵠᐃΔ;
    ⲆΔ[20] = [];
    ⲆΔ[20][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃⲆⲆⵠΔᐃ;
    ⲆΔ[20][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃΔⵠᐃΔᐃᐃ;
    ⲆΔ[920] = [];
    ⲆΔ[920][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃᐃᐃⵠᐃⲆ;
    ⲆΔ[920][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⲆⲆⵠᐃⵠᐃ;
    ⲆΔ[21] = [];
    ⲆΔ[21][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⲆΔΔⲆⲆΔ;
    ⲆΔ[21][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆⲆΔⵠΔΔΔ;
    ⲆΔ[924] = [];
    ⲆΔ[924][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃᐃᐃⵠᐃⲆ;
    ⲆΔ[924][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⲆⲆⵠᐃⵠᐃ;
    ⲆΔ[44] = [];
    ⲆΔ[44][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃᐃᐃⲆᐃᐃ;
    ⲆΔ[44][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆᐃΔᐃⲆⲆⲆ;
    ⲆΔ[19] = [];
    ⲆΔ[19][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⵠⵠΔⵠΔⲆ;
    ⲆΔ[19][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆΔⲆⲆᐃⲆⲆ;
    ⲆΔ[34] = [];
    ⲆΔ[34][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆΔΔᐃⲆΔⲆ;
    ⲆΔ[34][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⵠᐃⲆᐃⵠⲆ;
    ⲆΔ[17] = [];
    ⲆΔ[17][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃⲆΔⲆᐃⲆ;
    ⲆΔ[17][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⲆᐃΔⲆⵠⵠ;
    ⲆΔ[63] = [];
    ⲆΔ[63][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⲆᐃΔⲆΔΔ;
    ⲆΔ[63][Nr.ᐃᐃᐃ] = ᐃΔ.Δᐃⵠᐃᐃᐃⵠ;
    ⲆΔ[60] = [];
    ⲆΔ[60][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⵠⵠΔⵠΔⲆ;
    ⲆΔ[60][Nr.ᐃᐃᐃ] = ᐃΔ.ΔᐃᐃⵠᐃⲆᐃ;
    ⲆΔ[94] = [];
    ⲆΔ[94][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⵠⵠΔⵠᐃᐃΔⲆ;
    ⲆΔ[94][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆᐃᐃᐃⲆᐃᐃⲆⵠ;
    ⲆΔ[95] = [];
    ⲆΔ[95][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠᐃⵠΔᐃⲆᐃⲆⲆ;
    ⲆΔ[95][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⵠⲆΔᐃΔᐃΔⵠ;
    ⲆΔ[96] = [];
    ⲆΔ[96][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⵠⵠᐃⲆⵠⵠⲆⲆ;
    ⲆΔ[96][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⲆᐃΔΔΔᐃᐃΔ;
    ⲆΔ[97] = [];
    ⲆΔ[97][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠᐃⵠⵠⵠⵠⵠΔⵠ;
    ⲆΔ[97][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⵠⵠⲆᐃΔⲆⲆⲆ;
    ⲆΔ[98] = [];
    ⲆΔ[98][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⵠⵠⵠᐃⵠⵠⲆⲆ;
    ⲆΔ[98][Nr.ᐃᐃᐃ] = ᐃΔ.ΔΔΔᐃᐃᐃᐃⵠΔ;
    ⲆΔ[99] = [];
    ⲆΔ[99][Nr.ⲆⵠⲆ] = ᐃΔ.ΔᐃΔᐃⵠᐃᐃᐃᐃ;
    ⲆΔ[99][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠΔⲆⲆᐃΔᐃⲆⵠ;
    ⲆΔ[90] = [];
    ⲆΔ[90][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⲆΔⲆⵠΔⵠ;
    ⲆΔ[90][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⲆⲆⲆⵠⲆᐃ;
    ⲆΔ[91] = [];
    ⲆΔ[91][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⵠᐃᐃΔⵠᐃ;
    ⲆΔ[91][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆⵠⵠΔΔⵠΔ;
    ⲆΔ[71] = [];
    ⲆΔ[71][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠΔᐃⲆᐃⵠᐃⵠⵠ;
    ⲆΔ[71][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⲆⵠᐃΔΔᐃᐃΔ;
    ⲆΔ[72] = [];
    ⲆΔ[72][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⲆΔᐃⵠΔΔⲆᐃ;
    ⲆΔ[72][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⲆⵠⲆⲆΔᐃΔⲆ;
    ⲆΔ[73] = [];
    ⲆΔ[73][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⲆⵠⵠⲆΔⲆⵠᐃ;
    ⲆΔ[73][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⲆΔⲆⲆⵠⲆⵠΔ;
    ⲆΔ[74] = [];
    ⲆΔ[74][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⵠᐃⵠⲆⵠΔⲆᐃ;
    ⲆΔ[74][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠΔᐃᐃⲆΔⲆΔΔ;
    ⲆΔ[75] = [];
    ⲆΔ[75][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠᐃⵠⵠᐃᐃⲆⵠⵠ;
    ⲆΔ[75][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⲆΔⵠⲆⲆΔΔⲆ;
    ⲆΔ[76] = [];
    ⲆΔ[76][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⲆⲆⲆΔᐃⵠⲆⲆ;
    ⲆΔ[76][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠΔᐃΔⲆⵠⲆΔᐃ;
    ⲆΔ[101] = [];
    ⲆΔ[101][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⲆΔⵠΔΔΔ;
    ⲆΔ[101][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃᐃΔⵠⵠΔΔ;
    ⲆΔ[64] = [];
    ⲆΔ[64][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃⲆⲆⲆⵠⵠ;
    ⲆΔ[64][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆⲆᐃⵠΔΔⵠ;
    ⲆΔ[102] = [];
    ⲆΔ[102][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠΔⲆⵠΔⵠᐃ;
    ⲆΔ[102][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆΔΔⲆᐃⲆΔ;
    ⲆΔ[65] = [];
    ⲆΔ[65][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃΔᐃⲆΔᐃΔ;
    ⲆΔ[65][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆᐃⵠΔᐃⵠⲆ;
    ⲆΔ[103] = [];
    ⲆΔ[103][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⲆΔᐃⲆⲆΔ;
    ⲆΔ[103][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆⲆⲆᐃⲆΔᐃ;
    ⲆΔ[66] = [];
    ⲆΔ[66][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⵠⲆΔΔⵠⲆ;
    ⲆΔ[66][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⵠΔᐃⲆⲆⲆ;
    ⲆΔ[104] = [];
    ⲆΔ[104][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⲆⲆⲆᐃⵠⲆ;
    ⲆΔ[104][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠΔⵠΔᐃᐃⵠ;
    ⲆΔ[67] = [];
    ⲆΔ[67][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠᐃᐃΔⲆⲆⲆ;
    ⲆΔ[67][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⵠᐃΔⲆΔᐃ;
    ⲆΔ[105] = [];
    ⲆΔ[105][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃᐃⲆᐃⵠⲆⲆ;
    ⲆΔ[105][Nr.ᐃᐃᐃ] = ᐃΔ.ΔΔΔΔΔⵠᐃ;
    ⲆΔ[68] = [];
    ⲆΔ[68][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⲆⵠΔᐃΔⵠⵠⲆ;
    ⲆΔ[68][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠΔⵠⲆⲆⲆᐃⲆΔ;
    ⲆΔ[106] = [];
    ⲆΔ[106][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⲆΔⵠΔᐃΔ;
    ⲆΔ[106][Nr.ᐃᐃᐃ] = ᐃΔ.ΔᐃⵠΔⲆⵠᐃⲆᐃ;
    ⲆΔ[69] = [];
    ⲆΔ[69][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⲆΔᐃⵠΔⲆΔΔ;
    ⲆΔ[69][Nr.ᐃᐃᐃ] = ᐃΔ.ΔᐃⲆⵠⵠᐃⵠΔⵠ;
    ⲆΔ[107] = [];
    ⲆΔ[107][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⲆΔΔΔᐃᐃ;
    ⲆΔ[107][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆΔⲆΔΔⵠⲆ;
    ⲆΔ[70] = [];
    ⲆΔ[70][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⵠⲆⵠΔⲆⲆⲆⵠ;
    ⲆΔ[70][Nr.ᐃᐃᐃ] = ᐃΔ.ΔΔⲆⵠⲆᐃⲆΔⵠ;
    ⲆΔ[80] = [];
    ⲆΔ[80][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆΔⲆⲆⲆΔΔ;
    ⲆΔ[80][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⲆⵠΔⵠᐃⵠ;
    ⲆΔ[81] = [];
    ⲆΔ[81][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠΔⵠΔⵠⵠΔ;
    ⲆΔ[81][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⲆⵠⲆⵠΔⲆ;
    ⲆΔ[22] = [];
    ⲆΔ[22][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃᐃⵠΔᐃᐃΔ;
    ⲆΔ[22][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆᐃΔΔᐃⵠⵠ;
    ⲆΔ[928] = [];
    ⲆΔ[928][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃΔᐃᐃᐃᐃ;
    ⲆΔ[928][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠΔᐃΔⲆⵠ;
    ⲆΔ[935] = [];
    ⲆΔ[935][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[935][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[935][Nr.ⲆⵠⲆ].push(ᐃΔ.ᐃⵠⵠᐃⲆⲆᐃΔⲆ);
    ⲆΔ[935][Nr.ⲆⵠⲆ].push(ᐃΔ.ⵠⵠᐃⲆⵠⵠⵠⵠΔ);
    ⲆΔ[935][Nr.ᐃᐃᐃ].push(ᐃΔ.ⵠⵠᐃⲆⵠⵠⵠⵠΔ);
    ⲆΔ[935][Nr.ᐃᐃᐃ].push(ᐃΔ.ⵠᐃΔⲆΔⵠᐃⵠⵠ);
    ⲆΔ[941] = [];
    ⲆΔ[941][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[941][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[941][Nr.ⲆⵠⲆ].push(ᐃΔ.ⲆΔⲆᐃᐃⲆⲆ);
    ⲆΔ[941][Nr.ⲆⵠⲆ].push(ᐃΔ.ⲆΔⲆᐃΔⲆⲆ);
    ⲆΔ[941][Nr.ⲆⵠⲆ].push(ᐃΔ.ⲆᐃΔⲆΔⵠᐃ);
    ⲆΔ[941][Nr.ᐃᐃᐃ].push(ᐃΔ.ⵠⵠΔⲆⵠⵠΔ);
    ⲆΔ[941][Nr.ᐃᐃᐃ].push(ᐃΔ.ᐃⲆⵠⲆⵠΔᐃ);
    ⲆΔ[941][Nr.ᐃᐃᐃ].push(ᐃΔ.ΔΔⵠΔᐃᐃⲆ);
    ⲆΔ[53] = [];
    ⲆΔ[53][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⵠⲆΔΔᐃⵠ;
    ⲆΔ[53][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆⲆᐃⲆΔᐃⲆ;
    ⲆΔ[54] = [];
    ⲆΔ[54][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⲆⵠⵠⲆⲆⲆ;
    ⲆΔ[54][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃᐃⵠⵠⲆⵠΔ;
    ⲆΔ[241] = [];
    ⲆΔ[241][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[241][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[241][Nr.ⲆⵠⲆ].push(ᐃΔ.ⲆⲆΔⵠⵠⲆΔ);
    ⲆΔ[241][Nr.ⲆⵠⲆ].push(ᐃΔ.ⵠⲆⲆⲆᐃⲆΔ);
    ⲆΔ[241][Nr.ⲆⵠⲆ].push(ᐃΔ.ᐃΔᐃⵠΔᐃⲆ);
    ⲆΔ[241][Nr.ᐃᐃᐃ].push(ᐃΔ.ⲆⲆΔᐃΔⲆΔ);
    ⲆΔ[241][Nr.ᐃᐃᐃ].push(ᐃΔ.ᐃᐃᐃⵠΔᐃⲆ);
    ⲆΔ[241][Nr.ᐃᐃᐃ].push(ᐃΔ.ᐃⲆΔᐃⵠⵠⵠ);
    ⲆΔ[202] = [];
    ⲆΔ[202][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[202][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[202][Nr.ⲆⵠⲆ].push(ᐃΔ.ⵠᐃΔⵠⵠΔΔ);
    ⲆΔ[202][Nr.ⲆⵠⲆ].push(ᐃΔ.ΔΔⲆΔΔⵠⵠ);
    ⲆΔ[202][Nr.ⲆⵠⲆ].push(ᐃΔ.ᐃᐃΔᐃΔᐃⲆ);
    ⲆΔ[202][Nr.ᐃᐃᐃ].push(ᐃΔ.ᐃⲆⵠᐃⵠᐃΔ);
    ⲆΔ[202][Nr.ᐃᐃᐃ].push(ᐃΔ.ᐃΔⲆΔⵠᐃᐃ);
    ⲆΔ[202][Nr.ᐃᐃᐃ].push(ᐃΔ.ⲆᐃⲆᐃⲆⵠᐃ);
    ⲆΔ[203] = [];
    ⲆΔ[203][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[203][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[203][Nr.ⲆⵠⲆ].push(ᐃΔ.ᐃΔᐃᐃΔΔⲆ);
    ⲆΔ[203][Nr.ⲆⵠⲆ].push(ᐃΔ.ⲆⵠⲆᐃΔᐃⲆ);
    ⲆΔ[203][Nr.ⲆⵠⲆ].push(ᐃΔ.ᐃΔᐃⲆⵠⵠⲆ);
    ⲆΔ[203][Nr.ⲆⵠⲆ].push(ᐃΔ.ⲆΔⲆⵠΔⵠⵠ);
    ⲆΔ[203][Nr.ⲆⵠⲆ].push(ᐃΔ.ⲆⲆⲆⵠᐃΔⲆ);
    ⲆΔ[203][Nr.ⲆⵠⲆ].push(ᐃΔ.ⵠⲆⲆⵠΔΔⵠ);
    ⲆΔ[203][Nr.ᐃᐃᐃ].push(ᐃΔ.ᐃᐃΔᐃⲆⲆⵠ);
    ⲆΔ[203][Nr.ᐃᐃᐃ].push(ᐃΔ.ΔᐃΔⵠⲆΔᐃ);
    ⲆΔ[203][Nr.ᐃᐃᐃ].push(ᐃΔ.ΔⲆΔΔⲆⵠᐃ);
    ⲆΔ[203][Nr.ᐃᐃᐃ].push(ᐃΔ.ΔᐃⲆΔᐃΔⵠ);
    ⲆΔ[203][Nr.ᐃᐃᐃ].push(ᐃΔ.ⲆᐃⵠⲆΔΔⲆ);
    ⲆΔ[203][Nr.ᐃᐃᐃ].push(ᐃΔ.ᐃⵠᐃᐃᐃΔⵠ);
    ⲆΔ[Nr.ⲆᐃᐃⲆⵠ] = [];
    ⲆΔ[Nr.ⲆᐃᐃⲆⵠ][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[Nr.ⲆᐃᐃⲆⵠ][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[Nr.ⲆᐃᐃⲆⵠ][Nr.ⲆⵠⲆ].push(ᐃΔ.ᐃⵠⲆⵠⲆᐃⵠ);
    ⲆΔ[Nr.ⲆᐃᐃⲆⵠ][Nr.ⲆⵠⲆ].push(ᐃΔ.ⲆᐃΔᐃΔⲆᐃ);
    ⲆΔ[Nr.ⲆᐃᐃⲆⵠ][Nr.ⲆⵠⲆ].push(ᐃΔ.ΔⵠⲆⲆⲆᐃᐃ);
    ⲆΔ[Nr.ⲆᐃᐃⲆⵠ][Nr.ⲆⵠⲆ].push(ᐃΔ.ΔⲆⲆⵠᐃⲆⵠ);
    ⲆΔ[Nr.ⲆᐃᐃⲆⵠ][Nr.ⲆⵠⲆ].push(ᐃΔ.ⵠᐃᐃⵠΔⲆⵠ);
    ⲆΔ[Nr.ⲆᐃᐃⲆⵠ][Nr.ⲆⵠⲆ].push(ᐃΔ.ΔⵠΔⲆΔᐃⵠ);
    ⲆΔ[Nr.ⲆᐃᐃⲆⵠ][Nr.ᐃᐃᐃ].push(ᐃΔ.ⵠΔⲆᐃⵠᐃᐃ);
    ⲆΔ[Nr.ⲆᐃᐃⲆⵠ][Nr.ᐃᐃᐃ].push(ᐃΔ.ⵠⲆΔᐃΔⲆⲆ);
    ⲆΔ[Nr.ⲆᐃᐃⲆⵠ][Nr.ᐃᐃᐃ].push(ᐃΔ.ᐃᐃⵠⲆᐃᐃᐃ);
    ⲆΔ[Nr.ⲆᐃᐃⲆⵠ][Nr.ᐃᐃᐃ].push(ᐃΔ.ΔⲆⵠᐃΔΔᐃ);
    ⲆΔ[Nr.ⲆᐃᐃⲆⵠ][Nr.ᐃᐃᐃ].push(ᐃΔ.ᐃᐃΔᐃΔⵠΔ);
    ⲆΔ[Nr.ⲆᐃᐃⲆⵠ][Nr.ᐃᐃᐃ].push(ᐃΔ.ⵠᐃΔⲆⲆⵠⲆ);
    ⲆΔ[918] = [];
    ⲆΔ[918][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃᐃⵠᐃᐃⵠⲆ;
    ⲆΔ[918][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⵠⲆⲆⲆⵠΔ;
    ⲆΔ[919] = ᐃΔ.ΔⲆΔⲆΔⲆΔ;
    ⲆΔ[56] = [];
    ⲆΔ[56][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⵠᐃᐃⲆΔⵠⲆΔ;
    ⲆΔ[56][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠΔᐃⵠⵠⵠⵠᐃ;
    ⲆΔ[223] = [];
    ⲆΔ[223][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆΔⵠᐃⲆⵠΔ;
    ⲆΔ[223][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃΔⵠⵠᐃⲆⵠ;
    ⲆΔ[224] = [];
    ⲆΔ[224][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃΔΔΔⵠⲆ;
    ⲆΔ[224][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⵠᐃⲆⵠⲆⵠ;
    ⲆΔ[236] = [];
    ⲆΔ[236][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆΔᐃⲆᐃᐃᐃ;
    ⲆΔ[236][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆⵠⲆⲆᐃᐃᐃ;
    ⲆΔ[1033] = [];
    ⲆΔ[1033][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⲆⵠⵠⲆⵠⵠ;
    ⲆΔ[1033][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃΔⲆⲆᐃⵠⲆ;
    ⲆΔ[1034] = ᐃΔ.ⵠΔⲆⲆΔⲆⵠ;
    ⲆΔ[1150] = [];
    ⲆΔ[1150][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⲆΔⵠⵠⵠΔ;
    ⲆΔ[1150][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃᐃΔⵠᐃᐃᐃ;
    ⲆΔ[1152] = [];
    ⲆΔ[1152][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃⲆΔΔΔᐃ;
    ⲆΔ[1152][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⲆᐃⲆⵠΔΔ;
    ⲆΔ[1149] = ᐃΔ.ⵠΔᐃΔⵠΔᐃ;
    ⲆΔ[1151] = ᐃΔ.ⲆᐃⵠΔⵠΔᐃ;
    ⲆΔ[1153] = ᐃΔ.ⵠⲆΔΔⵠΔⲆ;
    ⲆΔ[1143] = [];
    ⲆΔ[1143][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⵠᐃⵠᐃⲆᐃ;
    ⲆΔ[1143][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⲆᐃⲆᐃΔᐃ;
    ⲆΔ[1145] = [];
    ⲆΔ[1145][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⲆΔⲆΔⵠᐃ;
    ⲆΔ[1145][Nr.ᐃᐃᐃ] = ᐃΔ.ΔΔⲆⵠᐃⵠⲆ;
    ⲆΔ[1146] = [];
    ⲆΔ[1146][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃΔᐃⵠΔΔ;
    ⲆΔ[1146][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⲆⵠΔⵠⲆΔ;
    ⲆΔ[1144] = ᐃΔ.ΔⵠΔΔⵠᐃⵠ;
    ⲆΔ[1148] = ᐃΔ.ΔΔⲆⵠⵠⲆⵠ;
    ⲆΔ[1147] = ᐃΔ.ⲆᐃᐃⲆⲆΔΔ;
    ⲆΔ[1053] = [];
    ⲆΔ[1053][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃⵠΔⵠⲆΔ;
    ⲆΔ[1053][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⵠᐃΔⲆⲆⵠ;
    ⲆΔ[1055] = [];
    ⲆΔ[1055][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃⵠⲆⲆᐃΔ;
    ⲆΔ[1055][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆΔⵠΔΔⵠⵠ;
    ⲆΔ[231] = [];
    ⲆΔ[231][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⲆⵠᐃⲆⵠᐃ;
    ⲆΔ[231][Nr.ᐃᐃᐃ] = ᐃΔ.ΔΔⲆⲆΔΔⵠ;
    ⲆΔ[1060] = [];
    ⲆΔ[1060][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⵠᐃⲆΔΔᐃ;
    ⲆΔ[1060][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⵠⲆⲆⲆⵠᐃ;
    ⲆΔ[1063] = [];
    ⲆΔ[1063][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃΔΔΔᐃⲆᐃ;
    ⲆΔ[1063][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠⲆᐃᐃⵠⲆ;
    ⲆΔ[1059] = [];
    ⲆΔ[1059][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⲆⲆᐃⵠᐃⲆ;
    ⲆΔ[1059][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⵠΔⵠⵠΔᐃ;
    ⲆΔ[1062] = [];
    ⲆΔ[1062][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠΔⲆᐃᐃΔⲆ;
    ⲆΔ[1062][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⲆⲆⵠΔΔⲆ;
    ⲆΔ[1056] = ᐃΔ.ΔΔΔΔⵠⲆⵠ;
    ⲆΔ[1057] = ᐃΔ.ΔΔⵠᐃᐃΔⲆ;
    ⲆΔ[1058] = ᐃΔ.ᐃᐃⲆⵠΔΔΔ;
    ⲆΔ[1065] = ᐃΔ.ⵠⵠⵠⲆᐃᐃᐃ;
    ⲆΔ[1066] = ᐃΔ.ⲆⲆΔⵠᐃⲆΔ;
    ⲆΔ[1067] = ᐃΔ.ⵠΔᐃⲆᐃΔⲆ;
    ⲆΔ[1222] = [];
    ⲆΔ[1222][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⲆⵠᐃᐃⲆΔ;
    ⲆΔ[1222][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠᐃΔΔⲆⲆⲆ;
    ⲆΔ[248] = [];
    ⲆΔ[248][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⵠΔⵠᐃΔⵠ;
    ⲆΔ[248][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⲆⵠΔⵠⲆⵠ;
    ⲆΔ[1218] = [];
    ⲆΔ[1218][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠΔᐃⵠΔᐃΔ;
    ⲆΔ[1218][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆΔᐃⲆⵠⲆΔ;
    ⲆΔ[1221] = [];
    ⲆΔ[1221][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠΔⲆⵠᐃᐃⲆ;
    ⲆΔ[1221][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆⲆⲆⵠΔⲆᐃ;
    ⲆΔ[1223] = ᐃΔ.ΔΔⲆⵠⲆᐃᐃ;
    ⲆΔ[1219] = ᐃΔ.ⲆᐃΔⲆᐃⲆⵠ;
    ⲆΔ[1068] = [];
    ⲆΔ[1068][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⲆⲆΔΔᐃᐃ;
    ⲆΔ[1068][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃᐃΔⲆΔΔⲆ;
    ⲆΔ[232] = [];
    ⲆΔ[232][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⲆⲆⵠΔᐃⲆ;
    ⲆΔ[232][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆⲆⲆᐃⵠⲆⵠ;
    ⲆΔ[1070] = [];
    ⲆΔ[1070][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⲆⲆᐃⲆⵠⲆ;
    ⲆΔ[1070][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃᐃΔⵠⵠⲆΔ;
    ⲆΔ[1072] = [];
    ⲆΔ[1072][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⵠΔΔⲆΔⵠ;
    ⲆΔ[1072][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠⲆⵠᐃⵠⵠ;
    ⲆΔ[1075] = [];
    ⲆΔ[1075][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⵠᐃⲆⲆⵠⵠ;
    ⲆΔ[1075][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆΔᐃⲆΔⲆΔ;
    ⲆΔ[1071] = [];
    ⲆΔ[1071][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⵠΔΔΔΔⲆ;
    ⲆΔ[1071][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⲆⲆⲆⵠᐃⲆ;
    ⲆΔ[1074] = [];
    ⲆΔ[1074][Nr.ⲆⵠⲆ] = ᐃΔ.ΔΔⵠΔⵠⵠᐃ;
    ⲆΔ[1074][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃᐃᐃⲆⵠⵠⲆ;
    ⲆΔ[1073] = [];
    ⲆΔ[1073][Nr.ⲆⵠⲆ] = ᐃΔ.Ⲇᐃᐃⵠᐃᐃᐃ;
    ⲆΔ[1073][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆᐃΔᐃΔⵠⲆ;
    ⲆΔ[1076] = [];
    ⲆΔ[1076][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⵠᐃⲆᐃᐃⵠ;
    ⲆΔ[1076][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠᐃΔⲆⲆᐃΔ;
    ⲆΔ[1077] = ᐃΔ.ΔΔᐃⵠⲆⲆᐃ;
    ⲆΔ[1078] = ᐃΔ.ⲆΔⲆᐃΔΔΔ;
    ⲆΔ[1079] = ᐃΔ.ⵠⲆΔΔΔᐃⵠ;
    ⲆΔ[1083] = [];
    ⲆΔ[1083][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⵠⵠⲆᐃᐃᐃ;
    ⲆΔ[1083][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠⲆⵠΔⲆⵠ;
    ⲆΔ[233] = [];
    ⲆΔ[233][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⵠᐃⲆⵠⵠⵠ;
    ⲆΔ[233][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠΔⵠⵠᐃⲆ;
    ⲆΔ[1085] = [];
    ⲆΔ[1085][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⵠⵠⲆΔΔᐃ;
    ⲆΔ[1085][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠᐃᐃᐃΔⲆⲆ;
    ⲆΔ[1087] = [];
    ⲆΔ[1087][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⲆⲆⵠΔΔᐃ;
    ⲆΔ[1087][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃΔΔΔᐃⲆΔ;
    ⲆΔ[1090] = [];
    ⲆΔ[1090][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆᐃⲆⵠΔᐃⵠ;
    ⲆΔ[1090][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⵠΔⲆᐃⵠᐃ;
    ⲆΔ[1086] = [];
    ⲆΔ[1086][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⲆᐃᐃΔⵠⵠ;
    ⲆΔ[1086][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⲆΔⵠΔᐃᐃ;
    ⲆΔ[1089] = [];
    ⲆΔ[1089][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆΔⵠⲆΔᐃΔ;
    ⲆΔ[1089][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃᐃⲆⵠΔⲆΔ;
    ⲆΔ[1088] = [];
    ⲆΔ[1088][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⲆᐃΔⵠΔᐃ;
    ⲆΔ[1088][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆᐃΔⵠⵠⵠⵠ;
    ⲆΔ[1091] = [];
    ⲆΔ[1091][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⵠΔᐃᐃΔᐃ;
    ⲆΔ[1091][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠᐃᐃⲆⵠᐃⵠ;
    ⲆΔ[1092] = ᐃΔ.ΔΔⲆⲆⵠⲆΔ;
    ⲆΔ[1093] = ᐃΔ.ⲆⵠΔⵠⲆΔⲆ;
    ⲆΔ[1094] = ᐃΔ.ⲆᐃⲆᐃΔⵠᐃ;
    ⲆΔ[1098] = [];
    ⲆΔ[1098][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⲆⲆΔᐃΔᐃ;
    ⲆΔ[1098][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆⵠΔⵠⵠΔⵠ;
    ⲆΔ[235] = [];
    ⲆΔ[235][Nr.ⲆⵠⲆ] = ᐃΔ.ΔΔᐃⵠΔⲆⲆ;
    ⲆΔ[235][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆΔΔΔⵠΔⲆ;
    ⲆΔ[1115] = ᐃΔ.ᐃᐃᐃΔⲆᐃΔ;
    ⲆΔ[1113] = [];
    ⲆΔ[1113][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⲆΔⲆΔⵠⵠ;
    ⲆΔ[1113][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃᐃΔᐃⲆᐃΔ;
    ⲆΔ[1114] = [];
    ⲆΔ[1114][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⲆᐃΔⵠⲆⵠ;
    ⲆΔ[1114][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆΔⲆⵠΔᐃΔ;
    ⲆΔ[1100] = [];
    ⲆΔ[1100][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃᐃᐃⵠᐃⵠⲆ;
    ⲆΔ[1100][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⲆᐃᐃᐃⲆᐃ;
    ⲆΔ[1102] = [];
    ⲆΔ[1102][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⵠΔⲆⲆΔⲆ;
    ⲆΔ[1102][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⲆⵠⵠⵠⵠⵠ;
    ⲆΔ[1105] = [];
    ⲆΔ[1105][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⲆⲆᐃΔΔⲆ;
    ⲆΔ[1105][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆⲆⲆⲆᐃᐃΔ;
    ⲆΔ[1101] = [];
    ⲆΔ[1101][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠΔΔΔᐃΔⲆ;
    ⲆΔ[1101][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠⲆᐃΔΔΔ;
    ⲆΔ[1104] = [];
    ⲆΔ[1104][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⵠⲆᐃⲆⵠⲆ;
    ⲆΔ[1104][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⲆⲆⵠΔⲆⵠ;
    ⲆΔ[1103] = [];
    ⲆΔ[1103][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠᐃⲆⵠΔⲆΔ;
    ⲆΔ[1103][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃᐃⵠⵠⲆⲆᐃ;
    ⲆΔ[1106] = [];
    ⲆΔ[1106][Nr.ⲆⵠⲆ] = ᐃΔ.ΔΔΔⵠⲆᐃⲆ;
    ⲆΔ[1106][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⲆⵠᐃⲆᐃᐃ;
    ⲆΔ[1107] = ᐃΔ.ΔΔⵠⵠⵠΔⲆ;
    ⲆΔ[1108] = ᐃΔ.ⲆΔᐃⵠⲆΔᐃ;
    ⲆΔ[1109] = ᐃΔ.ΔⵠΔⵠⲆᐃᐃ;
    ⲆΔ[1119] = [];
    ⲆΔ[1119][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⵠᐃⵠⲆⲆΔ;
    ⲆΔ[1119][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆᐃⲆᐃᐃⵠᐃ;
    ⲆΔ[238] = [];
    ⲆΔ[238][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⲆΔᐃⵠⵠΔ;
    ⲆΔ[238][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⲆⵠᐃⲆᐃᐃ;
    ⲆΔ[1136] = ᐃΔ.ⵠⲆⵠⲆᐃⵠⵠ;
    ⲆΔ[1134] = [];
    ⲆΔ[1134][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⵠⲆᐃⲆᐃᐃ;
    ⲆΔ[1134][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⵠⵠΔⲆⵠΔ;
    ⲆΔ[1135] = [];
    ⲆΔ[1135][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⲆᐃⲆⲆΔᐃ;
    ⲆΔ[1135][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃΔⵠⵠⵠᐃᐃ;
    ⲆΔ[1121] = [];
    ⲆΔ[1121][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⵠⲆᐃⵠⲆⵠ;
    ⲆΔ[1121][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃΔᐃⵠⲆⲆⵠ;
    ⲆΔ[1123] = [];
    ⲆΔ[1123][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠΔⲆⵠⲆᐃΔ;
    ⲆΔ[1123][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠΔᐃᐃⲆⵠᐃ;
    ⲆΔ[1126] = [];
    ⲆΔ[1126][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⵠⵠⲆⵠⲆⵠ;
    ⲆΔ[1126][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⲆᐃⲆᐃᐃΔ;
    ⲆΔ[1122] = [];
    ⲆΔ[1122][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⲆᐃⲆⲆⲆⲆ;
    ⲆΔ[1122][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠⲆΔᐃⲆΔⵠ;
    ⲆΔ[1125] = [];
    ⲆΔ[1125][Nr.ⲆⵠⲆ] = ᐃΔ.ΔⲆᐃᐃΔⵠⵠ;
    ⲆΔ[1125][Nr.ᐃᐃᐃ] = ᐃΔ.ΔΔᐃⲆΔⲆΔ;
    ⲆΔ[1124] = [];
    ⲆΔ[1124][Nr.ⲆⵠⲆ] = ᐃΔ.ΔΔⵠⲆΔⲆⵠ;
    ⲆΔ[1124][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠΔΔⵠⵠΔᐃ;
    ⲆΔ[1127] = [];
    ⲆΔ[1127][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠΔΔᐃΔⵠΔ;
    ⲆΔ[1127][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆᐃⵠΔⲆⵠΔ;
    ⲆΔ[1128] = ᐃΔ.ⵠᐃⲆⵠᐃⵠⵠ;
    ⲆΔ[1129] = ᐃΔ.ⲆᐃⵠΔΔⵠⲆ;
    ⲆΔ[1130] = ᐃΔ.ⵠΔⲆᐃⵠΔⲆ;
    ⲆΔ[1042] = [];
    ⲆΔ[1042][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃᐃᐃᐃⲆⵠⲆ;
    ⲆΔ[1042][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃᐃⵠⵠᐃΔⵠ;
    ⲆΔ[1043] = [];
    ⲆΔ[1043][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃᐃⲆⲆⵠⲆⲆ;
    ⲆΔ[1043][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠΔᐃΔⵠⲆᐃ;
    ⲆΔ[1044] = [];
    ⲆΔ[1044][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠᐃᐃⲆⲆⵠᐃ;
    ⲆΔ[1044][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆⵠᐃⲆᐃⲆΔ;
    ⲆΔ[228] = [];
    ⲆΔ[228][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆΔᐃⲆⵠⵠⵠ;
    ⲆΔ[228][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆΔᐃⲆⵠⵠⵠ;
    ⲆΔ[234] = [];
    ⲆΔ[234][Nr.ⲆⵠⲆ] = ᐃΔ.Ⲇⵠⵠⵠⵠⵠᐃ;
    ⲆΔ[234][Nr.ᐃᐃᐃ] = ᐃΔ.Ⲇⵠⵠⵠⵠⵠᐃ;
    ⲆΔ[249] = [];
    ⲆΔ[249][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆΔΔᐃⲆⵠΔ;
    ⲆΔ[249][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆΔΔᐃⲆⵠΔ;
    ⲆΔ[1045] = ᐃΔ.ⲆⵠᐃⲆᐃⲆᐃ;
    ⲆΔ[89] = [];
    ⲆΔ[89][Nr.ⲆⵠⲆ] = ᐃΔ.ΔΔΔᐃᐃⲆᐃ;
    ⲆΔ[89][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆΔΔⲆᐃⵠᐃ;
    ⲆΔ[92] = [];
    ⲆΔ[92][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠΔⵠⲆᐃΔᐃ;
    ⲆΔ[92][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⲆΔⲆⵠⵠⲆ;
    ⲆΔ[247] = [];
    ⲆΔ[247][Nr.ⲆⵠⲆ] = [ᐃΔ.ᐃⵠⲆⵠⵠⵠΔ, ᐃΔ.ⲆⵠⵠΔⲆΔᐃ, ᐃΔ.ᐃⲆΔⵠΔΔΔ, ᐃΔ.ⵠΔⲆⵠΔⵠᐃ, ᐃΔ.ΔⲆΔᐃⲆⲆΔ, ᐃΔ.ⲆⲆⲆⲆᐃⵠⲆ, ᐃΔ.ᐃᐃⲆᐃⵠⲆⲆ, ᐃΔ.ᐃⲆΔⵠΔᐃΔ, ᐃΔ.ⲆⲆΔΔΔᐃᐃ];
    ⲆΔ[247][Nr.ᐃᐃᐃ] = [ᐃΔ.ΔⲆⵠⲆⲆᐃⲆ, ᐃΔ.ΔᐃΔⲆⲆΔΔ, ᐃΔ.ᐃᐃΔⵠⵠΔΔ, ᐃΔ.ⲆΔΔⲆᐃⲆΔ, ᐃΔ.ⲆⲆⲆᐃⲆΔᐃ, ᐃΔ.ⵠΔⵠΔᐃᐃⵠ, ᐃΔ.ΔΔΔΔΔⵠᐃ, ᐃΔ.ᐃⲆΔⵠΔᐃΔ, ᐃΔ.ⲆΔⲆΔΔⵠⲆ];
    ⲆΔ[93] = [];
    ⲆΔ[93][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⵠᐃΔᐃᐃᐃ;
    ⲆΔ[93][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠⵠᐃΔᐃⵠ;
    ⲆΔ[225] = [];
    ⲆΔ[225][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃᐃⲆΔⲆᐃⵠ;
    ⲆΔ[225][Nr.ᐃᐃᐃ] = ᐃΔ.ⲆΔᐃΔⲆⲆΔ;
    ⲆΔ[226] = [];
    ⲆΔ[226][Nr.ⲆⵠⲆ] = ᐃΔ.ᐃⲆⲆᐃⲆΔΔ;
    ⲆΔ[226][Nr.ᐃᐃᐃ] = ᐃΔ.ΔᐃΔᐃΔᐃⲆ;
    ⲆΔ[24] = [];
    ⲆΔ[24][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⵠⲆⵠΔⲆΔ;
    ⲆΔ[24][Nr.ᐃᐃᐃ] = ᐃΔ.ΔⵠⵠΔⵠᐃΔ;
    ⲆΔ[88] = [];
    ⲆΔ[88][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆΔⲆΔᐃᐃⲆ;
    ⲆΔ[88][Nr.ᐃᐃᐃ] = ᐃΔ.ⵠΔΔᐃᐃⵠΔ;
    ⲆΔ[87] = [];
    ⲆΔ[87][Nr.ⲆⵠⲆ] = ᐃΔ.ⵠⵠΔⵠⲆᐃᐃ;
    ⲆΔ[87][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠⲆᐃΔᐃⲆ;
    ⲆΔ[82] = [];
    ⲆΔ[82][Nr.ⲆⵠⲆ] = ᐃΔ.ⲆⵠⵠΔⲆⲆΔ;
    ⲆΔ[82][Nr.ᐃᐃᐃ] = ᐃΔ.ᐃⵠᐃᐃᐃⵠⵠ;
    ⲆΔ[621] = [];
    ⲆΔ[621][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[621][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[621][Nr.ⲆⵠⲆ].push(ᐃΔ.ΔⲆᐃΔⲆᐃᐃΔΔ);
    ⲆΔ[621][Nr.ⲆⵠⲆ].push(ᐃΔ.ⲆΔⵠΔⵠⵠᐃⲆΔ);
    ⲆΔ[621][Nr.ⲆⵠⲆ].push(ᐃΔ.ⲆⲆⲆΔⲆᐃᐃⵠⵠ);
    ⲆΔ[621][Nr.ᐃᐃᐃ].push(ᐃΔ.ΔᐃᐃᐃⵠⲆⵠΔⲆ);
    ⲆΔ[621][Nr.ᐃᐃᐃ].push(ᐃΔ.ΔΔⵠᐃⲆΔⵠⵠⲆ);
    ⲆΔ[621][Nr.ᐃᐃᐃ].push(ᐃΔ.ⲆⵠΔᐃΔΔⲆⲆᐃ);
    ⲆΔ[619] = [];
    ⲆΔ[619][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[619][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[619][Nr.ⲆⵠⲆ].push(ᐃΔ.ΔⵠΔⲆⵠⲆᐃⵠⵠ);
    ⲆΔ[619][Nr.ⲆⵠⲆ].push(ᐃΔ.ⲆⵠⲆⵠⲆΔⵠΔΔ);
    ⲆΔ[619][Nr.ⲆⵠⲆ].push(ᐃΔ.ⲆΔᐃⵠΔΔⵠᐃⲆ);
    ⲆΔ[619][Nr.ᐃᐃᐃ].push(ᐃΔ.ⲆᐃΔᐃⲆΔⲆΔⲆ);
    ⲆΔ[619][Nr.ᐃᐃᐃ].push(ᐃΔ.ⲆᐃᐃⲆⲆⲆΔⵠⲆ);
    ⲆΔ[619][Nr.ᐃᐃᐃ].push(ᐃΔ.ΔᐃΔᐃⵠΔΔⲆΔ);
    ⲆΔ[620] = [];
    ⲆΔ[620][Nr.ⲆⵠⲆ] = [];
    ⲆΔ[620][Nr.ᐃᐃᐃ] = [];
    ⲆΔ[620][Nr.ⲆⵠⲆ].push(ᐃΔ.ᐃⵠⵠⲆᐃⲆⲆⵠⵠ);
    ⲆΔ[620][Nr.ⲆⵠⲆ].push(ᐃΔ.ⵠᐃΔⵠⵠⲆΔⵠⵠ);
    ⲆΔ[620][Nr.ⲆⵠⲆ].push(ᐃΔ.ᐃᐃⵠᐃⲆᐃⲆⵠⵠ);
    ⲆΔ[620][Nr.ᐃᐃᐃ].push(ᐃΔ.ⵠⵠΔᐃⲆΔᐃᐃᐃ);
    ⲆΔ[620][Nr.ᐃᐃᐃ].push(ᐃΔ.ⵠΔΔΔΔᐃᐃⲆⲆ);
    ⲆΔ[620][Nr.ᐃᐃᐃ].push(ᐃΔ.ΔⵠⵠᐃΔᐃⵠⵠⵠ);
    ᐃΔⵠⵠ.g = [];
    ᐃΔⵠⵠ.g[0] = [ᐃΔ.ᐃⲆⵠⲆⲆᐃΔ, ᐃΔ.ⲆⲆⲆᐃⲆⲆⵠ];
    ᐃΔⵠⵠ.g[1] = ᐃΔⵠⵠ.g[0];
    ᐃΔⵠⵠ.g[2] = [ᐃΔ.ⵠᐃΔΔᐃⲆⵠ, ᐃΔ.ⵠΔΔΔⲆⵠⵠ];
    ᐃΔⵠⵠ.m = [];
    ᐃΔⵠⵠ.m[0] = [ᐃΔ.ⲆᐃⵠΔⵠⲆⲆ, ᐃΔ.ΔΔⵠΔᐃⲆⲆ];
    ᐃΔⵠⵠ.m[1] = ᐃΔⵠⵠ.m[0];
    ᐃΔⵠⵠ.m[2] = [ᐃΔ.ⵠΔΔⲆΔⲆΔ, ᐃΔ.ⲆᐃᐃⲆⵠⲆΔ];
    ᐃΔⵠⵠ.la = [];
    ᐃΔⵠⵠ.la[0] = [ᐃΔ.Ⲇᐃⵠᐃⵠⵠᐃ, ᐃΔ.ⲆΔⵠᐃΔΔⵠ];
    ᐃΔⵠⵠ.la[1] = ᐃΔⵠⵠ.la[0];
    ᐃΔⵠⵠ.la[2] = ᐃΔⵠⵠ.la[0];
    ᐃΔⵠⵠ.la[3] = ᐃΔⵠⵠ.la[0];
    ᐃΔⵠⵠ.la[4] = ᐃΔⵠⵠ.la[0];
    ᐃΔⵠⵠ.la[5] = ᐃΔⵠⵠ.la[0];
    ᐃΔⵠⵠ.s = [];
    ᐃΔⵠⵠ.s[0] = [ᐃΔ.ΔⵠᐃΔᐃΔⲆ, ᐃΔ.ⲆᐃⵠⵠᐃⲆΔ];
    ᐃΔⵠⵠ.s[1] = ᐃΔⵠⵠ.s[0];
    ᐃΔⵠⵠ.s[2] = [ᐃΔ.ᐃᐃⵠᐃᐃᐃⲆ, ᐃΔ.ⲆᐃⵠΔⲆⵠⵠ];
    ᐃΔⵠⵠ.p = [];
    ᐃΔⵠⵠ.p[0] = [ᐃΔ.ΔⵠⵠᐃⲆⵠᐃ, ᐃΔ.ΔⵠⵠᐃⲆⵠᐃ];
    ᐃΔⵠⵠ.a = [];
    ᐃΔⵠⵠ.a[0] = [ᐃΔ.ⲆⲆⲆⵠΔΔΔ, ᐃΔ.ΔᐃⲆⲆⲆΔⵠ];
    ᐃΔⵠⵠ.a[1] = ᐃΔⵠⵠ.a[0];
    ᐃΔⵠⵠ.a[2] = ᐃΔⵠⵠ.a[0];
    ᐃΔⵠⵠ.d = [];
    ᐃΔⵠⵠ.d[0] = [ᐃΔ.ⵠⵠΔⲆⲆᐃⲆ, ᐃΔ.ΔⵠⲆⲆⵠᐃᐃ];
    ᐃΔⵠⵠ.d[1] = ᐃΔⵠⵠ.d[0];
    ᐃΔⵠⵠ.d[2] = ᐃΔⵠⵠ.d[0];
    ᐃΔⵠⵠ.re = [];
    ᐃΔⵠⵠ.re[0] = [ᐃΔ.ⲆⵠᐃⵠᐃΔⵠ, ᐃΔ.ⵠΔⵠᐃΔⵠⲆ];
    ᐃΔⵠⵠ.re[1] = ᐃΔⵠⵠ.re[0];
    ᐃΔⵠⵠ.re[2] = ᐃΔⵠⵠ.re[0];
    ᐃΔⵠⵠ.f = [];
    ᐃΔⵠⵠ.f[0] = [ᐃΔ.ᐃⲆᐃᐃⲆⲆᐃ, ᐃΔ.ⲆⵠᐃⵠⲆΔⲆ];
    ᐃΔⵠⵠ.f[1] = ᐃΔⵠⵠ.f[0];
    ᐃΔⵠⵠ.f[2] = ᐃΔⵠⵠ.f[0];
    ᐃΔⵠⵠ.isl = [];
    ᐃΔⵠⵠ.isl[0] = [ᐃΔ.ᐃⲆΔᐃⲆⲆᐃ, ᐃΔ.ᐃⲆΔⵠⲆⵠⲆ];
    ᐃΔⵠⵠ.isl[1] = ᐃΔⵠⵠ.isl[0];
    ᐃΔⵠⵠ.isl[2] = ᐃΔⵠⵠ.isl[0];
    ᐃΔⵠⵠ.c = [];
    ᐃΔⵠⵠ.c[0] = [ᐃΔ.ᐃⲆⵠⵠⲆΔⵠ, ᐃΔ.ⲆⵠᐃⲆⲆᐃΔ];
    ᐃΔⵠⵠ.c[1] = ᐃΔⵠⵠ.c[0];
    ᐃΔⵠⵠ.c[2] = ᐃΔⵠⵠ.c[0];
    ᐃΔⵠⵠ.wtb = [];
    ᐃΔⵠⵠ.wtb[0] = [ᐃΔ.ᐃⵠⵠΔΔᐃⵠ, ᐃΔ.ⲆⲆΔⵠⲆΔᐃ];
    ᐃΔⵠⵠ.PIRANHA = [ᐃΔ.ᐃⵠⲆᐃⲆᐃⲆ, ᐃΔ.ᐃⵠΔⵠΔⲆΔ];
    ᐃΔⵠⵠ.KRAKEN = [ᐃΔ.ΔⵠᐃΔᐃᐃΔ, ᐃΔ.ᐃᐃⵠⵠⵠΔΔ];
    ᐃΔⵠⵠ.FOX = [ᐃΔ.ⵠⲆᐃΔⵠⲆᐃ, ᐃΔ.ᐃᐃⲆⲆⵠⵠᐃ];
    ᐃΔⵠⵠ.WOLF = [ᐃΔ.ᐃⵠⲆᐃⲆⲆΔ, ᐃΔ.ᐃⲆᐃΔⵠⵠⲆ];
    ᐃΔⵠⵠ.SPIDER = [ᐃΔ.ⵠΔᐃΔΔⲆΔ, ᐃΔ.ᐃⲆᐃΔⵠΔΔ];
    ᐃΔⵠⵠ.BEAR = [ᐃΔ.ⵠⵠΔᐃΔΔⲆ, ᐃΔ.ΔⲆᐃΔⲆⲆΔ];
    ᐃΔⵠⵠ.CAVE = [ᐃΔ.ⵠⵠᐃⵠΔᐃⵠ, ᐃΔ.ⲆΔⲆΔⲆⵠΔ];
    ᐃΔⵠⵠ.MAP = [ᐃΔ.ⲆⵠⵠⵠⲆΔⲆ, ᐃΔ.ⲆⲆⲆΔᐃᐃⲆ];
    ᐃΔⵠⵠ.FOREST = [ᐃΔ.ᐃⲆⵠⲆⲆⲆⵠ, ᐃΔ.ΔⵠΔⵠⲆᐃⲆ];
    ᐃΔⵠⵠ.WINTER = [ᐃΔ.ⵠΔΔΔⲆΔΔ, ᐃΔ.ΔⲆⲆᐃⵠᐃᐃ];
    ᐃΔⵠⵠ.DESERT = [ᐃΔ.ᐃⲆᐃⵠᐃᐃΔ, ᐃΔ.ᐃⵠⵠΔΔⲆⵠ];
    ᐃΔⵠⵠ.LAVA = [ᐃΔ.ᐃΔᐃᐃⲆᐃⲆ, ᐃΔ.ᐃⵠⲆΔⵠΔⲆ];
    for (var c in ᐃΔⵠⵠ) {
      for (var d = ᐃΔⵠⵠ[c], e = 0; e < d.length; e++) {
        var f = d[e];
        if (f.ⵠΔΔⵠΔⵠⲆ !== undefined) {
          f.ⵠΔΔⵠΔⵠⲆ();
        } else if (f.length > 0) {
          for (var g = 0; g < f.length; g++) {
            if (f[g].ⵠΔΔⵠΔⵠⲆ !== ca) {
              f[g].ⵠΔΔⵠΔⵠⲆ();
            }
          }
        }
      }
    }
    console.log(wh, Xa);
  }
  function cp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 168;
    d.height = a * 100;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    Fb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    Rb(e, c[0]);
    Wb(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    Fb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    Rb(e, undefined, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    Rb(e, undefined, c[3], a * 6);
    Wb(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
    Rb(e, js, c[3], a * 6);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    Fb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    Rb(e, c[1]);
    Wb(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    Rb(e, c[2], c[1], a * 4);
    Wb(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
    Rb(e, c[3], c[1], a * 4);
    Wb(e, a * 78, a * 44, a * 20);
    Rb(e, c[4]);
    return d;
  }
  function pp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 372;
    d.height = a * 358;
    e.translate(a * 0, a * 10);
    e.globalAlpha = b ? 0.2 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    Rb(e, c[0], c[0], a * 10);
    e.translate(a * 0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
    e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
    e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
    e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
    e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
    e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
    e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
    e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
    e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.000030517578125, a * 122.3125);
    e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
    e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
    e.closePath();
    Rb(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.0000305175781, a * 127.3125);
    e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
    e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
    e.closePath();
    Rb(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
    e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
    e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
    e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
    e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
    e.closePath();
    Rb(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
    e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
    e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
    e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
    e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
    e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
    e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
    e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
    e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
    e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
    e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
    e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
    e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
    e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
    e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
    e.closePath();
    Rb(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
    e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
    e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
    e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
    e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
    e.closePath();
    Rb(e, c[1], c[1], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
    e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
    e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    Wb(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
    Rb(e, c[4], c[5], a * 1);
    Wb(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
    Rb(e, c[4], c[5], a * 1);
    Wb(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
    Rb(e, c[4], c[5], a * 1);
    Wb(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
    Rb(e, c[4], c[5], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
    e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
    e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
    e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
    e.closePath();
    Rb(e, c[4], c[5], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
    e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
    e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
    e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
    e.closePath();
    Rb(e, c[6]);
    return d;
  }
  function Cp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 158;
    d.height = a * 201;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    Rb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    Rb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    Rb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    Rb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    Rb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    Rb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    Rb(e, c[8], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    Rb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    Rb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    Rb(e, c[3], c[2], a * 4);
    Wb(e, a * 108.5, a * 148.421875, a * 9);
    Rb(e, c[5]);
    Wb(e, a * 106.5, a * 144.421875, a * 3);
    Rb(e, c[6]);
    Wb(e, a * 46.5, a * 148.421875, a * 9);
    Rb(e, c[5]);
    Wb(e, a * 44.5, a * 144.421875, a * 3);
    Rb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 114.421875);
    e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
    e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
    Rb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.translate(0, a * -2);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.5, a * 131.421875);
    e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
    e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
    Rb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 57.421875);
    e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
    e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
    e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
    e.closePath();
    Rb(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    Rb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    Rb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 154.421875);
    e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
    e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
    e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
    e.closePath();
    Rb(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 81.5, a * 164.421875);
    e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
    e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
    e.closePath();
    Rb(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 164.421875);
    e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
    e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
    e.closePath();
    Rb(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.5, a * 156.421875);
    e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
    e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
    e.closePath();
    Rb(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    Rb(e, c[3], c[2], a * 4);
    return d;
  }
  function Tp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 218;
    d.height = a * 185;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 53.135406494140625);
    e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
    e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
    e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
    e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
    e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
    e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
    e.closePath();
    Rb(e, c[0], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 25.135406494140625);
    e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
    e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
    e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
    e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
    e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
    e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
    e.closePath();
    Rb(e, c[1]);
    return d;
  }
  function fp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 77;
    e.translate(0, a * 10);
    e.scale(0.2, 0.2);
    e.translate(0, a * -30);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 36.5, a * 278.0625);
      e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
      e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
      e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
      e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
      e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
      e.closePath();
      Rb(e, b[0], b[3], a * 50);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    Rb(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    Rb(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    Rb(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    Rb(e, b[2], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    Rb(e, b[1]);
    e.scale(3, 3);
    e.translate(15, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 32);
      e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
      e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
      e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
      Rb(e, undefined, b[3], a * 28);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 56, a * 6);
      e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
      e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
      e.closePath();
      Rb(e, b[3], b[3], a * 28);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    Rb(e, undefined, b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    Rb(e, b[1], b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    Rb(e, undefined, b[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    Rb(e, b[2], b[2], a * 10);
    return d;
  }
  function zp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 405;
    e.globalAlpha = 1;
    e.translate(a * 6, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
    e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
    e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
    e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
    e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    Rb(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
    e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
    e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
    e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
    e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
    e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
    e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    Rb(e, vh, c[1], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
    e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
    e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
    e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
    e.closePath();
    Rb(e, c[0], c[1], a * 13);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
    e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
    e.closePath();
    Rb(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
    e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
    e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
    e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
    e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
    e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
    e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
    e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
    e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
    e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
    e.closePath();
    Rb(e, c[2], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
    e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
    e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
    e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
    e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
    e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
    e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
    e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
    e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
    e.closePath();
    Rb(e, c[0], c[1], a * 20);
    return d;
  }
  function yp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 310;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 192);
    e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
    e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
    e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
    e.closePath();
    Rb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146, a * 239);
    e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
    e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
    e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
    e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
    e.closePath();
    Rb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 193);
    e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
    e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
    e.closePath();
    Rb(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 230, a * 57);
    e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
    e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
    e.closePath();
    Rb(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 212);
    e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
    e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
    e.closePath();
    Rb(e, Fn, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 239, a * 59);
    e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
    e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 61);
    e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
    e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
    e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 125);
    e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
    e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
    e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
    e.closePath();
    Rb(e, c[2]);
    return d;
  }
  function wp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 573;
    d.height = a * 350;
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 336, a * 72);
      e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
      e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
      e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
      e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
      e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
      e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
      e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
      e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
      e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
      e.closePath();
      Rb(e, b[4], b[4], a * 35);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 168, a * 42);
    e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
    e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
    e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
    e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
    e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
    e.closePath();
    Rb(e, b[0], b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188, a * 41);
    e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
    e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
    e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
    e.closePath();
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 336, a * 71);
    e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
    e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
    e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
    e.closePath();
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 357, a * 76);
    e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
    e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
    e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
    e.closePath();
    Rb(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 309, a * 168);
    e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 54);
    e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
    e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
    e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
    e.closePath();
    Rb(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 292, a * 198);
    e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 245, a * 68);
    e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 96);
    e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 124);
    e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 183);
    e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 213);
    e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 399, a * 257);
    e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
    e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
    e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
    Rb(e, b[3], b[3], a * 12);
    return d;
  }
  function Pp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    Fb(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    Rb(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
    e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
    e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
    e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
    e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
    e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
    e.closePath();
    Rb(e, c[3], c[4], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    Rb(e, undefined, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    Rb(e, Vh, c[6], a * 15);
    return d;
  }
  function Ap(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    Fb(d, a * -7, a * -20, a * 14, a * 39, a * 20);
    d.restore();
    Rb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 37, a * 94);
    Fb(d, a * -7, a * -20, a * 14, a * 37, a * 20);
    d.restore();
    Rb(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    Fb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    Rb(d, b[0], b[0], a * 13);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 131, a * 94);
    Fb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    Rb(d, b[2], b[2], a * 13);
    d.save();
    d.translate(a * 131, a * 94);
    Fb(d, a * -76, a * -61, a * 152, a * 122, a * 20);
    d.restore();
    Rb(d, b[3], b[1], a * 8);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    Fb(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
    d.restore();
    Rb(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    Fb(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
    d.restore();
    Rb(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 130.5, a * 94);
    Fb(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    Rb(d, b[3], b[2], a * 8);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    Fb(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    Rb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 133, a * 92);
    Fb(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    Rb(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    Fb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    Rb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 223, a * 94.5);
    Fb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    Rb(d, b[2]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    Fb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    Rb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    Fb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    Rb(d, b[2]);
    return c;
  }
  function kp() {
    kx.ΔΔΔⲆ.id = -1;
    kx.ΔΔΔⲆ.lock = false;
    kx.ΔΔΔⲆ.locked = ye;
    kx.ΔΔΔⲆ.ⵠΔᐃᐃᐃΔΔ = cl;
    kx.ΔΔΔⲆ.ⵠⵠΔⵠᐃᐃⵠ = Rh;
    kx.ΔΔΔⲆ.open = ye;
    var b = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
    var c = 100;
    if (b) {
      for (var d = 0; jx.ⵠⲆⵠ[11].length > d; d++) {
        var e = jx.ⵠⲆⵠ[11][d];
        var f = ⵠⵠⵠ.ⵠΔᐃΔ(e, b);
        if (f < c) {
          c = f;
          kx.ΔΔΔⲆ.open = true;
          kx.ΔΔΔⲆ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
          kx.ΔΔΔⲆ.ΔΔᐃᐃ = e.info;
          kx.ΔΔΔⲆ.ᐃⲆⲆⲆ = e.ᐃⲆⲆⲆ;
          kx.ΔΔΔⲆ.ⲆⵠᐃΔⲆ = e.id;
          kx.ΔΔΔⲆ.locked = e.lock;
          kx.ΔΔΔⲆ.lock = !!e.lock && e.ᐃⲆⲆⲆ != kx.id && !kx.ⲆᐃⵠⲆΔᐃΔ(e.ᐃⲆⲆⲆ) || cr;
          kx.ΔΔΔⲆ.ⵠⵠΔⵠᐃᐃⵠ = e.ᐃⲆⲆⲆ === kx.id && !kx.ΔΔΔⲆ.locked && kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(148) != -1;
          if (kx.ΔΔΔⲆ.locked && kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(158) != -1) {
            kx.ΔΔΔⲆ.ⵠΔᐃᐃᐃΔΔ = Jq;
          }
        }
      }
      if (c < 100) {
        var j = ⲆΔ[339];
        var a = nx.Ⲇⵠⵠ[0];
        var k = Math.floor(a.info.translate.x + (a.info.ⵠⵠ[0].width - j.width) / 2);
        var l = Math.floor(a.info.translate.y + (a.info.ⵠⵠ[0].height - j.height) / 2) + 3;
        Jp(oo, j, k, l);
        if ((!kx.ΔΔΔⲆ.lock || kx.id === kx.ΔΔΔⲆ.ᐃⲆⲆⲆ) && kx.ΔΔΔⲆ.id >= 0) {
          (a = nx.Ⲇⵠⵠ[kx.ΔΔΔⲆ.id]).ⵠⵠⲆⵠ(oo);
          var h = kx.ΔΔΔⲆ.ΔΔᐃᐃ;
          if (h > 1) {
            Mp(h, a);
          }
        }
        if (kx.ΔΔΔⲆ.lock) {
          nx.ᐃΔΔΔⲆΔⲆ.ⵠⵠⲆⵠ(oo);
        } else if (kx.ΔΔΔⲆ.ⵠⵠΔⵠᐃᐃⵠ) {
          nx.ΔΔⵠΔᐃⲆⵠ.ⵠⵠⲆⵠ(oo);
        }
        if (kx.ΔΔΔⲆ.ⵠΔᐃᐃᐃΔΔ) {
          nx.ⵠᐃᐃᐃⵠᐃⲆ.ⵠⵠⲆⵠ(oo);
        }
      }
    }
  }
  function xp(b, c, d) {
    var e = ⲆΔ[465][b];
    var f = c.info.translate.x + Po * 5;
    var g = c.info.translate.y + Po * 5;
    if (gf == c.info.state || d) {
      g += Po * 5;
    }
    Jp(oo, e, f, g);
  }
  function Jp(b, c, d, e, f, i, a, j, k, h) {
    if (ca === c.ⵠΔΔⵠΔⵠⲆ || c.ⵠΔΔⵠΔⵠⲆ() === 1) {
      if (h !== undefined) {
        b.drawImage(c, d, e, Math.max(1, f), Math.max(1, i), a, j, k, h);
      } else if (i !== js) {
        b.drawImage(c, d, e, f, i);
      } else {
        b.drawImage(c, d, e);
      }
    }
  }
  function Mp(a, b) {
    if (!ⲆΔ[283][a]) {
      ⲆΔ[283][a] = ou(Po, "x" + a, 17, "#FFF");
    }
    var c = ⲆΔ[283][a];
    var d = b.info.translate.x + b.info.ⵠⵠ[0].width - c.width - Po * 14;
    var e = b.info.translate.y + b.info.ⵠⵠ[0].height - c.height - Po * 19;
    if (gf == b.info.state) {
      e += Po * 5;
    }
    Jp(oo, c, d, e);
  }
  function Bp() {
    kx.ΔⲆΔⵠⵠ.open = false;
    var a = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
    var b = 100;
    if (a) {
      for (var c = 0; jx.ⵠⲆⵠ[22].length > c; c++) {
        var d = jx.ⵠⲆⵠ[22][c];
        var e = ⵠⵠⵠ.ⵠΔᐃΔ(d, a);
        if (e < b) {
          b = e;
          kx.ΔⲆΔⵠⵠ.open = true;
          kx.ΔⲆΔⵠⵠ.ᐃⲆⲆⲆ = d.ᐃⲆⲆⲆ;
          kx.ΔⲆΔⵠⵠ.ⲆⵠᐃΔⲆ = d.id;
        }
      }
      if (b < 100) {
        nx.ΔⲆΔⵠⵠ.ⵠⵠⲆⵠ(oo);
      }
    }
  }
  function Dp() {
    if (!kx.ΔΔΔⲆ.open && !kx.ΔⵠΔᐃΔ.open && !kx.ΔⲆⵠΔ.open && !kx.ⵠᐃΔᐃ.open) {
      kx.ΔⲆΔⵠ.open = false;
      var b = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; d < jx.ⵠⲆⵠ[34].length; d++) {
          var e = jx.ⵠⲆⵠ[34][d];
          var f = ⵠⵠⵠ.ⵠΔᐃΔ(e, b);
          if (c > f) {
            c = f;
            kx.ΔⲆΔⵠ.open = true;
            kx.ΔⲆΔⵠ.ΔⲆⵠᐃⲆⲆⲆ = e.info & 31;
            kx.ΔⲆΔⵠ.ᐃⲆⲆⵠΔ = (e.info & 992) >> 5;
            kx.ΔⲆΔⵠ.ⲆᐃⲆⲆⲆᐃⵠ = (e.info & 31744) >> 10;
            kx.ΔⲆΔⵠ.ᐃⲆⲆⲆ = e.ᐃⲆⲆⲆ;
            kx.ΔⲆΔⵠ.ⲆⵠᐃΔⲆ = e.id;
          }
        }
        if (c < 100) {
          var g = ⲆΔ[722];
          var a = (j = nx.ⵠΔⵠⲆⲆᐃΔ).info.translate.x - 32;
          Jp(oo, g, a, 0);
          if (kx.ΔⲆΔⵠ.ΔⲆⵠᐃⲆⲆⲆ > 0) {
            j.ⵠⵠⲆⵠ(oo);
            if ((k = kx.ΔⲆΔⵠ.ΔⲆⵠᐃⲆⲆⲆ) > 1) {
              Mp(k, j);
            }
          }
          var j = nx.Δᐃⵠᐃⵠᐃⵠ;
          if (kx.ΔⲆΔⵠ.ⲆᐃⲆⲆⲆᐃⵠ > 0) {
            j.ⵠⵠⲆⵠ(oo);
            if ((k = kx.ΔⲆΔⵠ.ⲆᐃⲆⲆⲆᐃⵠ) > 1) {
              Mp(k, j);
            }
          }
          var k;
          j = nx.ⵠⵠⵠⲆⲆᐃⵠ;
          if (kx.ΔⲆΔⵠ.ᐃⲆⲆⵠΔ > 0) {
            j.ⵠⵠⲆⵠ(oo);
            if ((k = kx.ΔⲆΔⵠ.ᐃⲆⲆⵠΔ) > 1) {
              Mp(k, j);
            }
          }
        }
      }
    }
  }
  function Ip() {
    if (!kx.ΔΔΔⲆ.open && !kx.ΔⵠΔᐃΔ.open && !kx.ΔⲆⵠΔ.open && !kx.ΔⲆΔⵠ.open && !kx.ⵠᐃΔᐃ.open) {
      kx.sign.open = Eh;
      var a = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
      var b = 100;
      if (a) {
        for (var c = 0; c < jx.ⵠⲆⵠ[36].length; c++) {
          var d = jx.ⵠⲆⵠ[36][c];
          var e = ⵠⵠⵠ.ⵠΔᐃΔ(d, a);
          if (b > e && d.info === 0 && kx.id === d.ᐃⲆⲆⲆ) {
            kx.sign.open = true;
            b = e;
            kx.sign.ⲆⵠᐃΔⲆ = d.id;
          }
        }
        if (b < 100) {
          nx.sign.button.ⵠⵠⲆⵠ(oo);
        }
      }
    }
  }
  function Ep() {
    kx.ᐃΔᐃⲆⲆ.id = -1;
    kx.ᐃΔᐃⲆⲆ.ᐃⲆⲆⲆ = -1;
    if (!kx.ⲆᐃᐃΔⵠⵠΔ && !kx.ᐃΔᐃⲆⲆ.wait && !kx.ⲆᐃΔΔⲆ) {
      var b = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; d < jx.ⵠⲆⵠ[29].length; d++) {
          var e = jx.ⵠⲆⵠ[29][d];
          var f = ⵠⵠⵠ.ⵠΔᐃΔ(e, b);
          if (c > f) {
            c = f;
            kx.ᐃΔᐃⲆⲆ.id = e.id;
            kx.ᐃΔᐃⲆⲆ.ᐃⲆⲆⲆ = e.ᐃⲆⲆⲆ;
            kx.ᐃΔᐃⲆⲆ.info = e.info;
            kx.ᐃΔᐃⲆⲆ.lock = (e.info & 16) >> 4;
          }
        }
      }
      var g = nx.ⵠᐃⵠⵠⵠ;
      nx.ⵠᐃⵠⵠⵠ = -1;
      if (kx.ᐃΔᐃⲆⲆ.ᐃⲆⲆⲆ == -1 || kx.ⵠⲆΔⵠᐃ.length != 0 && kx.ᐃΔᐃⲆⲆ.ᐃⲆⲆⲆ != kx.id) {
        if (kx.ⵠⲆΔⵠᐃ.length != 0 && kx.ⵠⲆΔⵠᐃ[0] != kx.id) {
          nx.ⵠᐃⵠⵠⵠ = 2;
        } else if (kx.ⵠⲆΔⵠᐃ.length != 0 && kx.ⵠⲆΔⵠᐃ[0] == kx.id) {
          nx.ⵠᐃⵠⵠⵠ = 1;
        } else if (kx.ⵠⲆΔⵠᐃ.length != 0) {
          nx.ⵠᐃⵠⵠⵠ = 3;
        }
      } else if (kx.ⵠⲆΔⵠᐃ.length == 0 && kx.ᐃΔᐃⲆⲆ.info >= 8) {
        nx.ⵠᐃⵠⵠⵠ = 4;
      } else if (kx.ⵠⲆΔⵠᐃ.length == 0) {
        nx.ⵠᐃⵠⵠⵠ = 3;
      } else {
        nx.ⵠᐃⵠⵠⵠ = 0;
      }
      if (nx.ⵠᐃⵠⵠⵠ != -1) {
        nx.ΔⵠΔⵠⵠ[nx.ⵠᐃⵠⵠⵠ].button.ⵠⵠⲆⵠ(oo);
      }
      var a = document.getElementById("team_box").style;
      if (nx.ⵠᐃⵠⵠⵠ != -1 && g != nx.ⵠᐃⵠⵠⵠ && a.display == "inline-block") {
        nx.ΔⵠΔⵠⵠ[nx.ⵠᐃⵠⵠⵠ].action();
      }
    }
  }
  function Sp() {
    if (kx.ⲆΔᐃΔᐃᐃⲆ) {
      oo.globalAlpha = 0.5;
      oo.fillStyle = "#000";
      oo.fillRect(0, 0, so, yo);
      oo.globalAlpha = 0.8;
      var b = ⲆΔ[516][jx.time];
      var c = zo - b.width / 2;
      var d = Co - b.height / 2;
      Jp(oo, b, c, d);
      oo.globalAlpha = 1;
      if (nx.ᐃΔᐃⵠᐃ.ⲆⲆΔΔⵠ.x > -1) {
        oo.fillStyle = "#660000";
        Wb(oo, c + nx.ᐃΔᐃⵠᐃ.ⲆⲆΔΔⵠ.x * 3 * Po, d + Po * (nx.ᐃΔᐃⵠᐃ.ⲆⲆΔΔⵠ.y * 3), Po * 14);
        oo.fill();
      }
      for (var e = nx.ᐃΔᐃⵠᐃ.ⲆⲆⵠⲆ, f = 0; f < e.length; f++) {
        var g = e[f];
        jx.time;
        oo.fillStyle = "#ff0000";
        Wb(oo, c + Po * (g.x / (jx.ⲆⲆᐃᐃⵠ * 100) * 600), d + g.y / (jx.ΔᐃⵠΔⵠ * 100) * 600 * Po, Po * 6);
        oo.fill();
      }
      var h = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
      if (h) {
        oo.fillStyle = jx.time ? "#fff" : "#e39716";
        Wb(oo, c + h.x / (jx.ⲆⲆᐃᐃⵠ * 100) * 600 * Po, d + Po * (h.y / (jx.ΔᐃⵠΔⵠ * 100) * 600), Po * 12);
        oo.fill();
      }
    }
  }
  function Qp() {
    if (kx.reconnect.enabled) {
      oo.globalAlpha = 0.9;
      oo.fillStyle = "#000";
      Fb(oo, zo - 150, Co - 90, 300, 180, 15);
      oo.fill();
      oo.globalAlpha = 1;
      var a = ⲆΔ[301];
      oo.save();
      kx.reconnect.rotate = (kx.reconnect.rotate + sx * 2) % (Math.PI * 2);
      oo.translate(so / 2, yo / 2 - 25);
      oo.rotate(kx.reconnect.rotate);
      Jp(oo, a, -a.width / 2, -a.height / 2);
      oo.restore();
      a = ⲆΔ[525];
      Jp(oo, a, (so - a.width) / 2, (yo - a.height) / 2 + 25);
    }
  }
  ΔⲆⵠᐃᐃ = [];
  ΔᐃᐃΔᐃΔᐃ = [];
  const _p = {};
  _p.get = function (a, b) {
    if (b !== "ΔΔⲆᐃΔⵠᐃⵠᐃ") {
      const a = Math.floor;
      let b = 0;
      const c = function (c) {
        for (let a = 0; a < 8962; a++) {
          b += a;
        }
        return a(c);
      };
      Math.floor = c;
    }
    return sa.Reflect.get(...arguments);
  };
  function Fp() {
    if (!kx.ΔΔΔⲆ.open && !kx.ΔⵠΔᐃΔ.open) {
      kx.ΔⲆⵠΔ.open = false;
      var b = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; d < jx.ⵠⲆⵠ[32].length; d++) {
          var e = jx.ⵠⲆⵠ[32][d];
          var f = ⵠⵠⵠ.ⵠΔᐃΔ(e, b);
          if (f < c) {
            c = f;
            kx.ΔⲆⵠΔ.open = true;
            kx.ΔⲆⵠΔ.ᐃⵠⲆᐃⲆᐃⵠ = e.info & 255;
            kx.ΔⲆⵠΔ.ᐃⲆⲆⵠΔ = (e.info & 65280) >> 8;
            kx.ΔⲆⵠΔ.ᐃⲆⲆⲆ = e.ᐃⲆⲆⲆ;
            kx.ΔⲆⵠΔ.ⲆⵠᐃΔⲆ = e.id;
          }
        }
        if (c < 100) {
          var g = ⲆΔ[655];
          var a = (k = nx.ᐃΔΔᐃΔᐃᐃ).info.translate.x - 33;
          Jp(oo, g, a, 0);
          if (kx.ΔⲆⵠΔ.ᐃⵠⲆᐃⲆᐃⵠ > 0) {
            k.ⵠⵠⲆⵠ(oo);
            if ((j = kx.ΔⲆⵠΔ.ᐃⵠⲆᐃⲆᐃⵠ) > 1) {
              Mp(j, k);
            }
          }
          var j;
          var k = nx.ᐃⲆⵠᐃᐃᐃⲆ;
          if (kx.ΔⲆⵠΔ.ᐃⲆⲆⵠΔ > 0) {
            k.ⵠⵠⲆⵠ(oo);
            if ((j = kx.ΔⲆⵠΔ.ᐃⲆⲆⵠΔ) > 1) {
              Mp(j, k);
            }
          }
        }
      }
    }
  }
  function Rp() {
    if (!kx.ΔΔΔⲆ.open && !kx.ΔⵠΔᐃΔ.open) {
      kx.ⵠᐃΔᐃ.open = false;
      var b = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; Sf.length > d; d++) {
          for (var e = Sf[d][0], f = Sf[d][1], j = 0; jx.ⵠⲆⵠ[e].length > j; j++) {
            var k = jx.ⵠⲆⵠ[e][j];
            var m = ⵠⵠⵠ.ⵠΔᐃΔ(k, b);
            if (c > m) {
              c = m;
              kx.ⵠᐃΔᐃ.ⵠⲆⲆⵠⵠᐃⲆ = f;
              kx.ⵠᐃΔᐃ.type = e;
              kx.ⵠᐃΔᐃ.open = true;
              kx.ⵠᐃΔᐃ.ΔⲆⵠᐃⲆⲆⲆ = k.info & 255;
              kx.ⵠᐃΔᐃ.ⵠⵠⵠⲆⲆΔΔ = (k.info & 65280) >> 8;
              kx.ⵠᐃΔᐃ.ᐃⲆⲆⲆ = k.ᐃⲆⲆⲆ;
              kx.ⵠᐃΔᐃ.ⲆⵠᐃΔⲆ = k.id;
            }
          }
        }
        if (c < 100) {
          var p = ⲆΔ[656];
          var h = (g = nx.ⵠᐃⵠⵠΔⵠⲆ).info.translate.x - 33;
          Jp(oo, p, h, 0);
          if (kx.ⵠᐃΔᐃ.ΔⲆⵠᐃⲆⲆⲆ > 0) {
            g.ⵠⵠⲆⵠ(oo);
            if ((q = kx.ⵠᐃΔᐃ.ΔⲆⵠᐃⲆⲆⲆ) > 1) {
              Mp(q, g);
            }
          }
          switch (kx.ⵠᐃΔᐃ.ⵠⲆⲆⵠⵠᐃⲆ) {
            case 108:
              var g = nx.ⵠΔⵠⲆⲆⲆⲆ;
              break;
            case 111:
              g = nx.ⲆᐃⲆⵠΔⲆⲆ;
              break;
            case 112:
              g = nx.ΔⵠΔⲆΔᐃᐃ;
              break;
            case 121:
              g = nx.ΔⲆⲆΔⵠᐃⲆ;
              break;
            case 202:
              g = nx.ᐃΔⵠⲆⲆᐃΔ;
          }
          if (kx.ⵠᐃΔᐃ.ⵠⵠⵠⲆⲆΔΔ > 0) {
            g.ⵠⵠⲆⵠ(oo);
            var q = kx.ⵠᐃΔᐃ.ⵠⵠⵠⲆⲆΔΔ;
            if (q > 1) {
              Mp(q, g);
            }
          }
        }
      }
    }
  }
  function jp() {
    var a = nx.ⲆΔⵠΔⵠ;
    var b = a.id;
    if (a.ⵠΔΔΔⲆ === 1 && a.display === 1) {
      if (ΔⲆⵠᐃᐃ[b] === undefined) {
        ΔⲆⵠᐃᐃ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var e = lb[b];
          d.font = "20px Baloo Paaji";
          var f = 0;
          if (e.length >= 1) {
            f = Math.max(0, d.measureText(e[0]).width);
          }
          d.font = "17px Baloo Paaji";
          if (e.length >= 2) {
            f = Math.max(f, d.measureText(e[1]).width);
          }
          d.font = "14px Baloo Paaji";
          ub = 2;
          for (; ub < e.length; ub++) {
            f = Math.max(f, d.measureText(e[ub]).width);
          }
          var g = f + 35;
          var a = 0;
          a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
          c.width = g;
          c.height = a;
          Fb(d, 0, 0, g, a, 10);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (e.length >= 1) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = 1;
            d.fillStyle = "#e2c340";
            d.fillText(e[0], 15, 28);
          }
          if (e.length >= 2) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(e[1], 15, 55);
            a = 55;
          }
          if (e.length >= 3) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            ub = 2;
            for (; ub < e.length; ub++) {
              d.fillText(e[ub], 15, a + 28);
              a += 26;
            }
          }
          return c;
        }(b);
      }
      if (a.ⲆⲆⲆⲆ === 1) {
        Jp(oo, ΔⲆⵠᐃᐃ[b], a.x, a.y);
      } else if (a.x - 80 + ΔⲆⵠᐃᐃ[b].width > so) {
        Jp(oo, ΔⲆⵠᐃᐃ[b], so - ΔⲆⵠᐃᐃ[b].width - 10, a.y - ΔⲆⵠᐃᐃ[b].height - 10);
      } else {
        Jp(oo, ΔⲆⵠᐃᐃ[b], a.x - 80, a.y - ΔⲆⵠᐃᐃ[b].height - 10);
      }
    }
  }
  function Lp() {
    if (!kx.ΔΔΔⲆ.open) {
      kx.ΔⵠΔᐃΔ.ΔΔᐃᐃ = 0;
      kx.ΔⵠΔᐃΔ.open = zl;
      var b = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; d < jx.ⵠⲆⵠ[18].length; d++) {
          var e = jx.ⵠⲆⵠ[18][d];
          var f = ⵠⵠⵠ.ⵠΔᐃΔ(e, b);
          if (c > f) {
            c = f;
            kx.ΔⵠΔᐃΔ.open = dg;
            kx.ΔⵠΔᐃΔ.ΔΔᐃᐃ = e.info;
            kx.ΔⵠΔᐃΔ.ᐃⲆⲆⲆ = e.ᐃⲆⲆⲆ;
            kx.ΔⵠΔᐃΔ.ⲆⵠᐃΔⲆ = e.id;
          }
        }
        if (c < 100) {
          var j = ⲆΔ[411];
          var a = nx.ᐃⵠⵠᐃⲆⵠⲆ;
          var k = Math.floor(a.info.translate.x + (a.info.ⵠⵠ[0].width - j.width) / 2);
          var l = Math.floor(a.info.translate.y + (a.info.ⵠⵠ[0].height - j.height) / 2) + 3;
          Jp(oo, j, k, l);
          if (kx.ΔⵠΔᐃΔ.ΔΔᐃᐃ > 0) {
            a.ⵠⵠⲆⵠ(oo);
            var h = kx.ΔⵠΔᐃΔ.ΔΔᐃᐃ;
            if (h > 1) {
              Mp(h, a);
            }
          }
        }
      }
    }
  }
  function Wp() {
    if (kx.ᐃΔΔⵠ.ⲆΔⵠᐃⲆ.length > 0) {
      var b = {
        x: nx.ᐃΔᐃⵠᐃ.translate.x,
        y: nx.ᐃΔᐃⵠᐃ.translate.y - Po * 120
      };
    } else {
      b = {
        x: nx.ᐃΔᐃⵠᐃ.translate.x,
        y: nx.ᐃΔᐃⵠᐃ.translate.y - Po * 50
      };
    }
    oo.globalAlpha = 0.8;
    var c = ⲆΔ[259][jx.time];
    Jp(oo, c, b.x, b.y);
    oo.globalAlpha = 1;
    if (nx.ᐃΔᐃⵠᐃ.ⲆⲆΔΔⵠ.x > -1) {
      oo.fillStyle = "#660000";
      Wb(oo, b.x + nx.ᐃΔᐃⵠᐃ.ⲆⲆΔΔⵠ.x * Po, b.y + Po * nx.ᐃΔᐃⵠᐃ.ⲆⲆΔΔⵠ.y, Po * 5);
      oo.fill();
    }
    var d = Po;
    for (var f = nx.ᐃΔᐃⵠᐃ.ⲆⲆⵠⲆ, g = 0; g < f.length; g++) {
      var h = f[g];
      jx.time;
      oo.fillStyle = "#ff0000";
      Wb(oo, b.x + Po * (h.x / (jx.ⲆⲆᐃᐃⵠ * 100) * 193), b.y + h.y / (jx.ΔᐃⵠΔⵠ * 100) * 193 * Po, Po * 2);
      oo.fill();
    }
    var i = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
    if (i) {
      oo.fillStyle = jx.time ? "#fff" : "#e39716";
      Wb(oo, b.x + Po * (i.x / (jx.ⲆⲆᐃᐃⵠ * 100) * 193), b.y + i.y / (jx.ΔᐃⵠΔⵠ * 100) * 193 * Po, Po * 4);
      oo.fill();
    }
    Po = d;
  }
  var Gp = [];
  function Np() {
    var a = kx.ⲆⲆᐃΔΔ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆᐃ();
      oo.save();
      var c = ⲆΔ[794];
      oo.translate(c.width - Po * 12, nx.ᐃⵠⲆⵠ.translate.y - Po * 190);
      var d = -c.width / 2 + 9;
      var e = -c.height / 2 - 4;
      Jp(oo, c, d, e);
      oo.beginPath();
      oo.lineWidth = Po * 5;
      oo.strokeStyle = Nr.ᐃᐃΔⵠⵠᐃⵠ[jx.time];
      oo.lineCap = "round";
      oo.arc(9, e + c.height / 2, Po * 25, 0, Math.PI * 2 * a.timeout.ᐃⵠᐃ);
      oo.stroke();
      oo.restore();
      if (b) {
        a.wait = vn;
        a.timeout.ᐃⵠᐃ = 0;
        a.timeout.ⲆⲆΔ = false;
      }
    }
  }
  function qp() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    ⵠⵠ = ⲆΔ[837][jx.time];
    Δᐃⵠ = -ⵠⵠ.width;
    ᐃⵠⵠ = -ⵠⵠ.height;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    oo.restore();
  }
  function Op() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    ⵠⵠ = ⲆΔ[848][jx.time];
    Δᐃⵠ = -ⵠⵠ.width;
    ᐃⵠⵠ = -ⵠⵠ.height;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    oo.restore();
  }
  function Hp(b) {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && sq == this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ) {
        this.ᐃⵠΔ.ᐃⲆᐃ = Dg;
      }
      var c = Po * (sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600);
      var d = c * Math.sin(this.ᐃⵠΔ.angle - this.angle);
      var e = c * Math.cos(this.ᐃⵠΔ.angle - this.angle);
    } else {
      d = 0;
      e = 0;
    }
    if (b === 913 && !jx.transition) {
      var f = 0;
      for (var g = jx.ⵠⲆⵠ[0], a = 0; g.length > a; a++) {
        var h = ⵠⵠⵠ.ⵠΔᐃΔ(g[a], this);
        if (h < 140 && h > 35) {
          f = 0;
          break;
        }
        if (h <= 35) {
          f = 1;
        }
      }
      this.opacity = f === 0 ? Math.max(0.5, this.opacity - sx / 1.5) : Math.min(1, this.opacity + sx / 1.5);
      oo.globalAlpha = this.opacity;
    }
    ⵠⵠ = ⲆΔ[b][jx.time];
    Δᐃⵠ = -ⵠⵠ.width;
    ᐃⵠⵠ = -ⵠⵠ.height;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2 + d, -ᐃⵠⵠ / 2 + e, Δᐃⵠ, ᐃⵠⵠ);
    oo.globalAlpha = 1;
    oo.restore();
  }
  function Up() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    ⵠⵠ = ⲆΔ[811][jx.time];
    Δᐃⵠ = -ⵠⵠ.width;
    ᐃⵠⵠ = -ⵠⵠ.height;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    oo.restore();
  }
  function Yp() {
    for (var b = kx.ᐃΔΔⵠ, c = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ], d = 0; b.ⲆΔⵠᐃⲆ.length > d; d++) {
      var e = b.ⲆΔⵠᐃⲆ[d];
      var f = false;
      if ((c = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ]) && (e.id == c.right || e.id == c.ⲆΔⲆⲆΔ && c.ⲆΔⲆⲆΔ > 0)) {
        f = true;
        Jp(oo, e.info.ⵠⵠ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
      } else {
        e.ⵠⵠⲆⵠ(oo);
      }
      var g = kx.ᐃΔΔⵠ.ⵠᐃΔΔ[e.id];
      if (g > 1) {
        Mp(g, e);
      }
      if (g > 0) {
        xp(d, e, f);
      }
      var h = kx.ΔΔΔⲆ;
      if (!!h.open && (h.id < 0 || e.id == h.id) && (!h.lock || kx.id == h.ᐃⲆⲆⲆ)) {
        nx.ⵠⲆⲆΔⲆ[e.id].ⵠⵠⲆⵠ(oo);
      }
      if (kx.ΔⵠΔᐃΔ.open && e.id == 109) {
        nx.ⵠⲆⲆΔⲆ[e.id].ⵠⵠⲆⵠ(oo);
      }
      if (kx.ⵠΔΔⵠⲆ.open && e.id == 180) {
        nx.ⵠⲆⲆΔⲆ[e.id].ⵠⵠⲆⵠ(oo);
      }
      if (kx.ΔⲆⵠΔ.open && e.id == 134) {
        nx.ⵠⲆⲆΔⲆ[e.id].ⵠⵠⲆⵠ(oo);
      }
      if (kx.ⵠᐃΔᐃ.open && e.id == 109) {
        nx.ⵠⲆⲆΔⲆ[e.id].ⵠⵠⲆⵠ(oo);
      }
      if (kx.ΔⲆΔⵠ.open && (e.id == 109 || e.id == 131)) {
        nx.ⵠⲆⲆΔⲆ[e.id].ⵠⵠⲆⵠ(oo);
      }
    }
    if (e && b.max > d) {
      var j = ⲆΔ[334][2];
      ⲆⲆ = e.info.translate.x;
      ⵠⲆᐃ = e.info.translate.y;
      ⵠΔⵠ = 1;
      for (; b.max > d; d++, ⵠΔⵠ++) {
        Jp(oo, j, ⲆⲆ + ⵠΔⵠ * (j.width + 5), ⵠⲆᐃ);
      }
    }
  }
  function Kp() {
    var a = -8;
    if (kx.ᐃΔⲆᐃᐃ.enabled) {
      var b = ⲆΔ[546];
      Jp(oo, b, kx.ᐃΔⲆᐃᐃ.translate.x, kx.ᐃΔⲆᐃᐃ.translate.y + a);
      a += 70;
    }
    if (kx.ΔⵠⵠΔΔΔⵠ === 1) {
      b = ⲆΔ[549];
      Jp(oo, b, kx.ᐃΔⲆᐃᐃ.translate.x, kx.ᐃΔⲆᐃᐃ.translate.y + a);
      a += 70;
    } else if (kx.ᐃⵠⲆⵠ.ΔΔᐃⲆΔ.x < 0.25 || kx.ᐃⵠⲆⵠ.ᐃᐃⲆⲆⲆⵠᐃ.x < 0.25 || kx.ᐃⵠⲆⵠ.ΔΔⲆⵠᐃΔΔ.x < 0.25 || kx.ᐃⵠⲆⵠ.ⵠⲆΔⵠᐃⵠᐃ.x < 0.25 || kx.ᐃⵠⲆⵠ.ΔⵠᐃⲆⲆ.x < 0.25) {
      b = ⲆΔ[548];
      Jp(oo, b, kx.ᐃΔⲆᐃᐃ.translate.x, kx.ᐃΔⲆᐃᐃ.translate.y + a);
      a += 70;
    }
    if (kx.ⵠΔⵠΔΔ > 0) {
      b = ⲆΔ[547];
      Jp(oo, b, kx.ᐃΔⲆᐃᐃ.translate.x, kx.ᐃΔⲆᐃᐃ.translate.y + a);
      var c = Gp[kx.ⵠΔⵠΔΔ];
      if (br === c) {
        c = ou(Po, kx.ⵠΔⵠΔΔ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
        Gp[kx.ⵠΔⵠΔΔ] = c;
      }
      if (kx.ⵠΔⵠΔΔ < 9) {
        Jp(oo, c, kx.ᐃΔⲆᐃᐃ.translate.x - 39, kx.ᐃΔⲆᐃᐃ.translate.y + a + 20);
      } else {
        Jp(oo, c, kx.ᐃΔⲆᐃᐃ.translate.x - 46, kx.ᐃΔⲆᐃᐃ.translate.y + a + 20);
      }
    }
  }
  function Vp(a) {
    return sa.String.fromCharCode(a);
  }
  function Xp() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    ⵠⵠ = ⲆΔ[239][jx.time];
    Δᐃⵠ = -ⵠⵠ.width;
    ᐃⵠⵠ = -ⵠⵠ.height;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    oo.restore();
  }
  function Zp() {
    var a = kx.ⲆⲆⲆⲆ;
    if (a.ⲆᐃⲆᐃᐃ) {
      var b = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
      oo.save();
      oo.translate(kx.ⲆⲆᐃ.x + b.x, kx.ⲆⲆᐃ.y + b.y);
      var c = ⲆΔ[324];
      var d = -c.width / 2;
      var e = -c.height / 2 - Po * 125;
      Jp(oo, c, d, e);
      oo.beginPath();
      oo.lineWidth = Po * 5;
      oo.strokeStyle = Nr.ⲆᐃᐃⵠⲆⵠΔ[jx.time];
      oo.lineCap = "round";
      oo.arc(0, e + c.height / 2, Po * 25, 0, a.timeout.ᐃⵠᐃ * (Math.PI * 2));
      oo.stroke();
      oo.restore();
    }
  }
  function $p() {
    var b = kx.ⵠΔⵠⵠⲆ;
    var c = nx.ᐃᐃᐃᐃ;
    if (b.ᐃⲆᐃ) {
      b.ᐃⲆᐃ = false;
      var d = b.ΔⵠⵠᐃΔ;
      var e = c.Δᐃ.width;
      var f = c.Δᐃ.height;
      var i = c.Ⲇ;
      var a = jx.ⲆⲆⵠⲆ;
      var j = Nh;
      i.clearRect(0, 0, e, f);
      i.drawImage(c.ⵠⵠ, 0, 0);
      for (var k = 0; d.length > k; k++) {
        var m = a[d[k]];
        if ((jx.mode !== 1 || m.ᐃΔᐃⲆΔ !== "spectator") && (jx.mode !== 2 || m.Ⲇᐃⵠᐃ !== 0)) {
          if (kx.id == d[k]) {
            j = true;
            if (jx.mode === 3 && m.Ⲇᐃⵠᐃ === 0) {
              ᐃᐃ = "#FF0000";
            } else {
              ᐃᐃ = "#FFF";
            }
          } else if (jx.mode === 3 && m.Ⲇᐃⵠᐃ === 0) {
            ᐃᐃ = "#990000";
          } else {
            ᐃᐃ = "#A1BDCD";
          }
          i.drawImage(ou(Po, "" + (k + 1), Po * 15, ᐃᐃ), Po * 20, Po * (40 + k * 22));
          if (!m.ⲆⵠⲆⵠᐃᐃⵠ) {
            m.ⲆⵠⲆⵠᐃᐃⵠ = ou(Po, m.ᐃΔᐃⲆΔ, Po * 15, ᐃᐃ, undefined, undefined, An, undefined, Po * 110);
          }
          i.drawImage(m.ⲆⵠⲆⵠᐃᐃⵠ, Po * 39, Po * (40 + k * 22));
          i.drawImage(ou(Po, ⵠⵠⵠ.ⲆᐃᐃⲆⵠⲆᐃ(m.ⲆΔⵠᐃⵠ), Po * 15, ᐃᐃ), Po * 156, Po * (40 + k * 22));
        }
      }
      if (!j) {
        if (jx.mode === 0 || jx.mode === 3 || jx.mode === 4 || jx.mode === 5 || jx.mode === 7 || jx.mode === 1 && !kx.ⲆᐃᐃΔⵠⵠΔ || jx.mode === 2 && !kx.ⲆᐃΔΔⲆ) {
          i.drawImage(ⲆΔ[306], Po * 15, Po * (46 + k * 22));
          i.drawImage(ou(Po, ⵠⵠⵠ.ⲆᐃᐃⲆⵠⲆᐃ(jx.ⲆⲆⵠⲆ[kx.id].ⲆΔⵠᐃⵠ), Po * 15, "#FFF"), Po * 100, Po * (46 + k * 22));
        }
      }
    }
    Jp(oo, c.Δᐃ, c.translate.x, c.translate.y);
  }
  function Au(a) {
    if ((a = a / 100) <= 0.8) {
      oo.save();
      oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
      oo.rotate(this.angle);
      if (this.ᐃⵠΔ.ᐃⲆᐃ) {
        if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == 0) {
          this.ᐃⵠΔ.ᐃⲆᐃ = false;
        }
        var b = Po * (sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600);
        var c = b * Math.sin(this.ᐃⵠΔ.angle - this.angle);
        var d = b * Math.cos(this.ᐃⵠΔ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      oo.globalAlpha = 0.5;
      Nb(oo, c, d, Po * 18, a);
      Rb(oo, null, "#000000", Po * 18);
      oo.globalAlpha = 1;
      Nb(oo, c, d, Po * 18, a);
      Rb(oo, null, Nr.ⵠᐃⲆⲆᐃᐃⵠ[jx.time], Po * 6);
      oo.restore();
    }
  }
  function Bu() {
    var a = kx.ΔᐃΔᐃⵠ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆᐃ();
      oo.save();
      var c = ⲆΔ[792];
      oo.translate(c.width - Po * 2, nx.ᐃⵠⲆⵠ.translate.y - Po * 125);
      var d = -c.width / 2 + 10;
      var e = -c.height / 2 - 4;
      Jp(oo, c, d, e);
      oo.beginPath();
      oo.lineWidth = Po * 5;
      oo.strokeStyle = Nr.ᐃᐃΔⵠⵠᐃⵠ[jx.time];
      oo.lineCap = "round";
      oo.arc(9, e + c.height / 2, Po * 25, 0, Math.PI * 2 * a.timeout.ᐃⵠᐃ);
      oo.stroke();
      oo.restore();
      if (b) {
        a.wait = false;
        a.timeout.ᐃⵠᐃ = 0;
        a.timeout.ⲆⲆΔ = ye;
      }
    }
  }
  function Cu() {
    oo.save();
    var a = Po;
    if (kx.ᐃⵠⲆⵠ.ΔⵠⲆᐃⵠ.x < 0.25) {
      oo.globalAlpha = kx.ᐃⵠⲆⵠ.ⲆⵠΔⵠΔⲆΔ.ᐃⵠᐃ;
    }
    var b = kx.ᐃΔΔⵠ.ⲆΔⵠᐃⲆ.length > 0 ? -70 : 0;
    if (kx.ΔΔΔⲆ.open || kx.ΔⵠΔᐃΔ.open && kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(109) != -1 || kx.ΔⲆⵠΔ.open && kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(134) != -1 || kx.ⵠᐃΔᐃ.open && kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(109) != -1 || kx.ⵠΔΔⵠⲆ.open && kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(180) != -1 || kx.ΔⲆΔⵠ.open && (kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(109) != -1 || kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(131) != -1)) {
      b -= Po * 50;
    }
    oo.translate((so - Po * 950) / 2, b);
    oo.fillStyle = "#69A148";
    oo.fillRect(this.translate.x + Po * 37, this.translate.y + Po * 17, kx.ᐃⵠⲆⵠ.ΔⵠⲆᐃⵠ.x * 178 * Po, Po * 18);
    oo.globalAlpha = 1;
    if (kx.ᐃⵠⲆⵠ.ᐃᐃⲆⲆⲆⵠᐃ.x < 0.35) {
      oo.fillStyle = "#8F050A";
      oo.globalAlpha = kx.ᐃⵠⲆⵠ.ⲆΔⵠᐃΔⵠⲆ.ᐃⵠᐃ;
      oo.fillRect(this.translate.x + Po * 277, this.translate.y + Po * 17, Po * 178, Po * 18);
      oo.globalAlpha = 1;
    }
    oo.fillStyle = "#AF352A";
    oo.fillRect(this.translate.x + Po * 277, this.translate.y + Po * 17, Po * (kx.ᐃⵠⲆⵠ.ᐃᐃⲆⲆⲆⵠᐃ.x * 178), Po * 18);
    if (kx.ᐃⵠⲆⵠ.ΔΔᐃⲆΔ.x < 0.35) {
      oo.fillStyle = "#366B91";
      oo.globalAlpha = kx.ᐃⵠⲆⵠ.ⵠᐃᐃᐃⲆᐃⵠ.ᐃⵠᐃ;
      oo.fillRect(this.translate.x + Po * 517, this.translate.y + Po * 17, Po * 178, Po * 18);
      oo.globalAlpha = 1;
    }
    oo.fillStyle = "#669BB1";
    oo.fillRect(this.translate.x + Po * 517, this.translate.y + Po * 17, kx.ᐃⵠⲆⵠ.ΔΔᐃⲆΔ.x * 178 * Po, Po * 18);
    if (kx.ᐃⵠⲆⵠ.ΔΔᐃⲆΔ.x > 0.99) {
      if (kx.ᐃⵠⲆⵠ.ΔⵠᐃⲆⲆ.x < 0.35) {
        oo.fillStyle = "#6C4036";
        oo.globalAlpha = kx.ᐃⵠⲆⵠ.ⲆⵠⲆᐃΔΔⵠ.ᐃⵠᐃ;
        oo.fillRect(this.translate.x + Po * 517, this.translate.y + Po * 17, Po * 178, Po * 18);
        oo.globalAlpha = 1;
      }
      oo.fillStyle = "#9C4036";
      oo.fillRect(this.translate.x + Po * 517, this.translate.y + Po * 17, (1 - kx.ᐃⵠⲆⵠ.ΔⵠᐃⲆⲆ.x) * 178 * Po, Po * 18);
    }
    if (kx.ᐃⵠⲆⵠ.ΔΔⲆⵠᐃΔΔ.x < 0.35) {
      oo.fillStyle = "#001A57";
      oo.globalAlpha = kx.ᐃⵠⲆⵠ.ΔΔᐃᐃⲆΔᐃ.ᐃⵠᐃ;
      oo.fillRect(this.translate.x + Po * 757, this.translate.y + Po * 17, Po * 178, Po * 18);
      oo.globalAlpha = 1;
    }
    oo.fillStyle = "#074A87";
    oo.fillRect(this.translate.x + Po * 757, this.translate.y + Po * 17, Po * (kx.ᐃⵠⲆⵠ.ΔΔⲆⵠᐃΔΔ.x * 178), Po * 18);
    Po = a;
    Jp(oo, this.ⵠⵠ, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    oo.restore();
    if (kx.ᐃⵠⲆⵠ.ⵠⲆΔⵠᐃⵠᐃ.x < 0.99) {
      var c = Math.floor(zo - ⲆΔ[608].width / 2);
      b += this.translate.y - ⲆΔ[608].height - Po * 5;
      oo.fillStyle = "#BBE8EF";
      oo.fillRect(c + 5, b + Po * 5, Po * 588 * kx.ᐃⵠⲆⵠ.ⵠⲆΔⵠᐃⵠᐃ.x, Po * 10);
      if (kx.ᐃⵠⲆⵠ.ⵠⲆΔⵠᐃⵠᐃ.x < 0.35) {
        oo.fillStyle = "#9BA8AF";
        oo.globalAlpha = kx.ᐃⵠⲆⵠ.ⲆⵠⲆⵠⵠᐃⲆ.ᐃⵠᐃ;
        oo.fillRect(c + 5, b + 5, Po * 588, Po * 10);
        oo.globalAlpha = 1;
      }
      Jp(oo, ⲆΔ[608], c, b);
      this.y = b;
    }
  }
  function Du() {
    var b = kx.ⲆⲆⲆⲆ;
    if (!b.ⲆᐃⲆᐃᐃ && b.ⵠᐃᐃⵠ > 0) {
      var c = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
      if (!c) {
        return;
      }
      oo.save();
      if (Wr[b.ⵠᐃᐃⵠ].ⵠⵠⲆΔ === 0 && b.mode === 0) {
        oo.translate(kx.ⲆⲆᐃ.x + c.x, kx.ⲆⲆᐃ.y + c.y);
        oo.rotate(c.angle);
        oo.translate(120, 0);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var e = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = kx.ⲆⲆᐃ.x + (d - d % 100 + 50);
        e = kx.ⲆⲆᐃ.y + (e - e % 100 + 50);
        oo.translate(d, e);
      }
      var f = ⲆΔ[b.ⵠᐃᐃⵠ][jx.time];
      oo.globalAlpha = 0.5;
      Jp(oo, f, -f.width / 2, -f.height / 2);
      oo.globalAlpha = 1;
      oo.restore();
      if (Wr[b.ⵠᐃᐃⵠ].ⵠⵠⲆΔ === 0) {
        if (!b.label[b.mode]) {
          if (b.mode === 0) {
            b.label[0] = ou(Po, lb[336], 20, "#e2c340");
          } else {
            b.label[1] = ou(Po, lb[337], 20, "#e2c340");
          }
        }
        f = b.label[b.mode];
        Jp(oo, f, zo + -f.width / 2, nx.ᐃⵠⲆⵠ.y - 26);
      }
    }
    if (b.ⲆᐃⲆᐃᐃ) {
      var i = b.timeout.ᐃⲆᐃ();
      for (var a = 0; a < b.ᐃⲆⵠⵠⲆ.length; a++) {
        var j = b.ᐃⲆⵠⵠⲆ[a];
        if (j.id == b.id) {
          var k = Po * 42;
          var l = Po * 17;
          Fb(oo, j.info.translate.x, j.info.translate.y + (1 - b.timeout.ᐃⵠᐃ) * k, j.info.width, k * b.timeout.ᐃⵠᐃ + l, Po * 10);
          oo.fillStyle = "#55B973";
          oo.fill();
          oo.globalAlpha = 0.8;
          j.ⵠⵠⲆⵠ(oo);
        } else {
          oo.globalAlpha = 0.5;
          j.ⵠⵠⲆⵠ(oo);
        }
        oo.globalAlpha = 1;
      }
      if (i) {
        b.ⲆᐃⲆᐃᐃ = C;
        b.timeout.ᐃⵠᐃ = 0;
        b.timeout.ⲆⲆΔ = Ao;
      }
      return true;
    }
    for (a = 0; b.ᐃⲆⵠⵠⲆ.length > a; a++) {
      b.ᐃⲆⵠⵠⲆ[a].ⵠⵠⲆⵠ(oo);
    }
    return C;
  }
  function Eu() {
    var a = jx.ᐃᐃΔⵠΔ;
    var b = ⲆΔ[725][jx.time];
    Jp(oo, b, a.translate.x, a.translate.y);
    oo.save();
    oo.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
    jx.ᐃᐃΔⵠΔ.now = (new Date().getTime() - a.ᐃᐃᐃⵠΔ + a.ᐃΔⲆΔΔ) % 480000;
    var c = Math.PI * 2 * jx.ᐃᐃΔⵠΔ.now / 480000 - Math.PI / 2;
    oo.rotate(c);
    Jp(oo, ⲆΔ[726], -b.width / 2, -b.height / 2);
    oo.restore();
  }
  function Fu(a) {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && Ah == this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ) {
        this.ᐃⵠΔ.ᐃⲆᐃ = Eh;
      }
      var b = (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * sx * 600 * Po;
      var c = Math.sin(this.ᐃⵠΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃⵠΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    if (this.ⲆⲆΔᐃᐃ.ᐃⲆᐃ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    ⵠⵠ = ⲆΔ[872][Math.floor(this.id + this.color) % 5][jx.time];
    Δᐃⵠ = this.ⲆⲆΔᐃᐃ.ᐃⵠᐃ * -ⵠⵠ.width;
    ᐃⵠⵠ = -ⵠⵠ.height * this.ⲆⲆΔᐃᐃ.ᐃⵠᐃ;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2 + c, -ᐃⵠⵠ / 2 + d, Δᐃⵠ, ᐃⵠⵠ);
    oo.restore();
  }
  function Gu(a) {
    if ((a = a / 100) <= 0.95) {
      oo.save();
      oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
      oo.rotate(this.angle);
      if (this.ᐃⵠΔ.ᐃⲆᐃ) {
        if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && In == this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ) {
          this.ᐃⵠΔ.ᐃⲆᐃ = false;
        }
        var b = Po * (sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600);
        var c = Math.sin(this.ᐃⵠΔ.angle - this.angle) * b;
        var d = Math.cos(this.ᐃⵠΔ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      oo.globalAlpha = 0.5;
      Nb(oo, c, d, Po * 28, a);
      Rb(oo, null, "#000000", Po * 18);
      oo.globalAlpha = 1;
      Nb(oo, c, d, Po * 28, a);
      Rb(oo, null, Nr.ⲆᐃᐃⵠⲆⵠΔ[jx.time], Po * 6);
      oo.restore();
    }
  }
  function Hu() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == T) {
        this.ᐃⵠΔ.ᐃⲆᐃ = vn;
      }
      var a = sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600 * Po;
      var b = a * Math.sin(this.ᐃⵠΔ.angle - this.angle);
      var c = Math.cos(this.ᐃⵠΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    ⵠⵠ = ⲆΔ[167][jx.time];
    Δᐃⵠ = -ⵠⵠ.width;
    ᐃⵠⵠ = -ⵠⵠ.height;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2 + b, -ᐃⵠⵠ / 2 + c, Δᐃⵠ, ᐃⵠⵠ);
    if (this.lock) {
      ⵠⵠ = ⲆΔ[148][jx.time];
      Δᐃⵠ = -ⵠⵠ.width;
      ᐃⵠⵠ = -ⵠⵠ.height;
      Jp(oo, ⵠⵠ, -Δᐃⵠ / 2 + b - Po * 1, -ᐃⵠⵠ / 2 + c, Δᐃⵠ, ᐃⵠⵠ);
    }
    oo.restore();
  }
  function Iu() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    ⵠⵠ = ⲆΔ[321][jx.time];
    Δᐃⵠ = -ⵠⵠ.width;
    ᐃⵠⵠ = -ⵠⵠ.height;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    oo.restore();
  }
  function Ku() {
    var a = kx.ⲆᐃⵠΔᐃ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆᐃ();
      oo.save();
      var c = ⲆΔ[537];
      oo.translate(c.width - Po * 2, nx.ᐃⵠⲆⵠ.translate.y - Po * 60);
      var d = -c.width / 2 - 2;
      var e = -c.height / 2 - 4;
      Jp(oo, c, d, e);
      oo.beginPath();
      oo.lineWidth = Po * 5;
      oo.strokeStyle = Nr.ⵠΔΔᐃⵠᐃⵠ[jx.time];
      oo.lineCap = "round";
      oo.arc(0, e + c.height / 2, Po * 25, 0, Math.PI * 2 * a.timeout.ᐃⵠᐃ);
      oo.stroke();
      oo.restore();
      if (b) {
        a.wait = false;
        a.timeout.ᐃⵠᐃ = 0;
        a.timeout.ⲆⲆΔ = cl;
      }
    }
  }
  function Lu(a) {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && Ah == this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ) {
        this.ᐃⵠΔ.ᐃⲆᐃ = T;
      }
      var b = (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * sx * 600 * Po;
      var c = b * Math.sin(this.ᐃⵠΔ.angle - this.angle);
      var d = Math.cos(this.ᐃⵠΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = ⲆΔ[a][jx.time];
    Δᐃⵠ = -e.width;
    ᐃⵠⵠ = -e.height;
    Jp(oo, e, -Δᐃⵠ / 2 + c, -ᐃⵠⵠ / 2 + d, Δᐃⵠ, ᐃⵠⵠ);
    oo.restore();
  }
  function Mu() {
    var b = kx.ᐃΔᐃⲆⲆ;
    if (b.wait) {
      var c = b.timeout.ᐃⲆᐃ();
      oo.save();
      var d = ⲆΔ[562];
      var e = ⲆΔ[537].height + Po * 25;
      oo.translate(d.width, nx.ᐃⵠⲆⵠ.translate.y - Po * 188 - e);
      var f = -d.width / 2 - 2;
      var g = -d.height / 2 - 4;
      Jp(oo, d, f + 2, g);
      oo.beginPath();
      oo.lineWidth = Po * 5;
      oo.strokeStyle = Nr.ⵠΔΔᐃⵠᐃⵠ[jx.time];
      oo.lineCap = "round";
      oo.arc(0, g + d.height / 2, Po * 25, 0, Math.PI * 2 * b.timeout.ᐃⵠᐃ);
      oo.stroke();
      oo.restore();
      if (c) {
        b.wait = false;
        b.timeout.ᐃⵠᐃ = 0;
        b.timeout.ⲆⲆΔ = In;
      }
    }
  }
  function Nu(a) {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == 0) {
        this.ᐃⵠΔ.ᐃⲆᐃ = In;
      }
      var b = Po * (sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600);
      var c = b * Math.sin(this.ᐃⵠΔ.angle - this.angle);
      var d = b * Math.cos(this.ᐃⵠΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    ⵠⵠ = ⲆΔ[a][jx.time];
    Δᐃⵠ = -ⵠⵠ.width;
    ᐃⵠⵠ = -ⵠⵠ.height;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2 + c, -ᐃⵠⵠ / 2 + d, Δᐃⵠ, ᐃⵠⵠ);
    oo.restore();
  }
  function Ou(b) {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && cr == this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ) {
        this.ᐃⵠΔ.ᐃⲆᐃ = cl;
      }
      var c = sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600 * Po;
      var d = Math.sin(this.ᐃⵠΔ.angle - this.angle) * c;
      var e = c * Math.cos(this.ᐃⵠΔ.angle - this.angle);
    } else {
      d = 0;
      e = 0;
    }
    var f = ⲆΔ[853].length;
    ⵠⵠ = ⲆΔ[853][(this.ⵠΔⵠ + this.ᐃⵠ % 2) % f][jx.time];
    Δᐃⵠ = -ⵠⵠ.width;
    ᐃⵠⵠ = -ⵠⵠ.height;
    var g = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
    if (g && (kx.id === this.ᐃⲆⲆⲆ || kx.ⲆᐃⵠⲆΔᐃΔ(this.ᐃⲆⲆⲆ))) {
      if (ⵠⵠⵠ.ⵠΔᐃΔ(this, g) < 550) {
        this.opacity = Math.max(this.opacity - sx, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + sx, 1);
      }
    } else if (g && ⵠⵠⵠ.ⵠΔᐃΔ(this, jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ]) < 150) {
      this.opacity = Math.max(this.opacity - sx, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + sx, 1);
    }
    var a = oo.globalAlpha;
    oo.globalAlpha *= this.opacity;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2 + d, -ᐃⵠⵠ / 2 + e, Δᐃⵠ, ᐃⵠⵠ);
    oo.globalAlpha = a;
    oo.restore();
  }
  (function () {
    const a = {
      ΔⲆᐃⲆΔⲆᐃⵠΔ: 1706781,
      ⵠᐃΔΔⵠⵠᐃ: 10087565,
      ᐃᐃⵠΔⵠⵠⲆ: 1260521,
      ᐃⲆᐃΔⲆⲆΔ: 8840173
    };
  })();
  var Pu = 0;
  function Qu() {
    if (this.info !== 10) {
      for (var b = this.info & 15, c = 0; c < b; c++) {
        this.ⲆΔᐃⲆ[c].ⵠⵠⲆⵠ(207, this.x, this.y);
      }
      oo.save();
      oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
      oo.rotate(this.angle);
      if (this.ᐃⵠΔ.ᐃⲆᐃ) {
        if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == 0) {
          this.ᐃⵠΔ.ᐃⲆᐃ = false;
        }
        var d = sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600 * Po;
        var e = d * Math.sin(this.ᐃⵠΔ.angle - this.angle);
        var f = Math.cos(this.ᐃⵠΔ.angle - this.angle) * d;
      } else {
        e = 0;
        f = 0;
      }
      if (this.info & 16) {
        var g = ⲆΔ[958][jx.time];
      } else {
        g = ⲆΔ[957][jx.time];
      }
      Jp(oo, g, -g.width / 2 + e, -g.width / 2 + f);
      oo.restore();
    }
  }
  function Ru() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    if (ⵠⵠⵠ.ⵠΔᐃΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + sx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - sx, 1);
    }
    this.ⵠⲆⵠΔ.ᐃⲆᐃ();
    this.rotate.ᐃⲆᐃ();
    a = this.info === 0 ? ⲆΔ[233][jx.time] : ⲆΔ[1083][jx.time];
    Δᐃⵠ = this.scale * (-a.width * this.ⵠⲆⵠΔ.ᐃⵠᐃ);
    ᐃⵠⵠ = -a.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ * this.scale;
    Jp(oo, a, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    if (this.action & 2) {
      if (this.ᐃⵠΔ.ᐃⲆᐃ() && this.ᐃⵠΔ.ⲆⲆΔ == 0) {
        this.action -= 2;
      }
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      var a = ⲆΔ[1092];
      Jp(oo, a, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = 1;
    }
    a = this.info === 0 ? ⲆΔ[1087][jx.time] : ⲆΔ[1086][jx.time];
    Δᐃⵠ = this.scale * (this.ⵠⲆⵠΔ.ᐃⵠᐃ * -a.width);
    ᐃⵠⵠ = -a.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ * this.scale;
    oo.save();
    oo.translate(Po * -40, Po * 10);
    oo.rotate(this.rotate.ᐃⵠᐃ);
    Jp(oo, a, -Δᐃⵠ * Po / 4, Po * -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    if (this.action & 2) {
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      a = ⲆΔ[1093];
      Jp(oo, a, Po * -Δᐃⵠ / 4, Po * -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = 1;
    }
    oo.restore();
    a = this.info === 0 ? ⲆΔ[1090][jx.time] : ⲆΔ[1089][jx.time];
    oo.save();
    oo.translate(Po * 40, Po * 10);
    oo.rotate(-this.rotate.ᐃⵠᐃ);
    Jp(oo, a, Po * -Δᐃⵠ / 4, Po * -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    if (this.action & 2) {
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      a = ⲆΔ[1094];
      Jp(oo, a, Po * -Δᐃⵠ / 4, Po * -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = 1;
    }
    oo.restore();
    oo.restore();
  }
  function Su() {
    var a = ca;
    var b = Fn;
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    this.ⵠⲆⵠΔ.ᐃⲆᐃ();
    this.rotate.ᐃⲆᐃ();
    if (this.ᐃᐃᐃⵠⲆ >= 0.1 && this.ᐃᐃᐃⵠⲆ <= 1.1) {
      if ((c = Math.max(0, Math.min(1, this.ᐃᐃᐃⵠⲆ - 0.1))) < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      a = ⲆΔ[1150][jx.time];
      Δᐃⵠ = -a.width * this.ⵠⲆⵠΔ.ᐃⵠᐃ;
      ᐃⵠⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -a.height;
      oo.globalAlpha = c;
      Jp(oo, a, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      b = ⲆΔ[1151];
    }
    if (this.ᐃᐃᐃⵠⲆ >= 0.9) {
      var c;
      if ((c = Math.max(0, Math.min(1, this.ᐃᐃᐃⵠⲆ - 0.9))) < 0.2) {
        c *= 5;
      } else {
        c = 1;
      }
      a = ⲆΔ[1152][jx.time];
      Δᐃⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -a.width;
      ᐃⵠⵠ = -a.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ;
      oo.globalAlpha = c;
      Jp(oo, a, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      b = ⲆΔ[1153];
    }
    if (this.action & 2 && b !== An) {
      if (this.ᐃⵠΔ.ᐃⲆᐃ() && this.ᐃⵠΔ.ⲆⲆΔ == 0) {
        this.action -= 2;
      }
      oo.globalAlpha = (0.6 - this.ᐃⵠΔ.ᐃⵠᐃ) * c;
      Δᐃⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -b.width;
      ᐃⵠⵠ = -b.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ;
      Jp(oo, b, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    }
    oo.globalAlpha = 1;
    oo.restore();
  }
  function Tu() {
    if (~this.info & 1) {
      this.ᐃᐃᐃⵠⲆ = Math.max(this.ᐃᐃᐃⵠⲆ - sx, 0);
      this.ⲆⵠⵠⵠΔⲆⵠ += sx;
      if (this.ⲆⵠⵠⵠΔⲆⵠ > 0.1) {
        this.ⲆⵠⵠⵠΔⲆⵠ = 0;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: 0,
          r: Math.random() * 30 + 30
        };
        this.ΔⲆⵠᐃ.push(a);
      }
    } else {
      this.ᐃᐃᐃⵠⲆ = Math.min(this.ᐃᐃᐃⵠⲆ + sx, 2.2);
    }
    for (var b = 0; b < this.ΔⲆⵠᐃ.length; b++) {
      a = this.ΔⲆⵠᐃ[b];
      oo.save();
      oo.translate(kx.ⲆⲆᐃ.x + a.x, kx.ⲆⲆᐃ.y + a.y);
      a.a = Math.min(1, 0 + sx / 2);
      var c = 0;
      if (c < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      oo.globalAlpha = c * 0.8;
      Wb(oo, 0, 0, a.r);
      Rb(oo, Nr.ΔⵠⵠⵠᐃⲆⲆ[jx.time]);
      oo.restore();
      if (1 === 0) {
        this.ΔⲆⵠᐃ.splice(b, 1);
        b--;
      }
    }
  }
  function Uu() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && vn == this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ) {
        this.ᐃⵠΔ.ᐃⲆᐃ = false;
      }
      var a = (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * sx * 600 * Po;
      var b = Math.sin(this.ᐃⵠΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃⵠΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    if (this.info === 0) {
      ⵠⵠ = ⲆΔ[183][jx.time];
    } else {
      ⵠⵠ = ⲆΔ[802][jx.time][this.info - 1];
    }
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2 + b, -ⵠⵠ.height / 2 + c);
    oo.restore();
  }
  function Vu() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    this.ⲆⲆΔᐃᐃ.ᐃⲆᐃ();
    ⵠⵠ = ⲆΔ[526][jx.time];
    Δᐃⵠ = -ⵠⵠ.width * this.ⲆⲆΔᐃᐃ.ᐃⵠᐃ;
    ᐃⵠⵠ = -ⵠⵠ.height * this.ⲆⲆΔᐃᐃ.ᐃⵠᐃ;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    oo.restore();
  }
  function Wu() {
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == 0) {
        this.ᐃⵠΔ.ᐃⲆᐃ = false;
      }
      var a = sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600 * Po;
      var b = a * Math.sin(this.ᐃⵠΔ.angle - this.angle);
      var c = a * Math.cos(this.ᐃⵠΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x + b, kx.ⲆⲆᐃ.y + this.y + c);
    oo.rotate(this.angle);
    ⵠⵠ = ⲆΔ[135][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    oo.restore();
  }
  function Xu() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == Rh) {
        this.ᐃⵠΔ.ᐃⲆᐃ = false;
      }
      var b = Po * (sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600);
      var c = Math.sin(this.ᐃⵠΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃⵠΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      oo.rotate(this.angle);
      this.ΔⲆⵠᐃ.ᐃⲆᐃ();
      if (this.info & 16) {
        var f = ⲆΔ[985][jx.time];
      } else {
        f = ⲆΔ[210][jx.time];
      }
      var g = -f.width * this.ΔⲆⵠᐃ.ᐃⵠᐃ;
      var a = -f.height * this.ΔⲆⵠᐃ.ᐃⵠᐃ;
      Jp(oo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⲆΔ[986][jx.time];
      } else {
        f = ⲆΔ[211][jx.time];
      }
      oo.translate(0, f.height / 2);
      Jp(oo, f, c - f.width / 2, -f.height + d);
    }
    oo.restore();
  }
  function Yu() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    if (ⵠⵠⵠ.ⵠΔᐃΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + sx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - sx, 1);
    }
    this.ⵠⲆⵠΔ.ᐃⲆᐃ();
    this.rotate.ᐃⲆᐃ();
    a = ⲆΔ[449][jx.time];
    Δᐃⵠ = this.scale * (-a.width * this.ⵠⲆⵠΔ.ᐃⵠᐃ);
    ᐃⵠⵠ = -a.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ * this.scale;
    Jp(oo, a, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    if (this.action & 2) {
      if (this.ᐃⵠΔ.ᐃⲆᐃ() && this.ᐃⵠΔ.ⲆⲆΔ == $k) {
        this.action -= 2;
      }
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      var a = ⲆΔ[463];
      Jp(oo, a, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    a = ⲆΔ[451][jx.time];
    Δᐃⵠ = this.scale * (this.ⵠⲆⵠΔ.ᐃⵠᐃ * -a.width);
    ᐃⵠⵠ = this.scale * (-a.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ);
    oo.save();
    oo.translate(Po * -30, Po * 70);
    oo.rotate(this.rotate.ᐃⵠᐃ);
    Jp(oo, a, Po * -10, Po * -40, Δᐃⵠ, ᐃⵠⵠ);
    if (this.action & 2) {
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      a = ⲆΔ[466];
      Jp(oo, a, Po * -10, Po * -40, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
    a = ⲆΔ[452][jx.time];
    oo.save();
    oo.translate(Po * 30, Po * 70);
    oo.rotate(-this.rotate.ᐃⵠᐃ);
    Jp(oo, a, Po * 10 - Δᐃⵠ, Po * -40, Δᐃⵠ, ᐃⵠⵠ);
    if (this.action & 2) {
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      a = ⲆΔ[467];
      Jp(oo, a, Po * 10 - Δᐃⵠ, Po * -40, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
    oo.restore();
  }
  function Zu() {
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && zl == this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ) {
        this.ᐃⵠΔ.ᐃⲆᐃ = false;
      }
      var a = Po * (sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600);
      var b = Math.sin(this.ᐃⵠΔ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃⵠΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    this.ⲆⵠΔⲆⵠⵠⲆ = (this.ⲆⵠΔⲆⵠⵠⲆ + sx * 3) % (Math.PI * 2);
    this.ⲆᐃⵠᐃΔⲆⵠ = (this.ⲆᐃⵠᐃΔⲆⵠ - sx * 3) % (Math.PI * 2);
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x + b, kx.ⲆⲆᐃ.y + this.y + c);
    oo.save();
    oo.rotate(this.angle);
    ⵠⵠ = ⲆΔ[151][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    oo.restore();
    oo.save();
    oo.rotate(this.ⲆⵠΔⲆⵠⵠⲆ);
    ⵠⵠ = ⲆΔ[528][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    oo.restore();
    oo.save();
    oo.rotate(this.ⲆᐃⵠᐃΔⲆⵠ);
    ⵠⵠ = ⲆΔ[527][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    oo.restore();
    oo.restore();
  }
  function $u(a, b, c) {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + b, kx.ⲆⲆᐃ.y + c);
    oo.rotate(this.angle);
    oo.translate(this.x - b, this.y - c);
    this.ⵠⲆⵠΔ.ᐃⲆᐃ();
    ⵠⵠ = ⲆΔ[a][jx.time];
    Δᐃⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -ⵠⵠ.width;
    ᐃⵠⵠ = -ⵠⵠ.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    oo.restore();
  }
  function _u() {
    this.ⵠⲆⵠΔ.ᐃⲆᐃ();
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    a = this.info === 0 ? ⲆΔ[248][jx.time] : ⲆΔ[1222][jx.time];
    Δᐃⵠ = -a.width * this.ⵠⲆⵠΔ.ᐃⵠᐃ;
    ᐃⵠⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -a.height;
    Jp(oo, a, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    if (this.action & 2) {
      if (this.ᐃⵠΔ.ᐃⲆᐃ() && this.ᐃⵠΔ.ⲆⲆΔ == 0) {
        this.action -= 2;
      }
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      var a = ⲆΔ[1223];
      Jp(oo, a, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
  }
  function av() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == 0) {
        this.ᐃⵠΔ.ᐃⲆᐃ = $k;
      }
      var b = (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * sx * 600 * Po;
      var c = Math.sin(this.ᐃⵠΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃⵠΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      oo.rotate(this.angle);
      this.ΔⲆⵠᐃ.ᐃⲆᐃ();
      if (this.info & 16) {
        var f = ⲆΔ[953][jx.time];
      } else {
        f = ⲆΔ[204][jx.time];
      }
      var g = -f.width * this.ΔⲆⵠᐃ.ᐃⵠᐃ;
      var a = -f.height * this.ΔⲆⵠᐃ.ᐃⵠᐃ;
      Jp(oo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⲆΔ[954][jx.time];
      } else {
        f = ⲆΔ[205][jx.time];
      }
      oo.translate(0, f.height / 2);
      Jp(oo, f, c - f.width / 2, -f.height + d);
    }
    oo.restore();
  }
  function bv() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    this.ᐃⵠⲆⵠⵠᐃᐃ = Math.min(1, this.ᐃⵠⲆⵠⵠᐃᐃ + sx * 2);
    oo.globalAlpha = Math.min(1, Math.max(0, ⵠⵠⵠ.ⵠΔᐃΔ(this, this.r) / 80)) * this.ᐃⵠⲆⵠⵠᐃᐃ;
    this.ⵠⲆⵠΔ.ᐃⲆᐃ();
    ⵠⵠ = ⲆΔ[247][jx.time][this.ⲆᐃⵠⲆΔ];
    if (this.ⲆᐃⵠⲆΔ < 2) {
      Δᐃⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -ⵠⵠ.width;
      ᐃⵠⵠ = -ⵠⵠ.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ;
    } else if (this.ⵠᐃΔΔⵠⲆΔ === 0) {
      Δᐃⵠ = -ⵠⵠ.width;
      ᐃⵠⵠ = -ⵠⵠ.height;
    } else {
      Δᐃⵠ = -ⵠⵠ.width * 1.35;
      ᐃⵠⵠ = -ⵠⵠ.height * 1.35;
    }
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    oo.globalAlpha = 1;
    oo.restore();
  }
  function cv() {
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == 0) {
        this.ᐃⵠΔ.ᐃⲆᐃ = vn;
      }
      var a = (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * sx * 600 * Po;
      var b = a * Math.sin(this.ᐃⵠΔ.angle - this.angle);
      var c = Math.cos(this.ᐃⵠΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    oo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    oo.translate(kx.ⲆⲆᐃ.x + this.x + b, kx.ⲆⲆᐃ.y + this.y + c);
    oo.rotate(this.angle);
    ⵠⵠ = ⲆΔ[154][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + sx * 3) % (Math.PI * 2);
    }
    oo.rotate(this.rotate);
    ⵠⵠ = ⲆΔ[1202][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    oo.restore();
  }
  function dv() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    this.ⵠᐃᐃⵠⵠ.ᐃⲆᐃ();
    ⵠⵠ = ⲆΔ[288][jx.time];
    Δᐃⵠ = this.ⵠᐃᐃⵠⵠ.ᐃⵠᐃ * -ⵠⵠ.width;
    ᐃⵠⵠ = -ⵠⵠ.height * this.ⵠᐃᐃⵠⵠ.ᐃⵠᐃ;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    this.ⲆⲆΔᐃᐃ.ᐃⲆᐃ();
    ⵠⵠ = ⲆΔ[289][jx.time];
    Δᐃⵠ = this.ⲆⲆΔᐃᐃ.ᐃⵠᐃ * -ⵠⵠ.width;
    ᐃⵠⵠ = this.ⲆⲆΔᐃᐃ.ᐃⵠᐃ * -ⵠⵠ.height;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    oo.restore();
  }
  function ev() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && cl == this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ) {
        this.ᐃⵠΔ.ᐃⲆᐃ = false;
      }
      var b = sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600 * Po;
      var c = Math.sin(this.ᐃⵠΔ.angle - this.angle) * b;
      var d = Math.cos(this.ᐃⵠΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      oo.rotate(this.angle);
      this.ΔⲆⵠᐃ.ᐃⲆᐃ();
      if (this.info & 16) {
        var f = ⲆΔ[849][jx.time];
      } else {
        f = ⲆΔ[193][jx.time];
      }
      var g = -f.width * this.ΔⲆⵠᐃ.ᐃⵠᐃ;
      var a = this.ΔⲆⵠᐃ.ᐃⵠᐃ * -f.height;
      Jp(oo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⲆΔ[869][jx.time];
      } else {
        f = ⲆΔ[194][jx.time];
      }
      oo.translate(0, f.height / 2);
      Jp(oo, f, c - f.width / 2, -f.height + d);
    }
    oo.restore();
  }
  function fv(b) {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    this.ΔⲆⵠᐃ.ᐃⲆᐃ();
    oo.globalAlpha = 0.3;
    var c = ⲆΔ[282][jx.time];
    var d = -c.width * this.ΔⲆⵠᐃ.ᐃⵠᐃ;
    var e = -c.height * this.ΔⲆⵠᐃ.ᐃⵠᐃ;
    Jp(oo, c, -d / 2, -e / 2, d, e);
    oo.globalAlpha = 1;
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == Zj) {
        this.ᐃⵠΔ.ᐃⲆᐃ = false;
      }
      var f = Po * (sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600);
      var g = f * Math.sin(this.ᐃⵠΔ.angle - this.angle);
      var h = Math.cos(this.ᐃⵠΔ.angle - this.angle) * f;
    } else {
      g = 0;
      h = 0;
    }
    c = ⲆΔ[b][jx.time];
    Jp(oo, c, -c.width / 2 + g, -c.height / 2 + h);
    oo.restore();
  }
  function gv() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    if (ⵠⵠⵠ.ⵠΔᐃΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + sx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - sx, 1);
    }
    this.ⵠⲆⵠΔ.ᐃⲆᐃ();
    this.rotate.ᐃⲆᐃ();
    a = ⲆΔ[450][jx.time];
    Δᐃⵠ = this.scale * (-a.width * this.ⵠⲆⵠΔ.ᐃⵠᐃ);
    ᐃⵠⵠ = -a.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ * this.scale;
    Jp(oo, a, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    if (this.action & 2) {
      if (this.ᐃⵠΔ.ᐃⲆᐃ() && this.ᐃⵠΔ.ⲆⲆΔ == 0) {
        this.action -= 2;
      }
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      var a = ⲆΔ[464];
      Jp(oo, a, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = 1;
    }
    a = ⲆΔ[453][jx.time];
    Δᐃⵠ = -a.width * this.ⵠⲆⵠΔ.ᐃⵠᐃ * this.scale;
    ᐃⵠⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -a.height * this.scale;
    oo.save();
    oo.translate(Po * -60, Po * 20);
    oo.rotate(this.rotate.ᐃⵠᐃ);
    Jp(oo, a, Po * -Δᐃⵠ / 4, Po * -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    if (this.action & 2) {
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      a = ⲆΔ[468];
      Jp(oo, a, Po * -Δᐃⵠ / 4, -ᐃⵠⵠ * Po / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = 1;
    }
    oo.restore();
    a = ⲆΔ[454][jx.time];
    oo.save();
    oo.translate(Po * 60, Po * 20);
    oo.rotate(-this.rotate.ᐃⵠᐃ);
    Jp(oo, a, -Δᐃⵠ * Po / 4, Po * -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    if (this.action & 2) {
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      a = ⲆΔ[469];
      Jp(oo, a, -Δᐃⵠ * Po / 4, Po * -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = 1;
    }
    oo.restore();
    oo.restore();
  }
  function hv() {
    if (this.info >= 10) {
      oo.save();
      oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
      oo.rotate(this.angle);
      if (this.ᐃⵠΔ.ᐃⲆᐃ) {
        if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && Rh == this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ) {
          this.ᐃⵠΔ.ᐃⲆᐃ = cr;
        }
        var b = (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * sx * 600 * Po;
        var c = b * Math.sin(this.ᐃⵠΔ.angle - this.angle);
        var d = Math.cos(this.ᐃⵠΔ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      this.ΔⲆⵠᐃ.ᐃⲆᐃ();
      var e = ⲆΔ[115][jx.time];
      var f = this.ΔⲆⵠᐃ.ᐃⵠᐃ * -e.width;
      var g = this.ΔⲆⵠᐃ.ᐃⵠᐃ * -e.height;
      Jp(oo, e, -f / 2 + c, -g / 2 + d, f, g);
      oo.restore();
    }
  }
  function iv() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    this.ⲆⲆΔᐃᐃ.ᐃⲆᐃ();
    ⵠⵠ = ⲆΔ[289][jx.time];
    Δᐃⵠ = this.ⲆⲆΔᐃᐃ.ᐃⵠᐃ * -ⵠⵠ.width;
    ᐃⵠⵠ = -ⵠⵠ.height * this.ⲆⲆΔᐃᐃ.ᐃⵠᐃ;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    oo.restore();
  }
  function jv() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == 0) {
        this.ᐃⵠΔ.ᐃⲆᐃ = Zj;
      }
      var b = Po * (sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600);
      var c = Math.sin(this.ᐃⵠΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃⵠΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      oo.rotate(this.angle);
      this.ΔⲆⵠᐃ.ᐃⲆᐃ();
      if (this.info & 16) {
        var f = ⲆΔ[812][jx.time];
      } else {
        f = ⲆΔ[188][jx.time];
      }
      var g = -f.width * this.ΔⲆⵠᐃ.ᐃⵠᐃ;
      var a = -f.height * this.ΔⲆⵠᐃ.ᐃⵠᐃ;
      Jp(oo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⲆΔ[813][jx.time];
      } else {
        f = ⲆΔ[189][jx.time];
      }
      oo.translate(0, f.height / 2);
      Jp(oo, f, c - f.width / 2, -f.height + d);
    }
    oo.restore();
  }
  function kv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ⵠⲆⵠΔ.ᐃⲆᐃ();
    this.ⲆΔΔⲆⵠⲆⵠ.ᐃⲆᐃ();
    this.ΔⵠⵠⲆⵠⲆᐃ.ᐃⲆᐃ();
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    c = this.info === 0 ? ⲆΔ[887][jx.time] : ⲆΔ[886][jx.time];
    Δᐃⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -c.width;
    ᐃⵠⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -c.height;
    Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    if (this.action & 2) {
      if (this.ᐃⵠΔ.ᐃⲆᐃ() && this.ᐃⵠΔ.ⲆⲆΔ == qs) {
        this.action -= 2;
      }
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      var c = ⲆΔ[888];
      Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ᐃⲆⵠⵠᐃ.ᐃⲆᐃ() && this.ᐃⲆⵠⵠᐃ.ⲆⲆΔ == 0) {
        this.action -= 4;
      }
      oo.globalAlpha = 0.6 - this.ᐃⲆⵠⵠᐃ.ᐃⵠᐃ;
      c = ⲆΔ[891];
      Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle + b);
    oo.translate(55, 0);
    oo.rotate(a);
    c = this.info === 0 ? ⲆΔ[894][jx.time] : ⲆΔ[896][jx.time];
    Δᐃⵠ = this.ⲆΔΔⲆⵠⲆⵠ.ᐃⵠᐃ * -c.width;
    ᐃⵠⵠ = -c.height * this.ⲆΔΔⲆⵠⲆⵠ.ᐃⵠᐃ;
    Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    if (this.action & 2) {
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      c = ⲆΔ[889];
      Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    if (this.action & 4) {
      oo.globalAlpha = 0.6 - this.ᐃⲆⵠⵠᐃ.ᐃⵠᐃ;
      c = ⲆΔ[892];
      Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle + a + b);
    oo.translate(55, 0);
    oo.rotate(a);
    c = this.info === 0 ? ⲆΔ[895][jx.time] : ⲆΔ[897][jx.time];
    Δᐃⵠ = -c.width * this.ΔⵠⵠⲆⵠⲆᐃ.ᐃⵠᐃ;
    ᐃⵠⵠ = this.ΔⵠⵠⲆⵠⲆᐃ.ᐃⵠᐃ * -c.height;
    Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    if (this.action & 2) {
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      c = ⲆΔ[890];
      Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    if (this.action & 4) {
      oo.globalAlpha = 0.6 - this.ᐃⲆⵠⵠᐃ.ᐃⵠᐃ;
      c = ⲆΔ[893];
      Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
  }
  function lv() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ᐃΔᐃΔΔ.length == 0 || Nr.ᐃᐃⵠᐃⲆⵠᐃ >= this.ᐃΔᐃΔΔ[this.ᐃΔᐃΔΔ.length - 1])) {
      this.ᐃΔᐃΔΔ.push(Nr.ⲆⵠⲆⲆⲆΔⵠ);
    }
    for (var a = 0; this.ᐃΔᐃΔΔ.length > a; a++) {
      this.ᐃΔᐃΔΔ[a] = Math.max(0, this.ᐃΔᐃΔΔ[a] - sx * Nr.ⵠⵠᐃⲆⵠⲆΔ);
      oo.globalAlpha = this.ᐃΔᐃΔΔ[a] / 1.3;
      var b = (1 - this.ᐃΔᐃΔΔ[a]) * 40;
      var c = (1 - this.ᐃΔᐃΔΔ[a]) * 35 + 10;
      Wb(oo, Po * -68 + b * Math.sin(-this.angle - Math.PI / 2), Po * -20 + b * Math.cos(-this.angle - Math.PI / 2), c);
      Rb(oo, "#333333");
    }
    oo.globalAlpha = 1;
    if (this.ᐃΔᐃΔΔ.length > 0 && this.ᐃΔᐃΔΔ[0] === 0) {
      this.ᐃΔᐃΔΔ.shift();
    }
    oo.restore();
  }
  function mv(a, b, c) {
    if (a >= 0) {
      ⵠⵠ = ⲆΔ[a][jx.time];
      switch (a) {
        case 1:
        case 3:
        case 4:
        case 8:
        case 31:
        case 32:
          ww(a, ⵠⵠ, -ⵠⵠ.width / 2 - (45 + b) * Po, -ⵠⵠ.height / 2 + (c + 22) * Po);
          break;
        case 94:
        case 95:
        case 96:
        case 97:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - (52 + b) * Po, -ⵠⵠ.height / 4 + Po * (c + 20));
          break;
        case 98:
        case 99:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - (57 + b) * Po, -ⵠⵠ.height / 4 + Po * (c + 20));
          break;
        case 57:
        case 0:
        case 5:
        case 6:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - Po * (47 + b), -ⵠⵠ.height / 4 + (c + 45) * Po);
          break;
        case 30:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - (52 + b) * Po, -ⵠⵠ.height / 4 + Po * (c + 45));
          break;
        case 19:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - (47 + b) * Po, -ⵠⵠ.height / 4 + (c + 44) * Po);
          break;
        case 9:
          ww(a, ⵠⵠ, -ⵠⵠ.width / 2 - Po * (47 + b), -ⵠⵠ.height / 2 + (c + 44) * Po);
          break;
        case 62:
          ww(a, ⵠⵠ, -ⵠⵠ.width / 2 - (40 + b) * Po, -ⵠⵠ.height / 2 + Po * (c + 65));
          break;
        case 12:
        case 34:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - (37 + b) * Po, -ⵠⵠ.height / 4 + Po * (c + 85));
          break;
        case 54:
        case 53:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - Po * (26 + b), -ⵠⵠ.height / 4 + Po * (c + 77));
          break;
        case 17:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - Po * (37 + b), -ⵠⵠ.height / 4 + (c + 85) * Po);
          break;
        case 63:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - (47 + b) * Po, -ⵠⵠ.height / 4 + Po * (c + 44));
          break;
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - Po * (37 + b), -ⵠⵠ.height / 4 + (c + 30) * Po);
          break;
        case 56:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - (47 + b) * Po, -ⵠⵠ.height / 4 + Po * (c + 35));
          break;
        case 92:
        case 93:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - Po * (47 + b), -ⵠⵠ.height / 4 + (c + 40) * Po);
          break;
        case 89:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - (47 + b) * Po, -ⵠⵠ.height / 4 + Po * (c + 34));
          break;
        case 13:
        case 14:
        case 15:
        case 33:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - Po * (37 + b), -ⵠⵠ.height / 4 + Po * (c + 90));
          break;
        case 18:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - Po * (40 + b), -ⵠⵠ.height / 4 + (c + 85) * Po);
          break;
        case 16:
          ww(a, ⵠⵠ, -ⵠⵠ.width / 2 - Po * (39 + b), -ⵠⵠ.height / 2 + Po * (c + 90));
          break;
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 45:
          ww(a, ⵠⵠ, -ⵠⵠ.width / 2 - (46 + b) * Po, -ⵠⵠ.height / 2 + Po * (c + 35));
          break;
        case 49:
          ww(a, ⵠⵠ, -ⵠⵠ.width / 2 - Po * (47 + b), -ⵠⵠ.height / 2 + (c + 54) * Po);
          break;
        case 46:
        case 50:
        case 51:
        case 52:
          ww(a, ⵠⵠ, -ⵠⵠ.width / 2 - Po * (46 + b), -ⵠⵠ.height / 2 + Po * (c + 35));
          break;
        case 55:
          ww(a, ⵠⵠ, -ⵠⵠ.width / 2 - Po * (47 + b), -ⵠⵠ.height / 2 + Po * (c + 20));
      }
    }
  }
  function nv() {
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == 0) {
        this.ᐃⵠΔ.ᐃⲆᐃ = Dg;
      }
      var a = (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * sx * 600 * Po;
      var b = a * Math.sin(this.ᐃⵠΔ.angle - this.angle);
      var c = a * Math.cos(this.ᐃⵠΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    this.ⲆⵠΔⲆⵠⵠⲆ = (this.ⲆⵠΔⲆⵠⵠⲆ + sx * 3) % (Math.PI * 2);
    this.ⲆᐃⵠᐃΔⲆⵠ = (this.ⲆᐃⵠᐃΔⲆⵠ - sx * 3) % (Math.PI * 2);
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x + b, kx.ⲆⲆᐃ.y + this.y + c);
    oo.save();
    oo.rotate(this.angle);
    ⵠⵠ = ⲆΔ[152][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    oo.restore();
    oo.save();
    oo.rotate(this.ⲆⵠΔⲆⵠⵠⲆ);
    ⵠⵠ = ⲆΔ[1194][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    oo.restore();
    oo.save();
    oo.rotate(this.ⲆᐃⵠᐃΔⲆⵠ);
    ⵠⵠ = ⲆΔ[1193][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    oo.restore();
    oo.restore();
  }
  function ov() {
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == cr) {
        this.ᐃⵠΔ.ᐃⲆᐃ = Rh;
      }
      var a = (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * sx * 600 * Po;
      var b = a * Math.sin(this.ᐃⵠΔ.angle - this.angle);
      var c = a * Math.cos(this.ᐃⵠΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    oo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    oo.translate(kx.ⲆⲆᐃ.x + this.x + b, kx.ⲆⲆᐃ.y + this.y + c);
    oo.rotate(this.angle);
    ⵠⵠ = ⲆΔ[156][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + sx * 3) % (Math.PI * 2);
    }
    oo.rotate(this.rotate);
    ⵠⵠ = ⲆΔ[1210][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    oo.restore();
  }
  function pv() {
    if (this.info !== 10) {
      oo.save();
      oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
      oo.rotate(this.angle);
      if (this.ᐃⵠΔ.ᐃⲆᐃ) {
        if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == 0) {
          this.ᐃⵠΔ.ᐃⲆᐃ = false;
        }
        var b = (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * sx * 600 * Po;
        var c = Math.sin(this.ᐃⵠΔ.angle - this.angle) * b;
        var d = b * Math.cos(this.ᐃⵠΔ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      if (this.info & 16) {
        var e = ⲆΔ[623][jx.time];
      } else {
        e = ⲆΔ[287][jx.time];
      }
      Jp(oo, e, -e.width / 2 + c, -e.width / 2 + d);
      oo.restore();
      for (var f = this.info & 15, g = 0; f > g; g++) {
        this.ⲆΔᐃⲆ[g].ⵠⵠⲆⵠ(294);
      }
    }
  }
  function qv() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == ye) {
        this.ᐃⵠΔ.ᐃⲆᐃ = false;
      }
      var a = (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * sx * 600 * Po;
      var b = Math.sin(this.ᐃⵠΔ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃⵠΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.action == 2) {
      ⵠⵠ = ⲆΔ[407][jx.time];
    } else {
      ⵠⵠ = ⲆΔ[119][jx.time];
    }
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2 + b, -ⵠⵠ.height / 2 + c);
    oo.restore();
  }
  function rv() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    if (ⵠⵠⵠ.ⵠΔᐃΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + sx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - sx, 1);
    }
    this.ⵠⲆⵠΔ.ᐃⲆᐃ();
    this.rotate.ᐃⲆᐃ();
    a = this.info === 0 ? ⲆΔ[232][jx.time] : ⲆΔ[1068][jx.time];
    Δᐃⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -a.width * this.scale;
    ᐃⵠⵠ = this.scale * (-a.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ);
    Jp(oo, a, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    if (this.action & 2) {
      if (this.ᐃⵠΔ.ᐃⲆᐃ() && this.ᐃⵠΔ.ⲆⲆΔ == 0) {
        this.action -= 2;
      }
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      var a = ⲆΔ[1077];
      Jp(oo, a, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = 1;
    }
    a = this.info === 0 ? ⲆΔ[1072][jx.time] : ⲆΔ[1071][jx.time];
    Δᐃⵠ = this.scale * (this.ⵠⲆⵠΔ.ᐃⵠᐃ * -a.width);
    ᐃⵠⵠ = -a.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ * this.scale;
    oo.save();
    oo.translate(Po * -40, Po * 10);
    oo.rotate(this.rotate.ᐃⵠᐃ);
    Jp(oo, a, Po * -Δᐃⵠ / 4, Po * -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    if (this.action & 2) {
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      a = ⲆΔ[1078];
      Jp(oo, a, Po * -Δᐃⵠ / 4, Po * -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = 1;
    }
    oo.restore();
    a = this.info === 0 ? ⲆΔ[1075][jx.time] : ⲆΔ[1074][jx.time];
    oo.save();
    oo.translate(Po * 40, Po * 10);
    oo.rotate(-this.rotate.ᐃⵠᐃ);
    Jp(oo, a, Po * -Δᐃⵠ / 4, Po * -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    if (this.action & 2) {
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      a = ⲆΔ[1079];
      Jp(oo, a, Po * -Δᐃⵠ / 4, -ᐃⵠⵠ * Po / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = 1;
    }
    oo.restore();
    oo.restore();
  }
  function sv() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    var a = ⵠⵠⵠ.ⵠΔᐃΔ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + sx / 2, 1.8) : Math.max(this.scale - sx, 1);
    this.ⵠⲆⵠΔ.ᐃⲆᐃ();
    this.rotate.ᐃⲆᐃ();
    this.ⲆⲆᐃᐃ = a < 350 ? Math.max(0, this.ⲆⲆᐃᐃ - sx * 2.2) : Math.min(1, this.ⲆⲆᐃᐃ + sx * 2.2);
    b = (this.info & 1) === 0 ? ⲆΔ[1113][jx.time] : ⲆΔ[1114][jx.time];
    Δᐃⵠ = this.scale * (this.ⵠⲆⵠΔ.ᐃⵠᐃ * -b.width);
    ᐃⵠⵠ = this.scale * (this.ⵠⲆⵠΔ.ᐃⵠᐃ * -b.height);
    oo.globalAlpha = 1 - this.ⲆⲆᐃᐃ;
    Jp(oo, b, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    b = (this.info & 1) === 0 ? ⲆΔ[235][jx.time] : ⲆΔ[1098][jx.time];
    Δᐃⵠ = -b.width * this.ⵠⲆⵠΔ.ᐃⵠᐃ * this.scale;
    ᐃⵠⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -b.height * this.scale;
    oo.globalAlpha = this.ⲆⲆᐃᐃ;
    Jp(oo, b, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    if (this.action & 2) {
      if (this.ᐃⵠΔ.ᐃⲆᐃ() && zl == this.ᐃⵠΔ.ⲆⲆΔ) {
        this.action -= 2;
      }
      oo.globalAlpha = (1 - this.ⲆⲆᐃᐃ) * (0.6 - this.ᐃⵠΔ.ᐃⵠᐃ);
      var b = ⲆΔ[1115];
      Δᐃⵠ = this.scale * (this.ⵠⲆⵠΔ.ᐃⵠᐃ * -b.width);
      ᐃⵠⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -b.height * this.scale;
      Jp(oo, b, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = this.ⲆⲆᐃᐃ * (0.6 - this.ᐃⵠΔ.ᐃⵠᐃ);
      b = ⲆΔ[1107];
      Δᐃⵠ = -b.width * this.ⵠⲆⵠΔ.ᐃⵠᐃ * this.scale;
      ᐃⵠⵠ = -b.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ * this.scale;
      Jp(oo, b, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = 1;
    }
    b = this.info & 1 ? ⲆΔ[1101][jx.time] : ⲆΔ[1102][jx.time];
    Δᐃⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -b.width * this.scale;
    ᐃⵠⵠ = this.scale * (-b.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ);
    oo.save();
    oo.translate(Po * -20, Po * 0);
    oo.rotate(this.rotate.ᐃⵠᐃ);
    oo.globalAlpha = this.ⲆⲆᐃᐃ;
    Jp(oo, b, -Δᐃⵠ * Po / 4, Po * -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    if (this.action & 2) {
      oo.globalAlpha = this.ⲆⲆᐃᐃ * (0.6 - this.ᐃⵠΔ.ᐃⵠᐃ);
      b = ⲆΔ[1108];
      Jp(oo, b, Po * -Δᐃⵠ / 4, -ᐃⵠⵠ * Po / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = 1;
    }
    oo.restore();
    b = this.info & 1 ? ⲆΔ[1104][jx.time] : ⲆΔ[1105][jx.time];
    oo.save();
    oo.translate(Po * 20, Po * 0);
    oo.rotate(-this.rotate.ᐃⵠᐃ);
    oo.globalAlpha = this.ⲆⲆᐃᐃ;
    Jp(oo, b, -Δᐃⵠ * Po / 4, -ᐃⵠⵠ * Po / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    if (this.action & 2) {
      oo.globalAlpha = (0.6 - this.ᐃⵠΔ.ᐃⵠᐃ) * this.ⲆⲆᐃᐃ;
      b = ⲆΔ[1109];
      Jp(oo, b, Po * -Δᐃⵠ / 4, -ᐃⵠⵠ * Po / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = 1;
    }
    oo.globalAlpha = 1;
    oo.restore();
    oo.restore();
  }
  function tv() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    this.ΔⲆⵠᐃ.ᐃⲆᐃ();
    oo.globalAlpha = 0.3;
    var a = ⲆΔ[282][jx.time];
    var b = this.ΔⲆⵠᐃ.ᐃⵠᐃ * -a.width;
    var c = -a.height * this.ΔⲆⵠᐃ.ᐃⵠᐃ;
    Jp(oo, a, -b / 2, -c / 2, b, c);
    oo.globalAlpha = 1;
    oo.restore();
  }
  function uv() {
    this.ⵠⲆⵠΔ.ᐃⲆᐃ();
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    a = this.info === 0 ? ⲆΔ[1042][jx.time] : ⲆΔ[1044][jx.time];
    Δᐃⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -a.width;
    ᐃⵠⵠ = -a.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ;
    Jp(oo, a, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    if (this.action & 2) {
      if (this.ᐃⵠΔ.ᐃⲆᐃ() && this.ᐃⵠΔ.ⲆⲆΔ == 0) {
        this.action -= 2;
      }
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      var a = ⲆΔ[1045];
      Jp(oo, a, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
  }
  function vv() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == vn) {
        this.ᐃⵠΔ.ᐃⲆᐃ = qs;
      }
      var b = sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600 * Po;
      var c = Math.sin(this.ᐃⵠΔ.angle - this.angle) * b;
      var d = Math.cos(this.ᐃⵠΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      oo.rotate(this.angle);
      this.ΔⲆⵠᐃ.ᐃⲆᐃ();
      if (this.info & 16) {
        var f = ⲆΔ[668][jx.time];
      } else {
        f = ⲆΔ[132][jx.time];
      }
      var g = -f.width * this.ΔⲆⵠᐃ.ᐃⵠᐃ;
      var a = -f.height * this.ΔⲆⵠᐃ.ᐃⵠᐃ;
      Jp(oo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      this.ᐃΔᐃⵠⵠΔᐃ.ᐃⲆᐃ();
      if (this.info & 16) {
        f = ⲆΔ[638][jx.time];
      } else {
        f = ⲆΔ[134][jx.time];
      }
      oo.translate(0, f.height / 2);
      oo.rotate(this.ᐃΔᐃⵠⵠΔᐃ.ᐃⵠᐃ);
      Jp(oo, f, c - f.width / 2, -f.height + d);
    }
    oo.restore();
  }
  function wv() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    this.ⲆⲆΔᐃᐃ.ᐃⲆᐃ();
    ⵠⵠ = ⲆΔ[1192][jx.time];
    Δᐃⵠ = this.ⲆⲆΔᐃᐃ.ᐃⵠᐃ * -ⵠⵠ.width;
    ᐃⵠⵠ = this.ⲆⲆΔᐃᐃ.ᐃⵠᐃ * -ⵠⵠ.height;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    oo.restore();
  }
  function xv(a, b) {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    this.ⵠⲆⵠΔ.ᐃⲆᐃ();
    c = ⲆΔ[a][jx.time];
    Δᐃⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -c.width;
    ᐃⵠⵠ = -c.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ;
    Jp(oo, c, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    if (this.action & 2) {
      if (this.ᐃⵠΔ.ᐃⲆᐃ() && this.ᐃⵠΔ.ⲆⲆΔ == 0) {
        this.action -= 2;
      }
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      var c = ⲆΔ[b];
      Jp(oo, c, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = 1;
    }
    oo.restore();
  }
  function yv(a, b, c) {
    if (a >= 0) {
      ⵠⵠ = ⲆΔ[a][jx.time];
      switch (a) {
        case 71:
        case 72:
        case 73:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - (0 + b) * Po, -ⵠⵠ.height / 4 + (c + 35) * Po);
          break;
        case 74:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - Po * (1 + b), -ⵠⵠ.height / 4 + (c + 45) * Po);
          break;
        case 75:
        case 76:
          Bw(a, ⵠⵠ, -ⵠⵠ.width / 4 - (1 + b) * Po, -ⵠⵠ.height / 4 + (c + 40) * Po);
      }
    }
  }
  function zv() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && Zj == this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ) {
        this.ᐃⵠΔ.ᐃⲆᐃ = Ma;
      }
      var b = sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600 * Po;
      var c = Math.sin(this.ᐃⵠΔ.angle - this.angle) * b;
      var d = Math.cos(this.ᐃⵠΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      e = ⲆΔ[716][jx.time];
      Jp(oo, e, -e.width / 2 + c, -e.height / 2 + d);
      this.up.ᐃⲆᐃ();
      var e = ⲆΔ[720][jx.time];
      var f = this.up.ᐃⵠᐃ * -e.width;
      var g = this.up.ᐃⵠᐃ * -e.height;
      Jp(oo, e, -f / 2 + Po * 1, -g / 2 + Po * 3, f, g);
    } else {
      e = ⲆΔ[144][jx.time];
      Jp(oo, e, -e.width / 2 + c, -e.height / 2 + d);
    }
    oo.restore();
  }
  function Av() {
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == 0) {
        this.ᐃⵠΔ.ᐃⲆᐃ = false;
      }
      var a = (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * sx * 600 * Po;
      var b = a * Math.sin(this.ᐃⵠΔ.angle - this.angle);
      var c = Math.cos(this.ᐃⵠΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    oo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    oo.translate(kx.ⲆⲆᐃ.x + this.x + b, kx.ⲆⲆᐃ.y + this.y + c);
    oo.rotate(this.angle);
    ⵠⵠ = ⲆΔ[155][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + sx * 3) % (Math.PI * 2);
    }
    oo.rotate(this.rotate);
    ⵠⵠ = ⲆΔ[1206][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    oo.restore();
  }
  function Bv() {
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == 0) {
        this.ᐃⵠΔ.ᐃⲆᐃ = ye;
      }
      var a = (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * sx * 600 * Po;
      var b = a * Math.sin(this.ᐃⵠΔ.angle - this.angle);
      var c = a * Math.cos(this.ᐃⵠΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    oo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    oo.translate(kx.ⲆⲆᐃ.x + this.x + b, kx.ⲆⲆᐃ.y + this.y + c);
    oo.rotate(this.angle);
    ⵠⵠ = ⲆΔ[153][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + sx * 3) % (Math.PI * 2);
    }
    oo.rotate(this.rotate);
    ⵠⵠ = ⲆΔ[1198][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    oo.restore();
  }
  function Cv(a) {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    this.ⵠⲆⵠΔ.ᐃⲆᐃ();
    ⵠⵠ = ⲆΔ[a][jx.time];
    Δᐃⵠ = -ⵠⵠ.width * this.ⵠⲆⵠΔ.ᐃⵠᐃ;
    ᐃⵠⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -ⵠⵠ.height;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    oo.restore();
  }
  function Dv(a, b) {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    c = ⲆΔ[a][jx.time];
    Δᐃⵠ = -c.width;
    ᐃⵠⵠ = -c.height;
    Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    if (this.action & 2) {
      if (this.ᐃⵠΔ.ᐃⲆᐃ() && this.ᐃⵠΔ.ⲆⲆΔ == sq) {
        this.action -= 2;
      }
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      var c = ⲆΔ[b];
      Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
  }
  function Ev(a, b) {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    this.ⵠⲆⵠΔ.ᐃⲆᐃ();
    c = ⲆΔ[a][jx.time];
    Δᐃⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -c.width;
    ᐃⵠⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -c.height;
    Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    if (this.action & 2) {
      if (this.ᐃⵠΔ.ᐃⲆᐃ() && cl == this.ᐃⵠΔ.ⲆⲆΔ) {
        this.action -= 2;
      }
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      var c = ⲆΔ[b];
      Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
  }
  function Fv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ⵠⲆⵠΔ.ᐃⲆᐃ();
    this.ⲆΔΔⲆⵠⲆⵠ.ᐃⲆᐃ();
    this.ΔⵠⵠⲆⵠⲆᐃ.ᐃⲆᐃ();
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    c = this.info === 0 ? ⲆΔ[231][jx.time] : ⲆΔ[1053][jx.time];
    Δᐃⵠ = -c.width * this.ⵠⲆⵠΔ.ᐃⵠᐃ;
    ᐃⵠⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -c.height;
    Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    if (this.action & 2) {
      if (this.ᐃⵠΔ.ᐃⲆᐃ() && this.ᐃⵠΔ.ⲆⲆΔ == $k) {
        this.action -= 2;
      }
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      var c = ⲆΔ[1056];
      Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ᐃⲆⵠⵠᐃ.ᐃⲆᐃ() && ye == this.ᐃⲆⵠⵠᐃ.ⲆⲆΔ) {
        this.action -= 4;
      }
      oo.globalAlpha = 0.6 - this.ᐃⲆⵠⵠᐃ.ᐃⵠᐃ;
      c = ⲆΔ[1065];
      Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle + b);
    oo.translate(100, 0);
    oo.rotate(a);
    c = this.info === 0 ? ⲆΔ[1060][jx.time] : ⲆΔ[1059][jx.time];
    Δᐃⵠ = -c.width * this.ⲆΔΔⲆⵠⲆⵠ.ᐃⵠᐃ;
    ᐃⵠⵠ = -c.height * this.ⲆΔΔⲆⵠⲆⵠ.ᐃⵠᐃ;
    Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    if (this.action & 2) {
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      c = ⲆΔ[1057];
      Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    if (this.action & 4) {
      oo.globalAlpha = 0.6 - this.ᐃⲆⵠⵠᐃ.ᐃⵠᐃ;
      c = ⲆΔ[1066];
      Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle + a + b);
    oo.translate(100, 0);
    oo.rotate(a);
    c = this.info === 0 ? ⲆΔ[1063][jx.time] : ⲆΔ[1062][jx.time];
    Δᐃⵠ = -c.width * this.ΔⵠⵠⲆⵠⲆᐃ.ᐃⵠᐃ;
    ᐃⵠⵠ = this.ΔⵠⵠⲆⵠⲆᐃ.ᐃⵠᐃ * -c.height;
    Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    if (this.action & 2) {
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      c = ⲆΔ[1058];
      Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    if (this.action & 4) {
      oo.globalAlpha = 0.6 - this.ᐃⲆⵠⵠᐃ.ᐃⵠᐃ;
      c = ⲆΔ[1067];
      Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
  }
  function Gv() {
    if (this.info >= 10) {
      oo.save();
      oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
      oo.rotate(this.angle);
      if (this.ᐃⵠΔ.ᐃⲆᐃ) {
        if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == 0) {
          this.ᐃⵠΔ.ᐃⲆᐃ = Nh;
        }
        var b = sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600 * Po;
        var c = Math.sin(this.ᐃⵠΔ.angle - this.angle) * b;
        var d = Math.cos(this.ᐃⵠΔ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      this.ΔⲆⵠᐃ.ᐃⲆᐃ();
      var e = ⲆΔ[206][jx.time];
      var f = this.ΔⲆⵠᐃ.ᐃⵠᐃ * -e.width;
      var g = this.ΔⲆⵠᐃ.ᐃⵠᐃ * -e.height;
      Jp(oo, e, -f / 2 + c, -g / 2 + d, f, g);
      oo.restore();
    }
  }
  function Hv() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    var a = ⵠⵠⵠ.ⵠΔᐃΔ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + sx / 2, 1.8) : Math.max(this.scale - sx, 1);
    this.ⵠⲆⵠΔ.ᐃⲆᐃ();
    this.rotate.ᐃⲆᐃ();
    this.ⲆⲆᐃᐃ = a < 350 ? Math.max(0, this.ⲆⲆᐃᐃ - sx * 2.2) : Math.min(1, this.ⲆⲆᐃᐃ + sx * 2.2);
    b = ⲆΔ[1135][jx.time];
    Δᐃⵠ = -b.width * this.ⵠⲆⵠΔ.ᐃⵠᐃ * this.scale;
    ᐃⵠⵠ = -b.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ * this.scale;
    oo.globalAlpha = 1 - this.ⲆⲆᐃᐃ;
    Jp(oo, b, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    b = ⲆΔ[1119][jx.time];
    Δᐃⵠ = -b.width * this.ⵠⲆⵠΔ.ᐃⵠᐃ * this.scale;
    ᐃⵠⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -b.height * this.scale;
    oo.globalAlpha = this.ⲆⲆᐃᐃ;
    Jp(oo, b, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    if (this.action & 2) {
      if (this.ᐃⵠΔ.ᐃⲆᐃ() && this.ᐃⵠΔ.ⲆⲆΔ == 0) {
        this.action -= 2;
      }
      oo.globalAlpha = (0.6 - this.ᐃⵠΔ.ᐃⵠᐃ) * (1 - this.ⲆⲆᐃᐃ);
      var b = ⲆΔ[1136];
      Δᐃⵠ = this.scale * (-b.width * this.ⵠⲆⵠΔ.ᐃⵠᐃ);
      ᐃⵠⵠ = -b.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ * this.scale;
      Jp(oo, b, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = (0.6 - this.ᐃⵠΔ.ᐃⵠᐃ) * this.ⲆⲆᐃᐃ;
      b = ⲆΔ[1128];
      Δᐃⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -b.width * this.scale;
      ᐃⵠⵠ = this.scale * (this.ⵠⲆⵠΔ.ᐃⵠᐃ * -b.height);
      Jp(oo, b, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = 1;
    }
    b = ⲆΔ[1122][jx.time];
    Δᐃⵠ = this.ⵠⲆⵠΔ.ᐃⵠᐃ * -b.width * this.scale;
    ᐃⵠⵠ = this.scale * (-b.height * this.ⵠⲆⵠΔ.ᐃⵠᐃ);
    oo.save();
    oo.translate(Po * -40, Po * 80);
    oo.rotate(this.rotate.ᐃⵠᐃ);
    oo.globalAlpha = this.ⲆⲆᐃᐃ;
    Jp(oo, b, Po * -Δᐃⵠ / 4, Po * -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    if (this.action & 2) {
      oo.globalAlpha = this.ⲆⲆᐃᐃ * (0.6 - this.ᐃⵠΔ.ᐃⵠᐃ);
      b = ⲆΔ[1129];
      Jp(oo, b, Po * -Δᐃⵠ / 4, Po * -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = 1;
    }
    oo.restore();
    b = ⲆΔ[1125][jx.time];
    oo.save();
    oo.translate(Po * 40, Po * 80);
    oo.rotate(-this.rotate.ᐃⵠᐃ);
    oo.globalAlpha = this.ⲆⲆᐃᐃ;
    Jp(oo, b, -Δᐃⵠ * Po / 4, -ᐃⵠⵠ * Po / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
    if (this.action & 2) {
      oo.globalAlpha = this.ⲆⲆᐃᐃ * (0.6 - this.ᐃⵠΔ.ᐃⵠᐃ);
      b = ⲆΔ[1130];
      Jp(oo, b, -Δᐃⵠ * Po / 4, Po * -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
      oo.globalAlpha = 1;
    }
    oo.globalAlpha = 1;
    oo.restore();
    oo.restore();
  }
  function Iv(a, b) {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    oo.rotate(this.angle);
    if (a === 854) {
      a = 250;
      this.info = 36;
    }
    ⵠⵠ = ⲆΔ[a][this.info][jx.time];
    Δᐃⵠ = -ⵠⵠ.width / 2;
    ᐃⵠⵠ = -ⵠⵠ.height / 2;
    Jp(oo, ⵠⵠ, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
    if (this.action & 2) {
      if (this.ᐃⵠΔ.ᐃⲆᐃ() && this.ᐃⵠΔ.ⲆⲆΔ == 0) {
        this.action -= 2;
      }
      oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
      var c = Tv(this.info, ⵠⵠ, ΔⵠⲆΔᐃΔⵠᐃΔ);
      Jp(oo, c, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
  }
  function Jv() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == Ma) {
        this.ᐃⵠΔ.ᐃⲆᐃ = sq;
      }
      var b = Po * ((1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * sx * 600);
      var c = b * Math.sin(this.ᐃⵠΔ.angle - this.angle);
      var d = b * Math.cos(this.ᐃⵠΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      oo.rotate(this.angle);
      this.ΔⲆⵠᐃ.ᐃⲆᐃ();
      if (this.info & 16) {
        var f = ⲆΔ[838][jx.time];
      } else {
        f = ⲆΔ[191][jx.time];
      }
      var g = -f.width * this.ΔⲆⵠᐃ.ᐃⵠᐃ;
      var a = -f.height * this.ΔⲆⵠᐃ.ᐃⵠᐃ;
      Jp(oo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⲆΔ[839][jx.time];
      } else {
        f = ⲆΔ[192][jx.time];
      }
      oo.translate(0, f.height / 2);
      Jp(oo, f, c - f.width / 2, -f.height + d);
    }
    oo.restore();
  }
  function Kv() {
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      var a = sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600 * Po;
      var b = a * Math.sin(this.ᐃⵠΔ.angle - this.angle);
      var c = Math.cos(this.ᐃⵠΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + sx * 0.5) % (Math.PI * 2);
    }
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x + b, kx.ⲆⲆᐃ.y + this.y + c);
    oo.save();
    oo.rotate(this.rotate);
    ⵠⵠ = ⲆΔ[641][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    oo.restore();
    oo.save();
    oo.rotate(this.ⲆⵠᐃⵠⲆᐃⲆᐃⵠ);
    ⵠⵠ = ⲆΔ[642][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    oo.restore();
    oo.restore();
  }
  function Lv() {
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && Ah == this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ) {
        this.ᐃⵠΔ.ᐃⲆᐃ = sq;
      }
      var a = Po * ((1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * sx * 600);
      var b = Math.sin(this.ᐃⵠΔ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃⵠΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    oo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    oo.translate(kx.ⲆⲆᐃ.x + this.x + b, kx.ⲆⲆᐃ.y + this.y + c);
    oo.rotate(this.angle);
    ⵠⵠ = ⲆΔ[157][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + sx * 3) % (Math.PI * 2);
    }
    oo.rotate(this.rotate);
    ⵠⵠ = ⲆΔ[1214][jx.time];
    Jp(oo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    oo.restore();
  }
  function Mv(f, e, i, j, k, n, a, o, p) {
    if (vh === o) {
      o = 0;
    }
    for (var h = f; h <= e; h++) {
      for (var q = i; j >= q; q++) {
        var r = gx.ⵠⲆᐃᐃ[h][q];
        if (r !== undefined && Tn !== r[n]) {
          var t = r[n];
          var w = ⲆΔ[k][jx.time][t.ⲆⵠΔΔᐃⲆⲆ];
          Jp(oo, w, kx.ⲆⲆᐃ.x + t.x - w.width / (ⵠⵠᐃⲆΔ * 4), kx.ⲆⲆᐃ.y + t.y - w.height / (ⵠⵠᐃⲆΔ * 4), w.width / (ⵠⵠᐃⲆΔ * 2), w.height / (ⵠⵠᐃⲆΔ * 2));
          if (ix.ⵠᐃⲆᐃⲆ) {
            var x = 2147483648;
            var y = ((h * 1000 + q) * 1103515245 + 12345) % x / x;
            if (y < 0.2) {
              y = Math.floor(ⲆΔ[1025][jx.time][t.ⲆⵠΔΔᐃⲆⲆ].length * (y * 5));
              w = ⲆΔ[1025][jx.time][t.ⲆⵠΔΔᐃⲆⲆ][y];
              Jp(oo, w, kx.ⲆⲆᐃ.x + t.x - w.width / (ⵠⵠᐃⲆΔ * 4), kx.ⲆⲆᐃ.y + t.y - w.height / (ⵠⵠᐃⲆΔ * 4), w.width / (ⵠⵠᐃⲆΔ * 2), w.height / (ⵠⵠᐃⲆΔ * 2));
            } else if (t.ⵠⵠⵠⲆⲆⵠⲆ !== 0) {
              w = ⲆΔ[1026][jx.time];
              var z = (Pu + h % 2 * 30) % 60;
              oo.globalAlpha = z < 30 ? z / 30 : 1 - (z - 30) / 30;
              Jp(oo, w, kx.ⲆⲆᐃ.x + t.x - w.width / (ⵠⵠᐃⲆΔ * 4), kx.ⲆⲆᐃ.y + t.y - w.height / (ⵠⵠᐃⲆΔ * 4) - 30 + z, w.width / (ⵠⵠᐃⲆΔ * 2), w.height / (ⵠⵠᐃⲆΔ * 2));
              oo.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function Nv() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    if (this.ᐃⵠΔ.ᐃⲆᐃ) {
      if (this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⲆᐃ() && this.ᐃⵠΔ.ΔⵠⲆⲆ.ⲆⲆΔ == 0) {
        this.ᐃⵠΔ.ᐃⲆᐃ = false;
      }
      var b = sx * (1 - this.ᐃⵠΔ.ΔⵠⲆⲆ.ᐃⵠᐃ) * 600 * Po;
      var c = Math.sin(this.ᐃⵠΔ.angle - this.angle) * b;
      var d = Math.cos(this.ᐃⵠΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      oo.rotate(this.angle);
      this.ΔⲆⵠᐃ.ᐃⲆᐃ();
      if (this.info & 16) {
        var f = ⲆΔ[970][jx.time];
      } else {
        f = ⲆΔ[208][jx.time];
      }
      var g = this.ΔⲆⵠᐃ.ᐃⵠᐃ * -f.width;
      var a = -f.height * this.ΔⲆⵠᐃ.ᐃⵠᐃ;
      Jp(oo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⲆΔ[971][jx.time];
      } else {
        f = ⲆΔ[209][jx.time];
      }
      oo.translate(0, f.height / 2);
      Jp(oo, f, c - f.width / 2, -f.height + d);
    }
    oo.restore();
  }
  function Ov(a) {
    if (a > 0) {
      var b = ⲆΔ[a][jx.time];
      switch (a) {
        case 58:
          ww(a, b, -b.width / 2 + Po * 2, -b.height / 2 - Po * 5);
          break;
        case 10:
          ww(a, b, -b.width / 2, -b.height / 2 - Po * 18);
          break;
        case 11:
          ww(a, b, -b.width / 2, -b.height / 2 - Po * 10);
          break;
        case 23:
          ww(a, b, -b.width / 2, -b.height / 2 - Po * 19);
          break;
        case 24:
          Bw(a, b, -b.width / 4, -b.height / 4 - Po * 20);
          break;
        case 25:
          ww(a, b, -b.width / 2 - Po * 1, -b.height / 2 - Po * 23);
          break;
        case 26:
          ww(a, b, -b.width / 2, -b.height / 2 - Po * 5);
          break;
        case 27:
          ww(a, b, -b.width / 2, -b.height / 2 - Po * 2);
          break;
        case 43:
          ww(a, b, -b.width / 2 + Po * 1.5, -b.height / 2 - Po * 1);
          break;
        case 44:
        case 20:
        case 21:
        case 22:
        case 80:
        case 81:
        case 82:
        case 60:
        case 90:
        case 88:
        case 87:
          Bw(a, b, -b.width / 4, -b.height / 4 + Po * 2);
          break;
        case 41:
        case 42:
          ww(a, b, -b.width / 2 - Po * 5, -b.height / 2 - Po * 2);
          break;
        case 40:
          ww(a, b, -b.width / 2, -b.height / 2 - Po * 2);
          break;
        case 85:
          ww(a, b, -b.width / 2, -b.height / 2 - Po * 2);
          break;
        case 48:
          ww(a, b, -b.width / 2, -b.height / 2 - Po * 2);
          break;
        case 47:
          ww(a, b, -b.width / 2 + Po * 2, -b.height / 2);
          break;
        case 59:
          ww(a, b, -b.width / 2, -b.height / 2 - Po * 5);
          break;
        case 77:
        case 78:
        case 79:
          ww(a, b, -b.width / 2 - Po * 1, -b.height / 2);
          break;
        case 83:
          ww(a, b, -b.width / 2, -b.height / 2 + Po * 2);
          break;
        case 84:
        case 86:
          ww(a, b, -b.width / 2, -b.height / 2 + Po * 8);
          break;
        case 61:
          ww(a, b, -b.width / 2, -b.height / 2 - Po * 4);
      }
    }
  }
  function Pv() {
    if (!this.ⲆⲆⵠᐃⲆ && this.ⲆΔⵠⵠᐃ !== 0) {
      if (this.x != this.r.x || this.y != this.r.y) {
        var a = (ⵠⵠⵠ.ᐃΔΔⲆᐃᐃⲆ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
        this.ⲆⵠᐃⲆⵠ = ⵠⵠⵠ.ΔⵠᐃⲆⲆⲆᐃ(a, this.ⲆⵠᐃⲆⵠ);
        this.ⲆⵠᐃⲆⵠ = ⵠⵠⵠ.ⵠⲆᐃΔⲆ(this.ⲆⵠᐃⲆⵠ, a, 0.018);
      }
      oo.save();
      oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
      oo.rotate(this.ⲆⵠᐃⲆⵠ);
      if (this.ⲆΔⵠⵠᐃ === 223) {
        if (this.ΔⵠⵠΔΔ > 50 || this.ⵠⵠᐃⵠΔ > 0) {
          if (this.ΔⵠⵠΔΔ > 50) {
            this.ⵠⵠᐃⵠΔ = Math.min(1, this.ⵠⵠᐃⵠΔ + sx);
          } else {
            this.ⵠⵠᐃⵠΔ = Math.max(0, this.ⵠⵠᐃⵠΔ - sx);
          }
          oo.globalAlpha = this.ⵠⵠᐃⵠΔ;
          var b = ⲆΔ[225][jx.time];
          Bw(225, b, -b.width / 4, -b.height / 4);
          oo.globalAlpha = 1;
        }
        b = ⲆΔ[223][jx.time];
        Bw(223, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆΔⵠⵠᐃ === 229) {
        this.ᐃΔᐃᐃᐃ = ⵠⵠⵠ.ⵠⲆᐃΔⲆ(this.ᐃΔᐃᐃᐃ, this.ΔⵠⵠΔΔ, 0.018);
        this.ⵠⲆᐃΔΔᐃΔ.ᐃⲆᐃ();
        if (this.ΔⵠⵠΔΔ > 85) {
          this.ⵠⵠᐃⵠΔ = Math.min(1, this.ⵠⵠᐃⵠΔ + sx / 4);
        } else {
          this.ⵠⵠᐃⵠΔ = Math.max(0.1, this.ⵠⵠᐃⵠΔ - sx);
        }
        b = ⲆΔ[1100][jx.time];
        Bw(1100, b, -b.width / 4, -b.height / 4);
        b = ⲆΔ[1103][jx.time];
        Δᐃⵠ = -b.width;
        ᐃⵠⵠ = -b.height;
        oo.save();
        oo.translate(Po * -20, Po * -20);
        oo.rotate(this.ⵠⵠᐃⵠΔ * this.ⵠⲆᐃΔΔᐃΔ.ᐃⵠᐃ);
        Jp(oo, b, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
        oo.restore();
        b = ⲆΔ[1106][jx.time];
        oo.save();
        oo.translate(Po * 20, Po * -20);
        oo.rotate(this.ⵠⵠᐃⵠΔ * -this.ⵠⲆᐃΔΔᐃΔ.ᐃⵠᐃ);
        Jp(oo, b, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
        oo.restore();
      } else if (this.ⲆΔⵠⵠᐃ === 228) {
        this.ᐃΔᐃᐃᐃ = ⵠⵠⵠ.ⵠⲆᐃΔⲆ(this.ᐃΔᐃᐃᐃ, this.ΔⵠⵠΔΔ, 0.018);
        this.ⵠⲆᐃΔΔᐃΔ.ᐃⲆᐃ();
        if (this.ΔⵠⵠΔΔ > 85) {
          this.ⵠⵠᐃⵠΔ = Math.min(1, this.ⵠⵠᐃⵠΔ + sx / 4);
        } else {
          this.ⵠⵠᐃⵠΔ = Math.max(0.1, this.ⵠⵠᐃⵠΔ - sx);
        }
        b = ⲆΔ[1085][jx.time];
        Bw(1085, b, -b.width / 4, -b.height / 4);
        b = ⲆΔ[1088][jx.time];
        Δᐃⵠ = -b.width;
        ᐃⵠⵠ = -b.height;
        oo.save();
        oo.translate(Po * -40, Po * -45);
        oo.rotate(this.ⵠⵠᐃⵠΔ * this.ⵠⲆᐃΔΔᐃΔ.ᐃⵠᐃ);
        Jp(oo, b, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
        oo.restore();
        b = ⲆΔ[1091][jx.time];
        oo.save();
        oo.translate(Po * 40, Po * -45);
        oo.rotate(this.ⵠⵠᐃⵠΔ * -this.ⵠⲆᐃΔΔᐃΔ.ᐃⵠᐃ);
        Jp(oo, b, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
        oo.restore();
      } else if (this.ⲆΔⵠⵠᐃ === 227) {
        this.ᐃΔᐃᐃᐃ = ⵠⵠⵠ.ⵠⲆᐃΔⲆ(this.ᐃΔᐃᐃᐃ, this.ΔⵠⵠΔΔ, 0.018);
        this.ⵠⲆᐃΔΔᐃΔ.ᐃⲆᐃ();
        if (this.ΔⵠⵠΔΔ > 85) {
          this.ⵠⵠᐃⵠΔ = Math.min(1, this.ⵠⵠᐃⵠΔ + sx / 4);
        } else {
          this.ⵠⵠᐃⵠΔ = Math.max(0.1, this.ⵠⵠᐃⵠΔ - sx);
        }
        b = ⲆΔ[1070][jx.time];
        Bw(1070, b, -b.width / 4, -b.height / 4);
        b = ⲆΔ[1073][jx.time];
        Δᐃⵠ = -b.width;
        ᐃⵠⵠ = -b.height;
        oo.save();
        oo.translate(Po * -40, Po * -45);
        oo.rotate(this.ⵠⲆᐃΔΔᐃΔ.ᐃⵠᐃ * this.ⵠⵠᐃⵠΔ);
        Jp(oo, b, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
        oo.restore();
        b = ⲆΔ[1076][jx.time];
        oo.save();
        oo.translate(Po * 40, Po * -45);
        oo.rotate(this.ⵠⵠᐃⵠΔ * -this.ⵠⲆᐃΔΔᐃΔ.ᐃⵠᐃ);
        Jp(oo, b, -Δᐃⵠ / 4, -ᐃⵠⵠ / 4, Δᐃⵠ / 2, ᐃⵠⵠ / 2);
        oo.restore();
      } else if (this.ⲆΔⵠⵠᐃ === 91) {
        this.ᐃΔᐃᐃᐃ = ⵠⵠⵠ.ⵠⲆᐃΔⲆ(this.ᐃΔᐃᐃᐃ, this.ΔⵠⵠΔΔ, 0.018);
        b = ⲆΔ[91][jx.time];
        Bw(91, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆΔⵠⵠᐃ === 230) {
        this.ᐃΔᐃᐃᐃ = ⵠⵠⵠ.ⵠⲆᐃΔⲆ(this.ᐃΔᐃᐃᐃ, this.ΔⵠⵠΔΔ, 0.018);
        b = ⲆΔ[236][jx.time];
        Bw(236, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆΔⵠⵠᐃ === 224) {
        b = ⲆΔ[224][jx.time];
        Bw(224, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆΔⵠⵠᐃ === 239) {
        b = ⲆΔ[1221][jx.time];
        if (this.ΔⵠⵠΔΔ > 85) {
          this.ⵠⵠᐃⵠΔ = Math.min(1, this.ⵠⵠᐃⵠΔ + sx / 4);
        } else {
          this.ⵠⵠᐃⵠΔ = Math.max(0, this.ⵠⵠᐃⵠΔ - sx);
        }
        this.ΔⵠᐃΔⵠ += sx * 60;
        if (this.ΔⵠᐃΔⵠ > 60) {
          this.ΔⵠᐃΔⵠ -= 60;
        }
        var c = this.ⵠⵠᐃⵠΔ * ((this.ΔⵠᐃΔⵠ < 30 ? this.ΔⵠᐃΔⵠ / 30 : 1 - (this.ΔⵠᐃΔⵠ - 30) / 30) * 12 - 6);
        Bw(1221, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ⲆΔⵠⵠᐃ === 225) {
        b = ⲆΔ[1043][jx.time];
        if (this.ΔⵠⵠΔΔ > 85) {
          this.ⵠⵠᐃⵠΔ = Math.min(1, this.ⵠⵠᐃⵠΔ + sx / 4);
        } else {
          this.ⵠⵠᐃⵠΔ = Math.max(0, this.ⵠⵠᐃⵠΔ - sx);
        }
        this.ΔⵠᐃΔⵠ += sx * 60;
        if (this.ΔⵠᐃΔⵠ > 60) {
          this.ΔⵠᐃΔⵠ -= 60;
        }
        c = this.ⵠⵠᐃⵠΔ * (-6 + (this.ΔⵠᐃΔⵠ < 30 ? this.ΔⵠᐃΔⵠ / 30 : 1 - (this.ΔⵠᐃΔⵠ - 30) / 30) * 12);
        Bw(1043, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ⲆΔⵠⵠᐃ === 226) {
        var d = Math.PI / 2;
        var e = Math.PI / 4;
        b = ⲆΔ[1055][jx.time];
        if (this.ΔⵠⵠΔΔ > 85) {
          this.ⵠⵠᐃⵠΔ = Math.min(1, this.ⵠⵠᐃⵠΔ + sx / 4);
        } else {
          this.ⵠⵠᐃⵠΔ = Math.max(0, this.ⵠⵠᐃⵠΔ - sx);
        }
        this.ΔⵠᐃΔⵠ += sx * 60;
        if (this.ΔⵠᐃΔⵠ > 60) {
          this.ΔⵠᐃΔⵠ -= 60;
        }
        c = this.ⵠⵠᐃⵠΔ * (-6 + (this.ΔⵠᐃΔⵠ < 30 ? this.ΔⵠᐃΔⵠ / 30 : 1 - (this.ΔⵠᐃΔⵠ - 30) / 30) * 12);
        Bw(1055, b, -b.width / 4 + c, -b.height / 4);
        oo.restore();
        oo.save();
        oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
        oo.rotate(Math.PI + this.ⲆⵠᐃⲆⵠ + e);
        oo.translate(120, c);
        oo.rotate(d);
        b = ⲆΔ[1060][jx.time];
        Δᐃⵠ = -b.width;
        ᐃⵠⵠ = -b.height;
        Jp(oo, b, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
        oo.restore();
        oo.save();
        oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
        oo.rotate(Math.PI + this.ⲆⵠᐃⲆⵠ + d + e);
        oo.translate(120, c);
        oo.rotate(d);
        b = ⲆΔ[1063][jx.time];
        Δᐃⵠ = -b.width;
        ᐃⵠⵠ = -b.height;
        Jp(oo, b, -Δᐃⵠ / 2, -ᐃⵠⵠ / 2, Δᐃⵠ, ᐃⵠⵠ);
      }
      oo.restore();
    }
  }
  function Qv() {
    var b = 0;
    switch (this.right) {
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
        b = 1;
    }
    if (this.ⲆⲆⵠᐃⲆ) {
      for (var c = 0; this.bubbles.length > c; c++) {
        var f = this.bubbles[c];
        if (f.ΔⵠⲆᐃⵠ > 0.5) {
          var j = 1 - (f.ΔⵠⲆᐃⵠ - 0.5) * 2;
        } else {
          j = f.ΔⵠⲆᐃⵠ * 2;
        }
        oo.globalAlpha = j;
        var k = ⲆΔ[540][jx.time][f.id];
        Jp(oo, k, kx.ⲆⲆᐃ.x + f.x - k.width / 2, kx.ⲆⲆᐃ.y + f.y - k.height / 2);
        oo.globalAlpha = 1;
      }
    } else {
      oo.save();
      oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
      jx.ΔΔΔⲆⵠⲆΔⲆΔ(this);
      if (this.action & 16) {
        (function (a) {
          if (a.right >= 0) {
            switch (a.right) {
              case 49:
                oo.save();
                var b = a.attack.ᐃⵠᐃ * -3 / Math.PI;
                if (a.attack.ⲆⲆΔ) {
                  var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ᐃⵠᐃ) / 3;
                } else {
                  c = a.attack.ᐃⵠᐃ;
                }
                oo.rotate(a.angle - Math.PI / 2 + c);
                oo.globalAlpha = b / 1.2;
                Wb(oo, Po * -40, Po * 90, Po * 5);
                Rb(oo, "#0B6A84");
                oo.globalAlpha = b / 1.2;
                Wb(oo, Po * -52, Po * 100, Po * 8);
                Rb(oo, "#0B6A84");
                oo.globalAlpha = b / 1.2;
                Wb(oo, Po * -30, Po * 95, Po * 4);
                Rb(oo, "#0B6A84");
                oo.globalAlpha = 1;
                oo.restore();
                break;
              case 46:
              case 50:
              case 51:
              case 52:
                if (a.ⵠᐃΔΔⵠⲆΔ === 1) {
                  break;
                }
                if (a.ⵠⲆⵠΔⲆ > 0) {
                  var d = Nr.ΔᐃᐃⲆΔΔⵠ[jx.time];
                } else {
                  d = a.ΔΔΔᐃᐃᐃΔ > 0 || a.ⵠⲆᐃⵠΔ > 0 ? Nr.ⵠᐃᐃΔᐃᐃⵠ[jx.time] : Nr.ⵠⵠᐃⲆⲆⲆⵠ[jx.time];
                }
                b = a.attack.ᐃⵠᐃ * -3 / Math.PI;
                if ((c = a.attack.ⲆⲆΔ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0)) === 0) {
                  a.ᐃᐃΔᐃΔΔⲆ = a.angle;
                }
                oo.save();
                oo.rotate(a.ᐃᐃΔᐃΔΔⲆ - Math.PI / 2);
                oo.globalAlpha = b;
                var e = Po * 25 + c * 25;
                Wb(oo, e, Po * 80, Po * 15);
                Rb(oo, d);
                Wb(oo, -e, Po * 80, Po * 15);
                Rb(oo, d);
                oo.globalAlpha = 1;
                oo.restore();
            }
          }
        })(this);
      }
      oo.save();
      oo.rotate(this.angle - Math.PI / 2);
      if (!(this.action & 16)) {
        if (this.action & 64 || this.ⲆΔⵠⵠᐃ !== 0) {
          this.ⲆⵠᐃⲆΔΔⲆ.ᐃⲆᐃ();
        } else if (this.action & 32) {
          this.ΔΔΔⲆⵠΔᐃ.ᐃⲆᐃ();
        }
      }
      var p;
      var q = this.ⲆⵠᐃⲆΔΔⲆ.ᐃⵠᐃ;
      var s = this.ΔΔΔⲆⵠΔᐃ.ᐃⵠᐃ;
      if (this.ⲆΔⲆⲆΔ === 85) {
        k = ⲆΔ[793][jx.time];
        p = 793;
      } else if (this.ⲆΔⲆⲆΔ === 20) {
        k = ⲆΔ[920][jx.time];
        p = 920;
      } else if (this.ⲆΔⲆⲆΔ === 21) {
        k = ⲆΔ[924][jx.time];
        p = 924;
      } else if (this.ⲆΔⲆⲆΔ === 22) {
        k = ⲆΔ[928][jx.time];
        p = 928;
      } else if (this.ΔᐃΔΔᐃⲆⲆ) {
        k = ⲆΔ[822][jx.time];
        p = 822;
      } else {
        k = ⲆΔ[7][this.Ⲇᐃⵠᐃ][jx.time];
        p = 7;
      }
      ΔⵠᐃⲆ = ⲆΔ[286][jx.time];
      var w = k;
      var g = p;
      if (this.action & 16) {
        if (this.attack.ᐃⲆᐃ() && cr == this.attack.ⲆⲆΔ) {
          this.ⲆᐃⲆᐃⲆ = !this.ⲆᐃⲆᐃⲆ;
          this.action -= 16;
          if (kx.ᐃⲆΔⵠ == this.ᐃⲆΔⵠ) {
            kx.control.ᐃΔΔⲆ = 0;
          }
        }
        if (this.right >= 0) {
          this.ⲆᐃⲆᐃⲆ = Ka;
        }
        var l = this.ⲆᐃⲆᐃⲆ ? this.attack.ᐃⵠᐃ : -this.attack.ᐃⵠᐃ / 3;
        var x = this.ⲆᐃⲆᐃⲆ ? this.attack.ᐃⵠᐃ / 3 : -this.attack.ᐃⵠᐃ;
        if (this.ΔᐃΔΔᐃⲆⲆ) {
          oo.save();
          oo.rotate(l);
          ww(p, k, -k.width / 2 - (66 + q) * Po, -k.height / 2 + (5 + s) * Po);
          oo.restore();
          oo.save();
          oo.rotate(x);
          ww(p, k, -k.width / 2 + (66 + q) * Po, -k.height / 2 + (5 + s) * Po);
          oo.restore();
        } else if (b === 0) {
          if (this.right === 64) {
            l = -ⵠⵠⵠ.ⵠⵠⵠᐃⲆᐃᐃ(-l);
          }
          oo.save();
          oo.rotate(l);
          ww(286, ΔⵠᐃⲆ, -ΔⵠᐃⲆ.width / 2 - (49 + q) * Po, -ΔⵠᐃⲆ.height / 2 + Po * (15 + s));
          if (this.right === 28) {
            var d = ⲆΔ[this.right][this.ⵠⲆⲆᐃⵠ][jx.time];
            kw(this.right, this.ⵠⲆⲆᐃⵠ, d, -d.width / 4 - Po * (62 + q), -d.height / 4 + Po * (s + 18));
          } else {
            mv(this.right, q, s);
          }
          if (p >= 920) {
            Bw(p, k, -k.width / 4 - Po * (49 + q), -k.height / 4 + (11 + s) * Po);
          } else if (p !== 793) {
            kw(p, this.Ⲇᐃⵠᐃ, k, -k.width / 4 - (49 + q) * Po, -k.height / 4 + (11 + s) * Po);
          } else {
            ww(p, k, -k.width / 2 - (49 + q) * Po, -k.height / 2 + Po * (11 + s));
          }
          oo.restore();
          oo.save();
          oo.rotate(x);
          ww(286, ΔⵠᐃⲆ, -ΔⵠᐃⲆ.width / 2 + (49 + q) * Po, -ΔⵠᐃⲆ.height / 2 + (15 + s) * Po);
          if (p >= 920) {
            Bw(p, k, -k.width / 4 + Po * (49 + q), -k.height / 4 + (11 + s) * Po);
          } else if (p !== 793) {
            kw(p, this.Ⲇᐃⵠᐃ, k, -k.width / 4 + (49 + q) * Po, -k.height / 4 + Po * (11 + s));
          } else {
            ww(p, k, -k.width / 2 + Po * (49 + q), -k.height / 2 + (11 + s) * Po);
          }
          oo.restore();
        }
      } else if (this.ΔᐃΔΔᐃⲆⲆ) {
        ww(p, k, -k.width / 2 - (66 + q) * Po, -k.height / 2 + (5 + s) * Po);
        ww(p, k, -k.width / 2 + Po * (66 + q), -k.height / 2 + Po * (5 + s));
      } else if (b === 0) {
        ww(286, ΔⵠᐃⲆ, -ΔⵠᐃⲆ.width / 2 - (49 + q) * Po, -ΔⵠᐃⲆ.height / 2 + (15 + s) * Po);
        if (this.right === 28) {
          d = ⲆΔ[this.right][this.ⵠⲆⲆᐃⵠ][jx.time];
          kw(this.right, this.ⵠⲆⲆᐃⵠ, d, -d.width / 4 - (62 + q) * Po, -d.height / 4 + Po * (s + 18));
        } else {
          mv(this.right, q, s);
        }
        if (p >= 920) {
          Bw(p, k, -k.width / 4 - (49 + q) * Po, -k.height / 4 + (11 + s) * Po);
        } else if (p !== 793) {
          kw(p, this.Ⲇᐃⵠᐃ, k, -k.width / 4 - Po * (49 + q), -k.height / 4 + (11 + s) * Po);
        } else {
          ww(p, k, -k.width / 2 - (49 + q) * Po, -k.height / 2 + (11 + s) * Po);
        }
        ww(286, ΔⵠᐃⲆ, -ΔⵠᐃⲆ.width / 2 + (49 + q) * Po, -ΔⵠᐃⲆ.height / 2 + Po * (15 + s));
        if (p >= 920) {
          Bw(p, k, -k.width / 4 + Po * (49 + q), -k.height / 4 + (11 + s) * Po);
        } else if (p !== 793) {
          kw(p, this.Ⲇᐃⵠᐃ, k, -k.width / 4 + (49 + q) * Po, -k.height / 4 + Po * (11 + s));
        } else {
          ww(p, k, -k.width / 2 + (49 + q) * Po, -k.height / 2 + Po * (11 + s));
        }
      }
      if (this.ⵠᐃⲆⵠᐃ && this.ⲆΔⲆⲆΔ < 1) {
        k = ⲆΔ[29][this.ΔⵠⵠΔⵠΔⵠ][jx.time];
        kw(29, this.ΔⵠⵠΔⵠΔⵠ, k, -k.width / 4, -k.height / 4 - Po * 39);
      }
      if (this.ΔᐃΔΔᐃⲆⲆ) {
        k = ⲆΔ[820][jx.time];
        ww(820, k, -k.width / 2, -k.height / 2);
        this.ⵠⲆⲆΔⲆⲆᐃ.ᐃⲆᐃ();
        k = ⲆΔ[821][jx.time];
        ww(821, k, -k.width / 2, -k.height / 2 + this.ⵠⲆⲆΔⲆⲆᐃ.ᐃⵠᐃ);
      } else {
        k = ⲆΔ[255][this.Ⲇᐃⵠᐃ][jx.time];
        if (this.ⲆΔⲆⲆΔ !== 85 && (kw(255, this.Ⲇᐃⵠᐃ, k, -k.width / 4, -k.height / 4), this.ⵠᐃⲆᐃΔ > 0)) {
          k = ⲆΔ[796][this.ⵠᐃⲆᐃΔ][jx.time];
          kw(796, this.ⵠᐃⲆᐃΔ, k, -k.width / 4, -k.height / 4);
        }
      }
      if (this.action & 128) {
        if (this.ᐃⲆⵠⵠᐃ.ᐃⲆᐃ() && this.ᐃⲆⵠⵠᐃ.ⲆⲆΔ == In) {
          this.action -= 128;
        }
        oo.globalAlpha = 0.6 - this.ᐃⲆⵠⵠᐃ.ᐃⵠᐃ;
        if (this.ΔᐃΔΔᐃⲆⲆ) {
          k = ⲆΔ[825];
          Jp(oo, k, -k.width / 2, -k.height / 2);
        } else {
          k = Tv(this.Ⲇᐃⵠᐃ, ⲆΔ[255][this.Ⲇᐃⵠᐃ][0], ⵠᐃᐃᐃⲆⵠⲆΔⲆ);
          Jp(oo, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
        }
        oo.globalAlpha = 1;
      }
      if (this.action & 256) {
        if (this.ⲆᐃⵠΔᐃⲆⲆ.ᐃⲆᐃ() && ye == this.ⲆᐃⵠΔᐃⲆⲆ.ⲆⲆΔ) {
          this.action -= 256;
        }
        oo.globalAlpha = 0.6 - this.ⲆᐃⵠΔᐃⲆⲆ.ᐃⵠᐃ;
        k = ⲆΔ[266];
        Jp(oo, k, -k.width / 2, -k.height / 2);
        oo.globalAlpha = 1;
      }
      if (this.action & 2) {
        if (this.ᐃⵠΔ.ᐃⲆᐃ() && In == this.ᐃⵠΔ.ⲆⲆΔ) {
          this.action -= 2;
        }
        oo.globalAlpha = 0.6 - this.ᐃⵠΔ.ᐃⵠᐃ;
        if (this.ΔᐃΔΔᐃⲆⲆ) {
          k = ⲆΔ[823];
          Jp(oo, k, -k.width / 2, -k.height / 2);
        } else {
          k = Tv(this.Ⲇᐃⵠᐃ, ⲆΔ[255][this.Ⲇᐃⵠᐃ][0], ⲆΔⵠⵠΔⵠⲆⵠⲆ);
          Jp(oo, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
        }
        oo.globalAlpha = 1;
      }
      if (this.action & 4) {
        if (this.freeze.ᐃⲆᐃ() && this.freeze.ⲆⲆΔ == 0) {
          this.action -= 4;
        }
        oo.globalAlpha = 0.6 - this.freeze.ᐃⵠᐃ;
        k = Tv(this.Ⲇᐃⵠᐃ, ⲆΔ[255][this.Ⲇᐃⵠᐃ][0], ᐃⵠⲆᐃᐃⵠⵠⵠⲆ);
        Jp(oo, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
        oo.globalAlpha = 1;
      }
      if (this.action & 8) {
        if (this.ⵠᐃⲆΔⵠᐃΔ.ᐃⲆᐃ() && this.ⵠᐃⲆΔⵠᐃΔ.ⲆⲆΔ == 0) {
          this.action -= 8;
        }
        oo.globalAlpha = 0.6 - this.ⵠᐃⲆΔⵠᐃΔ.ᐃⵠᐃ;
        if (this.ΔᐃΔΔᐃⲆⲆ) {
          k = ⲆΔ[824];
          Jp(oo, k, -k.width / 2, -k.height / 2);
        } else {
          k = Tv(this.Ⲇᐃⵠᐃ, ⲆΔ[255][this.Ⲇᐃⵠᐃ][0], ⵠⲆᐃⵠΔⵠΔᐃⲆ);
          Jp(oo, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
        }
        oo.globalAlpha = 1;
      }
      Ov(this.ⲆΔⲆⲆΔ);
      if (b === 1) {
        if (this.action & 16) {
          q += this.attack.ᐃⵠᐃ * 15;
        }
        ww(286, ΔⵠᐃⲆ, -ΔⵠᐃⲆ.width / 2 - Po * 26, -ΔⵠᐃⲆ.height / 2 + (31 + s + q) * Po);
        if (g >= 920) {
          Bw(g, w, -w.width / 4 - Po * 26, -w.height / 4 + (27 + s + q) * Po);
        } else if (g !== 793) {
          kw(g, this.Ⲇᐃⵠᐃ, w, -w.width / 4 - Po * 26, -w.height / 4 + (27 + s + q) * Po);
        } else {
          ww(g, w, -w.width / 2 - Po * 26, -w.height / 2 + Po * (27 + s + q));
        }
        ww(286, ΔⵠᐃⲆ, -ΔⵠᐃⲆ.width / 2 + Po * 26, -ΔⵠᐃⲆ.height / 2 + (31 + s + q) * Po);
        if (g >= 920) {
          Bw(g, w, -w.width / 4 + Po * 26, -w.height / 4 + (27 + s + q) * Po);
        } else if (g !== 793) {
          kw(g, this.Ⲇᐃⵠᐃ, w, -w.width / 4 + Po * 26, -w.height / 4 + Po * (27 + s + q));
        } else {
          ww(g, w, -w.width / 2 + Po * 26, -w.height / 2 + Po * (27 + s + q));
        }
        yv(this.right, 0, s + q);
      }
      oo.restore();
      if (this.ⲆΔⲆⲆΔ !== 83 && this.ⲆΔⲆⲆΔ !== 85) {
        if (this.ⵠⲆⵠΔⲆ > 0) {
          if (!this.ⲆⲆΔᐃ.ΔΔⲆⲆΔᐃⲆ) {
            this.ⲆⲆΔᐃ.ΔΔⲆⲆΔᐃⲆ = ou(Po, this.ⲆⲆΔᐃ.ᐃΔᐃⲆΔ, 20, "#187484", "#000", 2, null, null, Po * 300);
          }
          k = this.ⲆⲆΔᐃ.ΔΔⲆⲆΔᐃⲆ;
        } else {
          this.ⲆⲆΔᐃ.label ||= ou(Po, this.ⲆⲆΔᐃ.ᐃΔᐃⲆΔ, 20, "#FFF", "#000", 2, null, null, Po * 300);
          k = this.ⲆⲆΔᐃ.label;
        }
        if (Nr.ᐃᐃᐃ == jx.ⵠᐃⲆ) {
          oo.globalAlpha = 0.5;
        }
        q = Math.floor(-k.width / 2);
        s = Math.floor(-k.height / 2 - Po * 70);
        Jp(oo, k, q, s);
        if (this.ⲆⲆΔᐃ.level > 0) {
          var y = q + k.width + 5;
          k = ⲆΔ[885];
          if (ΔᐃᐃΔᐃΔᐃ[this.ⲆⲆΔᐃ.level] === gs) {
            ΔᐃᐃΔᐃΔᐃ[this.ⲆⲆΔᐃ.level] = ou(Po, "[" + this.ⲆⲆΔᐃ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, Po * 50);
          }
          Jp(oo, ΔᐃᐃΔᐃΔᐃ[this.ⲆⲆΔᐃ.level], y, s);
        }
        oo.globalAlpha = 1;
      } else {
        s = Math.floor(Po * -70);
        q = Math.floor(ⲆΔ[558].width / 1.5);
      }
      if (kx.ⲆᐃⵠⲆΔᐃΔ(this.ᐃⲆⲆⲆ)) {
        if (this.ᐃⲆⲆⲆ == kx.ⵠⲆΔⵠᐃ[0]) {
          k = ⲆΔ[559];
        } else {
          k = ⲆΔ[558];
        }
        Jp(oo, k, q - k.width - 5, s - 6);
      }
      oo.restore();
    }
  }
  function Rv() {
    if (Tg !== this.message) {
      var a = kx.ᐃΔΔⵠ.ⲆΔⵠᐃⲆ.length > 0 ? -95 : 0;
      Jp(oo, this.message, 0, yo - this.message.height + a);
    }
  }
  function Sv() {
    if (this.enabled && this.ᐃⲆⵠΔⲆ >= 0) {
      var a = new Date().getTime() - this.ᐃⲆⵠΔⲆ;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = 1 - (b - 0.5) * 2;
      } else {
        b *= 2;
      }
      if ((a = Math.floor(a / 1000)) < 60) {
        a = 60 - a;
        this.label ||= ou(Po, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        if (a != this.now || !this.ΔⵠⲆⵠⵠⵠΔ) {
          this.now = a;
          this.ΔⵠⲆⵠⵠⵠΔ = ou(Po, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        Jp(oo, this.label, (so - this.label.width) / 2, Po * 100);
        oo.globalAlpha = b;
        Jp(oo, this.ΔⵠⲆⵠⵠⵠΔ, (so - this.label.width) / 2 - this.ΔⵠⲆⵠⵠⵠΔ.width + Po * 15, Po * 100);
        oo.globalAlpha = 1;
      }
    }
  }
  function Tv(b, c, d) {
    if (c.ⵠΔΔⵠΔⵠⲆ() !== 1) {
      return c;
    }
    var e = ΔⵠⲆⲆΔⲆᐃ[d][b];
    if (e === undefined) {
      var f = (e = document.createElement("canvas")).getContext("2d");
      var g = c.width;
      var a = c.height;
      e.width = g;
      e.height = a;
      f.drawImage(c, 0, 0);
      f.globalCompositeOperation = "source-in";
      f.fillStyle = ΔⵠⲆᐃΔΔⵠΔᐃ[d];
      f.fillRect(0, 0, g, a);
      ΔⵠⲆⲆΔⲆᐃ[d][b] = e;
    }
    return e;
  }
  function Uv(a, b) {
    if (this.text) {
      if (this.timeout.ⲆⲆΔ) {
        oo.globalAlpha = 1 - this.timeout.ᐃⵠᐃ;
      } else {
        oo.globalAlpha = 1;
      }
      if (!this.label) {
        this.label = ou(Po, this.text, 40, a, null, null, null, null, null, b, 10);
      }
      Jp(oo, this.label, (so - this.label.width) / 2, Po * 50);
      oo.globalAlpha = 1;
      if (this.timeout.ᐃⲆᐃ() && Zj == this.timeout.ⲆⲆΔ) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  function Wv() {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + this.x, kx.ⲆⲆᐃ.y + this.y);
    if (this.text.length > 0) {
      for (var a = 0; a < this.text.length && a < 2; a++) {
        if (!this.label[a]) {
          this.label[a] = Yb(Po, this.text[a]);
          this.ⵠᐃΔⲆⵠᐃⵠ[a] = 0;
          this.ΔⵠΔΔⲆᐃΔ[a] = 0;
        }
        if (a === 1) {
          this.ΔⵠΔΔⲆᐃΔ[0] = ⵠⵠⵠ.ⲆΔⵠⲆΔ(this.ΔΔⵠᐃᐃΔⵠ) * 30;
        }
      }
      this.ⵠᐃΔⲆⵠᐃⵠ[0] += sx;
      if (this.text.length > 1) {
        this.ΔΔⵠᐃᐃΔⵠ = Math.min(this.ΔΔⵠᐃᐃΔⵠ + sx, 1);
        if (this.ⵠᐃΔⲆⵠᐃⵠ[0] > 1 && this.ΔΔⵠᐃᐃΔⵠ > 0.5) {
          this.ⵠᐃΔⲆⵠᐃⵠ[1] += sx;
        }
      }
      for (a = 0; this.text.length > a && a < 2; a++) {
        var b = this.ⵠᐃΔⲆⵠᐃⵠ[a];
        if (b > 0) {
          oo.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
          Jp(oo, this.label[a], -this.label[a].width / 2, -this.ΔⵠΔΔⲆᐃΔ[a] + -this.label[a].height / 2 - Po * 110);
        }
      }
      if (this.ⵠᐃΔⲆⵠᐃⵠ[0] > 4) {
        this.ⵠᐃΔⲆⵠᐃⵠ.shift();
        this.text.shift();
        this.ΔⵠΔΔⲆᐃΔ.shift();
        this.label.shift();
        this.ΔΔⵠᐃᐃΔⵠ = 0;
      }
    }
    oo.restore();
  }
  ⲆΔⵠⵠΔⵠⲆⵠⲆ = 0;
  ⵠᐃᐃᐃⲆⵠⲆΔⲆ = 1;
  ᐃⵠⲆᐃᐃⵠⵠⵠⲆ = 2;
  ⵠⲆᐃⵠΔⵠΔᐃⲆ = 3;
  ΔⵠⲆΔᐃΔⵠᐃΔ = 4;
  ΔⵠⲆⲆΔⲆᐃ = [[], [], [], [], []];
  ΔⵠⲆᐃΔΔⵠΔᐃ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var Xv = 0;
  function Yv(j, e, i, k, n, o, a, q) {
    if (q === gs) {
      q = 0;
    }
    for (var r = a; r >= q; r--) {
      for (var t = j; e >= t; t++) {
        for (var x = i; x <= k; x++) {
          var y = gx.ⵠⲆᐃᐃ[t][x];
          if (y && y[o]) {
            var z = y[o][r];
            if (w !== z) {
              for (var A = 0; A < z.length; A++) {
                var B = z[A];
                var D = ⲆΔ[n][jx.time][r];
                var E = (Xv + (t + x) * 3) % 60;
                var F = E < 30 ? E / 30 : 1 - (E - 30) / 30;
                var G = (1 + F * 0.9 / 30) * -D.width;
                var H = -D.height * (1 + F * 0.9 / 30);
                F = (E = (Xv + (t + x) * 7) % 60) < 30 ? E / 30 : 1 - (E - 30) / 30;
                var I = oo.globalAlpha;
                oo.globalAlpha = I * (0.9 + F * 0.1);
                Jp(oo, D, kx.ⲆⲆᐃ.x + B.x - G / 2, kx.ⲆⲆᐃ.y + B.y - H / 2, G, H);
                oo.globalAlpha = I;
              }
            }
          }
        }
      }
    }
  }
  function Zv(j, e, i, k, n, o, a, q = 0) {
    jx.ⵠⲆⵠΔ[n].ᐃⲆᐃ();
    for (var r = a; r >= q; r--) {
      for (var s = j; s <= e; s++) {
        for (var t = i; k >= t; t++) {
          var w = gx.ⵠⲆᐃᐃ[s][t];
          if (w && w[o]) {
            var x = w[o][r];
            if (x !== Yk) {
              for (var y = 0; y < x.length; y++) {
                var A = x[y];
                if (A.ᐃⲆᐃ) {
                  if (A.ᐃⵠΔ.ᐃⲆᐃ() && A.ᐃⵠΔ.ⲆⲆΔ == 0) {
                    A.ᐃⲆᐃ = C;
                  }
                  var B = Po * ((1 - A.ᐃⵠΔ.ᐃⵠᐃ) * sx * 600);
                  var D = Math.sin(A.angle) * B;
                  var E = Math.cos(A.angle) * B;
                } else {
                  D = 0;
                  E = 0;
                }
                var F = ⲆΔ[n][jx.time][r];
                var G = -F.width * jx.ⵠⲆⵠΔ[n].ᐃⵠᐃ;
                var H = -F.height * jx.ⵠⲆⵠΔ[n].ᐃⵠᐃ;
                Jp(oo, F, kx.ⲆⲆᐃ.x + A.x - G / 2 + D, kx.ⲆⲆᐃ.y + A.y - H / 2 + E, G, H);
              }
            }
          }
        }
      }
    }
  }
  var $v = [];
  for (ub = 0; ub < 100; ub++) {
    var _v = 1;
    if (Math.random() < 0.25) {
      _v = 0;
    }
    $v.push(_v);
  }
  function aw(c, e, f, i, j, k, a, m = 0, n) {
    for (var h = c; h <= e; h++) {
      for (var o = f; i >= o; o++) {
        var p = gx.ⵠⲆᐃᐃ[h][o];
        if (Tg !== p && hj !== p[k]) {
          var q = p[k];
          if (q !== Xa) {
            if (q.scale === 1) {
              var r = ⲆΔ[j][jx.time][q.ⲆⲆⵠᐃᐃ];
              oo.save();
              oo.translate(kx.ⲆⲆᐃ.x + q.x, kx.ⲆⲆᐃ.y + q.y);
              oo.rotate(q.angle);
              Jp(oo, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
              oo.restore();
            } else if (q.scale === 3) {
              for (var s = 0; q.ΔΔΔ.length > s; s++) {
                oo.save();
                oo.translate(kx.ⲆⲆᐃ.x + q.x, kx.ⲆⲆᐃ.y + q.y);
                oo.rotate(q.ΔΔΔ[s].angle);
                r = ⲆΔ[j][jx.time][q.ΔΔΔ[s].ⲆⲆⵠᐃᐃ];
                Jp(oo, r, -r.width / 3 + q.ΔΔΔ[s].x, -r.height / 3 + q.ΔΔΔ[s].y, r.width / 1.5, r.height / 1.5);
                oo.restore();
              }
            } else {
              r = ⲆΔ[j][jx.time][q.ⲆⲆⵠᐃᐃ];
              oo.save();
              oo.translate(kx.ⲆⲆᐃ.x + q.x, kx.ⲆⲆᐃ.y + q.y);
              oo.rotate(q.angle);
              Jp(oo, r, -r.width / 2, -r.height / 2, r.width, r.height);
              oo.restore();
            }
          }
        }
      }
    }
  }
  function bw(j, e, i, k, n, o, a, q, r) {
    if (q === wh) {
      q = 0;
    }
    for (var h = a; h >= q; h--) {
      for (var t = j; e >= t; t++) {
        for (var w = i; w <= k; w++) {
          var x = gx.ⵠⲆᐃᐃ[t][w];
          if (gs !== x && x[o] !== undefined) {
            var A = x[o][h];
            if (gs !== A) {
              for (var B = 0; A.length > B; B++) {
                var D = A[B];
                if (D.ᐃⲆᐃ) {
                  if (D.ᐃⵠΔ.ᐃⲆᐃ() && D.ᐃⵠΔ.ⲆⲆΔ == 0) {
                    D.ᐃⲆᐃ = zl;
                  }
                  var E = sx * (1 - D.ᐃⵠΔ.ᐃⵠᐃ) * 600 * Po;
                  var F = E * Math.sin(D.angle);
                  var G = Math.cos(D.angle) * E;
                } else {
                  F = 0;
                  G = 0;
                }
                for (var H = 0; H < ⵠⲆⵠΔΔⵠⲆ[h].ΔΔᐃᐃ; H++) {
                  if (rx !== jx.ⵠΔΔΔⵠ[H].ᐃᐃᐃⵠᐃ) {
                    jx.ⵠΔΔΔⵠ[H].ᐃⲆᐃ();
                    jx.ⵠΔΔΔⵠ[H].ᐃᐃᐃⵠᐃ = rx;
                  }
                  var I = ⲆΔ[941][jx.time][ⵠⲆⵠΔΔⵠⲆ[h].ΔᐃΔⲆ[H].ΔⵠΔ];
                  var J = jx.ⵠΔΔΔⵠ[H].ᐃⵠᐃ * -I.width;
                  var K = jx.ⵠΔΔΔⵠ[H].ᐃⵠᐃ * -I.height;
                  Jp(oo, I, kx.ⲆⲆᐃ.x + D.x - J / 4 + F + ⵠⲆⵠΔΔⵠⲆ[h].ΔᐃΔⲆ[H].x, kx.ⲆⲆᐃ.y + D.y - K / 4 + G + ⵠⲆⵠΔΔⵠⲆ[h].ΔᐃΔⲆ[H].y, J / 2, K / 2);
                }
              }
            }
          }
        }
      }
    }
  }
  function cw(f, e, i, j, k, n, a, o = 0, q) {
    for (var h = a; o <= h; h--) {
      for (var r = f; r <= e; r++) {
        for (var s = i; s <= j; s++) {
          if (q <= 0 || $v[(r + s * q) % $v.length] !== 1) {
            var t = gx.ⵠⲆᐃᐃ[r][s];
            if (t !== Aq && t[n] !== undefined) {
              var w = t[n][h];
              if (w !== undefined) {
                for (var x = 0; x < w.length; x++) {
                  var y = w[x];
                  if (y.ᐃⲆᐃ) {
                    if (y.ᐃⵠΔ.ᐃⲆᐃ() && y.ᐃⵠΔ.ⲆⲆΔ == 0) {
                      y.ᐃⲆᐃ = ye;
                    }
                    var z = sx * (1 - y.ᐃⵠΔ.ᐃⵠᐃ) * 600 * Po;
                    var A = Math.sin(y.angle) * z;
                    var B = Math.cos(y.angle) * z;
                  } else {
                    A = 0;
                    B = 0;
                  }
                  var D = ⲆΔ[k][jx.time][h];
                  Jp(oo, D, kx.ⲆⲆᐃ.x + y.x - D.width / (ⵠⵠᐃⲆΔ * 2) + A, kx.ⲆⲆᐃ.y + y.y - D.height / (ⵠⵠᐃⲆΔ * 2) + B, D.width / ⵠⵠᐃⲆΔ, D.height / ⵠⵠᐃⲆΔ);
                }
              }
            }
          }
        }
      }
    }
  }
  ⵠⵠᐃⲆΔ = 1;
  ⵠⲆⵠΔΔⵠⲆ = [{
    ΔΔᐃᐃ: 10,
    ΔᐃΔⲆ: [{
      ΔⵠΔ: 0,
      x: -128,
      y: -20
    }, {
      ΔⵠΔ: 1,
      y: -4,
      x: -86
    }, {
      y: -74,
      x: -60,
      ΔⵠΔ: 2
    }, {
      x: -22,
      ΔⵠΔ: 0,
      y: -144
    }, {
      x: -58,
      ΔⵠΔ: 0,
      y: 86
    }, {
      x: 3,
      y: -30,
      ΔⵠΔ: 0
    }, {
      ΔⵠΔ: 1,
      y: -115,
      x: 65
    }, {
      ΔⵠΔ: 0,
      x: 118,
      y: -50
    }, {
      ΔⵠΔ: 1,
      x: 73,
      y: 15
    }, {
      y: 79,
      ΔⵠΔ: 0,
      x: 67
    }]
  }, {
    ΔΔᐃᐃ: 5,
    ΔᐃΔⲆ: [{
      ΔⵠΔ: 0,
      x: -45,
      y: -26
    }, {
      x: -45,
      ΔⵠΔ: 2,
      y: 20
    }, {
      ΔⵠΔ: 1,
      y: -60,
      x: 10
    }, {
      x: 52,
      y: -17,
      ΔⵠΔ: 1
    }, {
      x: 14,
      ΔⵠΔ: 0,
      y: 45
    }]
  }, {
    ΔΔᐃᐃ: 3,
    ΔᐃΔⲆ: [{
      y: 3,
      ΔⵠΔ: 2,
      x: -30
    }, {
      x: 7,
      ΔⵠΔ: 2,
      y: -38
    }, {
      y: 5,
      x: 37,
      ΔⵠΔ: 2
    }]
  }, {
    ΔΔᐃᐃ: 11,
    ΔᐃΔⲆ: [{
      x: -74,
      y: -87,
      ΔⵠΔ: 2
    }, {
      x: -11,
      y: -10,
      ΔⵠΔ: 1
    }, {
      ΔⵠΔ: 1,
      y: 17,
      x: -99
    }, {
      ΔⵠΔ: 0,
      x: -66,
      y: 84
    }, {
      y: 123,
      x: -55,
      ΔⵠΔ: 1
    }, {
      x: 10,
      y: 81,
      ΔⵠΔ: 2
    }, {
      ΔⵠΔ: 0,
      x: 52,
      y: 50
    }, {
      x: 138,
      y: 9,
      ΔⵠΔ: 1
    }, {
      y: -28,
      ΔⵠΔ: 0,
      x: 104
    }, {
      ΔⵠΔ: 2,
      y: -56,
      x: 67
    }, {
      x: 5,
      ΔⵠΔ: 0,
      y: -112
    }]
  }, {
    ΔΔᐃᐃ: 6,
    ΔᐃΔⲆ: [{
      y: -66,
      ΔⵠΔ: 2,
      x: -33
    }, {
      ΔⵠΔ: 0,
      y: 10,
      x: -58
    }, {
      x: -19,
      y: 44,
      ΔⵠΔ: 1
    }, {
      y: 20,
      x: 44,
      ΔⵠΔ: 0
    }, {
      x: 53,
      y: -36,
      ΔⵠΔ: 2
    }, {
      y: -62,
      ΔⵠΔ: 0,
      x: 7
    }]
  }, {
    ΔᐃΔⲆ: [{
      y: -25,
      x: -19,
      ΔⵠΔ: 1
    }, {
      x: -29,
      y: 13,
      ΔⵠΔ: 2
    }, {
      y: 12,
      ΔⵠΔ: 0,
      x: 12
    }],
    ΔΔᐃᐃ: 3
  }];
  var dw = 0;
  var ew = 0;
  var fw = 0;
  var gw = 0;
  function hw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = kx.ⲆⲆᐃ.x + f + 820;
    var g = Math.max(kx.ⲆⲆᐃ.y + e, 0);
    var l = Math.max(-kx.ⲆⲆᐃ.y + yo - i - 100, 0);
    var r = g;
    var b = yo - g - l;
    if (n) {
      var d = j.ΔⵠΔ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.ΔⵠΔ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.ΔⵠΔ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h - 350 - s - d) < u) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.ΔⲆⲆⲆⲆⲆᐃ === 1) {
      if (jx.transition) {
        var p = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
        oo.fillStyle = Aw(15, 77, 72, 252, 239, 187, p);
      } else {
        oo.fillStyle = Nr.ΔᐃᐃΔⵠⲆⲆ[jx.time];
      }
      oo.fillRect(s, r, t, b);
    } else {
      if (jx.transition) {
        p = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
        oo.fillStyle = Aw(k.Ⲇⵠᐃ[0], k.Ⲇⵠᐃ[1], k.Ⲇⵠᐃ[2], k.ⵠᐃⲆ[0], k.ⵠᐃⲆ[1], k.ⵠᐃⲆ[2], p);
      } else {
        oo.fillStyle = k.ᐃᐃᐃΔΔ[jx.time];
      }
      oo.fillRect(s, r, t, b);
    }
  }
  function iw(a) {
    oo.save();
    oo.translate(kx.ⲆⲆᐃ.x + a.x, kx.ⲆⲆᐃ.y + a.y);
    oo.rotate(a.angle);
    oo.globalAlpha = a.alpha;
    var b = ⲆΔ[a.id][jx.time];
    Jp(oo, b, -b.width / 2, -b.height / 2);
    oo.globalAlpha = 1;
    oo.restore();
  }
  function jw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = kx.ⲆⲆᐃ.x + j - 700;
    var g = Math.max(kx.ⲆⲆᐃ.y + e, 0);
    var l = Math.max(-kx.ⲆⲆᐃ.y + yo - i - 100, 0);
    var t = g;
    var b = yo - g - l;
    if (o) {
      var d = q.ΔⵠΔ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var w = u;
    var c = t;
    var p = d.x + 0;
    var C = b;
    var F = u += d.x + 0 - 2;
    if (o) {
      d = q.ΔⵠΔ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var G = u;
    var y = t;
    var H = f;
    var A = b;
    var k = (u += f - 2) - 2;
    if (o) {
      d = q.ΔⵠΔ(s);
    } else {
      d = s.r;
    }
    if (k < u + (f = h + 350 - u + d.x) - 3) {
      var x = yn;
      var K = u;
      var B = t;
      var D = f;
      var I = b;
      var E = u += f - 2;
    } else {
      x = T;
      u = k;
      E = -1;
    }
    f = h + 700 - u;
    if (jx.transition) {
      var L = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
      oo.fillStyle = Aw(9, 55, 63, 11, 106, 132, L);
    } else {
      oo.fillStyle = Nr.ⲆᐃⲆⵠⵠ[jx.time];
    }
    oo.fillRect(w, c, p, C);
    if (o) {
      if (jx.transition) {
        L = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
        oo.fillStyle = Aw(15, 70, 76, 42, 139, 155, L);
      } else {
        oo.fillStyle = Nr.ΔⵠⵠⲆⵠⵠⲆ[jx.time];
      }
    } else if (jx.transition) {
      L = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
      oo.fillStyle = Aw(9, 55, 63, 11, 106, 132, L);
    } else {
      oo.fillStyle = Nr.ⲆᐃⲆⵠⵠ[jx.time];
    }
    oo.fillRect(G, y, H, A);
    if (x) {
      if (o) {
        if (jx.transition) {
          L = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
          oo.fillStyle = Aw(17, 94, 96, 169, 214, 211, L);
        } else {
          oo.fillStyle = Nr.ⲆΔⵠⲆᐃⲆΔ[jx.time];
        }
      } else if (jx.transition) {
        L = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
        oo.fillStyle = Aw(9, 55, 63, 11, 106, 132, L);
      } else {
        oo.fillStyle = Nr.ⲆᐃⲆⵠⵠ[jx.time];
      }
      oo.fillRect(K, B, D, I);
    }
    if (ix.ⵠᐃⲆᐃⲆ && o) {
      q.ΔΔΔⵠΔᐃΔⵠΔ(k, E, F, h, -kx.ⲆⲆᐃ.y + c, -kx.ⲆⲆᐃ.y + c + C);
    }
  }
  function kw(b, c, d, e, f) {
    var g = d.width;
    var a = d.height;
    var i = Math.floor(g / 2);
    var j = Math.floor(a / 2);
    if (jx.transition) {
      oo.globalAlpha = 1;
      Jp(oo, ⲆΔ[b][c][jx.time], 0, 0, g, a, e, f, i, j);
      jx.time = jx.time ? 0 : 1;
      oo.globalAlpha = 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
      Jp(oo, ⲆΔ[b][c][jx.time], 0, 0, g, a, e, f, i, j);
      jx.time = jx.time ? 0 : 1;
      oo.globalAlpha = 1;
    } else {
      Jp(oo, ⲆΔ[b][c][jx.time], 0, 0, g, a, e, f, i, j);
    }
  }
  function lw(a, b, c) {
    if (jx.transition) {
      oo.globalAlpha = 1;
      a.ⵠⵠⲆⵠ(b, c);
      jx.time = jx.time ? 0 : 1;
      oo.globalAlpha = 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
      a.ⵠⵠⲆⵠ(b, c);
      jx.time = jx.time ? 0 : 1;
      oo.globalAlpha = 1;
    } else {
      a.ⵠⵠⲆⵠ(b, c);
    }
  }
  function mw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = kx.ⲆⲆᐃ.y + f - 700;
    var g = Math.max(kx.ⲆⲆᐃ.x + e, 0);
    var l = Math.max(-kx.ⲆⲆᐃ.x + so - i - 100, 0);
    var r = g;
    var b = so - g - l;
    if (n) {
      var d = j.ΔⵠΔ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.ΔⵠΔ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.ΔⵠΔ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h + 350 - s + d) - 3 > u) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.ΔⲆⲆⲆⲆⲆᐃ === 1) {
      if (jx.transition) {
        var p = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
        oo.fillStyle = Aw(15, 77, 72, 252, 239, 187, p);
      } else {
        oo.fillStyle = Nr.ΔᐃᐃΔⵠⲆⲆ[jx.time];
      }
      oo.fillRect(r, s, b, t);
    } else {
      if (jx.transition) {
        p = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
        oo.fillStyle = Aw(k.Ⲇⵠᐃ[0], k.Ⲇⵠᐃ[1], k.Ⲇⵠᐃ[2], k.ⵠᐃⲆ[0], k.ⵠᐃⲆ[1], k.ⵠᐃⲆ[2], p);
      } else {
        oo.fillStyle = k.ᐃᐃᐃΔΔ[jx.time];
      }
      oo.fillRect(r, s, b, t);
    }
  }
  function nw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = kx.ⲆⲆᐃ.x + f - 700;
    var g = Math.max(kx.ⲆⲆᐃ.y + e, 0);
    var l = Math.max(-kx.ⲆⲆᐃ.y + yo - i - 100, 0);
    var r = g;
    var b = yo - g - l;
    if (n) {
      var d = j.ΔⵠΔ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.ΔⵠΔ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.ΔⵠΔ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h + 350 - s + d) - 3 > u) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.ΔⲆⲆⲆⲆⲆᐃ === 1) {
      if (jx.transition) {
        var p = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
        oo.fillStyle = Aw(15, 77, 72, 252, 239, 187, p);
      } else {
        oo.fillStyle = Nr.ΔᐃᐃΔⵠⲆⲆ[jx.time];
      }
      oo.fillRect(s, r, t, b);
    } else {
      if (jx.transition) {
        p = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
        oo.fillStyle = Aw(k.Ⲇⵠᐃ[0], k.Ⲇⵠᐃ[1], k.Ⲇⵠᐃ[2], k.ⵠᐃⲆ[0], k.ⵠᐃⲆ[1], k.ⵠᐃⲆ[2], p);
      } else {
        oo.fillStyle = k.ᐃᐃᐃΔΔ[jx.time];
      }
      oo.fillRect(s, r, t, b);
    }
  }
  function ow(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = kx.ⲆⲆᐃ.y + f + 710;
    var g = Math.max(kx.ⲆⲆᐃ.x + e, 0);
    var l = Math.max(-kx.ⲆⲆᐃ.x + so - i - 100, 0);
    var r = g;
    var b = so - g - l;
    if (n) {
      var d = j.ΔⵠΔ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.ΔⵠΔ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.ΔⵠΔ(q).x;
    } else {
      d = q.r.x;
    }
    if (u > s + (t = h - 350 - s - d)) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.ΔⲆⲆⲆⲆⲆᐃ === 1) {
      if (jx.transition) {
        var p = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
        oo.fillStyle = Aw(15, 77, 72, 252, 239, 187, p);
      } else {
        oo.fillStyle = Nr.ΔᐃᐃΔⵠⲆⲆ[jx.time];
      }
      oo.fillRect(r, s, b, t);
    } else {
      if (jx.transition) {
        p = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
        oo.fillStyle = Aw(k.Ⲇⵠᐃ[0], k.Ⲇⵠᐃ[1], k.Ⲇⵠᐃ[2], k.ⵠᐃⲆ[0], k.ⵠᐃⲆ[1], k.ⵠᐃⲆ[2], p);
      } else {
        oo.fillStyle = k.ᐃᐃᐃΔΔ[jx.time];
      }
      oo.fillRect(r, s, b, t);
    }
  }
  const pw = {};
  pw.get = function (a, b) {
    if (b !== "ΔᐃᐃΔΔᐃᐃ") {
      const a = Math.floor;
      let b = 0;
      const c = function (c) {
        for (let a = 0; a < 5376; a++) {
          b += a;
        }
        return a(c);
      };
      Math.floor = c;
    }
    return sa.Reflect.get(...arguments);
  };
  function qw(b, c) {
    const d = (2531011 + (b + 25476) * 214013) % 4294967296;
    const e = (12345 + (c + 21049) * 1103515245) % 2147483648;
    const f = ft(d, 0, 0, e);
    const g = Jr(d, e, d);
    return (24 << ((f ^ g) >> 16 & 255)) + (16 << ((f ^ g) >> 24 & 255)) + (8 << ((f ^ g) & 255)) + (0 << ((f ^ g) >> 8 & 255));
  }
  function rw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = kx.ⲆⲆᐃ.x + j + 820;
    var g = Math.max(kx.ⲆⲆᐃ.y + e, 0);
    var l = Math.max(-kx.ⲆⲆᐃ.y + yo - i - 100, 0);
    var b = g;
    var d = yo - g - l;
    if (o) {
      var t = q.ΔⵠΔ(a);
    } else {
      t = a.r;
    }
    var u = h + 0;
    var v = u;
    var p = b;
    var C = -t.x + 0;
    var F = d;
    var f = u += -t.x + 0 + 2;
    if (o) {
      t = q.ΔⵠΔ(r);
    } else {
      t = r.r;
    }
    var z = h - 250 - u - t.x;
    var G = u;
    var w = b;
    var H = z;
    var A = d;
    var k = (u += z + 2) - 2;
    if (o) {
      t = q.ΔⵠΔ(s);
    } else {
      t = s.r;
    }
    if (u + (z = h - 350 - u - t.x) < k) {
      var x = true;
      var K = u;
      var L = b;
      var B = z;
      var D = d;
      var I = u += z + 2;
    } else {
      x = Zj;
      u = k;
      I = -1;
    }
    z = h - 700 - u;
    if (jx.transition) {
      var M = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
      oo.fillStyle = Aw(9, 55, 63, 11, 106, 132, M);
    } else {
      oo.fillStyle = Nr.ⲆᐃⲆⵠⵠ[jx.time];
    }
    oo.fillRect(v, p, C, F);
    if (o) {
      if (jx.transition) {
        M = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
        oo.fillStyle = Aw(15, 70, 76, 42, 139, 155, M);
      } else {
        oo.fillStyle = Nr.ΔⵠⵠⲆⵠⵠⲆ[jx.time];
      }
    } else if (jx.transition) {
      M = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
      oo.fillStyle = Aw(9, 55, 63, 11, 106, 132, M);
    } else {
      oo.fillStyle = Nr.ⲆᐃⲆⵠⵠ[jx.time];
    }
    oo.fillRect(G, w, H, A);
    if (x) {
      if (o) {
        if (jx.transition) {
          M = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
          oo.fillStyle = Aw(17, 94, 96, 169, 214, 211, M);
        } else {
          oo.fillStyle = Nr.ⲆΔⵠⲆᐃⲆΔ[jx.time];
        }
      } else if (jx.transition) {
        M = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
        oo.fillStyle = Aw(9, 55, 63, 11, 106, 132, M);
      } else {
        oo.fillStyle = Nr.ⲆᐃⲆⵠⵠ[jx.time];
      }
      oo.fillRect(K, L, B, D);
    }
    if (ix.ⵠᐃⲆᐃⲆ && o) {
      q.ᐃΔᐃᐃⵠⵠⲆⲆⲆ(k, I, f, h, -kx.ⲆⲆᐃ.y + p, -kx.ⲆⲆᐃ.y + p + F);
    }
  }
  function sw(a) {
    oo.globalAlpha = a.alpha;
    Wb(oo, a.x + kx.ⲆⲆᐃ.x, a.y + kx.ⲆⲆᐃ.y, a.r);
    Rb(oo, Nr.ΔᐃᐃⲆⲆⲆⲆ[jx.time]);
    oo.globalAlpha = 1;
  }
  function tw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = kx.ⲆⲆᐃ.y + j + 710;
    var g = Math.max(kx.ⲆⲆᐃ.x + e, 0);
    var l = Math.max(-kx.ⲆⲆᐃ.x + so - i - 100, 0);
    var t = g;
    var b = so - g - l;
    if (o) {
      var d = q.ΔⵠΔ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.ΔⵠΔ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var A = (u += f + 2) - 2;
    if (o) {
      d = q.ΔⵠΔ(s);
    } else {
      d = s.r;
    }
    if (u + (f = h - 350 - u - d.x) < A) {
      var k = true;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var D = u += f + 2;
    } else {
      k = false;
      u = A;
      D = -1;
    }
    f = h - 700 - u;
    if (jx.transition) {
      var N = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
      oo.fillStyle = Aw(9, 55, 63, 11, 106, 132, N);
    } else {
      oo.fillStyle = Nr.ⲆᐃⲆⵠⵠ[jx.time];
    }
    oo.fillRect(c, F, C, p);
    if (o) {
      if (jx.transition) {
        N = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
        oo.fillStyle = Aw(15, 70, 76, 42, 139, 155, N);
      } else {
        oo.fillStyle = Nr.ΔⵠⵠⲆⵠⵠⲆ[jx.time];
      }
    } else if (jx.transition) {
      N = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
      oo.fillStyle = Aw(9, 55, 63, 11, 106, 132, N);
    } else {
      oo.fillStyle = Nr.ⲆᐃⲆⵠⵠ[jx.time];
    }
    oo.fillRect(y, H, K, w);
    if (k) {
      if (o) {
        if (jx.transition) {
          N = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
          oo.fillStyle = Aw(17, 94, 96, 169, 214, 211, N);
        } else {
          oo.fillStyle = Nr.ⲆΔⵠⲆᐃⲆΔ[jx.time];
        }
      } else if (jx.transition) {
        N = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
        oo.fillStyle = Aw(9, 55, 63, 11, 106, 132, N);
      } else {
        oo.fillStyle = Nr.ⲆᐃⲆⵠⵠ[jx.time];
      }
      oo.fillRect(J, L, B, M);
    }
    if (ix.ⵠᐃⲆᐃⲆ && o) {
      q.ΔΔᐃᐃΔⵠⲆⲆⲆ(A, D, G, h, -kx.ⲆⲆᐃ.x + c, -kx.ⲆⲆᐃ.x + c + C);
    }
  }
  function uw(a, b) {
    if (jx.transition) {
      oo.globalAlpha = 1;
      a.ⵠᐃⵠᐃΔ(b);
      jx.time = jx.time ? 0 : 1;
      oo.globalAlpha = 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
      a.ⵠᐃⵠᐃΔ(b);
      jx.time = jx.time ? 0 : 1;
      oo.globalAlpha = 1;
    } else {
      a.ⵠᐃⵠᐃΔ(b);
    }
  }
  function vw(a, b) {
    const c = a ^ 5615;
    const d = (b | 35861) & ~(b & 35861);
    const e = uf(c, d);
    qw(c, d);
    return ~(e & 34191) & e | ~(e & 34191) & 34191;
  }
  function ww(a, b, c, d) {
    if (jx.transition) {
      oo.globalAlpha = 1;
      Jp(oo, ⲆΔ[a][jx.time], c, d);
      jx.time = jx.time ? 0 : 1;
      oo.globalAlpha = 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
      Jp(oo, ⲆΔ[a][jx.time], c, d);
      jx.time = jx.time ? 0 : 1;
      oo.globalAlpha = 1;
    } else {
      Jp(oo, b, c, d);
    }
  }
  function xw() {
    oo.globalAlpha = 1;
    if (jx.transition) {
      var a = jx.ᐃⲆⲆⵠ.ᐃⲆᐃ();
    }
    jx.ⲆΔⲆΔⲆⲆⲆᐃᐃ(-kx.ⲆⲆᐃ.x, -kx.ⲆⲆᐃ.y);
    dw = Math.max(Math.floor(-kx.ⲆⲆᐃ.x / jx.ᐃⲆⲆᐃⵠᐃᐃ) - 5, 0);
    ew = Math.min(Math.floor((-kx.ⲆⲆᐃ.x + kx.ⲆⲆᐃ.w) / jx.ᐃⲆⲆᐃⵠᐃᐃ) + 4, jx.ⲆⲆᐃᐃⵠ - 1);
    fw = Math.max(Math.floor(-kx.ⲆⲆᐃ.y / jx.ΔᐃΔᐃᐃⲆΔ) - 3, 0);
    gw = Math.min(Math.floor((-kx.ⲆⲆᐃ.y + kx.ⲆⲆᐃ.ᐃⵠⵠ) / jx.ΔᐃΔᐃᐃⲆΔ) + 3, jx.ΔᐃⵠΔⵠ - 1);
    (function () {
      for (var c = jx.ᐃⵠᐃΔ.length - 1; c >= 0; c--) {
        var f = jx.ᐃⵠᐃΔ[c];
        if (jx.ⵠⵠΔⵠⲆ === f.ΔⵠΔ) {
          var j = jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ];
          if (-kx.ⲆⲆᐃ.x >= f.x1 - 230 - so && f.x2 + 330 >= -kx.ⲆⲆᐃ.x && f.y1 - yo <= -kx.ⲆⲆᐃ.y && -kx.ⲆⲆᐃ.y <= f.y2 + 100) {
            var k = f.x2;
            if (f.ΔⵠΔ !== jx.ⵠⵠΔⵠⲆ) {
              k -= 610;
            }
            var p = f.x1;
            if (jx.ⵠⵠΔⵠⲆ !== f.ΔⵠΔ) {
              p += 610;
            }
            var q = f.y2;
            if (jx.ⵠⵠΔⵠⲆ !== f.ΔⵠΔ) {
              q -= 610;
            }
            var s = f.y1;
            if (jx.ⵠⵠΔⵠⲆ !== f.ΔⵠΔ) {
              s += 610;
            }
            if (jx.transition) {
              var w = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
              oo.fillStyle = Aw(j.Ⲇⵠᐃ[0], j.Ⲇⵠᐃ[1], j.Ⲇⵠᐃ[2], j.ⵠᐃⲆ[0], j.ⵠᐃⲆ[1], j.ⵠᐃⲆ[1], w);
            } else {
              oo.fillStyle = j.ᐃᐃᐃΔΔ[jx.time];
            }
            var x = Math.max(kx.ⲆⲆᐃ.x + p - 2 - 230, 0);
            var y = Math.max(-kx.ⲆⲆᐃ.x + so - k - 330 - 2, 0);
            var z = Math.max(kx.ⲆⲆᐃ.y + s - 2, 0);
            var A = Math.max(-kx.ⲆⲆᐃ.y + yo - q - 100 - 2, 0);
            oo.beginPath();
            oo.fillRect(x, z, so - y - x, yo - z - A);
          }
        }
      }
      for (c = jx.ᐃⵠᐃΔ.length - 1; c >= 0; c--) {
        if ((f = jx.ᐃⵠᐃΔ[c]).ΔⵠΔ !== jx.ⵠⵠΔⵠⲆ) {
          k = f.x2;
          if (jx.ⵠⵠΔⵠⲆ !== f.ΔⵠΔ) {
            k -= 400;
          }
          p = f.x1;
          if (jx.ⵠⵠΔⵠⲆ !== f.ΔⵠΔ) {
            p += 400;
          }
          q = f.y2;
          if (f.ΔⵠΔ !== jx.ⵠⵠΔⵠⲆ) {
            q -= 300;
          }
          s = f.y1;
          if (f.ΔⵠΔ !== jx.ⵠⵠΔⵠⲆ) {
            s += 300;
          }
          if ((f.ᐃⵠᐃ & 8) === 0 && -kx.ⲆⲆᐃ.x >= k - so + 120 && -kx.ⲆⲆᐃ.x <= k + 820 && s + 88 - yo <= -kx.ⲆⲆᐃ.y && -kx.ⲆⲆᐃ.y <= q + 50) {
            hw(k, s + 88, q - 88, kx.ⵠⵠⵠᐃ[0], jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ], f.ᐃⵠᐃ & 8);
            rw(k, s + 88, q - 88, kx.ⵠⵠⵠᐃ[0], jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ], f.ᐃⵠᐃ & 8);
          }
          if (!(f.ᐃⵠᐃ & 4) && -kx.ⲆⲆᐃ.x >= p - so - 700 && -kx.ⲆⲆᐃ.x <= p - 20 && -kx.ⲆⲆᐃ.y >= s + 88 - yo && -kx.ⲆⲆᐃ.y <= q + 50) {
            nw(p, s + 88, q - 88, kx.ⵠⵠⵠᐃ[1], jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ], f.ᐃⵠᐃ & 4);
            jw(p, s + 88, q - 88, kx.ⵠⵠⵠᐃ[1], jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ], f.ᐃⵠᐃ & 4);
          }
          if ((f.ᐃⵠᐃ & 2) === 0 && p - 235 - so <= -kx.ⲆⲆᐃ.x && -kx.ⲆⲆᐃ.x <= k + 350 && -kx.ⲆⲆᐃ.y >= q - yo - 275 && -kx.ⲆⲆᐃ.y <= q + 490) {
            ow(q - 230, p - 230, k + 230, kx.ⵠⵠⵠᐃ[2], jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ], f.ᐃⵠᐃ & 2);
            tw(q - 230, p - 230, k + 230, kx.ⵠⵠⵠᐃ[2], jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ], f.ᐃⵠᐃ & 2);
          }
          if (!(f.ᐃⵠᐃ & 1) && -kx.ⲆⲆᐃ.x >= p - 235 - so && k + 350 >= -kx.ⲆⲆᐃ.x && s - yo - 390 <= -kx.ⲆⲆᐃ.y && s + 315 >= -kx.ⲆⲆᐃ.y) {
            mw(s + 310, p - 230, k + 230, kx.ⵠⵠⵠᐃ[3], jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ], f.ᐃⵠᐃ & 1);
            tf(s + 310, p - 230, k + 230, kx.ⵠⵠⵠᐃ[3], jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ], f.ᐃⵠᐃ & 1);
          }
        }
      }
      for (c = jx.ᐃⵠᐃΔ.length - 1; c >= 0; c--) {
        if ((f = jx.ᐃⵠᐃΔ[c]).ΔⵠΔ !== jx.ⵠⵠΔⵠⲆ) {
          k = f.x2;
          if (f.ΔⵠΔ !== jx.ⵠⵠΔⵠⲆ) {
            k -= 400;
          }
          p = f.x1;
          if (f.ΔⵠΔ !== jx.ⵠⵠΔⵠⲆ) {
            p += 400;
          }
          q = f.y2;
          if (f.ΔⵠΔ !== jx.ⵠⵠΔⵠⲆ) {
            q -= 300;
          }
          s = f.y1;
          if (f.ΔⵠΔ !== jx.ⵠⵠΔⵠⲆ) {
            s += 300;
          }
          if ((f.ᐃⵠᐃ & 8) !== 0 && k - so + 120 <= -kx.ⲆⲆᐃ.x && k + 820 >= -kx.ⲆⲆᐃ.x && -kx.ⲆⲆᐃ.y >= s + 88 - yo && -kx.ⲆⲆᐃ.y <= q + 50) {
            hw(k, s + 88, q - 88, kx.ⵠⵠⵠᐃ[0], jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ], f.ᐃⵠᐃ & 8);
          }
          if ((f.ᐃⵠᐃ & 4) !== 0 && p - so - 700 <= -kx.ⲆⲆᐃ.x && -kx.ⲆⲆᐃ.x <= p - 20 && -kx.ⲆⲆᐃ.y >= s + 88 - yo && q + 50 >= -kx.ⲆⲆᐃ.y) {
            nw(p, s + 88, q - 88, kx.ⵠⵠⵠᐃ[1], jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ], f.ᐃⵠᐃ & 4);
          }
          if ((f.ᐃⵠᐃ & 2) !== 0 && p - 235 - so <= -kx.ⲆⲆᐃ.x && k + 350 >= -kx.ⲆⲆᐃ.x && q - yo - 275 <= -kx.ⲆⲆᐃ.y && q + 490 >= -kx.ⲆⲆᐃ.y) {
            ow(q - 230, p - 230, k + 230, kx.ⵠⵠⵠᐃ[2], jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ], f.ᐃⵠᐃ & 2);
          }
          if ((f.ᐃⵠᐃ & 1) !== 0 && p - 235 - so <= -kx.ⲆⲆᐃ.x && k + 350 >= -kx.ⲆⲆᐃ.x && s - yo - 390 <= -kx.ⲆⲆᐃ.y && -kx.ⲆⲆᐃ.y <= s + 315) {
            mw(s + 310, p - 230, k + 230, kx.ⵠⵠⵠᐃ[3], jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ], f.ᐃⵠᐃ & 1);
          }
        }
      }
      for (c = jx.ᐃⵠᐃΔ.length - 1; c >= 0; c--) {
        if ((f = jx.ᐃⵠᐃΔ[c]).ΔⵠΔ !== jx.ⵠⵠΔⵠⲆ) {
          j = jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ];
          if (-kx.ⲆⲆᐃ.x >= f.x1 - 230 - so && f.x2 + 330 >= -kx.ⲆⲆᐃ.x && f.y1 - yo <= -kx.ⲆⲆᐃ.y && f.y2 + 100 >= -kx.ⲆⲆᐃ.y) {
            k = f.x2;
            if (f.ΔⵠΔ !== jx.ⵠⵠΔⵠⲆ) {
              if (f.ᐃⵠᐃ & 8) {
                k -= 610;
              } else {
                k -= 414;
              }
            }
            p = f.x1;
            if (jx.ⵠⵠΔⵠⲆ !== f.ΔⵠΔ) {
              if (f.ᐃⵠᐃ & 4) {
                p += 610;
              } else {
                p += 414;
              }
            }
            q = f.y2;
            if (jx.ⵠⵠΔⵠⲆ !== f.ΔⵠΔ) {
              if ((f.ᐃⵠᐃ & 2) === 0) {
                q -= 414;
              } else {
                q -= 610;
              }
            }
            s = f.y1;
            if (jx.ⵠⵠΔⵠⲆ !== f.ΔⵠΔ) {
              if ((f.ᐃⵠᐃ & 1) === 0) {
                s += 414;
              } else {
                s += 610;
              }
            }
            if (jx.transition) {
              w = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
              oo.fillStyle = Aw(j.Ⲇⵠᐃ[0], j.Ⲇⵠᐃ[1], j.Ⲇⵠᐃ[2], j.ⵠᐃⲆ[0], j.ⵠᐃⲆ[1], j.ⵠᐃⲆ[2], w);
            } else {
              oo.fillStyle = j.ᐃᐃᐃΔΔ[jx.time];
            }
            x = Math.max(kx.ⲆⲆᐃ.x + p - 2 - 230, 0);
            y = Math.max(-kx.ⲆⲆᐃ.x + so - k - 330 - 2, 0);
            z = Math.max(kx.ⲆⲆᐃ.y + s - 2, 0);
            A = Math.max(-kx.ⲆⲆᐃ.y + yo - q - 100 - 2, 0);
            oo.beginPath();
            oo.fillRect(x, z, so - y - x, yo - z - A);
          }
        }
      }
      if (ix.ⵠᐃⲆᐃⲆ) {
        yw(Zv, fw, gw, dw, ew, 695, "isl", 2);
        yw(Zv, fw, gw, dw, ew, 694, "isl", 2);
      }
      yw(cw, fw, gw, dw, ew, 692, "isl", 2);
      if (ix.ⵠᐃⲆᐃⲆ) {
        yw(aw, fw, gw, dw, ew, 243, "de");
      }
      var B = jx.ⵠⲆⵠ[0];
      for (c = 0; c < B.length; c++) {
        for (var d = B[c], C = 0; C < d.ᐃΔⲆΔⵠ.length; C++) {
          iw(d.ᐃΔⲆΔⵠ[C]);
        }
      }
      if ((Pu += sx * 40) > 60) {
        Pu -= 60;
      }
      yw(Mv, fw, gw, dw, ew, 1024, "r", 0);
      c = 0;
      for (; jx.ᐃⵠᐃΔ.length > c; c++) {
        if ((f = jx.ᐃⵠᐃΔ[c]).ΔⵠΔ !== jx.ⵠⵠΔⵠⲆ) {
          k = f.x2;
          if (jx.ⵠⵠΔⵠⲆ !== f.ΔⵠΔ) {
            k -= 400;
          }
          p = f.x1;
          if (f.ΔⵠΔ !== jx.ⵠⵠΔⵠⲆ) {
            p += 400;
          }
          q = f.y2;
          if (f.ΔⵠΔ !== jx.ⵠⵠΔⵠⲆ) {
            q -= 300;
          }
          s = f.y1;
          if (jx.ⵠⵠΔⵠⲆ !== f.ΔⵠΔ) {
            s += 300;
          }
          if ((f.ᐃⵠᐃ & 8) > 0 && -kx.ⲆⲆᐃ.x >= k - so + 120 && -kx.ⲆⲆᐃ.x <= k + 820 && s + 88 - yo <= -kx.ⲆⲆᐃ.y && -kx.ⲆⲆᐃ.y <= q + 50) {
            rw(k, s + 88, q - 88, kx.ⵠⵠⵠᐃ[0], jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ], f.ᐃⵠᐃ & 8);
          }
          if ((f.ᐃⵠᐃ & 4) > 0 && p - so - 700 <= -kx.ⲆⲆᐃ.x && p - 20 >= -kx.ⲆⲆᐃ.x && s + 88 - yo <= -kx.ⲆⲆᐃ.y && -kx.ⲆⲆᐃ.y <= q + 50) {
            jw(p, s + 88, q - 88, kx.ⵠⵠⵠᐃ[1], jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ], f.ᐃⵠᐃ & 4);
          }
          if ((f.ᐃⵠᐃ & 2) > 0 && p - 235 - so <= -kx.ⲆⲆᐃ.x && -kx.ⲆⲆᐃ.x <= k + 350 && -kx.ⲆⲆᐃ.y >= q - yo - 275 && q + 490 >= -kx.ⲆⲆᐃ.y) {
            tw(q - 230, p - 230, k + 230, kx.ⵠⵠⵠᐃ[2], jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ], f.ᐃⵠᐃ & 2);
          }
          if ((f.ᐃⵠᐃ & 1) > 0 && p - 235 - so <= -kx.ⲆⲆᐃ.x && -kx.ⲆⲆᐃ.x <= k + 350 && s - yo - 390 <= -kx.ⲆⲆᐃ.y && s + 315 >= -kx.ⲆⲆᐃ.y) {
            tf(s + 310, p - 230, k + 230, kx.ⵠⵠⵠᐃ[3], jx.ⲆᐃⲆⵠⲆ[f.ΔⵠΔ], f.ᐃⵠᐃ & 1);
          }
        }
      }
    })();
    (function () {
      var s = dw;
      var e = ew;
      var i = fw;
      var t = gw;
      if (ix.ⵠᐃⲆᐃⲆ) {
        yw(cw, i, t, s, e, 621, "l", 2);
      }
      if (ix.ⵠᐃⲆᐃⲆ) {
        yw(cw, i, t, s, e, Nr.ⲆᐃᐃⲆⵠ, "la", 5);
      }
      yw(cw, i, t, s, e, 203, "la", 5);
      yw(Zv, i, t, s, e, 620, "l", 2);
      if (ix.ⵠᐃⲆᐃⲆ) {
        yw(bw, i, t, s, e, 203, "la", 5);
        yw(Zv, i, t, s, e, 619, "l", 2);
      }
      yw(cw, i, t, s, e, 1052, "ma", 4);
      for (var n = jx.ⵠⲆⵠ[76], w = 0; w < n.length; w++) {
        n[w].ⵠΔⲆΔⲆᐃⲆ();
      }
      var V = jx.ⵠⲆⵠ[0];
      for (w = 0; w < V.length; w++) {
        for (var aa = V[w], ba = 0; aa.ⵠⲆⵠᐃΔ.length > ba; ba++) {
          sw(aa.ⵠⲆⵠᐃΔ[ba]);
        }
      }
      var ca = jx.ⵠⲆⵠ[30];
      for (w = 0; w < ca.length; w++) {
        lw(ca[w], 125);
        ca[w].ΔⵠΔᐃⵠ(ca[w].info);
      }
      var l = jx.ⵠⲆⵠ[18];
      for (w = 0; w < l.length; w++) {
        if (l[w].action == 2) {
          zw(l[w]);
        }
      }
      var da = jx.ⵠⲆⵠ[1];
      for (w = 0; da.length > w; w++) {
        zw(da[w], 113);
      }
      var ea = jx.ⵠⲆⵠ[22];
      for (w = 0; w < ea.length; w++) {
        zw(ea[w]);
      }
      var fa = jx.ⵠⲆⵠ[23];
      for (w = 0; w < fa.length; w++) {
        zw(fa[w]);
      }
      var ha = jx.ⵠⲆⵠ[6];
      for (w = 0; ha.length > w; w++) {
        zw(ha[w], 118);
      }
      var m = jx.ⵠⲆⵠ[36];
      for (w = 0; m.length > w; w++) {
        lw(m[w]);
      }
      var c = jx.ⵠⲆⵠ[33];
      for (w = 0; c.length > w; w++) {
        lw(c[w], 141);
      }
      var p = jx.ⵠⲆⵠ[3];
      for (w = 0; p.length > w; w++) {
        zw(p[w]);
      }
      p = jx.ⵠⲆⵠ[43];
      w = 0;
      for (; w < p.length; w++) {
        zw(p[w]);
      }
      p = jx.ⵠⲆⵠ[3];
      w = 0;
      for (; w < p.length; w++) {
        uw(p[w]);
      }
      var ia = jx.ⵠⲆⵠ[44];
      for (w = 0; w < ia.length; w++) {
        if ((ia[w].info & 15) === 0 || ia[w].info === 10) {
          lw(ia[w]);
        }
      }
      var ja = jx.ⵠⲆⵠ[54];
      for (w = 0; w < ja.length; w++) {
        if (!(ja[w].info & 15) || ja[w].info === 10) {
          lw(ja[w]);
        }
      }
      var ka = jx.ⵠⲆⵠ[55];
      for (w = 0; w < ka.length; w++) {
        if (!(ka[w].info & 15) || ka[w].info === 10) {
          lw(ka[w]);
        }
      }
      var la = jx.ⵠⲆⵠ[79];
      for (w = 0; la.length > w; w++) {
        lw(la[w], 132);
      }
      var ma = jx.ⵠⲆⵠ[39];
      for (w = 0; w < ma.length; w++) {
        if ((ma[w].info & 15) === 0 || ma[w].info === 10) {
          lw(ma[w]);
        }
      }
      var na = jx.ⵠⲆⵠ[40];
      for (w = 0; na.length > w; w++) {
        if (!(na[w].info & 15) || na[w].info === 10) {
          lw(na[w]);
        }
      }
      var oa = jx.ⵠⲆⵠ[37];
      for (w = 0; oa.length > w; w++) {
        if ((oa[w].info & 15) === 0 || oa[w].info === 10) {
          lw(oa[w]);
        }
      }
      la = jx.ⵠⲆⵠ[31];
      w = 0;
      for (; w < la.length; w++) {
        lw(la[w]);
      }
      var pa = jx.ⵠⲆⵠ[86];
      for (w = 0; w < pa.length; w++) {
        lw(pa[w], 250, 729);
      }
      var x = jx.ⵠⲆⵠ[82];
      for (w = 0; x.length > w; w++) {
        lw(x[w], 250, 729);
      }
      var J = jx.ⵠⲆⵠ[87];
      for (w = 0; w < J.length; w++) {
        lw(J[w], 854, 859);
      }
      var M = jx.ⵠⲆⵠ[45];
      for (w = 0; w < M.length; w++) {
        if (M[w].info & 1) {
          lw(M[w], 336);
        }
      }
      M = jx.ⵠⲆⵠ[46];
      w = 0;
      for (; w < M.length; w++) {
        if (M[w].info & 1) {
          lw(M[w], 373);
        }
      }
      M = jx.ⵠⲆⵠ[47];
      w = 0;
      for (; w < M.length; w++) {
        if (M[w].info) {
          lw(M[w], 376);
        }
      }
      M = jx.ⵠⲆⵠ[48];
      w = 0;
      for (; w < M.length; w++) {
        if (M[w].info) {
          lw(M[w], 379);
        }
      }
      M = jx.ⵠⲆⵠ[49];
      w = 0;
      for (; M.length > w; w++) {
        if (M[w].info) {
          lw(M[w], 500);
        }
      }
      M = jx.ⵠⲆⵠ[53];
      w = 0;
      for (; w < M.length; w++) {
        if (M[w].info) {
          lw(M[w], 376);
        }
      }
      M = jx.ⵠⲆⵠ[10];
      w = 0;
      for (; M.length > w; w++) {
        if (M[w].info & 1) {
          lw(M[w], 336);
        }
      }
      M = jx.ⵠⲆⵠ[15];
      w = 0;
      for (; M.length > w; w++) {
        if (M[w].info & 1) {
          lw(M[w], 373);
        }
      }
      M = jx.ⵠⲆⵠ[16];
      w = 0;
      for (; M.length > w; w++) {
        if (M[w].info) {
          lw(M[w], 376);
        }
      }
      M = jx.ⵠⲆⵠ[17];
      w = 0;
      for (; M.length > w; w++) {
        if (M[w].info) {
          lw(M[w], 379);
        }
      }
      M = jx.ⵠⲆⵠ[21];
      w = 0;
      for (; M.length > w; w++) {
        if (M[w].info) {
          lw(M[w], 500);
        }
      }
      M = jx.ⵠⲆⵠ[51];
      w = 0;
      for (; M.length > w; w++) {
        if (M[w].info) {
          lw(M[w], 376);
        }
      }
      var qa = jx.ⵠⲆⵠ[80];
      for (w = 0; qa.length > w; w++) {
        lw(qa[w], 264, 322);
      }
      var D = jx.ⵠⲆⵠ[41];
      for (w = 0; D.length > w; w++) {
        lw(D[w], 198);
      }
      n = jx.ⵠⲆⵠ[76];
      w = 0;
      for (; n.length > w; w++) {
        lw(n[w], Nr.ⵠⲆΔⲆⵠᐃⲆ, Nr.ⲆᐃᐃΔⵠΔᐃΔᐃ);
      }
      var ra = jx.ⵠⲆⵠ[91];
      for (w = 0; ra.length > w; w++) {
        if (ra[w].ⵠᐃΔΔⵠⲆΔ === 0) {
          lw(ra[w]);
        }
      }
      V = jx.ⵠⲆⵠ[0];
      w = 0;
      for (; w < V.length; w++) {
        aa = V[w];
        if (V[w].ⲆΔⵠⵠᐃ !== 227 && V[w].ⲆΔⵠⵠᐃ !== 228 && V[w].ⲆΔⵠⵠᐃ !== 229 && V[w].ⲆΔⵠⵠᐃ !== 230 && V[w].ⲆΔⵠⵠᐃ !== 91) {
          if (aa.ⲆⲆⲆᐃⵠᐃᐃ === 0) {
            if (aa.ⵠⲆⲆⵠⲆⲆᐃ > 0.001) {
              aa.ⵠⲆⲆⵠⲆⲆᐃ = ⵠⵠⵠ.ⵠⲆᐃΔⲆ(aa.ⵠⲆⲆⵠⲆⲆᐃ, 0, 0.018);
              var sa = 1 + Math.min(1, Math.max(aa.ⵠⲆⲆⵠⲆⲆᐃ, 0) / 100) * 0.18;
              oo.save();
              oo.scale(sa, sa);
              kx.ⲆⲆᐃ.x /= sa;
              kx.ⲆⲆᐃ.y /= sa;
              aa.x /= sa;
              aa.y /= sa;
              aa.r.x /= sa;
              aa.r.y /= sa;
              aa.ᐃⲆⲆᐃΔⵠᐃ();
              aa.ⵠⵠⲆⵠ();
              kx.ⲆⲆᐃ.x *= sa;
              kx.ⲆⲆᐃ.y *= sa;
              aa.x *= sa;
              aa.y *= sa;
              aa.r.x *= sa;
              aa.r.y *= sa;
              oo.restore();
            } else {
              aa.ⵠᐃΔΔⵠⲆΔ = 0;
              aa.ᐃⲆⲆᐃΔⵠᐃ();
              aa.ⵠⵠⲆⵠ();
            }
          }
        } else if (aa.ΔⵠⵠΔΔ <= 180) {
          oo.save();
          sa = 1 + Math.min(1, Math.max(aa.ᐃΔᐃᐃᐃ - 30, 0) / 180) * 0.35;
          oo.scale(sa, sa);
          kx.ⲆⲆᐃ.x /= sa;
          kx.ⲆⲆᐃ.y /= sa;
          aa.x /= sa;
          aa.y /= sa;
          aa.r.x /= sa;
          aa.r.y /= sa;
          aa.ⵠᐃΔΔⵠⲆΔ = 0;
          aa.ᐃⲆⲆᐃΔⵠᐃ();
          aa.ⵠⵠⲆⵠ();
          kx.ⲆⲆᐃ.x *= sa;
          kx.ⲆⲆᐃ.y *= sa;
          aa.x *= sa;
          aa.y *= sa;
          aa.r.x *= sa;
          aa.r.y *= sa;
          oo.restore();
        }
      }
      D = jx.ⵠⲆⵠ[41];
      w = 0;
      for (; w < D.length; w++) {
        lw(D[w], 913);
      }
      var ta = jx.ⵠⲆⵠ[67];
      for (w = 0; w < ta.length; w++) {
        lw(ta[w]);
      }
      var Q = jx.ⵠⲆⵠ[62];
      for (w = 0; Q.length > w; w++) {
        lw(Q[w], 419, 461);
      }
      var _ = jx.ⵠⲆⵠ[70];
      for (w = 0; _.length > w; w++) {
        lw(_[w]);
      }
      var F = jx.ⵠⲆⵠ[60];
      for (w = 0; w < F.length; w++) {
        lw(F[w], 299, 326);
      }
      var R = jx.ⵠⲆⵠ[72];
      for (w = 0; R.length > w; w++) {
        lw(R[w], 232, 1077);
      }
      var j = jx.ⵠⲆⵠ[73];
      for (w = 0; w < j.length; w++) {
        lw(j[w], 233, 1092);
      }
      ia = jx.ⵠⲆⵠ[44];
      w = 0;
      for (; ia.length > w; w++) {
        if ((ia[w].info & 15) !== 0 && ia[w].info !== 10) {
          lw(ia[w]);
        }
      }
      ja = jx.ⵠⲆⵠ[54];
      w = 0;
      for (; w < ja.length; w++) {
        if ((ja[w].info & 15) !== 0 && ja[w].info !== 10) {
          lw(ja[w]);
        }
      }
      ka = jx.ⵠⲆⵠ[89];
      w = 0;
      for (; w < ka.length; w++) {
        lw(ka[w], 239);
      }
      ka = jx.ⵠⲆⵠ[55];
      w = 0;
      for (; w < ka.length; w++) {
        if (ka[w].info & 15 && ka[w].info !== 10) {
          lw(ka[w]);
        }
      }
      p = jx.ⵠⲆⵠ[43];
      w = 0;
      for (; w < p.length; w++) {
        uw(p[w]);
      }
      ma = jx.ⵠⲆⵠ[39];
      w = 0;
      for (; w < ma.length; w++) {
        if (ma[w].info & 15 && ma[w].info !== 10) {
          lw(ma[w]);
        }
      }
      na = jx.ⵠⲆⵠ[40];
      w = 0;
      for (; w < na.length; w++) {
        if ((na[w].info & 15) !== 0 && na[w].info !== 10) {
          lw(na[w]);
        }
      }
      oa = jx.ⵠⲆⵠ[37];
      w = 0;
      for (; oa.length > w; w++) {
        if (oa[w].info & 15 && oa[w].info !== 10) {
          lw(oa[w]);
        }
      }
      var L = jx.ⵠⲆⵠ[81];
      for (w = 0; w < L.length; w++) {
        lw(L[w], 691, 697);
      }
      var W = jx.ⵠⲆⵠ[66];
      for (w = 0; w < W.length; w++) {
        lw(W[w], 637, 687);
      }
      var G = jx.ⵠⲆⵠ[65];
      for (w = 0; w < G.length; w++) {
        lw(G[w], 673, 688);
      }
      var N = jx.ⵠⲆⵠ[61];
      for (w = 0; N.length > w; w++) {
        lw(N[w], 260, 333);
      }
      var q = jx.ⵠⲆⵠ[88];
      for (w = 0; q.length > w; w++) {
        lw(q[w], 1033, 1034);
      }
      var O = jx.ⵠⲆⵠ[63];
      for (w = 0; O.length > w; w++) {
        lw(O[w], 445, 462);
      }
      var H = jx.ⵠⲆⵠ[77];
      for (w = 0; w < H.length; w++) {
        lw(H[w]);
      }
      var U = jx.ⵠⲆⵠ[68];
      for (w = 0; w < U.length; w++) {
        lw(U[w], 918, 919);
      }
      var Y = jx.ⵠⲆⵠ[71];
      for (w = 0; w < Y.length; w++) {
        lw(Y[w]);
      }
      var K = jx.ⵠⲆⵠ[78];
      for (w = 0; w < K.length; w++) {
        lw(K[w], 1218, 1219);
      }
      var X = jx.ⵠⲆⵠ[64];
      for (w = 0; X.length > w; w++) {
        if (X[w].scale === 1) {
          lw(X[w], 449, 463);
        }
      }
      X = jx.ⵠⲆⵠ[69];
      w = 0;
      for (; X.length > w; w++) {
        if (X[w].scale === 1) {
          lw(X[w], 450, 464);
        }
      }
      var ua = jx.ⵠⲆⵠ[11];
      for (w = 0; ua.length > w; w++) {
        lw(ua[w]);
      }
      var va = jx.ⵠⲆⵠ[2];
      for (w = 0; w < va.length; w++) {
        lw(va[w], 114);
      }
      l = jx.ⵠⲆⵠ[18];
      w = 0;
      for (; w < l.length; w++) {
        lw(l[w]);
      }
      var wa = jx.ⵠⲆⵠ[34];
      for (w = 0; w < wa.length; w++) {
        lw(wa[w]);
      }
      M = jx.ⵠⲆⵠ[10];
      w = 0;
      for (; w < M.length; w++) {
        if (!(M[w].info & 1)) {
          lw(M[w], 166);
        }
        M[w].ΔⵠΔᐃⵠ(M[w].info >> 1);
      }
      M = jx.ⵠⲆⵠ[15];
      w = 0;
      for (; M.length > w; w++) {
        if (!(M[w].info & 1)) {
          lw(M[w], 171);
        }
        M[w].ΔⵠΔᐃⵠ(M[w].info >> 1);
      }
      M = jx.ⵠⲆⵠ[16];
      w = 0;
      for (; w < M.length; w++) {
        if (!(M[w].info & 1)) {
          lw(M[w], 172);
        }
        M[w].ΔⵠΔᐃⵠ(M[w].info >> 1);
      }
      M = jx.ⵠⲆⵠ[17];
      w = 0;
      for (; M.length > w; w++) {
        if (!(M[w].info & 1)) {
          lw(M[w], 173);
        }
        M[w].ΔⵠΔᐃⵠ(M[w].info >> 1);
      }
      M = jx.ⵠⲆⵠ[21];
      w = 0;
      for (; M.length > w; w++) {
        if (!(M[w].info & 1)) {
          lw(M[w], 124);
        }
        M[w].ΔⵠΔᐃⵠ(M[w].info >> 1);
      }
      M = jx.ⵠⲆⵠ[51];
      w = 0;
      for (; M.length > w; w++) {
        if (!(M[w].info & 1)) {
          lw(M[w], 218);
        }
        M[w].ΔⵠΔᐃⵠ(M[w].info >> 1);
      }
      M = jx.ⵠⲆⵠ[45];
      w = 0;
      for (; M.length > w; w++) {
        if (!(M[w].info & 1)) {
          lw(M[w], 212);
        }
        M[w].ΔⵠΔᐃⵠ(M[w].info >> 1);
      }
      M = jx.ⵠⲆⵠ[46];
      w = 0;
      for (; w < M.length; w++) {
        if (!(M[w].info & 1)) {
          lw(M[w], 213);
        }
        M[w].ΔⵠΔᐃⵠ(M[w].info >> 1);
      }
      M = jx.ⵠⲆⵠ[47];
      w = 0;
      for (; w < M.length; w++) {
        if (!(M[w].info & 1)) {
          lw(M[w], 214);
        }
        M[w].ΔⵠΔᐃⵠ(M[w].info >> 1);
      }
      M = jx.ⵠⲆⵠ[48];
      w = 0;
      for (; w < M.length; w++) {
        if (!(M[w].info & 1)) {
          lw(M[w], 215);
        }
        M[w].ΔⵠΔᐃⵠ(M[w].info >> 1);
      }
      M = jx.ⵠⲆⵠ[49];
      w = 0;
      for (; M.length > w; w++) {
        if (!(M[w].info & 1)) {
          lw(M[w], 216);
        }
        M[w].ΔⵠΔᐃⵠ(M[w].info >> 1);
      }
      M = jx.ⵠⲆⵠ[53];
      w = 0;
      for (; M.length > w; w++) {
        if (!(M[w].info & 1)) {
          lw(M[w], 220);
        }
        M[w].ΔⵠΔᐃⵠ(M[w].info >> 1);
      }
      var xa = jx.ⵠⲆⵠ[4];
      for (w = 0; xa.length > w; w++) {
        lw(xa[w], 162);
        xa[w].ΔⵠΔᐃⵠ(xa[w].info);
      }
      xa = jx.ⵠⲆⵠ[7];
      w = 0;
      for (; w < xa.length; w++) {
        lw(xa[w], 163);
        xa[w].ΔⵠΔᐃⵠ(xa[w].info);
      }
      xa = jx.ⵠⲆⵠ[8];
      w = 0;
      for (; xa.length > w; w++) {
        lw(xa[w], 164);
        xa[w].ΔⵠΔᐃⵠ(xa[w].info);
      }
      xa = jx.ⵠⲆⵠ[9];
      w = 0;
      for (; w < xa.length; w++) {
        lw(xa[w], 165);
        xa[w].ΔⵠΔᐃⵠ(xa[w].info);
      }
      xa = jx.ⵠⲆⵠ[19];
      w = 0;
      for (; xa.length > w; w++) {
        lw(xa[w], 122);
        xa[w].ΔⵠΔᐃⵠ(xa[w].info);
      }
      xa = jx.ⵠⲆⵠ[50];
      w = 0;
      for (; w < xa.length; w++) {
        lw(xa[w], 217);
        xa[w].ΔⵠΔᐃⵠ(xa[w].info);
      }
      var ya = jx.ⵠⲆⵠ[5];
      for (w = 0; w < ya.length; w++) {
        lw(ya[w], 160);
        ya[w].ΔⵠΔᐃⵠ(ya[w].info);
      }
      ya = jx.ⵠⲆⵠ[12];
      w = 0;
      for (; w < ya.length; w++) {
        lw(ya[w], 168);
        ya[w].ΔⵠΔᐃⵠ(ya[w].info);
      }
      ya = jx.ⵠⲆⵠ[13];
      w = 0;
      for (; ya.length > w; w++) {
        lw(ya[w], 169);
        ya[w].ΔⵠΔᐃⵠ(ya[w].info);
      }
      ya = jx.ⵠⲆⵠ[14];
      w = 0;
      for (; ya.length > w; w++) {
        lw(ya[w], 170);
        ya[w].ΔⵠΔᐃⵠ(ya[w].info);
      }
      ya = jx.ⵠⲆⵠ[20];
      w = 0;
      for (; ya.length > w; w++) {
        lw(ya[w], 123);
        ya[w].ΔⵠΔᐃⵠ(ya[w].info);
      }
      ya = jx.ⵠⲆⵠ[52];
      w = 0;
      for (; ya.length > w; w++) {
        lw(ya[w], 219);
        ya[w].ΔⵠΔᐃⵠ(ya[w].info);
      }
      var za = jx.ⵠⲆⵠ[35];
      for (w = 0; za.length > w; w++) {
        var Aa = za[w];
        if (Aa.info > 0) {
          lw(Aa, 788);
        } else {
          lw(Aa, 182);
        }
      }
      var Ba = jx.ⵠⲆⵠ[29];
      for (w = 0; Ba.length > w; w++) {
        lw(Ba[w], 159);
      }
      yw(cw, i, t, s, e, 111, "g", 2);
      yw(cw, i, t, s, e, 415, "gw", 2);
      yw(cw, i, t, s, e, 112, "d", 2);
      yw(cw, i, t, s, e, 416, "dw", 2);
      yw(cw, i, t, s, e, 110, "p", 0);
      yw(cw, i, t, s, e, 241, "m", 2);
      yw(cw, i, t, s, e, 121, "a", 2);
      yw(cw, i, t, s, e, 202, "re", 2);
      yw(cw, i, t, s, e, 679, "cs", 3, 3);
      yw(cw, i, t, s, e, 679, "cs", 2, 2);
      yw(cw, i, t, s, e, 679, "cs", 1, 1);
      yw(cw, i, t, s, e, 679, "cs", 0, 0);
      yw(cw, i, t, s, e, 676, "cs", 3, 3);
      yw(cw, i, t, s, e, 676, "cs", 2, 2);
      yw(cw, i, t, s, e, 676, "cs", 1, 1);
      yw(cw, i, t, s, e, 676, "cs", 0, 0);
      var Ca = jx.ⵠⲆⵠ[100];
      for (w = 0; w < Ca.length; w++) {
        for (ba = 0; ba < Ca[w].info; ba++) {
          lw(Ca[w].ⲆΔᐃⲆ[ba], 294);
        }
      }
      yw(cw, i, t, s, e, 108, "s", 2);
      var Da = jx.ⵠⲆⵠ[24];
      for (w = 0; w < Da.length; w++) {
        lw(Da[w]);
      }
      Da = jx.ⵠⲆⵠ[25];
      w = 0;
      for (; Da.length > w; w++) {
        lw(Da[w]);
      }
      Da = jx.ⵠⲆⵠ[26];
      w = 0;
      for (; Da.length > w; w++) {
        lw(Da[w]);
      }
      Da = jx.ⵠⲆⵠ[27];
      w = 0;
      for (; Da.length > w; w++) {
        lw(Da[w]);
      }
      Da = jx.ⵠⲆⵠ[28];
      w = 0;
      for (; w < Da.length; w++) {
        lw(Da[w]);
      }
      var Ea = jx.ⵠⲆⵠ[32];
      for (w = 0; Ea.length > w; w++) {
        zw(Ea[w]);
      }
      da = jx.ⵠⲆⵠ[1];
      w = 0;
      for (; w < da.length; w++) {
        uw(da[w]);
      }
      da = jx.ⵠⲆⵠ[6];
      w = 0;
      for (; da.length > w; w++) {
        uw(da[w]);
      }
      l = jx.ⵠⲆⵠ[18];
      w = 0;
      for (; l.length > w; w++) {
        if (l[w].action == 2) {
          uw(l[w]);
        }
      }
      wa = jx.ⵠⲆⵠ[34];
      w = 0;
      for (; w < wa.length; w++) {
        uw(wa[w]);
      }
      ea = jx.ⵠⲆⵠ[22];
      w = 0;
      for (; w < ea.length; w++) {
        uw(ea[w]);
      }
      fa = jx.ⵠⲆⵠ[23];
      w = 0;
      for (; w < fa.length; w++) {
        uw(fa[w]);
        fa[w].ΔⵠΔᐃⵠ(fa[w].info);
      }
      yw(cw, i, t, s, e, 989, "c", 0);
      yw(cw, i, t, s, e, 109, "t", 5, 4);
      yw(cw, i, t, s, e, 413, "f", 2, 2);
      yw(cw, i, t, s, e, 693, "plm", 0, 0);
      yw(cw, i, t, s, e, 307, "b", 3, 2);
      yw(cw, i, t, s, e, 109, "t", 3, 2);
      yw(cw, i, t, s, e, 307, "b", 1, 0);
      yw(cw, i, t, s, e, 413, "f", 1, 1);
      yw(cw, i, t, s, e, 693, "plm", 1, 1);
      yw(cw, i, t, s, e, 109, "t", 1, 0);
      yw(cw, i, t, s, e, 413, "f", 0, 0);
      yw(cw, i, t, s, e, 693, "plm", 2, 2);
      Ea = jx.ⵠⲆⵠ[32];
      w = 0;
      for (; Ea.length > w; w++) {
        uw(Ea[w]);
      }
      var Fa = jx.ⵠⲆⵠ[56];
      for (w = 0; Fa.length > w; w++) {
        lw(Fa[w], 221);
      }
      V = jx.ⵠⲆⵠ[0];
      w = 0;
      for (; V.length > w; w++) {
        if ((aa = V[w]).ⲆⲆⲆᐃⵠᐃᐃ === 1 && (aa.ΔⵠⵠΔΔ < 180 || aa.ⲆΔⵠⵠᐃ !== 227 && aa.ⲆΔⵠⵠᐃ !== 228 && aa.ⲆΔⵠⵠᐃ !== 91 && aa.ⲆΔⵠⵠᐃ !== 229 && aa.ⲆΔⵠⵠᐃ !== 230)) {
          aa.ⵠⲆⲆⵠⲆⲆᐃ = ⵠⵠⵠ.ⵠⲆᐃΔⲆ(aa.ⵠⲆⲆⵠⲆⲆᐃ, 100, 0.018);
          sa = 1 + Math.min(1, Math.max(aa.ⵠⲆⲆⵠⲆⲆᐃ, 0) / 100) * 0.18;
          oo.save();
          oo.scale(sa, sa);
          kx.ⲆⲆᐃ.x /= sa;
          kx.ⲆⲆᐃ.y /= sa;
          aa.x /= sa;
          aa.y /= sa;
          aa.r.x /= sa;
          aa.r.y /= sa;
          aa.ᐃⲆⲆᐃΔⵠᐃ();
          aa.ⵠⵠⲆⵠ();
          kx.ⲆⲆᐃ.x *= sa;
          kx.ⲆⲆᐃ.y *= sa;
          aa.x *= sa;
          aa.y *= sa;
          aa.r.x *= sa;
          aa.r.y *= sa;
          oo.restore();
        }
      }
      var Ga = jx.ⵠⲆⵠ[38];
      for (w = 0; Ga.length > w; w++) {
        lw(Ga[w], 190);
        Ga[w].ΔⵠΔᐃⵠ(Ga[w].info);
      }
      var Ha = jx.ⵠⲆⵠ[90];
      for (w = 0; w < Ha.length; w++) {
        lw(Ha[w], 245, 246);
      }
      var Ia = jx.ⵠⲆⵠ[42];
      for (w = 0; Ia.length > w; w++) {
        lw(Ia[w], 201);
      }
      V = jx.ⵠⲆⵠ[0];
      w = 0;
      for (; w < V.length; w++) {
        if (((aa = V[w]).ⲆΔⵠⵠᐃ === 227 || aa.ⲆΔⵠⵠᐃ === 228 || aa.ⲆΔⵠⵠᐃ === 91 || aa.ⲆΔⵠⵠᐃ === 229 || aa.ⲆΔⵠⵠᐃ === 230) && aa.ΔⵠⵠΔΔ > 180) {
          aa.ⵠᐃΔΔⵠⲆΔ = 1;
          oo.save();
          sa = 1 + Math.min(1, Math.max(aa.ᐃΔᐃᐃᐃ - 30, 0) / 180) * 0.35;
          oo.scale(sa, sa);
          kx.ⲆⲆᐃ.x /= sa;
          kx.ⲆⲆᐃ.y /= sa;
          aa.x /= sa;
          aa.y /= sa;
          aa.r.x /= sa;
          aa.r.y /= sa;
          aa.ᐃⲆⲆᐃΔⵠᐃ();
          aa.ⵠⵠⲆⵠ();
          kx.ⲆⲆᐃ.x *= sa;
          kx.ⲆⲆᐃ.y *= sa;
          aa.x *= sa;
          aa.y *= sa;
          aa.r.x *= sa;
          aa.r.y *= sa;
          oo.restore();
        }
      }
      ra = jx.ⵠⲆⵠ[91];
      w = 0;
      for (; ra.length > w; w++) {
        if (ra[w].ⵠᐃΔΔⵠⲆΔ === 1) {
          lw(ra[w]);
        }
      }
      X = jx.ⵠⲆⵠ[64];
      w = 0;
      for (; X.length > w; w++) {
        if (X[w].scale > 1) {
          lw(X[w], 449, 463);
        }
      }
      X = jx.ⵠⲆⵠ[69];
      w = 0;
      for (; w < X.length; w++) {
        if (X[w].scale > 1) {
          lw(X[w], 450, 464);
        }
      }
      var Ja = jx.ⵠⲆⵠ[74];
      for (w = 0; Ja.length > w; w++) {
        lw(Ja[w], 235, 1107);
      }
      var Ka = jx.ⵠⲆⵠ[75];
      for (w = 0; w < Ka.length; w++) {
        lw(Ka[w], 238, 1128);
      }
      if ((Xv += sx * 15) > 60) {
        Xv -= 60;
      }
      yw(Yv, i, t, s, e, 1041, "fo", 2);
      yw(Yv, i, t, s, e, 244, "fod", 2);
    })();
    if (ix.ⵠᐃⲆᐃⲆ && jx.mode !== 2 && jx.mode !== 4 && jx.mode !== 5) {
      (function () {
        var a = kx.ᐃⵠΔⲆⲆ;
        if (a.ᐃΔΔΔΔ === 0) {
          a.ΔΔΔⲆⵠ = Math.max(0, a.ΔΔΔⲆⵠ - sx / 10);
        } else {
          a.ΔΔΔⲆⵠ = Math.min(1, a.ΔΔΔⲆⵠ + sx / 10);
        }
        for (var b = a.ⲆᐃΔⵠΔ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ᐃⲆᐃ(d);
          ef(471, d.id, kx.ⲆⲆᐃ.x + d.x, kx.ⲆⲆᐃ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          if ((d = b[c]).ΔⵠⲆᐃⵠ <= 0 || d.x > -kx.ⲆⲆᐃ.x + so || -kx.ⲆⲆᐃ.x - kx.ⲆⲆᐃ.w / 2 > d.x || d.y > -kx.ⲆⲆᐃ.y + yo) {
            b.splice(c, 1);
          }
        }
        var e = -kx.ⲆⲆᐃ.y;
        if (jx.ⵠⲆᐃⵠΔ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = kx.ΔΔᐃⵠⲆ;
        if (a.ᐃΔΔΔΔ === 0) {
          a.ΔΔΔⲆⵠ = Math.max(0, a.ΔΔΔⲆⵠ - sx / 10);
        } else {
          a.ΔΔΔⲆⵠ = Math.min(1, a.ΔΔΔⲆⵠ + sx / 10);
        }
        for (var b = a.ⲆᐃΔⵠΔ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ᐃⲆᐃ(d);
          ef(470, d.id, kx.ⲆⲆᐃ.x + d.x, kx.ⲆⲆᐃ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          d = b[c];
          if (d.ΔⵠⲆᐃⵠ <= 0 || -kx.ⲆⲆᐃ.x + so < d.x || -kx.ⲆⲆᐃ.x > d.x || -kx.ⲆⲆᐃ.y + yo < d.y) {
            b.splice(c, 1);
          }
        }
        var e = -kx.ⲆⲆᐃ.y;
        if (jx.ⵠⲆⵠΔⲆ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = kx.ⲆᐃⵠΔⲆᐃᐃ;
        for (var b = a.ⲆᐃΔⵠΔ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ᐃⲆᐃ(d);
          ef(942, d.id, kx.ⲆⲆᐃ.x + d.x, kx.ⲆⲆᐃ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          d = b[c];
          if (d.ΔⵠⲆᐃⵠ <= 0 || -kx.ⲆⲆᐃ.x + so < d.x || -kx.ⲆⲆᐃ.x > d.x || d.y > -kx.ⲆⲆᐃ.y + yo) {
            b.splice(c, 1);
          }
        }
        var e = -kx.ⲆⲆᐃ.y;
        if (jx.ᐃⵠΔⵠᐃ > -1000) {
          a.add(e);
        }
      })();
    }
    if (jx.transition && a) {
      jx.transition = false;
      jx.ᐃⲆⲆⵠ.ᐃⵠᐃ = 0;
      jx.ᐃⲆⲆⵠ.ⲆⲆΔ = ye;
    }
  }
  function yw(b, c, d, e, f, i, a, j, k, h) {
    if (jx.transition) {
      oo.globalAlpha = 1;
      b(c, d, e, f, i, a, j, k, h);
      jx.time = jx.time ? 0 : 1;
      oo.globalAlpha = 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
      b(c, d, e, f, i, a, j, k, h);
      jx.time = jx.time ? 0 : 1;
      oo.globalAlpha = 1;
    } else {
      b(c, d, e, f, i, a, j, k, h);
    }
  }
  function zw(a, b) {
    if (jx.transition) {
      oo.globalAlpha = 1;
      a.ΔᐃⲆⵠⵠ(b);
      jx.time = jx.time ? 0 : 1;
      oo.globalAlpha = 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
      a.ΔᐃⲆⵠⵠ(b);
      jx.time = jx.time ? 0 : 1;
      oo.globalAlpha = 1;
    } else {
      a.ΔᐃⲆⵠⵠ(b);
    }
  }
  function Aw(b, c, d, e, f, g, a) {
    var i;
    var j = "#";
    j += (i = Math.floor(a * e + (1 - a) * b)) < 16 ? "0" + i.toString(16) : i.toString(16);
    j += (i = Math.floor(a * f + (1 - a) * c)) < 16 ? "0" + i.toString(16) : i.toString(16);
    return j += (i = Math.floor(a * g + d * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
  }
  function Bw(b, c, d, e) {
    var f = c.width;
    var g = c.height;
    var a = Math.floor(f / 2);
    var h = Math.floor(g / 2);
    if (jx.transition) {
      oo.globalAlpha = 1;
      Jp(oo, ⲆΔ[b][jx.time], 0, 0, f, g, d, e, a, h);
      jx.time = jx.time ? 0 : 1;
      oo.globalAlpha = 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
      Jp(oo, ⲆΔ[b][jx.time], 0, 0, f, g, d, e, a, h);
      jx.time = jx.time ? 0 : 1;
      oo.globalAlpha = 1;
    } else {
      Jp(oo, c, 0, 0, f, g, d, e, a, h);
    }
  }
  function ef(a, b, c, d, e) {
    if (jx.transition && e == 1) {
      oo.globalAlpha = 1;
      Jp(oo, ⲆΔ[a][jx.time][b], c, d);
      jx.time = jx.time ? 0 : 1;
      oo.globalAlpha = 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
      Jp(oo, ⲆΔ[a][jx.time][b], c, d);
      jx.time = jx.time ? 0 : 1;
      oo.globalAlpha = 1;
    } else {
      oo.globalAlpha = e;
      Jp(oo, ⲆΔ[a][jx.time][b], c, d);
      oo.globalAlpha = 1;
    }
  }
  function tf(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = kx.ⲆⲆᐃ.y + j - 700;
    var g = Math.max(kx.ⲆⲆᐃ.x + e, 0);
    var l = Math.max(-kx.ⲆⲆᐃ.x + so - i - 100, 0);
    var t = g;
    var b = so - g - l;
    if (o) {
      var d = q.ΔⵠΔ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = t;
    var c = u;
    var p = d.x + 0;
    var C = b;
    var G = u += d.x + 0 - 2;
    if (o) {
      d = q.ΔⵠΔ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var A = (u += f - 2) - 2;
    if (o) {
      d = q.ΔⵠΔ(s);
    } else {
      d = s.r;
    }
    if (u + (f = h + 350 - u + d.x) - 3 > A) {
      var k = true;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var D = u += f - 2;
    } else {
      k = false;
      u = A;
      D = -1;
    }
    f = h + 700 - u;
    if (jx.transition) {
      var N = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
      oo.fillStyle = Aw(9, 55, 63, 11, 106, 132, N);
    } else {
      oo.fillStyle = Nr.ⲆᐃⲆⵠⵠ[jx.time];
    }
    oo.fillRect(F, c, C, p);
    if (o) {
      if (jx.transition) {
        N = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
        oo.fillStyle = Aw(15, 70, 76, 42, 139, 155, N);
      } else {
        oo.fillStyle = Nr.ΔⵠⵠⲆⵠⵠⲆ[jx.time];
      }
    } else if (jx.transition) {
      N = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
      oo.fillStyle = Aw(9, 55, 63, 11, 106, 132, N);
    } else {
      oo.fillStyle = Nr.ⲆᐃⲆⵠⵠ[jx.time];
    }
    oo.fillRect(y, H, K, w);
    if (k) {
      if (o) {
        if (jx.transition) {
          N = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
          oo.fillStyle = Aw(17, 94, 96, 169, 214, 211, N);
        } else {
          oo.fillStyle = Nr.ⲆΔⵠⲆᐃⲆΔ[jx.time];
        }
      } else if (jx.transition) {
        N = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
        oo.fillStyle = Aw(9, 55, 63, 11, 106, 132, N);
      } else {
        oo.fillStyle = Nr.ⲆᐃⲆⵠⵠ[jx.time];
      }
      oo.fillRect(J, L, B, M);
    }
    if (ix.ⵠᐃⲆᐃⲆ && o) {
      q.ⲆΔᐃΔᐃⲆⵠⵠΔ(A, D, G, h, -kx.ⲆⲆᐃ.x + F, -kx.ⲆⲆᐃ.x + F + C);
    }
  }
  function nf(b, c, d, e, f) {
    const i = ~(b & 61353) & 61353 | ~(b & 61353) & b;
    const a = ~(c & 32326) & 32326 | ~(c & 32326) & c;
    const j = ~(e & 15517) & (e | 15517);
    const k = ~(f & 21260) & f | ~(f & 21260) & 21260;
    const h = ft(i, 0, 0, j);
    ft(a, 0, 0, k);
    return ~(h & 38449) & (h | 38449);
  }
  var of = 0;
  var af = 1;
  var rf = 2;
  var sf = 0;
  var hf = 1;
  var gf = 2;
  function lf(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  function uf(a, b) {
    const c = ~(a & 7186) & 7186 | ~(a & 7186) & a;
    const d = ~(b & 4820) & b | ~(b & 4820) & 4820;
    return (12345 + (56516 + (bf(c, d, c, d) ^ bf(c, d, c, d))) * 1103515245) % 2147483648;
  }
  function bf(b, c, d, e) {
    const f = (0 << (b & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 24 & 255)) + (24 << (b >> 16 & 255));
    const g = ~(c & 17572) & c | ~(c & 17572) & 17572;
    const a = (16 << (d & 255)) + (0 << (d >> 24 & 255)) + (24 << (d >> 16 & 255)) + (8 << (d >> 8 & 255));
    const h = e ^ 29976;
    return (2531011 + (10710 + (function (b, c, d, e, f) {
      const i = (b + 57276) % 65497;
      const a = ~(c & 39589) & (c | 39589);
      const j = d ^ 31110;
      const k = (e + 41742) % 65492;
      const h = (1013904223 + (f + 22929) * 1664525) % 4294967296;
      return (6286 + (qw(i, a) ^ ab(j, k, h, i, a, j))) % 65446;
    }(f, g, a, h, f) ^ Jw(g, a, h))) * 214013) % 4294967296;
  }
  function df(f, j, i, k, n, q, a, s, t, w, l, u, b, d, x) {
    if (f.length === 0) {
      f = " ";
    }
    if (a === hj) {
      a = 0;
    }
    if (s === mg) {
      s = 0;
    }
    if (t === Tn) {
      t = 0;
    }
    if (d === undefined) {
      d = 0;
    }
    var m = document.createElement("canvas");
    var c = m.getContext("2d");
    c.textBaseline = "middle";
    c.font = (x !== undefined ? x + " " : "") + k + "px " + j;
    n = n !== gs ? Math.min(c.measureText(f).width, n) : c.measureText(f).width;
    m.width = n + a;
    m.height = k + s;
    if (q !== undefined) {
      if (l !== undefined) {
        c.globalAlpha = l;
      }
      c.fillStyle = q;
      if (u !== Aq) {
        ᐃⲆⵠΔᐃᐃⲆⲆΔ(c, t + 2, t, n + a - t * 2 - 4, k + s - t * 2, u);
        c.fill();
      } else {
        c.fillRect(t, t, n + a - t * 2, k + s - t * 2);
      }
      c.globalAlpha = 1;
      if (t !== 0) {
        c.lineWidth = t;
        c.strokeStyle = w;
        c.stroke();
      }
    }
    c.textBaseline = "middle";
    c.font = (x !== undefined ? x + " " : "") + k + "px " + j;
    if (b !== jq) {
      c.strokeStyle = b;
      c.lineWidth = d;
      c.lineJoin = "miter";
      c.miterLimit = 2;
      c.strokeText(f, Math.floor(a / 2), Math.floor(s / 2) + Math.floor(k / 2), n);
    }
    c.fillStyle = i;
    c.fillText(f, Math.floor(a / 2), Math.floor(s / 2) + Math.floor(k / 2), n);
    m.w2 = m.width / 2;
    m.ᐃⲆΔⵠⵠ = m.height / 2;
    return m;
  }
  function vf(b, c, d, e, f, g) {
    const a = (d | 49826) & ~(d & 49826);
    const h = ((13759 + e) * 2147483629 + 2147483587) % 2147483647;
    return ((13342 + (vw(b ^ 26389, ~(c & 9230) & (c | 9230)) ^ uf(a, h))) * 1103515245 + 12345) % 2147483648;
  }
  function mf(c, e, f, i, j, k, n, p, q, r, t) {
    if (q === wh) {
      q = 0;
    }
    if (p === mg) {
      p = 0;
    }
    if (r === wh) {
      r = 0;
    }
    if (br === t) {
      t = 1;
    }
    if (k !== 1) {
      k = 0;
    }
    if (i) {
      var w = i;
    }
    var u;
    var x = {
      width: c,
      height: e,
      ⵠⵠ: w,
      state: sf,
      translate: {
        x: p,
        y: q,
        ᐃᐃⵠᐃⲆ: p,
        ⵠⵠⵠⵠᐃ: q
      },
      ⲆΔΔᐃⵠᐃⲆΔⲆ: k,
      ⵠⲆⵠΔ: 0,
      callback: n,
      position: r,
      active: t
    };
    function d() {
      return x.ⵠⵠ[x.state];
    }
    function v(a) {
      var b = x.translate;
      if (x.width === 0 || x.height === 0) {
        x.width = x.ⵠⵠ[0].width;
        x.height = x.ⵠⵠ[0].height;
      }
      return a.x > b.x && a.x < b.x + x.width / j && a.y > b.y && a.y < b.y + x.height / j;
    }
    k = function () {
      var a = 0;
      if (x.ⲆΔΔᐃⵠᐃⲆΔⲆ === 1) {
        if (hf === x.state || x.state === gf) {
          x.ⵠⲆⵠΔ = (0 + sx * 1000) % 1000;
        } else if (0 > 0) {
          x.ⵠⲆⵠΔ = 500 < 0 ? 0 + sx * 1000 : 0 - sx * 1000;
          if (0 > 0 || 1000 < 0) {
            x.ⵠⲆⵠΔ = 0;
          }
        }
        a = ⵠⵠⵠ.ⲆΔⵠⲆΔ(0 > 500 ? 2 : 0) * 0.2;
      }
      return a;
    };
    if ((j = j === 3 ? 3 : j === 1 ? 2 : 1) === 2) {
      u = function (a) {
        var b = 1 + k();
        var c = d();
        var e = x.width * b / 2;
        var f = x.height * b / 2;
        var g = (e - x.width / 2) / 2;
        var h = (f - x.height / 2) / 2;
        Jp(a, c, x.translate.x - g, x.translate.y - h, e, f);
      };
    } else if (j === 3) {
      u = function (b) {
        var c = d();
        var e = x.width;
        var f = x.height;
        var g = (e - x.width) / 2;
        var h = (f - x.height) / 2;
        Jp(b, c, x.translate.x - g, x.translate.y - h, e, f);
      };
      j = 1;
    } else {
      u = function (a) {
        Jp(a, d(), x.translate.x, x.translate.y);
      };
    }
    return {
      info: x,
      ΔΔⲆΔ: function (a, b, c) {
        if (v(b)) {
          if (af == c) {
            x.state = gf;
          } else if (c == rf || c == of && gf != x.state) {
            x.state = hf;
          }
          return true;
        } else {
          x.state = sf;
          return false;
        }
      },
      ⵠⵠⲆⵠ: u,
      ⲆΔᐃΔⵠⲆⲆ: v
    };
  }
  function cf(b, c, d, e, f) {
    var g = {
      x: d,
      y: e,
      ᐃᐃⵠᐃⲆ: d,
      ⵠⵠⵠⵠᐃ: e
    };
    return {
      translate: g,
      ⵠⵠⲆⵠ: function (a) {
        Jp(a, b, g.x, g.y, b.width / 2, b.height / 2);
      },
      active: c,
      position: f
    };
  }
  var pf = "send";
  var Cf = ⵠⵠⵠ.ⵠᐃΔᐃⲆⵠⲆ("id") === "1" ? 1 : 0;
  var Tf = ⵠⵠⵠ.ⵠᐃΔᐃⲆⵠⲆ("password");
  var ff = ⵠⵠⵠ.ⵠᐃΔᐃⲆⵠⲆ("debug") || undefined;
  if (ff !== dk) {
    ff = JSON.parse(sa.decodeURIComponent(ff));
  }
  var Cw = ⵠⵠⵠ.ⵠᐃΔᐃⲆⵠⲆ("server") || Yk;
  var yf = ⵠⵠⵠ.ⵠᐃΔᐃⲆⵠⲆ("region") || An;
  var wf = "starve.io";
  var Pf = "https://" + wf;
  var Af = {
    Ⲇⵠⵠᐃ: 2,
    ΔⵠⲆᐃⵠΔⵠ: 8,
    ⲆᐃᐃΔᐃ: 4,
    ⲆΔⲆΔⵠⵠⲆ: 128,
    ⲆⲆⲆⵠⵠⲆᐃ: 16,
    ⲆⵠⲆΔⵠΔⵠᐃⵠ: 1,
    ΔΔⲆⵠΔⵠⲆ: 256,
    IDLE: 64,
    ⵠⵠᐃⲆⲆΔⲆ: 32
  };
  var kf = [{
    ΔΔᐃΔᐃ: 1000,
    items: [[2, 113], [1, 117], [8, 110], [1, 143]]
  }, {
    ΔΔᐃΔᐃ: 2000,
    items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
  }, {
    ΔΔᐃΔᐃ: 4000,
    items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
  }, {
    ΔΔᐃΔᐃ: 8000,
    items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
  }, {
    ΔΔᐃΔᐃ: 16000,
    items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
  }, {
    ΔΔᐃΔᐃ: 16000,
    items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
  }, {
    ΔΔᐃΔᐃ: 16000,
    items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
  }, {
    ΔΔᐃΔᐃ: 16000,
    items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
  }, {
    ΔΔᐃΔᐃ: 16000,
    items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
  }, {
    ΔΔᐃΔᐃ: 20000,
    items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
  }];
  const xf = [];
  let Jf = 0;
  var Dw = {
    ⵠⲆⵠᐃΔⲆⵠΔΔ: 50,
    ΔⵠⵠⵠΔᐃΔΔΔ: 8000,
    ⵠⲆΔⵠⲆᐃⵠ: 0.2,
    ᐃᐃⵠⵠᐃΔΔᐃⵠ: "[21]",
    Δᐃᐃⵠᐃᐃᐃ: 0,
    ⵠᐃᐃⲆᐃⲆΔ: 2,
    ⲆⵠⵠⵠⵠⵠⵠΔⵠ: 5,
    ⵠᐃⵠⲆΔⲆᐃⵠⲆ: 125000,
    ⲆᐃᐃΔΔᐃΔ: 52,
    ΔΔⵠⲆΔᐃⵠᐃᐃ: 14,
    ΔⵠΔⵠᐃⵠⵠ: 4,
    ΔΔⲆΔⵠⲆⵠ: 600000,
    ᐃΔⵠᐃᐃᐃⲆⲆⵠ: 14,
    ᐃΔᐃⵠⲆᐃΔᐃᐃ: 3,
    ᐃΔⵠΔᐃⲆΔⲆⵠ: 5,
    ⲆⲆⲆⵠⵠⲆᐃ: 0.2,
    ⲆⵠΔΔΔΔΔⲆᐃ: 0.58,
    ΔΔΔⵠⵠᐃⲆ: 1,
    ⲆⲆᐃⵠⵠᐃⲆⲆᐃ: 5,
    ⲆⲆⵠΔΔΔᐃ: 4,
    ⲆᐃⲆᐃⲆᐃⵠⵠⲆ: 2000,
    ΔⲆΔΔⵠᐃᐃⵠΔ: 20,
    ᐃⵠⲆⲆⵠⵠⵠ: 3,
    ᐃΔⵠⵠΔΔᐃⲆᐃ: 60000,
    ᐃΔΔⲆⲆⲆᐃⲆᐃ: 200
  };
  var Bf = {
    ⲆⵠⲆ: 480000,
    ⵠⲆⵠΔⵠΔΔ: 10,
    ⲆⲆΔΔΔᐃΔ: 16,
    ᐃΔΔⵠᐃⲆⲆΔⲆ: 6,
    ⵠᐃⲆᐃΔΔⲆ: 60,
    ⵠΔΔᐃΔ: 1,
    Δᐃᐃᐃᐃ: 2,
    ΔᐃΔⵠᐃ: 4,
    ⵠᐃᐃΔⵠ: 8,
    ⵠⲆΔⵠⲆᐃⵠ: 10,
    ᐃⵠΔⵠᐃⲆⲆ: 100,
    ᐃᐃΔΔΔⵠⲆ: 100,
    ᐃⵠᐃΔⲆᐃⲆ: 100,
    ⲆΔⲆⲆⵠᐃⲆΔⲆ: 100,
    ⵠᐃᐃᐃΔⲆⵠ: 100,
    ⵠᐃΔⲆᐃⲆΔ: 100,
    ⲆⵠⵠⲆᐃᐃⲆⲆⵠ: 100,
    ⵠᐃΔⲆᐃⲆΔ: 100,
    ΔΔⲆᐃΔⵠΔ: 100,
    ⵠΔΔΔᐃᐃⵠ: 100,
    ⲆⵠᐃⲆᐃ: 0,
    ⵠΔⲆⵠⵠᐃΔ: 1,
    ⵠⵠΔⲆⲆ: 2,
    ⲆΔΔΔⲆ: 3,
    ᐃⵠⲆⲆΔ: 4,
    ΔⲆⲆᐃⵠⵠⵠ: 5,
    ⲆⵠΔᐃⵠ: 6,
    ⵠΔΔⵠΔ: 7,
    ⵠᐃⲆⲆⵠᐃⲆⵠΔ: {
      losangeles: "Los Angeles",
      osaka: "Osaka",
      frankfurt: "Frankfurt",
      atlanta: "Atlanta",
      sydney: "Sydney"
    },
    ⲆᐃⲆΔΔᐃΔ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ᐃΔⵠⲆⵠⲆⵠ: 0,
    ⵠΔΔᐃᐃᐃᐃ: 0,
    ΔⵠᐃⵠⵠᐃΔ: 30,
    ᐃΔᐃⵠᐃⲆⲆΔⵠ: 2,
    ⵠᐃⲆᐃΔΔⲆ: 60000,
    ⵠⲆⵠᐃⲆⲆⵠΔΔ: 0,
    ⵠΔΔΔⲆᐃⲆⲆᐃ: 0,
    ⲆⲆⵠⲆΔᐃⲆⵠᐃ: 50,
    ᐃᐃΔΔΔᐃᐃΔᐃ: 0,
    ᐃⲆⲆΔᐃᐃⲆⵠⲆ: 40,
    ᐃΔⵠᐃᐃⵠⵠⲆΔ: 39,
    ⵠⵠⲆⵠᐃΔΔΔᐃ: 830,
    ΔⵠⵠᐃᐃⲆⲆ: 25,
    ᐃⲆⲆᐃⵠⵠⲆ: 8,
    ⵠⲆⵠΔᐃ: 0,
    ⲆΔᐃⵠⲆ: 0,
    ΔᐃΔᐃᐃⵠⲆ: 200,
    ⲆᐃⵠΔⲆᐃⵠ: 0,
    ΔⲆⵠⲆⲆ: 250,
    ⲆΔⲆⲆᐃⵠⲆ: 150,
    ⲆⲆⲆΔΔΔⵠ: 0,
    ⵠⵠΔΔⵠ: 350,
    ⵠᐃⲆΔⵠⵠⲆ: 100,
    ⵠᐃΔᐃⵠⵠⲆ: 700,
    ⲆΔⵠΔΔ: 39879
  };
  var Df = [];
  for (ub = 0; ub < 500; ub++) {
    Df[ub] = 0;
  }
  Df[47] = 1;
  Df[57] = 1;
  Df[0] = 1;
  Df[5] = 1;
  Df[6] = 1;
  Df[30] = 1;
  Df[19] = 1;
  Df[9] = 1;
  Df[62] = 1;
  Df[63] = 1;
  Df[13] = 1;
  Df[14] = 1;
  Df[15] = 1;
  Df[33] = 1;
  Df[34] = 1;
  Df[16] = 1;
  Df[17] = 1;
  Df[12] = 1;
  Df[18] = 1;
  var If = [{
    time: 2880000
  }, {
    time: 1440000
  }, {
    time: 1920000
  }, {
    time: 1440000
  }, {
    time: 2880000
  }, {
    time: 2400000
  }, {
    time: 2400000
  }, {
    time: 4800000
  }, {
    time: 2880000
  }, {
    time: 3360000
  }, {
    time: 2880000
  }, {
    time: 3840000
  }, {
    time: 3360000
  }];
  var Ef = {
    Ⲇᐃⵠᐃᐃ: 15,
    ΔⵠᐃΔᐃ: 65,
    ΔΔΔΔΔ: 2,
    ΔΔΔⲆᐃ: 68,
    Ⲇⵠᐃⵠⵠ: 78,
    ⲆⲆᐃⵠΔ: 29,
    ΔᐃⵠᐃΔ: 27,
    ⲆΔⵠΔΔ: 3,
    ⵠⲆΔⲆⵠᐃⲆ: 76,
    ⲆΔⲆⵠΔ: 67,
    ⲆⵠⲆΔⲆ: 5,
    ᐃⲆΔᐃΔ: 19,
    ⵠⲆᐃΔΔ: 48,
    ΔⵠⲆⲆᐃᐃΔ: 84,
    ⲆⵠΔⲆⲆ: 63,
    ⲆΔΔⲆΔ: 80,
    ⵠᐃᐃΔΔ: 26,
    ΔⲆⲆⲆΔ: 32,
    ⵠⲆΔᐃⲆ: 87,
    ΔⵠⲆⲆⲆ: 16,
    ΔⵠⲆⵠⲆ: 36,
    ⵠᐃΔΔᐃ: 23,
    ΔᐃΔΔⲆ: 11,
    ΔᐃΔΔⵠ: 100,
    ΔⵠⲆⲆΔ: 43,
    ᐃΔᐃⵠΔ: 54,
    ⲆⲆΔΔᐃ: 66,
    ⲆⵠⵠⲆᐃ: 47,
    ΔᐃⵠⵠᐃᐃⲆ: 85,
    ⵠᐃⵠⲆⵠ: 49,
    ᐃᐃⵠΔⲆ: 64,
    Δᐃⵠⵠᐃ: 20,
    ⵠᐃⲆⲆᐃ: 8,
    ΔΔᐃⲆⵠ: 42,
    ΔⲆⲆΔⲆ: 55,
    ᐃⲆⵠᐃⲆ: 61,
    ᐃⲆᐃΔᐃ: 13,
    ⵠⵠⵠⵠⵠ: 4,
    ᐃⵠⵠΔⵠ: 24,
    ⵠⲆⲆᐃᐃ: 51,
    ⲆⲆⲆⲆⵠ: 30,
    ᐃⲆᐃΔⲆ: 46,
    ⵠᐃⵠΔᐃ: 71,
    ⲆⵠⲆΔⵠ: 39,
    ᐃⲆᐃⵠⵠ: 45,
    ⵠⵠⲆᐃΔ: 69,
    ⵠⲆΔΔᐃ: 31,
    ⵠⵠⵠᐃᐃ: 41,
    ᐃᐃⵠΔΔ: 33,
    ᐃⲆⲆⲆⵠ: 1,
    ΔⲆᐃΔΔ: 0,
    ᐃⲆⵠᐃᐃ: 7,
    ⲆᐃⲆΔΔ: 38,
    ΔΔⲆΔΔ: 9,
    ΔΔⵠΔΔ: 70,
    ⲆⲆΔᐃⵠ: 77,
    ᐃᐃᐃΔⵠ: 17,
    ΔΔᐃᐃⲆ: 28,
    ⵠΔᐃΔᐃ: 6,
    ΔΔⵠᐃⵠ: 79,
    ΔⲆⵠΔᐃᐃΔ: 83,
    ⲆⵠΔⲆΔ: 40,
    ᐃⵠᐃΔⵠ: 74,
    ΔⵠᐃⲆⵠ: 10,
    ⲆⵠΔΔΔ: 82,
    ᐃᐃΔΔⲆ: 73,
    ⲆⲆⲆᐃᐃⵠΔ: 89,
    ⵠⵠᐃᐃΔ: 22,
    ⲆⲆⵠⲆΔ: 72,
    ᐃⲆΔᐃᐃ: 21,
    ⲆⵠΔᐃΔ: 52,
    Δⵠⵠᐃᐃ: 86,
    ⲆᐃⵠᐃⲆ: 44,
    ⲆⲆⵠⲆᐃ: 53,
    ᐃⵠⵠⲆΔ: 50,
    ᐃⲆⲆⲆⲆ: 34,
    ⲆⵠΔⵠΔ: 81,
    ⵠᐃᐃΔⲆ: 88,
    ᐃΔΔⵠⲆ: 37,
    ᐃⵠΔΔⵠ: 60,
    ΔΔᐃⵠΔ: 90,
    ⵠᐃᐃⲆⵠ: 18,
    ⲆΔⲆⲆⵠ: 91,
    ⵠⲆⵠⲆⲆ: 62,
    ⵠᐃⲆⲆΔ: 35,
    ⵠΔⵠⲆⲆ: 14,
    ᐃᐃⵠⵠⵠ: 12,
    ΔⲆⲆᐃⵠ: 25,
    ⲆΔⵠⵠⵠ: 75,
    ΔⵠⵠⲆᐃ: 56
  };
  var Sf = [[24, 108], [25, 111], [26, 112], [27, 121], [28, 202]];
  function Qf(a, b, c, d) {
    this.id = a;
    this.ΔⵠⵠΔΔ = (a + 5) * 8;
    this.ΔⵠⲆᐃⵠ = so / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.ⲆⲆⲆⵠ = Math.cos(d);
    this.alpha = 0;
  }
  function _f(g) {
    function e(b, c, d, e, f) {
      for (var a = 0; f > a && j(b, c, d, e, 8) !== 1; a++);
      if (a === f) {
        return 0;
      } else {
        return 1;
      }
    }
    function i(b, c, d) {
      var e = c;
      for (var f = d; f < jx.ΔᐃⵠΔⵠ; f++) {
        for (var g = c; jx.ⲆⲆᐃᐃⵠ > g && (f === d && (e = Math.max(g, e)), g <= e) && b[f][g] !== 1; g++) {
          b[f][g] = 1;
        }
        if (g < e) {
          break;
        }
      }
      jx.ᐃⵠᐃΔ.push(new jx.ᐃⵠⲆⵠⵠⵠᐃ(jx.ⵠⵠΔⵠⲆ, c, d, e - c + 1, f - d, 15));
    }
    function j(c, d, e, f, i) {
      var j = d + Math.floor(jx.ΔΔΔΔᐃ.get() * f);
      var a = e + Math.floor(jx.ΔΔΔΔᐃ.get() * f);
      var k = 10 + Math.floor((jx.ⲆⲆᐃᐃⵠ - j - 20) * jx.ΔΔΔΔᐃ.get());
      var m = 10 + Math.floor(jx.ΔΔΔΔᐃ.get() * (jx.ΔᐃⵠΔⵠ - a - 20));
      var h = k + j;
      var g = m + a;
      for (var l = 0; jx.ᐃⵠᐃΔ.length > l; l++) {
        var n = jx.ᐃⵠᐃΔ[l];
        if (ⵠⵠⵠ.ⵠᐃᐃⵠᐃⲆΔ(k, h, m, g, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
          return 0;
        }
      }
      jx.ᐃⵠᐃΔ.push(new jx.ᐃⵠⲆⵠⵠⵠᐃ(c, k, m, j, a, 15));
      return 1;
    }
    function k(f, j, k, p, n, o, a, q) {
      var h = Math.floor(a / 2);
      var g = Math.max(1, Math.floor(a / 2));
      var l = Math.floor(q / 2);
      var r = Math.max(1, Math.floor(q / 2));
      for (var b = 0; k > b; b++) {
        for (var s = f - l; f + r > s; s++) {
          for (var t = j - h; t < j + g; t++) {
            if (c(s, t, "wtb", 0, 1) === 1) {
              o.push([s, t, 1]);
            }
          }
        }
        f += p;
        j += n;
      }
    }
    function q(a, b) {
      for (var c = 0; b.length > c; c++) {
        n(b[c][0], b[c][1], a, b[c][2]);
      }
    }
    function a(f, e) {
      var i = jx.ᐃⵠᐃΔ[f];
      var j = Math.floor(i.y1 / 100);
      var n = Math.floor(i.x1 / 100);
      var a = Math.floor(i.ᐃⵠⵠ / 100);
      var o = n + (y = Math.floor(i.w / 100));
      var h = 2;
      var p = a;
      var q = j;
      for (var r = n + 10 + Math.floor((y - 20) * jx.ΔΔΔΔᐃ.get()), s = r - 4; r + 4 > s; s++) {
        c(j - 1, s, "wtb", 0, 1);
      }
      while (p > 0) {
        if (h !== 2) {
          if (p < 10) {
            for (z = 1; p > 0; z++) {
              k(q, r, 1, 1, 0, e, z, 1);
              p -= 1;
              q += 1;
            }
          } else if (h !== 1) {
            h = 1;
            var t = Math.floor(1 + jx.ΔΔΔΔᐃ.get() * 2);
            var w = 1 + Math.floor(jx.ΔΔΔΔᐃ.get() * 4);
            if (n + 16 > r) {
              k(q, r, t, 0, 1, e, w, w);
              r += t;
            } else if (r > o - 16) {
              k(q, r, t, 0, -1, e, w, w);
              r -= t;
            } else if (jx.ΔΔΔΔᐃ.get() > 0.5) {
              k(q, r, t, 0, 1, e, w, w);
              r += t;
            } else {
              k(q, r, t, 0, -1, e, w, w);
              r -= t;
            }
          } else {
            var x = Math.min(p, Math.floor(1 + jx.ΔΔΔΔᐃ.get() * 4));
            var y = 1 + Math.floor(jx.ΔΔΔΔᐃ.get() * 4);
            k(q, r, x, 1, 0, e, y, y);
            h = 0;
            p -= x;
            q += x;
          }
        } else {
          for (var z = 10; z > 1; z--) {
            k(q, r, 1, 1, 0, e, z, 1);
            p -= 1;
            q += 1;
          }
          h = 0;
        }
      }
      for (s = r - 1; r + 2 > s; s++) {
        c(q, s, "wtb", 0, 1);
      }
    }
    function n(a, b, c, d) {
      if (h(a, b) && (ⵠⲆᐃᐃ = gx.ⵠⲆᐃᐃ, ⵠⲆᐃᐃ[a][b] === undefined && (ⵠⲆᐃᐃ[a][b] = {}), ⵠⲆᐃᐃ[a][b].r === undefined)) {
        var e = 0;
        if (h(a - 1, b) && ⵠⲆᐃᐃ[a - 1][b] !== undefined && Tg !== ⵠⲆᐃᐃ[a - 1][b].wtb) {
          e += 2;
        }
        if (h(a, b - 1) && Tg !== ⵠⲆᐃᐃ[a][b - 1] && ⵠⲆᐃᐃ[a][b - 1].wtb !== undefined) {
          e += 8;
        }
        if (h(a, b + 1) && ⵠⲆᐃᐃ[a][b + 1] !== undefined && ⵠⲆᐃᐃ[a][b + 1].wtb !== undefined) {
          e += 16;
        }
        if (h(a + 1, b) && ⵠⲆᐃᐃ[a + 1][b] !== undefined && Xa !== ⵠⲆᐃᐃ[a + 1][b].wtb) {
          e += 64;
        }
        if (h(a - 1, b - 1) && (e & 10) === 10 && ⵠⲆᐃᐃ[a - 1][b - 1] !== undefined && ⵠⲆᐃᐃ[a - 1][b - 1].wtb !== Tg) {
          e += 1;
        }
        if (h(a - 1, b + 1) && !(~e & 18) && ⵠⲆᐃᐃ[a - 1][b + 1] !== Aq && ⵠⲆᐃᐃ[a - 1][b + 1].wtb !== Vh) {
          e += 4;
        }
        if (h(a + 1, b - 1) && (e & 72) === 72 && ⵠⲆᐃᐃ[a + 1][b - 1] !== vh && ⵠⲆᐃᐃ[a + 1][b - 1].wtb !== undefined) {
          e += 32;
        }
        if (h(a + 1, b + 1) && (e & 80) == 80 && w !== ⵠⲆᐃᐃ[a + 1][b + 1] && ⵠⲆᐃᐃ[a + 1][b + 1].wtb !== mg) {
          e += 128;
        }
        ⵠⲆᐃᐃ[a][b].r = {};
        ⵠⲆᐃᐃ[a][b].r.ⲆⵠΔΔᐃⲆⲆ = e;
        ⵠⲆᐃᐃ[a][b].r.ⵠⵠⵠⲆⲆⵠⲆ = d;
        ⵠⲆᐃᐃ[a][b].r.ⵠΔᐃΔ = jx.ᐃⲆⲆΔΔ(c, b * 100 + 50, a * 100 + 50) - 400;
        ⵠⲆᐃᐃ[a][b].r.x = b * 100 + 50;
        ⵠⲆᐃᐃ[a][b].r.y = a * 100 + 50;
      }
    }
    function h(a, b) {
      return a >= 0 && b >= 0 && a < jx.ΔᐃⵠΔⵠ && b < jx.ⲆⲆᐃᐃⵠ;
    }
    function l(c, d) {
      for (var e = 0; e < 6; e++) {
        o(c, "t", e, Math.floor(d * 80));
      }
      for (e = 0; e < 4; e++) {
        o(c, "b", e, Math.floor(d * 80));
      }
      for (e = 0; e < 3; e++) {
        o(c, "s", e, Math.floor(d * 50));
      }
      var f = [];
      for (e = 0; e < 6; e++) {
        a(c, f);
      }
      q(c, f);
      f = [];
      o(c, "p", 0, Math.floor(d * 28));
      for (e = 0; e < 3; e++) {
        o(c, "g", e, Math.floor(d * 7));
      }
      for (e = 0; e < 3; e++) {
        o(c, "d", e, Math.floor(d * 2));
      }
      for (e = 0; e < 3; e++) {
        o(c, "a", e, Math.floor(d * 1));
      }
      for (e = 0; e < 3; e++) {
        o(c, "m", e, Math.floor(d * 1));
      }
      o(c, "a", 0, Math.floor(d * 1));
      b(c);
    }
    function o(f, e, i, j, k) {
      var n = jx.ᐃⵠᐃΔ[f];
      var a = Math.floor(n.x1 / 100);
      var p = Math.floor(n.y1 / 100);
      var q = Math.floor(n.w / 100);
      var t = Math.floor(n.ᐃⵠⵠ / 100);
      if (k !== undefined) {
        k = 1 - k;
        a += Math.floor(q * k / 2);
        p += Math.floor(t * k / 2);
        q -= Math.floor(q * k);
        t -= Math.floor(t * k);
      }
      var w = gx.ⵠⲆᐃᐃ;
      for (var l = 0, x = 0; l < j && x <= 50000; x++) {
        var y = p + Math.floor(jx.ΔΔΔΔᐃ.get() * t);
        var z = a + Math.floor(q * jx.ΔΔΔΔᐃ.get());
        if (jx.ᐃⲆⲆΔΔ(f, z * 100 + 50, y * 100 + 50) >= 400 && ((A = w[y][z + 1]) === undefined || A[e] === js || A[e][i] === undefined) && ((A = w[y][z - 1]) === undefined || A[e] === undefined || A[e][i] === undefined) && ((A = w[y + 1][z]) === undefined || A[e] === undefined || A[e][i] === undefined) && ((A = w[y - 1][z]) === undefined || br === A[e] || A[e][i] === undefined) && ((A = w[y + 1][z - 1]) === Tg || A[e] === undefined || A[e][i] === ca) && ((A = w[y - 1][z + 1]) === wh || A[e] === wh || A[e][i] === vh) && ((A = w[y + 1][z + 1]) === undefined || A[e] === Tg || A[e][i] === undefined)) {
          var A = w[y - 1][z - 1];
          if (dk === A || mg === A[e] || js === A[e][i]) {
            if (w[y][z] === undefined) {
              c(y, z, e, i, 1);
              l++;
            }
          }
        }
      }
    }
    function r(a, c) {
      for (var d = 0; d < 3; d++) {
        o(a, "s", d, Math.floor(c * 18));
      }
      for (d = 0; d < 3; d++) {
        o(a, "f", d, Math.floor(c * 24));
      }
      for (d = 0; d < 3; d++) {
        o(a, "d", d, Math.max(1, Math.floor(c * 2)), 0.3);
      }
      for (d = 0; d < 3; d++) {
        o(a, "g", d, Math.floor(c * 6));
      }
      b(a);
    }
    function d(a) {
      for (var c = 0; c < 3; c++) {
        o(a, "s", c, 15);
      }
      for (c = 0; c < 3; c++) {
        o(a, "a", c, 1);
      }
      for (c = 0; c < 3; c++) {
        o(a, "d", c, 1);
      }
      b(a);
    }
    function s(a, b) {
      for (var d = 0; d < 3; d++) {
        o(a, "s", d, Math.floor(b * 12));
      }
      for (d = 0; d < 3; d++) {
        o(a, "m", d, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      o(a, "c", 0, Math.floor(b * 36));
      var e = [];
      (function (d, e) {
        var f = jx.ᐃⵠᐃΔ[d];
        var i = Math.floor(f.y1 / 100);
        var j = Math.floor(f.x1 / 100);
        var k = Math.floor(f.ᐃⵠⵠ / 100);
        var a = Math.floor(f.w / 100);
        var m = i + Math.floor(k / 2);
        var h = j + Math.floor(a / 2);
        for (var g = 0; g < 3; g++) {
          c(n = Math.floor(m - 3 + jx.ΔΔΔΔᐃ.get() * 6), o = Math.floor(h - 3 + jx.ΔΔΔΔᐃ.get() * 6), "plm", g, 1);
        }
        for (g = 0; g < 80; g++) {
          var n;
          var o;
          if (c(n = Math.floor(m - 3 + jx.ΔΔΔΔᐃ.get() * 6), o = Math.floor(h - 3 + jx.ΔΔΔΔᐃ.get() * 6), "wtb", 0, 1) === 1) {
            e.push([n, o, 0]);
          }
        }
      })(a, e);
      q(a, e);
      e = [];
    }
    function m(a, d) {
      (function (d, e) {
        var f = jx.ᐃⵠᐃΔ[e];
        for (var i = 0, j = 0; j < d && i < 10000; i++) {
          var k = f.y1 + jx.ΔΔΔΔᐃ.get() * f.ᐃⵠⵠ;
          var m = f.x1 + f.w * jx.ΔΔΔΔᐃ.get();
          var p = Math.floor(k / 100);
          var q = Math.floor(m / 100);
          if (jx.ᐃⲆⲆΔΔ(e, q * 100 + 50, p * 100 + 50) >= 600) {
            for (var s = 1, t = p - 4; s === 1 && p + 4 >= t; t++) {
              for (var v = q - 4; s === 1 && v <= q + 4; v++) {
                if (gx.ⵠⲆᐃᐃ[t][v] !== undefined) {
                  s = 0;
                }
              }
            }
            if (s !== 0) {
              c(p, q, "la", j % 6, 0);
              j++;
            }
          }
        }
      })(d * 80, a);
      for (var e = 0; e < 3; e++) {
        o(a, "s", e, Math.floor(d * 12));
      }
      for (e = 0; e < 3; e++) {
        o(a, "g", e, Math.floor(d * 6));
      }
      for (e = 0; e < 3; e++) {
        o(a, "re", e, Math.max(1, Math.floor(d * 1)), 0.2);
      }
      for (e = 0; e < 3; e++) {
        o(a, "a", e, Math.max(1, Math.floor(d * 2)));
      }
      b(a);
    }
    function c(a, b, c, d, e) {
      if (a >= 0 && b >= 0 && jx.ΔᐃⵠΔⵠ > a && b < jx.ⲆⲆᐃᐃⵠ) {
        ⵠⲆᐃᐃ = gx.ⵠⲆᐃᐃ;
        if (dk === ⵠⲆᐃᐃ[a][b]) {
          ⵠⲆᐃᐃ[a][b] = {};
        }
        if (ⵠⲆᐃᐃ[a][b][c] !== js) {
          return 0;
        } else {
          ⵠⲆᐃᐃ[a][b][c] = [];
          ⵠⲆᐃᐃ[a][b][c][d] = [{
            x: b * 100 + 50,
            y: a * 100 + 50
          }];
          if (e === 1) {
            (function (a, b, c, d) {
              Mb.push([a, b, c, d]);
            })(c, d, a, b);
          }
          return 1;
        }
      }
    }
    function p(c, d) {
      for (var e = 0; e < 6; e++) {
        o(c, "t", e, Math.floor(d * 20));
      }
      for (e = 0; e < 4; e++) {
        o(c, "b", e, Math.floor(d * 20));
      }
      for (e = 0; e < 3; e++) {
        o(c, "s", e, Math.floor(d * 20));
      }
      var f = [];
      a(c, f);
      q(c, f);
      f = [];
      o(c, "p", 0, Math.floor(d * 24));
      for (e = 0; e < 3; e++) {
        o(c, "g", e, Math.floor(d * 5));
      }
      if (jx.mode === 2) {
        for (e = 0; e < 3; e++) {
          o(c, "d", e, Math.floor(d * 3));
        }
        for (e = 0; e < 3; e++) {
          o(c, "a", e, Math.floor(d * 2));
        }
      }
      b(c);
    }
    function b(a) {
      var b = jx.ᐃⵠᐃΔ[a];
      c(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      c(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      c(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
      c(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
    }
    function u(a, b, c) {
      if (a[b]) {
        for (Hk = 0; Hk < a[b].length; Hk++) {
          if (a[b][Hk]) {
            for (ΔΔᐃⵠ = 0; ΔΔᐃⵠ < a[b][Hk].length; ΔΔᐃⵠ++) {
              a[b][Hk][ΔΔᐃⵠ].ᐃⵠΔ = c;
              a[b][Hk][ΔΔᐃⵠ].ᐃⲆᐃ = Ma;
              a[b][Hk][ΔΔᐃⵠ].time = 0;
              a[b][Hk][ΔΔᐃⵠ].angle = 0;
            }
          }
        }
      }
    }
    this.mode = 0;
    this.ΔᐃⲆΔᐃᐃΔ = g;
    this.ΔΔⲆⲆᐃ = 0;
    this.ᐃⲆΔᐃΔⵠⲆ = 6;
    this.ⲆⲆⵠⲆ = [];
    this.ⵠⲆⵠ = [];
    this.ⵠⲆⵠ[0] = [];
    this.ⵠⲆⵠ[100] = [];
    this.ⵠⲆⵠ[80] = [];
    this.ⵠⲆⵠ[60] = [];
    this.ⵠⲆⵠ[67] = [];
    this.ⵠⲆⵠ[70] = [];
    this.ⵠⲆⵠ[77] = [];
    this.ⵠⲆⵠ[71] = [];
    this.ⵠⲆⵠ[72] = [];
    this.ⵠⲆⵠ[73] = [];
    this.ⵠⲆⵠ[74] = [];
    this.ⵠⲆⵠ[65] = [];
    this.ⵠⲆⵠ[66] = [];
    this.ⵠⲆⵠ[62] = [];
    this.ⵠⲆⵠ[88] = [];
    this.ⵠⲆⵠ[91] = [];
    this.ⵠⲆⵠ[90] = [];
    this.ⵠⲆⵠ[63] = [];
    this.ⵠⲆⵠ[78] = [];
    this.ⵠⲆⵠ[64] = [];
    this.ⵠⲆⵠ[69] = [];
    this.ⵠⲆⵠ[68] = [];
    this.ⵠⲆⵠ[79] = [];
    this.ⵠⲆⵠ[89] = [];
    this.ⵠⲆⵠ[83] = [];
    this.ⵠⲆⵠ[84] = [];
    this.ⵠⲆⵠ[85] = [];
    this.ⵠⲆⵠ[81] = [];
    this.ⵠⲆⵠ[82] = [];
    this.ⵠⲆⵠ[86] = [];
    this.ⵠⲆⵠ[34] = [];
    this.ⵠⲆⵠ[36] = [];
    this.ⵠⲆⵠ[61] = [];
    this.ⵠⲆⵠ[2] = [];
    this.ⵠⲆⵠ[1] = [];
    this.ⵠⲆⵠ[6] = [];
    this.ⵠⲆⵠ[3] = [];
    this.ⵠⲆⵠ[5] = [];
    this.ⵠⲆⵠ[12] = [];
    this.ⵠⲆⵠ[13] = [];
    this.ⵠⲆⵠ[14] = [];
    this.ⵠⲆⵠ[20] = [];
    this.ⵠⲆⵠ[52] = [];
    this.ⵠⲆⵠ[4] = [];
    this.ⵠⲆⵠ[7] = [];
    this.ⵠⲆⵠ[8] = [];
    this.ⵠⲆⵠ[9] = [];
    this.ⵠⲆⵠ[19] = [];
    this.ⵠⲆⵠ[50] = [];
    this.ⵠⲆⵠ[41] = [];
    this.ⵠⲆⵠ[10] = [];
    this.ⵠⲆⵠ[15] = [];
    this.ⵠⲆⵠ[16] = [];
    this.ⵠⲆⵠ[17] = [];
    this.ⵠⲆⵠ[21] = [];
    this.ⵠⲆⵠ[51] = [];
    this.ⵠⲆⵠ[45] = [];
    this.ⵠⲆⵠ[46] = [];
    this.ⵠⲆⵠ[47] = [];
    this.ⵠⲆⵠ[48] = [];
    this.ⵠⲆⵠ[49] = [];
    this.ⵠⲆⵠ[53] = [];
    this.ⵠⲆⵠ[18] = [];
    this.ⵠⲆⵠ[29] = [];
    this.ⵠⲆⵠ[56] = [];
    this.ⵠⲆⵠ[11] = [];
    this.ⵠⲆⵠ[22] = [];
    this.ⵠⲆⵠ[23] = [];
    this.ⵠⲆⵠ[30] = [];
    this.ⵠⲆⵠ[38] = [];
    this.ⵠⲆⵠ[33] = [];
    this.ⵠⲆⵠ[31] = [];
    this.ⵠⲆⵠ[55] = [];
    this.ⵠⲆⵠ[37] = [];
    this.ⵠⲆⵠ[43] = [];
    this.ⵠⲆⵠ[44] = [];
    this.ⵠⲆⵠ[54] = [];
    this.ⵠⲆⵠ[39] = [];
    this.ⵠⲆⵠ[40] = [];
    this.ⵠⲆⵠ[32] = [];
    this.ⵠⲆⵠ[24] = [];
    this.ⵠⲆⵠ[25] = [];
    this.ⵠⲆⵠ[26] = [];
    this.ⵠⲆⵠ[27] = [];
    this.ⵠⲆⵠ[28] = [];
    this.ⵠⲆⵠ[35] = [];
    this.ⵠⲆⵠ[87] = [];
    this.ⵠⲆⵠ[42] = [];
    this.ΔⲆᐃΔⲆ = [];
    this.ⲆⲆᐃᐃⵠ = 260;
    this.ΔᐃⵠΔⵠ = 260;
    this.ᐃⲆⲆᐃⵠᐃᐃ = 100;
    this.ΔᐃΔᐃᐃⲆΔ = 100;
    this.w = this.ᐃⲆⲆᐃⵠᐃᐃ * this.ⲆⲆᐃᐃⵠ;
    this.ᐃⵠⵠ = this.ΔᐃΔᐃᐃⲆΔ * this.ΔᐃⵠΔⵠ;
    this.ΔΔΔΔᐃ = new yk.ᐃⲆⵠᐃΔⲆᐃ();
    this.ᐃⵠᐃΔ = [];
    this.ᐃⲆⲆⵠ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(zl, 0, 1, 0, 1, 1);
    this.transition = Eh;
    this.ⲆᐃⲆⵠⲆ = [];
    this.ⵠⲆⵠᐃⵠ = 0;
    this.ⵠⲆⵠⵠΔΔⵠ = 1;
    this.ΔᐃΔΔΔⲆᐃ = 2;
    this.ⲆΔⲆᐃᐃⵠⲆ = 3;
    this.ⵠⵠΔⵠⲆ = 4;
    this.ΔΔᐃΔⲆⲆΔ = 10;
    this.ⲆᐃⲆⵠⲆ[this.ⵠⲆⵠᐃⵠ] = {
      ΔⲆⲆⲆⲆⲆᐃ: 1,
      ⵠᐃⲆ: [19, 58, 43],
      Ⲇⵠᐃ: [4, 43, 48],
      ᐃᐃᐃΔΔ: ["#133a2b", "#042b30"]
    };
    this.ⲆᐃⲆⵠⲆ[this.ⵠⵠΔⵠⲆ] = {
      ΔⲆⲆⲆⲆⲆᐃ: 0,
      ⵠᐃⲆ: [11, 106, 132],
      Ⲇⵠᐃ: [9, 55, 63],
      ᐃᐃᐃΔΔ: ["#0B6A84", "#09373F"]
    };
    this.ⲆᐃⲆⵠⲆ[this.ⵠⲆⵠⵠΔΔⵠ] = {
      ΔⲆⲆⲆⲆⲆᐃ: 0,
      ⵠᐃⲆ: [235, 242, 240],
      Ⲇⵠᐃ: [19, 97, 103],
      ᐃᐃᐃΔΔ: ["#EBF2F0", "#136167"]
    };
    this.ⲆᐃⲆⵠⲆ[this.ΔᐃΔΔΔⲆᐃ] = {
      ⵠᐃⲆ: [45, 32, 23],
      Ⲇⵠᐃ: [3, 28, 30],
      ᐃᐃᐃΔΔ: ["#2D2017", "#031C1E"],
      ΔⲆⲆⲆⲆⲆᐃ: 0
    };
    this.ⲆᐃⲆⵠⲆ[this.ⲆΔⲆᐃᐃⵠⲆ] = {
      ᐃᐃᐃΔΔ: ["#4A4A4A", "#183D3C"],
      ⵠᐃⲆ: [74, 74, 74],
      ΔⲆⲆⲆⲆⲆᐃ: 0,
      Ⲇⵠᐃ: [24, 61, 60]
    };
    this.ⲆᐃⲆⵠⲆ[this.ΔΔᐃΔⲆⲆΔ] = {
      ΔⲆⲆⲆⲆⲆᐃ: 0,
      Ⲇⵠᐃ: [9, 61, 56],
      ⵠᐃⲆ: [235, 216, 166],
      ᐃᐃᐃΔΔ: ["#EBD8A6", "#093D38"]
    };
    this.ᐃⵠⲆⵠⵠⵠᐃ = function (b, c, d, e, f, g) {
      this.x1 = c * 100;
      this.y1 = d * 100;
      this.w = e * 100;
      this.ᐃⵠⵠ = f * 100;
      this.x2 = (c + e) * 100;
      this.y2 = (d + f) * 100;
      this.ΔⵠΔ = b;
      this.ᐃⵠᐃ = g === js ? 15 : g;
    };
    this.ᐃᐃⵠⲆᐃ = -1000000;
    this.ⵠⲆⵠΔⲆ = this.ᐃᐃⵠⲆᐃ;
    this.ⵠⲆᐃⵠΔ = this.ᐃᐃⵠⲆᐃ;
    this.ᐃⵠΔⵠᐃ = this.ᐃᐃⵠⲆᐃ;
    this.ⲆᐃⲆᐃⵠⵠᐃ = this.ᐃᐃⵠⲆᐃ;
    this.ᐃⲆΔⵠⲆΔⵠ = this.ᐃᐃⵠⲆᐃ;
    this.Ⲇᐃᐃⵠⵠ = this.ᐃᐃⵠⲆᐃ;
    this.ΔΔΔⲆⵠⲆΔⲆΔ = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var e = Math.floor(d / 100);
      var f = Math.floor(c / 100);
      b.ⵠⲆⵠΔⲆ = jx.ᐃᐃⵠⲆᐃ;
      b.ⵠⲆᐃⵠΔ = jx.ᐃᐃⵠⲆᐃ;
      b.ᐃⵠΔⵠᐃ = jx.ᐃᐃⵠⲆᐃ;
      b.ⲆᐃⲆᐃⵠⵠᐃ = jx.ᐃᐃⵠⲆᐃ;
      b.Ⲇᐃᐃⵠⵠ = jx.ᐃᐃⵠⲆᐃ;
      b.ΔΔΔᐃᐃᐃΔ = jx.ᐃᐃⵠⲆᐃ;
      for (var g = 0; jx.ᐃⵠᐃΔ[g].ΔⵠΔ !== jx.ⵠⵠΔⵠⲆ; g++) {
        if (jx.ᐃⵠᐃΔ[g].ΔⵠΔ === jx.ⵠⲆⵠᐃⵠ) {
          var h = jx.ᐃⲆⲆΔΔ(g, c, d);
          b.ⲆᐃⲆᐃⵠⵠᐃ = Math.max(b.ⲆᐃⲆᐃⵠⵠᐃ, h);
          if (h > 0 && jx.ᐃΔⵠⲆⲆᐃΔⵠⲆ(g, c, d) === 1) {
            b.ΔΔΔᐃᐃᐃΔ = 1;
          }
        } else if (jx.ⵠⲆⵠⵠΔΔⵠ === jx.ᐃⵠᐃΔ[g].ΔⵠΔ) {
          b.ⵠⲆⵠΔⲆ = Math.max(b.ⵠⲆⵠΔⲆ, jx.ᐃⲆⲆΔΔ(g, c, d));
        } else if (jx.ΔΔᐃΔⲆⲆΔ === jx.ᐃⵠᐃΔ[g].ΔⵠΔ) {
          b.ⵠⲆᐃⵠΔ = Math.max(b.ⵠⲆᐃⵠΔ, jx.ᐃⲆⲆΔΔ(g, c, d));
        } else if (jx.ᐃⵠᐃΔ[g].ΔⵠΔ === jx.ΔᐃΔΔΔⲆᐃ) {
          b.ᐃⵠΔⵠᐃ = Math.max(b.ᐃⵠΔⵠᐃ, jx.ᐃⲆⲆΔΔ(g, c, d));
        } else if (jx.ᐃⵠᐃΔ[g].ΔⵠΔ === jx.ⲆΔⲆᐃᐃⵠⲆ) {
          b.Ⲇᐃᐃⵠⵠ = Math.max(b.Ⲇᐃᐃⵠⵠ, jx.ᐃⲆⲆΔΔ(g, c, d));
        }
      }
      if (gx.ⵠⲆᐃᐃ[e][f].iblk) {
        b.ΔΔΔᐃᐃᐃΔ = 1;
      }
      if (jx.ⵠⵠⵠⵠᐃΔᐃᐃΔ(f, e)) {
        b.ᐃⲆΔⵠⲆΔⵠ = b.ᐃᐃⵠⲆᐃ;
      } else if (gx.ⵠⲆᐃᐃ[e][f].wtb || b.ⵠⲆⵠΔⲆ < 0 && b.ᐃⵠΔⵠᐃ < 0 && b.ⲆᐃⲆᐃⵠⵠᐃ < 0 && b.ΔΔΔᐃᐃᐃΔ < 0 && b.Ⲇᐃᐃⵠⵠ < 0 && b.ⵠⲆᐃⵠΔ < 0) {
        b.ᐃⲆΔⵠⲆΔⵠ = 1;
      } else {
        b.ᐃⲆΔⵠⲆΔⵠ = b.ᐃᐃⵠⲆᐃ;
      }
    };
    this.ⲆΔⲆΔⲆⲆⲆᐃᐃ = function (a, b) {
      jx.ⵠⲆⵠΔⲆ = jx.ᐃᐃⵠⲆᐃ;
      jx.ⵠⲆᐃⵠΔ = jx.ᐃᐃⵠⲆᐃ;
      jx.ᐃⵠΔⵠᐃ = jx.ᐃᐃⵠⲆᐃ;
      jx.Ⲇᐃᐃⵠⵠ = jx.ᐃᐃⵠⲆᐃ;
      jx.ⲆᐃⲆᐃⵠⵠᐃ = jx.ᐃᐃⵠⲆᐃ;
      for (var c = 0; jx.ⵠⵠΔⵠⲆ !== jx.ᐃⵠᐃΔ[c].ΔⵠΔ; c++) {
        if (jx.ⵠⲆⵠᐃⵠ === jx.ᐃⵠᐃΔ[c].ΔⵠΔ) {
          jx.ⲆᐃⲆᐃⵠⵠᐃ = Math.max(jx.ⲆᐃⲆᐃⵠⵠᐃ, jx.ᐃⲆⲆΔΔ(c, a, b));
        } else if (jx.ⵠⲆⵠⵠΔΔⵠ === jx.ᐃⵠᐃΔ[c].ΔⵠΔ) {
          jx.ⵠⲆⵠΔⲆ = Math.max(jx.ⵠⲆⵠΔⲆ, jx.ᐃⲆⲆΔΔ(c, a, b));
        } else if (jx.ΔΔᐃΔⲆⲆΔ === jx.ᐃⵠᐃΔ[c].ΔⵠΔ) {
          jx.ⵠⲆᐃⵠΔ = Math.max(jx.ⵠⲆᐃⵠΔ, jx.ᐃⲆⲆΔΔ(c, a, b));
        } else if (jx.ᐃⵠᐃΔ[c].ΔⵠΔ === jx.ΔᐃΔΔΔⲆᐃ) {
          jx.ᐃⵠΔⵠᐃ = Math.max(jx.ᐃⵠΔⵠᐃ, jx.ᐃⲆⲆΔΔ(c, a, b));
        } else if (jx.ⲆΔⲆᐃᐃⵠⲆ === jx.ᐃⵠᐃΔ[c].ΔⵠΔ) {
          jx.Ⲇᐃᐃⵠⵠ = Math.max(jx.Ⲇᐃᐃⵠⵠ, jx.ᐃⲆⲆΔΔ(c, a, b));
        }
      }
      if (jx.ⵠⲆⵠΔⲆ < 0 && jx.Ⲇᐃᐃⵠⵠ < 0 && jx.ⲆᐃⲆᐃⵠⵠᐃ < 0 && jx.Ⲇᐃᐃⵠⵠ < 0 && jx.ⵠⲆᐃⵠΔ < 0) {
        jx.ᐃⲆΔⵠⲆΔⵠ = 1;
      } else {
        jx.ᐃⲆΔⵠⲆΔⵠ = jx.ᐃᐃⵠⲆᐃ;
      }
    };
    this.ᐃΔⵠⲆⲆᐃΔⵠⲆ = function (b, c, d) {
      var e = jx.ᐃⵠᐃΔ[b];
      var f = 0;
      Δⵠᐃᐃ = e.x1 + 30 + (e.ᐃⵠᐃ & 4 ? 0 : 150);
      var g = c - Δⵠᐃᐃ;
      if ((e.ᐃⵠᐃ & 4) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⵠᐃⵠΔ = e.y1 + 250 + (e.ᐃⵠᐃ & 1 ? 0 : 150);
      g = d - ⵠᐃⵠΔ;
      if ((e.ᐃⵠᐃ & 1) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      Ⲇⵠᐃⵠ = e.x2 + 80 + ((e.ᐃⵠᐃ & 8) === 0 ? -200 : 0);
      g = Ⲇⵠᐃⵠ - c;
      if ((e.ᐃⵠᐃ & 8) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ᐃⲆⲆΔ = e.y2 - 200 + (e.ᐃⵠᐃ & 2 ? 0 : -200);
      g = ᐃⲆⲆΔ - d;
      if ((e.ᐃⵠᐃ & 2) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      if (Δⵠᐃᐃ <= c && c <= Ⲇⵠᐃⵠ && d >= ⵠᐃⵠΔ && ᐃⲆⲆΔ >= d) {
        return f;
      } else {
        return 0;
      }
    };
    this.ᐃⲆⲆΔΔ = function (a, b, c) {
      var d = jx.ᐃⵠᐃΔ[a];
      Δⵠᐃᐃ = d.x1 + 30;
      ⵠᐃⵠΔ = d.y1 + 250;
      Ⲇⵠᐃⵠ = d.x2 + 80;
      ᐃⲆⲆΔ = d.y2 - 200;
      if (b >= Δⵠᐃᐃ && b <= Ⲇⵠᐃⵠ && c >= ⵠᐃⵠΔ && ᐃⲆⲆΔ >= c) {
        return Math.min(b - Δⵠᐃᐃ, Ⲇⵠᐃⵠ - b, c - ⵠᐃⵠΔ, ᐃⲆⲆΔ - c);
      }
      var e = -1000000;
      if (b - Δⵠᐃᐃ < 0) {
        e = Math.max(e, b - Δⵠᐃᐃ);
      } else if (Ⲇⵠᐃⵠ - b < 0) {
        e = Math.max(e, Ⲇⵠᐃⵠ - b);
      }
      ⵠᐃΔΔΔΔᐃ = -1000000;
      if (ⵠᐃⵠΔ > c || ᐃⲆⲆΔ < c) {
        if (c - ⵠᐃⵠΔ < 0) {
          ⵠᐃΔΔΔΔᐃ = Math.max(ⵠᐃΔΔΔΔᐃ, c - ⵠᐃⵠΔ);
        } else {
          ⵠᐃΔΔΔΔᐃ = Math.max(ⵠᐃΔΔΔΔᐃ, ᐃⲆⲆΔ - c);
        }
        e = e !== -1000000 && ⵠᐃΔΔΔΔᐃ !== -1000000 ? Math.min(e, ⵠᐃΔΔΔΔᐃ) : ⵠᐃΔΔΔΔᐃ;
      }
      return e;
    };
    this.ⵠᐃⲆⲆⲆⵠΔ = function (b, d, e) {
      var f = e;
      var g = d;
      c(f, g, "isl", b, 1);
      for (var h = 0; h < 4; h++) {
        for (var i = 0; i < 3; i++) {
          c(f - i, g - h, "iblk", 0);
          c(f + i, g - h, "iblk", 0);
          c(f + i, g + h, "iblk", 0);
          c(f - i, g + h, "iblk", 0);
        }
      }
      if (b === 0) {
        for (h = 0; h < 2; h++) {
          c(f - h, g - 4, "iblk", 0);
          c(f + h, g - 4, "iblk", 0);
          c(f - h, g + 4, "iblk", 0);
          c(f + h, g + 4, "iblk", 0);
        }
        for (h = 0; h < 3; h++) {
          c(f - 3, g + h, "iblk", 0);
          c(f + 3, g + h, "iblk", 0);
          c(f - 3, g - h, "iblk", 0);
          c(f + 3, g - h, "iblk", 0);
        }
        c(f - 2, g - 4, "iblk", 0);
        c(f - 3, g - 3, "iblk", 0);
        c(f + 2, g + 4, "iblk", 0);
        c(f + 3, g + 3, "iblk", 0);
      } else if (b === 1) {
        for (h = 0; h < 3; h++) {
          c(f - h, g - 4, "iblk", 0);
          c(f + h, g - 4, "iblk", 0);
          c(f - h, g + 4, "iblk", 0);
          c(f + h, g + 4, "iblk", 0);
        }
        for (h = 0; h < 4; h++) {
          c(f - 3, g + h, "iblk", 0);
          c(f + 3, g + h, "iblk", 0);
          c(f - 3, g - h, "iblk", 0);
          c(f + 3, g - h, "iblk", 0);
        }
      } else if (b === 2) {
        for (h = 0; h < 2; h++) {
          c(f - h, g - 4, "iblk", 0);
          c(f + h, g - 4, "iblk", 0);
          c(f - h, g + 4, "iblk", 0);
          c(f + h, g + 4, "iblk", 0);
        }
        for (h = 0; h < 3; h++) {
          c(f - 3, g + h, "iblk", 0);
          c(f + 3, g + h, "iblk", 0);
          c(f - 3, g - h, "iblk", 0);
          c(f + 3, g - h, "iblk", 0);
        }
      }
    };
    this.ᐃⵠᐃⲆⵠⵠᐃⲆⵠ = function (b) {
      for (var d = 0; d < jx.ᐃⵠᐃΔ.length && b > 0; d++) {
        var f = jx.ᐃⵠᐃΔ[d];
        if (jx.ⵠⵠΔⵠⲆ === f.ΔⵠΔ && f.w > 1800 && f.ᐃⵠⵠ > 1000) {
          var g = Math.floor((f.x1 + f.w / 2) / 100);
          var j = Math.floor((f.y1 + f.ᐃⵠⵠ / 2) / 100);
          jx.ⵠᐃⲆⲆⲆⵠΔ(b % 3, g, j);
          for (var k = 0; k < 3; k++) {
            var l = j - 2 + Math.floor(jx.ΔΔΔΔᐃ.get() * 4);
            var m = g - 3 + Math.floor(jx.ΔΔΔΔᐃ.get() * 6);
            if (gx.ⵠⲆᐃᐃ[l][m].s === gs) {
              c(l, m, "plm", k);
            }
            l = j - 2 + Math.floor(jx.ΔΔΔΔᐃ.get() * 4);
            m = g - 3 + Math.floor(jx.ΔΔΔΔᐃ.get() * 6);
            if (gx.ⵠⲆᐃᐃ[l][m].plm === undefined) {
              c(l, m, "s", k);
            }
          }
          l = j - 2 + Math.floor(jx.ΔΔΔΔᐃ.get() * 4);
          m = g - 3 + Math.floor(jx.ΔΔΔΔᐃ.get() * 6);
          if (gx.ⵠⲆᐃᐃ[l][m].plm === w && gx.ⵠⲆᐃᐃ[l][m].s === w) {
            c(l, m, "p", 0, 1);
          }
          b--;
        }
      }
    };
    this.ⵠᐃⵠⲆⲆⲆΔΔᐃ = function (a) {
      jx.ΔΔΔΔᐃ.ᐃᐃᐃⵠΔ(a);
      var j = 0;
      while (true) {
        if (++j > 10000) {
          return;
        }
        jx.ᐃⵠᐃΔ = [];
        if (jx.ΔΔⲆⲆᐃ === 0 && (jx.mode === 3 || jx.mode === 7 || jx.mode === 0)) {
          jx.ΔΔⲆⲆᐃ = Gr;
        }
        if (jx.mode === 2) {
          jx.ᐃⵠᐃΔ.push(new jx.ᐃⵠⲆⵠⵠⵠᐃ(jx.ⵠⲆⵠᐃⵠ, 2, 2, 80, 80, 15));
        } else if (jx.mode === 4) {
          jx.ᐃⵠᐃΔ.push(new jx.ᐃⵠⲆⵠⵠⵠᐃ(jx.ⵠⲆⵠᐃⵠ, 2, 2, 150, 150, 15));
        } else if (jx.ΔΔⲆⲆᐃ !== 0 && jx.ΔΔⲆⲆᐃ.length > 0 && jx.ΔΔⲆⲆᐃ[0].length > 3) {
          for (var k = 0; jx.ΔΔⲆⲆᐃ.length > k; k++) {
            var t = jx.ΔΔⲆⲆᐃ[k];
            if (t[0] !== 0) {
              break;
            }
            var u = Bf.ⵠⲆⵠᐃⵠ;
            switch (t[1]) {
              case "FOREST":
                u = jx.ⵠⲆⵠᐃⵠ;
                break;
              case "WINTER":
                u = jx.ⵠⲆⵠⵠΔΔⵠ;
                break;
              case "DESERT":
                u = jx.ΔΔᐃΔⲆⲆΔ;
                break;
              case "LAVA":
                u = jx.ΔᐃΔΔΔⲆᐃ;
                break;
              case "DRAGON":
                u = jx.ⲆΔⲆᐃᐃⵠⲆ;
            }
            jx.ᐃⵠᐃΔ.push(new jx.ᐃⵠⲆⵠⵠⵠᐃ(u, t[2], t[3], t[4], t[5], t[6], t[7]));
          }
        } else if (jx.ΔΔⲆⲆᐃ !== 0) {
          for (k = 0; k < jx.ΔΔⲆⲆᐃ.length; k++) {
            var v = jx.ΔΔⲆⲆᐃ[k];
            u = Bf.ⵠⲆⵠᐃⵠ;
            switch (v[0]) {
              case "FOREST":
                u = jx.ⵠⲆⵠᐃⵠ;
                break;
              case "WINTER":
                u = jx.ⵠⲆⵠⵠΔΔⵠ;
                break;
              case "DESERT":
                u = jx.ΔΔᐃΔⲆⲆΔ;
                break;
              case "LAVA":
                u = jx.ΔᐃΔΔΔⲆᐃ;
                break;
              case "DRAGON":
                u = jx.ⲆΔⲆᐃᐃⵠⲆ;
            }
            if (e(u, v[1], v[2], 0, (k + 1) * 10) === 0) {
              break;
            }
          }
          if (jx.ΔΔⲆⲆᐃ.length !== k) {
            continue;
          }
        }
        break;
      }
      ⵠⲆᐃⲆⵠⲆⲆⵠⲆ();
      var x = [];
      for (var A = 0; jx.ΔᐃⵠΔⵠ > A; A++) {
        x[A] = new Array(jx.ⲆⲆᐃᐃⵠ);
        for (var B = 0; jx.ⲆⲆᐃᐃⵠ > B; B++) {
          x[A][B] = 0;
        }
      }
      for (A = 0; A < jx.ᐃⵠᐃΔ.length; A++) {
        for (var C = (v = jx.ᐃⵠᐃΔ[A]).x2 / 100, D = v.y2 / 100, E = v.x1 / 100; E <= C; E++) {
          for (var F = v.y1 / 100; F <= D; F++) {
            x[F][E] = 1;
          }
        }
      }
      for (F = 0; F < jx.ΔᐃⵠΔⵠ; F++) {
        for (E = 0; jx.ⲆⲆᐃᐃⵠ > E; E++) {
          if (x[F][E] === 0) {
            i(x, E, F);
          }
        }
      }
      gx = {
        w: jx.ⲆⲆᐃᐃⵠ,
        ᐃⵠⵠ: jx.ΔᐃⵠΔⵠ,
        ⵠⲆᐃᐃ: []
      };
      for (A = 0; jx.ΔᐃⵠΔⵠ > A; A++) {
        gx.ⵠⲆᐃᐃ[A] = [];
      }
      if (jx.ΔΔⲆⲆᐃ !== 0 && jx.ΔΔⲆⲆᐃ.length > 0 && jx.ΔΔⲆⲆᐃ[0].length > 3) {
        for (k = 0; jx.ΔΔⲆⲆᐃ.length > k; k++) {
          t = jx.ΔΔⲆⲆᐃ[k];
          if (t[1] === "isl") {
            jx.ⵠᐃⲆⲆⲆⵠΔ(t[2], t[3], t[4]);
          }
        }
      } else {
        jx.ᐃⵠᐃⲆⵠⵠᐃⲆⵠ(jx.ᐃⲆΔᐃΔⵠⲆ);
      }
      if (jx.ΔΔⲆⲆᐃ !== 0 && jx.ΔΔⲆⲆᐃ.length > 0 && jx.ΔΔⲆⲆᐃ[0].length > 3) {
        var G = [];
        for (k = 0; k < jx.ΔΔⲆⲆᐃ.length; k++) {
          if ((t = jx.ΔΔⲆⲆᐃ[k])[0] === 1) {
            if (t[1] === "r") {
              c(t[3], t[2], "wtb", 0, 1);
              G.push([t[3], t[2], t[4]]);
            } else {
              c(t[4], t[3], t[1], t[2], t[5]);
            }
          }
        }
        q(0, G);
        G = [];
      } else {
        for (A = 0; jx.ᐃⵠᐃΔ.length > A; A++) {
          v = jx.ᐃⵠᐃΔ[A];
          if (jx.mode === 4) {
            if (jx.ⵠⲆⵠᐃⵠ === v.ΔⵠΔ) {
              l(A, v.w / 10000);
            }
          } else {
            if (v.ΔⵠΔ === jx.ⵠⲆⵠᐃⵠ) {
              p(A, v.w / 10000);
            }
            if (v.ΔⵠΔ === jx.ΔᐃΔΔΔⲆᐃ) {
              m(A, v.w / 10000);
            }
            if (v.ΔⵠΔ === jx.ⵠⲆⵠⵠΔΔⵠ) {
              r(A, v.w / 10000);
            }
            if (jx.ΔΔᐃΔⲆⲆΔ === v.ΔⵠΔ) {
              s(A, v.w / 10000);
            }
            if (jx.ⲆΔⲆᐃᐃⵠⲆ === v.ΔⵠΔ) {
              d(A);
            }
          }
        }
      }
      Db("isl", 1);
      Db("wtb", 20);
      Db("la", 1);
      Db("c", 1);
      Db("s", 1);
      Db("f", 1);
      Db("p", 1);
      Db("g", 1);
      Db("d", 1);
      Db("a", 1);
      Db("re", 1);
      Db("m", 1);
      Mb = [];
      jx.ⲆΔᐃᐃᐃᐃⲆⵠⲆ(gx);
    };
    this.ᐃⲆⵠⲆ = c;
    this.ⲆΔᐃᐃᐃᐃⲆⵠⲆ = function (b) {
      for (var c = 0; c < this.ΔᐃⵠΔⵠ; c++) {
        for (var d = 0; this.ⲆⲆᐃᐃⵠ > d; d++) {
          b.ⵠⲆᐃᐃ[c] ||= [];
          if (b.ⵠⲆᐃᐃ[c][d]) {
            var e = b.ⵠⲆᐃᐃ[c][d];
            if (e.de && e.de.length > 0) {
              for (var f = 0; e.de.length > f; f++) {
                if (e.de[f] && e.de[f].length > 0) {
                  e.de = e.de[f][0];
                  if (f >= 41 && f <= 49) {
                    e.de.scale = 3;
                    var g = Math.floor(Math.random() * 3 + 1);
                    e.de.ΔΔΔ = [];
                    for (var h = 0; g > h; h++) {
                      e.de.ΔΔΔ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.random() * Math.PI * 2,
                        ⲆⲆⵠᐃᐃ: 41 + Math.floor(Math.random() * 9)
                      });
                    }
                  } else if (f >= 19 && f <= 26) {
                    e.de.scale = 3;
                    g = Math.floor(Math.random() * 3 + 1);
                    e.de.ΔΔΔ = [];
                    for (h = 0; g > h; h++) {
                      e.de.ΔΔΔ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.random() * Math.PI * 2,
                        ⲆⲆⵠᐃᐃ: 19 + Math.floor(Math.random() * 8)
                      });
                    }
                  } else if (f <= 15 || f >= 27 && f <= 40) {
                    e.de.angle = 0;
                    e.de.scale = 2;
                    e.de.ⲆⲆⵠᐃᐃ = f;
                  } else {
                    e.de.angle = Math.random() * Math.PI * 2;
                    e.de.scale = 1;
                    e.de.ⲆⲆⵠᐃᐃ = f;
                  }
                }
              }
            }
            u(e, "p", new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10));
            u(e, "t", new ⵠⵠⵠ.ⲆⵠⲆⲆ(T, 1, 1, 0, 10, 10));
            u(e, "s", new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10));
            u(e, "g", new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10));
            u(e, "d", new ⵠⵠⵠ.ⲆⵠⲆⲆ(T, 1, 1, 0, 10, 10));
            u(e, "b", new ⵠⵠⵠ.ⲆⵠⲆⲆ(sq, 1, 1, 0, 10, 10));
            u(e, "f", new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ph, 1, 1, 0, 10, 10));
            u(e, "sw", new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10));
            u(e, "gw", new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10));
            u(e, "dw", new ⵠⵠⵠ.ⲆⵠⲆⲆ(T, 1, 1, 0, 10, 10));
            u(e, "a", new ⵠⵠⵠ.ⲆⵠⲆⲆ(Zj, 1, 1, 0, 10, 10));
            u(e, "cs", new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10));
            u(e, "plm", new ⵠⵠⵠ.ⲆⵠⲆⲆ(Rh, 1, 1, 0, 10, 10));
            u(e, "re", new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10));
            u(e, "c", new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10));
            u(e, "m", new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ao, 1, 1, 0, 10, 10));
          } else {
            b.ⵠⲆᐃᐃ[c][d] = [];
          }
        }
      }
    };
    this.time = Nr.ⲆⵠⲆ;
    this.ᐃᐃΔⵠΔ = {
      translate: {
        y: 0,
        x: 0
      },
      ᐃᐃᐃⵠΔ: 0,
      now: 0,
      ᐃΔⲆΔΔ: 0
    };
    this.ⵠⵠⵠΔⲆᐃⵠᐃⲆ = function () {
      this.ΔⲆᐃΔⲆ = [];
      this.ⵠⲆⵠ[0] = [];
      this.ⵠⲆⵠ[2] = [];
      this.ⵠⲆⵠ[1] = [];
      this.ⵠⲆⵠ[6] = [];
      this.ⵠⲆⵠ[3] = [];
      this.ⵠⲆⵠ[5] = [];
      this.ⵠⲆⵠ[12] = [];
      this.ⵠⲆⵠ[13] = [];
      this.ⵠⲆⵠ[14] = [];
      this.ⵠⲆⵠ[20] = [];
      this.ⵠⲆⵠ[52] = [];
      this.ⵠⲆⵠ[30] = [];
      this.ⵠⲆⵠ[56] = [];
      this.ⵠⲆⵠ[38] = [];
      this.ⵠⲆⵠ[33] = [];
      this.ⵠⲆⵠ[31] = [];
      this.ⵠⲆⵠ[55] = [];
      this.ⵠⲆⵠ[37] = [];
      this.ⵠⲆⵠ[43] = [];
      this.ⵠⲆⵠ[44] = [];
      this.ⵠⲆⵠ[54] = [];
      this.ⵠⲆⵠ[39] = [];
      this.ⵠⲆⵠ[40] = [];
      this.ⵠⲆⵠ[32] = [];
      this.ⵠⲆⵠ[24] = [];
      this.ⵠⲆⵠ[25] = [];
      this.ⵠⲆⵠ[26] = [];
      this.ⵠⲆⵠ[27] = [];
      this.ⵠⲆⵠ[28] = [];
      this.ⵠⲆⵠ[35] = [];
      this.ⵠⲆⵠ[4] = [];
      this.ⵠⲆⵠ[7] = [];
      this.ⵠⲆⵠ[8] = [];
      this.ⵠⲆⵠ[9] = [];
      this.ⵠⲆⵠ[19] = [];
      this.ⵠⲆⵠ[50] = [];
      this.ⵠⲆⵠ[41] = [];
      this.ⵠⲆⵠ[10] = [];
      this.ⵠⲆⵠ[15] = [];
      this.ⵠⲆⵠ[16] = [];
      this.ⵠⲆⵠ[17] = [];
      this.ⵠⲆⵠ[21] = [];
      this.ⵠⲆⵠ[51] = [];
      this.ⵠⲆⵠ[45] = [];
      this.ⵠⲆⵠ[46] = [];
      this.ⵠⲆⵠ[47] = [];
      this.ⵠⲆⵠ[48] = [];
      this.ⵠⲆⵠ[49] = [];
      this.ⵠⲆⵠ[53] = [];
      this.ⵠⲆⵠ[18] = [];
      this.ⵠⲆⵠ[29] = [];
      this.ⵠⲆⵠ[56] = [];
      this.ⵠⲆⵠ[11] = [];
      this.ⵠⲆⵠ[22] = [];
      this.ⵠⲆⵠ[23] = [];
      this.ⵠⲆⵠ[100] = [];
      this.ⵠⲆⵠ[80] = [];
      this.ⵠⲆⵠ[60] = [];
      this.ⵠⲆⵠ[67] = [];
      this.ⵠⲆⵠ[70] = [];
      this.ⵠⲆⵠ[77] = [];
      this.ⵠⲆⵠ[71] = [];
      this.ⵠⲆⵠ[72] = [];
      this.ⵠⲆⵠ[73] = [];
      this.ⵠⲆⵠ[74] = [];
      this.ⵠⲆⵠ[65] = [];
      this.ⵠⲆⵠ[66] = [];
      this.ⵠⲆⵠ[62] = [];
      this.ⵠⲆⵠ[88] = [];
      this.ⵠⲆⵠ[91] = [];
      this.ⵠⲆⵠ[90] = [];
      this.ⵠⲆⵠ[63] = [];
      this.ⵠⲆⵠ[78] = [];
      this.ⵠⲆⵠ[75] = [];
      this.ⵠⲆⵠ[76] = [];
      this.ⵠⲆⵠ[64] = [];
      this.ⵠⲆⵠ[69] = [];
      this.ⵠⲆⵠ[68] = [];
      this.ⵠⲆⵠ[79] = [];
      this.ⵠⲆⵠ[89] = [];
      this.ⵠⲆⵠ[83] = [];
      this.ⵠⲆⵠ[84] = [];
      this.ⵠⲆⵠ[85] = [];
      this.ⵠⲆⵠ[81] = [];
      this.ⵠⲆⵠ[82] = [];
      this.ⵠⲆⵠ[86] = [];
      this.ⵠⲆⵠ[34] = [];
      this.ⵠⲆⵠ[36] = [];
      this.ⵠⲆⵠ[61] = [];
      this.ⵠⲆⵠ[87] = [];
      this.ⵠⲆⵠ[42] = [];
    };
    this.ⵠΔᐃᐃⵠⲆᐃᐃⲆ = function (a) {
      if (this.ΔⲆᐃΔⲆ[a]) {
        ⲆⵠΔⲆ = this.ΔⲆᐃΔⲆ[a].type;
        this.ΔⲆᐃΔⲆ[a] = null;
        for (var b = this.ⵠⲆⵠ[ⲆⵠΔⲆ], c = 0; c < b.length; c++) {
          if (b[c].ᐃⲆΔⵠ == a) {
            b.splice(c, 1);
            return;
          }
        }
      }
    };
    this.ⵠⲆΔΔᐃΔⵠΔᐃ = function (a, b) {
      for (var c = 0; this.ⵠⲆⵠ[56].length > c; c++) {
        var d = this.ⵠⲆⵠ[56][c];
        if (b === Math.floor(d.x / 100) && a === Math.floor(d.y / 100)) {
          return 1;
        }
      }
      return 0;
    };
    this.ⵠⵠⵠⵠᐃΔᐃᐃΔ = function (a, b) {
      for (var c = 0; this.ⵠⲆⵠ[30].length > c; c++) {
        var d = this.ⵠⲆⵠ[30][c];
        if (Math.floor(d.x / 100) == a && Math.floor(d.y / 100) == b) {
          return true;
        }
      }
      return false;
    };
    this.ⵠᐃⲆⵠⲆ = function (j) {
      for (var e = 0; e < j.length; e++) {
        ΔΔΔⵠ = j[e];
        if (ΔΔΔⵠ.ᐃΔᐃᐃᐃᐃᐃ != ΔΔΔⵠ.angle) {
          var q = Math.PI * 2;
          ΔΔΔⵠ.angle = (ΔΔΔⵠ.angle + q) % q;
          ΔΔΔⵠ.ᐃΔᐃᐃᐃᐃᐃ = (ΔΔΔⵠ.ᐃΔᐃᐃᐃᐃᐃ + q) % q;
          if (ΔΔΔⵠ.angle != ΔΔΔⵠ.ᐃΔᐃᐃᐃᐃᐃ) {
            var w = ΔΔΔⵠ.ᐃΔᐃᐃᐃᐃᐃ - ΔΔΔⵠ.angle;
            var B = Math.abs(w);
            if (Math.PI < B) {
              B = Math.PI * 2 - B;
            }
            var D = sx * (B / Math.PI * 3 * 10);
            if (w > Math.PI) {
              ΔΔΔⵠ.angle -= D;
            } else if (-Math.PI > w) {
              ΔΔΔⵠ.angle += D;
            } else if (w < 0) {
              ΔΔΔⵠ.angle -= D;
            } else {
              ΔΔΔⵠ.angle += D;
            }
            ΔΔΔⵠ.angle = (ΔΔΔⵠ.angle + q) % q;
            if (D > Math.abs(ΔΔΔⵠ.angle - ΔΔΔⵠ.ᐃΔᐃᐃᐃᐃᐃ)) {
              ΔΔΔⵠ.angle = ΔΔΔⵠ.ᐃΔᐃᐃᐃᐃᐃ;
            }
          }
        }
        Math.floor(ΔΔΔⵠ.r.y / 100);
        Math.floor(ΔΔΔⵠ.r.x / 100);
        if (ΔΔΔⵠ.x != ΔΔΔⵠ.r.x || ΔΔΔⵠ.y != ΔΔΔⵠ.r.y) {
          if (ΔΔΔⵠ.action & 64) {
            ΔΔΔⵠ.action -= 64;
          }
          ΔΔΔⵠ.action |= 32;
          var E = ⵠⵠⵠ.ΔΔⵠⵠΔⲆⵠ(ΔΔΔⵠ, ΔΔΔⵠ.r) + Math.PI;
          var F = sx * ΔΔΔⵠ.ΔⵠⵠΔΔ;
          var G = ⵠⵠⵠ.ⵠⵠⵠⵠΔⵠᐃ(F, E);
          if (ⵠⵠⵠ.ⲆΔΔⵠΔΔⵠ(ⵠⵠⵠ.ΔΔᐃⲆⵠⲆⲆ(ΔΔΔⵠ, ΔΔΔⵠ.r)) > ⵠⵠⵠ.ⲆΔΔⵠΔΔⵠ(G)) {
            ⵠⵠⵠ.ΔΔΔΔⵠⲆΔ(ΔΔΔⵠ, G);
          } else {
            if (ΔΔΔⵠ.action & 32) {
              ΔΔΔⵠ.action -= 32;
            }
            ΔΔΔⵠ.action |= 64;
            ⵠⵠⵠ.Ⲇᐃᐃⵠⵠᐃⵠ(ΔΔΔⵠ.r, ΔΔΔⵠ);
          }
        }
        if (ΔΔΔⵠ.ⲆⲆⵠᐃⲆ) {
          var H = ΔΔΔⵠ.bubbles;
          if ((M = H.length) === 0 || M < Nr.ᐃΔΔⲆⲆⲆⵠ && H[M - 1].ΔⵠⲆᐃⵠ < 0.95) {
            H.push({
              id: Math.floor(Math.random() * ⲆΔ[540][0].length),
              x: Math.floor(ΔΔΔⵠ.x + Math.random() * 80 - 40),
              y: Math.floor(ΔΔΔⵠ.y + Math.random() * 80 - 40),
              ΔⵠⲆᐃⵠ: 1
            });
          }
          for (var I = 0; I < M; I++) {
            H[I].ΔⵠⲆᐃⵠ = Math.max(0, H[I].ΔⵠⲆᐃⵠ - sx);
          }
          for (I = 0; M > I; I++) {
            if (H[I].ΔⵠⲆᐃⵠ === 0) {
              H.splice(I, 1);
              break;
            }
          }
        }
        var K = 0;
        if (ΔΔΔⵠ.ᐃⲆᐃΔ && ix.ⵠᐃⲆᐃⲆ) {
          var L = ΔΔΔⵠ.ⵠⲆⵠᐃΔ;
          var M = L.length;
          if (ΔΔΔⵠ.ᐃⲆΔⵠⲆΔⵠ > 0 && ΔΔΔⵠ.ⲆΔⵠⵠᐃ !== 227 && ΔΔΔⵠ.ⲆΔⵠⵠᐃ !== 228 && ΔΔΔⵠ.ⲆΔⵠⵠᐃ !== 230 && ΔΔΔⵠ.ⲆΔⵠⵠᐃ !== 229 && ΔΔΔⵠ.ⲆΔⵠⵠᐃ !== 91 && !ΔΔΔⵠ.ⲆⲆⵠᐃⲆ && (K = 1, M === 0 || Nr.ⵠⵠⲆΔⲆⵠᐃ < ⵠⵠⵠ.ⵠΔᐃΔ(L[M - 1], ΔΔΔⵠ))) {
            var N = -ΔΔΔⵠ.angle;
            var O = Po * (Math.cos(N) * 45);
            var Q = Po * (Math.sin(N) * 45);
            L.push({
              x: ΔΔΔⵠ.x + O,
              y: ΔΔΔⵠ.y + Q,
              r: 8,
              alpha: 0.8
            });
            L.push({
              x: ΔΔΔⵠ.x - O,
              y: ΔΔΔⵠ.y - Q,
              r: 8,
              alpha: 0.8
            });
            L.push({
              x: ΔΔΔⵠ.x,
              y: ΔΔΔⵠ.y,
              r: 24,
              alpha: 1
            });
          }
          for (I = 0; M > I; I++) {
            L[I].alpha = Math.max(0, L[I].alpha - sx / 2.2);
            L[I].r += sx * 20;
          }
          if (L.length > 0 && L[0].alpha === 0) {
            L.splice(0, 1);
          }
          var R = ΔΔΔⵠ.ᐃΔⲆΔⵠ;
          M = R.length;
          var S = -1;
          var U = Math.max(0, Math.sign(ΔΔΔⵠ.ΔΔΔᐃᐃᐃΔ));
          var V = Math.max(0, Math.sign(ΔΔΔⵠ.ⵠⲆⵠΔⲆ));
          Math.max(0, Math.sign(ΔΔΔⵠ.ⵠⲆᐃⵠΔ));
          var W = Math.max(0, Math.sign(ΔΔΔⵠ.ᐃⵠΔⵠᐃ));
          var X = Math.max(0, Math.sign(ΔΔΔⵠ.Ⲇᐃᐃⵠⵠ));
          if (ΔΔΔⵠ.ΔΔΔᐃᐃᐃΔ > 0 || ΔΔΔⵠ.ⵠⲆᐃⵠΔ > 0) {
            S = 602;
          } else if (ΔΔΔⵠ.Ⲇᐃᐃⵠⵠ > 0) {
            S = 680;
          } else if (ΔΔΔⵠ.ⵠⲆⵠΔⲆ > 0) {
            S = 475;
          } else if (ΔΔΔⵠ.ᐃⵠΔⵠᐃ > 0) {
            S = 476;
          }
          if (ΔΔΔⵠ.ⲆΔⵠⵠᐃ === 225 && (U | V | W | X) == 1) {
            S = 228;
            var Y = ΔΔΔⵠ.ⲆⵠᐃⲆⵠ - Math.PI / 2;
            var Z = 15;
            var _ = 11;
            var aa = Nr.ᐃΔΔΔⵠⲆⲆ;
          } else if (ΔΔΔⵠ.ⲆΔⵠⵠᐃ === 239 && (U | V | W | X) === 1) {
            S = 249;
            Y = ΔΔΔⵠ.ⲆⵠᐃⲆⵠ - Math.PI / 2;
            Z = 21;
            _ = 16;
            aa = Nr.ᐃΔΔΔⵠⲆⲆ;
          } else if (ΔΔΔⵠ.ⲆΔⵠⵠᐃ === 226 && (U | V | W | X) == 1) {
            S = 234;
            Y = ΔΔΔⵠ.ⲆⵠᐃⲆⵠ - Math.PI / 2;
            var ba = Math.random() * 50;
            Z = 10 + ba;
            _ = 0 + ba;
            aa = Nr.ᐃΔΔΔⵠⲆⲆ * 0.9;
          } else {
            Y = ΔΔΔⵠ.angle;
            Z = 15;
            _ = 11;
            aa = Nr.ᐃΔΔΔⵠⲆⲆ;
          }
          if (ΔΔΔⵠ.ⲆΔⵠⵠᐃ === 227 || ΔΔΔⵠ.ⲆΔⵠⵠᐃ === 228 || ΔΔΔⵠ.ⲆΔⵠⵠᐃ === 91 || ΔΔΔⵠ.ⲆΔⵠⵠᐃ === 229 || ΔΔΔⵠ.ⲆΔⵠⵠᐃ === 230 || ΔΔΔⵠ.ⲆⲆⵠᐃⲆ); else if (ΔΔΔⵠ.ⲆΔⵠⵠᐃ === 224) {
            if (M === 0 || ⵠⵠⵠ.ⵠΔᐃΔ(R[M - 1], ΔΔΔⵠ) > Nr.ΔⵠⲆⵠᐃⲆⲆ) {
              R.push({
                x: ΔΔΔⵠ.x,
                y: ΔΔΔⵠ.y,
                angle: ΔΔΔⵠ.ⲆⵠᐃⲆⵠ,
                alpha: 1,
                id: 226
              });
            }
          } else if (S != -1 && K === 0 && (M === 0 || aa < ⵠⵠⵠ.ⵠΔᐃΔ(R[M - 1], ΔΔΔⵠ))) {
            ΔΔΔⵠ.ⲆⲆᐃᐃⲆᐃⵠ++;
            if (Math.abs(ΔΔΔⵠ.x - ΔΔΔⵠ.r.x) > 1 && Math.abs(ΔΔΔⵠ.y - ΔΔΔⵠ.r.y) > 1) {
              if (ΔΔΔⵠ.x < ΔΔΔⵠ.r.x && ΔΔΔⵠ.r.y < ΔΔΔⵠ.y || ΔΔΔⵠ.x > ΔΔΔⵠ.r.x && ΔΔΔⵠ.y < ΔΔΔⵠ.r.y) {
                if (ΔΔΔⵠ.ⲆⲆᐃᐃⲆᐃⵠ % 2) {
                  O = Po * -_;
                  Q = -_ * Po;
                } else {
                  Q = Po * _;
                  O = Po * _;
                }
              } else if (ΔΔΔⵠ.ⲆⲆᐃᐃⲆᐃⵠ % 2) {
                O = Po * _;
                Q = Po * -_;
              } else {
                Q = _ * Po;
                O = Po * -_;
              }
            } else if (ΔΔΔⵠ.ⲆⲆᐃᐃⲆᐃⵠ % 2) {
              O = Po * (Z * Math.cos(Y));
              Q = Math.sin(Y) * Z * Po;
            } else {
              O = Z * -Math.cos(Y) * Po;
              Q = Po * (Z * -Math.sin(Y));
            }
            R.push({
              x: ΔΔΔⵠ.x + O,
              y: ΔΔΔⵠ.y + Q,
              angle: Y + Math.PI / 2,
              alpha: 1,
              id: S
            });
          }
          for (I = 0; M > I; I++) {
            if (R[I].id === 226) {
              R[I].alpha = Math.max(0, R[I].alpha - sx * 1.5);
            } else {
              R[I].alpha = Math.max(0, R[I].alpha - sx / 2.85);
            }
          }
          if (R.length > 0 && R[0].alpha === 0) {
            R.splice(0, 1);
          }
        }
      }
    };
    this.ᐃⲆᐃ = function () {
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[0]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[80]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[60]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[67]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[70]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[77]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[71]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[72]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[73]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[74]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[61]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[62]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[88]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[91]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[90]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[63]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[78]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[75]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[76]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[64]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[68]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[65]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[66]);
      this.ⵠᐃⲆⵠⲆ(this.ⵠⲆⵠ[69]);
    };
    this.ⵠⲆⵠΔ = [];
    this.ⵠⲆⵠΔ[620] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1.05, 1, 0.008, 0.008);
    this.ⵠⲆⵠΔ[619] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1.08, 1, 0.006, 0.006);
    this.ⵠⲆⵠΔ[694] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(qs, 1, 1.02, 1, 0.008, 0.008);
    this.ⵠⲆⵠΔ[695] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1.08, 1, 0.006, 0.006);
    this.ⵠΔΔΔⵠ = [];
    this.ⵠΔΔΔⵠ[0] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(ye, 0.1, 1, 0, 0.6, 0.6);
    this.ⵠΔΔΔⵠ[1] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.4, 1, 0, 0.6, 0.6);
    this.ⵠΔΔΔⵠ[2] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.3, 1, 0, 0.6, 0.6);
    this.ⵠΔΔΔⵠ[3] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ⵠΔΔΔⵠ[4] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.3, 1, 0, 0.6, 0.6);
    this.ⵠΔΔΔⵠ[5] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ⵠΔΔΔⵠ[6] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.5, 1, 0, 0.6, 0.6);
    this.ⵠΔΔΔⵠ[7] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ah, 0.9, 1, 0, 0.6, 0.6);
    this.ⵠΔΔΔⵠ[8] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.6, 1, 0, 0.6, 0.6);
    this.ⵠΔΔΔⵠ[9] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.2, 1, 0, 0.6, 0.6);
    this.ⵠΔΔΔⵠ[10] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.6, 1, 0, 0.6, 0.6);
    this.ⵠΔΔΔⵠ[11] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ma, 0.4, 1, 0, 0.6, 0.6);
    this.ⵠΔΔΔⵠ[12] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ma, 0.8, 1, 0, 0.6, 0.6);
    this.ⵠΔΔΔⵠ[13] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(ye, 0.2, 1, 0, 0.6, 0.6);
    this.ⵠΔΔΔⵠ[14] = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.7, 1, 0, 0.6, 0.6);
  }
  function Ff(b, c, d, e, f, i, a, j, k, h) {
    this.type = b;
    this.ᐃⲆⲆⲆ = c;
    this.id = d;
    this.x = e;
    this.y = f;
    this.angle = i;
    this.ᐃΔᐃᐃᐃᐃᐃ = i;
    this.action = a;
    this.info = j;
    this.ΔΔⲆⲆⲆ = h;
    this.r = {
      x: e,
      y: f
    };
    this.ΔⵠⵠΔΔ = k;
    if (jx) {
      this.ᐃⲆΔⵠ = jx.ΔᐃⲆΔᐃᐃΔ * c + d;
    }
    switch (b) {
      case 0:
        this.ⲆⲆΔᐃ = jx.ⲆⲆⵠⲆ[this.ᐃⲆⲆⲆ];
        this.Ⲇᐃⵠᐃ = this.ⲆⲆΔᐃ.Ⲇᐃⵠᐃ;
        this.ΔⵠⵠΔⵠΔⵠ = this.ⲆⲆΔᐃ.ΔⵠⵠΔⵠΔⵠ;
        this.ⵠⲆⲆᐃⵠ = this.ⲆⲆΔᐃ.ⵠⲆⲆᐃⵠ;
        this.ⵠᐃⲆᐃΔ = this.ⲆⲆΔᐃ.ⵠᐃⲆᐃΔ;
        this.ⲆᐃⲆᐃⵠⵠᐃ = -1000000;
        this.ᐃⵠΔⵠᐃ = -1000000;
        this.ⵠⲆⵠΔⲆ = -1000000;
        this.ⵠⲆᐃⵠΔ = -1000000;
        this.ᐃⲆΔⵠⲆΔⵠ = -1000000;
        this.ΔΔΔᐃᐃᐃΔ = -1000000;
        this.Ⲇᐃᐃⵠⵠ = -1000000;
        this.ⲆᐃΔΔⲆ = jx.mode === 2 && this.Ⲇᐃⵠᐃ === 0 || qs;
        this.ⵠⵠⵠⲆᐃΔᐃ = jx.mode === 3 && this.Ⲇᐃⵠᐃ === 0 && fe;
        this.ΔᐃΔΔᐃⲆⲆ = !!this.ⲆᐃΔΔⲆ && this.ⲆⲆΔᐃ.ᐃΔᐃⲆΔ === "  ";
        this.ᐃΔⲆΔⵠ = [];
        this.ⲆⲆⲆᐃⵠᐃᐃ = 0;
        this.ᐃⲆᐃΔ = gr;
        this.ⲆⲆᐃᐃⲆᐃⵠ = 0;
        this.ⵠᐃΔΔⵠⲆΔ = 0;
        this.ⵠⲆⵠᐃΔ = [];
        this.r = {
          x: e,
          y: f
        };
        this.ⵠⵠⲆⵠ = Qv;
        this.ᐃⲆⲆᐃΔⵠᐃ = Pv;
        this.ⵠⵠᐃⵠΔ = 0;
        this.ⲆⵠᐃⲆⵠ = 0;
        this.ΔⵠᐃΔⵠ = 0;
        this.ⵠⲆᐃΔΔᐃΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔᐃᐃᐃ = 0;
        this.ⵠⲆⲆⵠⲆⲆᐃ = 0;
        this.ᐃⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        this.ᐃⲆⵠⵠᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        this.freeze = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        this.ⵠᐃⲆΔⵠᐃΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(zl, 0.6, 0.6, 0, 5, 3);
        this.ⲆⵠᐃⲆΔΔⲆ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(true, 0, 2.25, -1.5, 3.75, 7.5);
        this.ΔΔΔⲆⵠΔᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(true, 0, 7.5, -3, 22.5, 33.75);
        this.attack = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Rh, 0, 0, -Math.PI / 3, 6, 9);
        this.ⲆⲆᐃⵠΔΔΔⵠΔ = 0;
        this.ⲆᐃⵠΔᐃⲆⲆ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(ye, 0.6, 0.6, 0, 1, 3);
        this.ⵠⲆⲆΔⲆⲆᐃ = this.ΔᐃΔΔᐃⲆⲆ ? new ⵠⵠⵠ.ⲆⵠⲆⲆ(true, 0, 2.25, -1.5, 2.75, 5.5) : 0;
        this.ᐃᐃΔᐃΔΔⲆ = 0;
        this.ΔΔⵠᐃᐃΔⵠ = 0;
        this.ⵠᐃΔⲆⵠᐃⵠ = [];
        this.ΔⵠΔΔⲆᐃΔ = [];
        this.text = [];
        this.label = [];
        this.ⲆᐃΔᐃᐃⵠⲆ = Wv;
        this.ⲆᐃⲆᐃⲆ = true;
        this.right = -1;
        this.ⲆΔⵠⵠᐃ = -1;
        this.action = 64;
        this.ⵠⵠⵠᐃΔΔⵠ = Eh;
        this.ⲆΔⲆⲆΔ = 0;
        this.ⲆⲆⵠᐃⲆ = sq;
        this.bubbles = [];
        this.ⵠᐃⲆⵠᐃ = 0;
        this.ⵠΔΔⲆⵠ = -1;
        this.ᐃⲆᐃ = function (a) {
          if (this.info & 32768) {
            this.ⵠⵠⵠᐃΔΔⵠ = true;
            this.info = this.info & -32769;
          } else {
            this.ⵠⵠⵠᐃΔΔⵠ = false;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.ⵠᐃⲆⵠᐃ = 1;
          } else {
            this.ⵠᐃⲆⵠᐃ = 0;
          }
          this.ⲆΔⲆⲆΔ = Math.floor(this.info / 128);
          this.info -= this.ⲆΔⲆⲆΔ * 128;
          if (this.info === 7 || this.ΔᐃΔΔᐃⲆⲆ) {
            this.right = -1;
          } else {
            this.right = this.info;
          }
          this.ⲆⲆⲆᐃⵠᐃᐃ = jx.ⵠⲆΔΔᐃΔⵠΔᐃ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
          this.ⲆΔⵠⵠᐃ = this.ΔΔⲆⲆⲆ & 255;
          if (this.right === 2) {
            this.ⲆⲆⵠᐃⲆ = Jq;
          } else {
            this.ⲆⲆⵠᐃⲆ = false;
          }
          if (Df[this.right]) {
            this.ⲆᐃⵠΔᐃ = Vk;
          } else {
            this.ⲆᐃⵠΔᐃ = Rh;
          }
          if (a & 256) {
            this.ⲆᐃⵠΔᐃⲆⲆ.ⲆⲆΔ = false;
            this.ⲆᐃⵠΔᐃⲆⲆ.ᐃⵠᐃ = 0.6;
          } else if (a & 4) {
            this.freeze.ⲆⲆΔ = Rh;
            this.freeze.ᐃⵠᐃ = 0.6;
          } else if (a & 128) {
            this.ᐃⲆⵠⵠᐃ.ⲆⲆΔ = Ph;
            this.ᐃⲆⵠⵠᐃ.ᐃⵠᐃ = 0.6;
          }
          if (a & 8) {
            this.ⵠᐃⲆΔⵠᐃΔ.ⲆⲆΔ = false;
            this.ⵠᐃⲆΔⵠᐃΔ.ᐃⵠᐃ = 0.6;
          }
          if (a & 2) {
            this.ᐃⵠΔ.ⲆⲆΔ = false;
            this.ᐃⵠΔ.ᐃⵠᐃ = 0.6;
          }
          if (a & 16) {
            this.ⲆⲆᐃⵠΔΔΔⵠΔ = 0.58;
            if (ox.ᐃⲆⵠΔΔ && this.ⵠΔΔⲆⵠ !== -1) {
              ox.ⲆⲆⵠⲆ[this.ⵠΔΔⲆⵠ].ᐃⵠⵠⵠⲆΔⲆⲆᐃ(Sw[this.right]);
            }
          }
        };
        this.ᐃⲆᐃ();
        break;
      case 23:
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: zl,
          angle: 0
        };
        this.ΔᐃⲆⵠⵠ = wv;
        this.ⵠᐃⵠᐃΔ = nv;
        this.ⲆⲆΔᐃᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Nh, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⲆⵠΔⲆⵠⵠⲆ = 0;
        this.ⲆᐃⵠᐃΔⲆⵠ = 0;
        this.ΔⵠΔᐃⵠ = Gu;
        break;
      case 22:
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ma, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: false,
          angle: 0
        };
        this.ΔᐃⲆⵠⵠ = Vu;
        this.ⵠᐃⵠᐃΔ = Zu;
        this.ⲆⲆΔᐃᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⲆⵠΔⲆⵠⵠⲆ = 0;
        this.ⲆᐃⵠᐃΔⲆⵠ = 0;
        break;
      case 1:
      case 6:
        this.ΔᐃⲆⵠⵠ = fv;
        this.ⵠᐃⵠᐃΔ = dv;
        this.ⵠᐃᐃⵠⵠ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1.03, 0.98, 0.3, 0.3);
        this.ΔⲆⵠᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ($k, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⲆⲆΔᐃᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Zj, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(sq, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: Dg,
          angle: 0
        };
        break;
      case 43:
        this.ΔᐃⲆⵠⵠ = Gv;
        this.ⵠᐃⵠᐃΔ = Qu;
        this.ΔⲆⵠᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ah, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: vn,
          angle: 0
        };
        this.ⲆΔᐃⲆ = [];
        for (var g = 0; g < 3; g++) {
          this.ⲆΔᐃⲆ.push({
            ⵠⵠⲆⵠ: $u,
            ⵠⲆⵠΔ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ma, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ⲆΔᐃⲆ[0].x = this.x - 16.5;
        this.ⲆΔᐃⲆ[0].y = this.y - 15.5;
        this.ⲆΔᐃⲆ[0].angle = this.angle;
        this.ⲆΔᐃⲆ[1].x = this.x + 36;
        this.ⲆΔᐃⲆ[1].y = this.y + 17;
        this.ⲆΔᐃⲆ[1].angle = this.angle;
        this.ⲆΔᐃⲆ[2].x = this.x - 18.5;
        this.ⲆΔᐃⲆ[2].y = this.y + 39;
        this.ⲆΔᐃⲆ[2].angle = this.angle;
        break;
      case 3:
        this.ΔᐃⲆⵠⵠ = hv;
        this.ⵠᐃⵠᐃΔ = pv;
        this.ΔⲆⵠᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ph, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: In,
          angle: 0
        };
        this.ⲆΔᐃⲆ = [];
        for (g = 0; g < 3; g++) {
          this.ⲆΔᐃⲆ.push({
            ⵠⵠⲆⵠ: Cv,
            ⵠⲆⵠΔ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(qs, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ⲆΔᐃⲆ[0].x = this.x - 16.5;
        this.ⲆΔᐃⲆ[0].y = this.y - 15.5;
        this.ⲆΔᐃⲆ[1].x = this.x - 5.5;
        this.ⲆΔᐃⲆ[1].y = this.y + 7.5;
        this.ⲆΔᐃⲆ[2].x = this.x + 18;
        this.ⲆΔᐃⲆ[2].y = this.y - 5;
        break;
      case 77:
        this.ⵠⵠⲆⵠ = _u;
        this.ⵠⲆⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ph, 0.6, 0.6, 0, 5, 3);
        break;
      case 70:
        this.ⵠⵠⲆⵠ = uv;
        this.ⵠⲆⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ($k, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Zj, 0.6, 0.6, 0, 5, 3);
        break;
      case 71:
        this.ⵠⵠⲆⵠ = Fv;
        this.ⵠⲆⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⲆΔΔⲆⵠⲆⵠ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ph, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔⵠⵠⲆⵠⲆᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(sq, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(zl, 0.6, 0.6, 0, 5, 3);
        this.ᐃⲆⵠⵠᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 67:
        this.ⵠⵠⲆⵠ = kv;
        this.ⵠⲆⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⲆΔΔⲆⵠⲆⵠ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔⵠⵠⲆⵠⲆᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Rh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(sq, 0.6, 0.6, 0, 5, 3);
        this.ᐃⲆⵠⵠᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(T, 0.6, 0.6, 0, 5, 3);
        break;
      case 68:
        this.ⵠⵠⲆⵠ = xv;
        this.ⵠⲆⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(vn, 0.6, 0.6, 0, 5, 3);
        break;
      case 90:
        this.ⵠⵠⲆⵠ = Ev;
        this.ⵠⲆⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ph, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.ᐃⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(qs, 0.6, 0.6, 0, 5, 3);
        break;
      case 91:
        this.ⲆᐃⵠⲆΔ = this.info & 15;
        this.ⵠᐃΔΔⵠⲆΔ = this.ΔΔⲆⲆⲆ & 1;
        this.ᐃⵠⲆⵠⵠᐃᐃ = 0;
        this.x = this.info;
        this.y = this.ΔΔⲆⲆⲆ;
        this.ⵠⵠⲆⵠ = bv;
        this.ⵠⲆⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case 80:
      case 60:
      case 61:
      case 62:
      case 63:
      case 78:
      case 65:
      case 66:
      case 88:
        this.ⵠⵠⲆⵠ = Ev;
        this.ⵠⲆⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ao, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ph, 0.6, 0.6, 0, 5, 3);
        break;
      case 36:
        this.ⵠⵠⲆⵠ = Uu;
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(vn, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: zl,
          angle: 0
        };
        break;
      case 34:
        this.ⵠᐃⵠᐃΔ = lv;
        this.ⵠⵠⲆⵠ = zv;
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: Ph,
          angle: 0
        };
        this.up = new ⵠⵠⵠ.ⲆⵠⲆⲆ(sq, 1, 1.03, 0.98, 0.1, 0.1);
        this.ᐃΔᐃΔΔ = [];
        break;
      case 87:
        this.angle = Math.random() * Math.PI / 2;
      case 86:
      case 82:
        this.ⵠⵠⲆⵠ = Iv;
        this.ᐃⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 81:
        this.ⵠⵠⲆⵠ = Dv;
        this.ᐃⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 69:
        this.scale = 1;
        this.ⵠⵠⲆⵠ = gv;
        this.ⵠⲆⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 76:
        this.ᐃᐃᐃⵠⲆ = 0;
        this.ΔⲆⵠᐃ = [];
        this.ⲆⵠⵠⵠΔⲆⵠ = 0;
        this.ⵠΔⲆΔⲆᐃⲆ = Tu;
        this.ⵠⵠⲆⵠ = Su;
        this.ⵠⲆⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ma, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 75:
        this.x = this.info;
        this.y = this.ΔΔⲆⲆⲆ;
        this.scale = 1;
        this.ⲆⲆᐃᐃ = 0;
        this.ⵠⵠⲆⵠ = Hv;
        this.ⵠⲆⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(T, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠ.ⲆⵠⲆⲆ(vn, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 74:
        this.x = this.info;
        this.y = this.ΔΔⲆⲆⲆ;
        this.scale = 1;
        this.ⲆⲆᐃᐃ = 0;
        this.ⵠⵠⲆⵠ = sv;
        this.ⵠⲆⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(In, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠ.ⲆⵠⲆⲆ(sq, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ($k, 0.6, 0.6, 0, 5, 3);
        break;
      case 73:
        this.scale = 1;
        this.ⵠⵠⲆⵠ = Ru;
        this.ⵠⲆⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Dg, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 72:
        this.scale = 1;
        this.ⵠⵠⲆⵠ = rv;
        this.ⵠⲆⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(In, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(In, 0.6, 0.6, 0, 5, 3);
        break;
      case 64:
        this.scale = 1;
        this.ⵠⵠⲆⵠ = Yu;
        this.ⵠⲆⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(cl, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Nh, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⵠΔ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(sq, 0.6, 0.6, 0, 5, 3);
        break;
      case 100:
        this.ⲆΔᐃⲆ = [];
        for (g = 0; g < 5; g++) {
          this.ⲆΔᐃⲆ.push({
            ⵠⵠⲆⵠ: Cv,
            ⵠⲆⵠΔ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(sq, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % 3) {
          case 0:
            this.ⲆΔᐃⲆ[0].x = this.x - 20.5;
            this.ⲆΔᐃⲆ[0].y = this.y - 22.5;
            this.ⲆΔᐃⲆ[1].x = this.x - 35.5;
            this.ⲆΔᐃⲆ[1].y = this.y + 7.5;
            this.ⲆΔᐃⲆ[2].x = this.x + 7.5;
            this.ⲆΔᐃⲆ[2].y = this.y - 30;
            this.ⲆΔᐃⲆ[3].x = this.x + 22.5;
            this.ⲆΔᐃⲆ[3].y = this.y;
            this.ⲆΔᐃⲆ[4].x = this.x - 7.5;
            this.ⲆΔᐃⲆ[4].y = this.y + 14.5;
            break;
          case 1:
            this.ⲆΔᐃⲆ[0].x = this.x - 30.5;
            this.ⲆΔᐃⲆ[0].y = this.y - 22.5;
            this.ⲆΔᐃⲆ[1].x = this.x - 15.5;
            this.ⲆΔᐃⲆ[1].y = this.y + 7.5;
            this.ⲆΔᐃⲆ[2].x = this.x + 15.5;
            this.ⲆΔᐃⲆ[2].y = this.y - 30;
            this.ⲆΔᐃⲆ[3].x = this.x + 12.5;
            this.ⲆΔᐃⲆ[3].y = this.y + 5;
            this.ⲆΔᐃⲆ[4].x = this.x - 40.5;
            this.ⲆΔᐃⲆ[4].y = this.y + 14.5;
            break;
          case 2:
            this.ⲆΔᐃⲆ[0].x = this.x - 20.5;
            this.ⲆΔᐃⲆ[0].y = this.y - 20.5;
            this.ⲆΔᐃⲆ[1].x = this.x - 35.5;
            this.ⲆΔᐃⲆ[1].y = this.y + 15.5;
            this.ⲆΔᐃⲆ[2].x = this.x + 7.5;
            this.ⲆΔᐃⲆ[2].y = this.y - 17;
            this.ⲆΔᐃⲆ[3].x = this.x + 22.5;
            this.ⲆΔᐃⲆ[3].y = this.y + 5;
            this.ⲆΔᐃⲆ[4].x = this.x - 7.5;
            this.ⲆΔᐃⲆ[4].y = this.y + 1.5;
        }
        break;
      case 31:
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: false,
          angle: 0
        };
        this.ⵠⵠⲆⵠ = vv;
        this.ΔⲆⵠᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ma, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔᐃⵠⵠΔᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Eh, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case 40:
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(sq, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: Ph,
          angle: 0
        };
        this.ⵠⵠⲆⵠ = ev;
        this.ΔⲆⵠᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Dg, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 39:
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(zl, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: false,
          angle: 0
        };
        this.ⵠⵠⲆⵠ = Jv;
        this.ΔⲆⵠᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 44:
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: cl,
          angle: 0
        };
        this.ⵠⵠⲆⵠ = av;
        this.ΔⲆⵠᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ph, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 55:
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: false,
          angle: 0
        };
        this.ⵠⵠⲆⵠ = Xu;
        this.ΔⲆⵠᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 54:
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: false,
          angle: 0
        };
        this.ⵠⵠⲆⵠ = Nv;
        this.ΔⲆⵠᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 37:
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: Rh,
          angle: 0
        };
        this.ⵠⵠⲆⵠ = jv;
        this.ΔⲆⵠᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(vn, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 24:
        this.ⵠⵠⲆⵠ = Bv;
        this.rotate = 0;
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(C, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: Ah,
          angle: 0
        };
        break;
      case 25:
        this.ⵠⵠⲆⵠ = cv;
        this.rotate = 0;
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: Ah,
          angle: 0
        };
        break;
      case 26:
        this.ⵠⵠⲆⵠ = Av;
        this.rotate = 0;
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: false,
          angle: 0
        };
        break;
      case 27:
        this.ⵠⵠⲆⵠ = ov;
        this.rotate = 0;
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(qs, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: false,
          angle: 0
        };
        break;
      case 28:
        this.ⵠⵠⲆⵠ = Lv;
        this.rotate = 0;
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: false,
          angle: 0
        };
        break;
      case 32:
        this.ΔᐃⲆⵠⵠ = Wu;
        this.ⵠᐃⵠᐃΔ = Kv;
        this.rotate = 0;
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(T, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: Zj,
          angle: 0
        };
        break;
      case 38:
        this.ⵠⵠⲆⵠ = Ou;
        this.ⵠΔⵠ = Math.floor(this.x / 100);
        this.ᐃⵠ = Math.floor(this.y / 100);
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(sq, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: false,
          angle: 0
        };
        this.opacity = 1;
        this.ΔⵠΔᐃⵠ = Au;
        break;
      case 42:
        this.ⵠⵠⲆⵠ = Fu;
        this.ⲆⲆΔᐃᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1.15, 1, 0.3, 0.3);
        this.color = 0;
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(Zj, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: false,
          angle: 0
        };
        break;
      case 33:
      case 2:
      case 56:
      case 35:
      case 29:
        this.ⵠⵠⲆⵠ = Nu;
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(vn, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: false,
          angle: 0
        };
        break;
      case 30:
        this.ⵠⵠⲆⵠ = Nu;
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: false,
          angle: 0
        };
        this.ΔⵠΔᐃⵠ = Au;
        break;
      case 4:
      case 7:
      case 8:
      case 9:
      case 19:
      case 50:
      case 5:
      case 12:
      case 13:
      case 14:
      case 20:
      case 52:
        this.ⵠⵠⲆⵠ = Nu;
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: cr,
          angle: 0
        };
        this.ΔⵠΔᐃⵠ = Gu;
        break;
      case 41:
        this.ⵠⵠⲆⵠ = Hp;
        this.opacity = 1;
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: Ma,
          angle: 0
        };
        var m = this.angle % (Math.PI / 2);
        if (Math.PI / 4 > m) {
          this.angle -= m;
        } else {
          this.angle += Math.PI / 2 - m;
        }
        break;
      case 79:
        this.ⵠⵠⲆⵠ = Iu;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 89:
        this.ⵠⵠⲆⵠ = Xp;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 83:
        this.ⵠⵠⲆⵠ = Up;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 84:
        this.ⵠⵠⲆⵠ = qp;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 85:
        this.ⵠⵠⲆⵠ = Op;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 11:
        this.ᐃⲆᐃ = function (a) {
          this.lock = this.info & 8192 ? 1 : 0;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.ⵠⵠⲆⵠ = Hu;
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: false,
          angle: 0
        };
        this.lock = 0;
        this.ᐃⲆᐃ(this.action);
        break;
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 53:
      case 10:
      case 15:
      case 16:
      case 17:
      case 21:
      case 51:
        this.ⵠⵠⲆⵠ = Lu;
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: C,
          angle: 0
        };
        this.ΔⵠΔᐃⵠ = Gu;
        break;
      case 18:
        this.ΔᐃⲆⵠⵠ = tv;
        this.ⵠⵠⲆⵠ = qv;
        this.ⵠᐃⵠᐃΔ = iv;
        this.ΔⲆⵠᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 1, 1.23, 1.18, 0.02, 0.02);
        this.ⲆⲆΔᐃᐃ = new ⵠⵠⵠ.ⲆⵠⲆⲆ(cr, 1, 1.23, 1.18, 0.04, 0.04);
        this.ᐃⵠΔ = {
          ΔⵠⲆⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ao, 1, 1, 0, 10, 10),
          ᐃⲆᐃ: cl,
          angle: 0
        };
        this.ᐃⲆᐃ = function (a) {
          this.action = a;
        };
    }
  }
  function Rf(a, b, c) {
    Pj(io, a, b, c);
    const d = mt(bo[0], bo[1], bo[2], bo[0], bo[1]);
    mt(bo[2], bo[0], bo[1], bo[2], bo[0]);
    return ~(d & 14465) & 14465 | ~(d & 14465) & d;
  }
  function jf() {
    this.ᐃΔᐃⲆΔ = "";
    this.Ⲇᐃⵠᐃ = 0;
    this.ⵠᐃⲆᐃΔ = 0;
    this.ⵠᐃⲆⵠᐃ = 0;
    this.ΔⵠⵠΔⵠΔⵠ = 0;
    this.ⵠⲆⲆᐃⵠ = 0;
    this.ΔᐃᐃⲆᐃ = 0;
    this.Ⲇⵠᐃᐃᐃ = 0;
    this.level = 0;
    this.label = null;
    this.ΔΔⲆⲆΔᐃⲆ = null;
    this.ⲆⵠⲆⵠᐃᐃⵠ = null;
    this.ΔⵠⲆⵠⵠ = Zj;
    this.ⲆΔⵠᐃⵠ = 0;
  }
  function Lf() {
    Math.random();
    return "o";
  }
  function Ew() {
    Math.random();
    return "C";
  }
  function Gf() {
    Math.random();
    return "r";
  }
  function Nf() {
    Math.random();
    return "d";
  }
  function qf() {
    Math.random();
    return "t";
  }
  function Fw() {
    Math.random();
    return "a";
  }
  function Gw() {
    Math.random();
    return "e";
  }
  function Uf() {
    Math.random();
    return "n";
  }
  function Yf() {
    this.ᐃᐃᐃⵠΔ = function () { };
    this.ΔⲆΔⵠⵠ = {
      ᐃⲆⲆⲆ: 1,
      ⲆⵠᐃΔⲆ: 1,
      open: Ph
    };
    this.ⵠΔΔⵠⲆ = {
      ᐃⲆⲆⲆ: 1,
      open: false,
      ⲆⵠᐃΔⲆ: -1
    };
    this.ΔⲆⵠΔ = {
      ᐃⵠⲆᐃⲆᐃⵠ: 0,
      ᐃⲆⲆⵠΔ: 0,
      ᐃⲆⲆⲆ: 1,
      ⲆⵠᐃΔⲆ: -1,
      open: qs
    };
    this.ⵠᐃΔᐃ = {
      open: false,
      ⲆⵠᐃΔⲆ: -1,
      ⵠⲆⲆⵠⵠᐃⲆ: 0,
      type: 0,
      ΔⲆⵠᐃⲆⲆⲆ: 0,
      ᐃⲆⲆⲆ: 1,
      ⵠⵠⵠⲆⲆΔΔ: 0
    };
    this.ΔⲆΔⵠ = {
      ΔⲆⵠᐃⲆⲆⲆ: 0,
      ⲆᐃⲆⲆⲆᐃⵠ: 0,
      ᐃⲆⲆⵠΔ: 0,
      ᐃⲆⲆⲆ: 1,
      ⲆⵠᐃΔⲆ: -1,
      open: T
    };
    this.sign = {
      ⲆⵠᐃΔⲆ: -1,
      open: false
    };
    this.ΔⵠΔᐃΔ = {
      ⲆⵠᐃΔⲆ: -1,
      open: $k,
      ᐃⲆⲆⲆ: 1,
      ΔΔᐃᐃ: 0
    };
    this.ⲆⲆⵠᐃⲆ = {
      enabled: false,
      ᐃⲆⵠΔⲆ: -1,
      label: Dg,
      now: -1,
      ⵠⵠⲆⵠ: Sv
    };
    this.ΔΔΔⲆ = {
      ΔΔᐃᐃ: 0,
      open: Dg,
      locked: Ma,
      ⵠΔᐃᐃᐃΔΔ: Ma,
      ᐃⲆⲆⲆ: 1,
      id: -1,
      lock: $k,
      ⵠⵠΔⵠᐃᐃⵠ: Ah,
      ⲆⵠᐃΔⲆ: -1
    };
    this.ΔⵠⲆⵠⵠ = $j;
    this.reconnect = {
      enabled: cl,
      rotate: 0
    };
    this.key = ⵠⵠⵠ.ΔⵠⲆᐃᐃΔᐃ("key", sa.location.href);
    var a = ⵠⵠⵠ.ΔⵠⲆᐃᐃΔᐃ("egg", sa.location.href);
    if (a) {
      ix.Ⲇᐃⵠᐃ = parseInt(a);
    }
    this.beta = sa.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
    if (this.key && this.beta) {
      ᐃᐃᐃⲆ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ᐃᐃᐃⲆ.get("starve_beta");
    }
    this.ᐃⵠⵠᐃⵠ = ᐃᐃᐃⲆ.get("starve_token") ? ᐃᐃᐃⲆ.get("starve_token") : ⵠⵠⵠ.ⲆΔᐃΔⵠΔᐃ(14);
    sa.baguette();
    var b = sa.kot2;
    function c() {
      this.seed = 1;
      this.ⲆⲆᐃᐃⲆᐃᐃ = 2;
      this.ⲆΔⵠⲆⲆⲆΔ = 3;
      this.ⲆᐃᐃΔᐃⵠⲆⵠⲆ = 1;
      this.ⲆΔⲆⲆΔⲆⲆΔⲆ = 2;
      this.ⵠΔⲆⵠⵠⵠΔΔᐃ = 3;
      this.ΔᐃΔⲆᐃⵠΔ = function (a) {
        this.seed = 2 + Math.floor(Math.random() * 39879);
      };
      this.Ⲇᐃᐃᐃᐃᐃᐃ = function (a) {
        this.ⲆⲆᐃᐃⲆᐃᐃ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆⵠΔⵠⲆᐃⵠ = function (a) {
        this.ⲆΔⵠⲆⲆⲆΔ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ΔΔⵠᐃⲆⵠΔᐃⵠ = function (a) {
        this.ⲆᐃᐃΔᐃⵠⲆⵠⲆ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃΔⲆⲆΔΔⵠΔΔ = function (a) {
        this.ⲆΔⲆⲆΔⲆⲆΔⲆ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆΔⵠⵠᐃⵠᐃⵠΔ = function (a) {
        this.ⵠΔⲆⵠⵠⵠΔΔᐃ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⵠΔⲆⲆΔᐃΔ = function (c, e, f, i, j, k, a) {
        for (var m = 1; a > m;) {
          var n = m * f % ᐃⵠΔᐃⵠᐃⵠ;
          var o = ⵠΔΔⵠᐃᐃΔ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(i * o + j);
            if (k < m && a > m) {
              var q = Math.random() > 0.5 ? sx * -10 : sx * 10;
              var r = p * e;
              this.ᐃᐃΔⵠᐃⲆᐃ[n] = Math.max(-25, Math.min(25, this.ᐃᐃΔⵠᐃⲆᐃ[n] + q));
              this.ΔᐃΔⵠᐃᐃᐃ[n] = Math.max(-8, Math.min(8, this.ΔᐃΔⵠᐃᐃᐃ[n] + q));
              if (r > 0) {
                oo.beginPath();
                oo.arc(m + kx.ⲆⲆᐃ.x + this.ΔᐃΔⵠᐃᐃᐃ[n], c + this.ᐃᐃΔⵠᐃⲆᐃ[n] - 20, r, 0, Math.PI * 2);
                if (jx.transition) {
                  var t = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
                  oo.fillStyle = Aw(83, 156, 160, 236, 247, 249, t);
                } else {
                  oo.fillStyle = Nr.ΔΔΔⵠⲆⲆⲆ[jx.time];
                }
                oo.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ᐃΔⵠⲆΔⲆΔ = function (c, e, f, i, j, k, a) {
        for (var m = 1; m < a;) {
          var n = m * f % ᐃⵠΔᐃⵠᐃⵠ;
          var o = ⵠΔΔⵠᐃᐃΔ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(o * i + j);
            if (m > k && a > m) {
              var q = Math.random() > 0.5 ? sx * -10 : sx * 10;
              var r = e * p;
              this.ⵠΔᐃΔⵠ[n] = Math.max(-25, Math.min(25, this.ⵠΔᐃΔⵠ[n] + q));
              this.ⵠᐃⲆⵠⵠ[n] = Math.max(-8, Math.min(8, this.ⵠᐃⲆⵠⵠ[n] + q));
              if (r > 0) {
                oo.beginPath();
                oo.arc(c + this.ⵠΔᐃΔⵠ[n] - 20, m + kx.ⲆⲆᐃ.y + this.ⵠᐃⲆⵠⵠ[n], r, 0, Math.PI * 2);
                if (jx.transition) {
                  var t = jx.time ? 1 - jx.ᐃⲆⲆⵠ.ᐃⵠᐃ : jx.ᐃⲆⲆⵠ.ᐃⵠᐃ;
                  oo.fillStyle = Aw(83, 156, 160, 236, 247, 249, t);
                } else {
                  oo.fillStyle = Nr.ΔΔΔⵠⲆⲆⲆ[jx.time];
                }
                oo.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ΔΔᐃᐃΔⵠⲆⲆⲆ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        if ((h = -(d - 0 - e - 2) / 200) === 0) {
          this.ⲆⵠΔⵠⲆᐃⵠ();
        }
        oo.globalAlpha = ⵠⵠⵠ.ⲆΔⵠⲆΔ(h);
        this.ⵠΔⲆⲆΔᐃΔ(d, h, this.ⲆΔⵠⲆⲆⲆΔ, 18, 16, f, g);
        oo.globalAlpha = 1;
        var h = -(b - 250 - e + 500) / 150;
        if (h === 0) {
          this.ΔᐃΔⲆᐃⵠΔ();
        }
        oo.globalAlpha = ⵠⵠⵠ.ⲆΔⵠⲆΔ(h);
        this.ⵠΔⲆⲆΔᐃΔ(b, h, this.seed, 12, 10, f, g);
        oo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.Ⲇᐃᐃᐃᐃᐃᐃ();
          }
          oo.globalAlpha = ⵠⵠⵠ.ⲆΔⵠⲆΔ(h);
          this.ⵠΔⲆⲆΔᐃΔ(c, h, this.ⲆⲆᐃᐃⲆᐃᐃ, 6, 6, f, g);
          oo.globalAlpha = 1;
        }
      };
      this.ⲆΔᐃΔᐃⲆⵠⵠΔ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(-d + 0 + e + 2) / 200) === 0) {
          this.ⲆⵠΔⵠⲆᐃⵠ();
        }
        oo.globalAlpha = ⵠⵠⵠ.ⲆΔⵠⲆΔ(h);
        this.ⵠΔⲆⲆΔᐃΔ(d, h, this.ⲆΔⵠⲆⲆⲆΔ, 18, 16, f, g);
        oo.globalAlpha = 1;
        if ((h = -(-b + 250 + e) / 150) === 0) {
          this.ΔᐃΔⲆᐃⵠΔ();
        }
        oo.globalAlpha = ⵠⵠⵠ.ⲆΔⵠⲆΔ(h);
        this.ⵠΔⲆⲆΔᐃΔ(b, h, this.seed, 12, 10, f, g);
        oo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.Ⲇᐃᐃᐃᐃᐃᐃ();
          }
          oo.globalAlpha = ⵠⵠⵠ.ⲆΔⵠⲆΔ(h);
          this.ⵠΔⲆⲆΔᐃΔ(c, h, this.ⲆⲆᐃᐃⲆᐃᐃ, 6, 6, f, g);
          oo.globalAlpha = 1;
        }
      };
      this.ΔΔΔⵠΔᐃΔⵠΔ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        if ((h = -(-d + 0 + e + 2) / 200) === 0) {
          this.ⲆⵠΔⵠⲆᐃⵠ();
        }
        oo.globalAlpha = ⵠⵠⵠ.ⲆΔⵠⲆΔ(h);
        this.ᐃΔⵠⲆΔⲆΔ(d, h, this.ⲆΔⵠⲆⲆⲆΔ, 18, 16, f, g);
        oo.globalAlpha = 1;
        var h = -(-b + 250 + e) / 150;
        if (h === 0) {
          this.ΔᐃΔⲆᐃⵠΔ();
        }
        oo.globalAlpha = ⵠⵠⵠ.ⲆΔⵠⲆΔ(h);
        this.ᐃΔⵠⲆΔⲆΔ(b, h, this.seed, 12, 10, f, g);
        oo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.Ⲇᐃᐃᐃᐃᐃᐃ();
          }
          oo.globalAlpha = ⵠⵠⵠ.ⲆΔⵠⲆΔ(h);
          this.ᐃΔⵠⲆΔⲆΔ(c, h, this.ⲆⲆᐃᐃⲆᐃᐃ, 6, 6, f, g);
          oo.globalAlpha = 1;
        }
      };
      this.ᐃΔᐃᐃⵠⵠⲆⲆⲆ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - 0 - e - 2) / 200) === 0) {
          this.ⲆⵠΔⵠⲆᐃⵠ();
        }
        oo.globalAlpha = ⵠⵠⵠ.ⲆΔⵠⲆΔ(h);
        this.ᐃΔⵠⲆΔⲆΔ(d, h, this.ⲆΔⵠⲆⲆⲆΔ, 18, 16, f, g);
        oo.globalAlpha = 1;
        if ((h = -(b - 250 - e + 500) / 150) === 0) {
          this.ΔᐃΔⲆᐃⵠΔ();
        }
        oo.globalAlpha = ⵠⵠⵠ.ⲆΔⵠⲆΔ(h);
        this.ᐃΔⵠⲆΔⲆΔ(b, h, this.seed, 12, 10, f, g);
        oo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.Ⲇᐃᐃᐃᐃᐃᐃ();
          }
          oo.globalAlpha = ⵠⵠⵠ.ⲆΔⵠⲆΔ(h);
          this.ᐃΔⵠⲆΔⲆΔ(c, h, this.ⲆⲆᐃᐃⲆᐃᐃ, 6, 6, f, g);
          oo.globalAlpha = 1;
        }
      };
      this.w1 = {
        r: new ⵠⵠⵠ.ⵠΔⵠⲆᐃ(ⵠⵠⵠ.ⲆᐃᐃᐃⲆⲆⵠ, 0, 10, 0, 0, 200),
        ΔΔᐃⵠ: new ⵠⵠⵠ.ⵠΔⵠⲆᐃ(ⵠⵠⵠ.ⵠⲆⲆΔⲆᐃᐃ, 0, 10, 200, 200, 0)
      };
      this.w2 = {
        r: new ⵠⵠⵠ.ⵠΔⵠⲆᐃ(ⵠⵠⵠ.ᐃᐃᐃΔᐃⵠⲆ, 0, 10, 0, 0, 150),
        ΔΔᐃⵠ: new ⵠⵠⵠ.ⵠΔⵠⲆᐃ(ⵠⵠⵠ.ⲆΔⵠⲆΔ, 0, 10, 150, 150, 0)
      };
      this.w3 = {
        r: new ⵠⵠⵠ.ⵠΔⵠⲆᐃ(ⵠⵠⵠ.ᐃⵠΔΔΔΔᐃ, 0, 10, 0, 0, 100),
        ΔΔᐃⵠ: new ⵠⵠⵠ.ⵠΔⵠⲆᐃ(ⵠⵠⵠ.ⲆΔⵠⲆΔ, 0, 10, 100, 100, 0)
      };
      this.ⵠΔⵠᐃᐃⲆⵠΔᐃ = function (a) {
        if (a.r.ⵠΔⵠⵠᐃ === a.r.x) {
          if (a.ΔΔᐃⵠ.x === a.ΔΔᐃⵠ.ⵠΔⵠⵠᐃ) {
            return a.r;
          } else {
            return a.ΔΔᐃⵠ;
          }
        } else {
          return a.r;
        }
      };
      this.ΔⵠΔ = function (a) {
        var b;
        if (a.r.x === a.r.ⵠΔⵠⵠᐃ) {
          if (a.ΔΔᐃⵠ.ⵠΔⵠⵠᐃ === a.ΔΔᐃⵠ.x) {
            a.r.ΔᐃⲆⵠⵠⵠⲆ();
            a.ΔΔᐃⵠ.ΔᐃⲆⵠⵠⵠⲆ();
            b = a.r;
          } else {
            b = a.ΔΔᐃⵠ;
          }
        } else {
          b = a.r;
        }
        b.ⵠΔⵠᐃⵠ(b.ⵠΔⵠⵠᐃ);
        return b;
      };
      this.ⵠΔᐃΔⵠ = [];
      this.ⵠᐃⲆⵠⵠ = [];
      this.ᐃᐃΔⵠᐃⲆᐃ = [];
      this.ΔᐃΔⵠᐃᐃᐃ = [];
      this.ᐃᐃᐃⵠΔ = function () {
        for (var a = 0; a < ᐃⵠΔᐃⵠᐃⵠ; a++) {
          this.ⵠΔᐃΔⵠ[a] = Math.floor(ⵠΔΔⵠᐃᐃΔ[a] * 25);
          this.ⵠᐃⲆⵠⵠ[a] = Math.floor(ⵠΔΔⵠᐃᐃΔ[a] * 8);
          this.ᐃᐃΔⵠᐃⲆᐃ[a] = Math.floor(ⵠΔΔⵠᐃᐃΔ[a] * 25);
          this.ΔᐃΔⵠᐃᐃᐃ[a] = Math.floor(ⵠΔΔⵠᐃᐃΔ[a] * 8);
        }
        this.w1.r.x = this.w1.r.ⵠΔⵠⵠᐃ;
        this.w2.r.ⵠΔᐃⵠⲆ = 3.5;
        this.w3.r.ⵠΔᐃⵠⲆ = 2;
      };
      this.ᐃᐃᐃⵠΔ();
    }
    this.ᐃⵠⵠᐃⵠ = b.substring(0, 6) + this.ᐃⵠⵠᐃⵠ.substring(6);
    this.ᐃᐃⵠᐃᐃⵠᐃ = ᐃᐃᐃⲆ.get("starve_token_id") ? ᐃᐃᐃⲆ.get("starve_token_id") : "";
    this.id = 0;
    this.ᐃⲆΔⵠ = 0;
    this.ⵠᐃⲆ = 0;
    this.ᐃΔⲆΔⲆΔⲆ = {
      ⵠᐃΔᐃᐃⲆᐃ: "",
      ⲆΔⲆΔⲆ: 0,
      ⲆΔᐃⲆⲆᐃⵠ: 0,
      ⲆΔⵠᐃⵠ: 0
    };
    this.ΔⵠΔᐃᐃΔΔⵠⵠ = {
      connected: 0,
      ᐃᐃᐃⵠᐃ: new Date().getTime()
    };
    this.ⵠⲆΔⵠᐃ = [];
    this.ⲆᐃⵠⲆΔᐃΔ = function (a) {
      for (var b = 0; this.ⵠⲆΔⵠᐃ.length > b; b++) {
        if (this.ⵠⲆΔⵠᐃ[b] == a) {
          return Ka;
        }
      }
      return vn;
    };
    this.ⵠᐃⲆΔⵠ = {
      ᐃⲆⵠΔⲆ: 0,
      time: 0,
      value: 0,
      open: false,
      ⵠⵠⲆⵠ: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.ᐃⲆⵠΔⲆ) / 1000);
          if (this.time < 60) {
            nx.ⵠᐃⲆΔⵠ.button.ⵠⵠⲆⵠ(oo);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = false;
          }
        }
      }
    };
    this.ᐃΔᐃⲆⲆ = {
      id: -1,
      ᐃⲆⲆⲆ: -1,
      lock: 0,
      timeout: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0, 1, 0, 1 / 30, 1),
      wait: Ao
    };
    this.ΔᐃΔᐃⵠ = {
      timeout: new ⵠⵠⵠ.ⲆⵠⲆⲆ(Rh, 0, 1, 0, 1 / 5, 1),
      wait: ye
    };
    this.ⲆⲆᐃΔΔ = {
      timeout: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0, 1, 0, 1, 1),
      wait: false
    };
    this.ⲆᐃⵠΔᐃ = {
      timeout: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0, 1, 0, 1 / 10, 1),
      wait: false
    };
    this.ⲆⲆᐃ = new ⵠⵠⵠ.ΔᐃⲆΔⲆⵠⲆ(ⵠⵠⵠ.ⵠⵠⵠᐃⲆᐃᐃ, 0, 0.4, 0, 0, zo, Co, zo, Co);
    this.ⲆⲆᐃ.ᐃⲆⵠΔⲆ = 0;
    this.ⲆⲆᐃ.ⵠᐃᐃⵠⵠⲆΔ = 0;
    this.ⲆⲆᐃ.ᐃⲆᐃ = function () {
      if (this.ⵠᐃᐃⵠⵠⲆΔ > 0) {
        this.ⵠᐃᐃⵠⵠⲆΔ -= sx;
      } else {
        var a = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
        if (a) {
          this.ᐃⲆⵠΔⲆ = 0;
          var b = Math.max(Math.min(zo - a.x, -2), -jx.w + 2 + so);
          var c = Math.max(Math.min(Co - a.y, -2), 2 - jx.ᐃⵠⵠ + yo);
          this.ⵠΔⵠᐃⵠ({
            x: b,
            y: c
          });
        } else {
          this.ᐃⲆⵠΔⲆ += sx;
          if (this.ᐃⲆⵠΔⲆ > 3) {
            this.ᐃⲆⵠΔⲆ = 0;
            if (!kx.reconnect.enabled) {
              mx.ᐃⵠⲆⲆᐃⵠΔΔᐃ();
            }
          }
        }
      }
    };
    this.ⲆⲆᐃ.w = screen.width;
    this.ⲆⲆᐃ.ᐃⵠⵠ = screen.height;
    this.ⲆⲆᐃ.ΔⵠΔⵠⵠⵠⲆ = this.ⲆⲆᐃ.w;
    this.ⲆⲆᐃ.ⲆⵠᐃΔᐃΔΔ = this.ⲆⲆᐃ.ᐃⵠⵠ;
    this.ⲆⲆᐃ.rx = 0;
    this.ⲆⲆᐃ.ry = 0;
    this.ⲆⲆᐃ.ⵠⲆⲆⵠⲆᐃⵠΔᐃ = 0;
    this.ⲆⲆᐃ.ⲆⲆᐃⵠΔᐃⲆⵠΔ = 0;
    this.ⲆⲆᐃ.ⲆⲆᐃᐃΔ = function (a, b) {
      this.x = -Math.min(Math.max(-jx.ᐃⲆⲆᐃⵠᐃᐃ * 2, a - jx.ᐃⲆⲆᐃⵠᐃᐃ - this.ΔⵠΔⵠⵠⵠⲆ / 2), jx.w - this.ΔⵠΔⵠⵠⵠⲆ);
      this.y = -Math.min(Math.max(-jx.ΔᐃΔᐃᐃⲆΔ * 2, b - (jx.ΔᐃΔᐃᐃⲆΔ + this.ⲆⵠᐃΔᐃΔΔ) / 2), jx.ᐃⵠⵠ - this.ⲆⵠᐃΔᐃΔΔ + jx.ΔᐃΔᐃᐃⲆΔ);
      this.ⵠΔⵠⵠᐃ = this.x;
      this.ΔᐃⲆⵠⲆⵠΔ = this.y;
    };
    this.control = {
      angle: 0,
      timeout: 0,
      ᐃᐃΔⲆⵠΔⲆ: 0,
      ᐃΔΔⲆ: 0,
      attack: 0,
      ᐃⲆᐃ: function () {
        var a = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
        if (a) {
          var b = {
            x: kx.ⲆⲆᐃ.x + a.x,
            y: kx.ⲆⲆᐃ.y + a.y
          };
        } else {
          b = Bo;
        }
        var c = ⵠⵠⵠ.ΔΔⵠⵠΔⲆⵠ(qx.ΔᐃΔⲆ, b);
        var d = false;
        this.ᐃΔΔⲆ += sx;
        if (!qx.state) {
          if (a && !(a.action & 16) && this.ᐃΔΔⲆ > 0.2) {
            this.attack = 1;
            d = true;
            this.ᐃΔΔⲆ = 0;
            mx.ⵠΔⲆⲆⲆⲆⵠⵠⲆ(c);
          }
        }
        if (a) {
          a.angle = c;
          a.ᐃΔᐃᐃᐃᐃᐃ = c;
        }
        if (!d) {
          this.timeout += sx;
          if (this.timeout > 0.2) {
            this.timeout = 0;
            if (Math.abs(this.angle - c) > 0.005) {
              mx.ⲆᐃⲆⵠᐃⲆᐃⲆⲆ(c);
              this.angle = c;
            }
          }
        }
        if (!kx.ᐃⲆΔΔⵠ.open && !kx.ⵠⵠⲆⵠⵠ.open) {
          var e = 0;
          if (px.ⵠⵠⲆⵠⲆΔᐃ()) {
            e |= 1;
          }
          if (px.ⲆⲆⲆᐃᐃⲆΔ()) {
            e |= 2;
          }
          if (px.ΔⵠᐃᐃⵠⲆᐃ()) {
            e |= 4;
          }
          if (px.ᐃⲆΔⲆᐃⵠⵠ()) {
            e |= 8;
          }
          if (this.ᐃᐃΔⲆⵠΔⲆ != e) {
            mx.ΔⲆᐃΔⲆᐃΔᐃΔ(e);
          }
          this.ᐃᐃΔⲆⵠΔⲆ = e;
        }
      }
    };
    this.ᐃⵠⲆⵠ = {
      c: 1,
      ΔΔᐃⵠ: 1,
      ᐃⵠⵠ: 1,
      ΔⵠΔ: 1,
      ⲆⲆΔ: 1,
      ᐃⲆᐃΔᐃⲆⲆ: 1,
      ⵠᐃᐃᐃⲆᐃⵠ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(Jq, 0, 1, 0, 3, 3),
      ⲆⵠΔⵠΔⲆΔ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(Yh, 0, 1, 0, 2, 2),
      ⲆΔⵠᐃΔⵠⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(Jq, 0, 1, 0, 3, 3),
      ΔΔᐃᐃⲆΔᐃ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(Vk, 0, 1, 0, 3, 3),
      ⲆⵠⲆⵠⵠᐃⲆ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(true, 0, 1, 0, 3, 3),
      ⲆⵠⲆᐃΔΔⵠ: new ⵠⵠⵠ.ⲆⵠⲆⲆ(true, 0, 1, 0, 3, 3),
      ΔΔᐃⲆΔ: new ⵠⵠⵠ.ⵠΔⵠⲆᐃ(ⵠⵠⵠ.ⵠⵠⵠᐃⲆᐃᐃ, 0, 1, 0, 0, 1),
      ΔⵠⲆᐃⵠ: new ⵠⵠⵠ.ⵠΔⵠⲆᐃ(ⵠⵠⵠ.ⵠⵠⵠᐃⲆᐃᐃ, 0, 1, 0, 0, 1),
      ᐃᐃⲆⲆⲆⵠᐃ: new ⵠⵠⵠ.ⵠΔⵠⲆᐃ(ⵠⵠⵠ.ⵠⵠⵠᐃⲆᐃᐃ, 0, 1, 0, 0, 1),
      ΔΔⲆⵠᐃΔΔ: new ⵠⵠⵠ.ⵠΔⵠⲆᐃ(ⵠⵠⵠ.ⵠⵠⵠᐃⲆᐃᐃ, 0, 1, 0, 0, 1),
      ⵠⲆΔⵠᐃⵠᐃ: new ⵠⵠⵠ.ⵠΔⵠⲆᐃ(ⵠⵠⵠ.ⵠⵠⵠᐃⲆᐃᐃ, 0, 1, 0, 0, 1),
      ΔⵠᐃⲆⲆ: new ⵠⵠⵠ.ⵠΔⵠⲆᐃ(ⵠⵠⵠ.ⵠⵠⵠᐃⲆᐃᐃ, 0, 1, 0, 0, 1),
      ᐃⲆᐃ: function () {
        this.ⵠᐃᐃᐃⲆᐃⵠ.ᐃⲆᐃ();
        this.ⲆⵠΔⵠΔⲆΔ.ᐃⲆᐃ();
        this.ⲆΔⵠᐃΔⵠⲆ.ᐃⲆᐃ();
        this.ΔΔᐃᐃⲆΔᐃ.ᐃⲆᐃ();
        this.ⲆⵠⲆⵠⵠᐃⲆ.ᐃⲆᐃ();
        this.ⲆⵠⲆᐃΔΔⵠ.ᐃⲆᐃ();
        this.ΔΔᐃⲆΔ.ⵠΔⵠᐃⵠ(this.c);
        this.ΔⵠⲆᐃⵠ.ⵠΔⵠᐃⵠ(this.ΔΔᐃⵠ);
        this.ᐃᐃⲆⲆⲆⵠᐃ.ⵠΔⵠᐃⵠ(this.ᐃⵠⵠ);
        this.ΔΔⲆⵠᐃΔΔ.ⵠΔⵠᐃⵠ(this.ΔⵠΔ);
        this.ⵠⲆΔⵠᐃⵠᐃ.ⵠΔⵠᐃⵠ(this.ⲆⲆΔ);
        this.ΔⵠᐃⲆⲆ.ⵠΔⵠᐃⵠ(this.ᐃⲆᐃΔᐃⲆⲆ);
      }
    };
    this.ⲆΔᐃΔᐃᐃⲆ = Zj;
    this.ⲆᐃᐃΔⵠⵠΔ = $k;
    this.ⲆᐃΔΔⲆ = false;
    this.ⵠⵠⵠⲆᐃΔᐃ = C;
    this.ᐃΔΔⵠ = {
      max: 10,
      ΔⲆⲆⲆⵠΔΔ: 0,
      ⵠᐃⲆⵠᐃ: 0,
      ⵠᐃΔΔ: [],
      ⲆΔⵠᐃⲆ: [],
      ⵠᐃᐃΔΔⲆⲆ: function (a, b) {
        if (a === 1) {
          this.ⵠᐃⲆⵠᐃ = Bf.ᐃΔΔⵠᐃⲆⲆΔⲆ;
        }
        this.ΔⲆⲆⲆⵠΔΔ += b;
        this.max = 10 + this.ΔⲆⲆⲆⵠΔΔ + this.ⵠᐃⲆⵠᐃ;
      },
      ᐃⲆΔᐃⵠⲆⵠ: {
        item: -1,
        ⵠⵠ: null,
        ᐃᐃⵠΔⲆΔΔ: 0,
        Ⲇⵠᐃᐃⵠᐃⵠ: 0,
        ᐃᐃⵠᐃⲆ: -1,
        ⵠⵠⵠⵠᐃ: -1,
        ⵠᐃᐃΔᐃ: function (a) {
          if (!!this.ᐃᐃⵠΔⲆΔΔ && (a.x !== this.ᐃᐃⵠᐃⲆ || a.y !== this.ⵠⵠⵠⵠᐃ)) {
            this.Ⲇⵠᐃᐃⵠᐃⵠ = 1;
          }
        },
        start: function (a, b) {
          this.ᐃᐃⵠᐃⲆ = b.x;
          this.ⵠⵠⵠⵠᐃ = b.y;
          this.item = a;
          this.ⵠⵠ = kx.ᐃΔΔⵠ.ⲆΔⵠᐃⲆ[a].info.ⵠⵠ[2];
          this.ᐃᐃⵠΔⲆΔΔ = 1;
        },
        stop: function () {
          this.ᐃᐃⵠΔⲆΔΔ = 0;
          this.Ⲇⵠᐃᐃⵠᐃⵠ = 0;
          this.ᐃᐃⵠᐃⲆ = -1;
          this.ⵠⵠⵠⵠᐃ = -1;
        },
        release: function () {
          var a = -1;
          var b = kx.ᐃΔΔⵠ.ⲆΔⵠᐃⲆ;
          var c = 0;
          if (this.ᐃᐃⵠΔⲆΔΔ && this.Ⲇⵠᐃᐃⵠᐃⵠ) {
            for (var d = 0; d < b.length; d++) {
              if (b[d].info.state === hf) {
                a = d;
                break;
              }
            }
            if (a !== -1 && a !== this.item && b[this.item]) {
              c = 1;
              var f = b[a];
              b[a] = b[this.item];
              b[this.item] = f;
              nx.ᐃⲆⵠΔⲆⲆⲆ();
            }
          }
          this.stop();
          return c;
        },
        ⵠⵠⲆⵠ: function (a, b) {
          if (this.ᐃᐃⵠΔⲆΔΔ && this.Ⲇⵠᐃᐃⵠᐃⵠ) {
            Jp(oo, this.ⵠⵠ, Math.floor(a - this.ⵠⵠ.width / 2), Math.floor(b - this.ⵠⵠ.height / 2));
          }
        }
      },
      ᐃⲆⲆΔᐃΔΔΔⵠ: function (a) {
        for (d = 0; d < a.length; d++) {
          if (this.ⵠᐃΔΔ[a[d][0]] == a[d][1]) {
            return true;
          }
        }
        return false;
      },
      ⲆⵠᐃΔⵠ: function (a) {
        for (var b = 0; b < this.ⲆΔⵠᐃⲆ.length; b++) {
          if (this.ⲆΔⵠᐃⲆ[b].id == a) {
            return b;
          }
        }
        return -1;
      },
      ⵠᐃΔⵠᐃΔΔ: function (a, b) {
        this.ⵠᐃΔΔ[a] = 0;
        this.ⲆΔⵠᐃⲆ.splice(b, 1);
        nx.ᐃⲆⵠΔⲆⲆⲆ();
      },
      ⲆⲆΔᐃᐃⲆᐃ: function (a, b, c) {
        ᐃⲆᐃ = true;
        this.ⵠᐃΔΔ[a] = Math.max(0, this.ⵠᐃΔΔ[a] - b);
        if (!this.ⵠᐃΔΔ[a] && c >= 0) {
          this.ⵠᐃΔⵠᐃΔΔ(a, c);
        }
      }
    };
    this.ΔⲆⵠᐃⵠ = {
      enabled: Rh,
      translate: {
        x: 0,
        y: 0
      },
      ΔᐃⲆᐃⲆⲆΔ: function () {
        if (jx.mode == 1 && !kx.ⲆᐃᐃΔⵠⵠΔ) {
          kx.ΔⲆⵠᐃⵠ.enabled = !kx.ΔⲆⵠᐃⵠ.enabled;
          if (kx.ΔⲆⵠᐃⵠ.enabled) {
            nx.options.ⲆⲆⲆⲆⵠⵠΔ.display = "inline-block";
          } else {
            nx.options.ⲆⲆⲆⲆⵠⵠΔ.display = "none";
          }
        }
      }
    };
    nx.options.ⲆⲆⲆⲆⵠⵠΔ.display = "none";
    this.ᐃΔⲆᐃᐃ = {
      enabled: Rh,
      translate: {
        x: 0,
        y: 0
      },
      ᐃⲆⵠΔⲆ: 0,
      ΔᐃⲆᐃⲆⲆΔ: function () {
        kx.ᐃΔⲆᐃᐃ.enabled = !kx.ᐃΔⲆᐃᐃ.enabled;
        if (kx.ᐃΔⲆᐃᐃ.enabled) {
          nx.options.ΔⲆᐃΔᐃⲆᐃ.display = "inline-block";
        } else {
          nx.options.ΔⲆᐃΔᐃⲆᐃ.display = "none";
        }
      },
      ᐃⲆᐃ: function () {
        if (!!this.enabled && kx.ⲆⲆⲆⲆ.id < 0 && !nx.ⵠⵠⵠⲆ.open) {
          if (kx.ᐃⵠⲆⵠ.ᐃⵠⵠ < 0.35) {
            if (kx.ᐃΔΔⵠ.ⵠᐃΔΔ[110]) {
              mx.ⲆΔΔⲆᐃ(110, kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(110));
            } else if (kx.ᐃΔΔⵠ.ⵠᐃΔΔ[192]) {
              mx.ⲆΔΔⲆᐃ(192, kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(192));
            } else if (kx.ᐃΔΔⵠ.ⵠᐃΔΔ[196]) {
              mx.ⲆΔΔⲆᐃ(196, kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(196));
            } else if (kx.ᐃΔΔⵠ.ⵠᐃΔΔ[189]) {
              mx.ⲆΔΔⲆᐃ(189, kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(189));
            } else if (kx.ᐃΔΔⵠ.ⵠᐃΔΔ[207]) {
              mx.ⲆΔΔⲆᐃ(207, kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(207));
            } else if (kx.ᐃΔΔⵠ.ⵠᐃΔΔ[205]) {
              mx.ⲆΔΔⲆᐃ(205, kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(205));
            } else if (kx.ᐃΔΔⵠ.ⵠᐃΔΔ[209]) {
              mx.ⲆΔΔⲆᐃ(209, kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(209));
            } else if (kx.ᐃΔΔⵠ.ⵠᐃΔΔ[143]) {
              mx.ⲆΔΔⲆᐃ(143, kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(143));
            } else if (kx.ᐃΔΔⵠ.ⵠᐃΔΔ[117]) {
              mx.ⲆΔΔⲆᐃ(117, kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(117));
            } else if (kx.ᐃΔΔⵠ.ⵠᐃΔΔ[138]) {
              mx.ⲆΔΔⲆᐃ(138, kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(138));
            } else if (kx.ᐃΔΔⵠ.ⵠᐃΔΔ[133]) {
              mx.ⲆΔΔⲆᐃ(133, kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(133));
            } else if (kx.ᐃΔΔⵠ.ⵠᐃΔΔ[145]) {
              mx.ⲆΔΔⲆᐃ(145, kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(145));
            } else if (kx.ᐃΔΔⵠ.ⵠᐃΔΔ[136]) {
              mx.ⲆΔΔⲆᐃ(136, kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(136));
            } else if (kx.ᐃΔΔⵠ.ⵠᐃΔΔ[197]) {
              mx.ⲆΔΔⲆᐃ(197, kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(197));
            }
          } else if (kx.ᐃⵠⲆⵠ.ΔⵠΔ < 0.35 && kx.ᐃΔΔⵠ.ⵠᐃΔΔ[127]) {
            mx.ⲆΔΔⲆᐃ(127, kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(127));
          }
        }
      }
    };
    nx.options.ΔⲆᐃΔᐃⲆᐃ.display = "none";
    this.ⲆⲆⲆⲆ = {
      id: -1,
      ᐃΔᐃᐃ: -1,
      timeout: new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0, 1, 0, 1, 1),
      ⲆᐃⲆᐃᐃ: false,
      ⵠᐃᐃⵠ: -1,
      mode: 0,
      label: [],
      ᐃⲆⵠⵠⲆ: [],
      ᐃⲆᐃΔⵠ: false,
      ⵠᐃᐃⵠⵠ: false,
      ⵠᐃΔᐃᐃΔⵠ: false,
      ⵠΔΔⵠⲆ: cr,
      ⲆΔⵠⲆᐃᐃⵠᐃΔ: function () {
        this.mode = this.mode === 0 ? 1 : 0;
      },
      ⵠΔᐃΔΔᐃⲆⲆⲆ: function (a) {
        this.ᐃⲆᐃΔⵠ = a;
        var b = nx.ⵠⵠⵠⲆ;
        if (b.open) {
          b.ⲆΔⲆΔΔΔⵠ(b.button);
        }
        this.ᐃⲆᐃ();
      },
      ᐃΔΔᐃᐃΔⲆⲆΔ: function (a) {
        var b = Xs[a];
        this.id = a;
        this.ⲆᐃⲆᐃᐃ = true;
        jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
        this.timeout.ΔᐃⵠΔⵠᐃΔ = b.time * 8;
        this.ᐃΔᐃᐃ = b.ᐃΔᐃᐃ;
      },
      ΔΔᐃⵠⲆᐃΔⵠⵠ: function (a) {
        var b = Xs[a];
        this.id = a;
        this.ⲆᐃⲆᐃᐃ = true;
        var c = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
        if (c && c.right == 28) {
          this.timeout.ΔᐃⵠΔⵠᐃΔ = b.time * 3;
        } else {
          this.timeout.ΔᐃⵠΔⵠᐃΔ = b.time;
        }
        this.ᐃΔᐃᐃ = b.ᐃΔᐃᐃ;
        for (var d = 0; d < b.r.length; d++) {
          var e = b.r[d];
          kx.ᐃΔΔⵠ.ⲆⲆΔᐃᐃⲆᐃ(e[0], e[1], kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(e[0]));
        }
        nx.ᐃⲆⵠΔⲆⲆⲆ();
      },
      ᐃⲆᐃ: function () {
        this.ᐃⲆⵠⵠⲆ = [];
        if (nx.ⲆΔⵠΔⵠ.ⲆⲆⲆⲆ === 1) {
          nx.ⲆΔⵠΔⵠ.display = 0;
        }
        for (var a in Xs) {
          var b = Xs[a];
          var c = true;
          if (b.r) {
            for (var d = 0; d < b.r.length; d++) {
              if (kx.ᐃΔΔⵠ.max >= 16 && b.id === 100) {
                c = cl;
                break;
              }
              if (b.w > this.ᐃⲆᐃΔⵠ || b.f > this.ⵠᐃᐃⵠⵠ || b.ⲆⲆΔ > this.ⵠᐃΔᐃᐃΔⵠ || b.e > this.ⵠΔΔⵠⲆ) {
                c = false;
                break;
              }
              var f = b.r[d];
              if (!kx.ᐃΔΔⵠ.ⵠᐃΔΔ[f[0]] || kx.ᐃΔΔⵠ.ⵠᐃΔΔ[f[0]] < f[1]) {
                c = In;
                break;
              }
            }
            if (c) {
              this.ᐃⲆⵠⵠⲆ.push(nx.ⵠΔΔ[b.id]);
            }
          }
        }
        nx.ΔⲆΔΔⲆᐃᐃ();
        nx.ⵠⵠⲆⲆΔⵠᐃ();
        nx.ΔᐃᐃⵠⲆⵠΔ();
        nx.ⵠⲆᐃᐃⵠⲆᐃ();
        nx.ⵠΔᐃⲆᐃⵠⲆ();
        nx.ΔΔⵠⵠΔⵠᐃ();
        nx.sign.ΔᐃΔⲆⲆⵠΔ();
      },
      ΔᐃⲆⵠⵠⵠⲆ: function () {
        this.id = -1;
        this.ⲆᐃⲆᐃᐃ = zl;
        this.timeout.ᐃⵠᐃ = 0;
        this.timeout.ⲆⲆΔ = cr;
        this.ᐃⲆᐃ();
      }
    };
    this.ΔᐃᐃᐃⲆΔᐃ = {
      message: An,
      ⵠⵠⲆⵠ: Rv
    };
    this.alert = {
      timeout: new ⵠⵠⵠ.ⲆⵠⲆⲆ(vn, 1, 1, 0, 4, 0.3),
      text: "",
      label: null,
      ⵠⵠⲆⵠ: Uv,
      list: []
    };
    this.ⵠΔⵠⵠⲆ = {
      Δᐃ: document.createElement("canvas"),
      ΔⵠⵠᐃΔ: [],
      ᐃⲆᐃ: Pr,
      translate: {
        x: 0,
        y: 0
      },
      sort: function () {
        var a = [];
        for (var b = jx.ⲆⲆⵠⲆ, c = 0; c < b.length; c++) {
          if (b[c].ΔⵠⲆⵠⵠ) {
            a.push({
              id: c,
              ⲆⲆⲆⵠ: b[c].ⲆΔⵠᐃⵠ
            });
          }
        }
        a.sort(function (a, b) {
          return b.ⲆⲆⲆⵠ - a.ⲆⲆⲆⵠ;
        });
        this.ΔⵠⵠᐃΔ = [];
        for (c = 0; c < a.length && c < 10; c++) {
          this.ΔⵠⵠᐃΔ.push(a[c].id);
        }
        this.ᐃⲆᐃ = ns;
      },
      ᐃᐃᐃⵠΔ: function (a) {
        for (var b = jx.ⲆⲆⵠⲆ, c = 0; c < b.length; c++) {
          b[c].ⲆΔⵠᐃⵠ = 0;
        }
        b[kx.id].ⲆΔⵠᐃⵠ = ⵠⵠⵠ.ⲆᐃΔⵠΔᐃⵠ(a[1]);
        this.ΔⵠⵠᐃΔ = [];
        for (c = 2; c < a.length; c += 2) {
          this.ΔⵠⵠᐃΔ.push(a[c]);
          b[a[c]].ⲆΔⵠᐃⵠ = ⵠⵠⵠ.ⲆᐃΔⵠΔᐃⵠ(a[c + 1]);
        }
        this.ᐃⲆᐃ = true;
      }
    };
    this.ⵠΔⵠⵠⲆ.Δᐃ.width = Po * 180;
    this.ⵠΔⵠⵠⲆ.Δᐃ.height = Po * 300;
    this.ⵠΔⵠⵠⲆ.Ⲇ = this.ⵠΔⵠⵠⲆ.Δᐃ.getContext("2d");
    this.ⵠⵠⲆⵠⵠ = {
      open: Eh,
      input: document.getElementById("commandInput"),
      ⲆΔᐃᐃⲆⵠⲆ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ᐃⵠΔΔⲆᐃⲆΔⵠ: function (a) {
        this.ⲆΔᐃᐃⲆⵠⲆ.innerHTML += a;
      },
      ᐃⲆᐃ: function () {
        this.style.left = Math.floor(so / 2 - 300) + "px";
        this.style.top = Math.floor(yo / 2 - 250) + "px";
      },
      ⵠᐃⲆⲆⵠΔⵠⵠⵠ: function () {
        this.ⲆΔᐃᐃⲆⵠⲆ.innerHTML = "";
      },
      ⲆᐃⵠⵠΔ: function () {
        this.open = false;
        this.style.display = "none";
      },
      ⵠᐃΔᐃⲆ: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = 0; c < a.length; c++) {
          if (c % 3 == 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + 1) % 3 === 0 || c + 1 === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      ⲆⲆⵠΔΔ: function (a, b, c, d) {
        d = d || "";
        var f = "<div class=commandWritten>" + (a = a || "");
        f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        f += (c = c || "") + "</div>" + d + "</div>";
        this.ᐃⵠΔΔⲆᐃⲆΔⵠ(f);
        this.ᐃⲆⲆⲆⵠᐃⲆᐃΔ();
      },
      ᐃⲆⲆⲆⵠᐃⲆᐃΔ: function () {
        this.ⲆΔᐃᐃⲆⵠⲆ.scrollTop = this.ⲆΔᐃᐃⲆⵠⲆ.scrollHeight;
      },
      ⲆΔⵠᐃⵠᐃⵠ: function (b) {
        switch (b) {
          case "clean":
            this.ⵠᐃⲆⲆⵠΔⵠⵠⵠ();
            return true;
          case "list":
            var c = "";
            const a = sa.document.createElement("div");
            for (var d = jx.ⲆⲆⵠⲆ, e = 0; e < d.length; e++) {
              var f = d[e];
              if (f.ΔⵠⲆⵠⵠ) {
                a.innerText = f.ᐃΔᐃⲆΔ;
                c += a.innerHTML + " <span style=\"color:green\">#" + e + "</span><br />";
              }
            }
            this.ⲆⲆⵠΔΔ("list", 1, "List all connected players", c);
            return true;
          case "weapon-list":
            this.ⲆⲆⵠΔΔ("Weapons", 1, "List all weapons in the game", this.ⵠᐃΔᐃⲆ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow", "wood_axe", "stone_axe", "gold_axe", "diamond_axe", "amethyst_axe", "reidite_axe"]));
            return Yh;
          case "tool-list":
            this.ⲆⲆⵠΔΔ("Tools", 1, "List all tools in the game", this.ⵠᐃΔᐃⲆ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return true;
          case "survival-list":
            this.ⲆⲆⵠΔΔ("Survival Items", 1, "List all survival items in the game", this.ⵠᐃΔᐃⲆ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return Ig;
          case "resource-list":
            this.ⲆⲆⵠΔΔ("Resources", 1, "List all resources in the game", this.ⵠᐃΔᐃⲆ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return _q;
          case "food-list":
            this.ⲆⲆⵠΔΔ("Food", 1, "List all food in the game", this.ⵠᐃΔᐃⲆ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return Jq;
          case "hat-list":
            this.ⲆⲆⵠΔΔ("Hats", 1, "List all hats in the game", this.ⵠᐃΔᐃⲆ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return Bq;
          case "building-list":
            this.ⲆⲆⵠΔΔ("Buildings", 1, "List all buildings in the game", this.ⵠᐃΔᐃⲆ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return true;
          case "biome-list":
            this.ⲆⲆⵠΔΔ("Biomes list", 1, "List all available biomes in the game", this.ⵠᐃΔᐃⲆ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return Pr;
          case "help-config":
            this.ⲆⲆⵠΔΔ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return true;
          case "pos":
            d = jx.ⵠⲆⵠ[0];
            e = 0;
            for (; e < d.length; e++) {
              var g = d[e];
              if (g.ᐃⲆⲆⲆ === kx.id) {
                this.ⲆⲆⵠΔΔ("pos", 1, "Your position is " + Math.floor(g.x / 100) + ":" + Math.floor(g.y / 100));
                return true;
              }
            }
            break;
          case "help-admin":
            this.ⲆⲆⵠΔΔ("help-admin", 1, "List all available commands for admin only", this.ⵠᐃΔᐃⲆ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return Jg;
          case "help":
            this.ⲆⲆⵠΔΔ("help", 1, "List all available commands", this.ⵠᐃΔᐃⲆ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return true;
        }
        return false;
      },
      ᐃᐃⲆΔΔᐃⲆⲆⵠ: function () {
        if (!this.open) {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ᐃⲆᐃⲆⲆΔⵠ: function () {
        var a = this.input.value;
        if (a && a.length > 0) {
          if (!this.ⲆΔⵠᐃⵠᐃⵠ(a)) {
            mx.ΔⵠⵠᐃⲆΔᐃⵠᐃ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.ᐃⲆΔΔⵠ = {
      open: vn,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      ᐃⲆᐃ: function () {
        this.style.left = Math.floor(so / 2 - 150) + "px";
        this.style.top = Math.floor(yo / 2 + 80) + "px";
      },
      ⲆᐃⵠⵠΔ: function () {
        this.open = false;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (kx.alert.text) {
              kx.alert.list.push(b);
            } else {
              kx.alert.text = b;
            }
            nx.ⵠᐃⲆΔΔⵠⲆ = 0;
          } else {
            nx.ⵠᐃⲆΔΔⵠⲆ = 1;
          }
        }
      },
      ⲆΔⵠᐃⵠᐃⵠ: function (a) {
        if (a.charAt(0) == this.prefix) {
          var b = "";
          var c = "";
          for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
            b += a.charAt(d);
          }
          for (d++; d < a.length; d++) {
            c += a.charAt(d);
          }
          var e = this.cmd[b];
          if (e) {
            e(c);
          }
          return true;
        }
        return false;
      },
      ᐃⲆⵠΔΔ: function () {
        if (this.open) {
          this.open = false;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ⲆΔⵠᐃⵠᐃⵠ(a)) {
              mx.ⵠΔⵠΔⲆᐃᐃᐃΔ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ⲆᐃⵠΔⲆᐃᐃ = {
      ⲆᐃΔⵠΔ: [],
      ᐃⲆᐃ: function (a) {
        a.y += sx * 80 * a.ⲆⲆⲆⵠ;
        a.x += sx * 80 * a.c;
        a.ΔⵠⲆᐃⵠ -= sx / 6;
        if (a.ΔⵠⲆᐃⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + sx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - sx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min(Nr.ᐃᐃⲆⵠⵠⲆΔ * (so / 1366), Nr.ᐃᐃⲆⵠⵠⲆΔ + 10) * Math.max(Math.min(jx.ᐃⵠΔⵠᐃ + 1000, 3000) / 3000, 0));
        if (this.ⲆᐃΔⵠΔ.length < c) {
          var d = Math.floor(Math.random() * Nr.ᐃⲆⵠⵠᐃⲆΔ);
          var e = -kx.ⲆⲆᐃ.x + Math.floor(Math.random() * kx.ⲆⲆᐃ.w);
          var f = -kx.ⲆⲆᐃ.y + Math.floor(Math.random() * kx.ⲆⲆᐃ.ᐃⵠⵠ);
          var g = Math.random(Math.PI);
          this.ⲆᐃΔⵠΔ.push(new Qf(d, e, f, g));
        }
      }
    };
    this.ΔⵠⵠΔΔΔⵠ = 0;
    this.ⵠΔⵠΔΔ = 0;
    this.ᐃⵠΔⲆⲆ = {
      ⲆᐃΔⵠΔ: [],
      ᐃΔΔΔΔ: 0,
      ΔΔΔⲆⵠ: 0,
      ᐃⲆᐃ: function (a) {
        a.y += sx * (200 + this.ΔΔΔⲆⵠ * 800) * a.ⲆⲆⲆⵠ;
        a.x += sx * (200 + this.ΔΔΔⲆⵠ * 800) * a.c;
        a.ΔⵠⲆᐃⵠ -= sx / 6;
        if (a.ΔⵠⲆᐃⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + sx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - sx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min((this.ΔΔΔⲆⵠ + 0.1) * Nr.ⵠⵠⲆᐃⲆⵠΔ * (so / 1366), (this.ΔΔΔⲆⵠ + 0.1) * Nr.ⵠⵠⲆᐃⲆⵠΔ + 10) * Math.max(Math.min(jx.ⵠⲆᐃⵠΔ + 1000, 3000) / 3000, 0));
        if (this.ⲆᐃΔⵠΔ.length < c) {
          var d = Math.floor(Math.random() * Nr.ᐃⲆⵠⵠᐃⲆΔ);
          var e = -kx.ⲆⲆᐃ.x + Math.floor(Math.random() * kx.ⲆⲆᐃ.w);
          var f = -kx.ⲆⲆᐃ.y + Math.floor(Math.random() * kx.ⲆⲆᐃ.ᐃⵠⵠ);
          var g = Math.random(Math.PI);
          if (kx.ᐃⵠΔⲆⲆ.ᐃΔΔΔΔ !== 0) {
            e -= kx.ⲆⲆᐃ.w / 2;
          }
          this.ⲆᐃΔⵠΔ.push(new Qf(d, e, f, g));
        }
      }
    };
    this.ΔΔᐃⵠⲆ = {
      ⲆᐃΔⵠΔ: [],
      ᐃΔΔΔΔ: 0,
      ΔΔΔⲆⵠ: 0,
      ᐃⲆᐃ: function (a) {
        if (px.ΔⵠᐃᐃⵠⲆᐃ()) {
          a.y += sx * a.ΔⵠⵠΔΔ * (5.5 + this.ΔΔΔⲆⵠ * 10);
        } else {
          a.y += sx * a.ΔⵠⵠΔΔ * (5 + this.ΔΔΔⲆⵠ * 10);
        }
        a.ΔⵠⲆᐃⵠ -= sx / 2;
        if (px.ⵠⵠⲆⵠⲆΔᐃ()) {
          a.x += sx * (100 + this.ΔΔΔⲆⵠ * 400);
        } else if (px.ⲆⲆⲆᐃᐃⲆΔ()) {
          a.x -= sx * (130 - this.ΔΔΔⲆⵠ * 400);
        } else {
          a.x -= sx * (30 - this.ΔΔΔⲆⵠ * 400);
        }
        if (a.ΔⵠⲆᐃⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + sx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - sx * 5, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ΔΔΔⲆⵠ * 1.5 + 0.5) * Nr.ⲆᐃⲆⵠΔⵠⵠ * (so / 1366), (this.ΔΔΔⲆⵠ * 1.5 + 0.5) * Nr.ⲆᐃⲆⵠΔⵠⵠ + 10) * Math.max(Math.min(jx.ⵠⲆⵠΔⲆ + 1000, 3000) / 3000, 0));
        if (this.ⲆᐃΔⵠΔ.length < b) {
          var c = Math.floor(Math.random() * Nr.ⲆⲆᐃΔⵠᐃⲆ);
          var d = -kx.ⲆⲆᐃ.x + Math.floor(Math.random() * kx.ⲆⲆᐃ.w);
          var e = -kx.ⲆⲆᐃ.y + Math.floor(Math.random() * 400 * Po - Po * 200);
          this.ⲆᐃΔⵠΔ.push(new Qf(c, d, e, 0));
        }
      }
    };
    this.ⵠⵠⵠᐃ = [];
    for (var d = 0; d < 4; d++) {
      this.ⵠⵠⵠᐃ.push(new c());
    }
  }
  function qf() {
    Math.random();
    return "t";
  }
  function Kf() {
    Math.random();
    return "p";
  }
  function Lf() {
    Math.random();
    return "o";
  }
  function Hw() {
    Math.random();
    return "s";
  }
  function Fw() {
    Math.random();
    return "a";
  }
  function Kf() {
    Math.random();
    return "p";
  }
  function Xf() {
    Math.random();
    return "i";
  }
  function Zf() {
    Math.random();
    return "g";
  }
  ⲆⲆΔⵠᐃᐃᐃᐃⵠ = 1;
  function $f() {
    ⵠⵠⵠ.ΔⵠⲆⲆⲆⵠΔ("https://twitter.com/intent/tweet?text=I%20survived%20" + kx.ⵠᐃⲆ + "%20days%20with%20" + kx.ᐃΔⲆΔⲆΔⲆ.ⲆΔⵠᐃⵠ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  function Iw(b, c, d, e, f, i) {
    const a = (b + 54726) % 65341;
    const j = ~(f & 30082) & f | ~(f & 30082) & 30082;
    const k = (8 << (i & 255)) + (0 << (i >> 24 & 255)) + (24 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
    const h = function (b, c, d, e) {
      const f = b ^ 39894;
      const i = (8 << (c >> 8 & 255)) + (0 << (c >> 16 & 255)) + (24 << (c >> 24 & 255)) + (16 << (c & 255));
      const a = ~(d & 52286) & 52286 | ~(d & 52286) & d;
      const j = (16 << (e >> 16 & 255)) + (24 << (e >> 8 & 255)) + (0 << (e & 255)) + (8 << (e >> 24 & 255));
      const k = rt(f, i, a, j, f);
      const h = Ax(i, a, j, f, i);
      return (24 << ((k ^ h) >> 8 & 255)) + (16 << ((k ^ h) >> 16 & 255)) + (8 << ((k ^ h) & 255)) + (0 << ((k ^ h) >> 24 & 255));
    }(a, ~(c & 58001) & (c | 58001), ~(d & 45834) & 45834 | ~(d & 45834) & d, ~(e & 62328) & 62328 | ~(e & 62328) & e);
    const g = Jw(j, k, a);
    return (0 << ((h ^ g) >> 16 & 255)) + (24 << ((h ^ g) >> 0 & 255)) + (16 << ((h ^ g) >> 8 & 255)) + (8 << ((h ^ g) >> 24 & 255));
  }
  function Jw(b, c, d) {
    const e = ~(b & 57369) & b | ~(b & 57369) & 57369;
    const f = (1 + (c + 16978) * 22695477) % 4294967296;
    const g = ((13894 + d) * 1664525 + 1013904223) % 4294967296;
    return (1013904223 + (46307 + (Rn(e, f, g, e, f) ^ Fr(g, e, f, g))) * 1664525) % 4294967296;
  }
  function Kw(b, c) {
    this.Δᐃ = b;
    this.Ⲇ = c;
    var d = this;
    this.ᐃΔⵠᐃᐃΔⵠ = T;
    this.ᐃⲆᐃⵠᐃΔᐃ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: 0,
      translate: {
        x: 0,
        y: 0
      },
      ᐃⲆᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ᐃᐃᐃⵠΔ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + kx.ᐃΔⲆΔⲆΔⲆ.ⵠᐃΔᐃᐃⲆᐃ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + lb[335] + " : " + kx.ⵠᐃⲆ + "</div><div class=\"stats\"> " + lb[334] + " : " + kx.ᐃΔⲆΔⲆΔⲆ.ⲆΔⲆΔⲆ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + lb[333] + " : " + kx.ᐃΔⲆΔⲆΔⲆ.ⲆΔⵠᐃⵠ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + kx.ᐃΔⲆΔⲆΔⲆ.ⲆΔᐃⲆⲆᐃⵠ + " " + lb[332] + "</div></div><div id=\"shop_points\">" + lb[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + lb[329] + "</div><div class=\"social\" id=\"fffacebook\">" + lb[330] + "</div></div><div id=\"bbback\">" + lb[328] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", $f, false);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          lx.ⲆᐃⵠⵠΔ(ix.ᐃⲆⵠΔΔ);
        }, qs);
        document.getElementById("fffacebook").addEventListener("mouseup", Nw, In);
        this.height = Math.floor(this.id.clientHeight / 2);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", Bx + "getBreadAndScore?userid=" + Ix);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - ix.Δᐃⵠᐃⵠ;
              ix.Δᐃⵠᐃⵠ = b.b;
              ix.ⲆΔⵠᐃⵠ = b.s;
              ix.ⲆⲆⵠⵠᐃ = ix.ᐃΔΔᐃΔⲆⲆ(ix.ⲆΔⵠᐃⵠ);
              ix.ΔᐃΔⲆᐃⵠⵠ = ix.ᐃⵠⲆΔⲆᐃⲆ(ix.ⲆΔⵠᐃⵠ);
              ix.ΔᐃⵠᐃⲆΔᐃ = 0;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var f;
    var i = 0;
    function e() {
      d.ᐃⲆᐃ();
      if (++i != 30) {
        sa.setTimeout(e, 33);
      } else {
        d.ᐃⲆᐃ();
      }
    }
    this.ⲆᐃⵠⵠΔ = function (a) {
      if (d.ᐃΔⵠᐃᐃΔⵠ === true) {
        d.ᐃΔⵠᐃᐃΔⵠ = Ph;
        f = a;
        j = -1;
        k();
        ux();
      }
    };
    var j = -1;
    function k() {
      d.ᐃⲆᐃ();
      if (++j == 30) {
        d.stop();
        d.ᐃⲆᐃⵠᐃΔᐃ.style.display = "none";
        f();
        return;
      }
      sa.setTimeout(k, 33);
    }
    this.ⲆΔᐃᐃᐃ = false;
    this.stop = function () {
      this.ⲆΔᐃᐃᐃ = Zj;
    };
    this.ᐃⲆⵠΔΔ = function () {
      wx();
      document.getElementById("game_body").style.backgroundColor = Nr.ⲆᐃᐃᐃΔ[hx.time];
      d.ᐃⲆᐃⵠᐃΔᐃ.ᐃᐃᐃⵠΔ();
      ix.ⵠΔⲆⲆⵠ.style.display = "inline-block";
      d.ⲆΔᐃᐃᐃ = true;
      d.ᐃΔⵠᐃᐃΔⵠ = jo;
      j = -1;
      i = 0;
      e();
    };
    this.ᐃⲆᐃ = function () {
      this.ᐃⲆᐃⵠᐃΔᐃ.translate.x = Math.floor(zo - 275);
      this.ᐃⲆᐃⵠᐃΔᐃ.translate.y = Math.floor(Co - this.ᐃⲆᐃⵠᐃΔᐃ.height - 28);
      ix.ⵠΔⲆⲆⵠ.translate.x = this.ᐃⲆᐃⵠᐃΔᐃ.translate.x - 350;
      ix.ⵠΔⲆⲆⵠ.translate.y = this.ᐃⲆᐃⵠᐃΔᐃ.translate.y + 0;
      ix.ⵠΔⲆⲆⵠ.ᐃⲆᐃ();
      if (i != 30 || j != -1) {
        var a = 0;
        if (i != 30) {
          a = 1500 / (i + 1) - 50;
        }
        if (j != -1) {
          a = -(1750 / (30 - j + 1) - 48);
        }
        this.ᐃⲆᐃⵠᐃΔᐃ.translate.y -= a;
      }
      this.ᐃⲆᐃⵠᐃΔᐃ.ᐃⲆᐃ();
    };
    this.ⵠⵠⲆⵠ = function () {
      np();
      kx.alert.ⵠⵠⲆⵠ("#FFF", "#000");
    };
  }
  function Lw(a, b) {
    const c = ((a + 8007) * 22695477 + 1) % 4294967296;
    const d = (8 << (b >> 8 & 255)) + (16 << (b >> 24 & 255)) + (24 << (b & 255)) + (0 << (b >> 16 & 255));
    return ((59299 + (Jw(c, d, c) ^ Rn(d, c, d, c, d))) * 22695477 + 1) % 4294967296;
  }
  function Mw(b, f) {
    var j = this;
    this.Δᐃ = b;
    this.Ⲇ = f;
    if (sa.navigator.userAgent.indexOf("Edge") > -1) {
      this.ᐃᐃᐃⵠΔΔᐃ = "default";
      this.ⲆⵠⵠᐃⲆΔΔ = "pointer";
    } else {
      this.ᐃᐃᐃⵠΔΔᐃ = "url('img/cursor0.png'), default";
      this.ⲆⵠⵠᐃⲆΔΔ = "url('img/cursor1.png'), pointer";
    }
    this.ⵠᐃⲆΔΔⵠⲆ = 1;
    this.ΔⲆΔΔᐃΔᐃ = 1;
    this.ⵠΔΔⲆⵠⵠⲆ = 1;
    this.ⵠⵠⵠΔⲆⲆⲆ = 1;
    this.ᐃΔΔⵠⵠⲆⲆⲆⲆ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      ᐃⲆᐃ: function () {
        this.style.left = Math.floor(zo - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.ᐃⵠᐃⲆ = {
      ᐃⵠᐃⲆᐃΔΔ: mf(60, 60, 0, ⲆΔ[782]),
      ⵠⲆᐃⵠᐃΔΔ: mf(60, 60, 0, ⲆΔ[783])
    };
    this.sign = {
      open: Rh,
      ᐃᐃΔΔⲆᐃΔΔⲆ: 0,
      ⲆΔⵠᐃⲆⵠᐃ: document.getElementById("sign_object"),
      ⵠᐃⲆⲆΔΔⵠ: 0,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: mf(60, 60, 0, ⲆΔ[803]),
      ΔᐃΔⲆⲆⵠΔ: function () {
        var a = Math.floor(Math.floor((3 + kx.ⲆⲆⲆⲆ.ᐃⲆⵠⵠⲆ.length) / 4) * (10 + ⲆΔ[316][0].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      ᐃⲆᐃ: function () {
        this.style.left = Math.floor(zo - 150) + "px";
        this.style.top = Math.floor(Co - 115) + "px";
      },
      ⲆᐃⵠⵠΔ: function () {
        nx.sign.style.display = "none";
        nx.sign.open = ye;
      },
      select: function () {
        nx.sign.open = !nx.sign.open;
        if (nx.sign.open) {
          nx.sign.style.display = "inline-block";
        } else {
          nx.sign.style.display = "none";
        }
      },
      ok: function () {
        mx.ⲆⵠᐃⲆⲆⵠⲆⲆⵠ(kx.sign.ⲆⵠᐃΔⲆ, nx.sign.ⵠᐃⲆⲆΔΔⵠ);
        nx.sign.select();
      },
      up: function () {
        nx.sign.ⵠᐃⲆⲆΔΔⵠ = nx.sign.ⵠᐃⲆⲆΔΔⵠ === 0 ? 3 : nx.sign.ⵠᐃⲆⲆΔΔⵠ - 1;
        nx.sign.ⲆΔⵠᐃⲆⵠᐃ.src = "./img/sign" + nx.sign.ⵠᐃⲆⲆΔΔⵠ + ".png";
      },
      down: function () {
        nx.sign.ⵠᐃⲆⲆΔΔⵠ = (nx.sign.ⵠᐃⲆⲆΔΔⵠ + 1) % 4;
        nx.sign.ⲆΔⵠᐃⲆⵠᐃ.src = "./img/sign" + nx.sign.ⵠᐃⲆⲆΔΔⵠ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, Ao);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, false);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, $k);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, ye);
    this.ⵠᐃⵠⲆᐃ = {
      open: false,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: 0,
        name: "wood",
        ᐃⲆΔⲆⵠ: 1,
        b: 1,
        a: 3,
        ᐃⵠⲆᐃΔ: 316
      }, {
        id: 1,
        name: "stone",
        ᐃⲆΔⲆⵠ: 1,
        b: 1,
        a: 4,
        ᐃⵠⲆᐃΔ: 315
      }, {
        id: 2,
        name: "gold",
        ᐃⲆΔⲆⵠ: 1,
        b: 1,
        a: 6,
        ᐃⵠⲆᐃΔ: 297
      }, {
        id: 3,
        name: "diamond",
        ᐃⲆΔⲆⵠ: 4,
        b: 4,
        a: 1,
        ᐃⵠⲆᐃΔ: 298
      }, {
        id: 4,
        name: "amethyst",
        ᐃⲆΔⲆⵠ: 8,
        b: 8,
        a: 1,
        ᐃⵠⲆᐃΔ: 418
      }, {
        id: 5,
        name: "reidite",
        ᐃⲆΔⲆⵠ: 16,
        b: 16,
        a: 1,
        ᐃⵠⲆᐃΔ: 938
      }, {
        id: 6,
        name: "pumpkin_seed",
        ᐃⲆΔⲆⵠ: 10,
        b: 10,
        a: 1,
        ᐃⵠⲆᐃΔ: 808
      }, {
        id: 7,
        name: "carrot_seed",
        ᐃⲆΔⲆⵠ: 16,
        b: 16,
        a: 1,
        ᐃⵠⲆᐃΔ: 949
      }, {
        id: 8,
        name: "tomato_seed",
        ᐃⲆΔⲆⵠ: 20,
        b: 20,
        a: 1,
        ᐃⵠⲆᐃΔ: 959
      }, {
        id: 9,
        name: "thornbush_seed",
        ᐃⲆΔⲆⵠ: 30,
        b: 30,
        a: 1,
        ᐃⵠⲆᐃΔ: 845
      }, {
        id: 10,
        name: "garlic_seed",
        ᐃⲆΔⲆⵠ: 40,
        b: 40,
        a: 1,
        ᐃⵠⲆᐃΔ: 834
      }, {
        id: 11,
        name: "watermelon_seed",
        ᐃⲆΔⲆⵠ: 60,
        b: 60,
        a: 1,
        ᐃⵠⲆᐃΔ: 966
      }],
      button: mf(60, 60, 0, ⲆΔ[795]),
      ᐃⲆᐃ: function () {
        this.style.left = Math.floor(zo - 450) + "px";
        this.style.top = Math.floor(Co - 270) + "px";
      },
      select: function () {
        nx.ⵠᐃⵠⲆᐃ.open = !nx.ⵠᐃⵠⲆᐃ.open;
        if (nx.ⵠᐃⵠⲆᐃ.open) {
          nx.ⵠᐃⵠⲆᐃ.style.display = "inline-block";
        } else {
          nx.ⵠᐃⵠⲆᐃ.style.display = "none";
        }
      },
      ⲆᐃⵠⵠΔ: function () {
        nx.ⵠᐃⵠⲆᐃ.style.display = "none";
        nx.ⵠᐃⵠⲆᐃ.open = $k;
      },
      ⵠΔⵠᐃᐃⵠⲆ: function () {
        mx.ⵠⵠΔⲆⵠᐃᐃⵠⲆ(this.ⲆΔⲆⵠᐃⲆΔ);
      },
      ⲆⲆᐃᐃΔ: function () {
        this.id;
        if (this.ⲆΔⲆⵠᐃⲆΔ.a === 1) {
          var a = Math.floor(Number(this.value) * this.ⲆΔⲆⵠᐃⲆΔ.b);
          this.ⲆΔⲆⵠᐃⲆΔ.ᐃⲆΔⲆⵠ = a;
          document.getElementById(this.ⲆΔⲆⵠᐃⲆΔ.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.ⲆΔⲆⵠᐃⲆΔ.a);
          this.ⲆΔⲆⵠᐃⲆΔ.ᐃⲆΔⲆⵠ = a;
          document.getElementById(this.ⲆΔⲆⵠᐃⲆΔ.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ⵠᐃⵠⲆᐃ.ⲆᐃⵠⵠΔ, Nh);
    var e = [["mouseup", this.ⵠᐃⵠⲆᐃ.ⵠΔⵠᐃᐃⵠⲆ, "buy_"], ["click", this.ⵠᐃⵠⲆᐃ.ⲆⲆᐃᐃΔ, ""], ["change", this.ⵠᐃⵠⲆᐃ.ⲆⲆᐃᐃΔ, ""], ["keypress", this.ⵠᐃⵠⲆᐃ.keypress, ""]];
    for (var g = 0; this.ⵠᐃⵠⲆᐃ.items.length > g; g++) {
      var i = this.ⵠᐃⵠⲆᐃ.items[g];
      document.getElementById(i.name + "_market").src = br === ⲆΔ[i.ᐃⵠⲆᐃΔ][0].ⲆΔⲆⵠᐃ ? ⲆΔ[i.ᐃⵠⲆᐃΔ][0].src : ⲆΔ[i.ᐃⵠⲆᐃΔ][0].ⲆΔⲆⵠᐃ;
      if (i.a === 1) {
        document.getElementById(i.name + "_trad_number").innerHTML = i.b;
        document.getElementById(i.name + "_number").value = 1;
        document.getElementById(i.name + "_number").step = 1;
        document.getElementById(i.name + "_number").min = 1;
        document.getElementById(i.name + "_number").max = Math.floor(255 / i.b);
      } else {
        document.getElementById(i.name + "_trad_number").innerHTML = 1;
        document.getElementById(i.name + "_number").value = i.a;
        document.getElementById(i.name + "_number").step = i.a;
        document.getElementById(i.name + "_number").min = i.a;
      }
      document.getElementById("buy_" + i.name + "_number").ⲆΔⲆⵠᐃⲆΔ = i;
      document.getElementById(i.name + "_number").ⲆΔⲆⵠᐃⲆΔ = i;
      for (var k = 0; e.length > k; k++) {
        document.getElementById(e[k][2] + i.name + "_number").addEventListener(e[k][0], e[k][1], $k);
      }
    }
    $("[type='number']").keypress(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: false,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      ⲆⲆᐃᐃᐃ: document.getElementById("agree_ing").style,
      ΔⵠⲆⵠᐃᐃⲆ: document.getElementById("cancel_agree_ing").style,
      ᐃⲆᐃΔᐃⲆΔ: document.getElementById("quest_agree_ing").style,
      ⲆⲆⲆⲆⵠⵠΔ: document.getElementById("spectator_agree_ing").style,
      ΔⲆᐃΔᐃⲆᐃ: document.getElementById("auto_feed_agree_ing").style,
      ᐃⵠⵠΔΔᐃΔ: document.getElementById("info_agree_ing").style,
      ⵠΔΔⵠΔⵠᐃ: document.getElementById("pixelated_agree_ing").style,
      button: mf(60, 60, 0, ⲆΔ[727]),
      ΔⵠⲆᐃⲆᐃⵠⵠΔ: function () {
        nx.options.open = !nx.options.open;
        if (nx.options.open) {
          nx.options.style.display = "inline-block";
        } else {
          nx.options.style.display = "none";
        }
      },
      ΔΔΔⲆᐃᐃΔⵠⲆ: function () {
        ix.ᐃᐃⵠᐃᐃᐃⵠ();
      },
      ᐃⵠΔΔⵠⲆⲆⵠᐃ: function () {
        ix.ⵠΔΔᐃᐃᐃⲆ();
      },
      high: function () {
        ix.ᐃⲆⲆΔⲆΔⲆᐃᐃ();
      },
      low: function () {
        ix.ΔⲆⵠᐃΔᐃⵠⲆΔ();
      },
      ⵠⵠΔΔᐃ: function () {
        nx.ⵠⵠⵠⲆ.ⵠⵠΔΔᐃ();
      },
      ᐃΔⵠⵠⵠⲆⵠⵠᐃ: function () {
        nx.ⵠΔⲆⵠⲆ.ⵠⵠΔΔᐃ();
      },
      ᐃⲆᐃᐃᐃⵠⵠⲆΔ: function () {
        nx.ⵠᐃᐃⲆ.ⵠⵠΔΔᐃ();
      },
      ᐃΔⵠΔᐃΔⵠᐃⵠ: function () {
        kx.ΔⲆⵠᐃⵠ.ΔᐃⲆᐃⲆⲆΔ();
      },
      ᐃᐃⲆⲆⵠΔⲆⲆⲆ: function () {
        kx.ᐃΔⲆᐃᐃ.ΔᐃⲆᐃⲆⲆΔ();
      },
      ⲆᐃⵠⵠΔ: function () {
        nx.options.style.display = "none";
        nx.options.open = false;
      },
      ᐃⲆᐃ: function () {
        this.style.left = Math.floor(zo - 235) + "px";
        this.style.top = Math.floor(Co - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ΔΔΔⲆᐃᐃΔⵠⲆ, vn);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ᐃⵠΔΔⵠⲆⲆⵠᐃ, Ah);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, zl);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, false);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.ⲆᐃⵠⵠΔ, false);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ⵠⵠΔΔᐃ, ye);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ᐃⲆᐃᐃᐃⵠⵠⲆΔ, false);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ᐃΔⵠⵠⵠⲆⵠⵠᐃ, false);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ᐃΔⵠΔᐃΔⵠᐃⵠ, T);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ᐃᐃⲆⲆⵠΔⲆⲆⲆ, Nh);
    this.ⵠΔⲆⵠⲆ = {
      open: false,
      ⵠΔΔΔⲆ: ᐃᐃᐃⲆ.get("starve_cancel") ? ᐃᐃᐃⲆ.get("starve_cancel") === "0" ? 0 : 1 : 1,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      ⲆⲆᐃᐃᐃ: document.getElementById("cancel_agree").style,
      button: 0,
      ᐃⵠ: 0,
      ⲆᐃⵠⵠΔ: function () {
        nx.ⵠΔⲆⵠⲆ.style.display = "none";
        nx.ⵠΔⲆⵠⲆ.open = false;
      },
      ⵠᐃΔⵠⲆⵠᐃ: function () {
        if (kx.ⲆⲆⲆⲆ.ⲆᐃⲆᐃᐃ) {
          mx.ᐃΔⵠⵠᐃΔⲆⲆⵠ();
        }
        nx.ⵠΔⲆⵠⲆ.ⲆᐃⵠⵠΔ();
      },
      ⵠⵠΔΔᐃ: function () {
        if (nx.ⵠΔⲆⵠⲆ.ⵠΔΔΔⲆ) {
          ᐃᐃᐃⲆ.set("starve_cancel", "0");
          nx.ⵠΔⲆⵠⲆ.ⲆⲆᐃᐃᐃ.display = "inline-block";
          nx.options.ΔⵠⲆⵠᐃᐃⲆ.display = "none";
        } else {
          ᐃᐃᐃⲆ.set("starve_cancel", "1");
          nx.ⵠΔⲆⵠⲆ.ⲆⲆᐃᐃᐃ.display = "none";
          nx.options.ΔⵠⲆⵠᐃᐃⲆ.display = "inline-block";
        }
        nx.ⵠΔⲆⵠⲆ.ⵠΔΔΔⲆ = !nx.ⵠΔⲆⵠⲆ.ⵠΔΔΔⲆ;
      },
      ⲆΔⲆΔΔΔⵠ: function () {
        if (this.ⵠΔΔΔⲆ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.ⵠᐃΔⵠⲆⵠᐃ();
        }
      },
      ᐃⲆᐃ: function () {
        this.style.left = Math.floor(zo - 235) + "px";
        this.style.top = Math.floor(Co - 130) + "px";
      }
    };
    this.ⵠΔⲆⵠⲆ.id.oncontextmenu = function () {
      return false;
    };
    this.ⵠΔⲆⵠⲆ.ⲆⲆᐃᐃᐃ.display = "none";
    if (this.ⵠΔⲆⵠⲆ.ⵠΔΔΔⲆ) {
      this.options.ΔⵠⲆⵠᐃᐃⲆ.display = "inline-block";
    } else {
      this.options.ΔⵠⲆⵠᐃᐃⲆ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ⵠΔⲆⵠⲆ.ⵠᐃΔⵠⲆⵠᐃ, false);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ⵠΔⲆⵠⲆ.ⲆᐃⵠⵠΔ, false);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ⵠΔⲆⵠⲆ.ⵠⵠΔΔᐃ, false);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, false);
    this.ⲆⵠᐃⵠⲆⵠΔ = {
      ⵠΔΔΔⲆ: ᐃᐃᐃⲆ.get("starve_aliasing") ? ᐃᐃᐃⲆ.get("starve_aliasing") === "0" ? 0 : 1 : 1,
      ᐃⲆᐃⵠᐃⵠᐃ: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      ⵠⵠΔΔᐃ: function () {
        if (nx.ⲆⵠᐃⵠⲆⵠΔ.ⵠΔΔΔⲆ === 0) {
          ᐃᐃᐃⲆ.set("starve_aliasing", "1");
          nx.ⲆⵠᐃⵠⲆⵠΔ.ᐃⲆᐃⵠᐃⵠᐃ(1);
          nx.options.ⵠΔΔⵠΔⵠᐃ.display = "inline-block";
        } else {
          ᐃᐃᐃⲆ.set("starve_aliasing", "0");
          nx.ⲆⵠᐃⵠⲆⵠΔ.ᐃⲆᐃⵠᐃⵠᐃ(0);
          nx.options.ⵠΔΔⵠΔⵠᐃ.display = "none";
        }
        nx.ⲆⵠᐃⵠⲆⵠΔ.ⵠΔΔΔⲆ = (nx.ⲆⵠᐃⵠⲆⵠΔ.ⵠΔΔΔⲆ + 1) % 2;
      }
    };
    if (this.ⲆⵠᐃⵠⲆⵠΔ.ⵠΔΔΔⲆ === 1) {
      this.options.ⵠΔΔⵠΔⵠᐃ.display = "inline-block";
    } else {
      this.ⲆⵠᐃⵠⲆⵠΔ.ᐃⲆᐃⵠᐃⵠᐃ(0);
      this.options.ⵠΔΔⵠΔⵠᐃ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ⲆⵠᐃⵠⲆⵠΔ.ⵠⵠΔΔᐃ, false);
    this.ⲆΔⵠΔⵠ = {
      ⵠΔΔΔⲆ: ᐃᐃᐃⲆ.get("starve_info_box") ? ᐃᐃᐃⲆ.get("starve_info_box") === "0" ? 0 : 1 : 1,
      display: 0,
      x: 0,
      y: 0,
      id: 0,
      ⲆⲆⲆⲆ: 0,
      ⵠⵠΔΔᐃ: function () {
        if (nx.ⲆΔⵠΔⵠ.ⵠΔΔΔⲆ === 0) {
          ᐃᐃᐃⲆ.set("starve_info_box", "1");
          nx.options.ᐃⵠⵠΔΔᐃΔ.display = "inline-block";
        } else {
          ᐃᐃᐃⲆ.set("starve_info_box", "0");
          nx.options.ᐃⵠⵠΔΔᐃΔ.display = "none";
        }
        nx.ⲆΔⵠΔⵠ.ⵠΔΔΔⲆ = (nx.ⲆΔⵠΔⵠ.ⵠΔΔΔⲆ + 1) % 2;
      },
      ΔΔⲆΔ: function (a, b, c) {
        if (a && this.ⵠΔΔΔⲆ) {
          this.display = 1;
          this.id = c === 0 ? b.id : Xs[b.id].ᐃΔᐃᐃ;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.ⲆⲆⲆⲆ = c;
        }
        return a;
      }
    };
    if (this.ⲆΔⵠΔⵠ.ⵠΔΔΔⲆ === 1) {
      this.options.ᐃⵠⵠΔΔᐃΔ.display = "inline-block";
    } else {
      this.options.ᐃⵠⵠΔΔᐃΔ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ⲆΔⵠΔⵠ.ⵠⵠΔΔᐃ, false);
    if (ᐃᐃᐃⲆ.get("starve_scale")) {
      So = Number(ᐃᐃᐃⲆ.get("starve_scale"));
      document.getElementById("input_ratio").value = So;
      So *= ar / dr;
      er();
    }
    this.ⲆΔΔΔΔΔⲆ = function () {
      ᐃᐃᐃⲆ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      So = document.getElementById("input_ratio").value * (ar / dr);
      er();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ⲆΔΔΔΔΔⲆ, false);
    this.ⵠⵠⵠⲆ = {
      open: false,
      ⵠΔΔΔⲆ: ᐃᐃᐃⲆ.get("starve_safe") && ᐃᐃᐃⲆ.get("starve_safe") === "0" ? 0 : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      ⲆⲆᐃᐃᐃ: document.getElementById("agree").style,
      button: 0,
      ᐃⵠ: 0,
      ⲆᐃⵠⵠΔ: function () {
        nx.ⵠⵠⵠⲆ.style.display = "none";
        nx.ⵠⵠⵠⲆ.open = false;
      },
      all: function () {
        if (!kx.ⲆⲆᐃΔΔ.wait) {
          if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && kx.ⲆⲆⲆⲆ.id < 0 && !kx.ⲆⲆⵠᐃⲆ.enabled) {
            mx.ΔⲆⵠΔᐃΔⲆⲆΔ(nx.ⵠⵠⵠⲆ.button);
          }
          nx.ⵠⵠⵠⲆ.ⲆᐃⵠⵠΔ();
        }
      },
      Δⵠᐃⵠ: function () {
        if (kx.ⲆⲆⲆⲆ.ᐃⲆᐃΔⵠ && !kx.ⲆⲆᐃΔΔ.wait) {
          if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && kx.ⲆⲆⲆⲆ.id < 0 && !kx.ⲆⲆⵠᐃⲆ.enabled) {
            mx.ΔΔᐃΔΔΔⵠⵠⲆ(nx.ⵠⵠⵠⲆ.button);
          }
          nx.ⵠⵠⵠⲆ.ⲆᐃⵠⵠΔ();
        }
      },
      ⵠᐃΔᐃⵠⲆᐃⵠⲆ: function () {
        if (!kx.ⲆⲆᐃΔΔ.wait) {
          if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && kx.ⲆⲆⲆⲆ.id < 0 && !kx.ⲆⲆⵠᐃⲆ.enabled) {
            mx.ᐃⲆΔⲆᐃⲆΔⵠⵠ(nx.ⵠⵠⵠⲆ.button);
          }
          nx.ⵠⵠⵠⲆ.ⲆᐃⵠⵠΔ();
        }
      },
      ⵠⵠΔΔᐃ: function () {
        if (nx.ⵠⵠⵠⲆ.ⵠΔΔΔⲆ) {
          ᐃᐃᐃⲆ.set("starve_safe", "0");
          nx.ⵠⵠⵠⲆ.ⲆⲆᐃᐃᐃ.display = "inline-block";
          nx.options.ⲆⲆᐃᐃᐃ.display = "none";
        } else {
          ᐃᐃᐃⲆ.set("starve_safe", "1");
          nx.ⵠⵠⵠⲆ.ⲆⲆᐃᐃᐃ.display = "none";
          nx.options.ⲆⲆᐃᐃᐃ.display = "inline-block";
        }
        nx.ⵠⵠⵠⲆ.ⵠΔΔΔⲆ = !nx.ⵠⵠⵠⲆ.ⵠΔΔΔⲆ;
      },
      ⲆΔⲆΔΔΔⵠ: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = ⲆΔ[Wr[a].ⵠⵠ][0].ⲆΔⲆⵠᐃ === undefined ? ⲆΔ[Wr[a].ⵠⵠ][0].src : ⲆΔ[Wr[a].ⵠⵠ][0].ⲆΔⲆⵠᐃ;
        if (Wr[a].Δⵠᐃⵠ && !kx.ⲆᐃΔΔⲆ && kx.ⲆⲆⲆⲆ.ᐃⲆᐃΔⵠ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.ⵠΔΔΔⲆ) {
          this.style.display = "inline-block";
          this.open = ns;
        } else {
          this.all();
        }
      },
      ᐃⲆᐃ: function () {
        this.style.left = Math.floor(zo - 235) + "px";
        this.style.top = Math.floor(Co - 175) + "px";
      }
    };
    this.ⵠⵠⵠⲆ.ⲆⲆᐃᐃᐃ.display = "none";
    if (this.ⵠⵠⵠⲆ.ⵠΔΔΔⲆ) {
      this.options.ⲆⲆᐃᐃᐃ.display = "inline-block";
    } else {
      this.options.ⲆⲆᐃᐃᐃ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ⵠⵠⵠⲆ.ⵠᐃΔᐃⵠⲆᐃⵠⲆ, false);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ⵠⵠⵠⲆ.all, false);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ⵠⵠⵠⲆ.Δⵠᐃⵠ, In);
    document.getElementById("no_delete").addEventListener("mouseup", this.ⵠⵠⵠⲆ.ⲆᐃⵠⵠΔ, Zj);
    document.getElementById("case_agree").addEventListener("mouseup", this.ⵠⵠⵠⲆ.ⵠⵠΔΔᐃ, false);
    this.ⵠᐃⲆΔⵠ = {
      open: false,
      ΔᐃⲆᐃΔ: -1,
      button: mf(60, 60, 0, ⲆΔ[592]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      ᐃⲆᐃ: function () {
        this.style.left = Math.floor(zo - 300) + "px";
        this.style.top = Math.floor(Co - 215) + "px";
      },
      ⲆᐃⵠⵠΔ: function () {
        nx.ⵠᐃⲆΔⵠ.open = sq;
        nx.ⵠᐃⲆΔⵠ.style.display = "none";
      },
      select: function () {
        nx.ⵠᐃⲆΔⵠ.open = !nx.ⵠᐃⲆΔⵠ.open;
        if (nx.ⵠᐃⲆΔⵠ.open) {
          nx.ⵠᐃⲆΔⵠ.style.display = "inline-block";
        } else {
          nx.ⵠᐃⲆΔⵠ.style.display = "none";
        }
      },
      ⵠΔⵠᐃᐃⵠⲆ: function () {
        if (nx.ⵠᐃⲆΔⵠ.ΔᐃⲆᐃΔ >= 0) {
          mx.ΔΔᐃᐃᐃᐃⲆΔΔ(nx.ⵠᐃⲆΔⵠ.ΔᐃⲆᐃΔ);
          nx.ⵠᐃⲆΔⵠ.ⲆᐃⵠⵠΔ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + nx.ⵠᐃⲆΔⵠ.ΔᐃⲆᐃΔ);
          }
        }
      },
      ᐃᐃᐃⵠΔ: function () {
        var a = kx.ⵠᐃⲆΔⵠ.value;
        document.getElementById("points_bank").innerHTML = ⵠⵠⵠ.ⲆᐃᐃⲆⵠⲆᐃ(a) + " points";
        for (var b = 0; b < kf.length; b++) {
          if (kf[b].ΔΔᐃΔᐃ > a) {
            document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + 1)).style.opacity = "1";
          }
        }
        for (b = 1; b < 13; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ⲆⲆⲆⲆΔⲆᐃᐃⵠ: function () {
        if (this.id.length > 8) {
          var a = Number(this.id.charAt(7) + this.id.charAt(8));
        } else {
          a = Number(this.id.charAt(7));
        }
        var b = kf[a - 1];
        if (kx.ⵠᐃⲆΔⵠ.value >= b.ΔΔᐃΔᐃ) {
          nx.ⵠᐃⲆΔⵠ.ΔᐃⲆᐃΔ = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          nx.ⵠᐃⲆΔⵠ.ΔᐃⲆᐃΔ = -1;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = 1, d = 1; c < b.length + 1; c++) {
          if (b[c - 1][1] !== 29) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = ⲆΔ[Wr[b[c - 1][1]].ⵠⵠ][0].ⲆΔⲆⵠᐃ === Fn ? ⲆΔ[Wr[b[c - 1][1]].ⵠⵠ][0].src : ⲆΔ[Wr[b[c - 1][1]].ⵠⵠ][0].ⲆΔⲆⵠᐃ;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
            d++;
          }
        }
        for (; d < 13; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ⵠᐃⲆΔⵠ.ⲆᐃⵠⵠΔ, zl);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ⵠᐃⲆΔⵠ.ⵠΔⵠᐃᐃⵠⲆ, false);
    for (k = 1; k < 11; k++) {
      document.getElementById("starter" + k).addEventListener("mouseup", this.ⵠᐃⲆΔⵠ.ⲆⲆⲆⲆΔⲆᐃᐃⵠ, Eh);
    }
    this.ⵠᐃᐃⲆ = {
      open: false,
      ⵠΔΔΔⲆ: ᐃᐃᐃⲆ.get("starve_quests") ? ᐃᐃᐃⲆ.get("starve_quests") === "1" ? 1 : 0 : 0,
      button: mf(60, 60, 0, ⲆΔ[755]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      ᐃⲆᐃ: function () {
        this.style.left = Math.floor(zo - 420) + "px";
        this.style.top = Math.floor(Co - 270) + "px";
      },
      ⲆᐃⵠⵠΔ: function () {
        nx.ⵠᐃᐃⲆ.style.display = "none";
        nx.ⵠᐃᐃⲆ.open = Ao;
      },
      select: function () {
        nx.ⵠᐃᐃⲆ.open = !nx.ⵠᐃᐃⲆ.open;
        if (nx.ⵠᐃᐃⲆ.open) {
          nx.ⵠᐃᐃⲆ.style.display = "inline-block";
        } else {
          nx.ⵠᐃᐃⲆ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = 0; a < If.length; a++) {
          this.list[a] = 1;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      ΔΔᐃᐃᐃᐃΔ: 0,
      ᐃⵠⲆⵠⵠᐃᐃ: 0,
      ᐃᐃΔΔⲆᐃⲆᐃⵠ: function () {
        if (nx.ⵠᐃᐃⲆ.open) {
          var a = new Date().getTime();
          if (a - this.ΔΔᐃᐃᐃᐃΔ >= 1000) {
            this.ΔΔᐃᐃᐃᐃΔ = a;
            for (var b = 0; b < If.length; b++) {
              if (nx.ⵠᐃᐃⲆ.list[b]) {
                var c = If[b].time - (a - jx.ᐃᐃΔⵠΔ.ᐃᐃᐃⵠΔ + nx.ⵠᐃᐃⲆ.ᐃⵠⲆⵠⵠᐃᐃ);
                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = 0; b < a.length; b++) {
          if (a[b] != 1) {
            nx.ⵠᐃᐃⲆ.ᐃⲆᐃⲆΔᐃᐃ(b, a[b]);
          }
        }
      },
      ᐃⲆᐃⲆΔᐃᐃ: function (a, b) {
        if (b === 3 && (a === 11 || a === 12)) {
          kx.ᐃΔΔⵠ.ⵠᐃᐃΔΔⲆⲆ(0, 1);
          nx.ᐃⲆⵠΔⲆⲆⲆ();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > 1) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === 0) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById("timeremain_" + a).style.display = "none";
        }
        document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
        document.getElementById("time_finished_" + a).style.display = "inline";
        nx.ⵠᐃᐃⲆ.list[a] = 0;
      },
      modify: function (a, b) {
        nx.ⵠᐃᐃⲆ.ᐃⲆᐃⲆΔᐃᐃ(a, b);
        if (nx.ⵠᐃᐃⲆ.ⵠΔΔΔⲆ) {
          nx.ⵠᐃᐃⲆ.open = _q;
          nx.ⵠᐃᐃⲆ.style.display = "inline-block";
        }
      },
      ⵠⵠΔΔᐃ: function () {
        if (nx.ⵠᐃᐃⲆ.ⵠΔΔΔⲆ) {
          ᐃᐃᐃⲆ.set("starve_quests", "0");
          nx.options.ᐃⲆᐃΔᐃⲆΔ.display = "none";
        } else {
          ᐃᐃᐃⲆ.set("starve_quests", "1");
          nx.options.ᐃⲆᐃΔᐃⲆΔ.display = "inline-block";
        }
        nx.ⵠᐃᐃⲆ.ⵠΔΔΔⲆ = !nx.ⵠᐃᐃⲆ.ⵠΔΔΔⲆ;
      },
      ⵠⲆΔⵠᐃΔⲆⵠᐃ: function () {
        var a = Number(this.id.charAt(13));
        var b = Number(this.id.charAt(14));
        if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
          a = a * 10 + b;
        }
        mx.ΔⲆᐃΔⵠΔⲆⵠⵠ(a);
      }
    };
    if (this.ⵠᐃᐃⲆ.ⵠΔΔΔⲆ) {
      this.options.ᐃⲆᐃΔᐃⲆΔ.display = "inline-block";
    } else {
      this.options.ᐃⲆᐃΔᐃⲆΔ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ⵠᐃᐃⲆ.ⲆᐃⵠⵠΔ, false);
    for (k = 0; k < If.length; k++) {
      document.getElementById("claim_reward_" + k).addEventListener("mouseup", this.ⵠᐃᐃⲆ.ⵠⲆΔⵠᐃΔⲆⵠᐃ, false);
    }
    this.ⵠᐃΔⲆ = {
      open: false,
      button: mf(60, 60, 0, ⲆΔ[708]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ΔᐃᐃΔⵠΔⵠ: [],
        ⲆΔᐃⲆⲆⲆᐃ: 0,
        ᐃⲆᐃ: function () {
          this.style.left = Math.floor(zo - 335) + "px";
          this.style.top = Math.floor(Co - 215) + "px";
        },
        ⲆᐃⵠⵠΔ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          nx.ⵠᐃΔⲆ.open = In;
        },
        ᐃᐃΔⲆⵠΔⲆ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        Ⲇᐃⵠⵠ: function (a) {
          if ((b = this.ΔᐃᐃΔⵠΔⵠ[a]).ⲆⲆΔ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = ⲆΔ[Wr[b[a][0]].ⵠⵠ][0].ⲆΔⲆⵠᐃ === vh ? ⲆΔ[Wr[b[a][0]].ⵠⵠ][0].src : ⲆΔ[Wr[b[a][0]].ⵠⵠ][0].ⲆΔⲆⵠᐃ;
            document.getElementById("numb" + c).innerHTML = "" + b[a][1];
            c++;
          }
          for (; c < 6; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.ⲆΔᐃⲆⲆⲆᐃ = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = 0, c = 0; b < Xs.length; b++) {
            var d = Xs[b];
            if (a === d.ΔⵠΔ) {
              this.ΔᐃᐃΔⵠΔⵠ[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = ⲆΔ[Wr[d.ᐃΔᐃᐃ].ⵠⵠ][0].ⲆΔⲆⵠᐃ === w ? ⲆΔ[Wr[d.ᐃΔᐃᐃ].ⵠⵠ][0].src : ⲆΔ[Wr[d.ᐃΔᐃᐃ].ⵠⵠ][0].ⲆΔⲆⵠᐃ;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      ᐃⵠⵠΔΔⲆⲆ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        ᐃⲆᐃ: function () {
          this.style.left = Math.floor(zo - 285) + "px";
          this.style.top = Math.floor(Co - 170) + "px";
        },
        ⲆᐃⵠⵠΔ: function () {
          document.getElementById("home_craft").style.display = "none";
          nx.ⵠᐃΔⲆ.open = cr;
        }
      },
      ⵠⵠΔΔⲆᐃᐃᐃⲆ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.ⵠᐃΔⲆ.ᐃⵠⵠΔΔⲆⲆ.ⲆᐃⵠⵠΔ, Rh);
    document.getElementById("quitmenu").addEventListener("mouseup", this.ⵠᐃΔⲆ.list.ⲆᐃⵠⵠΔ, ye);
    document.getElementById("backhome").addEventListener("mouseup", this.ⵠᐃΔⲆ.list.ᐃᐃΔⲆⵠΔⲆ, false);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      nx.ⵠᐃΔⲆ.list.select(2);
    }, false);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      nx.ⵠᐃΔⲆ.list.select(1);
    }, false);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      nx.ⵠᐃΔⲆ.list.select(0);
    }, false);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      nx.ⵠᐃΔⲆ.list.select(3);
    }, false);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      nx.ⵠᐃΔⲆ.list.select(4);
    }, $k);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      nx.ⵠᐃΔⲆ.list.select(5);
    }, false);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(0);
    }, false);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(1);
    }, Zj);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(2);
    }, Nh);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(3);
    }, zl);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(4);
    }, false);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(5);
    }, false);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(6);
    }, false);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(7);
    }, qs);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(8);
    }, false);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(9);
    }, false);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(10);
    }, false);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(11);
    }, Dg);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(12);
    }, false);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(13);
    }, false);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(14);
    }, vn);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(15);
    }, false);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(16);
    }, false);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(17);
    }, Rh);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(18);
    }, Ma);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(19);
    }, false);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(20);
    }, Ao);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(21);
    }, false);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(22);
    }, false);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(23);
    }, false);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(24);
    }, C);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(25);
    }, Ph);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(26);
    }, false);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(27);
    }, vn);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(28);
    }, false);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(29);
    }, false);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(30);
    }, Eh);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(31);
    }, Ma);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(32);
    }, false);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(33);
    }, false);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(34);
    }, Ao);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(35);
    }, Rh);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(36);
    }, false);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(37);
    }, T);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(38);
    }, cr);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(39);
    }, false);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(40);
    }, $k);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(41);
    }, Zj);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(42);
    }, false);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(43);
    }, sq);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(44);
    }, false);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(45);
    }, zl);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(46);
    }, Ao);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      nx.ⵠᐃΔⲆ.list.Ⲇᐃⵠⵠ(47);
    }, false);
    this.ᐃΔᐃⵠᐃ = {
      translate: {
        y: 0,
        x: 0
      },
      ⲆⲆΔΔⵠ: {
        x: -1,
        y: -1
      },
      ⲆⲆⵠⲆ: [],
      focus: function (a) {
        var b = this.translate.y + (kx.ᐃΔΔⵠ.ⲆΔⵠᐃⲆ.length > 0 ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.ⲆⲆΔΔⵠ.x = a.x - this.translate.x;
          this.ⲆⲆΔΔⵠ.y = a.y - b;
        }
      }
    };
    this.ᐃᐃᐃᐃ = {
      translate: {
        x: 0,
        y: 0
      },
      ⵠⵠ: ⲆΔ[278],
      Δᐃ: document.createElement("canvas")
    };
    this.ᐃᐃᐃᐃ.Δᐃ.width = this.ᐃᐃᐃᐃ.ⵠⵠ.width;
    this.ᐃᐃᐃᐃ.Δᐃ.height = this.ᐃᐃᐃᐃ.ⵠⵠ.height;
    this.ᐃᐃᐃᐃ.Ⲇ = this.ᐃᐃᐃᐃ.Δᐃ.getContext("2d");
    this.ᐃⵠⲆⵠ = {
      translate: {
        x: 0,
        y: 0
      },
      ⵠⵠ: ⲆΔ[267],
      ⵠⵠⲆⵠ: Cu,
      y: 0
    };
    var n = sa.document.createElement("div");
    this.ᐃⵠΔⵠⲆⵠⵠ = function () {
      ⲆΔᐃⲆᐃ = document.getElementById("team_box");
      ⲆΔᐃⲆᐃ.innerHTML = "";
      ⲆΔᐃⲆᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((n.innerText = jx.ⲆⲆⵠⲆ[kx.ⵠⲆΔⵠᐃ[0]].ᐃΔᐃⲆΔ) && n.innerHTML) + "</div";
      for (var a = 1; a < kx.ⵠⲆΔⵠᐃ.length; a++) {
        ⲆΔᐃⲆᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((n.innerText = jx.ⲆⲆⵠⲆ[kx.ⵠⲆΔⵠᐃ[a]].ᐃΔᐃⲆΔ) && n.innerHTML) + "</div></div>";
      }
      ⲆΔᐃⲆᐃ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      ⲆΔᐃⲆᐃ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", mx.ᐃⵠΔⵠⲆⵠⵠ, false);
    };
    this.ⲆᐃⵠᐃⲆΔΔⵠⲆ = function () {
      ⲆΔᐃⲆᐃ = document.getElementById("team_box");
      ⲆΔᐃⲆᐃ.innerHTML = "";
      ⲆΔᐃⲆᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((n.innerText = jx.ⲆⲆⵠⲆ[kx.ⵠⲆΔⵠᐃ[0]].ᐃΔᐃⲆΔ) && n.innerHTML) + "</div";
      for (var a = 1; kx.ⵠⲆΔⵠᐃ.length > a; a++) {
        ⲆΔᐃⲆᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((n.innerText = jx.ⲆⲆⵠⲆ[kx.ⵠⲆΔⵠᐃ[a]].ᐃΔᐃⲆΔ) && n.innerHTML) + "</div></div>";
      }
      ⲆΔᐃⲆᐃ.innerHTML += "</div>";
      ⲆΔᐃⲆᐃ.style.display = "inline-block";
    };
    this.ᐃⲆⲆΔⲆᐃⵠⵠᐃ = function () {
      ⲆΔᐃⲆᐃ = document.getElementById("team_box");
      ⲆΔᐃⲆᐃ.innerHTML = "";
      ⲆΔᐃⲆᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((n.innerText = jx.ⲆⲆⵠⲆ[kx.ⵠⲆΔⵠᐃ[0]].ᐃΔᐃⲆΔ) && n.innerHTML) + "</div";
      for (var a = 1; a < kx.ⵠⲆΔⵠᐃ.length; a++) {
        ⲆΔᐃⲆᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((n.innerText = jx.ⲆⲆⵠⲆ[kx.ⵠⲆΔⵠᐃ[a]].ᐃΔᐃⲆΔ) && n.innerHTML) + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (kx.ᐃΔᐃⲆⲆ.lock === 0) {
        ⲆΔᐃⲆᐃ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        ⲆΔᐃⲆᐃ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", mx.ⵠⵠΔⲆⲆⵠΔⲆΔ, false);
      ⲆΔᐃⲆᐃ.style.display = "inline-block";
      for (a = 1; a < kx.ⵠⲆΔⵠᐃ.length; a++) {
        switch (a) {
          case 1:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              mx.ᐃⵠΔΔᐃᐃΔ(1);
            }, false);
            break;
          case 2:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              mx.ᐃⵠΔΔᐃᐃΔ(2);
            }, cr);
            break;
          case 3:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              mx.ᐃⵠΔΔᐃᐃΔ(3);
            }, false);
            break;
          case 4:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              mx.ᐃⵠΔΔᐃᐃΔ(4);
            }, false);
            break;
          case 5:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              mx.ᐃⵠΔΔᐃᐃΔ(5);
            }, Dg);
            break;
          case 6:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              mx.ᐃⵠΔΔᐃᐃΔ(6);
            }, false);
            break;
          case 7:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              mx.ᐃⵠΔΔᐃᐃΔ(7);
            }, false);
            break;
          case 8:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              mx.ᐃⵠΔΔᐃᐃΔ(8);
            }, false);
        }
      }
    };
    this.ΔⵠΔⵠⵠ = [];
    this.ΔⵠΔⵠⵠ[2] = {
      button: mf(60, 60, 0, ⲆΔ[556]),
      action: this.ᐃⵠΔⵠⲆⵠⵠ
    };
    this.ΔⵠΔⵠⵠ[3] = {
      button: mf(60, 60, 0, ⲆΔ[556]),
      action: mx.ΔⲆⵠⵠⵠᐃⲆⲆΔ
    };
    this.ΔⵠΔⵠⵠ[0] = {
      button: mf(60, 60, 0, ⲆΔ[557]),
      action: this.ᐃⲆⲆΔⲆᐃⵠⵠᐃ
    };
    this.ΔⵠΔⵠⵠ[1] = {
      button: mf(60, 60, 0, ⲆΔ[561]),
      action: this.ⲆᐃⵠᐃⲆΔΔⵠⲆ
    };
    this.ΔⵠΔⵠⵠ[4] = {
      button: mf(60, 60, 0, ⲆΔ[560]),
      action: function () { }
    };
    this.ⵠᐃⵠⵠⵠ = -1;
    this.ⵠΔⵠⲆⲆᐃΔ = mf(60, 60, 0, ⲆΔ[723]);
    this.Δᐃⵠᐃⵠᐃⵠ = mf(60, 60, 0, ⲆΔ[724]);
    this.ⵠⵠⵠⲆⲆᐃⵠ = mf(60, 60, 0, ⲆΔ[658]);
    this.ᐃΔΔᐃΔᐃᐃ = mf(60, 60, 0, ⲆΔ[657]);
    this.ᐃⲆⵠᐃᐃᐃⲆ = mf(60, 60, 0, ⲆΔ[658]);
    this.ⵠᐃⵠⵠΔⵠⲆ = mf(60, 60, 0, ⲆΔ[316]);
    this.ⵠΔⵠⲆⲆⲆⲆ = mf(60, 60, 0, ⲆΔ[315]);
    this.ⲆᐃⲆⵠΔⲆⲆ = mf(60, 60, 0, ⲆΔ[297]);
    this.ΔⵠΔⲆΔᐃᐃ = mf(60, 60, 0, ⲆΔ[298]);
    this.ΔⲆⲆΔⵠᐃⲆ = mf(60, 60, 0, ⲆΔ[418]);
    this.ᐃΔⵠⲆⲆᐃΔ = mf(60, 60, 0, ⲆΔ[938]);
    this.ᐃⵠⵠᐃⲆⵠⲆ = mf(60, 60, 0, ⲆΔ[412]);
    this.ΔΔⵠΔᐃⲆⵠ = mf(60, 60, 0, ⲆΔ[536]);
    this.ⵠᐃᐃᐃⵠᐃⲆ = mf(60, 60, 0, ⲆΔ[535]);
    this.ᐃΔΔΔⲆΔⲆ = mf(60, 60, 0, ⲆΔ[538]);
    this.ΔⲆΔⵠⵠ = mf(120, 120, 0, ⲆΔ[149]);
    this.ΔⲆΔⵠⵠ.info.translate.x = 10;
    this.ΔⲆΔⵠⵠ.info.translate.y = 10;
    this.Ⲇⵠⵠ = [];
    this.Ⲇⵠⵠ[0] = mf(68, 68, 0, ⲆΔ[340], 3);
    this.Ⲇⵠⵠ[0].id = 0;
    this.Ⲇⵠⵠ[1] = mf(68, 68, 0, ⲆΔ[341], 3);
    this.Ⲇⵠⵠ[1].id = 1;
    this.Ⲇⵠⵠ[108] = mf(68, 68, 0, ⲆΔ[342], 3);
    this.Ⲇⵠⵠ[108].id = 108;
    this.Ⲇⵠⵠ[109] = mf(68, 68, 0, ⲆΔ[343], 3);
    this.Ⲇⵠⵠ[109].id = 109;
    this.Ⲇⵠⵠ[110] = mf(68, 68, 0, ⲆΔ[269], 3);
    this.Ⲇⵠⵠ[110].id = 110;
    this.Ⲇⵠⵠ[233] = mf(68, 68, 0, ⲆΔ[1155], 3);
    this.Ⲇⵠⵠ[233].id = 233;
    this.Ⲇⵠⵠ[111] = mf(68, 68, 0, ⲆΔ[270], 3);
    this.Ⲇⵠⵠ[111].id = 111;
    this.Ⲇⵠⵠ[112] = mf(68, 68, 0, ⲆΔ[271], 3);
    this.Ⲇⵠⵠ[112].id = 112;
    this.Ⲇⵠⵠ[3] = mf(68, 68, 0, ⲆΔ[272], 3);
    this.Ⲇⵠⵠ[3].id = 3;
    this.Ⲇⵠⵠ[4] = mf(68, 68, 0, ⲆΔ[344], 3);
    this.Ⲇⵠⵠ[4].id = 4;
    this.Ⲇⵠⵠ[5] = mf(68, 68, 0, ⲆΔ[345], 3);
    this.Ⲇⵠⵠ[5].id = 5;
    this.Ⲇⵠⵠ[57] = mf(68, 68, 0, ⲆΔ[831], 3);
    this.Ⲇⵠⵠ[57].id = 57;
    this.Ⲇⵠⵠ[6] = mf(68, 68, 0, ⲆΔ[346], 3);
    this.Ⲇⵠⵠ[6].id = 6;
    this.Ⲇⵠⵠ[113] = mf(68, 68, 0, ⲆΔ[273], 3);
    this.Ⲇⵠⵠ[113].id = 113;
    this.Ⲇⵠⵠ[114] = mf(68, 68, 0, ⲆΔ[358], 3);
    this.Ⲇⵠⵠ[114].id = 114;
    this.Ⲇⵠⵠ[115] = mf(68, 68, 0, ⲆΔ[348], 3);
    this.Ⲇⵠⵠ[115].id = 115;
    this.Ⲇⵠⵠ[162] = mf(68, 68, 0, ⲆΔ[349], 3);
    this.Ⲇⵠⵠ[162].id = 162;
    this.Ⲇⵠⵠ[160] = mf(68, 68, 0, ⲆΔ[350], 3);
    this.Ⲇⵠⵠ[160].id = 160;
    this.Ⲇⵠⵠ[8] = mf(68, 68, 0, ⲆΔ[274], 3);
    this.Ⲇⵠⵠ[8].id = 8;
    this.Ⲇⵠⵠ[117] = mf(68, 68, 0, ⲆΔ[351], 3);
    this.Ⲇⵠⵠ[117].id = 117;
    this.Ⲇⵠⵠ[116] = mf(68, 68, 0, ⲆΔ[275], 3);
    this.Ⲇⵠⵠ[116].id = 116;
    this.Ⲇⵠⵠ[118] = mf(68, 68, 0, ⲆΔ[276], 3);
    this.Ⲇⵠⵠ[118].id = 118;
    this.Ⲇⵠⵠ[195] = mf(68, 68, 0, ⲆΔ[352], 3);
    this.Ⲇⵠⵠ[195].id = 195;
    this.Ⲇⵠⵠ[161] = mf(68, 68, 0, ⲆΔ[353], 3);
    this.Ⲇⵠⵠ[161].id = 161;
    this.Ⲇⵠⵠ[163] = mf(68, 68, 0, ⲆΔ[354], 3);
    this.Ⲇⵠⵠ[163].id = 163;
    this.Ⲇⵠⵠ[164] = mf(68, 68, 0, ⲆΔ[355], 3);
    this.Ⲇⵠⵠ[164].id = 164;
    this.Ⲇⵠⵠ[165] = mf(68, 68, 0, ⲆΔ[356], 3);
    this.Ⲇⵠⵠ[165].id = 165;
    this.Ⲇⵠⵠ[166] = mf(68, 68, 0, ⲆΔ[357], 3);
    this.Ⲇⵠⵠ[166].id = 166;
    this.Ⲇⵠⵠ[167] = mf(68, 68, 0, ⲆΔ[359], 3);
    this.Ⲇⵠⵠ[167].id = 167;
    this.Ⲇⵠⵠ[168] = mf(68, 68, 0, ⲆΔ[382], 3);
    this.Ⲇⵠⵠ[168].id = 168;
    this.Ⲇⵠⵠ[169] = mf(68, 68, 0, ⲆΔ[383], 3);
    this.Ⲇⵠⵠ[169].id = 169;
    this.Ⲇⵠⵠ[170] = mf(68, 68, 0, ⲆΔ[384], 3);
    this.Ⲇⵠⵠ[170].id = 170;
    this.Ⲇⵠⵠ[2] = mf(68, 68, 0, ⲆΔ[386], 3);
    this.Ⲇⵠⵠ[2].id = 2;
    this.Ⲇⵠⵠ[237] = mf(68, 68, 0, ⲆΔ[1163], 3);
    this.Ⲇⵠⵠ[237].id = 237;
    this.Ⲇⵠⵠ[174] = mf(68, 68, 0, ⲆΔ[394], 3);
    this.Ⲇⵠⵠ[174].id = 174;
    this.Ⲇⵠⵠ[222] = mf(68, 68, 0, ⲆΔ[1036], 3);
    this.Ⲇⵠⵠ[222].id = 222;
    this.Ⲇⵠⵠ[231] = mf(68, 68, 0, ⲆΔ[1038], 3);
    this.Ⲇⵠⵠ[231].id = 231;
    this.Ⲇⵠⵠ[232] = mf(68, 68, 0, ⲆΔ[1040], 3);
    this.Ⲇⵠⵠ[232].id = 232;
    this.Ⲇⵠⵠ[234] = mf(68, 68, 0, ⲆΔ[1157], 3);
    this.Ⲇⵠⵠ[234].id = 234;
    this.Ⲇⵠⵠ[10] = mf(68, 68, 0, ⲆΔ[387], 3);
    this.Ⲇⵠⵠ[10].id = 10;
    this.Ⲇⵠⵠ[171] = mf(68, 68, 0, ⲆΔ[388], 3);
    this.Ⲇⵠⵠ[171].id = 171;
    this.Ⲇⵠⵠ[172] = mf(68, 68, 0, ⲆΔ[389], 3);
    this.Ⲇⵠⵠ[172].id = 172;
    this.Ⲇⵠⵠ[173] = mf(68, 68, 0, ⲆΔ[390], 3);
    this.Ⲇⵠⵠ[173].id = 173;
    this.Ⲇⵠⵠ[11] = mf(68, 68, 0, ⲆΔ[391], 3);
    this.Ⲇⵠⵠ[11].id = 11;
    this.Ⲇⵠⵠ[12] = mf(68, 68, 0, ⲆΔ[403], 3);
    this.Ⲇⵠⵠ[12].id = 12;
    this.Ⲇⵠⵠ[13] = mf(68, 68, 0, ⲆΔ[397], 3);
    this.Ⲇⵠⵠ[13].id = 13;
    this.Ⲇⵠⵠ[14] = mf(68, 68, 0, ⲆΔ[400], 3);
    this.Ⲇⵠⵠ[14].id = 14;
    this.Ⲇⵠⵠ[15] = mf(68, 68, 0, ⲆΔ[406], 3);
    this.Ⲇⵠⵠ[15].id = 15;
    this.Ⲇⵠⵠ[16] = mf(68, 68, 0, ⲆΔ[875], 3);
    this.Ⲇⵠⵠ[16].id = 16;
    this.Ⲇⵠⵠ[119] = mf(68, 68, 0, ⲆΔ[410], 3);
    this.Ⲇⵠⵠ[119].id = 119;
    this.Ⲇⵠⵠ[23] = mf(68, 68, 0, ⲆΔ[422], 3);
    this.Ⲇⵠⵠ[23].id = 23;
    this.Ⲇⵠⵠ[24] = mf(68, 68, 0, ⲆΔ[425], 3);
    this.Ⲇⵠⵠ[24].id = 24;
    this.Ⲇⵠⵠ[87] = mf(68, 68, 0, ⲆΔ[1229], 3);
    this.Ⲇⵠⵠ[87].id = 87;
    this.Ⲇⵠⵠ[88] = mf(68, 68, 0, ⲆΔ[1232], 3);
    this.Ⲇⵠⵠ[88].id = 88;
    this.Ⲇⵠⵠ[80] = mf(68, 68, 0, ⲆΔ[1139], 3);
    this.Ⲇⵠⵠ[80].id = 80;
    this.Ⲇⵠⵠ[81] = mf(68, 68, 0, ⲆΔ[1142], 3);
    this.Ⲇⵠⵠ[81].id = 81;
    this.Ⲇⵠⵠ[101] = mf(68, 68, 0, ⲆΔ[1167], 3);
    this.Ⲇⵠⵠ[101].id = 101;
    this.Ⲇⵠⵠ[64] = mf(68, 68, 0, ⲆΔ[571], 3);
    this.Ⲇⵠⵠ[64].id = 64;
    this.Ⲇⵠⵠ[71] = mf(68, 68, 0, ⲆΔ[1240], 3);
    this.Ⲇⵠⵠ[71].id = 71;
    this.Ⲇⵠⵠ[102] = mf(68, 68, 0, ⲆΔ[1170], 3);
    this.Ⲇⵠⵠ[102].id = 102;
    this.Ⲇⵠⵠ[65] = mf(68, 68, 0, ⲆΔ[574], 3);
    this.Ⲇⵠⵠ[65].id = 65;
    this.Ⲇⵠⵠ[72] = mf(68, 68, 0, ⲆΔ[1243], 3);
    this.Ⲇⵠⵠ[72].id = 72;
    this.Ⲇⵠⵠ[103] = mf(68, 68, 0, ⲆΔ[1173], 3);
    this.Ⲇⵠⵠ[103].id = 103;
    this.Ⲇⵠⵠ[66] = mf(68, 68, 0, ⲆΔ[577], 3);
    this.Ⲇⵠⵠ[66].id = 66;
    this.Ⲇⵠⵠ[73] = mf(68, 68, 0, ⲆΔ[1246], 3);
    this.Ⲇⵠⵠ[73].id = 73;
    this.Ⲇⵠⵠ[104] = mf(68, 68, 0, ⲆΔ[1176], 3);
    this.Ⲇⵠⵠ[104].id = 104;
    this.Ⲇⵠⵠ[67] = mf(68, 68, 0, ⲆΔ[580], 3);
    this.Ⲇⵠⵠ[67].id = 67;
    this.Ⲇⵠⵠ[74] = mf(68, 68, 0, ⲆΔ[1249], 3);
    this.Ⲇⵠⵠ[74].id = 74;
    this.Ⲇⵠⵠ[105] = mf(68, 68, 0, ⲆΔ[1179], 3);
    this.Ⲇⵠⵠ[105].id = 105;
    this.Ⲇⵠⵠ[68] = mf(68, 68, 0, ⲆΔ[583], 3);
    this.Ⲇⵠⵠ[68].id = 68;
    this.Ⲇⵠⵠ[75] = mf(68, 68, 0, ⲆΔ[1252], 3);
    this.Ⲇⵠⵠ[75].id = 75;
    this.Ⲇⵠⵠ[106] = mf(68, 68, 0, ⲆΔ[1182], 3);
    this.Ⲇⵠⵠ[106].id = 106;
    this.Ⲇⵠⵠ[69] = mf(68, 68, 0, ⲆΔ[586], 3);
    this.Ⲇⵠⵠ[69].id = 69;
    this.Ⲇⵠⵠ[76] = mf(68, 68, 0, ⲆΔ[1255], 3);
    this.Ⲇⵠⵠ[76].id = 76;
    this.Ⲇⵠⵠ[107] = mf(68, 68, 0, ⲆΔ[1185], 3);
    this.Ⲇⵠⵠ[107].id = 107;
    this.Ⲇⵠⵠ[70] = mf(68, 68, 0, ⲆΔ[589], 3);
    this.Ⲇⵠⵠ[70].id = 70;
    this.Ⲇⵠⵠ[94] = mf(68, 68, 0, ⲆΔ[1258], 3);
    this.Ⲇⵠⵠ[94].id = 94;
    this.Ⲇⵠⵠ[95] = mf(68, 68, 0, ⲆΔ[1261], 3);
    this.Ⲇⵠⵠ[95].id = 95;
    this.Ⲇⵠⵠ[96] = mf(68, 68, 0, ⲆΔ[1264], 3);
    this.Ⲇⵠⵠ[96].id = 96;
    this.Ⲇⵠⵠ[97] = mf(68, 68, 0, ⲆΔ[1267], 3);
    this.Ⲇⵠⵠ[97].id = 97;
    this.Ⲇⵠⵠ[98] = mf(68, 68, 0, ⲆΔ[1270], 3);
    this.Ⲇⵠⵠ[98].id = 98;
    this.Ⲇⵠⵠ[99] = mf(68, 68, 0, ⲆΔ[1273], 3);
    this.Ⲇⵠⵠ[99].id = 99;
    this.Ⲇⵠⵠ[58] = mf(68, 68, 0, ⲆΔ[828], 3);
    this.Ⲇⵠⵠ[58].id = 58;
    this.Ⲇⵠⵠ[25] = mf(68, 68, 0, ⲆΔ[431], 3);
    this.Ⲇⵠⵠ[25].id = 25;
    this.Ⲇⵠⵠ[26] = mf(68, 68, 0, ⲆΔ[434], 3);
    this.Ⲇⵠⵠ[26].id = 26;
    this.Ⲇⵠⵠ[27] = mf(68, 68, 0, ⲆΔ[437], 3);
    this.Ⲇⵠⵠ[27].id = 27;
    this.Ⲇⵠⵠ[28] = mf(68, 68, 0, ⲆΔ[440], 3);
    this.Ⲇⵠⵠ[28].id = 28;
    this.Ⲇⵠⵠ[120] = mf(68, 68, 0, ⲆΔ[443], 3);
    this.Ⲇⵠⵠ[120].id = 120;
    this.Ⲇⵠⵠ[29] = mf(68, 68, 0, ⲆΔ[385], 3);
    this.Ⲇⵠⵠ[29].id = 29;
    this.Ⲇⵠⵠ[121] = mf(68, 68, 0, ⲆΔ[446], 3);
    this.Ⲇⵠⵠ[121].id = 121;
    this.Ⲇⵠⵠ[30] = mf(68, 68, 0, ⲆΔ[457], 3);
    this.Ⲇⵠⵠ[30].id = 30;
    this.Ⲇⵠⵠ[9] = mf(68, 68, 0, ⲆΔ[862], 3);
    this.Ⲇⵠⵠ[9].id = 9;
    this.Ⲇⵠⵠ[31] = mf(68, 68, 0, ⲆΔ[459], 3);
    this.Ⲇⵠⵠ[31].id = 31;
    this.Ⲇⵠⵠ[32] = mf(68, 68, 0, ⲆΔ[1018], 3);
    this.Ⲇⵠⵠ[32].id = 32;
    this.Ⲇⵠⵠ[33] = mf(68, 68, 0, ⲆΔ[474], 3);
    this.Ⲇⵠⵠ[33].id = 33;
    this.Ⲇⵠⵠ[35] = mf(68, 68, 0, ⲆΔ[479], 3);
    this.Ⲇⵠⵠ[35].id = 35;
    this.Ⲇⵠⵠ[36] = mf(68, 68, 0, ⲆΔ[482], 3);
    this.Ⲇⵠⵠ[36].id = 36;
    this.Ⲇⵠⵠ[37] = mf(68, 68, 0, ⲆΔ[485], 3);
    this.Ⲇⵠⵠ[37].id = 37;
    this.Ⲇⵠⵠ[38] = mf(68, 68, 0, ⲆΔ[488], 3);
    this.Ⲇⵠⵠ[38].id = 38;
    this.Ⲇⵠⵠ[39] = mf(68, 68, 0, ⲆΔ[491], 3);
    this.Ⲇⵠⵠ[39].id = 39;
    this.Ⲇⵠⵠ[122] = mf(68, 68, 0, ⲆΔ[494], 3);
    this.Ⲇⵠⵠ[122].id = 122;
    this.Ⲇⵠⵠ[123] = mf(68, 68, 0, ⲆΔ[497], 3);
    this.Ⲇⵠⵠ[123].id = 123;
    this.Ⲇⵠⵠ[124] = mf(68, 68, 0, ⲆΔ[501], 3);
    this.Ⲇⵠⵠ[124].id = 124;
    this.Ⲇⵠⵠ[40] = mf(68, 68, 0, ⲆΔ[504], 3);
    this.Ⲇⵠⵠ[40].id = 40;
    this.Ⲇⵠⵠ[146] = mf(68, 68, 0, ⲆΔ[506], 3);
    this.Ⲇⵠⵠ[146].id = 146;
    this.Ⲇⵠⵠ[240] = mf(68, 68, 0, ⲆΔ[1234], 3);
    this.Ⲇⵠⵠ[240].id = 240;
    this.Ⲇⵠⵠ[147] = mf(68, 68, 0, ⲆΔ[514], 3);
    this.Ⲇⵠⵠ[147].id = 147;
    this.Ⲇⵠⵠ[148] = mf(68, 68, 0, ⲆΔ[520], 3);
    this.Ⲇⵠⵠ[148].id = 148;
    this.Ⲇⵠⵠ[149] = mf(68, 68, 0, ⲆΔ[522], 3);
    this.Ⲇⵠⵠ[149].id = 149;
    this.Ⲇⵠⵠ[150] = mf(68, 68, 0, ⲆΔ[524], 3);
    this.Ⲇⵠⵠ[150].id = 150;
    this.Ⲇⵠⵠ[151] = mf(68, 68, 0, ⲆΔ[531], 3);
    this.Ⲇⵠⵠ[151].id = 151;
    this.Ⲇⵠⵠ[158] = mf(68, 68, 0, ⲆΔ[534], 3);
    this.Ⲇⵠⵠ[158].id = 158;
    this.Ⲇⵠⵠ[159] = mf(68, 68, 0, ⲆΔ[554], 3);
    this.Ⲇⵠⵠ[159].id = 159;
    this.Ⲇⵠⵠ[43] = mf(68, 68, 0, ⲆΔ[543], 3);
    this.Ⲇⵠⵠ[43].id = 43;
    this.Ⲇⵠⵠ[45] = mf(68, 68, 0, ⲆΔ[552], 3);
    this.Ⲇⵠⵠ[45].id = 45;
    this.Ⲇⵠⵠ[125] = mf(68, 68, 0, ⲆΔ[606], 3);
    this.Ⲇⵠⵠ[125].id = 125;
    this.Ⲇⵠⵠ[221] = mf(68, 68, 0, ⲆΔ[1237], 3);
    this.Ⲇⵠⵠ[221].id = 221;
    this.Ⲇⵠⵠ[223] = mf(68, 68, 0, ⲆΔ[1029], 3);
    this.Ⲇⵠⵠ[223].id = 223;
    this.Ⲇⵠⵠ[224] = mf(68, 68, 0, ⲆΔ[1032], 3);
    this.Ⲇⵠⵠ[224].id = 224;
    this.Ⲇⵠⵠ[230] = mf(68, 68, 0, ⲆΔ[1118], 3);
    this.Ⲇⵠⵠ[230].id = 230;
    this.Ⲇⵠⵠ[89] = mf(68, 68, 0, ⲆΔ[1047], 3);
    this.Ⲇⵠⵠ[89].id = 89;
    this.Ⲇⵠⵠ[225] = mf(68, 68, 0, ⲆΔ[1050], 3);
    this.Ⲇⵠⵠ[225].id = 225;
    this.Ⲇⵠⵠ[227] = mf(68, 68, 0, ⲆΔ[1081], 3);
    this.Ⲇⵠⵠ[227].id = 227;
    this.Ⲇⵠⵠ[239] = mf(68, 68, 0, ⲆΔ[1225], 3);
    this.Ⲇⵠⵠ[239].id = 239;
    this.Ⲇⵠⵠ[228] = mf(68, 68, 0, ⲆΔ[1096], 3);
    this.Ⲇⵠⵠ[228].id = 228;
    this.Ⲇⵠⵠ[229] = mf(68, 68, 0, ⲆΔ[1111], 3);
    this.Ⲇⵠⵠ[229].id = 229;
    this.Ⲇⵠⵠ[226] = mf(68, 68, 0, ⲆΔ[1190], 3);
    this.Ⲇⵠⵠ[226].id = 226;
    this.Ⲇⵠⵠ[126] = mf(68, 68, 0, ⲆΔ[610], 3);
    this.Ⲇⵠⵠ[126].id = 126;
    this.Ⲇⵠⵠ[127] = mf(68, 68, 0, ⲆΔ[615], 3);
    this.Ⲇⵠⵠ[127].id = 127;
    this.Ⲇⵠⵠ[128] = mf(68, 68, 0, ⲆΔ[614], 3);
    this.Ⲇⵠⵠ[128].id = 128;
    this.Ⲇⵠⵠ[46] = mf(68, 68, 0, ⲆΔ[617], 3);
    this.Ⲇⵠⵠ[46].id = 46;
    this.Ⲇⵠⵠ[50] = mf(68, 68, 0, ⲆΔ[701], 3);
    this.Ⲇⵠⵠ[50].id = 50;
    this.Ⲇⵠⵠ[51] = mf(68, 68, 0, ⲆΔ[703], 3);
    this.Ⲇⵠⵠ[51].id = 51;
    this.Ⲇⵠⵠ[52] = mf(68, 68, 0, ⲆΔ[707], 3);
    this.Ⲇⵠⵠ[52].id = 52;
    this.Ⲇⵠⵠ[55] = mf(68, 68, 0, ⲆΔ[710], 3);
    this.Ⲇⵠⵠ[55].id = 55;
    this.Ⲇⵠⵠ[129] = mf(68, 68, 0, ⲆΔ[625], 3);
    this.Ⲇⵠⵠ[129].id = 129;
    this.Ⲇⵠⵠ[130] = mf(68, 68, 0, ⲆΔ[628], 3);
    this.Ⲇⵠⵠ[130].id = 130;
    this.Ⲇⵠⵠ[131] = mf(68, 68, 0, ⲆΔ[630], 3);
    this.Ⲇⵠⵠ[131].id = 131;
    this.Ⲇⵠⵠ[132] = mf(68, 68, 0, ⲆΔ[633], 3);
    this.Ⲇⵠⵠ[132].id = 132;
    this.Ⲇⵠⵠ[133] = mf(68, 68, 0, ⲆΔ[636], 3);
    this.Ⲇⵠⵠ[133].id = 133;
    this.Ⲇⵠⵠ[134] = mf(68, 68, 0, ⲆΔ[640], 3);
    this.Ⲇⵠⵠ[134].id = 134;
    this.Ⲇⵠⵠ[135] = mf(68, 68, 0, ⲆΔ[645], 3);
    this.Ⲇⵠⵠ[135].id = 135;
    this.Ⲇⵠⵠ[47] = mf(68, 68, 0, ⲆΔ[648], 3);
    this.Ⲇⵠⵠ[47].id = 47;
    this.Ⲇⵠⵠ[48] = mf(68, 68, 0, ⲆΔ[651], 3);
    this.Ⲇⵠⵠ[48].id = 48;
    this.Ⲇⵠⵠ[49] = mf(68, 68, 0, ⲆΔ[653], 3);
    this.Ⲇⵠⵠ[49].id = 49;
    this.Ⲇⵠⵠ[136] = mf(68, 68, 0, ⲆΔ[661], 3);
    this.Ⲇⵠⵠ[136].id = 136;
    this.Ⲇⵠⵠ[143] = mf(68, 68, 0, ⲆΔ[689], 3);
    this.Ⲇⵠⵠ[143].id = 143;
    this.Ⲇⵠⵠ[137] = mf(68, 68, 0, ⲆΔ[663], 3);
    this.Ⲇⵠⵠ[137].id = 137;
    this.Ⲇⵠⵠ[138] = mf(68, 68, 0, ⲆΔ[665], 3);
    this.Ⲇⵠⵠ[138].id = 138;
    this.Ⲇⵠⵠ[139] = mf(68, 68, 0, ⲆΔ[675], 3);
    this.Ⲇⵠⵠ[139].id = 139;
    this.Ⲇⵠⵠ[140] = mf(68, 68, 0, ⲆΔ[682], 3);
    this.Ⲇⵠⵠ[140].id = 140;
    this.Ⲇⵠⵠ[141] = mf(68, 68, 0, ⲆΔ[683], 3);
    this.Ⲇⵠⵠ[141].id = 141;
    this.Ⲇⵠⵠ[142] = mf(68, 68, 0, ⲆΔ[686], 3);
    this.Ⲇⵠⵠ[142].id = 142;
    this.Ⲇⵠⵠ[144] = mf(68, 68, 0, ⲆΔ[719], 3);
    this.Ⲇⵠⵠ[144].id = 144;
    this.Ⲇⵠⵠ[145] = mf(68, 68, 0, ⲆΔ[731], 3);
    this.Ⲇⵠⵠ[145].id = 145;
    this.Ⲇⵠⵠ[59] = mf(68, 68, 0, ⲆΔ[733], 3);
    this.Ⲇⵠⵠ[59].id = 59;
    this.Ⲇⵠⵠ[62] = mf(68, 68, 0, ⲆΔ[565], 3);
    this.Ⲇⵠⵠ[62].id = 62;
    this.Ⲇⵠⵠ[185] = mf(68, 68, 0, ⲆΔ[590], 3);
    this.Ⲇⵠⵠ[185].id = 185;
    this.Ⲇⵠⵠ[184] = mf(68, 68, 0, ⲆΔ[752], 3);
    this.Ⲇⵠⵠ[184].id = 184;
    this.Ⲇⵠⵠ[187] = mf(68, 68, 0, ⲆΔ[591], 3);
    this.Ⲇⵠⵠ[187].id = 187;
    this.Ⲇⵠⵠ[186] = mf(68, 68, 0, ⲆΔ[754], 3);
    this.Ⲇⵠⵠ[186].id = 186;
    this.Ⲇⵠⵠ[77] = mf(68, 68, 0, ⲆΔ[757], 3);
    this.Ⲇⵠⵠ[77].id = 77;
    this.Ⲇⵠⵠ[175] = mf(68, 68, 0, ⲆΔ[759], 3);
    this.Ⲇⵠⵠ[175].id = 175;
    this.Ⲇⵠⵠ[176] = mf(68, 68, 0, ⲆΔ[763], 3);
    this.Ⲇⵠⵠ[176].id = 176;
    this.Ⲇⵠⵠ[78] = mf(68, 68, 0, ⲆΔ[761], 3);
    this.Ⲇⵠⵠ[78].id = 78;
    this.Ⲇⵠⵠ[177] = mf(68, 68, 0, ⲆΔ[766], 3);
    this.Ⲇⵠⵠ[177].id = 177;
    this.Ⲇⵠⵠ[79] = mf(68, 68, 0, ⲆΔ[765], 3);
    this.Ⲇⵠⵠ[79].id = 79;
    this.Ⲇⵠⵠ[83] = mf(68, 68, 0, ⲆΔ[769], 3);
    this.Ⲇⵠⵠ[83].id = 83;
    this.Ⲇⵠⵠ[84] = mf(68, 68, 0, ⲆΔ[773], 3);
    this.Ⲇⵠⵠ[84].id = 84;
    this.Ⲇⵠⵠ[178] = mf(68, 68, 0, ⲆΔ[774], 3);
    this.Ⲇⵠⵠ[178].id = 178;
    this.Ⲇⵠⵠ[179] = mf(68, 68, 0, ⲆΔ[775], 3);
    this.Ⲇⵠⵠ[179].id = 179;
    this.Ⲇⵠⵠ[86] = mf(68, 68, 0, ⲆΔ[778], 3);
    this.Ⲇⵠⵠ[86].id = 86;
    this.Ⲇⵠⵠ[85] = mf(68, 68, 0, ⲆΔ[781], 3);
    this.Ⲇⵠⵠ[85].id = 85;
    this.Ⲇⵠⵠ[180] = mf(68, 68, 0, ⲆΔ[786], 3);
    this.Ⲇⵠⵠ[180].id = 180;
    this.Ⲇⵠⵠ[181] = mf(68, 68, 0, ⲆΔ[787], 3);
    this.Ⲇⵠⵠ[181].id = 181;
    this.Ⲇⵠⵠ[182] = mf(68, 68, 0, ⲆΔ[790], 3);
    this.Ⲇⵠⵠ[182].id = 182;
    this.Ⲇⵠⵠ[183] = mf(68, 68, 0, ⲆΔ[801], 3);
    this.Ⲇⵠⵠ[183].id = 183;
    this.Ⲇⵠⵠ[188] = mf(68, 68, 0, ⲆΔ[810], 3);
    this.Ⲇⵠⵠ[188].id = 188;
    this.Ⲇⵠⵠ[189] = mf(68, 68, 0, ⲆΔ[815], 3);
    this.Ⲇⵠⵠ[189].id = 189;
    this.Ⲇⵠⵠ[190] = mf(68, 68, 0, ⲆΔ[844], 3);
    this.Ⲇⵠⵠ[190].id = 190;
    this.Ⲇⵠⵠ[191] = mf(68, 68, 0, ⲆΔ[836], 3);
    this.Ⲇⵠⵠ[191].id = 191;
    this.Ⲇⵠⵠ[192] = mf(68, 68, 0, ⲆΔ[841], 3);
    this.Ⲇⵠⵠ[192].id = 192;
    this.Ⲇⵠⵠ[193] = mf(68, 68, 0, ⲆΔ[847], 3);
    this.Ⲇⵠⵠ[193].id = 193;
    this.Ⲇⵠⵠ[194] = mf(68, 68, 0, ⲆΔ[851], 3);
    this.Ⲇⵠⵠ[194].id = 194;
    this.Ⲇⵠⵠ[206] = mf(68, 68, 0, ⲆΔ[961], 3);
    this.Ⲇⵠⵠ[206].id = 206;
    this.Ⲇⵠⵠ[207] = mf(68, 68, 0, ⲆΔ[974], 3);
    this.Ⲇⵠⵠ[207].id = 207;
    this.Ⲇⵠⵠ[204] = mf(68, 68, 0, ⲆΔ[951], 3);
    this.Ⲇⵠⵠ[204].id = 204;
    this.Ⲇⵠⵠ[205] = mf(68, 68, 0, ⲆΔ[956], 3);
    this.Ⲇⵠⵠ[205].id = 205;
    this.Ⲇⵠⵠ[208] = mf(68, 68, 0, ⲆΔ[968], 3);
    this.Ⲇⵠⵠ[208].id = 208;
    this.Ⲇⵠⵠ[209] = mf(68, 68, 0, ⲆΔ[973], 3);
    this.Ⲇⵠⵠ[209].id = 209;
    this.Ⲇⵠⵠ[210] = mf(68, 68, 0, ⲆΔ[983], 3);
    this.Ⲇⵠⵠ[210].id = 210;
    this.Ⲇⵠⵠ[211] = mf(68, 68, 0, ⲆΔ[988], 3);
    this.Ⲇⵠⵠ[211].id = 211;
    this.Ⲇⵠⵠ[41] = mf(68, 68, 0, ⲆΔ[881], 3);
    this.Ⲇⵠⵠ[41].id = 41;
    this.Ⲇⵠⵠ[42] = mf(68, 68, 0, ⲆΔ[883], 3);
    this.Ⲇⵠⵠ[42].id = 42;
    this.Ⲇⵠⵠ[12] = mf(68, 68, 0, ⲆΔ[403], 3);
    this.Ⲇⵠⵠ[12].id = 12;
    this.Ⲇⵠⵠ[16] = mf(68, 68, 0, ⲆΔ[875], 3);
    this.Ⲇⵠⵠ[16].id = 16;
    this.Ⲇⵠⵠ[196] = mf(68, 68, 0, ⲆΔ[898], 3);
    this.Ⲇⵠⵠ[196].id = 196;
    this.Ⲇⵠⵠ[18] = mf(68, 68, 0, ⲆΔ[899], 3);
    this.Ⲇⵠⵠ[18].id = 18;
    this.Ⲇⵠⵠ[197] = mf(68, 68, 0, ⲆΔ[906], 3);
    this.Ⲇⵠⵠ[197].id = 197;
    this.Ⲇⵠⵠ[198] = mf(68, 68, 0, ⲆΔ[908], 3);
    this.Ⲇⵠⵠ[198].id = 198;
    this.Ⲇⵠⵠ[61] = mf(68, 68, 0, ⲆΔ[911], 3);
    this.Ⲇⵠⵠ[61].id = 61;
    this.Ⲇⵠⵠ[201] = mf(68, 68, 0, ⲆΔ[871], 3);
    this.Ⲇⵠⵠ[201].id = 201;
    this.Ⲇⵠⵠ[199] = mf(68, 68, 0, ⲆΔ[863], 3);
    this.Ⲇⵠⵠ[199].id = 199;
    this.Ⲇⵠⵠ[200] = mf(68, 68, 0, ⲆΔ[868], 3);
    this.Ⲇⵠⵠ[200].id = 200;
    this.ⵠⲆⲆΔⲆ = [];
    for (k = 0; k < 250; k++) {
      this.ⵠⲆⲆΔⲆ[k] = mf(0, 0, 0, ⲆΔ[366]);
    }
    this.ⲆΔΔ = [];
    this.ⲆΔΔ[0] = mf(60, 60, 0, ⲆΔ[261], 3);
    this.ⲆΔΔ[0].id = 0;
    this.ⲆΔΔ[1] = mf(60, 60, 0, ⲆΔ[312], 3);
    this.ⲆΔΔ[1].id = 1;
    this.ⲆΔΔ[108] = mf(60, 60, 0, ⲆΔ[315], 3);
    this.ⲆΔΔ[108].id = 108;
    this.ⲆΔΔ[108].info.ⵠⵠ[2] = this.ⲆΔΔ[108].info.ⵠⵠ[0];
    this.ⲆΔΔ[109] = mf(60, 60, 0, ⲆΔ[316], 3);
    this.ⲆΔΔ[109].id = 109;
    this.ⲆΔΔ[109].info.ⵠⵠ[2] = this.ⲆΔΔ[109].info.ⵠⵠ[0];
    this.ⲆΔΔ[110] = mf(60, 60, 0, ⲆΔ[277], 3);
    this.ⲆΔΔ[110].id = 110;
    this.ⲆΔΔ[233] = mf(60, 60, 0, ⲆΔ[1154], 3);
    this.ⲆΔΔ[233].id = 233;
    this.ⲆΔΔ[111] = mf(60, 60, 0, ⲆΔ[297], 3);
    this.ⲆΔΔ[111].id = 111;
    this.ⲆΔΔ[111].info.ⵠⵠ[2] = this.ⲆΔΔ[111].info.ⵠⵠ[0];
    this.ⲆΔΔ[112] = mf(60, 60, 0, ⲆΔ[298], 3);
    this.ⲆΔΔ[112].id = 112;
    this.ⲆΔΔ[112].info.ⵠⵠ[2] = this.ⲆΔΔ[112].info.ⵠⵠ[0];
    this.ⲆΔΔ[3] = mf(60, 60, 0, ⲆΔ[258], 3);
    this.ⲆΔΔ[3].id = 3;
    this.ⲆΔΔ[4] = mf(60, 60, 0, ⲆΔ[296], 3);
    this.ⲆΔΔ[4].id = 4;
    this.ⲆΔΔ[5] = mf(60, 60, 0, ⲆΔ[292], 3);
    this.ⲆΔΔ[5].id = 5;
    this.ⲆΔΔ[57] = mf(60, 60, 0, ⲆΔ[829], 3);
    this.ⲆΔΔ[57].id = 57;
    this.ⲆΔΔ[6] = mf(60, 60, 0, ⲆΔ[293], 3);
    this.ⲆΔΔ[6].id = 6;
    this.ⲆΔΔ[113] = mf(60, 60, 0, ⲆΔ[309], 3);
    this.ⲆΔΔ[113].id = 113;
    this.ⲆΔΔ[114] = mf(60, 60, 0, ⲆΔ[310], 3);
    this.ⲆΔΔ[114].id = 114;
    this.ⲆΔΔ[115] = mf(60, 60, 0, ⲆΔ[311], 3);
    this.ⲆΔΔ[115].id = 115;
    this.ⲆΔΔ[162] = mf(60, 60, 0, ⲆΔ[317], 3);
    this.ⲆΔΔ[162].id = 162;
    this.ⲆΔΔ[160] = mf(60, 60, 0, ⲆΔ[319], 3);
    this.ⲆΔΔ[160].id = 160;
    this.ⲆΔΔ[8] = mf(60, 60, 0, ⲆΔ[313], 3);
    this.ⲆΔΔ[8].id = 8;
    this.ⲆΔΔ[117] = mf(60, 60, 0, ⲆΔ[323], 3);
    this.ⲆΔΔ[117].id = 117;
    this.ⲆΔΔ[116] = mf(60, 60, 0, ⲆΔ[300], 3);
    this.ⲆΔΔ[116].id = 116;
    this.ⲆΔΔ[118] = mf(60, 60, 0, ⲆΔ[328], 3);
    this.ⲆΔΔ[118].id = 118;
    this.ⲆΔΔ[195] = mf(60, 60, 0, ⲆΔ[303], 3);
    this.ⲆΔΔ[195].id = 195;
    this.ⲆΔΔ[161] = mf(60, 60, 0, ⲆΔ[305], 3);
    this.ⲆΔΔ[161].id = 161;
    this.ⲆΔΔ[161].info.ⵠⵠ[2] = this.ⲆΔΔ[161].info.ⵠⵠ[0];
    this.ⲆΔΔ[163] = mf(60, 60, 0, ⲆΔ[329], 3);
    this.ⲆΔΔ[163].id = 163;
    this.ⲆΔΔ[164] = mf(60, 60, 0, ⲆΔ[330], 3);
    this.ⲆΔΔ[164].id = 164;
    this.ⲆΔΔ[165] = mf(60, 60, 0, ⲆΔ[331], 3);
    this.ⲆΔΔ[165].id = 165;
    this.ⲆΔΔ[166] = mf(60, 60, 0, ⲆΔ[335], 3);
    this.ⲆΔΔ[166].id = 166;
    this.ⲆΔΔ[167] = mf(60, 60, 0, ⲆΔ[337], 3);
    this.ⲆΔΔ[167].id = 167;
    this.ⲆΔΔ[168] = mf(60, 60, 0, ⲆΔ[361], 3);
    this.ⲆΔΔ[168].id = 168;
    this.ⲆΔΔ[169] = mf(60, 60, 0, ⲆΔ[362], 3);
    this.ⲆΔΔ[169].id = 169;
    this.ⲆΔΔ[170] = mf(60, 60, 0, ⲆΔ[364], 3);
    this.ⲆΔΔ[170].id = 170;
    this.ⲆΔΔ[29] = mf(60, 60, 0, ⲆΔ[392], 3);
    this.ⲆΔΔ[29].id = 29;
    this.ⲆΔΔ[10] = mf(60, 60, 0, ⲆΔ[369], 3);
    this.ⲆΔΔ[10].id = 10;
    this.ⲆΔΔ[171] = mf(60, 60, 0, ⲆΔ[372], 3);
    this.ⲆΔΔ[171].id = 171;
    this.ⲆΔΔ[172] = mf(60, 60, 0, ⲆΔ[375], 3);
    this.ⲆΔΔ[172].id = 172;
    this.ⲆΔΔ[173] = mf(60, 60, 0, ⲆΔ[378], 3);
    this.ⲆΔΔ[173].id = 173;
    this.ⲆΔΔ[2] = mf(60, 60, 0, ⲆΔ[368], 3);
    this.ⲆΔΔ[2].id = 2;
    this.ⲆΔΔ[2].info.ⵠⵠ[2] = this.ⲆΔΔ[2].info.ⵠⵠ[0];
    this.ⲆΔΔ[237] = mf(60, 60, 0, ⲆΔ[1162], 3);
    this.ⲆΔΔ[237].id = 237;
    this.ⲆΔΔ[237].info.ⵠⵠ[2] = this.ⲆΔΔ[237].info.ⵠⵠ[0];
    this.ⲆΔΔ[174] = mf(60, 60, 0, ⲆΔ[393], 3);
    this.ⲆΔΔ[174].id = 174;
    this.ⲆΔΔ[174].info.ⵠⵠ[2] = this.ⲆΔΔ[174].info.ⵠⵠ[0];
    this.ⲆΔΔ[222] = mf(60, 60, 0, ⲆΔ[1035], 3);
    this.ⲆΔΔ[222].id = 222;
    this.ⲆΔΔ[231] = mf(60, 60, 0, ⲆΔ[1037], 3);
    this.ⲆΔΔ[231].id = 231;
    this.ⲆΔΔ[232] = mf(60, 60, 0, ⲆΔ[1039], 3);
    this.ⲆΔΔ[232].id = 232;
    this.ⲆΔΔ[234] = mf(60, 60, 0, ⲆΔ[1156], 3);
    this.ⲆΔΔ[234].id = 234;
    this.ⲆΔΔ[10] = mf(60, 60, 0, ⲆΔ[369], 3);
    this.ⲆΔΔ[10].id = 10;
    this.ⲆΔΔ[11] = mf(60, 60, 0, ⲆΔ[381], 3);
    this.ⲆΔΔ[11].id = 11;
    this.ⲆΔΔ[12] = mf(60, 60, 0, ⲆΔ[401], 3);
    this.ⲆΔΔ[12].id = 12;
    this.ⲆΔΔ[13] = mf(60, 60, 0, ⲆΔ[395], 3);
    this.ⲆΔΔ[13].id = 13;
    this.ⲆΔΔ[14] = mf(60, 60, 0, ⲆΔ[398], 3);
    this.ⲆΔΔ[14].id = 14;
    this.ⲆΔΔ[15] = mf(60, 60, 0, ⲆΔ[404], 3);
    this.ⲆΔΔ[15].id = 15;
    this.ⲆΔΔ[16] = mf(60, 60, 0, ⲆΔ[874], 3);
    this.ⲆΔΔ[16].id = 16;
    this.ⲆΔΔ[119] = mf(60, 60, 0, ⲆΔ[408], 3);
    this.ⲆΔΔ[119].id = 119;
    this.ⲆΔΔ[23] = mf(60, 60, 0, ⲆΔ[420], 3);
    this.ⲆΔΔ[23].id = 23;
    this.ⲆΔΔ[24] = mf(60, 60, 0, ⲆΔ[423], 3);
    this.ⲆΔΔ[24].id = 24;
    this.ⲆΔΔ[87] = mf(60, 60, 0, ⲆΔ[1227], 3);
    this.ⲆΔΔ[87].id = 87;
    this.ⲆΔΔ[88] = mf(60, 60, 0, ⲆΔ[1230], 3);
    this.ⲆΔΔ[88].id = 88;
    this.ⲆΔΔ[80] = mf(60, 60, 0, ⲆΔ[1137], 3);
    this.ⲆΔΔ[80].id = 80;
    this.ⲆΔΔ[81] = mf(60, 60, 0, ⲆΔ[1140], 3);
    this.ⲆΔΔ[81].id = 81;
    this.ⲆΔΔ[64] = mf(60, 60, 0, ⲆΔ[569], 3);
    this.ⲆΔΔ[64].id = 64;
    this.ⲆΔΔ[101] = mf(60, 60, 0, ⲆΔ[1166], 3);
    this.ⲆΔΔ[101].id = 101;
    this.ⲆΔΔ[71] = mf(60, 60, 0, ⲆΔ[1239], 3);
    this.ⲆΔΔ[71].id = 71;
    this.ⲆΔΔ[65] = mf(60, 60, 0, ⲆΔ[572], 3);
    this.ⲆΔΔ[65].id = 65;
    this.ⲆΔΔ[102] = mf(60, 60, 0, ⲆΔ[1169], 3);
    this.ⲆΔΔ[102].id = 102;
    this.ⲆΔΔ[72] = mf(60, 60, 0, ⲆΔ[1242], 3);
    this.ⲆΔΔ[72].id = 72;
    this.ⲆΔΔ[66] = mf(60, 60, 0, ⲆΔ[575], 3);
    this.ⲆΔΔ[66].id = 66;
    this.ⲆΔΔ[103] = mf(60, 60, 0, ⲆΔ[1172], 3);
    this.ⲆΔΔ[103].id = 103;
    this.ⲆΔΔ[73] = mf(60, 60, 0, ⲆΔ[1245], 3);
    this.ⲆΔΔ[73].id = 73;
    this.ⲆΔΔ[67] = mf(60, 60, 0, ⲆΔ[578], 3);
    this.ⲆΔΔ[67].id = 67;
    this.ⲆΔΔ[104] = mf(60, 60, 0, ⲆΔ[1175], 3);
    this.ⲆΔΔ[104].id = 104;
    this.ⲆΔΔ[74] = mf(60, 60, 0, ⲆΔ[1248], 3);
    this.ⲆΔΔ[74].id = 74;
    this.ⲆΔΔ[68] = mf(60, 60, 0, ⲆΔ[581], 3);
    this.ⲆΔΔ[68].id = 68;
    this.ⲆΔΔ[105] = mf(60, 60, 0, ⲆΔ[1178], 3);
    this.ⲆΔΔ[105].id = 105;
    this.ⲆΔΔ[75] = mf(60, 60, 0, ⲆΔ[1251], 3);
    this.ⲆΔΔ[75].id = 75;
    this.ⲆΔΔ[69] = mf(60, 60, 0, ⲆΔ[584], 3);
    this.ⲆΔΔ[69].id = 69;
    this.ⲆΔΔ[106] = mf(60, 60, 0, ⲆΔ[1181], 3);
    this.ⲆΔΔ[106].id = 106;
    this.ⲆΔΔ[76] = mf(60, 60, 0, ⲆΔ[1254], 3);
    this.ⲆΔΔ[76].id = 76;
    this.ⲆΔΔ[70] = mf(60, 60, 0, ⲆΔ[587], 3);
    this.ⲆΔΔ[70].id = 70;
    this.ⲆΔΔ[107] = mf(60, 60, 0, ⲆΔ[1184], 3);
    this.ⲆΔΔ[107].id = 107;
    this.ⲆΔΔ[94] = mf(60, 60, 0, ⲆΔ[1257], 3);
    this.ⲆΔΔ[94].id = 94;
    this.ⲆΔΔ[95] = mf(60, 60, 0, ⲆΔ[1260], 3);
    this.ⲆΔΔ[95].id = 95;
    this.ⲆΔΔ[96] = mf(60, 60, 0, ⲆΔ[1263], 3);
    this.ⲆΔΔ[96].id = 96;
    this.ⲆΔΔ[97] = mf(60, 60, 0, ⲆΔ[1266], 3);
    this.ⲆΔΔ[97].id = 97;
    this.ⲆΔΔ[98] = mf(60, 60, 0, ⲆΔ[1269], 3);
    this.ⲆΔΔ[98].id = 98;
    this.ⲆΔΔ[99] = mf(60, 60, 0, ⲆΔ[1272], 3);
    this.ⲆΔΔ[99].id = 99;
    this.ⲆΔΔ[58] = mf(60, 60, 0, ⲆΔ[826], 3);
    this.ⲆΔΔ[58].id = 58;
    this.ⲆΔΔ[25] = mf(60, 60, 0, ⲆΔ[429], 3);
    this.ⲆΔΔ[25].id = 25;
    this.ⲆΔΔ[26] = mf(60, 60, 0, ⲆΔ[432], 3);
    this.ⲆΔΔ[26].id = 26;
    this.ⲆΔΔ[27] = mf(60, 60, 0, ⲆΔ[435], 3);
    this.ⲆΔΔ[27].id = 27;
    this.ⲆΔΔ[28] = mf(60, 60, 0, ⲆΔ[438], 3);
    this.ⲆΔΔ[28].id = 28;
    this.ⲆΔΔ[120] = mf(60, 60, 0, ⲆΔ[441], 3);
    this.ⲆΔΔ[120].id = 120;
    this.ⲆΔΔ[120].info.ⵠⵠ[2] = this.ⲆΔΔ[120].info.ⵠⵠ[0];
    this.ⲆΔΔ[29] = mf(60, 60, 0, ⲆΔ[392], 3);
    this.ⲆΔΔ[29].id = 29;
    this.ⲆΔΔ[121] = mf(60, 60, 0, ⲆΔ[418], 3);
    this.ⲆΔΔ[121].id = 121;
    this.ⲆΔΔ[121].info.ⵠⵠ[2] = this.ⲆΔΔ[121].info.ⵠⵠ[0];
    this.ⲆΔΔ[30] = mf(60, 60, 0, ⲆΔ[455], 3);
    this.ⲆΔΔ[30].id = 30;
    this.ⲆΔΔ[9] = mf(60, 60, 0, ⲆΔ[860], 3);
    this.ⲆΔΔ[9].id = 9;
    this.ⲆΔΔ[31] = mf(60, 60, 0, ⲆΔ[458], 3);
    this.ⲆΔΔ[31].id = 31;
    this.ⲆΔΔ[32] = mf(60, 60, 0, ⲆΔ[1017], 3);
    this.ⲆΔΔ[32].id = 32;
    this.ⲆΔΔ[33] = mf(60, 60, 0, ⲆΔ[472], 3);
    this.ⲆΔΔ[33].id = 33;
    this.ⲆΔΔ[35] = mf(60, 60, 0, ⲆΔ[477], 3);
    this.ⲆΔΔ[35].id = 35;
    this.ⲆΔΔ[36] = mf(60, 60, 0, ⲆΔ[480], 3);
    this.ⲆΔΔ[36].id = 36;
    this.ⲆΔΔ[37] = mf(60, 60, 0, ⲆΔ[483], 3);
    this.ⲆΔΔ[37].id = 37;
    this.ⲆΔΔ[38] = mf(60, 60, 0, ⲆΔ[486], 3);
    this.ⲆΔΔ[38].id = 38;
    this.ⲆΔΔ[39] = mf(60, 60, 0, ⲆΔ[489], 3);
    this.ⲆΔΔ[39].id = 39;
    this.ⲆΔΔ[122] = mf(60, 60, 0, ⲆΔ[492], 3);
    this.ⲆΔΔ[122].id = 122;
    this.ⲆΔΔ[123] = mf(60, 60, 0, ⲆΔ[495], 3);
    this.ⲆΔΔ[123].id = 123;
    this.ⲆΔΔ[124] = mf(60, 60, 0, ⲆΔ[499], 3);
    this.ⲆΔΔ[124].id = 124;
    this.ⲆΔΔ[40] = mf(60, 60, 0, ⲆΔ[502], 3);
    this.ⲆΔΔ[40].id = 40;
    this.ⲆΔΔ[146] = mf(60, 60, 0, ⲆΔ[505], 3);
    this.ⲆΔΔ[146].id = 146;
    this.ⲆΔΔ[146].info.ⵠⵠ[2] = this.ⲆΔΔ[146].info.ⵠⵠ[0];
    this.ⲆΔΔ[240] = mf(60, 60, 0, ⲆΔ[1233], 3);
    this.ⲆΔΔ[240].id = 240;
    this.ⲆΔΔ[240].info.ⵠⵠ[2] = this.ⲆΔΔ[240].info.ⵠⵠ[0];
    this.ⲆΔΔ[147] = mf(60, 60, 0, ⲆΔ[513], 3);
    this.ⲆΔΔ[147].id = 147;
    this.ⲆΔΔ[147].info.ⵠⵠ[2] = this.ⲆΔΔ[147].info.ⵠⵠ[0];
    this.ⲆΔΔ[148] = mf(60, 60, 0, ⲆΔ[518], 3);
    this.ⲆΔΔ[148].id = 148;
    this.ⲆΔΔ[148].info.ⵠⵠ[2] = this.ⲆΔΔ[148].info.ⵠⵠ[0];
    this.ⲆΔΔ[149] = mf(60, 60, 0, ⲆΔ[521], 3);
    this.ⲆΔΔ[149].id = 149;
    this.ⲆΔΔ[150] = mf(60, 60, 0, ⲆΔ[523], 3);
    this.ⲆΔΔ[150].id = 150;
    this.ⲆΔΔ[151] = mf(60, 60, 0, ⲆΔ[529], 3);
    this.ⲆΔΔ[151].id = 151;
    this.ⲆΔΔ[158] = mf(60, 60, 0, ⲆΔ[532], 3);
    this.ⲆΔΔ[158].id = 158;
    this.ⲆΔΔ[159] = mf(60, 60, 0, ⲆΔ[553], 3);
    this.ⲆΔΔ[159].id = 159;
    this.ⲆΔΔ[43] = mf(60, 60, 0, ⲆΔ[541], 3);
    this.ⲆΔΔ[43].id = 43;
    this.ⲆΔΔ[45] = mf(60, 60, 0, ⲆΔ[550], 3);
    this.ⲆΔΔ[45].id = 45;
    this.ⲆΔΔ[125] = mf(60, 60, 0, ⲆΔ[605], 3);
    this.ⲆΔΔ[125].id = 125;
    this.ⲆΔΔ[221] = mf(60, 60, 0, ⲆΔ[1236], 3);
    this.ⲆΔΔ[221].id = 221;
    this.ⲆΔΔ[223] = mf(60, 60, 0, ⲆΔ[1028], 3);
    this.ⲆΔΔ[223].id = 223;
    this.ⲆΔΔ[224] = mf(60, 60, 0, ⲆΔ[1031], 3);
    this.ⲆΔΔ[224].id = 224;
    this.ⲆΔΔ[230] = mf(60, 60, 0, ⲆΔ[1117], 3);
    this.ⲆΔΔ[230].id = 230;
    this.ⲆΔΔ[89] = mf(60, 60, 0, ⲆΔ[1046], 3);
    this.ⲆΔΔ[89].id = 89;
    this.ⲆΔΔ[225] = mf(60, 60, 0, ⲆΔ[1049], 3);
    this.ⲆΔΔ[225].id = 225;
    this.ⲆΔΔ[226] = mf(60, 60, 0, ⲆΔ[1189], 3);
    this.ⲆΔΔ[226].id = 226;
    this.ⲆΔΔ[227] = mf(60, 60, 0, ⲆΔ[1080], 3);
    this.ⲆΔΔ[227].id = 227;
    this.ⲆΔΔ[239] = mf(60, 60, 0, ⲆΔ[1224], 3);
    this.ⲆΔΔ[239].id = 239;
    this.ⲆΔΔ[228] = mf(60, 60, 0, ⲆΔ[1095], 3);
    this.ⲆΔΔ[228].id = 228;
    this.ⲆΔΔ[229] = mf(60, 60, 0, ⲆΔ[1110], 3);
    this.ⲆΔΔ[229].id = 229;
    this.ⲆΔΔ[126] = mf(60, 60, 0, ⲆΔ[609], 3);
    this.ⲆΔΔ[126].id = 126;
    this.ⲆΔΔ[126].info.ⵠⵠ[2] = this.ⲆΔΔ[126].info.ⵠⵠ[0];
    this.ⲆΔΔ[127] = mf(60, 60, 0, ⲆΔ[613], 3);
    this.ⲆΔΔ[127].id = 127;
    this.ⲆΔΔ[128] = mf(60, 60, 0, ⲆΔ[612], 3);
    this.ⲆΔΔ[128].id = 128;
    this.ⲆΔΔ[46] = mf(60, 60, 0, ⲆΔ[616], 3);
    this.ⲆΔΔ[46].id = 46;
    this.ⲆΔΔ[50] = mf(60, 60, 0, ⲆΔ[699], 3);
    this.ⲆΔΔ[50].id = 50;
    this.ⲆΔΔ[51] = mf(60, 60, 0, ⲆΔ[702], 3);
    this.ⲆΔΔ[51].id = 51;
    this.ⲆΔΔ[52] = mf(60, 60, 0, ⲆΔ[705], 3);
    this.ⲆΔΔ[52].id = 52;
    this.ⲆΔΔ[55] = mf(60, 60, 0, ⲆΔ[709], 3);
    this.ⲆΔΔ[55].id = 55;
    this.ⲆΔΔ[129] = mf(60, 60, 0, ⲆΔ[624], 3);
    this.ⲆΔΔ[129].id = 129;
    this.ⲆΔΔ[129].info.ⵠⵠ[2] = this.ⲆΔΔ[129].info.ⵠⵠ[0];
    this.ⲆΔΔ[130] = mf(60, 60, 0, ⲆΔ[626], 3);
    this.ⲆΔΔ[130].id = 130;
    this.ⲆΔΔ[131] = mf(60, 60, 0, ⲆΔ[629], 3);
    this.ⲆΔΔ[131].id = 131;
    this.ⲆΔΔ[131].info.ⵠⵠ[2] = this.ⲆΔΔ[131].info.ⵠⵠ[0];
    this.ⲆΔΔ[132] = mf(60, 60, 0, ⲆΔ[631], 3);
    this.ⲆΔΔ[132].id = 132;
    this.ⲆΔΔ[133] = mf(60, 60, 0, ⲆΔ[634], 3);
    this.ⲆΔΔ[133].id = 133;
    this.ⲆΔΔ[134] = mf(60, 60, 0, ⲆΔ[639], 3);
    this.ⲆΔΔ[134].id = 134;
    this.ⲆΔΔ[134].info.ⵠⵠ[2] = this.ⲆΔΔ[134].info.ⵠⵠ[0];
    this.ⲆΔΔ[135] = mf(60, 60, 0, ⲆΔ[644], 3);
    this.ⲆΔΔ[135].id = 135;
    this.ⲆΔΔ[47] = mf(60, 60, 0, ⲆΔ[646], 3);
    this.ⲆΔΔ[47].id = 47;
    this.ⲆΔΔ[48] = mf(60, 60, 0, ⲆΔ[649], 3);
    this.ⲆΔΔ[48].id = 48;
    this.ⲆΔΔ[49] = mf(60, 60, 0, ⲆΔ[652], 3);
    this.ⲆΔΔ[49].id = 49;
    this.ⲆΔΔ[136] = mf(60, 60, 0, ⲆΔ[659], 3);
    this.ⲆΔΔ[136].id = 136;
    this.ⲆΔΔ[143] = mf(60, 60, 0, ⲆΔ[143], 3);
    this.ⲆΔΔ[143].id = 143;
    this.ⲆΔΔ[137] = mf(60, 60, 0, ⲆΔ[662], 3);
    this.ⲆΔΔ[137].id = 137;
    this.ⲆΔΔ[138] = mf(60, 60, 0, ⲆΔ[664], 3);
    this.ⲆΔΔ[138].id = 138;
    this.ⲆΔΔ[139] = mf(60, 60, 0, ⲆΔ[674], 3);
    this.ⲆΔΔ[139].id = 139;
    this.ⲆΔΔ[139].info.ⵠⵠ[2] = this.ⲆΔΔ[139].info.ⵠⵠ[0];
    this.ⲆΔΔ[140] = mf(60, 60, 0, ⲆΔ[140], 3);
    this.ⲆΔΔ[140].id = 140;
    this.ⲆΔΔ[140].info.ⵠⵠ[2] = this.ⲆΔΔ[140].info.ⵠⵠ[0];
    this.ⲆΔΔ[141] = mf(60, 60, 0, ⲆΔ[685], 3);
    this.ⲆΔΔ[141].id = 141;
    this.ⲆΔΔ[142] = mf(60, 60, 0, ⲆΔ[142], 3);
    this.ⲆΔΔ[142].id = 142;
    this.ⲆΔΔ[142].info.ⵠⵠ[2] = this.ⲆΔΔ[142].info.ⵠⵠ[0];
    this.ⲆΔΔ[144] = mf(60, 60, 0, ⲆΔ[717], 3);
    this.ⲆΔΔ[144].id = 144;
    this.ⲆΔΔ[145] = mf(60, 60, 0, ⲆΔ[145], 3);
    this.ⲆΔΔ[145].id = 145;
    this.ⲆΔΔ[59] = mf(60, 60, 0, ⲆΔ[732], 3);
    this.ⲆΔΔ[59].id = 59;
    this.ⲆΔΔ[62] = mf(60, 60, 0, ⲆΔ[563], 3);
    this.ⲆΔΔ[62].id = 62;
    this.ⲆΔΔ[185] = mf(60, 60, 0, ⲆΔ[252], 3);
    this.ⲆΔΔ[185].id = 185;
    this.ⲆΔΔ[185].info.ⵠⵠ[2] = this.ⲆΔΔ[185].info.ⵠⵠ[0];
    this.ⲆΔΔ[184] = mf(60, 60, 0, ⲆΔ[751], 3);
    this.ⲆΔΔ[184].id = 184;
    this.ⲆΔΔ[184].info.ⵠⵠ[2] = this.ⲆΔΔ[184].info.ⵠⵠ[0];
    this.ⲆΔΔ[17] = mf(60, 60, 0, ⲆΔ[877], 3);
    this.ⲆΔΔ[17].id = 17;
    this.ⲆΔΔ[63] = mf(60, 60, 0, ⲆΔ[566], 3);
    this.ⲆΔΔ[63].id = 63;
    this.ⲆΔΔ[187] = mf(60, 60, 0, ⲆΔ[253], 3);
    this.ⲆΔΔ[187].id = 187;
    this.ⲆΔΔ[187].info.ⵠⵠ[2] = this.ⲆΔΔ[187].info.ⵠⵠ[0];
    this.ⲆΔΔ[186] = mf(60, 60, 0, ⲆΔ[753], 3);
    this.ⲆΔΔ[186].id = 186;
    this.ⲆΔΔ[186].info.ⵠⵠ[2] = this.ⲆΔΔ[186].info.ⵠⵠ[0];
    this.ⲆΔΔ[77] = mf(60, 60, 0, ⲆΔ[756], 3);
    this.ⲆΔΔ[77].id = 77;
    this.ⲆΔΔ[175] = mf(60, 60, 0, ⲆΔ[176], 3);
    this.ⲆΔΔ[175].id = 175;
    this.ⲆΔΔ[175].info.ⵠⵠ[2] = this.ⲆΔΔ[175].info.ⵠⵠ[0];
    this.ⲆΔΔ[176] = mf(60, 60, 0, ⲆΔ[177], 3);
    this.ⲆΔΔ[176].id = 176;
    this.ⲆΔΔ[176].info.ⵠⵠ[2] = this.ⲆΔΔ[176].info.ⵠⵠ[0];
    this.ⲆΔΔ[78] = mf(60, 60, 0, ⲆΔ[760], 3);
    this.ⲆΔΔ[78].id = 78;
    this.ⲆΔΔ[177] = mf(60, 60, 0, ⲆΔ[175], 3);
    this.ⲆΔΔ[177].id = 177;
    this.ⲆΔΔ[177].info.ⵠⵠ[2] = this.ⲆΔΔ[177].info.ⵠⵠ[0];
    this.ⲆΔΔ[79] = mf(60, 60, 0, ⲆΔ[764], 3);
    this.ⲆΔΔ[79].id = 79;
    this.ⲆΔΔ[83] = mf(60, 60, 0, ⲆΔ[767], 3);
    this.ⲆΔΔ[83].id = 83;
    this.ⲆΔΔ[84] = mf(60, 60, 0, ⲆΔ[771], 3);
    this.ⲆΔΔ[84].id = 84;
    this.ⲆΔΔ[178] = mf(60, 60, 0, ⲆΔ[178], 3);
    this.ⲆΔΔ[178].id = 178;
    this.ⲆΔΔ[179] = mf(60, 60, 0, ⲆΔ[179], 3);
    this.ⲆΔΔ[179].id = 179;
    this.ⲆΔΔ[86] = mf(60, 60, 0, ⲆΔ[776], 3);
    this.ⲆΔΔ[86].id = 86;
    this.ⲆΔΔ[85] = mf(60, 60, 0, ⲆΔ[779], 3);
    this.ⲆΔΔ[85].id = 85;
    this.ⲆΔΔ[180] = mf(60, 60, 0, ⲆΔ[180], 3);
    this.ⲆΔΔ[180].id = 180;
    this.ⲆΔΔ[181] = mf(60, 60, 0, ⲆΔ[181], 3);
    this.ⲆΔΔ[181].id = 181;
    this.ⲆΔΔ[182] = mf(60, 60, 0, ⲆΔ[789], 3);
    this.ⲆΔΔ[182].id = 182;
    this.ⲆΔΔ[183] = mf(60, 60, 0, ⲆΔ[800], 3);
    this.ⲆΔΔ[183].id = 183;
    this.ⲆΔΔ[188] = mf(60, 60, 0, ⲆΔ[808], 3);
    this.ⲆΔΔ[188].id = 188;
    this.ⲆΔΔ[189] = mf(60, 60, 0, ⲆΔ[814], 3);
    this.ⲆΔΔ[189].id = 189;
    this.ⲆΔΔ[191] = mf(60, 60, 0, ⲆΔ[834], 3);
    this.ⲆΔΔ[191].id = 191;
    this.ⲆΔΔ[192] = mf(60, 60, 0, ⲆΔ[840], 3);
    this.ⲆΔΔ[192].id = 192;
    this.ⲆΔΔ[190] = mf(60, 60, 0, ⲆΔ[842], 3);
    this.ⲆΔΔ[190].id = 190;
    this.ⲆΔΔ[193] = mf(60, 60, 0, ⲆΔ[845], 3);
    this.ⲆΔΔ[193].id = 193;
    this.ⲆΔΔ[194] = mf(60, 60, 0, ⲆΔ[850], 3);
    this.ⲆΔΔ[194].id = 194;
    this.ⲆΔΔ[204] = mf(60, 60, 0, ⲆΔ[949], 3);
    this.ⲆΔΔ[204].id = 204;
    this.ⲆΔΔ[205] = mf(60, 60, 0, ⲆΔ[955], 3);
    this.ⲆΔΔ[205].id = 205;
    this.ⲆΔΔ[206] = mf(60, 60, 0, ⲆΔ[959], 3);
    this.ⲆΔΔ[206].id = 206;
    this.ⲆΔΔ[207] = mf(60, 60, 0, ⲆΔ[965], 3);
    this.ⲆΔΔ[207].id = 207;
    this.ⲆΔΔ[208] = mf(60, 60, 0, ⲆΔ[966], 3);
    this.ⲆΔΔ[208].id = 208;
    this.ⲆΔΔ[209] = mf(60, 60, 0, ⲆΔ[972], 3);
    this.ⲆΔΔ[209].id = 209;
    this.ⲆΔΔ[210] = mf(60, 60, 0, ⲆΔ[981], 3);
    this.ⲆΔΔ[210].id = 210;
    this.ⲆΔΔ[211] = mf(60, 60, 0, ⲆΔ[987], 3);
    this.ⲆΔΔ[211].id = 211;
    this.ⲆΔΔ[41] = mf(60, 60, 0, ⲆΔ[880], 3);
    this.ⲆΔΔ[41].id = 41;
    this.ⲆΔΔ[42] = mf(60, 60, 0, ⲆΔ[882], 3);
    this.ⲆΔΔ[42].id = 42;
    this.ⲆΔΔ[12] = mf(60, 60, 0, ⲆΔ[401], 3);
    this.ⲆΔΔ[12].id = 12;
    this.ⲆΔΔ[16] = mf(60, 60, 0, ⲆΔ[874], 3);
    this.ⲆΔΔ[16].id = 16;
    this.ⲆΔΔ[196] = mf(60, 60, 0, ⲆΔ[196], 3);
    this.ⲆΔΔ[196].id = 196;
    this.ⲆΔΔ[18] = mf(60, 60, 0, ⲆΔ[901], 3);
    this.ⲆΔΔ[18].id = 18;
    this.ⲆΔΔ[197] = mf(60, 60, 0, ⲆΔ[197], 3);
    this.ⲆΔΔ[197].id = 197;
    this.ⲆΔΔ[198] = mf(60, 60, 0, ⲆΔ[907], 3);
    this.ⲆΔΔ[198].id = 198;
    this.ⲆΔΔ[61] = mf(60, 60, 0, ⲆΔ[910], 3);
    this.ⲆΔΔ[61].id = 61;
    this.ⲆΔΔ[201] = mf(60, 60, 0, ⲆΔ[870], 3);
    this.ⲆΔΔ[201].id = 201;
    this.ⲆΔΔ[200] = mf(60, 60, 0, ⲆΔ[200], 3);
    this.ⲆΔΔ[200].id = 200;
    this.ⲆΔΔ[199] = mf(60, 60, 0, ⲆΔ[865], 3);
    this.ⲆΔΔ[199].id = 199;
    this.ⵠΔΔ = [];
    this.ⵠΔΔ[35] = mf(60, 60, 0, ⲆΔ[254], 3);
    this.ⵠΔΔ[35].id = 35;
    this.ⵠΔΔ[5] = mf(60, 60, 0, ⲆΔ[256], 3);
    this.ⵠΔΔ[5].id = 5;
    this.ⵠΔΔ[0] = mf(60, 60, 0, ⲆΔ[302], 3);
    this.ⵠΔΔ[0].id = 0;
    this.ⵠΔΔ[3] = mf(60, 60, 0, ⲆΔ[262], 3);
    this.ⵠΔΔ[3].id = 3;
    this.ⵠΔΔ[55] = mf(60, 60, 0, ⲆΔ[318], 3);
    this.ⵠΔΔ[55].id = 55;
    this.ⵠΔΔ[67] = mf(60, 60, 0, ⲆΔ[320], 3);
    this.ⵠΔΔ[67].id = 67;
    this.ⵠΔΔ[40] = mf(60, 60, 0, ⲆΔ[284], 3);
    this.ⵠΔΔ[40].id = 40;
    this.ⵠΔΔ[6] = mf(60, 60, 0, ⲆΔ[295], 3);
    this.ⵠΔΔ[6].id = 6;
    this.ⵠΔΔ[7] = mf(60, 60, 0, ⲆΔ[257], 3);
    this.ⵠΔΔ[7].id = 7;
    this.ⵠΔΔ[36] = mf(60, 60, 0, ⲆΔ[290], 3);
    this.ⵠΔΔ[36].id = 36;
    this.ⵠΔΔ[34] = mf(60, 60, 0, ⲆΔ[830], 3);
    this.ⵠΔΔ[34].id = 34;
    this.ⵠΔΔ[37] = mf(60, 60, 0, ⲆΔ[291], 3);
    this.ⵠΔΔ[37].id = 37;
    this.ⵠΔΔ[4] = mf(60, 60, 0, ⲆΔ[314], 3);
    this.ⵠΔΔ[4].id = 4;
    this.ⵠΔΔ[49] = mf(60, 60, 0, ⲆΔ[325], 3);
    this.ⵠΔΔ[49].id = 49;
    this.ⵠΔΔ[1] = mf(60, 60, 0, ⲆΔ[327], 3);
    this.ⵠΔΔ[1].id = 1;
    this.ⵠΔΔ[54] = mf(60, 60, 0, ⲆΔ[304], 3);
    this.ⵠΔΔ[54].id = 54;
    this.ⵠΔΔ[56] = mf(60, 60, 0, ⲆΔ[263], 3);
    this.ⵠΔΔ[56].id = 56;
    this.ⵠΔΔ[57] = mf(60, 60, 0, ⲆΔ[265], 3);
    this.ⵠΔΔ[57].id = 57;
    this.ⵠΔΔ[58] = mf(60, 60, 0, ⲆΔ[332], 3);
    this.ⵠΔΔ[58].id = 58;
    this.ⵠΔΔ[61] = mf(60, 60, 0, ⲆΔ[268], 3);
    this.ⵠΔΔ[61].id = 61;
    this.ⵠΔΔ[79] = mf(60, 60, 0, ⲆΔ[338], 3);
    this.ⵠΔΔ[79].id = 79;
    this.ⵠΔΔ[68] = mf(60, 60, 0, ⲆΔ[360], 3);
    this.ⵠΔΔ[68].id = 68;
    this.ⵠΔΔ[69] = mf(60, 60, 0, ⲆΔ[363], 3);
    this.ⵠΔΔ[69].id = 69;
    this.ⵠΔΔ[70] = mf(60, 60, 0, ⲆΔ[365], 3);
    this.ⵠΔΔ[70].id = 70;
    this.ⵠΔΔ[100] = mf(60, 60, 0, ⲆΔ[367], 3);
    this.ⵠΔΔ[100].id = 100;
    this.ⵠΔΔ[83] = mf(60, 60, 0, ⲆΔ[370], 3);
    this.ⵠΔΔ[83].id = 83;
    this.ⵠΔΔ[62] = mf(60, 60, 0, ⲆΔ[371], 3);
    this.ⵠΔΔ[62].id = 62;
    this.ⵠΔΔ[63] = mf(60, 60, 0, ⲆΔ[374], 3);
    this.ⵠΔΔ[63].id = 63;
    this.ⵠΔΔ[64] = mf(60, 60, 0, ⲆΔ[377], 3);
    this.ⵠΔΔ[64].id = 64;
    this.ⵠΔΔ[83] = mf(60, 60, 0, ⲆΔ[370], 3);
    this.ⵠΔΔ[83].id = 83;
    this.ⵠΔΔ[84] = mf(60, 60, 0, ⲆΔ[380], 3);
    this.ⵠΔΔ[84].id = 84;
    this.ⵠΔΔ[25] = mf(60, 60, 0, ⲆΔ[402], 3);
    this.ⵠΔΔ[25].id = 25;
    this.ⵠΔΔ[26] = mf(60, 60, 0, ⲆΔ[396], 3);
    this.ⵠΔΔ[26].id = 26;
    this.ⵠΔΔ[27] = mf(60, 60, 0, ⲆΔ[399], 3);
    this.ⵠΔΔ[27].id = 27;
    this.ⵠΔΔ[28] = mf(60, 60, 0, ⲆΔ[405], 3);
    this.ⵠΔΔ[28].id = 28;
    this.ⵠΔΔ[31] = mf(60, 60, 0, ⲆΔ[876], 3);
    this.ⵠΔΔ[31].id = 31;
    this.ⵠΔΔ[2] = mf(60, 60, 0, ⲆΔ[409], 3);
    this.ⵠΔΔ[2].id = 2;
    this.ⵠΔΔ[80] = mf(60, 60, 0, ⲆΔ[421], 3);
    this.ⵠΔΔ[80].id = 80;
    this.ⵠΔΔ[81] = mf(60, 60, 0, ⲆΔ[424], 3);
    this.ⵠΔΔ[81].id = 81;
    this.ⵠΔΔ[Qr.ᐃⵠⵠᐃⲆ] = mf(60, 60, 0, ⲆΔ[1228], 3);
    this.ⵠΔΔ[Qr.ᐃⵠⵠᐃⲆ].id = Qr.ᐃⵠⵠᐃⲆ;
    this.ⵠΔΔ[86] = mf(60, 60, 0, ⲆΔ[1231], 3);
    this.ⵠΔΔ[86].id = 86;
    this.ⵠΔΔ[98] = mf(60, 60, 0, ⲆΔ[1138], 3);
    this.ⵠΔΔ[98].id = 98;
    this.ⵠΔΔ[99] = mf(60, 60, 0, ⲆΔ[1141], 3);
    this.ⵠΔΔ[99].id = 99;
    this.ⵠΔΔ[131] = mf(60, 60, 0, ⲆΔ[570], 3);
    this.ⵠΔΔ[131].id = 131;
    this.ⵠΔΔ[132] = mf(60, 60, 0, ⲆΔ[1168], 3);
    this.ⵠΔΔ[132].id = 132;
    this.ⵠΔΔ[145] = mf(60, 60, 0, ⲆΔ[1238], 3);
    this.ⵠΔΔ[145].id = 145;
    this.ⵠΔΔ[133] = mf(60, 60, 0, ⲆΔ[573], 3);
    this.ⵠΔΔ[133].id = 133;
    this.ⵠΔΔ[134] = mf(60, 60, 0, ⲆΔ[1171], 3);
    this.ⵠΔΔ[134].id = 134;
    this.ⵠΔΔ[146] = mf(60, 60, 0, ⲆΔ[1241], 3);
    this.ⵠΔΔ[146].id = 146;
    this.ⵠΔΔ[135] = mf(60, 60, 0, ⲆΔ[576], 3);
    this.ⵠΔΔ[135].id = 135;
    this.ⵠΔΔ[136] = mf(60, 60, 0, ⲆΔ[1174], 3);
    this.ⵠΔΔ[136].id = 136;
    this.ⵠΔΔ[147] = mf(60, 60, 0, ⲆΔ[1244], 3);
    this.ⵠΔΔ[147].id = 147;
    this.ⵠΔΔ[137] = mf(60, 60, 0, ⲆΔ[579], 3);
    this.ⵠΔΔ[137].id = 137;
    this.ⵠΔΔ[138] = mf(60, 60, 0, ⲆΔ[1177], 3);
    this.ⵠΔΔ[138].id = 138;
    this.ⵠΔΔ[167] = mf(60, 60, 0, ⲆΔ[1256], 3);
    this.ⵠΔΔ[167].id = 167;
    this.ⵠΔΔ[168] = mf(60, 60, 0, ⲆΔ[1259], 3);
    this.ⵠΔΔ[168].id = 168;
    this.ⵠΔΔ[169] = mf(60, 60, 0, ⲆΔ[1262], 3);
    this.ⵠΔΔ[169].id = 169;
    this.ⵠΔΔ[170] = mf(60, 60, 0, ⲆΔ[1265], 3);
    this.ⵠΔΔ[170].id = 170;
    this.ⵠΔΔ[171] = mf(60, 60, 0, ⲆΔ[1268], 3);
    this.ⵠΔΔ[171].id = 171;
    this.ⵠΔΔ[172] = mf(60, 60, 0, ⲆΔ[1271], 3);
    this.ⵠΔΔ[172].id = 172;
    this.ⵠΔΔ[148] = mf(60, 60, 0, ⲆΔ[1247], 3);
    this.ⵠΔΔ[148].id = 148;
    this.ⵠΔΔ[139] = mf(60, 60, 0, ⲆΔ[582], 3);
    this.ⵠΔΔ[139].id = 139;
    this.ⵠΔΔ[140] = mf(60, 60, 0, ⲆΔ[1180], 3);
    this.ⵠΔΔ[140].id = 140;
    this.ⵠΔΔ[149] = mf(60, 60, 0, ⲆΔ[1250], 3);
    this.ⵠΔΔ[149].id = 149;
    this.ⵠΔΔ[141] = mf(60, 60, 0, ⲆΔ[585], 3);
    this.ⵠΔΔ[141].id = 141;
    this.ⵠΔΔ[142] = mf(60, 60, 0, ⲆΔ[1183], 3);
    this.ⵠΔΔ[142].id = 142;
    this.ⵠΔΔ[150] = mf(60, 60, 0, ⲆΔ[1253], 3);
    this.ⵠΔΔ[150].id = 150;
    this.ⵠΔΔ[143] = mf(60, 60, 0, ⲆΔ[588], 3);
    this.ⵠΔΔ[143].id = 143;
    this.ⵠΔΔ[144] = mf(60, 60, 0, ⲆΔ[1186], 3);
    this.ⵠΔΔ[144].id = 144;
    this.ⵠΔΔ[87] = mf(60, 60, 0, ⲆΔ[827], 3);
    this.ⵠΔΔ[87].id = 87;
    this.ⵠΔΔ[88] = mf(60, 60, 0, ⲆΔ[430], 3);
    this.ⵠΔΔ[88].id = 88;
    this.ⵠΔΔ[89] = mf(60, 60, 0, ⲆΔ[433], 3);
    this.ⵠΔΔ[89].id = 89;
    this.ⵠΔΔ[90] = mf(60, 60, 0, ⲆΔ[436], 3);
    this.ⵠΔΔ[90].id = 90;
    this.ⵠΔΔ[24] = mf(60, 60, 0, ⲆΔ[439], 3);
    this.ⵠΔΔ[24].id = 24;
    this.ⵠΔΔ[101] = mf(60, 60, 0, ⲆΔ[442], 3);
    this.ⵠΔΔ[101].id = 101;
    this.ⵠΔΔ[100] = mf(60, 60, 0, ⲆΔ[367], 3);
    this.ⵠΔΔ[100].id = 100;
    this.ⵠΔΔ[38] = mf(60, 60, 0, ⲆΔ[456], 3);
    this.ⵠΔΔ[38].id = 38;
    this.ⵠΔΔ[Qr.Δᐃᐃⵠᐃ] = mf(60, 60, 0, ⲆΔ[861], 3);
    this.ⵠΔΔ[Qr.Δᐃᐃⵠᐃ].id = Qr.Δᐃᐃⵠᐃ;
    this.ⵠΔΔ[8] = mf(60, 60, 0, ⲆΔ[460], 3);
    this.ⵠΔΔ[8].id = 8;
    this.ⵠΔΔ[9] = mf(60, 60, 0, ⲆΔ[1019], 3);
    this.ⵠΔΔ[9].id = 9;
    this.ⵠΔΔ[29] = mf(60, 60, 0, ⲆΔ[473], 3);
    this.ⵠΔΔ[29].id = 29;
    this.ⵠΔΔ[10] = mf(60, 60, 0, ⲆΔ[478], 3);
    this.ⵠΔΔ[10].id = 10;
    this.ⵠΔΔ[11] = mf(60, 60, 0, ⲆΔ[481], 3);
    this.ⵠΔΔ[11].id = 11;
    this.ⵠΔΔ[12] = mf(60, 60, 0, ⲆΔ[484], 3);
    this.ⵠΔΔ[12].id = 12;
    this.ⵠΔΔ[13] = mf(60, 60, 0, ⲆΔ[487], 3);
    this.ⵠΔΔ[13].id = 13;
    this.ⵠΔΔ[14] = mf(60, 60, 0, ⲆΔ[490], 3);
    this.ⵠΔΔ[14].id = 14;
    this.ⵠΔΔ[59] = mf(60, 60, 0, ⲆΔ[493], 3);
    this.ⵠΔΔ[59].id = 59;
    this.ⵠΔΔ[71] = mf(60, 60, 0, ⲆΔ[496], 3);
    this.ⵠΔΔ[71].id = 71;
    this.ⵠΔΔ[65] = mf(60, 60, 0, ⲆΔ[498], 3);
    this.ⵠΔΔ[65].id = 65;
    this.ⵠΔΔ[85] = mf(60, 60, 0, ⲆΔ[503], 3);
    this.ⵠΔΔ[85].id = 85;
    this.ⵠΔΔ[102] = mf(60, 60, 0, ⲆΔ[515], 3);
    this.ⵠΔΔ[102].id = 102;
    this.ⵠΔΔ[103] = mf(60, 60, 0, ⲆΔ[519], 3);
    this.ⵠΔΔ[103].id = 103;
    this.ⵠΔΔ[115] = mf(60, 60, 0, ⲆΔ[530], 3);
    this.ⵠΔΔ[115].id = 115;
    this.ⵠΔΔ[104] = mf(60, 60, 0, ⲆΔ[533], 3);
    this.ⵠΔΔ[104].id = 104;
    this.ⵠΔΔ[105] = mf(60, 60, 0, ⲆΔ[555], 3);
    this.ⵠΔΔ[105].id = 105;
    this.ⵠΔΔ[91] = mf(60, 60, 0, ⲆΔ[542], 3);
    this.ⵠΔΔ[91].id = 91;
    this.ⵠΔΔ[15] = mf(60, 60, 0, ⲆΔ[551], 3);
    this.ⵠΔΔ[15].id = 15;
    this.ⵠΔΔ[106] = mf(60, 60, 0, ⲆΔ[604], 3);
    this.ⵠΔΔ[106].id = 106;
    this.ⵠΔΔ[108] = mf(60, 60, 0, ⲆΔ[1235], 3);
    this.ⵠΔΔ[108].id = 108;
    this.ⵠΔΔ[163] = mf(60, 60, 0, ⲆΔ[1027], 3);
    this.ⵠΔΔ[163].id = 163;
    this.ⵠΔΔ[164] = mf(60, 60, 0, ⲆΔ[1030], 3);
    this.ⵠΔΔ[164].id = 164;
    this.ⵠΔΔ[166] = mf(60, 60, 0, ⲆΔ[1116], 3);
    this.ⵠΔΔ[166].id = 166;
    this.ⵠΔΔ[165] = mf(60, 60, 0, ⲆΔ[1048], 3);
    this.ⵠΔΔ[165].id = 165;
    this.ⵠΔΔ[Qr.ΔⵠᐃⲆᐃ] = mf(60, 60, 0, ⲆΔ[1051], 3);
    this.ⵠΔΔ[Qr.ΔⵠᐃⲆᐃ].id = Qr.ΔⵠᐃⲆᐃ;
    this.ⵠΔΔ[Qr.ⲆⲆⵠⲆΔ] = mf(60, 60, 0, ⲆΔ[1082], 3);
    this.ⵠΔΔ[Qr.ⲆⲆⵠⲆΔ].id = Qr.ⲆⲆⵠⲆΔ;
    this.ⵠΔΔ[Qr.ⲆⲆΔᐃⵠ] = mf(60, 60, 0, ⲆΔ[1226], 3);
    this.ⵠΔΔ[Qr.ⲆⲆΔᐃⵠ].id = Qr.ⲆⲆΔᐃⵠ;
    this.ⵠΔΔ[Qr.ⵠᐃⵠΔᐃ] = mf(60, 60, 0, ⲆΔ[1191], 3);
    this.ⵠΔΔ[Qr.ⵠᐃⵠΔᐃ].id = Qr.ⵠᐃⵠΔᐃ;
    this.ⵠΔΔ[110] = mf(60, 60, 0, ⲆΔ[611], 3);
    this.ⵠΔΔ[110].id = 110;
    this.ⵠΔΔ[111] = mf(60, 60, 0, ⲆΔ[715], 3);
    this.ⵠΔΔ[111].id = 111;
    this.ⵠΔΔ[112] = mf(60, 60, 0, ⲆΔ[715], 3);
    this.ⵠΔΔ[112].id = 112;
    this.ⵠΔΔ[113] = mf(60, 60, 0, ⲆΔ[715], 3);
    this.ⵠΔΔ[113].id = 113;
    this.ⵠΔΔ[16] = mf(60, 60, 0, ⲆΔ[618], 3);
    this.ⵠΔΔ[16].id = 16;
    this.ⵠΔΔ[17] = mf(60, 60, 0, ⲆΔ[700], 3);
    this.ⵠΔΔ[17].id = 17;
    this.ⵠΔΔ[18] = mf(60, 60, 0, ⲆΔ[704], 3);
    this.ⵠΔΔ[18].id = 18;
    this.ⵠΔΔ[19] = mf(60, 60, 0, ⲆΔ[706], 3);
    this.ⵠΔΔ[19].id = 19;
    this.ⵠΔΔ[122] = mf(60, 60, 0, ⲆΔ[711], 3);
    this.ⵠΔΔ[122].id = 122;
    this.ⵠΔΔ[20] = mf(60, 60, 0, ⲆΔ[627], 3);
    this.ⵠΔΔ[20].id = 20;
    this.ⵠΔΔ[41] = mf(60, 60, 0, ⲆΔ[632], 3);
    this.ⵠΔΔ[41].id = 41;
    this.ⵠΔΔ[52] = mf(60, 60, 0, ⲆΔ[635], 3);
    this.ⵠΔΔ[52].id = 52;
    this.ⵠΔΔ[114] = mf(60, 60, 0, ⲆΔ[643], 3);
    this.ⵠΔΔ[114].id = 114;
    this.ⵠΔΔ[94] = mf(60, 60, 0, ⲆΔ[647], 3);
    this.ⵠΔΔ[94].id = 94;
    this.ⵠΔΔ[93] = mf(60, 60, 0, ⲆΔ[650], 3);
    this.ⵠΔΔ[93].id = 93;
    this.ⵠΔΔ[21] = mf(60, 60, 0, ⲆΔ[654], 3);
    this.ⵠΔΔ[21].id = 21;
    this.ⵠΔΔ[53] = mf(60, 60, 0, ⲆΔ[660], 3);
    this.ⵠΔΔ[53].id = 53;
    this.ⵠΔΔ[51] = mf(60, 60, 0, ⲆΔ[690], 3);
    this.ⵠΔΔ[51].id = 51;
    this.ⵠΔΔ[50] = mf(60, 60, 0, ⲆΔ[666], 3);
    this.ⵠΔΔ[50].id = 50;
    this.ⵠΔΔ[109] = mf(60, 60, 0, ⲆΔ[684], 3);
    this.ⵠΔΔ[109].id = 109;
    this.ⵠΔΔ[124] = mf(60, 60, 0, ⲆΔ[718], 3);
    this.ⵠΔΔ[124].id = 124;
    this.ⵠΔΔ[125] = mf(60, 60, 0, ⲆΔ[730], 3);
    this.ⵠΔΔ[125].id = 125;
    this.ⵠΔΔ[126] = mf(60, 60, 0, ⲆΔ[734], 3);
    this.ⵠΔΔ[126].id = 126;
    this.ⵠΔΔ[129] = mf(60, 60, 0, ⲆΔ[563], 3);
    this.ⵠΔΔ[129].id = 129;
    this.ⵠΔΔ[151] = mf(60, 60, 0, ⲆΔ[758], 3);
    this.ⵠΔΔ[151].id = 151;
    this.ⵠΔΔ[152] = mf(60, 60, 0, ⲆΔ[762], 3);
    this.ⵠΔΔ[152].id = 152;
    this.ⵠΔΔ[153] = mf(60, 60, 0, ⲆΔ[770], 3);
    this.ⵠΔΔ[153].id = 153;
    this.ⵠΔΔ[154] = mf(60, 60, 0, ⲆΔ[768], 3);
    this.ⵠΔΔ[154].id = 154;
    this.ⵠΔΔ[155] = mf(60, 60, 0, ⲆΔ[772], 3);
    this.ⵠΔΔ[155].id = 155;
    this.ⵠΔΔ[157] = mf(60, 60, 0, ⲆΔ[777], 3);
    this.ⵠΔΔ[157].id = 157;
    this.ⵠΔΔ[156] = mf(60, 60, 0, ⲆΔ[780], 3);
    this.ⵠΔΔ[156].id = 156;
    this.ⵠΔΔ[158] = mf(60, 60, 0, ⲆΔ[784], 3);
    this.ⵠΔΔ[158].id = 158;
    this.ⵠΔΔ[159] = mf(60, 60, 0, ⲆΔ[785], 3);
    this.ⵠΔΔ[159].id = 159;
    this.ⵠΔΔ[160] = mf(60, 60, 0, ⲆΔ[791], 3);
    this.ⵠΔΔ[160].id = 160;
    this.ⵠΔΔ[161] = mf(60, 60, 0, ⲆΔ[799], 3);
    this.ⵠΔΔ[161].id = 161;
    this.ⵠΔΔ[42] = mf(60, 60, 0, ⲆΔ[809], 3);
    this.ⵠΔΔ[42].id = 42;
    this.ⵠΔΔ[43] = mf(60, 60, 0, ⲆΔ[835], 3);
    this.ⵠΔΔ[43].id = 43;
    this.ⵠΔΔ[107] = mf(60, 60, 0, ⲆΔ[843], 3);
    this.ⵠΔΔ[107].id = 107;
    this.ⵠΔΔ[44] = mf(60, 60, 0, ⲆΔ[846], 3);
    this.ⵠΔΔ[44].id = 44;
    this.ⵠΔΔ[46] = mf(60, 60, 0, ⲆΔ[960], 3);
    this.ⵠΔΔ[46].id = 46;
    this.ⵠΔΔ[45] = mf(60, 60, 0, ⲆΔ[950], 3);
    this.ⵠΔΔ[45].id = 45;
    this.ⵠΔΔ[47] = mf(60, 60, 0, ⲆΔ[967], 3);
    this.ⵠΔΔ[47].id = 47;
    this.ⵠΔΔ[48] = mf(60, 60, 0, ⲆΔ[982], 3);
    this.ⵠΔΔ[48].id = 48;
    this.ⵠΔΔ[25] = mf(60, 60, 0, ⲆΔ[402], 3);
    this.ⵠΔΔ[25].id = 25;
    this.ⵠΔΔ[31] = mf(60, 60, 0, ⲆΔ[876], 3);
    this.ⵠΔΔ[31].id = 31;
    this.ⵠΔΔ[33] = mf(60, 60, 0, ⲆΔ[900], 3);
    this.ⵠΔΔ[33].id = 33;
    this.ⵠΔΔ[162] = mf(60, 60, 0, ⲆΔ[909], 3);
    this.ⵠΔΔ[162].id = 162;
    this.ⵠΔΔ[128] = mf(60, 60, 0, ⲆΔ[912], 3);
    this.ⵠΔΔ[128].id = 128;
    this.Ⲇⵠⵠ[53] = mf(68, 68, 0, ⲆΔ[976], 3);
    this.Ⲇⵠⵠ[53].id = 53;
    this.ⲆΔΔ[53] = mf(60, 60, 0, ⲆΔ[975], 3);
    this.ⲆΔΔ[53].id = 53;
    this.ⵠΔΔ[22] = mf(60, 60, 0, ⲆΔ[977], 3);
    this.ⵠΔΔ[22].id = 22;
    this.Ⲇⵠⵠ[54] = mf(68, 68, 0, ⲆΔ[979], 3);
    this.Ⲇⵠⵠ[54].id = 54;
    this.ⲆΔΔ[54] = mf(60, 60, 0, ⲆΔ[978], 3);
    this.ⲆΔΔ[54].id = 54;
    this.ⵠΔΔ[23] = mf(60, 60, 0, ⲆΔ[980], 3);
    this.ⵠΔΔ[23].id = 23;
    this.Ⲇⵠⵠ[56] = mf(68, 68, 0, ⲆΔ[713], 3);
    this.Ⲇⵠⵠ[56].id = 56;
    this.ⲆΔΔ[56] = mf(60, 60, 0, ⲆΔ[712], 3);
    this.ⲆΔΔ[56].id = 56;
    this.ⵠΔΔ[123] = mf(60, 60, 0, ⲆΔ[714], 3);
    this.ⵠΔΔ[123].id = 123;
    this.Ⲇⵠⵠ[82] = mf(68, 68, 0, ⲆΔ[428], 3);
    this.Ⲇⵠⵠ[82].id = 82;
    this.ⲆΔΔ[82] = mf(60, 60, 0, ⲆΔ[426], 3);
    this.ⲆΔΔ[82].id = 82;
    this.ⵠΔΔ[82] = mf(60, 60, 0, ⲆΔ[427], 3);
    this.ⵠΔΔ[82].id = 82;
    this.Ⲇⵠⵠ[235] = mf(68, 68, 0, ⲆΔ[1159], 3);
    this.Ⲇⵠⵠ[235].id = 235;
    this.ⲆΔΔ[235] = mf(60, 60, 0, ⲆΔ[1158], 3);
    this.ⲆΔΔ[235].id = 235;
    this.Ⲇⵠⵠ[238] = mf(68, 68, 0, ⲆΔ[1188], 3);
    this.Ⲇⵠⵠ[238].id = 238;
    this.ⲆΔΔ[238] = mf(60, 60, 0, ⲆΔ[1187], 3);
    this.ⲆΔΔ[238].id = 238;
    this.Ⲇⵠⵠ[236] = mf(68, 68, 0, ⲆΔ[1161], 3);
    this.Ⲇⵠⵠ[236].id = 236;
    this.ⲆΔΔ[236] = mf(60, 60, 0, ⲆΔ[1160], 3);
    this.ⲆΔΔ[236].id = 236;
    this.Ⲇⵠⵠ[152] = mf(68, 68, 0, ⲆΔ[1197], 3);
    this.Ⲇⵠⵠ[152].id = 152;
    this.ⲆΔΔ[152] = mf(60, 60, 0, ⲆΔ[1195], 3);
    this.ⲆΔΔ[152].id = 152;
    this.ⵠΔΔ[116] = mf(60, 60, 0, ⲆΔ[1196], 3);
    this.ⵠΔΔ[116].id = 116;
    this.Ⲇⵠⵠ[212] = mf(68, 68, 0, ⲆΔ[992], 3);
    this.Ⲇⵠⵠ[212].id = 212;
    this.ⲆΔΔ[212] = mf(60, 60, 0, ⲆΔ[991], 3);
    this.ⲆΔΔ[212].id = 212;
    this.ⵠΔΔ[73] = mf(60, 60, 0, ⲆΔ[990], 3);
    this.ⵠΔΔ[73].id = 73;
    this.Ⲇⵠⵠ[213] = mf(68, 68, 0, ⲆΔ[995], 3);
    this.Ⲇⵠⵠ[213].id = 213;
    this.ⲆΔΔ[213] = mf(60, 60, 0, ⲆΔ[994], 3);
    this.ⲆΔΔ[213].id = 213;
    this.ⵠΔΔ[74] = mf(60, 60, 0, ⲆΔ[993], 3);
    this.ⵠΔΔ[74].id = 74;
    this.Ⲇⵠⵠ[214] = mf(68, 68, 0, ⲆΔ[998], 3);
    this.Ⲇⵠⵠ[214].id = 214;
    this.ⲆΔΔ[214] = mf(60, 60, 0, ⲆΔ[997], 3);
    this.ⲆΔΔ[214].id = 214;
    this.ⵠΔΔ[75] = mf(60, 60, 0, ⲆΔ[996], 3);
    this.ⵠΔΔ[75].id = 75;
    this.Ⲇⵠⵠ[215] = mf(68, 68, 0, ⲆΔ[1001], 3);
    this.Ⲇⵠⵠ[215].id = 215;
    this.ⲆΔΔ[215] = mf(60, 60, 0, ⲆΔ[1000], 3);
    this.ⲆΔΔ[215].id = 215;
    this.ⵠΔΔ[76] = mf(60, 60, 0, ⲆΔ[999], 3);
    this.ⵠΔΔ[76].id = 76;
    this.Ⲇⵠⵠ[216] = mf(68, 68, 0, ⲆΔ[1004], 3);
    this.Ⲇⵠⵠ[216].id = 216;
    this.ⲆΔΔ[216] = mf(60, 60, 0, ⲆΔ[1003], 3);
    this.ⲆΔΔ[216].id = 216;
    this.ⵠΔΔ[77] = mf(60, 60, 0, ⲆΔ[1002], 3);
    this.ⵠΔΔ[77].id = 77;
    this.Ⲇⵠⵠ[220] = mf(68, 68, 0, ⲆΔ[1007], 3);
    this.Ⲇⵠⵠ[220].id = 220;
    this.ⲆΔΔ[220] = mf(60, 60, 0, ⲆΔ[1006], 3);
    this.ⲆΔΔ[220].id = 220;
    this.ⵠΔΔ[78] = mf(60, 60, 0, ⲆΔ[1005], 3);
    this.ⵠΔΔ[78].id = 78;
    this.Ⲇⵠⵠ[217] = mf(68, 68, 0, ⲆΔ[1016], 3);
    this.Ⲇⵠⵠ[217].id = 217;
    this.ⲆΔΔ[217] = mf(60, 60, 0, ⲆΔ[1015], 3);
    this.ⲆΔΔ[217].id = 217;
    this.ⵠΔΔ[60] = mf(60, 60, 0, ⲆΔ[1014], 3);
    this.ⵠΔΔ[60].id = 60;
    this.Ⲇⵠⵠ[219] = mf(68, 68, 0, ⲆΔ[1013], 3);
    this.Ⲇⵠⵠ[219].id = 219;
    this.ⲆΔΔ[219] = mf(60, 60, 0, ⲆΔ[1012], 3);
    this.ⲆΔΔ[219].id = 219;
    this.ⵠΔΔ[72] = mf(60, 60, 0, ⲆΔ[1011], 3);
    this.ⵠΔΔ[72].id = 72;
    this.Ⲇⵠⵠ[218] = mf(68, 68, 0, ⲆΔ[1010], 3);
    this.Ⲇⵠⵠ[218].id = 218;
    this.ⲆΔΔ[218] = mf(60, 60, 0, ⲆΔ[1009], 3);
    this.ⲆΔΔ[218].id = 218;
    this.ⵠΔΔ[66] = mf(60, 60, 0, ⲆΔ[1008], 3);
    this.ⵠΔΔ[66].id = 66;
    this.Ⲇⵠⵠ[153] = mf(68, 68, 0, ⲆΔ[1201], 3);
    this.Ⲇⵠⵠ[153].id = 153;
    this.ⲆΔΔ[153] = mf(60, 60, 0, ⲆΔ[1199], 3);
    this.ⲆΔΔ[153].id = 153;
    this.ⵠΔΔ[117] = mf(60, 60, 0, ⲆΔ[1200], 3);
    this.ⵠΔΔ[117].id = 117;
    this.Ⲇⵠⵠ[154] = mf(68, 68, 0, ⲆΔ[1205], 3);
    this.Ⲇⵠⵠ[154].id = 154;
    this.ⲆΔΔ[154] = mf(60, 60, 0, ⲆΔ[1203], 3);
    this.ⲆΔΔ[154].id = 154;
    this.ⵠΔΔ[118] = mf(60, 60, 0, ⲆΔ[1204], 3);
    this.ⵠΔΔ[118].id = 118;
    this.Ⲇⵠⵠ[155] = mf(68, 68, 0, ⲆΔ[1209], 3);
    this.Ⲇⵠⵠ[155].id = 155;
    this.ⲆΔΔ[155] = mf(60, 60, 0, ⲆΔ[1207], 3);
    this.ⲆΔΔ[155].id = 155;
    this.ⵠΔΔ[119] = mf(60, 60, 0, ⲆΔ[1208], 3);
    this.ⵠΔΔ[119].id = 119;
    this.Ⲇⵠⵠ[156] = mf(68, 68, 0, ⲆΔ[1213], 3);
    this.Ⲇⵠⵠ[156].id = 156;
    this.ⲆΔΔ[156] = mf(60, 60, 0, ⲆΔ[1211], 3);
    this.ⲆΔΔ[156].id = 156;
    this.ⵠΔΔ[120] = mf(60, 60, 0, ⲆΔ[1212], 3);
    this.ⵠΔΔ[120].id = 120;
    this.Ⲇⵠⵠ[157] = mf(68, 68, 0, ⲆΔ[1217], 3);
    this.Ⲇⵠⵠ[157].id = 157;
    this.ⲆΔΔ[157] = mf(60, 60, 0, ⲆΔ[1215], 3);
    this.ⲆΔΔ[157].id = 157;
    this.ⵠΔΔ[121] = mf(60, 60, 0, ⲆΔ[1216], 3);
    this.ⵠΔΔ[121].id = 121;
    this.Ⲇⵠⵠ[203] = mf(68, 68, 0, ⲆΔ[937], 3);
    this.Ⲇⵠⵠ[203].id = 203;
    this.ⲆΔΔ[203] = mf(60, 60, 0, ⲆΔ[936], 3);
    this.ⲆΔΔ[203].id = 203;
    this.ⲆΔΔ[203].info.ⵠⵠ[2] = this.ⲆΔΔ[203].info.ⵠⵠ[0];
    this.Ⲇⵠⵠ[150] = mf(68, 68, 0, ⲆΔ[524], 3);
    this.Ⲇⵠⵠ[150].id = 150;
    this.ⲆΔΔ[150] = mf(60, 60, 0, ⲆΔ[523], 3);
    this.ⲆΔΔ[150].id = 150;
    this.ⲆΔΔ[150].info.ⵠⵠ[2] = this.ⲆΔΔ[150].info.ⵠⵠ[0];
    this.Ⲇⵠⵠ[202] = mf(68, 68, 0, ⲆΔ[939], 3);
    this.Ⲇⵠⵠ[202].id = 202;
    this.ⲆΔΔ[202] = mf(60, 60, 0, ⲆΔ[938], 3);
    this.ⲆΔΔ[202].id = 202;
    this.ⲆΔΔ[202].info.ⵠⵠ[2] = this.ⲆΔΔ[202].info.ⵠⵠ[0];
    this.Ⲇⵠⵠ[19] = mf(68, 68, 0, ⲆΔ[934], 3);
    this.Ⲇⵠⵠ[19].id = 19;
    this.ⲆΔΔ[19] = mf(60, 60, 0, ⲆΔ[932], 3);
    this.ⲆΔΔ[19].id = 19;
    this.ⵠΔΔ[39] = mf(60, 60, 0, ⲆΔ[933], 3);
    this.ⵠΔΔ[39].id = 39;
    this.Ⲇⵠⵠ[20] = mf(68, 68, 0, ⲆΔ[923], 3);
    this.Ⲇⵠⵠ[20].id = 20;
    this.ⲆΔΔ[20] = mf(60, 60, 0, ⲆΔ[921], 3);
    this.ⲆΔΔ[20].id = 20;
    this.ⵠΔΔ[95] = mf(60, 60, 0, ⲆΔ[922], 3);
    this.ⵠΔΔ[95].id = 95;
    this.Ⲇⵠⵠ[21] = mf(68, 68, 0, ⲆΔ[927], 3);
    this.Ⲇⵠⵠ[21].id = 21;
    this.ⲆΔΔ[21] = mf(60, 60, 0, ⲆΔ[925], 3);
    this.ⲆΔΔ[21].id = 21;
    this.ⵠΔΔ[96] = mf(60, 60, 0, ⲆΔ[926], 3);
    this.ⵠΔΔ[96].id = 96;
    this.Ⲇⵠⵠ[22] = mf(68, 68, 0, ⲆΔ[931], 3);
    this.Ⲇⵠⵠ[22].id = 22;
    this.ⲆΔΔ[22] = mf(60, 60, 0, ⲆΔ[929], 3);
    this.ⲆΔΔ[22].id = 22;
    this.ⵠΔΔ[97] = mf(60, 60, 0, ⲆΔ[930], 3);
    this.ⵠΔΔ[97].id = 97;
    this.Ⲇⵠⵠ[60] = mf(68, 68, 0, ⲆΔ[736], 3);
    this.Ⲇⵠⵠ[60].id = 60;
    this.ⲆΔΔ[60] = mf(60, 60, 0, ⲆΔ[735], 3);
    this.ⲆΔΔ[60].id = 60;
    this.ⵠΔΔ[127] = mf(60, 60, 0, ⲆΔ[737], 3);
    this.ⵠΔΔ[127].id = 127;
    this.Ⲇⵠⵠ[90] = mf(68, 68, 0, ⲆΔ[739], 3);
    this.Ⲇⵠⵠ[90].id = 90;
    this.ⲆΔΔ[90] = mf(60, 60, 0, ⲆΔ[738], 3);
    this.ⲆΔΔ[90].id = 90;
    this.ⵠΔΔ[173] = mf(60, 60, 0, ⲆΔ[740], 3);
    this.ⵠΔΔ[173].id = 173;
    this.Ⲇⵠⵠ[92] = mf(68, 68, 0, ⲆΔ[745], 3);
    this.Ⲇⵠⵠ[92].id = 92;
    this.ⲆΔΔ[92] = mf(60, 60, 0, ⲆΔ[744], 3);
    this.ⲆΔΔ[92].id = 92;
    this.ⵠΔΔ[174] = mf(60, 60, 0, ⲆΔ[746], 3);
    this.ⵠΔΔ[174].id = 174;
    this.Ⲇⵠⵠ[93] = mf(68, 68, 0, ⲆΔ[748], 3);
    this.Ⲇⵠⵠ[93].id = 93;
    this.ⲆΔΔ[93] = mf(60, 60, 0, ⲆΔ[747], 3);
    this.ⲆΔΔ[93].id = 93;
    this.ⵠΔΔ[175] = mf(60, 60, 0, ⲆΔ[749], 3);
    this.ⵠΔΔ[175].id = 175;
    this.Ⲇⵠⵠ[91] = mf(68, 68, 0, ⲆΔ[742], 3);
    this.Ⲇⵠⵠ[91].id = 91;
    this.ⲆΔΔ[91] = mf(60, 60, 0, ⲆΔ[741], 3);
    this.ⲆΔΔ[91].id = 91;
    this.ⵠΔΔ[176] = mf(60, 60, 0, ⲆΔ[743], 3);
    this.ⵠΔΔ[176].id = 176;
    this.Ⲇⵠⵠ[100] = mf(68, 68, 0, ⲆΔ[1165], 3);
    this.Ⲇⵠⵠ[100].id = 100;
    this.ⲆΔΔ[100] = mf(60, 60, 0, ⲆΔ[1164], 3);
    this.ⲆΔΔ[100].id = 100;
    this.ⵠΔΔ[Qr.ΔΔᐃⵠΔ] = mf(60, 60, 0, ⲆΔ[Nr.ⲆΔΔΔΔᐃⵠⲆⵠ], 3);
    this.ⵠΔΔ[Qr.ΔΔᐃⵠΔ].id = Qr.ΔΔᐃⵠΔ;
    this.Ⲇⵠⵠ[34] = mf(68, 68, 0, ⲆΔ[945], 3);
    this.Ⲇⵠⵠ[34].id = 34;
    this.ⲆΔΔ[34] = mf(60, 60, 0, ⲆΔ[943], 3);
    this.ⲆΔΔ[34].id = 34;
    this.ⵠΔΔ[30] = mf(60, 60, 0, ⲆΔ[944], 3);
    this.ⵠΔΔ[30].id = 30;
    this.Ⲇⵠⵠ[44] = mf(68, 68, 0, ⲆΔ[948], 3);
    this.Ⲇⵠⵠ[44].id = 44;
    this.ⲆΔΔ[44] = mf(60, 60, 0, ⲆΔ[946], 3);
    this.ⲆΔΔ[44].id = 44;
    this.ⵠΔΔ[92] = mf(60, 60, 0, ⲆΔ[947], 3);
    this.ⵠΔΔ[92].id = 92;
    this.Ⲇⵠⵠ[17] = mf(68, 68, 0, ⲆΔ[878], 3);
    this.Ⲇⵠⵠ[17].id = 17;
    this.ⲆΔΔ[17] = mf(60, 60, 0, ⲆΔ[877], 3);
    this.ⲆΔΔ[17].id = 17;
    this.ⵠΔΔ[32] = mf(60, 60, 0, ⲆΔ[879], 3);
    this.ⵠΔΔ[32].id = 32;
    this.Ⲇⵠⵠ[63] = mf(68, 68, 0, ⲆΔ[568], 3);
    this.Ⲇⵠⵠ[63].id = 63;
    this.ⲆΔΔ[63] = mf(60, 60, 0, ⲆΔ[566], 3);
    this.ⲆΔΔ[63].id = 63;
    this.ⵠΔΔ[130] = mf(60, 60, 0, ⲆΔ[567], 3);
    this.ⵠΔΔ[130].id = 130;
    this.Ⲇⵠⵠ[187] = mf(68, 68, 0, ⲆΔ[591], 3);
    this.Ⲇⵠⵠ[187].id = 187;
    this.ⲆΔΔ[187] = mf(60, 60, 0, ⲆΔ[253], 3);
    this.ⲆΔΔ[187].id = 187;
    this.Ⲇⵠⵠ[Rr.ⵠⲆⵠΔⲆΔΔ] = mf(68, 68, 0, ⲆΔ[Nr.ⲆⵠⲆΔⲆⲆⲆΔᐃ], 3);
    this.Ⲇⵠⵠ[Rr.ⵠⲆⵠΔⲆΔΔ].id = Rr.ⵠⲆⵠΔⲆΔΔ;
    this.ⲆΔΔ[Rr.ⵠⲆⵠΔⲆΔΔ] = mf(60, 60, 0, ⲆΔ[Nr.ⵠᐃᐃⵠⵠⵠΔΔⵠ], 3);
    this.ⲆΔΔ[Rr.ⵠⲆⵠΔⲆΔΔ].id = Rr.ⵠⲆⵠΔⲆΔΔ;
    this.Ⲇⵠⵠ[Rr.ΔⲆⲆᐃᐃΔⲆ] = mf(68, 68, 0, ⲆΔ[Nr.ᐃΔⵠΔᐃⵠΔΔΔ], 3);
    this.Ⲇⵠⵠ[Rr.ΔⲆⲆᐃᐃΔⲆ].id = Rr.ΔⲆⲆᐃᐃΔⲆ;
    this.ⲆΔΔ[Rr.ΔⲆⲆᐃᐃΔⲆ] = mf(60, 60, 0, ⲆΔ[Nr.ᐃⵠⲆΔΔⵠⵠⵠⵠ], 3);
    this.ⲆΔΔ[Rr.ΔⲆⲆᐃᐃΔⲆ].id = Rr.ΔⲆⲆᐃᐃΔⲆ;
    this.Ⲇⵠⵠ[Rr.ᐃΔᐃᐃΔⵠⲆ] = mf(68, 68, 0, ⲆΔ[Nr.ᐃⲆⵠΔᐃⵠⲆᐃⲆ], 3);
    this.Ⲇⵠⵠ[Rr.ᐃΔᐃᐃΔⵠⲆ].id = Rr.ᐃΔᐃᐃΔⵠⲆ;
    this.ⲆΔΔ[Rr.ᐃΔᐃᐃΔⵠⲆ] = mf(60, 60, 0, ⲆΔ[Nr.ΔᐃΔΔⵠᐃᐃΔⵠ], 3);
    this.ⲆΔΔ[Rr.ᐃΔᐃᐃΔⵠⲆ].id = Rr.ᐃΔᐃᐃΔⵠⲆ;
    this.Ⲇⵠⵠ[Rr.ⲆΔⲆⲆⲆᐃⵠ] = mf(68, 68, 0, ⲆΔ[Nr.ΔΔΔⵠᐃΔᐃΔⵠ], 3);
    this.Ⲇⵠⵠ[Rr.ⲆΔⲆⲆⲆᐃⵠ].id = Rr.ⲆΔⲆⲆⲆᐃⵠ;
    this.ⲆΔΔ[Rr.ⲆΔⲆⲆⲆᐃⵠ] = mf(60, 60, 0, ⲆΔ[Nr.ᐃⵠΔⲆᐃΔΔᐃⵠ], 3);
    this.ⲆΔΔ[Rr.ⲆΔⲆⲆⲆᐃⵠ].id = Rr.ⲆΔⲆⲆⲆᐃⵠ;
    this.Ⲇⵠⵠ[Rr.ⵠⲆΔⲆᐃⲆⵠ] = mf(68, 68, 0, ⲆΔ[Nr.ᐃᐃΔᐃⲆⵠΔⲆΔ], 3);
    this.Ⲇⵠⵠ[Rr.ⵠⲆΔⲆᐃⲆⵠ].id = Rr.ⵠⲆΔⲆᐃⲆⵠ;
    this.ⲆΔΔ[Rr.ⵠⲆΔⲆᐃⲆⵠ] = mf(60, 60, 0, ⲆΔ[Nr.ᐃⲆⲆᐃⲆⵠᐃΔΔ], 3);
    this.ⲆΔΔ[Rr.ⵠⲆΔⲆᐃⲆⵠ].id = Rr.ⵠⲆΔⲆᐃⲆⵠ;
    this.ΔⲆΔΔⲆᐃᐃ = function () {
      for (var a = kx.ⲆⲆⲆⲆ.ᐃⲆⵠⵠⲆ, b = 10, c = 10, d = 0; d < a.length; d++) {
        if (d > 0 && !(d % 4)) {
          b += a[0].info.width + 10;
          c = 10;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += 10 + a[d].info.height;
      }
    };
    this.ⵠⵠⲆⲆΔⵠᐃ = function () {
      var a = Math.floor(Math.floor((3 + kx.ⲆⲆⲆⲆ.ᐃⲆⵠⵠⲆ.length) / 4) * (10 + this.Ⲇⵠⵠ[0].info.ⵠⵠ[0].width) + 35);
      for (var b = 0; b < this.Ⲇⵠⵠ.length; b++) {
        if (this.Ⲇⵠⵠ[b]) {
          this.Ⲇⵠⵠ[b].info.translate.x = a;
          this.Ⲇⵠⵠ[b].info.translate.y = 22;
        }
      }
      this.ⵠᐃᐃᐃⵠᐃⲆ.info.translate.x = a + 17;
      this.ⵠᐃᐃᐃⵠᐃⲆ.info.translate.y = 22 + ⲆΔ[339].height;
      this.ᐃΔΔΔⲆΔⲆ.info.translate.x = a + 17;
      this.ᐃΔΔΔⲆΔⲆ.info.translate.y = 30;
      this.ΔΔⵠΔᐃⲆⵠ.info.translate.x = a + 17;
      this.ΔΔⵠΔᐃⲆⵠ.info.translate.y = 22 + ⲆΔ[339].height;
    };
    this.ᐃΔΔᐃⲆᐃΔⲆᐃ = function () {
      var a = Math.floor((so - ⲆΔ[556][0].width) / 2);
      for (var b = 0; this.ΔⵠΔⵠⵠ.length > b; b++) {
        this.ΔⵠΔⵠⵠ[b].button.info.translate.x = a;
        this.ΔⵠΔⵠⵠ[b].button.info.translate.y = -13;
      }
    };
    this.ΔΔⵠⵠΔⵠᐃ = function () {
      var a = 12 + Math.floor(Math.floor((3 + kx.ⲆⲆⲆⲆ.ᐃⲆⵠⵠⲆ.length) / 4) * (10 + this.ⵠΔⵠⲆⲆᐃΔ.info.ⵠⵠ[0].width) + 35);
      this.ⵠΔⵠⲆⲆᐃΔ.info.translate.x = a;
      this.ⵠΔⵠⲆⲆᐃΔ.info.translate.y = 33;
      this.ⵠⵠⵠⲆⲆᐃⵠ.info.translate.x = this.ⵠΔⵠⲆⲆᐃΔ.info.translate.x;
      this.ⵠⵠⵠⲆⲆᐃⵠ.info.translate.y = 137;
      this.Δᐃⵠᐃⵠᐃⵠ.info.translate.x = this.ⵠΔⵠⲆⲆᐃΔ.info.translate.x;
      this.Δᐃⵠᐃⵠᐃⵠ.info.translate.y = 240;
    };
    this.ⵠΔᐃⲆᐃⵠⲆ = function () {
      var a = 12 + Math.floor((10 + this.ⵠᐃⵠⵠΔⵠⲆ.info.ⵠⵠ[0].width) * Math.floor((3 + kx.ⲆⲆⲆⲆ.ᐃⲆⵠⵠⲆ.length) / 4) + 35);
      this.ⵠᐃⵠⵠΔⵠⲆ.info.translate.x = a;
      this.ⵠᐃⵠⵠΔⵠⲆ.info.translate.y = 36;
      a += 83;
      this.ⵠΔⵠⲆⲆⲆⲆ.info.translate.x = a;
      this.ⵠΔⵠⲆⲆⲆⲆ.info.translate.y = 36;
      this.ⲆᐃⲆⵠΔⲆⲆ.info.translate.x = a;
      this.ⲆᐃⲆⵠΔⲆⲆ.info.translate.y = 36;
      this.ΔⵠΔⲆΔᐃᐃ.info.translate.x = a;
      this.ΔⵠΔⲆΔᐃᐃ.info.translate.y = 36;
      this.ΔⲆⲆΔⵠᐃⲆ.info.translate.x = a;
      this.ΔⲆⲆΔⵠᐃⲆ.info.translate.y = 36;
      this.ᐃΔⵠⲆⲆᐃΔ.info.translate.x = a;
      this.ᐃΔⵠⲆⲆᐃΔ.info.translate.y = 36;
    };
    this.ⵠⲆᐃᐃⵠⲆᐃ = function () {
      var a = 12 + Math.floor((10 + this.ᐃΔΔᐃΔᐃᐃ.info.ⵠⵠ[0].width) * Math.floor((3 + kx.ⲆⲆⲆⲆ.ᐃⲆⵠⵠⲆ.length) / 4) + 35);
      this.ᐃΔΔᐃΔᐃᐃ.info.translate.x = a;
      this.ᐃΔΔᐃΔᐃᐃ.info.translate.y = 36;
      a += 83;
      this.ᐃⲆⵠᐃᐃᐃⲆ.info.translate.x = a;
      this.ᐃⲆⵠᐃᐃᐃⲆ.info.translate.y = 36;
    };
    this.ΔᐃᐃⵠⲆⵠΔ = function () {
      var a = Math.floor((10 + this.ᐃⵠⵠᐃⲆⵠⲆ.info.ⵠⵠ[0].width) * Math.floor((3 + kx.ⲆⲆⲆⲆ.ᐃⲆⵠⵠⲆ.length) / 4) + 35);
      this.ᐃⵠⵠᐃⲆⵠⲆ.info.translate.x = a;
      this.ᐃⵠⵠᐃⲆⵠⲆ.info.translate.y = 22;
    };
    this.ᐃⲆⵠΔⲆⲆⲆ = function () {
      var a = kx.ᐃΔΔⵠ.ⲆΔⵠᐃⲆ;
      if (a.length > 0) {
        var b = Math.floor((so - (a[0].info.width + 5) * kx.ᐃΔΔⵠ.max) / 2);
      }
      for (var c = 0; c < a.length; c++) {
        a[c].info.translate.x = b + c * (a[c].info.width + 5);
        a[c].info.translate.y = yo - a[c].info.width - 10;
        this.ⵠⲆⲆΔⲆ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
        this.ⵠⲆⲆΔⲆ[a[c].id].info.translate.y = a[c].info.translate.y - this.ⵠⲆⲆΔⲆ[a[c].id].info.ⵠⵠ[0].height - 6;
      }
    };
    var l;
    var o = 0;
    function p() {
      j.ᐃⲆᐃ();
      if (++o == 30) {
        j.ⵠΔᐃᐃⲆΔᐃ();
        j.ᐃⲆᐃ();
        return;
      }
      sa.setTimeout(p, 33);
    }
    this.ⲆᐃⵠⵠΔ = function (a) {
      if (kx.ᐃⲆΔΔⵠ.open) {
        kx.ᐃⲆΔΔⵠ.ⲆᐃⵠⵠΔ();
      }
      if (kx.ⵠⵠⲆⵠⵠ.open) {
        kx.ⵠⵠⲆⵠⵠ.ⲆᐃⵠⵠΔ();
      }
      document.getElementById("team_box").style.display = "none";
      j.ⵠᐃⵠⲆᐃ.style.display = "none";
      j.ⵠᐃⵠⲆᐃ.open = cl;
      j.sign.style.display = "none";
      j.sign.open = false;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      j.ⵠᐃΔⲆ.open = zl;
      document.getElementById("option_in_game").style.display = "none";
      j.options.open = false;
      document.getElementById("sure_delete").style.display = "none";
      j.ⵠⵠⵠⲆ.open = zl;
      document.getElementById("cancel_sure_delete").style.display = "none";
      j.ⵠΔⲆⵠⲆ.open = cl;
      document.getElementById("chronoquest").style.display = "none";
      j.ⵠᐃᐃⲆ.open = false;
      l = a;
      j.ᐃⵠΔᐃᐃⲆⵠ();
      j.Δᐃ.style.cursor = j.ᐃᐃᐃⵠΔΔᐃ;
      ox.ⲆᐃⵠⵠΔ();
      q = -1;
      s();
      ux();
    };
    var q = -1;
    function s() {
      j.ᐃⲆᐃ();
      if (++q == 30) {
        j.stop();
        l();
        return;
      }
      sa.setTimeout(s, 33);
    }
    this.ⲆΔᐃᐃᐃ = Rh;
    this.stop = function () {
      this.ⲆΔᐃᐃᐃ = Ph;
    };
    this.ᐃⲆⵠΔΔ = function () {
      mx.ᐃⵠⲆⵠᐃⵠᐃⲆΔ();
      j.ⲆΔᐃᐃᐃ = rl;
      q = -1;
      o = 0;
      p();
    };
    this.ᐃⲆᐃ = function () {
      this.ᐃᐃᐃᐃ.translate.x = so - this.ᐃᐃᐃᐃ.ⵠⵠ.width - 10;
      this.ᐃᐃᐃᐃ.translate.y = 5;
      jx.ᐃᐃΔⵠΔ.translate.x = this.ᐃᐃᐃᐃ.translate.x - ⲆΔ[725][0].width - 85;
      jx.ᐃᐃΔⵠΔ.translate.y = 10;
      this.ⵠᐃΔⲆ.button.info.translate.x = this.ᐃᐃᐃᐃ.translate.x - ⲆΔ[708][0].width - 10;
      this.ⵠᐃΔⲆ.button.info.translate.y = 10;
      this.ⵠᐃᐃⲆ.button.info.translate.x = this.ᐃᐃᐃᐃ.translate.x - ⲆΔ[755][0].width - 20;
      this.ⵠᐃᐃⲆ.button.info.translate.y = this.ⵠᐃΔⲆ.button.info.translate.y + ⲆΔ[708][0].height + 5;
      this.options.button.info.translate.x = this.ᐃᐃᐃᐃ.translate.x - ⲆΔ[727][0].width - 20;
      this.options.button.info.translate.y = this.ⵠᐃᐃⲆ.button.info.translate.y + ⲆΔ[727][0].height + 18;
      this.ᐃⵠᐃⲆ.ᐃⵠᐃⲆᐃΔΔ.info.translate.x = this.ᐃᐃᐃᐃ.translate.x - ⲆΔ[727][0].width - 20;
      this.ᐃⵠᐃⲆ.ᐃⵠᐃⲆᐃΔΔ.info.translate.y = this.options.button.info.translate.y + ⲆΔ[783][0].height;
      this.ᐃⵠᐃⲆ.ⵠⲆᐃⵠᐃΔΔ.info.translate.x = this.ᐃᐃᐃᐃ.translate.x - ⲆΔ[727][0].width - 20;
      this.ᐃⵠᐃⲆ.ⵠⲆᐃⵠᐃΔΔ.info.translate.y = this.options.button.info.translate.y + ⲆΔ[783][0].height;
      this.ⵠᐃⵠⲆᐃ.button.info.translate.x = this.ᐃᐃᐃᐃ.translate.x - ⲆΔ[795][0].width - 20;
      this.ⵠᐃⵠⲆᐃ.button.info.translate.y = this.ᐃⵠᐃⲆ.ᐃⵠᐃⲆᐃΔΔ.info.translate.y + ⲆΔ[795][0].height;
      kx.ᐃΔⲆᐃᐃ.translate.x = this.ᐃᐃᐃᐃ.translate.x - 63 - 85;
      kx.ᐃΔⲆᐃᐃ.translate.y = 100;
      kx.ΔⲆⵠᐃⵠ.translate.x = this.ᐃᐃᐃᐃ.translate.x - ⲆΔ[517].width - 85;
      kx.ΔⲆⵠᐃⵠ.translate.y = kx.ᐃΔⲆᐃᐃ.translate.y + 10 + ⲆΔ[546].height;
      this.ᐃΔᐃⵠᐃ.translate.y = yo - 3 - 193;
      this.ᐃΔᐃⵠᐃ.translate.x = so - 3 - 193;
      this.ᐃⵠⲆⵠ.translate.x = 5;
      this.ᐃⵠⲆⵠ.translate.y = yo - this.ᐃⵠⲆⵠ.ⵠⵠ.height - 5;
      this.ⵠᐃⲆΔⵠ.button.info.translate.x = zo - 91 / 2;
      this.ⵠᐃⲆΔⵠ.button.info.translate.y = 50;
      this.ΔⲆΔΔⲆᐃᐃ();
      this.ᐃⲆⵠΔⲆⲆⲆ();
      this.ⵠⵠⲆⲆΔⵠᐃ();
      this.ΔᐃᐃⵠⲆⵠΔ();
      this.ⵠⲆᐃᐃⵠⲆᐃ();
      this.ⵠΔᐃⲆᐃⵠⲆ();
      this.ΔΔⵠⵠΔⵠᐃ();
      this.ᐃΔΔᐃⲆᐃΔⲆᐃ();
      this.sign.ΔᐃΔⲆⲆⵠΔ();
      Ep();
      kx.ᐃⲆΔΔⵠ.ᐃⲆᐃ();
      kx.ⵠⵠⲆⵠⵠ.ᐃⲆᐃ();
      this.ᐃΔΔⵠⵠⲆⲆⲆⲆ.ᐃⲆᐃ();
      this.ⵠᐃΔⲆ.ᐃⵠⵠΔΔⲆⲆ.ᐃⲆᐃ();
      this.ⵠᐃΔⲆ.list.ᐃⲆᐃ();
      this.ⵠⵠⵠⲆ.ᐃⲆᐃ();
      this.ⵠΔⲆⵠⲆ.ᐃⲆᐃ();
      this.ⵠᐃᐃⲆ.ᐃⲆᐃ();
      this.ⵠᐃⲆΔⵠ.ᐃⲆᐃ();
      this.options.ᐃⲆᐃ();
      this.ⵠᐃⵠⲆᐃ.ᐃⲆᐃ();
      this.sign.ᐃⲆᐃ();
      var a = 0;
      if (o != 30) {
        a = 1500 / (o + 1) - 50;
      }
      if (q != -1) {
        a = -(1500 / (30 - q + 1) - 48);
      }
      this.ⵠᐃⲆΔⵠ.button.info.translate.y -= a > 0 ? a : -a;
      this.ᐃᐃᐃᐃ.translate.y -= a > 0 ? a : -a;
      kx.ᐃΔⲆᐃᐃ.translate.y -= a > 0 ? a : -a;
      kx.ΔⲆⵠᐃⵠ.translate.y -= a > 0 ? a : -a;
      this.ⵠᐃΔⲆ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠᐃᐃⲆ.button.info.translate.y -= a > 0 ? a : -a;
      this.options.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠᐃⵠⲆᐃ.button.info.translate.y -= a > 0 ? a : -a;
      this.ᐃⵠᐃⲆ.ᐃⵠᐃⲆᐃΔΔ.info.translate.y -= a > 0 ? a : -a;
      this.ᐃⵠᐃⲆ.ⵠⲆᐃⵠᐃΔΔ.info.translate.y -= a > 0 ? a : -a;
      jx.ᐃᐃΔⵠΔ.translate.y -= a > 0 ? a : -a;
      this.ᐃⵠⲆⵠ.translate.y -= a < 0 ? a : -a;
      this.ᐃΔᐃⵠᐃ.translate.y -= a < 0 ? a : -a;
    };
    this.ⵠⲆⵠΔⲆᐃⲆᐃⲆ = function () {
      if (!kx.ⲆⲆⵠᐃⲆ.enabled && this.ⵠᐃⲆΔΔⵠⲆ && !kx.ⲆᐃΔΔⲆ) {
        Du();
      }
      Zp();
      (function () {
        var a = jx.ⵠⲆⵠ[0];
        if (jx.mode === 0 || jx.mode === 7 || jx.mode === 2 || jx.mode === 4 || jx.mode === 5 || jx.mode === 6 || jx.mode === 3) {
          for (var b = 0; b < a.length; b++) {
            a[b].ⲆᐃΔᐃᐃⵠⲆ();
          }
        } else if (jx.mode === 1) {
          for (b = 0; a.length > b; b++) {
            if (kx.ⲆᐃᐃΔⵠⵠΔ || kx.ΔⲆⵠᐃⵠ.enabled || a[b].ⲆⲆΔᐃ.ᐃΔᐃⲆΔ !== "spectator") {
              a[b].ⲆᐃΔᐃᐃⵠⲆ();
            }
          }
        }
      })();
      if (this.ⵠᐃⲆΔΔⵠⲆ) {
        Wp();
        if (this.ⵠΔΔⲆⵠⵠⲆ === 1) {
          this.ⵠᐃΔⲆ.button.ⵠⵠⲆⵠ(f);
        }
        if (jx.mode !== 2 && jx.mode !== 4 && jx.mode !== 5 && this.ⵠⵠⵠΔⲆⲆⲆ === 1) {
          this.ⵠᐃᐃⲆ.button.ⵠⵠⲆⵠ(f);
        }
        this.options.button.ⵠⵠⲆⵠ(f);
        if (this.ⲆⲆⲆⵠⲆᐃΔ === 1) {
          this.ⵠᐃⵠⲆᐃ.button.ⵠⵠⲆⵠ(f);
        }
        if (ox.ᐃⲆⵠΔΔ) {
          this.ᐃⵠᐃⲆ.ᐃⵠᐃⲆᐃΔΔ.ⵠⵠⲆⵠ(f);
        } else {
          this.ᐃⵠᐃⲆ.ⵠⲆᐃⵠᐃΔΔ.ⵠⵠⲆⵠ(f);
        }
        $p();
        Kp();
        this.ᐃⵠⲆⵠ.ⵠⵠⲆⵠ();
        Ku();
        Bu();
        Np();
        Mu();
        Yp();
        kp();
        Lp();
        (function () {
          if (!kx.ΔΔΔⲆ.open && !kx.ΔⵠΔᐃΔ.open && !kx.ΔⲆⵠΔ.open && !kx.ΔⲆΔⵠ.open && !kx.ⵠᐃΔᐃ.open) {
            kx.ⵠΔΔⵠⲆ.open = false;
            var a = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
            var b = 100;
            if (a) {
              for (var c = 0; jx.ⵠⲆⵠ[35].length > c; c++) {
                var d = jx.ⵠⲆⵠ[35][c];
                var e = ⵠⵠⵠ.ⵠΔᐃΔ(d, a);
                if (e < b) {
                  b = e;
                  kx.ⵠΔΔⵠⲆ.open = yn;
                  kx.ⵠΔΔⵠⲆ.ᐃⲆⲆⲆ = d.ᐃⲆⲆⲆ;
                  kx.ⵠΔΔⵠⲆ.ⲆⵠᐃΔⲆ = d.id;
                }
              }
            }
          }
        })();
        Fp();
        Rp();
        Dp();
        Ip();
        Ep();
        jp();
      }
      if (kx.ⲆⲆⵠᐃⲆ.enabled) {
        Bp();
      }
      Sp();
      if (this.ⵠᐃⲆΔΔⵠⲆ && this.ΔⲆΔΔᐃΔᐃ === 1) {
        Eu();
      }
      kx.ΔᐃᐃᐃⲆΔᐃ.ⵠⵠⲆⵠ();
      kx.alert.ⵠⵠⲆⵠ("#FFF", "#000");
      if (this.ⵠᐃⲆΔΔⵠⲆ) {
        kx.ⲆⲆⵠᐃⲆ.ⵠⵠⲆⵠ();
        kx.ⵠᐃⲆΔⵠ.ⵠⵠⲆⵠ();
        kx.ᐃΔΔⵠ.ᐃⲆΔᐃⵠⲆⵠ.ⵠⵠⲆⵠ(qx.ΔᐃΔⲆ.x, qx.ΔᐃΔⲆ.y);
      }
      Qp();
    };
    this.ΔᐃⲆⵠΔⲆⲆⵠᐃ = function () {
      kx.ⲆⲆᐃ.ᐃⲆᐃ();
      kx.ᐃⵠⲆⵠ.ᐃⲆᐃ();
      if (!kx.reconnect.enabled && kx.ΔⵠⲆⵠⵠ) {
        kx.control.ᐃⲆᐃ();
        //kx.ᐃΔⲆᐃᐃ.ᐃⲆᐃ();
      }
      jx.ᐃⲆᐃ();
      this.ⵠᐃᐃⲆ.ᐃᐃΔΔⲆᐃⲆᐃⵠ();
    };
    this.ⵠⵠΔⵠᐃᐃΔⲆⲆ = function () {
      xw();
    };
    this.ᐃⵠⵠⲆⲆΔⲆΔᐃ = function () {
      mx.ᐃⲆⲆⵠⵠⲆⵠⵠᐃ();
      mx.ⵠⵠⲆⵠΔⲆⵠⲆⲆ();
      mx.ᐃΔⵠⵠⲆΔⲆⵠᐃ();
      mx.ᐃⲆΔΔΔΔⲆⲆⵠ();
    };
    this.ⵠⵠⲆⵠ = function () {
      if (!kx.reconnect.enabled && kx.ΔⵠⲆⵠⵠ) {
        this.ᐃⵠⵠⲆⲆΔⲆΔᐃ();
      }
      ox.ⲆΔᐃⲆⲆΔⵠⵠΔ();
      this.ΔᐃⲆⵠΔⲆⲆⵠᐃ();
      if (ix.ⲆᐃⲆⵠⲆᐃⲆ !== 1) {
        this.ⵠⵠΔⵠᐃᐃΔⲆⲆ();
        this.ⵠⲆⵠΔⲆᐃⲆᐃⲆ();
      } else {
        var a = ᐃΔ.ᐃΔⵠⵠΔⲆΔ;
        Jp(f, a, zo - a.width / 4, Co - a.height / 4, a.width / 2, a.height / 2);
      }
    };
    this.ᐃΔᐃⲆⲆⵠⲆ = function (a) {
      if (kx.ᐃⲆΔΔⵠ.open && a.keyCode === 27) {
        kx.ᐃⲆΔΔⵠ.ⲆᐃⵠⵠΔ();
      } else if (kx.ⵠⵠⲆⵠⵠ.open && a.keyCode === 27) {
        kx.ⵠⵠⲆⵠⵠ.ⲆᐃⵠⵠΔ();
      } else if (kx.ᐃⲆΔΔⵠ.open || kx.ⵠⵠⲆⵠⵠ.open || a.keyCode != 79 || q != -1) {
        if (a.keyCode == 13 && q == -1) {
          if (kx.ⵠⵠⲆⵠⵠ.open) {
            kx.ⵠⵠⲆⵠⵠ.ᐃⲆᐃⲆⲆΔⵠ();
          } else {
            kx.ᐃⲆΔΔⵠ.ᐃⲆⵠΔΔ();
          }
        } else if (!kx.ᐃⲆΔΔⵠ.open && !kx.ⵠⵠⲆⵠⵠ.open) {
          if (a.keyCode === 82) {
            kx.ᐃΔⲆᐃᐃ.ΔᐃⲆᐃⲆⲆΔ();
          } else if (a.keyCode !== 80 || jx.mode !== 1 || kx.ⲆᐃᐃΔⵠⵠΔ) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (kx.ⲆⲆⲆⲆ.id < 0) {
                var b = a.keyCode - 49;
                var c = kx.ᐃΔΔⵠ.ⲆΔⵠᐃⲆ[b];
                if (c) {
                  mx.ⲆΔΔⲆᐃ(c.id, b);
                }
              }
            } else if (a.keyCode == 89) {
              kx.ⲆΔᐃΔᐃᐃⲆ = !kx.ⲆΔᐃΔᐃᐃⲆ;
            } else if (a.keyCode == 71) {
              kx.ⲆⲆⲆⲆ.ⲆΔⵠⲆᐃᐃⵠᐃΔ();
            }
          } else {
            kx.ΔⲆⵠᐃⵠ.ΔᐃⲆᐃⲆⲆΔ();
          }
        }
      } else {
        kx.ⵠⵠⲆⵠⵠ.ᐃᐃⲆΔΔᐃⲆⲆⵠ();
      }
      px.up(a);
    };
    this.ⵠⲆⲆᐃⵠᐃⲆ = function (a) {
      px.down(a);
      if (a.keyCode == 8 && !kx.ᐃⲆΔΔⵠ.open && !kx.ⵠⵠⲆⵠⵠ.open) {
        a.preventDefault();
      }
    };
    this.ⵠⲆΔΔΔΔⵠ = function (b) {
      qx.ΔᐃΔⲆ = lf(j.Δᐃ, b);
      var c = false;
      if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0) {
        j.ᐃΔᐃⵠᐃ.focus(qx.ΔᐃΔⲆ);
      }
      var d = kx.ΔΔΔⲆ;
      if (kx.ⲆⲆⲆⲆ.id < 0 && d.id >= 0) {
        if (!kx.ΔΔΔⲆ.lock || kx.id === kx.ΔΔΔⲆ.ᐃⲆⲆⲆ) {
          c |= j.Ⲇⵠⵠ[kx.ΔΔΔⲆ.id].ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
        }
      }
      var e = kx.ΔⲆⵠΔ;
      if (e.open && e.ᐃⲆⲆⵠΔ > 0) {
        c |= j.ᐃⲆⵠᐃᐃᐃⲆ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
      }
      var f = kx.ⵠᐃΔᐃ;
      if (f.open && f.ⵠⵠⵠⲆⲆΔΔ > 0) {
        c |= j.ⵠΔⵠⲆⲆⲆⲆ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
        c |= j.ⲆᐃⲆⵠΔⲆⲆ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
        c |= j.ΔⵠΔⲆΔᐃᐃ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
        c |= j.ΔⲆⲆΔⵠᐃⲆ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
        c |= j.ᐃΔⵠⲆⲆᐃΔ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
      }
      var a = kx.ΔⲆΔⵠ;
      if (a.open && a.ⲆᐃⲆⲆⲆᐃⵠ > 0) {
        c |= j.Δᐃⵠᐃⵠᐃⵠ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
      }
      if (kx.sign.open) {
        c |= j.sign.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
      }
      if (!kx.ΔΔΔⲆ.lock) {
        if (kx.ΔΔΔⲆ.ⵠⵠΔⵠᐃᐃⵠ) {
          c |= j.ΔΔⵠΔᐃⲆⵠ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
        }
      }
      if (kx.ΔΔΔⲆ.ⵠΔᐃᐃᐃΔΔ) {
        c |= j.ⵠᐃᐃᐃⵠᐃⲆ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
      }
      if (kx.ⲆⲆⲆⲆ.id < 0 && !j.ⵠᐃΔⲆ.open && !j.ⵠⵠⵠⲆ.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃᐃⲆ.open && !j.options.open && !j.ⵠᐃⵠⲆᐃ.open) {
        for (var k = kx.ᐃΔΔⵠ.ⲆΔⵠᐃⲆ, m = 0; k.length > m; m++) {
          var n = k[m].ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
          c |= n;
          if (n) {
            kx.ᐃΔΔⵠ.ᐃⲆΔᐃⵠⲆⵠ.start(m, qx.ΔᐃΔⲆ);
          }
          if (d.open && (d.id < 0 || k[m].id == d.id) || kx.ΔⵠΔᐃΔ.open && k[m].id === 109 || kx.ⵠΔΔⵠⲆ.open && k[m].id === 180 || kx.ΔⲆΔⵠ.open && (k[m].id === 109 || k[m].id === 131) || kx.ΔⲆⵠΔ.open && k[m].id === 134 || kx.ⵠᐃΔᐃ.open && k[m].id === 109) {
            c |= j.ⵠⲆⲆΔⲆ[k[m].id].ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
          }
        }
      }
      if (kx.ΔⲆΔⵠⵠ.open) {
        c |= j.ΔⲆΔⵠⵠ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
      }
      if (j.ⵠᐃⵠⵠⵠ != -1) {
        if (c |= j.ΔⵠΔⵠⵠ[j.ⵠᐃⵠⵠⵠ].button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af)) {
          var o = Jg;
        }
      } else {
        o = false;
      }
      if (kx.ⲆⲆⲆⲆ.id < 0 && kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !o && !j.ⵠᐃΔⲆ.open && !j.ⵠⵠⵠⲆ.open && !j.options.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃⵠⲆᐃ.open && !kx.ⲆᐃΔΔⲆ) {
        k = kx.ⲆⲆⲆⲆ.ᐃⲆⵠⵠⲆ;
        m = 0;
        for (; m < k.length; m++) {
          c |= k[m].ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
        }
      }
      if (kx.ⲆⲆⲆⲆ.id < 0 && kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && kx.ⵠᐃⲆΔⵠ.open && !j.ⵠᐃΔⲆ.open && !j.ⵠⵠⵠⲆ.open && !j.options.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃᐃⲆ.open && !j.ⵠᐃⵠⲆᐃ.open) {
        c |= j.ⵠᐃⲆΔⵠ.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
      }
      if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !j.ⵠⵠⵠⲆ.open && !j.options.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃᐃⲆ.open && !j.ⵠᐃⵠⲆᐃ.open) {
        c |= j.ⵠᐃΔⲆ.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
      }
      if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !j.ⵠᐃΔⲆ.open && !j.ⵠⵠⵠⲆ.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃᐃⲆ.open && !j.ⵠᐃⵠⲆᐃ.open) {
        c |= j.options.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
      }
      if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !j.ⵠᐃΔⲆ.open && !j.ⵠⵠⵠⲆ.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃᐃⲆ.open && !j.options.open) {
        c |= j.ⵠᐃⵠⲆᐃ.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
      }
      if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !j.ⵠᐃΔⲆ.open && !j.ⵠⵠⵠⲆ.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃᐃⲆ.open && !j.options.open && !j.ⵠᐃⵠⲆᐃ.open) {
        if (ox.ᐃⲆⵠΔΔ) {
          c |= j.ᐃⵠᐃⲆ.ᐃⵠᐃⲆᐃΔΔ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
        } else {
          c |= j.ᐃⵠᐃⲆ.ⵠⲆᐃⵠᐃΔΔ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
        }
      }
      if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !j.ⵠᐃΔⲆ.open && !j.ⵠᐃⵠⲆᐃ.open && !j.ⵠⵠⵠⲆ.open && !j.options.open && !j.ⵠΔⲆⵠⲆ.open && jx.mode !== 2 && jx.mode !== 4 && jx.mode !== 5) {
        c |= j.ⵠᐃᐃⲆ.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, af);
      }
      if (!c && !j.ⵠᐃΔⲆ.open && !j.ⵠⵠⵠⲆ.open && !j.options.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃᐃⲆ.open && !j.ⵠᐃⵠⲆᐃ.open && !j.sign.open) {
        if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ >= 0) {
          mx.ⵠΔⲆⲆΔⵠⲆⲆⵠ();
        } else if (!o) {
          qx.down();
        }
      }
    };
    this.ⵠᐃⵠᐃΔᐃⵠ = function (c) {
      qx.ΔᐃΔⲆ = lf(j.Δᐃ, c);
      qx.up();
      if (!kx.ᐃΔΔⵠ.ᐃⲆΔᐃⵠⲆⵠ.release()) {
        var d = kx.ΔΔΔⲆ;
        var e = kx.ΔⵠΔᐃΔ;
        var f = kx.ⵠΔΔⵠⲆ;
        var i = kx.ΔⲆⵠΔ;
        var k = kx.ⵠᐃΔᐃ;
        var m = kx.ΔⲆΔⵠ;
        if (kx.control.attack) {
          kx.control.attack = 0;
          mx.ⵠⵠⲆⵠᐃᐃⵠΔⵠ();
        }
        if (j.ⵠᐃⵠⵠⵠ != -1) {
          var n = j.ΔⵠΔⵠⵠ[j.ⵠᐃⵠⵠⵠ].button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf);
          var o = document.getElementById("team_box").style;
          if (n && o.display == "inline-block") {
            o.display = "none";
            return;
          }
          if (n) {
            j.ΔⵠΔⵠⵠ[j.ⵠᐃⵠⵠⵠ].action();
          }
        }
        if (kx.ⲆⲆⲆⲆ.id < 0 && d.id >= 0 && !j.ⵠⵠⵠⲆ.open) {
          if (!kx.ΔΔΔⲆ.lock || kx.id === kx.ΔΔΔⲆ.ᐃⲆⲆⲆ) {
            if (n = j.Ⲇⵠⵠ[kx.ΔΔΔⲆ.id].ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
              mx.ⵠⵠⵠΔⵠᐃΔᐃᐃ(d);
            }
          }
        }
        if ((i = kx.ΔⲆⵠΔ).open && i.ᐃⲆⲆⵠΔ > 0 && !j.ⵠⵠⵠⲆ.open) {
          if (n = j.ᐃⲆⵠᐃᐃᐃⲆ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
            mx.ⵠᐃⲆⲆⲆᐃΔⲆᐃ(i);
          }
        }
        if ((k = kx.ⵠᐃΔᐃ).open && k.ⵠⵠⵠⲆⲆΔΔ > 0 && !j.ⵠⵠⵠⲆ.open) {
          switch (k.type) {
            case 24:
              if (n = j.ⵠΔⵠⲆⲆⲆⲆ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
                mx.ⵠⲆⵠᐃᐃᐃⵠ(k);
              }
              break;
            case 25:
              if (n = j.ⲆᐃⲆⵠΔⲆⲆ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
                mx.ⵠⲆⵠᐃᐃᐃⵠ(k);
              }
              break;
            case 26:
              if (n = j.ΔⵠΔⲆΔᐃᐃ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
                mx.ⵠⲆⵠᐃᐃᐃⵠ(k);
              }
              break;
            case 27:
              if (n = j.ΔⲆⲆΔⵠᐃⲆ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
                mx.ⵠⲆⵠᐃᐃᐃⵠ(k);
              }
              break;
            case 28:
              if (n = j.ᐃΔⵠⲆⲆᐃΔ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
                mx.ⵠⲆⵠᐃᐃᐃⵠ(k);
              }
          }
        }
        if ((m = kx.ΔⲆΔⵠ).open && m.ⲆᐃⲆⲆⲆᐃⵠ > 0 && !j.ⵠⵠⵠⲆ.open) {
          if (n = j.Δᐃⵠᐃⵠᐃⵠ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
            mx.ⵠᐃⵠⲆΔⵠⲆᐃⲆ(m);
          }
        }
        if (kx.sign.open && !j.ⵠⵠⵠⲆ.open) {
          if (n = j.sign.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
            j.sign.select();
          }
        }
        if (!kx.ΔΔΔⲆ.lock && !j.ⵠⵠⵠⲆ.open) {
          if (kx.ΔΔΔⲆ.ⵠⵠΔⵠᐃᐃⵠ && (n = j.ΔΔⵠΔᐃⲆⵠ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf))) {
            mx.ΔⵠⵠⲆΔΔⵠⵠΔ(d);
          }
        }
        if (kx.ΔΔΔⲆ.ⵠΔᐃᐃᐃΔΔ && !j.ⵠⵠⵠⲆ.open && (n = j.ⵠᐃᐃᐃⵠᐃⲆ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf))) {
          mx.ⵠⵠⵠᐃⲆⵠⲆΔⲆ(d);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (kx.ΔⲆΔⵠⵠ.open) {
          if (n = j.ΔⲆΔⵠⵠ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
            mx.ΔⲆΔⵠⵠ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (kx.ⲆⲆⲆⲆ.id < 0 && !kx.ⲆⲆⵠᐃⲆ.enabled && !j.ⵠⵠⵠⲆ.open) {
          for (var l = kx.ᐃΔΔⵠ.ⲆΔⵠᐃⲆ, p = 0; p < l.length; p++) {
            if (n = l[p].ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
              if (c.which != 1 || c.shiftKey) {
                if ((c.which == 1 && c.shiftKey || c.which == 3) && kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0) {
                  j.ⵠⵠⵠⲆ.ⲆΔⲆΔΔΔⵠ(l[p].id);
                }
              } else {
                mx.ⲆΔΔⲆᐃ(l[p].id, p);
              }
            } else if (d.open && (d.id < 0 || d.id === l[p].id)) {
              if ((n = j.ⵠⲆⲆΔⲆ[l[p].id].ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) && kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0) {
                mx.ⵠΔᐃᐃⵠⵠⵠⲆⵠ(d, l[p].id, c.shiftKey ? 10 : 1);
              }
            } else if (f.open && l[p].id === 180) {
              if ((n = j.ⵠⲆⲆΔⲆ[l[p].id].ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) && kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0) {
                mx.ᐃΔⲆⲆᐃⲆⲆᐃⲆ(f);
              }
            } else if (e.open && l[p].id === 109) {
              if ((n = j.ⵠⲆⲆΔⲆ[l[p].id].ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) && kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0) {
                mx.ΔᐃⲆΔⵠᐃΔⵠΔ(e, c.shiftKey ? 10 : 1);
              }
            } else if (i.open && l[p].id === 134) {
              if ((n = j.ⵠⲆⲆΔⲆ[l[p].id].ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) && kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0) {
                mx.ⲆᐃΔⲆΔⵠⲆⲆᐃ(i, c.shiftKey ? 10 : 1);
              }
            } else if (k.open && l[p].id === 109) {
              if ((n = j.ⵠⲆⲆΔⲆ[l[p].id].ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) && kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0) {
                mx.ᐃⵠⲆⲆᐃΔⲆⲆⲆ(k, c.shiftKey ? 10 : 1);
              }
            } else if (m.open && (l[p].id === 109 || l[p].id === 131)) {
              if ((n = j.ⵠⲆⲆΔⲆ[l[p].id].ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) && kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0) {
                if (l[p].id === 109) {
                  mx.ᐃΔΔΔΔⵠΔ(m, c.shiftKey ? 10 : 1, 0);
                } else {
                  mx.ᐃΔΔΔΔⵠΔ(m, 0, c.shiftKey ? 10 : 1);
                }
              }
            }
          }
        }
        if (kx.ⲆⲆⲆⲆ.id < 0 && kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !kx.ⲆⲆⵠᐃⲆ.enabled && !j.ⵠⵠⵠⲆ.open && !kx.ⲆᐃΔΔⲆ) {
          l = kx.ⲆⲆⲆⲆ.ᐃⲆⵠⵠⲆ;
          p = 0;
          for (; p < l.length; p++) {
            if (n = l[p].ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
              ⲆⵠⲆⵠᐃ = mx.ᐃⵠⵠᐃⵠΔΔⵠᐃ(l[p].id);
              if (ⲆⵠⲆⵠᐃ && ga) {
                ga("send", "event", "Game", "craft", Wr[Xs[l[p].id].ᐃΔᐃᐃ].name);
              }
            }
          }
        }
        if (kx.ⲆⲆⲆⲆ.id < 0 && kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && kx.ⵠᐃⲆΔⵠ.open && !j.ⵠᐃⵠⲆᐃ.open && !j.ⵠᐃΔⲆ.open && !j.ⵠⵠⵠⲆ.open && !j.options.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃᐃⲆ.open) {
          if (n = j.ⵠᐃⲆΔⵠ.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of)) {
            nx.ⵠᐃⲆΔⵠ.select();
          }
        }
        if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !j.ⵠᐃΔⲆ.open && !j.ⵠⵠⵠⲆ.open && !j.ⵠᐃⵠⲆᐃ.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃᐃⲆ.open && !j.options.open) {
          if (ox.ᐃⲆⵠΔΔ) {
            if (n = j.ᐃⵠᐃⲆ.ᐃⵠᐃⲆᐃΔΔ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
              ox.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (n = j.ᐃⵠᐃⲆ.ⵠⲆᐃⵠᐃΔΔ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
            ox.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !j.ⵠᐃΔⲆ.open && !j.ⵠⵠⵠⲆ.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃᐃⲆ.open && !j.ⵠᐃⵠⲆᐃ.open) {
          if (n = j.options.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
            j.options.ΔⵠⲆᐃⲆᐃⵠⵠΔ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !j.ⵠᐃΔⲆ.open && !j.ⵠⵠⵠⲆ.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃᐃⲆ.open && !j.options.open && j.ⲆⲆⲆⵠⲆᐃΔ === 1) {
          if (n = j.ⵠᐃⵠⲆᐃ.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
            j.ⵠᐃⵠⲆᐃ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !j.ⵠⵠⵠⲆ.open && !j.ⵠᐃⵠⲆᐃ.open && !j.options.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃᐃⲆ.open && j.ⵠΔΔⲆⵠⵠⲆ === 1) {
          if (n = j.ⵠᐃΔⲆ.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
            j.ⵠᐃΔⲆ.ⵠⵠΔΔⲆᐃᐃᐃⲆ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !j.ⵠᐃΔⲆ.open && !j.ⵠⵠⵠⲆ.open && !j.options.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃⵠⲆᐃ.open && jx.mode !== 2 && jx.mode !== 4 && jx.mode !== 5 && j.ⵠⵠⵠΔⲆⲆⲆ === 1) {
          if (n = j.ⵠᐃᐃⲆ.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
            j.ⵠᐃᐃⲆ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (kx.ⲆⲆⲆⲆ.ⲆᐃⲆᐃᐃ && c.which == 3) {
          j.ⵠΔⲆⵠⲆ.ⲆΔⲆΔΔΔⵠ();
        }
      }
    };
    this.ΔᐃⵠⵠΔᐃΔ = false;
    this.ⵠⲆⲆᐃΔΔΔ = function (c) {
      qx.ΔᐃΔⲆ = lf(j.Δᐃ, c);
      var d = false;
      nx.ⲆΔⵠΔⵠ.display = 0;
      kx.ᐃΔΔⵠ.ᐃⲆΔᐃⵠⲆⵠ.ⵠᐃᐃΔᐃ(qx.ΔᐃΔⲆ);
      if (j.ⵠᐃⵠⵠⵠ != -1) {
        d |= j.ΔⵠΔⵠⵠ[j.ⵠᐃⵠⵠⵠ].button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
      }
      var e = kx.ΔⲆⵠΔ;
      if (e.open && e.ᐃⲆⲆⵠΔ > 0) {
        d |= j.ᐃⲆⵠᐃᐃᐃⲆ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
      }
      var f = kx.ⵠᐃΔᐃ;
      if (f.open && f.ⵠⵠⵠⲆⲆΔΔ > 0) {
        d |= j.ⵠΔⵠⲆⲆⲆⲆ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
        d |= j.ⲆᐃⲆⵠΔⲆⲆ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
        d |= j.ΔⵠΔⲆΔᐃᐃ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
        d |= j.ΔⲆⲆΔⵠᐃⲆ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
        d |= j.ᐃΔⵠⲆⲆᐃΔ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
      }
      var a = kx.ΔⲆΔⵠ;
      if (a.open && a.ⲆᐃⲆⲆⲆᐃⵠ > 0) {
        d |= j.Δᐃⵠᐃⵠᐃⵠ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
      }
      if (kx.sign.open) {
        d |= j.sign.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
      }
      var i = kx.ΔΔΔⲆ;
      if (kx.ⲆⲆⲆⲆ.id < 0 && i.id >= 0 && !kx.ⲆⲆⵠᐃⲆ.enabled && (!kx.ΔΔΔⲆ.lock || kx.id === kx.ΔΔΔⲆ.ᐃⲆⲆⲆ)) {
        d |= j.Ⲇⵠⵠ[i.id].ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
      }
      if (kx.ΔⲆΔⵠⵠ.open) {
        d |= j.ΔⲆΔⵠⵠ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
      }
      if (!kx.ΔΔΔⲆ.lock && !kx.ⲆⲆⵠᐃⲆ.enabled) {
        if (kx.ΔΔΔⲆ.ⵠⵠΔⵠᐃᐃⵠ) {
          d |= j.ΔΔⵠΔᐃⲆⵠ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
        }
      }
      if (kx.ΔΔΔⲆ.ⵠΔᐃᐃᐃΔΔ && !kx.ⲆⲆⵠᐃⲆ.enabled) {
        d |= j.ⵠᐃᐃᐃⵠᐃⲆ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
      }
      if (kx.ⲆⲆⲆⲆ.id < 0 && !kx.ⲆⲆⵠᐃⲆ.enabled) {
        for (var h = kx.ᐃΔΔⵠ.ⲆΔⵠᐃⲆ, k = 0; h.length > k; k++) {
          var m = h[k].ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
          d |= nx.ⲆΔⵠΔⵠ.ΔΔⲆΔ(m, h[k], 0);
          if (i.open && (i.id < 0 || i.id == h[k].id) || kx.ΔⵠΔᐃΔ.open && h[k].id == 109 || kx.ⵠΔΔⵠⲆ.open && h[k].id === 180 || kx.ΔⲆΔⵠ.open && (h[k].id == 109 || h[k].id == 131) || kx.ΔⲆⵠΔ.open && h[k].id == 134 || kx.ⵠᐃΔᐃ.open && h[k].id == 109) {
            d |= j.ⵠⲆⲆΔⲆ[h[k].id].ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
          }
        }
      }
      if (kx.ⲆⲆⲆⲆ.id < 0 && kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !kx.ⲆⲆⵠᐃⲆ.enabled && !kx.ⲆᐃΔΔⲆ) {
        h = kx.ⲆⲆⲆⲆ.ᐃⲆⵠⵠⲆ;
        k = 0;
        for (; k < h.length; k++) {
          m = sq;
          m = h[k].ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
          d |= nx.ⲆΔⵠΔⵠ.ΔΔⲆΔ(m, h[k], 1);
        }
      }
      if (kx.ⲆⲆⲆⲆ.id < 0 && kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !!kx.ⵠᐃⲆΔⵠ.open && !j.ⵠᐃΔⲆ.open && !j.ⵠⵠⵠⲆ.open && !j.options.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃᐃⲆ.open && !j.ⵠᐃⵠⲆᐃ.open) {
        d |= j.ⵠᐃⲆΔⵠ.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
      }
      if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !j.ⵠⵠⵠⲆ.open && !j.options.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃᐃⲆ.open && !j.ⵠᐃⵠⲆᐃ.open && j.ⵠΔΔⲆⵠⵠⲆ === 1) {
        d |= j.ⵠᐃΔⲆ.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
      }
      if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !j.ⵠᐃΔⲆ.open && !j.ⵠⵠⵠⲆ.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃᐃⲆ.open && !j.ⵠᐃⵠⲆᐃ.open) {
        d |= j.options.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
      }
      if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !j.ⵠᐃΔⲆ.open && !j.ⵠⵠⵠⲆ.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃᐃⲆ.open && !j.options.open && j.ⲆⲆⲆⵠⲆᐃΔ === 1) {
        d |= j.ⵠᐃⵠⲆᐃ.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
      }
      if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !j.ⵠᐃΔⲆ.open && !j.ⵠⵠⵠⲆ.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃᐃⲆ.open && !j.options.open && !j.ⵠᐃⵠⲆᐃ.open) {
        if (ox.ᐃⲆⵠΔΔ) {
          d |= j.ᐃⵠᐃⲆ.ᐃⵠᐃⲆᐃΔΔ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
        } else {
          d |= j.ᐃⵠᐃⲆ.ⵠⲆᐃⵠᐃΔΔ.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
        }
      }
      if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ < 0 && !j.ⵠᐃΔⲆ.open && !j.ⵠⵠⵠⲆ.open && !j.options.open && !j.ⵠΔⲆⵠⲆ.open && !j.ⵠᐃⵠⲆᐃ.open && jx.mode !== 2 && jx.mode !== 4 && Bf.ᐃⲆⲆⵠΔᐃⲆΔⵠ !== jx.mode && j.ⵠⵠⵠΔⲆⲆⲆ === 1) {
        d |= j.ⵠᐃᐃⲆ.button.ΔΔⲆΔ(j.Δᐃ, qx.ΔᐃΔⲆ, of);
      }
      if (d !== j.ΔᐃⵠⵠΔᐃΔ) {
        j.ΔᐃⵠⵠΔᐃΔ = d;
        b.style.cursor = d ? j.ⲆⵠⵠᐃⲆΔΔ : j.ᐃᐃᐃⵠΔΔᐃ;
      }
    };
    this.ⵠΔᐃᐃⲆΔᐃ = function () {
      sa.addEventListener("mousedown", this.ⵠⲆΔΔΔΔⵠ, Ao);
      sa.addEventListener("mouseup", this.ⵠᐃⵠᐃΔᐃⵠ, Ao);
      sa.addEventListener("mousemove", this.ⵠⲆⲆᐃΔΔΔ, false);
      sa.addEventListener("keyup", this.ᐃΔᐃⲆⲆⵠⲆ, false);
      sa.addEventListener("keydown", this.ⵠⲆⲆᐃⵠᐃⲆ, false);
    };
    this.ᐃⵠΔᐃᐃⲆⵠ = function () {
      sa.removeEventListener("mousedown", this.ⵠⲆΔΔΔΔⵠ, qs);
      sa.removeEventListener("mouseup", this.ⵠᐃⵠᐃΔᐃⵠ, false);
      sa.removeEventListener("mousemove", this.ⵠⲆⲆᐃΔΔΔ, Ao);
      sa.removeEventListener("keyup", this.ᐃΔᐃⲆⲆⵠⲆ, false);
      sa.removeEventListener("keydown", this.ⵠⲆⲆᐃⵠᐃⲆ, false);
    };
  }
  function Nw() {
    ⵠⵠⵠ.ΔⵠⲆⲆⲆⵠΔ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  function Ow(b, s) {
    this.Δᐃ = b;
    this.Ⲇ = s;
    if (sa.navigator.userAgent.indexOf("Edge") > -1) {
      this.ᐃᐃᐃⵠΔΔᐃ = "default";
      this.ⲆⵠⵠᐃⲆΔΔ = "pointer";
    } else {
      this.ᐃᐃᐃⵠΔΔᐃ = "url('img/cursor0.png'), default";
      this.ⲆⵠⵠᐃⲆΔΔ = "url('img/cursor1.png'), pointer";
    }
    var E = this;
    function e(c, e, f, i, j) {
      var a = this;
      for (var k = e + 9, h = 0, m = i, n = e; k > n; n++) {
        E.buttons[n].info.callback = o;
        E.buttons[n].info.ⲆⲆⵠⲆⵠⵠⲆⲆⵠ = c;
      }
      function o() {
        if (this.ΔⵠᐃⵠⲆΔᐃ !== m && this.ΔⵠᐃⵠⲆΔᐃ !== -1) {
          if (this.ΔⵠᐃΔᐃⲆⲆ > 0) {
            if (e === ⵠΔΔⵠΔᐃⲆ) {
              V(u, la, "none");
            } else {
              V(x, la, "none");
            }
          } else if (e === ⵠΔΔⵠΔᐃⲆ) {
            V(u, ma, "inline-block");
          } else {
            V(x, ma, "inline-block");
          }
          m = this.ΔⵠᐃⵠⲆΔᐃ;
          f(this.ΔⵠᐃⵠⲆΔᐃ);
          b();
        }
      }
      function b() {
        var a = c[m];
        ix.ᐃᐃⲆᐃΔⲆⲆ = df(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, 10, 8);
        if (a.level !== undefined) {
          ix.ᐃⵠᐃⵠⵠⵠᐃ = df("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, hj, 10, 8);
        } else {
          ix.ᐃⵠᐃⵠⵠⵠᐃ = df("by " + a.ᐃΔΔ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
        }
      }
      this.ⵠΔⲆⵠΔ = function () {
        for (var a = e, d = h * 3; a < k && d < c.length; a++, d++) {
          if (c[d].ΔⲆⵠ !== ᐃᐃⵠ.ⲆⲆⵠⲆⲆΔⲆ || j[d] !== 0) {
            E.buttons[a].info.ΔⵠᐃⵠⲆΔᐃ = d;
            for (var f = 0; f < 3; f++) {
              E.buttons[a].info.ⵠⵠ[f] = ᐃⵠᐃⲆⵠ[c[d].ΔⲆⵠ][f];
              E.buttons[a].info.active = ma;
              E.buttons[a].info.ΔⵠᐃΔᐃⲆⲆ = j[d];
            }
          } else {
            E.buttons[a].info.ΔⵠᐃⵠⲆΔᐃ = -1;
            E.buttons[a].info.active = la;
          }
        }
        for (; a < k; a++) {
          E.buttons[a].info.ΔⵠᐃⵠⲆΔᐃ = -1;
          E.buttons[a].info.active = la;
        }
        b();
      };
      E.buttons[k].info.callback = function () {
        if (h > 0) {
          h--;
        }
        a.ⵠΔⲆⵠΔ();
      };
      E.buttons[k + 1].info.callback = function () {
        if (c.length > h * 3 + 9) {
          h++;
        }
        a.ⵠΔⲆⵠΔ();
      };
    }
    function n() {
      var b = Number(ᐃᐃᐃⲆ.get("starve_crate"));
      var c = Number(ᐃᐃᐃⲆ.get("starve_dead"));
      var d = Number(ᐃᐃᐃⲆ.get("starve_book"));
      var e = Number(ᐃᐃᐃⲆ.get("starve_bag"));
      var f = Number(ᐃᐃᐃⲆ.get("starve_skin"));
      var a = Number(ᐃᐃᐃⲆ.get("starve_accessory"));
      E.Ⲇᐃⵠᐃ = f || 0;
      E.ⵠⲆⲆᐃⵠ = d || 0;
      E.ΔᐃᐃⲆᐃ = b || 1;
      E.ⵠᐃⲆᐃΔ = a || 0;
      E.ⵠᐃⲆⵠᐃ = e || 0;
      E.Ⲇⵠᐃᐃᐃ = c || 0;
    }
    function a() {
      for (var a = ᐃᐃΔⵠ.ⲆⲆᐃⲆΔ, b = 0; a.length > b; b++) {
        if (a[b].ΔⲆⵠ === ᐃᐃⵠ.ᐃⲆᐃᐃⵠ) {
          E.unlock.Ⲇᐃⵠᐃ[b] = 1;
        } else {
          E.unlock.Ⲇᐃⵠᐃ[b] = 0;
        }
      }
      a = ᐃᐃΔⵠ.ᐃΔᐃΔⲆ;
      b = 0;
      for (; a.length > b; b++) {
        if (ᐃᐃⵠ.ᐃⲆᐃᐃⵠ === a[b].ΔⲆⵠ) {
          E.unlock.ⵠᐃⲆᐃΔ[b] = 1;
        } else {
          E.unlock.ⵠᐃⲆᐃΔ[b] = 0;
        }
      }
      a = ᐃᐃΔⵠ.ⲆΔΔΔ;
      b = 0;
      for (; a.length > b; b++) {
        if (a[b].ΔⲆⵠ === ᐃᐃⵠ.ᐃⲆᐃᐃⵠ) {
          E.unlock.ⵠᐃⲆⵠᐃ[b] = 1;
        } else {
          E.unlock.ⵠᐃⲆⵠᐃ[b] = 0;
        }
      }
      a = ᐃᐃΔⵠ.ΔⵠΔΔⲆ;
      b = 0;
      for (; a.length > b; b++) {
        if (a[b].ΔⲆⵠ === ᐃᐃⵠ.ᐃⲆᐃᐃⵠ) {
          E.unlock.ⵠⲆⲆᐃⵠ[b] = 1;
        } else {
          E.unlock.ⵠⲆⲆᐃⵠ[b] = 0;
        }
      }
      a = ᐃᐃΔⵠ.Δⵠⵠᐃᐃ;
      b = 0;
      for (; b < a.length; b++) {
        if (a[b].ΔⲆⵠ === ᐃᐃⵠ.ᐃⲆᐃᐃⵠ) {
          E.unlock.ΔᐃᐃⲆᐃ[b] = 1;
          E.unlock.Ⲇⵠᐃᐃᐃ[b] = 1;
        } else {
          E.unlock.ΔᐃᐃⲆᐃ[b] = 0;
          E.unlock.Ⲇⵠᐃᐃᐃ[b] = 0;
        }
      }
    }
    this.waiting = cr;
    this.ΔⲆᐃᐃⵠᐃⵠ = 0;
    this.ΔᐃᐃΔⲆⵠⲆ = -1;
    this.ΔⵠⲆΔᐃᐃⲆ = {
      translate: {
        y: 0,
        x: 0
      },
      angle: 0,
      ⵠⵠ: ⲆΔ[301],
      ⵠⵠⲆⵠ: function () {
        this.angle += sx * 2;
        s.save();
        s.translate(this.translate.x + this.ⵠⵠ.width / 2, this.translate.y + this.ⵠⵠ.height / 2);
        s.rotate(this.angle);
        Jp(s, this.ⵠⵠ, -this.ⵠⵠ.width / 2, -this.ⵠⵠ.height / 2);
        s.restore();
      }
    };
    this.ΔⲆⵠᐃⲆⵠⵠ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        x: 0,
        y: 0
      },
      ᐃⲆᐃ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.Δᐃⵠᐃⵠ = 0;
    this.ᐃⵠⲆⲆΔΔⲆ = -1;
    this.ᐃⲆΔᐃⲆΔⲆ = undefined;
    this.ᐃᐃΔⵠᐃⲆⲆ = "";
    this.ⵠΔΔᐃⵠⵠΔ = "";
    this.ⵠⵠΔⲆᐃⲆΔ = undefined;
    this.ⲆⲆⵠⵠᐃ = 0;
    this.ⵠⲆⲆᐃᐃⲆⲆ = -1;
    this.ⲆᐃⵠᐃⲆⵠⲆ = Zi;
    this.ΔᐃⵠᐃⲆΔᐃ = 0;
    this.ΔᐃΔⲆᐃⵠⵠ = 0;
    this.ᐃⵠΔⲆΔᐃᐃ = 0;
    this.ⲆΔⲆΔⲆ = 0;
    this.ΔⵠⲆⵠᐃΔΔ = 0;
    this.time = 0;
    this.ⲆΔⵠᐃⵠ = 0;
    this.ᐃᐃΔᐃᐃⵠⵠ = 0;
    this.ⲆᐃᐃᐃⵠΔΔ = 0;
    this.ᐃΔⲆⲆᐃΔΔ = 0;
    this.ᐃᐃᐃᐃΔΔⵠ = 0;
    this.ⲆⲆⲆⲆⵠⲆⵠ = [];
    this.ΔᐃⲆᐃΔ = -1;
    this.ⵠΔⵠⲆΔⲆΔ = -1;
    this.ⵠΔⵠⵠⵠΔΔ = -1;
    this.ⲆΔΔⲆⲆᐃΔ = undefined;
    this.ⵠⵠⵠⲆᐃⲆⵠ = undefined;
    this.ⲆᐃⲆΔΔᐃᐃ = -1;
    this.ΔᐃΔⲆⵠⵠᐃ = -1;
    this.ⵠⲆⵠⲆᐃⲆⲆ = -1;
    this.ᐃᐃⵠⵠΔᐃⵠ = -1;
    this.ᐃⵠᐃᐃⵠᐃⵠ = Tn;
    this.ⵠΔΔⲆⵠⲆΔ = undefined;
    this.ᐃⵠⵠᐃΔΔⵠ = ca;
    this.ᐃᐃⲆᐃΔⲆⲆ = undefined;
    this.ᐃⵠᐃⵠⵠⵠᐃ = undefined;
    this.ΔΔⲆⵠΔⲆΔ = Aq;
    this.ⲆⵠⲆⵠᐃⲆⲆ = undefined;
    this.ⵠᐃᐃΔⲆⲆⵠ = dk;
    this.ΔΔⵠᐃⲆᐃΔ = br;
    this.ΔⲆⵠⵠᐃⵠΔ = 3;
    this.ⵠⲆⵠΔ = 0;
    this.ΔⲆΔⵠΔᐃⲆⲆᐃ = Ph;
    this.ⵠᐃⲆᐃⲆ = ᐃᐃᐃⲆ.get("starve_quality") ? ᐃᐃᐃⲆ.get("starve_quality") : "high";
    if (this.ⵠᐃⲆᐃⲆ === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ⵠᐃⲆᐃⲆ = 1;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ⵠᐃⲆᐃⲆ = 0;
    }
    this.ᐃⲆⲆΔⲆΔⲆᐃᐃ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ᐃᐃᐃⲆ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 1;
      nx.ⲆΔΔΔΔΔⲆ();
      ix.ⵠᐃⲆᐃⲆ = 1;
    };
    this.ΔⲆⵠᐃΔᐃⵠⲆΔ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ᐃᐃᐃⲆ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (ar / dr);
      nx.ⲆΔΔΔΔΔⲆ();
      ix.ⵠᐃⲆᐃⲆ = 0;
    };
    if (ᐃᐃᐃⲆ.get("starve_mapping") === Yk && mr === "FR") {
      px.ᐃᐃⵠᐃᐃᐃⵠ();
      this.mapping = "azerty";
    } else {
      this.mapping = ᐃᐃᐃⲆ.get("starve_mapping") ? ᐃᐃᐃⲆ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      px.ᐃᐃⵠᐃᐃᐃⵠ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ᐃᐃⵠᐃᐃᐃⵠ = function () {
      px.ᐃᐃⵠᐃᐃᐃⵠ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ᐃᐃᐃⲆ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ⵠΔΔᐃᐃᐃⲆ = function () {
      px.ⵠΔΔᐃᐃᐃⲆ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ᐃᐃᐃⲆ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ⲆⲆⲆΔΔᐃΔ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        x: 0,
        y: 0
      },
      ᐃⲆᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    n();
    this.unlock = {};
    this.unlock.Ⲇᐃⵠᐃ = [];
    this.unlock.ⵠᐃⲆⵠᐃ = [];
    this.unlock.ⵠⲆⲆᐃⵠ = [];
    this.unlock.ΔᐃᐃⲆᐃ = [];
    this.unlock.Ⲇⵠᐃᐃᐃ = [];
    this.unlock.ⵠᐃⲆᐃΔ = [];
    this.ᐃᐃΔᐃᐃⲆⲆ = 0;
    this.ΔⵠᐃⵠⵠⲆᐃ = a;
    a();
    this.ⵠΔⲆⲆⵠ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        x: 0,
        y: 0
      },
      ᐃⲆᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var i;
    var l = 0;
    function o() {
      E.ᐃⲆᐃ();
      if (++l == 30) {
        E.ⵠΔᐃᐃⲆΔᐃ();
        E.ΔⲆᐃᐃⵠᐃⵠ = true;
        E.ᐃⲆᐃ();
        return;
      }
      sa.setTimeout(o, 33);
    }
    this.ⲆᐃⵠⵠΔ = function (a) {
      i = a;
      E.ᐃⵠΔᐃᐃⲆⵠ();
      E.ΔⲆᐃᐃⵠᐃⵠ = 0;
      d = -1;
      r();
    };
    var d = -1;
    function r() {
      E.ᐃⲆᐃ();
      if (++d == 30) {
        ᐃᐃᐃⲆ.set("starve_nickname", E.ᐃΔᐃⲆΔ.input.value, {
          expires: 30
        });
        E.ᐃΔᐃⲆΔ.style.display = "none";
        E.ᐃⲆⵠⲆⵠ.style.display = "none";
        E.ΔⲆⵠᐃⲆⵠⵠ.style.display = "none";
        E.ⲆⲆⲆΔΔᐃΔ.style.display = "none";
        E.ⵠΔⲆⲆⵠ.style.display = "none";
        E.stop();
        i();
        return;
      }
      sa.setTimeout(r, 33);
    }
    this.ⲆΔᐃᐃᐃ = Rh;
    this.stop = function () {
      this.ⲆΔᐃᐃᐃ = false;
    };
    this.ᐃⲆⵠΔΔ = function () {
      wx();
      document.getElementById("game_body").style.backgroundColor = Nr.ⲆᐃᐃᐃΔ[hx.time];
      E.ᐃΔᐃⲆΔ.style.display = "inline-block";
      E.ᐃⲆⵠⲆⵠ.style.display = "inline-block";
      E.ΔⲆⵠᐃⲆⵠⵠ.style.display = "inline-block";
      E.ⲆⲆⲆΔΔᐃΔ.style.display = "inline-block";
      E.ⵠΔⲆⲆⵠ.style.display = "inline-block";
      E.waiting = false;
      E.ⲆΔᐃᐃᐃ = Pr;
      d = -1;
      l = 0;
      o();
    };
    this.ᐃᐃⲆⵠⵠⵠᐃ = function (a, b) {
      b = b < 0 ? -b : b;
      if ((a.position & fa) === fa) {
        if (aa === (a.position & aa)) {
          a.translate.x = zo + a.translate.ᐃᐃⵠᐃⲆ - b;
        } else if (ba === (a.position & ba)) {
          a.translate.x = zo + a.translate.ᐃᐃⵠᐃⲆ + b;
        } else {
          a.translate.x = zo + a.translate.ᐃᐃⵠᐃⲆ;
        }
      } else if ((a.position & aa) === aa) {
        a.translate.x = a.translate.ᐃᐃⵠᐃⲆ - b;
      } else if (ba === (a.position & ba)) {
        a.translate.x = so - a.translate.ᐃᐃⵠᐃⲆ + b;
      } else {
        a.translate.x = a.translate.ᐃᐃⵠᐃⲆ;
      }
      if ((a.position & ha) === ha) {
        if (da === (a.position & da)) {
          a.translate.y = Co + a.translate.ⵠⵠⵠⵠᐃ - b;
        } else if (ea === (a.position & ea)) {
          a.translate.y = Co + a.translate.ⵠⵠⵠⵠᐃ + b;
        } else {
          a.translate.y = Co + a.translate.ⵠⵠⵠⵠᐃ;
        }
      } else if ((a.position & da) === da) {
        a.translate.y = a.translate.ⵠⵠⵠⵠᐃ - b;
      } else if (ea === (a.position & ea)) {
        a.translate.y = yo + a.translate.ⵠⵠⵠⵠᐃ + b;
      } else {
        a.translate.y = a.translate.ⵠⵠⵠⵠᐃ;
      }
      if (a.style !== undefined) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.ᐃⲆᐃ = function () {
      var a = 0;
      if (l != 30 || d != -1) {
        if (l != 30) {
          a = 1500 / (l + 1) - 50;
        }
        if (d != -1) {
          a = -(1750 / (30 - d + 1) - 48);
        }
      }
      for (var b = 0; this.ΔⵠⵠΔ.length > b; b++) {
        this.ᐃᐃⲆⵠⵠⵠᐃ(this.ΔⵠⵠΔ[b], a);
      }
      for (b = 0; b < this.buttons.length; b++) {
        this.ᐃᐃⲆⵠⵠⵠᐃ(this.buttons[b].info, a);
      }
      for (b = 0; b < this.ΔᐃΔⲆΔ.length; b++) {
        this.ᐃᐃⲆⵠⵠⵠᐃ(this.ΔᐃΔⲆΔ[b], a);
      }
      this.ΔⵠⲆΔᐃᐃⲆ.translate.x = (so - this.ΔⵠⲆΔᐃᐃⲆ.ⵠⵠ.width) / 2;
      this.ΔⵠⲆΔᐃᐃⲆ.translate.y = 0;
      this.ΔⲆⵠᐃⲆⵠⵠ.translate.x = so - 450;
      this.ΔⲆⵠᐃⲆⵠⵠ.translate.y = yo - 40;
      this.ⲆⲆⲆΔΔᐃΔ.translate.x = so - 340;
      this.ⲆⲆⲆΔΔᐃΔ.translate.y = yo - 25;
      this.ⵠΔⲆⲆⵠ.translate.x = so - 320;
      this.ⵠΔⲆⲆⵠ.translate.y = 80;
      if (l != 30 || d != -1) {
        var c = 0;
        if (l != 30) {
          c = 1500 / (l + 1) - 50;
        }
        if (d != -1) {
          c = -(1750 / (30 - d + 1) - 48);
        }
        this.ΔⵠⲆΔᐃᐃⲆ.translate.y -= c > 0 ? c : -c;
        this.ΔⲆⵠᐃⲆⵠⵠ.translate.y -= c < 0 ? c : -c;
        this.ⲆⲆⲆΔΔᐃΔ.translate.y -= c < 0 ? c : -c;
      }
      this.ΔⲆⵠᐃⲆⵠⵠ.ᐃⲆᐃ();
      this.ⲆⲆⲆΔΔᐃΔ.ᐃⲆᐃ();
      this.ⵠΔⲆⲆⵠ.ᐃⲆᐃ();
    };
    this.ⵠᐃⵠⵠⲆⲆⲆ = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var e = -Math.PI / 2;
      for (var f = 0; f < b.length; f++) {
        var g = b[f][0];
        var h = b[f][1] * Math.PI / 180;
        d.beginPath();
        d.arc(171, 171, 170, e, e + h, Ah);
        d.lineTo(171, 171);
        d.fillStyle = g;
        d.fill();
        e += h;
      }
      return c;
    };
    this.ᐃᐃᐃⵠⲆⵠⲆⲆⵠ = function () {
      this.ᐃᐃΔⵠᐃⲆⲆ = document.getElementById("account_nickname_input").value;
      if (this.ⵠΔΔᐃⵠⵠΔ !== this.ᐃᐃΔⵠᐃⲆⲆ) {
        this.ⵠΔΔᐃⵠⵠΔ = this.ᐃᐃΔⵠᐃⲆⲆ;
        this.ⵠⵠΔⲆᐃⲆΔ = df(this.ᐃᐃΔⵠᐃⲆⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ⵠⵠⲆⵠ = function () {
      np();
      ix.ΔᐃⵠᐃⲆΔᐃ = ⵠⵠⵠ.ⵠⲆᐃΔⲆ(ix.ΔᐃⵠᐃⲆΔᐃ, ix.ΔᐃΔⲆᐃⵠⵠ, 0.03);
      this.ΔⵠⵠΔ[ᐃΔΔΔⵠⵠΔ].translate.x = this.ΔⵠⵠΔ[0].translate.x + -72 + ix.ΔᐃⵠᐃⲆΔᐃ * 165;
      this.ΔⵠⵠΔ[ᐃΔΔΔⵠⵠΔ].translate.ᐃᐃⵠᐃⲆ = this.ΔⵠⵠΔ[ᐃΔΔΔⵠⵠΔ].translate.x;
      this.ΔⵠⵠΔ[ᐃΔΔΔⵠⵠΔ].translate.y = this.ΔⵠⵠΔ[0].translate.y + 30;
      this.ΔⵠⵠΔ[ᐃΔΔΔⵠⵠΔ].translate.ⵠⵠⵠⵠᐃ = this.ΔⵠⵠΔ[ᐃΔΔΔⵠⵠΔ].translate.y;
      for (var b = 2; this.ΔⵠⵠΔ.length > b; b++) {
        if (this.ΔⵠⵠΔ[b].active === ma) {
          this.ΔⵠⵠΔ[b].ⵠⵠⲆⵠ(s);
        }
      }
      var k;
      if ((k = this.ΔᐃⲆᐃΔ - Date.now()) > 0) {
        var n = Math.floor(k / 60000);
        var x = Math.floor(n / 60);
        n %= 60;
        if (this.ⵠΔⵠⵠⵠΔΔ !== n) {
          this.ⵠΔⵠⵠⵠΔΔ = n;
          n = n < 10 ? "0" + n : "" + n;
          E.ⲆΔΔⲆⲆᐃΔ = df(n, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ⵠΔⵠⲆΔⲆΔ !== x) {
          this.ⵠΔⵠⲆΔⲆΔ = x;
          x = x < 10 ? "0" + x : "" + x;
          E.ⵠⵠⵠⲆᐃⲆⵠ = df(x, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (V = this.ΔⵠⵠΔ[ᐃⲆⲆᐃΔᐃᐃ]).ⵠⵠⲆⵠ(s);
        var C = this.ⵠⵠⵠⲆᐃⲆⵠ;
        Jp(s, C, V.translate.x - C.width / 4 + 182, V.translate.y - C.height / 4 + 40, C.width / 2, C.height / 2);
        C = this.ⲆΔΔⲆⲆᐃΔ;
        Jp(s, C, V.translate.x - C.width / 4 + 251, V.translate.y - C.height / 4 + 40, C.width / 2, C.height / 2);
      }
      if ((k = this.ⲆᐃⲆΔΔᐃᐃ - Date.now()) > 0) {
        n = Math.floor(k / 60000);
        x = Math.floor(n / 60);
        var V;
        var X = Math.floor(x / 24);
        x %= 24;
        if ((n %= 60) !== this.ᐃᐃⵠⵠΔᐃⵠ) {
          this.ᐃᐃⵠⵠΔᐃⵠ = n;
          n = n < 10 ? "0" + n : "" + n;
          E.ᐃⵠᐃᐃⵠᐃⵠ = df(n, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (x !== this.ⵠⲆⵠⲆᐃⲆⲆ) {
          this.ⵠⲆⵠⲆᐃⲆⲆ = x;
          x = x < 10 ? "0" + x : "" + x;
          E.ⵠΔΔⲆⵠⲆΔ = df(x, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (X !== this.ΔᐃΔⲆⵠⵠᐃ) {
          this.ΔᐃΔⲆⵠⵠᐃ = X;
          X = X < 10 ? "0" + X : "" + X;
          E.ᐃⵠⵠᐃΔΔⵠ = df(X, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (V = this.ΔⵠⵠΔ[ΔΔⵠΔᐃⵠᐃ]).ⵠⵠⲆⵠ(s);
        C = this.ᐃⵠⵠᐃΔΔⵠ;
        Jp(s, C, V.translate.x - C.width / 4 + 113, V.translate.y - C.height / 4 + 40, C.width / 2, C.height / 2);
        C = this.ⵠΔΔⲆⵠⲆΔ;
        Jp(s, C, V.translate.x - C.width / 4 + 182, V.translate.y - C.height / 4 + 40, C.width / 2, C.height / 2);
        C = this.ᐃⵠᐃᐃⵠᐃⵠ;
        Jp(s, C, V.translate.x - C.width / 4 + 251, V.translate.y - C.height / 4 + 40, C.width / 2, C.height / 2);
      }
      if (t === (this.ΔⵠᐃᐃΔ & t)) {
        this.buttons[ᐃⲆᐃⵠΔᐃⲆ].info.state = gf;
      } else if ((this.ΔⵠᐃᐃΔ & A) === A) {
        this.buttons[ⵠⵠΔⵠⲆᐃΔ].info.state = gf;
      } else if ((this.ΔⵠᐃᐃΔ & f) === f) {
        this.buttons[ⵠⲆⵠΔᐃⵠᐃ].info.state = gf;
      } else if ((this.ΔⵠᐃᐃΔ & p) === p) {
        this.buttons[ⲆΔΔⵠⵠⲆⲆ].info.state = gf;
      } else if ((this.ΔⵠᐃᐃΔ & y) === y) {
        this.buttons[ΔⵠⲆⵠⲆΔⲆ].info.state = gf;
      } else if (F === (this.ΔⵠᐃᐃΔ & F)) {
        this.buttons[ΔΔᐃΔᐃΔᐃ].info.state = gf;
      } else if (z === (this.ΔⵠᐃᐃΔ & z) || B === (this.ΔⵠᐃᐃΔ & B) || (this.ΔⵠᐃᐃΔ & D) === D || I === (this.ΔⵠᐃᐃΔ & I) || (this.ΔⵠᐃᐃΔ & J) === J || (this.ΔⵠᐃᐃΔ & M) === M || (this.ΔⵠᐃᐃΔ & N) === N) {
        this.buttons[ⵠⵠⵠΔᐃⵠⲆ].info.state = gf;
      } else if ((this.ΔⵠᐃᐃΔ & O) === O || (this.ΔⵠᐃᐃΔ & L) === L || (this.ΔⵠᐃᐃΔ & j) === j || (this.ΔⵠᐃᐃΔ & P) === P || G === (this.ΔⵠᐃᐃΔ & G) || (this.ΔⵠᐃᐃΔ & q) === q) {
        this.buttons[ⵠⲆⵠΔᐃⵠᐃ].info.state = gf;
      } else if ((this.ΔⵠᐃᐃΔ & R) === R || (this.ΔⵠᐃᐃΔ & K) === K || (this.ΔⵠᐃᐃΔ & S) === S) {
        this.buttons[ΔΔΔⲆΔᐃᐃ].info.state = gf;
      } else if ((this.ΔⵠᐃᐃΔ & U) === U) {
        this.buttons[ⲆΔΔⵠⵠⲆⲆ].info.state = gf;
      }
      if (A === (this.ΔⵠᐃᐃΔ & A)) {
        if (this.ⲆⵠΔⵠⵠΔⲆ === this.ⲆⵠⲆⵠᐃⲆⲆ) {
          this.ΔΔⲆⵠΔⲆΔ = this.ᐃⵠΔⲆⲆᐃᐃ;
          this.buttons[this.ᐃⵠΔⲆⲆᐃᐃ].info.active = la;
          this.buttons[this.ⵠᐃᐃᐃⵠⲆⲆ].info.active = la;
          this.buttons[this.ᐃΔᐃⵠᐃΔΔ].info.active = la;
        } else {
          this.buttons[this.ᐃⵠΔⲆⲆᐃᐃ].info.active = ma;
          this.buttons[this.ⵠᐃᐃᐃⵠⲆⲆ].info.active = ma;
          this.buttons[this.ᐃΔᐃⵠᐃΔΔ].info.active = ma;
        }
        if (this.ⲆⲆΔᐃⵠⲆⵠ === this.ⲆⵠⲆⵠᐃⲆⲆ) {
          this.buttons[this.ⲆⲆΔᐃⵠⲆⵠ].info.state = gf;
        } else if (this.ⲆⵠⲆⵠᐃⲆⲆ === this.ᐃⲆᐃᐃⲆⲆⵠ) {
          this.buttons[this.ᐃⲆᐃᐃⲆⲆⵠ].info.state = gf;
        } else if (this.ⲆⵠΔⵠⵠΔⲆ === this.ⲆⵠⲆⵠᐃⲆⲆ) {
          this.buttons[this.ⲆⵠΔⵠⵠΔⲆ].info.state = gf;
        } else if (this.ⵠⵠᐃΔᐃΔⵠ === this.ⲆⵠⲆⵠᐃⲆⲆ) {
          this.buttons[this.ⵠⵠᐃΔᐃΔⵠ].info.state = gf;
        } else if (this.ⲆⵠⲆⵠᐃⲆⲆ === this.ΔⲆⲆⵠⵠⵠⲆ) {
          this.buttons[this.ΔⲆⲆⵠⵠⵠⲆ].info.state = gf;
        }
        if (this.ᐃⵠΔⲆⲆᐃᐃ === this.ΔΔⲆⵠΔⲆΔ) {
          this.buttons[this.ᐃⵠΔⲆⲆᐃᐃ].info.state = gf;
        } else if (this.ΔΔⲆⵠΔⲆΔ === this.ⵠᐃᐃᐃⵠⲆⲆ) {
          this.buttons[this.ⵠᐃᐃᐃⵠⲆⲆ].info.state = gf;
        } else if (this.ΔΔⲆⵠΔⲆΔ === this.ᐃΔᐃⵠᐃΔΔ) {
          this.buttons[this.ᐃΔᐃⵠᐃΔΔ].info.state = gf;
        }
        if (this.ᐃᐃΔⲆⵠΔᐃ === this.ⵠᐃᐃΔⲆⲆⵠ) {
          this.buttons[this.ᐃᐃΔⲆⵠΔᐃ].info.state = gf;
        } else if (this.ⵠᐃΔΔⲆⲆΔ === this.ⵠᐃᐃΔⲆⲆⵠ) {
          this.buttons[this.ⵠᐃΔΔⲆⲆΔ].info.state = gf;
        } else if (this.ⵠⵠⵠⵠⵠⵠᐃ === this.ⵠᐃᐃΔⲆⲆⵠ) {
          this.buttons[this.ⵠⵠⵠⵠⵠⵠᐃ].info.state = gf;
        }
        if (this.ⲆⲆΔΔⲆΔᐃ === this.ΔΔⵠᐃⲆᐃΔ) {
          this.buttons[this.ⲆⲆΔΔⲆΔᐃ].info.state = gf;
        } else if (this.ⵠⵠⵠᐃΔⵠⲆ === this.ΔΔⵠᐃⲆᐃΔ) {
          this.buttons[this.ⵠⵠⵠᐃΔⵠⲆ].info.state = gf;
        } else if (this.ⲆᐃⵠⲆᐃᐃΔ === this.ΔΔⵠᐃⲆᐃΔ) {
          this.buttons[this.ⲆᐃⵠⲆᐃᐃΔ].info.state = gf;
        } else if (this.ΔΔⵠᐃⲆᐃΔ === this.ᐃⵠⵠΔΔᐃᐃ) {
          this.buttons[this.ᐃⵠⵠΔΔᐃᐃ].info.state = gf;
        } else if (this.ⵠΔⵠΔΔᐃᐃ === this.ΔΔⵠᐃⲆᐃΔ) {
          this.buttons[this.ⵠΔⵠΔΔᐃᐃ].info.state = gf;
        } else if (this.ᐃΔᐃΔⵠⵠᐃ === this.ΔΔⵠᐃⲆᐃΔ) {
          this.buttons[this.ᐃΔᐃΔⵠⵠᐃ].info.state = gf;
        }
      }
      if ((this.ΔⵠᐃᐃΔ & p) === p) {
        if (this.ΔᐃᐃΔⲆⵠⲆ === -1) {
          this.buttons[Ea].info.state = gf;
        } else if (this.ΔᐃᐃΔⲆⵠⲆ === 0) {
          this.buttons[Fa].info.state = gf;
        } else if (this.ΔᐃᐃΔⲆⵠⲆ === 2) {
          this.buttons[Ha].info.state = gf;
        } else if (this.ΔᐃᐃΔⲆⵠⲆ === 3) {
          this.buttons[Ia].info.state = gf;
        } else if (this.ΔᐃᐃΔⲆⵠⲆ === 4) {
          this.buttons[Ga].info.state = gf;
        }
        if (this.ΔⲆⵠⵠᐃⵠΔ === 0) {
          this.buttons[ya].info.state = gf;
        } else if (this.ΔⲆⵠⵠᐃⵠΔ === 1) {
          this.buttons[za].info.state = gf;
        } else if (this.ΔⲆⵠⵠᐃⵠΔ === 2) {
          this.buttons[Aa].info.state = gf;
        } else if (this.ΔⲆⵠⵠᐃⵠΔ === 3) {
          this.buttons[Ba].info.state = gf;
        } else if (this.ΔⲆⵠⵠᐃⵠΔ === 4) {
          this.buttons[Ca].info.state = gf;
        } else if (this.ΔⲆⵠⵠᐃⵠΔ === 5) {
          this.buttons[Da].info.state = gf;
        }
      }
      if ((this.ΔⵠᐃᐃΔ & t) === t && mx.ⲆΔᐃᐃᐃᐃⵠ === 0) {
        if (this.buttons[qa].ⲆΔᐃΔⵠⲆⲆ(qx.ΔᐃΔⲆ)) {
          this.buttons[qa].hint = Math.min(1, this.buttons[qa].hint + sx * 1.5);
        } else {
          this.buttons[qa].hint = Math.max(0, this.buttons[qa].hint - sx * 1.5);
        }
        if (this.buttons[ra].ⲆΔᐃΔⵠⲆⲆ(qx.ΔᐃΔⲆ)) {
          this.buttons[ra].hint = Math.min(1, this.buttons[ra].hint + sx * 1.5);
        } else {
          this.buttons[ra].hint = Math.max(0, this.buttons[ra].hint - sx * 1.5);
        }
        if (this.buttons[ta].ⲆΔᐃΔⵠⲆⲆ(qx.ΔᐃΔⲆ)) {
          this.buttons[ta].hint = Math.min(1, this.buttons[ta].hint + sx * 1.5);
        } else {
          this.buttons[ta].hint = Math.max(0, this.buttons[ta].hint - sx * 1.5);
        }
        if (this.buttons[wa].ⲆΔᐃΔⵠⲆⲆ(qx.ΔᐃΔⲆ)) {
          this.buttons[wa].hint = Math.min(1, this.buttons[wa].hint + sx * 1.5);
        } else {
          this.buttons[wa].hint = Math.max(0, this.buttons[wa].hint - sx * 1.5);
        }
        if (this.buttons[ua].ⲆΔᐃΔⵠⲆⲆ(qx.ΔᐃΔⲆ)) {
          this.buttons[ua].hint = Math.min(1, this.buttons[ua].hint + sx * 1.5);
        } else {
          this.buttons[ua].hint = Math.max(0, this.buttons[ua].hint - sx * 1.5);
        }
        if (this.buttons[va].ⲆΔᐃΔⵠⲆⲆ(qx.ΔᐃΔⲆ)) {
          this.buttons[va].hint = Math.min(1, this.buttons[va].hint + sx * 1.5);
        } else {
          this.buttons[va].hint = Math.max(0, this.buttons[va].hint - sx * 1.5);
        }
      }
      var Y = 1;
      if ((this.ΔⵠᐃᐃΔ & (B | D | I | J | M | N)) > 1) {
        C = ᐃΔ.ⵠⲆΔᐃⲆⲆⵠ;
        s.save();
        s.translate(zo, pa + C.height / 4);
        if (this.ᐃΔⵠᐃᐃ === 1) {
          this.ⲆⲆᐃⵠΔⵠᐃ += sx / 3;
          Y = this.ΔΔⵠᐃΔᐃⲆ - 100 / Math.pow(1 + this.ⲆⲆᐃⵠΔⵠᐃ, 1 + this.ⲆⲆᐃⵠΔⵠᐃ);
          s.rotate(Y);
        }
        Jp(s, C, -C.width / 4, -C.height / 4, C.width / 2, C.height / 2);
        s.restore();
      }
      if (mx.ⲆΔᐃᐃᐃᐃⵠ === 0) {
        if (mx.ⲆΔⲆΔᐃ === 0) {
          this.buttons[qa].info.state = gf;
        } else if (mx.ⲆΔⲆΔᐃ === 4) {
          this.buttons[ra].info.state = gf;
        } else if (mx.ⲆΔⲆΔᐃ === 2) {
          this.buttons[ua].info.state = gf;
        } else if (mx.ⲆΔⲆΔᐃ === 3) {
          this.buttons[va].info.state = gf;
        } else if (mx.ⲆΔⲆΔᐃ === 6) {
          this.buttons[ta].info.state = gf;
        } else if (mx.ⲆΔⲆΔᐃ === 7) {
          this.buttons[wa].info.state = gf;
        }
      }
      for (b = 1; b < this.buttons.length; b++) {
        if (ma === this.buttons[b].info.active) {
          this.buttons[b].ⵠⵠⲆⵠ(s);
        }
      }
      this.ΔⵠⵠΔ[0].ⵠⵠⲆⵠ(s);
      if ((this.ΔⵠᐃᐃΔ & (Q | H)) > 0) {
        C = this.ⵠⵠΔⲆᐃⲆΔ;
        Jp(s, C, zo - C.width / 4, 138, C.width / 2, C.height / 2);
      }
      var Z = Math.max(1, Math.min(18, Math.floor((ix.ⲆⲆⵠⵠᐃ + 3) / 2)));
      this.ΔⵠⵠΔ[Z].active = ma;
      this.ΔⵠⵠΔ[Z].ⵠⵠⲆⵠ(s);
      this.ΔⵠⵠΔ[Z].active = la;
      this.buttons[0].ⵠⵠⲆⵠ(s);
      if ((this.ΔⵠᐃᐃΔ & (f | L | P | O | G)) > 1) {
        var u = (this.ΔⵠᐃᐃΔ & (L | P | O | G)) > 1 ? -190 : 0;
        C = ⲆΔ[29][this.ⵠᐃⲆⵠᐃ][this.ᐃᐃΔᐃᐃⲆⲆ];
        Jp(s, C, zo - C.width / 4 + u, 183, C.width / 2, C.height / 2);
        this.ⵠⲆⵠΔ = (this.ⵠⲆⵠΔ + sx * 1000) % 2000;
        var d = (this.ⵠⲆⵠΔ < 1000) * 4.5 ? this.ⵠⲆⵠΔ / 1000 : (2000 - this.ⵠⲆⵠΔ) / 1000;
        C = ⲆΔ[28][this.ⵠⲆⲆᐃⵠ][this.ᐃᐃΔᐃᐃⲆⲆ];
        Jp(s, C, zo - C.width / 4 - 62 + d + u, 240, C.width / 2, C.height / 2);
        C = ⲆΔ[7][this.Ⲇᐃⵠᐃ][this.ᐃᐃΔᐃᐃⲆⲆ];
        Jp(s, C, zo - C.width / 4 - 54 + d + u, 272, C.width / 2, C.height / 2);
        Jp(s, C, zo - C.width / 4 + 54 - d + u, 272, C.width / 2, C.height / 2);
        C = ⲆΔ[255][this.Ⲇᐃⵠᐃ][this.ᐃᐃΔᐃᐃⲆⲆ];
        Jp(s, C, zo - C.width / 4 + u, 222, C.width / 2, C.height / 2);
        C = ⲆΔ[796][this.ⵠᐃⲆᐃΔ][this.ᐃᐃΔᐃᐃⲆⲆ];
        Jp(s, C, zo - C.width / 4 + u, 222, C.width / 2, C.height / 2);
      }
      if (f === (this.ΔⵠᐃᐃΔ & f)) {
        C = ⲆΔ[250][this.ΔᐃᐃⲆᐃ][this.ᐃᐃΔᐃᐃⲆⲆ];
        Jp(s, C, zo - C.width / 4 - 61, 406 - C.height / 4, C.width / 2, C.height / 2);
        C = ⲆΔ[250][this.Ⲇⵠᐃᐃᐃ][this.ᐃᐃΔᐃᐃⲆⲆ];
        Jp(s, C, zo - C.width / 4 + 53, 406 - C.height / 4, C.width / 2, C.height / 2);
      }
      if ((this.ΔⵠᐃᐃΔ & j) === j) {
        C = ⲆΔ[250][this.Ⲇⵠᐃᐃᐃ][this.ᐃᐃΔᐃᐃⲆⲆ];
        Jp(s, C, zo - C.width / 4 - 200, 268 - C.height / 4, C.width / 2, C.height / 2);
      }
      if (q === (this.ΔⵠᐃᐃΔ & q)) {
        C = ⲆΔ[250][this.ΔᐃᐃⲆᐃ][this.ᐃᐃΔᐃᐃⲆⲆ];
        Jp(s, C, zo - C.width / 4 - 200, 268 - C.height / 4, C.width / 2, C.height / 2);
      }
      if ((this.ΔⵠᐃᐃΔ & (L | P | O | G | j | q)) > 1) {
        for (b = 1; this.buttons.length > b; b++) {
          if (this.buttons[b].view & this.ΔⵠᐃᐃΔ) {
            var _ = this.buttons[b].info;
            if (_.ΔⵠᐃⵠⲆΔᐃ >= 0) {
              C = _.ⲆⲆⵠⲆⵠⵠⲆⲆⵠ[_.ΔⵠᐃⵠⲆΔᐃ].ⵠᐃⲆ;
              Jp(s, C, _.translate.x - C.width / 8 + 44.5, _.translate.y - C.height / 8 + 45.5, C.width / 4, C.height / 4);
              if (_.ΔⵠᐃΔᐃⲆⲆ !== 1) {
                C = ᐃΔ.ᐃⵠΔⵠΔⵠᐃ;
                Jp(s, C, _.translate.x - C.width / 4 + 44.5, _.translate.y - C.height / 4 + 44.5, C.width / 2, C.height / 2);
              }
            }
          }
        }
        C = this.ᐃᐃⲆᐃΔⲆⲆ;
        Jp(s, C, zo - 312, 375, C.width / 2, C.height / 2);
        C = this.ᐃⵠᐃⵠⵠⵠᐃ;
        Jp(s, C, zo - 312, 395, C.width / 2, C.height / 2);
      }
      if (this.Δᐃⵠᐃⵠ !== this.ᐃⵠⲆⲆΔΔⲆ) {
        this.ᐃⵠⲆⲆΔΔⲆ = this.Δᐃⵠᐃⵠ;
        this.ᐃⲆΔᐃⲆΔⲆ = df("" + this.Δᐃⵠᐃⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      Jp(s, this.ᐃⲆΔᐃⲆΔⲆ, this.ΔⵠⵠΔ[0].translate.x + 350, 15, this.ᐃⲆΔᐃⲆΔⲆ.w2, this.ᐃⲆΔᐃⲆΔⲆ.ᐃⲆΔⵠⵠ);
      if (this.ⵠⲆⲆᐃᐃⲆⲆ !== this.ⲆⲆⵠⵠᐃ) {
        this.ⵠⲆⲆᐃᐃⲆⲆ = this.ⲆⲆⵠⵠᐃ;
        this.ⲆᐃⵠᐃⲆⵠⲆ = df("LVL " + (this.ⲆⲆⵠⵠᐃ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, undefined, w, undefined, Aq, "#3F3019", 20);
      }
      Jp(s, this.ⲆᐃⵠᐃⲆⵠⲆ, this.ΔⵠⵠΔ[0].translate.x + 94, 0, this.ⲆᐃⵠᐃⲆⵠⲆ.w2, this.ⲆᐃⵠᐃⲆⵠⲆ.ᐃⲆΔⵠⵠ);
      if (mx.ⲆΔᐃᐃᐃᐃⵠ === 0) {
        var aa = this.buttons[qa].hint;
        if (aa > 0) {
          C = ᐃΔ.ΔᐃⵠᐃⵠⲆᐃ;
          Jp(s, C, zo - C.width / 4, -36 - C.height * ⵠⵠⵠ.ⲆΔⵠⲆΔ(1 - aa) / 2, C.width / 2, C.height / 2);
        }
        if ((aa = this.buttons[ra].hint) > 0) {
          C = ᐃΔ.ⲆⵠⲆⲆΔᐃⵠ;
          Jp(s, C, zo - C.width / 4, -36 - ⵠⵠⵠ.ⲆΔⵠⲆΔ(1 - aa) * C.height / 2, C.width / 2, C.height / 2);
        }
        aa = this.buttons[ta].hint;
        if (aa > 0) {
          C = ᐃΔ.ⲆⵠⵠⲆⲆΔⲆ;
          Jp(s, C, zo - C.width / 4, -36 - C.height * ⵠⵠⵠ.ⲆΔⵠⲆΔ(1 - aa) / 2, C.width / 2, C.height / 2);
        }
        if ((aa = this.buttons[wa].hint) > 0) {
          C = ᐃΔ.ⲆⲆⲆΔΔⲆΔ;
          Jp(s, C, zo - C.width / 4, -36 - ⵠⵠⵠ.ⲆΔⵠⲆΔ(1 - aa) * C.height / 2, C.width / 2, C.height / 2);
        }
        aa = this.buttons[va].hint;
        if (aa > 0) {
          C = ᐃΔ.ⲆⲆⲆᐃⵠΔⵠ;
          Jp(s, C, zo - C.width / 4, -36 - ⵠⵠⵠ.ⲆΔⵠⲆΔ(1 - aa) * C.height / 2, C.width / 2, C.height / 2);
        }
        if ((aa = this.buttons[ua].hint) > 0) {
          C = ᐃΔ.ⵠⵠΔᐃⲆⵠΔ;
          Jp(s, C, zo - C.width / 4, -36 - C.height * ⵠⵠⵠ.ⲆΔⵠⲆΔ(1 - aa) / 2, C.width / 2, C.height / 2);
        }
      }
      if (this.ᐃΔⵠᐃᐃ === 1 && Math.abs(Y - this.ΔΔⵠᐃΔᐃⲆ) < 0.006) {
        s.globalAlpha = Math.min(1, this.ᐃⵠΔᐃⲆᐃⵠ * 3);
        C = ᐃΔ.ΔᐃᐃⵠΔⲆⵠ;
        s.save();
        s.translate(zo, 260);
        this.ᐃⵠΔᐃⲆᐃⵠ += sx;
        s.rotate(this.ᐃⵠΔᐃⲆᐃⵠ);
        Jp(s, C, -C.width / 2, -C.height / 2, C.width, C.height);
        s.restore();
        d = 1.05 + Math.cos(this.ᐃⵠΔᐃⲆᐃⵠ * 5) * 0.05;
        if (this.ᐃⵠⲆⵠⵠᐃⵠ === 0) {
          var ba = (C = ᐃᐃΔⵠ.ⲆⲆᐃⲆΔ[this.ᐃΔⲆⲆΔⵠⲆ].ⵠᐃⲆ).width * d;
          var ca = C.height * d;
          Jp(s, C, zo - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ᐃⵠⲆⵠⵠᐃⵠ === 1) {
          ba = d * (C = ᐃᐃΔⵠ.ⲆⲆᐃⲆΔ[0].ⵠᐃⲆ).width;
          ca = d * C.height;
          Jp(s, C, zo - ba / 2, 260 - ca / 2, ba, ca);
          ba = d * (C = ᐃᐃΔⵠ.ᐃΔᐃΔⲆ[this.ᐃΔⲆⲆΔⵠⲆ].ⵠᐃⲆ).width;
          ca = d * C.height;
          Jp(s, C, zo - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ᐃⵠⲆⵠⵠᐃⵠ === 2) {
          ba = (C = ᐃᐃΔⵠ.ⲆΔΔΔ[this.ᐃΔⲆⲆΔⵠⲆ].ⵠᐃⲆ).width * d;
          ca = d * C.height;
          Jp(s, C, zo - ba / 2, 180 - ca / 2, ba, ca);
          ba = d * (C = ᐃᐃΔⵠ.ⲆⲆᐃⲆΔ[0].ⵠᐃⲆ).width;
          ca = d * C.height;
          Jp(s, C, zo - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ᐃⵠⲆⵠⵠᐃⵠ === 3) {
          ba = (C = ᐃᐃΔⵠ.ΔⵠΔΔⲆ[this.ᐃΔⲆⲆΔⵠⲆ].ⵠᐃⲆ).width * d;
          ca = C.height * d;
          s.save();
          s.translate(zo, 260);
          s.rotate(Math.PI);
          Jp(s, C, -ba / 2, -ca / 2, ba, ca);
          s.restore();
        } else if (this.ᐃⵠⲆⵠⵠᐃⵠ === 4) {
          ba = d * (C = ᐃᐃΔⵠ.Δⵠⵠᐃᐃ[this.ᐃΔⲆⲆΔⵠⲆ].ⵠᐃⲆ).width;
          ca = d * C.height;
          Jp(s, C, zo - ba / 2, 260 - ca / 2, ba, ca);
        }
        C = this.ΔᐃΔⵠᐃⲆⲆ;
        Jp(s, C, zo - C.width / 4, 340, C.width / 2, C.height / 2);
        C = this.ΔᐃᐃⵠⲆΔⲆ;
        Jp(s, C, zo - C.width / 4, 365, C.width / 2, C.height / 2);
        if (this.ᐃⵠΔᐃⲆᐃⵠ > 6) {
          this.ᐃΔⵠᐃᐃ = 0;
          W(z);
        }
        s.globalAlpha = 1;
      }
      kx.alert.ⵠⵠⲆⵠ("#FFF", "#000");
      if (E.waiting) {
        this.ΔⵠⲆΔᐃᐃⲆ.ⵠⵠⲆⵠ();
      }
    };
    var m = 0;
    var t = Math.pow(2, m++);
    var p = Math.pow(2, m++);
    this.ΔⲆᐃⵠΔ = p;
    var F = Math.pow(2, m++);
    var f = Math.pow(2, m++);
    var z = Math.pow(2, m++);
    var y = Math.pow(2, m++);
    var A = Math.pow(2, m++);
    var k = Math.pow(2, m++);
    this.ᐃⲆᐃᐃΔ = k;
    var u = Math.pow(2, m++);
    var x = Math.pow(2, m++);
    var B = Math.pow(2, m++);
    var D = Math.pow(2, m++);
    var I = Math.pow(2, m++);
    var J = Math.pow(2, m++);
    var M = Math.pow(2, m++);
    var N = Math.pow(2, m++);
    var O = Math.pow(2, m++);
    var j = Math.pow(2, m++);
    var L = Math.pow(2, m++);
    var P = Math.pow(2, m++);
    var G = Math.pow(2, m++);
    var q = Math.pow(2, m++);
    var H = Math.pow(2, m++);
    var Q = Math.pow(2, m++);
    var R = Math.pow(2, m++);
    this.ⲆᐃⵠΔΔ = R;
    var K = Math.pow(2, m++);
    this.ⲆⲆᐃᐃⲆ = K;
    var S = Math.pow(2, m++);
    this.ⲆᐃᐃΔⵠ = S;
    var U = Math.pow(2, m++);
    function V(a, b, c) {
      for (var d = 0; E.ΔⵠⵠΔ.length > d; d++) {
        if (E.ΔⵠⵠΔ[d].view & a) {
          E.ΔⵠⵠΔ[d].active = b;
        }
      }
      for (d = 0; d < E.buttons.length; d++) {
        if (E.buttons[d].view & a) {
          E.buttons[d].info.active = b;
        }
      }
      for (d = 0; E.ΔᐃΔⲆΔ.length > d; d++) {
        if ((E.ΔᐃΔⲆΔ[d].view & a) !== 0) {
          E.ΔᐃΔⲆΔ[d].style.display = c;
        }
      }
    }
    this.ΔⵠᐃᐃΔ = t;
    function W(a) {
      if (E.ΔⲆᐃᐃⵠᐃⵠ !== cl) {
        V(u, la, "none");
        V(x, la, "none");
        X();
        if (a !== E.ΔⵠᐃᐃΔ && E.ᐃΔⵠᐃᐃ < 1) {
          E.ⵠΔⲆⲆⵠ.style.display = a === t || z === a || a === p || A === a || a === f || y === a ? "inline-block" : "none";
          V(E.ΔⵠᐃᐃΔ, la, "none");
          E.ΔⵠᐃᐃΔ = a;
          V(E.ΔⵠᐃᐃΔ, ma, "inline-block");
        }
      }
    }
    function X() {
      var b = Number(ᐃᐃᐃⲆ.get("starve_crate"));
      var c = Number(ᐃᐃᐃⲆ.get("starve_dead"));
      var d = Number(ᐃᐃᐃⲆ.get("starve_book"));
      var e = Number(ᐃᐃᐃⲆ.get("starve_bag"));
      var f = Number(ᐃᐃᐃⲆ.get("starve_skin"));
      var g = Number(ᐃᐃᐃⲆ.get("starve_accessory"));
      if (ix.unlock.Ⲇᐃⵠᐃ[ix.Ⲇᐃⵠᐃ] <= 0) {
        ix.Ⲇᐃⵠᐃ = ix.unlock.Ⲇᐃⵠᐃ[f] > 0 ? f : 0;
      }
      if (ix.unlock.ⵠⲆⲆᐃⵠ[ix.ⵠⲆⲆᐃⵠ] <= 0) {
        ix.ⵠⲆⲆᐃⵠ = ix.unlock.ⵠⲆⲆᐃⵠ[d] > 0 ? d : 0;
      }
      if (ix.unlock.Ⲇⵠᐃᐃᐃ[ix.Ⲇⵠᐃᐃᐃ] <= 0) {
        ix.Ⲇⵠᐃᐃᐃ = ix.unlock.Ⲇⵠᐃᐃᐃ[c] > 0 ? c : 0;
      }
      if (ix.unlock.ΔᐃᐃⲆᐃ[ix.ΔᐃᐃⲆᐃ] <= 0) {
        ix.ΔᐃᐃⲆᐃ = ix.unlock.ΔᐃᐃⲆᐃ[b] > 0 ? b : 0;
      }
      if (ix.unlock.ⵠᐃⲆᐃΔ[ix.ⵠᐃⲆᐃΔ] <= 0) {
        ix.ⵠᐃⲆᐃΔ = ix.unlock.ⵠᐃⲆᐃΔ[g] > 0 ? g : 0;
      }
      if (ix.unlock.ⵠᐃⲆⵠᐃ[ix.ⵠᐃⲆⵠᐃ] <= 0) {
        ix.ⵠᐃⲆⵠᐃ = ix.unlock.ⵠᐃⲆⵠᐃ[e] > 0 ? e : 0;
      }
    }
    function Y(a) {
      if (kx.ΔⵠᐃⲆΔΔⲆ !== undefined && kx.ΔⲆⲆⵠⵠΔⵠ !== undefined && kx.ΔⲆᐃⵠⵠⵠᐃ !== Fn && An !== kx.ⲆⲆⲆᐃⲆᐃⵠ) {
        a();
      }
    }
    function Z(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          if (jq !== b) {
            b(d.responseText);
          }
        } else if (this.readyState == 4 && c !== undefined) {
          c();
        }
      };
      d.send();
    }
    function _() {
      X();
      if (vx % 2) {
        console.log(undefined);
        mx.connect();
      } else {
        console.log(undefined);
        if (sa.Widget.isBlocked === 1) {
          sa.Widget.createAdPlayer(mx.connect.bind(mx), mx.connect.bind(mx));
        } else {
          sa.Widget.preroll();
          sa.Widget.play = mx.connect.bind(mx);
        }
      }
    }
    this.ⲆᐃⲆⵠⲆᐃⲆ = 0;
    this.ᐃⲆΔΔ = W;
    this.ⵠΔᐃⵠⲆᐃΔ = function (j, a) {
      let b = "0";
      let e = 0;
      if (Ix) {
        b = Ix + "0";
      }
      if (kx.ΔⵠᐃⲆΔΔⲆ) {
        Y(j);
      } else {
        Z(`${Bx}token?id=${b}`, function (b) {
          if (e === 1) {
            return;
          }
          const c = b.split("_");
          const d = c[0] + "_";
          const f = Number(c[1]);
          const a = Math.abs(function (a) {
            return Xk(a, 8260, 46947, 8004, 37330, 5330);
          }(f));
          kx.ΔⵠᐃⲆΔΔⲆ = d + a;
          Y(j);
        }, function () {
          if (e !== 1) {
            if (a === 1) {
              e = 1;
              j();
              return;
            } else {
              E.waiting = false;
              return;
            }
          }
        });
      }
      Z(`${Cx}let`, function (q) {
        if (e === 1) {
          return;
        }
        var o = 126;
        if (o > 10) {
          o = 27;
        }
        var x = 140;
        if (x == 9) {
          x = 102;
        }
        var B = 212;
        if (B == 11) {
          B = 78;
        }
        q = q.split(":");
        {
          if (20 >= 42) {
            171;
          }
          var D = 71;
          if (D === 2) {
            D = 188;
          }
          var E = 92;
          if (E >= 13) {
            E = 83;
          }
          var F = 62;
          if (F > 9) {
            F = 190;
          }
          if (218 >= 7) {
            155;
          }
          if (31 >= 162) {
            225;
          }
          const a = q[0].split("_");
          const b = a[0] + "_";
          const c = Number(a[1]);
          if (95 <= 136) {
            121;
          }
          const d = Math.abs(function (a) {
            return _s(a, 3949);
          }(c));
          kx.ΔⲆⲆⵠⵠΔⵠ = b + d;
          kx.ⵠᐃⵠⵠΔᐃᐃ = d;
          ({}).ⵠᐃⲆΔⵠᐃᐃⲆⵠ = 1;
        }
        {
          const b = q[1].split("_");
          var G = 106;
          if (G > 1) {
            G = 186;
          }
          const c = 254;
          Math.floor(254[c.ΔΔΔΔⵠΔΔ]);
          var H = 96;
          if (H === 0) {
            H = 127;
          }
          const d = b[0] + "_";
          const e = Number(b[1]);
          const f = Math.abs(Ys(e));
          var I = 75;
          if (I > 10) {
            I = 79;
          }
          kx.ΔⲆᐃⵠⵠⵠᐃ = d + f;
          kx.ᐃᐃΔⲆⲆΔⲆᐃᐃ = f;
          var J = 40;
          if (J == 8) {
            J = 96;
          }
          ({}).ⵠⵠΔΔⲆᐃΔΔᐃ = 3;
          const a = {};
          ({}).ᐃᐃΔΔΔΔΔⲆᐃ = 5;
          a.ⵠᐃᐃⵠⲆᐃⲆⵠΔ = 0;
          var K = 112;
          if (K === 6) {
            K = 197;
          }
          229 .ⲆΔΔⵠᐃⵠⲆⵠⵠ = 6;
          if (106 > 103) {
            164;
          }
          if (13 <= 13) {
            156;
          }
          var L = 78;
          if (L == 12) {
            L = 161;
          }
        }
        var M = 63;
        if (M >= 14) {
          M = 125;
        }
        Math.floor(16[16 .ᐃΔⲆᐃⲆⵠⲆ]);
        var N = 85;
        if (N > 7) {
          N = 160;
        }
        var O = 56;
        if (O >= 7) {
          O = 204;
        }
        var Q = 136;
        if (Q === 6) {
          Q = 10;
        }
        var R = 166;
        if (R >= 5) {
          R = 179;
        }
        {
          const b = q[2].split("_");
          const c = 238;
          Math.floor(238[c.ⵠΔⵠⲆⵠⵠⲆ]);
          var S = 238;
          if (S == 10) {
            S = 165;
          }
          const d = b[0] + "_";
          const e = Number(b[1]);
          var U = 139;
          if (U > 12) {
            U = 102;
          }
          var V = 83;
          if (V === 3) {
            V = 67;
          }
          if (182 >= 74) {
            29;
          }
          let f = 151;
          153 .ⵠⲆⲆⲆᐃⲆⵠᐃⲆ = 5;
          var W = 180;
          if (W == 13) {
            W = 42;
          }
          if (244 === 240) {
            159;
          }
          const a = 24;
          let g = 73;
          var X = 132;
          if (X >= 2) {
            X = 39;
          }
          Math.floor(24[a.ᐃᐃᐃⵠⲆⲆᐃ]);
          if (g == 174) {
            205;
          }
          var Z = 21;
          if (Z === 14) {
            Z = 86;
          }
          if (f > 176) {
            166;
          }
          const i = Math.abs(Ys(e));
          kx.ⲆⲆⲆᐃⲆᐃⵠ = d + i;
          kx.ᐃᐃᐃΔΔⲆΔⲆⲆ = i;
          var _ = 222;
          if (_ == 12) {
            _ = 110;
          }
          if (96 < 23) {
            163;
          }
        }
        Y(j);
      }, function () {
        if (e !== 1) {
          if (a === 1) {
            e = 1;
            j();
            return;
          } else {
            E.waiting = qs;
            return;
          }
        }
      });
    };
    this.ᐃΔⲆΔⵠᐃⵠ = function () {
      if (E.waiting === Nh) {
        kx.reconnect.enabled = zl;
        E.waiting = true;
        E.ⵠΔᐃⵠⲆᐃΔ(_);
      }
    };
    var aa = 1;
    var ba = 2;
    var da = 4;
    var ea = 8;
    var fa = 16;
    var ha = 32;
    var ia = 1;
    var ja = 0;
    var ka = 1;
    var la = 0;
    var ma = 1;
    if (sa.innerWidth < 1300) {
      this.ᐃΔᐃⲆΔ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ma,
        position: da | aa,
        view: t,
        translate: {
          ᐃᐃⵠᐃⲆ: 200,
          ⵠⵠⵠⵠᐃ: 184,
          y: 0,
          x: 0
        }
      };
    } else {
      this.ᐃΔᐃⲆΔ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ma,
        position: da | fa,
        view: t,
        translate: {
          ⵠⵠⵠⵠᐃ: 184,
          ᐃᐃⵠᐃⲆ: -180,
          y: 0,
          x: 0
        }
      };
    }
    this.ᐃΔᐃⲆΔ.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (a.keyCode == 13 && !E.waiting && !E.ΔⲆΔⵠΔᐃⲆⲆᐃ) {
        E.ᐃΔⲆΔⵠᐃⵠ();
      }
    });
    this.ᐃΔᐃⲆΔ.input.value = ᐃᐃᐃⲆ.get("starve_nickname") ? ᐃᐃᐃⲆ.get("starve_nickname") : "";
    this.ⵠⵠⲆⲆΔⵠΔⵠΔ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: la,
      position: da | fa,
      view: p,
      translate: {
        x: 0,
        ⵠⵠⵠⵠᐃ: 110,
        ᐃᐃⵠᐃⲆ: -122,
        y: 0
      }
    };
    if (sa.innerWidth < 1300) {
      this.ᐃⲆⵠⲆⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ma,
        position: da | aa,
        view: t,
        translate: {
          ᐃᐃⵠᐃⲆ: 208,
          y: 0,
          x: 0,
          ⵠⵠⵠⵠᐃ: 225
        }
      };
    } else {
      this.ᐃⲆⵠⲆⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ma,
        position: da | fa,
        view: t,
        translate: {
          ᐃᐃⵠᐃⲆ: -180,
          x: 0,
          ⵠⵠⵠⵠᐃ: 225,
          y: 0
        }
      };
    }
    this.ᐃᐃᐃᐃ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: la,
      position: da | fa,
      view: A,
      translate: {
        x: 0,
        y: 0,
        ᐃᐃⵠᐃⲆ: -294.5,
        ⵠⵠⵠⵠᐃ: 190
      }
    };
    this.ⲆⲆᐃⲆᐃⲆᐃⵠⵠ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: la,
      position: da | fa,
      view: p,
      translate: {
        ⵠⵠⵠⵠᐃ: 187,
        y: 0,
        ᐃᐃⵠᐃⲆ: 125,
        x: 0
      }
    };
    this.ΔᐃΔⲆⲆⵠᐃⲆⲆ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: la,
      position: da | fa,
      view: S,
      translate: {
        y: 0,
        ⵠⵠⵠⵠᐃ: 350,
        ᐃᐃⵠᐃⲆ: -260,
        x: 0
      }
    };
    m = 0;
    this.ΔᐃΔⲆΔ = [];
    this.ΔᐃΔⲆΔ[m++] = this.ᐃΔᐃⲆΔ;
    this.ΔᐃΔⲆΔ[m++] = this.ᐃⲆⵠⲆⵠ;
    this.ΔᐃΔⲆΔ[m++] = this.ᐃᐃᐃᐃ;
    this.ΔᐃΔⲆΔ[m++] = this.ⵠⵠⲆⲆΔⵠΔⵠΔ;
    this.ΔᐃΔⲆΔ[m++] = this.ⲆⲆᐃⲆᐃⲆᐃⵠⵠ;
    this.ΔᐃΔⲆΔ[m++] = this.ΔᐃΔⲆⲆⵠᐃⲆⲆ;
    m = 0;
    this.ΔⵠⵠΔ = [];
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ᐃΔⲆΔⲆᐃⲆ, ma, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ⵠⵠⲆΔᐃⲆᐃ, la, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ⲆⲆΔΔⲆⲆᐃ, la, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ΔⵠΔⲆᐃᐃᐃ, la, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ΔΔΔⲆⵠΔΔ, la, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ⵠⲆⲆⲆᐃΔΔ, la, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ᐃⵠΔⲆΔⲆᐃ, la, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ΔΔΔᐃⲆⲆⲆ, la, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ⵠⵠΔⲆΔⲆΔ, la, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ΔᐃⵠΔⲆⵠΔ, la, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ⵠΔᐃⲆΔⵠⵠ, la, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ᐃⵠΔΔΔᐃⵠ, la, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ᐃᐃΔΔᐃⲆᐃ, la, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ⵠⲆⵠⲆⲆᐃⵠ, la, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ᐃΔⵠⵠⲆⵠⵠ, la, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ⲆⵠⲆⲆⵠⵠΔ, la, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ΔⵠⲆᐃⲆⵠᐃ, la, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ⵠᐃᐃΔᐃΔⵠ, la, 0, 0, aa);
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ᐃⲆⲆᐃᐃⵠᐃ, la, 0, 0, aa);
    if (sa.innerWidth < 1300) {
      this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ⲆⲆⵠⵠΔⵠⲆ, ma, 200, 100, da | aa);
    } else {
      this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ⲆⲆⵠⵠΔⵠⲆ, ma, -753 / 4, 100, da | fa);
    }
    this.ΔⵠⵠΔ[m++].view = t;
    this.ΔⵠⵠΔ[m++] = cf(ᐃΔ.ᐃⵠⵠⲆⵠᐃΔ, ma, 403, -10, ba);
    if (sa.innerWidth > 1300) {
      this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ⵠⲆⲆΔᐃⲆᐃ, ma, -885 / 4, -319 / 2, ea | fa);
      this.ΔⵠⵠΔ[m++].view = t;
    }
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ᐃⵠⵠⲆⲆΔΔ, la, -323.25, 100, da | fa);
    this.ΔⵠⵠΔ[m++].view = p;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ⲆⲆⲆⵠΔᐃⲆ, la, -1425 / 4, 100, da | fa);
    this.ΔⵠⵠΔ[m++].view = f;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ᐃⵠᐃⵠΔⲆⲆ, la, -905 / 4, 50, da | fa);
    this.ΔⵠⵠΔ[m++].view = F;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ΔΔⵠΔΔΔᐃ, la, -402, 130, da | fa);
    this.ΔⵠⵠΔ[m++].view = z;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ⵠⲆⵠⵠⲆᐃᐃ, la, -279.25, 130, da | fa);
    this.ΔⵠⵠΔ[m++].view = R;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ΔⵠΔᐃΔΔΔ, la, -1222 / 4, 130, da | fa);
    this.ΔⵠⵠΔ[m++].view = K;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ΔΔᐃᐃΔⲆⵠ, la, -305.5, 100, da | fa);
    this.ΔⵠⵠΔ[m++].view = S;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ⲆⲆⵠⲆᐃⵠⲆ, la, -ᐃΔ.ⲆⲆⵠⲆᐃⵠⲆ.width / 4 - 350, -15, da | fa);
    this.ΔⵠⵠΔ[m++].view = U;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ΔᐃⵠΔⲆⵠⵠ, la, -1497 / 4, 110, da | fa);
    this.ΔⵠⵠΔ[m++].view = y;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ⲆⲆΔⵠΔᐃⲆ, la, -1226 / 4, 100, da | fa);
    this.ΔⵠⵠΔ[m++].view = A;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ⲆΔΔΔⲆⲆᐃ, la, -345.25, 80, da | fa);
    this.ΔⵠⵠΔ[m++].view = k;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ΔⲆⲆΔΔᐃΔ, la, -1542 / 4, 150, da | fa);
    this.ΔⵠⵠΔ[m++].view = B;
    var na = 360 / 100;
    var oa = this.ⵠᐃⵠⵠⲆⲆⲆ([["#25c5d6", na * 3], ["#e2cf27", na * 10], ["#afac98", na * 30], ["#d88e23", na * 57]]);
    this.ΔⵠⵠΔ[m] = cf(oa, la, -oa.width / 4, 178, da | fa);
    this.ΔⵠⵠΔ[m++].view = B;
    this.ΔⵠⵠⵠᐃᐃⲆᐃΔ = function (b, c, d) {
      var e;
      E.ᐃΔⵠᐃᐃ = 1;
      E.ⲆⲆᐃⵠΔⵠᐃ = 0;
      E.ᐃⵠΔᐃⲆᐃⵠ = 0;
      E.ΔΔⵠᐃΔᐃⲆ = b;
      E.ᐃⵠⲆⵠⵠᐃⵠ = c;
      var f = 0;
      if (c === 0) {
        for (f = 0; f < ᐃᐃΔⵠ.ⲆⲆᐃⲆΔ.length && ᐃᐃΔⵠ.ⲆⲆᐃⲆΔ[f].id !== d; f++);
        e = ᐃᐃΔⵠ.ⲆⲆᐃⲆΔ[f];
        E.unlock.Ⲇᐃⵠᐃ[f] = 1;
      } else if (c === 1) {
        for (f = 0; f < ᐃᐃΔⵠ.ᐃΔᐃΔⲆ.length && ᐃᐃΔⵠ.ᐃΔᐃΔⲆ[f].id !== d; f++);
        e = ᐃᐃΔⵠ.ᐃΔᐃΔⲆ[f];
        E.unlock.ⵠᐃⲆᐃΔ[f] = 1;
      } else if (c === 2) {
        for (f = 0; ᐃᐃΔⵠ.ⲆΔΔΔ.length > f && d !== ᐃᐃΔⵠ.ⲆΔΔΔ[f].id; f++);
        e = ᐃᐃΔⵠ.ⲆΔΔΔ[f];
        E.unlock.ⵠᐃⲆⵠᐃ[f] = 1;
      } else if (c === 3) {
        for (f = 0; f < ᐃᐃΔⵠ.ΔⵠΔΔⲆ.length && d !== ᐃᐃΔⵠ.ΔⵠΔΔⲆ[f].id; f++);
        e = ᐃᐃΔⵠ.ΔⵠΔΔⲆ[f];
        E.unlock.ⵠⲆⲆᐃⵠ[f] = 1;
      } else if (c === 4) {
        for (f = 0; ᐃᐃΔⵠ.Δⵠⵠᐃᐃ.length > f && ᐃᐃΔⵠ.Δⵠⵠᐃᐃ[f].id !== d; f++);
        e = ᐃᐃΔⵠ.Δⵠⵠᐃᐃ[f];
        E.unlock.ΔᐃᐃⲆᐃ[f] = 1;
        E.unlock.Ⲇⵠᐃᐃᐃ[f] = 1;
      }
      E.ᐃΔⲆⲆΔⵠⲆ = f;
      E.ΔᐃᐃⵠⲆΔⲆ = df("by " + e.ᐃΔΔ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, undefined, undefined, undefined, undefined, "#000000", 24);
      E.ΔᐃΔⵠᐃⲆⲆ = df(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, ca, 30, 24, undefined, undefined, undefined, undefined, "#000000", 20);
    };
    this.ᐃΔⵠᐃᐃ = 0;
    this.ⲆⲆᐃⵠΔⵠᐃ = 0;
    this.ΔΔⵠᐃΔᐃⲆ = 0;
    this.ᐃⵠⲆⵠⵠᐃⵠ = 0;
    this.ᐃⵠΔᐃⲆᐃⵠ = 0;
    this.ΔᐃᐃⵠⲆΔⲆ = br;
    this.ΔᐃΔⵠᐃⲆⲆ = Xa;
    var pa = 197;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ᐃᐃᐃⵠΔᐃᐃ, la, -1542 / 4, 150, da | fa);
    this.ΔⵠⵠΔ[m++].view = M;
    oa = this.ⵠᐃⵠⵠⲆⲆⲆ([["#d45ce5", na * 3], ["#25c5d6", na * 10], ["#e2cf27", na * 30], ["#afac98", na * 57]]);
    this.ΔⵠⵠΔ[m] = cf(oa, la, -oa.width / 4, 178, da | fa);
    this.ΔⵠⵠΔ[m++].view = M;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ⵠΔᐃᐃΔⲆⵠ, la, -1542 / 4, 150, da | fa);
    this.ΔⵠⵠΔ[m++].view = I;
    oa = this.ⵠᐃⵠⵠⲆⲆⲆ([["#d33a2a", na * 3], ["#d45ce5", na * 10], ["#25c5d6", na * 30], ["#e2cf27", na * 57]]);
    this.ΔⵠⵠΔ[m] = cf(oa, la, -oa.width / 4, 178, da | fa);
    this.ΔⵠⵠΔ[m++].view = I;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ⵠᐃⵠΔᐃⵠᐃ, la, -1542 / 4, 150, da | fa);
    this.ΔⵠⵠΔ[m++].view = J;
    oa = this.ⵠᐃⵠⵠⲆⲆⲆ([["#25c5d6", na * 3], ["#e2cf27", na * 10], ["#afac98", na * 30], ["#d88e23", na * 57]]);
    this.ΔⵠⵠΔ[m] = cf(oa, la, -oa.width / 4, 178, da | fa);
    this.ΔⵠⵠΔ[m++].view = J;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ⵠᐃⲆⵠᐃᐃⲆ, la, -385.5, 150, da | fa);
    this.ΔⵠⵠΔ[m++].view = D;
    oa = this.ⵠᐃⵠⵠⲆⲆⲆ([["#d45ce5", na * 3], ["#25c5d6", na * 10], ["#e2cf27", na * 30], ["#afac98", na * 57]]);
    this.ΔⵠⵠΔ[m] = cf(oa, la, -oa.width / 4, 178, da | fa);
    this.ΔⵠⵠΔ[m++].view = D;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ᐃᐃΔΔⵠΔΔ, la, -1542 / 4, 150, da | fa);
    this.ΔⵠⵠΔ[m++].view = N;
    oa = this.ⵠᐃⵠⵠⲆⲆⲆ([["#d33a2a", na * 3], ["#d45ce5", na * 10], ["#25c5d6", na * 30], ["#e2cf27", na * 57]]);
    this.ΔⵠⵠΔ[m] = cf(oa, la, -oa.width / 4, 178, da | fa);
    this.ΔⵠⵠΔ[m++].view = N;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ΔᐃᐃᐃΔΔΔ, la, -1366 / 4, 100, da | fa);
    this.ΔⵠⵠΔ[m++].view = O;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ⲆΔᐃⲆΔⲆⵠ, la, -1366 / 4, 100, da | fa);
    this.ΔⵠⵠΔ[m++].view = G;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ⵠⲆⵠᐃⲆΔⵠ, la, -341.5, 100, da | fa);
    this.ΔⵠⵠΔ[m++].view = L;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ᐃΔᐃⵠⲆΔⵠ, la, -1366 / 4, 100, da | fa);
    this.ΔⵠⵠΔ[m++].view = P;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ⲆⲆⵠⵠⲆⲆⲆ, la, -1366 / 4, 100, da | fa);
    this.ΔⵠⵠΔ[m++].view = j;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ΔΔⵠΔΔΔⲆ, la, -341.5, 100, da | fa);
    this.ΔⵠⵠΔ[m++].view = q;
    ᐃⲆⲆᐃΔᐃᐃ = m++;
    this.ΔⵠⵠΔ[ᐃⲆⲆᐃΔᐃᐃ] = cf(ᐃΔ.ᐃⲆⲆᐃΔᐃᐃ, la, 484, 0, da);
    ΔΔⵠΔᐃⵠᐃ = m++;
    this.ΔⵠⵠΔ[ΔΔⵠΔᐃⵠᐃ] = cf(ᐃΔ.ΔΔⵠΔᐃⵠᐃ, la, 812.5, 0, da);
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ⵠⵠⵠᐃⵠⲆΔ, la, -758 / 4, -5, da | fa);
    this.ΔⵠⵠΔ[m++].view = x;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ᐃⵠⲆⲆΔᐃⵠ, la, -189.5, -5, da | fa);
    this.ΔⵠⵠΔ[m++].view = u;
    ᐃΔΔΔⵠⵠΔ = m++;
    this.ΔⵠⵠΔ[ᐃΔΔΔⵠⵠΔ] = cf(ᐃΔ.ⵠⲆᐃΔᐃᐃⵠ, ma, 93, 30, da);
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ⵠᐃⲆΔᐃΔⵠ, la, -173, 110, da | fa);
    this.ΔⵠⵠΔ[m++].view = H;
    this.ΔⵠⵠΔ[m] = cf(ᐃΔ.ᐃⵠΔΔⲆΔΔ, la, -173, 110, da | fa);
    this.ΔⵠⵠΔ[m++].view = Q;
    m = 0;
    this.buttons = [];
    this.buttons[m] = mf(50, 57, 0, [ᐃΔ.ⵠⵠΔᐃΔΔⵠ, ᐃΔ.ΔΔΔⲆᐃⲆᐃ, ᐃΔ.ⲆᐃᐃⲆⲆᐃⵠ], ia, ja, function () {
      if (E.ΔⵠⲆᐃΔ()) {
        W(k);
      } else {
        W(F);
      }
    }, 320, 0, aa, ma);
    m++;
    if (sa.innerWidth < 1300) {
      this.buttons[m] = mf(202, 97, 0, [ᐃΔ.ⵠⲆⲆⵠᐃᐃⲆ, ᐃΔ.ⵠⲆΔΔᐃⵠᐃ, ᐃΔ.ᐃⲆΔᐃΔᐃⲆ], ia, ja, this.ᐃΔⲆΔⵠᐃⵠ, 462, 235, da | aa, ma);
    } else {
      this.buttons[m] = mf(202, 97, 0, [ᐃΔ.ⵠⲆⲆⵠᐃᐃⲆ, ᐃΔ.ⵠⲆΔΔᐃⵠᐃ, ᐃΔ.ᐃⲆΔᐃΔᐃⲆ], ia, ja, this.ᐃΔⲆΔⵠᐃⵠ, 74, 235, da | fa, ma);
    }
    this.buttons[m].view = t;
    m++;
    if (sa.innerWidth > 1300) {
      this.buttons[m] = mf(355, 168, 0, [ᐃΔ.ΔΔⵠΔⵠⵠΔ, ᐃΔ.ΔΔⵠΔⵠⵠΔ, ᐃΔ.ΔΔⵠΔⵠⵠΔ], ia, ja, function () {
        sa.open("./changelog.html", "_blank");
      }, -195, -115, ea | fa, ma);
      this.buttons[m++].view = t;
      this.buttons[m] = mf(355, 168, 0, [ᐃΔ.ⵠᐃⲆᐃᐃⵠΔ, ᐃΔ.ⵠᐃⲆᐃᐃⵠΔ, ᐃΔ.ⵠᐃⲆᐃᐃⵠΔ], ia, ja, function () {
        sa.open("https://taming.io", "_blank");
      }, 20, -115, ea | fa, ma);
      this.buttons[m++].view = t;
    }
    this.buttons[m++] = mf(80, 80, 0, [ᐃΔ.ⲆᐃΔⲆⲆⲆΔ, ᐃΔ.ⲆⲆΔⵠⲆᐃᐃ, ᐃΔ.ᐃᐃᐃᐃⲆⲆⲆ], ia, ja, function () {
      sa.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, 10, ba, ma);
    this.buttons[m++] = mf(80, 80, 0, [ᐃΔ.ⲆⲆⵠᐃⵠⵠⲆ, ᐃΔ.ⵠⵠᐃⵠᐃᐃΔ, ᐃΔ.ᐃΔⵠΔⵠⲆⲆ], ia, ja, function () {
      sa.open("https://discord.gg/starveio", "_blank");
    }, 330, 10, ba, ma);
    this.buttons[m++] = mf(80, 80, 0, [ᐃΔ.ᐃΔⵠΔΔⲆⲆ, ᐃΔ.ⲆⵠⵠᐃⲆᐃᐃ, ᐃΔ.ᐃⵠⵠΔᐃⵠᐃ], ia, ja, function () {
      sa.open("https://reddit.com/r/starveio", "_blank");
    }, 280, 10, ba, ma);
    this.buttons[m++] = mf(80, 80, 0, [ᐃΔ.ⵠΔΔΔⲆᐃΔ, ᐃΔ.ⲆⵠⵠΔⵠΔΔ, ᐃΔ.ⵠᐃⵠⲆⲆΔΔ], ia, ja, function () {
      sa.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, 10, ba, ma);
    this.buttons[m++] = mf(80, 80, 0, [ᐃΔ.ᐃΔⲆᐃⲆΔᐃ, ᐃΔ.ᐃⲆΔΔⵠΔⲆ, ᐃΔ.ΔⲆᐃΔⲆⵠΔ], ia, ja, function () {
      sa.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, 10, ba, ma);
    this.buttons[m++] = mf(80, 80, 0, [ᐃΔ.ΔⲆⲆⲆⲆΔⵠ, ᐃΔ.ΔⲆⵠⲆⵠⵠⲆ, ᐃΔ.ᐃⲆΔⲆΔΔⵠ], ia, ja, function () {
      sa.open("https://twitter.com/lapamauve", "_blank");
    }, 105, 10, ba, ma);
    this.buttons[m++] = mf(80, 80, 0, [ᐃΔ.ᐃⲆⲆᐃᐃΔᐃ, ᐃΔ.ⵠᐃᐃⲆⲆⲆⵠ, ᐃΔ.ⵠΔⲆⲆⵠΔΔ], ia, ja, function () {
      sa.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, 10, ba, ma);
    ⵠⵠΔⵠⲆᐃΔ = m++;
    this.buttons[ⵠⵠΔⵠⲆᐃΔ] = mf(232, 142, 0, [ᐃΔ.ⲆⵠⲆᐃⵠⵠΔ, ᐃΔ.ᐃⲆⲆⲆᐃⲆΔ, ᐃΔ.ⵠⵠᐃᐃᐃΔⲆ], ia, ja, function () {
      W(A);
      Vx(ix.ᐃⵠΔⲆⲆᐃᐃ, ix.ⲆⵠΔⵠⵠΔⲆ, ix.ⵠᐃΔΔⲆⲆΔ, ix.ᐃΔᐃΔⵠⵠᐃ);
    }, -5, 573, aa, ma);
    this.buttons[m++] = mf(236, 165, 0, [ᐃΔ.ΔⲆⵠⵠΔΔᐃ, ᐃΔ.ΔⲆⵠⵠΔΔᐃ, ᐃΔ.ΔⲆⵠⵠΔΔᐃ], ia, ka, function () {
      W(A);
    }, -5, 566, aa, ma);
    ΔⵠⲆⵠⲆΔⲆ = m++;
    this.buttons[ΔⵠⲆⵠⲆΔⲆ] = mf(236, 165, 0, [ᐃΔ.ⵠΔⲆΔΔⵠⵠ, ᐃΔ.ᐃⲆⵠΔⵠΔⵠ, ᐃΔ.ΔⲆᐃΔΔⵠⵠ], ia, ja, function () {
      W(y);
    }, -5, 494, aa, ma);
    this.buttons[m++] = mf(236, 165, 0, [ᐃΔ.ᐃⲆⲆⵠᐃⲆⲆ, ᐃΔ.ᐃⲆⲆⵠᐃⲆⲆ, ᐃΔ.ᐃⲆⲆⵠᐃⲆⲆ], ia, ka, function () {
      W(y);
    }, -5, 494, aa, ma);
    ΔΔΔⲆΔᐃᐃ = m++;
    this.buttons[ΔΔΔⲆΔᐃᐃ] = mf(236, 165, 0, [ᐃΔ.ⵠΔⲆΔΔⵠⵠ, ᐃΔ.ᐃⲆⵠΔⵠΔⵠ, ᐃΔ.ΔⲆᐃΔΔⵠⵠ], ia, ja, function () {
      if (E.ΔⵠⲆᐃΔ()) {
        if (ix.ⲆᐃⲆΔΔᐃᐃ - Date.now() > 0) {
          W(S);
        } else {
          W(R);
        }
      } else {
        W(F);
      }
    }, -5, 415, aa, ma);
    this.buttons[m++] = mf(236, 165, 0, [ᐃΔ.ΔⵠΔⵠⵠΔⵠ, ᐃΔ.ΔⵠΔⵠⵠΔⵠ, ᐃΔ.ΔⵠΔⵠⵠΔⵠ], ia, ka, function () {
      if (E.ΔⵠⲆᐃΔ()) {
        if (ix.ⲆᐃⲆΔΔᐃᐃ - Date.now() > 0) {
          W(S);
        } else {
          W(R);
        }
      } else {
        W(F);
      }
    }, -5, 415, aa, ma);
    ⵠⵠⵠΔᐃⵠⲆ = m++;
    this.buttons[ⵠⵠⵠΔᐃⵠⲆ] = mf(236, 165, 0, [ᐃΔ.ⵠΔⲆΔΔⵠⵠ, ᐃΔ.ᐃⲆⵠΔⵠΔⵠ, ᐃΔ.ΔⲆᐃΔΔⵠⵠ], ia, ja, function () {
      W(z);
    }, -5, 336, aa, ma);
    this.buttons[m++] = mf(236, 165, 0, [ᐃΔ.ΔΔⵠⵠⲆⵠΔ, ᐃΔ.ΔΔⵠⵠⲆⵠΔ, ᐃΔ.ΔΔⵠⵠⲆⵠΔ], ia, ka, function () {
      W(z);
    }, -5, 336, aa, ma);
    ⵠⲆⵠΔᐃⵠᐃ = m++;
    this.buttons[ⵠⲆⵠΔᐃⵠᐃ] = mf(236, 165, 0, [ᐃΔ.ⵠΔⲆΔΔⵠⵠ, ᐃΔ.ᐃⲆⵠΔⵠΔⵠ, ᐃΔ.ΔⲆᐃΔΔⵠⵠ], ia, ja, function () {
      W(f);
    }, -5, 257, aa, ma);
    this.buttons[m++] = mf(236, 165, 0, [ᐃΔ.ᐃΔⲆⲆⵠΔⲆ, ᐃΔ.ᐃΔⲆⲆⵠΔⲆ, ᐃΔ.ᐃΔⲆⲆⵠΔⲆ], ia, ka, function () {
      W(f);
    }, -5, 257, aa, ma);
    ᐃⲆᐃⵠΔᐃⲆ = m++;
    this.buttons[ᐃⲆᐃⵠΔᐃⲆ] = mf(236, 165, 0, [ᐃΔ.ⵠΔⲆΔΔⵠⵠ, ᐃΔ.ᐃⲆⵠΔⵠΔⵠ, ᐃΔ.ΔⲆᐃΔΔⵠⵠ], ia, ja, function () {
      W(t);
    }, -5, 178, aa, ma);
    this.buttons[m++] = mf(236, 165, 0, [ᐃΔ.ΔΔᐃⵠⵠⲆΔ, ᐃΔ.ΔΔᐃⵠⵠⲆΔ, ᐃΔ.ΔΔᐃⵠⵠⲆΔ], ia, ka, function () {
      W(t);
    }, -5, 178, aa, ma);
    ΔΔᐃΔᐃΔᐃ = m++;
    this.ΔΔᐃΔᐃΔᐃ = ΔΔᐃΔᐃΔᐃ;
    this.buttons[ΔΔᐃΔᐃΔᐃ] = mf(324, 222, 0, [ᐃΔ.ᐃΔᐃⲆⵠⲆΔ, ᐃΔ.ⲆⵠΔᐃᐃⵠᐃ, ᐃΔ.ⲆⲆΔᐃⲆⵠΔ], ia, ja, function () {
      W(F);
    }, 0, 70, aa, ma);
    ⲆΔΔⵠⵠⲆⲆ = m++;
    ⲆⲆΔⲆᐃⵠᐃ = m++;
    this.ⲆΔΔⵠⵠⲆⲆ = ⲆΔΔⵠⵠⲆⲆ;
    this.ⲆⲆΔⲆᐃⵠᐃ = ⲆⲆΔⲆᐃⵠᐃ;
    this.buttons[ⲆΔΔⵠⵠⲆⲆ] = mf(324, 222, 0, [ᐃΔ.ᐃⵠⵠΔᐃⲆⵠ, ᐃΔ.ⲆᐃᐃΔᐃⲆⲆ, ᐃΔ.ⵠᐃᐃΔⲆΔⵠ], ia, ja, function () {
      W(p);
      xa(-1);
    }, 0, 70, aa, la);
    this.buttons[ⲆⲆΔⲆᐃⵠᐃ] = mf(324, 222, 0, [ᐃΔ.ⵠⲆΔᐃᐃⲆⵠ, ᐃΔ.ⵠⲆΔᐃᐃⲆⵠ, ᐃΔ.ⵠⲆΔᐃᐃⲆⵠ], ia, ka, function () {
      W(p);
      xa(-1);
    }, 0, 70, aa, la);
    if (mx.ⲆΔᐃᐃᐃᐃⵠ === 0) {
      var qa = m++;
      if (sa.innerWidth < 1300) {
        this.buttons[qa] = mf(266, 176, 0, [ᐃΔ.ⲆᐃΔⵠⵠⲆⵠ, ᐃΔ.ΔⵠⵠΔᐃⵠⲆ, ᐃΔ.ⵠᐃⲆΔΔⲆᐃ], ia, ja, function () {
          mx.ⲆⲆᐃⲆⵠ(0);
        }, 150, 300, aa | da, ma);
      } else {
        this.buttons[qa] = mf(266, 176, 0, [ᐃΔ.ⲆᐃΔⵠⵠⲆⵠ, ᐃΔ.ΔⵠⵠΔᐃⵠⲆ, ᐃΔ.ⵠᐃⲆΔΔⲆᐃ], ia, ja, function () {
          mx.ⲆⲆᐃⲆⵠ(0);
        }, -340, 100, fa | da, ma);
      }
      this.buttons[qa].view = t;
      this.buttons[qa].hint = 0;
      var ra = m++;
      if (sa.innerWidth < 1300) {
        this.buttons[ra] = mf(266, 176, 0, [ᐃΔ.ΔⲆΔᐃΔΔᐃ, ᐃΔ.ΔΔΔⲆⵠᐃᐃ, ᐃΔ.ΔᐃⲆΔⵠⲆⵠ], ia, ja, function () {
          mx.ⲆⲆᐃⲆⵠ(4);
        }, 150, 400, aa | da, ma);
      } else {
        this.buttons[ra] = mf(266, 176, 0, [ᐃΔ.ΔⲆΔᐃΔΔᐃ, ᐃΔ.ΔΔΔⲆⵠᐃᐃ, ᐃΔ.ΔᐃⲆΔⵠⲆⵠ], ia, ja, function () {
          mx.ⲆⲆᐃⲆⵠ(4);
        }, -340, 200, fa | da, ma);
      }
      this.buttons[ra].view = t;
      this.buttons[ra].hint = 0;
      var ta = m++;
      if (sa.innerWidth < 1300) {
        this.buttons[ta] = mf(266, 176, 0, [ᐃΔ.ΔⲆⲆⲆΔⲆⵠ, ᐃΔ.ΔⲆⵠⵠᐃᐃⲆ, ᐃΔ.ᐃⵠⵠΔⲆⲆⲆ], ia, ja, function () {
          mx.ⲆⲆᐃⲆⵠ(6);
        }, 450, 300, aa | da, ma);
      } else {
        this.buttons[ta] = mf(266, 176, 0, [ᐃΔ.ΔⲆⲆⲆΔⲆⵠ, ᐃΔ.ΔⲆⵠⵠᐃᐃⲆ, ᐃΔ.ᐃⵠⵠΔⲆⲆⲆ], ia, ja, function () {
          mx.ⲆⲆᐃⲆⵠ(6);
        }, -340, 300, fa | da, ma);
      }
      this.buttons[ta].view = t;
      this.buttons[ta].hint = 0;
      var ua = m++;
      if (sa.innerWidth < 1300) {
        this.buttons[ua] = mf(266, 176, 0, [ᐃΔ.ΔⵠⵠᐃΔⵠΔ, ᐃΔ.ΔⲆΔⵠⵠⵠⵠ, ᐃΔ.ΔⲆΔⲆⲆᐃⲆ], ia, ja, function () {
          mx.ⲆⲆᐃⲆⵠ(2);
        }, 300, 300, aa | da, ma);
      } else {
        this.buttons[ua] = mf(266, 176, 0, [ᐃΔ.ΔⵠⵠᐃΔⵠΔ, ᐃΔ.ΔⲆΔⵠⵠⵠⵠ, ᐃΔ.ΔⲆΔⲆⲆᐃⲆ], ia, ja, function () {
          mx.ⲆⲆᐃⲆⵠ(2);
        }, 204, 100, fa | da, ma);
      }
      this.buttons[ua].view = t;
      this.buttons[ua].hint = 0;
      var va = m++;
      if (sa.innerWidth < 1300) {
        this.buttons[va] = mf(266, 176, 0, [ᐃΔ.ΔᐃⵠⲆΔⵠⲆ, ᐃΔ.ⵠᐃⵠⲆᐃᐃᐃ, ᐃΔ.ᐃⲆΔᐃᐃΔᐃ], ia, ja, function () {
          mx.ⲆⲆᐃⲆⵠ(3);
        }, 300, 400, aa | da, ma);
      } else {
        this.buttons[va] = mf(266, 176, 0, [ᐃΔ.ΔᐃⵠⲆΔⵠⲆ, ᐃΔ.ⵠᐃⵠⲆᐃᐃᐃ, ᐃΔ.ᐃⲆΔᐃᐃΔᐃ], ia, ja, function () {
          mx.ⲆⲆᐃⲆⵠ(3);
        }, 204, 200, fa | da, ma);
      }
      this.buttons[va].view = t;
      this.buttons[va].hint = 0;
      var wa = m++;
      this.buttons[wa] = mf(266, 176, 0, [ᐃΔ.ⵠⵠⵠᐃᐃᐃⵠ, ᐃΔ.ΔⵠⵠⲆΔᐃⲆ, ᐃΔ.ᐃⵠᐃᐃΔᐃⵠ], ia, ja, function () {
        mx.ⲆⲆᐃⲆⵠ(7);
      }, sa.innerWidth < 1300 ? 450 : 204, sa.innerWidth < 1300 ? 400 : 300, (sa.innerWidth < 1300 ? aa : fa) | da, ma);
      this.buttons[wa].view = t;
      this.buttons[wa].hint = 0;
    }
    function xa(b, c) {
      if (ca !== c) {
        ix.ΔⲆⵠⵠᐃⵠΔ = c;
        var d = ix.ⲆⲆⲆⲆⵠⲆⵠ[c];
        ix.ⲆΔⵠᐃⵠ = d.score;
        ix.ⲆΔⲆΔⲆ = d.kill;
        ix.ΔⵠⲆⵠᐃΔΔ = d.death;
        ix.time = d.time;
        ix.ᐃᐃᐃᐃΔΔⵠ = d.bestScore;
        ix.ⲆᐃᐃᐃⵠΔΔ = d.bestKill;
        ix.ᐃΔⲆⲆᐃΔΔ = d.bestTime;
        ix.ᐃᐃΔᐃᐃⵠⵠ = d.scoreTotal;
      }
      if (b === An) {
        b = ix.ΔᐃᐃΔⲆⵠⲆ;
      }
      ix.ΔᐃᐃΔⲆⵠⲆ = b;
      if (b >= 0) {
        document.getElementById("stats_box_time").innerHTML = ix.ᐃΔⲆⲆᐃΔΔ[b];
        document.getElementById("stats_box_kill").innerHTML = ix.ⲆᐃᐃᐃⵠΔΔ[b];
        document.getElementById("stats_box_score").innerHTML = ix.ᐃᐃᐃᐃΔΔⵠ[b];
      } else {
        var f = 0;
        for (var g = 0; g < ix.ⲆΔⲆΔⲆ.length; g++) {
          f += ix.ⲆΔⲆΔⲆ[g];
        }
        var h = 0;
        for (g = 0; g < ix.time.length; g++) {
          h += ix.time[g];
        }
        document.getElementById("stats_box_time").innerHTML = h;
        document.getElementById("stats_box_kill").innerHTML = f;
        document.getElementById("stats_box_score").innerHTML = ix.ⲆΔⵠᐃⵠ;
      }
    }
    this.buttons[m] = mf(87, 78, 0, [ᐃΔ.ⵠⲆΔᐃᐃᐃⲆ, ᐃΔ.ΔΔᐃⲆⵠⵠᐃ, ᐃΔ.ΔᐃⵠⲆⵠΔᐃ], ia, ja, function () {
      ix.ᐃᐃᐃⵠⲆⵠⲆⲆⵠ();
      if (ix.ᐃⵠΔⲆΔᐃᐃ === 0) {
        W(Q);
      } else {
        W(H);
      }
    }, 127, 110, fa | da, la);
    this.buttons[m++].view = p;
    this.buttons[m] = mf(87, 78, 0, [ᐃΔ.ᐃᐃⵠΔⵠᐃᐃ, ᐃΔ.ᐃⲆΔⵠⲆⵠⵠ, ᐃΔ.ⲆΔⲆⲆⵠⲆⵠ], ia, ja, function () {
      const a = sa.document.createElement("textarea");
      a.value = Ix;
      sa.document.body.appendChild(a);
      a.select();
      sa.document.execCommand("copy");
      sa.document.body.removeChild(a);
    }, 182, 110, fa | da, la);
    this.buttons[m++].view = p;
    this.buttons[m] = mf(87, 78, 0, [ᐃΔ.ⵠⲆⵠᐃΔⵠⵠ, ᐃΔ.ⲆΔΔΔΔᐃΔ, ᐃΔ.ᐃᐃⵠᐃⲆᐃⲆ], ia, ja, function () {
      (function () {
        if (Ex === Gx && sa.FB && sa.FB.getUserID()) {
          sa.FB.logout();
        }
        if (Dx === Gx && Nx !== undefined) {
          sa.gapi.auth2.getAuthInstance().signOut();
          Nx = Tg;
        }
        Ix = hj;
        Hx = undefined;
        Gx = undefined;
        ix.ΔᐃⲆᐃΔ = 0;
        ix.Δᐃⵠᐃⵠ = 0;
        ix.ⲆΔⵠᐃⵠ = 0;
        ix.ΔⵠᐃⵠⵠⲆᐃ();
        ⲆᐃⲆⵠᐃΔᐃΔⵠ();
      })();
    }, 255, 110, fa | da, la);
    this.buttons[m++].view = p;
    this.buttons[m] = mf(58, 64, 0, [ᐃΔ.ⵠⵠⵠⲆᐃΔⵠ, ᐃΔ.ΔⲆⲆᐃΔᐃⵠ, ᐃΔ.ΔΔⲆᐃⵠⵠⵠ], ia, ja, function () {
      W(t);
    }, 189, 118, fa | da, la);
    this.buttons[m++].view = F;
    this.buttons[m] = mf(497, 72, 0, [ᐃΔ.ᐃΔⲆᐃΔⲆⵠ, ᐃΔ.ⲆᐃⵠⵠᐃⲆᐃ, ᐃΔ.ᐃⵠΔΔᐃⲆⵠ], ia, ja, function () {
      (function () {
        if (ff) {
          Hx = ⵠⵠⵠ.ⲆΔᐃΔⵠΔᐃ(40);
          Gx = Fx;
          Ix = ff.userId;
          sa.ᐃΔΔⵠᐃΔᐃ();
          return;
        }
        sa.gapi.auth2.getAuthInstance().signIn();
      })();
    }, -130, 390, fa | da, la);
    this.buttons[m++].view = F;
    this.buttons[m] = mf(497, 72, 0, [ᐃΔ.ᐃᐃΔⲆΔⵠᐃ, ᐃΔ.ⲆⲆⲆⵠⲆΔⵠ, ᐃΔ.ⵠⵠⵠⲆⲆⲆⵠ], ia, ja, function () {
      sa.FB.login(function (a) {
        if (a.authResponse) {
          sa.FB.api("/me", function (a) {
            Gx = Ex;
            Hx = sa.FB.getAuthResponse().accessToken;
            Ux();
            sa.ᐃΔΔⵠᐃΔᐃ();
          });
        }
      });
    }, -130, 430, fa | da, la);
    this.buttons[m++].view = F;
    ᐃⲆⲆⵠᐃΔⵠ = 20000;
    this.ᐃⵠⲆΔⲆᐃⲆ = function (a) {
      var b = ix.ᐃΔΔᐃΔⲆⲆ(a);
      var c = ᐃⲆⲆⵠᐃΔⵠ * (b * b);
      return (a -= c) / ((b + 1) * (b + 1) * ᐃⲆⲆⵠᐃΔⵠ - c);
    };
    this.ᐃΔΔᐃΔⲆⲆ = function (a) {
      return Math.floor(Math.sqrt(a / ᐃⲆⲆⵠᐃΔⵠ));
    };
    this.ⲆⲆᐃⲆⵠⲆⵠΔᐃ = function (a) {
      ix.ⲆⲆⵠⵠᐃ = ix.ᐃΔΔᐃΔⲆⲆ(a);
      ix.ΔᐃΔⲆᐃⵠⵠ = ix.ᐃⵠⲆΔⲆᐃⲆ(a);
      ix.ΔᐃⵠᐃⲆΔᐃ = 0;
      ix.ⲆΔⵠᐃⵠ = a;
    };
    this.ⵠᐃΔΔⵠⲆⵠΔᐃ = function (a) {
      ix.buttons[ix.ΔΔᐃΔᐃΔᐃ].info.active = 0;
      ix.buttons[ix.ⲆΔΔⵠⵠⲆⲆ].info.active = 1;
      ix.buttons[ix.ⲆⲆΔⲆᐃⵠᐃ].info.active = 1;
      n();
      if (a.name.indexOf("Starver#") === -1) {
        document.getElementById("account_nickname_input").value = sa.decodeURIComponent(sa.escape(sa.atob(a.name)));
      } else {
        document.getElementById("account_nickname_input").value = a.name;
      }
      ix.Δᐃⵠᐃⵠ = a.bread;
      var b = a.seasons;
      var c = b[b.length - 1];
      ix.ⲆⲆⲆⲆⵠⲆⵠ = b;
      E.ⲆⲆᐃⲆⵠⲆⵠΔᐃ(c.score);
      ix.ⲆΔⵠᐃⵠ = c.score;
      ix.ⲆΔⲆΔⲆ = c.kill;
      ix.ΔⵠⲆⵠᐃΔΔ = c.death;
      ix.time = c.time;
      ix.ᐃᐃᐃᐃΔΔⵠ = c.bestScore;
      ix.ⲆᐃᐃᐃⵠΔΔ = c.bestKill;
      ix.ᐃΔⲆⲆᐃΔΔ = c.bestTime;
      ix.ᐃᐃΔᐃᐃⵠⵠ = c.scoreTotal;
      ix.ᐃⵠΔⲆΔᐃᐃ = a.firstName;
      document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
      if (ix.ᐃⵠΔⲆΔᐃᐃ === undefined) {
        ix.ᐃⵠΔⲆΔᐃᐃ = 0;
      }
      ix.ⲆᐃⲆΔΔᐃᐃ = Date.now() + a.privateServerTime;
      if (Number(a.privateServerTime) > 0) {
        ix.ⲆᐃⲆΔΔᐃᐃ = Date.now() + Number(a.privateServerTime);
      }
      ix.ΔᐃⲆᐃΔ = Date.now() + a.kit;
      if (Number(a.kit) > 0) {
        ix.ΔᐃⲆᐃΔ = Date.now() + Number(a.kit);
      }
      var d = ᐃᐃΔⵠ.ⲆⲆᐃⲆΔ;
      for (var e = 0; a.skins.length > e; e++) {
        if ((i = a.skins[e]) > 0) {
          for (var f = 0; d.length > f; f++) {
            if (e === d[f].id) {
              E.unlock.Ⲇᐃⵠᐃ[f] = 1;
            }
          }
        }
      }
      d = ᐃᐃΔⵠ.ᐃΔᐃΔⲆ;
      e = 0;
      for (; e < a.accessories.length; e++) {
        var i = a.accessories[e];
        if (i > 0) {
          for (f = 0; f < d.length; f++) {
            if (e === d[f].id) {
              E.unlock.ⵠᐃⲆᐃΔ[f] = 1;
            }
          }
        }
      }
      d = ᐃᐃΔⵠ.ΔⵠΔΔⲆ;
      e = 0;
      for (; e < a.books.length; e++) {
        if ((i = a.books[e]) > 0) {
          for (f = 0; f < d.length; f++) {
            if (d[f].id === e) {
              E.unlock.ⵠⲆⲆᐃⵠ[f] = 1;
            }
          }
        }
      }
      d = ᐃᐃΔⵠ.ⲆΔΔΔ;
      e = 0;
      for (; e < a.bags.length; e++) {
        i = a.bags[e];
        if (i > 0) {
          for (f = 0; d.length > f; f++) {
            if (d[f].id === e) {
              E.unlock.ⵠᐃⲆⵠᐃ[f] = 1;
            }
          }
        }
      }
      d = ᐃᐃΔⵠ.Δⵠⵠᐃᐃ;
      e = 0;
      for (; e < a.crates.length; e++) {
        if ((i = a.crates[e]) > 0) {
          for (f = 0; d.length > f; f++) {
            if (d[f].id === e) {
              E.unlock.ΔᐃᐃⲆᐃ[f] = 1;
              E.unlock.Ⲇⵠᐃᐃᐃ[f] = 1;
            }
          }
        }
      }
    };
    this.ⵠΔⵠΔⲆΔⲆⲆᐃ = function () {
      sa.ᐃΔΔⵠᐃΔᐃ = function () {
        W(t);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", Bx + "login?token=" + Hx + "&type=" + Gx + (ff ? "&userId=" + ff.userId + "&userInfo=" + ff.userInfo : ""));
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(E.ⵠᐃΔΔⵠⲆⵠΔᐃ);
      };
      if (Jx === 1) {
        sa.ᐃΔΔⵠᐃΔᐃ();
      }
    };
    sa.ⲆᐃⲆⵠᐃΔᐃΔⵠ = function () {
      ix.buttons[ix.ΔΔᐃΔᐃΔᐃ].info.active = 1;
      ix.buttons[ix.ⲆΔΔⵠⵠⲆⲆ].info.active = 0;
      ix.buttons[ix.ⲆⲆΔⲆᐃⵠᐃ].info.active = 0;
      W(t);
    };
    this.ΔⵠⲆᐃΔ = function () {
      return ix.buttons[ix.ⲆΔΔⵠⵠⲆⲆ].info.active;
    };
    this.buttons[m] = mf(461, 105, 0, [ᐃΔ.ⲆᐃΔⵠΔᐃΔ, ᐃΔ.ⲆⲆⵠᐃᐃΔⲆ, ᐃΔ.ⲆⲆⲆⵠⲆⵠᐃ], ia, ja, function () {
      if (E.ΔⵠⲆᐃΔ()) {
        W(k);
      } else {
        W(F);
      }
    }, -100, 80, fa | da, la);
    this.buttons[m++].view = z;
    this.buttons[m] = mf(157, 158, 0, [ᐃΔ.ⲆΔΔⲆⲆⵠᐃ, ᐃΔ.ΔᐃⵠⲆᐃΔᐃ, ᐃΔ.ⵠᐃⲆⲆᐃΔⵠ], ia, ja, function () {
      sa.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, fa | da, la);
    this.buttons[m++].view = y;
    this.buttons[m] = mf(66, 73, 0, [ᐃΔ.ΔᐃΔⵠᐃⲆΔ, ᐃΔ.ⵠΔⵠᐃⲆⵠᐃ, ᐃΔ.ΔᐃⵠᐃᐃⲆΔ], ia, ja, br, -68, 340, fa | da, la);
    this.buttons[m++].view = y;
    this.buttons[m] = mf(66, 73, 0, [ᐃΔ.ⵠⲆΔⵠⵠⵠᐃ, ᐃΔ.ΔⲆΔⲆⲆⵠᐃ, ᐃΔ.ᐃⵠⵠⲆⲆⲆΔ], ia, ja, undefined, -30, 340, fa | da, la);
    this.buttons[m++].view = y;
    this.ᐃⵠⵠᐃⲆᐃᐃⲆⵠ = m;
    this.buttons[m] = mf(97, 66, 0, [ᐃΔ.ᐃᐃⵠⲆΔΔⲆ, ᐃΔ.ⵠⲆⵠⲆⵠᐃⲆ, ᐃΔ.ᐃⵠΔᐃⲆΔΔ], ia, ja, function () {
      Vx(undefined, undefined, ix.ⵠᐃΔΔⲆⲆΔ);
    }, -14, 151, fa | da, la);
    this.buttons[m++].view = A;
    this.ᐃᐃΔⲆⵠΔᐃ = m;
    this.buttons[m] = mf(135, 66, 0, [ᐃΔ.ΔⲆⲆΔΔΔⲆ, ᐃΔ.ⵠⵠᐃⲆⵠⲆᐃ, ᐃΔ.ⲆΔΔᐃⵠΔⵠ], ia, ja, function () {
      Vx(jq, undefined, ix.ᐃᐃΔⲆⵠΔᐃ);
    }, 37.5, 151, fa | da, la);
    this.buttons[m++].view = A;
    this.ⵠⵠⵠⵠⵠⵠᐃ = m;
    this.buttons[m] = mf(160, 66, 0, [ᐃΔ.Ⲇⵠⵠᐃᐃᐃⵠ, ᐃΔ.ⵠⵠⵠⲆΔᐃᐃ, ᐃΔ.ⵠⲆⵠΔⲆⵠⲆ], ia, ja, function () {
      Vx(undefined, gs, ix.ⵠⵠⵠⵠⵠⵠᐃ);
    }, 107.5, 151, fa | da, la);
    this.buttons[m++].view = A;
    this.ⵠᐃΔΔⲆⲆΔ = m;
    this.buttons[m] = mf(207, 66, 0, [ᐃΔ.ΔΔⵠⲆⵠᐃᐃ, ᐃΔ.ⲆⲆᐃⵠⵠⲆᐃ, ᐃΔ.ΔᐃᐃⲆΔᐃⵠ], ia, ja, function () {
      Vx(undefined, Yk, ix.ⵠᐃΔΔⲆⲆΔ);
    }, 190.5, 151, fa | da, la);
    this.buttons[m++].view = A;
    this.ᐃΔᐃⵠᐃΔΔ = m;
    this.buttons[m] = mf(144, 66, 0, [ᐃΔ.ⵠΔⵠⲆⲆⵠⵠ, ᐃΔ.ⵠᐃᐃⲆⲆΔᐃ, ᐃΔ.ΔᐃⵠΔᐃⵠΔ], ia, ja, function () {
      Vx(ix.ᐃΔᐃⵠᐃΔΔ);
    }, 103.5, 110, fa | da, la);
    this.buttons[m++].view = A;
    this.ⵠᐃᐃᐃⵠⲆⲆ = m;
    this.buttons[m] = mf(124, 66, 0, [ᐃΔ.ⲆᐃⵠⲆΔⵠᐃ, ᐃΔ.ⲆΔᐃⲆⲆΔⲆ, ᐃΔ.ΔⵠⲆⵠΔᐃΔ], ia, ja, function () {
      Vx(ix.ⵠᐃᐃᐃⵠⲆⲆ);
    }, 177.5, 110, fa | da, la);
    this.buttons[m++].view = A;
    this.ᐃⵠΔⲆⲆᐃᐃ = m;
    this.buttons[m] = mf(104, 66, 0, [ᐃΔ.ⲆⵠᐃⵠⵠⲆΔ, ᐃΔ.ΔᐃⵠΔⵠΔⵠ, ᐃΔ.ᐃΔⲆᐃᐃⲆⵠ], ia, ja, function () {
      Vx(ix.ᐃⵠΔⲆⲆᐃᐃ);
    }, 242, 110, fa | da, la);
    this.buttons[m++].view = A;
    this.ⲆⲆΔΔⲆΔᐃ = m;
    this.buttons[m] = mf(46, 51, 0, [ᐃΔ.ⵠᐃⲆᐃᐃΔΔ, ᐃΔ.ᐃᐃᐃⲆⵠⲆⲆ, ᐃΔ.ⵠⵠⲆⵠᐃⵠⲆ], ia, ja, function () {
      Vx(undefined, Xa, undefined, ix.ⲆⲆΔΔⲆΔᐃ);
    }, -185, 528, fa | da, la);
    this.buttons[m++].view = A;
    this.ⵠⵠⵠᐃΔⵠⲆ = m;
    this.buttons[m] = mf(46, 51, 0, [ᐃΔ.ΔΔΔΔⵠⲆᐃ, ᐃΔ.ΔⲆᐃᐃᐃᐃᐃ, ᐃΔ.ᐃⲆᐃⵠⲆⵠΔ], ia, ja, function () {
      Vx(Aq, vh, undefined, ix.ⵠⵠⵠᐃΔⵠⲆ);
    }, -149, 528, fa | da, la);
    this.buttons[m++].view = A;
    this.ⲆᐃⵠⲆᐃᐃΔ = m;
    this.buttons[m] = mf(46, 51, 0, [ᐃΔ.ΔΔᐃΔⲆⵠⵠ, ᐃΔ.ᐃΔᐃᐃᐃᐃΔ, ᐃΔ.ΔᐃⲆⲆᐃΔⵠ], ia, ja, function () {
      Vx(undefined, br, undefined, ix.ⲆᐃⵠⲆᐃᐃΔ);
    }, -113, 528, fa | da, la);
    this.buttons[m++].view = A;
    this.ᐃⵠⵠΔΔᐃᐃ = m;
    this.buttons[m] = mf(46, 51, 0, [ᐃΔ.ΔⵠⲆⲆᐃᐃᐃ, ᐃΔ.ⵠΔᐃΔᐃⲆⵠ, ᐃΔ.ΔᐃᐃᐃⵠΔᐃ], ia, ja, function () {
      Vx(undefined, undefined, vh, ix.ᐃⵠⵠΔΔᐃᐃ);
    }, -77, 528, fa | da, la);
    this.buttons[m++].view = A;
    this.ⵠΔⵠΔΔᐃᐃ = m;
    this.buttons[m] = mf(46, 51, 0, [ᐃΔ.ᐃⵠⵠᐃΔⵠⲆ, ᐃΔ.ⲆⵠᐃΔⵠᐃΔ, ᐃΔ.ᐃⲆⲆⵠᐃᐃᐃ], ia, ja, function () {
      Vx(Xa, undefined, undefined, ix.ⵠΔⵠΔΔᐃᐃ);
    }, -41, 528, fa | da, la);
    this.buttons[m++].view = A;
    this.ᐃΔᐃΔⵠⵠᐃ = m;
    this.buttons[m] = mf(46, 51, 0, [ᐃΔ.ⵠⵠⵠⲆⵠⲆᐃ, ᐃΔ.ⲆⲆᐃⵠᐃⵠⵠ, ᐃΔ.ⵠᐃΔⲆⲆᐃⲆ], ia, ja, function () {
      Vx(undefined, undefined, undefined, ix.ᐃΔᐃΔⵠⵠᐃ);
    }, -5, 528, fa | da, la);
    this.buttons[m++].view = A;
    this.buttons[m] = mf(232, 352, 0, [ᐃΔ.ⵠⲆⵠⵠⵠΔⲆ, ᐃΔ.ΔⲆΔᐃᐃⵠⲆ, ᐃΔ.ᐃᐃⵠΔΔⲆⵠ], ia, ja, function () {
      $x(300);
    }, -330, 135, fa | da, la);
    this.buttons[m++].view = k;
    this.buttons[m] = mf(232, 352, 0, [ᐃΔ.ⵠⲆᐃᐃⵠⵠᐃ, ᐃΔ.ΔΔΔⵠᐃΔⲆ, ᐃΔ.ⲆⲆᐃⵠΔᐃΔ], ia, ja, function () {
      $x(600);
    }, -195, 135, fa | da, la);
    this.buttons[m++].view = k;
    this.buttons[m] = mf(243, 374, 0, [ᐃΔ.ⵠΔⵠΔⲆΔΔ, ᐃΔ.ⵠⵠⲆΔᐃΔⲆ, ᐃΔ.ⵠᐃⲆⵠⲆᐃΔ], ia, ja, function () {
      $x(2600);
    }, -60, 130, fa | da, la);
    this.buttons[m++].view = k;
    this.buttons[m] = mf(232, 352, 0, [ᐃΔ.ΔᐃⵠᐃⵠΔΔ, ᐃΔ.ᐃΔⵠⲆᐃⲆᐃ, ᐃΔ.ⲆⵠᐃⵠⲆΔᐃ], ia, ja, function () {
      $x(7000);
    }, 78, 135, fa | da, la);
    this.buttons[m++].view = k;
    this.buttons[m] = mf(243, 374, 0, [ᐃΔ.ⵠᐃⲆⲆⵠⲆⲆ, ᐃΔ.ⲆᐃⲆⵠΔⲆᐃ, ᐃΔ.ⲆᐃΔᐃⵠⵠⵠ], ia, ja, function () {
      $x(20000);
    }, 213, 130, fa | da, la);
    this.buttons[m++].view = k;
    this.buttons[m] = mf(58, 64, 0, [ᐃΔ.ⵠⵠⵠⲆᐃΔⵠ, ᐃΔ.ΔⲆⲆᐃΔᐃⵠ, ᐃΔ.ΔΔⲆᐃⵠⵠⵠ], ia, ja, function () {
      W(z);
    }, 300, 88, fa | da, la);
    this.buttons[m++].view = k;
    this.buttons[m] = mf(323, 112, 0, [ᐃΔ.ΔΔᐃⵠⵠⵠᐃ, ᐃΔ.ⵠΔᐃⵠⲆⵠᐃ, ᐃΔ.ⲆⲆⲆⵠᐃⵠⲆ], ia, ja, function () {
      W(O);
      Ja.ⵠΔⲆⵠΔ();
    }, -315, 185, fa | da, la);
    this.buttons[m++].view = f;
    this.buttons[m] = mf(323, 112, 0, [ᐃΔ.ΔᐃⲆΔⵠⵠᐃ, ᐃΔ.ΔᐃⵠⲆⵠᐃᐃ, ᐃΔ.ⵠⲆΔⵠⵠᐃΔ], ia, ja, function () {
      W(G);
      Oa.ⵠΔⲆⵠΔ();
    }, -315, 321, fa | da, la);
    this.buttons[m++].view = f;
    this.buttons[m] = mf(323, 112, 0, [ᐃΔ.ΔΔⵠⲆⵠⵠᐃ, ᐃΔ.ᐃᐃΔΔⲆⲆⵠ, ᐃΔ.ᐃⵠᐃΔⲆΔⵠ], ia, ja, function () {
      W(L);
      Ka.ⵠΔⲆⵠΔ();
    }, 153, 185, fa | da, la);
    this.buttons[m++].view = f;
    this.buttons[m] = mf(323, 112, 0, [ᐃΔ.ⲆⲆᐃⲆⵠⵠⵠ, ᐃΔ.ⵠΔⲆΔᐃᐃᐃ, ᐃΔ.ⵠⵠᐃΔΔⵠΔ], ia, ja, function () {
      W(P);
      La.ⵠΔⲆⵠΔ();
    }, 153, 321, fa | da, la);
    this.buttons[m++].view = f;
    this.buttons[m] = mf(323, 112, 0, [ᐃΔ.ΔⵠᐃⵠΔⲆⵠ, ᐃΔ.ⲆΔⵠⵠⵠⵠⲆ, ᐃΔ.ⵠⲆⲆΔᐃΔⲆ], ia, ja, function () {
      W(j);
      Ma.ⵠΔⲆⵠΔ();
    }, 153, 463, fa | da, la);
    this.buttons[m++].view = f;
    this.buttons[m] = mf(323, 112, 0, [ᐃΔ.ⲆᐃⵠᐃⵠΔⲆ, ᐃΔ.ⵠⵠᐃᐃⵠΔᐃ, ᐃΔ.ⲆᐃⲆᐃΔⵠΔ], ia, ja, function () {
      W(q);
      Na.ⵠΔⲆⵠΔ();
    }, -315, 463, fa | da, la);
    this.buttons[m++].view = f;
    this.buttons[m] = mf(327, 117, 0, [ᐃΔ.ᐃⵠΔΔΔΔΔ, ᐃΔ.ⵠⵠⵠⲆᐃⵠΔ, ᐃΔ.ⵠᐃⵠᐃⲆΔⲆ], ia, ja, function () {
      W(U);
    }, 155, 70, aa, ma);
    this.buttons[m++].view = t;
    this.buttons[m] = mf(130, 129, 0, [ᐃΔ.ᐃⲆᐃᐃᐃΔᐃ, ᐃΔ.ⵠΔⵠᐃⲆⲆⲆ, ᐃΔ.ΔⲆⲆΔᐃᐃⵠ], ia, ja, function () {
      V(u, la, "none");
      W(z);
    }, 10, 40, fa | da, la);
    this.buttons[m++].view = u;
    this.buttons[m] = mf(130, 129, 0, [ᐃΔ.ᐃⲆᐃᐃᐃΔᐃ, ᐃΔ.ⵠΔⵠᐃⲆⲆⲆ, ᐃΔ.ΔⲆⲆΔᐃᐃⵠ], ia, ja, function () {
      V(x, la, "none");
      W(z);
    }, 10, 40, fa | da, la);
    this.buttons[m++].view = x;
    this.buttons[m] = mf(115, 73, 0, [ᐃΔ.ⲆᐃΔⲆⲆ, ᐃΔ.ⲆΔᐃⲆⵠ, ᐃΔ.ΔΔⵠⲆⲆ], ia, ja, function () {
      W(z);
    }, 200, 140, fa | da, la);
    this.buttons[m++].view = R;
    this.buttons[m] = mf(524, 110, 0, [ᐃΔ.ΔᐃᐃᐃⲆⲆΔ, ᐃΔ.ᐃᐃⵠΔᐃⵠⲆ, ᐃΔ.ⲆᐃⵠΔᐃⵠΔ], ia, ja, function () {
      Tx("Atlanta");
    }, -265, 300, fa | da, la);
    this.buttons[m++].view = R;
    this.buttons[m] = mf(523, 110, 0, [ᐃΔ.ΔᐃⵠⵠⲆΔⵠ, ᐃΔ.ⵠᐃᐃⲆΔⲆᐃ, ᐃΔ.ⵠⵠⵠᐃᐃⲆⲆ], ia, ja, function () {
      Tx("LosAngeles");
    }, 5, 300, fa | da, la);
    this.buttons[m++].view = R;
    this.buttons[m] = mf(344, 110, 0, [ᐃΔ.ᐃⵠⵠⵠⵠΔΔ, ᐃΔ.ⵠΔΔΔⵠᐃⲆ, ᐃΔ.ⲆⲆⵠᐃΔΔᐃ], ia, ja, function () {
      Tx("Frankfurt");
    }, -265, 365, fa | da, la);
    this.buttons[m++].view = R;
    this.buttons[m] = mf(344, 110, 0, [ᐃΔ.ⲆᐃᐃⵠᐃⲆⲆ, ᐃΔ.ⲆⲆᐃⵠⲆᐃⲆ, ᐃΔ.ⲆⲆΔΔΔΔⲆ], ia, ja, function () {
      Tx("Osaka");
    }, 100, 365, fa | da, la);
    this.buttons[m++].view = R;
    this.buttons[m] = mf(344, 110, 0, [ᐃΔ.ᐃⲆᐃⲆΔᐃⲆ, ᐃΔ.ᐃᐃⵠⲆᐃΔⵠ, ᐃΔ.ⲆⵠΔΔⵠⵠΔ], ia, ja, function () {
      Tx("Sydney");
    }, -86, 365, fa | da, la);
    this.buttons[m++].view = R;
    this.buttons[m] = mf(115, 73, 0, [ᐃΔ.ⲆᐃΔⲆⲆ, ᐃΔ.ⲆΔᐃⲆⵠ, ᐃΔ.ΔΔⵠⲆⲆ], ia, ja, function () {
      W(R);
    }, 224, 140, fa | da, la);
    this.buttons[m++].view = K;
    this.buttons[m] = mf(230, 352, 0, [ᐃΔ.ᐃⵠⵠᐃΔⲆⲆ, ᐃΔ.ᐃΔᐃⲆᐃᐃⵠ, ᐃΔ.ΔᐃᐃⲆⲆⲆⵠ], ia, ja, function () {
      $x(350);
    }, -280, 240, fa | da, la);
    this.buttons[m++].view = K;
    this.buttons[m] = mf(230, 352, 0, [ᐃΔ.ⲆⲆⵠΔΔΔⵠ, ᐃΔ.ⵠⵠᐃᐃⲆⲆⵠ, ᐃΔ.ᐃᐃⲆᐃΔΔΔ], ia, ja, function () {
      $x(700);
    }, -130, 240, fa | da, la);
    this.buttons[m++].view = K;
    this.buttons[m] = mf(230, 352, 0, [ᐃΔ.ΔⲆⵠⲆⵠⲆᐃ, ᐃΔ.ⲆⲆⵠΔⵠⵠⲆ, ᐃΔ.ᐃΔΔⲆⲆⵠⵠ], ia, ja, function () {
      $x(1400);
    }, 20, 240, fa | da, la);
    this.buttons[m++].view = K;
    this.buttons[m] = mf(230, 352, 0, [ᐃΔ.ⲆⲆᐃⲆⵠⲆᐃ, ᐃΔ.ΔᐃᐃⲆⲆᐃⵠ, ᐃΔ.ΔᐃⲆᐃⵠΔⵠ], ia, ja, function () {
      $x(3000);
    }, 170, 240, fa | da, la);
    this.buttons[m++].view = K;
    this.buttons[m] = mf(105, 119, 0, [ᐃΔ.ᐃⵠⵠᐃΔⵠⵠ, ᐃΔ.Δⵠᐃᐃⵠᐃᐃ, ᐃΔ.ΔⲆⵠΔⲆⵠᐃ], ia, ja, function () {
      const a = document.getElementById("serverAddressInput").value.split(" : ");
      const b = sa.document.createElement("textarea");
      b.value = Pf + "?server=" + a[1] + "&region=" + a[0];
      sa.document.body.appendChild(b);
      b.select();
      sa.document.execCommand("copy");
      sa.document.body.removeChild(b);
    }, 105, 310, fa | da, la);
    this.buttons[m++].view = S;
    this.buttons[m] = mf(105, 119, 0, [ᐃΔ.ⵠᐃⲆᐃⵠⲆΔ, ᐃΔ.ᐃΔⵠᐃΔΔⵠ, ᐃΔ.ᐃᐃΔⲆΔᐃᐃ], ia, ja, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Bx + "rebootServer?token=" + Hx + "&userid=" + Ix);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = Pf + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 235, 310, fa | da, la);
    this.buttons[m++].view = S;
    this.buttons[m] = mf(105, 119, 0, [ᐃΔ.ᐃᐃⲆΔⲆⵠΔ, ᐃΔ.ΔⲆΔᐃΔⲆᐃ, ᐃΔ.ΔΔⵠᐃⲆᐃᐃ], ia, ja, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Bx + "restartServer?token=" + Hx + "&userid=" + Ix);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = Pf + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 170, 310, fa | da, la);
    this.buttons[m++].view = S;
    this.buttons[m] = mf(204, 115, 0, [ᐃΔ.ⵠᐃᐃⲆⲆᐃⵠ, ᐃΔ.ⵠⵠⵠᐃΔΔᐃ, ᐃΔ.ᐃΔᐃⲆᐃᐃᐃ], ia, ja, function () {
      sa.open("./commands.html", "_blank");
    }, -265, 490, fa | da, la);
    this.buttons[m++].view = S;
    this.buttons[m] = mf(145, 69, 0, [ᐃΔ.ⲆΔΔᐃΔⵠⲆ, ᐃΔ.ᐃⵠΔⲆⵠᐃᐃ, ᐃΔ.Ⲇⵠⵠᐃⵠᐃⵠ], ia, ja, function () {
      W(B);
    }, -210, 170, fa | da, la);
    this.buttons[m++].view = z;
    this.buttons[m] = mf(145, 69, 0, [ᐃΔ.ⵠΔΔⵠΔΔΔ, ᐃΔ.ΔⲆⵠΔΔⵠΔ, ᐃΔ.ᐃᐃⵠⲆⲆᐃⵠ], ia, ja, function () {
      W(J);
    }, 70, 170, fa | da, la);
    this.buttons[m++].view = z;
    this.buttons[m] = mf(145, 69, 0, [ᐃΔ.ΔⵠᐃⵠⲆⲆᐃ, ᐃΔ.ⲆⲆⲆΔⲆᐃᐃ, ᐃΔ.ᐃⲆΔΔᐃⵠΔ], ia, ja, function () {
      W(D);
    }, 70, 204, fa | da, la);
    this.buttons[m++].view = z;
    this.buttons[m] = mf(145, 69, 0, [ᐃΔ.ΔᐃⵠᐃⲆᐃⲆ, ᐃΔ.ⲆⵠΔᐃⲆⵠΔ, ᐃΔ.ᐃΔᐃⵠᐃⵠⲆ], ia, ja, function () {
      W(M);
    }, -210, 204, fa | da, la);
    this.buttons[m++].view = z;
    this.buttons[m] = mf(145, 69, 0, [ᐃΔ.ΔᐃⵠᐃⲆᐃⲆ, ᐃΔ.ⲆⵠΔᐃⲆⵠΔ, ᐃΔ.ᐃΔᐃⵠᐃⵠⲆ], ia, ja, function () {
      W(N);
    }, 70, 238, fa | da, la);
    this.buttons[m++].view = z;
    this.buttons[m] = mf(145, 69, 0, [ᐃΔ.ΔᐃⵠᐃⲆᐃⲆ, ᐃΔ.ⲆⵠΔᐃⲆⵠΔ, ᐃΔ.ᐃΔᐃⵠᐃⵠⲆ], ia, ja, function () {
      if (E.ΔⵠⲆᐃΔ()) {
        Wx(0, 300);
      } else {
        W(F);
      }
    }, 307, 205, fa | da, la);
    this.buttons[m++].view = z;
    this.buttons[m] = mf(145, 69, 0, [ᐃΔ.ΔΔΔΔᐃᐃⵠ, ᐃΔ.ΔΔᐃΔⵠⲆᐃ, ᐃΔ.ⲆΔΔⲆᐃⵠΔ], ia, ja, function () {
      W(I);
    }, -210, 238, fa | da, la);
    this.buttons[m++].view = z;
    this.buttons[m] = mf(145, 69, 0, [ᐃΔ.ΔΔΔΔᐃᐃⵠ, ᐃΔ.ΔΔᐃΔⵠⲆᐃ, ᐃΔ.ⲆΔΔⲆᐃⵠΔ], ia, ja, function () {
      if (E.ΔⵠⲆᐃΔ()) {
        Wx(1, 600);
      } else {
        W(F);
      }
    }, 307, 239, fa | da, la);
    this.buttons[m++].view = z;
    this.buttons[m] = mf(192, 101, 0, [ᐃΔ.ᐃⲆⲆΔⲆΔΔ, ᐃΔ.ⵠⵠΔⵠᐃⲆΔ, ᐃΔ.ⵠΔᐃⲆⲆΔᐃ], ia, ja, function () {
      _x();
    }, -100, 250, fa | da, la);
    this.buttons[m++].view = Q;
    this.buttons[m] = mf(192, 104, 0, [ᐃΔ.ⲆᐃⵠⲆΔᐃᐃ, ᐃΔ.ᐃᐃΔⵠΔⲆᐃ, ᐃΔ.ᐃΔᐃᐃΔⲆⵠ], ia, ja, function () {
      _x();
    }, -100, 239, fa | da, la);
    this.buttons[m++].view = H;
    this.buttons[m] = mf(192, 101, 0, [ᐃΔ.ⵠΔⵠⵠⲆⲆⵠ, ᐃΔ.ⲆⲆᐃΔⲆᐃⵠ, ᐃΔ.ⲆᐃⵠᐃᐃⲆⵠ], ia, ja, function () {
      W(p);
    }, 10, 250, fa | da, la);
    this.buttons[m++].view = Q;
    this.buttons[m] = mf(192, 104, 0, [ᐃΔ.ⵠⲆᐃⵠⵠΔᐃ, ᐃΔ.ΔⵠᐃΔΔⲆⵠ, ᐃΔ.ⵠⵠᐃⲆᐃⵠΔ], ia, ja, function () {
      W(p);
    }, 10, 239, fa | da, la);
    this.buttons[m++].view = H;
    ᐃⵠᐃⲆⵠ = [];
    ᐃⵠᐃⲆⵠ[ᐃᐃⵠ.ᐃⲆᐃᐃⵠ] = [ᐃΔ.ⵠΔⵠᐃΔⵠᐃ, ᐃΔ.ⵠⲆΔⵠΔᐃΔ, ᐃΔ.ⵠⵠᐃⲆΔᐃⵠ];
    ᐃⵠᐃⲆⵠ[ᐃᐃⵠ.ΔⲆⵠⵠ] = [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ];
    ᐃⵠᐃⲆⵠ[ᐃᐃⵠ.ⲆΔΔⵠ] = [ᐃΔ.ⲆⲆⵠⲆᐃⲆᐃ, ᐃΔ.ᐃᐃᐃᐃᐃⲆᐃ, ᐃΔ.ᐃⲆⲆᐃⵠᐃⵠ];
    ᐃⵠᐃⲆⵠ[ᐃᐃⵠ.ⵠⵠᐃⲆ] = [ᐃΔ.ⵠᐃⲆᐃⵠΔⵠ, ᐃΔ.ⲆᐃⲆⲆⵠΔⵠ, ᐃΔ.ᐃᐃⲆᐃᐃⲆΔ];
    ᐃⵠᐃⲆⵠ[ᐃᐃⵠ.ⵠⵠᐃΔ] = [ᐃΔ.ⵠⲆᐃΔⵠⲆⲆ, ᐃΔ.ᐃⵠⵠᐃΔᐃΔ, ᐃΔ.ᐃⵠⲆΔⲆⲆᐃ];
    ᐃⵠᐃⲆⵠ[ᐃᐃⵠ.ᐃⵠⵠⲆ] = [ᐃΔ.ΔⲆᐃᐃᐃⵠⵠ, ᐃΔ.ⲆⵠΔⵠⲆⵠⵠ, ᐃΔ.ᐃⲆⲆⲆΔΔΔ];
    ᐃⵠᐃⲆⵠ[ᐃᐃⵠ.ⵠΔᐃⵠ] = [ᐃΔ.ΔⲆΔᐃⲆⵠⵠ, ᐃΔ.ⵠᐃⵠⲆᐃⵠΔ, ᐃΔ.ⵠΔᐃΔⲆⲆᐃ];
    ᐃⵠᐃⲆⵠ[ᐃᐃⵠ.ⵠΔⲆᐃᐃ] = [ᐃΔ.ᐃᐃΔΔⵠⲆᐃ, ᐃΔ.ⵠⵠᐃᐃⵠᐃΔ, ᐃΔ.ⵠⵠⲆⲆᐃⲆⲆ];
    ᐃⵠᐃⲆⵠ[ᐃᐃⵠ.ⲆⲆⵠⲆⲆΔⲆ] = [ᐃΔ.ᐃⲆᐃⲆΔⵠᐃ, ᐃΔ.ᐃΔᐃΔᐃΔΔ, ᐃΔ.ᐃⲆⵠᐃⲆⵠⵠ];
    ⵠΔΔⵠΔᐃⲆ = m;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, -29, 205, fa | da, la);
    this.buttons[m++].view = O;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, -29, 300, fa | da, la);
    this.buttons[m++].view = O;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, mg, -29, 395, fa | da, la);
    this.buttons[m++].view = O;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 65, 205, fa | da, la);
    this.buttons[m++].view = O;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 65, 300, fa | da, la);
    this.buttons[m++].view = O;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 65, 395, fa | da, la);
    this.buttons[m++].view = O;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 159, 205, fa | da, la);
    this.buttons[m++].view = O;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 159, 300, fa | da, la);
    this.buttons[m++].view = O;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 159, 395, fa | da, la);
    this.buttons[m++].view = O;
    this.buttons[m] = mf(39, 122, 0, [ᐃΔ.ⲆⲆᐃⵠᐃΔⵠ, ᐃΔ.ⲆᐃⲆΔᐃᐃΔ, ᐃΔ.ⲆⵠᐃΔⲆⲆⵠ], ia, ja, undefined, -61, 315, fa | da, la);
    this.buttons[m++].view = O;
    this.buttons[m] = mf(39, 122, 0, [ᐃΔ.ⵠⵠⵠᐃⲆᐃⲆ, ᐃΔ.ΔⵠⵠⲆⲆᐃΔ, ᐃΔ.ΔᐃᐃΔᐃⵠᐃ], ia, ja, wh, 260, 315, fa | da, la);
    this.buttons[m++].view = O;
    this.buttons[m] = mf(115, 73, 0, [ᐃΔ.ⲆᐃΔⲆⲆ, ᐃΔ.ⲆΔᐃⲆⵠ, ᐃΔ.ΔΔⵠⲆⲆ], ia, ja, function () {
      W(f);
    }, -320, 470, fa | da, la);
    this.buttons[m++].view = O;
    ΔⵠΔΔΔⵠⲆΔᐃ = m;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, jq, -29, 205, fa | da, la);
    this.buttons[m++].view = G;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, br, -29, 300, fa | da, la);
    this.buttons[m++].view = G;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, -29, 395, fa | da, la);
    this.buttons[m++].view = G;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 65, 205, fa | da, la);
    this.buttons[m++].view = G;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 65, 300, fa | da, la);
    this.buttons[m++].view = G;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 65, 395, fa | da, la);
    this.buttons[m++].view = G;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 159, 205, fa | da, la);
    this.buttons[m++].view = G;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 159, 300, fa | da, la);
    this.buttons[m++].view = G;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 159, 395, fa | da, la);
    this.buttons[m++].view = G;
    this.buttons[m] = mf(39, 122, 0, [ᐃΔ.ⲆⲆᐃⵠᐃΔⵠ, ᐃΔ.ⲆᐃⲆΔᐃᐃΔ, ᐃΔ.ⲆⵠᐃΔⲆⲆⵠ], ia, ja, undefined, -61, 315, fa | da, la);
    this.buttons[m++].view = G;
    this.buttons[m] = mf(39, 122, 0, [ᐃΔ.ⵠⵠⵠᐃⲆᐃⲆ, ᐃΔ.ΔⵠⵠⲆⲆᐃΔ, ᐃΔ.ΔᐃᐃΔᐃⵠᐃ], ia, ja, dk, 260, 315, fa | da, la);
    this.buttons[m++].view = G;
    this.buttons[m] = mf(115, 73, 0, [ᐃΔ.ⲆᐃΔⲆⲆ, ᐃΔ.ⲆΔᐃⲆⵠ, ᐃΔ.ΔΔⵠⲆⲆ], ia, ja, function () {
      W(f);
    }, -320, 470, fa | da, la);
    this.buttons[m++].view = G;
    ᐃᐃΔⵠᐃⵠⵠΔᐃ = m;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, -29, 205, fa | da, la);
    this.buttons[m++].view = q;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, -29, 300, fa | da, la);
    this.buttons[m++].view = q;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, -29, 395, fa | da, la);
    this.buttons[m++].view = q;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, Tg, 65, 205, fa | da, la);
    this.buttons[m++].view = q;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, gs, 65, 300, fa | da, la);
    this.buttons[m++].view = q;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 65, 395, fa | da, la);
    this.buttons[m++].view = q;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, Aq, 159, 205, fa | da, la);
    this.buttons[m++].view = q;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 159, 300, fa | da, la);
    this.buttons[m++].view = q;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, Fn, 159, 395, fa | da, la);
    this.buttons[m++].view = q;
    this.buttons[m] = mf(39, 122, 0, [ᐃΔ.ⲆⲆᐃⵠᐃΔⵠ, ᐃΔ.ⲆᐃⲆΔᐃᐃΔ, ᐃΔ.ⲆⵠᐃΔⲆⲆⵠ], ia, ja, Aq, -61, 315, fa | da, la);
    this.buttons[m++].view = q;
    this.buttons[m] = mf(39, 122, 0, [ᐃΔ.ⵠⵠⵠᐃⲆᐃⲆ, ᐃΔ.ΔⵠⵠⲆⲆᐃΔ, ᐃΔ.ΔᐃᐃΔᐃⵠᐃ], ia, ja, undefined, 260, 315, fa | da, la);
    this.buttons[m++].view = q;
    this.buttons[m] = mf(115, 73, 0, [ᐃΔ.ⲆᐃΔⲆⲆ, ᐃΔ.ⲆΔᐃⲆⵠ, ᐃΔ.ΔΔⵠⲆⲆ], ia, ja, function () {
      W(f);
    }, -320, 470, fa | da, la);
    this.buttons[m++].view = q;
    ⲆΔᐃⲆᐃⵠⲆΔΔ = m;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, Vh, -29, 205, fa | da, la);
    this.buttons[m++].view = L;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, -29, 300, fa | da, la);
    this.buttons[m++].view = L;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, -29, 395, fa | da, la);
    this.buttons[m++].view = L;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, vh, 65, 205, fa | da, la);
    this.buttons[m++].view = L;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 65, 300, fa | da, la);
    this.buttons[m++].view = L;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 65, 395, fa | da, la);
    this.buttons[m++].view = L;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 159, 205, fa | da, la);
    this.buttons[m++].view = L;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, Vh, 159, 300, fa | da, la);
    this.buttons[m++].view = L;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, Tg, 159, 395, fa | da, la);
    this.buttons[m++].view = L;
    this.buttons[m] = mf(39, 122, 0, [ᐃΔ.ⲆⲆᐃⵠᐃΔⵠ, ᐃΔ.ⲆᐃⲆΔᐃᐃΔ, ᐃΔ.ⲆⵠᐃΔⲆⲆⵠ], ia, ja, wh, -61, 315, fa | da, la);
    this.buttons[m++].view = L;
    this.buttons[m] = mf(39, 122, 0, [ᐃΔ.ⵠⵠⵠᐃⲆᐃⲆ, ᐃΔ.ΔⵠⵠⲆⲆᐃΔ, ᐃΔ.ΔᐃᐃΔᐃⵠᐃ], ia, ja, vh, 260, 315, fa | da, la);
    this.buttons[m++].view = L;
    this.buttons[m] = mf(115, 73, 0, [ᐃΔ.ⲆᐃΔⲆⲆ, ᐃΔ.ⲆΔᐃⲆⵠ, ᐃΔ.ΔΔⵠⲆⲆ], ia, ja, function () {
      W(f);
    }, -320, 470, fa | da, la);
    this.buttons[m++].view = L;
    ⵠᐃᐃⲆᐃⵠⵠⵠⲆ = m;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, -29, 205, fa | da, la);
    this.buttons[m++].view = P;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, dk, -29, 300, fa | da, la);
    this.buttons[m++].view = P;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, -29, 395, fa | da, la);
    this.buttons[m++].view = P;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 65, 205, fa | da, la);
    this.buttons[m++].view = P;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, hj, 65, 300, fa | da, la);
    this.buttons[m++].view = P;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 65, 395, fa | da, la);
    this.buttons[m++].view = P;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, gs, 159, 205, fa | da, la);
    this.buttons[m++].view = P;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, vh, 159, 300, fa | da, la);
    this.buttons[m++].view = P;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, Yk, 159, 395, fa | da, la);
    this.buttons[m++].view = P;
    this.buttons[m] = mf(39, 122, 0, [ᐃΔ.ⲆⲆᐃⵠᐃΔⵠ, ᐃΔ.ⲆᐃⲆΔᐃᐃΔ, ᐃΔ.ⲆⵠᐃΔⲆⲆⵠ], ia, ja, undefined, -61, 315, fa | da, la);
    this.buttons[m++].view = P;
    this.buttons[m] = mf(39, 122, 0, [ᐃΔ.ⵠⵠⵠᐃⲆᐃⲆ, ᐃΔ.ΔⵠⵠⲆⲆᐃΔ, ᐃΔ.ΔᐃᐃΔᐃⵠᐃ], ia, ja, undefined, 260, 315, fa | da, la);
    this.buttons[m++].view = P;
    this.buttons[m] = mf(115, 73, 0, [ᐃΔ.ⲆᐃΔⲆⲆ, ᐃΔ.ⲆΔᐃⲆⵠ, ᐃΔ.ΔΔⵠⲆⲆ], ia, ja, function () {
      W(f);
    }, -320, 470, fa | da, la);
    this.buttons[m++].view = P;
    ⲆⵠⵠⲆⲆⲆᐃⵠᐃ = m;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, jq, -29, 205, fa | da, la);
    this.buttons[m++].view = j;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, -29, 300, fa | da, la);
    this.buttons[m++].view = j;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, -29, 395, fa | da, la);
    this.buttons[m++].view = j;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 65, 205, fa | da, la);
    this.buttons[m++].view = j;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, mg, 65, 300, fa | da, la);
    this.buttons[m++].view = j;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 65, 395, fa | da, la);
    this.buttons[m++].view = j;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, Yk, 159, 205, fa | da, la);
    this.buttons[m++].view = j;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 159, 300, fa | da, la);
    this.buttons[m++].view = j;
    this.buttons[m] = mf(178, 182, 0, [ᐃΔ.ᐃⲆⵠΔ, ᐃΔ.ⲆΔᐃΔ, ᐃΔ.ᐃⵠΔⲆ], ia, ja, undefined, 159, 395, fa | da, la);
    this.buttons[m++].view = j;
    this.buttons[m] = mf(39, 122, 0, [ᐃΔ.ⲆⲆᐃⵠᐃΔⵠ, ᐃΔ.ⲆᐃⲆΔᐃᐃΔ, ᐃΔ.ⲆⵠᐃΔⲆⲆⵠ], ia, ja, Fn, -61, 315, fa | da, la);
    this.buttons[m++].view = j;
    this.buttons[m] = mf(39, 122, 0, [ᐃΔ.ⵠⵠⵠᐃⲆᐃⲆ, ᐃΔ.ΔⵠⵠⲆⲆᐃΔ, ᐃΔ.ΔᐃᐃΔᐃⵠᐃ], ia, ja, undefined, 260, 315, fa | da, la);
    this.buttons[m++].view = j;
    this.buttons[m] = mf(115, 73, 0, [ᐃΔ.ⲆᐃΔⲆⲆ, ᐃΔ.ⲆΔᐃⲆⵠ, ᐃΔ.ΔΔⵠⲆⲆ], ia, ja, function () {
      W(f);
    }, -320, 470, fa | da, la);
    this.buttons[m++].view = j;
    this.buttons[m] = mf(260, 260, 0, [ᐃΔ.ⲆᐃⲆⲆᐃⵠΔ, ᐃΔ.ⵠⲆΔΔΔᐃΔ, ᐃΔ.ⵠᐃⲆΔΔⵠⵠ], ia, ja, function () {
      if (E.ΔⵠⲆᐃΔ()) {
        Xx(3, 50);
      } else {
        W(F);
      }
    }, -65, 197, fa | da, la);
    this.buttons[m++].view = J;
    this.buttons[m] = mf(115, 73, 0, [ᐃΔ.ⲆᐃΔⲆⲆ, ᐃΔ.ⲆΔᐃⲆⵠ, ᐃΔ.ΔΔⵠⲆⲆ], ia, ja, function () {
      W(z);
    }, 309, 180, fa | da, la);
    this.buttons[m++].view = J;
    this.buttons[m] = mf(260, 260, 0, [ᐃΔ.ⵠⵠⲆⲆᐃⵠᐃ, ᐃΔ.ΔΔΔⵠⵠΔᐃ, ᐃΔ.ΔⲆⵠⲆΔᐃⲆ], ia, ja, function () {
      if (E.ΔⵠⲆᐃΔ()) {
        Xx(0, 100);
      } else {
        W(F);
      }
    }, -65, 197, fa | da, la);
    this.buttons[m++].view = B;
    this.buttons[m] = mf(115, 73, 0, [ᐃΔ.ⲆᐃΔⲆⲆ, ᐃΔ.ⲆΔᐃⲆⵠ, ᐃΔ.ΔΔⵠⲆⲆ], ia, ja, function () {
      W(z);
    }, 309, 180, fa | da, la);
    this.buttons[m++].view = B;
    this.buttons[m] = mf(260, 260, 0, [ᐃΔ.ΔⵠⲆⲆΔⲆⵠ, ᐃΔ.ᐃΔΔⵠⲆᐃⲆ, ᐃΔ.ᐃΔⵠⲆⲆᐃⵠ], ia, ja, function () {
      if (E.ΔⵠⲆᐃΔ()) {
        Xx(4, 150);
      } else {
        W(F);
      }
    }, -65, 197, fa | da, la);
    this.buttons[m++].view = D;
    this.buttons[m] = mf(115, 73, 0, [ᐃΔ.ⲆᐃΔⲆⲆ, ᐃΔ.ⲆΔᐃⲆⵠ, ᐃΔ.ΔΔⵠⲆⲆ], ia, ja, function () {
      W(z);
    }, 309, 180, fa | da, la);
    this.buttons[m++].view = D;
    this.buttons[m] = mf(260, 260, 0, [ᐃΔ.ⲆⲆΔⵠⲆⲆᐃ, ᐃΔ.ΔΔᐃᐃⲆᐃⵠ, ᐃΔ.ΔⲆⲆΔᐃᐃᐃ], ia, ja, function () {
      if (E.ΔⵠⲆᐃΔ()) {
        Xx(1, 300);
      } else {
        W(F);
      }
    }, -65, 197, fa | da, la);
    this.buttons[m++].view = M;
    this.buttons[m] = mf(115, 73, 0, [ᐃΔ.ⲆᐃΔⲆⲆ, ᐃΔ.ⲆΔᐃⲆⵠ, ᐃΔ.ΔΔⵠⲆⲆ], ia, ja, function () {
      W(z);
    }, 309, 180, fa | da, la);
    this.buttons[m++].view = M;
    this.buttons[m] = mf(260, 260, 0, [ᐃΔ.ⵠΔⵠΔⵠⲆⵠ, ᐃΔ.ⲆⵠⵠᐃΔⲆⵠ, ᐃΔ.ΔΔⵠⵠⲆⵠᐃ], ia, ja, function () {
      if (E.ΔⵠⲆᐃΔ()) {
        Xx(2, 600);
      } else {
        W(F);
      }
    }, -65, 197, fa | da, la);
    this.buttons[m++].view = I;
    this.buttons[m] = mf(115, 73, 0, [ᐃΔ.ⲆᐃΔⲆⲆ, ᐃΔ.ⲆΔᐃⲆⵠ, ᐃΔ.ΔΔⵠⲆⲆ], ia, ja, function () {
      W(z);
    }, 309, 180, fa | da, la);
    this.buttons[m++].view = I;
    this.buttons[m] = mf(260, 260, 0, [ᐃΔ.ⲆⲆΔⵠⲆⲆᐃ, ᐃΔ.ΔΔᐃᐃⲆᐃⵠ, ᐃΔ.ΔⲆⲆΔᐃᐃᐃ], ia, ja, function () {
      if (E.ΔⵠⲆᐃΔ()) {
        Xx(5, 300);
      } else {
        W(F);
      }
    }, -65, 197, fa | da, la);
    this.buttons[m++].view = N;
    this.buttons[m] = mf(115, 73, 0, [ᐃΔ.ⲆᐃΔⲆⲆ, ᐃΔ.ⲆΔᐃⲆⵠ, ᐃΔ.ΔΔⵠⲆⲆ], ia, ja, function () {
      W(z);
    }, 309, 180, fa | da, la);
    this.buttons[m++].view = N;
    var ya = m;
    this.buttons[m] = mf(46, 51, 0, [ᐃΔ.ⲆⵠΔᐃᐃΔⵠ, ᐃΔ.ΔᐃⵠⵠⵠⲆⵠ, ᐃΔ.ᐃⲆⲆⵠΔᐃΔ], ia, ja, function () {
      xa(vh, 0);
    }, -305, 132, fa | da, la);
    this.buttons[m++].view = p;
    var za = m;
    this.buttons[m] = mf(46, 51, 0, [ᐃΔ.ⲆⵠᐃᐃⵠΔΔ, ᐃΔ.ⲆΔⲆⲆⵠᐃⲆ, ᐃΔ.ⵠΔⵠⲆⵠΔⵠ], ia, ja, function () {
      xa(Tn, 1);
    }, -273, 132, fa | da, la);
    this.buttons[m++].view = p;
    var Aa = m;
    this.buttons[m] = mf(46, 51, 0, [ᐃΔ.ᐃΔⲆᐃΔᐃⵠ, ᐃΔ.ᐃΔⲆᐃⲆᐃⲆ, ᐃΔ.ⵠⵠⵠⲆⲆⵠᐃ], ia, ja, function () {
      xa(gs, 2);
    }, -241, 132, fa | da, la);
    this.buttons[m++].view = p;
    var Ba = m;
    this.buttons[m] = mf(46, 51, 0, [ᐃΔ.ⲆΔⲆᐃΔΔᐃ, ᐃΔ.ΔᐃⵠΔⲆᐃⲆ, ᐃΔ.Δᐃᐃᐃᐃᐃᐃ], ia, ja, function () {
      xa(Zi, 3);
    }, -305, 165, fa | da, la);
    this.buttons[m++].view = p;
    var Ca = m;
    this.buttons[m] = mf(46, 51, 0, [ᐃΔ.ᐃⲆⲆⵠⵠᐃⵠ, ᐃΔ.ΔᐃⲆⲆΔⵠᐃ, ᐃΔ.ΔⵠᐃⲆΔᐃΔ], ia, ja, function () {
      xa(wh, 4);
    }, -273, 165, fa | da, la);
    this.buttons[m++].view = p;
    var Da = m;
    this.buttons[m] = mf(46, 51, 0, [ᐃΔ.ⵠᐃⲆⵠᐃⵠᐃ, ᐃΔ.ᐃⵠΔΔⲆⲆᐃ, ᐃΔ.ⲆⵠΔⵠΔΔⵠ], ia, ja, function () {
      xa(Tn, 5);
    }, -241, 165, fa | da, la);
    this.buttons[m++].view = p;
    var Ea = m;
    this.buttons[m] = mf(460, 73, 0, [ᐃΔ.ᐃᐃⲆⲆⵠᐃⲆ, ᐃΔ.ⲆᐃΔⵠᐃⵠⵠ, ᐃΔ.ᐃⵠⵠⲆⲆⵠⲆ], ia, ja, function () {
      xa(-1);
    }, -180, 170, fa | da, la);
    this.buttons[m++].view = p;
    var Fa = m;
    this.buttons[m] = mf(222, 68, 0, [ᐃΔ.ⲆⲆᐃⵠΔΔΔ, ᐃΔ.ⲆⲆΔᐃΔⵠⵠ, ᐃΔ.ⵠⵠᐃⵠⲆⲆΔ], ia, ja, function () {
      xa(0);
    }, -180, 215, fa | da, la);
    this.buttons[m++].view = p;
    var Ga = m;
    this.buttons[m] = mf(222, 68, 0, [ᐃΔ.ⲆΔΔⵠΔⵠⲆ, ᐃΔ.ⲆⲆⵠⵠⵠᐃᐃ, ᐃΔ.ΔΔΔΔⵠⵠᐃ], ia, ja, function () {
      xa(4);
    }, -180, 260, fa | da, la);
    this.buttons[m++].view = p;
    var Ha = m;
    this.buttons[m] = mf(222, 68, 0, [ᐃΔ.ⲆⵠⲆᐃⲆᐃⵠ, ᐃΔ.ΔⲆᐃⲆⵠⲆⲆ, ᐃΔ.ᐃⲆⲆⲆᐃᐃⵠ], ia, ja, function () {
      xa(2);
    }, -60, 215, fa | da, la);
    this.buttons[m++].view = p;
    var Ia = m;
    this.buttons[m] = mf(222, 68, 0, [ᐃΔ.ᐃⲆᐃᐃⲆᐃΔ, ᐃΔ.ΔΔᐃⵠᐃⲆᐃ, ᐃΔ.ⲆⲆⵠⲆⵠᐃΔ], ia, ja, function () {
      xa(3);
    }, -60, 260, fa | da, la);
    this.buttons[m++].view = p;
    this.ⲆⵠΔⵠⵠΔⲆ = m;
    this.buttons[m] = mf(143, 66, 0, [ᐃΔ.ΔᐃⲆⵠⵠⲆⵠ, ᐃΔ.ΔᐃⵠᐃᐃᐃΔ, ᐃΔ.ᐃΔⵠᐃⲆⵠᐃ], ia, ja, function () {
      Vx(undefined, ix.ⲆⵠΔⵠⵠΔⲆ);
    }, -298, 110, fa | da, la);
    this.buttons[m++].view = A;
    this.ⲆⲆΔᐃⵠⲆⵠ = m;
    this.buttons[m] = mf(104, 66, 0, [ᐃΔ.ᐃΔⵠⵠΔΔᐃ, ᐃΔ.ᐃᐃⵠⵠΔΔⲆ, ᐃΔ.ΔⲆΔΔⵠⵠᐃ], ia, ja, function () {
      Vx(undefined, ix.ⲆⲆΔᐃⵠⲆⵠ);
    }, -223, 110, fa | da, la);
    this.buttons[m++].view = A;
    this.ΔⲆⲆⵠⵠⵠⲆ = m;
    this.buttons[m] = mf(110, 66, 0, [ᐃΔ.ᐃⵠⲆᐃⲆΔⲆ, ᐃΔ.ⵠⵠΔᐃⲆᐃᐃ, ᐃΔ.ᐃΔᐃⲆⵠΔΔ], ia, ja, function () {
      Vx(undefined, ix.ΔⲆⲆⵠⵠⵠⲆ);
    }, -168, 110, fa | da, la);
    this.buttons[m++].view = A;
    this.ⵠⵠᐃΔᐃΔⵠ = m;
    this.buttons[m] = mf(88, 66, 0, [ᐃΔ.ⲆⵠΔᐃⲆⵠᐃ, ᐃΔ.ΔⵠᐃΔⵠΔⲆ, ᐃΔ.Δⵠᐃⵠᐃⵠⵠ], ia, ja, function () {
      Vx(wh, ix.ⵠⵠᐃΔᐃΔⵠ);
    }, -110, 110, fa | da, la);
    this.buttons[m++].view = A;
    this.ᐃⲆᐃᐃⲆⲆⵠ = m;
    this.buttons[m] = mf(88, 66, 0, [ᐃΔ.ΔⵠᐃⲆᐃΔΔ, ᐃΔ.ΔΔΔⵠᐃᐃΔ, ᐃΔ.ⵠⵠⵠΔⲆⵠᐃ], ia, ja, function () {
      Vx(undefined, ix.ᐃⲆᐃᐃⲆⲆⵠ);
    }, -63, 110, fa | da, la);
    this.buttons[m++].view = A;
    this.buttons[m] = mf(86, 44, 0, [ᐃΔ.ⵠΔⲆⵠᐃⵠⵠ, ᐃΔ.ᐃᐃΔᐃⲆᐃⵠ, ᐃΔ.ᐃⵠⵠᐃⲆᐃⲆ], ia, ja, function () {
      sa.open("./terms.html", "_blank");
    }, 349, 290, fa | da, la);
    this.buttons[m++].view = z;
    var Ja = new e(ᐃᐃΔⵠ.ⲆⲆᐃⲆΔ, ⵠΔΔⵠΔᐃⲆ, function (a) {
      ix.Ⲇᐃⵠᐃ = a;
      if (ix.unlock.Ⲇᐃⵠᐃ[a] === 1) {
        ᐃᐃᐃⲆ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.Ⲇᐃⵠᐃ, this.unlock.Ⲇᐃⵠᐃ);
    var Ka = new e(ᐃᐃΔⵠ.ⲆΔΔΔ, ⲆΔᐃⲆᐃⵠⲆΔΔ, function (a) {
      ix.ⵠᐃⲆⵠᐃ = a;
      if (ix.unlock.ⵠᐃⲆⵠᐃ[a] === 1) {
        ᐃᐃᐃⲆ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠᐃⲆⵠᐃ, this.unlock.ⵠᐃⲆⵠᐃ);
    var La = new e(ᐃᐃΔⵠ.ΔⵠΔΔⲆ, ⵠᐃᐃⲆᐃⵠⵠⵠⲆ, function (a) {
      ix.ⵠⲆⲆᐃⵠ = a;
      if (ix.unlock.ⵠⲆⲆᐃⵠ[a] === 1) {
        ᐃᐃᐃⲆ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠⲆⲆᐃⵠ, this.unlock.ⵠⲆⲆᐃⵠ);
    var Ma = new e(ᐃᐃΔⵠ.Δⵠⵠᐃᐃ, ⲆⵠⵠⲆⲆⲆᐃⵠᐃ, function (a) {
      ix.Ⲇⵠᐃᐃᐃ = a;
      if (ix.unlock.Ⲇⵠᐃᐃᐃ[a] === 1) {
        ᐃᐃᐃⲆ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.Ⲇⵠᐃᐃᐃ, this.unlock.Ⲇⵠᐃᐃᐃ);
    var Na = new e(ᐃᐃΔⵠ.Δⵠⵠᐃᐃ, ᐃᐃΔⵠᐃⵠⵠΔᐃ, function (a) {
      ix.ΔᐃᐃⲆᐃ = a;
      if (ix.unlock.ΔᐃᐃⲆᐃ[a] === 1) {
        ᐃᐃᐃⲆ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.ΔᐃᐃⲆᐃ, this.unlock.ΔᐃᐃⲆᐃ);
    var Oa = new e(ᐃᐃΔⵠ.ᐃΔᐃΔⲆ, ΔⵠΔΔΔⵠⲆΔᐃ, function (a) {
      ix.ⵠᐃⲆᐃΔ = a;
      if (ix.unlock.ⵠᐃⲆᐃΔ[a] === 1) {
        ᐃᐃᐃⲆ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠᐃⲆᐃΔ, this.unlock.ⵠᐃⲆᐃΔ);
    this.ⵠⲆΔΔΔΔⵠ = function (a) {
      qx.ΔᐃΔⲆ = lf(E.Δᐃ, a);
      for (var b = 0; b < E.buttons.length; b++) {
        if (ma === E.buttons[b].info.active) {
          E.buttons[b].ΔΔⲆΔ(E.Δᐃ, qx.ΔᐃΔⲆ, af);
        }
      }
    };
    this.ⵠᐃⵠᐃΔᐃⵠ = function (a) {
      qx.ΔᐃΔⲆ = lf(E.Δᐃ, a);
      for (var b = 0; b < E.buttons.length; b++) {
        var c = E.buttons[b];
        if (c.info.active === ma && c.ΔΔⲆΔ(E.Δᐃ, qx.ΔᐃΔⲆ, rf)) {
          c.info.callback();
          return;
        }
      }
    };
    this.ΔᐃⵠⵠΔᐃΔ = In;
    this.ⵠⲆⲆᐃΔΔΔ = function (a) {
      qx.ΔᐃΔⲆ = lf(E.Δᐃ, a);
      var c = false;
      for (var d = 0; d < E.buttons.length; d++) {
        if (ma === E.buttons[d].info.active) {
          c |= E.buttons[d].ΔΔⲆΔ(E.Δᐃ, qx.ΔᐃΔⲆ, of);
        }
      }
      if (E.ΔᐃⵠⵠΔᐃΔ !== c) {
        E.ΔᐃⵠⵠΔᐃΔ = c;
        b.style.cursor = c ? E.ⲆⵠⵠᐃⲆΔΔ : E.ᐃᐃᐃⵠΔΔᐃ;
      }
    };
    this.ⵠΔᐃᐃⲆΔᐃ = function () {
      sa.addEventListener("mousedown", this.ⵠⲆΔΔΔΔⵠ, C);
      sa.addEventListener("mouseup", this.ⵠᐃⵠᐃΔᐃⵠ, T);
      sa.addEventListener("mousemove", this.ⵠⲆⲆᐃΔΔΔ, false);
    };
    this.ᐃⵠΔᐃᐃⲆⵠ = function () {
      sa.removeEventListener("mousedown", this.ⵠⲆΔΔΔΔⵠ, false);
      sa.removeEventListener("mouseup", this.ⵠᐃⵠᐃΔᐃⵠ, false);
      sa.removeEventListener("mousemove", this.ⵠⲆⲆᐃΔΔΔ, ye);
    };
  }
  var Pw = 1;
  var Qw = 1;
  var Rw = {
    ᐃΔΔΔⵠ: 3,
    ΔᐃⵠⲆⲆᐃΔΔᐃ: 5000,
    ΔΔⵠᐃⲆ: 2,
    ᐃᐃⵠᐃᐃⲆⵠ: 460000,
    ⲆⲆΔΔΔⲆᐃⵠΔ: 5000,
    ΔⵠΔᐃⲆ: 1,
    ΔᐃⲆⲆⵠⲆⲆ: 12,
    ⵠᐃΔⵠᐃᐃᐃΔᐃ: 5000,
    ᐃᐃᐃⲆΔⵠⵠᐃᐃ: 12,
    ⵠᐃᐃ: 6,
    ΔⲆᐃΔΔ: 8,
    ⲆᐃΔΔⲆⵠⵠ: 3000,
    ΔᐃⲆᐃᐃΔΔⲆⲆ: 12
  };
  var Sw = [];
  Sw[-1] = 1;
  Sw[28] = 1;
  Sw[49] = 1;
  Sw[Rr.ΔΔⵠᐃΔΔΔΔΔ] = 2;
  Sw[8] = 2;
  Sw[1] = 2;
  Sw[3] = 2;
  Sw[4] = 2;
  ;
  Sw[31] = 2;
  Sw[32] = 2;
  Sw[9] = 2;
  Sw[57] = 2;
  Sw[0] = 2;
  Sw[63] = 2;
  Sw[17] = 2;
  Sw[5] = 2;
  Sw[6] = 2;
  Sw[30] = 2;
  const Tw = 14137908;
  const Uw = 14137908 .ⵠΔⵠⲆΔⵠᐃ;
  const Vw = `const ᐃᐃⵠᐃΔΔⲆ = (typeof ⲆⵠⲆⲆᐃΔΔ === "${Uw}") ? 1 : 0; return ᐃᐃⵠᐃΔΔⲆ;`;
  Sw[Rr.ΔⵠⵠΔⲆⲆᐃᐃΔ] = 2;
  Sw[18] = 2;
  Sw[12] = 2;
  Sw[13] = 2;
  Sw[14] = 2;
  Sw[15] = 2;
  Sw[16] = 2;
  Sw[33] = 2;
  Sw[Rr.ⵠᐃⵠᐃⵠΔⲆⵠⵠ] = 2;
  Sw[35] = 2;
  Sw[36] = 2;
  Sw[37] = 2;
  Sw[38] = 2;
  Sw[39] = 2;
  Sw[45] = 2;
  Sw[62] = 2;
  Sw[54] = 2;
  Sw[53] = 2;
  Sw[46] = 3;
  Sw[50] = 3;
  Sw[51] = 3;
  Sw[52] = 3;
  ⵠⵠΔΔ = [];
  ⵠⵠΔΔ[0] = 0;
  ⵠⵠΔΔ[1] = 1;
  ⵠⵠΔΔ[2] = 1;
  ⵠⵠΔΔ[3] = 1;
  ⵠⵠΔΔ[4] = 0;
  ⵠⵠΔΔ[5] = 0;
  ⵠⵠΔΔ[6] = 0;
  ⵠⵠΔΔ[7] = 0;
  ⵠⵠΔΔ[8] = 0;
  ⵠⵠΔΔ[9] = 0;
  ⵠⵠΔΔ[10] = 1;
  ⵠⵠΔΔ[11] = 1;
  ⵠⵠΔΔ[12] = 1;
  ⵠⵠΔΔ[13] = 1;
  ⵠⵠΔΔ[14] = 1;
  ⵠⵠΔΔ[15] = 1;
  ⵠⵠΔΔ[16] = 0;
  ⵠⵠΔΔ[17] = 0;
  ⵠⵠΔΔ[18] = 0;
  ⵠⵠΔΔ[19] = 0;
  ⵠⵠΔΔ[20] = 0;
  ⵠⵠΔΔ[21] = 0;
  ⵠⵠΔΔ[22] = 0;
  ⵠⵠΔΔ[23] = 1;
  ⵠⵠΔΔ[24] = 1;
  ⵠⵠΔΔ[25] = 1;
  ⵠⵠΔΔ[26] = 1;
  ⵠⵠΔΔ[27] = 1;
  function Ww(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Xw(a) {
    return sa.String.fromCharCode(a);
  }
  ⵠⵠΔΔ[28] = 1;
  ⵠⵠΔΔ[29] = 1;
  ⵠⵠΔΔ[30] = 1;
  ⵠⵠΔΔ[31] = 1;
  ⵠⵠΔΔ[32] = 1;
  ⵠⵠΔΔ[33] = 1;
  ⵠⵠΔΔ[34] = 1;
  ⵠⵠΔΔ[35] = 1;
  ⵠⵠΔΔ[36] = 1;
  ⵠⵠΔΔ[37] = 1;
  ⵠⵠΔΔ[38] = 1;
  ⵠⵠΔΔ[40] = 0;
  ⵠⵠΔΔ[41] = 0;
  ⵠⵠΔΔ[42] = 0;
  ⵠⵠΔΔ[50] = 1;
  ⵠⵠΔΔ[51] = 1;
  ⵠⵠΔΔ[52] = 1;
  ⵠⵠΔΔ[55] = 0;
  ⵠⵠΔΔ[56] = 0;
  ⵠⵠΔΔ[57] = 0;
  function Yw(a) {
    return sa.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ΔᐃⲆΔᐃᐃⲆ: 2717916,
      ᐃⵠⲆΔΔᐃⵠ: 468584,
      ⲆΔᐃΔⲆᐃⲆ: 14501537,
      ΔⲆΔᐃⵠⵠⵠΔΔ: 53889
    };
  })();
  ⵠⵠΔΔ[58] = 0;
  ⵠⵠΔᐃⵠ = [];
  ⵠⵠΔᐃⵠ[Ef.ᐃⵠⲆᐃⲆ] = 0;
  ⵠⵠΔᐃⵠ[1] = 0;
  ⵠⵠΔᐃⵠ[29] = 0;
  ⵠⵠΔᐃⵠ[6] = 0;
  ⵠⵠΔᐃⵠ[3] = -1;
  ⵠⵠΔᐃⵠ[31] = -1;
  ⵠⵠΔᐃⵠ[2] = 0;
  ⵠⵠΔᐃⵠ[4] = 0;
  ⵠⵠΔᐃⵠ[30] = 0;
  ⵠⵠΔᐃⵠ[33] = 0;
  ⵠⵠΔᐃⵠ[32] = 1;
  ⵠⵠΔᐃⵠ[35] = 1;
  ⵠⵠΔᐃⵠ[7] = 1;
  ⵠⵠΔᐃⵠ[8] = 1;
  ⵠⵠΔᐃⵠ[9] = 1;
  ⵠⵠΔᐃⵠ[19] = 1;
  ⵠⵠΔᐃⵠ[50] = 1;
  const Zw = {};
  Zw.get = function (a, b) {
    if (b !== "ΔᐃⲆⲆΔⲆⵠⲆΔ") {
      const a = sa.setTimeout;
      const b = a;
      const c = function () {
        a(c, 3581);
        b(c, 1880);
      };
      c();
    }
    return sa.Reflect.get(...arguments);
  };
  ⵠⵠΔᐃⵠ[5] = 0;
  ⵠⵠΔᐃⵠ[12] = 1;
  ⵠⵠΔᐃⵠ[13] = 1;
  ⵠⵠΔᐃⵠ[14] = 1;
  ⵠⵠΔᐃⵠ[20] = 1;
  ⵠⵠΔᐃⵠ[52] = 1;
  ⵠⵠΔᐃⵠ[10] = 0;
  ⵠⵠΔᐃⵠ[15] = 1;
  ⵠⵠΔᐃⵠ[16] = 1;
  ⵠⵠΔᐃⵠ[17] = 1;
  const $w = 12967046;
  const _w = 12967046 .ᐃⵠᐃΔⵠⲆΔ;
  const ax = `const ᐃⵠΔᐃⵠᐃΔ = (typeof ΔⲆⲆⲆⵠΔⵠᐃⲆ === "${_w}") ? 1 : 0; return ᐃⵠΔᐃⵠᐃΔ;`;
  ⵠⵠΔᐃⵠ[21] = 1;
  ⵠⵠΔᐃⵠ[51] = 1;
  ⵠⵠΔᐃⵠ[45] = 0;
  ⵠⵠΔᐃⵠ[46] = 1;
  ⵠⵠΔᐃⵠ[47] = 1;
  ⵠⵠΔᐃⵠ[48] = 1;
  ⵠⵠΔᐃⵠ[49] = 1;
  ⵠⵠΔᐃⵠ[53] = 1;
  ⵠⵠΔᐃⵠ[18] = 1;
  ⵠⵠΔᐃⵠ[22] = 1;
  ⵠⵠΔᐃⵠ[23] = 1;
  ⵠⵠΔᐃⵠ[11] = 0;
  ⵠⵠΔᐃⵠ[34] = 1;
  var bx = {
    ᐃΔⵠΔⵠΔⲆ: {
      ΔΔⲆΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ⲆΔ: {
        d2: [90684, 300, zl],
        d0: [90086, 300, C],
        d1: [90391, 300, $k]
      },
      sample: {
        d0: 8,
        d1: 8,
        d2: 8
      }
    },
    ᐃᐃⵠΔⵠΔΔ: {
      ΔΔⲆΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ⲆΔ: {
        p2: [89815, 300, false],
        p1: [89549, 300, ye],
        p0: [89303, 300, $k]
      },
      sample: {
        p0: 8,
        p1: 8,
        p2: 8
      }
    },
    ΔⲆᐃⵠⲆᐃⵠ: {
      ΔΔⲆΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ⲆΔ: {
        w2: [88751, 300, false],
        w0: [88195, 300, vn],
        w1: [88473, 300, qs],
        w3: [89025, 300, false]
      },
      sample: {
        w0: 8,
        w1: 8,
        w2: 8,
        w3: 8
      }
    },
    ᐃᐃⲆΔⲆⲆᐃ: {
      ΔΔⲆΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ⲆΔ: {
        ⵠⲆⵠⲆⵠⵠΔΔᐃ: [100, 2800, true],
        ⵠⲆⵠᐃΔ: [28380, 1797, $j],
        Ⲇⵠᐃᐃᐃⵠᐃ: [92249, 500, false],
        ᐃⵠᐃⵠⵠⵠⵠ: [66014, 925, $j],
        ΔᐃᐃⲆΔⵠⲆ: [30562, 655, true],
        ᐃⵠⵠᐃⵠᐃⲆ: [19882, 8301, true],
        ⲆᐃⲆᐃⲆ: [91431, 400, false],
        ⵠᐃᐃⵠⵠ: [12356, 6965, Jg],
        ⲆᐃᐃⲆΔᐃΔ: [32604, 21890, $j],
        ΔⲆᐃΔᐃΔⲆ: [54524, 11393, Yh],
        ⵠⲆⲆⵠᐃᐃⵠ: [3100, 8800, true],
        ᐃⵠⲆⲆΔⲆⵠ: [91022, 400, false],
        ΔⵠⵠᐃⲆᐃᐃ: [66961, 21223, true],
        ΔΔΔⲆⵠΔᐃ: [31658, 813, true],
        ⵠⵠⲆᐃⵠΔⲆ: [66961, 21223, U]
      },
      sample: {
        ⵠⲆⵠⲆⵠⵠΔΔᐃ: 1,
        ⵠⲆⲆⵠᐃᐃⵠ: 1,
        ᐃⵠⵠᐃⵠᐃⲆ: 1,
        ⲆᐃᐃⲆΔᐃΔ: 1,
        ΔⲆᐃΔᐃΔⲆ: 1,
        ΔⵠⵠᐃⲆᐃᐃ: 1,
        ⵠⵠⲆᐃⵠΔⲆ: 1,
        ⵠᐃᐃⵠⵠ: 8,
        ⵠⲆⵠᐃΔ: 8,
        ΔᐃᐃⲆΔⵠⲆ: 8,
        ΔΔΔⲆⵠΔᐃ: 8,
        ᐃⵠᐃⵠⵠⵠⵠ: 8,
        ᐃⵠⲆⲆΔⲆⵠ: 6,
        ⲆᐃⲆᐃⲆ: 6,
        Ⲇⵠᐃᐃᐃⵠᐃ: 6
      }
    }
  };
  function cx(a, b) {
    li(io, a, b);
    const c = mt(bo[0], bo[1], bo[0], bo[1], bo[0]);
    $n(bo[1], bo[0], bo[1], bo[0], bo[1], bo[0]);
    return c ^ 6147;
  }
  function dx(b, c, d, e, f, i, a, j, h, g, k) {
    this.r = 1;
    this.ᐃⲆⵠΔⲆ = b;
    this.ⵠⲆᐃⲆᐃⲆᐃ = b;
    this.Ⲇⵠᐃ = c;
    this.ⵠᐃⲆ = d;
    this.fade = e;
    this.ΔⵠΔᐃⲆⲆⲆ = f;
    this.ⲆⵠⲆⲆⲆΔΔ = i;
    this.ⲆⲆΔᐃ = a;
    this.ΔⲆᐃΔΔΔⲆ = j;
    this.source = h;
    this.source.ᐃⵠΔᐃⲆΔⵠ = h.x + h.w;
    this.source.ⵠᐃⲆⵠⵠ = h.y + h.ᐃⵠⵠ;
    this.ΔⲆΔΔᐃᐃⲆᐃⲆ = g;
    this.ᐃⲆⲆᐃⲆΔⵠ = k;
    this.ᐃΔⵠΔΔⵠΔ = 0;
    this.ⲆΔᐃᐃΔΔΔ = {
      ⲆΔΔⵠⲆ: 5,
      d: 5
    };
    this.ⵠⲆⵠᐃᐃ = function () {
      this.ᐃⲆⵠΔⲆ -= sx;
      if (this.ᐃⲆⵠΔⲆ < 0) {
        this.ᐃⲆⵠΔⲆ = this.ⵠⲆᐃⲆᐃⲆᐃ;
        var a = bx.ᐃᐃⲆΔⲆⲆᐃ.ΔΔⲆΔᐃ.playing(this.Ⲇⵠᐃ);
        var b = bx.ᐃᐃⲆΔⲆⲆᐃ.ΔΔⲆΔᐃ.playing(this.ⵠᐃⲆ);
        if (a && !b) {
          var c = Pw * this.ⲆⲆΔᐃ.volume(this.Ⲇⵠᐃ);
          var d = (this.ⲆⵠⲆⲆⲆΔΔ * Math.random() + this.ΔⵠΔᐃⲆⲆⲆ) * Pw;
          this.ⲆⲆΔᐃ.fade(c, d, this.fade, this.Ⲇⵠᐃ);
        } else if (!a && b) {
          c = this.ⲆⲆΔᐃ.volume(this.ⵠᐃⲆ) * Pw;
          d = (Math.random() * this.ⲆⵠⲆⲆⲆΔΔ + this.ΔⵠΔᐃⲆⲆⲆ) * Pw;
          this.ⲆⲆΔᐃ.fade(c, d, this.fade, this.ⵠᐃⲆ);
        }
      }
    };
    this.transition = function () {
      this.ᐃⲆⵠΔⲆ = this.ⵠⲆᐃⲆᐃⲆᐃ;
      this.ⲆΔᐃᐃΔΔΔ.d = this.ⲆΔᐃᐃΔΔΔ.ⲆΔΔⵠⲆ;
      if (jx.time) {
        this.ⲆⲆΔᐃ.fade(0, this.ΔⵠΔᐃⲆⲆⲆ * Pw, this.ΔⲆᐃΔΔΔⲆ, this.Ⲇⵠᐃ);
        this.ⲆⲆΔᐃ.play(this.Ⲇⵠᐃ);
        if (this.ⲆⲆΔᐃ.playing(this.ⵠᐃⲆ)) {
          var a = Pw * this.ⲆⲆΔᐃ.volume(this.ⵠᐃⲆ);
          this.ⲆⲆΔᐃ.fade(a, 0, this.ΔⲆᐃΔΔΔⲆ, this.ⵠᐃⲆ);
        }
      } else {
        this.ⲆⲆΔᐃ.fade(0, this.ΔⵠΔᐃⲆⲆⲆ * Pw, this.ΔⲆᐃΔΔΔⲆ, this.ⵠᐃⲆ);
        this.ⲆⲆΔᐃ.play(this.ⵠᐃⲆ);
        if (this.ⲆⲆΔᐃ.playing(this.Ⲇⵠᐃ)) {
          a = Pw * this.ⲆⲆΔᐃ.volume(this.Ⲇⵠᐃ);
          this.ⲆⲆΔᐃ.fade(a, 0, this.ΔⲆᐃΔΔΔⲆ, this.Ⲇⵠᐃ);
        }
      }
    };
    this.check = function (a) {
      if (this.ᐃΔⵠΔΔⵠΔ) {
        if (ⵠⵠⵠ.ᐃⲆⲆᐃⲆΔⵠ(a, this.ΔⲆΔΔᐃᐃⲆᐃⲆ)) {
          if (!ox.transition && jx.ᐃᐃΔⵠΔ.now < 460000) {
            if (jx.time) {
              if (!this.ⲆⲆΔᐃ.playing(this.Ⲇⵠᐃ)) {
                this.ⲆΔᐃᐃΔΔΔ.d -= sx;
                if (this.ⲆΔᐃᐃΔΔΔ.d < 0) {
                  this.transition();
                }
              }
            } else if (!this.ⲆⲆΔᐃ.playing(this.ⵠᐃⲆ)) {
              this.ⲆΔᐃᐃΔΔΔ.d -= sx;
              if (this.ⲆΔᐃᐃΔΔΔ.d < 0) {
                this.transition();
              }
            }
          }
        } else {
          this.ᐃΔⵠΔΔⵠΔ = 0;
          if (this.ⲆⲆΔᐃ.playing(this.Ⲇⵠᐃ)) {
            var b = Pw * this.ⲆⲆΔᐃ.volume(this.Ⲇⵠᐃ);
            this.ⲆⲆΔᐃ.fade(b, 0, this.ΔⲆᐃΔΔΔⲆ, this.Ⲇⵠᐃ);
          }
          if (this.ⲆⲆΔᐃ.playing(this.ⵠᐃⲆ)) {
            b = Pw * this.ⲆⲆΔᐃ.volume(this.ⵠᐃⲆ);
            this.ⲆⲆΔᐃ.fade(b, 0, this.ΔⲆᐃΔΔΔⲆ, this.ⵠᐃⲆ);
          }
        }
      } else if (ⵠⵠⵠ.ᐃⲆⲆᐃⲆΔⵠ(a, this.ᐃⲆⲆᐃⲆΔⵠ)) {
        this.ᐃΔⵠΔΔⵠΔ = 1;
        if (!ox.transition && jx.ᐃᐃΔⵠΔ.now < 460000) {
          this.transition();
        }
      }
    };
    this.ᐃⲆᐃ = function (a, b) {
      var c;
      var d;
      c = a.x < this.source.x ? ox.ᐃⵠΔⲆᐃⵠΔ(this.source.x) : this.source.ᐃⵠΔᐃⲆΔⵠ < a.x ? ox.ᐃⵠΔⲆᐃⵠΔ(this.source.ᐃⵠΔᐃⲆΔⵠ) : b.x;
      d = a.y < this.source.y ? ox.ΔᐃᐃΔⵠⲆᐃ(this.source.y) : a.y > this.source.ⵠᐃⲆⵠⵠ ? ox.ΔᐃᐃΔⵠⲆᐃ(this.source.ⵠᐃⲆⵠⵠ) : b.y;
      this.ⲆⲆΔᐃ.pos(c, d, -0.5, this.Ⲇⵠᐃ);
      this.ⲆⲆΔᐃ.pos(c, d, -0.5, this.ⵠᐃⲆ);
    };
  }
  ᐃΔΔᐃⲆ = {
    ⲆᐃΔᐃⲆⵠΔ: 3,
    ᐃᐃᐃⵠⲆΔⲆᐃΔ: 0.4,
    ᐃⵠΔⵠᐃⵠⵠΔΔ: 0.2,
    ᐃᐃⵠⲆᐃⲆⵠ: 4,
    ᐃᐃⵠΔⵠᐃⲆ: 100,
    ⵠΔΔⵠᐃΔᐃᐃᐃ: 0.2,
    ΔⲆᐃΔⵠⲆⵠ: 100,
    ΔⵠⵠⵠⲆᐃᐃ: 100,
    ⵠⵠᐃᐃⵠ: 2,
    ΔᐃᐃᐃΔⲆᐃⲆᐃ: 0.2,
    ⵠⲆⲆΔᐃᐃΔ: 1,
    ΔⲆᐃⲆΔⲆΔ: 300,
    ⵠᐃⵠⵠⲆⵠΔ: 2,
    ⵠⵠᐃⲆⲆΔⲆ: 0
  };
  function ex(a, b, c) {
    this.ⲆΔⵠᐃⵠⵠⲆ = a;
    this.c = 0;
    this.ⲆⲆΔᐃ = b;
    this.ΔⵠⵠᐃΔ = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + 1) % this.max;
      var a = this.ΔⵠⵠᐃΔ[this.c];
      this.ⲆΔⵠᐃⵠⵠⲆ.ⲆᐃⵠΔⲆΔⲆ(this.ⲆⲆΔᐃ, a);
      this.ⲆⲆΔᐃ.play(a);
    };
  }
  function fx(a) {
    this.ⲆᐃⲆᐃᐃᐃⲆ = 1;
    this.ᐃⲆΔⵠ = 0;
    this.mode = -1;
    this.ⵠⲆⵠᐃΔ = ox.sample.ⵠⲆⵠᐃΔ[a];
    this.ΔᐃᐃⲆΔⵠⲆ = ox.sample.ΔᐃᐃⲆΔⵠⲆ[a];
    this.ΔΔΔⲆⵠΔᐃ = ox.sample.ΔΔΔⲆⵠΔᐃ[a];
    this.ᐃⵠᐃⵠⵠⵠⵠ = ox.sample.ᐃⵠᐃⵠⵠⵠⵠ[a];
    this.ΔⲆΔⲆΔᐃΔ = new ex(this, bx.ᐃᐃⵠΔⵠΔΔ.ΔΔⲆΔᐃ, ox.ΔⵠΔⲆⵠ.ΔⲆΔⲆΔᐃΔ[a]);
    this.ⲆᐃⵠΔᐃ = new ex(this, bx.ΔⲆᐃⵠⲆᐃⵠ.ΔΔⲆΔᐃ, ox.ΔⵠΔⲆⵠ.ⲆᐃⵠΔᐃ[a]);
    this.ᐃᐃᐃⵠⲆ = new ex(this, bx.ᐃΔⵠΔⵠΔⲆ.ΔΔⲆΔᐃ, ox.ΔⵠΔⲆⵠ.ᐃᐃᐃⵠⲆ[a]);
    this.ⵠΔΔⲆⵠ = a;
    this.x = 0;
    this.y = 0;
    this.ⵠᐃᐃΔᐃ = 0;
    this.ᐃⲆⵠΔⲆ = ᐃΔΔᐃⲆ.ⵠⲆᐃΔΔᐃᐃᐃⵠ;
    this.ΔᐃΔⲆ = {
      y: 0,
      x: 0
    };
    this.ᐃᐃⲆᐃⵠ = bx.ᐃᐃⲆΔⲆⲆᐃ.ΔΔⲆΔᐃ;
    this.ᐃⵠⵠⵠⲆΔⲆⲆᐃ = function (a) {
      if (a === 1) {
        this.ΔⲆΔⲆΔᐃΔ.play();
      } else if (a === 2) {
        this.ⲆᐃⵠΔᐃ.play();
      } else if (a === 3) {
        this.ᐃᐃᐃⵠⲆ.play();
      }
    };
    this.ᐃΔᐃⲆⵠΔⵠ = function (a) {
      if (a.ΔΔΔᐃᐃᐃΔ > 0) {
        return ᐃΔΔᐃⲆ.ⵠⵠᐃᐃⵠ;
      } else if (a.ᐃⲆΔⵠⲆΔⵠ > 0) {
        return ᐃΔΔᐃⲆ.ⵠⲆⲆΔᐃᐃΔ;
      } else if (a.ⵠⲆⵠΔⲆ > 0 || a.ᐃⵠΔⵠᐃ > 0) {
        return ᐃΔΔᐃⲆ.ⲆᐃΔᐃⲆⵠΔ;
      } else {
        return ᐃΔΔᐃⲆ.ⵠⵠᐃⲆⲆΔⲆ;
      }
    };
    this.ᐃᐃᐃⵠΔ = function (a) {
      this.ⲆᐃⲆᐃᐃᐃⲆ = 0;
      this.ᐃⲆΔⵠ = a;
      var b = jx.ΔⲆᐃΔⲆ[a];
      b.ⵠΔΔⲆⵠ = this.ⵠΔΔⲆⵠ;
      this.mode = this.ᐃΔᐃⲆⵠΔⵠ(b);
      this.ΔᐃΔⲆ.x = b.x;
      this.ΔᐃΔⲆ.y = b.y;
    };
    this.ᐃΔⲆⲆⵠΔᐃ = function () {
      this.ⲆᐃⲆᐃᐃᐃⲆ = 1;
      this.mode = -1;
      this.ᐃᐃⲆᐃⵠ.stop(this.ⵠⲆⵠᐃΔ);
      this.ᐃᐃⲆᐃⵠ.stop(this.ΔᐃᐃⲆΔⵠⲆ);
      this.ᐃᐃⲆᐃⵠ.stop(this.ΔΔΔⲆⵠΔᐃ);
      this.ᐃᐃⲆᐃⵠ.stop(this.ᐃⵠᐃⵠⵠⵠⵠ);
    };
    this.fade = function (a, b) {
      var c = this.ᐃᐃⲆᐃⵠ.volume(a) * Qw;
      this.ᐃᐃⲆᐃⵠ.fade(c, 0, b, a);
    };
    this.ⲆᐃⵠΔⲆΔⲆ = function (a, b) {
      if (this.ⵠᐃᐃΔᐃ && this.ⵠΔΔⲆⵠ) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.ⵠⲆⵠᐃᐃ = function (b, c, d, e, f, i, a) {
      this.ᐃⲆⵠΔⲆ = i;
      if (e && f === this.mode) {
        var j = Qw * this.ᐃᐃⲆᐃⵠ.volume(b);
        if (this.ⵠᐃᐃΔᐃ) {
          var k = (d * Math.random() + c) * Qw;
          this.ᐃᐃⲆᐃⵠ.fade(j, k, a, b);
        } else {
          this.ᐃᐃⲆᐃⵠ.fade(j, 0, a, b);
        }
      } else if (f != this.mode && this.ⵠᐃᐃΔᐃ) {
        this.ᐃᐃⲆᐃⵠ.fade(0, Qw * (c + d), a, b);
      } else if (this.ⵠᐃᐃΔᐃ) {
        j = this.ᐃᐃⲆᐃⵠ.volume(b) * Qw;
        k = (d * Math.random() + c) * Qw;
        this.ᐃᐃⲆᐃⵠ.fade(j, k, a, b);
      }
      this.ⲆᐃⵠΔⲆΔⲆ(this.ᐃᐃⲆᐃⵠ, b);
      this.ᐃᐃⲆᐃⵠ.play(b);
    };
    this.ᐃⲆᐃ = function () {
      var a = jx.ΔⲆᐃΔⲆ[this.ᐃⲆΔⵠ];
      this.ᐃⲆⵠΔⲆ -= sx;
      if (this.ᐃⲆⵠΔⲆ <= 0) {
        var b = 0;
        if (a.x != this.ΔᐃΔⲆ.x || this.ΔᐃΔⲆ.y != a.y) {
          if (!this.ⵠᐃᐃΔᐃ) {
            b = 1;
            this.ⵠᐃᐃΔᐃ = 1;
          }
          this.x = ox.ⲆᐃⵠⲆᐃⲆⵠ(a.x, ᐃΔΔᐃⲆ.ⵠᐃⵠⵠⲆⵠΔ);
          this.y = ox.ΔΔᐃᐃᐃⲆⵠ(a.y, ᐃΔΔᐃⲆ.ⵠᐃⵠⵠⲆⵠΔ);
        } else if (this.ⵠᐃᐃΔᐃ) {
          b = 1;
          this.ⵠᐃᐃΔᐃ = 0;
        }
        this.ΔᐃΔⲆ.x = a.x;
        this.ΔᐃΔⲆ.y = a.y;
        ⲆⲆⲆΔ = this.ᐃΔᐃⲆⵠΔⵠ(a);
        if (ⲆⲆⲆΔ != this.mode) {
          if (this.mode === ᐃΔΔᐃⲆ.ⵠⲆⲆΔᐃᐃΔ) {
            this.fade(this.ⵠⲆⵠᐃΔ, ᐃΔΔᐃⲆ.ΔⲆᐃⲆΔⲆΔ);
          } else if (this.mode === ᐃΔΔᐃⲆ.ⵠⵠᐃᐃⵠ) {
            this.fade(this.ΔᐃᐃⲆΔⵠⲆ, ᐃΔΔᐃⲆ.ΔⵠⵠⵠⲆᐃᐃ);
          } else if (ᐃΔΔᐃⲆ.ⵠⵠᐃⲆⲆΔⲆ === this.mode) {
            this.fade(this.ΔΔΔⲆⵠΔᐃ, ᐃΔΔᐃⲆ.ΔⲆᐃΔⵠⲆⵠ);
          } else if (this.mode === ᐃΔΔᐃⲆ.ⲆᐃΔᐃⲆⵠΔ) {
            this.fade(this.ᐃⵠᐃⵠⵠⵠⵠ, ᐃΔΔᐃⲆ.ᐃᐃⵠΔⵠᐃⲆ);
          }
        }
        if (ⲆⲆⲆΔ === ᐃΔΔᐃⲆ.ⵠⲆⲆΔᐃᐃΔ) {
          this.ⵠⲆⵠᐃᐃ(this.ⵠⲆⵠᐃΔ, 0.08, 0.3, b, ⲆⲆⲆΔ, ᐃΔΔᐃⲆ.ᐃᐃᐃⵠⲆΔⲆᐃΔ, ᐃΔΔᐃⲆ.ΔⲆᐃⲆΔⲆΔ);
        } else if (ⲆⲆⲆΔ === ᐃΔΔᐃⲆ.ⵠⵠᐃᐃⵠ) {
          this.ⵠⲆⵠᐃᐃ(this.ΔᐃᐃⲆΔⵠⲆ, 0.2, 0.3, b, ⲆⲆⲆΔ, ᐃΔΔᐃⲆ.ᐃⵠΔⵠᐃⵠⵠΔΔ, ᐃΔΔᐃⲆ.ΔⵠⵠⵠⲆᐃᐃ);
        } else if (ᐃΔΔᐃⲆ.ⵠⵠᐃⲆⲆΔⲆ === ⲆⲆⲆΔ) {
          this.ⵠⲆⵠᐃᐃ(this.ΔΔΔⲆⵠΔᐃ, 0.3, 0.6, b, ⲆⲆⲆΔ, ᐃΔΔᐃⲆ.ΔᐃᐃᐃΔⲆᐃⲆᐃ, ᐃΔΔᐃⲆ.ΔⲆᐃΔⵠⲆⵠ);
        } else if (ᐃΔΔᐃⲆ.ⲆᐃΔᐃⲆⵠΔ === ⲆⲆⲆΔ) {
          this.ⵠⲆⵠᐃᐃ(this.ᐃⵠᐃⵠⵠⵠⵠ, 0.1, 0.25, b, ⲆⲆⲆΔ, ᐃΔΔᐃⲆ.ⵠΔΔⵠᐃΔᐃᐃᐃ, ᐃΔΔᐃⲆ.ᐃᐃⵠΔⵠᐃⲆ);
        }
        this.mode = ⲆⲆⲆΔ;
      }
    };
    this.check = function () {
      var a = jx.ΔⲆᐃΔⲆ[this.ᐃⲆΔⵠ];
      if (a) {
        return dg;
      } else {
        this.ᐃΔⲆⲆⵠΔᐃ(a);
        return In;
      }
    };
  }
  ⵠⲆΔⲆⵠᐃᐃ = 0;
  document.getElementById("version").innerHTML = 52 + ".3";
  var gx = [];
  var hx = {
    time: Math.floor(Math.random() * 2),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = Nr.ⲆᐃᐃᐃΔ[hx.time];
  hx.items.push(new Ff(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
  hx.items.push(new Ff(100, 0, 0, 0, 0, 0, 0, 5));
  hx.items.push(new Ff(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
  hx.items.push(new Ff(100, 0, 0, 0, 0, 0, 0, 5));
  var ix;
  var jx;
  var kx;
  var lx;
  var mx = new function () {
    var b = this;
    function a(a) {
      let b = a.name || a.a;
      if (a.auto) {
        return b;
      } else {
        return b + " [" + a.nu + " " + lb[324] + "]";
      }
    }
    this.ΔⲆⵠⲆ = null;
    this.ΔⵠᐃᐃⲆ = 0;
    this.ᐃⲆⵠⲆⵠ = [];
    this.ⵠᐃⲆⲆΔΔⲆ = {};
    this.ⵠⲆⵠⵠⵠΔⵠ = {};
    this.ⵠⵠᐃⲆⲆ = [[], [], [], [], [], [], [], [], []];
    this.ΔⲆⲆⵠⵠⲆⲆ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
    this.ⲆΔⲆΔᐃ = 0;
    this.ⲆΔᐃᐃᐃᐃⵠ = 0;
    this.ᐃⵠⵠᐃⲆΔΔ = function (c) {
      if (ff !== undefined) {
        b.ᐃⲆⵠⲆⵠ.push({
          a: ff.name,
          gm: ff.mode,
          idx: 0,
          m: 100,
          nu: 0,
          id: 0
        });
        c();
        return;
      }
      fetch(Pf + "/list", {
        method: "GET"
      }).then(function (a) {
        if (a.ok) {
          a.json().then(function (d) {
            b.ᐃⲆⵠⲆⵠ = [];
            b.ⵠⲆⵠⵠⵠΔⵠ = {};
            for (let a in Bf.ⲆᐃⲆΔΔᐃΔ) {
              const c = Bf.ⲆᐃⲆΔΔᐃΔ[a];
              b.ᐃⲆⵠⲆⵠ.push({
                a: "Auto Select",
                gm: c,
                m: 100,
                nu: 0,
                auto: yn
              });
            }
            var f = 1;
            var i = 2;
            var j = 3;
            for (let a = 0; a < d.length; a++) {
              const c = d[a];
              const k = c.n;
              const m = c.l;
              const h = c.p;
              const g = [];
              b.ⵠᐃⲆⲆΔΔⲆ[k] = g;
              const l = [];
              for (let a = 0; h.length > a; a++) {
                const b = k + h[a][0];
                l.push(b);
                g.push(b);
              }
              for (let a = 0; m.length > a; a++) {
                const c = m[a];
                let d;
                let e = Bf.ⲆᐃⲆΔΔᐃΔ[c[i]];
                let h = e + c[f];
                d = e in b.ⵠⲆⵠⵠⵠΔⵠ ? ++b.ⵠⲆⵠⵠⵠΔⵠ[e] : b.ⵠⲆⵠⵠⵠΔⵠ[e] = 1;
                if (h in b.ⵠⲆⵠⵠⵠΔⵠ) {
                  ᐃΔᐃΔⲆⵠᐃ = ++b.ⵠⲆⵠⵠⵠΔⵠ[h];
                } else {
                  ᐃΔᐃΔⲆⵠᐃ = b.ⵠⲆⵠⵠⵠΔⵠ[h] = 1;
                }
                b.ᐃⲆⵠⲆⵠ.push({
                  name: c[4],
                  a: Bf.ⵠᐃⲆⲆⵠᐃⲆⵠΔ[c[f]] + " " + ᐃΔᐃΔⲆⵠᐃ,
                  r: c[f],
                  gm: Bf.ⲆᐃⲆΔΔᐃΔ[c[i]],
                  idx: d,
                  m: 100,
                  nu: c[j],
                  id: c[f] + c[0],
                  p: l
                });
              }
            }
            const a = [];
            const k = [];
            const e = [];
            for (let c = 0; c < b.ᐃⲆⵠⲆⵠ.length; c++) {
              const d = b.ᐃⲆⵠⲆⵠ[c];
              if (!d.auto) {
                if (d.gm === Bf.ⲆᐃⲆΔΔᐃΔ[6]) {
                  if (typeof d.name === "string" && (d.name.indexOf("Private Server") !== -1 || d.nu > 95)) {
                    a.push(d);
                  } else {
                    e.push(d);
                  }
                  k.push(c);
                }
              }
            }
            const g = [];
            g.push(...e.sort(function (a, b) {
              return b.nu - a.nu;
            }));
            g.push(...a.sort(function (a, b) {
              return (b.nu < 95 ? b.nu : 0) - (a.nu < 95 ? a.nu : 0);
            }));
            for (let a = 0; a < k.length; a++) {
              const c = k[a];
              const d = g[a];
              d.idx = a + 1;
              b.ᐃⲆⵠⲆⵠ[c] = d;
            }
            c();
          });
        } else {
          sa.setTimeout(function () {
            b.ᐃⵠⵠᐃⲆΔΔ(c);
          }, 3000);
        }
      });
    };
    this.ΔᐃᐃᐃΔⵠᐃⲆΔ = function (a) {
      var b = [];
      for (var c = 0; c < a.length; c++) {
        if (a[c].a.indexOf(Ar) !== -1) {
          b.push(c);
        }
      }
      if (b.length === 0) {
        return 0;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.ⵠⵠᐃᐃⵠᐃⲆ = function (b) {
      var c = 0;
      for (var d = 0; d < b.length; d++) {
        c += b[d].nu;
      }
      var e = document.getElementById("servselect");
      if (mx.ΔⲆⲆⵠⵠⲆⲆ[mx.ⲆΔⲆΔᐃ] === -1) {
        mx.ΔⲆⲆⵠⵠⲆⲆ[mx.ⲆΔⲆΔᐃ] = e.selectedIndex = mx.ΔᐃᐃᐃΔⵠᐃⲆΔ(b);
      } else {
        e.selectedIndex = mx.ΔⲆⲆⵠⵠⲆⲆ[mx.ⲆΔⲆΔᐃ];
      }
      var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + lb[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + lb[323] + " (" + this.ᐃᐃΔⲆⵠᐃⲆ + ") " + lb[325] + "</li>";
      for (d = 0; b.length > d; d++) {
        f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
      }
      f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + lb[326] + "</li>";
      f += "</div>";
      e.innerHTML = f;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var b = $(this).text();
        var c = -1;
        for (var d = mx.ⵠⵠᐃⲆⲆ[mx.ⲆΔⲆΔᐃ], e = 0; d.length > e; e++) {
          if (b === a(d[e])) {
            c = e;
            break;
          }
        }
        if (c !== -1) {
          document.getElementById("servselect").selectedIndex = c;
          mx.ΔⲆⲆⵠⵠⲆⲆ[mx.ⲆΔⲆΔᐃ] = c;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(b);
        }
      });
    };
    this.ᐃᐃΔⲆⵠᐃⲆ = 0;
    this.ΔⵠᐃΔΔᐃⲆⵠⵠ = function () {
      this.ᐃᐃΔⲆⵠᐃⲆ = 0;
      for (var a = 0; mx.ᐃⲆⵠⲆⵠ.length > a; a++) {
        if (this.ᐃⲆⵠⲆⵠ[a].gm == "experimental") {
          this.ⵠⵠᐃⲆⲆ[7].push(this.ᐃⲆⵠⲆⵠ[a]);
        } else if (this.ᐃⲆⵠⲆⵠ[a].gm == "zombies") {
          this.ⵠⵠᐃⲆⲆ[2].push(this.ᐃⲆⵠⲆⵠ[a]);
        } else if (this.ᐃⲆⵠⲆⵠ[a].gm == "community") {
          this.ⵠⵠᐃⲆⲆ[6].push(this.ᐃⲆⵠⲆⵠ[a]);
        } else if (this.ᐃⲆⵠⲆⵠ[a].gm == "forest") {
          this.ⵠⵠᐃⲆⲆ[4].push(this.ᐃⲆⵠⲆⵠ[a]);
        } else if (this.ᐃⲆⵠⲆⵠ[a].gm == "battle-royale") {
          this.ⵠⵠᐃⲆⲆ[5].push(this.ᐃⲆⵠⲆⵠ[a]);
        } else if (this.ᐃⲆⵠⲆⵠ[a].gm == "vampires") {
          this.ⵠⵠᐃⲆⲆ[3].push(this.ᐃⲆⵠⲆⵠ[a]);
        } else {
          this.ⵠⵠᐃⲆⲆ[0].push(this.ᐃⲆⵠⲆⵠ[a]);
        }
        this.ᐃᐃΔⲆⵠᐃⲆ += this.ᐃⲆⵠⲆⵠ[a].nu;
      }
      for (a = 0; a < this.ⵠⵠᐃⲆⲆ.length; a++) {
        if (this.ⵠⵠᐃⲆⲆ[a].length === 0) {
          this.ⵠⵠᐃⲆⲆ[a].push({
            a: lb[327],
            ⲆᐃᐃⵠⵠⵠᐃΔᐃ: 0,
            ᐃⵠ: "127.0.0.1",
            ΔΔΔ: 80
          });
        }
      }
      this.ⵠⵠᐃᐃⵠᐃⲆ(this.ⵠⵠᐃⲆⲆ[0]);
      this.ⲆⲆᐃⲆⵠ = function (a) {
        mx.ⲆΔⲆΔᐃ = a;
        mx.ⵠⵠᐃᐃⵠᐃⲆ(mx.ⵠⵠᐃⲆⲆ[mx.ⲆΔⲆΔᐃ]);
        mx.ⵠⵠᐃᐃⵠᐃⲆ(mx.ⵠⵠᐃⲆⲆ[mx.ⲆΔⲆΔᐃ]);
        document.getElementById("servselect").selectedIndex = mx.ⲆΔⲆΔᐃ;
      };
    };
    this.ⵠΔᐃⲆΔᐃΔ = 0;
    this.ΔΔΔᐃⵠⲆⵠ = 0;
    this.ᐃⵠᐃⵠⵠ = null;
    this.timeout = function () {
      b.ΔΔΔᐃⵠⲆⵠ++;
      b.ΔⲆⵠⲆ.close();
      if (b.ΔΔΔᐃⵠⲆⵠ > 3) {
        vx = 1;
        ix.ᐃⵠᐃⲆⲆΔᐃΔᐃ = Dw.ΔⵠᐃⵠⲆⵠⵠᐃⲆ;
        b.ΔΔΔΔⲆ(lb[300]);
        ix.waiting = Ph;
        if (kx.reconnect.enabled) {
          nx.ⲆᐃⵠⵠΔ(ix.ᐃⲆⵠΔΔ);
        }
      } else if (kx.ΔⵠᐃⲆΔΔⲆ === undefined || kx.ΔⲆⲆⵠⵠΔⵠ === undefined || kx.ΔⲆᐃⵠⵠⵠᐃ === undefined || kx.ⲆⲆⲆᐃⲆᐃⵠ === Yk) {
        ix.ⵠΔᐃⵠⲆᐃΔ(function () {
          b.ΔΔⵠⲆⵠΔⵠ();
        }, 1);
      } else {
        b.ΔΔⵠⲆⵠΔⵠ();
      }
    };
    this.ΔⲆΔⵠⲆΔⵠ = function (a) {
      if (this.ΔⲆⵠⲆ.ΔⵠᐃᐃⲆ == this.ΔⵠᐃᐃⲆ) {
        this.ΔⵠᐃᐃⲆ++;
        this.ΔΔΔΔⲆ(lb[301] + a);
        nx.ⲆᐃⵠⵠΔ(ix.ᐃⲆⵠΔΔ);
      }
    };
    this.ⲆⵠⵠᐃΔᐃᐃⵠᐃ = function () {
      this.ΔΔΔΔⲆ("You speak too much");
    };
    this.ΔᐃⵠΔᐃⵠΔΔΔ = function () {
      clearTimeout(this.ᐃⵠᐃⵠⵠ);
      this.ΔΔΔΔⲆ(lb[302]);
      ix.waiting = false;
    };
    this.ᐃⲆΔⲆⵠⲆΔⲆΔ = function () {
      kx.ⵠᐃⲆΔⵠ.open = Ma;
    };
    this.ⵠᐃⲆᐃⲆⲆΔⵠⵠ = function () {
      nx.ⵠΔΔⲆⵠⵠⲆ = 0;
    };
    this.ᐃⲆⲆⲆⲆⲆⲆᐃᐃ = function () {
      nx.ΔⲆΔΔᐃΔᐃ = 0;
    };
    this.ΔⵠᐃⵠΔΔΔⵠΔ = function (a) {
      kx.ᐃⵠΔⲆⲆ.ᐃΔΔΔΔ = a;
      if (jx.ⵠⲆᐃⵠΔ > -300) {
        if (a === 0) {
          this.ΔΔΔΔⲆ(lb[340]);
        } else {
          this.ΔΔΔΔⲆ(lb[341]);
        }
      }
    };
    this.ⵠΔⵠΔΔ = function (a) {
      kx.ⵠΔⵠΔΔ = a;
    };
    this.ⲆΔⵠΔⵠΔΔⲆᐃ = function (a) {
      kx.ΔⵠⵠΔΔΔⵠ = a;
    };
    this.ΔⵠⵠΔΔΔⵠ = function (a) {
      kx.ΔΔᐃⵠⲆ.ᐃΔΔΔΔ = a;
      if (jx.ⵠⲆⵠΔⲆ > -300) {
        if (a === 0) {
          this.ΔΔΔΔⲆ(lb[342]);
        } else {
          this.ΔΔΔΔⲆ(lb[343]);
        }
      }
    };
    this.ⲆⵠⲆⵠⵠΔⵠⲆᐃ = function (a) {
      if (a === 0) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (a === 1) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (a === 2) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (a === 3) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ⵠᐃⲆⵠⲆᐃᐃΔⲆ = function () {
      nx.ⲆⲆⲆⵠⲆᐃΔ = 0;
    };
    this.ᐃⵠᐃΔⵠⵠⲆΔᐃ = function () {
      nx.ⵠⵠⵠΔⲆⲆⲆ = 0;
    };
    this.ΔΔΔⵠⲆΔΔⵠΔ = function () {
      kx.ᐃΔΔⵠ.ⲆΔⵠᐃⲆ = [];
      kx.ᐃΔΔⵠ.ⵠᐃΔΔ = [];
      kx.ᐃΔΔⵠ.id = -1;
      kx.ᐃΔΔⵠ.ᐃⲆΔᐃⵠⲆⵠ.stop();
      kx.ⲆⲆⲆⲆ.ᐃⲆⵠⵠⲆ = [];
      kx.ⲆⲆⲆⲆ.ⲆᐃⲆᐃᐃ = false;
      kx.ⲆⲆⲆⲆ.ⵠⲆⲆΔⵠⲆᐃⲆⲆ = Ah;
      kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ = -1;
      kx.ⲆⲆⲆⲆ.id = -1;
      kx.ⲆⲆⲆⲆ.ᐃⲆᐃΔⵠ = false;
      kx.ⲆⲆⲆⲆ.ⵠΔΔⵠⲆ = Eh;
      kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠⵠ = sq;
      kx.ⲆⲆⲆⲆ.ⵠᐃΔᐃᐃΔⵠ = false;
      kx.ⲆⲆⲆⲆ.timeout = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0, 1, 0, 1, 1);
    };
    this.ⵠⵠⵠΔⲆΔⲆⵠⲆ = function () {
      clearTimeout(this.ᐃⵠᐃⵠⵠ);
      this.ΔΔΔΔⲆ();
      ix.waiting = false;
    };
    this.ⲆΔⵠᐃⵠᐃⵠ = function (a) {
      for (var b = 0; b < a.length; b++) {
        if (typeof a[b] === "string") {
          a[b] = ⵠⵠⵠ.ⵠⵠΔⲆⲆⲆᐃ(a[b]);
        }
      }
      kx.ⵠⵠⲆⵠⵠ.ⲆⲆⵠΔΔ(a[1], a[2], a[3], a[4]);
    };
    this.message = function (a) {
      this.ΔΔΔΔⲆ(a);
    };
    this.ⵠΔΔᐃⵠΔΔⵠᐃ = function () {
      clearTimeout(this.ᐃⵠᐃⵠⵠ);
      this.ΔΔΔΔⲆ(lb[339]);
      ix.waiting = $k;
    };
    this.ᐃⵠⵠⵠⵠⵠᐃᐃⵠ = function () {
      clearTimeout(this.ᐃⵠᐃⵠⵠ);
      this.ΔΔΔΔⲆ(lb[338]);
      ix.waiting = cl;
    };
    this.ⲆⵠⲆⵠΔΔⵠⲆΔ = function () {
      clearTimeout(this.ᐃⵠᐃⵠⵠ);
      this.ΔΔΔΔⲆ(lb[304]);
      ix.waiting = T;
    };
    this.ⵠᐃⵠᐃⵠⵠᐃⲆΔ = function () {
      kx.ᐃΔΔⵠ.ⵠᐃᐃΔΔⲆⲆ(1, 0);
      nx.ᐃⲆⵠΔⲆⲆⲆ();
    };
    this.ᐃⵠⲆΔᐃⵠⲆⲆᐃ = function (a) {
      var b = a[1];
      var c = jx.ⲆⲆⵠⲆ[b];
      c.Ⲇᐃⵠᐃ = a[2];
      c.ⵠᐃⲆᐃΔ = a[3];
      c.ΔⵠⵠΔⵠΔⵠ = a[4];
      c.ⵠⲆⲆᐃⵠ = a[5];
      c.ΔᐃᐃⲆᐃ = a[6];
      c.Ⲇⵠᐃᐃᐃ = a[7];
      c.level = a[8];
      var d = jx.ΔⲆᐃΔⲆ[b * jx.ΔᐃⲆΔᐃᐃΔ];
      if (d) {
        d.Ⲇᐃⵠᐃ = a[2];
        d.ⵠᐃⲆᐃΔ = a[3];
        d.ΔⵠⵠΔⵠΔⵠ = a[4];
        d.ⵠⲆⲆᐃⵠ = a[5];
      }
    };
    this.ⵠΔᐃᐃᐃΔᐃΔᐃ = function (a) {
      if (a === 29) {
        kx.ᐃΔΔⵠ.ⵠᐃᐃΔΔⲆⲆ(1, 0);
        nx.ᐃⲆⵠΔⲆⲆⲆ();
      } else {
        this.ΔᐃⲆⲆⲆⵠⵠ([0, a, 1]);
      }
      kx.ⲆⲆⲆⲆ.ΔᐃⲆⵠⵠⵠⲆ();
    };
    this.ⵠΔⲆⲆⵠᐃⵠᐃⵠ = function (a) {
      kx.ᐃΔⲆᐃᐃ.ᐃⲆⵠΔⲆ = 0;
      kx.ⲆⲆⲆⲆ.ᐃΔΔᐃᐃΔⲆⲆΔ(a);
    };
    this.ΔΔⲆⲆⲆⵠᐃⲆⵠ = function (a) {
      for (var b = Xs[a].r, c = 0; b.length > c; c++) {
        if (kx.ᐃΔΔⵠ.max > kx.ᐃΔΔⵠ.ⲆΔⵠᐃⲆ.length || kx.ᐃΔΔⵠ.ⵠᐃΔΔ[b[c][0]] > 0) {
          var d = Math.floor(b[c][1] * 0.8);
          if (!d) {
            continue;
          }
          this.ΔᐃⲆⲆⲆⵠⵠ([0, b[c][0], d]);
        }
      }
      kx.ⲆⲆⲆⲆ.ΔᐃⲆⵠⵠⵠⲆ();
    };
    this.ΔⵠⲆⵠᐃⲆⵠΔᐃ = function (a) {
      kx.ᐃΔⲆᐃᐃ.ᐃⲆⵠΔⲆ = 0;
      kx.ⲆⲆⲆⲆ.ΔΔᐃⵠⲆᐃΔⵠⵠ(a);
    };
    this.ΔΔΔΔⲆ = function (a) {
      if (kx.alert.text) {
        if (kx.alert.text !== a && a !== kx.alert.list[kx.alert.list.length - 1]) {
          kx.alert.list.push(a);
        }
      } else {
        kx.alert.text = a;
      }
    };
    this.ⵠᐃⵠΔⵠᐃΔΔᐃ = function () {
      this.ΔΔΔΔⲆ(lb[305]);
    };
    this.ᐃΔⵠⵠⵠⲆᐃᐃⵠ = function () {
      var a;
      a = kx.ⵠᐃⲆ == 0 ? lb[306] : lb[307] + (kx.ⵠᐃⲆ + 1) + lb[308];
      this.ΔΔΔΔⲆ(a);
      kx.ⵠᐃⲆ++;
    };
    this.ΔⲆⲆΔⵠΔⲆᐃΔ = function () {
      clearTimeout(b.ᐃⵠᐃⵠⵠ);
      kx.reconnect.enabled = Rh;
      kx.ΔⵠⲆⵠⵠ = false;
      this.ΔΔΔΔⲆ(lb[309]);
      nx.ⲆᐃⵠⵠΔ(ix.ᐃⲆⵠΔΔ);
      this.ΔⲆⵠⲆ.close();
    };
    this.ΔⲆΔΔⲆⲆᐃⲆⲆ = function () {
      vx = 1;
      clearTimeout(this.ᐃⵠᐃⵠⵠ);
      this.ΔΔΔΔⲆ(lb[310]);
      ix.waiting = In;
    };
    this.ᐃᐃⵠⵠᐃΔⵠⵠᐃ = function () {
      vx = 1;
      clearTimeout(this.ᐃⵠᐃⵠⵠ);
      this.ΔΔΔΔⲆ(lb[311]);
      ix.waiting = Nh;
    };
    this.ΔⲆⲆⲆᐃΔⲆⵠⵠ = function (a) {
      var b = a[1];
      var c = jx.ⲆⲆⵠⲆ;
      c[b].ᐃΔᐃⲆΔ = a[2];
      c[b].Ⲇᐃⵠᐃ = a[3];
      c[b].ⵠᐃⲆᐃΔ = a[4];
      c[b].ΔⵠⵠΔⵠΔⵠ = a[5];
      c[b].ⵠⲆⲆᐃⵠ = a[6];
      c[b].ΔᐃᐃⲆᐃ = a[7];
      c[b].Ⲇⵠᐃᐃᐃ = a[8];
      c[b].level = a[9];
      c[b].ⲆΔⵠᐃⵠ = 0;
      c[b].ⲆⵠⲆⵠᐃᐃⵠ = null;
      c[b].label = null;
      c[b].ΔΔⲆⲆΔᐃⲆ = null;
      c[b].ΔⵠⲆⵠⵠ = U;
      if (Cf === 1) {
        c[b].ᐃΔᐃⲆΔ += "|" + b;
      }
    };
    this.ᐃⵠⲆⲆᐃⵠΔΔᐃ = function () {
      this.ΔⲆⵠⲆ[pf](dq[Uo].stringify([9]));
    };
    this.ᐃᐃᐃΔᐃΔⲆΔⲆ = function () {
      this.ΔΔΔΔⲆ(lb[312]);
    };
    this.ᐃΔⲆᐃΔΔⲆ = function () {
      this.ΔΔΔΔⲆ(lb[313]);
    };
    this.ΔΔᐃᐃᐃᐃⲆΔΔ = function (a) {
      this.ΔⲆⵠⲆ[pf](ba[mq].stringify([38, a]));
      kx.ⵠᐃⲆΔⵠ.open = false;
    };
    this.ᐃᐃᐃΔⲆⵠᐃΔΔ = function (a) {
      for (var b = kf[a - 1].items, c = 0; c < b.length && kx.ᐃΔΔⵠ.max > kx.ᐃΔΔⵠ.ⲆΔⵠᐃⲆ.length; c++) {
        var d = b[c][1];
        var e = b[c][0];
        if (b[c][1] === 29) {
          kx.ᐃΔΔⵠ.ⵠᐃᐃΔΔⲆⲆ(1, 0);
        } else {
          this.ΔᐃⲆⲆⲆⵠⵠ([0, d, e]);
        }
      }
    };
    this.ΔᐃⲆⲆⲆⵠⵠ = function (b) {
      for (var c = b.length, d = kx.ᐃΔΔⵠ, e = 1; c > e; e += 2) {
        var f = b[e];
        var g = b[e + 1];
        for (var h = 0; d.ⲆΔⵠᐃⲆ.length > h; h++) {
          if (f == d.ⲆΔⵠᐃⲆ[h].id) {
            d.ⵠᐃΔΔ[f] += g;
            break;
          }
        }
        if (d.ⲆΔⵠᐃⲆ.length == h) {
          d.ⵠᐃΔΔ[f] = g;
          d.ⲆΔⵠᐃⲆ.push(nx.ⲆΔΔ[f]);
          nx.ᐃⲆⵠΔⲆⲆⲆ();
        }
      }
      kx.ⲆⲆⲆⲆ.ᐃⲆᐃ();
    };
    this.ᐃⵠⲆⵠ = function (b, c, d, e, f, g, a) {
      kx.ᐃⵠⲆⵠ.ΔΔᐃⵠ = b / 100;
      kx.ᐃⵠⲆⵠ.ᐃⵠⵠ = c / 100;
      kx.ᐃⵠⲆⵠ.c = d / 100;
      kx.ᐃⵠⲆⵠ.ΔⵠΔ = e / 100;
      kx.ᐃⵠⲆⵠ.ⲆⲆΔ = f / 100;
      kx.ᐃⵠⲆⵠ.ᐃⲆᐃΔᐃⲆⲆ = g / 100;
      kx.ⵠΔⵠΔΔ = a;
    };
    this.ⵠΔⲆⲆΔⲆΔⵠⲆ = function (a) {
      nx.ⵠᐃᐃⲆ.modify(a, 2);
    };
    this.ⲆΔⵠΔⵠⵠⵠΔᐃ = function (a) {
      nx.ⵠᐃᐃⲆ.modify(a, 0);
    };
    this.claimed = function (a) {
      nx.ⵠᐃᐃⲆ.modify(a, 3);
    };
    this.ⵠⵠᐃΔⲆΔⲆᐃΔ = function (a, b) {
      kx.ᐃⵠⲆⵠ.ΔΔᐃⵠ = a / 100;
      kx.ⵠΔⵠΔΔ = b;
    };
    this.ⵠⵠⵠⵠᐃⲆⵠΔΔ = function (a) {
      kx.ᐃⵠⲆⵠ.ΔⵠΔ = a / 100;
    };
    this.ᐃΔΔⲆᐃⵠⵠᐃⲆ = function (a) {
      kx.ᐃⵠⲆⵠ.ᐃⵠⵠ = a / 100;
    };
    this.ΔⵠⵠΔΔΔᐃⵠⵠ = function (a) {
      kx.ᐃⵠⲆⵠ.ᐃⲆᐃΔᐃⲆⲆ = a / 100;
    };
    this.ⵠΔΔⵠⲆᐃⲆᐃΔ = function (a) {
      kx.ᐃⵠⲆⵠ.c = a / 100;
    };
    this.ⲆⵠⲆΔⵠΔᐃᐃⵠ = function (a) {
      jx.time = a;
      jx.transition = true;
      ox.transition = 1;
    };
    this.ᐃⵠⲆⵠᐃⵠᐃⲆΔ = function () {
      document.getElementById("game_body").style.backgroundColor = Nr.ⲆᐃᐃᐃΔ[jx.time];
    };
    this.ΔⵠᐃᐃⲆⵠᐃᐃΔ = function (a) {
      if (jx.mode == 1 && jx.ⲆⲆⵠⲆ[a].ᐃΔᐃⲆΔ !== "spectator") {
        this.ΔΔΔΔⲆ(jx.ⲆⲆⵠⲆ[a].ᐃΔᐃⲆΔ + lb[314]);
      }
      jx.ⲆⲆⵠⲆ[a].ΔⵠⲆⵠⵠ = false;
    };
    this.ΔⲆⲆⵠΔΔⲆᐃⲆ = function (a) {
      var b = new Uint16Array(a);
      ⲆⲆΔᐃ.ⲆⲆᐃ.ⲆⲆᐃᐃΔ(b[1], b[2]);
    };
    this.ⲆᐃⲆΔⲆᐃᐃⵠᐃ = function (a) {
      var b = new Uint16Array(a);
      kx.ⲆⲆᐃ.ⲆⲆᐃᐃΔ(b[1], b[2]);
    };
    this.ⲆⲆᐃⵠⵠᐃⵠΔΔ = function (b, c) {
      var d = new Uint16Array(c);
      for (var e = (b.length - 2) / 4, f = 0; e > f; f++) {
        var g = d[1 + f * 2];
        var i = b[4 + f * 4];
        var j = (b[5 + f * 4] >> 1) / 127 * Math.PI * 2;
        var k = jx.ΔⲆᐃΔⲆ[i * jx.ΔᐃⲆΔᐃᐃΔ + g];
        if (k && k.ᐃⵠΔ) {
          if (ox.loaded && ox.ᐃⲆⵠΔΔ) {
            ox.ᐃⵠΔ(b[5 + f * 4] & 1, ⵠⵠΔᐃⵠ[k.type], k.x, k.y);
          }
          k.ᐃⵠΔ.angle = j;
          k.ᐃⵠΔ.ᐃⲆᐃ = j;
        }
      }
    };
    this.ⵠᐃΔᐃΔᐃⲆᐃΔ = function (b) {
      var c = new Uint16Array(b);
      for (var d = (c.length - 1) / 4, e = 0; d > e; e++) {
        var f;
        var i = e * 4;
        var j = c[1 + i];
        var k = c[2 + i];
        var m = Math.PI * ((c[3 + i] >> 1) / 127) * 2;
        var p = c[4 + i];
        var q = gx.ⵠⲆᐃᐃ[k][j];
        switch (p) {
          case 0:
            (f = q.p[0][0]).angle = m;
            f.ᐃⲆᐃ = Ig;
            break;
          case 1:
            (f = q.s[0][0]).angle = m;
            f.ᐃⲆᐃ = dg;
            break;
          case 2:
            (f = q.s[1][0]).angle = m;
            f.ᐃⲆᐃ = gr;
            break;
          case 3:
            (f = q.s[2][0]).angle = m;
            f.ᐃⲆᐃ = yn;
            break;
          case 4:
            (f = q.t[0][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 5:
            (f = q.t[1][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 6:
            (f = q.t[2][0]).angle = m;
            f.ᐃⲆᐃ = rl;
            break;
          case 7:
            (f = q.t[3][0]).angle = m;
            f.ᐃⲆᐃ = qq;
            break;
          case 8:
            (f = q.t[4][0]).angle = m;
            f.ᐃⲆᐃ = Pr;
            break;
          case 9:
            (f = q.t[5][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 10:
            (f = q.g[0][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 11:
            (f = q.g[1][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 12:
            (f = q.g[2][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 13:
            (f = q.d[0][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 14:
            (f = q.d[1][0]).angle = m;
            f.ᐃⲆᐃ = Jg;
            break;
          case 15:
            (f = q.d[2][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 16:
            (f = q.b[0][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 17:
            (f = q.b[1][0]).angle = m;
            f.ᐃⲆᐃ = Ig;
            break;
          case 18:
            (f = q.b[2][0]).angle = m;
            f.ᐃⲆᐃ = fe;
            break;
          case 19:
            (f = q.b[3][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 20:
            (f = q.f[0][0]).angle = m;
            f.ᐃⲆᐃ = ns;
            break;
          case 21:
            (f = q.f[1][0]).angle = m;
            f.ᐃⲆᐃ = ns;
            break;
          case 22:
            (f = q.f[2][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 23:
            (f = q.sw[0][0]).angle = m;
            f.ᐃⲆᐃ = th;
            break;
          case 24:
            (f = q.sw[1][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 25:
            (f = q.sw[2][0]).angle = m;
            f.ᐃⲆᐃ = Vk;
            break;
          case 26:
            (f = q.gw[0][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 27:
            (f = q.gw[1][0]).angle = m;
            f.ᐃⲆᐃ = Jq;
            break;
          case 28:
            (f = q.gw[2][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 29:
            (f = q.dw[0][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 30:
            (f = q.dw[1][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 31:
            (f = q.dw[2][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 32:
            (f = q.a[0][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 33:
            (f = q.a[1][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 34:
            (f = q.a[2][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 35:
            (f = q.cs[0][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 36:
            (f = q.cs[1][0]).angle = m;
            f.ᐃⲆᐃ = Bq;
            break;
          case 37:
            (f = q.cs[2][0]).angle = m;
            f.ᐃⲆᐃ = Jg;
            break;
          case 38:
            (f = q.cs[3][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 40:
            (f = q.plm[0][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 41:
            (f = q.plm[1][0]).angle = m;
            f.ᐃⲆᐃ = Jq;
            break;
          case 42:
            (f = q.plm[2][0]).angle = m;
            f.ᐃⲆᐃ = $j;
            break;
          case 50:
            (f = q.re[0][0]).angle = m;
            f.ᐃⲆᐃ = jo;
            break;
          case 51:
            (f = q.re[1][0]).angle = m;
            f.ᐃⲆᐃ = Yh;
            break;
          case 52:
            (f = q.re[2][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 55:
            (f = q.c[0][0]).angle = m;
            f.ᐃⲆᐃ = _q;
            break;
          case 56:
            (f = q.m[0][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 57:
            (f = q.m[1][0]).angle = m;
            f.ᐃⲆᐃ = true;
            break;
          case 58:
            (f = q.m[2][0]).angle = m;
            f.ᐃⲆᐃ = true;
        }
        if (ox.loaded && ox.ᐃⲆⵠΔΔ && f) {
          ox.ᐃⵠΔ(c[3 + i] & 1, ⵠⵠΔΔ[p], f.x, f.y);
        }
      }
    };
    this.ΔⲆΔⵠⵠ = function () {
      this.ΔⲆⵠⲆ[pf](Xo[No].stringify([35, kx.ΔⲆΔⵠⵠ.ᐃⲆⲆⲆ, kx.ΔⲆΔⵠⵠ.ⲆⵠᐃΔⲆ]));
    };
    this.ⲆᐃΔⲆΔⵠⲆⲆᐃ = function (a, b) {
      this.ΔⲆⵠⲆ[pf](Xo[fa].stringify([30, b, a.ᐃⲆⲆⲆ, a.ⲆⵠᐃΔⲆ]));
    };
    this.ᐃΔΔΔΔⵠΔ = function (a, b, c) {
      if (b) {
        this.ΔⲆⵠⲆ[pf](Xo[fa].stringify([14, b, a.ᐃⲆⲆⲆ, a.ⲆⵠᐃΔⲆ]));
      } else {
        this.ΔⲆⵠⲆ[pf](Xo[$o].stringify([25, c, a.ᐃⲆⲆⲆ, a.ⲆⵠᐃΔⲆ]));
      }
    };
    this.ⵠᐃⵠⲆΔⵠⲆᐃⲆ = function (a) {
      this.ΔⲆⵠⲆ[pf](lq[xa].stringify([13, a.ᐃⲆⲆⲆ, a.ⲆⵠᐃΔⲆ]));
    };
    this.ΔⲆᐃΔⵠΔⲆⵠⵠ = function (a) {
      this.ΔⲆⵠⲆ[pf](lq[_a].stringify([32, a]));
    };
    this.ᐃΔⲆⲆᐃⲆⲆᐃⲆ = function (a) {
      this.ΔⲆⵠⲆ[pf](wa[No].stringify([29, a.ᐃⲆⲆⲆ, a.ⲆⵠᐃΔⲆ]));
    };
    this.ᐃⵠⲆⲆᐃΔⲆⲆⲆ = function (a, b) {
      this.ΔⲆⵠⲆ[pf](ba[xa].stringify([27, b, a.ᐃⲆⲆⲆ, a.ⲆⵠᐃΔⲆ, a.type]));
    };
    this.ΔᐃⲆΔⵠᐃΔⵠΔ = function (a, b) {
      this.ΔⲆⵠⲆ[pf](ba[xa].stringify([7, b, a.ᐃⲆⲆⲆ, a.ⲆⵠᐃΔⲆ]));
    };
    this.ⵠΔᐃᐃⵠⵠⵠⲆⵠ = function (a, b, c) {
      this.ΔⲆⵠⲆ[pf](wa[fa].stringify([1, b, c, a.ᐃⲆⲆⲆ, a.ⲆⵠᐃΔⲆ]));
    };
    this.ⵠⲆⵠᐃᐃᐃⵠ = function (a) {
      this.ΔⲆⵠⲆ[pf](lq[xa].stringify([37, a.ᐃⲆⲆⲆ, a.ⲆⵠᐃΔⲆ, a.type]));
    };
    this.ⵠᐃⲆⲆⲆᐃΔⲆᐃ = function (a) {
      this.ΔⲆⵠⲆ[pf](lq[xa].stringify([4, a.ᐃⲆⲆⲆ, a.ⲆⵠᐃΔⲆ]));
    };
    this.ⵠⵠⵠΔⵠᐃΔᐃᐃ = function (a) {
      this.ΔⲆⵠⲆ[pf](lq[xa].stringify([8, a.ᐃⲆⲆⲆ, a.ⲆⵠᐃΔⲆ]));
    };
    this.ⵠⵠⵠᐃⲆⵠⲆΔⲆ = function (a) {
      this.ΔⲆⵠⲆ[pf](oq[Da].stringify([20, a.ᐃⲆⲆⲆ, a.ⲆⵠᐃΔⲆ]));
    };
    this.ΔⵠⵠⲆΔΔⵠⵠΔ = function (a) {
      this.ΔⲆⵠⲆ[pf](pq[mq].stringify([3, a.ⲆⵠᐃΔⲆ]));
    };
    this.ᐃⵠΔΔᐃᐃΔ = function (a) {
      b.ΔⲆⵠⲆ[pf](Ha[_a].stringify([23, kx.ᐃΔᐃⲆⲆ.id, kx.ⵠⲆΔⵠᐃ[a]]));
    };
    this.ΔⲆⵠⵠⵠᐃⲆⲆΔ = function () {
      b.ΔⲆⵠⲆ[pf](rq[Za].stringify([17, kx.ᐃΔᐃⲆⲆ.ᐃⲆⲆⲆ, kx.ᐃΔᐃⲆⲆ.id]));
    };
    this.ᐃⵠΔⵠⲆⵠⵠ = function () {
      b.ΔⲆⵠⲆ[pf](vq[uq].stringify([12]));
    };
    this.ⵠⵠΔⲆⲆⵠΔⲆΔ = function () {
      b.ΔⲆⵠⲆ[pf](vq[_a].stringify([19, kx.ᐃΔᐃⲆⲆ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        kx.ᐃΔᐃⲆⲆ.lock = 1;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        kx.ᐃΔᐃⲆⲆ.lock = 0;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.ⵠⲆⵠ = function (j, e, i) {
      var k = new Uint16Array(j);
      if (i) {
        jx.ⵠⵠⵠΔⲆᐃⵠᐃⲆ();
      }
      for (var n = (e.length - 2) / 18, o = 0; o < n; o++) {
        var q = 2 + o * 18;
        var t = 1 + o * 9;
        var w = e[q];
        var x = k[t + 1];
        var y = k[t + 5];
        var z = w * jx.ΔᐃⲆΔᐃᐃΔ + y;
        if (x & 1) {
          jx.ⵠΔᐃᐃⵠⲆᐃᐃⲆ(z);
        } else {
          var A = k[t + 2];
          var B = k[t + 3];
          var D = k[t + 4];
          var E = k[t + 6];
          var F = k[t + 7];
          var G = k[t + 8];
          var H = Math.PI * (e[q + 1] / 255) * 2;
          if (jx.ΔⲆᐃΔⲆ[z]) {
            var I = jx.ΔⲆᐃΔⲆ[z];
            I.r.x = B;
            I.r.y = D;
            if (w != 0 && ⵠⵠⵠ.ⵠΔᐃΔ(I, I.r) > 200) {
              I.x = B;
              I.y = D;
            }
            if (kx.id !== I.id || w === 0) {
              I.ᐃΔᐃᐃᐃᐃᐃ = H;
            }
            I.action |= x;
            I.info = E;
            I.ΔⵠⵠΔΔ = F;
            I.ΔΔⲆⲆⲆ = G;
            if (I.ᐃⲆᐃ) {
              I.ᐃⲆᐃ(x);
            }
          } else {
            var J = new Ff(A, w, y, B, D, H, x, E, F, G);
            jx.ΔⲆᐃΔⲆ[z] = J;
            jx.ⵠⲆⵠ[A].push(J);
          }
        }
      }
    };
    this.ᐃᐃᐃᐃ = function (a) {
      this.ⵠΔᐃⲆΔᐃΔ = rx;
      var b = new Uint16Array(a);
      kx.ⵠΔⵠⵠⲆ.ᐃᐃᐃⵠΔ(b);
    };
    this.ⲆᐃⲆΔⲆⲆΔΔᐃ = function (a) {
      if (Vs !== br) {
        Xs = Vs;
      }
      if (a.length > 0) {
        Vs = JSON.parse(JSON.stringify(Xs));
        for (var b = 0; b < a.length; b++) {
          var c = a[b];
          var d = Xs[c.item];
          if (mg !== d) {
            d.r = c.recipe;
            d.w = c.workbench;
            d.f = c.fire;
            d.ⲆⲆΔ = c.water;
            d.e = c.well;
            d.time = 1 / c.time;
          }
        }
      }
    };
    this.ΔᐃᐃᐃⲆΔᐃ = function (a) {
      if (a && a.length !== 0) {
        kx.ΔᐃᐃᐃⲆΔᐃ.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          ᐃᐃ = [];
          var f = b.length * 18 + 10;
          var g = 0;
          d.font = 14 + "px Baloo Paaji";
          for (var h = 0; h < b.length; h++) {
            if (b[h].charAt(0) === "#") {
              ᐃᐃ[h] = b[h].substring(0, 7);
              b[h] = b[h].substring(8);
            } else {
              ᐃᐃ[h] = "#FFFFFF";
            }
            g = Math.max(d.measureText(b[h]).width + 16, g);
          }
          c.height = f;
          c.width = g;
          h = 0;
          for (; b.length > h; h++) {
            var i = ou(1, b[h], 14, ᐃᐃ[h], null, null, null, null, null, "#000", 6);
            d.drawImage(i, 8, h * 18 + 5);
          }
          return c;
        }(a);
      } else {
        kx.ΔᐃᐃᐃⲆΔᐃ.message = ca;
      }
    };
    this.ᐃⲆΔΔⵠ = function (a) {
      var b = jx.ΔⲆᐃΔⲆ[a[1] * jx.ΔᐃⲆΔᐃᐃΔ];
      if (b) {
        if (jx.mode === 2 && b.Ⲇᐃⵠᐃ === 0) {
          if (kx.ⲆᐃΔΔⲆ) {
            if (Math.random() > 0.5) {
              b.text.push(a[2] + " ..." + ᐃⵠᐃⲆⲆ);
            } else {
              b.text.push(ᐃⵠᐃⲆⲆ + "... " + a[2]);
            }
          } else {
            b.text.push(ᐃⵠΔⲆᐃΔⵠ[Math.floor(Math.random() * ᐃⵠΔⲆᐃΔⵠ.length)]);
          }
        } else {
          b.text.push(a[2]);
        }
      }
    };
    this.ᐃⵠⵠᐃⵠΔΔⵠᐃ = function (a) {
      if (kx.ᐃΔΔⵠ.ⲆΔⵠᐃⲆ.length !== kx.ᐃΔΔⵠ.max || Xs[a].ᐃΔᐃᐃ === 29 || kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(Xs[a].ᐃΔᐃᐃ) != -1 || kx.ᐃΔΔⵠ.ᐃⲆⲆΔᐃΔΔΔⵠ(Xs[a].r)) {
        this.ΔⲆⵠⲆ[pf](dq[Uo].stringify([26, a]));
        return 1;
      } else {
        this.ᐃΔⲆᐃΔΔⲆ();
        return 0;
      }
    };
    this.ᐃⲆᐃΔⵠ = function (a) {
      kx.ⲆⲆⲆⲆ.ⵠΔᐃΔΔᐃⲆⲆⲆ(a);
    };
    this.ⵠΔΔⵠⲆ = function (a) {
      kx.ⲆⲆⲆⲆ.ⵠΔΔⵠⲆ = a;
      kx.ⲆⲆⲆⲆ.ᐃⲆᐃ();
    };
    this.ⵠᐃᐃⵠⵠ = function (a) {
      kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠⵠ = a;
      kx.ⲆⲆⲆⲆ.ᐃⲆᐃ();
    };
    this.ⵠᐃΔᐃᐃΔⵠ = function (a) {
      kx.ⲆⲆⲆⲆ.ⵠᐃΔᐃᐃΔⵠ = a;
      kx.ⲆⲆⲆⲆ.ᐃⲆᐃ();
    };
    this.ⲆⵠⲆᐃⲆᐃⲆΔⵠ = function (a) {
      this.ΔΔΔΔⲆ(lb[315]);
    };
    this.ᐃⲆᐃΔⲆᐃⲆⵠⵠ = function () {
      kx.ⲆⲆⲆⲆ.ΔᐃⲆⵠⵠⵠⲆ();
    };
    this.ᐃΔᐃⵠᐃ = function (a) {
      nx.ᐃΔᐃⵠᐃ.ⲆⲆⵠⲆ = [];
      var b = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
      var c = 0;
      for (var d = 1; a.length > d; d += 2) {
        var e = {
          x: Math.floor(a[d] * jx.w / 250),
          y: Math.floor(a[d + 1] * jx.ᐃⵠⵠ / 250)
        };
        if (b && !c && !kx.ⲆᐃᐃΔⵠⵠΔ && ⵠⵠⵠ.ⵠΔᐃΔ(e, b) < 250) {
          c += 1;
        } else {
          nx.ᐃΔᐃⵠᐃ.ⲆⲆⵠⲆ.push(e);
        }
      }
    };
    this.ⵠΔΔΔⲆⲆΔΔⲆ = function () {
      kx.ΔⲆΔⵠⵠ.open = vn;
      kx.ⲆⲆⵠᐃⲆ.enabled = false;
      kx.ⲆⲆⵠᐃⲆ.ᐃⲆⵠΔⲆ = -1;
      kx.ⲆⲆⵠᐃⲆ.label = null;
      kx.ⲆⲆⵠᐃⲆ.ΔⵠⲆⵠⵠⵠΔ = null;
      kx.ⲆⲆⵠᐃⲆ.now = -1;
    };
    this.ⲆⲆⵠᐃⲆ = function (a) {
      Bf.ⵠᐃⲆᐃΔΔⲆ = a;
      kx.ⲆⲆⵠᐃⲆ.enabled = yn;
      kx.ⲆⲆⵠᐃⲆ.ᐃⲆⵠΔⲆ = new Date().getTime();
      kx.ⲆⲆⵠᐃⲆ.label = null;
      kx.ⲆⲆⵠᐃⲆ.now = -1;
      for (var b = [39, 45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; b.length > c; c++) {
        var d = kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(b[c]);
        if (d != -1) {
          kx.ᐃΔΔⵠ.ⵠᐃΔⵠᐃΔΔ(b.length[c], d);
        }
      }
      kx.ⲆⲆⲆⲆ.ΔᐃⲆⵠⵠⵠⲆ();
    };
    this.ⵠᐃⵠⵠⲆⲆᐃⵠᐃ = function (a, b, c) {
      this.ᐃΔᐃΔΔᐃΔ(a, b * 256 + c);
    };
    this.ᐃΔᐃΔΔᐃΔ = function (a, b) {
      kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ = -1;
      kx.ᐃΔΔⵠ.ⲆⲆΔᐃᐃⲆᐃ(a, b, kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(a));
      kx.ⲆⲆⲆⲆ.ᐃⲆᐃ();
    };
    this.ΔᐃⲆΔᐃΔⲆⵠⵠ = function (a) {
      kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ = -1;
      kx.ⲆⲆᐃΔΔ.wait = true;
      var b = kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(a);
      kx.ᐃΔΔⵠ.ⲆⲆΔᐃᐃⲆᐃ(a, 1, b);
      if (b >= 0 && !kx.ᐃΔΔⵠ.ⵠᐃΔΔ[a]) {
        kx.ⲆⲆⲆⲆ.ᐃⲆᐃ();
      }
      if (a == 159) {
        kx.ⵠⲆΔⵠᐃ = [kx.id];
      }
    };
    this.ᐃΔⵠⵠᐃΔⲆⲆⵠ = function () {
      this.ΔⲆⵠⲆ[pf](Xo[No].stringify([6]));
    };
    this.ⵠⵠΔⲆⵠᐃᐃⵠⲆ = function (a) {
      this.ΔⲆⵠⲆ[pf](ba[$o].stringify([2, a.ᐃⲆΔⲆⵠ, a.id]));
    };
    this.ⲆⵠᐃⲆⲆⵠⲆⲆⵠ = function (a, b) {
      this.ΔⲆⵠⲆ[pf](ba[xa].stringify([10, a, b]));
    };
    this.ⵠΔⲆⲆΔⵠⲆⲆⵠ = function () {
      var a = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
      if (a) {
        var b = Math.PI * 2;
        this.ΔⲆⵠⲆ[pf](ba[$o].stringify([22, kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ, Math.floor((a.angle + b) % b * 255 / b), kx.ⲆⲆⲆⲆ.mode]));
      }
    };
    this.ⲆΔΔⲆᐃ = function (a, b) {
      switch (a) {
        case 195:
        case 110:
        case 116:
        case 117:
        case 145:
        case 127:
        case 133:
        case 136:
        case 142:
        case 143:
        case 189:
        case 207:
        case 233:
        case 205:
        case 209:
        case 211:
        case 192:
        case 137:
        case 138:
        case 196:
        case 197:
        case 200:
        case 199:
          kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ = -1;
          this.ΔⲆⵠⲆ[pf](wa[fa].stringify([34, a]));
          break;
        case 114:
        case 160:
        case 115:
        case 132:
        case 188:
        case 206:
        case 204:
        case 191:
        case 193:
        case 208:
        case 210:
        case 113:
        case 162:
        case 163:
        case 164:
        case 165:
        case 118:
        case 167:
        case 151:
        case 152:
        case 166:
        case 171:
        case 172:
        case 173:
        case 124:
        case 218:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 220:
        case 168:
        case 169:
        case 170:
        case 119:
        case 122:
        case 123:
        case 217:
        case 219:
        case 125:
        case 190:
        case 141:
        case 135:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 198:
        case 201:
        case 182:
        case 183:
        case 144:
        case 159:
        case 221:
          if (!kx.ⲆᐃΔΔⲆ) {
            if (kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ === a) {
              kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ = -1;
            } else {
              kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ = a;
            }
          }
          break;
        case 0:
        case 57:
        case 5:
        case 6:
        case 30:
        case 19:
        case 9:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 92:
        case 93:
        case 12:
        case 13:
        case 14:
        case 15:
        case 33:
        case Rr.ⵠᐃⵠᐃⵠΔⲆⵠⵠ:
        case 16:
        case 17:
        case 34:
        case 18:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
          if (!kx.ⲆᐃΔΔⲆ) {
            kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ = -1;
            if ((c = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ]) && c.right === a) {
              this.ΔⲆⵠⲆ[pf](lq[xa].stringify([34, 7]));
            } else {
              kx.ⲆᐃⵠΔᐃ.wait = Jq;
              this.ΔⲆⵠⲆ[pf](oq[Da].stringify([34, a]));
            }
          }
          break;
        case 1:
        case 8:
        case 3:
        case 4:
        case 35:
        case 36:
        case 37:
        case 28:
        case 38:
        case 39:
        case 31:
        case 32:
        case 45:
        case 46:
        case 50:
        case 51:
        case 52:
        case 55:
        case 56:
        case 53:
        case 54:
        case 89:
        case 49:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
          if (!kx.ⲆᐃΔΔⲆ) {
            kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ = -1;
            if ((c = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ]) && a === c.right) {
              this.ΔⲆⵠⲆ[pf](pq[mq].stringify([34, 7]));
            } else {
              this.ΔⲆⵠⲆ[pf](Ha[_a].stringify([34, a]));
            }
          }
          break;
        case 223:
        case 224:
        case 225:
        case 239:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 91:
          if (!kx.ⲆᐃΔΔⲆ) {
            kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ = -1;
            var c = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
            this.ΔⲆⵠⲆ[pf](Ha[_a].stringify([34, a]));
          }
          break;
        case 77:
        case 78:
        case 79:
        case 58:
        case 25:
        case 26:
        case 27:
        case 43:
        case 44:
        case 20:
        case 21:
        case 22:
        case 59:
        case 60:
        case 90:
        case 61:
        case 47:
          if ((c = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ]) && c.ⲆΔⲆⲆΔ !== a) {
            kx.ΔᐃΔᐃⵠ.wait = Bq;
          }
          this.ΔⲆⵠⲆ[pf](wa[xa].stringify([34, a]));
          break;
        case 10:
        case 83:
        case 84:
        case 86:
        case 11:
        case 40:
        case 88:
        case 82:
        case 80:
        case 81:
        case 41:
        case 42:
        case 85:
        case 23:
        case 24:
        case 48:
          this.ΔⲆⵠⲆ[pf](rq[Za].stringify([34, a]));
      }
    };
    this.ΔⲆⵠΔᐃΔⲆⲆΔ = function (a) {
      this.ΔⲆⵠⲆ[pf](ba[Uo].stringify([31, a]));
    };
    this.ΔΔⲆΔⵠⵠᐃⲆᐃ = function (a) {
      kx.ⲆⲆᐃΔΔ.wait = Vk;
      var b = kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(a);
      kx.ᐃΔΔⵠ.ⵠᐃΔⵠᐃΔΔ(a, b);
      kx.ⲆⲆⲆⲆ.ᐃⲆᐃ();
    };
    this.ΔΔᐃΔΔΔⵠⵠⲆ = function (a, b) {
      this.ΔⲆⵠⲆ[pf](dq[mq].stringify([18, a]));
    };
    this.ᐃⲆΔⲆᐃⲆΔⵠⵠ = function (a, b) {
      this.ΔⲆⵠⲆ[pf](Xo[No].stringify([24, a]));
    };
    this.ΔΔᐃΔᐃᐃΔⵠⲆ = function (a) {
      kx.ⲆⲆᐃΔΔ.wait = jo;
      var b = kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(a);
      kx.ᐃΔΔⵠ.ⲆⲆΔᐃᐃⲆᐃ(a, 1, b);
      kx.ⲆⲆⲆⲆ.ᐃⲆᐃ();
    };
    this.ⲆΔⲆⲆⵠΔᐃᐃᐃ = function (a) {
      var b = a[1];
      var c = a[2];
      kx.ⲆⲆᐃΔΔ.wait = dg;
      var d = kx.ᐃΔΔⵠ.ⲆⵠᐃΔⵠ(b);
      kx.ᐃΔΔⵠ.ⲆⲆΔᐃᐃⲆᐃ(b, c, d);
      kx.ⲆⲆⲆⲆ.ᐃⲆᐃ();
    };
    this.ⵠⵠⲆⵠᐃᐃⵠΔⵠ = function () {
      this.ΔⲆⵠⲆ[pf](Xo[No].stringify([16]));
    };
    this.ⵠΔⲆⲆⲆⲆⵠⵠⲆ = function (a) {
      var b = Math.PI * 2;
      this.ΔⲆⵠⲆ[pf](ba[$o].stringify([36, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ⲆᐃⲆⵠᐃⲆᐃⲆⲆ = function (a) {
      var b = Math.PI * 2;
      this.ΔⲆⵠⲆ[pf](ba[$o].stringify([0, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ΔⲆᐃΔⲆᐃΔᐃΔ = function (a) {
      this.ΔⲆⵠⲆ[pf](ⲆᐃⲆΔⵠΔᐃ[gq].stringify([11, a]));
    };
    this.ΔⵠⵠᐃⲆΔᐃⵠᐃ = function (a) {
      this.ΔⲆⵠⲆ[pf](lq[xa].stringify([33, a]));
    };
    this.ⵠΔⵠΔⲆᐃᐃᐃΔ = function (a) {
      var b = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
      if (kx.ⲆᐃΔΔⲆ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(0, 25) + " ..." + ᐃⵠᐃⲆⲆ);
        } else {
          b.text.push(ᐃⵠᐃⲆⲆ + "... " + a.substring(0, 25));
        }
      } else {
        b.text.push(a);
      }
      this.ΔⲆⵠⲆ[pf](lq[xa].stringify([15, a]));
    };
    this.ⵠᐃⲆⵠⲆ = function (a) {
      var b = ⲆⲆΔᐃ.select.ⵠⲆⵠ;
      if (b.length != 0) {
        var c = [11];
        var d = [];
        ⵠⵠⵠ.ᐃΔᐃΔⲆᐃᐃ(a, {
          x: ⲆⲆΔᐃ.ⲆⲆᐃ.rx,
          y: ⲆⲆΔᐃ.ⲆⲆᐃ.ry
        });
        c.push(a.x);
        c.push(a.y);
        for (var e = 0; e < b.length; e++) {
          d.push(b[e].ΔΔΔΔᐃⲆⵠⲆⲆ);
        }
        c.push(d);
        this.ΔⲆⵠⲆ[pf](oq[Da].stringify(c));
      }
    };
    this.ⵠⲆⲆⲆⲆⵠᐃ = 0;
    this.ΔⲆᐃᐃΔⲆⵠ = {
      ⵠΔⵠ: 0,
      ᐃⵠ: 0
    };
    this.ᐃⲆΔΔΔΔⲆⲆⵠ = function () {
      if (rx - this.ⵠⲆⲆⲆⲆⵠᐃ > 50) {
        this.ⵠⲆⲆⲆⲆⵠᐃ = rx;
        var a = kx.ⲆⲆᐃ;
        var b = Math.floor(a.x / 100);
        var c = Math.floor(a.y / 100);
        if (b != this.ΔⲆᐃᐃΔⲆⵠ.ᐃⵠ || c != this.ΔⲆᐃᐃΔⲆⵠ.ⵠΔⵠ) {
          this.ΔⲆⵠⲆ[pf](Ha[mq].stringify([28, Math.floor(-a.x), Math.floor(-a.y)]));
          this.ΔⲆᐃᐃΔⲆⵠ.ᐃⵠ = b;
          this.ΔⲆᐃᐃΔⲆⵠ.ⵠΔⵠ = c;
        }
      }
    };
    this.ⲆⲆⵠⲆΔⲆⵠ = 0;
    this.ᐃΔⵠⵠⲆΔⲆⵠᐃ = function () {
      if (rx - this.ⲆⲆⵠⲆΔⲆⵠ > 60000) {
        this.ⲆⲆⵠⲆΔⲆⵠ = rx;
        //this.ping();
      }
    };
    this.ᐃΔⵠⵠⲆⵠⲆⲆΔ = function () {
      kx.reconnect.enabled = true;
      if (b.ΔⵠᐃᐃⲆ == b.ΔⲆⵠⲆ.ΔⵠᐃᐃⲆ) {
        b.ΔⵠᐃᐃⲆ++;
        b.ΔⲆⵠⲆ.close();
        mx.connect();
      }
    };
    this.ΔⲆΔΔᐃΔΔⵠΔ = function (a) {
      this.ΔΔΔΔⲆ(lb[316]);
      for (var b = 1; a.length > b; b++) {
        kx.ⵠⲆΔⵠᐃ.push(a[b]);
      }
    };
    this.ΔΔᐃⵠⵠⵠⵠᐃᐃ = function (a) {
      this.ΔΔΔΔⲆ(jx.ⲆⲆⵠⲆ[a].ᐃΔᐃⲆΔ + lb[318]);
      kx.ⵠⲆΔⵠᐃ.push(a);
      var b = document.getElementById("team_box");
      if (nx.ⵠᐃⵠⵠⵠ != -1 && b.style.display == "inline-block") {
        nx.ΔⵠΔⵠⵠ[nx.ⵠᐃⵠⵠⵠ].action();
      }
    };
    this.ᐃⵠΔΔⲆⵠΔΔⲆ = function () {
      this.ΔΔΔΔⲆ(lb[319]);
      kx.ᐃΔᐃⲆⲆ.wait = true;
      kx.ⵠⲆΔⵠᐃ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ⲆⵠΔⲆⲆᐃⵠⲆᐃ = function (a) {
      if (kx.id == a) {
        this.ΔΔΔΔⲆ(lb[320]);
        kx.ᐃΔᐃⲆⲆ.wait = Jq;
        kx.ⵠⲆΔⵠᐃ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.ΔΔΔΔⲆ(jx.ⲆⲆⵠⲆ[a].ᐃΔᐃⲆΔ + lb[321]);
        for (var b = 0; kx.ⵠⲆΔⵠᐃ.length > b; b++) {
          if (kx.ⵠⲆΔⵠᐃ[b] == a) {
            kx.ⵠⲆΔⵠᐃ.splice(b, 1);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (nx.ⵠᐃⵠⵠⵠ != -1 && c.style.display == "inline-block") {
          nx.ΔⵠΔⵠⵠ[nx.ⵠᐃⵠⵠⵠ].action();
        }
      }
    };
    this.ᐃⵠⵠⵠᐃⲆᐃΔΔ = function (a) {
      kx.ΔⵠⲆⵠⵠ = false;
      this.ΔΔΔΔⲆ(lb[322]);
      if (this.ΔⲆⵠⲆ.ΔⵠᐃᐃⲆ == this.ΔⵠᐃᐃⲆ) {
        this.ΔⵠᐃᐃⲆ++;
        nx.ⲆᐃⵠⵠΔ(ix.ᐃⲆⵠΔΔ);
        this.ΔⲆⵠⲆ.close();
      }
    };
    this.ⲆΔΔΔΔΔⵠⵠΔ = function (a, b) {
      kx.ΔⵠⲆⵠⵠ = Ma;
      var c = new Uint16Array(b);
      var d = new Uint32Array(b);
      kx.ᐃΔⲆΔⲆΔⲆ.ⵠᐃΔᐃᐃⲆᐃ = vb[a][Math.floor(Math.random() * vb[a].length)];
      kx.ᐃΔⲆΔⲆΔⲆ.ⲆΔⵠᐃⵠ = ⵠⵠⵠ.ⲆᐃᐃⲆⵠⲆᐃ(jx.ⲆⲆⵠⲆ[kx.id].ⲆΔⵠᐃⵠ);
      kx.ᐃΔⲆΔⲆΔⲆ.ⲆΔᐃⲆⲆᐃⵠ = ⵠⵠⵠ.ⲆᐃᐃⲆⵠⲆᐃ(d[1]);
      kx.ᐃΔⲆΔⲆΔⲆ.ⲆΔⲆΔⲆ = c[1];
      this.ΔΔΔΔⲆ(lb[317]);
      if (this.ΔⲆⵠⲆ.ΔⵠᐃᐃⲆ == this.ΔⵠᐃᐃⲆ) {
        this.ΔⵠᐃᐃⲆ++;
        nx.ⲆᐃⵠⵠΔ(lx.ᐃⲆⵠΔΔ);
        this.ΔⲆⵠⲆ.close();
        try {
          sa.Widget.adsRefresh();
        } catch (a) { }
      }
    };
    this.ping = function () {
      this.ΔⲆⵠⲆ[pf]("[21]");
    };
    this.ᐃⲆⲆⵠⵠⲆⵠⵠᐃ = function () {
      if (this.ΔⲆⵠⲆ.readyState == 3) {
        this.ⵠΔᐃⲆΔᐃΔ -= 600000;
      }
    };
    this.ⵠⵠⲆⵠΔⲆⵠⲆⲆ = function () {
      if (sx > 5) {
        this.ⵠΔᐃⲆΔᐃΔ = rx;
      }
      if (rx - this.ⵠΔᐃⲆΔᐃΔ > 600000) {
        this.ⵠΔᐃⲆΔᐃΔ = rx;
        this.ᐃΔⵠⵠⲆⵠⲆⲆΔ();
      }
    };
    this.ⲆⵠᐃⵠⵠⲆⵠΔΔ = function (c) {
      vx++;
      clearTimeout(this.ᐃⵠᐃⵠⵠ);
      document.getElementById("commandMainBoxName").innerHTML = this.ⵠⵠᐃⲆⲆ[this.ⲆΔⲆΔᐃ][this.ΔⲆⲆⵠⵠⲆⲆ[this.ⲆΔⲆΔᐃ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ⵠΔᐃⲆΔᐃΔ = rx;
      kx.ᐃⵠⲆⵠ.ΔΔᐃⲆΔ.ⵠΔᐃⵠⲆ = kx.ᐃⵠⲆⵠ.ΔΔᐃⲆΔ.ⵠᐃΔⵠⲆ;
      kx.ᐃⵠⲆⵠ.ᐃᐃⲆⲆⲆⵠᐃ.ⵠΔᐃⵠⲆ = kx.ᐃⵠⲆⵠ.ᐃᐃⲆⲆⲆⵠᐃ.ⵠᐃΔⵠⲆ;
      kx.ᐃⵠⲆⵠ.ΔΔⲆⵠᐃΔΔ.ⵠΔᐃⵠⲆ = kx.ᐃⵠⲆⵠ.ΔΔⲆⵠᐃΔΔ.ⵠᐃΔⵠⲆ;
      kx.ᐃⵠⲆⵠ.ⵠⲆΔⵠᐃⵠᐃ.ⵠΔᐃⵠⲆ = kx.ᐃⵠⲆⵠ.ⵠⲆΔⵠᐃⵠᐃ.ⵠᐃΔⵠⲆ;
      kx.ᐃⵠⲆⵠ.ΔⵠᐃⲆⲆ.ⵠΔᐃⵠⲆ = kx.ᐃⵠⲆⵠ.ΔⵠᐃⲆⲆ.ⵠᐃΔⵠⲆ;
      kx.ᐃⵠⲆⵠ.ΔΔᐃⵠ = 1;
      kx.ᐃⵠⲆⵠ.c = 1;
      kx.ᐃⵠⲆⵠ.ᐃⵠⵠ = 1;
      kx.ᐃⵠⲆⵠ.ΔⵠΔ = 1;
      kx.ᐃⵠⲆⵠ.ⲆⲆΔ = 1;
      kx.ᐃⵠⲆⵠ.ᐃⲆᐃΔᐃⲆⲆ = 1;
      kx.ⲆΔᐃΔᐃᐃⲆ = false;
      nx.ⲆΔⵠΔⵠ.display = 0;
      kx.ᐃΔΔⵠ.ⲆΔⵠᐃⲆ = [];
      kx.ᐃΔΔⵠ.ⵠᐃΔΔ = [];
      kx.ᐃΔΔⵠ.max = 10;
      kx.ᐃΔΔⵠ.ΔⲆⲆⲆⵠΔΔ = 0;
      kx.ᐃΔΔⵠ.ⵠᐃⲆⵠᐃ = 0;
      kx.ᐃΔΔⵠ.id = -1;
      nx.ⵠΔΔⲆⵠⵠⲆ = 1;
      nx.ΔⲆΔΔᐃΔᐃ = 1;
      nx.ⵠⵠⵠΔⲆⲆⲆ = 1;
      nx.ⲆⲆⲆⵠⲆᐃΔ = 1;
      kx.ΔⵠⲆⵠⵠ = Pr;
      kx.ᐃΔΔⵠ.ᐃⲆΔᐃⵠⲆⵠ.stop();
      kx.ⲆⲆⲆⲆ.ᐃⲆⵠⵠⲆ = [];
      kx.ⲆⲆⲆⲆ.ⲆᐃⲆᐃᐃ = false;
      kx.ⲆⲆⲆⲆ.ⵠⲆⲆΔⵠⲆᐃⲆⲆ = Ma;
      kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠ = -1;
      kx.ⲆⲆⲆⲆ.id = -1;
      kx.ⲆⲆⲆⲆ.ᐃⲆᐃΔⵠ = $k;
      kx.ⲆⲆⲆⲆ.ⵠΔΔⵠⲆ = false;
      kx.ⲆⲆⲆⲆ.ⵠᐃᐃⵠⵠ = false;
      kx.ⲆⲆⲆⲆ.ⵠᐃΔᐃᐃΔⵠ = vn;
      kx.ⲆⲆⲆⲆ.timeout = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0, 1, 0, 1, 1);
      kx.ⲆᐃⵠΔᐃ.timeout = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Dg, 0, 1, 0, 0.1, 1);
      kx.ⲆᐃⵠΔᐃ.wait = Eh;
      kx.ΔᐃΔᐃⵠ.timeout = new ⵠⵠⵠ.ⲆⵠⲆⲆ(cr, 0, 1, 0, 1 / 5, 1);
      kx.ΔᐃΔᐃⵠ.wait = zl;
      kx.ⲆⲆᐃΔΔ.timeout = new ⵠⵠⵠ.ⲆⵠⲆⲆ(false, 0, 1, 0, 1, 1);
      kx.ⲆⲆᐃΔΔ.wait = false;
      kx.ᐃΔᐃⲆⲆ.id = -1;
      kx.ᐃΔᐃⲆⲆ.ᐃⲆⲆⲆ = -1;
      kx.ᐃΔᐃⲆⲆ.wait = cr;
      kx.ᐃΔᐃⲆⲆ.timeout = new ⵠⵠⵠ.ⲆⵠⲆⲆ(Ma, 0, 1, 0, 1 / 30, 1);
      nx.ᐃΔᐃⵠᐃ.ⲆⲆΔΔⵠ.x = -1;
      nx.ᐃΔᐃⵠᐃ.ⲆⲆΔΔⵠ.y = -1;
      nx.ⵠᐃΔⲆ.open = Ao;
      nx.ᐃΔᐃⵠᐃ.ⲆⲆⵠⲆ = [];
      kx.ΔⲆⵠᐃⵠ.enabled = false;
      jx.mode = c[1];
      if (vh !== c[20] && c[21] !== gs) {
        jx.ⲆⲆᐃᐃⵠ = c[20];
        jx.ΔᐃⵠΔⵠ = c[21];
        jx.w = jx.ⲆⲆᐃᐃⵠ * jx.ᐃⲆⲆᐃⵠᐃᐃ;
        jx.ᐃⵠⵠ = jx.ΔᐃΔᐃᐃⲆΔ * jx.ΔᐃⵠΔⵠ;
      }
      jx.ᐃⲆΔᐃΔⵠⲆ = c[22];
      jx.ΔΔⲆⲆᐃ = c[23];
      b.ΔᐃᐃᐃⲆΔᐃ(c[24]);
      b.ⲆᐃⲆΔⲆⲆΔΔᐃ(c[25]);
      kx.ᐃⵠΔⲆⲆ.ᐃΔΔΔΔ = c[26];
      kx.ΔⵠⵠΔΔΔⵠ = 0;
      kx.ΔΔᐃⵠⲆ.ᐃΔΔΔΔ = c[27];
      jx.ⵠᐃⵠⲆⲆⲆΔΔᐃ(c[19]);
      jx.time = c[5];
      jx.ᐃᐃΔⵠΔ.ᐃΔⲆΔΔ = c[15];
      jx.ᐃᐃΔⵠΔ.ᐃᐃᐃⵠΔ = new Date().getTime();
      nx.ⵠᐃᐃⲆ.ᐃⵠⲆⵠⵠᐃᐃ = c[16];
      jx.transition = Ma;
      kx.ⵠᐃⲆ = c[2];
      nx.ⵠᐃᐃⲆ.reset();
      kx.ⵠⲆΔⵠᐃ = c[8];
      jx.ⵠⲆⵠ[0] = [];
      jx.ⵠⲆⵠ[100] = [];
      jx.ⵠⲆⵠ[2] = [];
      jx.ⵠⲆⵠ[1] = [];
      jx.ⵠⲆⵠ[6] = [];
      jx.ⵠⲆⵠ[3] = [];
      jx.ⵠⲆⵠ[31] = [];
      jx.ⵠⲆⵠ[37] = [];
      jx.ⵠⲆⵠ[43] = [];
      jx.ⵠⲆⵠ[44] = [];
      jx.ⵠⲆⵠ[39] = [];
      jx.ⵠⲆⵠ[40] = [];
      jx.ⵠⲆⵠ[54] = [];
      jx.ⵠⲆⵠ[55] = [];
      jx.ⵠⲆⵠ[4] = [];
      jx.ⵠⲆⵠ[7] = [];
      jx.ⵠⲆⵠ[8] = [];
      jx.ⵠⲆⵠ[9] = [];
      jx.ⵠⲆⵠ[10] = [];
      jx.ⵠⲆⵠ[15] = [];
      jx.ⵠⲆⵠ[16] = [];
      jx.ⵠⲆⵠ[17] = [];
      jx.ⵠⲆⵠ[45] = [];
      jx.ⵠⲆⵠ[46] = [];
      jx.ⵠⲆⵠ[47] = [];
      jx.ⵠⲆⵠ[48] = [];
      jx.ⵠⲆⵠ[49] = [];
      jx.ⵠⲆⵠ[53] = [];
      jx.ⵠⲆⵠ[11] = [];
      jx.ⵠⲆⵠ[22] = [];
      jx.ⵠⲆⵠ[23] = [];
      jx.ⵠⲆⵠ[5] = [];
      jx.ⵠⲆⵠ[12] = [];
      jx.ⵠⲆⵠ[13] = [];
      jx.ⵠⲆⵠ[14] = [];
      jx.ⵠⲆⵠ[60] = [];
      jx.ⵠⲆⵠ[70] = [];
      jx.ⵠⲆⵠ[71] = [];
      jx.ⵠⲆⵠ[72] = [];
      jx.ⵠⲆⵠ[73] = [];
      jx.ⵠⲆⵠ[74] = [];
      jx.ⵠⲆⵠ[81] = [];
      jx.ⵠⲆⵠ[82] = [];
      jx.ⵠⲆⵠ[87] = [];
      jx.ⵠⲆⵠ[86] = [];
      jx.ⵠⲆⵠ[34] = [];
      jx.ⵠⲆⵠ[65] = [];
      jx.ⵠⲆⵠ[66] = [];
      jx.ⵠⲆⵠ[67] = [];
      jx.ⵠⲆⵠ[62] = [];
      jx.ⵠⲆⵠ[63] = [];
      jx.ⵠⲆⵠ[78] = [];
      jx.ⵠⲆⵠ[77] = [];
      jx.ⵠⲆⵠ[75] = [];
      jx.ⵠⲆⵠ[76] = [];
      jx.ⵠⲆⵠ[64] = [];
      jx.ⵠⲆⵠ[69] = [];
      jx.ⵠⲆⵠ[68] = [];
      jx.ⵠⲆⵠ[79] = [];
      jx.ⵠⲆⵠ[89] = [];
      jx.ⵠⲆⵠ[83] = [];
      jx.ⵠⲆⵠ[84] = [];
      jx.ⵠⲆⵠ[85] = [];
      jx.ⵠⲆⵠ[80] = [];
      jx.ⵠⲆⵠ[88] = [];
      jx.ⵠⲆⵠ[91] = [];
      jx.ⵠⲆⵠ[90] = [];
      jx.ⵠⲆⵠ[61] = [];
      jx.ⵠⲆⵠ[18] = [];
      jx.ⵠⲆⵠ[19] = [];
      jx.ⵠⲆⵠ[20] = [];
      jx.ⵠⲆⵠ[21] = [];
      jx.ⵠⲆⵠ[50] = [];
      jx.ⵠⲆⵠ[52] = [];
      jx.ⵠⲆⵠ[51] = [];
      jx.ⵠⲆⵠ[29] = [];
      jx.ⵠⲆⵠ[56] = [];
      jx.ⵠⲆⵠ[30] = [];
      jx.ⵠⲆⵠ[38] = [];
      jx.ⵠⲆⵠ[33] = [];
      jx.ⵠⲆⵠ[32] = [];
      jx.ⵠⲆⵠ[24] = [];
      jx.ⵠⲆⵠ[25] = [];
      jx.ⵠⲆⵠ[26] = [];
      jx.ⵠⲆⵠ[27] = [];
      jx.ⵠⲆⵠ[28] = [];
      jx.ⵠⲆⵠ[42] = [];
      jx.ⵠⲆⵠ[41] = [];
      jx.ⵠⲆⵠ[35] = [];
      jx.ⵠⲆⵠ[36] = [];
      jx.ΔⲆᐃΔⲆ = [];
      jx.ΔᐃⲆΔᐃᐃΔ = c[7];
      kx.id = c[9];
      kx.ᐃⲆΔⵠ = jx.ΔᐃⲆΔᐃᐃΔ * kx.id;
      if (ox.loaded) {
        ox.ⲆⲆⵠⲆ[0].ᐃⲆΔⵠ = kx.ᐃⲆΔⵠ;
        ox.ⲆⲆⵠⲆ[0].ⲆᐃⲆᐃᐃᐃⲆ = 0;
      }
      px.ΔᐃⵠⲆΔⵠΔ();
      kx.ⲆⲆᐃ.ⲆⲆᐃᐃΔ(c[3], c[10]);
      jx.ⲆⲆⵠⲆ = [];
      var d = jx.ⲆⲆⵠⲆ;
      for (var e = 0; c[11] > e; e++) {
        d.push(new jf());
      }
      e = 0;
      for (var f = c[4]; e < f.length; e++) {
        var g = d[f[e].i];
        g.ᐃΔᐃⲆΔ = f[e].n;
        g.Ⲇᐃⵠᐃ = f[e].s;
        g.ⵠᐃⲆᐃΔ = f[e].a;
        g.ΔᐃᐃⲆᐃ = f[e].c;
        g.ⵠⲆⲆᐃⵠ = f[e].b;
        g.Ⲇⵠᐃᐃᐃ = f[e].d;
        g.ΔⵠⵠΔⵠΔⵠ = f[e].g;
        g.level = f[e].l;
        g.ⲆΔⵠᐃⵠ = ⵠⵠⵠ.ⲆᐃΔⵠΔᐃⵠ(f[e].p);
        g.ΔⵠⲆⵠⵠ = true;
        if (Cf === 1) {
          g.ᐃΔᐃⲆΔ += "|" + f[e].i;
        }
      }
      kx.ⵠΔⵠⵠⲆ.sort();
      if (jx.mode === 1 && jx.ⲆⲆⵠⲆ[kx.id].ᐃΔᐃⲆΔ === "spectator") {
        kx.ⲆᐃᐃΔⵠⵠΔ = Vk;
      } else {
        kx.ⲆᐃᐃΔⵠⵠΔ = Rh;
      }
      if (jx.mode === 2 && jx.ⲆⲆⵠⲆ[kx.id].Ⲇᐃⵠᐃ === 0) {
        kx.ⲆᐃΔΔⲆ = yn;
      } else {
        kx.ⲆᐃΔΔⲆ = vn;
      }
      if (jx.mode === 3 && jx.ⲆⲆⵠⲆ[kx.id].Ⲇᐃⵠᐃ === 0) {
        kx.ⵠⵠⵠⲆᐃΔᐃ = qq;
      } else {
        kx.ⵠⵠⵠⲆᐃΔᐃ = false;
      }
      ᐃᐃᐃⲆ.set("starve_token", kx.ᐃⵠⵠᐃⵠ);
      if (c[12] === 0) {
        kx.ⵠᐃⲆΔⵠ.ᐃⲆⵠΔⲆ = 0;
        nx.ⵠᐃᐃⲆ.restore(c[17]);
        var h = c[14];
        if (h[29]) {
          kx.ᐃΔΔⵠ.ⵠᐃᐃΔΔⲆⲆ(1, 0);
        }
        for (e = 0; e < h.length; e++) {
          if (h[e]) {
            if (e == 29) {
              continue;
            }
            if (e == 7) {
              continue;
            }
            this.ΔᐃⲆⲆⲆⵠⵠ([0, e, h[e]]);
          }
        }
        kx.ⵠᐃⲆΔⵠ.open = false;
      } else {
        if (jx.mode === 4) {
          this.ΔᐃⲆⲆⲆⵠⵠ([0, 238, 1]);
        } else if (jx.mode === 3) {
          if (kx.ⵠⵠⵠⲆᐃΔᐃ) {
            this.ΔᐃⲆⲆⲆⵠⵠ([0, 190, 4]);
          } else {
            this.ΔᐃⲆⲆⲆⵠⵠ([0, 191, 3]);
          }
        }
        if (jx.mode === 0 || jx.mode === 3 || jx.mode === 7 || jx.mode === 4) {
          kx.ⵠᐃⲆΔⵠ.ᐃⲆⵠΔⲆ = new Date().getTime();
          kx.ⵠᐃⲆΔⵠ.open = Ig;
          kx.ⵠᐃⲆΔⵠ.value = c[13];
          nx.ⵠᐃⲆΔⵠ.ᐃᐃᐃⵠΔ();
        } else {
          kx.ⵠᐃⲆΔⵠ.ᐃⲆⵠΔⲆ = 0;
          kx.ⵠᐃⲆΔⵠ.open = T;
          kx.ⵠᐃⲆΔⵠ.value = 0;
        }
        kx.ᐃᐃⵠᐃᐃⵠᐃ = c[12].toString();
      }
      kx.ⲆⲆⵠᐃⲆ.enabled = c[6];
      kx.ⲆⲆⵠᐃⲆ.ᐃⲆⵠΔⲆ = -1;
      kx.ⲆⲆⵠᐃⲆ.label = null;
      kx.ⲆⲆⵠᐃⲆ.now = -1;
      ᐃᐃᐃⲆ.set("starve_token_id", kx.ᐃᐃⵠᐃᐃⵠᐃ);
      if (kx.reconnect.enabled) {
        kx.reconnect.rotate = 0;
        kx.reconnect.enabled = false;
      } else {
        ix.ⲆᐃⵠⵠΔ(nx.ᐃⲆⵠΔΔ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + ix.Ⲇᐃⵠᐃ + "A" + ix.ⵠᐃⲆᐃΔ);
        }
      }
    };
    this.connect = function () {
      b.ΔΔΔᐃⵠⲆⵠ = 0;
      b.ΔΔⵠⲆⵠΔⵠ();
    };
    this.ΔⵠⵠΔⲆΔⲆ = [];
    this.ⲆΔⲆᐃᐃΔᐃᐃⲆ = function (c) {
      const d = b.ᐃⲆⵠⲆⵠ.filter(a => a.gm === c);
      const f = {};
      for (let a = 0; a < d.length; a++) {
        const b = d[a];
        const c = b.r;
        if (c !== undefined) {
          if (jq === f[c]) {
            f[c] = [];
          }
          f[c].push(b);
        }
      }
      function e(d) {
        b.ΔⵠⵠΔⲆΔⲆ[c] = d;
        const e = f[d];
        const g = e[Math.floor(Math.random() * e.length)];
        b.ᐃⲆΔᐃΔᐃΔ({
          domain: wf,
          is_tls: 1,
          id: g.id,
          p: g.p
        });
      }
      if (b.ΔⵠⵠΔⲆΔⲆ[c] !== undefined) {
        e(b.ΔⵠⵠΔⲆΔⲆ[c]);
        return;
      }
      let a = 1;
      function g(b) {
        const c = new sa.XMLHttpRequest();
        const d = b[0];
        const f = d.p;
        const i = d.r;
        const h = f[Math.floor(Math.random() * f.length)];
        c.open("GET", "https://" + h + "." + wf + "/", true);
        c.onreadystatechange = function () {
          if (c.readyState === 4) {
            if (a === 0) {
              return;
            }
            a = 0;
            e(i);
          }
        };
        c.send();
      }
      for (let a in f) {
        g(f[a]);
      }
      sa.setTimeout(function () {
        if (a === 0) {
          return;
        }
        a = 0;
        const b = sa.Object.keys(f);
        e(b[Math.floor(b.length * Math.random())]);
      }, 5000);
    };
    this.ⲆⵠᐃⵠΔΔᐃⲆⵠ = function () {
      let a = Bf.ⲆᐃⲆΔΔᐃΔ[b.ⲆΔⲆΔᐃ];
      console.log(undefined, gs, hj);
      let c = b.ΔⲆⲆⵠⵠⲆⲆ[b.ⲆΔⲆΔᐃ];
      let d = b.ᐃⲆⵠⲆⵠ.find(b => b.gm == a && b.idx == c);
      if (d === undefined) {
        b.ⲆΔⲆᐃᐃΔᐃᐃⲆ(a);
      } else {
        b.ᐃⲆΔᐃΔᐃΔ({
          domain: wf,
          is_tls: 1,
          id: d.id,
          p: d.p
        });
      }
    };
    this.ΔΔⵠⲆⵠΔⵠ = function () {
      console.log(vh);
      if (Cw !== gs && yf !== undefined) {
        console.log(undefined, br, undefined);
        b.ᐃⲆΔᐃΔᐃΔ({
          domain: wf,
          is_tls: 1,
          id: yf + Cw,
          p: b.ⵠᐃⲆⲆΔΔⲆ[yf]
        });
        return;
      }
      if (hj === ff) {
        b.ⲆⵠᐃⵠΔΔᐃⲆⵠ();
      } else {
        b.ᐃⲆΔᐃΔᐃΔ({
          domain: ff.domain,
          is_tls: ff.ssl,
          id: ff.id,
          p: [ff.p]
        });
      }
    };
    this.ᐃⲆΔᐃΔᐃΔ = function (c) {
      let d = c.domain;
      let e = c.is_tls;
      let f = c.id;
      let a = c.p;
      let i = a[Math.floor(Math.random() * a.length)];
      let h = e ? "wss://" + i + "." + d + "/" + f + "?" + kx.ⲆⲆⲆᐃⲆᐃⵠ : "ws://" + d;
      console.log(Aq, Tn);
      b.ΔⲆⵠⲆ = new sa.WebSocket(h);
      b.ΔⲆⵠⲆ.binaryType = "arraybuffer";
      b.ΔⲆⵠⲆ.ΔⵠᐃᐃⲆ = b.ΔⵠᐃᐃⲆ;
      b.ΔⲆⵠⲆ.onmessage = function (a) {
        if (b.ΔⵠᐃᐃⲆ == b.ΔⵠᐃᐃⲆ) {
          if (typeof a.data == "string") {
            var c = JSON.parse(a.data);
            switch (c[0]) {
              case 0:
                b.ᐃⲆΔΔⵠ(c);
                break;
              case 1:
                b.ΔⲆΔⵠⲆΔⵠ(c[1]);
                break;
              case 2:
                b.ΔⲆⲆⲆᐃΔⲆⵠⵠ(c);
                break;
              case 3:
                b.ⲆⵠᐃⵠⵠⲆⵠΔΔ(c);
                break;
              case 4:
                b.message(c[1]);
                break;
              case 5:
                b.ⲆΔⵠᐃⵠᐃⵠ(c);
                break;
              case 6:
                b.ΔᐃᐃᐃⲆΔᐃ(c[1]);
            }
          } else {
            var d = function (b, c, d) {
              const f = new Uint8Array(b);
              const e = f.length;
              let g;
              let h = xf[e];
              let i = Xa;
              if (h === jq) {
                Jf += e * 2;
                if (Jf < 65535) {
                  i = ge(uj(e));
                } else {
                  Jf = e;
                  for (let a = 0; xf.length > a; a++) {
                    if (xf[a] !== undefined) {
                      const b = xf[a][0];
                      xf[a] = undefined;
                      cj(b);
                    }
                  }
                  i = ge(uj(e));
                  de();
                }
                g = mk(i);
                xf[e] = [i, g];
              } else {
                i = h[0];
                g = h[1];
              }
              for (let a = 0; a < f.length; a++) {
                g[a] = f[a];
              }
              Aj(i, c, d);
              for (let a = 0; a < f.length; a++) {
                f[a] = g[a];
              }
              return f;
            }(a.data, kx.ⵠᐃⵠⵠΔᐃᐃ, kx.ᐃᐃΔⲆⲆΔⲆᐃᐃ);
            var e = d.buffer;
            switch (d[0]) {
              case 0:
                b.ⵠⲆⵠ(e, d, Ao);
                break;
              case 1:
                b.ⵠⲆⵠ(e, d, true);
                break;
              case 2:
                b.ᐃⲆᐃΔⲆᐃⲆⵠⵠ();
                break;
              case 3:
                b.ΔᐃⲆⲆⲆⵠⵠ(new Uint16Array(e));
                break;
              case 4:
                b.ⲆⵠⲆⵠΔΔⵠⲆΔ();
                break;
              case 5:
                b.ᐃᐃⵠⵠᐃΔⵠⵠᐃ();
                break;
              case 6:
                b.ⲆⵠⲆᐃⲆᐃⲆΔⵠ();
                break;
              case 7:
                b.ⵠᐃΔᐃΔᐃⲆᐃΔ(e);
                break;
              case 8:
                b.ⵠΔᐃᐃᐃΔᐃΔᐃ(d[1]);
                break;
              case 9:
                b.ΔⵠⲆⵠᐃⲆⵠΔᐃ(d[1]);
                break;
              case 10:
                b.ᐃΔⲆᐃΔΔⲆ();
                break;
              case 11:
                b.ᐃΔᐃΔΔᐃΔ(d[1], d[2]);
                break;
              case 12:
                b.ᐃⲆᐃΔⵠ(d[1]);
                break;
              case 13:
                b.ⲆⲆᐃⵠⵠᐃⵠΔΔ(d, e);
                break;
              case 14:
                b.ⲆⵠⵠᐃΔᐃᐃⵠᐃ();
                break;
              case 15:
                b.ΔⵠᐃᐃⲆⵠᐃᐃΔ(d[1]);
                break;
              case 16:
                b.ᐃⵠⲆⵠ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                break;
              case 17:
                b.ⲆᐃⲆΔⲆᐃᐃⵠᐃ(e);
                break;
              case 18:
                b.ᐃᐃᐃΔᐃΔⲆΔⲆ();
                break;
              case 19:
                b.ⵠᐃᐃⵠⵠ(d[1]);
                break;
              case 20:
                b.ᐃΔⵠⵠⵠⲆᐃᐃⵠ();
                break;
              case 21:
                b.ᐃᐃᐃᐃ(e);
                break;
              case 22:
                b.ⲆⵠⲆΔⵠΔᐃᐃⵠ(d[1]);
                break;
              case 23:
                b.ΔⲆⲆⵠΔΔⲆᐃⲆ(e);
                break;
              case 24:
                b.ΔᐃⲆΔᐃΔⲆⵠⵠ(d[1]);
                break;
              case 25:
                b.ⲆΔΔΔΔΔⵠⵠΔ(d[1], e);
                break;
              case 26:
                b.ᐃΔᐃⵠᐃ(d);
                break;
              case 27:
                b.ΔⲆⲆΔⵠΔⲆᐃΔ();
                break;
              case 28:
                b.ⲆⲆⵠᐃⲆ(d[1]);
                break;
              case 29:
                b.ⵠΔΔΔⲆⲆΔΔⲆ();
                break;
              case 30:
                b.ᐃⵠⵠⵠᐃⲆᐃΔΔ();
                break;
              case 31:
                b.ΔⲆΔΔᐃΔΔⵠΔ(d);
                break;
              case 32:
                b.ⲆⵠΔⲆⲆᐃⵠⲆᐃ(d[1]);
                break;
              case 33:
                b.ΔΔᐃⵠⵠⵠⵠᐃᐃ(d[1]);
                break;
              case 34:
                b.ᐃⵠΔΔⲆⵠΔΔⲆ();
                break;
              case 35:
                b.ᐃᐃᐃΔⲆⵠᐃΔΔ(d[1]);
                break;
              case 36:
                b.ⵠᐃΔᐃᐃΔⵠ(d[1]);
                break;
              case 37:
                b.ⵠⵠᐃΔⲆΔⲆᐃΔ(d[1], d[2]);
                break;
              case 38:
                b.ᐃΔΔⲆᐃⵠⵠᐃⲆ(d[1]);
                break;
              case 39:
                b.ⵠⵠⵠⵠᐃⲆⵠΔΔ(d[1]);
                break;
              case 40:
                b.ⵠᐃⵠᐃⵠⵠᐃⲆΔ();
                break;
              case 41:
                b.ᐃⵠⲆΔᐃⵠⲆⲆᐃ(d);
                break;
              case 42:
                b.ⵠΔⲆⲆΔⲆΔⵠⲆ(d[1]);
                break;
              case 43:
                b.ⲆΔⵠΔⵠⵠⵠΔᐃ(d[1]);
                break;
              case 44:
                b.claimed(d[1]);
                break;
              case 45:
                b.ⵠΔⲆⲆⵠᐃⵠᐃⵠ(d[1]);
                break;
              case 46:
                b.ΔΔⲆⲆⲆⵠᐃⲆⵠ(d[1]);
                break;
              case 47:
                b.ⵠΔΔⵠⲆ(d[1]);
                break;
              case 48:
                b.ⵠᐃⵠΔⵠᐃΔΔᐃ();
                break;
              case 50:
                b.ⵠᐃⵠⵠⲆⲆᐃⵠᐃ(d[1], d[2], d[3]);
                break;
              case 51:
                b.ΔⲆΔΔⲆⲆᐃⲆⲆ();
                break;
              case 52:
                b.ΔΔⲆΔⵠⵠᐃⲆᐃ(d[1]);
                break;
              case 53:
                b.ΔΔᐃΔᐃᐃΔⵠⲆ(d[1]);
                break;
              case 54:
                b.ΔⲆⵠΔⵠᐃᐃΔᐃ();
                break;
              case 55:
                b.ΔⵠⵠΔΔΔᐃⵠⵠ(d[1]);
                break;
              case 56:
                b.ⵠΔΔⵠⲆᐃⲆᐃΔ(d[1]);
                break;
              case 57:
                b.ᐃⵠⵠⵠⵠⵠᐃᐃⵠ();
                break;
              case 58:
                b.ⵠΔΔᐃⵠΔΔⵠᐃ();
                break;
              case 59:
                b.ΔΔΔⵠⲆΔΔⵠΔ();
                break;
              case 60:
                b.ᐃⲆΔⲆⵠⲆΔⲆΔ();
                break;
              case 61:
                kx.ⲆⲆᐃ.ⵠᐃᐃⵠⵠⲆΔ = 0.2;
                kx.ⲆⲆᐃ.ᐃⲆⵠΔⲆ = 3;
                break;
              case 62:
                b.ⲆΔⲆⲆⵠΔᐃᐃᐃ(new Uint16Array(e));
                break;
              case 63:
                b.ᐃⲆⲆⲆⲆⲆⲆᐃᐃ();
                break;
              case 64:
                b.ⵠᐃⲆᐃⲆⲆΔⵠⵠ();
                break;
              case 65:
                b.ᐃⵠᐃΔⵠⵠⲆΔᐃ();
                break;
              case 66:
                b.ⵠᐃⲆⵠⲆᐃᐃΔⲆ();
                break;
              case 67:
                b.ⲆⵠⲆⵠⵠΔⵠⲆᐃ(d[1]);
                break;
              case 68:
                b.ΔⵠᐃⵠΔΔΔⵠΔ(d[1]);
                break;
              case 69:
                b.ΔⵠⵠΔΔΔⵠ(d[1]);
                break;
              case 70:
                b.ⲆΔⵠΔⵠΔΔⲆᐃ(d[1]);
                break;
              case 71:
                b.ⵠΔⵠΔΔ(d[1]);
            }
          }
        }
      };
      b.ΔⲆⵠⲆ.onerror = function () {
        if (kx.reconnect.enabled) {
          sa.setTimeout(b.timeout, 2500);
        }
      };
      this.ΔⲆⵠⲆ.onopen = function () {
        clearTimeout(b.ᐃⵠᐃⵠⵠ);
        kx.ΔⵠᐃⲆΔΔⲆ = kx.ΔⵠᐃⲆΔΔⲆ || ⵠⵠⵠ.ⵠᐃΔᐃⲆⵠⲆ("token");
        ⵠⵠⵠ.ᐃᐃᐃΔᐃΔⵠ().then(a => {
          b.ΔⲆⵠⲆ[pf](vq[Za].stringify([ix.ᐃΔᐃⲆΔ.input.value, screen.width + 200, screen.height + 200, 52, kx.ᐃⵠⵠᐃⵠ, kx.ᐃᐃⵠᐃᐃⵠᐃ, kx.reconnect.enabled ? 1 : 0, ix.Ⲇᐃⵠᐃ, ix.ⵠᐃⲆᐃΔ, ix.ⵠᐃⲆⵠᐃ, ix.ⵠⲆⲆᐃⵠ, ix.ΔᐃᐃⲆᐃ, ix.Ⲇⵠᐃᐃᐃ, Ix === mg ? 0 : Ix, Hx === undefined ? 0 : Hx.substring(Hx.length - 50), Tf, kx.ΔⵠᐃⲆΔΔⲆ, a, kx.ΔⲆⲆⵠⵠΔⵠ, kx.ΔⲆᐃⵠⵠⵠᐃ]));
          kx.ΔⵠᐃⲆΔΔⲆ = undefined;
          kx.ΔⲆⲆⵠⵠΔⵠ = Yk;
          kx.ΔⲆᐃⵠⵠⵠᐃ = mg;
          kx.ⲆⲆⲆᐃⲆᐃⵠ = hj;
          b.ᐃⵠᐃⵠⵠ = setTimeout(b.timeout, 2000);
        });
      };
    };
  }();
  var nx = {
    ⲆΔᐃᐃᐃ: false
  };
  var ox = new function () {
    this.ᐃⲆⵠΔΔ = 0;
    this.loaded = 0;
    this.transition = 0;
    this.ᐃⵠΔⲆᐃⵠΔ = function (a) {
      return a / jx.w * 100;
    };
    this.ΔᐃᐃΔⵠⲆᐃ = function (a) {
      return a / jx.ᐃⵠⵠ * 100;
    };
    this.ⲆᐃⵠⲆᐃⲆⵠ = function (a, b) {
      a = this.ᐃⵠΔⲆᐃⵠΔ(a) - this.ΔᐃΔᐃΔ.x;
      return this.ΔᐃΔᐃΔ.x + b * a;
    };
    this.ΔΔᐃᐃᐃⲆⵠ = function (a, b) {
      a = Math.abs(this.ΔᐃᐃΔⵠⲆᐃ(a) - this.ΔᐃΔᐃΔ.y);
      return this.ΔᐃΔᐃΔ.y + b * a;
    };
    this.sample = {};
    this.ΔⵠΔⲆⵠ = {};
    this.ⲆⲆΔᐃ = {};
    this.ΔⵠⲆⲆⲆΔⵠ = function (b, c, d, e) {
      for (var f = 0; c.length > f; f++) {
        var g = c[f];
        if (!b.playing(g)) {
          b.pos(d, e, -0.5, g);
          b.play(g);
          return Pr;
        }
      }
      return Ao;
    };
    this.ᐃⵠΔ = function (a, b, c, d) {
      c = this.ⲆᐃⵠⲆᐃⲆⵠ(c, ᐃΔΔᐃⲆ.ᐃᐃⵠⲆᐃⲆⵠ);
      d = this.ΔΔᐃᐃᐃⲆⵠ(d, ᐃΔΔᐃⲆ.ᐃᐃⵠⲆᐃⲆⵠ);
      console.log("HIT", a, b, c, d, ᐃΔΔᐃⲆ.ᐃᐃⵠⲆᐃⲆⵠ);
      if (a) {
        if (b === 1) {
          this.ΔⵠⲆⲆⲆΔⵠ(this.ⲆⲆΔᐃ.Ⲇⵠᐃᐃᐃⵠᐃ, this.sample.Ⲇⵠᐃᐃᐃⵠᐃ, c, d);
        } else if (b === 0) {
          this.ΔⵠⲆⲆⲆΔⵠ(this.ⲆⲆΔᐃ.ᐃⵠⲆⲆΔⲆⵠ, this.sample.ᐃⵠⲆⲆΔⲆⵠ, c, d);
        }
      } else {
        this.ΔⵠⲆⲆⲆΔⵠ(this.ⲆⲆΔᐃ.ⲆᐃⲆᐃⲆ, this.sample.ⲆᐃⲆᐃⲆ, c, d);
      }
    };
    this.ΔᐃΔᐃΔ = {
      y: 0,
      x: 0
    };
    this.Ⲇᐃⵠᐃᐃᐃᐃ = {
      x: 0,
      y: 0
    };
    this.ᐃᐃⵠᐃᐃ = {};
    this.ⲆⲆⵠⲆ = [];
    this.ᐃᐃⲆᐃⵠ = function (a, b) {
      for (var c in this.ᐃᐃⵠᐃᐃ) {
        var d = this.ᐃᐃⵠᐃᐃ[c];
        d.check(a);
        if (d.ᐃΔⵠΔΔⵠΔ) {
          if (jx.ᐃᐃΔⵠΔ.now < 460000) {
            d.ⵠⲆⵠᐃᐃ();
          }
          if (b) {
            d.ᐃⲆᐃ(a, this.ΔᐃΔᐃΔ);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= 0;
    };
    this.ⲆᐃᐃⵠⵠⲆᐃⲆᐃ = function () {
      var a = [];
      for (var b = 0; b < this.ⲆⲆⵠⲆ.length; b++) {
        if ((e = this.ⲆⲆⵠⲆ[b]).ⲆᐃⲆᐃᐃᐃⲆ) {
          a.push(b);
        } else if (!e.ⲆᐃⲆᐃᐃᐃⲆ && !jx.ΔⲆᐃΔⲆ[e.ᐃⲆΔⵠ]) {
          e.ᐃΔⲆⲆⵠΔᐃ();
          a.push(b);
        }
      }
      var c = jx.ⵠⲆⵠ[0];
      var d = 0;
      for (b = 0; c.length > b && a.length > d; b++) {
        var e = c[b];
        if ((jx.mode != 1 || jx.ⲆⲆⵠⲆ[e.id].ᐃΔᐃⲆΔ !== "spectator") && e.ⵠΔΔⲆⵠ === -1 && kx.ᐃⲆΔⵠ !== e.ᐃⲆΔⵠ) {
          this.ⲆⲆⵠⲆ[a[d]].ᐃᐃᐃⵠΔ(e.ᐃⲆΔⵠ);
          d++;
        }
      }
    };
    this.ⵠⲆᐃᐃⲆⲆᐃᐃⲆ = function () {
      this.ⲆᐃᐃⵠⵠⲆᐃⲆᐃ();
      for (var a = 0; a < this.ⲆⲆⵠⲆ.length; a++) {
        var b = this.ⲆⲆⵠⲆ[a];
        if (!b.ⲆᐃⲆᐃᐃᐃⲆ && b.check()) {
          b.ᐃⲆᐃ();
        }
      }
    };
    this.ΔⵠⵠⲆⵠⵠΔⲆⵠ = function (a) {
      if (this.Ⲇᐃⵠᐃᐃᐃᐃ.x === a.x && a.y === this.Ⲇᐃⵠᐃᐃᐃᐃ.y) {
        return 0;
      } else {
        this.Ⲇᐃⵠᐃᐃᐃᐃ.x = a.x;
        this.Ⲇᐃⵠᐃᐃᐃᐃ.y = a.y;
        this.ΔᐃΔᐃΔ.x = this.ᐃⵠΔⲆᐃⵠΔ(a.x);
        this.ΔᐃΔᐃΔ.y = this.ΔᐃᐃΔⵠⲆᐃ(a.y);
        Howler.pos(this.ΔᐃΔᐃΔ.x, this.ΔᐃΔᐃΔ.y, 0);
        return 1;
      }
    };
    this.ⲆΔᐃⲆⲆΔⵠⵠΔ = function () {
      if (this.ᐃⲆⵠΔΔ && this.loaded) {
        var a = jx.ΔⲆᐃΔⲆ[kx.ᐃⲆΔⵠ];
        if (a) {
          a.ⵠΔΔⲆⵠ = 0;
          var b = this.ΔⵠⵠⲆⵠⵠΔⲆⵠ(a);
          if (jx.mode !== 2 && jx.mode !== 4 && jx.mode !== 5) {
            this.ᐃᐃⲆᐃⵠ(a, b);
          }
          this.ⵠⲆᐃᐃⲆⲆᐃᐃⲆ();
        }
      }
    };
    this.ᐃⲆⲆΔΔⵠⲆⲆᐃ = function () {
      for (var b in bx) {
        var c = bx[b];
        if (typeof c === "object" && c.path) {
          c.ΔΔⲆΔᐃ = new Howl({
            src: c.path,
            volume: 0,
            sprite: c.ⲆΔ
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(jq);
          for (var h = 0; h < f; h++) {
            var j = c.ΔΔⲆΔᐃ.play(d);
            c.ΔΔⲆΔᐃ.stop(j);
            c.ΔΔⲆΔᐃ.on("fade", function (a) {
              if (!this.volume(a)) {
                console.log(undefined, undefined);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > 1) {
            ox.sample[d] = g;
          } else {
            ox.sample[d] = g[0];
          }
          ox.ⲆⲆΔᐃ[d] = c.ΔΔⲆΔᐃ;
        }
      }
    };
    this.ᐃᐃⵠⲆⲆᐃΔ = function (a, b, c) {
      for (var d = 0; a.length > d; d++) {
        b.volume(c, a[d]);
      }
    };
    this.ᐃⲆΔΔⲆΔΔ = function (b, c, d, e, f, i) {
      var a = b;
      for (var j = 0; d > j; j++) {
        var k = a[j] = [];
        for (ⵠΔⵠ = 0; e > ⵠΔⵠ; ⵠΔⵠ++) {
          k[ⵠΔⵠ] = ox.sample[f + ⵠΔⵠ][j];
          c.ΔΔⲆΔᐃ.volume(i, k[ⵠΔⵠ]);
        }
      }
    };
    this.ᐃᐃᐃⵠΔ = function () {
      ox.ᐃⲆⲆΔΔⵠⲆⲆᐃ();
      ox.ΔⵠΔⲆⵠ.ΔⲆΔⲆΔᐃΔ = [];
      ox.ΔⵠΔⲆⵠ.ⲆᐃⵠΔᐃ = [];
      ox.ΔⵠΔⲆⵠ.ᐃᐃᐃⵠⲆ = [];
      ox.ᐃⲆΔΔⲆΔΔ(ox.ΔⵠΔⲆⵠ.ΔⲆΔⲆΔᐃΔ, bx.ᐃᐃⵠΔⵠΔΔ, 8, 3, "p", 0.15);
      ox.ᐃⲆΔΔⲆΔΔ(ox.ΔⵠΔⲆⵠ.ⲆᐃⵠΔᐃ, bx.ΔⲆᐃⵠⲆᐃⵠ, 8, 4, "w", 0.15);
      ox.ᐃⲆΔΔⲆΔΔ(ox.ΔⵠΔⲆⵠ.ᐃᐃᐃⵠⲆ, bx.ᐃΔⵠΔⵠΔⲆ, 8, 3, "d", 0.09);
      ox.ᐃᐃⵠⲆⲆᐃΔ(ox.sample.ⲆᐃⲆᐃⲆ, ox.ⲆⲆΔᐃ.ⲆᐃⲆᐃⲆ, 0.15);
      ox.ᐃᐃⵠⲆⲆᐃΔ(ox.sample.ᐃⵠⲆⲆΔⲆⵠ, ox.ⲆⲆΔᐃ.ᐃⵠⲆⲆΔⲆⵠ, 0.2);
      ox.ᐃᐃⵠⲆⲆᐃΔ(ox.sample.Ⲇⵠᐃᐃᐃⵠᐃ, ox.ⲆⲆΔᐃ.Ⲇⵠᐃᐃᐃⵠᐃ, 1);
      ox.ᐃᐃⵠᐃᐃ.ᐃΔⵠΔΔᐃΔᐃᐃ = new dx(12, this.sample.ᐃⵠⵠᐃⵠᐃⲆ, this.sample.ⵠⲆⲆⵠᐃᐃⵠ, 5000, 0.05, 0.4, bx.ᐃᐃⲆΔⲆⲆᐃ.ΔΔⲆΔᐃ, 3000, {
        x: Nr.ΔΔΔⲆᐃΔᐃ,
        y: Nr.ΔΔΔⲆⲆⵠΔ,
        w: jx.w,
        ᐃⵠⵠ: jx.ᐃⵠⵠ
      }, {
        x: Nr.ΔΔΔⲆᐃΔᐃ - 2300,
        y: Nr.ΔΔΔⲆⲆⵠΔ - 4000,
        w: jx.w,
        ᐃⵠⵠ: jx.ᐃⵠⵠ
      }, {
        x: Nr.ΔΔΔⲆᐃΔᐃ - 1500,
        y: Nr.ΔΔΔⲆⲆⵠΔ - 2000,
        w: jx.w,
        ᐃⵠⵠ: jx.ᐃⵠⵠ
      });
      ox.ᐃᐃⵠᐃᐃ.ᐃⵠΔⵠⲆᐃΔΔᐃ = new dx(12, this.sample.ΔⲆᐃΔᐃΔⲆ, this.sample.ⲆᐃᐃⲆΔᐃΔ, 5000, 0.03, 0.25, bx.ᐃᐃⲆΔⲆⲆᐃ.ΔΔⲆΔᐃ, 3000, {
        x: 0,
        y: Nr.ΔΔΔⲆⲆⵠΔ + 800,
        w: Nr.ΔΔΔⲆᐃΔᐃ - 2300,
        ᐃⵠⵠ: jx.ᐃⵠⵠ
      }, {
        x: -100,
        y: Nr.ΔΔΔⲆⲆⵠΔ - 300,
        w: Nr.ΔΔΔⲆᐃΔᐃ - 100,
        ᐃⵠⵠ: jx.ᐃⵠⵠ
      }, {
        x: -100,
        y: Nr.ΔΔΔⲆⲆⵠΔ + 400,
        w: Nr.ΔΔΔⲆᐃΔᐃ - 1400,
        ᐃⵠⵠ: jx.ᐃⵠⵠ
      });
      ox.ᐃᐃⵠᐃᐃ.ᐃⵠᐃⵠⵠⵠⵠ = new dx(12, this.sample.ⵠⵠⲆᐃⵠΔⲆ, this.sample.ΔⵠⵠᐃⲆᐃᐃ, 5000, 0.01, 0.22, bx.ᐃᐃⲆΔⲆⲆᐃ.ΔΔⲆΔᐃ, 3000, {
        x: -100,
        y: -100,
        w: jx.w + 200,
        ᐃⵠⵠ: Nr.ΔΔΔⲆⲆⵠΔ - 1000
      }, {
        x: -100,
        y: -100,
        w: jx.w + 200,
        ᐃⵠⵠ: Nr.ΔΔΔⲆⲆⵠΔ + 600
      }, {
        x: -100,
        y: -100,
        w: jx.w + 200,
        ᐃⵠⵠ: Nr.ΔΔΔⲆⲆⵠΔ + 100
      });
      for (var a = 0; a < 8; a++) {
        ox.ⲆⲆⵠⲆ[a] = new fx(a);
      }
      ox.ⲆⲆⵠⲆ[0].ᐃᐃᐃⵠΔ(kx.ᐃⲆΔⵠ);
      ox.loaded = 1;
    };
    this.ᐃⲆⵠᐃΔᐃⲆΔⵠ = function () {
      if (!this.transition && jx.ᐃᐃΔⵠΔ.now < 460000) {
        this.transition = 1;
      }
    };
    this.ⲆᐃⵠⵠΔ = function () {
      if (this.ᐃⲆⵠΔΔ && this.loaded) {
        for (var a in ox.sample) {
          var b = ox.sample[a];
          if (typeof b === "object") {
            for (var c = 0; c < b.length; c++) {
              ox.ⲆⲆΔᐃ[a].stop(b[c]);
            }
          } else {
            ox.ⲆⲆΔᐃ[a].stop(b);
          }
        }
        for (c = 0; c < ox.ⲆⲆⵠⲆ.length; c++) {
          ox.ⲆⲆⵠⲆ[c].ᐃΔⲆⲆⵠΔᐃ();
        }
      }
    };
    this.select = function () {
      if (ox.ᐃⲆⵠΔΔ) {
        ox.ⲆᐃⵠⵠΔ();
      } else {
        if (!ox.loaded) {
          ox.ᐃᐃᐃⵠΔ();
        }
        ox.ⲆⲆⵠⲆ[0].ᐃⲆΔⵠ = kx.ᐃⲆΔⵠ;
        ox.ⲆⲆⵠⲆ[0].ⲆᐃⲆᐃᐃᐃⲆ = 0;
        ox.ᐃⲆⵠᐃΔᐃⲆΔⵠ();
      }
      ox.ᐃⲆⵠΔΔ = !ox.ᐃⲆⵠΔΔ;
    };
  }();
  var px = new function () {
    this.ᐃᐃⵠᐃᐃᐃⵠ = function () {
      this.ΔᐃΔⵠᐃ = 81;
      this.ⵠᐃᐃΔⵠ = 68;
      this.ⵠΔΔᐃΔ = 90;
      this.ⲆΔᐃΔᐃⵠⲆ = 83;
    };
    this.ⵠΔΔᐃᐃᐃⲆ = function () {
      this.ΔᐃΔⵠᐃ = 65;
      this.ⵠᐃᐃΔⵠ = 68;
      this.ⵠΔΔᐃΔ = 87;
      this.Δᐃᐃᐃᐃ = 83;
    };
    this.ΔⲆᐃᐃΔ = 0;
    this.ⲆΔᐃΔᐃⵠⲆ = 1;
    this.ⵠⲆⵠᐃⵠᐃⲆ = 49;
    this.ΔⵠΔⲆⵠΔⵠ = 50;
    this.ΔΔⵠⲆΔΔΔ = 51;
    this.ΔⲆⲆⲆⲆⵠᐃ = 52;
    this.ΔⲆⵠⵠᐃΔⵠᐃⲆ = 53;
    this.ⲆΔΔⵠᐃᐃⵠ = 17;
    this.ⲆΔᐃⵠⲆᐃⵠ = 37;
    this.ᐃᐃΔᐃᐃⲆΔ = 39;
    this.ᐃⲆⵠⵠᐃᐃⵠ = 38;
    this.ΔᐃⵠᐃⵠΔⵠ = 40;
    this.ᐃᐃⲆᐃⲆᐃᐃ = 32;
    this.ΔⲆᐃΔΔᐃᐃ = 82;
    this.ⲆⵠⲆⵠΔΔΔ = 71;
    this.ΔΔᐃⵠⵠⵠΔ = 86;
    this.ⵠΔⵠΔⵠⵠⵠ = 66;
    this.ⵠΔΔᐃᐃᐃⲆ();
    this.keys = new Array(255);
    for (var a = 0; a < 255; a++) {
      this.keys[a] = this.ΔⲆᐃᐃΔ;
    }
    this.up = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      this.keys[b] = this.ΔⲆᐃᐃΔ;
    };
    this.down = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      if (b == this.ΔᐃΔⵠᐃ || this.ⲆΔᐃⵠⲆᐃⵠ == b) {
        this.ᐃⵠⲆⵠΔᐃⲆ();
      } else if (this.ⵠΔΔᐃΔ == b || b == this.ᐃⲆⵠⵠᐃᐃⵠ) {
        this.ΔᐃᐃᐃΔᐃΔ();
      } else if (b == this.ⲆΔᐃΔᐃⵠⲆ || b == this.ⵠΔΔΔΔΔΔΔᐃ) {
        this.ⵠᐃΔᐃⵠⵠΔ();
      } else if (this.ⵠᐃᐃΔⵠ == b || b == this.ᐃᐃΔᐃᐃⲆΔ) {
        this.ᐃΔⲆⵠⲆⲆΔ();
      }
      this.keys[b] = this.ⲆΔᐃΔᐃⵠⲆ;
      return b;
    };
    this.ᐃⵠⲆⵠΔᐃⲆ = function () {
      this.keys[this.ⵠᐃᐃΔⵠ] = this.ΔⲆᐃᐃΔ;
      this.keys[this.ᐃᐃΔᐃᐃⲆΔ] = this.ΔⲆᐃᐃΔ;
    };
    this.ᐃΔⲆⵠⲆⲆΔ = function () {
      this.keys[this.ΔᐃΔⵠᐃ] = this.ΔⲆᐃᐃΔ;
      this.keys[this.ⲆΔᐃⵠⲆᐃⵠ] = this.ΔⲆᐃᐃΔ;
    };
    this.ⵠᐃΔᐃⵠⵠΔ = function () {
      this.keys[this.ⵠΔΔᐃΔ] = this.ΔⲆᐃᐃΔ;
      this.keys[this.ᐃⲆⵠⵠᐃᐃⵠ] = this.ΔⲆᐃᐃΔ;
    };
    this.ΔᐃᐃᐃΔᐃΔ = function () {
      this.keys[this.Δᐃᐃᐃᐃ] = this.ΔⲆᐃᐃΔ;
      this.keys[this.ΔᐃⵠᐃⵠΔⵠ] = this.ΔⲆᐃᐃΔ;
    };
    this.ΔᐃⵠⲆΔⵠΔ = function () {
      this.keys[this.ⵠᐃᐃΔⵠ] = this.ΔⲆᐃᐃΔ;
      this.keys[this.ᐃᐃΔᐃᐃⲆΔ] = this.ΔⲆᐃᐃΔ;
      this.keys[this.ΔᐃΔⵠᐃ] = this.ΔⲆᐃᐃΔ;
      this.keys[this.ⲆΔᐃⵠⲆᐃⵠ] = this.ΔⲆᐃᐃΔ;
      this.keys[this.ⵠΔΔᐃΔ] = this.ΔⲆᐃᐃΔ;
      this.keys[this.ᐃⲆⵠⵠᐃᐃⵠ] = this.ΔⲆᐃᐃΔ;
      this.keys[this.Δᐃᐃᐃᐃ] = this.ΔⲆᐃᐃΔ;
      this.keys[this.ΔᐃⵠᐃⵠΔⵠ] = this.ΔⲆᐃᐃΔ;
    };
    this.ⵠⵠⲆⵠⲆΔᐃ = function () {
      return this.keys[this.ΔᐃΔⵠᐃ] || this.keys[this.ⲆΔᐃⵠⲆᐃⵠ];
    };
    this.ⲆⲆⲆᐃᐃⲆΔ = function () {
      return this.keys[this.ⵠᐃᐃΔⵠ] || this.keys[this.ᐃᐃΔᐃᐃⲆΔ];
    };
    this.ᐃⲆΔⲆᐃⵠⵠ = function () {
      return this.keys[this.ⵠΔΔᐃΔ] || this.keys[this.ᐃⲆⵠⵠᐃᐃⵠ];
    };
    this.ΔⵠᐃᐃⵠⲆᐃ = function () {
      return this.keys[this.Δᐃᐃᐃᐃ] || this.keys[this.ΔᐃⵠᐃⵠΔⵠ];
    };
    this.ⲆΔⲆⵠΔΔⲆΔⵠ = function () {
      return this.keys[this.ⲆΔΔⵠᐃᐃⵠ];
    };
    this.ⲆᐃᐃⵠᐃⲆⲆⵠⵠ = function () {
      return this.keys[this.ⵠⲆⵠᐃⵠᐃⲆ];
    };
    this.ⵠᐃΔΔᐃΔⲆⲆⲆ = function () {
      return this.keys[this.ΔⵠΔⲆⵠΔⵠ];
    };
    this.ΔⲆⵠᐃⲆⵠΔⲆᐃ = function () {
      return this.keys[this.ΔΔⵠⲆΔΔΔ];
    };
    this.ⲆᐃⵠᐃᐃΔⵠⲆⲆ = function () {
      return this.keys[this.ΔⲆⲆⲆⲆⵠᐃ];
    };
    this.ΔΔᐃᐃΔⲆΔⲆⵠ = function () {
      return this.keys[this.ᐃᐃⲆᐃⲆᐃᐃ];
    };
    this.ⵠΔⵠᐃᐃⲆᐃⲆᐃ = function () {
      return this.keys[this.ΔⲆᐃΔΔᐃᐃ];
    };
    this.ⲆΔᐃⵠⵠᐃⵠⵠᐃ = function () {
      return this.keys[this.ⲆⵠⲆⵠΔΔΔ];
    };
    this.ⲆⲆΔⵠⲆᐃΔΔΔ = function () {
      return this.keys[this.ΔΔᐃⵠⵠⵠΔ];
    };
    this.ⲆΔⵠΔⲆᐃⲆΔᐃ = function () {
      return this.keys[this.ⵠΔⵠΔⵠⵠⵠ];
    };
  }();
  var qx = new function () {
    this.ⲆΔᐃΔᐃⵠⲆ = 0;
    this.ΔⲆᐃᐃΔ = 1;
    this.IDLE = 2;
    this.ΔⲆⲆᐃⲆΔᐃ = 0;
    this.ΔⲆⵠΔⲆⵠⵠⵠΔ = 1;
    this.ΔᐃΔⲆ = {
      x: 0,
      y: 0
    };
    this.ΔᐃΔᐃⵠⲆⵠ = 0;
    this.ⵠⲆⵠⵠⵠΔΔ = 0;
    this.angle = 0;
    this.state = this.IDLE;
    this.ⵠΔᐃΔ = this.ΔⲆⲆᐃⲆΔᐃ;
    this.down = function () {
      this.state = this.ⲆΔᐃΔᐃⵠⲆ;
    };
    this.up = function () {
      this.state = this.ΔⲆᐃᐃΔ;
    };
    this.ᐃⲆᐃ = function () {
      if (this.ΔᐃΔᐃⵠⲆⵠ != this.ΔᐃΔⲆ.x || this.ΔᐃΔⲆ.y != this.ⵠⲆⵠⵠⵠΔΔ) {
        this.ΔᐃΔᐃⵠⲆⵠ = this.ΔᐃΔⲆ.x;
        this.ⵠⲆⵠⵠⵠΔΔ = this.ΔᐃΔⲆ.y;
        return fe;
      } else {
        return vn;
      }
    };
  }();
  var rx = 0;
  var sx = 0;
  var tx = new function (d, e, f) {
    this.Δᐃ = d;
    this.Ⲇ = e;
    this.ᐃⲆⵠⲆᐃⵠⲆ = {
      translate: {
        y: 0,
        x: 0
      },
      style: document.getElementById("loading").style,
      ᐃⲆᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ᐃⲆⵠⲆᐃⵠⲆ.style.position = "absolute";
    this.ᐃⲆⵠⲆᐃⵠⲆ.style.display = "inline-block";
    this.ᐃⲆⵠⲆᐃⵠⲆ.ᐃⲆᐃ();
    this.ⲆΔᐃᐃᐃ = dg;
    this.stop = function () {
      this.ⲆΔᐃᐃᐃ = Eh;
    };
    this.ΔⵠⲆΔᐃᐃⲆ = {
      total: 1
    };
    var i = this;
    function j() { }
    var k = 0;
    function n(a) {
      if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
        return 1;
      } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
        return 0;
      } else {
        return 1;
      }
    }
    this.Ⲇᐃⵠⵠᐃ = function () {
      i.ᐃⲆᐃ();
      if (++k == 40) {
        i.stop();
        j();
        return;
      }
      sa.setTimeout(i.Ⲇᐃⵠⵠᐃ, 33);
    };
    this.ⲆᐃⵠⵠΔ = function (a) {
      j = a;
      i.Ⲇᐃⵠⵠᐃ();
    };
    new Date().getTime();
    Object.keys(ᐃΔ).length;
    console.log(undefined, undefined);
    for (var h in ᐃΔ) {
      if (n(ᐃΔ[h]) === 0) {
        0;
      }
    }
    console.log(w, undefined);
    function o() {
      if (this.ⲆⵠⵠΔᐃΔΔ !== 0) {
        return this.ⲆⵠⵠΔᐃΔΔ;
      } else {
        this.ⲆⵠⵠΔᐃΔΔ = 2;
        this.src = this.ⲆΔⲆⵠᐃ;
        return 0;
      }
    }
    function l(a) {
      this.ⲆⵠⵠΔᐃΔΔ = 1;
    }
    var q = 0;
    function s() {
      console.log(vh);
      if (q !== 1) {
        q = 1;
        console.log(undefined);
        if (fb !== dt) {
          dt();
        }
        fb();
        var a = ⵠⵠⵠ.ⵠᐃΔᐃⲆⵠⲆ("server");
        if (a !== null) {
          mx.ⲆΔᐃᐃᐃᐃⵠ = 1;
          mx.ᐃⲆⵠⲆⵠ = [{
            nu: 0,
            m: 100,
            i: "server" + a + ".starve.io",
            p: 443,
            a: a,
            ssl: 1
          }];
        }
        mx.ΔⵠᐃΔΔᐃⲆⵠⵠ();
        setTimeout(f, 100);
      }
    }
    function t() {
      let a = function () {
        mx.ᐃⵠⵠᐃⲆΔΔ(s);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, 100);
        } else {
          setTimeout(t, 100);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function m() {
      this.ⵠΔⵠⵠⲆᐃⲆ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ⵠΔⵠⵠⲆᐃⲆ}`, this);
      if (this.ⵠΔⵠⵠⲆᐃⲆ > 3) {
        console.warn("Failed to load image too many times");
      }
      var a = this.ⵠΔⵠⵠⲆᐃⲆ;
      var b = this.src;
      var c = n(b) === 0 ? 10000 : 2000;
      setTimeout(function () {
        for (var c in ⲆΔΔΔⲆⵠᐃ) {
          if (b.indexOf(ⲆΔΔΔⲆⵠᐃ[c]) !== -1) {
            ᐃΔ[c] = new Image();
            ᐃΔ[c].onload = l;
            ᐃΔ[c].onerror = m;
            ᐃΔ[c].ⵠΔⵠⵠⲆᐃⲆ = a;
            ᐃΔ[c].src = b;
            break;
          }
        }
      }, c);
    }
    function c(a) {
      for (var b in ᐃΔ) {
        var c = ᐃΔ[b];
        if (typeof c === "string" && n(c) === a) {
          ᐃΔ[b] = new Image();
          ᐃΔ[b].ⲆⵠⵠΔᐃΔΔ = 0;
          ᐃΔ[b].ⵠΔⵠⵠⲆᐃⲆ = 0;
          ᐃΔ[b].onload = l;
          ᐃΔ[b].onerror = m;
          ᐃΔ[b].ⵠΔΔⵠΔⵠⲆ = o;
          ᐃΔ[b].ⲆΔⲆⵠᐃ = c;
        }
      }
    }
    c(1);
    c(0);
    ou(1, "l", 20, "#000");
    mp();
    this.ᐃⲆᐃ = function () {
      this.ᐃⲆⵠⲆᐃⵠⲆ.translate.x = (so - 500) / 2;
      this.ᐃⲆⵠⲆᐃⵠⲆ.translate.y = (yo - 150) / 2;
      var a = 2500 / (40 - k + 1) - 48;
      this.ᐃⲆⵠⲆᐃⵠⲆ.translate.y -= a;
      this.ᐃⲆⵠⲆᐃⵠⲆ.ᐃⲆᐃ();
    };
    this.ᐃⲆⵠⲆᐃⵠⲆ.ᐃⲆᐃ();
    this.ⵠⵠⲆⵠ = function () {
      try {
        np();
      } catch (a) { }
      this.ᐃⲆᐃ();
    };
  }(co, oo, function () {
    Xc();
    nx = new Mw(co, oo);
    (ix = new Ow(co, oo)).ⵠΔⵠΔⲆΔⲆⲆᐃ();
    lx = new Kw(co, oo);
    jx = new _f();
    kx = new Yf();
    tx.ⲆᐃⵠⵠΔ(function () {
      tx.ᐃⲆⵠⲆᐃⵠⲆ.style.display = "none";
      ix.ᐃⲆⵠΔΔ();
    });
  });
  function ux() {
    try {
      sa.Widget.adsRefresh();
    } catch (a) { }
  }
  sa.onbeforeunload = function () {
    if (nx.ⲆΔᐃᐃᐃ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  er();
  (function b(a) {
    sa.requestAnimationFrame(b);
    sx = (a - rx) / 1000;
    rx = a;
    sx = sx > 1 ? 1 : sx;
    if (nx.ⲆΔᐃᐃᐃ) {
      nx.ⵠⵠⲆⵠ();
    } else {
      oo.clearRect(0, 0, so, yo);
      if (tx.ⲆΔᐃᐃᐃ) {
        tx.ⵠⵠⲆⵠ();
      } else if (ix.ⲆΔᐃᐃᐃ) {
        ix.ⵠⵠⲆⵠ();
      } else if (lx.ⲆΔᐃᐃᐃ) {
        lx.ⵠⵠⲆⵠ();
      }
    }
  })(0);
  const [workerTimersSetInterval, unusedWorkerTimersSetTimeout] = (() => {
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __commonJS = (cb, mod) => function __require() {
      return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));

    // node_modules/fast-unique-numbers/build/es5/bundle.js
    var require_bundle = __commonJS({
      "node_modules/fast-unique-numbers/build/es5/bundle.js"(exports, module) {
        (function (global, factory) {
          typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.fastUniqueNumbers = {}));
        })(exports, function (exports2) {
          "use strict";
          var createAddUniqueNumber = function createAddUniqueNumber2(generateUniqueNumber3) {
            return function (set) {
              var number = generateUniqueNumber3(set);
              set.add(number);
              return number;
            };
          };
          var createCache = function createCache2(lastNumberWeakMap) {
            return function (collection, nextNumber) {
              lastNumberWeakMap.set(collection, nextNumber);
              return nextNumber;
            };
          };
          var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER === void 0 ? 9007199254740991 : Number.MAX_SAFE_INTEGER;
          var TWO_TO_THE_POWER_OF_TWENTY_NINE = 536870912;
          var TWO_TO_THE_POWER_OF_THIRTY = TWO_TO_THE_POWER_OF_TWENTY_NINE * 2;
          var createGenerateUniqueNumber = function createGenerateUniqueNumber2(cache2, lastNumberWeakMap) {
            return function (collection) {
              var lastNumber = lastNumberWeakMap.get(collection);
              var nextNumber = lastNumber === void 0 ? collection.size : lastNumber < TWO_TO_THE_POWER_OF_THIRTY ? lastNumber + 1 : 0;
              if (!collection.has(nextNumber)) {
                return cache2(collection, nextNumber);
              }
              if (collection.size < TWO_TO_THE_POWER_OF_TWENTY_NINE) {
                while (collection.has(nextNumber)) {
                  nextNumber = Math.floor(Math.random() * TWO_TO_THE_POWER_OF_THIRTY);
                }
                return cache2(collection, nextNumber);
              }
              if (collection.size > MAX_SAFE_INTEGER) {
                throw new Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
              }
              while (collection.has(nextNumber)) {
                nextNumber = Math.floor(Math.random() * MAX_SAFE_INTEGER);
              }
              return cache2(collection, nextNumber);
            };
          };
          var LAST_NUMBER_WEAK_MAP = /* @__PURE__ */ new WeakMap();
          var cache = createCache(LAST_NUMBER_WEAK_MAP);
          var generateUniqueNumber2 = createGenerateUniqueNumber(cache, LAST_NUMBER_WEAK_MAP);
          var addUniqueNumber = createAddUniqueNumber(generateUniqueNumber2);
          exports2.addUniqueNumber = addUniqueNumber;
          exports2.generateUniqueNumber = generateUniqueNumber2;
        });
      }
    });

    // node_modules/worker-timers-broker/build/es2019/module.js
    var import_fast_unique_numbers = __toESM(require_bundle());

    // node_modules/worker-timers-broker/build/es2019/guards/call-notification.js
    var isCallNotification = (message) => {
      return message.method !== void 0 && message.method === "call";
    };

    // node_modules/worker-timers-broker/build/es2019/guards/clear-response.js
    var isClearResponse = (message) => {
      return typeof message.id === "number" && typeof message.result === "boolean";
    };

    // node_modules/worker-timers-broker/build/es2019/module.js
    var load = (url) => {
      const scheduledIntervalFunctions = /* @__PURE__ */ new Map([[0, () => {
      }]]);
      const scheduledTimeoutFunctions = /* @__PURE__ */ new Map([[0, () => {
      }]]);
      const unrespondedRequests = /* @__PURE__ */ new Map();
      const worker2 = new Worker(url);
      worker2.addEventListener("message", ({ data }) => {
        if (isCallNotification(data)) {
          const { params: { timerId, timerType } } = data;
          if (timerType === "interval") {
            const idOrFunc = scheduledIntervalFunctions.get(timerId);
            if (typeof idOrFunc === void 0) {
              throw new Error("The timer is in an undefined state.");
            }
            if (typeof idOrFunc === "number") {
              const timerIdAndTimerType = unrespondedRequests.get(idOrFunc);
              if (timerIdAndTimerType === void 0 || timerIdAndTimerType.timerId !== timerId || timerIdAndTimerType.timerType !== timerType) {
                throw new Error("The timer is in an undefined state.");
              }
            } else if (typeof idOrFunc === "function") {
              idOrFunc();
            }
          } else if (timerType === "timeout") {
            const idOrFunc = scheduledTimeoutFunctions.get(timerId);
            if (typeof idOrFunc === void 0) {
              throw new Error("The timer is in an undefined state.");
            }
            if (typeof idOrFunc === "number") {
              const timerIdAndTimerType = unrespondedRequests.get(idOrFunc);
              if (timerIdAndTimerType === void 0 || timerIdAndTimerType.timerId !== timerId || timerIdAndTimerType.timerType !== timerType) {
                throw new Error("The timer is in an undefined state.");
              }
            } else if (typeof idOrFunc === "function") {
              idOrFunc();
              scheduledTimeoutFunctions.delete(timerId);
            }
          }
        } else if (isClearResponse(data)) {
          const { id } = data;
          const timerIdAndTimerType = unrespondedRequests.get(id);
          if (timerIdAndTimerType === void 0) {
            throw new Error("The timer is in an undefined state.");
          }
          const { timerId, timerType } = timerIdAndTimerType;
          unrespondedRequests.delete(id);
          if (timerType === "interval") {
            scheduledIntervalFunctions.delete(timerId);
          } else {
            scheduledTimeoutFunctions.delete(timerId);
          }
        } else {
          const { error: { message } } = data;
          throw new Error(message);
        }
      });
      const clearInterval = (timerId) => {
        if (typeof scheduledIntervalFunctions.get(timerId) === "function") {
          const id = (0, import_fast_unique_numbers.generateUniqueNumber)(unrespondedRequests);
          unrespondedRequests.set(id, { timerId, timerType: "interval" });
          scheduledIntervalFunctions.set(timerId, id);
          worker2.postMessage({
            id,
            method: "clear",
            params: { timerId, timerType: "interval" }
          });
        }
      };
      const clearTimeout = (timerId) => {
        if (typeof scheduledTimeoutFunctions.get(timerId) === "function") {
          const id = (0, import_fast_unique_numbers.generateUniqueNumber)(unrespondedRequests);
          unrespondedRequests.set(id, { timerId, timerType: "timeout" });
          scheduledTimeoutFunctions.set(timerId, id);
          worker2.postMessage({
            id,
            method: "clear",
            params: { timerId, timerType: "timeout" }
          });
        }
      };
      const setInterval2 = (func, delay = 0, ...args) => {
        const timerId = (0, import_fast_unique_numbers.generateUniqueNumber)(scheduledIntervalFunctions);
        scheduledIntervalFunctions.set(timerId, () => {
          func(...args);
          if (typeof scheduledIntervalFunctions.get(timerId) === "function") {
            worker2.postMessage({
              id: null,
              method: "set",
              params: {
                delay,
                now: performance.timeOrigin + performance.now(),
                timerId,
                timerType: "interval"
              }
            });
          }
        });
        worker2.postMessage({
          id: null,
          method: "set",
          params: {
            delay,
            now: performance.timeOrigin + performance.now(),
            timerId,
            timerType: "interval"
          }
        });
        return timerId;
      };
      const setTimeout3 = (func, delay = 0, ...args) => {
        const timerId = (0, import_fast_unique_numbers.generateUniqueNumber)(scheduledTimeoutFunctions);
        scheduledTimeoutFunctions.set(timerId, () => func(...args));
        worker2.postMessage({
          id: null,
          method: "set",
          params: {
            delay,
            now: performance.timeOrigin + performance.now(),
            timerId,
            timerType: "timeout"
          }
        });
        return timerId;
      };
      return {
        clearInterval,
        clearTimeout,
        setInterval: setInterval2,
        setTimeout: setTimeout3
      };
    };

    // node_modules/worker-timers/build/es2019/factories/load-or-return-broker.js
    var createLoadOrReturnBroker = (loadBroker, worker2) => {
      let broker = null;
      return () => {
        if (broker !== null) {
          return broker;
        }
        const blob = new Blob([worker2], { type: "application/javascript; charset=utf-8" });
        const url = URL.createObjectURL(blob);
        broker = loadBroker(url);
        setTimeout(() => URL.revokeObjectURL(url));
        return broker;
      };
    };

    // node_modules/worker-timers/build/es2019/worker/worker.js
    var worker = `(()=>{"use strict";const e=new Map,t=new Map,r=t=>{const r=e.get(t);return void 0!==r&&(clearTimeout(r),e.delete(t),!0)},s=e=>{const r=t.get(e);return void 0!==r&&(clearTimeout(r),t.delete(e),!0)},o=(e,t)=>{const r=performance.now(),s=e+t-r-performance.timeOrigin;return{expected:r+s,remainingDelay:s}},i=(e,t,r,s)=>{const o=r-performance.now();o>0?e.set(t,setTimeout(i,o,e,t,r,s)):(e.delete(t),postMessage({id:null,method:"call",params:{timerId:t,timerType:s}}))};addEventListener("message",(n=>{let{data:a}=n;try{if("clear"===a.method){const{id:e,params:{timerId:t,timerType:o}}=a;if("interval"===o)postMessage({id:e,result:r(t)});else{if("timeout"!==o)throw new Error('The given type "'.concat(o,'" is not supported'));postMessage({id:e,result:s(t)})}}else{if("set"!==a.method)throw new Error('The given method "'.concat(a.method,'" is not supported'));{const{params:{delay:r,now:s,timerId:n,timerType:m}}=a;if("interval"===m)((t,r,s)=>{const{expected:n,remainingDelay:a}=o(t,s);e.set(r,setTimeout(i,a,e,r,n,"interval"))})(r,n,s);else{if("timeout"!==m)throw new Error('The given type "'.concat(m,'" is not supported'));((e,r,s)=>{const{expected:n,remainingDelay:a}=o(e,s);t.set(r,setTimeout(i,a,t,r,n,"timeout"))})(r,n,s)}}}}catch(e){postMessage({error:{message:e.message},id:a.id,result:null})}}))})();`;

    // node_modules/worker-timers/build/es2019/module.js
    var loadOrReturnBroker = createLoadOrReturnBroker(load, worker);
    var setInterval = (...args) => loadOrReturnBroker().setInterval(...args);
    var setTimeout2 = (...args) => loadOrReturnBroker().setTimeout(...args);

    return [setInterval, setTimeout2]
  })();
  workerTimersSetInterval(function () {
    try {
      if (!kx.reconnect.enabled && kx.ΔⵠⲆⵠⵠ) {
        kx.ᐃΔⲆᐃᐃ.ᐃⲆᐃ();
      }
    } catch { }
  }, 2e3);
  workerTimersSetInterval(function () {
    try {
      if (!kx.reconnect.enabled && kx.ΔⵠⲆⵠⵠ) {
        mx.ping();
      }
    } catch { }
  }, 1000 * 60);
  var vx = 0;
  function wx() {
    xx.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", true);
    xx.send();
  }
  var xx = new XMLHttpRequest();
  function yx(b, c, d, e) {
    Oj(io, b, c, d, e);
    var f;
    var g;
    var h;
    return (55920 + (Zs(bo[0], bo[1], bo[2], bo[3]) ^ (f = bo[0], g = bo[1], h = bo[2], Xe(io, f, g, h), ((76 + (qt(bo[0], bo[1], bo[2]) ^ cx(bo[0], bo[1]))) * 16807 + 0) % 2147483647))) % 65432;
  }
  function zx(b, c, d, e, f) {
    const i = (b | 6031) & ~(b & 6031);
    const a = (0 << (c & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 8 & 255));
    const j = (8 << (d >> 24 & 255)) + (24 << (d >> 8 & 255)) + (16 << (d >> 16 & 255)) + (0 << (d >> 0 & 255));
    const k = ~(e & 61118) & e | ~(e & 61118) & 61118;
    const h = (8 << (f >> 8 & 255)) + (16 << (f >> 16 & 255)) + (24 << (f >> 24 & 255)) + (0 << (f & 255));
    const g = Br(i, a, j, k, h, i);
    const l = nf(a, j, 0, h, i);
    return (24 << ((g ^ l) & 255)) + (0 << ((g ^ l) >> 24 & 255)) + (8 << ((g ^ l) >> 8 & 255)) + (16 << ((g ^ l) >> 16 & 255));
  }
  function Ax(b, c, d, e, f) {
    const g = (16 << (b & 255)) + (0 << (b >> 16 & 255)) + (24 << (b >> 8 & 255)) + (8 << (b >> 24 & 255));
    const a = ~(c & 17333) & 17333 | ~(c & 17333) & c;
    const i = (d + 9503) % 65472;
    const j = rt(g, a, i, (16 << (e & 255)) + (0 << (e >> 8 & 255)) + (24 << (e >> 16 & 255)) + (8 << (e >> 24 & 255)), (f | 64432) & ~(f & 64432));
    Jw(g, a, i);
    return ~(j & 2734) & (j | 2734);
  }
  xx.onreadystatechange = function () {
    if (this.readyState === 4) {
      this.status;
    }
  };
  var Bx = "https://token.starve.io/";
  var Cx = "https://token2.starve.io/";
  var Dx = 0;
  var Ex = 1;
  var Fx = 4;
  var Gx = undefined;
  var Hx = gs;
  var Ix = undefined;
  var Jx = 0;
  sa.ᐃΔΔⵠᐃΔᐃ = function () {
    Jx = 1;
  };
  var Kx = {
    ⲆΔᐃⵠⲆᐃΔⵠᐃΔⵠ: "ACCESS_TOKEN"
  };
  var Lx = document.createElement("script");
  Lx.type = "text/javascript";
  Lx.async = Vk;
  Lx.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  Lx.addEventListener("load", function (a) {
    sa.XPayStationWidget.init(Kx);
    sa.XPayStationWidget.on("status-done", Sx);
  }, Eh);
  document.getElementsByTagName("head")[0].appendChild(Lx);
  sa.fbAsyncInit = function () {
    Ux();
    console.log(undefined);
  };
  (function (a, b, c) {
    var d;
    var e = a.getElementsByTagName(b)[0];
    if (!a.getElementById(c)) {
      (d = a.createElement(b)).id = c;
      d.src = "https://connect.facebook.net/en_US/sdk.js";
      e.parentNode.insertBefore(d, e);
    }
  })(document, "script", "facebook-jssdk");
  var Mx = undefined;
  var Nx = Vh;
  function Ox() {
    sa.gapi.auth2.init({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      (Mx = a).isSignedIn.listen(Px);
      Mx.currentUser.listen(Qx);
      if (Mx.isSignedIn.get()) {
        Mx.signIn();
      }
      Rx();
    });
  }
  function Px(a) { }
  function Qx(a) {
    if (Hx === hj && Fn !== Nx && (Hx = Nx.getAuthResponse().id_token, mg !== Hx)) {
      Gx = Dx;
      Ix = Nx.getBasicProfile().getId();
      sa.ᐃΔΔⵠᐃΔᐃ();
      return;
    }
    if (a !== jq && a.isSignedIn() === true) {
      Ix = (Nx = a).id;
      Ix = Nx.getBasicProfile().getId();
      Hx = Nx.getAuthResponse().id_token;
      Gx = Dx;
      sa.ᐃΔΔⵠᐃΔᐃ();
    }
  }
  function Rx() {
    if (Mx) {
      Nx = Mx.currentUser.get();
    }
  }
  function Sx() {
    var a = new XMLHttpRequest();
    a.open("GET", Bx + "claimBread?userid=" + Ix);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          ix.Δᐃⵠᐃⵠ = b;
        }
      }
    };
    a.send();
  }
  function Tx(a) {
    var b = new XMLHttpRequest();
    b.open("GET", Bx + "setRegion?token=" + Hx + "&userid=" + Ix + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (b.responseText !== "0") {
          ix.ᐃⲆΔΔ(ix.ⲆⲆᐃᐃⲆ);
        } else {
          ix.ᐃⲆΔΔ(ix.ⵠⵠⵠᐃΔ);
        }
      }
    };
    b.send();
  }
  function Ux() {
    if (sa.FB) {
      sa.FB.init({
        xfbml: qq,
        version: "v15.0",
        appId: "642017356260407",
        cookie: _q
      });
    }
    if (gs === Ix) {
      (function () {
        try {
          if (sa.FB && sa.FB.getUserID()) {
            Ix = sa.FB.getUserID();
            if (Hx === Tg) {
              sa.FB.getLoginStatus(function () {
                Gx = Ex;
                Hx = sa.FB.getAuthResponse().accessToken;
                sa.ᐃΔΔⵠᐃΔᐃ(Ix);
              });
            }
          }
        } catch (a) { }
        try {
          Ix = Nx.getBasicProfile().getId();
        } catch (a) { }
      })();
    }
  }
  function Vx(b, c, d, e) {
    b = b === wh ? ix.ΔΔⲆⵠΔⲆΔ : b;
    c = c === undefined ? ix.ⲆⵠⲆⵠᐃⲆⲆ : c;
    d = d === Yk ? ix.ⵠᐃᐃΔⲆⲆⵠ : d;
    e = e === undefined ? ix.ΔΔⵠᐃⲆᐃΔ : e;
    if (b !== ix.ΔΔⲆⵠΔⲆΔ || ix.ⲆⵠⲆⵠᐃⲆⲆ !== c || ix.ⵠᐃᐃΔⲆⲆⵠ !== d || ix.ΔΔⵠᐃⲆᐃΔ !== e) {
      ix.ΔΔⲆⵠΔⲆΔ = b;
      ix.ⲆⵠⲆⵠᐃⲆⲆ = c;
      ix.ⵠᐃᐃΔⲆⲆⵠ = d;
      ix.ΔΔⵠᐃⲆᐃΔ = e;
      if (e === ix.ⲆⲆΔΔⲆΔᐃ) {
        e = "0";
      } else if (e === ix.ⵠⵠⵠᐃΔⵠⲆ) {
        e = "1";
      } else if (e === ix.ⲆᐃⵠⲆᐃᐃΔ) {
        e = "2";
      } else if (e === ix.ᐃⵠⵠΔΔᐃᐃ) {
        e = "3";
      } else if (ix.ⵠΔⵠΔΔᐃᐃ === e) {
        e = "4";
      } else if (e === ix.ᐃΔᐃΔⵠⵠᐃ) {
        e = "5";
      }
      if (ix.ⲆⵠΔⵠⵠΔⲆ === c) {
        c = "total";
      } else if (ix.ⲆⲆΔᐃⵠⲆⵠ === c) {
        c = "normal";
      } else if (c === ix.ⵠⵠᐃΔᐃΔⵠ) {
        c = "zombie";
      } else if (ix.ᐃⲆᐃᐃⲆⲆⵠ === c) {
        c = "vampire";
      } else if (ix.ΔⲆⲆⵠⵠⵠⲆ === c) {
        c = "forest";
      }
      if (ix.ᐃⵠΔⲆⲆᐃᐃ === b) {
        b = "all";
      }
      if (ix.ⵠᐃᐃᐃⵠⲆⲆ === b) {
        b = "week";
      }
      if (b === ix.ᐃΔᐃⵠᐃΔΔ) {
        b = "today";
      }
      if (d === ix.ᐃᐃΔⲆⵠΔᐃ) {
        d = "kill";
      } else if (d === ix.ⵠᐃΔΔⲆⲆΔ) {
        d = "score";
      } else if (ix.ⵠⵠⵠⵠⵠⵠᐃ === d) {
        d = "time";
      }
      var f = new XMLHttpRequest();
      f.open("GET", Bx + "leaderboard?range=" + b + "&mode=" + c + "&sort=" + d + "&season=" + e);
      f.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      f.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && f.responseText !== "0") {
          for (var a = JSON.parse(f.responseText), b = "", c = 0; a.length > c; c++) {
            ᐃⵠΔⵠΔ = a[c];
            var d = ᐃⵠΔⵠΔ[1];
            try {
              if (d.indexOf("Starver#") === -1) {
                d = sa.decodeURIComponent(sa.escape(sa.atob(d)));
              }
            } catch (a) { }
            b += "<div class=\"lineLeaderboard\">";
            b += "<div class=\"rank\">";
            b += c + 1 + "";
            b += "</div>";
            b += "<div class=\"name\">";
            b += d;
            b += "</div>";
            b += "<div class=\"lvl\">";
            b += ix.ᐃΔΔᐃΔⲆⲆ(ᐃⵠΔⵠΔ[6]) + 1 + "";
            b += "</div>";
            b += "<div class=\"kills\">";
            b += ᐃⵠΔⵠΔ[5] + "";
            b += "</div>";
            b += "<div class=\"time\">";
            b += ᐃⵠΔⵠΔ[4] + "";
            b += "</div>";
            b += "<div class=\"score\">";
            b += ᐃⵠΔⵠΔ[3] + "";
            b += "</div>";
            b += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = b;
        }
      };
      f.send();
    }
  }
  function Wx(a, b) {
    if (ix.Δᐃⵠᐃⵠ < b) {
      ix.ᐃⲆΔΔ(ix.ᐃⲆᐃᐃΔ);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", Bx + "buyKit?token=" + Hx + "&userid=" + Ix + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          ix.Δᐃⵠᐃⵠ -= b;
          ix.ΔᐃⲆᐃΔ = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  function Xx(a, b) {
    if (ix.ᐃΔⵠᐃᐃ <= 0) {
      if (b > ix.Δᐃⵠᐃⵠ) {
        ix.ᐃⲆΔΔ(ix.ᐃⲆᐃᐃΔ);
      } else {
        ix.ᐃΔⵠᐃᐃ = 2;
        ix.ⲆⲆᐃⵠΔⵠᐃ = 0;
        ix.ΔΔⵠᐃΔᐃⲆ = 100;
        var c = new XMLHttpRequest();
        c.open("GET", Bx + "buySpin?token=" + Hx + "&userid=" + Ix + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              ix.ΔⵠⵠⵠᐃᐃⲆᐃΔ(a.rand * Math.PI * 2, a.type, a.id);
              ix.Δᐃⵠᐃⵠ -= b;
            } else {
              ix.ᐃΔⵠᐃᐃ = 0;
            }
          }
        };
        c.send();
      }
    }
  }
  if (sa.ΔᐃⵠᐃⲆⵠⵠ) {
    var Yx = sa.Math.acos;
    sa.Math.acos = sa.Math.asin;
    sa.Math.asin = Yx;
    var Zx = sa.Math.acos;
    sa.Math.acos = sa.Math.asin;
    sa.Math.asin = Zx;
  }
  function $x(a) {
    if (Ix) {
      var b = new XMLHttpRequest();
      b.open("GET", Bx + "xsolla?userid=" + Ix + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
          Kx.access_token = b.responseText;
          sa.XPayStationWidget.init(Kx);
          sa.XPayStationWidget.open();
        }
      };
      b.send();
    }
  }
  function _x() {
    if (ix.Δᐃⵠᐃⵠ >= 300 || ix.ᐃⵠΔⲆΔᐃᐃ <= 0) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= 1 && a.length <= 20) {
        var b = new XMLHttpRequest();
        b.open("GET", Bx + "changeNickname?token=" + Hx + "&userid=" + Ix + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (a > 0) {
              ix.Δᐃⵠᐃⵠ -= a;
            }
            ix.ᐃⵠΔⲆΔᐃᐃ = 1;
            ix.ᐃⲆΔΔ(ix.ΔⲆᐃⵠΔ);
          }
        };
        b.send();
      }
    }
  }
})();
